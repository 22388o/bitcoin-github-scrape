[
  {
    "sha": "73cd4edb4f1ff98c20549a609e96fa40834f5e73",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3M2NkNGVkYjRmMWZmOThjMjA1NDlhNjA5ZTk2ZmE0MDgzNGY1ZTcz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-16T21:27:12Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-17T08:31:27Z"
      },
      "message": "qt: avoid hard-coding font names\n\nThey may not contain all necessary characters for a language",
      "tree": {
        "sha": "1f120418e2549434bdc419fd21fe1e2c0163486e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f120418e2549434bdc419fd21fe1e2c0163486e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/73cd4edb4f1ff98c20549a609e96fa40834f5e73",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73cd4edb4f1ff98c20549a609e96fa40834f5e73",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/73cd4edb4f1ff98c20549a609e96fa40834f5e73",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73cd4edb4f1ff98c20549a609e96fa40834f5e73/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "52954e6efd373c14736237c4c79769bf00f5dfb8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52954e6efd373c14736237c4c79769bf00f5dfb8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/52954e6efd373c14736237c4c79769bf00f5dfb8"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e6a7fcaec5db2bfb4a06b2812f35bb9f5719deb9",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73cd4edb4f1ff98c20549a609e96fa40834f5e73/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73cd4edb4f1ff98c20549a609e96fa40834f5e73/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=73cd4edb4f1ff98c20549a609e96fa40834f5e73",
        "patch": "@@ -42,7 +42,7 @@ SplashScreen::SplashScreen(Qt::WindowFlags f, const NetworkStyle *networkStyle)\n     QString copyrightText   = QChar(0xA9)+QString(\" 2009-%1 \").arg(COPYRIGHT_YEAR) + QString(tr(\"The Bitcoin Core developers\"));\n     QString titleAddText    = networkStyle->getTitleAddText();\n \n-    QString font            = \"Arial\";\n+    QString font            = QApplication::font().toString();\n \n     // create a bitmap according to device pixelratio\n     QSize splashSize(480*devicePixelRatio,320*devicePixelRatio);"
      }
    ]
  },
  {
    "sha": "1a25a7edf82706c3152e2d978d320ec465a34de1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTI1YTdlZGY4MjcwNmMzMTUyZTJkOTc4ZDMyMGVjNDY1YTM0ZGUx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-01-17T15:34:27Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-01-17T16:56:55Z"
      },
      "message": "[QA] fix httpbasic keep-alive test",
      "tree": {
        "sha": "6bcd8ca74125377e42f38d11044cb784c9f15a44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6bcd8ca74125377e42f38d11044cb784c9f15a44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a25a7edf82706c3152e2d978d320ec465a34de1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a25a7edf82706c3152e2d978d320ec465a34de1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a25a7edf82706c3152e2d978d320ec465a34de1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a25a7edf82706c3152e2d978d320ec465a34de1/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7d2cb485116636595250fce4ea4eab16a877479b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d2cb485116636595250fce4ea4eab16a877479b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d2cb485116636595250fce4ea4eab16a877479b"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "24533741e55375d53625ccf897adbf5d31dd536e",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a25a7edf82706c3152e2d978d320ec465a34de1/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a25a7edf82706c3152e2d978d320ec465a34de1/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=1a25a7edf82706c3152e2d978d320ec465a34de1",
        "patch": "@@ -35,13 +35,13 @@ def run_test(self):\n         \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n-        conn.request('GET', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n         \n         #send 2nd request without closing connection\n-        conn.request('GET', '/', '{\"method\": \"getchaintips\"}', headers)\n+        conn.request('POST', '/', '{\"method\": \"getchaintips\"}', headers)\n         out2 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True) #must also response with a correct json-rpc message\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n@@ -52,13 +52,13 @@ def run_test(self):\n         \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n-        conn.request('GET', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n         \n         #send 2nd request without closing connection\n-        conn.request('GET', '/', '{\"method\": \"getchaintips\"}', headers)\n+        conn.request('POST', '/', '{\"method\": \"getchaintips\"}', headers)\n         out2 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True) #must also response with a correct json-rpc message\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n@@ -69,7 +69,7 @@ def run_test(self):\n         \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n-        conn.request('GET', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, False) #now the connection must be closed after the response        \n@@ -81,7 +81,7 @@ def run_test(self):\n                 \n         conn = httplib.HTTPConnection(urlNode1.hostname, urlNode1.port)\n         conn.connect()\n-        conn.request('GET', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, False) #connection must be closed because keep-alive was set to false\n@@ -93,10 +93,10 @@ def run_test(self):\n                 \n         conn = httplib.HTTPConnection(urlNode2.hostname, urlNode2.port)\n         conn.connect()\n-        conn.request('GET', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n-        assert_equal(conn.sock!=None, False) #connection must be closed because bitcoind should use keep-alive by default\n+        assert_equal(conn.sock!=None, True) #connection must be closed because bitcoind should use keep-alive by default\n         \n if __name__ == '__main__':\n     HTTPBasicsTest ().main ()"
      }
    ]
  },
  {
    "sha": "a0abff2755d17b5ff36f977a894a8128c75b4445",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMGFiZmYyNzU1ZDE3YjVmZjM2Zjk3N2E4OTRhODEyOGM3NWI0NDQ1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-19T11:12:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-19T11:12:25Z"
      },
      "message": "Merge pull request #5674\n\n1a25a7e [QA] fix httpbasic keep-alive test (Jonas Schnelli)\n7d2cb48 Restore RPC HTTP keepalives to default. (Gregory Maxwell)",
      "tree": {
        "sha": "6bcd8ca74125377e42f38d11044cb784c9f15a44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6bcd8ca74125377e42f38d11044cb784c9f15a44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a0abff2755d17b5ff36f977a894a8128c75b4445",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUvOaZAAoJEHSBCwEjRsmmassH/jkD5LcpbLz6Ye0Bq+rWVfhW\ngqnXlVK4AI380Y+9ZadKUu7lE0MSvUxSvcI/cL8O1lHQBe22XxkcshbH38ccRz3R\n4z1x0xbhSmd+bEjACZM19lhxoUH16nk/+GarTm8EzKwhCtXSs0zfXU3Gznyoz2bA\n4sIZN7bntf15M1ZCitmQjc9GkmJqHHIBIbnmPgtsQjQe2xKn8RInuHW78vl98BKH\nemXCsadOphaq37O68YXAps+R2OFtowXGO6ENM0L3vhiBGsUBAKeV5T/WIGZDmES5\nhg63VkleYeucMT3pWXhmgoWSmtwZfwNWgYaiDENV4PhlQQPYGw3f5mZKZ8EAYLk=\n=OSDm\n-----END PGP SIGNATURE-----",
        "payload": "tree 6bcd8ca74125377e42f38d11044cb784c9f15a44\nparent 9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf\nparent 1a25a7edf82706c3152e2d978d320ec465a34de1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1421665932 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1421665945 +0100\n\nMerge pull request #5674\n\n1a25a7e [QA] fix httpbasic keep-alive test (Jonas Schnelli)\n7d2cb48 Restore RPC HTTP keepalives to default. (Gregory Maxwell)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0abff2755d17b5ff36f977a894a8128c75b4445",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a0abff2755d17b5ff36f977a894a8128c75b4445",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0abff2755d17b5ff36f977a894a8128c75b4445/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf"
      },
      {
        "sha": "1a25a7edf82706c3152e2d978d320ec465a34de1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a25a7edf82706c3152e2d978d320ec465a34de1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a25a7edf82706c3152e2d978d320ec465a34de1"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "24533741e55375d53625ccf897adbf5d31dd536e",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0abff2755d17b5ff36f977a894a8128c75b4445/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0abff2755d17b5ff36f977a894a8128c75b4445/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=a0abff2755d17b5ff36f977a894a8128c75b4445",
        "patch": "@@ -35,13 +35,13 @@ def run_test(self):\n         \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n-        conn.request('GET', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n         \n         #send 2nd request without closing connection\n-        conn.request('GET', '/', '{\"method\": \"getchaintips\"}', headers)\n+        conn.request('POST', '/', '{\"method\": \"getchaintips\"}', headers)\n         out2 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True) #must also response with a correct json-rpc message\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n@@ -52,13 +52,13 @@ def run_test(self):\n         \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n-        conn.request('GET', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n         \n         #send 2nd request without closing connection\n-        conn.request('GET', '/', '{\"method\": \"getchaintips\"}', headers)\n+        conn.request('POST', '/', '{\"method\": \"getchaintips\"}', headers)\n         out2 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True) #must also response with a correct json-rpc message\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n@@ -69,7 +69,7 @@ def run_test(self):\n         \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n-        conn.request('GET', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, False) #now the connection must be closed after the response        \n@@ -81,7 +81,7 @@ def run_test(self):\n                 \n         conn = httplib.HTTPConnection(urlNode1.hostname, urlNode1.port)\n         conn.connect()\n-        conn.request('GET', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, False) #connection must be closed because keep-alive was set to false\n@@ -93,10 +93,10 @@ def run_test(self):\n                 \n         conn = httplib.HTTPConnection(urlNode2.hostname, urlNode2.port)\n         conn.connect()\n-        conn.request('GET', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n-        assert_equal(conn.sock!=None, False) #connection must be closed because bitcoind should use keep-alive by default\n+        assert_equal(conn.sock!=None, True) #connection must be closed because bitcoind should use keep-alive by default\n         \n if __name__ == '__main__':\n     HTTPBasicsTest ().main ()"
      },
      {
        "sha": "b58d1746e8bd0ad6959698509a8b1ae43bf94b9c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0abff2755d17b5ff36f977a894a8128c75b4445/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0abff2755d17b5ff36f977a894a8128c75b4445/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a0abff2755d17b5ff36f977a894a8128c75b4445",
        "patch": "@@ -380,7 +380,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \"  -rpcport=<port>        \" + strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), 8332, 18332) + \"\\n\";\n     strUsage += \"  -rpcallowip=<ip>       \" + _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\") + \"\\n\";\n     strUsage += \"  -rpcthreads=<n>        \" + strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), 4) + \"\\n\";\n-    strUsage += \"  -rpckeepalive          \" + strprintf(_(\"RPC support for HTTP persistent connections (default: %d)\"), 0) + \"\\n\";\n+    strUsage += \"  -rpckeepalive          \" + strprintf(_(\"RPC support for HTTP persistent connections (default: %d)\"), 1) + \"\\n\";\n \n     strUsage += \"\\n\" + _(\"RPC SSL options: (see the Bitcoin Wiki for SSL setup instructions)\") + \"\\n\";\n     strUsage += \"  -rpcssl                                  \" + _(\"Use OpenSSL (https) for JSON-RPC connections\") + \"\\n\";"
      },
      {
        "sha": "cb87142902d4642045646eee74cdee770d4e1e95",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0abff2755d17b5ff36f977a894a8128c75b4445/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0abff2755d17b5ff36f977a894a8128c75b4445/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=a0abff2755d17b5ff36f977a894a8128c75b4445",
        "patch": "@@ -953,7 +953,7 @@ void ServiceConnection(AcceptedConnection *conn)\n         ReadHTTPMessage(conn->stream(), mapHeaders, strRequest, nProto, MAX_SIZE);\n \n         // HTTP Keep-Alive is false; close connection immediately\n-        if ((mapHeaders[\"connection\"] == \"close\") || (!GetBoolArg(\"-rpckeepalive\", false)))\n+        if ((mapHeaders[\"connection\"] == \"close\") || (!GetBoolArg(\"-rpckeepalive\", true)))\n             fRun = false;\n \n         // Process via JSON-RPC API"
      }
    ]
  },
  {
    "sha": "e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMWFlY2FlMzNhNjcyYjAwZmFjMzFiNmMzY2M0YzJmNmE4MzNlYmZi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-19T11:21:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-19T11:31:54Z"
      },
      "message": "Merge pull request #5671\n\n73cd4ed qt: avoid hard-coding font names (Cory Fields)\n52954e6 qt: fix broken unicode chars on osx 10.10 (Cory Fields)\nf5ad78b qt: fonts: allow SubstituteFonts to filter based on user's language (Cory Fields)",
      "tree": {
        "sha": "ad29e17291e6e138d5f68bfa37550c2b0e3476e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad29e17291e6e138d5f68bfa37550c2b0e3476e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUvOsqAAoJEHSBCwEjRsmmNJYH+wc3YdMqDNb6rSJB781tL7b+\n8gs8mNgzLM1XRhk25FoXYnkxQ5cfIcwCL1wkIYT7l203y9c0OrenRXcvgH8yGM46\nMhebxKK3dKBcEbEtZUmytsJPLwvjql6LMrfgsiD5qThiUKPOnKjZb24poQxvaDDJ\nZ7fC9LG8ydlJH+nRqoto0JGZylsiljZwWyI3ZB5qtcusTZPCaU7/OKFlw29IEuNk\nc2ewa6tFaJh7wOLj1XDVVQXPTiku5+/rYKKn6F9IMUNu5bGvVhl90p7/nG+k7m50\nYHS7SBFcZjYoXA6ysLnByegqtAqsckQSHCESFDFejUhfGFq33RrntUsBdmXuCg0=\n=AYp/\n-----END PGP SIGNATURE-----",
        "payload": "tree ad29e17291e6e138d5f68bfa37550c2b0e3476e5\nparent a0abff2755d17b5ff36f977a894a8128c75b4445\nparent 73cd4edb4f1ff98c20549a609e96fa40834f5e73\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1421666477 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1421667114 +0100\n\nMerge pull request #5671\n\n73cd4ed qt: avoid hard-coding font names (Cory Fields)\n52954e6 qt: fix broken unicode chars on osx 10.10 (Cory Fields)\nf5ad78b qt: fonts: allow SubstituteFonts to filter based on user's language (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a0abff2755d17b5ff36f977a894a8128c75b4445",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0abff2755d17b5ff36f977a894a8128c75b4445",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a0abff2755d17b5ff36f977a894a8128c75b4445"
      },
      {
        "sha": "73cd4edb4f1ff98c20549a609e96fa40834f5e73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73cd4edb4f1ff98c20549a609e96fa40834f5e73",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/73cd4edb4f1ff98c20549a609e96fa40834f5e73"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 41,
      "deletions": 15
    },
    "files": [
      {
        "sha": "73c684e4893fc0fd9180be544ecd1b4ad02d45f3",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 10,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
        "patch": "@@ -89,10 +89,24 @@ static std::string Translate(const char* psz)\n     return QCoreApplication::translate(\"bitcoin-core\", psz).toStdString();\n }\n \n+static QString GetLangTerritory()\n+{\n+    QSettings settings;\n+    // Get desired locale (e.g. \"de_DE\")\n+    // 1) System default language\n+    QString lang_territory = QLocale::system().name();\n+    // 2) Language from QSettings\n+    QString lang_territory_qsettings = settings.value(\"language\", \"\").toString();\n+    if(!lang_territory_qsettings.isEmpty())\n+        lang_territory = lang_territory_qsettings;\n+    // 3) -lang command line argument\n+    lang_territory = QString::fromStdString(GetArg(\"-lang\", lang_territory.toStdString()));\n+    return lang_territory;\n+}\n+\n /** Set up translations */\n static void initTranslations(QTranslator &qtTranslatorBase, QTranslator &qtTranslator, QTranslator &translatorBase, QTranslator &translator)\n {\n-    QSettings settings;\n \n     // Remove old translators\n     QApplication::removeTranslator(&qtTranslatorBase);\n@@ -102,13 +116,7 @@ static void initTranslations(QTranslator &qtTranslatorBase, QTranslator &qtTrans\n \n     // Get desired locale (e.g. \"de_DE\")\n     // 1) System default language\n-    QString lang_territory = QLocale::system().name();\n-    // 2) Language from QSettings\n-    QString lang_territory_qsettings = settings.value(\"language\", \"\").toString();\n-    if(!lang_territory_qsettings.isEmpty())\n-        lang_territory = lang_territory_qsettings;\n-    // 3) -lang command line argument\n-    lang_territory = QString::fromStdString(GetArg(\"-lang\", lang_territory.toStdString()));\n+    QString lang_territory = GetLangTerritory();\n \n     // Convert to \"de\" only by truncating \"_DE\"\n     QString lang = lang_territory;\n@@ -498,8 +506,6 @@ int main(int argc, char *argv[])\n     Q_INIT_RESOURCE(bitcoin);\n     Q_INIT_RESOURCE(bitcoin_locale);\n \n-    GUIUtil::SubstituteFonts();\n-\n     BitcoinApplication app(argc, argv);\n #if QT_VERSION > 0x050100\n     // Generate high-dpi pixmaps\n@@ -521,6 +527,7 @@ int main(int argc, char *argv[])\n     QApplication::setOrganizationName(QAPP_ORG_NAME);\n     QApplication::setOrganizationDomain(QAPP_ORG_DOMAIN);\n     QApplication::setApplicationName(QAPP_APP_NAME_DEFAULT);\n+    GUIUtil::SubstituteFonts(GetLangTerritory());\n \n     /// 4. Initialization of translations, so that intro dialog is in user's language\n     // Now that QSettings are accessible, initialize translations"
      },
      {
        "sha": "8ad9b30624b60267714efdeefe5189ad88de605a",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 3,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
        "patch": "@@ -67,6 +67,9 @@ static boost::filesystem::detail::utf8_codecvt_facet utf8;\n \n #if defined(Q_OS_MAC)\n extern double NSAppKitVersionNumber;\n+#if !defined(NSAppKitVersionNumber10_8)\n+#define NSAppKitVersionNumber10_8 1187\n+#endif\n #if !defined(NSAppKitVersionNumber10_9)\n #define NSAppKitVersionNumber10_9 1265\n #endif\n@@ -383,7 +386,7 @@ void openDebugLogfile()\n         QDesktopServices::openUrl(QUrl::fromLocalFile(boostPathToQString(pathDebug)));\n }\n \n-void SubstituteFonts()\n+void SubstituteFonts(const QString& language)\n {\n #if defined(Q_OS_MAC)\n // Background:\n@@ -393,12 +396,28 @@ void SubstituteFonts()\n // If this fallback is not properly loaded, some characters may fail to\n // render correctly.\n //\n+// The same thing happened with 10.10. .Helvetica Neue DeskInterface is now default.\n+//\n // Solution: If building with the 10.7 SDK or lower and the user's platform\n // is 10.9 or higher at runtime, substitute the correct font. This needs to\n // happen before the QApplication is created.\n #if defined(MAC_OS_X_VERSION_MAX_ALLOWED) && MAC_OS_X_VERSION_MAX_ALLOWED < MAC_OS_X_VERSION_10_8\n-    if (floor(NSAppKitVersionNumber) >= NSAppKitVersionNumber10_9)\n-        QFont::insertSubstitution(\".Lucida Grande UI\", \"Lucida Grande\");\n+    if (floor(NSAppKitVersionNumber) > NSAppKitVersionNumber10_8)\n+    {\n+        if (floor(NSAppKitVersionNumber) <= NSAppKitVersionNumber10_9)\n+            /* On a 10.9 - 10.9.x system */\n+            QFont::insertSubstitution(\".Lucida Grande UI\", \"Lucida Grande\");\n+        else\n+        {\n+            /* 10.10 or later system */\n+            if (language == \"zh_CN\" || language == \"zh_TW\" || language == \"zh_HK\") // traditional or simplified Chinese\n+              QFont::insertSubstitution(\".Helvetica Neue DeskInterface\", \"Heiti SC\");\n+            else if (language == \"ja\") // Japanesee\n+              QFont::insertSubstitution(\".Helvetica Neue DeskInterface\", \"Songti SC\");\n+            else\n+              QFont::insertSubstitution(\".Helvetica Neue DeskInterface\", \"Lucida Grande\");\n+        }\n+    }\n #endif\n #endif\n }"
      },
      {
        "sha": "bcbb540c37e4f20cc1dfe9f755b1b3e4bc510c02",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
        "patch": "@@ -107,7 +107,7 @@ namespace GUIUtil\n     void openDebugLogfile();\n \n     // Replace invalid default fonts with known good ones\n-    void SubstituteFonts();\n+    void SubstituteFonts(const QString& language);\n \n     /** Qt event filter that intercepts ToolTipChange events, and replaces the tooltip with a rich text\n       representation if needed. This assures that Qt can word-wrap long tooltip messages."
      },
      {
        "sha": "e6a7fcaec5db2bfb4a06b2812f35bb9f5719deb9",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
        "patch": "@@ -42,7 +42,7 @@ SplashScreen::SplashScreen(Qt::WindowFlags f, const NetworkStyle *networkStyle)\n     QString copyrightText   = QChar(0xA9)+QString(\" 2009-%1 \").arg(COPYRIGHT_YEAR) + QString(tr(\"The Bitcoin Core developers\"));\n     QString titleAddText    = networkStyle->getTitleAddText();\n \n-    QString font            = \"Arial\";\n+    QString font            = QApplication::font().toString();\n \n     // create a bitmap according to device pixelratio\n     QSize splashSize(480*devicePixelRatio,320*devicePixelRatio);"
      }
    ]
  },
  {
    "sha": "28ee7e8b8c658bab4a5e13a13254950e226453a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOGVlN2U4YjhjNjU4YmFiNGE1ZTEzYTEzMjU0OTUwZTIyNjQ1M2E3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-19T14:33:55Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-19T14:37:48Z"
      },
      "message": "Get rid of DetectShutdownThread\n\nThe main thread spends time waiting for the DetectShutdownThread.\nSo why not just run this waiting loop function in the main thread?\n\nOne thread-stack less saves 4MB of virtual memory on 32-bit, and 8MB on\n64-bit.",
      "tree": {
        "sha": "2f2af0781de370ce41c05455d2a987e6038d3d76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2f2af0781de370ce41c05455d2a987e6038d3d76"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28ee7e8b8c658bab4a5e13a13254950e226453a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28ee7e8b8c658bab4a5e13a13254950e226453a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28ee7e8b8c658bab4a5e13a13254950e226453a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28ee7e8b8c658bab4a5e13a13254950e226453a7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 3,
      "deletions": 13
    },
    "files": [
      {
        "sha": "a0a96c2dfa61750d9c8764852a11591940b10953",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 13,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28ee7e8b8c658bab4a5e13a13254950e226453a7/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28ee7e8b8c658bab4a5e13a13254950e226453a7/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=28ee7e8b8c658bab4a5e13a13254950e226453a7",
        "patch": "@@ -33,7 +33,7 @@\n \n static bool fDaemon;\n \n-void DetectShutdownThread(boost::thread_group* threadGroup)\n+void WaitForShutdown(boost::thread_group* threadGroup)\n {\n     bool fShutdown = ShutdownRequested();\n     // Tell the main threads to shutdown.\n@@ -56,7 +56,6 @@ void DetectShutdownThread(boost::thread_group* threadGroup)\n bool AppInit(int argc, char* argv[])\n {\n     boost::thread_group threadGroup;\n-    boost::thread* detectShutdownThread = NULL;\n \n     bool fRet = false;\n \n@@ -144,7 +143,6 @@ bool AppInit(int argc, char* argv[])\n #endif\n         SoftSetBoolArg(\"-server\", true);\n \n-        detectShutdownThread = new boost::thread(boost::bind(&DetectShutdownThread, &threadGroup));\n         fRet = AppInit2(threadGroup);\n     }\n     catch (const std::exception& e) {\n@@ -155,20 +153,12 @@ bool AppInit(int argc, char* argv[])\n \n     if (!fRet)\n     {\n-        if (detectShutdownThread)\n-            detectShutdownThread->interrupt();\n-\n         threadGroup.interrupt_all();\n         // threadGroup.join_all(); was left out intentionally here, because we didn't re-test all of\n         // the startup-failure cases to make sure they don't result in a hang due to some\n         // thread-blocking-waiting-for-another-thread-during-startup case\n-    }\n-\n-    if (detectShutdownThread)\n-    {\n-        detectShutdownThread->join();\n-        delete detectShutdownThread;\n-        detectShutdownThread = NULL;\n+    } else {\n+        WaitForShutdown(&threadGroup);\n     }\n     Shutdown();\n "
      }
    ]
  },
  {
    "sha": "f0172bf91ef521a0155cf1f0ae9fde1ab02157b3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMDE3MmJmOTFlZjUyMWEwMTU1Y2YxZjBhZTlmZGUxYWIwMjE1N2Iz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-20T05:20:44Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-20T06:49:20Z"
      },
      "message": "osx: bump build sdk to 10.9",
      "tree": {
        "sha": "f6a53c9a6c0cbd63d78bc4db095fe807891b0fb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6a53c9a6c0cbd63d78bc4db095fe807891b0fb0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 13,
      "deletions": 12
    },
    "files": [
      {
        "sha": "3c995be9a53522dae22ae9eb2bfb5b03c6a7b86d",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=f0172bf91ef521a0155cf1f0ae9fde1ab02157b3",
        "patch": "@@ -33,7 +33,7 @@ matrix:\n     - compiler: \": 32-bit + dash\"\n       env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\" USE_SHELL=\"/bin/dash\"\n     - compiler: \": Cross-Mac\"\n-      env: HOST=x86_64-apple-darwin11 PACKAGES=\"cmake libcap-dev libz-dev libbz2-dev\" OSX_SDK=10.7 GOAL=\"deploy\"\n+      env: HOST=x86_64-apple-darwin11 PACKAGES=\"cmake libcap-dev libz-dev libbz2-dev\" OSX_SDK=10.9 GOAL=\"deploy\"\n     - compiler: \": Win64\"\n       env: HOST=x86_64-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui\" MAKEJOBS=\"-j2\"\n     - compiler: \": Win32\""
      },
      {
        "sha": "3ca42248d4e303e50cc82b18a05067212cfadb8a",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=f0172bf91ef521a0155cf1f0ae9fde1ab02157b3",
        "patch": "@@ -23,7 +23,7 @@ remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n   \"dir\": \"bitcoin\"\n files:\n-- \"MacOSX10.7.sdk.tar.gz\"\n+- \"MacOSX10.9.sdk.tar.gz\"\n script: |\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"x86_64-apple-darwin11\"\n@@ -72,7 +72,7 @@ script: |\n   BASEPREFIX=`pwd`/depends\n \n   mkdir -p ${BASEPREFIX}/SDKs\n-  tar -C ${BASEPREFIX}/SDKs -xf ${BUILD_DIR}/MacOSX10.7.sdk.tar.gz\n+  tar -C ${BASEPREFIX}/SDKs -xf ${BUILD_DIR}/MacOSX10.9.sdk.tar.gz\n \n   # Build dependencies for each host\n   for i in $HOSTS; do"
      },
      {
        "sha": "2958dc50cc8dc2995bfe81a3ab67050a63488001",
        "filename": "depends/hosts/darwin.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3/depends/hosts/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3/depends/hosts/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/darwin.mk?ref=f0172bf91ef521a0155cf1f0ae9fde1ab02157b3",
        "patch": "@@ -1,5 +1,5 @@\n-OSX_MIN_VERSION=10.6\n-OSX_SDK_VERSION=10.7\n+OSX_MIN_VERSION=10.7\n+OSX_SDK_VERSION=10.9\n OSX_SDK=$(SDK_PATH)/MacOSX$(OSX_SDK_VERSION).sdk\n LD64_VERSION=241.9\n darwin_CC=clang -target $(host) -mmacosx-version-min=$(OSX_MIN_VERSION) --sysroot $(OSX_SDK) -mlinker-version=$(LD64_VERSION)"
      },
      {
        "sha": "6c0c21c190bcd50703ecb741e51ec61d173e5b23",
        "filename": "doc/README_osx.txt",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3/doc/README_osx.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3/doc/README_osx.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README_osx.txt?ref=f0172bf91ef521a0155cf1f0ae9fde1ab02157b3",
        "patch": "@@ -29,14 +29,15 @@ originally done in toolchain4.\n \n To complicate things further, all builds must target an Apple SDK. These SDKs\n are free to download, but not redistributable.\n-To obtain it, register for a developer account, then download xcode4630916281a.dmg:\n-https://developer.apple.com/downloads/download.action?path=Developer_Tools/xcode_4.6.3/xcode4630916281a.dmg\n+To obtain it, register for a developer account, then download the XCode 6.1.1 dmg:\n+https://developer.apple.com/downloads/download.action?path=Developer_Tools/xcode_6.1.1/xcode_6.1.1.dmg\n+\n This file is several gigabytes in size, but only a single directory inside is\n-needed: Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk\n+needed: Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk\n \n Unfortunately, the usual linux tools (7zip, hpmount, loopback mount) are incapable of opening this file.\n To create a tarball suitable for gitian input, mount the dmg in OSX, then create it with:\n-  $ tar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.7.sdk.tar.gz MacOSX10.7.sdk\n+  $ tar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.9.sdk.tar.gz MacOSX10.9.sdk\n \n \n The gitian descriptors build 2 sets of files: Linux tools, then Apple binaries"
      },
      {
        "sha": "363465d827ec1af713b70420cd6bdf26c94052d2",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=f0172bf91ef521a0155cf1f0ae9fde1ab02157b3",
        "patch": "@@ -44,11 +44,11 @@ Release Process\n \n  Register and download the Apple SDK: (see OSX Readme for details)\n  \n- https://developer.apple.com/downloads/download.action?path=Developer_Tools/xcode_4.6.3/xcode4630916281a.dmg\n+ https://developer.apple.com/downloads/download.action?path=Developer_Tools/xcode_6.1.1/xcode_6.1.1.dmg\n  \n- Using a Mac, create a tarball for the 10.7 SDK and copy it to the inputs directory:\n+ Using a Mac, create a tarball for the 10.9 SDK and copy it to the inputs directory:\n  \n-\ttar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.7.sdk.tar.gz MacOSX10.7.sdk\n+\ttar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.9.sdk.tar.gz MacOSX10.9.sdk\n \n ###Optional: Seed the Gitian sources cache\n "
      }
    ]
  },
  {
    "sha": "88a797320ad0234c71e25e3aeffb3fb95563e1de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OGE3OTczMjBhZDAyMzRjNzFlMjVlM2FlZmZiM2ZiOTU1NjNlMWRl",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-20T00:08:05Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-01-20T08:32:54Z"
      },
      "message": "osx packaging: move background image to .background to match gitian builds\n\nAlso increase temp dmg filesize to account for a bigger background image",
      "tree": {
        "sha": "4e78ab69ce090f9352bf0949bbde4d15c98b216e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e78ab69ce090f9352bf0949bbde4d15c98b216e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/88a797320ad0234c71e25e3aeffb3fb95563e1de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88a797320ad0234c71e25e3aeffb3fb95563e1de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/88a797320ad0234c71e25e3aeffb3fb95563e1de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88a797320ad0234c71e25e3aeffb3fb95563e1de/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "0eb6b2c84ddf51d5832564f9b7f5b86c1a95f1b3",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88a797320ad0234c71e25e3aeffb3fb95563e1de/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88a797320ad0234c71e25e3aeffb3fb95563e1de/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=88a797320ad0234c71e25e3aeffb3fb95563e1de",
        "patch": "@@ -767,7 +767,7 @@ if config.dmg is not None:\n         for path, dirs, files in os.walk(\"dist\"):\n             for file in files:\n                 size += os.path.getsize(os.path.join(path, file))\n-        size += int(size * 0.1)\n+        size += int(size * 0.15)\n         \n         if verbose >= 3:\n             print \"Creating temp image for modification...\"\n@@ -791,7 +791,8 @@ if config.dmg is not None:\n             print \"+ Applying fancy settings +\"\n         \n         if fancy.has_key(\"background_picture\"):\n-            bg_path = os.path.join(disk_root, os.path.basename(fancy[\"background_picture\"]))\n+            bg_path = os.path.join(disk_root, \".background\", os.path.basename(fancy[\"background_picture\"]))\n+            os.mkdir(os.path.dirname(bg_path))\n             if verbose >= 3:\n                 print fancy[\"background_picture\"], \"->\", bg_path\n             shutil.copy2(fancy[\"background_picture\"], bg_path)\n@@ -849,8 +850,8 @@ if config.dmg is not None:\n         if bg_path is not None:\n             # Set background file, then call SetFile to make it invisible.\n             # (note: making it invisible first makes set background picture fail)\n-            bgscript = Template(\"\"\"set background picture of theViewOptions to file \"$bgpic\"\n-                   do shell script \"SetFile -a V /Volumes/$disk/$bgpic\" \"\"\")\n+            bgscript = Template(\"\"\"set background picture of theViewOptions to file \".background:$bgpic\"\n+                   do shell script \"SetFile -a V /Volumes/$disk/.background/$bgpic\" \"\"\")\n             params[\"background_commands\"] = bgscript.substitute({\"bgpic\" : os.path.basename(bg_path), \"disk\" : params[\"disk\"]})\n \n         s = appscript.substitute(params)"
      }
    ]
  },
  {
    "sha": "997cab78cb47ac52973c734031f69a2f74fa257b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTdjYWI3OGNiNDdhYzUyOTczYzczNDAzMWY2OWEyZjc0ZmEyNTdi",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-20T00:10:44Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-01-20T08:32:54Z"
      },
      "message": "osx packaging: switch background image to background.tiff\n\nAlso do a bit of cleanup:\n - Make the background name a variable so it's easier to change\n - Add proper make dependencies",
      "tree": {
        "sha": "15e73b2d5fedb3a8bedf3c1cadc7a7ad0e3f1286",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15e73b2d5fedb3a8bedf3c1cadc7a7ad0e3f1286"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/997cab78cb47ac52973c734031f69a2f74fa257b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/997cab78cb47ac52973c734031f69a2f74fa257b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/997cab78cb47ac52973c734031f69a2f74fa257b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/997cab78cb47ac52973c734031f69a2f74fa257b/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88a797320ad0234c71e25e3aeffb3fb95563e1de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88a797320ad0234c71e25e3aeffb3fb95563e1de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88a797320ad0234c71e25e3aeffb3fb95563e1de"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 7,
      "deletions": 6
    },
    "files": [
      {
        "sha": "c59648fd02d46db7fa15fbf256e1281a3558b2a3",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/997cab78cb47ac52973c734031f69a2f74fa257b/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/997cab78cb47ac52973c734031f69a2f74fa257b/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=997cab78cb47ac52973c734031f69a2f74fa257b",
        "patch": "@@ -16,6 +16,7 @@ BITCOIN_WIN_INSTALLER=$(PACKAGE)-$(PACKAGE_VERSION)-win$(WINDOWS_BITS)-setup$(EX\n \n OSX_APP=Bitcoin-Qt.app\n OSX_DMG=Bitcoin-Qt.dmg\n+OSX_BACKGROUND_IMAGE=background.tiff\n OSX_DEPLOY_SCRIPT=$(top_srcdir)/contrib/macdeploy/macdeployqtplus\n OSX_FANCY_PLIST=$(top_srcdir)/contrib/macdeploy/fancy.plist\n OSX_INSTALLER_ICONS=$(top_srcdir)/src/qt/res/icons/bitcoin.icns\n@@ -30,7 +31,7 @@ WINDOWS_PACKAGING = $(top_srcdir)/share/pixmaps/bitcoin.ico \\\n   $(top_srcdir)/doc/README_windows.txt\n \n OSX_PACKAGING = $(OSX_DEPLOY_SCRIPT) $(OSX_FANCY_PLIST) $(OSX_INSTALLER_ICONS) \\\n-  $(top_srcdir)/contrib/macdeploy/background.png \\\n+  $(top_srcdir)/contrib/macdeploy/$(OSX_BACKGROUND_IMAGE) \\\n   $(top_srcdir)/contrib/macdeploy/DS_Store \\\n   $(top_srcdir)/contrib/macdeploy/detached-sig-apply.sh \\\n   $(top_srcdir)/contrib/macdeploy/detached-sig-create.sh\n@@ -95,7 +96,7 @@ $(OSX_DMG): $(OSX_APP_BUILT) $(OSX_PACKAGING)\n deploydir: $(OSX_DMG)\n else\n APP_DIST_DIR=$(top_builddir)/dist\n-APP_DIST_EXTRAS=$(APP_DIST_DIR)/.background/background.png $(APP_DIST_DIR)/.DS_Store $(APP_DIST_DIR)/Applications\n+APP_DIST_EXTRAS=$(APP_DIST_DIR)/.background/$(OSX_BACKGROUND_IMAGE) $(APP_DIST_DIR)/.DS_Store $(APP_DIST_DIR)/Applications\n \n $(APP_DIST_DIR)/Applications:\n \t@rm -f $@\n@@ -106,11 +107,11 @@ $(APP_DIST_EXTRAS): $(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Bitcoin-Qt\n $(OSX_DMG): $(APP_DIST_EXTRAS)\n \t$(GENISOIMAGE) -no-cache-inodes -D -l -probe -V \"Bitcoin-Qt\" -no-pad -r -apple -o $@ dist\n \n-$(APP_DIST_DIR)/.background/background.png:\n+$(APP_DIST_DIR)/.background/$(OSX_BACKGROUND_IMAGE): contrib/macdeploy/$(OSX_BACKGROUND_IMAGE)\n \t$(MKDIR_P) $(@D)\n-\t$(INSTALL) $(top_srcdir)/contrib/macdeploy/background.png $@\n-$(APP_DIST_DIR)/.DS_Store:\n-\t$(INSTALL) $(top_srcdir)/contrib/macdeploy/DS_Store $@\n+\t$(INSTALL) $< $@\n+$(APP_DIST_DIR)/.DS_Store: contrib/macdeploy/DS_Store\n+\t$(INSTALL) $< $@\n \n $(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Bitcoin-Qt: $(OSX_APP_BUILT) $(OSX_PACKAGING)\n \tINSTALLNAMETOOL=$(INSTALLNAMETOOL)  OTOOL=$(OTOOL) STRIP=$(STRIP) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) -translations-dir=$(QT_TRANSLATION_DIR) -add-qt-tr $(OSX_QT_TRANSLATIONS) -verbose 2"
      }
    ]
  },
  {
    "sha": "48bebcca79f31793e6ca5ab9a1788cc3fa3ca59d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OGJlYmNjYTc5ZjMxNzkzZTZjYTVhYjlhMTc4OGNjM2ZhM2NhNTlk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-20T00:13:55Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-01-20T08:32:54Z"
      },
      "message": "osx packaging: update DS_Store after background changes",
      "tree": {
        "sha": "d1640bb7c3be2e0f4df60f54c674e0db40978268",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1640bb7c3be2e0f4df60f54c674e0db40978268"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/48bebcca79f31793e6ca5ab9a1788cc3fa3ca59d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48bebcca79f31793e6ca5ab9a1788cc3fa3ca59d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/48bebcca79f31793e6ca5ab9a1788cc3fa3ca59d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48bebcca79f31793e6ca5ab9a1788cc3fa3ca59d/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "997cab78cb47ac52973c734031f69a2f74fa257b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/997cab78cb47ac52973c734031f69a2f74fa257b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/997cab78cb47ac52973c734031f69a2f74fa257b"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": [
      {
        "sha": "099960712af26791175d9f0cdd3d52c251ea9ee4",
        "filename": "contrib/macdeploy/DS_Store",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48bebcca79f31793e6ca5ab9a1788cc3fa3ca59d/contrib/macdeploy/DS_Store",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48bebcca79f31793e6ca5ab9a1788cc3fa3ca59d/contrib/macdeploy/DS_Store",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/DS_Store?ref=48bebcca79f31793e6ca5ab9a1788cc3fa3ca59d"
      }
    ]
  },
  {
    "sha": "95ef87c75ee879181c71bcd1933d8cc01f9d0fa3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NWVmODdjNzVlZTg3OTE4MWM3MWJjZDE5MzNkOGNjMDFmOWQwZmEz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-01-19T21:02:50Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-01-20T08:33:38Z"
      },
      "message": "add new osx dmg background picture",
      "tree": {
        "sha": "8f6bc6d1ef0ea93520c450de167248ff0833c223",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f6bc6d1ef0ea93520c450de167248ff0833c223"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "48bebcca79f31793e6ca5ab9a1788cc3fa3ca59d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48bebcca79f31793e6ca5ab9a1788cc3fa3ca59d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48bebcca79f31793e6ca5ab9a1788cc3fa3ca59d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f88a2ae74bdb33afc2806b6403ea8c0191b096ca",
        "filename": "contrib/macdeploy/background.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3/contrib/macdeploy/background.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3/contrib/macdeploy/background.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/background.png?ref=95ef87c75ee879181c71bcd1933d8cc01f9d0fa3"
      },
      {
        "sha": "fdc4f4ca4a07ea4c6082ee1357b6ec7e8db99d72",
        "filename": "contrib/macdeploy/background.psd",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3/contrib/macdeploy/background.psd",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3/contrib/macdeploy/background.psd",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/background.psd?ref=95ef87c75ee879181c71bcd1933d8cc01f9d0fa3"
      },
      {
        "sha": "4b44ac672e627be82bb9b74dac0016057b11c126",
        "filename": "contrib/macdeploy/background.tiff",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3/contrib/macdeploy/background.tiff",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3/contrib/macdeploy/background.tiff",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/background.tiff?ref=95ef87c75ee879181c71bcd1933d8cc01f9d0fa3"
      },
      {
        "sha": "4858183f75c382a9b8d75ae4fb8a74abd830615f",
        "filename": "contrib/macdeploy/background@2x.png",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3/contrib/macdeploy/background@2x.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3/contrib/macdeploy/background@2x.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/background@2x.png?ref=95ef87c75ee879181c71bcd1933d8cc01f9d0fa3"
      },
      {
        "sha": "ef277a7f14ad66ecdb8597a865a54b9506fd0ff9",
        "filename": "contrib/macdeploy/fancy.plist",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3/contrib/macdeploy/fancy.plist",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3/contrib/macdeploy/fancy.plist",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/fancy.plist?ref=95ef87c75ee879181c71bcd1933d8cc01f9d0fa3",
        "patch": "@@ -10,7 +10,7 @@\n \t\t<integer>620</integer>\n \t</array>\n \t<key>background_picture</key>\n-\t<string>background.png</string>\n+\t<string>background.tiff</string>\n \t<key>icon_size</key>\n \t<integer>96</integer>\n \t<key>applications_symlink</key>"
      }
    ]
  },
  {
    "sha": "ab64022d54e528f51b578289354bf5abaa12049b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjY0MDIyZDU0ZTUyOGY1MWI1NzgyODkzNTRiZjVhYmFhMTIwNDli",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-20T11:11:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-20T11:11:40Z"
      },
      "message": "Merge pull request #5684\n\nf0172bf osx: bump build sdk to 10.9 (Cory Fields)",
      "tree": {
        "sha": "f6a53c9a6c0cbd63d78bc4db095fe807891b0fb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6a53c9a6c0cbd63d78bc4db095fe807891b0fb0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab64022d54e528f51b578289354bf5abaa12049b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUvjfsAAoJEHSBCwEjRsmmHQEH/jEU78DAFpHP+/xewrJWdnt6\n9+6AkbyOE1jfq7cVoSMeypN86kPPxnW+xWDVO0U4PL8eRQwqvdHmORE441RV6zPy\na0gH3jPgySjywBpFu1Nj/ByaesS+5tfwbZq0/kV35qzxmGyGIVOTTs5cIpD9HcI/\nilVDqteUzVBEzHGPjavu4WrRuLLkmg80ewj36UmQ4XaiCn27oVDN4F/dkuhdFJfN\nnR4KCmheAG7CYvRCNPoa16ajVSS9zfv4lGY+yjZq28urq+ZRl69iXMn+nsd4Psvb\nC7wFRyoycFaDd6P2jfA+lUH+NlAjPBpKk5oy+PUZCbGqki9vflCcfe/tLBOLmJM=\n=FpMe\n-----END PGP SIGNATURE-----",
        "payload": "tree f6a53c9a6c0cbd63d78bc4db095fe807891b0fb0\nparent e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb\nparent f0172bf91ef521a0155cf1f0ae9fde1ab02157b3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1421752274 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1421752300 +0100\n\nMerge pull request #5684\n\nf0172bf osx: bump build sdk to 10.9 (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab64022d54e528f51b578289354bf5abaa12049b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab64022d54e528f51b578289354bf5abaa12049b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab64022d54e528f51b578289354bf5abaa12049b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb"
      },
      {
        "sha": "f0172bf91ef521a0155cf1f0ae9fde1ab02157b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 13,
      "deletions": 12
    },
    "files": [
      {
        "sha": "3c995be9a53522dae22ae9eb2bfb5b03c6a7b86d",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab64022d54e528f51b578289354bf5abaa12049b/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab64022d54e528f51b578289354bf5abaa12049b/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=ab64022d54e528f51b578289354bf5abaa12049b",
        "patch": "@@ -33,7 +33,7 @@ matrix:\n     - compiler: \": 32-bit + dash\"\n       env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\" USE_SHELL=\"/bin/dash\"\n     - compiler: \": Cross-Mac\"\n-      env: HOST=x86_64-apple-darwin11 PACKAGES=\"cmake libcap-dev libz-dev libbz2-dev\" OSX_SDK=10.7 GOAL=\"deploy\"\n+      env: HOST=x86_64-apple-darwin11 PACKAGES=\"cmake libcap-dev libz-dev libbz2-dev\" OSX_SDK=10.9 GOAL=\"deploy\"\n     - compiler: \": Win64\"\n       env: HOST=x86_64-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui\" MAKEJOBS=\"-j2\"\n     - compiler: \": Win32\""
      },
      {
        "sha": "3ca42248d4e303e50cc82b18a05067212cfadb8a",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab64022d54e528f51b578289354bf5abaa12049b/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab64022d54e528f51b578289354bf5abaa12049b/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=ab64022d54e528f51b578289354bf5abaa12049b",
        "patch": "@@ -23,7 +23,7 @@ remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n   \"dir\": \"bitcoin\"\n files:\n-- \"MacOSX10.7.sdk.tar.gz\"\n+- \"MacOSX10.9.sdk.tar.gz\"\n script: |\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"x86_64-apple-darwin11\"\n@@ -72,7 +72,7 @@ script: |\n   BASEPREFIX=`pwd`/depends\n \n   mkdir -p ${BASEPREFIX}/SDKs\n-  tar -C ${BASEPREFIX}/SDKs -xf ${BUILD_DIR}/MacOSX10.7.sdk.tar.gz\n+  tar -C ${BASEPREFIX}/SDKs -xf ${BUILD_DIR}/MacOSX10.9.sdk.tar.gz\n \n   # Build dependencies for each host\n   for i in $HOSTS; do"
      },
      {
        "sha": "2958dc50cc8dc2995bfe81a3ab67050a63488001",
        "filename": "depends/hosts/darwin.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab64022d54e528f51b578289354bf5abaa12049b/depends/hosts/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab64022d54e528f51b578289354bf5abaa12049b/depends/hosts/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/darwin.mk?ref=ab64022d54e528f51b578289354bf5abaa12049b",
        "patch": "@@ -1,5 +1,5 @@\n-OSX_MIN_VERSION=10.6\n-OSX_SDK_VERSION=10.7\n+OSX_MIN_VERSION=10.7\n+OSX_SDK_VERSION=10.9\n OSX_SDK=$(SDK_PATH)/MacOSX$(OSX_SDK_VERSION).sdk\n LD64_VERSION=241.9\n darwin_CC=clang -target $(host) -mmacosx-version-min=$(OSX_MIN_VERSION) --sysroot $(OSX_SDK) -mlinker-version=$(LD64_VERSION)"
      },
      {
        "sha": "6c0c21c190bcd50703ecb741e51ec61d173e5b23",
        "filename": "doc/README_osx.txt",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab64022d54e528f51b578289354bf5abaa12049b/doc/README_osx.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab64022d54e528f51b578289354bf5abaa12049b/doc/README_osx.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README_osx.txt?ref=ab64022d54e528f51b578289354bf5abaa12049b",
        "patch": "@@ -29,14 +29,15 @@ originally done in toolchain4.\n \n To complicate things further, all builds must target an Apple SDK. These SDKs\n are free to download, but not redistributable.\n-To obtain it, register for a developer account, then download xcode4630916281a.dmg:\n-https://developer.apple.com/downloads/download.action?path=Developer_Tools/xcode_4.6.3/xcode4630916281a.dmg\n+To obtain it, register for a developer account, then download the XCode 6.1.1 dmg:\n+https://developer.apple.com/downloads/download.action?path=Developer_Tools/xcode_6.1.1/xcode_6.1.1.dmg\n+\n This file is several gigabytes in size, but only a single directory inside is\n-needed: Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk\n+needed: Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk\n \n Unfortunately, the usual linux tools (7zip, hpmount, loopback mount) are incapable of opening this file.\n To create a tarball suitable for gitian input, mount the dmg in OSX, then create it with:\n-  $ tar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.7.sdk.tar.gz MacOSX10.7.sdk\n+  $ tar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.9.sdk.tar.gz MacOSX10.9.sdk\n \n \n The gitian descriptors build 2 sets of files: Linux tools, then Apple binaries"
      },
      {
        "sha": "363465d827ec1af713b70420cd6bdf26c94052d2",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab64022d54e528f51b578289354bf5abaa12049b/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab64022d54e528f51b578289354bf5abaa12049b/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=ab64022d54e528f51b578289354bf5abaa12049b",
        "patch": "@@ -44,11 +44,11 @@ Release Process\n \n  Register and download the Apple SDK: (see OSX Readme for details)\n  \n- https://developer.apple.com/downloads/download.action?path=Developer_Tools/xcode_4.6.3/xcode4630916281a.dmg\n+ https://developer.apple.com/downloads/download.action?path=Developer_Tools/xcode_6.1.1/xcode_6.1.1.dmg\n  \n- Using a Mac, create a tarball for the 10.7 SDK and copy it to the inputs directory:\n+ Using a Mac, create a tarball for the 10.9 SDK and copy it to the inputs directory:\n  \n-\ttar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.7.sdk.tar.gz MacOSX10.7.sdk\n+\ttar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.9.sdk.tar.gz MacOSX10.9.sdk\n \n ###Optional: Seed the Gitian sources cache\n "
      }
    ]
  },
  {
    "sha": "848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDhmNTVkNTJmZTJmNzE0M2Y5Y2NmYTVhYjhiZDgyYzA5OGE3YjZk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-20T15:22:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-20T15:28:10Z"
      },
      "message": "Merge pull request #5651\n\n1d84aea Coin Control: Use U+2248 \"ALMOST EQUAL TO\" rather than a simple tilde (which may be mistaken for a negative sign) (Luke Dashjr)",
      "tree": {
        "sha": "689439b2a7a6df4f662197a7f452a0ca173cd4db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/689439b2a7a6df4f662197a7f452a0ca173cd4db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUvnQKAAoJEHSBCwEjRsmmHMgH/jFg3h4RBdVzGK2gKdBk3vx7\njwpp1VVpmumik6EYWKnwIBEVr8oEBvQwsWVvztWgYtGbIXHrjMNjjm4Y60P/V5mV\n53NfHYK/eqZ+dnv/Kd7I+E+xdUVnEXbRm3Zv6/I6xSHOlH1/HXUtXCzGXR5H4Dnu\npkBgGt49/sWN8kZoBvyXGf7B2UuI8hc++scn4N9syZf7c1/UNHYcc9HfxTDucIm+\nXyKae6UDwd71EZV49xumckvYDb7XKpBnPqLvwVwaIpTKOvVy+G81U7II3QrdK51z\njQsgRxYLZ6SVhtuFbsCSayfF5MghC+qPUu5PJdTZYLAaU09+qn3wqYFbU0V6b8A=\n=VRzg\n-----END PGP SIGNATURE-----",
        "payload": "tree 689439b2a7a6df4f662197a7f452a0ca173cd4db\nparent ab64022d54e528f51b578289354bf5abaa12049b\nparent 1d84aead218e075b21d545f35e6a8efdae8e0169\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1421767341 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1421767690 +0100\n\nMerge pull request #5651\n\n1d84aea Coin Control: Use U+2248 \"ALMOST EQUAL TO\" rather than a simple tilde (which may be mistaken for a negative sign) (Luke Dashjr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab64022d54e528f51b578289354bf5abaa12049b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab64022d54e528f51b578289354bf5abaa12049b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab64022d54e528f51b578289354bf5abaa12049b"
      },
      {
        "sha": "1d84aead218e075b21d545f35e6a8efdae8e0169",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d84aead218e075b21d545f35e6a8efdae8e0169",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d84aead218e075b21d545f35e6a8efdae8e0169"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 14,
      "deletions": 12
    },
    "files": [
      {
        "sha": "f597eeeaf394fee8e7f29c9419d926d17cf482dc",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d",
        "patch": "@@ -304,19 +304,19 @@ void CoinControlDialog::clipboardAmount()\n // copy label \"Fee\" to clipboard\n void CoinControlDialog::clipboardFee()\n {\n-    GUIUtil::setClipboard(ui->labelCoinControlFee->text().left(ui->labelCoinControlFee->text().indexOf(\" \")).replace(\"~\", \"\"));\n+    GUIUtil::setClipboard(ui->labelCoinControlFee->text().left(ui->labelCoinControlFee->text().indexOf(\" \")).replace(ASYMP_UTF8, \"\"));\n }\n \n // copy label \"After fee\" to clipboard\n void CoinControlDialog::clipboardAfterFee()\n {\n-    GUIUtil::setClipboard(ui->labelCoinControlAfterFee->text().left(ui->labelCoinControlAfterFee->text().indexOf(\" \")).replace(\"~\", \"\"));\n+    GUIUtil::setClipboard(ui->labelCoinControlAfterFee->text().left(ui->labelCoinControlAfterFee->text().indexOf(\" \")).replace(ASYMP_UTF8, \"\"));\n }\n \n // copy label \"Bytes\" to clipboard\n void CoinControlDialog::clipboardBytes()\n {\n-    GUIUtil::setClipboard(ui->labelCoinControlBytes->text().replace(\"~\", \"\"));\n+    GUIUtil::setClipboard(ui->labelCoinControlBytes->text().replace(ASYMP_UTF8, \"\"));\n }\n \n // copy label \"Priority\" to clipboard\n@@ -334,7 +334,7 @@ void CoinControlDialog::clipboardLowOutput()\n // copy label \"Change\" to clipboard\n void CoinControlDialog::clipboardChange()\n {\n-    GUIUtil::setClipboard(ui->labelCoinControlChange->text().left(ui->labelCoinControlChange->text().indexOf(\" \")).replace(\"~\", \"\"));\n+    GUIUtil::setClipboard(ui->labelCoinControlChange->text().left(ui->labelCoinControlChange->text().indexOf(\" \")).replace(ASYMP_UTF8, \"\"));\n }\n \n // treeview: sort\n@@ -600,16 +600,16 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     l2->setText(BitcoinUnits::formatWithUnit(nDisplayUnit, nAmount));        // Amount\n     l3->setText(BitcoinUnits::formatWithUnit(nDisplayUnit, nPayFee));        // Fee\n     l4->setText(BitcoinUnits::formatWithUnit(nDisplayUnit, nAfterFee));      // After Fee\n-    l5->setText(((nBytes > 0) ? \"~\" : \"\") + QString::number(nBytes));        // Bytes\n+    l5->setText(((nBytes > 0) ? ASYMP_UTF8 : \"\") + QString::number(nBytes));        // Bytes\n     l6->setText(sPriorityLabel);                                             // Priority\n     l7->setText(fDust ? tr(\"yes\") : tr(\"no\"));                               // Dust\n     l8->setText(BitcoinUnits::formatWithUnit(nDisplayUnit, nChange));        // Change\n     if (nPayFee > 0 && !(payTxFee.GetFeePerK() > 0 && fPayAtLeastCustomFee && nBytes < 1000))\n     {\n-        l3->setText(\"~\" + l3->text());\n-        l4->setText(\"~\" + l4->text());\n+        l3->setText(ASYMP_UTF8 + l3->text());\n+        l4->setText(ASYMP_UTF8 + l4->text());\n         if (nChange > 0)\n-            l8->setText(\"~\" + l8->text());\n+            l8->setText(ASYMP_UTF8 + l8->text());\n     }\n \n     // turn labels \"red\""
      },
      {
        "sha": "5a91876f1f9fd13cf13ee7057426cad9bdf63073",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d",
        "patch": "@@ -25,6 +25,8 @@ namespace Ui {\n     class CoinControlDialog;\n }\n \n+#define ASYMP_UTF8 \"\\xE2\\x89\\x88\"\n+\n class CoinControlDialog : public QDialog\n {\n     Q_OBJECT"
      },
      {
        "sha": "1f9bd575453be4072b80e18f618030868d8ada12",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d",
        "patch": "@@ -657,19 +657,19 @@ void SendCoinsDialog::coinControlClipboardAmount()\n // Coin Control: copy label \"Fee\" to clipboard\n void SendCoinsDialog::coinControlClipboardFee()\n {\n-    GUIUtil::setClipboard(ui->labelCoinControlFee->text().left(ui->labelCoinControlFee->text().indexOf(\" \")).replace(\"~\", \"\"));\n+    GUIUtil::setClipboard(ui->labelCoinControlFee->text().left(ui->labelCoinControlFee->text().indexOf(\" \")).replace(ASYMP_UTF8, \"\"));\n }\n \n // Coin Control: copy label \"After fee\" to clipboard\n void SendCoinsDialog::coinControlClipboardAfterFee()\n {\n-    GUIUtil::setClipboard(ui->labelCoinControlAfterFee->text().left(ui->labelCoinControlAfterFee->text().indexOf(\" \")).replace(\"~\", \"\"));\n+    GUIUtil::setClipboard(ui->labelCoinControlAfterFee->text().left(ui->labelCoinControlAfterFee->text().indexOf(\" \")).replace(ASYMP_UTF8, \"\"));\n }\n \n // Coin Control: copy label \"Bytes\" to clipboard\n void SendCoinsDialog::coinControlClipboardBytes()\n {\n-    GUIUtil::setClipboard(ui->labelCoinControlBytes->text().replace(\"~\", \"\"));\n+    GUIUtil::setClipboard(ui->labelCoinControlBytes->text().replace(ASYMP_UTF8, \"\"));\n }\n \n // Coin Control: copy label \"Priority\" to clipboard\n@@ -687,7 +687,7 @@ void SendCoinsDialog::coinControlClipboardLowOutput()\n // Coin Control: copy label \"Change\" to clipboard\n void SendCoinsDialog::coinControlClipboardChange()\n {\n-    GUIUtil::setClipboard(ui->labelCoinControlChange->text().left(ui->labelCoinControlChange->text().indexOf(\" \")).replace(\"~\", \"\"));\n+    GUIUtil::setClipboard(ui->labelCoinControlChange->text().left(ui->labelCoinControlChange->text().indexOf(\" \")).replace(ASYMP_UTF8, \"\"));\n }\n \n // Coin Control: settings menu - coin control enabled/disabled by user"
      }
    ]
  },
  {
    "sha": "7810a0a1e6fc4088694a45b5c86493a47d5c7c8a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODEwYTBhMWU2ZmM0MDg4Njk0YTQ1YjVjODY0OTNhNDdkNWM3Yzhh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-20T16:34:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-20T16:34:43Z"
      },
      "message": "Merge pull request #5648\n\n2ce63d3 MOVEONLY: Move struct CBlockTemplate to miner.h (from main.h) (Luke Dashjr)",
      "tree": {
        "sha": "b8f8ce111e156e728d22eee8d56ae32fa8cc89a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8f8ce111e156e728d22eee8d56ae32fa8cc89a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7810a0a1e6fc4088694a45b5c86493a47d5c7c8a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUvoOjAAoJEHSBCwEjRsmmqdIH/2RZNsY8wCNmVC3k+AoByewV\nO3JWZCTkRGRfoHCOBx7yGv5xMNuon4/nXIdew9z/DtRgygvRJjbfMPNsvzFiKbW/\nMusFaEAor5pZgpHk7eDThJfZpKHe66G375epTpUMQUxTeRo6evr307vLIB0Yinmv\nyn/QneZMd9Zy6muyy9SmpoFLE2mql5PNChVXZ0HvgkI9gEXHwiim1JvKLoCeVoQn\nhYtKludal0tu86vCB2YdPglRQZ+aCYeUvwb4z7ssD0ay+K1kKUQJGTTuoeQoz02b\nYZfonLHwpP1hulyeknZbMkyfRiwfcnUHm9Nmv7vpaS6WoDdQRw7+UfY8rbvbka8=\n=BZNt\n-----END PGP SIGNATURE-----",
        "payload": "tree b8f8ce111e156e728d22eee8d56ae32fa8cc89a9\nparent 848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d\nparent 2ce63d395fe3d71e921ecd9f4263031b25efa14e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1421771670 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1421771683 +0100\n\nMerge pull request #5648\n\n2ce63d3 MOVEONLY: Move struct CBlockTemplate to miner.h (from main.h) (Luke Dashjr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7810a0a1e6fc4088694a45b5c86493a47d5c7c8a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7810a0a1e6fc4088694a45b5c86493a47d5c7c8a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7810a0a1e6fc4088694a45b5c86493a47d5c7c8a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d"
      },
      {
        "sha": "2ce63d395fe3d71e921ecd9f4263031b25efa14e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ce63d395fe3d71e921ecd9f4263031b25efa14e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ce63d395fe3d71e921ecd9f4263031b25efa14e"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 8,
      "deletions": 16
    },
    "files": [
      {
        "sha": "a7360d2f700a1463a2cb7dafca3f439d30cd27a8",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7810a0a1e6fc4088694a45b5c86493a47d5c7c8a/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7810a0a1e6fc4088694a45b5c86493a47d5c7c8a/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=7810a0a1e6fc4088694a45b5c86493a47d5c7c8a",
        "patch": "@@ -45,7 +45,6 @@ class CScriptCheck;\n class CValidationInterface;\n class CValidationState;\n \n-struct CBlockTemplate;\n struct CNodeStateStats;\n \n /** Default for -blockmaxsize and -blockminsize, which control the range of sizes the mining code will create **/\n@@ -513,17 +512,6 @@ extern CCoinsViewCache *pcoinsTip;\n /** Global variable that points to the active block tree (protected by cs_main) */\n extern CBlockTreeDB *pblocktree;\n \n-struct CBlockTemplate\n-{\n-    CBlock block;\n-    std::vector<CAmount> vTxFees;\n-    std::vector<int64_t> vTxSigOps;\n-};\n-\n-\n-\n-\n-\n \n class CValidationInterface {\n protected:"
      },
      {
        "sha": "cc97d16f0fe953ed1acfe38d84a946433af30803",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7810a0a1e6fc4088694a45b5c86493a47d5c7c8a/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7810a0a1e6fc4088694a45b5c86493a47d5c7c8a/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=7810a0a1e6fc4088694a45b5c86493a47d5c7c8a",
        "patch": "@@ -6,7 +6,6 @@\n #include \"miner.h\"\n \n #include \"amount.h\"\n-#include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n #include \"hash.h\"\n #include \"main.h\""
      },
      {
        "sha": "593ddcd3716624a30e4fc4448a770c4f71aaa316",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7810a0a1e6fc4088694a45b5c86493a47d5c7c8a/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7810a0a1e6fc4088694a45b5c86493a47d5c7c8a/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=7810a0a1e6fc4088694a45b5c86493a47d5c7c8a",
        "patch": "@@ -6,16 +6,21 @@\n #ifndef BITCOIN_MINER_H\n #define BITCOIN_MINER_H\n \n+#include \"primitives/block.h\"\n+\n #include <stdint.h>\n \n-class CBlock;\n-class CBlockHeader;\n class CBlockIndex;\n class CReserveKey;\n class CScript;\n class CWallet;\n \n-struct CBlockTemplate;\n+struct CBlockTemplate\n+{\n+    CBlock block;\n+    std::vector<CAmount> vTxFees;\n+    std::vector<int64_t> vTxSigOps;\n+};\n \n /** Run the miner threads */\n void GenerateBitcoins(bool fGenerate, CWallet* pwallet, int nThreads);"
      }
    ]
  },
  {
    "sha": "66b473457bc94adcd3d277462f9d619f5a198d96",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NmI0NzM0NTdiYzk0YWRjZDNkMjc3NDYyZjlkNjE5ZjVhMTk4ZDk2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-20T17:02:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-20T17:03:20Z"
      },
      "message": "Delete RecvLine function\n\nNo longer necessary since #5161 / 845c86d128fb97d55d125e63653def38729bd2ed.",
      "tree": {
        "sha": "cc62e927be208e2f764c41c06f620b249aec52a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc62e927be208e2f764c41c06f620b249aec52a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66b473457bc94adcd3d277462f9d619f5a198d96",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUvopZAAoJEHSBCwEjRsmmRKIIAIe8z1Obu+k+8cyknlwBlrqk\n17TVkkwkxR7d/huH1yM1Wbu0XmgKEGaChZEDrKddBw2N2tZ8JNCTYAQHc3ouqdAk\n0BwwLpEeHyc6Qka6gzM0YbLh0L09nwK+jHqePFU/eVXyAdL4iKOdS2vAsKqY7EXS\nmkwGJw7gYStiC+Onyt5NUGEq8rx4LH6HObEMcZl7wIdSzgpIeYI47IxzedSUIRl2\njT7dLyqA14aSzaujjDhQYXxOSbxeSuSiyL+EEnQMNpXsWvHKjsWGP3ebfOd3my2Y\ntAeDrbm8o5jzz4Rgi44Qj2yAKaC8KalXKc4DCKdtrlRmfznLcWNCkTY8tmjYU5M=\n=4mFF\n-----END PGP SIGNATURE-----",
        "payload": "tree cc62e927be208e2f764c41c06f620b249aec52a5\nparent 7810a0a1e6fc4088694a45b5c86493a47d5c7c8a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1421773365 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1421773400 +0100\n\nDelete RecvLine function\n\nNo longer necessary since #5161 / 845c86d128fb97d55d125e63653def38729bd2ed.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66b473457bc94adcd3d277462f9d619f5a198d96",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/66b473457bc94adcd3d277462f9d619f5a198d96",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66b473457bc94adcd3d277462f9d619f5a198d96/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7810a0a1e6fc4088694a45b5c86493a47d5c7c8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7810a0a1e6fc4088694a45b5c86493a47d5c7c8a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7810a0a1e6fc4088694a45b5c86493a47d5c7c8a"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 0,
      "deletions": 51
    },
    "files": [
      {
        "sha": "bba80535e5f85957668e128515caac419a375722",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 50,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66b473457bc94adcd3d277462f9d619f5a198d96/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66b473457bc94adcd3d277462f9d619f5a198d96/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=66b473457bc94adcd3d277462f9d619f5a198d96",
        "patch": "@@ -157,56 +157,6 @@ CAddress GetLocalAddress(const CNetAddr *paddrPeer)\n     return ret;\n }\n \n-bool RecvLine(SOCKET hSocket, string& strLine)\n-{\n-    strLine = \"\";\n-    while (true)\n-    {\n-        char c;\n-        int nBytes = recv(hSocket, &c, 1, 0);\n-        if (nBytes > 0)\n-        {\n-            if (c == '\\n')\n-                continue;\n-            if (c == '\\r')\n-                return true;\n-            strLine += c;\n-            if (strLine.size() >= 9000)\n-                return true;\n-        }\n-        else if (nBytes <= 0)\n-        {\n-            boost::this_thread::interruption_point();\n-            if (nBytes < 0)\n-            {\n-                int nErr = WSAGetLastError();\n-                if (nErr == WSAEMSGSIZE)\n-                    continue;\n-                if (nErr == WSAEWOULDBLOCK || nErr == WSAEINTR || nErr == WSAEINPROGRESS)\n-                {\n-                    MilliSleep(10);\n-                    continue;\n-                }\n-            }\n-            if (!strLine.empty())\n-                return true;\n-            if (nBytes == 0)\n-            {\n-                // socket closed\n-                LogPrint(\"net\", \"socket closed\\n\");\n-                return false;\n-            }\n-            else\n-            {\n-                // socket error\n-                int nErr = WSAGetLastError();\n-                LogPrint(\"net\", \"recv failed: %s\\n\", NetworkErrorString(nErr));\n-                return false;\n-            }\n-        }\n-    }\n-}\n-\n int GetnScore(const CService& addr)\n {\n     LOCK(cs_mapLocalHost);"
      },
      {
        "sha": "b78665b5c62fab1f389d3cacc7c5dd021a0df7e1",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66b473457bc94adcd3d277462f9d619f5a198d96/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66b473457bc94adcd3d277462f9d619f5a198d96/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=66b473457bc94adcd3d277462f9d619f5a198d96",
        "patch": "@@ -61,7 +61,6 @@ unsigned int ReceiveFloodSize();\n unsigned int SendBufferSize();\n \n void AddOneShot(std::string strDest);\n-bool RecvLine(SOCKET hSocket, std::string& strLine);\n void AddressCurrentlyConnected(const CService& addr);\n CNode* FindNode(const CNetAddr& ip);\n CNode* FindNode(const std::string& addrName);"
      }
    ]
  },
  {
    "sha": "e7cfcc8f7e7053391bf53b1e291246857aab87a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplN2NmY2M4ZjdlNzA1MzM5MWJmNTNiMWUyOTEyNDY4NTdhYWI4N2E1",
    "commit": {
      "author": {
        "name": "randy-waterhouse",
        "email": "kiwigb@yahoo.com",
        "date": "2015-01-20T23:10:35Z"
      },
      "committer": {
        "name": "randy-waterhouse",
        "email": "kiwigb@yahoo.com",
        "date": "2015-01-20T23:10:35Z"
      },
      "message": "Remove custom pkg.m4 script.",
      "tree": {
        "sha": "00b03ef86b0a774b28642baef15e7fe72e14a3b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00b03ef86b0a774b28642baef15e7fe72e14a3b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7cfcc8f7e7053391bf53b1e291246857aab87a5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7cfcc8f7e7053391bf53b1e291246857aab87a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e7cfcc8f7e7053391bf53b1e291246857aab87a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7cfcc8f7e7053391bf53b1e291246857aab87a5/comments",
    "author": {
      "login": "randy-waterhouse",
      "id": 637706,
      "node_id": "MDQ6VXNlcjYzNzcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/637706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randy-waterhouse",
      "html_url": "https://github.com/randy-waterhouse",
      "followers_url": "https://api.github.com/users/randy-waterhouse/followers",
      "following_url": "https://api.github.com/users/randy-waterhouse/following{/other_user}",
      "gists_url": "https://api.github.com/users/randy-waterhouse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randy-waterhouse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randy-waterhouse/subscriptions",
      "organizations_url": "https://api.github.com/users/randy-waterhouse/orgs",
      "repos_url": "https://api.github.com/users/randy-waterhouse/repos",
      "events_url": "https://api.github.com/users/randy-waterhouse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randy-waterhouse/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "randy-waterhouse",
      "id": 637706,
      "node_id": "MDQ6VXNlcjYzNzcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/637706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randy-waterhouse",
      "html_url": "https://github.com/randy-waterhouse",
      "followers_url": "https://api.github.com/users/randy-waterhouse/followers",
      "following_url": "https://api.github.com/users/randy-waterhouse/following{/other_user}",
      "gists_url": "https://api.github.com/users/randy-waterhouse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randy-waterhouse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randy-waterhouse/subscriptions",
      "organizations_url": "https://api.github.com/users/randy-waterhouse/orgs",
      "repos_url": "https://api.github.com/users/randy-waterhouse/repos",
      "events_url": "https://api.github.com/users/randy-waterhouse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randy-waterhouse/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66b473457bc94adcd3d277462f9d619f5a198d96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66b473457bc94adcd3d277462f9d619f5a198d96",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66b473457bc94adcd3d277462f9d619f5a198d96"
      }
    ],
    "stats": {
      "total": 221,
      "additions": 0,
      "deletions": 221
    },
    "files": [
      {
        "sha": "85e3d1d669b040369e03a7d69ca8cd0627e1d3f4",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7cfcc8f7e7053391bf53b1e291246857aab87a5/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7cfcc8f7e7053391bf53b1e291246857aab87a5/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=e7cfcc8f7e7053391bf53b1e291246857aab87a5",
        "patch": "@@ -64,13 +64,6 @@ AC_PATH_PROG(CCACHE,ccache)\n AC_PATH_PROG(XGETTEXT,xgettext)\n AC_PATH_PROG(HEXDUMP,hexdump)\n \n-# This m4 will only be used if a system copy cannot be found. This is helpful\n-# on systems where autotools are installed but the pkg-config macros are not in\n-# a default location. It is currently used for building on OSX where autotools\n-# are preinstalled but pkg-config comes from macports or homebrew. It should\n-# probably be removed when building on <= 10.6 is no longer supported.\n-m4_include([pkg.m4])\n-\n dnl pkg-config check.\n PKG_PROG_PKG_CONFIG\n "
      },
      {
        "sha": "c5b26b52e6cdb5891332f7e87addae9306ba7107",
        "filename": "pkg.m4",
        "status": "removed",
        "additions": 0,
        "deletions": 214,
        "changes": 214,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66b473457bc94adcd3d277462f9d619f5a198d96/pkg.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66b473457bc94adcd3d277462f9d619f5a198d96/pkg.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/pkg.m4?ref=66b473457bc94adcd3d277462f9d619f5a198d96",
        "patch": "@@ -1,214 +0,0 @@\n-# pkg.m4 - Macros to locate and utilise pkg-config.            -*- Autoconf -*-\n-# serial 1 (pkg-config-0.24)\n-# \n-# Copyright \u00a9 2004 Scott James Remnant <scott@netsplit.com>.\n-#\n-# This program is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 2 of the License, or\n-# (at your option) any later version.\n-#\n-# This program is distributed in the hope that it will be useful, but\n-# WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with this program; if not, write to the Free Software\n-# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n-#\n-# As a special exception to the GNU General Public License, if you\n-# distribute this file as part of a program that contains a\n-# configuration script generated by Autoconf, you may include it under\n-# the same distribution terms that you use for the rest of that program.\n-\n-# PKG_PROG_PKG_CONFIG([MIN-VERSION])\n-# ----------------------------------\n-AC_DEFUN([PKG_PROG_PKG_CONFIG],\n-[m4_pattern_forbid([^_?PKG_[A-Z_]+$])\n-m4_pattern_allow([^PKG_CONFIG(_(PATH|LIBDIR|SYSROOT_DIR|ALLOW_SYSTEM_(CFLAGS|LIBS)))?$])\n-m4_pattern_allow([^PKG_CONFIG_(DISABLE_UNINSTALLED|TOP_BUILD_DIR|DEBUG_SPEW)$])\n-AC_ARG_VAR([PKG_CONFIG], [path to pkg-config utility])\n-AC_ARG_VAR([PKG_CONFIG_PATH], [directories to add to pkg-config's search path])\n-AC_ARG_VAR([PKG_CONFIG_LIBDIR], [path overriding pkg-config's built-in search path])\n-\n-if test \"x$ac_cv_env_PKG_CONFIG_set\" != \"xset\"; then\n-\tAC_PATH_TOOL([PKG_CONFIG], [pkg-config])\n-fi\n-if test -n \"$PKG_CONFIG\"; then\n-\t_pkg_min_version=m4_default([$1], [0.9.0])\n-\tAC_MSG_CHECKING([pkg-config is at least version $_pkg_min_version])\n-\tif $PKG_CONFIG --atleast-pkgconfig-version $_pkg_min_version; then\n-\t\tAC_MSG_RESULT([yes])\n-\telse\n-\t\tAC_MSG_RESULT([no])\n-\t\tPKG_CONFIG=\"\"\n-\tfi\n-fi[]dnl\n-])# PKG_PROG_PKG_CONFIG\n-\n-# PKG_CHECK_EXISTS(MODULES, [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])\n-#\n-# Check to see whether a particular set of modules exists.  Similar\n-# to PKG_CHECK_MODULES(), but does not set variables or print errors.\n-#\n-# Please remember that m4 expands AC_REQUIRE([PKG_PROG_PKG_CONFIG])\n-# only at the first occurence in configure.ac, so if the first place\n-# it's called might be skipped (such as if it is within an \"if\", you\n-# have to call PKG_CHECK_EXISTS manually\n-# --------------------------------------------------------------\n-AC_DEFUN([PKG_CHECK_EXISTS],\n-[AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl\n-if test -n \"$PKG_CONFIG\" && \\\n-    AC_RUN_LOG([$PKG_CONFIG --exists --print-errors \"$1\"]); then\n-  m4_default([$2], [:])\n-m4_ifvaln([$3], [else\n-  $3])dnl\n-fi])\n-\n-# _PKG_CONFIG([VARIABLE], [COMMAND], [MODULES])\n-# ---------------------------------------------\n-m4_define([_PKG_CONFIG],\n-[if test -n \"$$1\"; then\n-    pkg_cv_[]$1=\"$$1\"\n- elif test -n \"$PKG_CONFIG\"; then\n-    PKG_CHECK_EXISTS([$3],\n-                     [pkg_cv_[]$1=`$PKG_CONFIG --[]$2 \"$3\" 2>/dev/null`\n-\t\t      test \"x$?\" != \"x0\" && pkg_failed=yes ],\n-\t\t     [pkg_failed=yes])\n- else\n-    pkg_failed=untried\n-fi[]dnl\n-])# _PKG_CONFIG\n-\n-# _PKG_SHORT_ERRORS_SUPPORTED\n-# -----------------------------\n-AC_DEFUN([_PKG_SHORT_ERRORS_SUPPORTED],\n-[AC_REQUIRE([PKG_PROG_PKG_CONFIG])\n-if $PKG_CONFIG --atleast-pkgconfig-version 0.20; then\n-        _pkg_short_errors_supported=yes\n-else\n-        _pkg_short_errors_supported=no\n-fi[]dnl\n-])# _PKG_SHORT_ERRORS_SUPPORTED\n-\n-\n-# PKG_CHECK_MODULES(VARIABLE-PREFIX, MODULES, [ACTION-IF-FOUND],\n-# [ACTION-IF-NOT-FOUND])\n-#\n-#\n-# Note that if there is a possibility the first call to\n-# PKG_CHECK_MODULES might not happen, you should be sure to include an\n-# explicit call to PKG_PROG_PKG_CONFIG in your configure.ac\n-#\n-#\n-# --------------------------------------------------------------\n-AC_DEFUN([PKG_CHECK_MODULES],\n-[AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl\n-AC_ARG_VAR([$1][_CFLAGS], [C compiler flags for $1, overriding pkg-config])dnl\n-AC_ARG_VAR([$1][_LIBS], [linker flags for $1, overriding pkg-config])dnl\n-\n-pkg_failed=no\n-AC_MSG_CHECKING([for $1])\n-\n-_PKG_CONFIG([$1][_CFLAGS], [cflags], [$2])\n-_PKG_CONFIG([$1][_LIBS], [libs], [$2])\n-\n-m4_define([_PKG_TEXT], [Alternatively, you may set the environment variables $1[]_CFLAGS\n-and $1[]_LIBS to avoid the need to call pkg-config.\n-See the pkg-config man page for more details.])\n-\n-if test $pkg_failed = yes; then\n-   \tAC_MSG_RESULT([no])\n-        _PKG_SHORT_ERRORS_SUPPORTED\n-        if test $_pkg_short_errors_supported = yes; then\n-\t        $1[]_PKG_ERRORS=`$PKG_CONFIG --short-errors --print-errors --cflags --libs \"$2\" 2>&1`\n-        else \n-\t        $1[]_PKG_ERRORS=`$PKG_CONFIG --print-errors --cflags --libs \"$2\" 2>&1`\n-        fi\n-\t# Put the nasty error message in config.log where it belongs\n-\techo \"$$1[]_PKG_ERRORS\" >&AS_MESSAGE_LOG_FD\n-\n-\tm4_default([$4], [AC_MSG_ERROR(\n-[Package requirements ($2) were not met:\n-\n-$$1_PKG_ERRORS\n-\n-Consider adjusting the PKG_CONFIG_PATH environment variable if you\n-installed software in a non-standard prefix.\n-\n-_PKG_TEXT])[]dnl\n-        ])\n-elif test $pkg_failed = untried; then\n-     \tAC_MSG_RESULT([no])\n-\tm4_default([$4], [AC_MSG_FAILURE(\n-[The pkg-config script could not be found or is too old.  Make sure it\n-is in your PATH or set the PKG_CONFIG environment variable to the full\n-path to pkg-config.\n-\n-_PKG_TEXT\n-\n-To get pkg-config, see <http://pkg-config.freedesktop.org/>.])[]dnl\n-        ])\n-else\n-\t$1[]_CFLAGS=$pkg_cv_[]$1[]_CFLAGS\n-\t$1[]_LIBS=$pkg_cv_[]$1[]_LIBS\n-        AC_MSG_RESULT([yes])\n-\t$3\n-fi[]dnl\n-])# PKG_CHECK_MODULES\n-\n-\n-# PKG_INSTALLDIR(DIRECTORY)\n-# -------------------------\n-# Substitutes the variable pkgconfigdir as the location where a module\n-# should install pkg-config .pc files. By default the directory is\n-# $libdir/pkgconfig, but the default can be changed by passing\n-# DIRECTORY. The user can override through the --with-pkgconfigdir\n-# parameter.\n-AC_DEFUN([PKG_INSTALLDIR],\n-[m4_pushdef([pkg_default], [m4_default([$1], ['${libdir}/pkgconfig'])])\n-m4_pushdef([pkg_description],\n-    [pkg-config installation directory @<:@]pkg_default[@:>@])\n-AC_ARG_WITH([pkgconfigdir],\n-    [AS_HELP_STRING([--with-pkgconfigdir], pkg_description)],,\n-    [with_pkgconfigdir=]pkg_default)\n-AC_SUBST([pkgconfigdir], [$with_pkgconfigdir])\n-m4_popdef([pkg_default])\n-m4_popdef([pkg_description])\n-]) dnl PKG_INSTALLDIR\n-\n-\n-# PKG_NOARCH_INSTALLDIR(DIRECTORY)\n-# -------------------------\n-# Substitutes the variable noarch_pkgconfigdir as the location where a\n-# module should install arch-independent pkg-config .pc files. By\n-# default the directory is $datadir/pkgconfig, but the default can be\n-# changed by passing DIRECTORY. The user can override through the\n-# --with-noarch-pkgconfigdir parameter.\n-AC_DEFUN([PKG_NOARCH_INSTALLDIR],\n-[m4_pushdef([pkg_default], [m4_default([$1], ['${datadir}/pkgconfig'])])\n-m4_pushdef([pkg_description],\n-    [pkg-config arch-independent installation directory @<:@]pkg_default[@:>@])\n-AC_ARG_WITH([noarch-pkgconfigdir],\n-    [AS_HELP_STRING([--with-noarch-pkgconfigdir], pkg_description)],,\n-    [with_noarch_pkgconfigdir=]pkg_default)\n-AC_SUBST([noarch_pkgconfigdir], [$with_noarch_pkgconfigdir])\n-m4_popdef([pkg_default])\n-m4_popdef([pkg_description])\n-]) dnl PKG_NOARCH_INSTALLDIR\n-\n-\n-# PKG_CHECK_VAR(VARIABLE, MODULE, CONFIG-VARIABLE,\n-# [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])\n-# -------------------------------------------\n-# Retrieves the value of the pkg-config variable for the given module.\n-AC_DEFUN([PKG_CHECK_VAR],\n-[AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl\n-AC_ARG_VAR([$1], [value of $3 for $2, overriding pkg-config])dnl\n-\n-_PKG_CONFIG([$1], [variable=\"][$3][\"], [$2])\n-AS_VAR_COPY([$1], [pkg_cv_][$1])\n-\n-AS_VAR_IF([$1], [\"\"], [$5], [$4])dnl\n-])# PKG_CHECK_VAR"
      }
    ]
  },
  {
    "sha": "5fdc5b08e7e27d9d1d805cea074232b1c7f05d47",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZmRjNWIwOGU3ZTI3ZDlkMWQ4MDVjZWEwNzQyMzJiMWM3ZjA1ZDQ3",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2015-01-21T07:48:27Z"
      },
      "committer": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2015-01-21T07:48:27Z"
      },
      "message": "depends: latest config.guess and config.sub",
      "tree": {
        "sha": "1c7518a21fdb86c58deb63f2c5f35bb7d296006b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c7518a21fdb86c58deb63f2c5f35bb7d296006b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5fdc5b08e7e27d9d1d805cea074232b1c7f05d47",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fdc5b08e7e27d9d1d805cea074232b1c7f05d47",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5fdc5b08e7e27d9d1d805cea074232b1c7f05d47",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fdc5b08e7e27d9d1d805cea074232b1c7f05d47/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66b473457bc94adcd3d277462f9d619f5a198d96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66b473457bc94adcd3d277462f9d619f5a198d96",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66b473457bc94adcd3d277462f9d619f5a198d96"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 27,
      "deletions": 13
    },
    "files": [
      {
        "sha": "dbfb9786cb6f9b8003367505d49dcadb2145610a",
        "filename": "depends/config.guess",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fdc5b08e7e27d9d1d805cea074232b1c7f05d47/depends/config.guess",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fdc5b08e7e27d9d1d805cea074232b1c7f05d47/depends/config.guess",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.guess?ref=5fdc5b08e7e27d9d1d805cea074232b1c7f05d47",
        "patch": "@@ -1,8 +1,8 @@\n #! /bin/sh\n # Attempt to guess a canonical system name.\n-#   Copyright 1992-2014 Free Software Foundation, Inc.\n+#   Copyright 1992-2015 Free Software Foundation, Inc.\n \n-timestamp='2014-03-23'\n+timestamp='2015-01-01'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -24,12 +24,12 @@ timestamp='2014-03-23'\n # program.  This Exception is an additional permission under section 7\n # of the GNU General Public License, version 3 (\"GPLv3\").\n #\n-# Originally written by Per Bothner.\n+# Originally written by Per Bothner; maintained since 2000 by Ben Elliston.\n #\n # You can get the latest version of this script from:\n # http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD\n #\n-# Please send patches with a ChangeLog entry to config-patches@gnu.org.\n+# Please send patches to <config-patches@gnu.org>.\n \n \n me=`echo \"$0\" | sed -e 's,.*/,,'`\n@@ -50,7 +50,7 @@ version=\"\\\n GNU config.guess ($timestamp)\n \n Originally written by Per Bothner.\n-Copyright 1992-2014 Free Software Foundation, Inc.\n+Copyright 1992-2015 Free Software Foundation, Inc.\n \n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n@@ -579,8 +579,9 @@ EOF\n \telse\n \t\tIBM_ARCH=powerpc\n \tfi\n-\tif [ -x /usr/bin/oslevel ] ; then\n-\t\tIBM_REV=`/usr/bin/oslevel`\n+\tif [ -x /usr/bin/lslpp ] ; then\n+\t\tIBM_REV=`/usr/bin/lslpp -Lqc bos.rte.libc |\n+\t\t\t   awk -F: '{ print $3 }' | sed s/[0-9]*$/0/`\n \telse\n \t\tIBM_REV=${UNAME_VERSION}.${UNAME_RELEASE}\n \tfi"
      },
      {
        "sha": "6d2e94c8bf9ea6925b96846aade1fd64074985d3",
        "filename": "depends/config.sub",
        "status": "modified",
        "additions": 19,
        "deletions": 6,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fdc5b08e7e27d9d1d805cea074232b1c7f05d47/depends/config.sub",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fdc5b08e7e27d9d1d805cea074232b1c7f05d47/depends/config.sub",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.sub?ref=5fdc5b08e7e27d9d1d805cea074232b1c7f05d47",
        "patch": "@@ -1,8 +1,8 @@\n #! /bin/sh\n # Configuration validation subroutine script.\n-#   Copyright 1992-2014 Free Software Foundation, Inc.\n+#   Copyright 1992-2015 Free Software Foundation, Inc.\n \n-timestamp='2014-05-01'\n+timestamp='2015-01-01'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -25,7 +25,7 @@ timestamp='2014-05-01'\n # of the GNU General Public License, version 3 (\"GPLv3\").\n \n \n-# Please send patches with a ChangeLog entry to config-patches@gnu.org.\n+# Please send patches to <config-patches@gnu.org>.\n #\n # Configuration subroutine to validate and canonicalize a configuration type.\n # Supply the specified configuration type as an argument.\n@@ -68,7 +68,7 @@ Report bugs and patches to <config-patches@gnu.org>.\"\n version=\"\\\n GNU config.sub ($timestamp)\n \n-Copyright 1992-2014 Free Software Foundation, Inc.\n+Copyright 1992-2015 Free Software Foundation, Inc.\n \n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n@@ -260,7 +260,7 @@ case $basic_machine in\n \t| c4x | c8051 | clipper \\\n \t| d10v | d30v | dlx | dsp16xx \\\n \t| epiphany \\\n-\t| fido | fr30 | frv \\\n+\t| fido | fr30 | frv | ft32 \\\n \t| h8300 | h8500 | hppa | hppa1.[01] | hppa2.0 | hppa2.0[nw] | hppa64 \\\n \t| hexagon \\\n \t| i370 | i860 | i960 | ia64 \\\n@@ -302,6 +302,7 @@ case $basic_machine in\n \t| pdp10 | pdp11 | pj | pjl \\\n \t| powerpc | powerpc64 | powerpc64le | powerpcle \\\n \t| pyramid \\\n+\t| riscv32 | riscv64 \\\n \t| rl78 | rx \\\n \t| score \\\n \t| sh | sh[1234] | sh[24]a | sh[24]aeb | sh[23]e | sh[34]eb | sheb | shbe | shle | sh[1234]le | sh3ele \\\n@@ -312,6 +313,7 @@ case $basic_machine in\n \t| tahoe | tic4x | tic54x | tic55x | tic6x | tic80 | tron \\\n \t| ubicom32 \\\n \t| v850 | v850e | v850e1 | v850e2 | v850es | v850e2v3 \\\n+\t| visium \\\n \t| we32k \\\n \t| x86 | xc16x | xstormy16 | xtensa \\\n \t| z8k | z80)\n@@ -326,6 +328,9 @@ case $basic_machine in\n \tc6x)\n \t\tbasic_machine=tic6x-unknown\n \t\t;;\n+\tleon|leon[3-9])\n+\t\tbasic_machine=sparc-$basic_machine\n+\t\t;;\n \tm6811 | m68hc11 | m6812 | m68hc12 | m68hcs12x | nvptx | picochip)\n \t\tbasic_machine=$basic_machine-unknown\n \t\tos=-none\n@@ -436,6 +441,7 @@ case $basic_machine in\n \t| ubicom32-* \\\n \t| v850-* | v850e-* | v850e1-* | v850es-* | v850e2-* | v850e2v3-* \\\n \t| vax-* \\\n+\t| visium-* \\\n \t| we32k-* \\\n \t| x86-* | x86_64-* | xc16x-* | xps100-* \\\n \t| xstormy16-* | xtensa*-* \\\n@@ -773,6 +779,9 @@ case $basic_machine in\n \t\tbasic_machine=m68k-isi\n \t\tos=-sysv\n \t\t;;\n+\tleon-*|leon[3-9]-*)\n+\t\tbasic_machine=sparc-`echo $basic_machine | sed 's/-.*//'`\n+\t\t;;\n \tm68knommu)\n \t\tbasic_machine=m68k-unknown\n \t\tos=-linux\n@@ -828,6 +837,10 @@ case $basic_machine in\n \t\tbasic_machine=powerpc-unknown\n \t\tos=-morphos\n \t\t;;\n+\tmoxiebox)\n+\t\tbasic_machine=moxie-unknown\n+\t\tos=-moxiebox\n+\t\t;;\n \tmsdos)\n \t\tbasic_machine=i386-pc\n \t\tos=-msdos\n@@ -1373,7 +1386,7 @@ case $os in\n \t      | -cygwin* | -msys* | -pe* | -psos* | -moss* | -proelf* | -rtems* \\\n \t      | -mingw32* | -mingw64* | -linux-gnu* | -linux-android* \\\n \t      | -linux-newlib* | -linux-musl* | -linux-uclibc* \\\n-\t      | -uxpv* | -beos* | -mpeix* | -udk* \\\n+\t      | -uxpv* | -beos* | -mpeix* | -udk* | -moxiebox* \\\n \t      | -interix* | -uwin* | -mks* | -rhapsody* | -darwin* | -opened* \\\n \t      | -openstep* | -oskit* | -conix* | -pw32* | -nonstopux* \\\n \t      | -storm-chaos* | -tops10* | -tenex* | -tops20* | -its* \\"
      }
    ]
  },
  {
    "sha": "944c256741b260bd8b758be4a0543af1cb080943",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDRjMjU2NzQxYjI2MGJkOGI3NThiZTRhMDU0M2FmMWNiMDgwOTQz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-21T17:28:31Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-21T18:01:21Z"
      },
      "message": "Merge pull request #5688\n\ne7cfcc8 Remove custom pkg.m4 script. (randy-waterhouse)",
      "tree": {
        "sha": "00b03ef86b0a774b28642baef15e7fe72e14a3b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00b03ef86b0a774b28642baef15e7fe72e14a3b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/944c256741b260bd8b758be4a0543af1cb080943",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUv+lxAAoJEHSBCwEjRsmmy3kIALSTCkvaHuz7ArG5OTVfIleL\nzg75shZCU6ZCsH/RhbX0qjaDl6rs2ag2lReDN9bfLxLM5BsbF+colYoAKS3yPlTG\nDaCFBFNgEGIgsI6x2RHuP23CRR80cvpkC5E7LBRfIs7T3J5yQl8fJ70rACpHuGuB\nB/PjkaJeL2G6BePZSyOydX2bQTm5pxK2vBgptVh9jzl9rOesMTBobJWbrov/Jqrz\nroHrymz6d1g7VMQOJ7u/FSV1CH3vPNaNu4OgV7ZnO8GXsDCF2zoxRbrjlC9C0aN1\nul0NZIyNDSw5kBdpqB6dY+UEbjihsY4e7zllo1iP4MKR3OjbdfTiEjy+B4C+FmY=\n=6bd6\n-----END PGP SIGNATURE-----",
        "payload": "tree 00b03ef86b0a774b28642baef15e7fe72e14a3b2\nparent 66b473457bc94adcd3d277462f9d619f5a198d96\nparent e7cfcc8f7e7053391bf53b1e291246857aab87a5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1421861311 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1421863281 +0100\n\nMerge pull request #5688\n\ne7cfcc8 Remove custom pkg.m4 script. (randy-waterhouse)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/944c256741b260bd8b758be4a0543af1cb080943",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/944c256741b260bd8b758be4a0543af1cb080943",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/944c256741b260bd8b758be4a0543af1cb080943/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66b473457bc94adcd3d277462f9d619f5a198d96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66b473457bc94adcd3d277462f9d619f5a198d96",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66b473457bc94adcd3d277462f9d619f5a198d96"
      },
      {
        "sha": "e7cfcc8f7e7053391bf53b1e291246857aab87a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7cfcc8f7e7053391bf53b1e291246857aab87a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e7cfcc8f7e7053391bf53b1e291246857aab87a5"
      }
    ],
    "stats": {
      "total": 221,
      "additions": 0,
      "deletions": 221
    },
    "files": [
      {
        "sha": "85e3d1d669b040369e03a7d69ca8cd0627e1d3f4",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/944c256741b260bd8b758be4a0543af1cb080943/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/944c256741b260bd8b758be4a0543af1cb080943/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=944c256741b260bd8b758be4a0543af1cb080943",
        "patch": "@@ -64,13 +64,6 @@ AC_PATH_PROG(CCACHE,ccache)\n AC_PATH_PROG(XGETTEXT,xgettext)\n AC_PATH_PROG(HEXDUMP,hexdump)\n \n-# This m4 will only be used if a system copy cannot be found. This is helpful\n-# on systems where autotools are installed but the pkg-config macros are not in\n-# a default location. It is currently used for building on OSX where autotools\n-# are preinstalled but pkg-config comes from macports or homebrew. It should\n-# probably be removed when building on <= 10.6 is no longer supported.\n-m4_include([pkg.m4])\n-\n dnl pkg-config check.\n PKG_PROG_PKG_CONFIG\n "
      },
      {
        "sha": "c5b26b52e6cdb5891332f7e87addae9306ba7107",
        "filename": "pkg.m4",
        "status": "removed",
        "additions": 0,
        "deletions": 214,
        "changes": 214,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66b473457bc94adcd3d277462f9d619f5a198d96/pkg.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66b473457bc94adcd3d277462f9d619f5a198d96/pkg.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/pkg.m4?ref=66b473457bc94adcd3d277462f9d619f5a198d96",
        "patch": "@@ -1,214 +0,0 @@\n-# pkg.m4 - Macros to locate and utilise pkg-config.            -*- Autoconf -*-\n-# serial 1 (pkg-config-0.24)\n-# \n-# Copyright \u00a9 2004 Scott James Remnant <scott@netsplit.com>.\n-#\n-# This program is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 2 of the License, or\n-# (at your option) any later version.\n-#\n-# This program is distributed in the hope that it will be useful, but\n-# WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with this program; if not, write to the Free Software\n-# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n-#\n-# As a special exception to the GNU General Public License, if you\n-# distribute this file as part of a program that contains a\n-# configuration script generated by Autoconf, you may include it under\n-# the same distribution terms that you use for the rest of that program.\n-\n-# PKG_PROG_PKG_CONFIG([MIN-VERSION])\n-# ----------------------------------\n-AC_DEFUN([PKG_PROG_PKG_CONFIG],\n-[m4_pattern_forbid([^_?PKG_[A-Z_]+$])\n-m4_pattern_allow([^PKG_CONFIG(_(PATH|LIBDIR|SYSROOT_DIR|ALLOW_SYSTEM_(CFLAGS|LIBS)))?$])\n-m4_pattern_allow([^PKG_CONFIG_(DISABLE_UNINSTALLED|TOP_BUILD_DIR|DEBUG_SPEW)$])\n-AC_ARG_VAR([PKG_CONFIG], [path to pkg-config utility])\n-AC_ARG_VAR([PKG_CONFIG_PATH], [directories to add to pkg-config's search path])\n-AC_ARG_VAR([PKG_CONFIG_LIBDIR], [path overriding pkg-config's built-in search path])\n-\n-if test \"x$ac_cv_env_PKG_CONFIG_set\" != \"xset\"; then\n-\tAC_PATH_TOOL([PKG_CONFIG], [pkg-config])\n-fi\n-if test -n \"$PKG_CONFIG\"; then\n-\t_pkg_min_version=m4_default([$1], [0.9.0])\n-\tAC_MSG_CHECKING([pkg-config is at least version $_pkg_min_version])\n-\tif $PKG_CONFIG --atleast-pkgconfig-version $_pkg_min_version; then\n-\t\tAC_MSG_RESULT([yes])\n-\telse\n-\t\tAC_MSG_RESULT([no])\n-\t\tPKG_CONFIG=\"\"\n-\tfi\n-fi[]dnl\n-])# PKG_PROG_PKG_CONFIG\n-\n-# PKG_CHECK_EXISTS(MODULES, [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])\n-#\n-# Check to see whether a particular set of modules exists.  Similar\n-# to PKG_CHECK_MODULES(), but does not set variables or print errors.\n-#\n-# Please remember that m4 expands AC_REQUIRE([PKG_PROG_PKG_CONFIG])\n-# only at the first occurence in configure.ac, so if the first place\n-# it's called might be skipped (such as if it is within an \"if\", you\n-# have to call PKG_CHECK_EXISTS manually\n-# --------------------------------------------------------------\n-AC_DEFUN([PKG_CHECK_EXISTS],\n-[AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl\n-if test -n \"$PKG_CONFIG\" && \\\n-    AC_RUN_LOG([$PKG_CONFIG --exists --print-errors \"$1\"]); then\n-  m4_default([$2], [:])\n-m4_ifvaln([$3], [else\n-  $3])dnl\n-fi])\n-\n-# _PKG_CONFIG([VARIABLE], [COMMAND], [MODULES])\n-# ---------------------------------------------\n-m4_define([_PKG_CONFIG],\n-[if test -n \"$$1\"; then\n-    pkg_cv_[]$1=\"$$1\"\n- elif test -n \"$PKG_CONFIG\"; then\n-    PKG_CHECK_EXISTS([$3],\n-                     [pkg_cv_[]$1=`$PKG_CONFIG --[]$2 \"$3\" 2>/dev/null`\n-\t\t      test \"x$?\" != \"x0\" && pkg_failed=yes ],\n-\t\t     [pkg_failed=yes])\n- else\n-    pkg_failed=untried\n-fi[]dnl\n-])# _PKG_CONFIG\n-\n-# _PKG_SHORT_ERRORS_SUPPORTED\n-# -----------------------------\n-AC_DEFUN([_PKG_SHORT_ERRORS_SUPPORTED],\n-[AC_REQUIRE([PKG_PROG_PKG_CONFIG])\n-if $PKG_CONFIG --atleast-pkgconfig-version 0.20; then\n-        _pkg_short_errors_supported=yes\n-else\n-        _pkg_short_errors_supported=no\n-fi[]dnl\n-])# _PKG_SHORT_ERRORS_SUPPORTED\n-\n-\n-# PKG_CHECK_MODULES(VARIABLE-PREFIX, MODULES, [ACTION-IF-FOUND],\n-# [ACTION-IF-NOT-FOUND])\n-#\n-#\n-# Note that if there is a possibility the first call to\n-# PKG_CHECK_MODULES might not happen, you should be sure to include an\n-# explicit call to PKG_PROG_PKG_CONFIG in your configure.ac\n-#\n-#\n-# --------------------------------------------------------------\n-AC_DEFUN([PKG_CHECK_MODULES],\n-[AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl\n-AC_ARG_VAR([$1][_CFLAGS], [C compiler flags for $1, overriding pkg-config])dnl\n-AC_ARG_VAR([$1][_LIBS], [linker flags for $1, overriding pkg-config])dnl\n-\n-pkg_failed=no\n-AC_MSG_CHECKING([for $1])\n-\n-_PKG_CONFIG([$1][_CFLAGS], [cflags], [$2])\n-_PKG_CONFIG([$1][_LIBS], [libs], [$2])\n-\n-m4_define([_PKG_TEXT], [Alternatively, you may set the environment variables $1[]_CFLAGS\n-and $1[]_LIBS to avoid the need to call pkg-config.\n-See the pkg-config man page for more details.])\n-\n-if test $pkg_failed = yes; then\n-   \tAC_MSG_RESULT([no])\n-        _PKG_SHORT_ERRORS_SUPPORTED\n-        if test $_pkg_short_errors_supported = yes; then\n-\t        $1[]_PKG_ERRORS=`$PKG_CONFIG --short-errors --print-errors --cflags --libs \"$2\" 2>&1`\n-        else \n-\t        $1[]_PKG_ERRORS=`$PKG_CONFIG --print-errors --cflags --libs \"$2\" 2>&1`\n-        fi\n-\t# Put the nasty error message in config.log where it belongs\n-\techo \"$$1[]_PKG_ERRORS\" >&AS_MESSAGE_LOG_FD\n-\n-\tm4_default([$4], [AC_MSG_ERROR(\n-[Package requirements ($2) were not met:\n-\n-$$1_PKG_ERRORS\n-\n-Consider adjusting the PKG_CONFIG_PATH environment variable if you\n-installed software in a non-standard prefix.\n-\n-_PKG_TEXT])[]dnl\n-        ])\n-elif test $pkg_failed = untried; then\n-     \tAC_MSG_RESULT([no])\n-\tm4_default([$4], [AC_MSG_FAILURE(\n-[The pkg-config script could not be found or is too old.  Make sure it\n-is in your PATH or set the PKG_CONFIG environment variable to the full\n-path to pkg-config.\n-\n-_PKG_TEXT\n-\n-To get pkg-config, see <http://pkg-config.freedesktop.org/>.])[]dnl\n-        ])\n-else\n-\t$1[]_CFLAGS=$pkg_cv_[]$1[]_CFLAGS\n-\t$1[]_LIBS=$pkg_cv_[]$1[]_LIBS\n-        AC_MSG_RESULT([yes])\n-\t$3\n-fi[]dnl\n-])# PKG_CHECK_MODULES\n-\n-\n-# PKG_INSTALLDIR(DIRECTORY)\n-# -------------------------\n-# Substitutes the variable pkgconfigdir as the location where a module\n-# should install pkg-config .pc files. By default the directory is\n-# $libdir/pkgconfig, but the default can be changed by passing\n-# DIRECTORY. The user can override through the --with-pkgconfigdir\n-# parameter.\n-AC_DEFUN([PKG_INSTALLDIR],\n-[m4_pushdef([pkg_default], [m4_default([$1], ['${libdir}/pkgconfig'])])\n-m4_pushdef([pkg_description],\n-    [pkg-config installation directory @<:@]pkg_default[@:>@])\n-AC_ARG_WITH([pkgconfigdir],\n-    [AS_HELP_STRING([--with-pkgconfigdir], pkg_description)],,\n-    [with_pkgconfigdir=]pkg_default)\n-AC_SUBST([pkgconfigdir], [$with_pkgconfigdir])\n-m4_popdef([pkg_default])\n-m4_popdef([pkg_description])\n-]) dnl PKG_INSTALLDIR\n-\n-\n-# PKG_NOARCH_INSTALLDIR(DIRECTORY)\n-# -------------------------\n-# Substitutes the variable noarch_pkgconfigdir as the location where a\n-# module should install arch-independent pkg-config .pc files. By\n-# default the directory is $datadir/pkgconfig, but the default can be\n-# changed by passing DIRECTORY. The user can override through the\n-# --with-noarch-pkgconfigdir parameter.\n-AC_DEFUN([PKG_NOARCH_INSTALLDIR],\n-[m4_pushdef([pkg_default], [m4_default([$1], ['${datadir}/pkgconfig'])])\n-m4_pushdef([pkg_description],\n-    [pkg-config arch-independent installation directory @<:@]pkg_default[@:>@])\n-AC_ARG_WITH([noarch-pkgconfigdir],\n-    [AS_HELP_STRING([--with-noarch-pkgconfigdir], pkg_description)],,\n-    [with_noarch_pkgconfigdir=]pkg_default)\n-AC_SUBST([noarch_pkgconfigdir], [$with_noarch_pkgconfigdir])\n-m4_popdef([pkg_default])\n-m4_popdef([pkg_description])\n-]) dnl PKG_NOARCH_INSTALLDIR\n-\n-\n-# PKG_CHECK_VAR(VARIABLE, MODULE, CONFIG-VARIABLE,\n-# [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])\n-# -------------------------------------------\n-# Retrieves the value of the pkg-config variable for the given module.\n-AC_DEFUN([PKG_CHECK_VAR],\n-[AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl\n-AC_ARG_VAR([$1], [value of $3 for $2, overriding pkg-config])dnl\n-\n-_PKG_CONFIG([$1], [variable=\"][$3][\"], [$2])\n-AS_VAR_COPY([$1], [pkg_cv_][$1])\n-\n-AS_VAR_IF([$1], [\"\"], [$5], [$4])dnl\n-])# PKG_CHECK_VAR"
      }
    ]
  },
  {
    "sha": "6bbca99baa50eee50d1559335a66f1b2189d456d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmJjYTk5YmFhNTBlZWU1MGQxNTU5MzM1YTY2ZjFiMjE4OWQ0NTZk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-21T06:49:14Z"
      },
      "committer": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-01-21T18:07:28Z"
      },
      "message": "LSSharedFileListItemResolve() was deprecated in Mac OS X 10.10, use LSSharedFileListItemCopyResolvedURL() instead",
      "tree": {
        "sha": "88b3a55c3407e1767e1b56c242fc7353d1f73113",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88b3a55c3407e1767e1b56c242fc7353d1f73113"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6bbca99baa50eee50d1559335a66f1b2189d456d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bbca99baa50eee50d1559335a66f1b2189d456d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6bbca99baa50eee50d1559335a66f1b2189d456d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bbca99baa50eee50d1559335a66f1b2189d456d/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2eda47bc37bee37e409346e4c396d59925c06250",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2eda47bc37bee37e409346e4c396d59925c06250",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2eda47bc37bee37e409346e4c396d59925c06250"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 12,
      "deletions": 1
    },
    "files": [
      {
        "sha": "149e0da4421eb4f369ca0c552e5fdf9a26a373e8",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bbca99baa50eee50d1559335a66f1b2189d456d/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bbca99baa50eee50d1559335a66f1b2189d456d/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=6bbca99baa50eee50d1559335a66f1b2189d456d",
        "patch": "@@ -696,7 +696,18 @@ LSSharedFileListItemRef findStartupItemInList(LSSharedFileListRef list, CFURLRef\n         LSSharedFileListItemRef item = (LSSharedFileListItemRef)CFArrayGetValueAtIndex(listSnapshot, i);\n         UInt32 resolutionFlags = kLSSharedFileListNoUserInteraction | kLSSharedFileListDoNotMountVolumes;\n         CFURLRef currentItemURL = NULL;\n-        LSSharedFileListItemResolve(item, resolutionFlags, &currentItemURL, NULL);\n+\n+#if defined(MAC_OS_X_VERSION_MAX_ALLOWED) && MAC_OS_X_VERSION_MAX_ALLOWED >= 10100\n+\tif(&LSSharedFileListItemCopyResolvedURL)\n+\t    currentItemURL = LSSharedFileListItemCopyResolvedURL(item, resolutionFlags, NULL);\n+#if defined(MAC_OS_X_VERSION_MIN_REQUIRED) && MAC_OS_X_VERSION_MIN_REQUIRED < 10100\n+\telse\n+\t    LSSharedFileListItemResolve(item, resolutionFlags, &currentItemURL, NULL);\n+#endif\n+#else\n+\tLSSharedFileListItemResolve(item, resolutionFlags, &currentItemURL, NULL);\n+#endif\n+\n         if(currentItemURL && CFEqual(currentItemURL, findUrl)) {\n             // found\n             CFRelease(currentItemURL);"
      }
    ]
  },
  {
    "sha": "0eade74c783f670cb69ab982f5a828f7ff5ee0db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZWFkZTc0Yzc4M2Y2NzBjYjY5YWI5ODJmNWE4MjhmN2ZmNWVlMGRi",
    "commit": {
      "author": {
        "name": "fsb4000",
        "email": "fsb4000@yandex.ru",
        "date": "2015-01-23T14:01:07Z"
      },
      "committer": {
        "name": "fsb4000",
        "email": "fsb4000@yandex.ru",
        "date": "2015-01-23T14:01:07Z"
      },
      "message": "fix crash: CoinControl \"space\" bug\n\nJust like https://github.com/novacoin-project/novacoin/commit/baf80c26a2e7f1ba6061d63d174eff0a09111e6f",
      "tree": {
        "sha": "5276ccd1d770a2db71838396dbb370823096555e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5276ccd1d770a2db71838396dbb370823096555e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0eade74c783f670cb69ab982f5a828f7ff5ee0db",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0eade74c783f670cb69ab982f5a828f7ff5ee0db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0eade74c783f670cb69ab982f5a828f7ff5ee0db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0eade74c783f670cb69ab982f5a828f7ff5ee0db/comments",
    "author": {
      "login": "fsb4000",
      "id": 4289847,
      "node_id": "MDQ6VXNlcjQyODk4NDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4289847?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fsb4000",
      "html_url": "https://github.com/fsb4000",
      "followers_url": "https://api.github.com/users/fsb4000/followers",
      "following_url": "https://api.github.com/users/fsb4000/following{/other_user}",
      "gists_url": "https://api.github.com/users/fsb4000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fsb4000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fsb4000/subscriptions",
      "organizations_url": "https://api.github.com/users/fsb4000/orgs",
      "repos_url": "https://api.github.com/users/fsb4000/repos",
      "events_url": "https://api.github.com/users/fsb4000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fsb4000/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fsb4000",
      "id": 4289847,
      "node_id": "MDQ6VXNlcjQyODk4NDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4289847?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fsb4000",
      "html_url": "https://github.com/fsb4000",
      "followers_url": "https://api.github.com/users/fsb4000/followers",
      "following_url": "https://api.github.com/users/fsb4000/following{/other_user}",
      "gists_url": "https://api.github.com/users/fsb4000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fsb4000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fsb4000/subscriptions",
      "organizations_url": "https://api.github.com/users/fsb4000/orgs",
      "repos_url": "https://api.github.com/users/fsb4000/repos",
      "events_url": "https://api.github.com/users/fsb4000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fsb4000/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "944c256741b260bd8b758be4a0543af1cb080943",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/944c256741b260bd8b758be4a0543af1cb080943",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/944c256741b260bd8b758be4a0543af1cb080943"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5dcbf0c3f17e33c6d162b886728af46dab7b9cbc",
        "filename": "src/qt/coincontroltreewidget.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0eade74c783f670cb69ab982f5a828f7ff5ee0db/src/qt/coincontroltreewidget.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0eade74c783f670cb69ab982f5a828f7ff5ee0db/src/qt/coincontroltreewidget.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroltreewidget.cpp?ref=0eade74c783f670cb69ab982f5a828f7ff5ee0db",
        "patch": "@@ -17,7 +17,8 @@ void CoinControlTreeWidget::keyPressEvent(QKeyEvent *event)\n     {\n         event->ignore();\n         int COLUMN_CHECKBOX = 0;\n-        this->currentItem()->setCheckState(COLUMN_CHECKBOX, ((this->currentItem()->checkState(COLUMN_CHECKBOX) == Qt::Checked) ? Qt::Unchecked : Qt::Checked));\n+        if(this->currentItem())\n+            this->currentItem()->setCheckState(COLUMN_CHECKBOX, ((this->currentItem()->checkState(COLUMN_CHECKBOX) == Qt::Checked) ? Qt::Unchecked : Qt::Checked));\n     }\n     else if (event->key() == Qt::Key_Escape) // press esc -> close dialog\n     {\n@@ -29,4 +30,4 @@ void CoinControlTreeWidget::keyPressEvent(QKeyEvent *event)\n     {\n         this->QTreeWidget::keyPressEvent(event);\n     }\n-}\n\\ No newline at end of file\n+}"
      }
    ]
  },
  {
    "sha": "b6acd4563d3b96b244e61b87b9f08c0eb61ecaa6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNmFjZDQ1NjNkM2I5NmIyNDRlNjFiODdiOWYwOGMwZWI2MWVjYWE2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-23T15:07:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-23T15:22:20Z"
      },
      "message": "Merge pull request #5700\n\n0eade74 fix crash: CoinControl \"space\" bug (fsb4000)",
      "tree": {
        "sha": "5276ccd1d770a2db71838396dbb370823096555e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5276ccd1d770a2db71838396dbb370823096555e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6acd4563d3b96b244e61b87b9f08c0eb61ecaa6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUwmcsAAoJEHSBCwEjRsmm8/UH/RS+Wal/5S0uNtAv8QcQvgSE\nrKQunix/3wV1cPMbGFEnwfZbw2ee6vwX87/VxNnjHWGTLfhLpGWVKJX9gRT4xTG7\nS0xizwtxRgYMGLVxCwE93GE78nvAE539DBm9HE8Bj/f3dpwXpHOyT0mpWL5sE1p9\n2Mw1+TIHd/9epmjZt9U4otgd2McZ2Ht22xqSeAORGisJz4+4xF4LRNc/QJuso4YX\nm0SmdVot1Uk21XO1ssYQpeDuu2F7loPxsj1/3yAHlr+1Ox81e9Gb/HaS3w0/ZUrr\nRfHG/GeZEGBRFaalsZLcOwVD/yWu3QWYyLJ54lMRoTsPniyUw1xyvQ6p2fuIIaQ=\n=BXFA\n-----END PGP SIGNATURE-----",
        "payload": "tree 5276ccd1d770a2db71838396dbb370823096555e\nparent 944c256741b260bd8b758be4a0543af1cb080943\nparent 0eade74c783f670cb69ab982f5a828f7ff5ee0db\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422025678 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422026540 +0100\n\nMerge pull request #5700\n\n0eade74 fix crash: CoinControl \"space\" bug (fsb4000)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6acd4563d3b96b244e61b87b9f08c0eb61ecaa6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6acd4563d3b96b244e61b87b9f08c0eb61ecaa6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6acd4563d3b96b244e61b87b9f08c0eb61ecaa6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "944c256741b260bd8b758be4a0543af1cb080943",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/944c256741b260bd8b758be4a0543af1cb080943",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/944c256741b260bd8b758be4a0543af1cb080943"
      },
      {
        "sha": "0eade74c783f670cb69ab982f5a828f7ff5ee0db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0eade74c783f670cb69ab982f5a828f7ff5ee0db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0eade74c783f670cb69ab982f5a828f7ff5ee0db"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5dcbf0c3f17e33c6d162b886728af46dab7b9cbc",
        "filename": "src/qt/coincontroltreewidget.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6acd4563d3b96b244e61b87b9f08c0eb61ecaa6/src/qt/coincontroltreewidget.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6acd4563d3b96b244e61b87b9f08c0eb61ecaa6/src/qt/coincontroltreewidget.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroltreewidget.cpp?ref=b6acd4563d3b96b244e61b87b9f08c0eb61ecaa6",
        "patch": "@@ -17,7 +17,8 @@ void CoinControlTreeWidget::keyPressEvent(QKeyEvent *event)\n     {\n         event->ignore();\n         int COLUMN_CHECKBOX = 0;\n-        this->currentItem()->setCheckState(COLUMN_CHECKBOX, ((this->currentItem()->checkState(COLUMN_CHECKBOX) == Qt::Checked) ? Qt::Unchecked : Qt::Checked));\n+        if(this->currentItem())\n+            this->currentItem()->setCheckState(COLUMN_CHECKBOX, ((this->currentItem()->checkState(COLUMN_CHECKBOX) == Qt::Checked) ? Qt::Unchecked : Qt::Checked));\n     }\n     else if (event->key() == Qt::Key_Escape) // press esc -> close dialog\n     {\n@@ -29,4 +30,4 @@ void CoinControlTreeWidget::keyPressEvent(QKeyEvent *event)\n     {\n         this->QTreeWidget::keyPressEvent(event);\n     }\n-}\n\\ No newline at end of file\n+}"
      }
    ]
  },
  {
    "sha": "40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MGU5NmEzMDE2MGRkYzJjYjM5YmM5Yjg2ZWMxMDNhYzg5MmUwOWFi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-24T14:58:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-24T15:00:40Z"
      },
      "message": "Merge pull request #5599\n\n0cc0d8d Get rid of the internal miner's hashmeter (jtimon)",
      "tree": {
        "sha": "2a8e0334553b49b83f5d908d4ede86c177e8bbcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a8e0334553b49b83f5d908d4ede86c177e8bbcf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUw7OYAAoJEHSBCwEjRsmmMlkH/jrB4eRqlydsu8rcNQWr6W60\nljxZp8gerg3cxzWRgBRmbvNYouDp570cneD8A//4kW0EU5OjEcyMuuJKImDNxrI4\nxrSVJojh9W/WQbvOBGCAcWSDRPdGSZwj2j0y0Z+xFLEgHyg+DgEXDzF3PlFLCunf\nQ42Ea1acYM9NtdLaxBi7gwCUiqMi9ytUdRqAGBLMRGRbrSf57mQtCnWbGG5DX6B6\ndzCsWfwzNDaBE7JV1QIYOHF80ojZeH7Hi9y+t8LBt0Y/ZCekfeiLif3az6uSmfdN\n8kNJzwHNBCmVTZ5NDnwDsTiGYzLQf5oEhZcsaGu7hJf8b/1uU+97KB8EGkxFjv8=\n=VQ2/\n-----END PGP SIGNATURE-----",
        "payload": "tree 2a8e0334553b49b83f5d908d4ede86c177e8bbcf\nparent b6acd4563d3b96b244e61b87b9f08c0eb61ecaa6\nparent 0cc0d8d60b8aec483a926a94aa7f85b9b0d0aca3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422111496 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422111640 +0100\n\nMerge pull request #5599\n\n0cc0d8d Get rid of the internal miner's hashmeter (jtimon)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40e96a30160ddc2cb39bc9b86ec103ac892e09ab/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6acd4563d3b96b244e61b87b9f08c0eb61ecaa6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6acd4563d3b96b244e61b87b9f08c0eb61ecaa6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6acd4563d3b96b244e61b87b9f08c0eb61ecaa6"
      },
      {
        "sha": "0cc0d8d60b8aec483a926a94aa7f85b9b0d0aca3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cc0d8d60b8aec483a926a94aa7f85b9b0d0aca3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0cc0d8d60b8aec483a926a94aa7f85b9b0d0aca3"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 2,
      "deletions": 65
    },
    "files": [
      {
        "sha": "5cc4a92791d556231c858825d161bc02950e5ca3",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 40,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40e96a30160ddc2cb39bc9b86ec103ac892e09ab/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40e96a30160ddc2cb39bc9b86ec103ac892e09ab/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
        "patch": "@@ -362,8 +362,6 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n //\n // Internal miner\n //\n-double dHashesPerSec = 0.0;\n-int64_t nHPSTimerStart = 0;\n \n //\n // ScanHash scans nonces looking for a hash with at least some zero bits.\n@@ -393,10 +391,8 @@ bool static ScanHash(const CBlockHeader *pblock, uint32_t& nNonce, uint256 *phas\n             return true;\n \n         // If nothing found after trying for a while, return -1\n-        if ((nNonce & 0xffff) == 0)\n-            return false;\n         if ((nNonce & 0xfff) == 0)\n-            boost::this_thread::interruption_point();\n+            return false;\n     }\n }\n \n@@ -483,14 +479,9 @@ void static BitcoinMiner(CWallet *pwallet)\n             arith_uint256 hashTarget = arith_uint256().SetCompact(pblock->nBits);\n             uint256 hash;\n             uint32_t nNonce = 0;\n-            uint32_t nOldNonce = 0;\n             while (true) {\n-                bool fFound = ScanHash(pblock, nNonce, &hash);\n-                uint32_t nHashesDone = nNonce - nOldNonce;\n-                nOldNonce = nNonce;\n-\n                 // Check if something found\n-                if (fFound)\n+                if (ScanHash(pblock, nNonce, &hash))\n                 {\n                     if (UintToArith256(hash) <= hashTarget)\n                     {\n@@ -512,35 +503,6 @@ void static BitcoinMiner(CWallet *pwallet)\n                     }\n                 }\n \n-                // Meter hashes/sec\n-                static int64_t nHashCounter;\n-                if (nHPSTimerStart == 0)\n-                {\n-                    nHPSTimerStart = GetTimeMillis();\n-                    nHashCounter = 0;\n-                }\n-                else\n-                    nHashCounter += nHashesDone;\n-                if (GetTimeMillis() - nHPSTimerStart > 4000)\n-                {\n-                    static CCriticalSection cs;\n-                    {\n-                        LOCK(cs);\n-                        if (GetTimeMillis() - nHPSTimerStart > 4000)\n-                        {\n-                            dHashesPerSec = 1000.0 * nHashCounter / (GetTimeMillis() - nHPSTimerStart);\n-                            nHPSTimerStart = GetTimeMillis();\n-                            nHashCounter = 0;\n-                            static int64_t nLogTime;\n-                            if (GetTime() - nLogTime > 30 * 60)\n-                            {\n-                                nLogTime = GetTime();\n-                                LogPrintf(\"hashmeter %6.0f khash/s\\n\", dHashesPerSec/1000.0);\n-                            }\n-                        }\n-                    }\n-                }\n-\n                 // Check for stop or if block needs to be rebuilt\n                 boost::this_thread::interruption_point();\n                 // Regtest mode doesn't require peers"
      },
      {
        "sha": "5d5c9c86c7cc5022512745709cf925045cbfbab2",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40e96a30160ddc2cb39bc9b86ec103ac892e09ab/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40e96a30160ddc2cb39bc9b86ec103ac892e09ab/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
        "patch": "@@ -31,7 +31,4 @@ CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey);\n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n void UpdateTime(CBlockHeader* block, const CBlockIndex* pindexPrev);\n \n-extern double dHashesPerSec;\n-extern int64_t nHPSTimerStart;\n-\n #endif // BITCOIN_MINER_H"
      },
      {
        "sha": "5df5de66d9416534012322a8e8256b1d2afb02da",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40e96a30160ddc2cb39bc9b86ec103ac892e09ab/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40e96a30160ddc2cb39bc9b86ec103ac892e09ab/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
        "patch": "@@ -201,24 +201,6 @@ Value setgenerate(const Array& params, bool fHelp)\n     return Value::null;\n }\n \n-Value gethashespersec(const Array& params, bool fHelp)\n-{\n-    if (fHelp || params.size() != 0)\n-        throw runtime_error(\n-            \"gethashespersec\\n\"\n-            \"\\nReturns a recent hashes per second performance measurement while generating.\\n\"\n-            \"See the getgenerate and setgenerate calls to turn generation on and off.\\n\"\n-            \"\\nResult:\\n\"\n-            \"n            (numeric) The recent hashes per second when generation is on (will return 0 if generation is off)\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"gethashespersec\", \"\")\n-            + HelpExampleRpc(\"gethashespersec\", \"\")\n-        );\n-\n-    if (GetTimeMillis() - nHPSTimerStart > 8000)\n-        return (int64_t)0;\n-    return (int64_t)dHashesPerSec;\n-}\n #endif\n \n \n@@ -237,7 +219,6 @@ Value getmininginfo(const Array& params, bool fHelp)\n             \"  \\\"errors\\\": \\\"...\\\"          (string) Current errors\\n\"\n             \"  \\\"generate\\\": true|false     (boolean) If the generation is on or off (see getgenerate or setgenerate calls)\\n\"\n             \"  \\\"genproclimit\\\": n          (numeric) The processor limit for generation. -1 if no generation. (see getgenerate or setgenerate calls)\\n\"\n-            \"  \\\"hashespersec\\\": n          (numeric) The hashes per second of the generation, or 0 if no generation.\\n\"\n             \"  \\\"pooledtx\\\": n              (numeric) The size of the mem pool\\n\"\n             \"  \\\"testnet\\\": true|false      (boolean) If using testnet or not\\n\"\n             \"  \\\"chain\\\": \\\"xxxx\\\",         (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n@@ -260,7 +241,6 @@ Value getmininginfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"chain\",            Params().NetworkIDString()));\n #ifdef ENABLE_WALLET\n     obj.push_back(Pair(\"generate\",         getgenerate(params, false)));\n-    obj.push_back(Pair(\"hashespersec\",     gethashespersec(params, false)));\n #endif\n     return obj;\n }"
      },
      {
        "sha": "e4f23d56d246968942fc02ea15228138e7a1e552",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40e96a30160ddc2cb39bc9b86ec103ac892e09ab/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40e96a30160ddc2cb39bc9b86ec103ac892e09ab/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
        "patch": "@@ -281,7 +281,6 @@ static const CRPCCommand vRPCCommands[] =\n #ifdef ENABLE_WALLET\n     /* Coin generation */\n     { \"generating\",         \"getgenerate\",            &getgenerate,            true,      false,      false },\n-    { \"generating\",         \"gethashespersec\",        &gethashespersec,        true,      false,      false },\n     { \"generating\",         \"setgenerate\",            &setgenerate,            true,      true,       false },\n #endif\n "
      },
      {
        "sha": "1b94b758f243886cb6604a92b0ad92cc5b45c552",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40e96a30160ddc2cb39bc9b86ec103ac892e09ab/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40e96a30160ddc2cb39bc9b86ec103ac892e09ab/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
        "patch": "@@ -154,7 +154,6 @@ extern json_spirit::Value importwallet(const json_spirit::Array& params, bool fH\n extern json_spirit::Value getgenerate(const json_spirit::Array& params, bool fHelp); // in rpcmining.cpp\n extern json_spirit::Value setgenerate(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getnetworkhashps(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value gethashespersec(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getmininginfo(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value prioritisetransaction(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getblocktemplate(const json_spirit::Array& params, bool fHelp);"
      }
    ]
  },
  {
    "sha": "e5d9d77df2de715d24638e3bab78750b7ad3e1fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNWQ5ZDc3ZGYyZGU3MTVkMjQ2MzhlM2JhYjc4NzUwYjdhZDNlMWZk",
    "commit": {
      "author": {
        "name": "fsb4000",
        "email": "fsb4000@yandex.ru",
        "date": "2015-01-25T12:11:57Z"
      },
      "committer": {
        "name": "fsb4000",
        "email": "fsb4000@yandex.ru",
        "date": "2015-01-25T12:11:57Z"
      },
      "message": "fix crash: createmultisig and addmultisigaddress",
      "tree": {
        "sha": "5454f871108c5185d0fcfcca17afcf7a9212f931",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5454f871108c5185d0fcfcca17afcf7a9212f931"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5d9d77df2de715d24638e3bab78750b7ad3e1fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5d9d77df2de715d24638e3bab78750b7ad3e1fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e5d9d77df2de715d24638e3bab78750b7ad3e1fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5d9d77df2de715d24638e3bab78750b7ad3e1fd/comments",
    "author": {
      "login": "fsb4000",
      "id": 4289847,
      "node_id": "MDQ6VXNlcjQyODk4NDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4289847?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fsb4000",
      "html_url": "https://github.com/fsb4000",
      "followers_url": "https://api.github.com/users/fsb4000/followers",
      "following_url": "https://api.github.com/users/fsb4000/following{/other_user}",
      "gists_url": "https://api.github.com/users/fsb4000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fsb4000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fsb4000/subscriptions",
      "organizations_url": "https://api.github.com/users/fsb4000/orgs",
      "repos_url": "https://api.github.com/users/fsb4000/repos",
      "events_url": "https://api.github.com/users/fsb4000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fsb4000/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fsb4000",
      "id": 4289847,
      "node_id": "MDQ6VXNlcjQyODk4NDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4289847?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fsb4000",
      "html_url": "https://github.com/fsb4000",
      "followers_url": "https://api.github.com/users/fsb4000/followers",
      "following_url": "https://api.github.com/users/fsb4000/following{/other_user}",
      "gists_url": "https://api.github.com/users/fsb4000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fsb4000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fsb4000/subscriptions",
      "organizations_url": "https://api.github.com/users/fsb4000/orgs",
      "repos_url": "https://api.github.com/users/fsb4000/repos",
      "events_url": "https://api.github.com/users/fsb4000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fsb4000/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40e96a30160ddc2cb39bc9b86ec103ac892e09ab"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c54b92cc962780b7625e0639c89ca14de8ff46b9",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5d9d77df2de715d24638e3bab78750b7ad3e1fd/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5d9d77df2de715d24638e3bab78750b7ad3e1fd/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=e5d9d77df2de715d24638e3bab78750b7ad3e1fd",
        "patch": "@@ -216,6 +216,8 @@ CScript _createmultisig_redeemScript(const Array& params)\n         throw runtime_error(\n             strprintf(\"not enough keys supplied \"\n                       \"(got %u keys, but need at least %d to redeem)\", keys.size(), nRequired));\n+    if (keys.size() > 16)\n+        throw runtime_error(\"Number of addresses involved in the multisignature address creation > 16\\nReduce the number\");\n     std::vector<CPubKey> pubkeys;\n     pubkeys.resize(keys.size());\n     for (unsigned int i = 0; i < keys.size(); i++)"
      }
    ]
  },
  {
    "sha": "14d023f1aeb4f25ac0f42745b3a29c3dcd63c834",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNGQwMjNmMWFlYjRmMjVhYzBmNDI3NDViM2EyOWMzZGNkNjNjODM0",
    "commit": {
      "author": {
        "name": "Earlz",
        "email": "earlz@earlz.net",
        "date": "2015-01-25T15:27:54Z"
      },
      "committer": {
        "name": "Earlz",
        "email": "earlz@earlz.net",
        "date": "2015-01-25T15:56:30Z"
      },
      "message": "change hardcoded character constants to a set of descriptive named constants for database keys",
      "tree": {
        "sha": "b4a4c16c3c4087b6fa3e611b0a167da63e0f2346",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b4a4c16c3c4087b6fa3e611b0a167da63e0f2346"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14d023f1aeb4f25ac0f42745b3a29c3dcd63c834",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14d023f1aeb4f25ac0f42745b3a29c3dcd63c834",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14d023f1aeb4f25ac0f42745b3a29c3dcd63c834",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14d023f1aeb4f25ac0f42745b3a29c3dcd63c834/comments",
    "author": {
      "login": "Earlz",
      "id": 371222,
      "node_id": "MDQ6VXNlcjM3MTIyMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/371222?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Earlz",
      "html_url": "https://github.com/Earlz",
      "followers_url": "https://api.github.com/users/Earlz/followers",
      "following_url": "https://api.github.com/users/Earlz/following{/other_user}",
      "gists_url": "https://api.github.com/users/Earlz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Earlz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Earlz/subscriptions",
      "organizations_url": "https://api.github.com/users/Earlz/orgs",
      "repos_url": "https://api.github.com/users/Earlz/repos",
      "events_url": "https://api.github.com/users/Earlz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Earlz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Earlz",
      "id": 371222,
      "node_id": "MDQ6VXNlcjM3MTIyMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/371222?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Earlz",
      "html_url": "https://github.com/Earlz",
      "followers_url": "https://api.github.com/users/Earlz/followers",
      "following_url": "https://api.github.com/users/Earlz/following{/other_user}",
      "gists_url": "https://api.github.com/users/Earlz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Earlz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Earlz/subscriptions",
      "organizations_url": "https://api.github.com/users/Earlz/orgs",
      "repos_url": "https://api.github.com/users/Earlz/repos",
      "events_url": "https://api.github.com/users/Earlz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Earlz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40e96a30160ddc2cb39bc9b86ec103ac892e09ab"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 32,
      "deletions": 21
    },
    "files": [
      {
        "sha": "f9326e5e2ea12864bb708242dc19a3087adf080c",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 21,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14d023f1aeb4f25ac0f42745b3a29c3dcd63c834/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14d023f1aeb4f25ac0f42745b3a29c3dcd63c834/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=14d023f1aeb4f25ac0f42745b3a29c3dcd63c834",
        "patch": "@@ -14,31 +14,42 @@\n \n using namespace std;\n \n+static const char DB_COINS = 'c';\n+static const char DB_BLOCK_FILES = 'f';\n+static const char DB_TXINDEX = 't';\n+static const char DB_BLOCK_INDEX = 'b';\n+\n+static const char DB_BEST_BLOCK = 'B';\n+static const char DB_FLAG = 'F';\n+static const char DB_REINDEX_FLAG = 'R';\n+static const char DB_LAST_BLOCK = 'l';\n+\n+\n void static BatchWriteCoins(CLevelDBBatch &batch, const uint256 &hash, const CCoins &coins) {\n     if (coins.IsPruned())\n-        batch.Erase(make_pair('c', hash));\n+        batch.Erase(make_pair(DB_COINS, hash));\n     else\n-        batch.Write(make_pair('c', hash), coins);\n+        batch.Write(make_pair(DB_COINS, hash), coins);\n }\n \n void static BatchWriteHashBestChain(CLevelDBBatch &batch, const uint256 &hash) {\n-    batch.Write('B', hash);\n+    batch.Write(DB_BEST_BLOCK, hash);\n }\n \n CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() / \"chainstate\", nCacheSize, fMemory, fWipe) {\n }\n \n bool CCoinsViewDB::GetCoins(const uint256 &txid, CCoins &coins) const {\n-    return db.Read(make_pair('c', txid), coins);\n+    return db.Read(make_pair(DB_COINS, txid), coins);\n }\n \n bool CCoinsViewDB::HaveCoins(const uint256 &txid) const {\n-    return db.Exists(make_pair('c', txid));\n+    return db.Exists(make_pair(DB_COINS, txid));\n }\n \n uint256 CCoinsViewDB::GetBestBlock() const {\n     uint256 hashBestChain;\n-    if (!db.Read('B', hashBestChain))\n+    if (!db.Read(DB_BEST_BLOCK, hashBestChain))\n         return uint256();\n     return hashBestChain;\n }\n@@ -67,23 +78,23 @@ CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CLevel\n }\n \n bool CBlockTreeDB::ReadBlockFileInfo(int nFile, CBlockFileInfo &info) {\n-    return Read(make_pair('f', nFile), info);\n+    return Read(make_pair(DB_BLOCK_FILES, nFile), info);\n }\n \n bool CBlockTreeDB::WriteReindexing(bool fReindexing) {\n     if (fReindexing)\n-        return Write('R', '1');\n+        return Write(DB_REINDEX_FLAG, '1');\n     else\n-        return Erase('R');\n+        return Erase(DB_REINDEX_FLAG);\n }\n \n bool CBlockTreeDB::ReadReindexing(bool &fReindexing) {\n-    fReindexing = Exists('R');\n+    fReindexing = Exists(DB_REINDEX_FLAG);\n     return true;\n }\n \n bool CBlockTreeDB::ReadLastBlockFile(int &nFile) {\n-    return Read('l', nFile);\n+    return Read(DB_LAST_BLOCK, nFile);\n }\n \n bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n@@ -104,7 +115,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n             CDataStream ssKey(slKey.data(), slKey.data()+slKey.size(), SER_DISK, CLIENT_VERSION);\n             char chType;\n             ssKey >> chType;\n-            if (chType == 'c') {\n+            if (chType == DB_COINS) {\n                 leveldb::Slice slValue = pcursor->value();\n                 CDataStream ssValue(slValue.data(), slValue.data()+slValue.size(), SER_DISK, CLIENT_VERSION);\n                 CCoins coins;\n@@ -142,33 +153,33 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {\n     CLevelDBBatch batch;\n     for (std::vector<std::pair<int, const CBlockFileInfo*> >::const_iterator it=fileInfo.begin(); it != fileInfo.end(); it++) {\n-        batch.Write(make_pair('f', it->first), *it->second);\n+        batch.Write(make_pair(DB_BLOCK_FILES, it->first), *it->second);\n     }\n-    batch.Write('l', nLastFile);\n+    batch.Write(DB_LAST_BLOCK, nLastFile);\n     for (std::vector<const CBlockIndex*>::const_iterator it=blockinfo.begin(); it != blockinfo.end(); it++) {\n-        batch.Write(make_pair('b', (*it)->GetBlockHash()), CDiskBlockIndex(*it));\n+        batch.Write(make_pair(DB_BLOCK_INDEX, (*it)->GetBlockHash()), CDiskBlockIndex(*it));\n     }\n     return WriteBatch(batch, true);\n }\n \n bool CBlockTreeDB::ReadTxIndex(const uint256 &txid, CDiskTxPos &pos) {\n-    return Read(make_pair('t', txid), pos);\n+    return Read(make_pair(DB_TXINDEX, txid), pos);\n }\n \n bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> >&vect) {\n     CLevelDBBatch batch;\n     for (std::vector<std::pair<uint256,CDiskTxPos> >::const_iterator it=vect.begin(); it!=vect.end(); it++)\n-        batch.Write(make_pair('t', it->first), it->second);\n+        batch.Write(make_pair(DB_TXINDEX, it->first), it->second);\n     return WriteBatch(batch);\n }\n \n bool CBlockTreeDB::WriteFlag(const std::string &name, bool fValue) {\n-    return Write(std::make_pair('F', name), fValue ? '1' : '0');\n+    return Write(std::make_pair(DB_FLAG, name), fValue ? '1' : '0');\n }\n \n bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue) {\n     char ch;\n-    if (!Read(std::make_pair('F', name), ch))\n+    if (!Read(std::make_pair(DB_FLAG, name), ch))\n         return false;\n     fValue = ch == '1';\n     return true;\n@@ -179,7 +190,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n     boost::scoped_ptr<leveldb::Iterator> pcursor(NewIterator());\n \n     CDataStream ssKeySet(SER_DISK, CLIENT_VERSION);\n-    ssKeySet << make_pair('b', uint256());\n+    ssKeySet << make_pair(DB_BLOCK_INDEX, uint256());\n     pcursor->Seek(ssKeySet.str());\n \n     // Load mapBlockIndex\n@@ -190,7 +201,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n             CDataStream ssKey(slKey.data(), slKey.data()+slKey.size(), SER_DISK, CLIENT_VERSION);\n             char chType;\n             ssKey >> chType;\n-            if (chType == 'b') {\n+            if (chType == DB_BLOCK_INDEX) {\n                 leveldb::Slice slValue = pcursor->value();\n                 CDataStream ssValue(slValue.data(), slValue.data()+slValue.size(), SER_DISK, CLIENT_VERSION);\n                 CDiskBlockIndex diskindex;"
      }
    ]
  },
  {
    "sha": "b01a435c34f0669affece2b3d90f92c347588d69",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDFhNDM1YzM0ZjA2NjlhZmZlY2UyYjNkOTBmOTJjMzQ3NTg4ZDY5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T11:08:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T11:09:11Z"
      },
      "message": "Merge pull request #5627\n\n2fa9a8e Make empty byte arrays pass CheckSignatureEncoding() (Peter Todd)",
      "tree": {
        "sha": "c552af9882211c9805a3d258e7f494560b3ab225",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c552af9882211c9805a3d258e7f494560b3ab225"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b01a435c34f0669affece2b3d90f92c347588d69",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUxiBXAAoJEHSBCwEjRsmmHhAIAId8vGA7WACcxK2J13yQ5XpI\nmQaYLoAFC01kpQmMSVcCXBz5nYO5A8JQBAwVpUcnjuFmo+yfMEzLbUGhQ6btV5Lr\n4tlv2+pnEbS72p4jnlCXkpEQp0M5y3DBGu51b7FUbgrm7tVZIglIWlalWJLokZAP\n17rGqjE3kdWUT4bux4wb8QXjXpyWWJESjE1s3UWyybwZET/vkfKK7VVZYQfIsHJe\nAAPnrbWwduBkwzM0/15A8z13A63m1nMCYM3nssJ4NHHM9ywbCXnRrlZbugH6SEwt\nE8tLw+gff2auy7TxCCBh6Ng0dfNGigLHLWX+afEq8uYuNDHxwpY/2igRNfDctkY=\n=Swsw\n-----END PGP SIGNATURE-----",
        "payload": "tree c552af9882211c9805a3d258e7f494560b3ab225\nparent 40e96a30160ddc2cb39bc9b86ec103ac892e09ab\nparent 2fa9a8ec86033b809a1c48f0396c3482c0d5d33c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422270491 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422270551 +0100\n\nMerge pull request #5627\n\n2fa9a8e Make empty byte arrays pass CheckSignatureEncoding() (Peter Todd)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b01a435c34f0669affece2b3d90f92c347588d69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b01a435c34f0669affece2b3d90f92c347588d69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b01a435c34f0669affece2b3d90f92c347588d69/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40e96a30160ddc2cb39bc9b86ec103ac892e09ab"
      },
      {
        "sha": "2fa9a8ec86033b809a1c48f0396c3482c0d5d33c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fa9a8ec86033b809a1c48f0396c3482c0d5d33c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2fa9a8ec86033b809a1c48f0396c3482c0d5d33c"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 11,
      "deletions": 5
    },
    "files": [
      {
        "sha": "8a06f3d1187827fc994a7f62ab7e3ad7b7d12909",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b01a435c34f0669affece2b3d90f92c347588d69/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b01a435c34f0669affece2b3d90f92c347588d69/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=b01a435c34f0669affece2b3d90f92c347588d69",
        "patch": "@@ -189,6 +189,11 @@ bool static IsDefinedHashtypeSignature(const valtype &vchSig) {\n }\n \n bool static CheckSignatureEncoding(const valtype &vchSig, unsigned int flags, ScriptError* serror) {\n+    // Empty signature. Not strictly DER encoded, but allowed to provide a\n+    // compact way to provide an invalid signature for use with CHECK(MULTI)SIG\n+    if (vchSig.size() == 0) {\n+        return true;\n+    }\n     if ((flags & (SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC)) != 0 && !IsDERSignature(vchSig)) {\n         return set_error(serror, SCRIPT_ERR_SIG_DER);\n     } else if ((flags & SCRIPT_VERIFY_LOW_S) != 0 && !IsLowDERSignature(vchSig, serror)) {"
      },
      {
        "sha": "9a8fe1ee889e5e59bf2ebc53ae35cac84fd2a169",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b01a435c34f0669affece2b3d90f92c347588d69/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b01a435c34f0669affece2b3d90f92c347588d69/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=b01a435c34f0669affece2b3d90f92c347588d69",
        "patch": "@@ -504,7 +504,7 @@\n     \"2-of-2 CHECKMULTISIG NOT with the first pubkey invalid, and both signatures validly encoded.\"\n ],\n [\n-    \"0 0x47 0x3044022044dc17b0887c161bb67ba9635bf758735bdde503e4b0a0987f587f14a4e1143d022009a215772d49a85dae40d8ca03955af26ad3978a0ff965faa12915e9586249a501 0\",\n+    \"0 0x47 0x3044022044dc17b0887c161bb67ba9635bf758735bdde503e4b0a0987f587f14a4e1143d022009a215772d49a85dae40d8ca03955af26ad3978a0ff965faa12915e9586249a501 1\",\n     \"2 0x21 0x02865c40293a680cb9c020e7b1e106d8c1916d3cef99aa431a56d253e69256dac0 0x21 0x02865c40293a680cb9c020e7b1e106d8c1916d3cef99aa431a56d253e69256dac0 2 CHECKMULTISIG NOT\",\n     \"STRICTENC\",\n     \"2-of-2 CHECKMULTISIG NOT with both pubkeys valid, but first signature invalid.\""
      },
      {
        "sha": "a187401cd4aafd66fa84d1e53b34326b73ee0ca7",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b01a435c34f0669affece2b3d90f92c347588d69/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b01a435c34f0669affece2b3d90f92c347588d69/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=b01a435c34f0669affece2b3d90f92c347588d69",
        "patch": "@@ -662,6 +662,11 @@\n [\"0 0 0x02 0x0000\", \"CHECKMULTISIGVERIFY 1\", \"\"],\n [\"0 0x02 0x0000 0\", \"CHECKMULTISIGVERIFY 1\", \"\"],\n \n+[\"While not really correctly DER encoded, the empty signature is allowed by\"],\n+[\"STRICTENC to provide a compact way to provide a delibrately invalid signature.\"],\n+[\"0\", \"0x21 0x02865c40293a680cb9c020e7b1e106d8c1916d3cef99aa431a56d253e69256dac0 CHECKSIG NOT\", \"STRICTENC\"],\n+[\"0 0\", \"1 0x21 0x02865c40293a680cb9c020e7b1e106d8c1916d3cef99aa431a56d253e69256dac0 1 CHECKMULTISIG NOT\", \"STRICTENC\"],\n+\n [\"CHECKMULTISIG evaluation order tests. CHECKMULTISIG evaluates signatures and\"],\n [\"pubkeys in a specific order, and will exit early if the number of signatures\"],\n [\"left to check is greater than the number of keys left. As STRICTENC fails the\"],"
      },
      {
        "sha": "9501169943d97d0c007e0ffe7159ae8d382d525c",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b01a435c34f0669affece2b3d90f92c347588d69/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b01a435c34f0669affece2b3d90f92c347588d69/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=b01a435c34f0669affece2b3d90f92c347588d69",
        "patch": "@@ -116,10 +116,6 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n         }\n     }\n     s.clear();\n-    s << OP_0 << OP_0;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0), &err));\n-    BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_SIG_DER, ScriptErrorString(err));\n-    s.clear();\n     s << OP_0 << OP_1;\n     BOOST_CHECK(!VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_SIG_DER, ScriptErrorString(err));"
      }
    ]
  },
  {
    "sha": "8204e19abed6c6ee8dca4a00943abfc52ea68fab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjA0ZTE5YWJlZDZjNmVlOGRjYTRhMDA5NDNhYmZjNTJlYTY4ZmFi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T11:18:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T11:19:12Z"
      },
      "message": "Merge pull request #4805\n\n44bc988 [Wallet] Do not flush the wallet in AddToWalletIfInvolvingMe(..) (Cozz Lovan)",
      "tree": {
        "sha": "630099e9f695ed98b34cc0f4be992bb581c98a19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/630099e9f695ed98b34cc0f4be992bb581c98a19"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8204e19abed6c6ee8dca4a00943abfc52ea68fab",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUxiKwAAoJEHSBCwEjRsmmRZMH/iK//QAAkqf0vnuEYILORm6R\n0ur9EjBAo8hJTUx7myW+zuxke/kGfflE8RAjgHFhoDO0j3QAyKWIriHlP94VqNy0\n8RTbwp0XSivFKwkYOBunJkS1P8Nehh5stNUSYcaeJASeVzH9wn+luLa+7gBKzS2/\nJTO2HSyqY7hhPr9ErGyzwm5fq2YY+0U7N+KNE7qO6TOnkCKiKyi7YC0PjF7GwCyc\nkhVIErCHO5WHAH9B5rZHiLrVJS94LtjT7xwJTZGeI1YcGAshmTYbmfurwhhtMIm4\nJO6o0XqWZhHrQLCYj7TFxrBlptoNAWoAah55vn7d2wt4VbpOMLNH8JrlCbv/jBk=\n=DrPv\n-----END PGP SIGNATURE-----",
        "payload": "tree 630099e9f695ed98b34cc0f4be992bb581c98a19\nparent b01a435c34f0669affece2b3d90f92c347588d69\nparent 44bc988e7becb492a78ed92ea1052f4789012534\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422271122 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422271152 +0100\n\nMerge pull request #4805\n\n44bc988 [Wallet] Do not flush the wallet in AddToWalletIfInvolvingMe(..) (Cozz Lovan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8204e19abed6c6ee8dca4a00943abfc52ea68fab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8204e19abed6c6ee8dca4a00943abfc52ea68fab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8204e19abed6c6ee8dca4a00943abfc52ea68fab/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b01a435c34f0669affece2b3d90f92c347588d69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b01a435c34f0669affece2b3d90f92c347588d69",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b01a435c34f0669affece2b3d90f92c347588d69"
      },
      {
        "sha": "44bc988e7becb492a78ed92ea1052f4789012534",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44bc988e7becb492a78ed92ea1052f4789012534",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44bc988e7becb492a78ed92ea1052f4789012534"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 30,
      "deletions": 19
    },
    "files": [
      {
        "sha": "7b51707f60430fe88b6dfdad2284358cbf756dc4",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=8204e19abed6c6ee8dca4a00943abfc52ea68fab",
        "patch": "@@ -217,10 +217,11 @@ void CDBEnv::CheckpointLSN(const std::string& strFile)\n }\n \n \n-CDB::CDB(const std::string& strFilename, const char* pszMode) : pdb(NULL), activeTxn(NULL)\n+CDB::CDB(const std::string& strFilename, const char* pszMode, bool fFlushOnCloseIn) : pdb(NULL), activeTxn(NULL)\n {\n     int ret;\n     fReadOnly = (!strchr(pszMode, '+') && !strchr(pszMode, 'w'));\n+    fFlushOnClose = fFlushOnCloseIn;\n     if (strFilename.empty())\n         return;\n \n@@ -297,7 +298,8 @@ void CDB::Close()\n     activeTxn = NULL;\n     pdb = NULL;\n \n-    Flush();\n+    if (fFlushOnClose)\n+        Flush();\n \n     {\n         LOCK(bitdb.cs_db);"
      },
      {
        "sha": "d208907c89618a85936dd640333d378ca2a9c14b",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=8204e19abed6c6ee8dca4a00943abfc52ea68fab",
        "patch": "@@ -97,8 +97,9 @@ class CDB\n     std::string strFile;\n     DbTxn* activeTxn;\n     bool fReadOnly;\n+    bool fFlushOnClose;\n \n-    explicit CDB(const std::string& strFilename, const char* pszMode = \"r+\");\n+    explicit CDB(const std::string& strFilename, const char* pszMode = \"r+\", bool fFlushOnCloseIn=true);\n     ~CDB() { Close(); }\n \n public:"
      },
      {
        "sha": "828c525dcbb1d702e2c6c27d870e10116e75c744",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8204e19abed6c6ee8dca4a00943abfc52ea68fab",
        "patch": "@@ -1211,6 +1211,8 @@ bool AppInit2(boost::thread_group& threadGroup)\n             // Restore wallet transaction metadata after -zapwallettxes=1\n             if (GetBoolArg(\"-zapwallettxes\", false) && GetArg(\"-zapwallettxes\", \"1\") != \"2\")\n             {\n+                CWalletDB walletdb(strWalletFile);\n+\n                 BOOST_FOREACH(const CWalletTx& wtxOld, vWtx)\n                 {\n                     uint256 hash = wtxOld.GetHash();\n@@ -1226,7 +1228,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n                         copyTo->fFromMe = copyFrom->fFromMe;\n                         copyTo->strFromAccount = copyFrom->strFromAccount;\n                         copyTo->nOrderPos = copyFrom->nOrderPos;\n-                        copyTo->WriteToDisk();\n+                        copyTo->WriteToDisk(&walletdb);\n                     }\n                 }\n             }"
      },
      {
        "sha": "da07b8c7a64094a2d2f18eb8a284744d974b97e7",
        "filename": "src/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/accounting_tests.cpp?ref=8204e19abed6c6ee8dca4a00943abfc52ea68fab",
        "patch": "@@ -46,7 +46,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     walletdb.WriteAccountingEntry(ae);\n \n     wtx.mapValue[\"comment\"] = \"z\";\n-    pwalletMain->AddToWallet(wtx);\n+    pwalletMain->AddToWallet(wtx, false, &walletdb);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n     vpwtx[0]->nTimeReceived = (unsigned int)1333333335;\n     vpwtx[0]->nOrderPos = -1;\n@@ -88,7 +88,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n         --tx.nLockTime;  // Just to change the hash :)\n         *static_cast<CTransaction*>(&wtx) = CTransaction(tx);\n     }\n-    pwalletMain->AddToWallet(wtx);\n+    pwalletMain->AddToWallet(wtx, false, &walletdb);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n     vpwtx[1]->nTimeReceived = (unsigned int)1333333336;\n \n@@ -98,7 +98,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n         --tx.nLockTime;  // Just to change the hash :)\n         *static_cast<CTransaction*>(&wtx) = CTransaction(tx);\n     }\n-    pwalletMain->AddToWallet(wtx);\n+    pwalletMain->AddToWallet(wtx, false, &walletdb);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n     vpwtx[2]->nTimeReceived = (unsigned int)1333333329;\n     vpwtx[2]->nOrderPos = -1;"
      },
      {
        "sha": "1fe05521093aab4cb688298a79b2450a23c554e3",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 8,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=8204e19abed6c6ee8dca4a00943abfc52ea68fab",
        "patch": "@@ -555,7 +555,7 @@ void CWallet::MarkDirty()\n     }\n }\n \n-bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n+bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletDB* pwalletdb)\n {\n     uint256 hash = wtxIn.GetHash();\n \n@@ -576,7 +576,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n         if (fInsertedNew)\n         {\n             wtx.nTimeReceived = GetAdjustedTime();\n-            wtx.nOrderPos = IncOrderPosNext();\n+            wtx.nOrderPos = IncOrderPosNext(pwalletdb);\n \n             wtx.nTimeSmart = wtx.nTimeReceived;\n             if (!wtxIn.hashBlock.IsNull())\n@@ -653,7 +653,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n \n         // Write to disk\n         if (fInsertedNew || fUpdated)\n-            if (!wtx.WriteToDisk())\n+            if (!wtx.WriteToDisk(pwalletdb))\n                 return false;\n \n         // Break debit/credit balance caches:\n@@ -689,10 +689,16 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pbl\n         if (fExisted || IsMine(tx) || IsFromMe(tx))\n         {\n             CWalletTx wtx(this,tx);\n+\n             // Get merkle branch if transaction was found in a block\n             if (pblock)\n                 wtx.SetMerkleBranch(*pblock);\n-            return AddToWallet(wtx);\n+\n+            // Do not flush the wallet here for performance reasons\n+            // this is safe, as in case of a crash, we rescan the necessary blocks on startup through our SetBestChain-mechanism\n+            CWalletDB walletdb(strWalletFile, \"r+\", false);\n+\n+            return AddToWallet(wtx, false, &walletdb);\n         }\n     }\n     return false;\n@@ -916,9 +922,9 @@ void CWalletTx::GetAccountAmounts(const string& strAccount, CAmount& nReceived,\n }\n \n \n-bool CWalletTx::WriteToDisk()\n+bool CWalletTx::WriteToDisk(CWalletDB *pwalletdb)\n {\n-    return CWalletDB(pwallet->strWalletFile).WriteTx(GetHash(), *this);\n+    return pwalletdb->WriteTx(GetHash(), *this);\n }\n \n /**\n@@ -1581,14 +1587,14 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n             // This is only to keep the database open to defeat the auto-flush for the\n             // duration of this scope.  This is the only place where this optimization\n             // maybe makes sense; please don't do it anywhere else.\n-            CWalletDB* pwalletdb = fFileBacked ? new CWalletDB(strWalletFile,\"r\") : NULL;\n+            CWalletDB* pwalletdb = fFileBacked ? new CWalletDB(strWalletFile,\"r+\") : NULL;\n \n             // Take key pair from key pool so it won't be used again\n             reservekey.KeepKey();\n \n             // Add tx to wallet, because if it has change it's also ours,\n             // otherwise just for transaction history.\n-            AddToWallet(wtxNew);\n+            AddToWallet(wtxNew, false, pwalletdb);\n \n             // Notify that old coins are spent\n             set<CWalletTx*> setCoins;"
      },
      {
        "sha": "f9cbd3a849ba6eec41d24dd14097ad456e321eb9",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=8204e19abed6c6ee8dca4a00943abfc52ea68fab",
        "patch": "@@ -275,7 +275,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     TxItems OrderedTxItems(std::list<CAccountingEntry>& acentries, std::string strAccount = \"\");\n \n     void MarkDirty();\n-    bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet=false);\n+    bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletDB* pwalletdb);\n     void SyncTransaction(const CTransaction& tx, const CBlock* pblock);\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate);\n     void EraseFromWallet(const uint256 &hash);\n@@ -903,7 +903,7 @@ class CWalletTx : public CMerkleTx\n         return true;\n     }\n \n-    bool WriteToDisk();\n+    bool WriteToDisk(CWalletDB *pwalletdb);\n \n     int64_t GetTxTime() const;\n     int GetRequestCount() const;"
      },
      {
        "sha": "d4d2e1674053d5858cc82de61e761802ca965eab",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=8204e19abed6c6ee8dca4a00943abfc52ea68fab",
        "patch": "@@ -395,7 +395,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             if (wtx.nOrderPos == -1)\n                 wss.fAnyUnordered = true;\n \n-            pwallet->AddToWallet(wtx, true);\n+            pwallet->AddToWallet(wtx, true, NULL);\n         }\n         else if (strType == \"acentry\")\n         {"
      },
      {
        "sha": "2627ef71a607fdf232b95073a2e5f4d84c081db1",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=8204e19abed6c6ee8dca4a00943abfc52ea68fab",
        "patch": "@@ -76,7 +76,7 @@ class CKeyMetadata\n class CWalletDB : public CDB\n {\n public:\n-    CWalletDB(const std::string& strFilename, const char* pszMode = \"r+\") : CDB(strFilename, pszMode)\n+    CWalletDB(const std::string& strFilename, const char* pszMode = \"r+\", bool fFlushOnClose = true) : CDB(strFilename, pszMode, fFlushOnClose)\n     {\n     }\n "
      }
    ]
  },
  {
    "sha": "2fae1875ea9e44c46d6cc3e679b5500f4c783ea4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZmFlMTg3NWVhOWU0NGM0NmQ2Y2MzZTY3OWI1NTAwZjRjNzgzZWE0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T11:29:06Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T11:29:15Z"
      },
      "message": "Merge pull request #5243\n\nff09e31 sleep-wait on genesis block during init with -reindex (Matt Corallo)",
      "tree": {
        "sha": "806a5fedc0cd300b82e6e4bb3dfac9dbfa8afc67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/806a5fedc0cd300b82e6e4bb3dfac9dbfa8afc67"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2fae1875ea9e44c46d6cc3e679b5500f4c783ea4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUxiULAAoJEHSBCwEjRsmmXv0H/1byAZTbL1IRc6qdt6fJNmrg\nstEF6k3fJhc3MpXx93CLaGw+hrpuE9vknqzK6MFQyXBk6wASIuXZfR6lqoluQvUq\n9dmdXXN4H4AZtBt6aawKZY1MEgqiZFt95DRZj4bgX2kwd71XyvQMIyEoL0r0qAHu\nCBzuokKJ4h47L0zRDClay1bTgHIbwqrv4mCrhcLTgR6mol/VbRIhh5LcURnlVcMn\nRtZBtj4ibIhlgZCEMh/w6CK7M1vEZq8PgdNq2/BH1iOdlq2zV1Mo0BUiUBovI+RJ\nrkbz8Q2jhbwBAYBrfoRNuV/xrcE2rwQKsPA2ayWbnJOnaXmc+mrNZIFExo/vksc=\n=s9SD\n-----END PGP SIGNATURE-----",
        "payload": "tree 806a5fedc0cd300b82e6e4bb3dfac9dbfa8afc67\nparent 8204e19abed6c6ee8dca4a00943abfc52ea68fab\nparent ff09e31a51dcee404c9c037c7c5f50c522e67ea8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422271746 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422271755 +0100\n\nMerge pull request #5243\n\nff09e31 sleep-wait on genesis block during init with -reindex (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fae1875ea9e44c46d6cc3e679b5500f4c783ea4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2fae1875ea9e44c46d6cc3e679b5500f4c783ea4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fae1875ea9e44c46d6cc3e679b5500f4c783ea4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8204e19abed6c6ee8dca4a00943abfc52ea68fab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8204e19abed6c6ee8dca4a00943abfc52ea68fab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8204e19abed6c6ee8dca4a00943abfc52ea68fab"
      },
      {
        "sha": "ff09e31a51dcee404c9c037c7c5f50c522e67ea8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff09e31a51dcee404c9c037c7c5f50c522e67ea8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff09e31a51dcee404c9c037c7c5f50c522e67ea8"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "aaa5f06c7523e206183c004a0f4a5d1cc24ec85c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fae1875ea9e44c46d6cc3e679b5500f4c783ea4/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fae1875ea9e44c46d6cc3e679b5500f4c783ea4/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2fae1875ea9e44c46d6cc3e679b5500f4c783ea4",
        "patch": "@@ -1254,6 +1254,11 @@ bool AppInit2(boost::thread_group& threadGroup)\n             vImportFiles.push_back(strFile);\n     }\n     threadGroup.create_thread(boost::bind(&ThreadImport, vImportFiles));\n+    if (chainActive.Tip() == NULL) {\n+        LogPrintf(\"Waiting for genesis block to be imported...\\n\");\n+        while (!fRequestShutdown && chainActive.Tip() == NULL)\n+            MilliSleep(10);\n+    }\n \n     // ********************************************************* Step 10: start node\n "
      }
    ]
  },
  {
    "sha": "ca7880358c2be56935e861f2212967ecb1123c05",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTc4ODAzNThjMmJlNTY5MzVlODYxZjIyMTI5NjdlY2IxMTIzYzA1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T11:35:23Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T11:35:32Z"
      },
      "message": "Merge pull request #5628\n\n785bb81 [Qt] remove size grip to get rid of the right margin (Jonas Schnelli)",
      "tree": {
        "sha": "b5844a49292b916043786801aaf4ca52abd95f8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5844a49292b916043786801aaf4ca52abd95f8b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca7880358c2be56935e861f2212967ecb1123c05",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUxiaEAAoJEHSBCwEjRsmmDOcIAJaMVfGeg/mj4o3rHfmJYS8a\nhaKsHKBFqnFn9wwvtKIfPLdHHTrx313nEKsEpxTmRMCv1DfustlIvOYS9W//Xb5z\nNu4Pe+COIhi6EaLUmdDJwtw7n8AmTcYY2HWLBPXDelM8UgzAv6w2Bv8aVnNi7z8h\nxd2SD7OIfc6TIgbiG2MZKIbiH2y6Ue6hec+dBxMVAemaspfMbW1j6OLKIt3Ka6JE\n+6CrFRaU2wRCfaMFqyNM1QfuRWlhrYYC+UaJwHFRP9PXPzj7SLLlCZNXdTNNucGp\nWZo9YvgSfJNfcJ4kprbJOMzAwOw5KAIFQrjiZNda21OQdrj+j0QBq2AhyOAt5Co=\n=PHpQ\n-----END PGP SIGNATURE-----",
        "payload": "tree b5844a49292b916043786801aaf4ca52abd95f8b\nparent 2fae1875ea9e44c46d6cc3e679b5500f4c783ea4\nparent 785bb81c6bc672b55ca20910d2d9599986903753\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422272123 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422272132 +0100\n\nMerge pull request #5628\n\n785bb81 [Qt] remove size grip to get rid of the right margin (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca7880358c2be56935e861f2212967ecb1123c05",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca7880358c2be56935e861f2212967ecb1123c05",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca7880358c2be56935e861f2212967ecb1123c05/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2fae1875ea9e44c46d6cc3e679b5500f4c783ea4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fae1875ea9e44c46d6cc3e679b5500f4c783ea4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2fae1875ea9e44c46d6cc3e679b5500f4c783ea4"
      },
      {
        "sha": "785bb81c6bc672b55ca20910d2d9599986903753",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/785bb81c6bc672b55ca20910d2d9599986903753",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/785bb81c6bc672b55ca20910d2d9599986903753"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "09f784387ea78315937fb58e77f8d3a3bd7ccf27",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca7880358c2be56935e861f2212967ecb1123c05/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca7880358c2be56935e861f2212967ecb1123c05/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=ca7880358c2be56935e861f2212967ecb1123c05",
        "patch": "@@ -164,6 +164,9 @@ BitcoinGUI::BitcoinGUI(const NetworkStyle *networkStyle, QWidget *parent) :\n \n     // Create status bar\n     statusBar();\n+    \n+    // Disable size grip because it looks ugly and nobody needs it\n+    statusBar()->setSizeGripEnabled(false);\n \n     // Status bar notification icons\n     QFrame *frameBlocks = new QFrame();"
      }
    ]
  },
  {
    "sha": "ab0d7987c0f928436c1ba32411a2199938cb8325",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjBkNzk4N2MwZjkyODQzNmMxYmEzMjQxMWEyMTk5OTM4Y2I4MzI1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T11:36:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T11:36:41Z"
      },
      "message": "Merge pull request #5626\n\n652eb90 [Qt] change transaction table column width (Jonas Schnelli)\naf95b17 [Qt] resize oversized icons (Jonas Schnelli)",
      "tree": {
        "sha": "3c39221847b097275ec465d6a39c159c02305330",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c39221847b097275ec465d6a39c159c02305330"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab0d7987c0f928436c1ba32411a2199938cb8325",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUxibJAAoJEHSBCwEjRsmmmSUH/RuN6qIPnTeKOLtmRy7WbBBd\nZ2YNdOZ+rVgSymFo93ZdlnKbCChhJBx+QXPEMKvmq18bkmlqhkGbcDIWMS+ZL2aS\nEqdGRc4O7b+vXGYomR61Vmlv6TetXBHsNMbceyzFA7BSISjyxLrO/9IHjyDXO8Bz\nF7w6r2q0YFH88K1BDrFJja/1uFgj5IeSttPEVOxQRUYestUN3SUhjvyPE32/c7qv\nTis3vfvtsRfRswxUqOa9pFBzwJZjBil/qseuf68DrJKxzxGhD+hiT+gtd6dsO98c\n5s42qEOSOXGamK5Dd4UPNtA1FFFWW5NQvBuay8VbtTGzCwWbvvjs1rzdXUzB/YI=\n=V+SB\n-----END PGP SIGNATURE-----",
        "payload": "tree 3c39221847b097275ec465d6a39c159c02305330\nparent ca7880358c2be56935e861f2212967ecb1123c05\nparent 652eb904df301efff271274624faba16b7539311\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422272196 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422272201 +0100\n\nMerge pull request #5626\n\n652eb90 [Qt] change transaction table column width (Jonas Schnelli)\naf95b17 [Qt] resize oversized icons (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab0d7987c0f928436c1ba32411a2199938cb8325",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab0d7987c0f928436c1ba32411a2199938cb8325",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab0d7987c0f928436c1ba32411a2199938cb8325/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca7880358c2be56935e861f2212967ecb1123c05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca7880358c2be56935e861f2212967ecb1123c05",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca7880358c2be56935e861f2212967ecb1123c05"
      },
      {
        "sha": "652eb904df301efff271274624faba16b7539311",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/652eb904df301efff271274624faba16b7539311",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/652eb904df301efff271274624faba16b7539311"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1442b4e85e99d1d716c6baa611991b68d701c3ac",
        "filename": "src/qt/res/icons/add.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab0d7987c0f928436c1ba32411a2199938cb8325/src/qt/res/icons/add.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab0d7987c0f928436c1ba32411a2199938cb8325/src/qt/res/icons/add.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/add.png?ref=ab0d7987c0f928436c1ba32411a2199938cb8325"
      },
      {
        "sha": "779cca1d52043c8b92a65b13e55319053260e7ec",
        "filename": "src/qt/res/icons/filesave.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab0d7987c0f928436c1ba32411a2199938cb8325/src/qt/res/icons/filesave.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab0d7987c0f928436c1ba32411a2199938cb8325/src/qt/res/icons/filesave.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/filesave.png?ref=ab0d7987c0f928436c1ba32411a2199938cb8325"
      },
      {
        "sha": "092d919042691cc5d50ef724a140aca2deff571f",
        "filename": "src/qt/transactionview.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab0d7987c0f928436c1ba32411a2199938cb8325/src/qt/transactionview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab0d7987c0f928436c1ba32411a2199938cb8325/src/qt/transactionview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.h?ref=ab0d7987c0f928436c1ba32411a2199938cb8325",
        "patch": "@@ -49,10 +49,10 @@ class TransactionView : public QWidget\n     };\n \n     enum ColumnWidths {\n-        STATUS_COLUMN_WIDTH = 23,\n+        STATUS_COLUMN_WIDTH = 30,\n         WATCHONLY_COLUMN_WIDTH = 23,\n         DATE_COLUMN_WIDTH = 120,\n-        TYPE_COLUMN_WIDTH = 120,\n+        TYPE_COLUMN_WIDTH = 113,\n         AMOUNT_MINIMUM_COLUMN_WIDTH = 120,\n         MINIMUM_COLUMN_WIDTH = 23\n     };"
      }
    ]
  },
  {
    "sha": "2511a39cca78c3ca281ad6fe6d381cbb1f66c843",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTExYTM5Y2NhNzhjM2NhMjgxYWQ2ZmU2ZDM4MWNiYjFmNjZjODQz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T11:38:10Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T11:38:22Z"
      },
      "message": "Merge pull request #5575\n\n7b782f5 RPCWallet: Notate all account stuff as deprecated (Luke Dashjr)",
      "tree": {
        "sha": "42de04688ad1d5cfa796d2af317582e99576e7a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/42de04688ad1d5cfa796d2af317582e99576e7a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2511a39cca78c3ca281ad6fe6d381cbb1f66c843",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUxicuAAoJEHSBCwEjRsmmXyAH/2mnGetcOMAvcROrv8R9TyjS\nomOiXYvF0F8MX7TxxaAdEG6zFgUrBpdrzdslsZTsJjqplOebfTRE4BcPl4ajGjxm\nDekuK+x58bddFzm3QmtIkbhsvdH8u9XpsHVXfL4nMUQrJR8K+s4mdi0EBzHvZpAW\nAsMHQYrhoRK1nUJOwzyrIgaJ4nRs04HJ+J7BiEEIN4sGU6pb+NCYpjcfMcMkWWT/\nhz7H6lTete5We8sCbaO+n/NR0qjns7u5h6BG1xPx+7J4Nw5IRtzaHxpN7WTccd38\ndLyHBxTRNL6vf/COX59fGWuhJYPitAFq4dQtncvOdInbBnoyJupY/8S6ZwvT//E=\n=ithW\n-----END PGP SIGNATURE-----",
        "payload": "tree 42de04688ad1d5cfa796d2af317582e99576e7a8\nparent ab0d7987c0f928436c1ba32411a2199938cb8325\nparent 7b782f5b01f4c2d906a28800d01ffd05ad257cbe\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422272290 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422272302 +0100\n\nMerge pull request #5575\n\n7b782f5 RPCWallet: Notate all account stuff as deprecated (Luke Dashjr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2511a39cca78c3ca281ad6fe6d381cbb1f66c843",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2511a39cca78c3ca281ad6fe6d381cbb1f66c843",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2511a39cca78c3ca281ad6fe6d381cbb1f66c843/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab0d7987c0f928436c1ba32411a2199938cb8325",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab0d7987c0f928436c1ba32411a2199938cb8325",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab0d7987c0f928436c1ba32411a2199938cb8325"
      },
      {
        "sha": "7b782f5b01f4c2d906a28800d01ffd05ad257cbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b782f5b01f4c2d906a28800d01ffd05ad257cbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b782f5b01f4c2d906a28800d01ffd05ad257cbe"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 46,
      "deletions": 55
    },
    "files": [
      {
        "sha": "c225b9f3e95f4772097992439c53f7dc96e57ee5",
        "filename": "contrib/debian/manpages/bitcoind.1",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2511a39cca78c3ca281ad6fe6d381cbb1f66c843/contrib/debian/manpages/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2511a39cca78c3ca281ad6fe6d381cbb1f66c843/contrib/debian/manpages/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/manpages/bitcoind.1?ref=2511a39cca78c3ca281ad6fe6d381cbb1f66c843",
        "patch": "@@ -85,19 +85,19 @@ This help message\n Safely copies *wallet.dat* to 'destination', which can be a directory or a path with filename.\n .TP\n \\fBgetaccount 'bitcoinaddress'\\fR\n-Returns the account associated with the given address.\n+DEPRECATED. Returns the account associated with the given address.\n .TP\n \\fBsetaccount 'bitcoinaddress' ['account']\\fR\n-Sets the ['account'] associated with the given address. ['account'] may be omitted to remove an address from ['account'].\n+DEPRECATED. Sets the ['account'] associated with the given address. ['account'] may be omitted to remove an address from ['account'].\n .TP\n \\fBgetaccountaddress 'account'\\fR\n-Returns a new bitcoin address for 'account'.\n+DEPRECATED. Returns a new bitcoin address for 'account'.\n .TP\n \\fBgetaddressesbyaccount 'account'\\fR\n-Returns the list of addresses associated with the given 'account'.\n+DEPRECATED. Returns the list of addresses associated with the given 'account'.\n .TP\n \\fBgetbalance 'account'\\fR\n-Returns the server's available balance, or the balance for 'account'.\n+Returns the server's available balance, or the balance for 'account' (accounts are deprecated).\n .TP\n \\fBgetblockcount\\fR\n Returns the number of blocks in the longest block chain.\n@@ -124,10 +124,10 @@ Returns a recent hashes per second performance measurement while generating.\n Returns an object containing server information.\n .TP\n \\fBgetnewaddress 'account'\\fR\n-Returns a new bitcoin address for receiving payments. If 'account' is specified (recommended), it is added to the address book so payments received with the address will be credited to 'account'.\n+Returns a new bitcoin address for receiving payments. If 'account' is specified (deprecated), it is added to the address book so payments received with the address will be credited to 'account'.\n .TP\n \\fBgetreceivedbyaccount 'account' ['minconf=1']\\fR\n-Returns the total amount received by addresses associated with 'account' in transactions with at least ['minconf'] confirmations.\n+DEPRECATED. Returns the total amount received by addresses associated with 'account' in transactions with at least ['minconf'] confirmations.\n .TP\n \\fBgetreceivedbyaddress 'bitcoinaddress' ['minconf=1']\\fR\n Returns the total amount received by 'bitcoinaddress' in transactions with at least ['minconf'] confirmations.\n@@ -147,21 +147,21 @@ If 'data' is specified, tries to solve the block and returns true if it was succ\n List commands, or get help for a command.\n .TP\n \\fBlistaccounts ['minconf=1']\\fR\n-List accounts and their current balances.\n+DEPRECATED. List accounts and their current balances.\n      *note: requires bitcoin 0.3.20 or later.\n .TP\n \\fBlistreceivedbyaccount ['minconf=1'] ['includeempty=false']\\fR\n ['minconf'] is the minimum number of confirmations before payments are included. ['includeempty'] whether to include addresses that haven't received any payments. Returns an array of objects containing:\n \n-    \"account\"       : the account of the receiving address.\n+    \"account\"       : DEPRECATED. the account of the receiving address.\n     \"amount\"        : total amount received by the address.\n     \"confirmations\" : number of confirmations of the most recent transaction included.\n .TP\n \\fBlistreceivedbyaddress ['minconf=1'] ['includeempty=false']\\fR\n ['minconf'] is the minimum number of confirmations before payments are included. ['includeempty'] whether to include addresses that haven't received any payments. Returns an array of objects containing:\n \n     \"address\"       : receiving address.\n-    \"account\"       : the account of the receiving address.\n+    \"account\"       : DEPRECATED. the account of the receiving address.\n     \"amount\"        : total amount received by the address.\n     \"confirmations\" : number of confirmations of the most recent transaction included.\n .TP\n@@ -180,10 +180,10 @@ Returns a list of the last ['count'] transactions for 'account' \\- for all accou\n     *note: requires bitcoin 0.3.20 or later.\n .TP\n \\fBmove <'fromaccount'> <'toaccount'> <'amount'> ['minconf=1'] ['comment']\\fR\n-Moves funds between accounts.\n+DEPRECATED. Moves funds between accounts.\n .TP\n \\fBsendfrom* <'account'> <'bitcoinaddress'> <'amount'> ['minconf=1'] ['comment'] ['comment-to']\\fR\n-Sends amount from account's balance to 'bitcoinaddress'. This method will fail if there is less than amount bitcoins with ['minconf'] confirmations in the account's balance (unless account is the empty-string-named default account; it behaves like the *sendtoaddress* method). Returns transaction ID on success.\n+DEPRECATED. Sends amount from account's balance to 'bitcoinaddress'. This method will fail if there is less than amount bitcoins with ['minconf'] confirmations in the account's balance (unless account is the empty-string-named default account; it behaves like the *sendtoaddress* method). Returns transaction ID on success.\n .TP     \n \\fBsendtoaddress 'bitcoinaddress' 'amount' ['comment'] ['comment-to']\\fR\n Sends amount from the server's available balance to 'bitcoinaddress'. amount is a real and is rounded to the nearest 0.01. Returns transaction id on success."
      },
      {
        "sha": "3d647a0d2d13114350294925e1b74cfcc43c9f1e",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2511a39cca78c3ca281ad6fe6d381cbb1f66c843/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2511a39cca78c3ca281ad6fe6d381cbb1f66c843/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=2511a39cca78c3ca281ad6fe6d381cbb1f66c843",
        "patch": "@@ -165,7 +165,7 @@ Value validateaddress(const Array& params, bool fHelp)\n             \"  \\\"isscript\\\" : true|false,        (boolean) If the key is a script\\n\"\n             \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n             \"  \\\"iscompressed\\\" : true|false,    (boolean) If the address is compressed\\n\"\n-            \"  \\\"account\\\" : \\\"account\\\"         (string) The account associated with the address, \\\"\\\" is the default account\\n\"\n+            \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. The account associated with the address, \\\"\\\" is the default account\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")"
      },
      {
        "sha": "2b108bf588826297e0f0636c8f5f9d133c528e68",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2511a39cca78c3ca281ad6fe6d381cbb1f66c843/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2511a39cca78c3ca281ad6fe6d381cbb1f66c843/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=2511a39cca78c3ca281ad6fe6d381cbb1f66c843",
        "patch": "@@ -216,7 +216,7 @@ Value listunspent(const Array& params, bool fHelp)\n             \"    \\\"txid\\\" : \\\"txid\\\",        (string) the transaction id \\n\"\n             \"    \\\"vout\\\" : n,               (numeric) the vout value\\n\"\n             \"    \\\"address\\\" : \\\"address\\\",  (string) the bitcoin address\\n\"\n-            \"    \\\"account\\\" : \\\"account\\\",  (string) The associated account, or \\\"\\\" for the default account\\n\"\n+            \"    \\\"account\\\" : \\\"account\\\",  (string) DEPRECATED. The associated account, or \\\"\\\" for the default account\\n\"\n             \"    \\\"scriptPubKey\\\" : \\\"key\\\", (string) the script key\\n\"\n             \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction amount in btc\\n\"\n             \"    \\\"confirmations\\\" : n       (numeric) The number of confirmations\\n\""
      },
      {
        "sha": "6ad3ee54d564ec9b33fd5213466fcb3e46152bf7",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 41,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2511a39cca78c3ca281ad6fe6d381cbb1f66c843/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2511a39cca78c3ca281ad6fe6d381cbb1f66c843/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=2511a39cca78c3ca281ad6fe6d381cbb1f66c843",
        "patch": "@@ -79,17 +79,15 @@ Value getnewaddress(const Array& params, bool fHelp)\n         throw runtime_error(\n             \"getnewaddress ( \\\"account\\\" )\\n\"\n             \"\\nReturns a new Bitcoin address for receiving payments.\\n\"\n-            \"If 'account' is specified (recommended), it is added to the address book \\n\"\n+            \"If 'account' is specified (DEPRECATED), it is added to the address book \\n\"\n             \"so payments received with the address will be credited to 'account'.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"account\\\"        (string, optional) The account name for the address to be linked to. if not provided, the default account \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.\\n\"\n+            \"1. \\\"account\\\"        (string, optional) DEPRECATED. The account name for the address to be linked to. if not provided, the default account \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"bitcoinaddress\\\"    (string) The new bitcoin address\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getnewaddress\", \"\")\n-            + HelpExampleCli(\"getnewaddress\", \"\\\"\\\"\")\n-            + HelpExampleCli(\"getnewaddress\", \"\\\"myaccount\\\"\")\n-            + HelpExampleRpc(\"getnewaddress\", \"\\\"myaccount\\\"\")\n+            + HelpExampleRpc(\"getnewaddress\", \"\")\n         );\n \n     // Parse the account first so we don't generate a key if there's an error\n@@ -154,7 +152,7 @@ Value getaccountaddress(const Array& params, bool fHelp)\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"getaccountaddress \\\"account\\\"\\n\"\n-            \"\\nReturns the current Bitcoin address for receiving payments to this account.\\n\"\n+            \"\\nDEPRECATED. Returns the current Bitcoin address for receiving payments to this account.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"account\\\"       (string, required) The account name for the address. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created and a new address created  if there is no account by the given name.\\n\"\n             \"\\nResult:\\n\"\n@@ -212,7 +210,7 @@ Value setaccount(const Array& params, bool fHelp)\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n             \"setaccount \\\"bitcoinaddress\\\" \\\"account\\\"\\n\"\n-            \"\\nSets the account associated with the given address.\\n\"\n+            \"\\nDEPRECATED. Sets the account associated with the given address.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to be associated with an account.\\n\"\n             \"2. \\\"account\\\"         (string, required) The account to assign the address to.\\n\"\n@@ -254,7 +252,7 @@ Value getaccount(const Array& params, bool fHelp)\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"getaccount \\\"bitcoinaddress\\\"\\n\"\n-            \"\\nReturns the account associated with the given address.\\n\"\n+            \"\\nDEPRECATED. Returns the account associated with the given address.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for account lookup.\\n\"\n             \"\\nResult:\\n\"\n@@ -281,7 +279,7 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"getaddressesbyaccount \\\"account\\\"\\n\"\n-            \"\\nReturns the list of addresses for the given account.\\n\"\n+            \"\\nDEPRECATED. Returns the list of addresses for the given account.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"account\\\"  (string, required) The account name.\\n\"\n             \"\\nResult:\\n\"\n@@ -400,7 +398,7 @@ Value listaddressgroupings(const Array& params, bool fHelp)\n             \"    [\\n\"\n             \"      \\\"bitcoinaddress\\\",     (string) The bitcoin address\\n\"\n             \"      amount,                 (numeric) The amount in btc\\n\"\n-            \"      \\\"account\\\"             (string, optional) The account\\n\"\n+            \"      \\\"account\\\"             (string, optional) The account (DEPRECATED)\\n\"\n             \"    ]\\n\"\n             \"    ,...\\n\"\n             \"  ]\\n\"\n@@ -542,7 +540,7 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n             \"getreceivedbyaccount \\\"account\\\" ( minconf )\\n\"\n-            \"\\nReturns the total amount received by addresses with <account> in transactions with at least [minconf] confirmations.\\n\"\n+            \"\\nDEPRECATED. Returns the total amount received by addresses with <account> in transactions with at least [minconf] confirmations.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"account\\\"      (string, required) The selected account, may be the default account using \\\"\\\".\\n\"\n             \"2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n@@ -627,26 +625,22 @@ Value getbalance(const Array& params, bool fHelp)\n         throw runtime_error(\n             \"getbalance ( \\\"account\\\" minconf includeWatchonly )\\n\"\n             \"\\nIf account is not specified, returns the server's total available balance.\\n\"\n-            \"If account is specified, returns the balance in the account.\\n\"\n+            \"If account is specified (DEPRECATED), returns the balance in the account.\\n\"\n             \"Note that the account \\\"\\\" is not the same as leaving the parameter out.\\n\"\n             \"The server total may be different to the balance in the default \\\"\\\" account.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"account\\\"      (string, optional) The selected account, or \\\"*\\\" for entire wallet. It may be the default account using \\\"\\\".\\n\"\n+            \"1. \\\"account\\\"      (string, optional) DEPRECATED. The selected account, or \\\"*\\\" for entire wallet. It may be the default account using \\\"\\\".\\n\"\n             \"2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n             \"3. includeWatchonly (bool, optional, default=false) Also include balance in watchonly addresses (see 'importaddress')\\n\"\n             \"\\nResult:\\n\"\n             \"amount              (numeric) The total amount in btc received for this account.\\n\"\n             \"\\nExamples:\\n\"\n-            \"\\nThe total amount in the server across all accounts\\n\"\n+            \"\\nThe total amount in the wallet\\n\"\n             + HelpExampleCli(\"getbalance\", \"\") +\n-            \"\\nThe total amount in the server across all accounts, with at least 5 confirmations\\n\"\n+            \"\\nThe total amount in the wallet at least 5 blocks confirmed\\n\"\n             + HelpExampleCli(\"getbalance\", \"\\\"*\\\" 6\") +\n-            \"\\nThe total amount in the default account with at least 1 confirmation\\n\"\n-            + HelpExampleCli(\"getbalance\", \"\\\"\\\"\") +\n-            \"\\nThe total amount in the account named tabby with at least 6 confirmations\\n\"\n-            + HelpExampleCli(\"getbalance\", \"\\\"tabby\\\" 6\") +\n             \"\\nAs a json rpc call\\n\"\n-            + HelpExampleRpc(\"getbalance\", \"\\\"tabby\\\", 6\")\n+            + HelpExampleRpc(\"getbalance\", \"\\\"*\\\", 6\")\n         );\n \n     if (params.size() == 0)\n@@ -710,7 +704,7 @@ Value movecmd(const Array& params, bool fHelp)\n     if (fHelp || params.size() < 3 || params.size() > 5)\n         throw runtime_error(\n             \"move \\\"fromaccount\\\" \\\"toaccount\\\" amount ( minconf \\\"comment\\\" )\\n\"\n-            \"\\nMove a specified amount from one account in your wallet to another.\\n\"\n+            \"\\nDEPRECATED. Move a specified amount from one account in your wallet to another.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"fromaccount\\\"   (string, required) The name of the account to move funds from. May be the default account using \\\"\\\".\\n\"\n             \"2. \\\"toaccount\\\"     (string, required) The name of the account to move funds to. May be the default account using \\\"\\\".\\n\"\n@@ -775,7 +769,7 @@ Value sendfrom(const Array& params, bool fHelp)\n     if (fHelp || params.size() < 3 || params.size() > 6)\n         throw runtime_error(\n             \"sendfrom \\\"fromaccount\\\" \\\"tobitcoinaddress\\\" amount ( minconf \\\"comment\\\" \\\"comment-to\\\" )\\n\"\n-            \"\\nSent an amount from an account to a bitcoin address.\\n\"\n+            \"\\nDEPRECATED (use sendtoaddress). Sent an amount from an account to a bitcoin address.\\n\"\n             \"The amount is a real and is rounded to the nearest 0.00000001.\"\n             + HelpRequiringPassphrase() + \"\\n\"\n             \"\\nArguments:\\n\"\n@@ -836,7 +830,7 @@ Value sendmany(const Array& params, bool fHelp)\n             \"\\nSend multiple times. Amounts are double-precision floating point numbers.\"\n             + HelpRequiringPassphrase() + \"\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"fromaccount\\\"         (string, required) The account to send the funds from, can be \\\"\\\" for the default account\\n\"\n+            \"1. \\\"fromaccount\\\"         (string, required) DEPRECATED. The account to send the funds from. Should be \\\"\\\" for the default account\\n\"\n             \"2. \\\"amounts\\\"             (string, required) A json object with addresses and amounts\\n\"\n             \"    {\\n\"\n             \"      \\\"address\\\":amount   (numeric) The bitcoin address is the key, the numeric amount in btc is the value\\n\"\n@@ -849,11 +843,11 @@ Value sendmany(const Array& params, bool fHelp)\n             \"                                    the number of addresses.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nSend two amounts to two different addresses:\\n\"\n-            + HelpExampleCli(\"sendmany\", \"\\\"tabby\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\"\") +\n+            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\"\") +\n             \"\\nSend two amounts to two different addresses setting the confirmation and comment:\\n\"\n-            + HelpExampleCli(\"sendmany\", \"\\\"tabby\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\" 6 \\\"testing\\\"\") +\n+            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\" 6 \\\"testing\\\"\") +\n             \"\\nAs a json rpc call\\n\"\n-            + HelpExampleRpc(\"sendmany\", \"\\\"tabby\\\", \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\", 6, \\\"testing\\\"\")\n+            + HelpExampleRpc(\"sendmany\", \"\\\"\\\", \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\", 6, \\\"testing\\\"\")\n         );\n \n     string strAccount = AccountFromValue(params[0]);\n@@ -918,7 +912,7 @@ Value addmultisigaddress(const Array& params, bool fHelp)\n         string msg = \"addmultisigaddress nrequired [\\\"key\\\",...] ( \\\"account\\\" )\\n\"\n             \"\\nAdd a nrequired-to-sign multisignature address to the wallet.\\n\"\n             \"Each key is a Bitcoin address or hex-encoded public key.\\n\"\n-            \"If 'account' is specified, assign address to that account.\\n\"\n+            \"If 'account' is specified (DEPRECATED), assign address to that account.\\n\"\n \n             \"\\nArguments:\\n\"\n             \"1. nrequired        (numeric, required) The number of required signatures out of the n keys or addresses.\\n\"\n@@ -927,7 +921,7 @@ Value addmultisigaddress(const Array& params, bool fHelp)\n             \"       \\\"address\\\"  (string) bitcoin address or hex-encoded public key\\n\"\n             \"       ...,\\n\"\n             \"     ]\\n\"\n-            \"3. \\\"account\\\"      (string, optional) An account to assign the addresses to.\\n\"\n+            \"3. \\\"account\\\"      (string, optional) DEPRECATED. An account to assign the addresses to.\\n\"\n \n             \"\\nResult:\\n\"\n             \"\\\"bitcoinaddress\\\"  (string) A bitcoin address associated with the keys.\\n\"\n@@ -1103,7 +1097,7 @@ Value listreceivedbyaddress(const Array& params, bool fHelp)\n             \"  {\\n\"\n             \"    \\\"involvesWatchonly\\\" : true,        (bool) Only returned if imported addresses were involved in transaction\\n\"\n             \"    \\\"address\\\" : \\\"receivingaddress\\\",  (string) The receiving address\\n\"\n-            \"    \\\"account\\\" : \\\"accountname\\\",       (string) The account of the receiving address. The default account is \\\"\\\".\\n\"\n+            \"    \\\"account\\\" : \\\"accountname\\\",       (string) DEPRECATED. The account of the receiving address. The default account is \\\"\\\".\\n\"\n             \"    \\\"amount\\\" : x.xxx,                  (numeric) The total amount in btc received by the address\\n\"\n             \"    \\\"confirmations\\\" : n                (numeric) The number of confirmations of the most recent transaction included\\n\"\n             \"  }\\n\"\n@@ -1124,7 +1118,7 @@ Value listreceivedbyaccount(const Array& params, bool fHelp)\n     if (fHelp || params.size() > 3)\n         throw runtime_error(\n             \"listreceivedbyaccount ( minconf includeempty includeWatchonly)\\n\"\n-            \"\\nList balances by account.\\n\"\n+            \"\\nDEPRECATED. List balances by account.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. minconf      (numeric, optional, default=1) The minimum number of confirmations before payments are included.\\n\"\n             \"2. includeempty (boolean, optional, default=false) Whether to include accounts that haven't received any payments.\\n\"\n@@ -1251,15 +1245,14 @@ Value listtransactions(const Array& params, bool fHelp)\n             \"listtransactions ( \\\"account\\\" count from includeWatchonly)\\n\"\n             \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"account\\\"    (string, optional) The account name. If not included, it will list all transactions for all accounts.\\n\"\n-            \"                                     If \\\"\\\" is set, it will list transactions for the default account.\\n\"\n+            \"1. \\\"account\\\"    (string, optional) DEPRECATED. The account name. Should be \\\"*\\\".\\n\"\n             \"2. count          (numeric, optional, default=10) The number of transactions to return\\n\"\n             \"3. from           (numeric, optional, default=0) The number of transactions to skip\\n\"\n             \"4. includeWatchonly (bool, optional, default=false) Include transactions to watchonly addresses (see 'importaddress')\\n\"\n             \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  {\\n\"\n-            \"    \\\"account\\\":\\\"accountname\\\",       (string) The account name associated with the transaction. \\n\"\n+            \"    \\\"account\\\":\\\"accountname\\\",       (string) DEPRECATED. The account name associated with the transaction. \\n\"\n             \"                                                It will be \\\"\\\" for the default account.\\n\"\n             \"    \\\"address\\\":\\\"bitcoinaddress\\\",    (string) The bitcoin address of the transaction. Not present for \\n\"\n             \"                                                move transactions (category = move).\\n\"\n@@ -1293,12 +1286,10 @@ Value listtransactions(const Array& params, bool fHelp)\n             \"\\nExamples:\\n\"\n             \"\\nList the most recent 10 transactions in the systems\\n\"\n             + HelpExampleCli(\"listtransactions\", \"\") +\n-            \"\\nList the most recent 10 transactions for the tabby account\\n\"\n-            + HelpExampleCli(\"listtransactions\", \"\\\"tabby\\\"\") +\n-            \"\\nList transactions 100 to 120 from the tabby account\\n\"\n-            + HelpExampleCli(\"listtransactions\", \"\\\"tabby\\\" 20 100\") +\n+            \"\\nList transactions 100 to 120\\n\"\n+            + HelpExampleCli(\"listtransactions\", \"\\\"*\\\" 20 100\") +\n             \"\\nAs a json rpc call\\n\"\n-            + HelpExampleRpc(\"listtransactions\", \"\\\"tabby\\\", 20, 100\")\n+            + HelpExampleRpc(\"listtransactions\", \"\\\"*\\\", 20, 100\")\n         );\n \n     string strAccount = \"*\";\n@@ -1361,7 +1352,7 @@ Value listaccounts(const Array& params, bool fHelp)\n     if (fHelp || params.size() > 2)\n         throw runtime_error(\n             \"listaccounts ( minconf includeWatchonly)\\n\"\n-            \"\\nReturns Object that has account names as keys, account balances as values.\\n\"\n+            \"\\nDEPRECATED. Returns Object that has account names as keys, account balances as values.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. minconf          (numeric, optional, default=1) Only include transactions with at least this many confirmations\\n\"\n             \"2. includeWatchonly (bool, optional, default=false) Include balances in watchonly addresses (see 'importaddress')\\n\"\n@@ -1444,7 +1435,7 @@ Value listsinceblock(const Array& params, bool fHelp)\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"transactions\\\": [\\n\"\n-            \"    \\\"account\\\":\\\"accountname\\\",       (string) The account name associated with the transaction. Will be \\\"\\\" for the default account.\\n\"\n+            \"    \\\"account\\\":\\\"accountname\\\",       (string) DEPRECATED. The account name associated with the transaction. Will be \\\"\\\" for the default account.\\n\"\n             \"    \\\"address\\\":\\\"bitcoinaddress\\\",    (string) The bitcoin address of the transaction. Not present for move transactions (category = move).\\n\"\n             \"    \\\"category\\\":\\\"send|receive\\\",     (string) The transaction category. 'send' has negative amounts, 'receive' has positive amounts.\\n\"\n             \"    \\\"amount\\\": x.xxx,          (numeric) The amount in btc. This is negative for the 'send' category, and for the 'move' category for moves \\n\"\n@@ -1538,7 +1529,7 @@ Value gettransaction(const Array& params, bool fHelp)\n             \"  \\\"timereceived\\\" : ttt,    (numeric) The time received in seconds since epoch (1 Jan 1970 GMT)\\n\"\n             \"  \\\"details\\\" : [\\n\"\n             \"    {\\n\"\n-            \"      \\\"account\\\" : \\\"accountname\\\",  (string) The account name involved in the transaction, can be \\\"\\\" for the default account.\\n\"\n+            \"      \\\"account\\\" : \\\"accountname\\\",  (string) DEPRECATED. The account name involved in the transaction, can be \\\"\\\" for the default account.\\n\"\n             \"      \\\"address\\\" : \\\"bitcoinaddress\\\",   (string) The bitcoin address involved in the transaction\\n\"\n             \"      \\\"category\\\" : \\\"send|receive\\\",    (string) The category, either 'send' or 'receive'\\n\"\n             \"      \\\"amount\\\" : x.xxx                  (numeric) The amount in btc\\n\""
      }
    ]
  },
  {
    "sha": "23ef5b77a4222a628d18219ba656be545810832d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyM2VmNWI3N2E0MjIyYTYyOGQxODIxOWJhNjU2YmU1NDU4MTA4MzJk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T11:39:09Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T11:39:54Z"
      },
      "message": "Merge pull request #5695\n\n5fdc5b0 depends: latest config.guess and config.sub (Michael Ford)",
      "tree": {
        "sha": "e28ebedb41e6f810eb72fb982a9c40d63ce3432d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e28ebedb41e6f810eb72fb982a9c40d63ce3432d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23ef5b77a4222a628d18219ba656be545810832d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUxieKAAoJEHSBCwEjRsmmSRgH/2SJzy6z7LyUipVFNUV51rZl\nwqy5Gr8cGSletQFaTD/Ko1SQoTYCaIzFmo0pXBML/bFe9W/FKPKcpiEv3TOwBcXj\nfimNQvIroeqTEZrC2NRnkVHFEo0EVtJ7I1MyhS9DhVuyyo7lD2J7EaKtaG0BkTHt\n8SdB1a3zxh+VSZYamYtOcC/0PrK/AQrx51JJrJ7CS/nne+gDw5toN7VK2ccWoMvd\ntC98MqLCfHCr/GXqc6dXrfRVe71D60y4I46rLMbYbGoPneq0ZAX03e52LuhCLEjT\nd4lvlriKkPI828vbbzmL2cpGP6/N3qM6Q3WfZroKB5hhBAe4h9oxzFGhPaBd9VM=\n=CXTU\n-----END PGP SIGNATURE-----",
        "payload": "tree e28ebedb41e6f810eb72fb982a9c40d63ce3432d\nparent 2511a39cca78c3ca281ad6fe6d381cbb1f66c843\nparent 5fdc5b08e7e27d9d1d805cea074232b1c7f05d47\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422272349 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422272394 +0100\n\nMerge pull request #5695\n\n5fdc5b0 depends: latest config.guess and config.sub (Michael Ford)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23ef5b77a4222a628d18219ba656be545810832d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23ef5b77a4222a628d18219ba656be545810832d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23ef5b77a4222a628d18219ba656be545810832d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2511a39cca78c3ca281ad6fe6d381cbb1f66c843",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2511a39cca78c3ca281ad6fe6d381cbb1f66c843",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2511a39cca78c3ca281ad6fe6d381cbb1f66c843"
      },
      {
        "sha": "5fdc5b08e7e27d9d1d805cea074232b1c7f05d47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fdc5b08e7e27d9d1d805cea074232b1c7f05d47",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5fdc5b08e7e27d9d1d805cea074232b1c7f05d47"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 27,
      "deletions": 13
    },
    "files": [
      {
        "sha": "dbfb9786cb6f9b8003367505d49dcadb2145610a",
        "filename": "depends/config.guess",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23ef5b77a4222a628d18219ba656be545810832d/depends/config.guess",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23ef5b77a4222a628d18219ba656be545810832d/depends/config.guess",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.guess?ref=23ef5b77a4222a628d18219ba656be545810832d",
        "patch": "@@ -1,8 +1,8 @@\n #! /bin/sh\n # Attempt to guess a canonical system name.\n-#   Copyright 1992-2014 Free Software Foundation, Inc.\n+#   Copyright 1992-2015 Free Software Foundation, Inc.\n \n-timestamp='2014-03-23'\n+timestamp='2015-01-01'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -24,12 +24,12 @@ timestamp='2014-03-23'\n # program.  This Exception is an additional permission under section 7\n # of the GNU General Public License, version 3 (\"GPLv3\").\n #\n-# Originally written by Per Bothner.\n+# Originally written by Per Bothner; maintained since 2000 by Ben Elliston.\n #\n # You can get the latest version of this script from:\n # http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD\n #\n-# Please send patches with a ChangeLog entry to config-patches@gnu.org.\n+# Please send patches to <config-patches@gnu.org>.\n \n \n me=`echo \"$0\" | sed -e 's,.*/,,'`\n@@ -50,7 +50,7 @@ version=\"\\\n GNU config.guess ($timestamp)\n \n Originally written by Per Bothner.\n-Copyright 1992-2014 Free Software Foundation, Inc.\n+Copyright 1992-2015 Free Software Foundation, Inc.\n \n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n@@ -579,8 +579,9 @@ EOF\n \telse\n \t\tIBM_ARCH=powerpc\n \tfi\n-\tif [ -x /usr/bin/oslevel ] ; then\n-\t\tIBM_REV=`/usr/bin/oslevel`\n+\tif [ -x /usr/bin/lslpp ] ; then\n+\t\tIBM_REV=`/usr/bin/lslpp -Lqc bos.rte.libc |\n+\t\t\t   awk -F: '{ print $3 }' | sed s/[0-9]*$/0/`\n \telse\n \t\tIBM_REV=${UNAME_VERSION}.${UNAME_RELEASE}\n \tfi"
      },
      {
        "sha": "6d2e94c8bf9ea6925b96846aade1fd64074985d3",
        "filename": "depends/config.sub",
        "status": "modified",
        "additions": 19,
        "deletions": 6,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23ef5b77a4222a628d18219ba656be545810832d/depends/config.sub",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23ef5b77a4222a628d18219ba656be545810832d/depends/config.sub",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.sub?ref=23ef5b77a4222a628d18219ba656be545810832d",
        "patch": "@@ -1,8 +1,8 @@\n #! /bin/sh\n # Configuration validation subroutine script.\n-#   Copyright 1992-2014 Free Software Foundation, Inc.\n+#   Copyright 1992-2015 Free Software Foundation, Inc.\n \n-timestamp='2014-05-01'\n+timestamp='2015-01-01'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -25,7 +25,7 @@ timestamp='2014-05-01'\n # of the GNU General Public License, version 3 (\"GPLv3\").\n \n \n-# Please send patches with a ChangeLog entry to config-patches@gnu.org.\n+# Please send patches to <config-patches@gnu.org>.\n #\n # Configuration subroutine to validate and canonicalize a configuration type.\n # Supply the specified configuration type as an argument.\n@@ -68,7 +68,7 @@ Report bugs and patches to <config-patches@gnu.org>.\"\n version=\"\\\n GNU config.sub ($timestamp)\n \n-Copyright 1992-2014 Free Software Foundation, Inc.\n+Copyright 1992-2015 Free Software Foundation, Inc.\n \n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n@@ -260,7 +260,7 @@ case $basic_machine in\n \t| c4x | c8051 | clipper \\\n \t| d10v | d30v | dlx | dsp16xx \\\n \t| epiphany \\\n-\t| fido | fr30 | frv \\\n+\t| fido | fr30 | frv | ft32 \\\n \t| h8300 | h8500 | hppa | hppa1.[01] | hppa2.0 | hppa2.0[nw] | hppa64 \\\n \t| hexagon \\\n \t| i370 | i860 | i960 | ia64 \\\n@@ -302,6 +302,7 @@ case $basic_machine in\n \t| pdp10 | pdp11 | pj | pjl \\\n \t| powerpc | powerpc64 | powerpc64le | powerpcle \\\n \t| pyramid \\\n+\t| riscv32 | riscv64 \\\n \t| rl78 | rx \\\n \t| score \\\n \t| sh | sh[1234] | sh[24]a | sh[24]aeb | sh[23]e | sh[34]eb | sheb | shbe | shle | sh[1234]le | sh3ele \\\n@@ -312,6 +313,7 @@ case $basic_machine in\n \t| tahoe | tic4x | tic54x | tic55x | tic6x | tic80 | tron \\\n \t| ubicom32 \\\n \t| v850 | v850e | v850e1 | v850e2 | v850es | v850e2v3 \\\n+\t| visium \\\n \t| we32k \\\n \t| x86 | xc16x | xstormy16 | xtensa \\\n \t| z8k | z80)\n@@ -326,6 +328,9 @@ case $basic_machine in\n \tc6x)\n \t\tbasic_machine=tic6x-unknown\n \t\t;;\n+\tleon|leon[3-9])\n+\t\tbasic_machine=sparc-$basic_machine\n+\t\t;;\n \tm6811 | m68hc11 | m6812 | m68hc12 | m68hcs12x | nvptx | picochip)\n \t\tbasic_machine=$basic_machine-unknown\n \t\tos=-none\n@@ -436,6 +441,7 @@ case $basic_machine in\n \t| ubicom32-* \\\n \t| v850-* | v850e-* | v850e1-* | v850es-* | v850e2-* | v850e2v3-* \\\n \t| vax-* \\\n+\t| visium-* \\\n \t| we32k-* \\\n \t| x86-* | x86_64-* | xc16x-* | xps100-* \\\n \t| xstormy16-* | xtensa*-* \\\n@@ -773,6 +779,9 @@ case $basic_machine in\n \t\tbasic_machine=m68k-isi\n \t\tos=-sysv\n \t\t;;\n+\tleon-*|leon[3-9]-*)\n+\t\tbasic_machine=sparc-`echo $basic_machine | sed 's/-.*//'`\n+\t\t;;\n \tm68knommu)\n \t\tbasic_machine=m68k-unknown\n \t\tos=-linux\n@@ -828,6 +837,10 @@ case $basic_machine in\n \t\tbasic_machine=powerpc-unknown\n \t\tos=-morphos\n \t\t;;\n+\tmoxiebox)\n+\t\tbasic_machine=moxie-unknown\n+\t\tos=-moxiebox\n+\t\t;;\n \tmsdos)\n \t\tbasic_machine=i386-pc\n \t\tos=-msdos\n@@ -1373,7 +1386,7 @@ case $os in\n \t      | -cygwin* | -msys* | -pe* | -psos* | -moss* | -proelf* | -rtems* \\\n \t      | -mingw32* | -mingw64* | -linux-gnu* | -linux-android* \\\n \t      | -linux-newlib* | -linux-musl* | -linux-uclibc* \\\n-\t      | -uxpv* | -beos* | -mpeix* | -udk* \\\n+\t      | -uxpv* | -beos* | -mpeix* | -udk* | -moxiebox* \\\n \t      | -interix* | -uwin* | -mks* | -rhapsody* | -darwin* | -opened* \\\n \t      | -openstep* | -oskit* | -conix* | -pw32* | -nonstopux* \\\n \t      | -storm-chaos* | -tops10* | -tenex* | -tops20* | -its* \\"
      }
    ]
  },
  {
    "sha": "6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjVmNTI5NGJiYTA0NDhjMDM0OWFkNDFjZDBlN2UxMDdhNTAwYjlk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T12:04:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T12:04:29Z"
      },
      "message": "Merge pull request #5506\n\n7873633 Squashed 'src/secp256k1/' changes from bccaf86..50cc6ab (Pieter Wuille)\n1a9576d Use libsecp256k1's RFC6979 implementation (Pieter Wuille)",
      "tree": {
        "sha": "eed1f949a4a1d72b1a2266debcea2637291b080c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eed1f949a4a1d72b1a2266debcea2637291b080c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUxi1NAAoJEHSBCwEjRsmmrOgH/0qQ1ZhMKCsrP0R3ewA7CTJQ\nSaJdVvv48vWhhsnY0euwvM2mjw5tZN6YcQCoqunrSlUrCZG+XrkaggNx0Gr234bM\ng9EXtljfWAc3hqdQYe6U0QS9P88Pfmma8bLrR1OhGoQugrjeACE3t8Zy+v1Cie3q\nQvGhCyKPykI2nptxWsJFYPPX3k5rF6boIjlb8tzVEqWA1kUapiQ5q6qQEuYJWOfj\nHHyY6Wg/7WDRq9m3f7ip6K+pbS0Gok+x7n8scqQEE3mTanoxwbZI/HN8itsCVbd/\ncsgwWtR/ggVpUL7mT+loiWTnaGXVAziAjj0W+OXTAJFY4AADJTc13cnpuRLRzNo=\n=aZH0\n-----END PGP SIGNATURE-----",
        "payload": "tree eed1f949a4a1d72b1a2266debcea2637291b080c\nparent 23ef5b77a4222a628d18219ba656be545810832d\nparent 602ebf5279d73f13fb1b2a3c4e7508ead6af9051\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422273840 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422273869 +0100\n\nMerge pull request #5506\n\n7873633 Squashed 'src/secp256k1/' changes from bccaf86..50cc6ab (Pieter Wuille)\n1a9576d Use libsecp256k1's RFC6979 implementation (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23ef5b77a4222a628d18219ba656be545810832d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23ef5b77a4222a628d18219ba656be545810832d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23ef5b77a4222a628d18219ba656be545810832d"
      },
      {
        "sha": "602ebf5279d73f13fb1b2a3c4e7508ead6af9051",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/602ebf5279d73f13fb1b2a3c4e7508ead6af9051",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/602ebf5279d73f13fb1b2a3c4e7508ead6af9051"
      }
    ],
    "stats": {
      "total": 1866,
      "additions": 1193,
      "deletions": 673
    },
    "files": [
      {
        "sha": "e2ba191e3ab2eb003d5ffdcc6001a3a563354af8",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -209,14 +209,12 @@ crypto_libbitcoin_crypto_a_SOURCES = \\\n   crypto/sha256.cpp \\\n   crypto/sha512.cpp \\\n   crypto/hmac_sha256.cpp \\\n-  crypto/rfc6979_hmac_sha256.cpp \\\n   crypto/hmac_sha512.cpp \\\n   crypto/ripemd160.cpp \\\n   crypto/common.h \\\n   crypto/sha256.h \\\n   crypto/sha512.h \\\n   crypto/hmac_sha256.h \\\n-  crypto/rfc6979_hmac_sha256.h \\\n   crypto/hmac_sha512.h \\\n   crypto/sha1.h \\\n   crypto/ripemd160.h"
      },
      {
        "sha": "a8c971c3ba98d7ef8ddc99359a948b434470d52a",
        "filename": "src/crypto/rfc6979_hmac_sha256.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 47,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23ef5b77a4222a628d18219ba656be545810832d/src/crypto/rfc6979_hmac_sha256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23ef5b77a4222a628d18219ba656be545810832d/src/crypto/rfc6979_hmac_sha256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/rfc6979_hmac_sha256.cpp?ref=23ef5b77a4222a628d18219ba656be545810832d",
        "patch": "@@ -1,47 +0,0 @@\n-// Copyright (c) 2014 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include \"crypto/rfc6979_hmac_sha256.h\"\n-\n-#include <string.h>\n-\n-#include <algorithm>\n-\n-static const unsigned char zero[1] = {0x00};\n-static const unsigned char one[1] = {0x01};\n-\n-RFC6979_HMAC_SHA256::RFC6979_HMAC_SHA256(const unsigned char* key, size_t keylen, const unsigned char* msg, size_t msglen) : retry(false)\n-{\n-    memset(V, 0x01, sizeof(V));\n-    memset(K, 0x00, sizeof(K));\n-\n-    CHMAC_SHA256(K, sizeof(K)).Write(V, sizeof(V)).Write(zero, sizeof(zero)).Write(key, keylen).Write(msg, msglen).Finalize(K);\n-    CHMAC_SHA256(K, sizeof(K)).Write(V, sizeof(V)).Finalize(V);\n-    CHMAC_SHA256(K, sizeof(K)).Write(V, sizeof(V)).Write(one, sizeof(one)).Write(key, keylen).Write(msg, msglen).Finalize(K);\n-    CHMAC_SHA256(K, sizeof(K)).Write(V, sizeof(V)).Finalize(V);\n-}\n-\n-RFC6979_HMAC_SHA256::~RFC6979_HMAC_SHA256()\n-{\n-    memset(V, 0x01, sizeof(V));\n-    memset(K, 0x00, sizeof(K));\n-}\n-\n-void RFC6979_HMAC_SHA256::Generate(unsigned char* output, size_t outputlen)\n-{\n-    if (retry) {\n-        CHMAC_SHA256(K, sizeof(K)).Write(V, sizeof(V)).Write(zero, sizeof(zero)).Finalize(K);\n-        CHMAC_SHA256(K, sizeof(K)).Write(V, sizeof(V)).Finalize(V);\n-    }\n-\n-    while (outputlen > 0) {\n-        CHMAC_SHA256(K, sizeof(K)).Write(V, sizeof(V)).Finalize(V);\n-        size_t len = std::min(outputlen, sizeof(V));\n-        memcpy(output, V, len);\n-        output += len;\n-        outputlen -= len;\n-    }\n-\n-    retry = true;\n-}"
      },
      {
        "sha": "f3a54a5d1188929784f16737279dfc3119dacbb7",
        "filename": "src/crypto/rfc6979_hmac_sha256.h",
        "status": "removed",
        "additions": 0,
        "deletions": 36,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23ef5b77a4222a628d18219ba656be545810832d/src/crypto/rfc6979_hmac_sha256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23ef5b77a4222a628d18219ba656be545810832d/src/crypto/rfc6979_hmac_sha256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/rfc6979_hmac_sha256.h?ref=23ef5b77a4222a628d18219ba656be545810832d",
        "patch": "@@ -1,36 +0,0 @@\n-// Copyright (c) 2014 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_RFC6979_HMAC_SHA256_H\n-#define BITCOIN_RFC6979_HMAC_SHA256_H\n-\n-#include \"crypto/hmac_sha256.h\"\n-\n-#include <stdint.h>\n-#include <stdlib.h>\n-\n-/** The RFC 6979 PRNG using HMAC-SHA256. */\n-class RFC6979_HMAC_SHA256\n-{\n-private:\n-    unsigned char V[CHMAC_SHA256::OUTPUT_SIZE];\n-    unsigned char K[CHMAC_SHA256::OUTPUT_SIZE];\n-    bool retry;\n-\n-public:\n-    /**\n-     * Construct a new RFC6979 PRNG, using the given key and message.\n-     * The message is assumed to be already hashed.\n-     */\n-    RFC6979_HMAC_SHA256(const unsigned char* key, size_t keylen, const unsigned char* msg, size_t msglen);\n-\n-    /**\n-     * Generate a byte array.\n-     */\n-    void Generate(unsigned char* output, size_t outputlen);\n-\n-    ~RFC6979_HMAC_SHA256();\n-};\n-\n-#endif // BITCOIN_RFC6979_HMAC_SHA256_H"
      },
      {
        "sha": "d8319db1a35d89b3e9818d03cdbf3b2f396e008b",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 24,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -6,7 +6,6 @@\n \n #include \"arith_uint256.h\"\n #include \"crypto/hmac_sha512.h\"\n-#include \"crypto/rfc6979_hmac_sha256.h\"\n #include \"eccryptoverify.h\"\n #include \"pubkey.h\"\n #include \"random.h\"\n@@ -74,23 +73,28 @@ CPubKey CKey::GetPubKey() const {\n     return result;\n }\n \n+extern \"C\"\n+{\n+static int secp256k1_nonce_function_test_case(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, unsigned int attempt, const void *data)\n+{\n+    const uint32_t *test_case = static_cast<const uint32_t*>(data);\n+    uint256 nonce;\n+    secp256k1_nonce_function_rfc6979(nonce.begin(), msg32, key32, attempt, NULL);\n+    nonce = ArithToUint256(UintToArith256(nonce) + *test_case);\n+    memcpy(nonce32, nonce.begin(), 32);\n+    return 1;\n+}\n+}\n+\n bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_t test_case) const {\n     if (!fValid)\n         return false;\n     vchSig.resize(72);\n-    RFC6979_HMAC_SHA256 prng(begin(), 32, (unsigned char*)&hash, 32);\n-    do {\n-        uint256 nonce;\n-        prng.Generate((unsigned char*)&nonce, 32);\n-        nonce = ArithToUint256(UintToArith256(nonce) + test_case);\n-        int nSigLen = 72;\n-        int ret = secp256k1_ecdsa_sign((const unsigned char*)&hash, (unsigned char*)&vchSig[0], &nSigLen, begin(), (unsigned char*)&nonce);\n-        nonce = uint256();\n-        if (ret) {\n-            vchSig.resize(nSigLen);\n-            return true;\n-        }\n-    } while(true);\n+    int nSigLen = 72;\n+    int ret = secp256k1_ecdsa_sign(hash.begin(), (unsigned char*)&vchSig[0], &nSigLen, begin(), test_case == 0 ? secp256k1_nonce_function_rfc6979 : secp256k1_nonce_function_test_case, test_case == 0 ? NULL : &test_case);\n+    assert(ret);\n+    vchSig.resize(nSigLen);\n+    return true;\n }\n \n bool CKey::VerifyPubKey(const CPubKey& pubkey) const {\n@@ -101,7 +105,7 @@ bool CKey::VerifyPubKey(const CPubKey& pubkey) const {\n     std::string str = \"Bitcoin key verification\\n\";\n     GetRandBytes(rnd, sizeof(rnd));\n     uint256 hash;\n-    CHash256().Write((unsigned char*)str.data(), str.size()).Write(rnd, sizeof(rnd)).Finalize((unsigned char*)&hash);\n+    CHash256().Write((unsigned char*)str.data(), str.size()).Write(rnd, sizeof(rnd)).Finalize(hash.begin());\n     std::vector<unsigned char> vchSig;\n     Sign(hash, vchSig);\n     return pubkey.Verify(hash, vchSig);\n@@ -112,15 +116,8 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n         return false;\n     vchSig.resize(65);\n     int rec = -1;\n-    RFC6979_HMAC_SHA256 prng(begin(), 32, (unsigned char*)&hash, 32);\n-    do {\n-        uint256 nonce;\n-        prng.Generate((unsigned char*)&nonce, 32);\n-        int ret = secp256k1_ecdsa_sign_compact((const unsigned char*)&hash, &vchSig[1], begin(), (unsigned char*)&nonce, &rec);\n-        nonce = uint256();\n-        if (ret)\n-            break;\n-    } while(true);\n+    int ret = secp256k1_ecdsa_sign_compact(hash.begin(), &vchSig[1], begin(), secp256k1_nonce_function_rfc6979, NULL, &rec);\n+    assert(ret);\n     assert(rec != -1);\n     vchSig[0] = 27 + rec + (fCompressed ? 4 : 0);\n     return true;"
      },
      {
        "sha": "b9f7d243ecb491acad0f9493c160bfdd1b636df7",
        "filename": "src/secp256k1/.gitignore",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/.gitignore?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -1,6 +1,7 @@\n bench_inv\n bench_sign\n bench_verify\n+bench_recover\n tests\n *.exe\n *.so"
      },
      {
        "sha": "40f8dae23f8b97ffca212bf96391d879f169275e",
        "filename": "src/secp256k1/.travis.yml",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/.travis.yml?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -4,24 +4,22 @@ compiler:\n   - gcc\n install:\n   - sudo apt-get install -qq libssl-dev\n-  - if [ \"$BIGNUM\" = \"gmp\" -o \"$BIGNUM\" = \"auto\" -o \"$FIELD\" = \"gmp\" ]; then sudo apt-get install --no-install-recommends --no-upgrade -qq libgmp-dev; fi\n+  - if [ \"$BIGNUM\" = \"gmp\" -o \"$BIGNUM\" = \"auto\" ]; then sudo apt-get install --no-install-recommends --no-upgrade -qq libgmp-dev; fi\n   - if [ -n \"$EXTRAPACKAGES\" ]; then sudo apt-get update && sudo apt-get install --no-install-recommends --no-upgrade $EXTRAPACKAGES; fi\n env:\n   global:\n-    - FIELD=auto  BIGNUM=auto  SCALAR=auto  ENDOMORPHISM=no  BUILD=check  EXTRAFLAGS= HOST= EXTRAPACKAGES=\n+    - FIELD=auto  BIGNUM=auto  SCALAR=auto  ENDOMORPHISM=no  ASM=no  BUILD=check  EXTRAFLAGS= HOST= EXTRAPACKAGES=\n   matrix:\n     - SCALAR=32bit\n     - SCALAR=64bit\n-    - FIELD=gmp\n-    - FIELD=gmp       ENDOMORPHISM=yes\n-    - FIELD=64bit_asm\n-    - FIELD=64bit_asm ENDOMORPHISM=yes\n     - FIELD=64bit\n     - FIELD=64bit     ENDOMORPHISM=yes\n+    - FIELD=64bit                       ASM=x86_64\n+    - FIELD=64bit     ENDOMORPHISM=yes  ASM=x86_64\n     - FIELD=32bit\n     - FIELD=32bit     ENDOMORPHISM=yes\n-    - BIGNUM=none\n-    - BIGNUM=none     ENDOMORPHISM=yes\n+    - BIGNUM=no\n+    - BIGNUM=no       ENDOMORPHISM=yes\n     - BUILD=distcheck\n     - EXTRAFLAGS=CFLAGS=-DDETERMINISTIC\n     - HOST=i686-linux-gnu EXTRAPACKAGES=\"gcc-multilib\""
      },
      {
        "sha": "985c172eba29e1f89c514d2724c71520d9eafbc0",
        "filename": "src/secp256k1/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/Makefile.am?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -33,8 +33,8 @@ noinst_HEADERS += src/java/org_bitcoin_NativeSecp256k1.h\n noinst_HEADERS += src/util.h\n noinst_HEADERS += src/testrand.h\n noinst_HEADERS += src/testrand_impl.h\n-noinst_HEADERS += src/field_gmp.h\n-noinst_HEADERS += src/field_gmp_impl.h\n+noinst_HEADERS += src/hash.h\n+noinst_HEADERS += src/hash_impl.h\n noinst_HEADERS += src/field.h\n noinst_HEADERS += src/field_impl.h\n noinst_HEADERS += src/bench.h"
      },
      {
        "sha": "4a398d6c93a58745e16959ba3b237a282fc4aa5b",
        "filename": "src/secp256k1/build-aux/m4/bitcoin_secp.m4",
        "status": "modified",
        "additions": 1,
        "deletions": 19,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/build-aux/m4/bitcoin_secp.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/build-aux/m4/bitcoin_secp.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/build-aux/m4/bitcoin_secp.m4?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -1,12 +1,6 @@\n dnl libsecp25k1 helper checks\n AC_DEFUN([SECP_INT128_CHECK],[\n has_int128=$ac_cv_type___int128\n-if test x\"$has_int128\" != x\"yes\" && test x\"$set_field\" = x\"64bit\"; then\n-  AC_MSG_ERROR([$set_field field support explicitly requested but is not compatible with this host])\n-fi\n-if test x\"$has_int128\" != x\"yes\" && test x\"$set_scalar\" = x\"64bit\"; then\n-  AC_MSG_ERROR([$set_scalar scalar support explicitly requested but is not compatible with this host])\n-fi\n ])\n \n dnl \n@@ -18,11 +12,6 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n   __asm__ __volatile__(\"movq $0x100000000,%1; mulq %%rsi\" : \"+a\"(a) : \"S\"(tmp) : \"cc\", \"%rdx\");\n   ]])],[has_64bit_asm=yes],[has_64bit_asm=no])\n AC_MSG_RESULT([$has_64bit_asm])\n-if test x\"$set_field\" == x\"64bit_asm\"; then\n-  if test x\"$has_64bit_asm\" == x\"no\"; then\n-    AC_MSG_ERROR([$set_field field support explicitly requested but no x86_64 assembly available])\n-  fi\n-fi\n ])\n \n dnl\n@@ -43,7 +32,7 @@ else\n )])\n   LIBS=\n fi\n-if test x\"$has_libcrypto\" == x\"yes\" && test x\"$has_openssl_ec\" = x; then\n+if test x\"$has_libcrypto\" = x\"yes\" && test x\"$has_openssl_ec\" = x; then\n   AC_MSG_CHECKING(for EC functions in libcrypto)\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n     #include <openssl/ec.h>\n@@ -69,11 +58,4 @@ if test x\"$has_gmp\" != x\"yes\"; then\n   CPPFLAGS=\"$CPPFLAGS_TEMP\"\n   LIBS=\"$LIBS_TEMP\"\n fi\n-if test x\"$set_field\" = x\"gmp\" && test x\"$has_gmp\" != x\"yes\"; then\n-    AC_MSG_ERROR([$set_field field support explicitly requested but libgmp was not found])\n-fi\n-if test x\"$set_bignum\" = x\"gmp\" && test x\"$has_gmp\" != x\"yes\"; then\n-    AC_MSG_ERROR([$set_bignum field support explicitly requested but libgmp was not found])\n-fi\n ])\n-"
      },
      {
        "sha": "f691156ff748b24228ecd44ed928a6b278bbe229",
        "filename": "src/secp256k1/configure.ac",
        "status": "modified",
        "additions": 69,
        "deletions": 44,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/configure.ac?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -6,7 +6,7 @@ AC_CANONICAL_HOST\n AH_TOP([#ifndef LIBSECP256K1_CONFIG_H])\n AH_TOP([#define LIBSECP256K1_CONFIG_H])\n AH_BOTTOM([#endif //LIBSECP256K1_CONFIG_H])\n-AM_INIT_AUTOMAKE([foreign])\n+AM_INIT_AUTOMAKE([foreign subdir-objects])\n LT_INIT\n \n dnl make the compilation flags quiet unless V=1 is used\n@@ -23,7 +23,7 @@ if test \"x$CFLAGS\" = \"x\"; then\n fi\n \n AC_PROG_CC_C99\n-if test x\"$ac_cv_prog_cc_c99\" == x\"no\"; then\n+if test x\"$ac_cv_prog_cc_c99\" = x\"no\"; then\n   AC_MSG_ERROR([c99 compiler support required])\n fi\n \n@@ -82,9 +82,9 @@ AC_COMPILE_IFELSE([AC_LANG_SOURCE([[char foo;]])],\n \n \n AC_ARG_ENABLE(benchmark,\n-    AS_HELP_STRING([--enable-benchmark],[compile benchmark (default is yes)]),\n+    AS_HELP_STRING([--enable-benchmark],[compile benchmark (default is no)]),\n     [use_benchmark=$enableval],\n-    [use_benchmark=yes])\n+    [use_benchmark=no])\n \n AC_ARG_ENABLE(tests,\n     AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n@@ -96,15 +96,18 @@ AC_ARG_ENABLE(endomorphism,\n     [use_endomorphism=$enableval],\n     [use_endomorphism=no])\n \n-AC_ARG_WITH([field], [AS_HELP_STRING([--with-field=gmp|64bit|64bit_asm|32bit|auto],\n+AC_ARG_WITH([field], [AS_HELP_STRING([--with-field=64bit|32bit|auto],\n [Specify Field Implementation. Default is auto])],[req_field=$withval], [req_field=auto])\n \n-AC_ARG_WITH([bignum], [AS_HELP_STRING([--with-bignum=gmp|none|auto],\n+AC_ARG_WITH([bignum], [AS_HELP_STRING([--with-bignum=gmp|no|auto],\n [Specify Bignum Implementation. Default is auto])],[req_bignum=$withval], [req_bignum=auto])\n \n AC_ARG_WITH([scalar], [AS_HELP_STRING([--with-scalar=64bit|32bit|auto],\n [Specify scalar implementation. Default is auto])],[req_scalar=$withval], [req_scalar=auto])\n \n+AC_ARG_WITH([asm], [AS_HELP_STRING([--with-asm=x86_64|no|auto]\n+[Specify assembly optimizations to use. Default is auto])],[req_asm=$withval], [req_asm=auto])\n+\n AC_CHECK_TYPES([__int128])\n \n AC_MSG_CHECKING([for __builtin_expect])\n@@ -113,40 +116,54 @@ AC_COMPILE_IFELSE([AC_LANG_SOURCE([[void myfunc() {__builtin_expect(0,0);}]])],\n     [ AC_MSG_RESULT([no])\n     ])\n \n-if test x\"$req_field\" = x\"auto\"; then\n+if test x\"$req_asm\" = x\"auto\"; then\n   SECP_64BIT_ASM_CHECK\n   if test x\"$has_64bit_asm\" = x\"yes\"; then\n-    set_field=64bit_asm\n+    set_asm=x86_64\n+  fi\n+  if test x\"$set_asm\" = x; then\n+    set_asm=no\n   fi\n+else\n+  set_asm=$req_asm\n+  case $set_asm in\n+  x86_64)\n+    SECP_64BIT_ASM_CHECK\n+    if test x\"$has_64bit_asm\" != x\"yes\"; then\n+      AC_MSG_ERROR([x86_64 assembly optimization requested but not available])\n+    fi\n+    ;;\n+  no)\n+    ;;\n+  *)\n+    AC_MSG_ERROR([invalid assembly optimization selection])\n+    ;;\n+  esac\n+fi\n \n+if test x\"$req_field\" = x\"auto\"; then\n+  if test x\"set_asm\" = x\"x86_64\"; then\n+    set_field=64bit\n+  fi\n   if test x\"$set_field\" = x; then\n     SECP_INT128_CHECK\n     if test x\"$has_int128\" = x\"yes\"; then\n       set_field=64bit\n     fi\n   fi\n-\n-  if test x\"$set_field\" = x; then\n-    SECP_GMP_CHECK\n-    if test x\"$has_gmp\" = x\"yes\"; then\n-      set_field=gmp\n-    fi\n-  fi\n-\n   if test x\"$set_field\" = x; then\n     set_field=32bit\n   fi\n else\n   set_field=$req_field\n   case $set_field in\n-  64bit_asm)\n-    SECP_64BIT_ASM_CHECK\n-    ;;\n   64bit)\n-    SECP_INT128_CHECK\n-    ;;\n-  gmp)\n-    SECP_GMP_CHECK\n+    if test x\"$set_asm\" != x\"x86_64\"; then\n+      SECP_INT128_CHECK\n+      if test x\"$has_int128\" != x\"yes\"; then\n+        AC_MSG_ERROR([64bit field explicitly requested but neither __int128 support or x86_64 assembly available])\n+      fi\n+    fi\n     ;;\n   32bit)\n     ;;\n@@ -157,11 +174,9 @@ else\n fi\n \n if test x\"$req_scalar\" = x\"auto\"; then\n-  if test x\"$set_scalar\" = x; then\n-    SECP_INT128_CHECK\n-    if test x\"$has_int128\" = x\"yes\"; then\n-      set_scalar=64bit\n-    fi\n+  SECP_INT128_CHECK\n+  if test x\"$has_int128\" = x\"yes\"; then\n+    set_scalar=64bit\n   fi\n   if test x\"$set_scalar\" = x; then\n     set_scalar=32bit\n@@ -171,6 +186,9 @@ else\n   case $set_scalar in\n   64bit)\n     SECP_INT128_CHECK\n+    if test x\"$has_int128\" != x\"yes\"; then\n+      AC_MSG_ERROR([64bit scalar explicitly requested but __int128 support not available])\n+    fi\n     ;;\n   32bit)\n     ;;\n@@ -187,36 +205,42 @@ if test x\"$req_bignum\" = x\"auto\"; then\n   fi\n \n   if test x\"$set_bignum\" = x; then\n-    set_bignum=none\n+    set_bignum=no\n   fi\n else\n   set_bignum=$req_bignum\n   case $set_bignum in\n   gmp)\n     SECP_GMP_CHECK\n+    if test x\"$has_gmp\" != x\"yes\"; then\n+      AC_MSG_ERROR([gmp bignum explicitly requested but libgmp not available])\n+    fi\n     ;;\n-  none)\n+  no)\n     ;;\n   *)\n     AC_MSG_ERROR([invalid bignum implementation selection])\n     ;;\n   esac\n fi\n \n+# select assembly optimization\n+case $set_asm in\n+x86_64)\n+  AC_DEFINE(USE_ASM_X86_64, 1, [Define this symbol to enable x86_64 assembly optimizations])\n+  ;;\n+no)\n+  ;;\n+*)\n+  AC_MSG_ERROR([invalid assembly optimizations])\n+  ;;\n+esac\n+\n # select field implementation\n case $set_field in\n-64bit_asm)\n-  AC_DEFINE(USE_FIELD_5X52_ASM, 1, [Define this symbol to use the assembly version for the 5x52 field implementation])\n-  AC_DEFINE(USE_FIELD_5X52, 1, [Define this symbol to use the FIELD_5X52 implementation])\n-  ;;\n 64bit)\n-  AC_DEFINE(USE_FIELD_5X52_INT128, 1, [Define this symbol to use the __int128 version for the 5x52 field implementation])\n   AC_DEFINE(USE_FIELD_5X52, 1, [Define this symbol to use the FIELD_5X52 implementation])\n   ;;\n-gmp)\n-  AC_DEFINE(HAVE_LIBGMP,1,[Define this symbol if libgmp is installed])\n-  AC_DEFINE(USE_FIELD_GMP, 1, [Define this symbol to use the FIELD_GMP implementation])\n-  ;;\n 32bit)\n   AC_DEFINE(USE_FIELD_10X26, 1, [Define this symbol to use the FIELD_10X26 implementation])\n   ;;\n@@ -233,7 +257,7 @@ gmp)\n   AC_DEFINE(USE_FIELD_INV_NUM, 1, [Define this symbol to use the num-based field inverse implementation])\n   AC_DEFINE(USE_SCALAR_INV_NUM, 1, [Define this symbol to use the num-based scalar inverse implementation])\n   ;;\n-none)\n+no)\n   AC_DEFINE(USE_NUM_NONE, 1, [Define this symbol to use no num implementation])\n   AC_DEFINE(USE_FIELD_INV_BUILTIN, 1, [Define this symbol to use the native field inverse implementation])\n   AC_DEFINE(USE_SCALAR_INV_BUILTIN, 1, [Define this symbol to use the native scalar inverse implementation])\n@@ -258,7 +282,7 @@ esac\n \n if test x\"$use_tests\" = x\"yes\"; then\n   SECP_OPENSSL_CHECK\n-  if test x\"$has_openssl_ec\" == x\"yes\"; then\n+  if test x\"$has_openssl_ec\" = x\"yes\"; then\n     AC_DEFINE(ENABLE_OPENSSL_TESTS, 1, [Define this symbol if OpenSSL EC functions are available])\n     SECP_TEST_INCLUDES=\"$SSL_CFLAGS $CRYPTO_CFLAGS\"\n     SECP_TEST_LIBS=\"$CRYPTO_LIBS\"\n@@ -272,7 +296,7 @@ if test x\"$use_tests\" = x\"yes\"; then\n   fi\n fi\n \n-if test x\"$set_field\" = x\"gmp\" || test x\"$set_bignum\" = x\"gmp\"; then\n+if test x\"$set_bignum\" = x\"gmp\"; then\n   SECP_LIBS=\"$SECP_LIBS $GMP_LIBS\"\n   SECP_INCLUDES=\"$SECP_INCLUDES $GMP_CPPFLAGS\"\n fi\n@@ -281,19 +305,20 @@ if test x\"$use_endomorphism\" = x\"yes\"; then\n   AC_DEFINE(USE_ENDOMORPHISM, 1, [Define this symbol to use endomorphism optimization])\n fi\n \n+AC_MSG_NOTICE([Using assembly optimizations: $set_asm])\n AC_MSG_NOTICE([Using field implementation: $set_field])\n AC_MSG_NOTICE([Using bignum implementation: $set_bignum])\n AC_MSG_NOTICE([Using scalar implementation: $set_scalar])\n+AC_MSG_NOTICE([Using endomorphism optimizations: $use_endomorphism])\n \n AC_CONFIG_HEADERS([src/libsecp256k1-config.h])\n AC_CONFIG_FILES([Makefile libsecp256k1.pc])\n AC_SUBST(SECP_INCLUDES)\n AC_SUBST(SECP_LIBS)\n AC_SUBST(SECP_TEST_LIBS)\n AC_SUBST(SECP_TEST_INCLUDES)\n-AM_CONDITIONAL([USE_ASM], [test x\"$set_field\" == x\"64bit_asm\"])\n AM_CONDITIONAL([USE_TESTS], [test x\"$use_tests\" != x\"no\"])\n-AM_CONDITIONAL([USE_BENCHMARK], [test x\"$use_benchmark\" != x\"no\"])\n+AM_CONDITIONAL([USE_BENCHMARK], [test x\"$use_benchmark\" = x\"yes\"])\n \n dnl make sure nothing new is exported so that we don't break the cache\n PKGCONFIG_PATH_TEMP=\"$PKG_CONFIG_PATH\""
      },
      {
        "sha": "cfdae31eaf87fe73a0de3ed45b202bb1e719f7f6",
        "filename": "src/secp256k1/include/secp256k1.h",
        "status": "modified",
        "additions": 41,
        "deletions": 10,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/include/secp256k1.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/include/secp256k1.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/include/secp256k1.h?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -77,42 +77,73 @@ SECP256K1_WARN_UNUSED_RESULT int secp256k1_ecdsa_verify(\n   int pubkeylen\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(4);\n \n+/** A pointer to a function to deterministically generate a nonce.\n+ * Returns: 1 if a nonce was succesfully generated. 0 will cause signing to fail.\n+ * In:      msg32:     the 32-byte message hash being verified (will not be NULL)\n+ *          key32:     pointer to a 32-byte secret key (will not be NULL)\n+ *          attempt:   how many iterations we have tried to find a nonce.\n+ *                     This will almost always be 0, but different attempt values\n+ *                     are required to result in a different nonce.\n+ *          data:      Arbitrary data pointer that is passed through.\n+ * Out:     nonce32:   pointer to a 32-byte array to be filled by the function.\n+ * Except for test cases, this function should compute some cryptographic hash of\n+ * the message, the key and the attempt.\n+ */\n+typedef int (*secp256k1_nonce_function_t)(\n+  unsigned char *nonce32,\n+  const unsigned char *msg32,\n+  const unsigned char *key32,\n+  unsigned int attempt,\n+  const void *data\n+);\n+\n+/** An implementation of RFC6979 (using HMAC-SHA256) as nonce generation function. */\n+extern const secp256k1_nonce_function_t secp256k1_nonce_function_rfc6979;\n+\n+/** A default safe nonce generation function (currently equal to secp256k1_nonce_function_rfc6979). */\n+extern const secp256k1_nonce_function_t secp256k1_nonce_function_default;\n+\n+\n /** Create an ECDSA signature.\n  *  Returns: 1: signature created\n- *           0: nonce invalid, try another one\n+ *           0: the nonce generation function failed\n  *  In:      msg32:  the 32-byte message hash being signed (cannot be NULL)\n  *           seckey: pointer to a 32-byte secret key (cannot be NULL, assumed to be valid)\n- *           nonce:  pointer to a 32-byte nonce (cannot be NULL, generated with a cryptographic PRNG)\n+ *           noncefp:pointer to a nonce generation function. If NULL, secp256k1_nonce_function_default is used\n+ *           ndata:  pointer to arbitrary data used by the nonce generation function (can be NULL)\n  *  Out:     sig:    pointer to an array where the signature will be placed (cannot be NULL)\n  *  In/Out:  siglen: pointer to an int with the length of sig, which will be updated\n  *                   to contain the actual signature length (<=72).\n  * Requires starting using SECP256K1_START_SIGN.\n  */\n-SECP256K1_WARN_UNUSED_RESULT int secp256k1_ecdsa_sign(\n+int secp256k1_ecdsa_sign(\n   const unsigned char *msg32,\n   unsigned char *sig,\n   int *siglen,\n   const unsigned char *seckey,\n-  const unsigned char *nonce\n-) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4) SECP256K1_ARG_NONNULL(5);\n+  secp256k1_nonce_function_t noncefp,\n+  const void *ndata\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n /** Create a compact ECDSA signature (64 byte + recovery id).\n  *  Returns: 1: signature created\n- *           0: nonce invalid, try another one\n+ *           0: the nonce generation function failed\n  *  In:      msg32:  the 32-byte message hash being signed (cannot be NULL)\n  *           seckey: pointer to a 32-byte secret key (cannot be NULL, assumed to be valid)\n- *           nonce:  pointer to a 32-byte nonce (cannot be NULL, generated with a cryptographic PRNG)\n+ *           noncefp:pointer to a nonce generation function. If NULL, secp256k1_nonce_function_default is used\n+ *           ndata:  pointer to arbitrary data used by the nonce generation function (can be NULL)\n  *  Out:     sig:    pointer to a 64-byte array where the signature will be placed (cannot be NULL)\n  *           recid:  pointer to an int, which will be updated to contain the recovery id (can be NULL)\n  * Requires starting using SECP256K1_START_SIGN.\n  */\n-SECP256K1_WARN_UNUSED_RESULT int secp256k1_ecdsa_sign_compact(\n+int secp256k1_ecdsa_sign_compact(\n   const unsigned char *msg32,\n   unsigned char *sig64,\n   const unsigned char *seckey,\n-  const unsigned char *nonce,\n+  secp256k1_nonce_function_t noncefp,\n+  const void *ndata,\n   int *recid\n-) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n /** Recover an ECDSA public key from a compact signature.\n  *  Returns: 1: public key successfully recovered (which guarantees a correct signature)."
      },
      {
        "sha": "2276f00b9a683b7c10144e7b31406f09b9c1d5ea",
        "filename": "src/secp256k1/src/bench_sign.c",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/bench_sign.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/bench_sign.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/bench_sign.c?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -10,15 +10,13 @@\n \n typedef struct {\n     unsigned char msg[32];\n-    unsigned char nonce[32];\n     unsigned char key[32];\n } bench_sign_t;\n \n static void bench_sign_setup(void* arg) {\n     bench_sign_t *data = (bench_sign_t*)arg;\n \n     for (int i = 0; i < 32; i++) data->msg[i] = i + 1;\n-    for (int i = 0; i < 32; i++) data->nonce[i] = i + 33;\n     for (int i = 0; i < 32; i++) data->key[i] = i + 65;\n }\n \n@@ -28,9 +26,8 @@ static void bench_sign(void* arg) {\n     unsigned char sig[64];\n     for (int i=0; i<20000; i++) {\n         int recid = 0;\n-        CHECK(secp256k1_ecdsa_sign_compact(data->msg, sig, data->key, data->nonce, &recid));\n+        CHECK(secp256k1_ecdsa_sign_compact(data->msg, sig, data->key, NULL, NULL, &recid));\n         for (int j = 0; j < 32; j++) {\n-            data->nonce[j] = data->key[j];     /* Move former key to nonce  */\n             data->msg[j] = sig[j];             /* Move former R to message. */\n             data->key[j] = sig[j + 32];        /* Move former S to key.     */\n         }"
      },
      {
        "sha": "a58ca84347b5a172d9a37ab1b13f43c889592300",
        "filename": "src/secp256k1/src/bench_verify.c",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/bench_verify.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/bench_verify.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/bench_verify.c?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -14,7 +14,6 @@\n typedef struct {\n     unsigned char msg[32];\n     unsigned char key[32];\n-    unsigned char nonce[32];\n     unsigned char sig[72];\n     int siglen;\n     unsigned char pubkey[33];\n@@ -42,9 +41,8 @@ int main(void) {\n \n     for (int i = 0; i < 32; i++) data.msg[i] = 1 + i;\n     for (int i = 0; i < 32; i++) data.key[i] = 33 + i;\n-    for (int i = 0; i < 32; i++) data.nonce[i] = 65 + i;\n     data.siglen = 72;\n-    CHECK(secp256k1_ecdsa_sign(data.msg, data.sig, &data.siglen, data.key, data.nonce));\n+    secp256k1_ecdsa_sign(data.msg, data.sig, &data.siglen, data.key, NULL, NULL);\n     data.pubkeylen = 33;\n     CHECK(secp256k1_ec_pubkey_create(data.pubkey, &data.pubkeylen, data.key, 1));\n "
      },
      {
        "sha": "674650c1e9f04d3fc8d7e73d73b4c500f08849f4",
        "filename": "src/secp256k1/src/ecdsa_impl.h",
        "status": "modified",
        "additions": 43,
        "deletions": 16,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/ecdsa_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/ecdsa_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecdsa_impl.h?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -109,25 +109,53 @@ static int secp256k1_ecdsa_sig_serialize(unsigned char *sig, int *size, const se\n     return 1;\n }\n \n-static int secp256k1_ecdsa_sig_recompute(secp256k1_scalar_t *r2, const secp256k1_ecdsa_sig_t *sig, const secp256k1_ge_t *pubkey, const secp256k1_scalar_t *message) {\n+static int secp256k1_ecdsa_sig_verify(const secp256k1_ecdsa_sig_t *sig, const secp256k1_ge_t *pubkey, const secp256k1_scalar_t *message) {\n     if (secp256k1_scalar_is_zero(&sig->r) || secp256k1_scalar_is_zero(&sig->s))\n         return 0;\n \n-    int ret = 0;\n     secp256k1_scalar_t sn, u1, u2;\n     secp256k1_scalar_inverse_var(&sn, &sig->s);\n     secp256k1_scalar_mul(&u1, &sn, message);\n     secp256k1_scalar_mul(&u2, &sn, &sig->r);\n     secp256k1_gej_t pubkeyj; secp256k1_gej_set_ge(&pubkeyj, pubkey);\n     secp256k1_gej_t pr; secp256k1_ecmult(&pr, &pubkeyj, &u2, &u1);\n-    if (!secp256k1_gej_is_infinity(&pr)) {\n-        secp256k1_fe_t xr; secp256k1_gej_get_x_var(&xr, &pr);\n-        secp256k1_fe_normalize_var(&xr);\n-        unsigned char xrb[32]; secp256k1_fe_get_b32(xrb, &xr);\n-        secp256k1_scalar_set_b32(r2, xrb, NULL);\n-        ret = 1;\n+    if (secp256k1_gej_is_infinity(&pr)) {\n+        return 0;\n+    }\n+    unsigned char c[32];\n+    secp256k1_scalar_get_b32(c, &sig->r);\n+    secp256k1_fe_t xr;\n+    secp256k1_fe_set_b32(&xr, c);\n+\n+    // We now have the recomputed R point in pr, and its claimed x coordinate (modulo n)\n+    // in xr. Naively, we would extract the x coordinate from pr (requiring a inversion modulo p),\n+    // compute the remainder modulo n, and compare it to xr. However:\n+    //\n+    //       xr == X(pr) mod n\n+    //   <=> exists h. (xr + h * n < p && xr + h * n == X(pr))\n+    //   [Since 2 * n > p, h can only be 0 or 1]\n+    //   <=> (xr == X(pr)) || (xr + n < p && xr + n == X(pr))\n+    //   [In Jacobian coordinates, X(pr) is pr.x / pr.z^2 mod p]\n+    //   <=> (xr == pr.x / pr.z^2 mod p) || (xr + n < p && xr + n == pr.x / pr.z^2 mod p)\n+    //   [Multiplying both sides of the equations by pr.z^2 mod p]\n+    //   <=> (xr * pr.z^2 mod p == pr.x) || (xr + n < p && (xr + n) * pr.z^2 mod p == pr.x)\n+    //\n+    // Thus, we can avoid the inversion, but we have to check both cases separately.\n+    // secp256k1_gej_eq_x implements the (xr * pr.z^2 mod p == pr.x) test.\n+    if (secp256k1_gej_eq_x_var(&xr, &pr)) {\n+        // xr.x == xr * xr.z^2 mod p, so the signature is valid.\n+        return 1;\n+    }\n+    if (secp256k1_fe_cmp_var(&xr, &secp256k1_ecdsa_consts->p_minus_order) >= 0) {\n+        // xr + p >= n, so we can skip testing the second case.\n+        return 0;\n+    }\n+    secp256k1_fe_add(&xr, &secp256k1_ecdsa_consts->order_as_fe);\n+    if (secp256k1_gej_eq_x_var(&xr, &pr)) {\n+        // (xr + n) * pr.z^2 mod p == pr.x, so the signature is valid.\n+        return 1;\n     }\n-    return ret;\n+    return 0;\n }\n \n static int secp256k1_ecdsa_sig_recover(const secp256k1_ecdsa_sig_t *sig, secp256k1_ge_t *pubkey, const secp256k1_scalar_t *message, int recid) {\n@@ -159,13 +187,6 @@ static int secp256k1_ecdsa_sig_recover(const secp256k1_ecdsa_sig_t *sig, secp256\n     return !secp256k1_gej_is_infinity(&qj);\n }\n \n-static int secp256k1_ecdsa_sig_verify(const secp256k1_ecdsa_sig_t *sig, const secp256k1_ge_t *pubkey, const secp256k1_scalar_t *message) {\n-    secp256k1_scalar_t r2;\n-    int ret = 0;\n-    ret = secp256k1_ecdsa_sig_recompute(&r2, sig, pubkey, message) && secp256k1_scalar_eq(&sig->r, &r2);\n-    return ret;\n-}\n-\n static int secp256k1_ecdsa_sig_sign(secp256k1_ecdsa_sig_t *sig, const secp256k1_scalar_t *seckey, const secp256k1_scalar_t *message, const secp256k1_scalar_t *nonce, int *recid) {\n     secp256k1_gej_t rp;\n     secp256k1_ecmult_gen(&rp, nonce);\n@@ -177,6 +198,12 @@ static int secp256k1_ecdsa_sig_sign(secp256k1_ecdsa_sig_t *sig, const secp256k1_\n     secp256k1_fe_get_b32(b, &r.x);\n     int overflow = 0;\n     secp256k1_scalar_set_b32(&sig->r, b, &overflow);\n+    if (secp256k1_scalar_is_zero(&sig->r)) {\n+        /* P.x = order is on the curve, so technically sig->r could end up zero, which would be an invalid signature. */\n+        secp256k1_gej_clear(&rp);\n+        secp256k1_ge_clear(&r);\n+        return 0;\n+    }\n     if (recid)\n         *recid = (overflow ? 2 : 0) | (secp256k1_fe_is_odd(&r.y) ? 1 : 0);\n     secp256k1_scalar_t n;"
      },
      {
        "sha": "48436316e12ba5c665ba4653b16c435b7210814b",
        "filename": "src/secp256k1/src/ecmult_gen_impl.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/ecmult_gen_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/ecmult_gen_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult_gen_impl.h?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -73,7 +73,7 @@ static void secp256k1_ecmult_gen_start(void) {\n             secp256k1_gej_double_var(&numsbase, &numsbase);\n             if (j == 62) {\n                 /* In the last iteration, numsbase is (1 - 2^j) * nums instead. */\n-                secp256k1_gej_neg_var(&numsbase, &numsbase);\n+                secp256k1_gej_neg(&numsbase, &numsbase);\n                 secp256k1_gej_add_var(&numsbase, &numsbase, &nums_gej);\n             }\n         }"
      },
      {
        "sha": "345cfae73328c9db2fe759256cdcb6a025186ae9",
        "filename": "src/secp256k1/src/ecmult_impl.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/ecmult_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/ecmult_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult_impl.h?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -70,8 +70,8 @@ static void secp256k1_ecmult_table_precomp_ge_var(secp256k1_ge_t *pre, const sec\n         (neg)((r), &(pre)[(-(n)-1)/2]); \\\n } while(0)\n \n-#define ECMULT_TABLE_GET_GEJ(r,pre,n,w) ECMULT_TABLE_GET((r),(pre),(n),(w),secp256k1_gej_neg_var)\n-#define ECMULT_TABLE_GET_GE(r,pre,n,w)  ECMULT_TABLE_GET((r),(pre),(n),(w),secp256k1_ge_neg_var)\n+#define ECMULT_TABLE_GET_GEJ(r,pre,n,w) ECMULT_TABLE_GET((r),(pre),(n),(w),secp256k1_gej_neg)\n+#define ECMULT_TABLE_GET_GE(r,pre,n,w)  ECMULT_TABLE_GET((r),(pre),(n),(w),secp256k1_ge_neg)\n \n typedef struct {\n     /* For accelerating the computation of a*P + b*G: */"
      },
      {
        "sha": "14e2b813c17ba3a6a0999e58f1c8b2d0f3a7d93b",
        "filename": "src/secp256k1/src/field.h",
        "status": "modified",
        "additions": 14,
        "deletions": 5,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/field.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/field.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field.h?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -22,9 +22,7 @@\n #include \"libsecp256k1-config.h\"\n #endif\n \n-#if defined(USE_FIELD_GMP)\n-#include \"field_gmp.h\"\n-#elif defined(USE_FIELD_10X26)\n+#if defined(USE_FIELD_10X26)\n #include \"field_10x26.h\"\n #elif defined(USE_FIELD_5X52)\n #include \"field_5x52.h\"\n@@ -50,9 +48,20 @@ static void secp256k1_fe_stop(void);\n /** Normalize a field element. */\n static void secp256k1_fe_normalize(secp256k1_fe_t *r);\n \n+/** Weakly normalize a field element: reduce it magnitude to 1, but don't fully normalize. */\n+static void secp256k1_fe_normalize_weak(secp256k1_fe_t *r);\n+\n /** Normalize a field element, without constant-time guarantee. */\n static void secp256k1_fe_normalize_var(secp256k1_fe_t *r);\n \n+/** Verify whether a field element represents zero i.e. would normalize to a zero value. The field\n+ *  implementation may optionally normalize the input, but this should not be relied upon. */\n+static int secp256k1_fe_normalizes_to_zero(secp256k1_fe_t *r);\n+\n+/** Verify whether a field element represents zero i.e. would normalize to a zero value. The field\n+ *  implementation may optionally normalize the input, but this should not be relied upon. */\n+static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe_t *r);\n+\n /** Set a field element equal to a small integer. Resulting field element is normalized. */\n static void secp256k1_fe_set_int(secp256k1_fe_t *r, int a);\n \n@@ -62,8 +71,8 @@ static int secp256k1_fe_is_zero(const secp256k1_fe_t *a);\n /** Check the \"oddness\" of a field element. Requires the input to be normalized. */\n static int secp256k1_fe_is_odd(const secp256k1_fe_t *a);\n \n-/** Compare two field elements. Requires both inputs to be normalized */\n-static int secp256k1_fe_equal(const secp256k1_fe_t *a, const secp256k1_fe_t *b);\n+/** Compare two field elements. Requires magnitude-1 inputs. */\n+static int secp256k1_fe_equal_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b);\n \n /** Compare two field elements. Requires both inputs to be normalized */\n static int secp256k1_fe_cmp_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b);"
      },
      {
        "sha": "9ef60a807ace651660c0ae031557eda65622f7b8",
        "filename": "src/secp256k1/src/field_10x26_impl.h",
        "status": "modified",
        "additions": 99,
        "deletions": 12,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/field_10x26_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/field_10x26_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_10x26_impl.h?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -31,6 +31,7 @@ static void secp256k1_fe_verify(const secp256k1_fe_t *a) {\n     r &= (d[8] <= 0x3FFFFFFUL * m);\n     r &= (d[9] <= 0x03FFFFFUL * m);\n     r &= (a->magnitude >= 0);\n+    r &= (a->magnitude <= 32);\n     if (a->normalized) {\n         r &= (a->magnitude <= 1);\n         if (r && (d[9] == 0x03FFFFFUL)) {\n@@ -103,6 +104,37 @@ static void secp256k1_fe_normalize(secp256k1_fe_t *r) {\n #endif\n }\n \n+static void secp256k1_fe_normalize_weak(secp256k1_fe_t *r) {\n+    uint32_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],\n+             t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8], t9 = r->n[9];\n+\n+    /* Reduce t9 at the start so there will be at most a single carry from the first pass */\n+    uint32_t x = t9 >> 22; t9 &= 0x03FFFFFUL;\n+\n+    /* The first pass ensures the magnitude is 1, ... */\n+    t0 += x * 0x3D1UL; t1 += (x << 6);\n+    t1 += (t0 >> 26); t0 &= 0x3FFFFFFUL;\n+    t2 += (t1 >> 26); t1 &= 0x3FFFFFFUL;\n+    t3 += (t2 >> 26); t2 &= 0x3FFFFFFUL;\n+    t4 += (t3 >> 26); t3 &= 0x3FFFFFFUL;\n+    t5 += (t4 >> 26); t4 &= 0x3FFFFFFUL;\n+    t6 += (t5 >> 26); t5 &= 0x3FFFFFFUL;\n+    t7 += (t6 >> 26); t6 &= 0x3FFFFFFUL;\n+    t8 += (t7 >> 26); t7 &= 0x3FFFFFFUL;\n+    t9 += (t8 >> 26); t8 &= 0x3FFFFFFUL;\n+\n+    /* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */\n+    VERIFY_CHECK(t9 >> 23 == 0);\n+\n+    r->n[0] = t0; r->n[1] = t1; r->n[2] = t2; r->n[3] = t3; r->n[4] = t4;\n+    r->n[5] = t5; r->n[6] = t6; r->n[7] = t7; r->n[8] = t8; r->n[9] = t9;\n+\n+#ifdef VERIFY\n+    r->magnitude = 1;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n static void secp256k1_fe_normalize_var(secp256k1_fe_t *r) {\n     uint32_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],\n              t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8], t9 = r->n[9];\n@@ -159,6 +191,73 @@ static void secp256k1_fe_normalize_var(secp256k1_fe_t *r) {\n #endif\n }\n \n+static int secp256k1_fe_normalizes_to_zero(secp256k1_fe_t *r) {\n+    uint32_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],\n+             t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8], t9 = r->n[9];\n+\n+    /* Reduce t9 at the start so there will be at most a single carry from the first pass */\n+    uint32_t x = t9 >> 22; t9 &= 0x03FFFFFUL;\n+\n+    /* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */\n+    uint32_t z0, z1;\n+\n+    /* The first pass ensures the magnitude is 1, ... */\n+    t0 += x * 0x3D1UL; t1 += (x << 6);\n+    t1 += (t0 >> 26); t0 &= 0x3FFFFFFUL; z0  = t0; z1  = t0 ^ 0x3D0UL;\n+    t2 += (t1 >> 26); t1 &= 0x3FFFFFFUL; z0 |= t1; z1 &= t1 ^ 0x40UL;\n+    t3 += (t2 >> 26); t2 &= 0x3FFFFFFUL; z0 |= t2; z1 &= t2;\n+    t4 += (t3 >> 26); t3 &= 0x3FFFFFFUL; z0 |= t3; z1 &= t3;\n+    t5 += (t4 >> 26); t4 &= 0x3FFFFFFUL; z0 |= t4; z1 &= t4;\n+    t6 += (t5 >> 26); t5 &= 0x3FFFFFFUL; z0 |= t5; z1 &= t5;\n+    t7 += (t6 >> 26); t6 &= 0x3FFFFFFUL; z0 |= t6; z1 &= t6;\n+    t8 += (t7 >> 26); t7 &= 0x3FFFFFFUL; z0 |= t7; z1 &= t7;\n+    t9 += (t8 >> 26); t8 &= 0x3FFFFFFUL; z0 |= t8; z1 &= t8;\n+                                         z0 |= t9; z1 &= t9 ^ 0x3C00000UL;\n+\n+    /* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */\n+    VERIFY_CHECK(t9 >> 23 == 0);\n+\n+    return (z0 == 0) | (z1 == 0x3FFFFFFUL);\n+}\n+\n+static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe_t *r) {\n+    uint32_t t0 = r->n[0], t9 = r->n[9];\n+\n+    /* Reduce t9 at the start so there will be at most a single carry from the first pass */\n+    uint32_t x = t9 >> 22;\n+\n+    /* The first pass ensures the magnitude is 1, ... */\n+    t0 += x * 0x3D1UL;\n+\n+    /* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */\n+    uint32_t z0 = t0 & 0x3FFFFFFUL, z1 = z0 ^ 0x3D0UL;\n+\n+    /* Fast return path should catch the majority of cases */\n+    if ((z0 != 0UL) & (z1 != 0x3FFFFFFUL))\n+        return 0;\n+\n+    uint32_t t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],\n+             t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8];\n+    t9 &= 0x03FFFFFUL;\n+    t1 += (x << 6);\n+\n+    t1 += (t0 >> 26); t0  = z0;\n+    t2 += (t1 >> 26); t1 &= 0x3FFFFFFUL; z0 |= t1; z1 &= t1 ^ 0x40UL;\n+    t3 += (t2 >> 26); t2 &= 0x3FFFFFFUL; z0 |= t2; z1 &= t2;\n+    t4 += (t3 >> 26); t3 &= 0x3FFFFFFUL; z0 |= t3; z1 &= t3;\n+    t5 += (t4 >> 26); t4 &= 0x3FFFFFFUL; z0 |= t4; z1 &= t4;\n+    t6 += (t5 >> 26); t5 &= 0x3FFFFFFUL; z0 |= t5; z1 &= t5;\n+    t7 += (t6 >> 26); t6 &= 0x3FFFFFFUL; z0 |= t6; z1 &= t6;\n+    t8 += (t7 >> 26); t7 &= 0x3FFFFFFUL; z0 |= t7; z1 &= t7;\n+    t9 += (t8 >> 26); t8 &= 0x3FFFFFFUL; z0 |= t8; z1 &= t8;\n+                                         z0 |= t9; z1 &= t9 ^ 0x3C00000UL;\n+\n+    /* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */\n+    VERIFY_CHECK(t9 >> 23 == 0);\n+\n+    return (z0 == 0) | (z1 == 0x3FFFFFFUL);\n+}\n+\n SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe_t *r, int a) {\n     r->n[0] = a;\n     r->n[1] = r->n[2] = r->n[3] = r->n[4] = r->n[5] = r->n[6] = r->n[7] = r->n[8] = r->n[9] = 0;\n@@ -196,18 +295,6 @@ SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe_t *a) {\n     }\n }\n \n-SECP256K1_INLINE static int secp256k1_fe_equal(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n-#ifdef VERIFY\n-    VERIFY_CHECK(a->normalized);\n-    VERIFY_CHECK(b->normalized);\n-    secp256k1_fe_verify(a);\n-    secp256k1_fe_verify(b);\n-#endif\n-    const uint32_t *t = a->n, *u = b->n;\n-    return ((t[0]^u[0]) | (t[1]^u[1]) | (t[2]^u[2]) | (t[3]^u[3]) | (t[4]^u[4])\n-          | (t[5]^u[5]) | (t[6]^u[6]) | (t[7]^u[7]) | (t[8]^u[8]) | (t[9]^u[9])) == 0;\n-}\n-\n static int secp256k1_fe_cmp_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n #ifdef VERIFY\n     VERIFY_CHECK(a->normalized);"
      },
      {
        "sha": "4db9e6f5ff5bc5d8c7b8492575d50d497b6259da",
        "filename": "src/secp256k1/src/field_5x52_impl.h",
        "status": "modified",
        "additions": 81,
        "deletions": 15,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/field_5x52_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/field_5x52_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_5x52_impl.h?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -16,12 +16,10 @@\n #include \"num.h\"\n #include \"field.h\"\n \n-#if defined(USE_FIELD_5X52_ASM)\n+#if defined(USE_ASM_X86_64)\n #include \"field_5x52_asm_impl.h\"\n-#elif defined(USE_FIELD_5X52_INT128)\n-#include \"field_5x52_int128_impl.h\"\n #else\n-#error \"Please select field_5x52 implementation\"\n+#include \"field_5x52_int128_impl.h\"\n #endif\n \n /** Implements arithmetic modulo FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE FFFFFC2F,\n@@ -45,6 +43,7 @@ static void secp256k1_fe_verify(const secp256k1_fe_t *a) {\n     r &= (d[3] <= 0xFFFFFFFFFFFFFULL * m);\n     r &= (d[4] <= 0x0FFFFFFFFFFFFULL * m);\n     r &= (a->magnitude >= 0);\n+    r &= (a->magnitude <= 2048);\n     if (a->normalized) {\n         r &= (a->magnitude <= 1);\n         if (r && (d[4] == 0x0FFFFFFFFFFFFULL) && ((d[3] & d[2] & d[1]) == 0xFFFFFFFFFFFFFULL)) {\n@@ -102,6 +101,30 @@ static void secp256k1_fe_normalize(secp256k1_fe_t *r) {\n #endif\n }\n \n+static void secp256k1_fe_normalize_weak(secp256k1_fe_t *r) {\n+    uint64_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4];\n+\n+    /* Reduce t4 at the start so there will be at most a single carry from the first pass */\n+    uint64_t x = t4 >> 48; t4 &= 0x0FFFFFFFFFFFFULL;\n+\n+    /* The first pass ensures the magnitude is 1, ... */\n+    t0 += x * 0x1000003D1ULL;\n+    t1 += (t0 >> 52); t0 &= 0xFFFFFFFFFFFFFULL;\n+    t2 += (t1 >> 52); t1 &= 0xFFFFFFFFFFFFFULL;\n+    t3 += (t2 >> 52); t2 &= 0xFFFFFFFFFFFFFULL;\n+    t4 += (t3 >> 52); t3 &= 0xFFFFFFFFFFFFFULL;\n+\n+    /* ... except for a possible carry at bit 48 of t4 (i.e. bit 256 of the field element) */\n+    VERIFY_CHECK(t4 >> 49 == 0);\n+\n+    r->n[0] = t0; r->n[1] = t1; r->n[2] = t2; r->n[3] = t3; r->n[4] = t4;\n+\n+#ifdef VERIFY\n+    r->magnitude = 1;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n static void secp256k1_fe_normalize_var(secp256k1_fe_t *r) {\n     uint64_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4];\n \n@@ -146,6 +169,60 @@ static void secp256k1_fe_normalize_var(secp256k1_fe_t *r) {\n #endif\n }\n \n+static int secp256k1_fe_normalizes_to_zero(secp256k1_fe_t *r) {\n+    uint64_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4];\n+\n+    /* Reduce t4 at the start so there will be at most a single carry from the first pass */\n+    uint64_t x = t4 >> 48; t4 &= 0x0FFFFFFFFFFFFULL;\n+\n+    /* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */\n+    uint64_t z0, z1;\n+\n+    /* The first pass ensures the magnitude is 1, ... */\n+    t0 += x * 0x1000003D1ULL;\n+    t1 += (t0 >> 52); t0 &= 0xFFFFFFFFFFFFFULL; z0  = t0; z1  = t0 ^ 0x1000003D0ULL;\n+    t2 += (t1 >> 52); t1 &= 0xFFFFFFFFFFFFFULL; z0 |= t1; z1 &= t1;\n+    t3 += (t2 >> 52); t2 &= 0xFFFFFFFFFFFFFULL; z0 |= t2; z1 &= t2;\n+    t4 += (t3 >> 52); t3 &= 0xFFFFFFFFFFFFFULL; z0 |= t3; z1 &= t3;\n+                                                z0 |= t4; z1 &= t4 ^ 0xF000000000000ULL;\n+\n+    /* ... except for a possible carry at bit 48 of t4 (i.e. bit 256 of the field element) */\n+    VERIFY_CHECK(t4 >> 49 == 0);\n+\n+    return (z0 == 0) | (z1 == 0xFFFFFFFFFFFFFULL);\n+}\n+\n+static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe_t *r) {\n+    uint64_t t0 = r->n[0], t4 = r->n[4];\n+\n+    /* Reduce t4 at the start so there will be at most a single carry from the first pass */\n+    uint64_t x = t4 >> 48;\n+\n+    /* The first pass ensures the magnitude is 1, ... */\n+    t0 += x * 0x1000003D1ULL;\n+\n+    /* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */\n+    uint64_t z0 = t0 & 0xFFFFFFFFFFFFFULL, z1 = z0 ^ 0x1000003D0ULL;\n+\n+    /* Fast return path should catch the majority of cases */\n+    if ((z0 != 0ULL) & (z1 != 0xFFFFFFFFFFFFFULL))\n+        return 0;\n+\n+    uint64_t t1 = r->n[1], t2 = r->n[2], t3 = r->n[3];\n+    t4 &= 0x0FFFFFFFFFFFFULL;\n+\n+    t1 += (t0 >> 52); t0  = z0;\n+    t2 += (t1 >> 52); t1 &= 0xFFFFFFFFFFFFFULL; z0 |= t1; z1 &= t1;\n+    t3 += (t2 >> 52); t2 &= 0xFFFFFFFFFFFFFULL; z0 |= t2; z1 &= t2;\n+    t4 += (t3 >> 52); t3 &= 0xFFFFFFFFFFFFFULL; z0 |= t3; z1 &= t3;\n+                                                z0 |= t4; z1 &= t4 ^ 0xF000000000000ULL;\n+\n+    /* ... except for a possible carry at bit 48 of t4 (i.e. bit 256 of the field element) */\n+    VERIFY_CHECK(t4 >> 49 == 0);\n+\n+    return (z0 == 0) | (z1 == 0xFFFFFFFFFFFFFULL);\n+}\n+\n SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe_t *r, int a) {\n     r->n[0] = a;\n     r->n[1] = r->n[2] = r->n[3] = r->n[4] = 0;\n@@ -183,17 +260,6 @@ SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe_t *a) {\n     }\n }\n \n-SECP256K1_INLINE static int secp256k1_fe_equal(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n-#ifdef VERIFY\n-    VERIFY_CHECK(a->normalized);\n-    VERIFY_CHECK(b->normalized);\n-    secp256k1_fe_verify(a);\n-    secp256k1_fe_verify(b);\n-#endif\n-    const uint64_t *t = a->n, *u = b->n;\n-    return ((t[0]^u[0]) | (t[1]^u[1]) | (t[2]^u[2]) | (t[3]^u[3]) | (t[4]^u[4])) == 0;\n-}\n-\n static int secp256k1_fe_cmp_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n #ifdef VERIFY\n     VERIFY_CHECK(a->normalized);"
      },
      {
        "sha": "b390fd9de8d4801a9cad8d2a55debf52ceff2f52",
        "filename": "src/secp256k1/src/field_gmp.h",
        "status": "removed",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23ef5b77a4222a628d18219ba656be545810832d/src/secp256k1/src/field_gmp.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23ef5b77a4222a628d18219ba656be545810832d/src/secp256k1/src/field_gmp.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_gmp.h?ref=23ef5b77a4222a628d18219ba656be545810832d",
        "patch": "@@ -1,18 +0,0 @@\n-/**********************************************************************\n- * Copyright (c) 2013, 2014 Pieter Wuille                             *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n-\n-#ifndef _SECP256K1_FIELD_REPR_\n-#define _SECP256K1_FIELD_REPR_\n-\n-#include <gmp.h>\n-\n-#define FIELD_LIMBS ((256 + GMP_NUMB_BITS - 1) / GMP_NUMB_BITS)\n-\n-typedef struct {\n-    mp_limb_t n[FIELD_LIMBS+1];\n-} secp256k1_fe_t;\n-\n-#endif"
      },
      {
        "sha": "73a55c4f00d4523f5851daa9c45ffd5f9ca6dd2e",
        "filename": "src/secp256k1/src/field_gmp_impl.h",
        "status": "removed",
        "additions": 0,
        "deletions": 184,
        "changes": 184,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23ef5b77a4222a628d18219ba656be545810832d/src/secp256k1/src/field_gmp_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23ef5b77a4222a628d18219ba656be545810832d/src/secp256k1/src/field_gmp_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_gmp_impl.h?ref=23ef5b77a4222a628d18219ba656be545810832d",
        "patch": "@@ -1,184 +0,0 @@\n-/**********************************************************************\n- * Copyright (c) 2013, 2014 Pieter Wuille                             *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n-\n-#ifndef _SECP256K1_FIELD_REPR_IMPL_H_\n-#define _SECP256K1_FIELD_REPR_IMPL_H_\n-\n-#include <stdio.h>\n-#include <string.h>\n-#include \"num.h\"\n-#include \"field.h\"\n-\n-static mp_limb_t secp256k1_field_p[FIELD_LIMBS];\n-static mp_limb_t secp256k1_field_pc[(33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS];\n-\n-static void secp256k1_fe_inner_start(void) {\n-    for (int i=0; i<(33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS; i++)\n-        secp256k1_field_pc[i] = 0;\n-    secp256k1_field_pc[0] += 0x3D1UL;\n-    secp256k1_field_pc[32/GMP_NUMB_BITS] += (((mp_limb_t)1) << (32 % GMP_NUMB_BITS));\n-    for (int i=0; i<FIELD_LIMBS; i++) {\n-        secp256k1_field_p[i] = 0;\n-    }\n-    mpn_sub(secp256k1_field_p, secp256k1_field_p, FIELD_LIMBS, secp256k1_field_pc, (33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS);\n-}\n-\n-static void secp256k1_fe_inner_stop(void) {\n-}\n-\n-static void secp256k1_fe_normalize(secp256k1_fe_t *r) {\n-    if (r->n[FIELD_LIMBS] != 0) {\n-#if (GMP_NUMB_BITS >= 40)\n-        mp_limb_t carry = mpn_add_1(r->n, r->n, FIELD_LIMBS, 0x1000003D1ULL * r->n[FIELD_LIMBS]);\n-        mpn_add_1(r->n, r->n, FIELD_LIMBS, 0x1000003D1ULL * carry);\n-#else\n-        mp_limb_t carry = mpn_add_1(r->n, r->n, FIELD_LIMBS, 0x3D1UL * r->n[FIELD_LIMBS]) +\n-                          mpn_add_1(r->n+(32/GMP_NUMB_BITS), r->n+(32/GMP_NUMB_BITS), FIELD_LIMBS-(32/GMP_NUMB_BITS), r->n[FIELD_LIMBS] << (32 % GMP_NUMB_BITS));\n-        mpn_add_1(r->n, r->n, FIELD_LIMBS, 0x3D1UL * carry);\n-        mpn_add_1(r->n+(32/GMP_NUMB_BITS), r->n+(32/GMP_NUMB_BITS), FIELD_LIMBS-(32/GMP_NUMB_BITS), carry << (32%GMP_NUMB_BITS));\n-#endif\n-        r->n[FIELD_LIMBS] = 0;\n-    }\n-    if (mpn_cmp(r->n, secp256k1_field_p, FIELD_LIMBS) >= 0)\n-        mpn_sub(r->n, r->n, FIELD_LIMBS, secp256k1_field_p, FIELD_LIMBS);\n-}\n-\n-static void secp256k1_fe_normalize_var(secp256k1_fe_t *r) {\n-    secp256k1_fe_normalize(r);\n-}\n-\n-SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe_t *r, int a) {\n-    r->n[0] = a;\n-    for (int i=1; i<FIELD_LIMBS+1; i++)\n-        r->n[i] = 0;\n-}\n-\n-SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe_t *r) {\n-    for (int i=0; i<FIELD_LIMBS+1; i++)\n-        r->n[i] = 0;\n-}\n-\n-SECP256K1_INLINE static int secp256k1_fe_is_zero(const secp256k1_fe_t *a) {\n-    int ret = 1;\n-    for (int i=0; i<FIELD_LIMBS+1; i++)\n-        ret &= (a->n[i] == 0);\n-    return ret;\n-}\n-\n-SECP256K1_INLINE static int secp256k1_fe_is_odd(const secp256k1_fe_t *a) {\n-    return a->n[0] & 1;\n-}\n-\n-SECP256K1_INLINE static int secp256k1_fe_equal(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n-    int ret = 1;\n-    for (int i=0; i<FIELD_LIMBS+1; i++)\n-        ret &= (a->n[i] == b->n[i]);\n-    return ret;\n-}\n-\n-SECP256K1_INLINE static int secp256k1_fe_cmp_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n-    for (int i=FIELD_LIMBS; i>=0; i--) {\n-        if (a->n[i] > b->n[i]) return 1;\n-        if (a->n[i] < b->n[i]) return -1;\n-    }\n-    return 0;\n-}\n-\n-static int secp256k1_fe_set_b32(secp256k1_fe_t *r, const unsigned char *a) {\n-    for (int i=0; i<FIELD_LIMBS+1; i++)\n-        r->n[i] = 0;\n-    for (int i=0; i<256; i++) {\n-        int limb = i/GMP_NUMB_BITS;\n-        int shift = i%GMP_NUMB_BITS;\n-        r->n[limb] |= (mp_limb_t)((a[31-i/8] >> (i%8)) & 0x1) << shift;\n-    }\n-    return (mpn_cmp(r->n, secp256k1_field_p, FIELD_LIMBS) < 0);\n-}\n-\n-/** Convert a field element to a 32-byte big endian value. Requires the input to be normalized */\n-static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe_t *a) {\n-    for (int i=0; i<32; i++) {\n-        int c = 0;\n-        for (int j=0; j<8; j++) {\n-            int limb = (8*i+j)/GMP_NUMB_BITS;\n-            int shift = (8*i+j)%GMP_NUMB_BITS;\n-            c |= ((a->n[limb] >> shift) & 0x1) << j;\n-        }\n-        r[31-i] = c;\n-    }\n-}\n-\n-SECP256K1_INLINE static void secp256k1_fe_negate(secp256k1_fe_t *r, const secp256k1_fe_t *a, int m) {\n-    (void)m;\n-    *r = *a;\n-    secp256k1_fe_normalize(r);\n-    for (int i=0; i<FIELD_LIMBS; i++)\n-        r->n[i] = ~(r->n[i]);\n-#if (GMP_NUMB_BITS >= 33)\n-    mpn_sub_1(r->n, r->n, FIELD_LIMBS, 0x1000003D0ULL);\n-#else\n-    mpn_sub_1(r->n, r->n, FIELD_LIMBS, 0x3D0UL);\n-    mpn_sub_1(r->n+(32/GMP_NUMB_BITS), r->n+(32/GMP_NUMB_BITS), FIELD_LIMBS-(32/GMP_NUMB_BITS), 0x1UL << (32%GMP_NUMB_BITS));\n-#endif\n-}\n-\n-SECP256K1_INLINE static void secp256k1_fe_mul_int(secp256k1_fe_t *r, int a) {\n-    mpn_mul_1(r->n, r->n, FIELD_LIMBS+1, a);\n-}\n-\n-SECP256K1_INLINE static void secp256k1_fe_add(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n-    mpn_add(r->n, r->n, FIELD_LIMBS+1, a->n, FIELD_LIMBS+1);\n-}\n-\n-static void secp256k1_fe_reduce(secp256k1_fe_t *r, mp_limb_t *tmp) {\n-    /** <A1 A2 A3 A4> <B1 B2 B3 B4>\n-     *        B1 B2 B3 B4\n-     *  + C * A1 A2 A3 A4\n-     *  +  A1 A2 A3 A4\n-     */\n-\n-#if (GMP_NUMB_BITS >= 33)\n-    mp_limb_t o = mpn_addmul_1(tmp, tmp+FIELD_LIMBS, FIELD_LIMBS, 0x1000003D1ULL);\n-#else\n-    mp_limb_t o = mpn_addmul_1(tmp, tmp+FIELD_LIMBS, FIELD_LIMBS, 0x3D1UL) +\n-                  mpn_addmul_1(tmp+(32/GMP_NUMB_BITS), tmp+FIELD_LIMBS, FIELD_LIMBS-(32/GMP_NUMB_BITS), 0x1UL << (32%GMP_NUMB_BITS));\n-#endif\n-    mp_limb_t q[1+(33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS];\n-    q[(33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS] = mpn_mul_1(q, secp256k1_field_pc, (33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS, o);\n-#if (GMP_NUMB_BITS <= 32)\n-    mp_limb_t o2 = tmp[2*FIELD_LIMBS-(32/GMP_NUMB_BITS)] << (32%GMP_NUMB_BITS);\n-    q[(33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS] += mpn_addmul_1(q, secp256k1_field_pc, (33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS, o2);\n-#endif\n-    r->n[FIELD_LIMBS] = mpn_add(r->n, tmp, FIELD_LIMBS, q, 1+(33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS);\n-}\n-\n-static void secp256k1_fe_mul(secp256k1_fe_t *r, const secp256k1_fe_t *a, const secp256k1_fe_t * SECP256K1_RESTRICT b) {\n-    VERIFY_CHECK(r != b);\n-    secp256k1_fe_t ac = *a;\n-    secp256k1_fe_t bc = *b;\n-    secp256k1_fe_normalize(&ac);\n-    secp256k1_fe_normalize(&bc);\n-    mp_limb_t tmp[2*FIELD_LIMBS];\n-    mpn_mul_n(tmp, ac.n, bc.n, FIELD_LIMBS);\n-    secp256k1_fe_reduce(r, tmp);\n-}\n-\n-static void secp256k1_fe_sqr(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n-    secp256k1_fe_t ac = *a;\n-    secp256k1_fe_normalize(&ac);\n-    mp_limb_t tmp[2*FIELD_LIMBS];\n-    mpn_sqr(tmp, ac.n, FIELD_LIMBS);\n-    secp256k1_fe_reduce(r, tmp);\n-}\n-\n-static void secp256k1_fe_cmov(secp256k1_fe_t *r, const secp256k1_fe_t *a, int flag) {\n-    mp_limb_t mask0 = flag + ~((mp_limb_t)0), mask1 = ~mask0;\n-    for (int i = 0; i <= FIELD_LIMBS; i++) {\n-        r->n[i] = (r->n[i] & mask0) | (a->n[i] & mask1);\n-    }\n-}\n-\n-#endif"
      },
      {
        "sha": "4e2c24aa153541ed754106c31eb77eb3fcfbe670",
        "filename": "src/secp256k1/src/field_impl.h",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/field_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/field_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_impl.h?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -13,9 +13,7 @@\n \n #include \"util.h\"\n \n-#if defined(USE_FIELD_GMP)\n-#include \"field_gmp_impl.h\"\n-#elif defined(USE_FIELD_10X26)\n+#if defined(USE_FIELD_10X26)\n #include \"field_10x26_impl.h\"\n #elif defined(USE_FIELD_5X52)\n #include \"field_5x52_impl.h\"\n@@ -66,6 +64,13 @@ static int secp256k1_fe_set_hex(secp256k1_fe_t *r, const char *a, int alen) {\n     return secp256k1_fe_set_b32(r, tmp);\n }\n \n+SECP256K1_INLINE static int secp256k1_fe_equal_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n+    secp256k1_fe_t na;\n+    secp256k1_fe_negate(&na, a, 1);\n+    secp256k1_fe_add(&na, b);\n+    return secp256k1_fe_normalizes_to_zero_var(&na);\n+}\n+\n static int secp256k1_fe_sqrt_var(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n \n     /** The binary representation of (p + 1)/4 has 3 blocks of 1s, with lengths in\n@@ -130,10 +135,7 @@ static int secp256k1_fe_sqrt_var(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n     /* Check that a square root was actually calculated */\n \n     secp256k1_fe_sqr(&t1, r);\n-    secp256k1_fe_negate(&t1, &t1, 1);\n-    secp256k1_fe_add(&t1, a);\n-    secp256k1_fe_normalize_var(&t1);\n-    return secp256k1_fe_is_zero(&t1);\n+    return secp256k1_fe_equal_var(&t1, a);\n }\n \n static void secp256k1_fe_inv(secp256k1_fe_t *r, const secp256k1_fe_t *a) {"
      },
      {
        "sha": "6dea6bb5acb8047326147d9d54b413ccfc1f2e31",
        "filename": "src/secp256k1/src/group.h",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/group.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/group.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/group.h?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -60,7 +60,6 @@ static int secp256k1_ge_is_infinity(const secp256k1_ge_t *a);\n static int secp256k1_ge_is_valid_var(const secp256k1_ge_t *a);\n \n static void secp256k1_ge_neg(secp256k1_ge_t *r, const secp256k1_ge_t *a);\n-static void secp256k1_ge_neg_var(secp256k1_ge_t *r, const secp256k1_ge_t *a);\n \n /** Get a hex representation of a point. *rlen will be overwritten with the real length. */\n static void secp256k1_ge_get_hex(char *r, int *rlen, const secp256k1_ge_t *a);\n@@ -81,11 +80,11 @@ static void secp256k1_gej_set_xy(secp256k1_gej_t *r, const secp256k1_fe_t *x, co\n /** Set a group element (jacobian) equal to another which is given in affine coordinates. */\n static void secp256k1_gej_set_ge(secp256k1_gej_t *r, const secp256k1_ge_t *a);\n \n-/** Get the X coordinate of a group element (jacobian). */\n-static void secp256k1_gej_get_x_var(secp256k1_fe_t *r, const secp256k1_gej_t *a);\n+/** Compare the X coordinate of a group element (jacobian). */\n+static int secp256k1_gej_eq_x_var(const secp256k1_fe_t *x, const secp256k1_gej_t *a);\n \n /** Set r equal to the inverse of a (i.e., mirrored around the X axis) */\n-static void secp256k1_gej_neg_var(secp256k1_gej_t *r, const secp256k1_gej_t *a);\n+static void secp256k1_gej_neg(secp256k1_gej_t *r, const secp256k1_gej_t *a);\n \n /** Check whether a group element is the point at infinity. */\n static int secp256k1_gej_is_infinity(const secp256k1_gej_t *a);"
      },
      {
        "sha": "fef06df2892d1a5f4372d4028c8dea42efce96fc",
        "filename": "src/secp256k1/src/group_impl.h",
        "status": "modified",
        "additions": 26,
        "deletions": 40,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/group_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/group_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/group_impl.h?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -29,13 +29,7 @@ static int secp256k1_ge_is_infinity(const secp256k1_ge_t *a) {\n \n static void secp256k1_ge_neg(secp256k1_ge_t *r, const secp256k1_ge_t *a) {\n     *r = *a;\n-    secp256k1_fe_normalize(&r->y);\n-    secp256k1_fe_negate(&r->y, &r->y, 1);\n-}\n-\n-static void secp256k1_ge_neg_var(secp256k1_ge_t *r, const secp256k1_ge_t *a) {\n-    *r = *a;\n-    secp256k1_fe_normalize_var(&r->y);\n+    secp256k1_fe_normalize_weak(&r->y);\n     secp256k1_fe_negate(&r->y, &r->y, 1);\n }\n \n@@ -163,17 +157,19 @@ static void secp256k1_gej_set_ge(secp256k1_gej_t *r, const secp256k1_ge_t *a) {\n    secp256k1_fe_set_int(&r->z, 1);\n }\n \n-static void secp256k1_gej_get_x_var(secp256k1_fe_t *r, const secp256k1_gej_t *a) {\n-    secp256k1_fe_t zi2; secp256k1_fe_inv_var(&zi2, &a->z); secp256k1_fe_sqr(&zi2, &zi2);\n-    secp256k1_fe_mul(r, &a->x, &zi2);\n+static int secp256k1_gej_eq_x_var(const secp256k1_fe_t *x, const secp256k1_gej_t *a) {\n+    VERIFY_CHECK(!a->infinity);\n+    secp256k1_fe_t r; secp256k1_fe_sqr(&r, &a->z); secp256k1_fe_mul(&r, &r, x);\n+    secp256k1_fe_t r2 = a->x; secp256k1_fe_normalize_weak(&r2);\n+    return secp256k1_fe_equal_var(&r, &r2);\n }\n \n-static void secp256k1_gej_neg_var(secp256k1_gej_t *r, const secp256k1_gej_t *a) {\n+static void secp256k1_gej_neg(secp256k1_gej_t *r, const secp256k1_gej_t *a) {\n     r->infinity = a->infinity;\n     r->x = a->x;\n     r->y = a->y;\n     r->z = a->z;\n-    secp256k1_fe_normalize_var(&r->y);\n+    secp256k1_fe_normalize_weak(&r->y);\n     secp256k1_fe_negate(&r->y, &r->y, 1);\n }\n \n@@ -195,9 +191,8 @@ static int secp256k1_gej_is_valid_var(const secp256k1_gej_t *a) {\n     secp256k1_fe_t z6; secp256k1_fe_sqr(&z6, &z2); secp256k1_fe_mul(&z6, &z6, &z2);\n     secp256k1_fe_mul_int(&z6, 7);\n     secp256k1_fe_add(&x3, &z6);\n-    secp256k1_fe_normalize_var(&y2);\n-    secp256k1_fe_normalize_var(&x3);\n-    return secp256k1_fe_equal(&y2, &x3);\n+    secp256k1_fe_normalize_weak(&x3);\n+    return secp256k1_fe_equal_var(&y2, &x3);\n }\n \n static int secp256k1_ge_is_valid_var(const secp256k1_ge_t *a) {\n@@ -208,9 +203,8 @@ static int secp256k1_ge_is_valid_var(const secp256k1_ge_t *a) {\n     secp256k1_fe_t x3; secp256k1_fe_sqr(&x3, &a->x); secp256k1_fe_mul(&x3, &x3, &a->x);\n     secp256k1_fe_t c; secp256k1_fe_set_int(&c, 7);\n     secp256k1_fe_add(&x3, &c);\n-    secp256k1_fe_normalize_var(&y2);\n-    secp256k1_fe_normalize_var(&x3);\n-    return secp256k1_fe_equal(&y2, &x3);\n+    secp256k1_fe_normalize_weak(&x3);\n+    return secp256k1_fe_equal_var(&y2, &x3);\n }\n \n static void secp256k1_gej_double_var(secp256k1_gej_t *r, const secp256k1_gej_t *a) {\n@@ -261,20 +255,16 @@ static void secp256k1_gej_add_var(secp256k1_gej_t *r, const secp256k1_gej_t *a,\n     secp256k1_fe_t u2; secp256k1_fe_mul(&u2, &b->x, &z12);\n     secp256k1_fe_t s1; secp256k1_fe_mul(&s1, &a->y, &z22); secp256k1_fe_mul(&s1, &s1, &b->z);\n     secp256k1_fe_t s2; secp256k1_fe_mul(&s2, &b->y, &z12); secp256k1_fe_mul(&s2, &s2, &a->z);\n-    secp256k1_fe_normalize_var(&u1);\n-    secp256k1_fe_normalize_var(&u2);\n-    if (secp256k1_fe_equal(&u1, &u2)) {\n-        secp256k1_fe_normalize_var(&s1);\n-        secp256k1_fe_normalize_var(&s2);\n-        if (secp256k1_fe_equal(&s1, &s2)) {\n+    secp256k1_fe_t h; secp256k1_fe_negate(&h, &u1, 1); secp256k1_fe_add(&h, &u2);\n+    secp256k1_fe_t i; secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);\n+    if (secp256k1_fe_normalizes_to_zero_var(&h)) {\n+        if (secp256k1_fe_normalizes_to_zero_var(&i)) {\n             secp256k1_gej_double_var(r, a);\n         } else {\n             r->infinity = 1;\n         }\n         return;\n     }\n-    secp256k1_fe_t h; secp256k1_fe_negate(&h, &u1, 1); secp256k1_fe_add(&h, &u2);\n-    secp256k1_fe_t i; secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);\n     secp256k1_fe_t i2; secp256k1_fe_sqr(&i2, &i);\n     secp256k1_fe_t h2; secp256k1_fe_sqr(&h2, &h);\n     secp256k1_fe_t h3; secp256k1_fe_mul(&h3, &h, &h2);\n@@ -300,23 +290,20 @@ static void secp256k1_gej_add_ge_var(secp256k1_gej_t *r, const secp256k1_gej_t *\n     }\n     r->infinity = 0;\n     secp256k1_fe_t z12; secp256k1_fe_sqr(&z12, &a->z);\n-    secp256k1_fe_t u1 = a->x;\n+    secp256k1_fe_t u1 = a->x; secp256k1_fe_normalize_weak(&u1);\n     secp256k1_fe_t u2; secp256k1_fe_mul(&u2, &b->x, &z12);\n-    secp256k1_fe_t s1 = a->y; secp256k1_fe_normalize_var(&s1);\n+    secp256k1_fe_t s1 = a->y; secp256k1_fe_normalize_weak(&s1);\n     secp256k1_fe_t s2; secp256k1_fe_mul(&s2, &b->y, &z12); secp256k1_fe_mul(&s2, &s2, &a->z);\n-    secp256k1_fe_normalize_var(&u1);\n-    secp256k1_fe_normalize_var(&u2);\n-    if (secp256k1_fe_equal(&u1, &u2)) {\n-        secp256k1_fe_normalize_var(&s2);\n-        if (secp256k1_fe_equal(&s1, &s2)) {\n+    secp256k1_fe_t h; secp256k1_fe_negate(&h, &u1, 1); secp256k1_fe_add(&h, &u2);\n+    secp256k1_fe_t i; secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);\n+    if (secp256k1_fe_normalizes_to_zero_var(&h)) {\n+        if (secp256k1_fe_normalizes_to_zero_var(&i)) {\n             secp256k1_gej_double_var(r, a);\n         } else {\n             r->infinity = 1;\n         }\n         return;\n     }\n-    secp256k1_fe_t h; secp256k1_fe_negate(&h, &u1, 1); secp256k1_fe_add(&h, &u2);\n-    secp256k1_fe_t i; secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);\n     secp256k1_fe_t i2; secp256k1_fe_sqr(&i2, &i);\n     secp256k1_fe_t h2; secp256k1_fe_sqr(&h2, &h);\n     secp256k1_fe_t h3; secp256k1_fe_mul(&h3, &h, &h2);\n@@ -355,9 +342,9 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n      */\n \n     secp256k1_fe_t zz; secp256k1_fe_sqr(&zz, &a->z);                /* z = Z1^2 */\n-    secp256k1_fe_t u1 = a->x; secp256k1_fe_normalize(&u1);          /* u1 = U1 = X1*Z2^2 (1) */\n+    secp256k1_fe_t u1 = a->x; secp256k1_fe_normalize_weak(&u1);     /* u1 = U1 = X1*Z2^2 (1) */\n     secp256k1_fe_t u2; secp256k1_fe_mul(&u2, &b->x, &zz);           /* u2 = U2 = X2*Z1^2 (1) */\n-    secp256k1_fe_t s1 = a->y; secp256k1_fe_normalize(&s1);          /* s1 = S1 = Y1*Z2^3 (1) */\n+    secp256k1_fe_t s1 = a->y; secp256k1_fe_normalize_weak(&s1);     /* s1 = S1 = Y1*Z2^3 (1) */\n     secp256k1_fe_t s2; secp256k1_fe_mul(&s2, &b->y, &zz);           /* s2 = Y2*Z2^2 (1) */\n     secp256k1_fe_mul(&s2, &s2, &a->z);                              /* s2 = S2 = Y2*Z1^3 (1) */\n     secp256k1_fe_t z = a->z;                                        /* z = Z = Z1*Z2 (8) */\n@@ -371,8 +358,7 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n     secp256k1_fe_add(&rr, &t);                                      /* rr = R = T^2-U1*U2 (3) */\n     secp256k1_fe_sqr(&t, &rr);                                      /* t = R^2 (1) */\n     secp256k1_fe_mul(&r->z, &m, &z);                                /* r->z = M*Z (1) */\n-    secp256k1_fe_normalize(&r->z);\n-    int infinity = secp256k1_fe_is_zero(&r->z) * (1 - a->infinity);\n+    int infinity = secp256k1_fe_normalizes_to_zero(&r->z) * (1 - a->infinity);\n     secp256k1_fe_mul_int(&r->z, 2 * (1 - a->infinity)); /* r->z = Z3 = 2*M*Z (2) */\n     r->x = t;                                           /* r->x = R^2 (1) */\n     secp256k1_fe_negate(&q, &q, 1);                     /* q = -Q (2) */\n@@ -384,7 +370,7 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n     secp256k1_fe_mul(&t, &t, &rr);                      /* t = R*(2*R^2-3*Q) (1) */\n     secp256k1_fe_add(&t, &n);                           /* t = R*(2*R^2-3*Q)+M^4 (2) */\n     secp256k1_fe_negate(&r->y, &t, 2);                  /* r->y = R*(3*Q-2*R^2)-M^4 (3) */\n-    secp256k1_fe_normalize(&r->y);\n+    secp256k1_fe_normalize_weak(&r->y);\n     secp256k1_fe_mul_int(&r->x, 4 * (1 - a->infinity)); /* r->x = X3 = 4*(R^2-Q) */\n     secp256k1_fe_mul_int(&r->y, 4 * (1 - a->infinity)); /* r->y = Y3 = 4*R*(3*Q-2*R^2)-4*M^4 (4) */\n "
      },
      {
        "sha": "d1e65b968a9e5d44578bb1d0a051f499ea4f5e30",
        "filename": "src/secp256k1/src/hash.h",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/hash.h?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -0,0 +1,41 @@\n+/**********************************************************************\n+ * Copyright (c) 2014 Pieter Wuille                                   *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_HASH_\n+#define _SECP256K1_HASH_\n+\n+#include <stdlib.h>\n+#include <stdint.h>\n+\n+typedef struct {\n+    uint32_t s[32];\n+    unsigned char buf[64];\n+    size_t bytes;\n+} secp256k1_sha256_t;\n+\n+static void secp256k1_sha256_initialize(secp256k1_sha256_t *hash);\n+static void secp256k1_sha256_write(secp256k1_sha256_t *hash, const unsigned char *data, size_t size);\n+static void secp256k1_sha256_finalize(secp256k1_sha256_t *hash, unsigned char *out32);\n+\n+typedef struct {\n+    secp256k1_sha256_t inner, outer;\n+} secp256k1_hmac_sha256_t;\n+\n+static void secp256k1_hmac_sha256_initialize(secp256k1_hmac_sha256_t *hash, const unsigned char *key, size_t size);\n+static void secp256k1_hmac_sha256_write(secp256k1_hmac_sha256_t *hash, const unsigned char *data, size_t size);\n+static void secp256k1_hmac_sha256_finalize(secp256k1_hmac_sha256_t *hash, unsigned char *out32);\n+\n+typedef struct {\n+    unsigned char v[32];\n+    unsigned char k[32];\n+    int retry;\n+} secp256k1_rfc6979_hmac_sha256_t;\n+\n+static void secp256k1_rfc6979_hmac_sha256_initialize(secp256k1_rfc6979_hmac_sha256_t *rng, const unsigned char *key, size_t keylen, const unsigned char *msg, size_t msglen);\n+static void secp256k1_rfc6979_hmac_sha256_generate(secp256k1_rfc6979_hmac_sha256_t *rng, unsigned char *out, size_t outlen);\n+static void secp256k1_rfc6979_hmac_sha256_finalize(secp256k1_rfc6979_hmac_sha256_t *rng);\n+\n+#endif"
      },
      {
        "sha": "f35c5f7a8219d46a623b94a48b794d4ea51a7207",
        "filename": "src/secp256k1/src/hash_impl.h",
        "status": "added",
        "additions": 291,
        "deletions": 0,
        "changes": 291,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/hash_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/hash_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/hash_impl.h?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -0,0 +1,291 @@\n+/**********************************************************************\n+ * Copyright (c) 2014 Pieter Wuille                                   *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_HASH_IMPL_H_\n+#define _SECP256K1_HASH_IMPL_H_\n+\n+#include \"hash.h\"\n+\n+#include <stdlib.h>\n+#include <stdint.h>\n+\n+#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))\n+#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))\n+#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))\n+#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))\n+#define sigma0(x) (((x) >> 7 | (x) << 25) ^ ((x) >> 18 | (x) << 14) ^ ((x) >> 3))\n+#define sigma1(x) (((x) >> 17 | (x) << 15) ^ ((x) >> 19 | (x) << 13) ^ ((x) >> 10))\n+\n+#define Round(a,b,c,d,e,f,g,h,k,w) do { \\\n+    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \\\n+    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \\\n+    (d) += t1; \\\n+    (h) = t1 + t2; \\\n+} while(0)\n+\n+#define ReadBE32(p) (((uint32_t)((p)[0])) << 24 | ((uint32_t)((p)[1])) << 16 | ((uint32_t)((p)[2])) << 8 | ((uint32_t)((p)[3])))\n+#define WriteBE32(p, v) do { (p)[0] = (v) >> 24; (p)[1] = (v) >> 16; (p)[2] = (v) >> 8; (p)[3] = (v); } while(0)\n+\n+static void secp256k1_sha256_initialize(secp256k1_sha256_t *hash) {\n+    hash->s[0] = 0x6a09e667ul;\n+    hash->s[1] = 0xbb67ae85ul;\n+    hash->s[2] = 0x3c6ef372ul;\n+    hash->s[3] = 0xa54ff53aul;\n+    hash->s[4] = 0x510e527ful;\n+    hash->s[5] = 0x9b05688cul;\n+    hash->s[6] = 0x1f83d9abul;\n+    hash->s[7] = 0x5be0cd19ul;\n+    hash->bytes = 0;\n+}\n+\n+/** Perform one SHA-256 transformation, processing a 64-byte chunk. */\n+static void secp256k1_sha256_transform(uint32_t* s, const unsigned char* chunk) {\n+    uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n+    uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n+\n+    Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = ReadBE32(chunk + 0));\n+    Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = ReadBE32(chunk + 4));\n+    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = ReadBE32(chunk + 8));\n+    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = ReadBE32(chunk + 12));\n+    Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = ReadBE32(chunk + 16));\n+    Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = ReadBE32(chunk + 20));\n+    Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = ReadBE32(chunk + 24));\n+    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = ReadBE32(chunk + 28));\n+    Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = ReadBE32(chunk + 32));\n+    Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = ReadBE32(chunk + 36));\n+    Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = ReadBE32(chunk + 40));\n+    Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = ReadBE32(chunk + 44));\n+    Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = ReadBE32(chunk + 48));\n+    Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = ReadBE32(chunk + 52));\n+    Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = ReadBE32(chunk + 56));\n+    Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = ReadBE32(chunk + 60));\n+\n+    Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+    Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+    Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));\n+\n+    s[0] += a;\n+    s[1] += b;\n+    s[2] += c;\n+    s[3] += d;\n+    s[4] += e;\n+    s[5] += f;\n+    s[6] += g;\n+    s[7] += h;\n+}\n+\n+static void secp256k1_sha256_write(secp256k1_sha256_t *hash, const unsigned char *data, size_t len) {\n+    const unsigned char* end = data + len;\n+    size_t bufsize = hash->bytes % 64;\n+    if (bufsize && bufsize + len >= 64) {\n+        // Fill the buffer, and process it.\n+        memcpy(hash->buf + bufsize, data, 64 - bufsize);\n+        hash->bytes += 64 - bufsize;\n+        data += 64 - bufsize;\n+        secp256k1_sha256_transform(hash->s, hash->buf);\n+        bufsize = 0;\n+    }\n+    while (end >= data + 64) {\n+        // Process full chunks directly from the source.\n+        secp256k1_sha256_transform(hash->s, data);\n+        hash->bytes += 64;\n+        data += 64;\n+    }\n+    if (end > data) {\n+        // Fill the buffer with what remains.\n+        memcpy(hash->buf + bufsize, data, end - data);\n+        hash->bytes += end - data;\n+    }\n+}\n+\n+static void secp256k1_sha256_finalize(secp256k1_sha256_t *hash, unsigned char *out32) {\n+    static const unsigned char pad[64] = {0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n+    unsigned char sizedesc[8];\n+    WriteBE32(sizedesc, hash->bytes >> 29);\n+    WriteBE32(sizedesc + 4, hash->bytes << 3);\n+    secp256k1_sha256_write(hash, pad, 1 + ((119 - (hash->bytes % 64)) % 64));\n+    secp256k1_sha256_write(hash, sizedesc, 8);\n+    WriteBE32(out32, hash->s[0]);\n+    hash->s[0] = 0;\n+    WriteBE32(out32 + 4, hash->s[1]);\n+    hash->s[1] = 0;\n+    WriteBE32(out32 + 8, hash->s[2]);\n+    hash->s[2] = 0;\n+    WriteBE32(out32 + 12, hash->s[3]);\n+    hash->s[3] = 0;\n+    WriteBE32(out32 + 16, hash->s[4]);\n+    hash->s[4] = 0;\n+    WriteBE32(out32 + 20, hash->s[5]);\n+    hash->s[5] = 0;\n+    WriteBE32(out32 + 24, hash->s[6]);\n+    hash->s[6] = 0;\n+    WriteBE32(out32 + 28, hash->s[7]);\n+    hash->s[7] = 0;\n+}\n+\n+static void secp256k1_hmac_sha256_initialize(secp256k1_hmac_sha256_t *hash, const unsigned char *key, size_t keylen) {\n+    unsigned char rkey[64];\n+    if (keylen <= 64) {\n+        memcpy(rkey, key, keylen);\n+        memset(rkey + keylen, 0, 64 - keylen);\n+    } else {\n+        secp256k1_sha256_t sha256;\n+        secp256k1_sha256_initialize(&sha256);\n+        secp256k1_sha256_write(&sha256, key, keylen);\n+        secp256k1_sha256_finalize(&sha256, rkey);\n+        memset(rkey + 32, 0, 32);\n+    }\n+\n+    secp256k1_sha256_initialize(&hash->outer);\n+    for (int n = 0; n < 64; n++)\n+        rkey[n] ^= 0x5c;\n+    secp256k1_sha256_write(&hash->outer, rkey, 64);\n+\n+    secp256k1_sha256_initialize(&hash->inner);\n+    for (int n = 0; n < 64; n++)\n+        rkey[n] ^= 0x5c ^ 0x36;\n+    secp256k1_sha256_write(&hash->inner, rkey, 64);\n+    memset(rkey, 0, 64);\n+}\n+\n+static void secp256k1_hmac_sha256_write(secp256k1_hmac_sha256_t *hash, const unsigned char *data, size_t size) {\n+    secp256k1_sha256_write(&hash->inner, data, size);\n+}\n+\n+static void secp256k1_hmac_sha256_finalize(secp256k1_hmac_sha256_t *hash, unsigned char *out32) {\n+    unsigned char temp[32];\n+    secp256k1_sha256_finalize(&hash->inner, temp);\n+    secp256k1_sha256_write(&hash->outer, temp, 32);\n+    memset(temp, 0, 32);\n+    secp256k1_sha256_finalize(&hash->outer, out32);\n+}\n+\n+\n+static void secp256k1_rfc6979_hmac_sha256_initialize(secp256k1_rfc6979_hmac_sha256_t *rng, const unsigned char *key, size_t keylen, const unsigned char *msg, size_t msglen) {\n+    static const unsigned char zero[1] = {0x00};\n+    static const unsigned char one[1] = {0x01};\n+\n+    memset(rng->v, 0x01, 32);\n+    memset(rng->k, 0x00, 32);\n+\n+    secp256k1_hmac_sha256_t hmac;\n+    secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n+    secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n+    secp256k1_hmac_sha256_write(&hmac, zero, 1);\n+    secp256k1_hmac_sha256_write(&hmac, key, keylen);\n+    secp256k1_hmac_sha256_write(&hmac, msg, msglen);\n+    secp256k1_hmac_sha256_finalize(&hmac, rng->k);\n+    secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n+    secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n+    secp256k1_hmac_sha256_finalize(&hmac, rng->v);\n+\n+    secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n+    secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n+    secp256k1_hmac_sha256_write(&hmac, one, 1);\n+    secp256k1_hmac_sha256_write(&hmac, key, keylen);\n+    secp256k1_hmac_sha256_write(&hmac, msg, msglen);\n+    secp256k1_hmac_sha256_finalize(&hmac, rng->k);\n+    secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n+    secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n+    secp256k1_hmac_sha256_finalize(&hmac, rng->v);\n+    rng->retry = 0;\n+}\n+\n+static void secp256k1_rfc6979_hmac_sha256_generate(secp256k1_rfc6979_hmac_sha256_t *rng, unsigned char *out, size_t outlen) {\n+    static const unsigned char zero[1] = {0x00};\n+    if (rng->retry) {\n+        secp256k1_hmac_sha256_t hmac;\n+        secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n+        secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n+        secp256k1_hmac_sha256_write(&hmac, zero, 1);\n+        secp256k1_hmac_sha256_finalize(&hmac, rng->k);\n+        secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n+        secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n+        secp256k1_hmac_sha256_finalize(&hmac, rng->v);\n+    }\n+\n+    while (outlen > 0) {\n+        secp256k1_hmac_sha256_t hmac;\n+        secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n+        secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n+        secp256k1_hmac_sha256_finalize(&hmac, rng->v);\n+        int now = outlen;\n+        if (now > 32) {\n+            now = 32;\n+        }\n+        memcpy(out, rng->v, now);\n+        out += now;\n+        outlen -= now;\n+    }\n+\n+    rng->retry = 1;\n+}\n+\n+static void secp256k1_rfc6979_hmac_sha256_finalize(secp256k1_rfc6979_hmac_sha256_t *rng) {\n+    memset(rng->k, 0, 32);\n+    memset(rng->v, 0, 32);\n+    rng->retry = 0;\n+}\n+\n+\n+#undef Round\n+#undef sigma0\n+#undef sigma1\n+#undef Sigma0\n+#undef Sigma1\n+#undef Ch\n+#undef Maj\n+#undef ReadBE32\n+#undef WriteBE32\n+\n+#endif"
      },
      {
        "sha": "58bcd8d009e9156f8516e5f466a417003154e8ab",
        "filename": "src/secp256k1/src/secp256k1.c",
        "status": "modified",
        "additions": 58,
        "deletions": 15,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/secp256k1.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/secp256k1.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/secp256k1.c?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -17,6 +17,7 @@\n #include \"ecmult_gen_impl.h\"\n #include \"ecdsa_impl.h\"\n #include \"eckey_impl.h\"\n+#include \"hash_impl.h\"\n \n void secp256k1_start(unsigned int flags) {\n     secp256k1_fe_start();\n@@ -69,49 +70,91 @@ int secp256k1_ecdsa_verify(const unsigned char *msg32, const unsigned char *sig,\n     return ret;\n }\n \n-int secp256k1_ecdsa_sign(const unsigned char *msg32, unsigned char *signature, int *signaturelen, const unsigned char *seckey, const unsigned char *nonce) {\n+static int nonce_function_rfc6979(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, unsigned int counter, const void *data) {\n+   (void)data;\n+   secp256k1_rfc6979_hmac_sha256_t rng;\n+   secp256k1_rfc6979_hmac_sha256_initialize(&rng, key32, 32, msg32, 32);\n+   for (unsigned int i = 0; i <= counter; i++) {\n+       secp256k1_rfc6979_hmac_sha256_generate(&rng, nonce32, 32);\n+   }\n+   secp256k1_rfc6979_hmac_sha256_finalize(&rng);\n+   return 1;\n+}\n+\n+const secp256k1_nonce_function_t secp256k1_nonce_function_rfc6979 = nonce_function_rfc6979;\n+const secp256k1_nonce_function_t secp256k1_nonce_function_default = nonce_function_rfc6979;\n+\n+int secp256k1_ecdsa_sign(const unsigned char *msg32, unsigned char *signature, int *signaturelen, const unsigned char *seckey, secp256k1_nonce_function_t noncefp, const void* noncedata) {\n     DEBUG_CHECK(secp256k1_ecmult_gen_consts != NULL);\n     DEBUG_CHECK(msg32 != NULL);\n     DEBUG_CHECK(signature != NULL);\n     DEBUG_CHECK(signaturelen != NULL);\n     DEBUG_CHECK(seckey != NULL);\n-    DEBUG_CHECK(nonce != NULL);\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_default;\n+    }\n \n     secp256k1_scalar_t sec, non, msg;\n     secp256k1_scalar_set_b32(&sec, seckey, NULL);\n-    int overflow = 0;\n-    secp256k1_scalar_set_b32(&non, nonce, &overflow);\n     secp256k1_scalar_set_b32(&msg, msg32, NULL);\n-    int ret = !secp256k1_scalar_is_zero(&non) && !overflow;\n+    int overflow = 0;\n+    int ret = 0;\n+    unsigned int count = 0;\n     secp256k1_ecdsa_sig_t sig;\n-    if (ret) {\n-        ret = secp256k1_ecdsa_sig_sign(&sig, &sec, &msg, &non, NULL);\n+    while (1) {\n+        unsigned char nonce32[32];\n+        ret = noncefp(nonce32, msg32, seckey, count, noncedata);\n+        if (!ret) {\n+            break;\n+        }\n+        secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n+        memset(nonce32, 0, 32);\n+        if (!secp256k1_scalar_is_zero(&non) && !overflow) {\n+            if (secp256k1_ecdsa_sig_sign(&sig, &sec, &msg, &non, NULL)) {\n+                break;\n+            }\n+        }\n+        count++;\n     }\n     if (ret) {\n-        secp256k1_ecdsa_sig_serialize(signature, signaturelen, &sig);\n+        ret = secp256k1_ecdsa_sig_serialize(signature, signaturelen, &sig);\n     }\n     secp256k1_scalar_clear(&msg);\n     secp256k1_scalar_clear(&non);\n     secp256k1_scalar_clear(&sec);\n     return ret;\n }\n \n-int secp256k1_ecdsa_sign_compact(const unsigned char *msg32, unsigned char *sig64, const unsigned char *seckey, const unsigned char *nonce, int *recid) {\n+int secp256k1_ecdsa_sign_compact(const unsigned char *msg32, unsigned char *sig64, const unsigned char *seckey, secp256k1_nonce_function_t noncefp, const void* noncedata, int *recid) {\n     DEBUG_CHECK(secp256k1_ecmult_gen_consts != NULL);\n     DEBUG_CHECK(msg32 != NULL);\n     DEBUG_CHECK(sig64 != NULL);\n     DEBUG_CHECK(seckey != NULL);\n-    DEBUG_CHECK(nonce != NULL);\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_default;\n+    }\n \n     secp256k1_scalar_t sec, non, msg;\n     secp256k1_scalar_set_b32(&sec, seckey, NULL);\n-    int overflow = 0;\n-    secp256k1_scalar_set_b32(&non, nonce, &overflow);\n     secp256k1_scalar_set_b32(&msg, msg32, NULL);\n-    int ret = !secp256k1_scalar_is_zero(&non) && !overflow;\n+    int overflow = 0;\n+    int ret = 0;\n+    unsigned int count = 0;\n     secp256k1_ecdsa_sig_t sig;\n-    if (ret) {\n-        ret = secp256k1_ecdsa_sig_sign(&sig, &sec, &msg, &non, recid);\n+    while (1) {\n+        unsigned char nonce32[32];\n+        ret = noncefp(nonce32, msg32, seckey, count, noncedata);\n+        if (!ret) {\n+            break;\n+        }\n+        secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n+        memset(nonce32, 0, 32);\n+        if (!secp256k1_scalar_is_zero(&non) && !overflow) {\n+            if (secp256k1_ecdsa_sig_sign(&sig, &sec, &msg, &non, recid)) {\n+                break;\n+            }\n+        }\n+        count++;\n     }\n     if (ret) {\n         secp256k1_scalar_get_b32(sig64, &sig.r);"
      },
      {
        "sha": "cff32f1d06872a41b135de5766d4590b37d84388",
        "filename": "src/secp256k1/src/tests.c",
        "status": "modified",
        "additions": 382,
        "deletions": 120,
        "changes": 502,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/tests.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/tests.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/tests.c?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -36,12 +36,19 @@ void random_field_element_test(secp256k1_fe_t *fe) {\n }\n \n void random_field_element_magnitude(secp256k1_fe_t *fe) {\n+    int n = secp256k1_rand32() % 9;\n     secp256k1_fe_normalize(fe);\n-    int n = secp256k1_rand32() % 4;\n-    for (int i = 0; i < n; i++) {\n-        secp256k1_fe_negate(fe, fe, 1 + 2*i);\n-        secp256k1_fe_negate(fe, fe, 2 + 2*i);\n+    if (n == 0) {\n+        return;\n     }\n+    secp256k1_fe_t zero;\n+    secp256k1_fe_clear(&zero);\n+    secp256k1_fe_negate(&zero, &zero, 0);\n+    secp256k1_fe_mul_int(&zero, n - 1);\n+    secp256k1_fe_add(fe, &zero);\n+#ifdef VERIFY\n+    CHECK(fe->magnitude == n);\n+#endif\n }\n \n void random_group_element_test(secp256k1_ge_t *ge) {\n@@ -91,6 +98,121 @@ void random_scalar_order(secp256k1_scalar_t *num) {\n     } while(1);\n }\n \n+/***** HASH TESTS *****/\n+\n+void run_sha256_tests(void) {\n+    static const char *inputs[8] = {\n+        \"\", \"abc\", \"message digest\", \"secure hash algorithm\", \"SHA256 is considered to be safe\",\n+        \"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\",\n+        \"For this sample, this 63-byte string will be used as input data\",\n+        \"This is exactly 64 bytes long, not counting the terminating byte\"\n+    };\n+    static const unsigned char outputs[8][32] = {\n+        {0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55},\n+        {0xba, 0x78, 0x16, 0xbf, 0x8f, 0x01, 0xcf, 0xea, 0x41, 0x41, 0x40, 0xde, 0x5d, 0xae, 0x22, 0x23, 0xb0, 0x03, 0x61, 0xa3, 0x96, 0x17, 0x7a, 0x9c, 0xb4, 0x10, 0xff, 0x61, 0xf2, 0x00, 0x15, 0xad},\n+        {0xf7, 0x84, 0x6f, 0x55, 0xcf, 0x23, 0xe1, 0x4e, 0xeb, 0xea, 0xb5, 0xb4, 0xe1, 0x55, 0x0c, 0xad, 0x5b, 0x50, 0x9e, 0x33, 0x48, 0xfb, 0xc4, 0xef, 0xa3, 0xa1, 0x41, 0x3d, 0x39, 0x3c, 0xb6, 0x50},\n+        {0xf3, 0x0c, 0xeb, 0x2b, 0xb2, 0x82, 0x9e, 0x79, 0xe4, 0xca, 0x97, 0x53, 0xd3, 0x5a, 0x8e, 0xcc, 0x00, 0x26, 0x2d, 0x16, 0x4c, 0xc0, 0x77, 0x08, 0x02, 0x95, 0x38, 0x1c, 0xbd, 0x64, 0x3f, 0x0d},\n+        {0x68, 0x19, 0xd9, 0x15, 0xc7, 0x3f, 0x4d, 0x1e, 0x77, 0xe4, 0xe1, 0xb5, 0x2d, 0x1f, 0xa0, 0xf9, 0xcf, 0x9b, 0xea, 0xea, 0xd3, 0x93, 0x9f, 0x15, 0x87, 0x4b, 0xd9, 0x88, 0xe2, 0xa2, 0x36, 0x30},\n+        {0x24, 0x8d, 0x6a, 0x61, 0xd2, 0x06, 0x38, 0xb8, 0xe5, 0xc0, 0x26, 0x93, 0x0c, 0x3e, 0x60, 0x39, 0xa3, 0x3c, 0xe4, 0x59, 0x64, 0xff, 0x21, 0x67, 0xf6, 0xec, 0xed, 0xd4, 0x19, 0xdb, 0x06, 0xc1},\n+        {0xf0, 0x8a, 0x78, 0xcb, 0xba, 0xee, 0x08, 0x2b, 0x05, 0x2a, 0xe0, 0x70, 0x8f, 0x32, 0xfa, 0x1e, 0x50, 0xc5, 0xc4, 0x21, 0xaa, 0x77, 0x2b, 0xa5, 0xdb, 0xb4, 0x06, 0xa2, 0xea, 0x6b, 0xe3, 0x42},\n+        {0xab, 0x64, 0xef, 0xf7, 0xe8, 0x8e, 0x2e, 0x46, 0x16, 0x5e, 0x29, 0xf2, 0xbc, 0xe4, 0x18, 0x26, 0xbd, 0x4c, 0x7b, 0x35, 0x52, 0xf6, 0xb3, 0x82, 0xa9, 0xe7, 0xd3, 0xaf, 0x47, 0xc2, 0x45, 0xf8}\n+    };\n+    for (int i = 0; i < 8; i++) {\n+        secp256k1_sha256_t hasher;\n+        secp256k1_sha256_initialize(&hasher);\n+        secp256k1_sha256_write(&hasher, (const unsigned char*)(inputs[i]), strlen(inputs[i]));\n+        unsigned char out[32];\n+        secp256k1_sha256_finalize(&hasher, out);\n+        CHECK(memcmp(out, outputs[i], 32) == 0);\n+        if (strlen(inputs[i]) > 0) {\n+            secp256k1_sha256_initialize(&hasher);\n+            int split = secp256k1_rand32() % strlen(inputs[i]);\n+            secp256k1_sha256_write(&hasher, (const unsigned char*)(inputs[i]), split);\n+            secp256k1_sha256_write(&hasher, (const unsigned char*)(inputs[i] + split), strlen(inputs[i]) - split);\n+            secp256k1_sha256_finalize(&hasher, out);\n+            CHECK(memcmp(out, outputs[i], 32) == 0);\n+        }\n+    }\n+}\n+\n+void run_hmac_sha256_tests(void) {\n+    static const char *keys[6] = {\n+        \"\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\",\n+        \"\\x4a\\x65\\x66\\x65\",\n+        \"\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\",\n+        \"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\",\n+        \"\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\",\n+        \"\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\"\n+    };\n+    static const char *inputs[6] = {\n+        \"\\x48\\x69\\x20\\x54\\x68\\x65\\x72\\x65\",\n+        \"\\x77\\x68\\x61\\x74\\x20\\x64\\x6f\\x20\\x79\\x61\\x20\\x77\\x61\\x6e\\x74\\x20\\x66\\x6f\\x72\\x20\\x6e\\x6f\\x74\\x68\\x69\\x6e\\x67\\x3f\",\n+        \"\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\",\n+        \"\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\",\n+        \"\\x54\\x65\\x73\\x74\\x20\\x55\\x73\\x69\\x6e\\x67\\x20\\x4c\\x61\\x72\\x67\\x65\\x72\\x20\\x54\\x68\\x61\\x6e\\x20\\x42\\x6c\\x6f\\x63\\x6b\\x2d\\x53\\x69\\x7a\\x65\\x20\\x4b\\x65\\x79\\x20\\x2d\\x20\\x48\\x61\\x73\\x68\\x20\\x4b\\x65\\x79\\x20\\x46\\x69\\x72\\x73\\x74\",\n+        \"\\x54\\x68\\x69\\x73\\x20\\x69\\x73\\x20\\x61\\x20\\x74\\x65\\x73\\x74\\x20\\x75\\x73\\x69\\x6e\\x67\\x20\\x61\\x20\\x6c\\x61\\x72\\x67\\x65\\x72\\x20\\x74\\x68\\x61\\x6e\\x20\\x62\\x6c\\x6f\\x63\\x6b\\x2d\\x73\\x69\\x7a\\x65\\x20\\x6b\\x65\\x79\\x20\\x61\\x6e\\x64\\x20\\x61\\x20\\x6c\\x61\\x72\\x67\\x65\\x72\\x20\\x74\\x68\\x61\\x6e\\x20\\x62\\x6c\\x6f\\x63\\x6b\\x2d\\x73\\x69\\x7a\\x65\\x20\\x64\\x61\\x74\\x61\\x2e\\x20\\x54\\x68\\x65\\x20\\x6b\\x65\\x79\\x20\\x6e\\x65\\x65\\x64\\x73\\x20\\x74\\x6f\\x20\\x62\\x65\\x20\\x68\\x61\\x73\\x68\\x65\\x64\\x20\\x62\\x65\\x66\\x6f\\x72\\x65\\x20\\x62\\x65\\x69\\x6e\\x67\\x20\\x75\\x73\\x65\\x64\\x20\\x62\\x79\\x20\\x74\\x68\\x65\\x20\\x48\\x4d\\x41\\x43\\x20\\x61\\x6c\\x67\\x6f\\x72\\x69\\x74\\x68\\x6d\\x2e\"\n+    };\n+    static const unsigned char outputs[6][32] = {\n+        {0xb0, 0x34, 0x4c, 0x61, 0xd8, 0xdb, 0x38, 0x53, 0x5c, 0xa8, 0xaf, 0xce, 0xaf, 0x0b, 0xf1, 0x2b, 0x88, 0x1d, 0xc2, 0x00, 0xc9, 0x83, 0x3d, 0xa7, 0x26, 0xe9, 0x37, 0x6c, 0x2e, 0x32, 0xcf, 0xf7},\n+        {0x5b, 0xdc, 0xc1, 0x46, 0xbf, 0x60, 0x75, 0x4e, 0x6a, 0x04, 0x24, 0x26, 0x08, 0x95, 0x75, 0xc7, 0x5a, 0x00, 0x3f, 0x08, 0x9d, 0x27, 0x39, 0x83, 0x9d, 0xec, 0x58, 0xb9, 0x64, 0xec, 0x38, 0x43},\n+        {0x77, 0x3e, 0xa9, 0x1e, 0x36, 0x80, 0x0e, 0x46, 0x85, 0x4d, 0xb8, 0xeb, 0xd0, 0x91, 0x81, 0xa7, 0x29, 0x59, 0x09, 0x8b, 0x3e, 0xf8, 0xc1, 0x22, 0xd9, 0x63, 0x55, 0x14, 0xce, 0xd5, 0x65, 0xfe},\n+        {0x82, 0x55, 0x8a, 0x38, 0x9a, 0x44, 0x3c, 0x0e, 0xa4, 0xcc, 0x81, 0x98, 0x99, 0xf2, 0x08, 0x3a, 0x85, 0xf0, 0xfa, 0xa3, 0xe5, 0x78, 0xf8, 0x07, 0x7a, 0x2e, 0x3f, 0xf4, 0x67, 0x29, 0x66, 0x5b},\n+        {0x60, 0xe4, 0x31, 0x59, 0x1e, 0xe0, 0xb6, 0x7f, 0x0d, 0x8a, 0x26, 0xaa, 0xcb, 0xf5, 0xb7, 0x7f, 0x8e, 0x0b, 0xc6, 0x21, 0x37, 0x28, 0xc5, 0x14, 0x05, 0x46, 0x04, 0x0f, 0x0e, 0xe3, 0x7f, 0x54},\n+        {0x9b, 0x09, 0xff, 0xa7, 0x1b, 0x94, 0x2f, 0xcb, 0x27, 0x63, 0x5f, 0xbc, 0xd5, 0xb0, 0xe9, 0x44, 0xbf, 0xdc, 0x63, 0x64, 0x4f, 0x07, 0x13, 0x93, 0x8a, 0x7f, 0x51, 0x53, 0x5c, 0x3a, 0x35, 0xe2}\n+    };\n+    for (int i = 0; i < 6; i++) {\n+        secp256k1_hmac_sha256_t hasher;\n+        secp256k1_hmac_sha256_initialize(&hasher, (const unsigned char*)(keys[i]), strlen(keys[i]));\n+        secp256k1_hmac_sha256_write(&hasher, (const unsigned char*)(inputs[i]), strlen(inputs[i]));\n+        unsigned char out[32];\n+        secp256k1_hmac_sha256_finalize(&hasher, out);\n+        CHECK(memcmp(out, outputs[i], 32) == 0);\n+        if (strlen(inputs[i]) > 0) {\n+            secp256k1_hmac_sha256_initialize(&hasher, (const unsigned char*)(keys[i]), strlen(keys[i]));\n+            int split = secp256k1_rand32() % strlen(inputs[i]);\n+            secp256k1_hmac_sha256_write(&hasher, (const unsigned char*)(inputs[i]), split);\n+            secp256k1_hmac_sha256_write(&hasher, (const unsigned char*)(inputs[i] + split), strlen(inputs[i]) - split);\n+            secp256k1_hmac_sha256_finalize(&hasher, out);\n+            CHECK(memcmp(out, outputs[i], 32) == 0);\n+        }\n+    }\n+}\n+\n+void run_rfc6979_hmac_sha256_tests(void) {\n+    static const unsigned char key1[32] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x00};\n+    static const unsigned char msg1[32] = {0x4b, 0xf5, 0x12, 0x2f, 0x34, 0x45, 0x54, 0xc5, 0x3b, 0xde, 0x2e, 0xbb, 0x8c, 0xd2, 0xb7, 0xe3, 0xd1, 0x60, 0x0a, 0xd6, 0x31, 0xc3, 0x85, 0xa5, 0xd7, 0xcc, 0xe2, 0x3c, 0x77, 0x85, 0x45, 0x9a};\n+    static const unsigned char out1[3][32] = {\n+        {0x4f, 0xe2, 0x95, 0x25, 0xb2, 0x08, 0x68, 0x09, 0x15, 0x9a, 0xcd, 0xf0, 0x50, 0x6e, 0xfb, 0x86, 0xb0, 0xec, 0x93, 0x2c, 0x7b, 0xa4, 0x42, 0x56, 0xab, 0x32, 0x1e, 0x42, 0x1e, 0x67, 0xe9, 0xfb},\n+        {0x2b, 0xf0, 0xff, 0xf1, 0xd3, 0xc3, 0x78, 0xa2, 0x2d, 0xc5, 0xde, 0x1d, 0x85, 0x65, 0x22, 0x32, 0x5c, 0x65, 0xb5, 0x04, 0x49, 0x1a, 0x0c, 0xbd, 0x01, 0xcb, 0x8f, 0x3a, 0xa6, 0x7f, 0xfd, 0x4a},\n+        {0xf5, 0x28, 0xb4, 0x10, 0xcb, 0x54, 0x1f, 0x77, 0x00, 0x0d, 0x7a, 0xfb, 0x6c, 0x5b, 0x53, 0xc5, 0xc4, 0x71, 0xea, 0xb4, 0x3e, 0x46, 0x6d, 0x9a, 0xc5, 0x19, 0x0c, 0x39, 0xc8, 0x2f, 0xd8, 0x2e}\n+    };\n+\n+    static const unsigned char key2[32] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};\n+    static const unsigned char msg2[32] = {0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55};\n+    static const unsigned char out2[3][32] = {\n+        {0x9c, 0x23, 0x6c, 0x16, 0x5b, 0x82, 0xae, 0x0c, 0xd5, 0x90, 0x65, 0x9e, 0x10, 0x0b, 0x6b, 0xab, 0x30, 0x36, 0xe7, 0xba, 0x8b, 0x06, 0x74, 0x9b, 0xaf, 0x69, 0x81, 0xe1, 0x6f, 0x1a, 0x2b, 0x95},\n+        {0xdf, 0x47, 0x10, 0x61, 0x62, 0x5b, 0xc0, 0xea, 0x14, 0xb6, 0x82, 0xfe, 0xee, 0x2c, 0x9c, 0x02, 0xf2, 0x35, 0xda, 0x04, 0x20, 0x4c, 0x1d, 0x62, 0xa1, 0x53, 0x6c, 0x6e, 0x17, 0xae, 0xd7, 0xa9},\n+        {0x75, 0x97, 0x88, 0x7c, 0xbd, 0x76, 0x32, 0x1f, 0x32, 0xe3, 0x04, 0x40, 0x67, 0x9a, 0x22, 0xcf, 0x7f, 0x8d, 0x9d, 0x2e, 0xac, 0x39, 0x0e, 0x58, 0x1f, 0xea, 0x09, 0x1c, 0xe2, 0x02, 0xba, 0x94}\n+    };\n+\n+    secp256k1_rfc6979_hmac_sha256_t rng;\n+    unsigned char out[32];\n+\n+    secp256k1_rfc6979_hmac_sha256_initialize(&rng, key1, 32, msg1, 32);\n+    for (int i = 0; i < 3; i++) {\n+        secp256k1_rfc6979_hmac_sha256_generate(&rng, out, 32);\n+        CHECK(memcmp(out, out1[i], 32) == 0);\n+    }\n+    secp256k1_rfc6979_hmac_sha256_finalize(&rng);\n+\n+    secp256k1_rfc6979_hmac_sha256_initialize(&rng, key2, 32, msg2, 32);\n+    for (int i = 0; i < 3; i++) {\n+        secp256k1_rfc6979_hmac_sha256_generate(&rng, out, 32);\n+        CHECK(memcmp(out, out2[i], 32) == 0);\n+    }\n+    secp256k1_rfc6979_hmac_sha256_finalize(&rng);\n+}\n+\n /***** NUM TESTS *****/\n \n #ifndef USE_NUM_NONE\n@@ -494,9 +616,9 @@ void random_fe_non_square(secp256k1_fe_t *ns) {\n }\n \n int check_fe_equal(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n-    secp256k1_fe_t an = *a; secp256k1_fe_normalize(&an);\n+    secp256k1_fe_t an = *a; secp256k1_fe_normalize_weak(&an);\n     secp256k1_fe_t bn = *b; secp256k1_fe_normalize_var(&bn);\n-    return secp256k1_fe_equal(&an, &bn);\n+    return secp256k1_fe_equal_var(&an, &bn);\n }\n \n int check_fe_inverse(const secp256k1_fe_t *a, const secp256k1_fe_t *ai) {\n@@ -523,16 +645,16 @@ void run_field_misc(void) {\n         random_fe_non_zero(&y);\n         /* Test the fe equality and comparison operations. */\n         CHECK(secp256k1_fe_cmp_var(&x, &x) == 0);\n-        CHECK(secp256k1_fe_equal(&x, &x));\n+        CHECK(secp256k1_fe_equal_var(&x, &x));\n         z = x;\n         secp256k1_fe_add(&z,&y);\n         secp256k1_fe_normalize(&z);\n         /* Test the conditional move. */\n         secp256k1_fe_cmov(&z, &x, 0);\n-        CHECK(secp256k1_fe_equal(&x, &z) == 0);\n+        CHECK(secp256k1_fe_equal_var(&x, &z) == 0);\n         CHECK(secp256k1_fe_cmp_var(&x, &z) != 0);\n         secp256k1_fe_cmov(&y, &x, 1);\n-        CHECK(secp256k1_fe_equal(&x, &y));\n+        CHECK(secp256k1_fe_equal_var(&x, &y));\n         /* Test that mul_int, mul, and add agree. */\n         secp256k1_fe_add(&y, &x);\n         secp256k1_fe_add(&y, &x);\n@@ -656,108 +778,148 @@ void run_sqrt(void) {\n \n /***** GROUP TESTS *****/\n \n-int ge_equals_ge(const secp256k1_ge_t *a, const secp256k1_ge_t *b) {\n-    if (a->infinity && b->infinity)\n-        return 1;\n-    return check_fe_equal(&a->x, &b->x) && check_fe_equal(&a->y, &b->y);\n+void ge_equals_ge(const secp256k1_ge_t *a, const secp256k1_ge_t *b) {\n+    CHECK(a->infinity == b->infinity);\n+    if (a->infinity)\n+        return;\n+    CHECK(secp256k1_fe_equal_var(&a->x, &b->x));\n+    CHECK(secp256k1_fe_equal_var(&b->y, &b->y));\n }\n \n void ge_equals_gej(const secp256k1_ge_t *a, const secp256k1_gej_t *b) {\n-    secp256k1_ge_t bb;\n-    secp256k1_gej_t bj = *b;\n-    secp256k1_ge_set_gej_var(&bb, &bj);\n-    CHECK(ge_equals_ge(a, &bb));\n-}\n-\n-void gej_equals_gej(const secp256k1_gej_t *a, const secp256k1_gej_t *b) {\n-    secp256k1_ge_t aa, bb;\n-    secp256k1_gej_t aj = *a, bj = *b;\n-    secp256k1_ge_set_gej_var(&aa, &aj);\n-    secp256k1_ge_set_gej_var(&bb, &bj);\n-    CHECK(ge_equals_ge(&aa, &bb));\n+    CHECK(a->infinity == b->infinity);\n+    if (a->infinity)\n+        return;\n+    /* Check a.x * b.z^2 == b.x && a.y * b.z^3 == b.y, to avoid inverses. */\n+    secp256k1_fe_t z2s;\n+    secp256k1_fe_sqr(&z2s, &b->z);\n+    secp256k1_fe_t u1, u2, s1, s2;\n+    secp256k1_fe_mul(&u1, &a->x, &z2s);\n+    u2 = b->x; secp256k1_fe_normalize_weak(&u2);\n+    secp256k1_fe_mul(&s1, &a->y, &z2s); secp256k1_fe_mul(&s1, &s1, &b->z);\n+    s2 = b->y; secp256k1_fe_normalize_weak(&s2);\n+    CHECK(secp256k1_fe_equal_var(&u1, &u2));\n+    CHECK(secp256k1_fe_equal_var(&s1, &s2));\n }\n \n void test_ge(void) {\n-    char ca[135];\n-    char cb[68];\n-    int rlen;\n-    secp256k1_ge_t a, b, i, n;\n-    random_group_element_test(&a);\n-    random_group_element_test(&b);\n-    rlen = sizeof(ca);\n-    secp256k1_ge_get_hex(ca,&rlen,&a);\n-    CHECK(rlen > 4 && rlen <= (int)sizeof(ca));\n-    rlen = sizeof(cb);\n-    secp256k1_ge_get_hex(cb,&rlen,&b); /* Intentionally undersized buffer. */\n-    n = a;\n-    secp256k1_fe_normalize(&a.y);\n-    secp256k1_fe_negate(&n.y, &a.y, 1);\n-    secp256k1_ge_set_infinity(&i);\n-    random_field_element_magnitude(&a.x);\n-    random_field_element_magnitude(&a.y);\n-    random_field_element_magnitude(&b.x);\n-    random_field_element_magnitude(&b.y);\n-    random_field_element_magnitude(&n.x);\n-    random_field_element_magnitude(&n.y);\n-\n-    secp256k1_gej_t aj, bj, ij, nj;\n-    random_group_element_jacobian_test(&aj, &a);\n-    random_group_element_jacobian_test(&bj, &b);\n-    secp256k1_gej_set_infinity(&ij);\n-    random_group_element_jacobian_test(&nj, &n);\n-    random_field_element_magnitude(&aj.x);\n-    random_field_element_magnitude(&aj.y);\n-    random_field_element_magnitude(&aj.z);\n-    random_field_element_magnitude(&bj.x);\n-    random_field_element_magnitude(&bj.y);\n-    random_field_element_magnitude(&bj.z);\n-    random_field_element_magnitude(&nj.x);\n-    random_field_element_magnitude(&nj.y);\n-    random_field_element_magnitude(&nj.z);\n-\n-    /* gej + gej adds */\n-    secp256k1_gej_t aaj; secp256k1_gej_add_var(&aaj, &aj, &aj);\n-    secp256k1_gej_t abj; secp256k1_gej_add_var(&abj, &aj, &bj);\n-    secp256k1_gej_t aij; secp256k1_gej_add_var(&aij, &aj, &ij);\n-    secp256k1_gej_t anj; secp256k1_gej_add_var(&anj, &aj, &nj);\n-    secp256k1_gej_t iaj; secp256k1_gej_add_var(&iaj, &ij, &aj);\n-    secp256k1_gej_t iij; secp256k1_gej_add_var(&iij, &ij, &ij);\n-\n-    /* gej + ge adds */\n-    secp256k1_gej_t aa; secp256k1_gej_add_ge_var(&aa, &aj, &a);\n-    secp256k1_gej_t ab; secp256k1_gej_add_ge_var(&ab, &aj, &b);\n-    secp256k1_gej_t ai; secp256k1_gej_add_ge_var(&ai, &aj, &i);\n-    secp256k1_gej_t an; secp256k1_gej_add_ge_var(&an, &aj, &n);\n-    secp256k1_gej_t ia; secp256k1_gej_add_ge_var(&ia, &ij, &a);\n-    secp256k1_gej_t ii; secp256k1_gej_add_ge_var(&ii, &ij, &i);\n-\n-    /* const gej + ge adds */\n-    secp256k1_gej_t aac; secp256k1_gej_add_ge(&aac, &aj, &a);\n-    secp256k1_gej_t abc; secp256k1_gej_add_ge(&abc, &aj, &b);\n-    secp256k1_gej_t anc; secp256k1_gej_add_ge(&anc, &aj, &n);\n-    secp256k1_gej_t iac; secp256k1_gej_add_ge(&iac, &ij, &a);\n-\n-    CHECK(secp256k1_gej_is_infinity(&an));\n-    CHECK(secp256k1_gej_is_infinity(&anj));\n-    CHECK(secp256k1_gej_is_infinity(&anc));\n-    gej_equals_gej(&aa, &aaj);\n-    gej_equals_gej(&aa, &aac);\n-    gej_equals_gej(&ab, &abj);\n-    gej_equals_gej(&ab, &abc);\n-    gej_equals_gej(&an, &anj);\n-    gej_equals_gej(&an, &anc);\n-    gej_equals_gej(&ia, &iaj);\n-    gej_equals_gej(&ai, &aij);\n-    gej_equals_gej(&ii, &iij);\n-    ge_equals_gej(&a, &ai);\n-    ge_equals_gej(&a, &ai);\n-    ge_equals_gej(&a, &iaj);\n-    ge_equals_gej(&a, &iaj);\n-    ge_equals_gej(&a, &iac);\n+    int runs = 4;\n+    /* Points: (infinity, p1, p1, -p1, -p1, p2, p2, -p2, -p2, p3, p3, -p3, -p3, p4, p4, -p4, -p4).\n+     * The second in each pair of identical points uses a random Z coordinate in the Jacobian form.\n+     * All magnitudes are randomized.\n+     * All 17*17 combinations of points are added to eachother, using all applicable methods.\n+     */\n+    secp256k1_ge_t *ge = malloc(sizeof(secp256k1_ge_t) * (1 + 4 * runs));\n+    secp256k1_gej_t *gej = malloc(sizeof(secp256k1_gej_t) * (1 + 4 * runs));\n+    secp256k1_gej_set_infinity(&gej[0]);\n+    secp256k1_ge_clear(&ge[0]);\n+    secp256k1_ge_set_gej_var(&ge[0], &gej[0]);\n+    for (int i = 0; i < runs; i++) {\n+        secp256k1_ge_t g;\n+        random_group_element_test(&g);\n+        ge[1 + 4 * i] = g;\n+        ge[2 + 4 * i] = g;\n+        secp256k1_ge_neg(&ge[3 + 4 * i], &g);\n+        secp256k1_ge_neg(&ge[4 + 4 * i], &g);\n+        secp256k1_gej_set_ge(&gej[1 + 4 * i], &ge[1 + 4 * i]);\n+        random_group_element_jacobian_test(&gej[2 + 4 * i], &ge[2 + 4 * i]);\n+        secp256k1_gej_set_ge(&gej[3 + 4 * i], &ge[3 + 4 * i]);\n+        random_group_element_jacobian_test(&gej[4 + 4 * i], &ge[4 + 4 * i]);\n+        for (int j = 0; j < 4; j++) {\n+            random_field_element_magnitude(&ge[1 + j + 4 * i].x);\n+            random_field_element_magnitude(&ge[1 + j + 4 * i].y);\n+            random_field_element_magnitude(&gej[1 + j + 4 * i].x);\n+            random_field_element_magnitude(&gej[1 + j + 4 * i].y);\n+            random_field_element_magnitude(&gej[1 + j + 4 * i].z);\n+        }\n+    }\n+\n+    for (int i1 = 0; i1 < 1 + 4 * runs; i1++) {\n+        for (int i2 = 0; i2 < 1 + 4 * runs; i2++) {\n+            /* Compute reference result using gej + gej (var). */\n+            secp256k1_gej_t refj, resj;\n+            secp256k1_ge_t ref;\n+            secp256k1_gej_add_var(&refj, &gej[i1], &gej[i2]);\n+            secp256k1_ge_set_gej_var(&ref, &refj);\n+\n+            /* Test gej + ge (var). */\n+            secp256k1_gej_add_ge_var(&resj, &gej[i1], &ge[i2]);\n+            ge_equals_gej(&ref, &resj);\n+\n+            /* Test gej + ge (const). */\n+            if (i2 != 0) {\n+                /* secp256k1_gej_add_ge does not support its second argument being infinity. */\n+                secp256k1_gej_add_ge(&resj, &gej[i1], &ge[i2]);\n+                ge_equals_gej(&ref, &resj);\n+            }\n+\n+            /* Test doubling (var). */\n+            if ((i1 == 0 && i2 == 0) || ((i1 + 3)/4 == (i2 + 3)/4 && ((i1 + 3)%4)/2 == ((i2 + 3)%4)/2)) {\n+                /* Normal doubling. */\n+                secp256k1_gej_double_var(&resj, &gej[i1]);\n+                ge_equals_gej(&ref, &resj);\n+                secp256k1_gej_double_var(&resj, &gej[i2]);\n+                ge_equals_gej(&ref, &resj);\n+            }\n+\n+            /* Test adding opposites. */\n+            if ((i1 == 0 && i2 == 0) || ((i1 + 3)/4 == (i2 + 3)/4 && ((i1 + 3)%4)/2 != ((i2 + 3)%4)/2)) {\n+                CHECK(secp256k1_ge_is_infinity(&ref));\n+            }\n+\n+            /* Test adding infinity. */\n+            if (i1 == 0) {\n+                CHECK(secp256k1_ge_is_infinity(&ge[i1]));\n+                CHECK(secp256k1_gej_is_infinity(&gej[i1]));\n+                ge_equals_gej(&ref, &gej[i2]);\n+            }\n+            if (i2 == 0) {\n+                CHECK(secp256k1_ge_is_infinity(&ge[i2]));\n+                CHECK(secp256k1_gej_is_infinity(&gej[i2]));\n+                ge_equals_gej(&ref, &gej[i1]);\n+            }\n+        }\n+    }\n+\n+    /* Test adding all points together in random order equals infinity. */\n+    {\n+        secp256k1_gej_t *gej_shuffled = malloc((4 * runs + 1) * sizeof(secp256k1_gej_t));\n+        for (int i = 0; i < 4 * runs + 1; i++) {\n+            gej_shuffled[i] = gej[i];\n+        }\n+        for (int i = 0; i < 4 * runs + 1; i++) {\n+            int swap = i + secp256k1_rand32() % (4 * runs + 1 - i);\n+            if (swap != i) {\n+                secp256k1_gej_t t = gej_shuffled[i];\n+                gej_shuffled[i] = gej_shuffled[swap];\n+                gej_shuffled[swap] = t;\n+            }\n+        }\n+        secp256k1_gej_t sum;\n+        secp256k1_gej_set_infinity(&sum);\n+        for (int i = 0; i < 4 * runs + 1; i++) {\n+            secp256k1_gej_add_var(&sum, &sum, &gej_shuffled[i]);\n+        }\n+        CHECK(secp256k1_gej_is_infinity(&sum));\n+        free(gej_shuffled);\n+    }\n+\n+    /* Test batch gej -> ge conversion. */\n+    {\n+        secp256k1_ge_t *ge_set_all = malloc((4 * runs + 1) * sizeof(secp256k1_ge_t));\n+        secp256k1_ge_set_all_gej_var(4 * runs + 1, ge_set_all, gej);\n+        for (int i = 0; i < 4 * runs + 1; i++) {\n+            ge_equals_gej(&ge_set_all[i], &gej[i]);\n+        }\n+        free(ge_set_all);\n+    }\n+\n+    free(ge);\n+    free(gej);\n }\n \n void run_ge(void) {\n-    for (int i = 0; i < 2000*count; i++) {\n+    for (int i = 0; i < count * 32; i++) {\n         test_ge();\n     }\n }\n@@ -949,6 +1111,44 @@ void run_ecdsa_sign_verify(void) {\n     }\n }\n \n+/** Dummy nonce generation function that just uses a precomputed nonce, and fails if it is not accepted. Use only for testing. */\n+static int precomputed_nonce_function(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, unsigned int counter, const void *data) {\n+    (void)msg32;\n+    (void)key32;\n+    memcpy(nonce32, data, 32);\n+    return (counter == 0);\n+}\n+\n+static int nonce_function_test_fail(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, unsigned int counter, const void *data) {\n+   /* Dummy nonce generator that has a fatal error on the first counter value. */\n+   if (counter == 0) return 0;\n+   return nonce_function_rfc6979(nonce32, msg32, key32, counter - 1, data);\n+}\n+\n+static int nonce_function_test_retry(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, unsigned int counter, const void *data) {\n+   /* Dummy nonce generator that produces unacceptable nonces for the first several counter values. */\n+   if (counter < 3) {\n+       memset(nonce32, counter==0 ? 0 : 255, 32);\n+       if (counter == 2) nonce32[31]--;\n+       return 1;\n+   }\n+   if (counter < 5) {\n+       static const unsigned char order[] = {\n+           0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n+           0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,\n+           0xBA,0xAE,0xDC,0xE6,0xAF,0x48,0xA0,0x3B,\n+           0xBF,0xD2,0x5E,0x8C,0xD0,0x36,0x41,0x41\n+       };\n+       memcpy(nonce32, order, 32);\n+       if (counter == 4) nonce32[31]++;\n+       return 1;\n+   }\n+   /* Retry rate of 6979 is negligible esp. as we only call this in determinstic tests. */\n+   /* If someone does fine a case where it retries for secp256k1, we'd like to know. */\n+   if (counter > 5) return 0;\n+   return nonce_function_rfc6979(nonce32, msg32, key32, counter - 5, data);\n+}\n+\n void test_ecdsa_end_to_end(void) {\n     unsigned char privkey[32];\n     unsigned char message[32];\n@@ -1006,13 +1206,7 @@ void test_ecdsa_end_to_end(void) {\n \n     /* Sign. */\n     unsigned char signature[72]; int signaturelen = 72;\n-    while(1) {\n-        unsigned char rnd[32];\n-        secp256k1_rand256_test(rnd);\n-        if (secp256k1_ecdsa_sign(message, signature, &signaturelen, privkey, rnd) == 1) {\n-            break;\n-        }\n-    }\n+    CHECK(secp256k1_ecdsa_sign(message, signature, &signaturelen, privkey, NULL, NULL) == 1);\n     /* Verify. */\n     CHECK(secp256k1_ecdsa_verify(message, signature, signaturelen, pubkey, pubkeylen) == 1);\n     /* Destroy signature and verify again. */\n@@ -1021,13 +1215,7 @@ void test_ecdsa_end_to_end(void) {\n \n     /* Compact sign. */\n     unsigned char csignature[64]; int recid = 0;\n-    while(1) {\n-        unsigned char rnd[32];\n-        secp256k1_rand256_test(rnd);\n-        if (secp256k1_ecdsa_sign_compact(message, csignature, privkey, rnd, &recid) == 1) {\n-            break;\n-        }\n-    }\n+    CHECK(secp256k1_ecdsa_sign_compact(message, csignature, privkey, NULL, NULL, &recid) == 1);\n     /* Recover. */\n     unsigned char recpubkey[65]; int recpubkeylen = 0;\n     CHECK(secp256k1_ecdsa_recover_compact(message, csignature, recpubkey, &recpubkeylen, pubkeylen == 33, recid) == 1);\n@@ -1077,7 +1265,7 @@ void test_random_pubkeys(void) {\n         CHECK(secp256k1_eckey_pubkey_serialize(&elem, in, &size, 0));\n         CHECK(size == 65);\n         CHECK(secp256k1_eckey_pubkey_parse(&elem2, in, size));\n-        CHECK(ge_equals_ge(&elem,&elem2));\n+        ge_equals_ge(&elem,&elem2);\n         /* Check that the X9.62 hybrid type is checked. */\n         in[0] = (r & 1) ? 6 : 7;\n         res = secp256k1_eckey_pubkey_parse(&elem2, in, size);\n@@ -1086,7 +1274,7 @@ void test_random_pubkeys(void) {\n             else CHECK(!res);\n         }\n         if (res) {\n-            CHECK(ge_equals_ge(&elem,&elem2));\n+            ge_equals_ge(&elem,&elem2);\n             CHECK(secp256k1_eckey_pubkey_serialize(&elem, out, &size, 0));\n             CHECK(memcmp(&in[1], &out[1], 64) == 0);\n         }\n@@ -1280,6 +1468,12 @@ void test_ecdsa_edge_cases(void) {\n             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n         };\n+        static const unsigned char nonce2[32] = {\n+            0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n+            0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,\n+            0xBA,0xAE,0xDC,0xE6,0xAF,0x48,0xA0,0x3B,\n+            0xBF,0xD2,0x5E,0x8C,0xD0,0x36,0x41,0x40\n+        };\n         const unsigned char key[32] = {\n             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n@@ -1294,10 +1488,74 @@ void test_ecdsa_edge_cases(void) {\n         };\n         unsigned char sig[72];\n         int siglen = 72;\n-        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, nonce) == 0);\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, precomputed_nonce_function, nonce) == 0);\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, precomputed_nonce_function, nonce2) == 0);\n         msg[31] = 0xaa;\n         siglen = 72;\n-        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, nonce) == 1);\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, precomputed_nonce_function, nonce) == 1);\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, precomputed_nonce_function, nonce2) == 1);\n+        siglen = 10;\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, precomputed_nonce_function, nonce) != 1);\n+    }\n+\n+    /* Nonce function corner cases. */\n+    {\n+        unsigned char key[32];\n+        unsigned char msg[32];\n+        unsigned char sig[72];\n+        memset(key, 0, 32);\n+        memset(msg, 0, 32);\n+        key[31] = 1;\n+        msg[31] = 1;\n+        int siglen = 72;\n+        int recid;\n+        /* Nonce function failure results in signature failure. */\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, nonce_function_test_fail, NULL) == 0);\n+        CHECK(secp256k1_ecdsa_sign_compact(msg, sig, key, nonce_function_test_fail, NULL, &recid) == 0);\n+        /* The retry loop successfully makes its way to the first good value. */\n+        unsigned char sig2[72];\n+        int siglen2 = 72;\n+        siglen = 72;\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, nonce_function_test_retry, NULL) == 1);\n+        CHECK(secp256k1_ecdsa_sign(msg, sig2, &siglen2, key, nonce_function_rfc6979, NULL) == 1);\n+        CHECK((siglen == siglen2) && (memcmp(sig, sig2, siglen) == 0));\n+        int recid2;\n+        CHECK(secp256k1_ecdsa_sign_compact(msg, sig, key, nonce_function_test_retry, NULL, &recid) == 1);\n+        CHECK(secp256k1_ecdsa_sign_compact(msg, sig2, key, nonce_function_rfc6979, NULL, &recid2) == 1);\n+        CHECK((recid == recid2) && (memcmp(sig, sig2, 64) == 0));\n+        /* The default nonce function is determinstic. */\n+        siglen = 72;\n+        siglen2 = 72;\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, NULL, NULL) == 1);\n+        CHECK(secp256k1_ecdsa_sign(msg, sig2, &siglen2, key, NULL, NULL) == 1);\n+        CHECK((siglen == siglen2) && (memcmp(sig, sig2, siglen) == 0));\n+        CHECK(secp256k1_ecdsa_sign_compact(msg, sig, key, NULL, NULL, &recid) == 1);\n+        CHECK(secp256k1_ecdsa_sign_compact(msg, sig2, key, NULL, NULL, &recid2) == 1);\n+        CHECK((recid == recid2) && (memcmp(sig, sig2, 64) == 0));\n+        /* The default nonce function changes output with different messages. */\n+        secp256k1_ecdsa_sig_t s[512];\n+        for(int i=0; i<256; i++) {\n+            siglen2 = 72;\n+            msg[0] = i;\n+            CHECK(secp256k1_ecdsa_sign(msg, sig2, &siglen2, key, NULL, NULL) == 1);\n+            CHECK(secp256k1_ecdsa_sig_parse(&s[i], sig2, siglen2));\n+            for (int j=0; j<i; j++) {\n+                CHECK(!secp256k1_scalar_eq(&s[i].r, &s[j].r));\n+            }\n+        }\n+        msg[0] = 0;\n+        msg[31] = 2;\n+        /* The default nonce function changes output with different keys. */\n+        for(int i=256; i<512; i++) {\n+            siglen2 = 72;\n+            key[0] = i - 256;\n+            CHECK(secp256k1_ecdsa_sign(msg, sig2, &siglen2, key, NULL, NULL) == 1);\n+            CHECK(secp256k1_ecdsa_sig_parse(&s[i], sig2, siglen2));\n+            for (int j=0; j<i; j++) {\n+                CHECK(!secp256k1_scalar_eq(&s[i].r, &s[j].r));\n+            }\n+        }\n+        key[0] = 0;\n     }\n \n     /* Privkey export where pubkey is the point at infinity. */\n@@ -1405,6 +1663,10 @@ int main(int argc, char **argv) {\n     secp256k1_scalar_start();\n     secp256k1_ecdsa_start();\n \n+    run_sha256_tests();\n+    run_hmac_sha256_tests();\n+    run_rfc6979_hmac_sha256_tests();\n+\n #ifndef USE_NUM_NONE\n     /* num tests */\n     run_num_smalltests();"
      },
      {
        "sha": "d5e595cd8ad65231ad3a007035ec895434b216a3",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 35,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -2,7 +2,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"crypto/rfc6979_hmac_sha256.h\"\n #include \"crypto/ripemd160.h\"\n #include \"crypto/sha1.h\"\n #include \"crypto/sha256.h\"\n@@ -248,38 +247,4 @@ BOOST_AUTO_TEST_CASE(hmac_sha512_testvectors) {\n                    \"b6022cac3c4982b10d5eeb55c3e4de15134676fb6de0446065c97440fa8c6a58\");\n }\n \n-void TestRFC6979(const std::string& hexkey, const std::string& hexmsg, const std::vector<std::string>& hexout)\n-{\n-    std::vector<unsigned char> key = ParseHex(hexkey);\n-    std::vector<unsigned char> msg = ParseHex(hexmsg);\n-    RFC6979_HMAC_SHA256 rng(&key[0], key.size(), &msg[0], msg.size());\n-\n-    for (unsigned int i = 0; i < hexout.size(); i++) {\n-        std::vector<unsigned char> out = ParseHex(hexout[i]);\n-        std::vector<unsigned char> gen;\n-        gen.resize(out.size());\n-        rng.Generate(&gen[0], gen.size());\n-        BOOST_CHECK(out == gen);\n-    }\n-}\n-\n-BOOST_AUTO_TEST_CASE(rfc6979_hmac_sha256)\n-{\n-    TestRFC6979(\n-        \"0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f00\",\n-        \"4bf5122f344554c53bde2ebb8cd2b7e3d1600ad631c385a5d7cce23c7785459a\",\n-        boost::assign::list_of\n-            (\"4fe29525b2086809159acdf0506efb86b0ec932c7ba44256ab321e421e67e9fb\")\n-            (\"2bf0fff1d3c378a22dc5de1d856522325c65b504491a0cbd01cb8f3aa67ffd4a\")\n-            (\"f528b410cb541f77000d7afb6c5b53c5c471eab43e466d9ac5190c39c82fd82e\"));\n-\n-    TestRFC6979(\n-        \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n-        \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\n-        boost::assign::list_of\n-            (\"9c236c165b82ae0cd590659e100b6bab3036e7ba8b06749baf6981e16f1a2b95\")\n-            (\"df471061625bc0ea14b682feee2c9c02f235da04204c1d62a1536c6e17aed7a9\")\n-            (\"7597887cbd76321f32e30440679a22cf7f8d9d2eac390e581fea091ce202ba94\"));\n-}\n-\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "4401b2d7c52e0f3841225369fb0d10767c51aaa2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDAxYjJkN2M1MmUwZjM4NDEyMjUzNjlmYjBkMTA3NjdjNTFhYWEy",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2014-10-19T08:46:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-28T06:41:54Z"
      },
      "message": "Removed main.h dependency from rpcserver.cpp\n\nRebased by @laanwj:\n\n- update for RPC methods added since 84d13ee: setmocktime,\n  invalidateblock, reconsiderblock. Only the first, setmocktime, required a change,\n  the other two are thread safe.",
      "tree": {
        "sha": "29b0b989569f1a16cba69c287a30e0db220343b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29b0b989569f1a16cba69c287a30e0db220343b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4401b2d7c52e0f3841225369fb0d10767c51aaa2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4401b2d7c52e0f3841225369fb0d10767c51aaa2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4401b2d7c52e0f3841225369fb0d10767c51aaa2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4401b2d7c52e0f3841225369fb0d10767c51aaa2/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b5f5294bba0448c0349ad41cd0e7e107a500b9d"
      }
    ],
    "stats": {
      "total": 262,
      "additions": 224,
      "deletions": 38
    },
    "files": [
      {
        "sha": "7054264c0bbf1778ddf8ecd0c860a5304cac7248",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -234,6 +234,26 @@ bool static Bind(const CService &addr, unsigned int flags) {\n     return true;\n }\n \n+void OnRPCStopped()\n+{\n+    cvBlockChange.notify_all();\n+    LogPrint(\"rpc\", \"RPC stopped.\\n\");\n+}\n+\n+void OnRPCPreCommand(const CRPCCommand& cmd)\n+{\n+#ifdef ENABLE_WALLET\n+    if (cmd.reqWallet && !pwalletMain)\n+        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found (disabled)\");\n+#endif\n+\n+    // Observe safe mode\n+    string strWarning = GetWarnings(\"rpc\");\n+    if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\", false) &&\n+        !cmd.okSafeMode)\n+        throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, string(\"Safe mode: \") + strWarning);\n+}\n+\n std::string HelpMessage(HelpMessageMode mode)\n {\n     // When adding new options to the categories, please keep and ensure alphabetical ordering.\n@@ -802,6 +822,8 @@ bool AppInit2(boost::thread_group& threadGroup)\n     if (fServer)\n     {\n         uiInterface.InitMessage.connect(SetRPCWarmupStatus);\n+        RPCServer::OnStopped(&OnRPCStopped);\n+        RPCServer::OnPreCommand(&OnRPCPreCommand);\n         StartRPCThreads();\n     }\n "
      },
      {
        "sha": "293d6d5619a2325bfba31b077c226e4c3e8aaf82",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -105,6 +105,7 @@ Value getblockcount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getblockcount\", \"\")\n         );\n \n+    LOCK(cs_main);\n     return chainActive.Height();\n }\n \n@@ -121,6 +122,7 @@ Value getbestblockhash(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getbestblockhash\", \"\")\n         );\n \n+    LOCK(cs_main);\n     return chainActive.Tip()->GetBlockHash().GetHex();\n }\n \n@@ -137,6 +139,7 @@ Value getdifficulty(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getdifficulty\", \"\")\n         );\n \n+    LOCK(cs_main);\n     return GetDifficulty();\n }\n \n@@ -173,6 +176,8 @@ Value getrawmempool(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getrawmempool\", \"true\")\n         );\n \n+    LOCK(cs_main);\n+\n     bool fVerbose = false;\n     if (params.size() > 0)\n         fVerbose = params[0].get_bool();\n@@ -233,6 +238,8 @@ Value getblockhash(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getblockhash\", \"1000\")\n         );\n \n+    LOCK(cs_main);\n+\n     int nHeight = params[0].get_int();\n     if (nHeight < 0 || nHeight > chainActive.Height())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block height out of range\");\n@@ -277,6 +284,8 @@ Value getblock(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n         );\n \n+    LOCK(cs_main);\n+\n     std::string strHash = params[0].get_str();\n     uint256 hash(uint256S(strHash));\n \n@@ -326,6 +335,8 @@ Value gettxoutsetinfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"gettxoutsetinfo\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     Object ret;\n \n     CCoinsStats stats;\n@@ -380,6 +391,8 @@ Value gettxout(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"gettxout\", \"\\\"txid\\\", 1\")\n         );\n \n+    LOCK(cs_main);\n+\n     Object ret;\n \n     std::string strHash = params[0].get_str();\n@@ -436,6 +449,8 @@ Value verifychain(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"verifychain\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     int nCheckLevel = GetArg(\"-checklevel\", 3);\n     int nCheckDepth = GetArg(\"-checkblocks\", 288);\n     if (params.size() > 0)\n@@ -467,6 +482,8 @@ Value getblockchaininfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getblockchaininfo\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     Object obj;\n     obj.push_back(Pair(\"chain\",                 Params().NetworkIDString()));\n     obj.push_back(Pair(\"blocks\",                (int)chainActive.Height()));\n@@ -526,6 +543,8 @@ Value getchaintips(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getchaintips\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     /* Build up a list of chain tips.  We start with the list of all\n        known blocks, and successively remove blocks that appear as pprev\n        of another block.  */"
      },
      {
        "sha": "b9c92a06c5deb2e8696019a51d0d29fa69a41c95",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -91,6 +91,8 @@ Value importprivkey(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"importprivkey\", \"\\\"mykey\\\", \\\"testing\\\", false\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     EnsureWalletIsUnlocked();\n \n     string strSecret = params[0].get_str();\n@@ -158,6 +160,8 @@ Value importaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"importaddress\", \"\\\"myaddress\\\", \\\"testing\\\", false\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     CScript script;\n \n     CBitcoinAddress address(params[0].get_str());\n@@ -223,6 +227,8 @@ Value importwallet(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"importwallet\", \"\\\"test\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     EnsureWalletIsUnlocked();\n \n     ifstream file;\n@@ -322,6 +328,8 @@ Value dumpprivkey(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"dumpprivkey\", \"\\\"myaddress\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     EnsureWalletIsUnlocked();\n \n     string strAddress = params[0].get_str();\n@@ -351,6 +359,8 @@ Value dumpwallet(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"dumpwallet\", \"\\\"test\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     EnsureWalletIsUnlocked();\n \n     ofstream file;"
      },
      {
        "sha": "369b3fb4d7872639d305033b3bacdacf10f78230",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -88,6 +88,7 @@ Value getnetworkhashps(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getnetworkhashps\", \"\")\n        );\n \n+    LOCK(cs_main);\n     return GetNetworkHashPS(params.size() > 0 ? params[0].get_int() : 120, params.size() > 1 ? params[1].get_int() : -1);\n }\n \n@@ -107,6 +108,7 @@ Value getgenerate(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getgenerate\", \"\")\n         );\n \n+    LOCK(cs_main);\n     return GetBoolArg(\"-gen\", false);\n }\n \n@@ -200,7 +202,6 @@ Value setgenerate(const Array& params, bool fHelp)\n \n     return Value::null;\n }\n-\n #endif\n \n \n@@ -228,6 +229,9 @@ Value getmininginfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getmininginfo\", \"\")\n         );\n \n+\n+    LOCK(cs_main);\n+\n     Object obj;\n     obj.push_back(Pair(\"blocks\",           (int)chainActive.Height()));\n     obj.push_back(Pair(\"currentblocksize\", (uint64_t)nLastBlockSize));\n@@ -268,8 +272,9 @@ Value prioritisetransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"prioritisetransaction\", \"\\\"txid\\\", 0.0, 10000\")\n         );\n \n-    uint256 hash = ParseHashStr(params[0].get_str(), \"txid\");\n+    LOCK(cs_main);\n \n+    uint256 hash = ParseHashStr(params[0].get_str(), \"txid\");\n     CAmount nAmount = params[2].get_int64();\n \n     mempool.PrioritiseTransaction(hash, params[0].get_str(), params[1].get_real(), nAmount);\n@@ -358,6 +363,8 @@ Value getblocktemplate(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getblocktemplate\", \"\")\n          );\n \n+    LOCK(cs_main);\n+\n     std::string strMode = \"template\";\n     Value lpval = Value::null;\n     if (params.size() > 0)"
      },
      {
        "sha": "8d260b1cc9b0cc657f3e1990ae0b82aad9dbbfcb",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -69,6 +69,12 @@ Value getinfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getinfo\", \"\")\n         );\n \n+#ifdef ENABLE_WALLET\n+    LOCK2(cs_main, pwalletMain ? &pwalletMain->cs_wallet : NULL);\n+#else\n+    LOCK(cs_main);\n+#endif\n+\n     proxyType proxy;\n     GetProxy(NET_IPV4, proxy);\n \n@@ -172,6 +178,12 @@ Value validateaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n         );\n \n+#ifdef ENABLE_WALLET\n+    LOCK2(cs_main, pwalletMain ? &pwalletMain->cs_wallet : NULL);\n+#else\n+    LOCK(cs_main);\n+#endif\n+\n     CBitcoinAddress address(params[0].get_str());\n     bool isValid = address.IsValid();\n \n@@ -329,6 +341,8 @@ Value verifymessage(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"signature\\\", \\\"my message\\\"\")\n         );\n \n+    LOCK(cs_main);\n+\n     string strAddress  = params[0].get_str();\n     string strSign     = params[1].get_str();\n     string strMessage  = params[2].get_str();\n@@ -372,6 +386,8 @@ Value setmocktime(const Array& params, bool fHelp)\n     if (!Params().MineBlocksOnDemand())\n         throw runtime_error(\"setmocktime for regression testing (-regtest mode) only\");\n \n+    LOCK(cs_main);\n+\n     RPCTypeCheck(params, boost::assign::list_of(int_type));\n     SetMockTime(params[0].get_int64());\n "
      },
      {
        "sha": "6306fd4406051fca36646e28ffd79c9796c791ef",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -34,7 +34,8 @@ Value getconnectioncount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getconnectioncount\", \"\")\n         );\n \n-    LOCK(cs_vNodes);\n+    LOCK2(cs_main, cs_vNodes);\n+\n     return (int)vNodes.size();\n }\n \n@@ -52,7 +53,8 @@ Value ping(const Array& params, bool fHelp)\n         );\n \n     // Request that each node send a ping during next message processing pass\n-    LOCK(cs_vNodes);\n+    LOCK2(cs_main, cs_vNodes);\n+\n     BOOST_FOREACH(CNode* pNode, vNodes) {\n         pNode->fPingQueued = true;\n     }\n@@ -113,6 +115,8 @@ Value getpeerinfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getpeerinfo\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     vector<CNodeStats> vstats;\n     CopyNodeStats(vstats);\n \n@@ -411,6 +415,8 @@ Value getnetworkinfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getnetworkinfo\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     Object obj;\n     obj.push_back(Pair(\"version\",       CLIENT_VERSION));\n     obj.push_back(Pair(\"subversion\","
      },
      {
        "sha": "0859c0e6113fb5dd7df647a65839414cef2cbd9e",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -169,6 +169,8 @@ Value getrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getrawtransaction\", \"\\\"mytxid\\\", 1\")\n         );\n \n+    LOCK(cs_main);\n+\n     uint256 hash = ParseHashV(params[0], \"parameter 1\");\n \n     bool fVerbose = false;\n@@ -256,6 +258,7 @@ Value listunspent(const Array& params, bool fHelp)\n     Array results;\n     vector<COutput> vecOutputs;\n     assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n     pwalletMain->AvailableCoins(vecOutputs, false);\n     BOOST_FOREACH(const COutput& out, vecOutputs) {\n         if (out.nDepth < nMinDepth || out.nDepth > nMaxDepth)\n@@ -334,6 +337,7 @@ Value createrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"{\\\\\\\"address\\\\\\\":0.01}\\\"\")\n         );\n \n+    LOCK(cs_main);\n     RPCTypeCheck(params, boost::assign::list_of(array_type)(obj_type));\n \n     Array inputs = params[0].get_array();\n@@ -428,6 +432,7 @@ Value decoderawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"decoderawtransaction\", \"\\\"hexstring\\\"\")\n         );\n \n+    LOCK(cs_main);\n     RPCTypeCheck(params, boost::assign::list_of(str_type));\n \n     CTransaction tx;\n@@ -466,6 +471,7 @@ Value decodescript(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"decodescript\", \"\\\"hexstring\\\"\")\n         );\n \n+    LOCK(cs_main);\n     RPCTypeCheck(params, boost::assign::list_of(str_type));\n \n     Object r;\n@@ -532,6 +538,11 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n         );\n \n+#ifdef ENABLE_WALLET\n+    LOCK2(cs_main, pwalletMain ? &pwalletMain->cs_wallet : NULL);\n+#else\n+    LOCK(cs_main);\n+#endif\n     RPCTypeCheck(params, boost::assign::list_of(str_type)(array_type)(array_type)(str_type), true);\n \n     vector<unsigned char> txData(ParseHexV(params[0], \"argument 1\"));\n@@ -591,7 +602,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         }\n     }\n #ifdef ENABLE_WALLET\n-    else\n+    else if (pwalletMain)\n         EnsureWalletIsUnlocked();\n #endif\n \n@@ -722,6 +733,7 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"sendrawtransaction\", \"\\\"signedhex\\\"\")\n         );\n \n+    LOCK(cs_main);\n     RPCTypeCheck(params, boost::assign::list_of(str_type)(bool_type));\n \n     // parse hex string from parameter"
      },
      {
        "sha": "f5f8bb22a266f0f52dac70043486466e8b0cd625",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 31,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -7,9 +7,11 @@\n \n #include \"base58.h\"\n #include \"init.h\"\n-#include \"main.h\"\n+#include \"random.h\"\n+#include \"sync.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet.h\"\n #endif\n@@ -23,11 +25,13 @@\n #include <boost/iostreams/concepts.hpp>\n #include <boost/iostreams/stream.hpp>\n #include <boost/shared_ptr.hpp>\n+#include <boost/signals2/signal.hpp>\n #include <boost/thread.hpp>\n #include \"json/json_spirit_writer_template.h\"\n \n using namespace boost::asio;\n using namespace json_spirit;\n+using namespace RPCServer;\n using namespace std;\n \n static std::string strRPCUserColonPass;\n@@ -46,6 +50,34 @@ static boost::asio::io_service::work *rpc_dummy_work = NULL;\n static std::vector<CSubNet> rpc_allow_subnets; //!< List of subnets to allow RPC connections from\n static std::vector< boost::shared_ptr<ip::tcp::acceptor> > rpc_acceptors;\n \n+static struct CRPCSignals\n+{\n+    boost::signals2::signal<void ()> Started;\n+    boost::signals2::signal<void ()> Stopped;\n+    boost::signals2::signal<void (const CRPCCommand&)> PreCommand;\n+    boost::signals2::signal<void (const CRPCCommand&)> PostCommand;\n+} g_rpcSignals;\n+\n+void RPCServer::OnStarted(boost::function<void ()> slot)\n+{\n+    g_rpcSignals.Started.connect(slot);\n+}\n+\n+void RPCServer::OnStopped(boost::function<void ()> slot)\n+{\n+    g_rpcSignals.Stopped.connect(slot);\n+}\n+\n+void RPCServer::OnPreCommand(boost::function<void (const CRPCCommand&)> slot)\n+{\n+    g_rpcSignals.PreCommand.connect(boost::bind(slot, _1));\n+}\n+\n+void RPCServer::OnPostCommand(boost::function<void (const CRPCCommand&)> slot)\n+{\n+    g_rpcSignals.PostCommand.connect(boost::bind(slot, _1));\n+}\n+\n void RPCTypeCheck(const Array& params,\n                   const list<Value_type>& typesExpected,\n                   bool fAllowNull)\n@@ -693,6 +725,7 @@ void StartRPCThreads()\n     for (int i = 0; i < GetArg(\"-rpcthreads\", 4); i++)\n         rpc_worker_group->create_thread(boost::bind(&boost::asio::io_service::run, rpc_io_service));\n     fRPCRunning = true;\n+    g_rpcSignals.Started();\n }\n \n void StartDummyRPCThread()\n@@ -735,7 +768,7 @@ void StopRPCThreads()\n     deadlineTimers.clear();\n \n     rpc_io_service->stop();\n-    cvBlockChange.notify_all();\n+    g_rpcSignals.Stopped();\n     if (rpc_worker_group != NULL)\n         rpc_worker_group->join_all();\n     delete rpc_dummy_work; rpc_dummy_work = NULL;\n@@ -978,45 +1011,20 @@ json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_s\n     const CRPCCommand *pcmd = tableRPC[strMethod];\n     if (!pcmd)\n         throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found\");\n-#ifdef ENABLE_WALLET\n-    if (pcmd->reqWallet && !pwalletMain)\n-        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found (disabled)\");\n-#endif\n \n-    // Observe safe mode\n-    string strWarning = GetWarnings(\"rpc\");\n-    if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\", false) &&\n-        !pcmd->okSafeMode)\n-        throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, string(\"Safe mode: \") + strWarning);\n+    g_rpcSignals.PreCommand(*pcmd);\n \n     try\n     {\n         // Execute\n-        Value result;\n-        {\n-            if (pcmd->threadSafe)\n-                result = pcmd->actor(params, false);\n-#ifdef ENABLE_WALLET\n-            else if (!pwalletMain) {\n-                LOCK(cs_main);\n-                result = pcmd->actor(params, false);\n-            } else {\n-                LOCK2(cs_main, pwalletMain->cs_wallet);\n-                result = pcmd->actor(params, false);\n-            }\n-#else // ENABLE_WALLET\n-            else {\n-                LOCK(cs_main);\n-                result = pcmd->actor(params, false);\n-            }\n-#endif // !ENABLE_WALLET\n-        }\n-        return result;\n+        return pcmd->actor(params, false);\n     }\n     catch (const std::exception& e)\n     {\n         throw JSONRPCError(RPC_MISC_ERROR, e.what());\n     }\n+\n+    g_rpcSignals.PostCommand(*pcmd);\n }\n \n std::string HelpExampleCli(string methodname, string args){"
      },
      {
        "sha": "41cd9da160e94f33000f4b0c8fcdb0b7b73dc660",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -19,6 +19,16 @@\n #include \"json/json_spirit_utils.h\"\n #include \"json/json_spirit_writer_template.h\"\n \n+class CRPCCommand;\n+\n+namespace RPCServer\n+{\n+    void OnStarted(boost::function<void ()> slot);\n+    void OnStopped(boost::function<void ()> slot);\n+    void OnPreCommand(boost::function<void (const CRPCCommand&)> slot);\n+    void OnPostCommand(boost::function<void (const CRPCCommand&)> slot);\n+}\n+\n class CBlockIndex;\n class CNetAddr;\n "
      },
      {
        "sha": "338b648503f3cea9a07ed21a8ab151fc3e663cc6",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 67,
        "deletions": 2,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -90,6 +90,8 @@ Value getnewaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getnewaddress\", \"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     // Parse the account first so we don't generate a key if there's an error\n     string strAccount;\n     if (params.size() > 0)\n@@ -164,13 +166,14 @@ Value getaccountaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getaccountaddress\", \"\\\"myaccount\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     // Parse the account first so we don't generate a key if there's an error\n     string strAccount = AccountFromValue(params[0]);\n \n     Value ret;\n \n     ret = GetAccountAddress(strAccount).ToString();\n-\n     return ret;\n }\n \n@@ -189,6 +192,8 @@ Value getrawchangeaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getrawchangeaddress\", \"\")\n        );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (!pwalletMain->IsLocked())\n         pwalletMain->TopUpKeyPool();\n \n@@ -219,11 +224,12 @@ Value setaccount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"setaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"tabby\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n-\n     string strAccount;\n     if (params.size() > 1)\n         strAccount = AccountFromValue(params[1]);\n@@ -262,6 +268,8 @@ Value getaccount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n@@ -292,6 +300,8 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getaddressesbyaccount\", \"\\\"tabby\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strAccount = AccountFromValue(params[0]);\n \n     // Find all addresses that have the given account\n@@ -363,6 +373,8 @@ Value sendtoaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\", 0.1, \\\"donation\\\", \\\"seans outpost\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n@@ -409,6 +421,8 @@ Value listaddressgroupings(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listaddressgroupings\", \"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     Array jsonGroupings;\n     map<CTxDestination, CAmount> balances = pwalletMain->GetAddressBalances();\n     BOOST_FOREACH(set<CTxDestination> grouping, pwalletMain->GetAddressGroupings())\n@@ -454,6 +468,8 @@ Value signmessage(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"my message\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     EnsureWalletIsUnlocked();\n \n     string strAddress = params[0].get_str();\n@@ -504,6 +520,8 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", 6\")\n        );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     // Bitcoin address\n     CBitcoinAddress address = CBitcoinAddress(params[0].get_str());\n     if (!address.IsValid())\n@@ -557,6 +575,8 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getreceivedbyaccount\", \"\\\"tabby\\\", 6\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     // Minimum confirmations\n     int nMinDepth = 1;\n     if (params.size() > 1)\n@@ -643,6 +663,8 @@ Value getbalance(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getbalance\", \"\\\"*\\\", 6\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (params.size() == 0)\n         return  ValueFromAmount(pwalletMain->GetBalance());\n \n@@ -695,6 +717,9 @@ Value getunconfirmedbalance(const Array &params, bool fHelp)\n         throw runtime_error(\n                 \"getunconfirmedbalance\\n\"\n                 \"Returns the server's total unconfirmed balance\\n\");\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     return ValueFromAmount(pwalletMain->GetUnconfirmedBalance());\n }\n \n@@ -721,6 +746,8 @@ Value movecmd(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"move\", \"\\\"timotei\\\", \\\"akiko\\\", 0.01, 6, \\\"happy birthday!\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strFrom = AccountFromValue(params[0]);\n     string strTo = AccountFromValue(params[1]);\n     CAmount nAmount = AmountFromValue(params[2]);\n@@ -793,6 +820,8 @@ Value sendfrom(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"sendfrom\", \"\\\"tabby\\\", \\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\", 0.01, 6, \\\"donation\\\", \\\"seans outpost\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strAccount = AccountFromValue(params[0]);\n     CBitcoinAddress address(params[1].get_str());\n     if (!address.IsValid())\n@@ -850,6 +879,8 @@ Value sendmany(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"sendmany\", \"\\\"\\\", \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\", 6, \\\"testing\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strAccount = AccountFromValue(params[0]);\n     Object sendTo = params[1].get_obj();\n     int nMinDepth = 1;\n@@ -935,6 +966,8 @@ Value addmultisigaddress(const Array& params, bool fHelp)\n         throw runtime_error(msg);\n     }\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strAccount;\n     if (params.size() > 2)\n         strAccount = AccountFromValue(params[2]);\n@@ -1110,6 +1143,8 @@ Value listreceivedbyaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listreceivedbyaddress\", \"6, true, true\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     return ListReceived(params, false);\n }\n \n@@ -1141,6 +1176,8 @@ Value listreceivedbyaccount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listreceivedbyaccount\", \"6, true, true\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     return ListReceived(params, true);\n }\n \n@@ -1292,6 +1329,8 @@ Value listtransactions(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listtransactions\", \"\\\"*\\\", 20, 100\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strAccount = \"*\";\n     if (params.size() > 0)\n         strAccount = params[0].get_str();\n@@ -1372,6 +1411,8 @@ Value listaccounts(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listaccounts\", \"6\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     int nMinDepth = 1;\n     if (params.size() > 0)\n         nMinDepth = params[0].get_int();\n@@ -1460,6 +1501,8 @@ Value listsinceblock(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listsinceblock\", \"\\\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\\\", 6\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     CBlockIndex *pindex = NULL;\n     int target_confirms = 1;\n     isminefilter filter = ISMINE_SPENDABLE;\n@@ -1546,6 +1589,8 @@ Value gettransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     uint256 hash;\n     hash.SetHex(params[0].get_str());\n \n@@ -1594,6 +1639,8 @@ Value backupwallet(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"backupwallet\", \"\\\"backup.dat\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strDest = params[0].get_str();\n     if (!BackupWallet(*pwalletMain, strDest))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Wallet backup failed!\");\n@@ -1616,6 +1663,8 @@ Value keypoolrefill(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"keypoolrefill\", \"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     // 0 is interpreted by TopUpKeyPool() as the default keypool size given by -keypool\n     unsigned int kpSize = 0;\n     if (params.size() > 0) {\n@@ -1663,6 +1712,8 @@ Value walletpassphrase(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"walletpassphrase\", \"\\\"my pass phrase\\\", 60\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n@@ -1710,6 +1761,8 @@ Value walletpassphrasechange(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"walletpassphrasechange\", \"\\\"old one\\\", \\\"new one\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n@@ -1756,6 +1809,8 @@ Value walletlock(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"walletlock\", \"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n@@ -1797,6 +1852,8 @@ Value encryptwallet(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"encryptwallet\", \"\\\"my pass phrase\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (fHelp)\n         return true;\n     if (pwalletMain->IsCrypted())\n@@ -1861,6 +1918,8 @@ Value lockunspent(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"lockunspent\", \"false, \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (params.size() == 1)\n         RPCTypeCheck(params, boost::assign::list_of(bool_type));\n     else\n@@ -1930,6 +1989,8 @@ Value listlockunspent(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listlockunspent\", \"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     vector<COutPoint> vOutpts;\n     pwalletMain->ListLockedCoins(vOutpts);\n \n@@ -1961,6 +2022,8 @@ Value settxfee(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"settxfee\", \"0.00001\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     // Amount\n     CAmount nAmount = 0;\n     if (params[0].get_real() != 0.0)\n@@ -1992,6 +2055,8 @@ Value getwalletinfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getwalletinfo\", \"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     Object obj;\n     obj.push_back(Pair(\"walletversion\", pwalletMain->GetVersion()));\n     obj.push_back(Pair(\"balance\",       ValueFromAmount(pwalletMain->GetBalance())));"
      },
      {
        "sha": "27e80e813b77ca0754d8e2a8165a35ffb97d6fe5",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -142,6 +142,17 @@ class CMutexLock\n             Enter(pszName, pszFile, nLine);\n     }\n \n+    CMutexLock(Mutex* pmutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false)\n+    {\n+        if (!pmutexIn) return;\n+\n+        lock = boost::unique_lock<Mutex>(*pmutexIn, boost::defer_lock);\n+        if (fTry)\n+            TryEnter(pszName, pszFile, nLine);\n+        else\n+            Enter(pszName, pszFile, nLine);\n+    }\n+\n     ~CMutexLock()\n     {\n         if (lock.owns_lock())"
      }
    ]
  },
  {
    "sha": "5ebe0956b391cfa782fd97bb417d20b479df6a36",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZWJlMDk1NmIzOTFjZmE3ODJmZDk3YmI0MTdkMjBiNDc5ZGY2YTM2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T12:52:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-28T06:41:54Z"
      },
      "message": "Trim RPC command table\n\n- invalidateblock and reconsiderblock were defined doubly\n- remove no-longer-used threadSafe, as locks have been pushed down",
      "tree": {
        "sha": "3307c1727409243c0707c51700d792097970b2e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3307c1727409243c0707c51700d792097970b2e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ebe0956b391cfa782fd97bb417d20b479df6a36",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ebe0956b391cfa782fd97bb417d20b479df6a36",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ebe0956b391cfa782fd97bb417d20b479df6a36",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ebe0956b391cfa782fd97bb417d20b479df6a36/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4401b2d7c52e0f3841225369fb0d10767c51aaa2"
      }
    ],
    "stats": {
      "total": 171,
      "additions": 84,
      "deletions": 87
    },
    "files": [
      {
        "sha": "823b1fcf240b3e41e967c0f68c48bb430fec4e3d",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 84,
        "deletions": 86,
        "changes": 170,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ebe0956b391cfa782fd97bb417d20b479df6a36/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ebe0956b391cfa782fd97bb417d20b479df6a36/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=5ebe0956b391cfa782fd97bb417d20b479df6a36",
        "patch": "@@ -271,112 +271,110 @@ Value stop(const Array& params, bool fHelp)\n  * Call Table\n  */\n static const CRPCCommand vRPCCommands[] =\n-{ //  category              name                      actor (function)         okSafeMode threadSafe reqWallet\n-  //  --------------------- ------------------------  -----------------------  ---------- ---------- ---------\n+{ //  category              name                      actor (function)         okSafeMode reqWallet\n+  //  --------------------- ------------------------  -----------------------  ---------- ---------\n     /* Overall control/query calls */\n-    { \"control\",            \"getinfo\",                &getinfo,                true,      false,      false }, /* uses wallet if enabled */\n-    { \"control\",            \"help\",                   &help,                   true,      true,       false },\n-    { \"control\",            \"stop\",                   &stop,                   true,      true,       false },\n+    { \"control\",            \"getinfo\",                &getinfo,                true,      false }, /* uses wallet if enabled */\n+    { \"control\",            \"help\",                   &help,                   true,      false },\n+    { \"control\",            \"stop\",                   &stop,                   true,      false },\n \n     /* P2P networking */\n-    { \"network\",            \"getnetworkinfo\",         &getnetworkinfo,         true,      false,      false },\n-    { \"network\",            \"addnode\",                &addnode,                true,      true,       false },\n-    { \"network\",            \"getaddednodeinfo\",       &getaddednodeinfo,       true,      true,       false },\n-    { \"network\",            \"getconnectioncount\",     &getconnectioncount,     true,      false,      false },\n-    { \"network\",            \"getnettotals\",           &getnettotals,           true,      true,       false },\n-    { \"network\",            \"getpeerinfo\",            &getpeerinfo,            true,      false,      false },\n-    { \"network\",            \"ping\",                   &ping,                   true,      false,      false },\n+    { \"network\",            \"getnetworkinfo\",         &getnetworkinfo,         true,      false },\n+    { \"network\",            \"addnode\",                &addnode,                true,      false },\n+    { \"network\",            \"getaddednodeinfo\",       &getaddednodeinfo,       true,      false },\n+    { \"network\",            \"getconnectioncount\",     &getconnectioncount,     true,      false },\n+    { \"network\",            \"getnettotals\",           &getnettotals,           true,      false },\n+    { \"network\",            \"getpeerinfo\",            &getpeerinfo,            true,      false },\n+    { \"network\",            \"ping\",                   &ping,                   true,      false },\n \n     /* Block chain and UTXO */\n-    { \"blockchain\",         \"getblockchaininfo\",      &getblockchaininfo,      true,      false,      false },\n-    { \"blockchain\",         \"getbestblockhash\",       &getbestblockhash,       true,      false,      false },\n-    { \"blockchain\",         \"getblockcount\",          &getblockcount,          true,      false,      false },\n-    { \"blockchain\",         \"getblock\",               &getblock,               true,      false,      false },\n-    { \"blockchain\",         \"getblockhash\",           &getblockhash,           true,      false,      false },\n-    { \"blockchain\",         \"getchaintips\",           &getchaintips,           true,      false,      false },\n-    { \"blockchain\",         \"getdifficulty\",          &getdifficulty,          true,      false,      false },\n-    { \"blockchain\",         \"getmempoolinfo\",         &getmempoolinfo,         true,      true,       false },\n-    { \"blockchain\",         \"getrawmempool\",          &getrawmempool,          true,      false,      false },\n-    { \"blockchain\",         \"gettxout\",               &gettxout,               true,      false,      false },\n-    { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        true,      false,      false },\n-    { \"blockchain\",         \"verifychain\",            &verifychain,            true,      false,      false },\n-    { \"blockchain\",         \"invalidateblock\",        &invalidateblock,        true,      true,       false },\n-    { \"blockchain\",         \"reconsiderblock\",        &reconsiderblock,        true,      true,       false },\n+    { \"blockchain\",         \"getblockchaininfo\",      &getblockchaininfo,      true,      false },\n+    { \"blockchain\",         \"getbestblockhash\",       &getbestblockhash,       true,      false },\n+    { \"blockchain\",         \"getblockcount\",          &getblockcount,          true,      false },\n+    { \"blockchain\",         \"getblock\",               &getblock,               true,      false },\n+    { \"blockchain\",         \"getblockhash\",           &getblockhash,           true,      false },\n+    { \"blockchain\",         \"getchaintips\",           &getchaintips,           true,      false },\n+    { \"blockchain\",         \"getdifficulty\",          &getdifficulty,          true,      false },\n+    { \"blockchain\",         \"getmempoolinfo\",         &getmempoolinfo,         true,      false },\n+    { \"blockchain\",         \"getrawmempool\",          &getrawmempool,          true,      false },\n+    { \"blockchain\",         \"gettxout\",               &gettxout,               true,      false },\n+    { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        true,      false },\n+    { \"blockchain\",         \"verifychain\",            &verifychain,            true,      false },\n \n     /* Mining */\n-    { \"mining\",             \"getblocktemplate\",       &getblocktemplate,       true,      false,      false },\n-    { \"mining\",             \"getmininginfo\",          &getmininginfo,          true,      false,      false },\n-    { \"mining\",             \"getnetworkhashps\",       &getnetworkhashps,       true,      false,      false },\n-    { \"mining\",             \"prioritisetransaction\",  &prioritisetransaction,  true,      false,      false },\n-    { \"mining\",             \"submitblock\",            &submitblock,            true,      true,       false },\n+    { \"mining\",             \"getblocktemplate\",       &getblocktemplate,       true,      false },\n+    { \"mining\",             \"getmininginfo\",          &getmininginfo,          true,      false },\n+    { \"mining\",             \"getnetworkhashps\",       &getnetworkhashps,       true,      false },\n+    { \"mining\",             \"prioritisetransaction\",  &prioritisetransaction,  true,      false },\n+    { \"mining\",             \"submitblock\",            &submitblock,            true,      false },\n \n #ifdef ENABLE_WALLET\n     /* Coin generation */\n-    { \"generating\",         \"getgenerate\",            &getgenerate,            true,      false,      false },\n-    { \"generating\",         \"setgenerate\",            &setgenerate,            true,      true,       false },\n+    { \"generating\",         \"getgenerate\",            &getgenerate,            true,      false },\n+    { \"generating\",         \"setgenerate\",            &setgenerate,            true,      false },\n #endif\n \n     /* Raw transactions */\n-    { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   true,      false,      false },\n-    { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   true,      false,      false },\n-    { \"rawtransactions\",    \"decodescript\",           &decodescript,           true,      false,      false },\n-    { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true,      false,      false },\n-    { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false,     false,      false },\n-    { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false,     false,      false }, /* uses wallet if enabled */\n+    { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   true,      false },\n+    { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   true,      false },\n+    { \"rawtransactions\",    \"decodescript\",           &decodescript,           true,      false },\n+    { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true,      false },\n+    { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false,     false },\n+    { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false,     false }, /* uses wallet if enabled */\n \n     /* Utility functions */\n-    { \"util\",               \"createmultisig\",         &createmultisig,         true,      true ,      false },\n-    { \"util\",               \"validateaddress\",        &validateaddress,        true,      false,      false }, /* uses wallet if enabled */\n-    { \"util\",               \"verifymessage\",          &verifymessage,          true,      false,      false },\n-    { \"util\",               \"estimatefee\",            &estimatefee,            true,      true,       false },\n-    { \"util\",               \"estimatepriority\",       &estimatepriority,       true,      true,       false },\n+    { \"util\",               \"createmultisig\",         &createmultisig,         true,      false },\n+    { \"util\",               \"validateaddress\",        &validateaddress,        true,      false }, /* uses wallet if enabled */\n+    { \"util\",               \"verifymessage\",          &verifymessage,          true,      false },\n+    { \"util\",               \"estimatefee\",            &estimatefee,            true,      false },\n+    { \"util\",               \"estimatepriority\",       &estimatepriority,       true,      false },\n \n     /* Not shown in help */\n-    { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true,      true,       false },\n-    { \"hidden\",             \"reconsiderblock\",        &reconsiderblock,        true,      true,       false },\n-    { \"hidden\",             \"setmocktime\",            &setmocktime,            true,      false,      false },\n+    { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true,      false },\n+    { \"hidden\",             \"reconsiderblock\",        &reconsiderblock,        true,      false },\n+    { \"hidden\",             \"setmocktime\",            &setmocktime,            true,      false },\n \n #ifdef ENABLE_WALLET\n     /* Wallet */\n-    { \"wallet\",             \"addmultisigaddress\",     &addmultisigaddress,     true,      false,      true },\n-    { \"wallet\",             \"backupwallet\",           &backupwallet,           true,      false,      true },\n-    { \"wallet\",             \"dumpprivkey\",            &dumpprivkey,            true,      false,      true },\n-    { \"wallet\",             \"dumpwallet\",             &dumpwallet,             true,      false,      true },\n-    { \"wallet\",             \"encryptwallet\",          &encryptwallet,          true,      false,      true },\n-    { \"wallet\",             \"getaccountaddress\",      &getaccountaddress,      true,      false,      true },\n-    { \"wallet\",             \"getaccount\",             &getaccount,             true,      false,      true },\n-    { \"wallet\",             \"getaddressesbyaccount\",  &getaddressesbyaccount,  true,      false,      true },\n-    { \"wallet\",             \"getbalance\",             &getbalance,             false,     false,      true },\n-    { \"wallet\",             \"getnewaddress\",          &getnewaddress,          true,      false,      true },\n-    { \"wallet\",             \"getrawchangeaddress\",    &getrawchangeaddress,    true,      false,      true },\n-    { \"wallet\",             \"getreceivedbyaccount\",   &getreceivedbyaccount,   false,     false,      true },\n-    { \"wallet\",             \"getreceivedbyaddress\",   &getreceivedbyaddress,   false,     false,      true },\n-    { \"wallet\",             \"gettransaction\",         &gettransaction,         false,     false,      true },\n-    { \"wallet\",             \"getunconfirmedbalance\",  &getunconfirmedbalance,  false,     false,      true },\n-    { \"wallet\",             \"getwalletinfo\",          &getwalletinfo,          false,     false,      true },\n-    { \"wallet\",             \"importprivkey\",          &importprivkey,          true,      false,      true },\n-    { \"wallet\",             \"importwallet\",           &importwallet,           true,      false,      true },\n-    { \"wallet\",             \"importaddress\",          &importaddress,          true,      false,      true },\n-    { \"wallet\",             \"keypoolrefill\",          &keypoolrefill,          true,      false,      true },\n-    { \"wallet\",             \"listaccounts\",           &listaccounts,           false,     false,      true },\n-    { \"wallet\",             \"listaddressgroupings\",   &listaddressgroupings,   false,     false,      true },\n-    { \"wallet\",             \"listlockunspent\",        &listlockunspent,        false,     false,      true },\n-    { \"wallet\",             \"listreceivedbyaccount\",  &listreceivedbyaccount,  false,     false,      true },\n-    { \"wallet\",             \"listreceivedbyaddress\",  &listreceivedbyaddress,  false,     false,      true },\n-    { \"wallet\",             \"listsinceblock\",         &listsinceblock,         false,     false,      true },\n-    { \"wallet\",             \"listtransactions\",       &listtransactions,       false,     false,      true },\n-    { \"wallet\",             \"listunspent\",            &listunspent,            false,     false,      true },\n-    { \"wallet\",             \"lockunspent\",            &lockunspent,            true,      false,      true },\n-    { \"wallet\",             \"move\",                   &movecmd,                false,     false,      true },\n-    { \"wallet\",             \"sendfrom\",               &sendfrom,               false,     false,      true },\n-    { \"wallet\",             \"sendmany\",               &sendmany,               false,     false,      true },\n-    { \"wallet\",             \"sendtoaddress\",          &sendtoaddress,          false,     false,      true },\n-    { \"wallet\",             \"setaccount\",             &setaccount,             true,      false,      true },\n-    { \"wallet\",             \"settxfee\",               &settxfee,               true,      false,      true },\n-    { \"wallet\",             \"signmessage\",            &signmessage,            true,      false,      true },\n-    { \"wallet\",             \"walletlock\",             &walletlock,             true,      false,      true },\n-    { \"wallet\",             \"walletpassphrasechange\", &walletpassphrasechange, true,      false,      true },\n-    { \"wallet\",             \"walletpassphrase\",       &walletpassphrase,       true,      false,      true },\n+    { \"wallet\",             \"addmultisigaddress\",     &addmultisigaddress,     true,      true },\n+    { \"wallet\",             \"backupwallet\",           &backupwallet,           true,      true },\n+    { \"wallet\",             \"dumpprivkey\",            &dumpprivkey,            true,      true },\n+    { \"wallet\",             \"dumpwallet\",             &dumpwallet,             true,      true },\n+    { \"wallet\",             \"encryptwallet\",          &encryptwallet,          true,      true },\n+    { \"wallet\",             \"getaccountaddress\",      &getaccountaddress,      true,      true },\n+    { \"wallet\",             \"getaccount\",             &getaccount,             true,      true },\n+    { \"wallet\",             \"getaddressesbyaccount\",  &getaddressesbyaccount,  true,      true },\n+    { \"wallet\",             \"getbalance\",             &getbalance,             false,     true },\n+    { \"wallet\",             \"getnewaddress\",          &getnewaddress,          true,      true },\n+    { \"wallet\",             \"getrawchangeaddress\",    &getrawchangeaddress,    true,      true },\n+    { \"wallet\",             \"getreceivedbyaccount\",   &getreceivedbyaccount,   false,     true },\n+    { \"wallet\",             \"getreceivedbyaddress\",   &getreceivedbyaddress,   false,     true },\n+    { \"wallet\",             \"gettransaction\",         &gettransaction,         false,     true },\n+    { \"wallet\",             \"getunconfirmedbalance\",  &getunconfirmedbalance,  false,     true },\n+    { \"wallet\",             \"getwalletinfo\",          &getwalletinfo,          false,     true },\n+    { \"wallet\",             \"importprivkey\",          &importprivkey,          true,      true },\n+    { \"wallet\",             \"importwallet\",           &importwallet,           true,      true },\n+    { \"wallet\",             \"importaddress\",          &importaddress,          true,      true },\n+    { \"wallet\",             \"keypoolrefill\",          &keypoolrefill,          true,      true },\n+    { \"wallet\",             \"listaccounts\",           &listaccounts,           false,     true },\n+    { \"wallet\",             \"listaddressgroupings\",   &listaddressgroupings,   false,     true },\n+    { \"wallet\",             \"listlockunspent\",        &listlockunspent,        false,     true },\n+    { \"wallet\",             \"listreceivedbyaccount\",  &listreceivedbyaccount,  false,     true },\n+    { \"wallet\",             \"listreceivedbyaddress\",  &listreceivedbyaddress,  false,     true },\n+    { \"wallet\",             \"listsinceblock\",         &listsinceblock,         false,     true },\n+    { \"wallet\",             \"listtransactions\",       &listtransactions,       false,     true },\n+    { \"wallet\",             \"listunspent\",            &listunspent,            false,     true },\n+    { \"wallet\",             \"lockunspent\",            &lockunspent,            true,      true },\n+    { \"wallet\",             \"move\",                   &movecmd,                false,     true },\n+    { \"wallet\",             \"sendfrom\",               &sendfrom,               false,     true },\n+    { \"wallet\",             \"sendmany\",               &sendmany,               false,     true },\n+    { \"wallet\",             \"sendtoaddress\",          &sendtoaddress,          false,     true },\n+    { \"wallet\",             \"setaccount\",             &setaccount,             true,      true },\n+    { \"wallet\",             \"settxfee\",               &settxfee,               true,      true },\n+    { \"wallet\",             \"signmessage\",            &signmessage,            true,      true },\n+    { \"wallet\",             \"walletlock\",             &walletlock,             true,      true },\n+    { \"wallet\",             \"walletpassphrasechange\", &walletpassphrasechange, true,      true },\n+    { \"wallet\",             \"walletpassphrase\",       &walletpassphrase,       true,      true },\n #endif // ENABLE_WALLET\n };\n "
      },
      {
        "sha": "f63438ecb882422f6035c0e8f329d5685dc9fdb0",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ebe0956b391cfa782fd97bb417d20b479df6a36/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ebe0956b391cfa782fd97bb417d20b479df6a36/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=5ebe0956b391cfa782fd97bb417d20b479df6a36",
        "patch": "@@ -98,7 +98,6 @@ class CRPCCommand\n     std::string name;\n     rpcfn_type actor;\n     bool okSafeMode;\n-    bool threadSafe;\n     bool reqWallet;\n };\n "
      }
    ]
  },
  {
    "sha": "c7b22aa0ac1813aea7e964b3b40f251fca9ac675",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjN2IyMmFhMGFjMTgxM2FlYTdlOTY0YjNiNDBmMjUxZmNhOWFjNjc1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-29T08:28:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-29T08:29:32Z"
      },
      "message": "Merge pull request #5683\n\n95ef87c add new osx dmg background picture (Jonas Schnelli)\n48bebcc osx packaging: update DS_Store after background changes (Cory Fields)\n997cab7 osx packaging: switch background image to background.tiff (Cory Fields)\n88a7973 osx packaging: move background image to .background to match gitian builds (Cory Fields)",
      "tree": {
        "sha": "e26e0f20a8aa53a53b6a74f87c5a6fefb70c37b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e26e0f20a8aa53a53b6a74f87c5a6fefb70c37b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7b22aa0ac1813aea7e964b3b40f251fca9ac675",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUye9sAAoJEHSBCwEjRsmmiUgH/0iBV/6MAM2Cpf4jwxihgTLn\nRAkfQtHv2iSDez+cMuQdu7FfpEQpH9LqNdDwXwm+G31U+egMdHSUjwbKOO3s1wSF\nKmtV8FC+p5pVjK96BinNIAXDKQ6PMTAL1MAQBO60tc6FzFC3EXLPJJvpd5CimCNM\n8DIb+jKwh2+QtuZfIypofHTzwvB552g7GAGH2adzdVWBE3Gw9CepT5KuVkuC1hQg\npPyBYDeHusGSt+vHEcJqVGsO2CSbjf33MYS1dMIXF4NiCjoPz23C4TtgfrnrBDXH\nopnE1X3lYBHnBI5+g98JOeI+gOOWBkTMgqloJvLe1QYO2r+Vz74mQPdXZVQYqzk=\n=E0PI\n-----END PGP SIGNATURE-----",
        "payload": "tree e26e0f20a8aa53a53b6a74f87c5a6fefb70c37b2\nparent 6b5f5294bba0448c0349ad41cd0e7e107a500b9d\nparent 95ef87c75ee879181c71bcd1933d8cc01f9d0fa3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422520127 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422520172 +0100\n\nMerge pull request #5683\n\n95ef87c add new osx dmg background picture (Jonas Schnelli)\n48bebcc osx packaging: update DS_Store after background changes (Cory Fields)\n997cab7 osx packaging: switch background image to background.tiff (Cory Fields)\n88a7973 osx packaging: move background image to .background to match gitian builds (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7b22aa0ac1813aea7e964b3b40f251fca9ac675",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7b22aa0ac1813aea7e964b3b40f251fca9ac675",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b5f5294bba0448c0349ad41cd0e7e107a500b9d"
      },
      {
        "sha": "95ef87c75ee879181c71bcd1933d8cc01f9d0fa3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 13,
      "deletions": 11
    },
    "files": [
      {
        "sha": "c59648fd02d46db7fa15fbf256e1281a3558b2a3",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=c7b22aa0ac1813aea7e964b3b40f251fca9ac675",
        "patch": "@@ -16,6 +16,7 @@ BITCOIN_WIN_INSTALLER=$(PACKAGE)-$(PACKAGE_VERSION)-win$(WINDOWS_BITS)-setup$(EX\n \n OSX_APP=Bitcoin-Qt.app\n OSX_DMG=Bitcoin-Qt.dmg\n+OSX_BACKGROUND_IMAGE=background.tiff\n OSX_DEPLOY_SCRIPT=$(top_srcdir)/contrib/macdeploy/macdeployqtplus\n OSX_FANCY_PLIST=$(top_srcdir)/contrib/macdeploy/fancy.plist\n OSX_INSTALLER_ICONS=$(top_srcdir)/src/qt/res/icons/bitcoin.icns\n@@ -30,7 +31,7 @@ WINDOWS_PACKAGING = $(top_srcdir)/share/pixmaps/bitcoin.ico \\\n   $(top_srcdir)/doc/README_windows.txt\n \n OSX_PACKAGING = $(OSX_DEPLOY_SCRIPT) $(OSX_FANCY_PLIST) $(OSX_INSTALLER_ICONS) \\\n-  $(top_srcdir)/contrib/macdeploy/background.png \\\n+  $(top_srcdir)/contrib/macdeploy/$(OSX_BACKGROUND_IMAGE) \\\n   $(top_srcdir)/contrib/macdeploy/DS_Store \\\n   $(top_srcdir)/contrib/macdeploy/detached-sig-apply.sh \\\n   $(top_srcdir)/contrib/macdeploy/detached-sig-create.sh\n@@ -95,7 +96,7 @@ $(OSX_DMG): $(OSX_APP_BUILT) $(OSX_PACKAGING)\n deploydir: $(OSX_DMG)\n else\n APP_DIST_DIR=$(top_builddir)/dist\n-APP_DIST_EXTRAS=$(APP_DIST_DIR)/.background/background.png $(APP_DIST_DIR)/.DS_Store $(APP_DIST_DIR)/Applications\n+APP_DIST_EXTRAS=$(APP_DIST_DIR)/.background/$(OSX_BACKGROUND_IMAGE) $(APP_DIST_DIR)/.DS_Store $(APP_DIST_DIR)/Applications\n \n $(APP_DIST_DIR)/Applications:\n \t@rm -f $@\n@@ -106,11 +107,11 @@ $(APP_DIST_EXTRAS): $(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Bitcoin-Qt\n $(OSX_DMG): $(APP_DIST_EXTRAS)\n \t$(GENISOIMAGE) -no-cache-inodes -D -l -probe -V \"Bitcoin-Qt\" -no-pad -r -apple -o $@ dist\n \n-$(APP_DIST_DIR)/.background/background.png:\n+$(APP_DIST_DIR)/.background/$(OSX_BACKGROUND_IMAGE): contrib/macdeploy/$(OSX_BACKGROUND_IMAGE)\n \t$(MKDIR_P) $(@D)\n-\t$(INSTALL) $(top_srcdir)/contrib/macdeploy/background.png $@\n-$(APP_DIST_DIR)/.DS_Store:\n-\t$(INSTALL) $(top_srcdir)/contrib/macdeploy/DS_Store $@\n+\t$(INSTALL) $< $@\n+$(APP_DIST_DIR)/.DS_Store: contrib/macdeploy/DS_Store\n+\t$(INSTALL) $< $@\n \n $(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Bitcoin-Qt: $(OSX_APP_BUILT) $(OSX_PACKAGING)\n \tINSTALLNAMETOOL=$(INSTALLNAMETOOL)  OTOOL=$(OTOOL) STRIP=$(STRIP) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) -translations-dir=$(QT_TRANSLATION_DIR) -add-qt-tr $(OSX_QT_TRANSLATIONS) -verbose 2"
      },
      {
        "sha": "099960712af26791175d9f0cdd3d52c251ea9ee4",
        "filename": "contrib/macdeploy/DS_Store",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/contrib/macdeploy/DS_Store",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/contrib/macdeploy/DS_Store",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/DS_Store?ref=c7b22aa0ac1813aea7e964b3b40f251fca9ac675"
      },
      {
        "sha": "f88a2ae74bdb33afc2806b6403ea8c0191b096ca",
        "filename": "contrib/macdeploy/background.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/contrib/macdeploy/background.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/contrib/macdeploy/background.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/background.png?ref=c7b22aa0ac1813aea7e964b3b40f251fca9ac675"
      },
      {
        "sha": "fdc4f4ca4a07ea4c6082ee1357b6ec7e8db99d72",
        "filename": "contrib/macdeploy/background.psd",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/contrib/macdeploy/background.psd",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/contrib/macdeploy/background.psd",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/background.psd?ref=c7b22aa0ac1813aea7e964b3b40f251fca9ac675"
      },
      {
        "sha": "4b44ac672e627be82bb9b74dac0016057b11c126",
        "filename": "contrib/macdeploy/background.tiff",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/contrib/macdeploy/background.tiff",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/contrib/macdeploy/background.tiff",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/background.tiff?ref=c7b22aa0ac1813aea7e964b3b40f251fca9ac675"
      },
      {
        "sha": "4858183f75c382a9b8d75ae4fb8a74abd830615f",
        "filename": "contrib/macdeploy/background@2x.png",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/contrib/macdeploy/background@2x.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/contrib/macdeploy/background@2x.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/background@2x.png?ref=c7b22aa0ac1813aea7e964b3b40f251fca9ac675"
      },
      {
        "sha": "ef277a7f14ad66ecdb8597a865a54b9506fd0ff9",
        "filename": "contrib/macdeploy/fancy.plist",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/contrib/macdeploy/fancy.plist",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/contrib/macdeploy/fancy.plist",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/fancy.plist?ref=c7b22aa0ac1813aea7e964b3b40f251fca9ac675",
        "patch": "@@ -10,7 +10,7 @@\n \t\t<integer>620</integer>\n \t</array>\n \t<key>background_picture</key>\n-\t<string>background.png</string>\n+\t<string>background.tiff</string>\n \t<key>icon_size</key>\n \t<integer>96</integer>\n \t<key>applications_symlink</key>"
      },
      {
        "sha": "0eb6b2c84ddf51d5832564f9b7f5b86c1a95f1b3",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=c7b22aa0ac1813aea7e964b3b40f251fca9ac675",
        "patch": "@@ -767,7 +767,7 @@ if config.dmg is not None:\n         for path, dirs, files in os.walk(\"dist\"):\n             for file in files:\n                 size += os.path.getsize(os.path.join(path, file))\n-        size += int(size * 0.1)\n+        size += int(size * 0.15)\n         \n         if verbose >= 3:\n             print \"Creating temp image for modification...\"\n@@ -791,7 +791,8 @@ if config.dmg is not None:\n             print \"+ Applying fancy settings +\"\n         \n         if fancy.has_key(\"background_picture\"):\n-            bg_path = os.path.join(disk_root, os.path.basename(fancy[\"background_picture\"]))\n+            bg_path = os.path.join(disk_root, \".background\", os.path.basename(fancy[\"background_picture\"]))\n+            os.mkdir(os.path.dirname(bg_path))\n             if verbose >= 3:\n                 print fancy[\"background_picture\"], \"->\", bg_path\n             shutil.copy2(fancy[\"background_picture\"], bg_path)\n@@ -849,8 +850,8 @@ if config.dmg is not None:\n         if bg_path is not None:\n             # Set background file, then call SetFile to make it invisible.\n             # (note: making it invisible first makes set background picture fail)\n-            bgscript = Template(\"\"\"set background picture of theViewOptions to file \"$bgpic\"\n-                   do shell script \"SetFile -a V /Volumes/$disk/$bgpic\" \"\"\")\n+            bgscript = Template(\"\"\"set background picture of theViewOptions to file \".background:$bgpic\"\n+                   do shell script \"SetFile -a V /Volumes/$disk/.background/$bgpic\" \"\"\")\n             params[\"background_commands\"] = bgscript.substitute({\"bgpic\" : os.path.basename(bg_path), \"disk\" : params[\"disk\"]})\n \n         s = appscript.substitute(params)"
      }
    ]
  },
  {
    "sha": "55eade9d46ebfa4b32b79893595d91d529fa30bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NWVhZGU5ZDQ2ZWJmYTRiMzJiNzk4OTM1OTVkOTFkNTI5ZmEzMGJi",
    "commit": {
      "author": {
        "name": "fsb4000",
        "email": "fsb4000@yandex.ru",
        "date": "2015-01-28T19:25:11Z"
      },
      "committer": {
        "name": "fsb4000",
        "email": "fsb4000@yandex.ru",
        "date": "2015-01-29T09:07:08Z"
      },
      "message": "Change Coin Control first column label",
      "tree": {
        "sha": "0950fe9cbb7b79ccbe1eac8224ecaf81d87a9a95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0950fe9cbb7b79ccbe1eac8224ecaf81d87a9a95"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/55eade9d46ebfa4b32b79893595d91d529fa30bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55eade9d46ebfa4b32b79893595d91d529fa30bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/55eade9d46ebfa4b32b79893595d91d529fa30bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55eade9d46ebfa4b32b79893595d91d529fa30bb/comments",
    "author": {
      "login": "fsb4000",
      "id": 4289847,
      "node_id": "MDQ6VXNlcjQyODk4NDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4289847?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fsb4000",
      "html_url": "https://github.com/fsb4000",
      "followers_url": "https://api.github.com/users/fsb4000/followers",
      "following_url": "https://api.github.com/users/fsb4000/following{/other_user}",
      "gists_url": "https://api.github.com/users/fsb4000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fsb4000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fsb4000/subscriptions",
      "organizations_url": "https://api.github.com/users/fsb4000/orgs",
      "repos_url": "https://api.github.com/users/fsb4000/repos",
      "events_url": "https://api.github.com/users/fsb4000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fsb4000/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fsb4000",
      "id": 4289847,
      "node_id": "MDQ6VXNlcjQyODk4NDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4289847?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fsb4000",
      "html_url": "https://github.com/fsb4000",
      "followers_url": "https://api.github.com/users/fsb4000/followers",
      "following_url": "https://api.github.com/users/fsb4000/following{/other_user}",
      "gists_url": "https://api.github.com/users/fsb4000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fsb4000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fsb4000/subscriptions",
      "organizations_url": "https://api.github.com/users/fsb4000/orgs",
      "repos_url": "https://api.github.com/users/fsb4000/repos",
      "events_url": "https://api.github.com/users/fsb4000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fsb4000/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b5f5294bba0448c0349ad41cd0e7e107a500b9d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3f4f082b8ccb842294c4de79ce9c9999b8bc22b2",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55eade9d46ebfa4b32b79893595d91d529fa30bb/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55eade9d46ebfa4b32b79893595d91d529fa30bb/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=55eade9d46ebfa4b32b79893595d91d529fa30bb",
        "patch": "@@ -117,6 +117,10 @@ CoinControlDialog::CoinControlDialog(QWidget *parent) :\n     // (un)select all\n     connect(ui->pushButtonSelectAll, SIGNAL(clicked()), this, SLOT(buttonSelectAllClicked()));\n \n+    // change coin control first column label due Qt4 bug. \n+    // see https://github.com/bitcoin/bitcoin/issues/5716\n+    ui->treeWidget->headerItem()->setText(COLUMN_CHECKBOX, QString());\n+\n     ui->treeWidget->setColumnWidth(COLUMN_CHECKBOX, 84);\n     ui->treeWidget->setColumnWidth(COLUMN_AMOUNT, 100);\n     ui->treeWidget->setColumnWidth(COLUMN_LABEL, 170);"
      }
    ]
  },
  {
    "sha": "7620ef9e7edbc3526e71922e7b080b5a332d6897",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjIwZWY5ZTdlZGJjMzUyNmU3MTkyMmU3YjA4MGI1YTMzMmQ2ODk3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-29T10:14:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-29T10:14:16Z"
      },
      "message": "Merge pull request #5720\n\n55eade9 Change Coin Control first column label (fsb4000)",
      "tree": {
        "sha": "cc00ed510096c79bded7a65a84a0d16466e3afff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc00ed510096c79bded7a65a84a0d16466e3afff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7620ef9e7edbc3526e71922e7b080b5a332d6897",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUygf4AAoJEHSBCwEjRsmmQC4IALYqBRNhzV/ViKEAe5ue+YV4\nqw9Z8kXGWXpPtbfwGE7JJGR2+/cpm7vWcIzEefrR0/f6LzNVh6tS1bbyBeyou4CD\n50tAMN1kLO9NsKHe/PpXPcVxT352iNcz79cENWPNpEs7SfFgDg8iOj5FUEGea5rb\nAkf4a1osK2wAEO6oRNBjleOIJqtN0uP7c1YgeLZxL8Bclf1eJj2KEg+6Dc+bOdJI\nqztQwk1D+t0ZGM3EUvXEMqLOyVg/Xj2AmDgMgnb1oQuBD2xzSV2rALPfwoDPuIwO\n/vQ2EZoHgCzPV6KjLeOBpTyRmV9WsPxDZq5e8yNUVU6wNOuG+aNIZE8/EnUT4MQ=\n=DY+a\n-----END PGP SIGNATURE-----",
        "payload": "tree cc00ed510096c79bded7a65a84a0d16466e3afff\nparent c7b22aa0ac1813aea7e964b3b40f251fca9ac675\nparent 55eade9d46ebfa4b32b79893595d91d529fa30bb\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422526448 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422526456 +0100\n\nMerge pull request #5720\n\n55eade9 Change Coin Control first column label (fsb4000)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7620ef9e7edbc3526e71922e7b080b5a332d6897",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7620ef9e7edbc3526e71922e7b080b5a332d6897",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7620ef9e7edbc3526e71922e7b080b5a332d6897/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7b22aa0ac1813aea7e964b3b40f251fca9ac675",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7b22aa0ac1813aea7e964b3b40f251fca9ac675",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7b22aa0ac1813aea7e964b3b40f251fca9ac675"
      },
      {
        "sha": "55eade9d46ebfa4b32b79893595d91d529fa30bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55eade9d46ebfa4b32b79893595d91d529fa30bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55eade9d46ebfa4b32b79893595d91d529fa30bb"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3f4f082b8ccb842294c4de79ce9c9999b8bc22b2",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7620ef9e7edbc3526e71922e7b080b5a332d6897/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7620ef9e7edbc3526e71922e7b080b5a332d6897/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=7620ef9e7edbc3526e71922e7b080b5a332d6897",
        "patch": "@@ -117,6 +117,10 @@ CoinControlDialog::CoinControlDialog(QWidget *parent) :\n     // (un)select all\n     connect(ui->pushButtonSelectAll, SIGNAL(clicked()), this, SLOT(buttonSelectAllClicked()));\n \n+    // change coin control first column label due Qt4 bug. \n+    // see https://github.com/bitcoin/bitcoin/issues/5716\n+    ui->treeWidget->headerItem()->setText(COLUMN_CHECKBOX, QString());\n+\n     ui->treeWidget->setColumnWidth(COLUMN_CHECKBOX, 84);\n     ui->treeWidget->setColumnWidth(COLUMN_AMOUNT, 100);\n     ui->treeWidget->setColumnWidth(COLUMN_LABEL, 170);"
      }
    ]
  },
  {
    "sha": "7823598fa4774141568e5b6d73c4277a452f8d16",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODIzNTk4ZmE0Nzc0MTQxNTY4ZTViNmQ3M2M0Mjc3YTQ1MmY4ZDE2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-29T11:47:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-29T11:48:27Z"
      },
      "message": "Merge pull request #5620\n\n6715efb [Qt] Payment request expiration bug fix (re-done) (Philip Kaufmann)",
      "tree": {
        "sha": "97e3d2e86cee27ff8d77f93b706981841626dbfc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/97e3d2e86cee27ff8d77f93b706981841626dbfc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7823598fa4774141568e5b6d73c4277a452f8d16",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUyh4LAAoJEHSBCwEjRsmmx8gH/AnbvFRpr/p7TBUG9r49AsBy\nr0jL0ykj8cs2M6DYc5KlHM6zfOw52/++0GLN1mGDu6UdL+63fJkQCwXQrbEQhk4H\n4uYa10K+q8wZzUL8tH1A33i4Ebz356sxJtOyV2dQiZvV7FiUjBHNiPvmxmZQGDdi\nu06sKRThZuLwT4m1YSaMbIKEvfcBY864Rf/+yVkvaCG3GLp/8JvqwuYp6LpCyszz\n6KI/M4ee6ULSDv3O16xRPX1Csxr/pND44CkSt1sjdylqDFezRrHz5bqoqDqLfEIT\nn20KtUBWPhDsQlxStJrol+ULvdubhbCli5ae69fm5uU9Dw9zJb/r1YUuTeG6sUI=\n=ZLeU\n-----END PGP SIGNATURE-----",
        "payload": "tree 97e3d2e86cee27ff8d77f93b706981841626dbfc\nparent 7620ef9e7edbc3526e71922e7b080b5a332d6897\nparent 6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422532033 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422532107 +0100\n\nMerge pull request #5620\n\n6715efb [Qt] Payment request expiration bug fix (re-done) (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7823598fa4774141568e5b6d73c4277a452f8d16",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7823598fa4774141568e5b6d73c4277a452f8d16",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7823598fa4774141568e5b6d73c4277a452f8d16/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7620ef9e7edbc3526e71922e7b080b5a332d6897",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7620ef9e7edbc3526e71922e7b080b5a332d6897",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7620ef9e7edbc3526e71922e7b080b5a332d6897"
      },
      {
        "sha": "6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c"
      }
    ],
    "stats": {
      "total": 150,
      "additions": 137,
      "deletions": 13
    },
    "files": [
      {
        "sha": "46ffd055a5506f093228ba611d6366cda805db54",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 8,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7823598fa4774141568e5b6d73c4277a452f8d16/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7823598fa4774141568e5b6d73c4277a452f8d16/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=7823598fa4774141568e5b6d73c4277a452f8d16",
        "patch": "@@ -521,8 +521,6 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n         return false;\n \n     if (request.IsInitialized()) {\n-        const payments::PaymentDetails& details = request.getDetails();\n-\n         // Payment request network matches client network?\n         if (!verifyNetwork(request.getDetails())) {\n             emit message(tr(\"Payment request rejected\"), tr(\"Payment request network doesn't match client network.\"),\n@@ -531,16 +529,15 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n             return false;\n         }\n \n-        // Expired payment request?\n-        if (details.has_expires() && (int64_t)details.expires() < GetTime())\n-        {\n-            emit message(tr(\"Payment request rejected\"), tr(\"Payment request has expired.\"),\n+        // Make sure any payment requests involved are still valid.\n+        // This is re-checked just before sending coins in WalletModel::sendCoins().\n+        if (verifyExpired(request.getDetails())) {\n+            emit message(tr(\"Payment request rejected\"), tr(\"Payment request expired.\"),\n                 CClientUIInterface::MSG_ERROR);\n \n             return false;\n         }\n-    }\n-    else {\n+    } else {\n         emit message(tr(\"Payment request error\"), tr(\"Payment request is not initialized.\"),\n             CClientUIInterface::MSG_ERROR);\n \n@@ -759,3 +756,15 @@ bool PaymentServer::verifyNetwork(const payments::PaymentDetails& requestDetails\n     }\n     return fVerified;\n }\n+\n+bool PaymentServer::verifyExpired(const payments::PaymentDetails& requestDetails)\n+{\n+    bool fVerified = (requestDetails.has_expires() && (int64_t)requestDetails.expires() < GetTime());\n+    if (fVerified) {\n+        const QString requestExpires = QString::fromStdString(DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", (int64_t)requestDetails.expires()));\n+        qWarning() << QString(\"PaymentServer::%1: Payment request expired \\\"%2\\\".\")\n+            .arg(__func__)\n+            .arg(requestExpires);\n+    }\n+    return fVerified;\n+}"
      },
      {
        "sha": "db5f44ff1dfd8e5a444e4a2cec1058d4639df3fb",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7823598fa4774141568e5b6d73c4277a452f8d16/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7823598fa4774141568e5b6d73c4277a452f8d16/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=7823598fa4774141568e5b6d73c4277a452f8d16",
        "patch": "@@ -93,6 +93,8 @@ class PaymentServer : public QObject\n \n     // Verify that the payment request network matches the client network\n     static bool verifyNetwork(const payments::PaymentDetails& requestDetails);\n+    // Verify if the payment request is expired\n+    static bool verifyExpired(const payments::PaymentDetails& requestDetails);\n \n signals:\n     // Fired when a valid payment request is received"
      },
      {
        "sha": "9e8743d80520b957a64293a6aa73ef98d0d2c110",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7823598fa4774141568e5b6d73c4277a452f8d16/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7823598fa4774141568e5b6d73c4277a452f8d16/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=7823598fa4774141568e5b6d73c4277a452f8d16",
        "patch": "@@ -529,6 +529,10 @@ void SendCoinsDialog::processSendCoinsReturn(const WalletModel::SendCoinsReturn\n     case WalletModel::InsaneFee:\n         msgParams.first = tr(\"A fee higher than %1 is considered an insanely high fee.\").arg(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), 10000000));\n         break;\n+    case WalletModel::PaymentRequestExpired:\n+        msgParams.first = tr(\"Payment request expired!\");\n+        msgParams.second = CClientUIInterface::MSG_ERROR;\n+        break;\n     // included to prevent a compiler warning.\n     case WalletModel::OK:\n     default:"
      },
      {
        "sha": "50636d7c67f770132c5591a68aa44995d2a8f100",
        "filename": "src/qt/test/paymentrequestdata.h",
        "status": "modified",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7823598fa4774141568e5b6d73c4277a452f8d16/src/qt/test/paymentrequestdata.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7823598fa4774141568e5b6d73c4277a452f8d16/src/qt/test/paymentrequestdata.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentrequestdata.h?ref=7823598fa4774141568e5b6d73c4277a452f8d16",
        "patch": "@@ -361,3 +361,75 @@ gAFwThsozZxkZxzCn4R8WxNiLFV6m0ye9fEtSbolfaW+EjBMpO03lr/dwNnrclhg\\\n ew+A05xfZztrAt16XKEY7qKJ/eY2nLd0fVAIu/nIt+7/VYVXT83zLrWc150aRS7W\\\n AdJbL3JOJLs6Eyp5zrPbfI8faRttFAdONKDrJgIpuW1E3g==\\\n \";\n+\n+//\n+// Expired payment request (expires is set to 1 = 1970-01-01 00:00:01)\n+//\n+const char* paymentrequest2_cert2_BASE64 =\n+\"\\\n+Egt4NTA5K3NoYTI1NhrQBArNBDCCAkkwggExoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n+BQAwITEfMB0GA1UEAwwWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xNTAxMTEx\\\n+ODIxMDhaFw0yNTAxMDgxODIxMDhaMCExHzAdBgNVBAMMFlBheW1lbnRSZXF1ZXN0\\\n+IFRlc3QgQ0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMsZqzkzeBGo+i2N\\\n+mUak3Ciodr1V7S062VOy7N0OQYNDQHYkgDFAUET7cEb5VJaHPv5m3ppTBpU9xBcf\\\n+wbHHUt4VjA+mhRmYrl1khjvZM+X8kEqvWn20BtcM9R6r0yIYec8UERDDHBleL/P8\\\n+RkxEnVLjYTV9zigCXfMsgYb3EQShAgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8wDQYJ\\\n+KoZIhvcNAQELBQADggEBABUJpl3QCqsoDSxAsQdV6zKT4VGV76AzoGj7etQsQY+r\\\n++S26VfWh/fMobEzuxFChr0USgLJ6FoK78hAtoZvt1lrye9yqFv/ig3WLWsJKWHHb\\\n+3RT6oR03CIwZXFSUasi08QDVLxafwsU5OMcPLucF3a1lRL1ccYrNgVCCx1+X7Bos\\\n+tIgDGRQQ4AyoHTcfVd2hEGeUv7k14mOxFsAp6851yosHq9Q2kwmdH+rHEJbjof87\\\n+yyKLagc4owyXBZYkQmkeHWCNqnuRmO5vUsfVb0UUrkD64o7Th/NjwooA7SCiUXl6\\\n+dfygT1b7ggpx7GC+sP2DsIM47IAZ55drjqX5u2f+Ba0iQgoEdGVzdBIgCICt4gQS\\\n+GXapFASsapRTBKxoykO9YhoackY1CqLyiKwYiNLUpQUgASoQVGVzdGluZyB0ZXN0\\\n+bmV0ISqAATXq9A5nmJgtmee/bQTeHeif4w1YYFPBlKghwx6qbVgXTWnwBJtOQhhV\\\n+sZdzbTl95ENR7/Y7VJupW9kDWobCK7zUUhLAzUlwmLlcx6itHw8LTUF5HK+AwsZm\\\n+Zs85lISGvOS0NZW/ENa6l+oQRnL87oqVZr/EDGiuqjz6T0ThQi0l\\\n+\";\n+\n+//\n+// Unexpired payment request (expires is set to 0x7FFFFFFFFFFFFFFF = max. int64_t)\n+//\n+const char* paymentrequest3_cert2_BASE64 =\n+\"\\\n+Egt4NTA5K3NoYTI1NhrQBArNBDCCAkkwggExoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n+BQAwITEfMB0GA1UEAwwWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xNTAxMTEx\\\n+ODIxMDhaFw0yNTAxMDgxODIxMDhaMCExHzAdBgNVBAMMFlBheW1lbnRSZXF1ZXN0\\\n+IFRlc3QgQ0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMsZqzkzeBGo+i2N\\\n+mUak3Ciodr1V7S062VOy7N0OQYNDQHYkgDFAUET7cEb5VJaHPv5m3ppTBpU9xBcf\\\n+wbHHUt4VjA+mhRmYrl1khjvZM+X8kEqvWn20BtcM9R6r0yIYec8UERDDHBleL/P8\\\n+RkxEnVLjYTV9zigCXfMsgYb3EQShAgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8wDQYJ\\\n+KoZIhvcNAQELBQADggEBABUJpl3QCqsoDSxAsQdV6zKT4VGV76AzoGj7etQsQY+r\\\n++S26VfWh/fMobEzuxFChr0USgLJ6FoK78hAtoZvt1lrye9yqFv/ig3WLWsJKWHHb\\\n+3RT6oR03CIwZXFSUasi08QDVLxafwsU5OMcPLucF3a1lRL1ccYrNgVCCx1+X7Bos\\\n+tIgDGRQQ4AyoHTcfVd2hEGeUv7k14mOxFsAp6851yosHq9Q2kwmdH+rHEJbjof87\\\n+yyKLagc4owyXBZYkQmkeHWCNqnuRmO5vUsfVb0UUrkD64o7Th/NjwooA7SCiUXl6\\\n+dfygT1b7ggpx7GC+sP2DsIM47IAZ55drjqX5u2f+Ba0iSgoEdGVzdBIgCICt4gQS\\\n+GXapFASsapRTBKxoykO9YhoackY1CqLyiKwYyNfZpQUg//////////9/KhBUZXN0\\\n+aW5nIHRlc3RuZXQhKoABNwi8WnMW4aMvbmvorTiiWJLFhofLFnsoWCJnj3rWLnLh\\\n+n3w6q/fZ26p50ERL/noxdTUfeFsKnlECkUu/fOcOrqyYDiwvxI0SZ034DleVyFU1\\\n+Z3T+X0zcL8oe7bX01Yf+s2V+5JXQXarKnKBrZCGgv2ARjFNSZe7E7vGg5K4Q6Q8=\\\n+\";\n+\n+//\n+// Unexpired payment request (expires is set to 0x8000000000000000 > max. int64_t, allowed uint64)\n+//\n+const char* paymentrequest4_cert2_BASE64 =\n+\"\\\n+Egt4NTA5K3NoYTI1NhrQBArNBDCCAkkwggExoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n+BQAwITEfMB0GA1UEAwwWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xNTAxMTEx\\\n+ODIxMDhaFw0yNTAxMDgxODIxMDhaMCExHzAdBgNVBAMMFlBheW1lbnRSZXF1ZXN0\\\n+IFRlc3QgQ0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMsZqzkzeBGo+i2N\\\n+mUak3Ciodr1V7S062VOy7N0OQYNDQHYkgDFAUET7cEb5VJaHPv5m3ppTBpU9xBcf\\\n+wbHHUt4VjA+mhRmYrl1khjvZM+X8kEqvWn20BtcM9R6r0yIYec8UERDDHBleL/P8\\\n+RkxEnVLjYTV9zigCXfMsgYb3EQShAgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8wDQYJ\\\n+KoZIhvcNAQELBQADggEBABUJpl3QCqsoDSxAsQdV6zKT4VGV76AzoGj7etQsQY+r\\\n++S26VfWh/fMobEzuxFChr0USgLJ6FoK78hAtoZvt1lrye9yqFv/ig3WLWsJKWHHb\\\n+3RT6oR03CIwZXFSUasi08QDVLxafwsU5OMcPLucF3a1lRL1ccYrNgVCCx1+X7Bos\\\n+tIgDGRQQ4AyoHTcfVd2hEGeUv7k14mOxFsAp6851yosHq9Q2kwmdH+rHEJbjof87\\\n+yyKLagc4owyXBZYkQmkeHWCNqnuRmO5vUsfVb0UUrkD64o7Th/NjwooA7SCiUXl6\\\n+dfygT1b7ggpx7GC+sP2DsIM47IAZ55drjqX5u2f+Ba0iSwoEdGVzdBIgCICt4gQS\\\n+GXapFASsapRTBKxoykO9YhoackY1CqLyiKwYt+HZpQUggICAgICAgICAASoQVGVz\\\n+dGluZyB0ZXN0bmV0ISqAAXSQG8+GFA18VaKarlYrOz293rNMIub0swKGcQm8jAGX\\\n+HSLaRgHfUDeEPr4hydy4dtfu59KNwe2xsHOHu/SpO4L8SrA4Dm9A7SlNBVWdcLbw\\\n+d2hj739GDLz0b5KuJ2SG6VknMRQM976w/m2qlq0ccVGaaZ2zMIGfpzL3p6adwx/5\\\n+\";"
      },
      {
        "sha": "04935192c85fa97bb51b445686903d9d895b9063",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 2,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7823598fa4774141568e5b6d73c4277a452f8d16/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7823598fa4774141568e5b6d73c4277a452f8d16/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=7823598fa4774141568e5b6d73c4277a452f8d16",
        "patch": "@@ -143,15 +143,45 @@ void PaymentServerTests::paymentServerTests()\n     QVERIFY(r.paymentRequest.IsInitialized());\n     QCOMPARE(PaymentServer::verifyNetwork(r.paymentRequest.getDetails()), false);\n \n-    // Just get some random data big enough to trigger BIP70 DoS protection\n+    // Expired payment request (expires is set to 1 = 1970-01-01 00:00:01):\n+    data = DecodeBase64(paymentrequest2_cert2_BASE64);\n+    byteArray = QByteArray((const char*)&data[0], data.size());\n+    r.paymentRequest.parse(byteArray);\n+    // Ensure the request is initialized\n+    QVERIFY(r.paymentRequest.IsInitialized());\n+    // compares 1 < GetTime() == false (treated as expired payment request)\n+    QCOMPARE(PaymentServer::verifyExpired(r.paymentRequest.getDetails()), true);\n+\n+    // Unexpired payment request (expires is set to 0x7FFFFFFFFFFFFFFF = max. int64_t):\n+    // 9223372036854775807 (uint64), 9223372036854775807 (int64_t) and -1 (int32_t)\n+    // -1 is 1969-12-31 23:59:59 (for a 32 bit time values)\n+    data = DecodeBase64(paymentrequest3_cert2_BASE64);\n+    byteArray = QByteArray((const char*)&data[0], data.size());\n+    r.paymentRequest.parse(byteArray);\n+    // Ensure the request is initialized\n+    QVERIFY(r.paymentRequest.IsInitialized());\n+    // compares 9223372036854775807 < GetTime() == false (treated as unexpired payment request)\n+    QCOMPARE(PaymentServer::verifyExpired(r.paymentRequest.getDetails()), false);\n+\n+    // Unexpired payment request (expires is set to 0x8000000000000000 > max. int64_t, allowed uint64):\n+    // 9223372036854775808 (uint64), -9223372036854775808 (int64_t) and 0 (int32_t)\n+    // 0 is 1970-01-01 00:00:00 (for a 32 bit time values)\n+    data = DecodeBase64(paymentrequest4_cert2_BASE64);\n+    byteArray = QByteArray((const char*)&data[0], data.size());\n+    r.paymentRequest.parse(byteArray);\n+    // Ensure the request is initialized\n+    QVERIFY(r.paymentRequest.IsInitialized());\n+    // compares -9223372036854775808 < GetTime() == true (treated as expired payment request)\n+    QCOMPARE(PaymentServer::verifyExpired(r.paymentRequest.getDetails()), true);\n+\n+    // Test BIP70 DoS protection:\n     unsigned char randData[BIP70_MAX_PAYMENTREQUEST_SIZE + 1];\n     GetRandBytes(randData, sizeof(randData));\n     // Write data to a temp file:\n     QTemporaryFile tempFile;\n     tempFile.open();\n     tempFile.write((const char*)randData, sizeof(randData));\n     tempFile.close();\n-    // Trigger BIP70 DoS protection\n     QCOMPARE(PaymentServer::readPaymentRequestFromFile(tempFile.fileName(), r.paymentRequest), false);\n \n     delete server;"
      },
      {
        "sha": "57596b77bd771eb6443b92e780ed75b60de2200d",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7823598fa4774141568e5b6d73c4277a452f8d16/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7823598fa4774141568e5b6d73c4277a452f8d16/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=7823598fa4774141568e5b6d73c4277a452f8d16",
        "patch": "@@ -6,6 +6,7 @@\n \n #include \"addresstablemodel.h\"\n #include \"guiconstants.h\"\n+#include \"paymentserver.h\"\n #include \"recentrequeststablemodel.h\"\n #include \"transactiontablemodel.h\"\n \n@@ -294,11 +295,16 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n         LOCK2(cs_main, wallet->cs_wallet);\n         CWalletTx *newTx = transaction.getTransaction();\n \n-        // Store PaymentRequests in wtx.vOrderForm in wallet.\n         foreach(const SendCoinsRecipient &rcp, transaction.getRecipients())\n         {\n             if (rcp.paymentRequest.IsInitialized())\n             {\n+                // Make sure any payment requests involved are still valid.\n+                if (PaymentServer::verifyExpired(rcp.paymentRequest.getDetails())) {\n+                    return PaymentRequestExpired;\n+                }\n+\n+                // Store PaymentRequests in wtx.vOrderForm in wallet.\n                 std::string key(\"PaymentRequest\");\n                 std::string value;\n                 rcp.paymentRequest.SerializeToString(&value);"
      },
      {
        "sha": "9916d11f93995175632ad456db4400e2088a6102",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7823598fa4774141568e5b6d73c4277a452f8d16/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7823598fa4774141568e5b6d73c4277a452f8d16/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=7823598fa4774141568e5b6d73c4277a452f8d16",
        "patch": "@@ -40,7 +40,7 @@ class SendCoinsRecipient\n     explicit SendCoinsRecipient(const QString &addr, const QString &label, const CAmount& amount, const QString &message):\n         address(addr), label(label), amount(amount), message(message), nVersion(SendCoinsRecipient::CURRENT_VERSION) {}\n \n-    // If from an insecure payment request, this is used for storing\n+    // If from an unauthenticated payment request, this is used for storing\n     // the addresses, e.g. address-A<br />address-B<br />address-C.\n     // Info: As we don't need to process addresses in here when using\n     // payment requests, we can abuse it for displaying an address list.\n@@ -111,7 +111,8 @@ class WalletModel : public QObject\n         DuplicateAddress,\n         TransactionCreationFailed, // Error returned when wallet is still locked\n         TransactionCommitFailed,\n-        InsaneFee\n+        InsaneFee,\n+        PaymentRequestExpired\n     };\n \n     enum EncryptionStatus"
      }
    ]
  },
  {
    "sha": "5f04d1d0d758faa29d3ab165f6fffc93381cd569",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjA0ZDFkMGQ3NThmYWEyOWQzYWIxNjVmNmZmZmM5MzM4MWNkNTY5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-29T12:15:15Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-29T12:27:23Z"
      },
      "message": "Merge pull request #5477\n\n6bbca99 LSSharedFileListItemResolve() was deprecated in Mac OS X 10.10, use LSSharedFileListItemCopyResolvedURL() instead (Cory Fields)",
      "tree": {
        "sha": "9a395e4f1a91fda201f4c1749b9ece33fc9b5469",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a395e4f1a91fda201f4c1749b9ece33fc9b5469"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f04d1d0d758faa29d3ab165f6fffc93381cd569",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUyicrAAoJEHSBCwEjRsmm1NYH/11FasvoLY/viXFTzSiP78bg\nZYAESVEXPBBznJQn2EGqMKnQbP91oUT/9l8wl8FiuW8o6z53Nb5ZF0gUBVHSpXRx\nov8HEj9znOokPR8U+lxRUD3zHjBK+2QNPx2F9Dum5folNE5VQBA/OI3VMtZZOpBf\nIISD571e7Oz7MUeyUlWlkYxLMI8hDo6Nx8ITc4ckHGuieTNvIZV8Hud814g/ZVzr\n7ljbITFubDRZv6QTUFeqDO0CUDQWS0tiS7nBXZvYc5B0YCx3ojFaPTcoNK5Ixrjh\n566xrc23ZsP2RTolLOvPxjcI/PXDvqb/eRvw6dH5VlwiOjesQqysoaf51etkpxI=\n=WILO\n-----END PGP SIGNATURE-----",
        "payload": "tree 9a395e4f1a91fda201f4c1749b9ece33fc9b5469\nparent 7823598fa4774141568e5b6d73c4277a452f8d16\nparent 6bbca99baa50eee50d1559335a66f1b2189d456d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422533715 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422534443 +0100\n\nMerge pull request #5477\n\n6bbca99 LSSharedFileListItemResolve() was deprecated in Mac OS X 10.10, use LSSharedFileListItemCopyResolvedURL() instead (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f04d1d0d758faa29d3ab165f6fffc93381cd569",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f04d1d0d758faa29d3ab165f6fffc93381cd569",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f04d1d0d758faa29d3ab165f6fffc93381cd569/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7823598fa4774141568e5b6d73c4277a452f8d16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7823598fa4774141568e5b6d73c4277a452f8d16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7823598fa4774141568e5b6d73c4277a452f8d16"
      },
      {
        "sha": "6bbca99baa50eee50d1559335a66f1b2189d456d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bbca99baa50eee50d1559335a66f1b2189d456d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6bbca99baa50eee50d1559335a66f1b2189d456d"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 12,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2a13f43ea4263a3abb9163268deebe7462a4aafd",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f04d1d0d758faa29d3ab165f6fffc93381cd569/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f04d1d0d758faa29d3ab165f6fffc93381cd569/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=5f04d1d0d758faa29d3ab165f6fffc93381cd569",
        "patch": "@@ -715,7 +715,18 @@ LSSharedFileListItemRef findStartupItemInList(LSSharedFileListRef list, CFURLRef\n         LSSharedFileListItemRef item = (LSSharedFileListItemRef)CFArrayGetValueAtIndex(listSnapshot, i);\n         UInt32 resolutionFlags = kLSSharedFileListNoUserInteraction | kLSSharedFileListDoNotMountVolumes;\n         CFURLRef currentItemURL = NULL;\n-        LSSharedFileListItemResolve(item, resolutionFlags, &currentItemURL, NULL);\n+\n+#if defined(MAC_OS_X_VERSION_MAX_ALLOWED) && MAC_OS_X_VERSION_MAX_ALLOWED >= 10100\n+\tif(&LSSharedFileListItemCopyResolvedURL)\n+\t    currentItemURL = LSSharedFileListItemCopyResolvedURL(item, resolutionFlags, NULL);\n+#if defined(MAC_OS_X_VERSION_MIN_REQUIRED) && MAC_OS_X_VERSION_MIN_REQUIRED < 10100\n+\telse\n+\t    LSSharedFileListItemResolve(item, resolutionFlags, &currentItemURL, NULL);\n+#endif\n+#else\n+\tLSSharedFileListItemResolve(item, resolutionFlags, &currentItemURL, NULL);\n+#endif\n+\n         if(currentItemURL && CFEqual(currentItemURL, findUrl)) {\n             // found\n             CFRelease(currentItemURL);"
      }
    ]
  },
  {
    "sha": "72ac792b4a544048261f35af859c7bb6d8bdb7a0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MmFjNzkyYjRhNTQ0MDQ4MjYxZjM1YWY4NTljN2JiNmQ4YmRiN2Ew",
    "commit": {
      "author": {
        "name": "randy-waterhouse",
        "email": "kiwigb@yahoo.com",
        "date": "2014-11-20T23:24:50Z"
      },
      "committer": {
        "name": "randy-waterhouse",
        "email": "kiwigb@yahoo.com",
        "date": "2015-01-29T21:43:30Z"
      },
      "message": "Format build flags in src/Makefile.am.",
      "tree": {
        "sha": "f969fd9c2f67480cf637c5cdf6e762e24cabe582",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f969fd9c2f67480cf637c5cdf6e762e24cabe582"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72ac792b4a544048261f35af859c7bb6d8bdb7a0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72ac792b4a544048261f35af859c7bb6d8bdb7a0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/72ac792b4a544048261f35af859c7bb6d8bdb7a0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72ac792b4a544048261f35af859c7bb6d8bdb7a0/comments",
    "author": {
      "login": "randy-waterhouse",
      "id": 637706,
      "node_id": "MDQ6VXNlcjYzNzcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/637706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randy-waterhouse",
      "html_url": "https://github.com/randy-waterhouse",
      "followers_url": "https://api.github.com/users/randy-waterhouse/followers",
      "following_url": "https://api.github.com/users/randy-waterhouse/following{/other_user}",
      "gists_url": "https://api.github.com/users/randy-waterhouse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randy-waterhouse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randy-waterhouse/subscriptions",
      "organizations_url": "https://api.github.com/users/randy-waterhouse/orgs",
      "repos_url": "https://api.github.com/users/randy-waterhouse/repos",
      "events_url": "https://api.github.com/users/randy-waterhouse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randy-waterhouse/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "randy-waterhouse",
      "id": 637706,
      "node_id": "MDQ6VXNlcjYzNzcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/637706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randy-waterhouse",
      "html_url": "https://github.com/randy-waterhouse",
      "followers_url": "https://api.github.com/users/randy-waterhouse/followers",
      "following_url": "https://api.github.com/users/randy-waterhouse/following{/other_user}",
      "gists_url": "https://api.github.com/users/randy-waterhouse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randy-waterhouse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randy-waterhouse/subscriptions",
      "organizations_url": "https://api.github.com/users/randy-waterhouse/orgs",
      "repos_url": "https://api.github.com/users/randy-waterhouse/repos",
      "events_url": "https://api.github.com/users/randy-waterhouse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randy-waterhouse/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f04d1d0d758faa29d3ab165f6fffc93381cd569",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f04d1d0d758faa29d3ab165f6fffc93381cd569",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f04d1d0d758faa29d3ab165f6fffc93381cd569"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 27,
      "deletions": 25
    },
    "files": [
      {
        "sha": "009c3c5196fc08664cc01d9c164bd5841252c7df",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 27,
        "deletions": 25,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72ac792b4a544048261f35af859c7bb6d8bdb7a0/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72ac792b4a544048261f35af859c7bb6d8bdb7a0/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=72ac792b4a544048261f35af859c7bb6d8bdb7a0",
        "patch": "@@ -291,6 +291,14 @@ nodist_libbitcoin_util_a_SOURCES = $(srcdir)/obj/build.h\n #\n \n # bitcoind binary #\n+bitcoind_SOURCES = bitcoind.cpp\n+bitcoind_CPPFLAGS = $(BITCOIN_INCLUDES)\n+bitcoind_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+\n+if TARGET_WINDOWS\n+bitcoind_SOURCES += bitcoind-res.rc\n+endif\n+\n bitcoind_LDADD = \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_COMMON) \\\n@@ -304,51 +312,43 @@ bitcoind_LDADD = \\\n if ENABLE_WALLET\n bitcoind_LDADD += libbitcoin_wallet.a\n endif\n-bitcoind_SOURCES = bitcoind.cpp\n+\n+bitcoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)\n #\n \n+# bitcoin-cli binary #\n+bitcoin_cli_SOURCES = bitcoin-cli.cpp\n+bitcoin_cli_CPPFLAGS = $(BITCOIN_INCLUDES)\n+bitcoin_cli_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+\n if TARGET_WINDOWS\n-bitcoind_SOURCES += bitcoind-res.rc\n+bitcoin_cli_SOURCES += bitcoin-cli-res.rc\n endif\n \n-bitcoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)\n-bitcoind_CPPFLAGS = $(BITCOIN_INCLUDES)\n-bitcoind_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-\n-# bitcoin-cli binary #\n bitcoin_cli_LDADD = \\\n   $(LIBBITCOIN_CLI) \\\n   $(LIBBITCOIN_UTIL) \\\n-  $(BOOST_LIBS) \\\n-  $(SSL_LIBS) \\\n-  $(CRYPTO_LIBS)\n-\n-bitcoin_cli_SOURCES = \\\n-  bitcoin-cli.cpp\n+  $(LIBSECP256K1)\n \n-bitcoin_cli_CPPFLAGS = $(BITCOIN_INCLUDES)\n+bitcoin_cli_LDADD += $(BOOST_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS)\n #\n \n # bitcoin-tx binary #\n+bitcoin_tx_SOURCES = bitcoin-tx.cpp\n+bitcoin_tx_CPPFLAGS = $(BITCOIN_INCLUDES)\n+bitcoin_tx_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+\n bitcoin_tx_LDADD = \\\n   $(LIBBITCOIN_UNIVALUE) \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CRYPTO) \\\n-  $(LIBSECP256K1) \\\n-  $(BOOST_LIBS) \\\n-  $(CRYPTO_LIBS)\n+  $(LIBSECP256K1)\n \n-bitcoin_tx_SOURCES = bitcoin-tx.cpp\n-bitcoin_tx_CPPFLAGS = $(BITCOIN_INCLUDES)\n+bitcoin_tx_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n #\n-bitcoin_tx_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-\n-if TARGET_WINDOWS\n-bitcoin_cli_SOURCES += bitcoin-cli-res.rc\n-endif\n-bitcoin_cli_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n \n+# bitcoinconsensus library #\n if BUILD_BITCOIN_LIBS\n include_HEADERS = script/bitcoinconsensus.h\n libbitcoinconsensus_la_SOURCES = \\\n@@ -376,10 +376,12 @@ endif\n libbitcoinconsensus_la_LDFLAGS = -no-undefined $(RELDFLAGS)\n libbitcoinconsensus_la_LIBADD = $(CRYPTO_LIBS)\n libbitcoinconsensus_la_CPPFLAGS = $(CRYPTO_CFLAGS) -I$(builddir)/obj -DBUILD_BITCOIN_INTERNAL\n+\n if USE_LIBSECP256K1\n libbitcoinconsensus_la_LIBADD += secp256k1/libsecp256k1.la\n endif\n endif\n+#\n \n CLEANFILES = leveldb/libleveldb.a leveldb/libmemenv.a *.gcda *.gcno\n "
      }
    ]
  },
  {
    "sha": "d781d4725cf49dff8408e61e09dbc8b8db621e75",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzgxZDQ3MjVjZjQ5ZGZmODQwOGU2MWUwOWRiYzhiOGRiNjIxZTc1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-30T10:40:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-30T10:41:04Z"
      },
      "message": "Merge pull request #5234\n\n72ac792 Format build flags in src/Makefile.am. (randy-waterhouse)",
      "tree": {
        "sha": "f969fd9c2f67480cf637c5cdf6e762e24cabe582",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f969fd9c2f67480cf637c5cdf6e762e24cabe582"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d781d4725cf49dff8408e61e09dbc8b8db621e75",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUy1/AAAoJEHSBCwEjRsmmC38IAI59qX1ieyZnCmgcOSPnn+w5\nBqS9cB2yLWUi932sxTTSKAHv+I8WNQgv7RejduGT86KinuKUfaVBjJ6UMpyZJ/Rt\nnpO1KRMfuc0+krk8qQQ4cn0/SEfZJdcL186lr8FQ626vOPEBM5vDh6EmSzjGgTBK\nCVj4zEkp7asP8MTxMB1BZqAci2rDRz3kXORgJbDmkb77WurCReVVMYak4zxv1VV6\n+oZPDtBTCPRC0pFS4CVrfVinZB5WRj14OgXUCZ8ogUDV7djk0x2i+qlbkuR1M4Gr\n1jplZKkk3eC7A1x6A0ApfLiUBJXUR/siRXQkrEzqBrHEgroY69zl15+PlUy6KVA=\n=TVe/\n-----END PGP SIGNATURE-----",
        "payload": "tree f969fd9c2f67480cf637c5cdf6e762e24cabe582\nparent 5f04d1d0d758faa29d3ab165f6fffc93381cd569\nparent 72ac792b4a544048261f35af859c7bb6d8bdb7a0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422614446 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422614464 +0100\n\nMerge pull request #5234\n\n72ac792 Format build flags in src/Makefile.am. (randy-waterhouse)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d781d4725cf49dff8408e61e09dbc8b8db621e75",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d781d4725cf49dff8408e61e09dbc8b8db621e75",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d781d4725cf49dff8408e61e09dbc8b8db621e75/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f04d1d0d758faa29d3ab165f6fffc93381cd569",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f04d1d0d758faa29d3ab165f6fffc93381cd569",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f04d1d0d758faa29d3ab165f6fffc93381cd569"
      },
      {
        "sha": "72ac792b4a544048261f35af859c7bb6d8bdb7a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72ac792b4a544048261f35af859c7bb6d8bdb7a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/72ac792b4a544048261f35af859c7bb6d8bdb7a0"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 27,
      "deletions": 25
    },
    "files": [
      {
        "sha": "009c3c5196fc08664cc01d9c164bd5841252c7df",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 27,
        "deletions": 25,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d781d4725cf49dff8408e61e09dbc8b8db621e75/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d781d4725cf49dff8408e61e09dbc8b8db621e75/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=d781d4725cf49dff8408e61e09dbc8b8db621e75",
        "patch": "@@ -291,6 +291,14 @@ nodist_libbitcoin_util_a_SOURCES = $(srcdir)/obj/build.h\n #\n \n # bitcoind binary #\n+bitcoind_SOURCES = bitcoind.cpp\n+bitcoind_CPPFLAGS = $(BITCOIN_INCLUDES)\n+bitcoind_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+\n+if TARGET_WINDOWS\n+bitcoind_SOURCES += bitcoind-res.rc\n+endif\n+\n bitcoind_LDADD = \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_COMMON) \\\n@@ -304,51 +312,43 @@ bitcoind_LDADD = \\\n if ENABLE_WALLET\n bitcoind_LDADD += libbitcoin_wallet.a\n endif\n-bitcoind_SOURCES = bitcoind.cpp\n+\n+bitcoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)\n #\n \n+# bitcoin-cli binary #\n+bitcoin_cli_SOURCES = bitcoin-cli.cpp\n+bitcoin_cli_CPPFLAGS = $(BITCOIN_INCLUDES)\n+bitcoin_cli_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+\n if TARGET_WINDOWS\n-bitcoind_SOURCES += bitcoind-res.rc\n+bitcoin_cli_SOURCES += bitcoin-cli-res.rc\n endif\n \n-bitcoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)\n-bitcoind_CPPFLAGS = $(BITCOIN_INCLUDES)\n-bitcoind_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-\n-# bitcoin-cli binary #\n bitcoin_cli_LDADD = \\\n   $(LIBBITCOIN_CLI) \\\n   $(LIBBITCOIN_UTIL) \\\n-  $(BOOST_LIBS) \\\n-  $(SSL_LIBS) \\\n-  $(CRYPTO_LIBS)\n-\n-bitcoin_cli_SOURCES = \\\n-  bitcoin-cli.cpp\n+  $(LIBSECP256K1)\n \n-bitcoin_cli_CPPFLAGS = $(BITCOIN_INCLUDES)\n+bitcoin_cli_LDADD += $(BOOST_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS)\n #\n \n # bitcoin-tx binary #\n+bitcoin_tx_SOURCES = bitcoin-tx.cpp\n+bitcoin_tx_CPPFLAGS = $(BITCOIN_INCLUDES)\n+bitcoin_tx_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+\n bitcoin_tx_LDADD = \\\n   $(LIBBITCOIN_UNIVALUE) \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CRYPTO) \\\n-  $(LIBSECP256K1) \\\n-  $(BOOST_LIBS) \\\n-  $(CRYPTO_LIBS)\n+  $(LIBSECP256K1)\n \n-bitcoin_tx_SOURCES = bitcoin-tx.cpp\n-bitcoin_tx_CPPFLAGS = $(BITCOIN_INCLUDES)\n+bitcoin_tx_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n #\n-bitcoin_tx_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-\n-if TARGET_WINDOWS\n-bitcoin_cli_SOURCES += bitcoin-cli-res.rc\n-endif\n-bitcoin_cli_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n \n+# bitcoinconsensus library #\n if BUILD_BITCOIN_LIBS\n include_HEADERS = script/bitcoinconsensus.h\n libbitcoinconsensus_la_SOURCES = \\\n@@ -376,10 +376,12 @@ endif\n libbitcoinconsensus_la_LDFLAGS = -no-undefined $(RELDFLAGS)\n libbitcoinconsensus_la_LIBADD = $(CRYPTO_LIBS)\n libbitcoinconsensus_la_CPPFLAGS = $(CRYPTO_CFLAGS) -I$(builddir)/obj -DBUILD_BITCOIN_INTERNAL\n+\n if USE_LIBSECP256K1\n libbitcoinconsensus_la_LIBADD += secp256k1/libsecp256k1.la\n endif\n endif\n+#\n \n CLEANFILES = leveldb/libleveldb.a leveldb/libmemenv.a *.gcda *.gcno\n "
      }
    ]
  },
  {
    "sha": "6af674ecdc99db2eb741b8dc79e44bd0202e3855",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YWY2NzRlY2RjOTlkYjJlYjc0MWI4ZGM3OWU0NGJkMDIwMmUzODU1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-31T13:30:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-31T13:31:12Z"
      },
      "message": "Merge pull request #5707\n\n14d023f change hardcoded character constants to a set of descriptive named constants for database keys (Earlz)",
      "tree": {
        "sha": "4935f40e945074decc0906bbdc095b01305fda3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4935f40e945074decc0906bbdc095b01305fda3b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6af674ecdc99db2eb741b8dc79e44bd0202e3855",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUzNkgAAoJEHSBCwEjRsmmmnIH/026M0ok672Z319M6+pIK0WE\n/BdpDKdNz05wLb+vtQAxRb9MAnyrev10KGruH/k1zDHi2bJWWcIoZHpQ5ke0G0z3\nuzo4WcVHLd9MoeViUSX+mJDm+zSeJE16oFzm3hcWKKrieS6hwqx4Mz8WsoceLgrN\n1w2p6TtiFqTXuG4rPnwh4U/9dpsnQFu1KLxjaUAqv7b2MF+GqphgTfu8OPrBOEs5\nDdQU+ZIZWdei9aphT+i5Hbd058AoxqVrFtvsaNZ17Yz6pItAyW1L3LhmMVA8RCGz\noUHcc27AX9vW1iA8wiLCYzusF7xHiPa8VcRALgHi78ekXbE3Qc3oMfgyPcENuVA=\n=R8hy\n-----END PGP SIGNATURE-----",
        "payload": "tree 4935f40e945074decc0906bbdc095b01305fda3b\nparent d781d4725cf49dff8408e61e09dbc8b8db621e75\nparent 14d023f1aeb4f25ac0f42745b3a29c3dcd63c834\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422711017 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422711072 +0100\n\nMerge pull request #5707\n\n14d023f change hardcoded character constants to a set of descriptive named constants for database keys (Earlz)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6af674ecdc99db2eb741b8dc79e44bd0202e3855",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6af674ecdc99db2eb741b8dc79e44bd0202e3855",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6af674ecdc99db2eb741b8dc79e44bd0202e3855/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d781d4725cf49dff8408e61e09dbc8b8db621e75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d781d4725cf49dff8408e61e09dbc8b8db621e75",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d781d4725cf49dff8408e61e09dbc8b8db621e75"
      },
      {
        "sha": "14d023f1aeb4f25ac0f42745b3a29c3dcd63c834",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14d023f1aeb4f25ac0f42745b3a29c3dcd63c834",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14d023f1aeb4f25ac0f42745b3a29c3dcd63c834"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 32,
      "deletions": 21
    },
    "files": [
      {
        "sha": "f9326e5e2ea12864bb708242dc19a3087adf080c",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 21,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6af674ecdc99db2eb741b8dc79e44bd0202e3855/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6af674ecdc99db2eb741b8dc79e44bd0202e3855/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "patch": "@@ -14,31 +14,42 @@\n \n using namespace std;\n \n+static const char DB_COINS = 'c';\n+static const char DB_BLOCK_FILES = 'f';\n+static const char DB_TXINDEX = 't';\n+static const char DB_BLOCK_INDEX = 'b';\n+\n+static const char DB_BEST_BLOCK = 'B';\n+static const char DB_FLAG = 'F';\n+static const char DB_REINDEX_FLAG = 'R';\n+static const char DB_LAST_BLOCK = 'l';\n+\n+\n void static BatchWriteCoins(CLevelDBBatch &batch, const uint256 &hash, const CCoins &coins) {\n     if (coins.IsPruned())\n-        batch.Erase(make_pair('c', hash));\n+        batch.Erase(make_pair(DB_COINS, hash));\n     else\n-        batch.Write(make_pair('c', hash), coins);\n+        batch.Write(make_pair(DB_COINS, hash), coins);\n }\n \n void static BatchWriteHashBestChain(CLevelDBBatch &batch, const uint256 &hash) {\n-    batch.Write('B', hash);\n+    batch.Write(DB_BEST_BLOCK, hash);\n }\n \n CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() / \"chainstate\", nCacheSize, fMemory, fWipe) {\n }\n \n bool CCoinsViewDB::GetCoins(const uint256 &txid, CCoins &coins) const {\n-    return db.Read(make_pair('c', txid), coins);\n+    return db.Read(make_pair(DB_COINS, txid), coins);\n }\n \n bool CCoinsViewDB::HaveCoins(const uint256 &txid) const {\n-    return db.Exists(make_pair('c', txid));\n+    return db.Exists(make_pair(DB_COINS, txid));\n }\n \n uint256 CCoinsViewDB::GetBestBlock() const {\n     uint256 hashBestChain;\n-    if (!db.Read('B', hashBestChain))\n+    if (!db.Read(DB_BEST_BLOCK, hashBestChain))\n         return uint256();\n     return hashBestChain;\n }\n@@ -67,23 +78,23 @@ CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CLevel\n }\n \n bool CBlockTreeDB::ReadBlockFileInfo(int nFile, CBlockFileInfo &info) {\n-    return Read(make_pair('f', nFile), info);\n+    return Read(make_pair(DB_BLOCK_FILES, nFile), info);\n }\n \n bool CBlockTreeDB::WriteReindexing(bool fReindexing) {\n     if (fReindexing)\n-        return Write('R', '1');\n+        return Write(DB_REINDEX_FLAG, '1');\n     else\n-        return Erase('R');\n+        return Erase(DB_REINDEX_FLAG);\n }\n \n bool CBlockTreeDB::ReadReindexing(bool &fReindexing) {\n-    fReindexing = Exists('R');\n+    fReindexing = Exists(DB_REINDEX_FLAG);\n     return true;\n }\n \n bool CBlockTreeDB::ReadLastBlockFile(int &nFile) {\n-    return Read('l', nFile);\n+    return Read(DB_LAST_BLOCK, nFile);\n }\n \n bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n@@ -104,7 +115,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n             CDataStream ssKey(slKey.data(), slKey.data()+slKey.size(), SER_DISK, CLIENT_VERSION);\n             char chType;\n             ssKey >> chType;\n-            if (chType == 'c') {\n+            if (chType == DB_COINS) {\n                 leveldb::Slice slValue = pcursor->value();\n                 CDataStream ssValue(slValue.data(), slValue.data()+slValue.size(), SER_DISK, CLIENT_VERSION);\n                 CCoins coins;\n@@ -142,33 +153,33 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {\n     CLevelDBBatch batch;\n     for (std::vector<std::pair<int, const CBlockFileInfo*> >::const_iterator it=fileInfo.begin(); it != fileInfo.end(); it++) {\n-        batch.Write(make_pair('f', it->first), *it->second);\n+        batch.Write(make_pair(DB_BLOCK_FILES, it->first), *it->second);\n     }\n-    batch.Write('l', nLastFile);\n+    batch.Write(DB_LAST_BLOCK, nLastFile);\n     for (std::vector<const CBlockIndex*>::const_iterator it=blockinfo.begin(); it != blockinfo.end(); it++) {\n-        batch.Write(make_pair('b', (*it)->GetBlockHash()), CDiskBlockIndex(*it));\n+        batch.Write(make_pair(DB_BLOCK_INDEX, (*it)->GetBlockHash()), CDiskBlockIndex(*it));\n     }\n     return WriteBatch(batch, true);\n }\n \n bool CBlockTreeDB::ReadTxIndex(const uint256 &txid, CDiskTxPos &pos) {\n-    return Read(make_pair('t', txid), pos);\n+    return Read(make_pair(DB_TXINDEX, txid), pos);\n }\n \n bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> >&vect) {\n     CLevelDBBatch batch;\n     for (std::vector<std::pair<uint256,CDiskTxPos> >::const_iterator it=vect.begin(); it!=vect.end(); it++)\n-        batch.Write(make_pair('t', it->first), it->second);\n+        batch.Write(make_pair(DB_TXINDEX, it->first), it->second);\n     return WriteBatch(batch);\n }\n \n bool CBlockTreeDB::WriteFlag(const std::string &name, bool fValue) {\n-    return Write(std::make_pair('F', name), fValue ? '1' : '0');\n+    return Write(std::make_pair(DB_FLAG, name), fValue ? '1' : '0');\n }\n \n bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue) {\n     char ch;\n-    if (!Read(std::make_pair('F', name), ch))\n+    if (!Read(std::make_pair(DB_FLAG, name), ch))\n         return false;\n     fValue = ch == '1';\n     return true;\n@@ -179,7 +190,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n     boost::scoped_ptr<leveldb::Iterator> pcursor(NewIterator());\n \n     CDataStream ssKeySet(SER_DISK, CLIENT_VERSION);\n-    ssKeySet << make_pair('b', uint256());\n+    ssKeySet << make_pair(DB_BLOCK_INDEX, uint256());\n     pcursor->Seek(ssKeySet.str());\n \n     // Load mapBlockIndex\n@@ -190,7 +201,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n             CDataStream ssKey(slKey.data(), slKey.data()+slKey.size(), SER_DISK, CLIENT_VERSION);\n             char chType;\n             ssKey >> chType;\n-            if (chType == 'b') {\n+            if (chType == DB_BLOCK_INDEX) {\n                 leveldb::Slice slValue = pcursor->value();\n                 CDataStream ssValue(slValue.data(), slValue.data()+slValue.size(), SER_DISK, CLIENT_VERSION);\n                 CDiskBlockIndex diskindex;"
      }
    ]
  },
  {
    "sha": "fdf80ea7b19dde7ddec3baffeb1400fe1ca1c37a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZGY4MGVhN2IxOWRkZTdkZGVjM2JhZmZlYjE0MDBmZTFjYTFjMzdh",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-01-31T16:39:22Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-01-31T16:39:22Z"
      },
      "message": "[Qt] allow unit changes for read-only BitcoinAmountField\n\n- fixes #5725",
      "tree": {
        "sha": "76dbe5e07f6c73f3827e52c670c611046706680d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76dbe5e07f6c73f3827e52c670c611046706680d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fdf80ea7b19dde7ddec3baffeb1400fe1ca1c37a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdf80ea7b19dde7ddec3baffeb1400fe1ca1c37a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fdf80ea7b19dde7ddec3baffeb1400fe1ca1c37a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdf80ea7b19dde7ddec3baffeb1400fe1ca1c37a/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6af674ecdc99db2eb741b8dc79e44bd0202e3855"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d31a1e018b2898a5bea2338abd3ad84002040cdb",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdf80ea7b19dde7ddec3baffeb1400fe1ca1c37a/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdf80ea7b19dde7ddec3baffeb1400fe1ca1c37a/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=fdf80ea7b19dde7ddec3baffeb1400fe1ca1c37a",
        "patch": "@@ -278,7 +278,6 @@ void BitcoinAmountField::setValue(const CAmount& value)\n void BitcoinAmountField::setReadOnly(bool fReadOnly)\n {\n     amount->setReadOnly(fReadOnly);\n-    unit->setEnabled(!fReadOnly);\n }\n \n void BitcoinAmountField::unitChanged(int idx)"
      }
    ]
  },
  {
    "sha": "86731603d48de65960a7f2cd4da60e7ae1760813",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjczMTYwM2Q0OGRlNjU5NjBhN2YyY2Q0ZGE2MGU3YWUxNzYwODEz",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2014-12-13T03:15:25Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:36:44Z"
      },
      "message": "Remove bootstrap.md\n\nSee #5455",
      "tree": {
        "sha": "031702544fcd251375f990001105e6d8f0517805",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/031702544fcd251375f990001105e6d8f0517805"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86731603d48de65960a7f2cd4da60e7ae1760813",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86731603d48de65960a7f2cd4da60e7ae1760813",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86731603d48de65960a7f2cd4da60e7ae1760813",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86731603d48de65960a7f2cd4da60e7ae1760813/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6af674ecdc99db2eb741b8dc79e44bd0202e3855"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 1,
      "deletions": 57
    },
    "files": [
      {
        "sha": "0ade8f99238abb37a616b51a4fcfc2eb23ffc8d3",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86731603d48de65960a7f2cd4da60e7ae1760813/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86731603d48de65960a7f2cd4da60e7ae1760813/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=86731603d48de65960a7f2cd4da60e7ae1760813",
        "patch": "@@ -3,7 +3,7 @@ Bitcoin Core 0.10.99\n \n Setup\n ---------------------\n-[Bitcoin Core](http://bitcoin.org/en/download) is the original Bitcoin client and it builds the backbone of the network. However, it downloads and stores the entire history of Bitcoin transactions (which is currently several GBs); depending on the speed of your computer and network connection, the synchronization process can take anywhere from a few hours to a day or more. Thankfully you only have to do this once. If you would like the process to go faster you can [download the blockchain directly](bootstrap.md).\n+[Bitcoin Core](http://bitcoin.org/en/download) is the original Bitcoin client and it builds the backbone of the network. However, it downloads and stores the entire history of Bitcoin transactions (which is currently several GBs); depending on the speed of your computer and network connection, the synchronization process can take anywhere from a few hours to a day or more.\n \n Running\n ---------------------"
      },
      {
        "sha": "b84fd24b11d9270a5c3b23dfdb2b2e77ede2ecbd",
        "filename": "doc/bootstrap.md",
        "status": "removed",
        "additions": 0,
        "deletions": 56,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6af674ecdc99db2eb741b8dc79e44bd0202e3855/doc/bootstrap.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6af674ecdc99db2eb741b8dc79e44bd0202e3855/doc/bootstrap.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bootstrap.md?ref=6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "patch": "@@ -1,56 +0,0 @@\n-### Bootstrap the Blockchain Synchronization\n-\n-Normally the Bitcoin client will download the transaction and network information, called the blockchain, from the network by syncing with the other clients. This process can take quite some time as the [Bitcoin blockchain](https://blockchain.info/charts/blocks-size) is growing bigger and bigger for each day. Luckily there is a safe and fast way to speed up this process. We'll show you how to bootstrap your blockchain to bring your client up to speed in just a few simple steps.\n-\n-### Requirements\n-\n-- A fresh install of the Bitcoin client software.\n-\n-### Download the blockchain via BitTorrent\n-\n-Jeff Garzik, Bitcoin Core developer, offers an [torrent file](https://bitcointalk.org/index.php?topic=145386.0) for bootstrapping purposes that is updated often. BitTorrent is a protocol that speeds up the downloading of large files by using the other clients in the network. Examples of free and safe open source clients are [Deluge](http://deluge-torrent.org/) or [qBittorrent](http://www.qbittorrent.org/). A guide to installing and configuring the torrent clients can be found [here](http://dev.deluge-torrent.org/wiki/UserGuide) for Deluge and [here](http://qbforums.shiki.hu/) for qBittorrent. A further in-depth tutorial on BitTorrent can be found [here](http://www.howtogeek.com/howto/31846/bittorrent-for-beginners-how-get-started-downloading-torrents/).\n-\n-With the client installed we'll proceed to download the blockchain torrent file. Use the following magnet link:\n-\n-\tmagnet:?xt=urn:btih:2d4e6c1f96c5d5fb260dff92aea4e600227f1aea&dn=bootstrap.dat&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.ccc.de:80&tr=udp://tracker.istole.it:80\n-\t\n- or go to [Jeff Garzik's topic](https://bitcointalk.org/index.php?topic=145386.0) for a signed magnet link. Alternatively you can use the [.torrent file](http://sourceforge.net/projects/bitcoin/files/Bitcoin/blockchain/bootstrap.dat.torrent/download) found on SourceForge.\n-     \n-![Fig1](img/bootstrap1.png)\n-\n-The download page should look like this, with a countdown to the download. If it does not work click the direct download link.\n-\n-The torrent client installed will recognize the download of the torrent file. Save the bootstrap.dat file to the folder you use for downloads. The image below shows the torrent download in qBittorrent, with current speed and ETA highlighted.\n-\n-![Fig2](img/bootstrap2.png)\n-\n-### Importing the blockchain\n-Exit the Bitcoin client software if you have it running. Be sure not to have an actively used wallet in use. We are going to copy the download of the blockchain to the Bitcoin client data directory. You should run the client software at least once so it can generate the data directory. Copy the downloaded bootstrap.dat file into the Bitcoin data folder.\n-\n-**For Windows users:**\n-Open explorer, and type into the address bar:\n-\n-\t%APPDATA%\\Bitcoin\n-    \n-This will open up the data folder. It should look like the image below. Copy over the bootstrap.dat from your download folder to this directory.\n-![Fig4](img/bootstrap4.png)\n-\n-**For OSX users:**\n-Open Finder by pressing Press [shift] + [cmd] + [g] and enter:\n-\n-\t~/Library/Application Support/Bitcoin/\n-    \n-**For Linux users:**\n-The directory is hidden in your User folder. Go to:\n-\n-\t~/.bitcoin/\n-    \n-### Importing the blockchain\n-Now start the Bitcoin client software. It should show \"Importing blocks from disk\" like the image below. \n-![Fig5](img/bootstrap5.png)\n-\n-Wait until the import finishes. The client will download the last days not covered by the import. Congratulations you have successfully imported the blockchain!\n-\n-### Is this safe?\n-\n-Yes, the above method is safe. The download contains only raw blockchain data and the client verifies this on import. Do not download the blockchain from unofficial sources, especially if they provide `*.rev` and `*.sst` files. These files are not verified and can contain malicious edits."
      }
    ]
  },
  {
    "sha": "d6bed1514c2e72ea2006942c23c31e3f518d4a77",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNmJlZDE1MTRjMmU3MmVhMjAwNjk0MmMyM2MzMWUzZjUxOGQ0YTc3",
    "commit": {
      "author": {
        "name": "Manuel Araoz",
        "email": "manuelaraoz@gmail.com",
        "date": "2014-12-16T19:26:07Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:36:44Z"
      },
      "message": "remove sig_canonical.json and sig_noncanonical.json",
      "tree": {
        "sha": "ab200837bc2e5b46908e62462d5fcf126392cd91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab200837bc2e5b46908e62462d5fcf126392cd91"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6bed1514c2e72ea2006942c23c31e3f518d4a77",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6bed1514c2e72ea2006942c23c31e3f518d4a77",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6bed1514c2e72ea2006942c23c31e3f518d4a77",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6bed1514c2e72ea2006942c23c31e3f518d4a77/comments",
    "author": {
      "login": "maraoz",
      "id": 287189,
      "node_id": "MDQ6VXNlcjI4NzE4OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/287189?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maraoz",
      "html_url": "https://github.com/maraoz",
      "followers_url": "https://api.github.com/users/maraoz/followers",
      "following_url": "https://api.github.com/users/maraoz/following{/other_user}",
      "gists_url": "https://api.github.com/users/maraoz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maraoz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maraoz/subscriptions",
      "organizations_url": "https://api.github.com/users/maraoz/orgs",
      "repos_url": "https://api.github.com/users/maraoz/repos",
      "events_url": "https://api.github.com/users/maraoz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maraoz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86731603d48de65960a7f2cd4da60e7ae1760813",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86731603d48de65960a7f2cd4da60e7ae1760813",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86731603d48de65960a7f2cd4da60e7ae1760813"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 0,
      "deletions": 31
    },
    "files": [
      {
        "sha": "90494439fa552dd167c709e669f0c858f5deb2c4",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6bed1514c2e72ea2006942c23c31e3f518d4a77/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6bed1514c2e72ea2006942c23c31e3f518d4a77/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=d6bed1514c2e72ea2006942c23c31e3f518d4a77",
        "patch": "@@ -20,8 +20,6 @@ EXTRA_DIST += \\\n JSON_TEST_FILES = \\\n   test/data/script_valid.json \\\n   test/data/base58_keys_valid.json \\\n-  test/data/sig_canonical.json \\\n-  test/data/sig_noncanonical.json \\\n   test/data/base58_encode_decode.json \\\n   test/data/base58_keys_invalid.json \\\n   test/data/script_invalid.json \\"
      },
      {
        "sha": "e43a08629a1ae2b51feba692b244b8a301649208",
        "filename": "src/test/data/sig_canonical.json",
        "status": "removed",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86731603d48de65960a7f2cd4da60e7ae1760813/src/test/data/sig_canonical.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86731603d48de65960a7f2cd4da60e7ae1760813/src/test/data/sig_canonical.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/sig_canonical.json?ref=86731603d48de65960a7f2cd4da60e7ae1760813",
        "patch": "@@ -1,7 +0,0 @@\n-[\n-    \"300602010002010001\",\n-    \"3008020200ff020200ff01\",\n-    \"304402203932c892e2e550f3af8ee4ce9c215a87f9bb831dcac87b2838e2c2eaa891df0c022030b61dd36543125d56b9f9f3a1f9353189e5af33cdda8d77a5209aec03978fa001\",\n-    \"30450220076045be6f9eca28ff1ec606b833d0b87e70b2a630f5e3a496b110967a40f90a0221008fffd599910eefe00bc803c688c2eca1d2ba7f6b180620eaa03488e6585db6ba01\",\n-    \"3046022100876045be6f9eca28ff1ec606b833d0b87e70b2a630f5e3a496b110967a40f90a0221008fffd599910eefe00bc803c688c2eca1d2ba7f6b180620eaa03488e6585db6ba01\"\n-]"
      },
      {
        "sha": "d9a6c1cdd872ec1d64ac429577b6b210f67b17b8",
        "filename": "src/test/data/sig_noncanonical.json",
        "status": "removed",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86731603d48de65960a7f2cd4da60e7ae1760813/src/test/data/sig_noncanonical.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86731603d48de65960a7f2cd4da60e7ae1760813/src/test/data/sig_noncanonical.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/sig_noncanonical.json?ref=86731603d48de65960a7f2cd4da60e7ae1760813",
        "patch": "@@ -1,22 +0,0 @@\n-[\n-    \"non-hex strings are ignored\",\n-\n-    \"too short:\",    \"30050201FF020001\",\n-    \"too long:\",     \"30470221005990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba6105022200002d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"hashtype:\",     \"304402205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed11\",\n-    \"type:\",         \"314402205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"total length:\", \"304502205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"S len oob:\",    \"301F01205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb101\",\n-    \"R+S:\",          \"304502205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed0001\",\n-\n-    \"R type:\",       \"304401205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"R len = 0:\",    \"3024020002202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"R<0:\",          \"304402208990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"R padded:\",     \"30450221005990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-\n-\n-    \"S type:\",       \"304402205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610501202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"S len = 0:\",    \"302402205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba6105020001\",\n-    \"S<0:\",          \"304402205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba61050220fd5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"S padded:\",     \"304502205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba61050221002d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\"\n-]"
      }
    ]
  },
  {
    "sha": "bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZmMyOWRjZGM1YzJhNzVhODJkNmY1MDM0YzU0N2E4ZjRhYzk0Mzc5",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2014-12-26T10:03:44Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:36:45Z"
      },
      "message": "Improve gitian build guide\n\nPoint to the Debian 7.7 installer\nFix wording now that we only use a single image\nRemove bitcoin checkout steps, they are covered in release-process",
      "tree": {
        "sha": "005ee4229998bdc9d21a9b001ab63e17ab1d629a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/005ee4229998bdc9d21a9b001ab63e17ab1d629a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d6bed1514c2e72ea2006942c23c31e3f518d4a77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6bed1514c2e72ea2006942c23c31e3f518d4a77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6bed1514c2e72ea2006942c23c31e3f518d4a77"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 15,
      "deletions": 18
    },
    "files": [
      {
        "sha": "efa5ef17dc155f7795033cca98644a6dcc93f4fb",
        "filename": "doc/gitian-building.md",
        "status": "modified",
        "additions": 15,
        "deletions": 18,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379",
        "patch": "@@ -24,7 +24,7 @@ Table of Contents\n - [Connecting to the VM](#connecting-to-the-vm)\n - [Setting up Debian for gitian building](#setting-up-debian-for-gitian-building)\n - [Installing gitian](#installing-gitian)\n-- [Setting up gitian images](#setting-up-gitian-images)\n+- [Setting up the gitian image](#setting-up-the-gitian-image)\n - [Getting and building the inputs](#getting-and-building-the-inputs)\n - [Building Bitcoin](#building-bitcoin)\n - [Building an alternative repository](#building-an-alternative-repository)\n@@ -74,11 +74,11 @@ In the VirtualBox GUI click \"Create\" and choose the following parameters in the\n - Disk size: at least 40GB; as low as 20GB *may* be possible, but better to err on the safe side \n - Push the `Create` button\n \n-Get the [Debian 7.4 net installer](http://ftp.at.debian.org/debian-jigdo/current/amd64/iso-cd/debian-7.4.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n+Get the [Debian 7.7 net installer](http://cdimage.debian.org/debian-cd/7.7.0/amd64/iso-cd/debian-7.7.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n This DVD image can be validated using a SHA256 hashing tool, for example on\n Unixy OSes by entering the following in a terminal:\n \n-    echo \"b712a141bc60269db217d3b3e456179bd6b181645f90e4aac9c42ed63de492e9  debian-7.4.0-amd64-netinst.iso\" | sha256sum -c\n+    echo \"d440e85b4121f94608748139f25dbce1ad36771348b002fe07d4d44b9d9e623f  debian-7.7.0-amd64-netinst.iso\" | sha256sum -c\n     # (must return OK)\n \n After creating the VM, we need to configure it. \n@@ -109,7 +109,7 @@ Then start the VM. On the first launch you will be asked for a CD or DVD image.\n Installing Debian\n ------------------\n \n-In this section it will be explained how to install Debian on the newly created VM.\n+This section will explain how to install Debian on the newly created VM.\n \n - Choose the non-graphical installer.  We do not need the graphical environment, it will only increase installation time and disk usage.\n \n@@ -277,24 +277,21 @@ cd ..\n \n **Note**: When sudo asks for a password, enter the password for the user *debian* not for *root*.\n \n-Clone the git repositories for bitcoin and gitian and then checkout the bitcoin version that you want to build.\n+Clone the git repositories for bitcoin and gitian.\n \n ```bash\n git clone https://github.com/devrandom/gitian-builder.git\n git clone https://github.com/bitcoin/bitcoin\n-cd bitcoin\n-git checkout v${VERSION}\n-cd ..\n ```\n \n-Setting up gitian images\n+Setting up the gitian image\n -------------------------\n \n-Gitian needs virtual images of the operating system to build in.\n-Currently this is Ubuntu Precise for x86_64.\n-These images will be copied and used every time that a build is started to\n+Gitian needs a virtual image of the operating system to build in.\n+Currently this is Ubuntu Precise x86_64.\n+This image will be copied and used every time that a build is started to\n make sure that the build is deterministic.\n-Creating the images will take a while, but only has to be done once.\n+Creating the image will take a while, but only has to be done once.\n \n Execute the following as user `debian`:\n \n@@ -303,7 +300,7 @@ cd gitian-builder\n bin/make-base-vm --lxc --arch amd64 --suite precise\n ```\n \n-There will be a lot of warnings printed during build of the images. These can be ignored.\n+There will be a lot of warnings printed during build of the image. These can be ignored.\n \n **Note**: When sudo asks for a password, enter the password for the user *debian* not for *root*.\n \n@@ -322,7 +319,7 @@ To build Bitcoin (for Linux, OSX and Windows) just follow the steps under 'perfo\n gitian builds' in [doc/release-process.md](release-process.md) in the bitcoin repository.\n \n This may take a long time as it also builds the dependencies needed for each descriptor.\n-These dependencies will be cached after a successful build to avoid rebuilding them when possible.\n+These dependencies will be cached after a successful build to avoid rebuilding them where possible.\n \n At any time you can check the package installation and build progress with\n \n@@ -382,9 +379,9 @@ When you execute `gsign` you will get an error from GPG, which can be ignored. C\n in `gitian.sigs` to your signing machine and do\n \n ```bash\n-    gpg --detach-sign ${VERSION}-linux/${SIGNER}/bitcoin-build.assert\n-    gpg --detach-sign ${VERSION}-win/${SIGNER}/bitcoin-build.assert\n-    gpg --detach-sign ${VERSION}-osx/${SIGNER}/bitcoin-build.assert\n+    gpg --detach-sign ${VERSION}-linux/${SIGNER}/bitcoin-linux-build.assert\n+    gpg --detach-sign ${VERSION}-win/${SIGNER}/bitcoin-win-build.assert\n+    gpg --detach-sign ${VERSION}-osx-unsigned/${SIGNER}/bitcoin-osx-build.assert\n ```\n \n This will create the `.sig` files that can be committed together with the `.assert` files to assert your"
      }
    ]
  },
  {
    "sha": "91a9fe094b3f0091f40ccdb19581b90e86888ff0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MWE5ZmUwOTRiM2YwMDkxZjQwY2NkYjE5NTgxYjkwZTg2ODg4ZmYw",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-01-05T20:44:55Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:37:01Z"
      },
      "message": "Fix typo - sentence starts with capital letter",
      "tree": {
        "sha": "52835914858b2adfeb5bc4eb270546eb487a2f10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52835914858b2adfeb5bc4eb270546eb487a2f10"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91a9fe094b3f0091f40ccdb19581b90e86888ff0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91a9fe094b3f0091f40ccdb19581b90e86888ff0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91a9fe094b3f0091f40ccdb19581b90e86888ff0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91a9fe094b3f0091f40ccdb19581b90e86888ff0/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "24a4d7c22cc84e52ac9c2becd1aa2af2616cb3cd",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a9fe094b3f0091f40ccdb19581b90e86888ff0/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a9fe094b3f0091f40ccdb19581b90e86888ff0/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=91a9fe094b3f0091f40ccdb19581b90e86888ff0",
        "patch": "@@ -82,7 +82,7 @@ Value getnewaddress(const Array& params, bool fHelp)\n             \"If 'account' is specified (DEPRECATED), it is added to the address book \\n\"\n             \"so payments received with the address will be credited to 'account'.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"account\\\"        (string, optional) DEPRECATED. The account name for the address to be linked to. if not provided, the default account \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.\\n\"\n+            \"1. \\\"account\\\"        (string, optional) DEPRECATED. The account name for the address to be linked to. If not provided, the default account \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"bitcoinaddress\\\"    (string) The new bitcoin address\\n\"\n             \"\\nExamples:\\n\""
      }
    ]
  },
  {
    "sha": "3800135ad382a0a980eb20bad8bacbbf206f8cea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODAwMTM1YWQzODJhMGE5ODBlYjIwYmFkOGJhY2JiZjIwNmY4Y2Vh",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-01-07T17:11:59Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:37:01Z"
      },
      "message": "Fix typo",
      "tree": {
        "sha": "3fbe3a6263b9f99e7d60a35c86ea112fbb8135f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3fbe3a6263b9f99e7d60a35c86ea112fbb8135f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3800135ad382a0a980eb20bad8bacbbf206f8cea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3800135ad382a0a980eb20bad8bacbbf206f8cea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3800135ad382a0a980eb20bad8bacbbf206f8cea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3800135ad382a0a980eb20bad8bacbbf206f8cea/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91a9fe094b3f0091f40ccdb19581b90e86888ff0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91a9fe094b3f0091f40ccdb19581b90e86888ff0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91a9fe094b3f0091f40ccdb19581b90e86888ff0"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5f60dff06c86daa574ab846310a26546f6b8ded5",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3800135ad382a0a980eb20bad8bacbbf206f8cea/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3800135ad382a0a980eb20bad8bacbbf206f8cea/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=3800135ad382a0a980eb20bad8bacbbf206f8cea",
        "patch": "@@ -159,7 +159,7 @@ tar -xzvf db-4.8.30.NC.tar.gz\n \n # Build the library and install to our prefix\n cd db-4.8.30.NC/build_unix/\n-#  Note: Do a static build so that it can be embedded into the exectuable, instead of having to find a .so at runtime\n+#  Note: Do a static build so that it can be embedded into the executable, instead of having to find a .so at runtime\n ../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX\n make install\n "
      }
    ]
  },
  {
    "sha": "5262fde0ecd19f1febbfcd488f2be41c5dffd047",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjYyZmRlMGVjZDE5ZjFmZWJiZmNkNDg4ZjJiZTQxYzVkZmZkMDQ3",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-01-08T10:44:25Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:38:28Z"
      },
      "message": "Remove whitespaces before double colon in errors and logs",
      "tree": {
        "sha": "413401ca7111906838b0f5f5d0c0604bcce52d19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/413401ca7111906838b0f5f5d0c0604bcce52d19"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5262fde0ecd19f1febbfcd488f2be41c5dffd047",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5262fde0ecd19f1febbfcd488f2be41c5dffd047",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5262fde0ecd19f1febbfcd488f2be41c5dffd047",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5262fde0ecd19f1febbfcd488f2be41c5dffd047/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3800135ad382a0a980eb20bad8bacbbf206f8cea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3800135ad382a0a980eb20bad8bacbbf206f8cea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3800135ad382a0a980eb20bad8bacbbf206f8cea"
      }
    ],
    "stats": {
      "total": 434,
      "additions": 217,
      "deletions": 217
    },
    "files": [
      {
        "sha": "323939913b7389b1ec823ec14940c9c6f9d3a5a0",
        "filename": "src/alert.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -149,7 +149,7 @@ bool CAlert::CheckSignature() const\n {\n     CPubKey key(Params().AlertKey());\n     if (!key.Verify(Hash(vchMsg.begin(), vchMsg.end()), vchSig))\n-        return error(\"CAlert::CheckSignature() : verify signature failed\");\n+        return error(\"CAlert::CheckSignature(): verify signature failed\");\n \n     // Now unserialize the data\n     CDataStream sMsg(vchMsg, SER_NETWORK, PROTOCOL_VERSION);"
      },
      {
        "sha": "a7f885135bae643aeeb6c4147b9712dd11b1948c",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -43,7 +43,7 @@ void CDBEnv::EnvShutdown()\n     fDbEnvInit = false;\n     int ret = dbenv.close(0);\n     if (ret != 0)\n-        LogPrintf(\"CDBEnv::EnvShutdown : Error %d shutting down database environment: %s\\n\", ret, DbEnv::strerror(ret));\n+        LogPrintf(\"CDBEnv::EnvShutdown: Error %d shutting down database environment: %s\\n\", ret, DbEnv::strerror(ret));\n     if (!fMockDb)\n         DbEnv(0).remove(path.string().c_str(), 0);\n }\n@@ -75,7 +75,7 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n     boost::filesystem::path pathLogDir = path / \"database\";\n     TryCreateDirectory(pathLogDir);\n     boost::filesystem::path pathErrorFile = path / \"db.log\";\n-    LogPrintf(\"CDBEnv::Open : LogDir=%s ErrorFile=%s\\n\", pathLogDir.string(), pathErrorFile.string());\n+    LogPrintf(\"CDBEnv::Open: LogDir=%s ErrorFile=%s\\n\", pathLogDir.string(), pathErrorFile.string());\n \n     unsigned int nEnvFlags = 0;\n     if (GetBoolArg(\"-privdb\", true))\n@@ -102,7 +102,7 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n                              nEnvFlags,\n                          S_IRUSR | S_IWUSR);\n     if (ret != 0)\n-        return error(\"CDBEnv::Open : Error %d opening database environment: %s\\n\", ret, DbEnv::strerror(ret));\n+        return error(\"CDBEnv::Open: Error %d opening database environment: %s\\n\", ret, DbEnv::strerror(ret));\n \n     fDbEnvInit = true;\n     fMockDb = false;\n@@ -112,7 +112,7 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n void CDBEnv::MakeMock()\n {\n     if (fDbEnvInit)\n-        throw runtime_error(\"CDBEnv::MakeMock : Already initialized\");\n+        throw runtime_error(\"CDBEnv::MakeMock: Already initialized\");\n \n     boost::this_thread::interruption_point();\n \n@@ -135,7 +135,7 @@ void CDBEnv::MakeMock()\n                              DB_PRIVATE,\n                          S_IRUSR | S_IWUSR);\n     if (ret > 0)\n-        throw runtime_error(strprintf(\"CDBEnv::MakeMock : Error %d opening database environment.\", ret));\n+        throw runtime_error(strprintf(\"CDBEnv::MakeMock: Error %d opening database environment.\", ret));\n \n     fDbEnvInit = true;\n     fMockDb = true;\n@@ -172,14 +172,14 @@ bool CDBEnv::Salvage(std::string strFile, bool fAggressive, std::vector<CDBEnv::\n     Db db(&dbenv, 0);\n     int result = db.verify(strFile.c_str(), NULL, &strDump, flags);\n     if (result == DB_VERIFY_BAD) {\n-        LogPrintf(\"CDBEnv::Salvage : Database salvage found errors, all data may not be recoverable.\\n\");\n+        LogPrintf(\"CDBEnv::Salvage: Database salvage found errors, all data may not be recoverable.\\n\");\n         if (!fAggressive) {\n-            LogPrintf(\"CDBEnv::Salvage : Rerun with aggressive mode to ignore errors and continue.\\n\");\n+            LogPrintf(\"CDBEnv::Salvage: Rerun with aggressive mode to ignore errors and continue.\\n\");\n             return false;\n         }\n     }\n     if (result != 0 && result != DB_VERIFY_BAD) {\n-        LogPrintf(\"CDBEnv::Salvage : Database salvage failed with result %d.\\n\", result);\n+        LogPrintf(\"CDBEnv::Salvage: Database salvage failed with result %d.\\n\", result);\n         return false;\n     }\n \n@@ -233,7 +233,7 @@ CDB::CDB(const std::string& strFilename, const char* pszMode, bool fFlushOnClose\n     {\n         LOCK(bitdb.cs_db);\n         if (!bitdb.Open(GetDataDir()))\n-            throw runtime_error(\"CDB : Failed to open database environment.\");\n+            throw runtime_error(\"CDB: Failed to open database environment.\");\n \n         strFile = strFilename;\n         ++bitdb.mapFileUseCount[strFile];\n@@ -246,7 +246,7 @@ CDB::CDB(const std::string& strFilename, const char* pszMode, bool fFlushOnClose\n                 DbMpoolFile* mpf = pdb->get_mpf();\n                 ret = mpf->set_flags(DB_MPOOL_NOFILE, 1);\n                 if (ret != 0)\n-                    throw runtime_error(strprintf(\"CDB : Failed to configure for no temp file backing for database %s\", strFile));\n+                    throw runtime_error(strprintf(\"CDB: Failed to configure for no temp file backing for database %s\", strFile));\n             }\n \n             ret = pdb->open(NULL,                               // Txn pointer\n@@ -261,7 +261,7 @@ CDB::CDB(const std::string& strFilename, const char* pszMode, bool fFlushOnClose\n                 pdb = NULL;\n                 --bitdb.mapFileUseCount[strFile];\n                 strFile = \"\";\n-                throw runtime_error(strprintf(\"CDB : Error %d, can't open database %s\", ret, strFile));\n+                throw runtime_error(strprintf(\"CDB: Error %d, can't open database %s\", ret, strFile));\n             }\n \n             if (fCreate && !Exists(string(\"version\"))) {\n@@ -342,7 +342,7 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                 bitdb.mapFileUseCount.erase(strFile);\n \n                 bool fSuccess = true;\n-                LogPrintf(\"CDB::Rewrite : Rewriting %s...\\n\", strFile);\n+                LogPrintf(\"CDB::Rewrite: Rewriting %s...\\n\", strFile);\n                 string strFileRes = strFile + \".rewrite\";\n                 { // surround usage of db with extra {}\n                     CDB db(strFile.c_str(), \"r\");\n@@ -355,7 +355,7 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                                             DB_CREATE,          // Flags\n                                             0);\n                     if (ret > 0) {\n-                        LogPrintf(\"CDB::Rewrite : Can't create database file %s\\n\", strFileRes);\n+                        LogPrintf(\"CDB::Rewrite: Can't create database file %s\\n\", strFileRes);\n                         fSuccess = false;\n                     }\n \n@@ -404,7 +404,7 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                         fSuccess = false;\n                 }\n                 if (!fSuccess)\n-                    LogPrintf(\"CDB::Rewrite : Failed to rewrite database file %s\\n\", strFileRes);\n+                    LogPrintf(\"CDB::Rewrite: Failed to rewrite database file %s\\n\", strFileRes);\n                 return fSuccess;\n             }\n         }\n@@ -418,7 +418,7 @@ void CDBEnv::Flush(bool fShutdown)\n {\n     int64_t nStart = GetTimeMillis();\n     // Flush log data to the actual data file on all files that are not in use\n-    LogPrint(\"db\", \"CDBEnv::Flush : Flush(%s)%s\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" database not started\");\n+    LogPrint(\"db\", \"CDBEnv::Flush: Flush(%s)%s\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" database not started\");\n     if (!fDbEnvInit)\n         return;\n     {\n@@ -427,21 +427,21 @@ void CDBEnv::Flush(bool fShutdown)\n         while (mi != mapFileUseCount.end()) {\n             string strFile = (*mi).first;\n             int nRefCount = (*mi).second;\n-            LogPrint(\"db\", \"CDBEnv::Flush : Flushing %s (refcount = %d)...\\n\", strFile, nRefCount);\n+            LogPrint(\"db\", \"CDBEnv::Flush: Flushing %s (refcount = %d)...\\n\", strFile, nRefCount);\n             if (nRefCount == 0) {\n                 // Move log data to the dat file\n                 CloseDb(strFile);\n-                LogPrint(\"db\", \"CDBEnv::Flush : %s checkpoint\\n\", strFile);\n+                LogPrint(\"db\", \"CDBEnv::Flush: %s checkpoint\\n\", strFile);\n                 dbenv.txn_checkpoint(0, 0, 0);\n-                LogPrint(\"db\", \"CDBEnv::Flush : %s detach\\n\", strFile);\n+                LogPrint(\"db\", \"CDBEnv::Flush: %s detach\\n\", strFile);\n                 if (!fMockDb)\n                     dbenv.lsn_reset(strFile.c_str(), 0);\n-                LogPrint(\"db\", \"CDBEnv::Flush : %s closed\\n\", strFile);\n+                LogPrint(\"db\", \"CDBEnv::Flush: %s closed\\n\", strFile);\n                 mapFileUseCount.erase(mi++);\n             } else\n                 mi++;\n         }\n-        LogPrint(\"db\", \"CDBEnv::Flush : Flush(%s)%s took %15dms\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" database not started\", GetTimeMillis() - nStart);\n+        LogPrint(\"db\", \"CDBEnv::Flush: Flush(%s)%s took %15dms\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" database not started\", GetTimeMillis() - nStart);\n         if (fShutdown) {\n             char** listp;\n             if (mapFileUseCount.empty()) {"
      },
      {
        "sha": "c2af23139cd4170d3be8cd3effa5d2299fa0e23f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -977,7 +977,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n             } catch (const boost::filesystem::filesystem_error& e) {\n                 // Note: hardlink creation failing is not a disaster, it just means\n                 // blocks will get re-downloaded from peers.\n-                LogPrintf(\"Error hardlinking blk%04u.dat : %s\\n\", i, e.what());\n+                LogPrintf(\"Error hardlinking blk%04u.dat: %s\\n\", i, e.what());\n                 break;\n             }\n         }"
      },
      {
        "sha": "22cd08f30c8cfdd9628a4481f4c0ae5bc3a6911b",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -36,7 +36,7 @@ bool CBasicKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n bool CBasicKeyStore::AddCScript(const CScript& redeemScript)\n {\n     if (redeemScript.size() > MAX_SCRIPT_ELEMENT_SIZE)\n-        return error(\"CBasicKeyStore::AddCScript() : redeemScripts > %i bytes are invalid\", MAX_SCRIPT_ELEMENT_SIZE);\n+        return error(\"CBasicKeyStore::AddCScript(): redeemScripts > %i bytes are invalid\", MAX_SCRIPT_ELEMENT_SIZE);\n \n     LOCK(cs_KeyStore);\n     mapScripts[CScriptID(redeemScript)] = redeemScript;"
      },
      {
        "sha": "629e0dcbc0183077fe5fdf81758b21ad8102fa61",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 95,
        "deletions": 95,
        "changes": 190,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -820,29 +820,29 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n {\n     // Basic checks that don't depend on any context\n     if (tx.vin.empty())\n-        return state.DoS(10, error(\"CheckTransaction() : vin empty\"),\n+        return state.DoS(10, error(\"CheckTransaction(): vin empty\"),\n                          REJECT_INVALID, \"bad-txns-vin-empty\");\n     if (tx.vout.empty())\n-        return state.DoS(10, error(\"CheckTransaction() : vout empty\"),\n+        return state.DoS(10, error(\"CheckTransaction(): vout empty\"),\n                          REJECT_INVALID, \"bad-txns-vout-empty\");\n     // Size limits\n     if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, error(\"CheckTransaction() : size limits failed\"),\n+        return state.DoS(100, error(\"CheckTransaction(): size limits failed\"),\n                          REJECT_INVALID, \"bad-txns-oversize\");\n \n     // Check for negative or overflow output values\n     CAmount nValueOut = 0;\n     BOOST_FOREACH(const CTxOut& txout, tx.vout)\n     {\n         if (txout.nValue < 0)\n-            return state.DoS(100, error(\"CheckTransaction() : txout.nValue negative\"),\n+            return state.DoS(100, error(\"CheckTransaction(): txout.nValue negative\"),\n                              REJECT_INVALID, \"bad-txns-vout-negative\");\n         if (txout.nValue > MAX_MONEY)\n-            return state.DoS(100, error(\"CheckTransaction() : txout.nValue too high\"),\n+            return state.DoS(100, error(\"CheckTransaction(): txout.nValue too high\"),\n                              REJECT_INVALID, \"bad-txns-vout-toolarge\");\n         nValueOut += txout.nValue;\n         if (!MoneyRange(nValueOut))\n-            return state.DoS(100, error(\"CheckTransaction() : txout total out of range\"),\n+            return state.DoS(100, error(\"CheckTransaction(): txout total out of range\"),\n                              REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n     }\n \n@@ -851,22 +851,22 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n     {\n         if (vInOutPoints.count(txin.prevout))\n-            return state.DoS(100, error(\"CheckTransaction() : duplicate inputs\"),\n+            return state.DoS(100, error(\"CheckTransaction(): duplicate inputs\"),\n                              REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n         vInOutPoints.insert(txin.prevout);\n     }\n \n     if (tx.IsCoinBase())\n     {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n-            return state.DoS(100, error(\"CheckTransaction() : coinbase script size\"),\n+            return state.DoS(100, error(\"CheckTransaction(): coinbase script size\"),\n                              REJECT_INVALID, \"bad-cb-length\");\n     }\n     else\n     {\n         BOOST_FOREACH(const CTxIn& txin, tx.vin)\n             if (txin.prevout.IsNull())\n-                return state.DoS(10, error(\"CheckTransaction() : prevout is null\"),\n+                return state.DoS(10, error(\"CheckTransaction(): prevout is null\"),\n                                  REJECT_INVALID, \"bad-txns-prevout-null\");\n     }\n \n@@ -922,7 +922,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     string reason;\n     if (Params().RequireStandard() && !IsStandardTx(tx, reason))\n         return state.DoS(0,\n-                         error(\"AcceptToMemoryPool : nonstandard transaction: %s\", reason),\n+                         error(\"AcceptToMemoryPool: nonstandard transaction: %s\", reason),\n                          REJECT_NONSTANDARD, reason);\n \n     // Only accept nLockTime-using transactions that can be mined in the next\n@@ -942,7 +942,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     // timestamp applications where it matters.\n     if (!IsFinalTx(tx, chainActive.Height() + 1))\n         return state.DoS(0,\n-                         error(\"AcceptToMemoryPool : non-final\"),\n+                         error(\"AcceptToMemoryPool: non-final\"),\n                          REJECT_NONSTANDARD, \"non-final\");\n \n     // is it already in the memory pool?\n@@ -991,7 +991,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // are the actual inputs available?\n         if (!view.HaveInputs(tx))\n-            return state.Invalid(error(\"AcceptToMemoryPool : inputs already spent\"),\n+            return state.Invalid(error(\"AcceptToMemoryPool: inputs already spent\"),\n                                  REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n \n         // Bring the best block into scope\n@@ -1016,7 +1016,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         nSigOps += GetP2SHSigOpCount(tx, view);\n         if (nSigOps > MAX_STANDARD_TX_SIGOPS)\n             return state.DoS(0,\n-                             error(\"AcceptToMemoryPool : too many sigops %s, %d > %d\",\n+                             error(\"AcceptToMemoryPool: too many sigops %s, %d > %d\",\n                                    hash.ToString(), nSigOps, MAX_STANDARD_TX_SIGOPS),\n                              REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\");\n \n@@ -1030,7 +1030,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // Don't accept it if it can't get into a block\n         CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n         if (fLimitFree && nFees < txMinFee)\n-            return state.DoS(0, error(\"AcceptToMemoryPool : not enough fees %s, %d < %d\",\n+            return state.DoS(0, error(\"AcceptToMemoryPool: not enough fees %s, %d < %d\",\n                                       hash.ToString(), nFees, txMinFee),\n                              REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n \n@@ -1057,7 +1057,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             // -limitfreerelay unit is thousand-bytes-per-minute\n             // At default rate it would take over a month to fill 1GB\n             if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n-                return state.DoS(0, error(\"AcceptToMemoryPool : free transaction rejected by rate limiter\"),\n+                return state.DoS(0, error(\"AcceptToMemoryPool: free transaction rejected by rate limiter\"),\n                                  REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n             LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n             dFreeCount += nSize;\n@@ -1123,11 +1123,11 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, uint256 &hashBlock\n                     fseek(file.Get(), postx.nTxOffset, SEEK_CUR);\n                     file >> txOut;\n                 } catch (const std::exception& e) {\n-                    return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+                    return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n                 }\n                 hashBlock = header.GetHash();\n                 if (txOut.GetHash() != hash)\n-                    return error(\"%s : txid mismatch\", __func__);\n+                    return error(\"%s: txid mismatch\", __func__);\n                 return true;\n             }\n         }\n@@ -1176,7 +1176,7 @@ bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos)\n     // Open history file to append\n     CAutoFile fileout(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull())\n-        return error(\"WriteBlockToDisk : OpenBlockFile failed\");\n+        return error(\"WriteBlockToDisk: OpenBlockFile failed\");\n \n     // Write index header\n     unsigned int nSize = fileout.GetSerializeSize(block);\n@@ -1185,7 +1185,7 @@ bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos)\n     // Write block\n     long fileOutPos = ftell(fileout.Get());\n     if (fileOutPos < 0)\n-        return error(\"WriteBlockToDisk : ftell failed\");\n+        return error(\"WriteBlockToDisk: ftell failed\");\n     pos.nPos = (unsigned int)fileOutPos;\n     fileout << block;\n \n@@ -1199,19 +1199,19 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos)\n     // Open history file to read\n     CAutoFile filein(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n-        return error(\"ReadBlockFromDisk : OpenBlockFile failed\");\n+        return error(\"ReadBlockFromDisk: OpenBlockFile failed\");\n \n     // Read block\n     try {\n         filein >> block;\n     }\n     catch (const std::exception& e) {\n-        return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n     }\n \n     // Check the header\n     if (!CheckProofOfWork(block.GetHash(), block.nBits))\n-        return error(\"ReadBlockFromDisk : Errors in block header\");\n+        return error(\"ReadBlockFromDisk: Errors in block header\");\n \n     return true;\n }\n@@ -1221,7 +1221,7 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex)\n     if (!ReadBlockFromDisk(block, pindex->GetBlockPos()))\n         return false;\n     if (block.GetHash() != pindex->GetBlockHash())\n-        return error(\"ReadBlockFromDisk(CBlock&, CBlockIndex*) : GetHash() doesn't match index\");\n+        return error(\"ReadBlockFromDisk(CBlock&, CBlockIndex*): GetHash() doesn't match index\");\n     return true;\n }\n \n@@ -1423,7 +1423,7 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n bool CScriptCheck::operator()() {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n     if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingSignatureChecker(*ptxTo, nIn, cacheStore), &error)) {\n-        return ::error(\"CScriptCheck() : %s:%d VerifySignature failed: %s\", ptxTo->GetHash().ToString(), nIn, ScriptErrorString(error));\n+        return ::error(\"CScriptCheck(): %s:%d VerifySignature failed: %s\", ptxTo->GetHash().ToString(), nIn, ScriptErrorString(error));\n     }\n     return true;\n }\n@@ -1438,7 +1438,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n         // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n         // for an attacker to attempt to split the network.\n         if (!inputs.HaveInputs(tx))\n-            return state.Invalid(error(\"CheckInputs() : %s inputs unavailable\", tx.GetHash().ToString()));\n+            return state.Invalid(error(\"CheckInputs(): %s inputs unavailable\", tx.GetHash().ToString()));\n \n         // While checking, GetBestBlock() refers to the parent block.\n         // This is also true for mempool checks.\n@@ -1456,31 +1456,31 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n             if (coins->IsCoinBase()) {\n                 if (nSpendHeight - coins->nHeight < COINBASE_MATURITY)\n                     return state.Invalid(\n-                        error(\"CheckInputs() : tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight),\n+                        error(\"CheckInputs(): tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight),\n                         REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\");\n             }\n \n             // Check for negative or overflow input values\n             nValueIn += coins->vout[prevout.n].nValue;\n             if (!MoneyRange(coins->vout[prevout.n].nValue) || !MoneyRange(nValueIn))\n-                return state.DoS(100, error(\"CheckInputs() : txin values out of range\"),\n+                return state.DoS(100, error(\"CheckInputs(): txin values out of range\"),\n                                  REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n \n         }\n \n         if (nValueIn < tx.GetValueOut())\n-            return state.DoS(100, error(\"CheckInputs() : %s value in (%s) < value out (%s)\",\n+            return state.DoS(100, error(\"CheckInputs(): %s value in (%s) < value out (%s)\",\n                                         tx.GetHash().ToString(), FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())),\n                              REJECT_INVALID, \"bad-txns-in-belowout\");\n \n         // Tally transaction fees\n         CAmount nTxFee = nValueIn - tx.GetValueOut();\n         if (nTxFee < 0)\n-            return state.DoS(100, error(\"CheckInputs() : %s nTxFee < 0\", tx.GetHash().ToString()),\n+            return state.DoS(100, error(\"CheckInputs(): %s nTxFee < 0\", tx.GetHash().ToString()),\n                              REJECT_INVALID, \"bad-txns-fee-negative\");\n         nFees += nTxFee;\n         if (!MoneyRange(nFees))\n-            return state.DoS(100, error(\"CheckInputs() : nFees out of range\"),\n+            return state.DoS(100, error(\"CheckInputs(): nFees out of range\"),\n                              REJECT_INVALID, \"bad-txns-fee-outofrange\");\n \n         // The first loop above does all the inexpensive checks.\n@@ -1537,7 +1537,7 @@ bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint\n     // Open history file to append\n     CAutoFile fileout(OpenUndoFile(pos), SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull())\n-        return error(\"%s : OpenUndoFile failed\", __func__);\n+        return error(\"%s: OpenUndoFile failed\", __func__);\n \n     // Write index header\n     unsigned int nSize = fileout.GetSerializeSize(blockundo);\n@@ -1546,7 +1546,7 @@ bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint\n     // Write undo data\n     long fileOutPos = ftell(fileout.Get());\n     if (fileOutPos < 0)\n-        return error(\"%s : ftell failed\", __func__);\n+        return error(\"%s: ftell failed\", __func__);\n     pos.nPos = (unsigned int)fileOutPos;\n     fileout << blockundo;\n \n@@ -1564,7 +1564,7 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uin\n     // Open history file to read\n     CAutoFile filein(OpenUndoFile(pos, true), SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n-        return error(\"%s : OpenBlockFile failed\", __func__);\n+        return error(\"%s: OpenBlockFile failed\", __func__);\n \n     // Read block\n     uint256 hashChecksum;\n@@ -1573,15 +1573,15 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uin\n         filein >> hashChecksum;\n     }\n     catch (const std::exception& e) {\n-        return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n     }\n \n     // Verify checksum\n     CHashWriter hasher(SER_GETHASH, PROTOCOL_VERSION);\n     hasher << hashBlock;\n     hasher << blockundo;\n     if (hashChecksum != hasher.GetHash())\n-        return error(\"%s : Checksum mismatch\", __func__);\n+        return error(\"%s: Checksum mismatch\", __func__);\n \n     return true;\n }\n@@ -1600,12 +1600,12 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n     CBlockUndo blockUndo;\n     CDiskBlockPos pos = pindex->GetUndoPos();\n     if (pos.IsNull())\n-        return error(\"DisconnectBlock() : no undo data available\");\n+        return error(\"DisconnectBlock(): no undo data available\");\n     if (!UndoReadFromDisk(blockUndo, pos, pindex->pprev->GetBlockHash()))\n-        return error(\"DisconnectBlock() : failure reading undo data\");\n+        return error(\"DisconnectBlock(): failure reading undo data\");\n \n     if (blockUndo.vtxundo.size() + 1 != block.vtx.size())\n-        return error(\"DisconnectBlock() : block and undo data inconsistent\");\n+        return error(\"DisconnectBlock(): block and undo data inconsistent\");\n \n     // undo transactions in reverse order\n     for (int i = block.vtx.size() - 1; i >= 0; i--) {\n@@ -1628,7 +1628,7 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n         if (outsBlock.nVersion < 0)\n             outs->nVersion = outsBlock.nVersion;\n         if (*outs != outsBlock)\n-            fClean = fClean && error(\"DisconnectBlock() : added transaction mismatch? database corrupted\");\n+            fClean = fClean && error(\"DisconnectBlock(): added transaction mismatch? database corrupted\");\n \n         // remove outputs\n         outs->Clear();\n@@ -1638,25 +1638,25 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n         if (i > 0) { // not coinbases\n             const CTxUndo &txundo = blockUndo.vtxundo[i-1];\n             if (txundo.vprevout.size() != tx.vin.size())\n-                return error(\"DisconnectBlock() : transaction and undo data inconsistent\");\n+                return error(\"DisconnectBlock(): transaction and undo data inconsistent\");\n             for (unsigned int j = tx.vin.size(); j-- > 0;) {\n                 const COutPoint &out = tx.vin[j].prevout;\n                 const CTxInUndo &undo = txundo.vprevout[j];\n                 CCoinsModifier coins = view.ModifyCoins(out.hash);\n                 if (undo.nHeight != 0) {\n                     // undo data contains height: this is the last output of the prevout tx being spent\n                     if (!coins->IsPruned())\n-                        fClean = fClean && error(\"DisconnectBlock() : undo data overwriting existing transaction\");\n+                        fClean = fClean && error(\"DisconnectBlock(): undo data overwriting existing transaction\");\n                     coins->Clear();\n                     coins->fCoinBase = undo.fCoinBase;\n                     coins->nHeight = undo.nHeight;\n                     coins->nVersion = undo.nVersion;\n                 } else {\n                     if (coins->IsPruned())\n-                        fClean = fClean && error(\"DisconnectBlock() : undo data adding output to missing transaction\");\n+                        fClean = fClean && error(\"DisconnectBlock(): undo data adding output to missing transaction\");\n                 }\n                 if (coins->IsAvailable(out.n))\n-                    fClean = fClean && error(\"DisconnectBlock() : undo data overwriting existing output\");\n+                    fClean = fClean && error(\"DisconnectBlock(): undo data overwriting existing output\");\n                 if (coins->vout.size() < out.n+1)\n                     coins->vout.resize(out.n+1);\n                 coins->vout[out.n] = undo.txout;\n@@ -1753,7 +1753,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n             const CCoins* coins = view.AccessCoins(tx.GetHash());\n             if (coins && !coins->IsPruned())\n-                return state.DoS(100, error(\"ConnectBlock() : tried to overwrite transaction\"),\n+                return state.DoS(100, error(\"ConnectBlock(): tried to overwrite transaction\"),\n                                  REJECT_INVALID, \"bad-txns-BIP30\");\n         }\n     }\n@@ -1783,13 +1783,13 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         nInputs += tx.vin.size();\n         nSigOps += GetLegacySigOpCount(tx);\n         if (nSigOps > MAX_BLOCK_SIGOPS)\n-            return state.DoS(100, error(\"ConnectBlock() : too many sigops\"),\n+            return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n                              REJECT_INVALID, \"bad-blk-sigops\");\n \n         if (!tx.IsCoinBase())\n         {\n             if (!view.HaveInputs(tx))\n-                return state.DoS(100, error(\"ConnectBlock() : inputs missing/spent\"),\n+                return state.DoS(100, error(\"ConnectBlock(): inputs missing/spent\"),\n                                  REJECT_INVALID, \"bad-txns-inputs-missingorspent\");\n \n             if (fStrictPayToScriptHash)\n@@ -1799,7 +1799,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                 // an incredibly-expensive-to-validate block.\n                 nSigOps += GetP2SHSigOpCount(tx, view);\n                 if (nSigOps > MAX_BLOCK_SIGOPS)\n-                    return state.DoS(100, error(\"ConnectBlock() : too many sigops\"),\n+                    return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n                                      REJECT_INVALID, \"bad-blk-sigops\");\n             }\n \n@@ -1825,7 +1825,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     if (block.vtx[0].GetValueOut() > GetBlockValue(pindex->nHeight, nFees))\n         return state.DoS(100,\n-                         error(\"ConnectBlock() : coinbase pays too much (actual=%d vs limit=%d)\",\n+                         error(\"ConnectBlock(): coinbase pays too much (actual=%d vs limit=%d)\",\n                                block.vtx[0].GetValueOut(), GetBlockValue(pindex->nHeight, nFees)),\n                                REJECT_INVALID, \"bad-cb-amount\");\n \n@@ -1843,7 +1843,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         if (pindex->GetUndoPos().IsNull()) {\n             CDiskBlockPos pos;\n             if (!FindUndoPos(state, pindex->nFile, pos, ::GetSerializeSize(blockundo, SER_DISK, CLIENT_VERSION) + 40))\n-                return error(\"ConnectBlock() : FindUndoPos failed\");\n+                return error(\"ConnectBlock(): FindUndoPos failed\");\n             if (!UndoWriteToDisk(blockundo, pos, pindex->pprev->GetBlockHash()))\n                 return state.Abort(\"Failed to write undo data\");\n \n@@ -1995,7 +1995,7 @@ bool static DisconnectTip(CValidationState &state) {\n     {\n         CCoinsViewCache view(pcoinsTip);\n         if (!DisconnectBlock(block, state, pindexDelete, view))\n-            return error(\"DisconnectTip() : DisconnectBlock %s failed\", pindexDelete->GetBlockHash().ToString());\n+            return error(\"DisconnectTip(): DisconnectBlock %s failed\", pindexDelete->GetBlockHash().ToString());\n         assert(view.Flush());\n     }\n     LogPrint(\"bench\", \"- Disconnect block: %.2fms\\n\", (GetTimeMicros() - nStart) * 0.001);\n@@ -2055,7 +2055,7 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n         if (!rv) {\n             if (state.IsInvalid())\n                 InvalidBlockFound(pindexNew, state);\n-            return error(\"ConnectTip() : ConnectBlock %s failed\", pindexNew->GetBlockHash().ToString());\n+            return error(\"ConnectTip(): ConnectBlock %s failed\", pindexNew->GetBlockHash().ToString());\n         }\n         mapBlockSource.erase(inv.hash);\n         nTime3 = GetTimeMicros(); nTimeConnectTotal += nTime3 - nTime2;\n@@ -2492,12 +2492,12 @@ bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool f\n {\n     // Check proof of work matches claimed amount\n     if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits))\n-        return state.DoS(50, error(\"CheckBlockHeader() : proof of work failed\"),\n+        return state.DoS(50, error(\"CheckBlockHeader(): proof of work failed\"),\n                          REJECT_INVALID, \"high-hash\");\n \n     // Check timestamp\n     if (block.GetBlockTime() > GetAdjustedTime() + 2 * 60 * 60)\n-        return state.Invalid(error(\"CheckBlockHeader() : block timestamp too far in the future\"),\n+        return state.Invalid(error(\"CheckBlockHeader(): block timestamp too far in the future\"),\n                              REJECT_INVALID, \"time-too-new\");\n \n     return true;\n@@ -2517,14 +2517,14 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n         bool mutated;\n         uint256 hashMerkleRoot2 = block.BuildMerkleTree(&mutated);\n         if (block.hashMerkleRoot != hashMerkleRoot2)\n-            return state.DoS(100, error(\"CheckBlock() : hashMerkleRoot mismatch\"),\n+            return state.DoS(100, error(\"CheckBlock(): hashMerkleRoot mismatch\"),\n                              REJECT_INVALID, \"bad-txnmrklroot\", true);\n \n         // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n         // of transactions in a block without affecting the merkle root of a block,\n         // while still invalidating it.\n         if (mutated)\n-            return state.DoS(100, error(\"CheckBlock() : duplicate transaction\"),\n+            return state.DoS(100, error(\"CheckBlock(): duplicate transaction\"),\n                              REJECT_INVALID, \"bad-txns-duplicate\", true);\n     }\n \n@@ -2534,30 +2534,30 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n \n     // Size limits\n     if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, error(\"CheckBlock() : size limits failed\"),\n+        return state.DoS(100, error(\"CheckBlock(): size limits failed\"),\n                          REJECT_INVALID, \"bad-blk-length\");\n \n     // First transaction must be coinbase, the rest must not be\n     if (block.vtx.empty() || !block.vtx[0].IsCoinBase())\n-        return state.DoS(100, error(\"CheckBlock() : first tx is not coinbase\"),\n+        return state.DoS(100, error(\"CheckBlock(): first tx is not coinbase\"),\n                          REJECT_INVALID, \"bad-cb-missing\");\n     for (unsigned int i = 1; i < block.vtx.size(); i++)\n         if (block.vtx[i].IsCoinBase())\n-            return state.DoS(100, error(\"CheckBlock() : more than one coinbase\"),\n+            return state.DoS(100, error(\"CheckBlock(): more than one coinbase\"),\n                              REJECT_INVALID, \"bad-cb-multiple\");\n \n     // Check transactions\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n         if (!CheckTransaction(tx, state))\n-            return error(\"CheckBlock() : CheckTransaction failed\");\n+            return error(\"CheckBlock(): CheckTransaction failed\");\n \n     unsigned int nSigOps = 0;\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n     {\n         nSigOps += GetLegacySigOpCount(tx);\n     }\n     if (nSigOps > MAX_BLOCK_SIGOPS)\n-        return state.DoS(100, error(\"CheckBlock() : out-of-bounds SigOpCount\"),\n+        return state.DoS(100, error(\"CheckBlock(): out-of-bounds SigOpCount\"),\n                          REJECT_INVALID, \"bad-blk-sigops\", true);\n \n     return true;\n@@ -2576,28 +2576,28 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n     // Check proof of work\n     if ((!Params().SkipProofOfWorkCheck()) &&\n        (block.nBits != GetNextWorkRequired(pindexPrev, &block)))\n-        return state.DoS(100, error(\"%s : incorrect proof of work\", __func__),\n+        return state.DoS(100, error(\"%s: incorrect proof of work\", __func__),\n                          REJECT_INVALID, \"bad-diffbits\");\n \n     // Check timestamp against prev\n     if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n-        return state.Invalid(error(\"%s : block's timestamp is too early\", __func__),\n+        return state.Invalid(error(\"%s: block's timestamp is too early\", __func__),\n                              REJECT_INVALID, \"time-too-old\");\n \n     // Check that the block chain matches the known block chain up to a checkpoint\n     if (!Checkpoints::CheckBlock(nHeight, hash))\n-        return state.DoS(100, error(\"%s : rejected by checkpoint lock-in at %d\", __func__, nHeight),\n+        return state.DoS(100, error(\"%s: rejected by checkpoint lock-in at %d\", __func__, nHeight),\n                          REJECT_CHECKPOINT, \"checkpoint mismatch\");\n \n     // Don't accept any forks from the main chain prior to last checkpoint\n     CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n     if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n-        return state.DoS(100, error(\"%s : forked chain older than last checkpoint (height %d)\", __func__, nHeight));\n+        return state.DoS(100, error(\"%s: forked chain older than last checkpoint (height %d)\", __func__, nHeight));\n \n     // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n     if (block.nVersion < 2 && IsSuperMajority(2, pindexPrev, Params().RejectBlockOutdatedMajority()))\n     {\n-        return state.Invalid(error(\"%s : rejected nVersion=1 block\", __func__),\n+        return state.Invalid(error(\"%s: rejected nVersion=1 block\", __func__),\n                              REJECT_OBSOLETE, \"bad-version\");\n     }\n \n@@ -2611,7 +2611,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     // Check that all transactions are finalized\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n         if (!IsFinalTx(tx, nHeight, block.GetBlockTime())) {\n-            return state.DoS(10, error(\"%s : contains a non-final transaction\", __func__), REJECT_INVALID, \"bad-txns-nonfinal\");\n+            return state.DoS(10, error(\"%s: contains a non-final transaction\", __func__), REJECT_INVALID, \"bad-txns-nonfinal\");\n         }\n \n     // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n@@ -2621,7 +2621,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n         CScript expect = CScript() << nHeight;\n         if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n             !std::equal(expect.begin(), expect.end(), block.vtx[0].vin[0].scriptSig.begin())) {\n-            return state.DoS(100, error(\"%s : block height mismatch in coinbase\", __func__), REJECT_INVALID, \"bad-cb-height\");\n+            return state.DoS(100, error(\"%s: block height mismatch in coinbase\", __func__), REJECT_INVALID, \"bad-cb-height\");\n         }\n     }\n \n@@ -2641,7 +2641,7 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n         if (ppindex)\n             *ppindex = pindex;\n         if (pindex->nStatus & BLOCK_FAILED_MASK)\n-            return state.Invalid(error(\"%s : block is marked invalid\", __func__), 0, \"duplicate\");\n+            return state.Invalid(error(\"%s: block is marked invalid\", __func__), 0, \"duplicate\");\n         return true;\n     }\n \n@@ -2653,10 +2653,10 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n     if (hash != Params().HashGenesisBlock()) {\n         BlockMap::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n         if (mi == mapBlockIndex.end())\n-            return state.DoS(10, error(\"%s : prev block not found\", __func__), 0, \"bad-prevblk\");\n+            return state.DoS(10, error(\"%s: prev block not found\", __func__), 0, \"bad-prevblk\");\n         pindexPrev = (*mi).second;\n         if (pindexPrev->nStatus & BLOCK_FAILED_MASK)\n-            return state.DoS(100, error(\"%s : prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n+            return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n     }\n \n     if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n@@ -2682,7 +2682,7 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n \n     if (pindex->nStatus & BLOCK_HAVE_DATA) {\n         // TODO: deal better with duplicate blocks.\n-        // return state.DoS(20, error(\"AcceptBlock() : already have block %d %s\", pindex->nHeight, pindex->GetBlockHash().ToString()), REJECT_DUPLICATE, \"duplicate\");\n+        // return state.DoS(20, error(\"AcceptBlock(): already have block %d %s\", pindex->nHeight, pindex->GetBlockHash().ToString()), REJECT_DUPLICATE, \"duplicate\");\n         return true;\n     }\n \n@@ -2703,12 +2703,12 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n         if (dbp != NULL)\n             blockPos = *dbp;\n         if (!FindBlockPos(state, blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != NULL))\n-            return error(\"AcceptBlock() : FindBlockPos failed\");\n+            return error(\"AcceptBlock(): FindBlockPos failed\");\n         if (dbp == NULL)\n             if (!WriteBlockToDisk(block, blockPos))\n                 return state.Abort(\"Failed to write block\");\n         if (!ReceivedBlockTransactions(block, state, pindex, blockPos))\n-            return error(\"AcceptBlock() : ReceivedBlockTransactions failed\");\n+            return error(\"AcceptBlock(): ReceivedBlockTransactions failed\");\n     } catch (const std::runtime_error& e) {\n         return state.Abort(std::string(\"System error: \") + e.what());\n     }\n@@ -2739,7 +2739,7 @@ bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDis\n         LOCK(cs_main);\n         MarkBlockAsReceived(pblock->GetHash());\n         if (!checked) {\n-            return error(\"%s : CheckBlock FAILED\", __func__);\n+            return error(\"%s: CheckBlock FAILED\", __func__);\n         }\n \n         // Store to disk\n@@ -2749,11 +2749,11 @@ bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDis\n             mapBlockSource[pindex->GetBlockHash()] = pfrom->GetId();\n         }\n         if (!ret)\n-            return error(\"%s : AcceptBlock FAILED\", __func__);\n+            return error(\"%s: AcceptBlock FAILED\", __func__);\n     }\n \n     if (!ActivateBestChain(state, pblock))\n-        return error(\"%s : ActivateBestChain failed\", __func__);\n+        return error(\"%s: ActivateBestChain failed\", __func__);\n \n     return true;\n }\n@@ -2859,7 +2859,7 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n     // Create new\n     CBlockIndex* pindexNew = new CBlockIndex();\n     if (!pindexNew)\n-        throw runtime_error(\"LoadBlockIndex() : new CBlockIndex failed\");\n+        throw runtime_error(\"LoadBlockIndex(): new CBlockIndex failed\");\n     mi = mapBlockIndex.insert(make_pair(hash, pindexNew)).first;\n     pindexNew->phashBlock = &((*mi).first);\n \n@@ -3005,24 +3005,24 @@ bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth\n         CBlock block;\n         // check level 0: read from disk\n         if (!ReadBlockFromDisk(block, pindex))\n-            return error(\"VerifyDB() : *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+            return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 1: verify block validity\n         if (nCheckLevel >= 1 && !CheckBlock(block, state))\n-            return error(\"VerifyDB() : *** found bad block at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+            return error(\"VerifyDB(): *** found bad block at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 2: verify undo validity\n         if (nCheckLevel >= 2 && pindex) {\n             CBlockUndo undo;\n             CDiskBlockPos pos = pindex->GetUndoPos();\n             if (!pos.IsNull()) {\n                 if (!UndoReadFromDisk(undo, pos, pindex->pprev->GetBlockHash()))\n-                    return error(\"VerifyDB() : *** found bad undo data at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                    return error(\"VerifyDB(): *** found bad undo data at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n             }\n         }\n         // check level 3: check for inconsistencies during memory-only disconnect of tip blocks\n         if (nCheckLevel >= 3 && pindex == pindexState && (coins.GetCacheSize() + pcoinsTip->GetCacheSize()) <= nCoinCacheSize) {\n             bool fClean = true;\n             if (!DisconnectBlock(block, state, pindex, coins, &fClean))\n-                return error(\"VerifyDB() : *** irrecoverable inconsistency in block data at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                return error(\"VerifyDB(): *** irrecoverable inconsistency in block data at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n             pindexState = pindex->pprev;\n             if (!fClean) {\n                 nGoodTransactions = 0;\n@@ -3034,7 +3034,7 @@ bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth\n             return true;\n     }\n     if (pindexFailure)\n-        return error(\"VerifyDB() : *** coin database inconsistencies found (last %i blocks, %i good transactions before that)\\n\", chainActive.Height() - pindexFailure->nHeight + 1, nGoodTransactions);\n+        return error(\"VerifyDB(): *** coin database inconsistencies found (last %i blocks, %i good transactions before that)\\n\", chainActive.Height() - pindexFailure->nHeight + 1, nGoodTransactions);\n \n     // check level 4: try reconnecting blocks\n     if (nCheckLevel >= 4) {\n@@ -3045,9 +3045,9 @@ bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth\n             pindex = chainActive.Next(pindex);\n             CBlock block;\n             if (!ReadBlockFromDisk(block, pindex))\n-                return error(\"VerifyDB() : *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n             if (!ConnectBlock(block, state, pindex, coins))\n-                return error(\"VerifyDB() : *** found unconnectable block at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                return error(\"VerifyDB(): *** found unconnectable block at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         }\n     }\n \n@@ -3093,18 +3093,18 @@ bool InitBlockIndex() {\n             CDiskBlockPos blockPos;\n             CValidationState state;\n             if (!FindBlockPos(state, blockPos, nBlockSize+8, 0, block.GetBlockTime()))\n-                return error(\"LoadBlockIndex() : FindBlockPos failed\");\n+                return error(\"LoadBlockIndex(): FindBlockPos failed\");\n             if (!WriteBlockToDisk(block, blockPos))\n-                return error(\"LoadBlockIndex() : writing genesis block to disk failed\");\n+                return error(\"LoadBlockIndex(): writing genesis block to disk failed\");\n             CBlockIndex *pindex = AddToBlockIndex(block);\n             if (!ReceivedBlockTransactions(block, state, pindex, blockPos))\n-                return error(\"LoadBlockIndex() : genesis block not accepted\");\n+                return error(\"LoadBlockIndex(): genesis block not accepted\");\n             if (!ActivateBestChain(state, &block))\n-                return error(\"LoadBlockIndex() : genesis block cannot be activated\");\n+                return error(\"LoadBlockIndex(): genesis block cannot be activated\");\n             // Force a chainstate write so that when we VerifyDB in a moment, it doesn't check stale data\n             return FlushStateToDisk(state, FLUSH_STATE_ALWAYS);\n         } catch (const std::runtime_error& e) {\n-            return error(\"LoadBlockIndex() : failed to initialize block database: %s\", e.what());\n+            return error(\"LoadBlockIndex(): failed to initialize block database: %s\", e.what());\n         }\n     }\n \n@@ -3204,7 +3204,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n                     }\n                 }\n             } catch (const std::exception& e) {\n-                LogPrintf(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+                LogPrintf(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n             }\n         }\n     } catch (const std::runtime_error& e) {\n@@ -3268,7 +3268,7 @@ string GetWarnings(string strFor)\n         return strStatusBar;\n     else if (strFor == \"rpc\")\n         return strRPC;\n-    assert(!\"GetWarnings() : invalid parameter\");\n+    assert(!\"GetWarnings(): invalid parameter\");\n     return \"error\";\n }\n \n@@ -3835,7 +3835,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             vWorkQueue.push_back(inv.hash);\n             vEraseQueue.push_back(inv.hash);\n \n-            LogPrint(\"mempool\", \"AcceptToMemoryPool: peer=%d %s : accepted %s (poolsz %u)\\n\",\n+            LogPrint(\"mempool\", \"AcceptToMemoryPool: peer=%d %s: accepted %s (poolsz %u)\\n\",\n                 pfrom->id, pfrom->cleanSubVer,\n                 tx.GetHash().ToString(),\n                 mempool.mapTx.size());\n@@ -4297,7 +4297,7 @@ bool ProcessMessages(CNode* pfrom)\n         memcpy(&nChecksum, &hash, sizeof(nChecksum));\n         if (nChecksum != hdr.nChecksum)\n         {\n-            LogPrintf(\"ProcessMessages(%s, %u bytes) : CHECKSUM ERROR nChecksum=%08x hdr.nChecksum=%08x\\n\",\n+            LogPrintf(\"ProcessMessages(%s, %u bytes): CHECKSUM ERROR nChecksum=%08x hdr.nChecksum=%08x\\n\",\n                strCommand, nMessageSize, nChecksum, hdr.nChecksum);\n             continue;\n         }\n@@ -4315,12 +4315,12 @@ bool ProcessMessages(CNode* pfrom)\n             if (strstr(e.what(), \"end of data\"))\n             {\n                 // Allow exceptions from under-length message on vRecv\n-                LogPrintf(\"ProcessMessages(%s, %u bytes) : Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", strCommand, nMessageSize, e.what());\n+                LogPrintf(\"ProcessMessages(%s, %u bytes): Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", strCommand, nMessageSize, e.what());\n             }\n             else if (strstr(e.what(), \"size too large\"))\n             {\n                 // Allow exceptions from over-long size\n-                LogPrintf(\"ProcessMessages(%s, %u bytes) : Exception '%s' caught\\n\", strCommand, nMessageSize, e.what());\n+                LogPrintf(\"ProcessMessages(%s, %u bytes): Exception '%s' caught\\n\", strCommand, nMessageSize, e.what());\n             }\n             else\n             {"
      },
      {
        "sha": "e359654d7ba26004c0c09fc44e52fab19b4ad3ce",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -332,7 +332,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n         CValidationState state;\n         if (!TestBlockValidity(state, *pblock, pindexPrev, false, false))\n-            throw std::runtime_error(\"CreateNewBlock() : TestBlockValidity failed\");\n+            throw std::runtime_error(\"CreateNewBlock(): TestBlockValidity failed\");\n     }\n \n     return pblocktemplate.release();\n@@ -415,7 +415,7 @@ static bool ProcessBlockFound(CBlock* pblock, CWallet& wallet, CReserveKey& rese\n     {\n         LOCK(cs_main);\n         if (pblock->hashPrevBlock != chainActive.Tip()->GetBlockHash())\n-            return error(\"BitcoinMiner : generated block is stale\");\n+            return error(\"BitcoinMiner: generated block is stale\");\n     }\n \n     // Remove key from key pool\n@@ -430,7 +430,7 @@ static bool ProcessBlockFound(CBlock* pblock, CWallet& wallet, CReserveKey& rese\n     // Process this block the same as if we had received it from another node\n     CValidationState state;\n     if (!ProcessNewBlock(state, NULL, pblock))\n-        return error(\"BitcoinMiner : ProcessNewBlock, block not accepted\");\n+        return error(\"BitcoinMiner: ProcessNewBlock, block not accepted\");\n \n     return true;\n }"
      },
      {
        "sha": "e4ab9d706d86e77308ec515a2c772d33451b733e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -1020,7 +1020,7 @@ void ThreadMapPort()\n         catch (const boost::thread_interrupted&)\n         {\n             r = UPNP_DeletePortMapping(urls.controlURL, data.first.servicetype, port.c_str(), \"TCP\", 0);\n-            LogPrintf(\"UPNP_DeletePortMapping() returned : %d\\n\", r);\n+            LogPrintf(\"UPNP_DeletePortMapping() returned: %d\\n\", r);\n             freeUPNPDevlist(devlist); devlist = 0;\n             FreeUPNPUrls(&urls);\n             throw;\n@@ -1797,21 +1797,21 @@ bool CAddrDB::Write(const CAddrMan& addr)\n     FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n     CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull())\n-        return error(\"%s : Failed to open file %s\", __func__, pathTmp.string());\n+        return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n \n     // Write and commit header, data\n     try {\n         fileout << ssPeers;\n     }\n     catch (const std::exception& e) {\n-        return error(\"%s : Serialize or I/O error - %s\", __func__, e.what());\n+        return error(\"%s: Serialize or I/O error - %s\", __func__, e.what());\n     }\n     FileCommit(fileout.Get());\n     fileout.fclose();\n \n     // replace existing peers.dat, if any, with new peers.dat.XXXX\n     if (!RenameOver(pathTmp, pathAddr))\n-        return error(\"%s : Rename-into-place failed\", __func__);\n+        return error(\"%s: Rename-into-place failed\", __func__);\n \n     return true;\n }\n@@ -1822,7 +1822,7 @@ bool CAddrDB::Read(CAddrMan& addr)\n     FILE *file = fopen(pathAddr.string().c_str(), \"rb\");\n     CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n-        return error(\"%s : Failed to open file %s\", __func__, pathAddr.string());\n+        return error(\"%s: Failed to open file %s\", __func__, pathAddr.string());\n \n     // use file size to size memory buffer\n     int fileSize = boost::filesystem::file_size(pathAddr);\n@@ -1840,7 +1840,7 @@ bool CAddrDB::Read(CAddrMan& addr)\n         filein >> hashIn;\n     }\n     catch (const std::exception& e) {\n-        return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n     }\n     filein.fclose();\n \n@@ -1849,7 +1849,7 @@ bool CAddrDB::Read(CAddrMan& addr)\n     // verify stored checksum matches input data\n     uint256 hashTmp = Hash(ssPeers.begin(), ssPeers.end());\n     if (hashIn != hashTmp)\n-        return error(\"%s : Checksum mismatch, data corrupted\", __func__);\n+        return error(\"%s: Checksum mismatch, data corrupted\", __func__);\n \n     unsigned char pchMsgTmp[4];\n     try {\n@@ -1858,13 +1858,13 @@ bool CAddrDB::Read(CAddrMan& addr)\n \n         // ... verify the network matches ours\n         if (memcmp(pchMsgTmp, Params().MessageStart(), sizeof(pchMsgTmp)))\n-            return error(\"%s : Invalid network magic number\", __func__);\n+            return error(\"%s: Invalid network magic number\", __func__);\n \n         // de-serialize address data into one CAddrMan object\n         ssPeers >> addr;\n     }\n     catch (const std::exception& e) {\n-        return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n     }\n \n     return true;"
      },
      {
        "sha": "e49f0d104c26600c78ef5f392925c6c8f9c63280",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -89,11 +89,11 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n \n     // Check range\n     if (fNegative || bnTarget == 0 || fOverflow || bnTarget > Params().ProofOfWorkLimit())\n-        return error(\"CheckProofOfWork() : nBits below minimum work\");\n+        return error(\"CheckProofOfWork(): nBits below minimum work\");\n \n     // Check proof of work matches claimed amount\n     if (UintToArith256(hash) > bnTarget)\n-        return error(\"CheckProofOfWork() : hash doesn't match nBits\");\n+        return error(\"CheckProofOfWork(): hash doesn't match nBits\");\n \n     return true;\n }"
      },
      {
        "sha": "606dbea79857d2f4cc79b0136ad46486f3c187d9",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -94,7 +94,7 @@ CAmount CTransaction::GetValueOut() const\n     {\n         nValueOut += it->nValue;\n         if (!MoneyRange(it->nValue) || !MoneyRange(nValueOut))\n-            throw std::runtime_error(\"CTransaction::GetValueOut() : value out of range\");\n+            throw std::runtime_error(\"CTransaction::GetValueOut(): value out of range\");\n     }\n     return nValueOut;\n }"
      },
      {
        "sha": "74ac706d60c6f14fc060e047068ee716128cb09b",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -66,7 +66,7 @@ bool CMessageHeader::IsValid() const\n     // Message size\n     if (nMessageSize > MAX_SIZE)\n     {\n-        LogPrintf(\"CMessageHeader::IsValid() : (%s, %u bytes) nMessageSize > MAX_SIZE\\n\", GetCommand(), nMessageSize);\n+        LogPrintf(\"CMessageHeader::IsValid(): (%s, %u bytes) nMessageSize > MAX_SIZE\\n\", GetCommand(), nMessageSize);\n         return false;\n     }\n \n@@ -117,7 +117,7 @@ CInv::CInv(const std::string& strType, const uint256& hashIn)\n         }\n     }\n     if (i == ARRAYLEN(ppszTypeName))\n-        throw std::out_of_range(strprintf(\"CInv::CInv(string, uint256) : unknown type '%s'\", strType));\n+        throw std::out_of_range(strprintf(\"CInv::CInv(string, uint256): unknown type '%s'\", strType));\n     hash = hashIn;\n }\n \n@@ -134,7 +134,7 @@ bool CInv::IsKnownType() const\n const char* CInv::GetCommand() const\n {\n     if (!IsKnownType())\n-        throw std::out_of_range(strprintf(\"CInv::GetCommand() : type=%d unknown type\", type));\n+        throw std::out_of_range(strprintf(\"CInv::GetCommand(): type=%d unknown type\", type));\n     return ppszTypeName[type];\n }\n "
      },
      {
        "sha": "162ecdba4ef4c84d4288e504db4e337664eb6282",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -114,7 +114,7 @@ class AddressTablePriv\n         case CT_NEW:\n             if(inModel)\n             {\n-                qWarning() << \"AddressTablePriv::updateEntry : Warning: Got CT_NEW, but entry is already in model\";\n+                qWarning() << \"AddressTablePriv::updateEntry: Warning: Got CT_NEW, but entry is already in model\";\n                 break;\n             }\n             parent->beginInsertRows(QModelIndex(), lowerIndex, lowerIndex);\n@@ -124,7 +124,7 @@ class AddressTablePriv\n         case CT_UPDATED:\n             if(!inModel)\n             {\n-                qWarning() << \"AddressTablePriv::updateEntry : Warning: Got CT_UPDATED, but entry is not in model\";\n+                qWarning() << \"AddressTablePriv::updateEntry: Warning: Got CT_UPDATED, but entry is not in model\";\n                 break;\n             }\n             lower->type = newEntryType;\n@@ -134,7 +134,7 @@ class AddressTablePriv\n         case CT_DELETED:\n             if(!inModel)\n             {\n-                qWarning() << \"AddressTablePriv::updateEntry : Warning: Got CT_DELETED, but entry is not in model\";\n+                qWarning() << \"AddressTablePriv::updateEntry: Warning: Got CT_DELETED, but entry is not in model\";\n                 break;\n             }\n             parent->beginRemoveRows(QModelIndex(), lowerIndex, upperIndex-1);"
      },
      {
        "sha": "03d94f2e13f127dcb875d733eef691506df7a5a1",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -212,14 +212,14 @@ static void ShowProgress(ClientModel *clientmodel, const std::string &title, int\n \n static void NotifyNumConnectionsChanged(ClientModel *clientmodel, int newNumConnections)\n {\n-    // Too noisy: qDebug() << \"NotifyNumConnectionsChanged : \" + QString::number(newNumConnections);\n+    // Too noisy: qDebug() << \"NotifyNumConnectionsChanged: \" + QString::number(newNumConnections);\n     QMetaObject::invokeMethod(clientmodel, \"updateNumConnections\", Qt::QueuedConnection,\n                               Q_ARG(int, newNumConnections));\n }\n \n static void NotifyAlertChanged(ClientModel *clientmodel, const uint256 &hash, ChangeType status)\n {\n-    qDebug() << \"NotifyAlertChanged : \" + QString::fromStdString(hash.GetHex()) + \" status=\" + QString::number(status);\n+    qDebug() << \"NotifyAlertChanged: \" + QString::fromStdString(hash.GetHex()) + \" status=\" + QString::number(status);\n     QMetaObject::invokeMethod(clientmodel, \"updateAlert\", Qt::QueuedConnection,\n                               Q_ARG(QString, QString::fromStdString(hash.GetHex())),\n                               Q_ARG(int, status));"
      },
      {
        "sha": "4c1e898020dcdfe8034396ae6fb19f5180ac8ecc",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -32,18 +32,18 @@ bool PaymentRequestPlus::parse(const QByteArray& data)\n {\n     bool parseOK = paymentRequest.ParseFromArray(data.data(), data.size());\n     if (!parseOK) {\n-        qWarning() << \"PaymentRequestPlus::parse : Error parsing payment request\";\n+        qWarning() << \"PaymentRequestPlus::parse: Error parsing payment request\";\n         return false;\n     }\n     if (paymentRequest.payment_details_version() > 1) {\n-        qWarning() << \"PaymentRequestPlus::parse : Received up-version payment details, version=\" << paymentRequest.payment_details_version();\n+        qWarning() << \"PaymentRequestPlus::parse: Received up-version payment details, version=\" << paymentRequest.payment_details_version();\n         return false;\n     }\n \n     parseOK = details.ParseFromString(paymentRequest.serialized_payment_details());\n     if (!parseOK)\n     {\n-        qWarning() << \"PaymentRequestPlus::parse : Error parsing payment details\";\n+        qWarning() << \"PaymentRequestPlus::parse: Error parsing payment details\";\n         paymentRequest.Clear();\n         return false;\n     }\n@@ -83,17 +83,17 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n         digestAlgorithm = EVP_sha1();\n     }\n     else if (paymentRequest.pki_type() == \"none\") {\n-        qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: pki_type == none\";\n+        qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: pki_type == none\";\n         return false;\n     }\n     else {\n-        qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: unknown pki_type \" << QString::fromStdString(paymentRequest.pki_type());\n+        qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: unknown pki_type \" << QString::fromStdString(paymentRequest.pki_type());\n         return false;\n     }\n \n     payments::X509Certificates certChain;\n     if (!certChain.ParseFromString(paymentRequest.pki_data())) {\n-        qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: error parsing pki_data\";\n+        qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: error parsing pki_data\";\n         return false;\n     }\n \n@@ -103,12 +103,12 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n         QByteArray certData(certChain.certificate(i).data(), certChain.certificate(i).size());\n         QSslCertificate qCert(certData, QSsl::Der);\n         if (currentTime < qCert.effectiveDate() || currentTime > qCert.expiryDate()) {\n-            qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: certificate expired or not yet active: \" << qCert;\n+            qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: certificate expired or not yet active: \" << qCert;\n             return false;\n         }\n #if QT_VERSION >= 0x050000\n         if (qCert.isBlacklisted()) {\n-            qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: certificate blacklisted: \" << qCert;\n+            qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: certificate blacklisted: \" << qCert;\n             return false;\n         }\n #endif\n@@ -118,7 +118,7 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n             certs.push_back(cert);\n     }\n     if (certs.empty()) {\n-        qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: empty certificate chain\";\n+        qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: empty certificate chain\";\n         return false;\n     }\n \n@@ -134,7 +134,7 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n     // load the signing cert into it and verify.\n     X509_STORE_CTX *store_ctx = X509_STORE_CTX_new();\n     if (!store_ctx) {\n-        qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: error creating X509_STORE_CTX\";\n+        qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: error creating X509_STORE_CTX\";\n         return false;\n     }\n \n@@ -191,7 +191,7 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n     }\n     catch (const SSLVerifyError& err) {\n         fResult = false;\n-        qWarning() << \"PaymentRequestPlus::getMerchant : SSL error: \" << err.what();\n+        qWarning() << \"PaymentRequestPlus::getMerchant: SSL error: \" << err.what();\n     }\n \n     if (website)"
      },
      {
        "sha": "a00916bf7f96b1668e6db5604b650e07302a9c5a",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -97,7 +97,7 @@ static QList<QString> savedPaymentRequests;\n \n static void ReportInvalidCertificate(const QSslCertificate& cert)\n {\n-    qDebug() << \"ReportInvalidCertificate : Payment server found an invalid certificate: \" << cert.subjectInfo(QSslCertificate::CommonName);\n+    qDebug() << \"ReportInvalidCertificate: Payment server found an invalid certificate: \" << cert.subjectInfo(QSslCertificate::CommonName);\n }\n \n //\n@@ -171,7 +171,7 @@ void PaymentServer::LoadRootCAs(X509_STORE* _store)\n             continue;\n         }\n     }\n-    qWarning() << \"PaymentServer::LoadRootCAs : Loaded \" << nRootCerts << \" root certificates\";\n+    qWarning() << \"PaymentServer::LoadRootCAs: Loaded \" << nRootCerts << \" root certificates\";\n \n     // Project for another day:\n     // Fetch certificate revocation lists, and add them to certStore.\n@@ -244,7 +244,7 @@ void PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n         {\n             // Printing to debug.log is about the best we can do here, the\n             // GUI hasn't started yet so we can't pop up a message box.\n-            qWarning() << \"PaymentServer::ipcSendCommandLine : Payment request file does not exist: \" << arg;\n+            qWarning() << \"PaymentServer::ipcSendCommandLine: Payment request file does not exist: \" << arg;\n         }\n     }\n }\n@@ -368,10 +368,10 @@ void PaymentServer::initNetManager()\n     if (optionsModel->getProxySettings(proxy)) {\n         netManager->setProxy(proxy);\n \n-        qDebug() << \"PaymentServer::initNetManager : Using SOCKS5 proxy\" << proxy.hostName() << \":\" << proxy.port();\n+        qDebug() << \"PaymentServer::initNetManager: Using SOCKS5 proxy\" << proxy.hostName() << \":\" << proxy.port();\n     }\n     else\n-        qDebug() << \"PaymentServer::initNetManager : No active proxy server found.\";\n+        qDebug() << \"PaymentServer::initNetManager: No active proxy server found.\";\n \n     connect(netManager, SIGNAL(finished(QNetworkReply*)),\n             this, SLOT(netRequestFinished(QNetworkReply*)));\n@@ -415,12 +415,12 @@ void PaymentServer::handleURIOrFile(const QString& s)\n \n             if (fetchUrl.isValid())\n             {\n-                qDebug() << \"PaymentServer::handleURIOrFile : fetchRequest(\" << fetchUrl << \")\";\n+                qDebug() << \"PaymentServer::handleURIOrFile: fetchRequest(\" << fetchUrl << \")\";\n                 fetchRequest(fetchUrl);\n             }\n             else\n             {\n-                qWarning() << \"PaymentServer::handleURIOrFile : Invalid URL: \" << fetchUrl;\n+                qWarning() << \"PaymentServer::handleURIOrFile: Invalid URL: \" << fetchUrl;\n                 emit message(tr(\"URI handling\"),\n                     tr(\"Payment request fetch URL is invalid: %1\").arg(fetchUrl.toString()),\n                     CClientUIInterface::ICON_WARNING);\n@@ -585,10 +585,10 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n     recipient.address = addresses.join(\"<br />\");\n \n     if (!recipient.authenticatedMerchant.isEmpty()) {\n-        qDebug() << \"PaymentServer::processPaymentRequest : Secure payment request from \" << recipient.authenticatedMerchant;\n+        qDebug() << \"PaymentServer::processPaymentRequest: Secure payment request from \" << recipient.authenticatedMerchant;\n     }\n     else {\n-        qDebug() << \"PaymentServer::processPaymentRequest : Insecure payment request to \" << addresses.join(\", \");\n+        qDebug() << \"PaymentServer::processPaymentRequest: Insecure payment request to \" << addresses.join(\", \");\n     }\n \n     return true;\n@@ -643,7 +643,7 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipien\n         else {\n             // This should never happen, because sending coins should have\n             // just unlocked the wallet and refilled the keypool.\n-            qWarning() << \"PaymentServer::fetchPaymentACK : Error getting refund key, refund_to not set\";\n+            qWarning() << \"PaymentServer::fetchPaymentACK: Error getting refund key, refund_to not set\";\n         }\n     }\n \n@@ -655,7 +655,7 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipien\n     }\n     else {\n         // This should never happen, either.\n-        qWarning() << \"PaymentServer::fetchPaymentACK : Error serializing payment message\";\n+        qWarning() << \"PaymentServer::fetchPaymentACK: Error serializing payment message\";\n     }\n }\n \n@@ -694,7 +694,7 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n         SendCoinsRecipient recipient;\n         if (!request.parse(data))\n         {\n-            qWarning() << \"PaymentServer::netRequestFinished : Error parsing payment request\";\n+            qWarning() << \"PaymentServer::netRequestFinished: Error parsing payment request\";\n             emit message(tr(\"Payment request error\"),\n                 tr(\"Payment request cannot be parsed!\"),\n                 CClientUIInterface::MSG_ERROR);\n@@ -712,7 +712,7 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n             QString msg = tr(\"Bad response from server %1\")\n                 .arg(reply->request().url().toString());\n \n-            qWarning() << \"PaymentServer::netRequestFinished : \" << msg;\n+            qWarning() << \"PaymentServer::netRequestFinished: \" << msg;\n             emit message(tr(\"Payment request error\"), msg, CClientUIInterface::MSG_ERROR);\n         }\n         else\n@@ -728,7 +728,7 @@ void PaymentServer::reportSslErrors(QNetworkReply* reply, const QList<QSslError>\n \n     QString errString;\n     foreach (const QSslError& err, errs) {\n-        qWarning() << \"PaymentServer::reportSslErrors : \" << err;\n+        qWarning() << \"PaymentServer::reportSslErrors: \" << err;\n         errString += err.errorString() + \"\\n\";\n     }\n     emit message(tr(\"Network request error\"), errString, CClientUIInterface::MSG_ERROR);"
      },
      {
        "sha": "df1afbfaaae31266db335a94423581896697a65c",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -94,7 +94,7 @@ class TransactionTablePriv\n      */\n     void updateWallet(const uint256 &hash, int status, bool showTransaction)\n     {\n-        qDebug() << \"TransactionTablePriv::updateWallet : \" + QString::fromStdString(hash.ToString()) + \" \" + QString::number(status);\n+        qDebug() << \"TransactionTablePriv::updateWallet: \" + QString::fromStdString(hash.ToString()) + \" \" + QString::number(status);\n \n         // Find bounds of this transaction in model\n         QList<TransactionRecord>::iterator lower = qLowerBound(\n@@ -122,7 +122,7 @@ class TransactionTablePriv\n         case CT_NEW:\n             if(inModel)\n             {\n-                qWarning() << \"TransactionTablePriv::updateWallet : Warning: Got CT_NEW, but transaction is already in model\";\n+                qWarning() << \"TransactionTablePriv::updateWallet: Warning: Got CT_NEW, but transaction is already in model\";\n                 break;\n             }\n             if(showTransaction)\n@@ -132,7 +132,7 @@ class TransactionTablePriv\n                 std::map<uint256, CWalletTx>::iterator mi = wallet->mapWallet.find(hash);\n                 if(mi == wallet->mapWallet.end())\n                 {\n-                    qWarning() << \"TransactionTablePriv::updateWallet : Warning: Got CT_NEW, but transaction is not in wallet\";\n+                    qWarning() << \"TransactionTablePriv::updateWallet: Warning: Got CT_NEW, but transaction is not in wallet\";\n                     break;\n                 }\n                 // Added -- insert at the right position\n@@ -154,7 +154,7 @@ class TransactionTablePriv\n         case CT_DELETED:\n             if(!inModel)\n             {\n-                qWarning() << \"TransactionTablePriv::updateWallet : Warning: Got CT_DELETED, but transaction is not in model\";\n+                qWarning() << \"TransactionTablePriv::updateWallet: Warning: Got CT_DELETED, but transaction is not in model\";\n                 break;\n             }\n             // Removed -- remove entire transaction from table\n@@ -664,7 +664,7 @@ struct TransactionNotification\n     void invoke(QObject *ttm)\n     {\n         QString strHash = QString::fromStdString(hash.GetHex());\n-        qDebug() << \"NotifyTransactionChanged : \" + strHash + \" status= \" + QString::number(status);\n+        qDebug() << \"NotifyTransactionChanged: \" + strHash + \" status= \" + QString::number(status);\n         QMetaObject::invokeMethod(ttm, \"updateTransaction\", Qt::QueuedConnection,\n                                   Q_ARG(QString, strHash),\n                                   Q_ARG(int, status),"
      },
      {
        "sha": "4a7abf999cb04806f7f244239cb15996e14fc18f",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -452,7 +452,7 @@ static void NotifyAddressBookChanged(WalletModel *walletmodel, CWallet *wallet,\n     QString strLabel = QString::fromStdString(label);\n     QString strPurpose = QString::fromStdString(purpose);\n \n-    qDebug() << \"NotifyAddressBookChanged : \" + strAddress + \" \" + strLabel + \" isMine=\" + QString::number(isMine) + \" purpose=\" + strPurpose + \" status=\" + QString::number(status);\n+    qDebug() << \"NotifyAddressBookChanged: \" + strAddress + \" \" + strLabel + \" isMine=\" + QString::number(isMine) + \" purpose=\" + strPurpose + \" status=\" + QString::number(status);\n     QMetaObject::invokeMethod(walletmodel, \"updateAddressBook\", Qt::QueuedConnection,\n                               Q_ARG(QString, strAddress),\n                               Q_ARG(QString, strLabel),"
      },
      {
        "sha": "28371771a9efbe7951f156b0b0bd789cdfe11288",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -319,7 +319,7 @@ void SendMoney(const CTxDestination &address, CAmount nValue, CWalletTx& wtxNew)\n     if (pwalletMain->IsLocked())\n     {\n         strError = \"Error: Wallet locked, unable to create transaction!\";\n-        LogPrintf(\"SendMoney() : %s\", strError);\n+        LogPrintf(\"SendMoney(): %s\", strError);\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n \n@@ -333,7 +333,7 @@ void SendMoney(const CTxDestination &address, CAmount nValue, CWalletTx& wtxNew)\n     {\n         if (nValue + nFeeRequired > pwalletMain->GetBalance())\n             strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n-        LogPrintf(\"SendMoney() : %s\\n\", strError);\n+        LogPrintf(\"SendMoney(): %s\\n\", strError);\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n     if (!pwalletMain->CommitTransaction(wtxNew, reservekey))"
      },
      {
        "sha": "0cee1a0116df6a7a7117948c864eabb56d4f6bd6",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -60,7 +60,7 @@ bool CastToBool(const valtype& vch)\n static inline void popstack(vector<valtype>& stack)\n {\n     if (stack.empty())\n-        throw runtime_error(\"popstack() : stack empty\");\n+        throw runtime_error(\"popstack(): stack empty\");\n     stack.pop_back();\n }\n "
      },
      {
        "sha": "8b36aa2f5061fcbb204d73737bbf1c734aacb9ec",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -391,7 +391,7 @@ class CScript : public std::vector<unsigned char>\n     CScript& operator<<(opcodetype opcode)\n     {\n         if (opcode < 0 || opcode > 0xff)\n-            throw std::runtime_error(\"CScript::operator<<() : invalid opcode\");\n+            throw std::runtime_error(\"CScript::operator<<(): invalid opcode\");\n         insert(end(), (unsigned char)opcode);\n         return *this;\n     }"
      },
      {
        "sha": "a62760a7938dec3f0111cc5f600345e8c48b14c0",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -249,7 +249,7 @@ uint64_t ReadCompactSize(Stream& is)\n             throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");\n     }\n     if (nSizeRet > (uint64_t)MAX_SIZE)\n-        throw std::ios_base::failure(\"ReadCompactSize() : size too large\");\n+        throw std::ios_base::failure(\"ReadCompactSize(): size too large\");\n     return nSizeRet;\n }\n "
      },
      {
        "sha": "bd8568b1af35093c4db4b85b2ddcfff2431a019c",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -224,7 +224,7 @@ class CDataStream\n         {\n             if (nReadPosNext > vch.size())\n             {\n-                throw std::ios_base::failure(\"CDataStream::read() : end of data\");\n+                throw std::ios_base::failure(\"CDataStream::read(): end of data\");\n             }\n             memcpy(pch, &vch[nReadPos], nSize);\n             nReadPos = 0;\n@@ -244,7 +244,7 @@ class CDataStream\n         if (nReadPosNext >= vch.size())\n         {\n             if (nReadPosNext > vch.size())\n-                throw std::ios_base::failure(\"CDataStream::ignore() : end of data\");\n+                throw std::ios_base::failure(\"CDataStream::ignore(): end of data\");\n             nReadPos = 0;\n             vch.clear();\n             return (*this);\n@@ -374,18 +374,18 @@ class CAutoFile\n     CAutoFile& read(char* pch, size_t nSize)\n     {\n         if (!file)\n-            throw std::ios_base::failure(\"CAutoFile::read : file handle is NULL\");\n+            throw std::ios_base::failure(\"CAutoFile::read: file handle is NULL\");\n         if (fread(pch, 1, nSize, file) != nSize)\n-            throw std::ios_base::failure(feof(file) ? \"CAutoFile::read : end of file\" : \"CAutoFile::read : fread failed\");\n+            throw std::ios_base::failure(feof(file) ? \"CAutoFile::read: end of file\" : \"CAutoFile::read: fread failed\");\n         return (*this);\n     }\n \n     CAutoFile& write(const char* pch, size_t nSize)\n     {\n         if (!file)\n-            throw std::ios_base::failure(\"CAutoFile::write : file handle is NULL\");\n+            throw std::ios_base::failure(\"CAutoFile::write: file handle is NULL\");\n         if (fwrite(pch, 1, nSize, file) != nSize)\n-            throw std::ios_base::failure(\"CAutoFile::write : write failed\");\n+            throw std::ios_base::failure(\"CAutoFile::write: write failed\");\n         return (*this);\n     }\n \n@@ -401,7 +401,7 @@ class CAutoFile\n     {\n         // Serialize to this stream\n         if (!file)\n-            throw std::ios_base::failure(\"CAutoFile::operator<< : file handle is NULL\");\n+            throw std::ios_base::failure(\"CAutoFile::operator<<: file handle is NULL\");\n         ::Serialize(*this, obj, nType, nVersion);\n         return (*this);\n     }\n@@ -411,7 +411,7 @@ class CAutoFile\n     {\n         // Unserialize from this stream\n         if (!file)\n-            throw std::ios_base::failure(\"CAutoFile::operator>> : file handle is NULL\");\n+            throw std::ios_base::failure(\"CAutoFile::operator>>: file handle is NULL\");\n         ::Unserialize(*this, obj, nType, nVersion);\n         return (*this);\n     }\n@@ -452,7 +452,7 @@ class CBufferedFile\n             return false;\n         size_t read = fread((void*)&vchBuf[pos], 1, readNow, src);\n         if (read == 0) {\n-            throw std::ios_base::failure(feof(src) ? \"CBufferedFile::Fill : end of file\" : \"CBufferedFile::Fill : fread failed\");\n+            throw std::ios_base::failure(feof(src) ? \"CBufferedFile::Fill: end of file\" : \"CBufferedFile::Fill: fread failed\");\n         } else {\n             nSrcPos += read;\n             return true;"
      },
      {
        "sha": "e7aeee9db606c870315542a50dca96b9eb7e2ff7",
        "filename": "src/test/bignum.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/test/bignum.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/test/bignum.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bignum.h?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -37,14 +37,14 @@ class CBigNum : public BIGNUM\n         if (!BN_copy(this, &b))\n         {\n             BN_clear_free(this);\n-            throw bignum_error(\"CBigNum::CBigNum(const CBigNum&) : BN_copy failed\");\n+            throw bignum_error(\"CBigNum::CBigNum(const CBigNum&): BN_copy failed\");\n         }\n     }\n \n     CBigNum& operator=(const CBigNum& b)\n     {\n         if (!BN_copy(this, &b))\n-            throw bignum_error(\"CBigNum::operator= : BN_copy failed\");\n+            throw bignum_error(\"CBigNum::operator=: BN_copy failed\");\n         return (*this);\n     }\n \n@@ -151,15 +151,15 @@ inline const CBigNum operator+(const CBigNum& a, const CBigNum& b)\n {\n     CBigNum r;\n     if (!BN_add(&r, &a, &b))\n-        throw bignum_error(\"CBigNum::operator+ : BN_add failed\");\n+        throw bignum_error(\"CBigNum::operator+: BN_add failed\");\n     return r;\n }\n \n inline const CBigNum operator-(const CBigNum& a, const CBigNum& b)\n {\n     CBigNum r;\n     if (!BN_sub(&r, &a, &b))\n-        throw bignum_error(\"CBigNum::operator- : BN_sub failed\");\n+        throw bignum_error(\"CBigNum::operator-: BN_sub failed\");\n     return r;\n }\n "
      },
      {
        "sha": "ea41dbcde23435912f8b6ac0a7e09a3df8717d05",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -27,7 +27,7 @@ uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, un\n     static const uint256 one(uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\"));\n     if (nIn >= txTo.vin.size())\n     {\n-        printf(\"ERROR: SignatureHash() : nIn=%d out of range\\n\", nIn);\n+        printf(\"ERROR: SignatureHash(): nIn=%d out of range\\n\", nIn);\n         return one;\n     }\n     CMutableTransaction txTmp(txTo);\n@@ -58,7 +58,7 @@ uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, un\n         unsigned int nOut = nIn;\n         if (nOut >= txTmp.vout.size())\n         {\n-            printf(\"ERROR: SignatureHash() : nOut=%d out of range\\n\", nOut);\n+            printf(\"ERROR: SignatureHash(): nOut=%d out of range\\n\", nOut);\n             return one;\n         }\n         txTmp.vout.resize(nOut+1);"
      },
      {
        "sha": "da271bd5d1a11c95a16d7139a0241ff738b78dba",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -141,7 +141,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n             }\n             pcursor->Next();\n         } catch (const std::exception& e) {\n-            return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+            return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n         }\n     }\n     stats.nHeight = mapBlockIndex.find(GetBestBlock())->second->nHeight;\n@@ -223,14 +223,14 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n                 pindexNew->nTx            = diskindex.nTx;\n \n                 if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits))\n-                    return error(\"LoadBlockIndex() : CheckProofOfWork failed: %s\", pindexNew->ToString());\n+                    return error(\"LoadBlockIndex(): CheckProofOfWork failed: %s\", pindexNew->ToString());\n \n                 pcursor->Next();\n             } else {\n                 break; // if shutdown requested or finished loading block index\n             }\n         } catch (const std::exception& e) {\n-            return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+            return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n         }\n     }\n "
      },
      {
        "sha": "6e0f7e9c5a6bd5a2afedba96c1dd7e1b2d1c3305",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -192,7 +192,7 @@ class CMinerPolicyEstimator\n             // Neither or both fee and priority sufficient to get confirmed:\n             // don't know why they got confirmed.\n         }\n-        LogPrint(\"estimatefee\", \"Seen TX confirm: %s : %s fee/%g priority, took %d blocks\\n\",\n+        LogPrint(\"estimatefee\", \"Seen TX confirm: %s: %s fee/%g priority, took %d blocks\\n\",\n                  assignedTo, feeRate.ToString(), dPriority, nBlocksAgo);\n     }\n \n@@ -658,7 +658,7 @@ CTxMemPool::WriteFeeEstimates(CAutoFile& fileout) const\n         minerPolicyEstimator->Write(fileout);\n     }\n     catch (const std::exception&) {\n-        LogPrintf(\"CTxMemPool::WriteFeeEstimates() : unable to write policy estimator data (non-fatal)\");\n+        LogPrintf(\"CTxMemPool::WriteFeeEstimates(): unable to write policy estimator data (non-fatal)\");\n         return false;\n     }\n     return true;\n@@ -671,13 +671,13 @@ CTxMemPool::ReadFeeEstimates(CAutoFile& filein)\n         int nVersionRequired, nVersionThatWrote;\n         filein >> nVersionRequired >> nVersionThatWrote;\n         if (nVersionRequired > CLIENT_VERSION)\n-            return error(\"CTxMemPool::ReadFeeEstimates() : up-version (%d) fee estimate file\", nVersionRequired);\n+            return error(\"CTxMemPool::ReadFeeEstimates(): up-version (%d) fee estimate file\", nVersionRequired);\n \n         LOCK(cs);\n         minerPolicyEstimator->Read(filein, minRelayFee);\n     }\n     catch (const std::exception&) {\n-        LogPrintf(\"CTxMemPool::ReadFeeEstimates() : unable to read policy estimator data (non-fatal)\");\n+        LogPrintf(\"CTxMemPool::ReadFeeEstimates(): unable to read policy estimator data (non-fatal)\");\n         return false;\n     }\n     return true;"
      },
      {
        "sha": "d66a4465c53f494d15dbae26f39dad8a53a77abb",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -88,7 +88,7 @@ CPubKey CWallet::GenerateNewKey()\n         nTimeFirstKey = nCreationTime;\n \n     if (!AddKeyPubKey(secret, pubkey))\n-        throw std::runtime_error(\"CWallet::GenerateNewKey() : AddKey failed\");\n+        throw std::runtime_error(\"CWallet::GenerateNewKey(): AddKey failed\");\n     return pubkey;\n }\n \n@@ -619,7 +619,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletD\n                     wtx.nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\n                 }\n                 else\n-                    LogPrintf(\"AddToWallet() : found %s in block %s not in index\\n\",\n+                    LogPrintf(\"AddToWallet(): found %s in block %s not in index\\n\",\n                              wtxIn.GetHash().ToString(),\n                              wtxIn.hashBlock.ToString());\n             }\n@@ -1616,7 +1616,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n         if (!wtxNew.AcceptToMemoryPool(false))\n         {\n             // This must not fail. The transaction has already been signed and recorded.\n-            LogPrintf(\"CommitTransaction() : Error: Transaction not valid\");\n+            LogPrintf(\"CommitTransaction(): Error: Transaction not valid\");\n             return false;\n         }\n         wtxNew.RelayWalletTransaction();\n@@ -1809,7 +1809,7 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n             if (!setKeyPool.empty())\n                 nEnd = *(--setKeyPool.end()) + 1;\n             if (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey())))\n-                throw runtime_error(\"TopUpKeyPool() : writing generated key failed\");\n+                throw runtime_error(\"TopUpKeyPool(): writing generated key failed\");\n             setKeyPool.insert(nEnd);\n             LogPrintf(\"keypool added key %d, size=%u\\n\", nEnd, setKeyPool.size());\n         }\n@@ -1836,9 +1836,9 @@ void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool)\n         nIndex = *(setKeyPool.begin());\n         setKeyPool.erase(setKeyPool.begin());\n         if (!walletdb.ReadPool(nIndex, keypool))\n-            throw runtime_error(\"ReserveKeyFromKeyPool() : read failed\");\n+            throw runtime_error(\"ReserveKeyFromKeyPool(): read failed\");\n         if (!HaveKey(keypool.vchPubKey.GetID()))\n-            throw runtime_error(\"ReserveKeyFromKeyPool() : unknown key in key pool\");\n+            throw runtime_error(\"ReserveKeyFromKeyPool(): unknown key in key pool\");\n         assert(keypool.vchPubKey.IsValid());\n         LogPrintf(\"keypool reserve %d\\n\", nIndex);\n     }\n@@ -2086,11 +2086,11 @@ void CWallet::GetAllReserveKeys(set<CKeyID>& setAddress) const\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n-            throw runtime_error(\"GetAllReserveKeyHashes() : read failed\");\n+            throw runtime_error(\"GetAllReserveKeyHashes(): read failed\");\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();\n         if (!HaveKey(keyID))\n-            throw runtime_error(\"GetAllReserveKeyHashes() : unknown key in key pool\");\n+            throw runtime_error(\"GetAllReserveKeyHashes(): unknown key in key pool\");\n         setAddress.insert(keyID);\n     }\n }\n@@ -2303,7 +2303,7 @@ int CMerkleTx::SetMerkleBranch(const CBlock& block)\n     {\n         vMerkleBranch.clear();\n         nIndex = -1;\n-        LogPrintf(\"ERROR: SetMerkleBranch() : couldn't find tx in block\\n\");\n+        LogPrintf(\"ERROR: SetMerkleBranch(): couldn't find tx in block\\n\");\n         return 0;\n     }\n "
      },
      {
        "sha": "aaff00b71660ff10e5257ac39dd6deb2d410e685",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -320,14 +320,14 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetCredit(const CTxOut& txout, const isminefilter& filter) const\n     {\n         if (!MoneyRange(txout.nValue))\n-            throw std::runtime_error(\"CWallet::GetCredit() : value out of range\");\n+            throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n         return ((IsMine(txout) & filter) ? txout.nValue : 0);\n     }\n     bool IsChange(const CTxOut& txout) const;\n     CAmount GetChange(const CTxOut& txout) const\n     {\n         if (!MoneyRange(txout.nValue))\n-            throw std::runtime_error(\"CWallet::GetChange() : value out of range\");\n+            throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n         return (IsChange(txout) ? txout.nValue : 0);\n     }\n     bool IsMine(const CTransaction& tx) const\n@@ -349,7 +349,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         {\n             nDebit += GetDebit(txin, filter);\n             if (!MoneyRange(nDebit))\n-                throw std::runtime_error(\"CWallet::GetDebit() : value out of range\");\n+                throw std::runtime_error(\"CWallet::GetDebit(): value out of range\");\n         }\n         return nDebit;\n     }\n@@ -360,7 +360,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         {\n             nCredit += GetCredit(txout, filter);\n             if (!MoneyRange(nCredit))\n-                throw std::runtime_error(\"CWallet::GetCredit() : value out of range\");\n+                throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n         }\n         return nCredit;\n     }\n@@ -371,7 +371,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         {\n             nChange += GetChange(txout);\n             if (!MoneyRange(nChange))\n-                throw std::runtime_error(\"CWallet::GetChange() : value out of range\");\n+                throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n         }\n         return nChange;\n     }\n@@ -804,7 +804,7 @@ class CWalletTx : public CMerkleTx\n                 const CTxOut &txout = vout[i];\n                 nCredit += pwallet->GetCredit(txout, ISMINE_SPENDABLE);\n                 if (!MoneyRange(nCredit))\n-                    throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n+                    throw std::runtime_error(\"CWalletTx::GetAvailableCredit(): value out of range\");\n             }\n         }\n \n@@ -847,7 +847,7 @@ class CWalletTx : public CMerkleTx\n                 const CTxOut &txout = vout[i];\n                 nCredit += pwallet->GetCredit(txout, ISMINE_WATCH_ONLY);\n                 if (!MoneyRange(nCredit))\n-                    throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n+                    throw std::runtime_error(\"CWalletTx::GetAvailableCredit(): value out of range\");\n             }\n         }\n "
      },
      {
        "sha": "b2daf036ff7308f6cc3df1282e2d08b58c35bcbf",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -210,7 +210,7 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin\n \n     Dbc* pcursor = GetCursor();\n     if (!pcursor)\n-        throw runtime_error(\"CWalletDB::ListAccountCreditDebit() : cannot create DB cursor\");\n+        throw runtime_error(\"CWalletDB::ListAccountCreditDebit(): cannot create DB cursor\");\n     unsigned int fFlags = DB_SET_RANGE;\n     while (true)\n     {\n@@ -226,7 +226,7 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin\n         else if (ret != 0)\n         {\n             pcursor->close();\n-            throw runtime_error(\"CWalletDB::ListAccountCreditDebit() : error scanning DB\");\n+            throw runtime_error(\"CWalletDB::ListAccountCreditDebit(): error scanning DB\");\n         }\n \n         // Unserialize"
      }
    ]
  },
  {
    "sha": "bd2b73bb9b416139a0fbaf6eb2131356a59184a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDJiNzNiYjliNDE2MTM5YTBmYmFmNmViMjEzMTM1NmE1OTE4NGE2",
    "commit": {
      "author": {
        "name": "Vitalii Demianets",
        "email": "vitalii@orsoc.se",
        "date": "2015-01-14T09:25:06Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:38:28Z"
      },
      "message": "TRIVIAL: fix misleading comment",
      "tree": {
        "sha": "a094a676ee3745736451ee17dcbef22b54e41f49",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a094a676ee3745736451ee17dcbef22b54e41f49"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd2b73bb9b416139a0fbaf6eb2131356a59184a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd2b73bb9b416139a0fbaf6eb2131356a59184a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd2b73bb9b416139a0fbaf6eb2131356a59184a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd2b73bb9b416139a0fbaf6eb2131356a59184a6/comments",
    "author": {
      "login": "dvitas",
      "id": 5735415,
      "node_id": "MDQ6VXNlcjU3MzU0MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5735415?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dvitas",
      "html_url": "https://github.com/dvitas",
      "followers_url": "https://api.github.com/users/dvitas/followers",
      "following_url": "https://api.github.com/users/dvitas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dvitas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dvitas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dvitas/subscriptions",
      "organizations_url": "https://api.github.com/users/dvitas/orgs",
      "repos_url": "https://api.github.com/users/dvitas/repos",
      "events_url": "https://api.github.com/users/dvitas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dvitas/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5262fde0ecd19f1febbfcd488f2be41c5dffd047"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f43d8c58b63b4552cdc3e653e70363b4c3bd881b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd2b73bb9b416139a0fbaf6eb2131356a59184a6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd2b73bb9b416139a0fbaf6eb2131356a59184a6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bd2b73bb9b416139a0fbaf6eb2131356a59184a6",
        "patch": "@@ -744,7 +744,7 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n         // non-standard. Note that this EvalScript() call will\n         // be quick, because if there are any operations\n         // beside \"push data\" in the scriptSig\n-        // IsStandard() will have already returned false\n+        // IsStandardTx() will have already returned false\n         // and this method isn't called.\n         vector<vector<unsigned char> > stack;\n         if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker()))"
      }
    ]
  },
  {
    "sha": "5a809ef0f009bb6c412b5bf5f846feecfb133d70",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTgwOWVmMGYwMDliYjZjNDEyYjViZjVmODQ2ZmVlY2ZiMTMzZDcw",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2015-01-18T07:24:09Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:38:28Z"
      },
      "message": "depends: fix typos",
      "tree": {
        "sha": "a3ab195bad8130188cc989825c83b33b381edc01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3ab195bad8130188cc989825c83b33b381edc01"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a809ef0f009bb6c412b5bf5f846feecfb133d70",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a809ef0f009bb6c412b5bf5f846feecfb133d70",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a809ef0f009bb6c412b5bf5f846feecfb133d70",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a809ef0f009bb6c412b5bf5f846feecfb133d70/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bd2b73bb9b416139a0fbaf6eb2131356a59184a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd2b73bb9b416139a0fbaf6eb2131356a59184a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd2b73bb9b416139a0fbaf6eb2131356a59184a6"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "55e7222697f146e39ae4479bb2f6266463affa99",
        "filename": "depends/README",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a809ef0f009bb6c412b5bf5f846feecfb133d70/depends/README",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a809ef0f009bb6c412b5bf5f846feecfb133d70/depends/README",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README?ref=5a809ef0f009bb6c412b5bf5f846feecfb133d70",
        "patch": "@@ -7,7 +7,7 @@ There are several features that make it different from most similar systems:\n \n In theory, binaries for any target OS/architecture can be created, from a\n builder running any OS/architecture. In practice, build-side tools must be\n-specified when the defaults don't fit, and packages must be ammended to work\n+specified when the defaults don't fit, and packages must be amended to work\n on new hosts. For now, a build architecture of x86_64 is assumed, either on\n Linux or OSX.\n "
      },
      {
        "sha": "b407737f7f4815fdfddca21a15824a2b964218ff",
        "filename": "depends/funcs.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a809ef0f009bb6c412b5bf5f846feecfb133d70/depends/funcs.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a809ef0f009bb6c412b5bf5f846feecfb133d70/depends/funcs.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/funcs.mk?ref=5a809ef0f009bb6c412b5bf5f846feecfb133d70",
        "patch": "@@ -205,7 +205,7 @@ endef\n # These functions create the build targets for each package. They must be\n # broken down into small steps so that each part is done for all packages\n # before moving on to the next step. Otherwise, a package's info\n-# (build-id for example) would only be avilable to another package if it\n+# (build-id for example) would only be available to another package if it\n # happened to be computed already.\n \n #set the type for host/build packages."
      }
    ]
  },
  {
    "sha": "faf0af49f57f3b6f7161ecd5ddc80f2a629efc68",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWYwYWY0OWY1N2YzYjZmNzE2MWVjZDVkZGM4MGYyYTYyOWVmYzY4",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-01-19T19:16:49Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:38:28Z"
      },
      "message": "Suggest --disable-wallet when libdb_cxx headers are missing",
      "tree": {
        "sha": "ad13d6080f166f9aa5b5d2b05f657cb10be27030",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad13d6080f166f9aa5b5d2b05f657cb10be27030"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faf0af49f57f3b6f7161ecd5ddc80f2a629efc68",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf0af49f57f3b6f7161ecd5ddc80f2a629efc68",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faf0af49f57f3b6f7161ecd5ddc80f2a629efc68",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf0af49f57f3b6f7161ecd5ddc80f2a629efc68/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a809ef0f009bb6c412b5bf5f846feecfb133d70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a809ef0f009bb6c412b5bf5f846feecfb133d70",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a809ef0f009bb6c412b5bf5f846feecfb133d70"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0bf558d25b5e904fe40340bb29115baaf32da190",
        "filename": "build-aux/m4/bitcoin_find_bdb48.m4",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf0af49f57f3b6f7161ecd5ddc80f2a629efc68/build-aux/m4/bitcoin_find_bdb48.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf0af49f57f3b6f7161ecd5ddc80f2a629efc68/build-aux/m4/bitcoin_find_bdb48.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_find_bdb48.m4?ref=faf0af49f57f3b6f7161ecd5ddc80f2a629efc68",
        "patch": "@@ -38,7 +38,7 @@ AC_DEFUN([BITCOIN_FIND_BDB48],[\n   done\n   if test \"x$bdbpath\" = \"xX\"; then\n     AC_MSG_RESULT([no])\n-    AC_MSG_ERROR(libdb_cxx headers missing)\n+    AC_MSG_ERROR([libdb_cxx headers missing, Bitcoin Core requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n   elif test \"x$bdb48path\" = \"xX\"; then\n     BITCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdbpath}],db_cxx)\n     AC_ARG_WITH([incompatible-bdb],[AS_HELP_STRING([--with-incompatible-bdb], [allow using a bdb version other than 4.8])],["
      }
    ]
  },
  {
    "sha": "34c61813a401be8f65ebadcc6fe2b82c1a83b28b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNGM2MTgxM2E0MDFiZThmNjVlYmFkY2M2ZmUyYjgyYzFhODNiMjhi",
    "commit": {
      "author": {
        "name": "Matt Bogosian",
        "email": "mtb19@columbia.edu",
        "date": "2015-01-23T03:54:20Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:38:28Z"
      },
      "message": "Fix README link from util.sh -> util.py.",
      "tree": {
        "sha": "9822cd5f82cb240f6a82a3a18420caa8d2e4d831",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9822cd5f82cb240f6a82a3a18420caa8d2e4d831"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34c61813a401be8f65ebadcc6fe2b82c1a83b28b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34c61813a401be8f65ebadcc6fe2b82c1a83b28b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34c61813a401be8f65ebadcc6fe2b82c1a83b28b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34c61813a401be8f65ebadcc6fe2b82c1a83b28b/comments",
    "author": {
      "login": "posita",
      "id": 222581,
      "node_id": "MDQ6VXNlcjIyMjU4MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/222581?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/posita",
      "html_url": "https://github.com/posita",
      "followers_url": "https://api.github.com/users/posita/followers",
      "following_url": "https://api.github.com/users/posita/following{/other_user}",
      "gists_url": "https://api.github.com/users/posita/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/posita/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/posita/subscriptions",
      "organizations_url": "https://api.github.com/users/posita/orgs",
      "repos_url": "https://api.github.com/users/posita/repos",
      "events_url": "https://api.github.com/users/posita/events{/privacy}",
      "received_events_url": "https://api.github.com/users/posita/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faf0af49f57f3b6f7161ecd5ddc80f2a629efc68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf0af49f57f3b6f7161ecd5ddc80f2a629efc68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faf0af49f57f3b6f7161ecd5ddc80f2a629efc68"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "02170d13ec31b3decb0cdcac82a593d04e3bfd78",
        "filename": "qa/rpc-tests/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34c61813a401be8f65ebadcc6fe2b82c1a83b28b/qa/rpc-tests/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34c61813a401be8f65ebadcc6fe2b82c1a83b28b/qa/rpc-tests/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/README.md?ref=34c61813a401be8f65ebadcc6fe2b82c1a83b28b",
        "patch": "@@ -12,7 +12,7 @@ Base class for new regression tests.\n ### [listtransactions.py](listtransactions.py)\n Tests for the listtransactions RPC call.\n \n-### [util.py](util.sh)\n+### [util.py](util.py)\n Generally useful functions.\n \n Bash-based tests, to be ported to Python:"
      }
    ]
  },
  {
    "sha": "1fa89a54e8c207564ea7acd262e6389174feaed9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZmE4OWE1NGU4YzIwNzU2NGVhN2FjZDI2MmU2Mzg5MTc0ZmVhZWQ5",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2015-01-24T03:30:06Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:38:28Z"
      },
      "message": "fix _code_ snippet in gitian-building.md\n\nTrivial typo-like fix",
      "tree": {
        "sha": "29caf85c0d4870386ac97b06efa755aadfec8f46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29caf85c0d4870386ac97b06efa755aadfec8f46"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1fa89a54e8c207564ea7acd262e6389174feaed9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fa89a54e8c207564ea7acd262e6389174feaed9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1fa89a54e8c207564ea7acd262e6389174feaed9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fa89a54e8c207564ea7acd262e6389174feaed9/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34c61813a401be8f65ebadcc6fe2b82c1a83b28b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34c61813a401be8f65ebadcc6fe2b82c1a83b28b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34c61813a401be8f65ebadcc6fe2b82c1a83b28b"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "25d3b8390c5049fc322bd1538a881e29f83b5517",
        "filename": "doc/gitian-building.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fa89a54e8c207564ea7acd262e6389174feaed9/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fa89a54e8c207564ea7acd262e6389174feaed9/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=1fa89a54e8c207564ea7acd262e6389174feaed9",
        "patch": "@@ -326,6 +326,7 @@ At any time you can check the package installation and build progress with\n ```bash\n tail -f var/install.log\n tail -f var/build.log\n+```\n \n Output from `gbuild` will look something like\n "
      }
    ]
  },
  {
    "sha": "ee932025c1a318943a6b101be9fe7a4a2e10648c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTkzMjAyNWMxYTMxODk0M2E2YjEwMWJlOWZlN2E0YTJlMTA2NDhj",
    "commit": {
      "author": {
        "name": "bikinibabe",
        "email": "amberwelch@unomaha.edu",
        "date": "2015-01-31T20:07:55Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:38:28Z"
      },
      "message": "Changed pronouns for correctness and inclusivity",
      "tree": {
        "sha": "cca272581d2cb6b9bf39283f3e4ab26da032a4fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cca272581d2cb6b9bf39283f3e4ab26da032a4fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee932025c1a318943a6b101be9fe7a4a2e10648c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee932025c1a318943a6b101be9fe7a4a2e10648c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee932025c1a318943a6b101be9fe7a4a2e10648c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee932025c1a318943a6b101be9fe7a4a2e10648c/comments",
    "author": {
      "login": "bikinibabe",
      "id": 10789532,
      "node_id": "MDQ6VXNlcjEwNzg5NTMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/10789532?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bikinibabe",
      "html_url": "https://github.com/bikinibabe",
      "followers_url": "https://api.github.com/users/bikinibabe/followers",
      "following_url": "https://api.github.com/users/bikinibabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/bikinibabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bikinibabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bikinibabe/subscriptions",
      "organizations_url": "https://api.github.com/users/bikinibabe/orgs",
      "repos_url": "https://api.github.com/users/bikinibabe/repos",
      "events_url": "https://api.github.com/users/bikinibabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bikinibabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1fa89a54e8c207564ea7acd262e6389174feaed9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fa89a54e8c207564ea7acd262e6389174feaed9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1fa89a54e8c207564ea7acd262e6389174feaed9"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0984f689a8314e4b15c849f8bd8282793bbc0b02",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee932025c1a318943a6b101be9fe7a4a2e10648c/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee932025c1a318943a6b101be9fe7a4a2e10648c/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=ee932025c1a318943a6b101be9fe7a4a2e10648c",
        "patch": "@@ -196,7 +196,7 @@ Hardening enables the following features:\n * Position Independent Executable\n     Build position independent code to take advantage of Address Space Layout Randomization\n     offered by some kernels. An attacker who is able to cause execution of code at an arbitrary\n-    memory location is thwarted if he doesn't know where anything useful is located.\n+    memory location is thwarted if he or she doesn't know where anything useful is located.\n     The stack and heap are randomly located by default but this allows the code section to be\n     randomly located as well.\n "
      },
      {
        "sha": "3e63493dc6eb4bbbf8f484af65e6ae5067b5de9d",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee932025c1a318943a6b101be9fe7a4a2e10648c/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee932025c1a318943a6b101be9fe7a4a2e10648c/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=ee932025c1a318943a6b101be9fe7a4a2e10648c",
        "patch": "@@ -61,7 +61,7 @@ def run_test (self):\n         walletinfo = self.nodes[0].getwalletinfo()\n         assert_equal(walletinfo['immature_balance'], 0)\n \n-        # Have node0 mine a block, thus he will collect his own fee. \n+        # Have node0 mine a block, thus they will collect their own fee. \n         self.nodes[0].setgenerate(True, 1)\n         self.sync_all()\n "
      },
      {
        "sha": "7ca825c16fcca1fcf6de283280f8897055520b45",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee932025c1a318943a6b101be9fe7a4a2e10648c/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee932025c1a318943a6b101be9fe7a4a2e10648c/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=ee932025c1a318943a6b101be9fe7a4a2e10648c",
        "patch": "@@ -81,7 +81,7 @@ class CCheckQueue\n                     fAllOk &= fOk;\n                     nTodo -= nNow;\n                     if (nTodo == 0 && !fMaster)\n-                        // We processed the last element; inform the master he can exit and return the result\n+                        // We processed the last element; inform the master he or she can exit and return the result\n                         condMaster.notify_one();\n                 } else {\n                     // first iteration"
      }
    ]
  },
  {
    "sha": "1371e6f5db88941c3b3c70d7a13b0cbf150ebf66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzcxZTZmNWRiODg5NDFjM2IzYzcwZDdhMTNiMGNiZjE1MGViZjY2",
    "commit": {
      "author": {
        "name": "Daira Hopwood",
        "email": "daira@jacaranda.org",
        "date": "2015-01-31T02:54:55Z"
      },
      "committer": {
        "name": "Daira Hopwood",
        "email": "daira@jacaranda.org",
        "date": "2015-01-31T23:23:20Z"
      },
      "message": "Change \"insane\" to \"absurd\" (referring to high fees) in text strings and identifiers.\n\nNote that this will also require translation changes in Transifex for the key\n\"A fee higher than %1 is considered an insanely high fee.\" which is now\n\"A fee higher than %1 is considered an absurdly high fee.\"\n\nSigned-off-by: Daira Hopwood <daira@jacaranda.org>",
      "tree": {
        "sha": "f5526ecad0a1277ea6ee0acf5147968bf19efe02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5526ecad0a1277ea6ee0acf5147968bf19efe02"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66/comments",
    "author": {
      "login": "daira",
      "id": 643204,
      "node_id": "MDQ6VXNlcjY0MzIwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/643204?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/daira",
      "html_url": "https://github.com/daira",
      "followers_url": "https://api.github.com/users/daira/followers",
      "following_url": "https://api.github.com/users/daira/following{/other_user}",
      "gists_url": "https://api.github.com/users/daira/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/daira/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daira/subscriptions",
      "organizations_url": "https://api.github.com/users/daira/orgs",
      "repos_url": "https://api.github.com/users/daira/repos",
      "events_url": "https://api.github.com/users/daira/events{/privacy}",
      "received_events_url": "https://api.github.com/users/daira/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "daira",
      "id": 643204,
      "node_id": "MDQ6VXNlcjY0MzIwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/643204?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/daira",
      "html_url": "https://github.com/daira",
      "followers_url": "https://api.github.com/users/daira/followers",
      "following_url": "https://api.github.com/users/daira/following{/other_user}",
      "gists_url": "https://api.github.com/users/daira/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/daira/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daira/subscriptions",
      "organizations_url": "https://api.github.com/users/daira/orgs",
      "repos_url": "https://api.github.com/users/daira/repos",
      "events_url": "https://api.github.com/users/daira/events{/privacy}",
      "received_events_url": "https://api.github.com/users/daira/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6af674ecdc99db2eb741b8dc79e44bd0202e3855"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "35118cebe5c025bac42eb5152f64473f1ef46325",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1371e6f5db88941c3b3c70d7a13b0cbf150ebf66",
        "patch": "@@ -904,7 +904,7 @@ CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowF\n \n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, bool fRejectInsaneFee)\n+                        bool* pfMissingInputs, bool fRejectAbsurdFee)\n {\n     AssertLockHeld(cs_main);\n     if (pfMissingInputs)\n@@ -1063,8 +1063,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             dFreeCount += nSize;\n         }\n \n-        if (fRejectInsaneFee && nFees > ::minRelayTxFee.GetFee(nSize) * 10000)\n-            return error(\"AcceptToMemoryPool: insane fees %s, %d > %d\",\n+        if (fRejectAbsurdFee && nFees > ::minRelayTxFee.GetFee(nSize) * 10000)\n+            return error(\"AcceptToMemoryPool: absurdly high fees %s, %d > %d\",\n                          hash.ToString(),\n                          nFees, ::minRelayTxFee.GetFee(nSize) * 10000);\n "
      },
      {
        "sha": "936cd43e99edb497ef022e0b7272d9df11c93be0",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=1371e6f5db88941c3b3c70d7a13b0cbf150ebf66",
        "patch": "@@ -205,7 +205,7 @@ void FlushStateToDisk();\n \n /** (try to) add transaction to memory pool **/\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, bool fRejectInsaneFee=false);\n+                        bool* pfMissingInputs, bool fRejectAbsurdFee=false);\n \n \n struct CNodeStateStats {"
      },
      {
        "sha": "5aef2d7539b1da6bd930d9bad9c8f46647b5ace6",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=1371e6f5db88941c3b3c70d7a13b0cbf150ebf66",
        "patch": "@@ -526,8 +526,8 @@ void SendCoinsDialog::processSendCoinsReturn(const WalletModel::SendCoinsReturn\n         msgParams.first = tr(\"The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n         msgParams.second = CClientUIInterface::MSG_ERROR;\n         break;\n-    case WalletModel::InsaneFee:\n-        msgParams.first = tr(\"A fee higher than %1 is considered an insanely high fee.\").arg(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), 10000000));\n+    case WalletModel::AbsurdFee:\n+        msgParams.first = tr(\"A fee higher than %1 is considered an absurdly high fee.\").arg(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), 10000000));\n         break;\n     case WalletModel::PaymentRequestExpired:\n         msgParams.first = tr(\"Payment request expired!\");"
      },
      {
        "sha": "3893def9c249326e85d82c8e627c707ba24394d5",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=1371e6f5db88941c3b3c70d7a13b0cbf150ebf66",
        "patch": "@@ -279,9 +279,9 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n             return TransactionCreationFailed;\n         }\n \n-        // reject insane fee > 0.1 bitcoin\n+        // reject absurdly high fee > 0.1 bitcoin\n         if (nFeeRequired > 10000000)\n-            return InsaneFee;\n+            return AbsurdFee;\n     }\n \n     return SendCoinsReturn(OK);"
      },
      {
        "sha": "4a9a12beaa9d10c67f392fb8fd0ec668f12fc20f",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=1371e6f5db88941c3b3c70d7a13b0cbf150ebf66",
        "patch": "@@ -111,7 +111,7 @@ class WalletModel : public QObject\n         DuplicateAddress,\n         TransactionCreationFailed, // Error returned when wallet is still locked\n         TransactionCommitFailed,\n-        InsaneFee,\n+        AbsurdFee,\n         PaymentRequestExpired\n     };\n "
      },
      {
        "sha": "31ceda9c3168d0045a5905cbd113fa2751918cc4",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=1371e6f5db88941c3b3c70d7a13b0cbf150ebf66",
        "patch": "@@ -2365,9 +2365,9 @@ int CMerkleTx::GetBlocksToMaturity() const\n }\n \n \n-bool CMerkleTx::AcceptToMemoryPool(bool fLimitFree, bool fRejectInsaneFee)\n+bool CMerkleTx::AcceptToMemoryPool(bool fLimitFree, bool fRejectAbsurdFee)\n {\n     CValidationState state;\n-    return ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, NULL, fRejectInsaneFee);\n+    return ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, NULL, fRejectAbsurdFee);\n }\n "
      },
      {
        "sha": "71d9d1fb6b25826ad08989fa14c67e063df6d60d",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=1371e6f5db88941c3b3c70d7a13b0cbf150ebf66",
        "patch": "@@ -548,7 +548,7 @@ class CMerkleTx : public CTransaction\n     int GetDepthInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n     bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChainINTERNAL(pindexRet) > 0; }\n     int GetBlocksToMaturity() const;\n-    bool AcceptToMemoryPool(bool fLimitFree=true, bool fRejectInsaneFee=true);\n+    bool AcceptToMemoryPool(bool fLimitFree=true, bool fRejectAbsurdFee=true);\n };\n \n /** "
      }
    ]
  },
  {
    "sha": "80ad135a5e54e8a065fee5ef36e57034679111ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MGFkMTM1YTVlNTRlOGEwNjVmZWU1ZWYzNmU1NzAzNDY3OTExMWFi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-13T02:15:39Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-01T21:47:21Z"
      },
      "message": "Change IsDERSignature to BIP66 implementation",
      "tree": {
        "sha": "bcbcc9a15aeb8d1a3bcf519d78621f223f2bc7b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bcbcc9a15aeb8d1a3bcf519d78621f223f2bc7b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80ad135a5e54e8a065fee5ef36e57034679111ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80ad135a5e54e8a065fee5ef36e57034679111ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80ad135a5e54e8a065fee5ef36e57034679111ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80ad135a5e54e8a065fee5ef36e57034679111ab/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6af674ecdc99db2eb741b8dc79e44bd0202e3855"
      }
    ],
    "stats": {
      "total": 126,
      "additions": 63,
      "deletions": 63
    },
    "files": [
      {
        "sha": "0a5bef601cb27d005cce3b30001a0ed86c9b0382",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 63,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80ad135a5e54e8a065fee5ef36e57034679111ab/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80ad135a5e54e8a065fee5ef36e57034679111ab/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=80ad135a5e54e8a065fee5ef36e57034679111ab",
        "patch": "@@ -93,76 +93,76 @@ bool static IsCompressedOrUncompressedPubKey(const valtype &vchPubKey) {\n  * in which case a single 0 byte is necessary and even required).\n  * \n  * See https://bitcointalk.org/index.php?topic=8392.msg127623#msg127623\n+ *\n+ * This function is consensus-critical since BIP66.\n  */\n-bool static IsDERSignature(const valtype &vchSig) {\n+bool static IsValidSignatureEncoding(const std::vector<unsigned char> &sig) {\n+    // Format: 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S] [sighash]\n+    // * total-length: 1-byte length descriptor of everything that follows,\n+    //   excluding the sighash byte.\n+    // * R-length: 1-byte length descriptor of the R value that follows.\n+    // * R: arbitrary-length big-endian encoded R value. It must use the shortest\n+    //   possible encoding for a positive integers (which means no null bytes at\n+    //   the start, except a single one when the next byte has its highest bit set).\n+    // * S-length: 1-byte length descriptor of the S value that follows.\n+    // * S: arbitrary-length big-endian encoded S value. The same rules apply.\n+    // * sighash: 1-byte value indicating what data is hashed (not part of the DER\n+    //   signature)\n \n-    if (vchSig.size() < 9) {\n-        //  Non-canonical signature: too short\n-        return false;\n-    }\n-    if (vchSig.size() > 73) {\n-        // Non-canonical signature: too long\n-        return false;\n-    }\n-    if (vchSig[0] != 0x30) {\n-        //  Non-canonical signature: wrong type\n-        return false;\n-    }\n-    if (vchSig[1] != vchSig.size()-3) {\n-        //  Non-canonical signature: wrong length marker\n-        return false;\n-    }\n-    unsigned int nLenR = vchSig[3];\n-    if (5 + nLenR >= vchSig.size()) {\n-        //  Non-canonical signature: S length misplaced\n-        return false;\n-    }\n-    unsigned int nLenS = vchSig[5+nLenR];\n-    if ((unsigned long)(nLenR+nLenS+7) != vchSig.size()) {\n-        //  Non-canonical signature: R+S length mismatch\n-        return false;\n-    }\n+    // Minimum and maximum size constraints.\n+    if (sig.size() < 9) return false;\n+    if (sig.size() > 73) return false;\n \n-    const unsigned char *R = &vchSig[4];\n-    if (R[-2] != 0x02) {\n-        //  Non-canonical signature: R value type mismatch\n-        return false;\n-    }\n-    if (nLenR == 0) {\n-        //  Non-canonical signature: R length is zero\n-        return false;\n-    }\n-    if (R[0] & 0x80) {\n-        //  Non-canonical signature: R value negative\n-        return false;\n-    }\n-    if (nLenR > 1 && (R[0] == 0x00) && !(R[1] & 0x80)) {\n-        //  Non-canonical signature: R value excessively padded\n-        return false;\n-    }\n+    // A signature is of type 0x30 (compound).\n+    if (sig[0] != 0x30) return false;\n+\n+    // Make sure the length covers the entire signature.\n+    if (sig[1] != sig.size() - 3) return false;\n+\n+    // Extract the length of the R element.\n+    unsigned int lenR = sig[3];\n+\n+    // Make sure the length of the S element is still inside the signature.\n+    if (5 + lenR >= sig.size()) return false;\n+\n+    // Extract the length of the S element.\n+    unsigned int lenS = sig[5 + lenR];\n+\n+    // Verify that the length of the signature matches the sum of the length\n+    // of the elements.\n+    if ((size_t)(lenR + lenS + 7) != sig.size()) return false;\n+ \n+    // Check whether the R element is an integer.\n+    if (sig[2] != 0x02) return false;\n+\n+    // Zero-length integers are not allowed for R.\n+    if (lenR == 0) return false;\n+\n+    // Negative numbers are not allowed for R.\n+    if (sig[4] & 0x80) return false;\n+\n+    // Null bytes at the start of R are not allowed, unless R would\n+    // otherwise be interpreted as a negative number.\n+    if (lenR > 1 && (sig[4] == 0x00) && !(sig[5] & 0x80)) return false;\n+\n+    // Check whether the S element is an integer.\n+    if (sig[lenR + 4] != 0x02) return false;\n+\n+    // Zero-length integers are not allowed for S.\n+    if (lenS == 0) return false;\n+\n+    // Negative numbers are not allowed for S.\n+    if (sig[lenR + 6] & 0x80) return false;\n+\n+    // Null bytes at the start of S are not allowed, unless S would otherwise be\n+    // interpreted as a negative number.\n+    if (lenS > 1 && (sig[lenR + 6] == 0x00) && !(sig[lenR + 7] & 0x80)) return false;\n \n-    const unsigned char *S = &vchSig[6+nLenR];\n-    if (S[-2] != 0x02) {\n-        //  Non-canonical signature: S value type mismatch\n-        return false;\n-    }\n-    if (nLenS == 0) {\n-        //  Non-canonical signature: S length is zero\n-        return false;\n-    }\n-    if (S[0] & 0x80) {\n-        //  Non-canonical signature: S value negative\n-        return false;\n-    }\n-    if (nLenS > 1 && (S[0] == 0x00) && !(S[1] & 0x80)) {\n-        //  Non-canonical signature: S value excessively padded\n-        return false;\n-    }\n     return true;\n }\n \n bool static IsLowDERSignature(const valtype &vchSig, ScriptError* serror) {\n-    if (!IsDERSignature(vchSig)) {\n+    if (!IsValidSignatureEncoding(vchSig)) {\n         return set_error(serror, SCRIPT_ERR_SIG_DER);\n     }\n     unsigned int nLenR = vchSig[3];\n@@ -194,7 +194,7 @@ bool static CheckSignatureEncoding(const valtype &vchSig, unsigned int flags, Sc\n     if (vchSig.size() == 0) {\n         return true;\n     }\n-    if ((flags & (SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC)) != 0 && !IsDERSignature(vchSig)) {\n+    if ((flags & (SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC)) != 0 && !IsValidSignatureEncoding(vchSig)) {\n         return set_error(serror, SCRIPT_ERR_SIG_DER);\n     } else if ((flags & SCRIPT_VERIFY_LOW_S) != 0 && !IsLowDERSignature(vchSig, serror)) {\n         // serror is set"
      }
    ]
  },
  {
    "sha": "092e9fe5fb61ff7ce38dc2820938106fc0f0081d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOTJlOWZlNWZiNjFmZjdjZTM4ZGMyODIwOTM4MTA2ZmMwZjAwODFk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-19T23:19:37Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-01T21:47:21Z"
      },
      "message": "Example unit tests from BIP66",
      "tree": {
        "sha": "75e17507afb81e2509d8fc0343f9dde4296e2db0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/75e17507afb81e2509d8fc0343f9dde4296e2db0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/092e9fe5fb61ff7ce38dc2820938106fc0f0081d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/092e9fe5fb61ff7ce38dc2820938106fc0f0081d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/092e9fe5fb61ff7ce38dc2820938106fc0f0081d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/092e9fe5fb61ff7ce38dc2820938106fc0f0081d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80ad135a5e54e8a065fee5ef36e57034679111ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80ad135a5e54e8a065fee5ef36e57034679111ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80ad135a5e54e8a065fee5ef36e57034679111ab"
      }
    ],
    "stats": {
      "total": 217,
      "additions": 217,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3a15acee9250bab52388bc419afc5a0836a9414e",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 96,
        "deletions": 0,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/092e9fe5fb61ff7ce38dc2820938106fc0f0081d/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/092e9fe5fb61ff7ce38dc2820938106fc0f0081d/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=092e9fe5fb61ff7ce38dc2820938106fc0f0081d",
        "patch": "@@ -589,6 +589,102 @@\n     \"DERSIG\",\n     \"P2PK NOT with too much R padding\"\n ],\n+[\n+    \"0x47 0x30440220d7a0417c3f6d1a15094d1cf2a3378ca0503eb8a57630953a9e2987e21ddd0a6502207a6266d686c99090920249991d3d42065b6d43eb70187b219c0db82e4f94d1a201\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"DERSIG\",\n+    \"BIP66 example 1, with DERSIG\"\n+],\n+[\n+    \"0x47 0x304402208e43c0b91f7c1e5bc58e41c8185f8a6086e111b0090187968a86f2822462d3c902200a58f4076b1133b18ff1dc83ee51676e44c60cc608d9534e0df5ace0424fc0be01\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n+    \"\",\n+    \"BIP66 example 2, without DERSIG\"\n+],\n+[\n+    \"0x47 0x304402208e43c0b91f7c1e5bc58e41c8185f8a6086e111b0090187968a86f2822462d3c902200a58f4076b1133b18ff1dc83ee51676e44c60cc608d9534e0df5ace0424fc0be01\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"BIP66 example 2, with DERSIG\"\n+],\n+[\n+    \"0\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"\",\n+    \"BIP66 example 3, without DERSIG\"\n+],\n+[\n+    \"0\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"DERSIG\",\n+    \"BIP66 example 3, with DERSIG\"\n+],\n+[\n+    \"1\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"\",\n+    \"BIP66 example 5, without DERSIG\"\n+],\n+[\n+    \"1\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"DERSIG\",\n+    \"BIP66 example 5, with DERSIG\"\n+],\n+[\n+    \"1\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"BIP66 example 6, with DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0x47 0x304402200b3d0b0375bb15c14620afa4aa10ae90a0d6a046ce217bc20fe0bc1ced68c1b802204b550acab90ae6d3478057c9ad24f9df743815b799b6449dd7e7f6d3bc6e274c01\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"DERSIG\",\n+    \"BIP66 example 7, with DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220f00a77260d34ec2f0c59621dc710f58169d0ca06df1a88cd4b1f1b97bd46991b02201ee220c7e04f26aed03f94aa97fb09ca5627163bf4ba07e6979972ec737db22601 0x47 0x3044022079ea80afd538d9ada421b5101febeb6bc874e01dde5bca108c1d0479aec339a4022004576db8f66130d1df686ccf00935703689d69cf539438da1edab208b0d63c4801\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n+    \"\",\n+    \"BIP66 example 8, without DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220f00a77260d34ec2f0c59621dc710f58169d0ca06df1a88cd4b1f1b97bd46991b02201ee220c7e04f26aed03f94aa97fb09ca5627163bf4ba07e6979972ec737db22601 0x47 0x3044022079ea80afd538d9ada421b5101febeb6bc874e01dde5bca108c1d0479aec339a4022004576db8f66130d1df686ccf00935703689d69cf539438da1edab208b0d63c4801\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n+    \"DERSIG\",\n+    \"BIP66 example 8, with DERSIG\"\n+],\n+[\n+    \"0 0 0x47 0x3044022081aa9d436f2154e8b6d600516db03d78de71df685b585a9807ead4210bd883490220534bb6bdf318a419ac0749660b60e78d17d515558ef369bf872eff405b676b2e01\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"\",\n+    \"BIP66 example 9, without DERSIG\"\n+],\n+[\n+    \"0 0 0x47 0x3044022081aa9d436f2154e8b6d600516db03d78de71df685b585a9807ead4210bd883490220534bb6bdf318a419ac0749660b60e78d17d515558ef369bf872eff405b676b2e01\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"DERSIG\",\n+    \"BIP66 example 9, with DERSIG\"\n+],\n+[\n+    \"0 0 0x47 0x30440220afa76a8f60622f813b05711f051c6c3407e32d1b1b70b0576c1f01b54e4c05c702200d58e9df044fd1845cabfbeef6e624ba0401daf7d7e084736f9ff601c3783bf501\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n+    \"DERSIG\",\n+    \"BIP66 example 10, with DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"\",\n+    \"BIP66 example 11, without DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"DERSIG\",\n+    \"BIP66 example 11, with DERSIG\"\n+],\n [\n     \"0x49 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef05101\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\","
      },
      {
        "sha": "710d4f77076964878ab4821fe12aff8355e8b3da",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/092e9fe5fb61ff7ce38dc2820938106fc0f0081d/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/092e9fe5fb61ff7ce38dc2820938106fc0f0081d/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=092e9fe5fb61ff7ce38dc2820938106fc0f0081d",
        "patch": "@@ -755,6 +755,54 @@\n     \"\",\n     \"P2PK NOT with bad sig with too much R padding but no DERSIG\"\n ],\n+[\n+    \"0x47 0x30440220d7a0417c3f6d1a15094d1cf2a3378ca0503eb8a57630953a9e2987e21ddd0a6502207a6266d686c99090920249991d3d42065b6d43eb70187b219c0db82e4f94d1a201\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"\",\n+    \"BIP66 example 1, without DERSIG\"\n+],\n+[\n+    \"0\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n+    \"\",\n+    \"BIP66 example 4, without DERSIG\"\n+],\n+[\n+    \"0\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"BIP66 example 4, with DERSIG\"\n+],\n+[\n+    \"1\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n+    \"\",\n+    \"BIP66 example 6, without DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0x47 0x304402200b3d0b0375bb15c14620afa4aa10ae90a0d6a046ce217bc20fe0bc1ced68c1b802204b550acab90ae6d3478057c9ad24f9df743815b799b6449dd7e7f6d3bc6e274c01\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"\",\n+    \"BIP66 example 7, without DERSIG\"\n+],\n+[\n+    \"0 0 0x47 0x30440220afa76a8f60622f813b05711f051c6c3407e32d1b1b70b0576c1f01b54e4c05c702200d58e9df044fd1845cabfbeef6e624ba0401daf7d7e084736f9ff601c3783bf501\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n+    \"\",\n+    \"BIP66 example 10, without DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220f00a77260d34ec2f0c59621dc710f58169d0ca06df1a88cd4b1f1b97bd46991b02201ee220c7e04f26aed03f94aa97fb09ca5627163bf4ba07e6979972ec737db22601 0\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n+    \"\",\n+    \"BIP66 example 12, without DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220f00a77260d34ec2f0c59621dc710f58169d0ca06df1a88cd4b1f1b97bd46991b02201ee220c7e04f26aed03f94aa97fb09ca5627163bf4ba07e6979972ec737db22601 0\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n+    \"DERSIG\",\n+    \"BIP66 example 12, with DERSIG\"\n+],\n [\n     \"0x49 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef05101\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\","
      },
      {
        "sha": "c25e8317a2b531bfc4dd629fb6e909625186ee7b",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 73,
        "deletions": 0,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/092e9fe5fb61ff7ce38dc2820938106fc0f0081d/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/092e9fe5fb61ff7ce38dc2820938106fc0f0081d/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=092e9fe5fb61ff7ce38dc2820938106fc0f0081d",
        "patch": "@@ -406,6 +406,79 @@ BOOST_AUTO_TEST_CASE(script_build)\n                               \"P2PK NOT with too much R padding\", SCRIPT_VERIFY_DERSIG\n                              ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n \n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                               \"BIP66 example 1, without DERSIG\", 0\n+                              ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                              \"BIP66 example 1, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                              \"BIP66 example 2, without DERSIG\", 0\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                              \"BIP66 example 2, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                              \"BIP66 example 3, without DERSIG\", 0\n+                             ).Num(0));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                              \"BIP66 example 3, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(0));\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                               \"BIP66 example 4, without DERSIG\", 0\n+                              ).Num(0));\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                               \"BIP66 example 4, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                              ).Num(0));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                              \"BIP66 example 5, without DERSIG\", 0\n+                             ).Num(1));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                              \"BIP66 example 5, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(1));\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                               \"BIP66 example 6, without DERSIG\", 0\n+                              ).Num(1));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                              \"BIP66 example 6, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(1));\n+    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                               \"BIP66 example 7, without DERSIG\", 0\n+                              ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                              \"BIP66 example 7, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                              \"BIP66 example 8, without DERSIG\", 0\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                              \"BIP66 example 8, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                              \"BIP66 example 9, without DERSIG\", 0\n+                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                              \"BIP66 example 9, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                               \"BIP66 example 10, without DERSIG\", 0\n+                              ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                              \"BIP66 example 10, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                              \"BIP66 example 11, without DERSIG\", 0\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                              \"BIP66 example 11, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n+    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                               \"BIP66 example 12, without DERSIG\", 0\n+                              ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n+    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                               \"BIP66 example 12, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                              ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n+\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n                                \"P2PK with high S but no LOW_S\", 0\n                               ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));"
      }
    ]
  },
  {
    "sha": "5a47811da5158df763aa2fca09ce646ee0c51e7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTQ3ODExZGE1MTU4ZGY3NjNhYTJmY2EwOWNlNjQ2ZWUwYzUxZTdi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-19T23:37:21Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-01T21:51:24Z"
      },
      "message": "BIP66 changeover logic",
      "tree": {
        "sha": "b94bdd9ae683fa5e449e37ab78b7419b8d9f409b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b94bdd9ae683fa5e449e37ab78b7419b8d9f409b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a47811da5158df763aa2fca09ce646ee0c51e7b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a47811da5158df763aa2fca09ce646ee0c51e7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a47811da5158df763aa2fca09ce646ee0c51e7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a47811da5158df763aa2fca09ce646ee0c51e7b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "092e9fe5fb61ff7ce38dc2820938106fc0f0081d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/092e9fe5fb61ff7ce38dc2820938106fc0f0081d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/092e9fe5fb61ff7ce38dc2820938106fc0f0081d"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 15,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f20575eaf2f18f42904f23e23eb5485818f94f94",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a47811da5158df763aa2fca09ce646ee0c51e7b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a47811da5158df763aa2fca09ce646ee0c51e7b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5a47811da5158df763aa2fca09ce646ee0c51e7b",
        "patch": "@@ -1764,6 +1764,11 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n \n+    // Start enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks, when 75% of the network has upgraded:\n+    if (block.nVersion >= 3 && IsSuperMajority(3, pindex->pprev, Params().EnforceBlockUpgradeMajority())) {\n+        flags |= SCRIPT_VERIFY_DERSIG;\n+    }\n+\n     CBlockUndo blockundo;\n \n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n@@ -2601,6 +2606,13 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n                              REJECT_OBSOLETE, \"bad-version\");\n     }\n \n+    // Reject block.nVersion=2 blocks when 95% (75% on testnet) of the network has upgraded:\n+    if (block.nVersion < 3 && IsSuperMajority(3, pindexPrev, Params().RejectBlockOutdatedMajority()))\n+    {\n+        return state.Invalid(error(\"%s : rejected nVersion=2 block\", __func__),\n+                             REJECT_OBSOLETE, \"bad-version\");\n+    }\n+\n     return true;\n }\n "
      },
      {
        "sha": "c7ed6f723a4d35c77eec7fb40e90e92b6f2b531b",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a47811da5158df763aa2fca09ce646ee0c51e7b/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a47811da5158df763aa2fca09ce646ee0c51e7b/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=5a47811da5158df763aa2fca09ce646ee0c51e7b",
        "patch": "@@ -24,7 +24,7 @@ class CBlockHeader\n {\n public:\n     // header\n-    static const int32_t CURRENT_VERSION=2;\n+    static const int32_t CURRENT_VERSION=3;\n     int32_t nVersion;\n     uint256 hashPrevBlock;\n     uint256 hashMerkleRoot;"
      },
      {
        "sha": "0320577797873e2b03e50930f4330cc58ec9c692",
        "filename": "src/script/bitcoinconsensus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a47811da5158df763aa2fca09ce646ee0c51e7b/src/script/bitcoinconsensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a47811da5158df763aa2fca09ce646ee0c51e7b/src/script/bitcoinconsensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.h?ref=5a47811da5158df763aa2fca09ce646ee0c51e7b",
        "patch": "@@ -46,6 +46,7 @@ enum\n {\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NONE      = 0,\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH      = (1U << 0), // evaluate P2SH (BIP16) subscripts\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG    = (1U << 2), // enforce strict DER (BIP66) compliance\n };\n \n /// Returns 1 if the input nIn of the serialized transaction pointed to by"
      },
      {
        "sha": "92e2c27c13c860934829997972665ad422135673",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a47811da5158df763aa2fca09ce646ee0c51e7b/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a47811da5158df763aa2fca09ce646ee0c51e7b/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=5a47811da5158df763aa2fca09ce646ee0c51e7b",
        "patch": "@@ -45,6 +45,7 @@ static const unsigned int MANDATORY_SCRIPT_VERIFY_FLAGS = SCRIPT_VERIFY_P2SH;\n  * blocks and we must accept those blocks.\n  */\n static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY_FLAGS |\n+                                                         SCRIPT_VERIFY_DERSIG |\n                                                          SCRIPT_VERIFY_STRICTENC |\n                                                          SCRIPT_VERIFY_MINIMALDATA |\n                                                          SCRIPT_VERIFY_NULLDUMMY |"
      }
    ]
  },
  {
    "sha": "819bcf9b9902319176cdb1d476cacfee9b3727ec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTliY2Y5Yjk5MDIzMTkxNzZjZGIxZDQ3NmNhY2ZlZTliMzcyN2Vj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-20T21:39:19Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-01T21:51:24Z"
      },
      "message": "Add RPC test for DERSIG BIP switchover logic",
      "tree": {
        "sha": "71649e3d97fe549ea8e705ea2d79ef1d8100640f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71649e3d97fe549ea8e705ea2d79ef1d8100640f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/819bcf9b9902319176cdb1d476cacfee9b3727ec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/819bcf9b9902319176cdb1d476cacfee9b3727ec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/819bcf9b9902319176cdb1d476cacfee9b3727ec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/819bcf9b9902319176cdb1d476cacfee9b3727ec/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a47811da5158df763aa2fca09ce646ee0c51e7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a47811da5158df763aa2fca09ce646ee0c51e7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a47811da5158df763aa2fca09ce646ee0c51e7b"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 90,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9f2cc84601545796b87c6e181acb10e88e829e4f",
        "filename": "qa/rpc-tests/bipdersig.py",
        "status": "added",
        "additions": 90,
        "deletions": 0,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/819bcf9b9902319176cdb1d476cacfee9b3727ec/qa/rpc-tests/bipdersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/819bcf9b9902319176cdb1d476cacfee9b3727ec/qa/rpc-tests/bipdersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig.py?ref=819bcf9b9902319176cdb1d476cacfee9b3727ec",
        "patch": "@@ -0,0 +1,90 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test the BIP66 changeover logic\n+#\n+\n+from test_framework import BitcoinTestFramework\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+from util import *\n+import os\n+import shutil\n+\n+class BIP66Test(BitcoinTestFramework):\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, []))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-blockversion=2\"]))\n+        self.nodes.append(start_node(2, self.options.tmpdir, [\"-blockversion=3\"]))\n+        connect_nodes(self.nodes[1], 0)\n+        connect_nodes(self.nodes[2], 0)\n+        self.is_network_split = False\n+        self.sync_all()\n+\n+    def run_test(self):\n+        cnt = self.nodes[0].getblockcount()\n+\n+        # Mine some old-version blocks\n+        self.nodes[1].setgenerate(True, 100)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 100):\n+            raise AssertionError(\"Failed to mine 100 version=2 blocks\")\n+\n+        # Mine 750 new-version blocks\n+        for i in xrange(15):\n+            self.nodes[2].setgenerate(True, 50)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 850):\n+            raise AssertionError(\"Failed to mine 750 version=3 blocks\")\n+\n+        # TODO: check that new DERSIG rules are not enforced\n+\n+        # Mine 1 new-version block\n+        self.nodes[2].setgenerate(True, 1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 851):\n+            raise AssertionFailure(\"Failed to mine a version=3 blocks\")\n+\n+        # TODO: check that new DERSIG rules are enforced\n+\n+        # Mine 198 new-version blocks\n+        for i in xrange(2):\n+            self.nodes[2].setgenerate(True, 99)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1049):\n+            raise AssertionError(\"Failed to mine 198 version=3 blocks\")\n+\n+        # Mine 1 old-version block\n+        self.nodes[1].setgenerate(True, 1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1050):\n+            raise AssertionError(\"Failed to mine a version=2 block after 949 version=3 blocks\")\n+\n+        # Mine 1 new-version blocks\n+        self.nodes[2].setgenerate(True, 1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1051):\n+            raise AssertionError(\"Failed to mine a version=3 block\")\n+\n+        # Mine 1 old-version blocks\n+        try:\n+            self.nodes[1].setgenerate(True, 1)\n+            raise AssertionError(\"Succeeded to mine a version=2 block after 950 version=3 blocks\")\n+        except JSONRPCException:\n+            pass\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1051):\n+            raise AssertionError(\"Accepted a version=2 block after 950 version=3 blocks\")\n+\n+        # Mine 1 new-version blocks\n+        self.nodes[2].setgenerate(True, 1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1052):\n+            raise AssertionError(\"Failed to mine a version=3 block\")\n+\n+if __name__ == '__main__':\n+    BIP66Test().main()"
      }
    ]
  },
  {
    "sha": "bf6cdebdc5b750cea6121095dcbbbf720b726bb9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjZjZGViZGM1Yjc1MGNlYTYxMjEwOTVkY2JiYmY3MjBiNzI2YmI5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-25T16:46:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-01T21:51:25Z"
      },
      "message": "Increase coverage of DERSIG edge cases",
      "tree": {
        "sha": "6d6fe9fa12794d31042ac6a311045cb41ab1da39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d6fe9fa12794d31042ac6a311045cb41ab1da39"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf6cdebdc5b750cea6121095dcbbbf720b726bb9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf6cdebdc5b750cea6121095dcbbbf720b726bb9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf6cdebdc5b750cea6121095dcbbbf720b726bb9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf6cdebdc5b750cea6121095dcbbbf720b726bb9/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "819bcf9b9902319176cdb1d476cacfee9b3727ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/819bcf9b9902319176cdb1d476cacfee9b3727ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/819bcf9b9902319176cdb1d476cacfee9b3727ec"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 20,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a67c157aff768f49666e0a55730eca2c10ae79fd",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf6cdebdc5b750cea6121095dcbbbf720b726bb9/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf6cdebdc5b750cea6121095dcbbbf720b726bb9/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=bf6cdebdc5b750cea6121095dcbbbf720b726bb9",
        "patch": "@@ -510,6 +510,16 @@\n     \"2-of-2 CHECKMULTISIG NOT with both pubkeys valid, but first signature invalid.\"\n ],\n \n+[\"Increase DERSIG test coverage\"],\n+[\"0x4a 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"0 CHECKSIG NOT\", \"DERSIG\", \"Overly long signature is incorrectly encoded for DERSIG\"],\n+[\"0x25 0x30220220000000000000000000000000000000000000000000000000000000000000000000\", \"0 CHECKSIG NOT\", \"DERSIG\", \"Missing S is incorrectly encoded for DERSIG\"],\n+[\"0x27 0x3024021077777777777777777777777777777777020a7777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"S with invalid S length is incorrectly encoded for DERSIG\"],\n+[\"0x27 0x302403107777777777777777777777777777777702107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"Non-integer R is incorrectly encoded for DERSIG\"],\n+[\"0x27 0x302402107777777777777777777777777777777703107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"Non-integer S is incorrectly encoded for DERSIG\"],\n+[\"0x17 0x3014020002107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"Zero-length R is incorrectly encoded for DERSIG\"],\n+[\"0x17 0x3014021077777777777777777777777777777777020001\", \"0 CHECKSIG NOT\", \"DERSIG\", \"Zero-length S is incorrectly encoded for DERSIG\"],\n+[\"0x27 0x302402107777777777777777777777777777777702108777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"Negative S is incorrectly encoded for DERSIG\"],\n+\n [\"Automatically generated test cases\"],\n [\n     \"0x47 0x3044022053205076a7bb12d2db3162a2d97d8197631f829b065948b7019b15482af819a902204328dcc02c994ca086b1226d0d5f1674d23cfae0d846143df812b81cab3391e801\","
      },
      {
        "sha": "fb81fcb1f53f18375b2f957064f9038fc9e76d4b",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf6cdebdc5b750cea6121095dcbbbf720b726bb9/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf6cdebdc5b750cea6121095dcbbbf720b726bb9/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=bf6cdebdc5b750cea6121095dcbbbf720b726bb9",
        "patch": "@@ -688,6 +688,16 @@\n     \"2-of-2 CHECKMULTISIG NOT with both pubkeys valid, but second signature invalid. Valid pubkey fails, and CHECKMULTISIG exits early, prior to evaluation of second invalid signature.\"\n ],\n \n+[\"Increase test coverage for DERSIG\"],\n+[\"0x4a 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"0 CHECKSIG NOT\", \"\", \"Overly long signature is correctly encoded\"],\n+[\"0x25 0x30220220000000000000000000000000000000000000000000000000000000000000000000\", \"0 CHECKSIG NOT\", \"\", \"Missing S is correctly encoded\"],\n+[\"0x27 0x3024021077777777777777777777777777777777020a7777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"\", \"S with invalid S length is correctly encoded\"],\n+[\"0x27 0x302403107777777777777777777777777777777702107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"\", \"Non-integer R is correctly encoded\"],\n+[\"0x27 0x302402107777777777777777777777777777777703107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"\", \"Non-integer S is correctly encoded\"],\n+[\"0x17 0x3014020002107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"\", \"Zero-length R is correctly encoded\"],\n+[\"0x17 0x3014021077777777777777777777777777777777020001\", \"0 CHECKSIG NOT\", \"\", \"Zero-length S is correctly encoded for DERSIG\"],\n+[\"0x27 0x302402107777777777777777777777777777777702108777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"\", \"Negative S is correctly encoded\"],\n+\n [\"Automatically generated test cases\"],\n [\n     \"0x47 0x3044022053205076a7bb13d2db3162a2d97d8197631f829b065948b7019b15482af819a902204328dcc02c994ca086b1226d0d5f1674d23cfae0d846143df812b81cab3391e801\","
      }
    ]
  },
  {
    "sha": "a62649731fb1babaedff10b7c0baec4c50c90d60",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjI2NDk3MzFmYjFiYWJhZWRmZjEwYjdjMGJhZWM0YzUwYzkwZDYw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-02T10:55:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-02T10:56:23Z"
      },
      "message": "Merge pull request #5731\n\nee93202 Changed pronouns for correctness and inclusivity (bikinibabe)\n1fa89a5 fix _code_ snippet in gitian-building.md (UdjinM6)\n34c6181 Fix README link from util.sh -> util.py. (Matt Bogosian)\nfaf0af4 Suggest --disable-wallet when libdb_cxx headers are missing (Luke Dashjr)\n5a809ef depends: fix typos (Michael Ford)\nbd2b73b TRIVIAL: fix misleading comment (Vitalii Demianets)\n5262fde Remove whitespaces before double colon in errors and logs (Pavel Jan\u00edk)\n3800135 Fix typo (Pavel Jan\u00edk)\n91a9fe0 Fix typo - sentence starts with capital letter (Pavel Jan\u00edk)\nbfc29dc Improve gitian build guide (Michael Ford)\nd6bed15 remove sig_canonical.json and sig_noncanonical.json (Manuel Araoz)\n8673160 Remove bootstrap.md (Michael Ford)",
      "tree": {
        "sha": "cca272581d2cb6b9bf39283f3e4ab26da032a4fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cca272581d2cb6b9bf39283f3e4ab26da032a4fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a62649731fb1babaedff10b7c0baec4c50c90d60",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUz1fXAAoJEHSBCwEjRsmm0ocIALToIsc07e+d0sXNFL5E6F8H\nfBTuSDd0XznLFgKhE7t98a42/K6TjcBCvQg+U1gLrfnkLgWJ0qxaYgyrozkgeP4B\nlUKkc8vVAARUL/xJM071KUhbhrZ1gmvczGcdCxBVi0IOlcpZonUmJC+b3t2FZ9c9\nJYYVynOwpzq2eoyvVkr7HBiCIB3eokc7b4YBGMbVYIP7dUL+vx08GShTMWE1Wkdb\nWx4OSPmGFR5WdEMNo6EJ8gkDJHMjEy8QED9uovV6U/nPAtPyy+bpy/oo6b30Pxhw\n93CfU0MoJJxC67t5neAs6Fk7JALabnVU131J/mAzkNQavSQACXuf2Xg0pfjXkWA=\n=SPUR\n-----END PGP SIGNATURE-----",
        "payload": "tree cca272581d2cb6b9bf39283f3e4ab26da032a4fc\nparent 6af674ecdc99db2eb741b8dc79e44bd0202e3855\nparent ee932025c1a318943a6b101be9fe7a4a2e10648c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422874542 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422874583 +0100\n\nMerge pull request #5731\n\nee93202 Changed pronouns for correctness and inclusivity (bikinibabe)\n1fa89a5 fix _code_ snippet in gitian-building.md (UdjinM6)\n34c6181 Fix README link from util.sh -> util.py. (Matt Bogosian)\nfaf0af4 Suggest --disable-wallet when libdb_cxx headers are missing (Luke Dashjr)\n5a809ef depends: fix typos (Michael Ford)\nbd2b73b TRIVIAL: fix misleading comment (Vitalii Demianets)\n5262fde Remove whitespaces before double colon in errors and logs (Pavel Jan\u00edk)\n3800135 Fix typo (Pavel Jan\u00edk)\n91a9fe0 Fix typo - sentence starts with capital letter (Pavel Jan\u00edk)\nbfc29dc Improve gitian build guide (Michael Ford)\nd6bed15 remove sig_canonical.json and sig_noncanonical.json (Manuel Araoz)\n8673160 Remove bootstrap.md (Michael Ford)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a62649731fb1babaedff10b7c0baec4c50c90d60",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a62649731fb1babaedff10b7c0baec4c50c90d60",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a62649731fb1babaedff10b7c0baec4c50c90d60/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6af674ecdc99db2eb741b8dc79e44bd0202e3855"
      },
      {
        "sha": "ee932025c1a318943a6b101be9fe7a4a2e10648c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee932025c1a318943a6b101be9fe7a4a2e10648c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee932025c1a318943a6b101be9fe7a4a2e10648c"
      }
    ],
    "stats": {
      "total": 577,
      "additions": 244,
      "deletions": 333
    },
    "files": [
      {
        "sha": "0bf558d25b5e904fe40340bb29115baaf32da190",
        "filename": "build-aux/m4/bitcoin_find_bdb48.m4",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/build-aux/m4/bitcoin_find_bdb48.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/build-aux/m4/bitcoin_find_bdb48.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_find_bdb48.m4?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -38,7 +38,7 @@ AC_DEFUN([BITCOIN_FIND_BDB48],[\n   done\n   if test \"x$bdbpath\" = \"xX\"; then\n     AC_MSG_RESULT([no])\n-    AC_MSG_ERROR(libdb_cxx headers missing)\n+    AC_MSG_ERROR([libdb_cxx headers missing, Bitcoin Core requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n   elif test \"x$bdb48path\" = \"xX\"; then\n     BITCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdbpath}],db_cxx)\n     AC_ARG_WITH([incompatible-bdb],[AS_HELP_STRING([--with-incompatible-bdb], [allow using a bdb version other than 4.8])],["
      },
      {
        "sha": "55e7222697f146e39ae4479bb2f6266463affa99",
        "filename": "depends/README",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/depends/README",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/depends/README",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -7,7 +7,7 @@ There are several features that make it different from most similar systems:\n \n In theory, binaries for any target OS/architecture can be created, from a\n builder running any OS/architecture. In practice, build-side tools must be\n-specified when the defaults don't fit, and packages must be ammended to work\n+specified when the defaults don't fit, and packages must be amended to work\n on new hosts. For now, a build architecture of x86_64 is assumed, either on\n Linux or OSX.\n "
      },
      {
        "sha": "b407737f7f4815fdfddca21a15824a2b964218ff",
        "filename": "depends/funcs.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/depends/funcs.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/depends/funcs.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/funcs.mk?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -205,7 +205,7 @@ endef\n # These functions create the build targets for each package. They must be\n # broken down into small steps so that each part is done for all packages\n # before moving on to the next step. Otherwise, a package's info\n-# (build-id for example) would only be avilable to another package if it\n+# (build-id for example) would only be available to another package if it\n # happened to be computed already.\n \n #set the type for host/build packages."
      },
      {
        "sha": "0ade8f99238abb37a616b51a4fcfc2eb23ffc8d3",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -3,7 +3,7 @@ Bitcoin Core 0.10.99\n \n Setup\n ---------------------\n-[Bitcoin Core](http://bitcoin.org/en/download) is the original Bitcoin client and it builds the backbone of the network. However, it downloads and stores the entire history of Bitcoin transactions (which is currently several GBs); depending on the speed of your computer and network connection, the synchronization process can take anywhere from a few hours to a day or more. Thankfully you only have to do this once. If you would like the process to go faster you can [download the blockchain directly](bootstrap.md).\n+[Bitcoin Core](http://bitcoin.org/en/download) is the original Bitcoin client and it builds the backbone of the network. However, it downloads and stores the entire history of Bitcoin transactions (which is currently several GBs); depending on the speed of your computer and network connection, the synchronization process can take anywhere from a few hours to a day or more.\n \n Running\n ---------------------"
      },
      {
        "sha": "b84fd24b11d9270a5c3b23dfdb2b2e77ede2ecbd",
        "filename": "doc/bootstrap.md",
        "status": "removed",
        "additions": 0,
        "deletions": 56,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6af674ecdc99db2eb741b8dc79e44bd0202e3855/doc/bootstrap.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6af674ecdc99db2eb741b8dc79e44bd0202e3855/doc/bootstrap.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bootstrap.md?ref=6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "patch": "@@ -1,56 +0,0 @@\n-### Bootstrap the Blockchain Synchronization\n-\n-Normally the Bitcoin client will download the transaction and network information, called the blockchain, from the network by syncing with the other clients. This process can take quite some time as the [Bitcoin blockchain](https://blockchain.info/charts/blocks-size) is growing bigger and bigger for each day. Luckily there is a safe and fast way to speed up this process. We'll show you how to bootstrap your blockchain to bring your client up to speed in just a few simple steps.\n-\n-### Requirements\n-\n-- A fresh install of the Bitcoin client software.\n-\n-### Download the blockchain via BitTorrent\n-\n-Jeff Garzik, Bitcoin Core developer, offers an [torrent file](https://bitcointalk.org/index.php?topic=145386.0) for bootstrapping purposes that is updated often. BitTorrent is a protocol that speeds up the downloading of large files by using the other clients in the network. Examples of free and safe open source clients are [Deluge](http://deluge-torrent.org/) or [qBittorrent](http://www.qbittorrent.org/). A guide to installing and configuring the torrent clients can be found [here](http://dev.deluge-torrent.org/wiki/UserGuide) for Deluge and [here](http://qbforums.shiki.hu/) for qBittorrent. A further in-depth tutorial on BitTorrent can be found [here](http://www.howtogeek.com/howto/31846/bittorrent-for-beginners-how-get-started-downloading-torrents/).\n-\n-With the client installed we'll proceed to download the blockchain torrent file. Use the following magnet link:\n-\n-\tmagnet:?xt=urn:btih:2d4e6c1f96c5d5fb260dff92aea4e600227f1aea&dn=bootstrap.dat&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.ccc.de:80&tr=udp://tracker.istole.it:80\n-\t\n- or go to [Jeff Garzik's topic](https://bitcointalk.org/index.php?topic=145386.0) for a signed magnet link. Alternatively you can use the [.torrent file](http://sourceforge.net/projects/bitcoin/files/Bitcoin/blockchain/bootstrap.dat.torrent/download) found on SourceForge.\n-     \n-![Fig1](img/bootstrap1.png)\n-\n-The download page should look like this, with a countdown to the download. If it does not work click the direct download link.\n-\n-The torrent client installed will recognize the download of the torrent file. Save the bootstrap.dat file to the folder you use for downloads. The image below shows the torrent download in qBittorrent, with current speed and ETA highlighted.\n-\n-![Fig2](img/bootstrap2.png)\n-\n-### Importing the blockchain\n-Exit the Bitcoin client software if you have it running. Be sure not to have an actively used wallet in use. We are going to copy the download of the blockchain to the Bitcoin client data directory. You should run the client software at least once so it can generate the data directory. Copy the downloaded bootstrap.dat file into the Bitcoin data folder.\n-\n-**For Windows users:**\n-Open explorer, and type into the address bar:\n-\n-\t%APPDATA%\\Bitcoin\n-    \n-This will open up the data folder. It should look like the image below. Copy over the bootstrap.dat from your download folder to this directory.\n-![Fig4](img/bootstrap4.png)\n-\n-**For OSX users:**\n-Open Finder by pressing Press [shift] + [cmd] + [g] and enter:\n-\n-\t~/Library/Application Support/Bitcoin/\n-    \n-**For Linux users:**\n-The directory is hidden in your User folder. Go to:\n-\n-\t~/.bitcoin/\n-    \n-### Importing the blockchain\n-Now start the Bitcoin client software. It should show \"Importing blocks from disk\" like the image below. \n-![Fig5](img/bootstrap5.png)\n-\n-Wait until the import finishes. The client will download the last days not covered by the import. Congratulations you have successfully imported the blockchain!\n-\n-### Is this safe?\n-\n-Yes, the above method is safe. The download contains only raw blockchain data and the client verifies this on import. Do not download the blockchain from unofficial sources, especially if they provide `*.rev` and `*.sst` files. These files are not verified and can contain malicious edits."
      },
      {
        "sha": "0984f689a8314e4b15c849f8bd8282793bbc0b02",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -159,7 +159,7 @@ tar -xzvf db-4.8.30.NC.tar.gz\n \n # Build the library and install to our prefix\n cd db-4.8.30.NC/build_unix/\n-#  Note: Do a static build so that it can be embedded into the exectuable, instead of having to find a .so at runtime\n+#  Note: Do a static build so that it can be embedded into the executable, instead of having to find a .so at runtime\n ../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX\n make install\n \n@@ -196,7 +196,7 @@ Hardening enables the following features:\n * Position Independent Executable\n     Build position independent code to take advantage of Address Space Layout Randomization\n     offered by some kernels. An attacker who is able to cause execution of code at an arbitrary\n-    memory location is thwarted if he doesn't know where anything useful is located.\n+    memory location is thwarted if he or she doesn't know where anything useful is located.\n     The stack and heap are randomly located by default but this allows the code section to be\n     randomly located as well.\n "
      },
      {
        "sha": "25d3b8390c5049fc322bd1538a881e29f83b5517",
        "filename": "doc/gitian-building.md",
        "status": "modified",
        "additions": 16,
        "deletions": 18,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -24,7 +24,7 @@ Table of Contents\n - [Connecting to the VM](#connecting-to-the-vm)\n - [Setting up Debian for gitian building](#setting-up-debian-for-gitian-building)\n - [Installing gitian](#installing-gitian)\n-- [Setting up gitian images](#setting-up-gitian-images)\n+- [Setting up the gitian image](#setting-up-the-gitian-image)\n - [Getting and building the inputs](#getting-and-building-the-inputs)\n - [Building Bitcoin](#building-bitcoin)\n - [Building an alternative repository](#building-an-alternative-repository)\n@@ -74,11 +74,11 @@ In the VirtualBox GUI click \"Create\" and choose the following parameters in the\n - Disk size: at least 40GB; as low as 20GB *may* be possible, but better to err on the safe side \n - Push the `Create` button\n \n-Get the [Debian 7.4 net installer](http://ftp.at.debian.org/debian-jigdo/current/amd64/iso-cd/debian-7.4.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n+Get the [Debian 7.7 net installer](http://cdimage.debian.org/debian-cd/7.7.0/amd64/iso-cd/debian-7.7.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n This DVD image can be validated using a SHA256 hashing tool, for example on\n Unixy OSes by entering the following in a terminal:\n \n-    echo \"b712a141bc60269db217d3b3e456179bd6b181645f90e4aac9c42ed63de492e9  debian-7.4.0-amd64-netinst.iso\" | sha256sum -c\n+    echo \"d440e85b4121f94608748139f25dbce1ad36771348b002fe07d4d44b9d9e623f  debian-7.7.0-amd64-netinst.iso\" | sha256sum -c\n     # (must return OK)\n \n After creating the VM, we need to configure it. \n@@ -109,7 +109,7 @@ Then start the VM. On the first launch you will be asked for a CD or DVD image.\n Installing Debian\n ------------------\n \n-In this section it will be explained how to install Debian on the newly created VM.\n+This section will explain how to install Debian on the newly created VM.\n \n - Choose the non-graphical installer.  We do not need the graphical environment, it will only increase installation time and disk usage.\n \n@@ -277,24 +277,21 @@ cd ..\n \n **Note**: When sudo asks for a password, enter the password for the user *debian* not for *root*.\n \n-Clone the git repositories for bitcoin and gitian and then checkout the bitcoin version that you want to build.\n+Clone the git repositories for bitcoin and gitian.\n \n ```bash\n git clone https://github.com/devrandom/gitian-builder.git\n git clone https://github.com/bitcoin/bitcoin\n-cd bitcoin\n-git checkout v${VERSION}\n-cd ..\n ```\n \n-Setting up gitian images\n+Setting up the gitian image\n -------------------------\n \n-Gitian needs virtual images of the operating system to build in.\n-Currently this is Ubuntu Precise for x86_64.\n-These images will be copied and used every time that a build is started to\n+Gitian needs a virtual image of the operating system to build in.\n+Currently this is Ubuntu Precise x86_64.\n+This image will be copied and used every time that a build is started to\n make sure that the build is deterministic.\n-Creating the images will take a while, but only has to be done once.\n+Creating the image will take a while, but only has to be done once.\n \n Execute the following as user `debian`:\n \n@@ -303,7 +300,7 @@ cd gitian-builder\n bin/make-base-vm --lxc --arch amd64 --suite precise\n ```\n \n-There will be a lot of warnings printed during build of the images. These can be ignored.\n+There will be a lot of warnings printed during build of the image. These can be ignored.\n \n **Note**: When sudo asks for a password, enter the password for the user *debian* not for *root*.\n \n@@ -322,13 +319,14 @@ To build Bitcoin (for Linux, OSX and Windows) just follow the steps under 'perfo\n gitian builds' in [doc/release-process.md](release-process.md) in the bitcoin repository.\n \n This may take a long time as it also builds the dependencies needed for each descriptor.\n-These dependencies will be cached after a successful build to avoid rebuilding them when possible.\n+These dependencies will be cached after a successful build to avoid rebuilding them where possible.\n \n At any time you can check the package installation and build progress with\n \n ```bash\n tail -f var/install.log\n tail -f var/build.log\n+```\n \n Output from `gbuild` will look something like\n \n@@ -382,9 +380,9 @@ When you execute `gsign` you will get an error from GPG, which can be ignored. C\n in `gitian.sigs` to your signing machine and do\n \n ```bash\n-    gpg --detach-sign ${VERSION}-linux/${SIGNER}/bitcoin-build.assert\n-    gpg --detach-sign ${VERSION}-win/${SIGNER}/bitcoin-build.assert\n-    gpg --detach-sign ${VERSION}-osx/${SIGNER}/bitcoin-build.assert\n+    gpg --detach-sign ${VERSION}-linux/${SIGNER}/bitcoin-linux-build.assert\n+    gpg --detach-sign ${VERSION}-win/${SIGNER}/bitcoin-win-build.assert\n+    gpg --detach-sign ${VERSION}-osx-unsigned/${SIGNER}/bitcoin-osx-build.assert\n ```\n \n This will create the `.sig` files that can be committed together with the `.assert` files to assert your"
      },
      {
        "sha": "02170d13ec31b3decb0cdcac82a593d04e3bfd78",
        "filename": "qa/rpc-tests/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/qa/rpc-tests/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/qa/rpc-tests/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/README.md?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -12,7 +12,7 @@ Base class for new regression tests.\n ### [listtransactions.py](listtransactions.py)\n Tests for the listtransactions RPC call.\n \n-### [util.py](util.sh)\n+### [util.py](util.py)\n Generally useful functions.\n \n Bash-based tests, to be ported to Python:"
      },
      {
        "sha": "3e63493dc6eb4bbbf8f484af65e6ae5067b5de9d",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -61,7 +61,7 @@ def run_test (self):\n         walletinfo = self.nodes[0].getwalletinfo()\n         assert_equal(walletinfo['immature_balance'], 0)\n \n-        # Have node0 mine a block, thus he will collect his own fee. \n+        # Have node0 mine a block, thus they will collect their own fee. \n         self.nodes[0].setgenerate(True, 1)\n         self.sync_all()\n "
      },
      {
        "sha": "90494439fa552dd167c709e669f0c858f5deb2c4",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -20,8 +20,6 @@ EXTRA_DIST += \\\n JSON_TEST_FILES = \\\n   test/data/script_valid.json \\\n   test/data/base58_keys_valid.json \\\n-  test/data/sig_canonical.json \\\n-  test/data/sig_noncanonical.json \\\n   test/data/base58_encode_decode.json \\\n   test/data/base58_keys_invalid.json \\\n   test/data/script_invalid.json \\"
      },
      {
        "sha": "323939913b7389b1ec823ec14940c9c6f9d3a5a0",
        "filename": "src/alert.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -149,7 +149,7 @@ bool CAlert::CheckSignature() const\n {\n     CPubKey key(Params().AlertKey());\n     if (!key.Verify(Hash(vchMsg.begin(), vchMsg.end()), vchSig))\n-        return error(\"CAlert::CheckSignature() : verify signature failed\");\n+        return error(\"CAlert::CheckSignature(): verify signature failed\");\n \n     // Now unserialize the data\n     CDataStream sMsg(vchMsg, SER_NETWORK, PROTOCOL_VERSION);"
      },
      {
        "sha": "7ca825c16fcca1fcf6de283280f8897055520b45",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -81,7 +81,7 @@ class CCheckQueue\n                     fAllOk &= fOk;\n                     nTodo -= nNow;\n                     if (nTodo == 0 && !fMaster)\n-                        // We processed the last element; inform the master he can exit and return the result\n+                        // We processed the last element; inform the master he or she can exit and return the result\n                         condMaster.notify_one();\n                 } else {\n                     // first iteration"
      },
      {
        "sha": "a7f885135bae643aeeb6c4147b9712dd11b1948c",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -43,7 +43,7 @@ void CDBEnv::EnvShutdown()\n     fDbEnvInit = false;\n     int ret = dbenv.close(0);\n     if (ret != 0)\n-        LogPrintf(\"CDBEnv::EnvShutdown : Error %d shutting down database environment: %s\\n\", ret, DbEnv::strerror(ret));\n+        LogPrintf(\"CDBEnv::EnvShutdown: Error %d shutting down database environment: %s\\n\", ret, DbEnv::strerror(ret));\n     if (!fMockDb)\n         DbEnv(0).remove(path.string().c_str(), 0);\n }\n@@ -75,7 +75,7 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n     boost::filesystem::path pathLogDir = path / \"database\";\n     TryCreateDirectory(pathLogDir);\n     boost::filesystem::path pathErrorFile = path / \"db.log\";\n-    LogPrintf(\"CDBEnv::Open : LogDir=%s ErrorFile=%s\\n\", pathLogDir.string(), pathErrorFile.string());\n+    LogPrintf(\"CDBEnv::Open: LogDir=%s ErrorFile=%s\\n\", pathLogDir.string(), pathErrorFile.string());\n \n     unsigned int nEnvFlags = 0;\n     if (GetBoolArg(\"-privdb\", true))\n@@ -102,7 +102,7 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n                              nEnvFlags,\n                          S_IRUSR | S_IWUSR);\n     if (ret != 0)\n-        return error(\"CDBEnv::Open : Error %d opening database environment: %s\\n\", ret, DbEnv::strerror(ret));\n+        return error(\"CDBEnv::Open: Error %d opening database environment: %s\\n\", ret, DbEnv::strerror(ret));\n \n     fDbEnvInit = true;\n     fMockDb = false;\n@@ -112,7 +112,7 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n void CDBEnv::MakeMock()\n {\n     if (fDbEnvInit)\n-        throw runtime_error(\"CDBEnv::MakeMock : Already initialized\");\n+        throw runtime_error(\"CDBEnv::MakeMock: Already initialized\");\n \n     boost::this_thread::interruption_point();\n \n@@ -135,7 +135,7 @@ void CDBEnv::MakeMock()\n                              DB_PRIVATE,\n                          S_IRUSR | S_IWUSR);\n     if (ret > 0)\n-        throw runtime_error(strprintf(\"CDBEnv::MakeMock : Error %d opening database environment.\", ret));\n+        throw runtime_error(strprintf(\"CDBEnv::MakeMock: Error %d opening database environment.\", ret));\n \n     fDbEnvInit = true;\n     fMockDb = true;\n@@ -172,14 +172,14 @@ bool CDBEnv::Salvage(std::string strFile, bool fAggressive, std::vector<CDBEnv::\n     Db db(&dbenv, 0);\n     int result = db.verify(strFile.c_str(), NULL, &strDump, flags);\n     if (result == DB_VERIFY_BAD) {\n-        LogPrintf(\"CDBEnv::Salvage : Database salvage found errors, all data may not be recoverable.\\n\");\n+        LogPrintf(\"CDBEnv::Salvage: Database salvage found errors, all data may not be recoverable.\\n\");\n         if (!fAggressive) {\n-            LogPrintf(\"CDBEnv::Salvage : Rerun with aggressive mode to ignore errors and continue.\\n\");\n+            LogPrintf(\"CDBEnv::Salvage: Rerun with aggressive mode to ignore errors and continue.\\n\");\n             return false;\n         }\n     }\n     if (result != 0 && result != DB_VERIFY_BAD) {\n-        LogPrintf(\"CDBEnv::Salvage : Database salvage failed with result %d.\\n\", result);\n+        LogPrintf(\"CDBEnv::Salvage: Database salvage failed with result %d.\\n\", result);\n         return false;\n     }\n \n@@ -233,7 +233,7 @@ CDB::CDB(const std::string& strFilename, const char* pszMode, bool fFlushOnClose\n     {\n         LOCK(bitdb.cs_db);\n         if (!bitdb.Open(GetDataDir()))\n-            throw runtime_error(\"CDB : Failed to open database environment.\");\n+            throw runtime_error(\"CDB: Failed to open database environment.\");\n \n         strFile = strFilename;\n         ++bitdb.mapFileUseCount[strFile];\n@@ -246,7 +246,7 @@ CDB::CDB(const std::string& strFilename, const char* pszMode, bool fFlushOnClose\n                 DbMpoolFile* mpf = pdb->get_mpf();\n                 ret = mpf->set_flags(DB_MPOOL_NOFILE, 1);\n                 if (ret != 0)\n-                    throw runtime_error(strprintf(\"CDB : Failed to configure for no temp file backing for database %s\", strFile));\n+                    throw runtime_error(strprintf(\"CDB: Failed to configure for no temp file backing for database %s\", strFile));\n             }\n \n             ret = pdb->open(NULL,                               // Txn pointer\n@@ -261,7 +261,7 @@ CDB::CDB(const std::string& strFilename, const char* pszMode, bool fFlushOnClose\n                 pdb = NULL;\n                 --bitdb.mapFileUseCount[strFile];\n                 strFile = \"\";\n-                throw runtime_error(strprintf(\"CDB : Error %d, can't open database %s\", ret, strFile));\n+                throw runtime_error(strprintf(\"CDB: Error %d, can't open database %s\", ret, strFile));\n             }\n \n             if (fCreate && !Exists(string(\"version\"))) {\n@@ -342,7 +342,7 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                 bitdb.mapFileUseCount.erase(strFile);\n \n                 bool fSuccess = true;\n-                LogPrintf(\"CDB::Rewrite : Rewriting %s...\\n\", strFile);\n+                LogPrintf(\"CDB::Rewrite: Rewriting %s...\\n\", strFile);\n                 string strFileRes = strFile + \".rewrite\";\n                 { // surround usage of db with extra {}\n                     CDB db(strFile.c_str(), \"r\");\n@@ -355,7 +355,7 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                                             DB_CREATE,          // Flags\n                                             0);\n                     if (ret > 0) {\n-                        LogPrintf(\"CDB::Rewrite : Can't create database file %s\\n\", strFileRes);\n+                        LogPrintf(\"CDB::Rewrite: Can't create database file %s\\n\", strFileRes);\n                         fSuccess = false;\n                     }\n \n@@ -404,7 +404,7 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                         fSuccess = false;\n                 }\n                 if (!fSuccess)\n-                    LogPrintf(\"CDB::Rewrite : Failed to rewrite database file %s\\n\", strFileRes);\n+                    LogPrintf(\"CDB::Rewrite: Failed to rewrite database file %s\\n\", strFileRes);\n                 return fSuccess;\n             }\n         }\n@@ -418,7 +418,7 @@ void CDBEnv::Flush(bool fShutdown)\n {\n     int64_t nStart = GetTimeMillis();\n     // Flush log data to the actual data file on all files that are not in use\n-    LogPrint(\"db\", \"CDBEnv::Flush : Flush(%s)%s\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" database not started\");\n+    LogPrint(\"db\", \"CDBEnv::Flush: Flush(%s)%s\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" database not started\");\n     if (!fDbEnvInit)\n         return;\n     {\n@@ -427,21 +427,21 @@ void CDBEnv::Flush(bool fShutdown)\n         while (mi != mapFileUseCount.end()) {\n             string strFile = (*mi).first;\n             int nRefCount = (*mi).second;\n-            LogPrint(\"db\", \"CDBEnv::Flush : Flushing %s (refcount = %d)...\\n\", strFile, nRefCount);\n+            LogPrint(\"db\", \"CDBEnv::Flush: Flushing %s (refcount = %d)...\\n\", strFile, nRefCount);\n             if (nRefCount == 0) {\n                 // Move log data to the dat file\n                 CloseDb(strFile);\n-                LogPrint(\"db\", \"CDBEnv::Flush : %s checkpoint\\n\", strFile);\n+                LogPrint(\"db\", \"CDBEnv::Flush: %s checkpoint\\n\", strFile);\n                 dbenv.txn_checkpoint(0, 0, 0);\n-                LogPrint(\"db\", \"CDBEnv::Flush : %s detach\\n\", strFile);\n+                LogPrint(\"db\", \"CDBEnv::Flush: %s detach\\n\", strFile);\n                 if (!fMockDb)\n                     dbenv.lsn_reset(strFile.c_str(), 0);\n-                LogPrint(\"db\", \"CDBEnv::Flush : %s closed\\n\", strFile);\n+                LogPrint(\"db\", \"CDBEnv::Flush: %s closed\\n\", strFile);\n                 mapFileUseCount.erase(mi++);\n             } else\n                 mi++;\n         }\n-        LogPrint(\"db\", \"CDBEnv::Flush : Flush(%s)%s took %15dms\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" database not started\", GetTimeMillis() - nStart);\n+        LogPrint(\"db\", \"CDBEnv::Flush: Flush(%s)%s took %15dms\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" database not started\", GetTimeMillis() - nStart);\n         if (fShutdown) {\n             char** listp;\n             if (mapFileUseCount.empty()) {"
      },
      {
        "sha": "c2af23139cd4170d3be8cd3effa5d2299fa0e23f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -977,7 +977,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n             } catch (const boost::filesystem::filesystem_error& e) {\n                 // Note: hardlink creation failing is not a disaster, it just means\n                 // blocks will get re-downloaded from peers.\n-                LogPrintf(\"Error hardlinking blk%04u.dat : %s\\n\", i, e.what());\n+                LogPrintf(\"Error hardlinking blk%04u.dat: %s\\n\", i, e.what());\n                 break;\n             }\n         }"
      },
      {
        "sha": "22cd08f30c8cfdd9628a4481f4c0ae5bc3a6911b",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -36,7 +36,7 @@ bool CBasicKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n bool CBasicKeyStore::AddCScript(const CScript& redeemScript)\n {\n     if (redeemScript.size() > MAX_SCRIPT_ELEMENT_SIZE)\n-        return error(\"CBasicKeyStore::AddCScript() : redeemScripts > %i bytes are invalid\", MAX_SCRIPT_ELEMENT_SIZE);\n+        return error(\"CBasicKeyStore::AddCScript(): redeemScripts > %i bytes are invalid\", MAX_SCRIPT_ELEMENT_SIZE);\n \n     LOCK(cs_KeyStore);\n     mapScripts[CScriptID(redeemScript)] = redeemScript;"
      },
      {
        "sha": "f43d8c58b63b4552cdc3e653e70363b4c3bd881b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 96,
        "deletions": 96,
        "changes": 192,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -744,7 +744,7 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n         // non-standard. Note that this EvalScript() call will\n         // be quick, because if there are any operations\n         // beside \"push data\" in the scriptSig\n-        // IsStandard() will have already returned false\n+        // IsStandardTx() will have already returned false\n         // and this method isn't called.\n         vector<vector<unsigned char> > stack;\n         if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker()))\n@@ -820,29 +820,29 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n {\n     // Basic checks that don't depend on any context\n     if (tx.vin.empty())\n-        return state.DoS(10, error(\"CheckTransaction() : vin empty\"),\n+        return state.DoS(10, error(\"CheckTransaction(): vin empty\"),\n                          REJECT_INVALID, \"bad-txns-vin-empty\");\n     if (tx.vout.empty())\n-        return state.DoS(10, error(\"CheckTransaction() : vout empty\"),\n+        return state.DoS(10, error(\"CheckTransaction(): vout empty\"),\n                          REJECT_INVALID, \"bad-txns-vout-empty\");\n     // Size limits\n     if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, error(\"CheckTransaction() : size limits failed\"),\n+        return state.DoS(100, error(\"CheckTransaction(): size limits failed\"),\n                          REJECT_INVALID, \"bad-txns-oversize\");\n \n     // Check for negative or overflow output values\n     CAmount nValueOut = 0;\n     BOOST_FOREACH(const CTxOut& txout, tx.vout)\n     {\n         if (txout.nValue < 0)\n-            return state.DoS(100, error(\"CheckTransaction() : txout.nValue negative\"),\n+            return state.DoS(100, error(\"CheckTransaction(): txout.nValue negative\"),\n                              REJECT_INVALID, \"bad-txns-vout-negative\");\n         if (txout.nValue > MAX_MONEY)\n-            return state.DoS(100, error(\"CheckTransaction() : txout.nValue too high\"),\n+            return state.DoS(100, error(\"CheckTransaction(): txout.nValue too high\"),\n                              REJECT_INVALID, \"bad-txns-vout-toolarge\");\n         nValueOut += txout.nValue;\n         if (!MoneyRange(nValueOut))\n-            return state.DoS(100, error(\"CheckTransaction() : txout total out of range\"),\n+            return state.DoS(100, error(\"CheckTransaction(): txout total out of range\"),\n                              REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n     }\n \n@@ -851,22 +851,22 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n     {\n         if (vInOutPoints.count(txin.prevout))\n-            return state.DoS(100, error(\"CheckTransaction() : duplicate inputs\"),\n+            return state.DoS(100, error(\"CheckTransaction(): duplicate inputs\"),\n                              REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n         vInOutPoints.insert(txin.prevout);\n     }\n \n     if (tx.IsCoinBase())\n     {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n-            return state.DoS(100, error(\"CheckTransaction() : coinbase script size\"),\n+            return state.DoS(100, error(\"CheckTransaction(): coinbase script size\"),\n                              REJECT_INVALID, \"bad-cb-length\");\n     }\n     else\n     {\n         BOOST_FOREACH(const CTxIn& txin, tx.vin)\n             if (txin.prevout.IsNull())\n-                return state.DoS(10, error(\"CheckTransaction() : prevout is null\"),\n+                return state.DoS(10, error(\"CheckTransaction(): prevout is null\"),\n                                  REJECT_INVALID, \"bad-txns-prevout-null\");\n     }\n \n@@ -922,7 +922,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     string reason;\n     if (Params().RequireStandard() && !IsStandardTx(tx, reason))\n         return state.DoS(0,\n-                         error(\"AcceptToMemoryPool : nonstandard transaction: %s\", reason),\n+                         error(\"AcceptToMemoryPool: nonstandard transaction: %s\", reason),\n                          REJECT_NONSTANDARD, reason);\n \n     // Only accept nLockTime-using transactions that can be mined in the next\n@@ -942,7 +942,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     // timestamp applications where it matters.\n     if (!IsFinalTx(tx, chainActive.Height() + 1))\n         return state.DoS(0,\n-                         error(\"AcceptToMemoryPool : non-final\"),\n+                         error(\"AcceptToMemoryPool: non-final\"),\n                          REJECT_NONSTANDARD, \"non-final\");\n \n     // is it already in the memory pool?\n@@ -991,7 +991,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // are the actual inputs available?\n         if (!view.HaveInputs(tx))\n-            return state.Invalid(error(\"AcceptToMemoryPool : inputs already spent\"),\n+            return state.Invalid(error(\"AcceptToMemoryPool: inputs already spent\"),\n                                  REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n \n         // Bring the best block into scope\n@@ -1016,7 +1016,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         nSigOps += GetP2SHSigOpCount(tx, view);\n         if (nSigOps > MAX_STANDARD_TX_SIGOPS)\n             return state.DoS(0,\n-                             error(\"AcceptToMemoryPool : too many sigops %s, %d > %d\",\n+                             error(\"AcceptToMemoryPool: too many sigops %s, %d > %d\",\n                                    hash.ToString(), nSigOps, MAX_STANDARD_TX_SIGOPS),\n                              REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\");\n \n@@ -1030,7 +1030,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // Don't accept it if it can't get into a block\n         CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n         if (fLimitFree && nFees < txMinFee)\n-            return state.DoS(0, error(\"AcceptToMemoryPool : not enough fees %s, %d < %d\",\n+            return state.DoS(0, error(\"AcceptToMemoryPool: not enough fees %s, %d < %d\",\n                                       hash.ToString(), nFees, txMinFee),\n                              REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n \n@@ -1057,7 +1057,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             // -limitfreerelay unit is thousand-bytes-per-minute\n             // At default rate it would take over a month to fill 1GB\n             if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n-                return state.DoS(0, error(\"AcceptToMemoryPool : free transaction rejected by rate limiter\"),\n+                return state.DoS(0, error(\"AcceptToMemoryPool: free transaction rejected by rate limiter\"),\n                                  REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n             LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n             dFreeCount += nSize;\n@@ -1123,11 +1123,11 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, uint256 &hashBlock\n                     fseek(file.Get(), postx.nTxOffset, SEEK_CUR);\n                     file >> txOut;\n                 } catch (const std::exception& e) {\n-                    return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+                    return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n                 }\n                 hashBlock = header.GetHash();\n                 if (txOut.GetHash() != hash)\n-                    return error(\"%s : txid mismatch\", __func__);\n+                    return error(\"%s: txid mismatch\", __func__);\n                 return true;\n             }\n         }\n@@ -1176,7 +1176,7 @@ bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos)\n     // Open history file to append\n     CAutoFile fileout(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull())\n-        return error(\"WriteBlockToDisk : OpenBlockFile failed\");\n+        return error(\"WriteBlockToDisk: OpenBlockFile failed\");\n \n     // Write index header\n     unsigned int nSize = fileout.GetSerializeSize(block);\n@@ -1185,7 +1185,7 @@ bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos)\n     // Write block\n     long fileOutPos = ftell(fileout.Get());\n     if (fileOutPos < 0)\n-        return error(\"WriteBlockToDisk : ftell failed\");\n+        return error(\"WriteBlockToDisk: ftell failed\");\n     pos.nPos = (unsigned int)fileOutPos;\n     fileout << block;\n \n@@ -1199,19 +1199,19 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos)\n     // Open history file to read\n     CAutoFile filein(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n-        return error(\"ReadBlockFromDisk : OpenBlockFile failed\");\n+        return error(\"ReadBlockFromDisk: OpenBlockFile failed\");\n \n     // Read block\n     try {\n         filein >> block;\n     }\n     catch (const std::exception& e) {\n-        return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n     }\n \n     // Check the header\n     if (!CheckProofOfWork(block.GetHash(), block.nBits))\n-        return error(\"ReadBlockFromDisk : Errors in block header\");\n+        return error(\"ReadBlockFromDisk: Errors in block header\");\n \n     return true;\n }\n@@ -1221,7 +1221,7 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex)\n     if (!ReadBlockFromDisk(block, pindex->GetBlockPos()))\n         return false;\n     if (block.GetHash() != pindex->GetBlockHash())\n-        return error(\"ReadBlockFromDisk(CBlock&, CBlockIndex*) : GetHash() doesn't match index\");\n+        return error(\"ReadBlockFromDisk(CBlock&, CBlockIndex*): GetHash() doesn't match index\");\n     return true;\n }\n \n@@ -1423,7 +1423,7 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n bool CScriptCheck::operator()() {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n     if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingSignatureChecker(*ptxTo, nIn, cacheStore), &error)) {\n-        return ::error(\"CScriptCheck() : %s:%d VerifySignature failed: %s\", ptxTo->GetHash().ToString(), nIn, ScriptErrorString(error));\n+        return ::error(\"CScriptCheck(): %s:%d VerifySignature failed: %s\", ptxTo->GetHash().ToString(), nIn, ScriptErrorString(error));\n     }\n     return true;\n }\n@@ -1438,7 +1438,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n         // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n         // for an attacker to attempt to split the network.\n         if (!inputs.HaveInputs(tx))\n-            return state.Invalid(error(\"CheckInputs() : %s inputs unavailable\", tx.GetHash().ToString()));\n+            return state.Invalid(error(\"CheckInputs(): %s inputs unavailable\", tx.GetHash().ToString()));\n \n         // While checking, GetBestBlock() refers to the parent block.\n         // This is also true for mempool checks.\n@@ -1456,31 +1456,31 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n             if (coins->IsCoinBase()) {\n                 if (nSpendHeight - coins->nHeight < COINBASE_MATURITY)\n                     return state.Invalid(\n-                        error(\"CheckInputs() : tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight),\n+                        error(\"CheckInputs(): tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight),\n                         REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\");\n             }\n \n             // Check for negative or overflow input values\n             nValueIn += coins->vout[prevout.n].nValue;\n             if (!MoneyRange(coins->vout[prevout.n].nValue) || !MoneyRange(nValueIn))\n-                return state.DoS(100, error(\"CheckInputs() : txin values out of range\"),\n+                return state.DoS(100, error(\"CheckInputs(): txin values out of range\"),\n                                  REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n \n         }\n \n         if (nValueIn < tx.GetValueOut())\n-            return state.DoS(100, error(\"CheckInputs() : %s value in (%s) < value out (%s)\",\n+            return state.DoS(100, error(\"CheckInputs(): %s value in (%s) < value out (%s)\",\n                                         tx.GetHash().ToString(), FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())),\n                              REJECT_INVALID, \"bad-txns-in-belowout\");\n \n         // Tally transaction fees\n         CAmount nTxFee = nValueIn - tx.GetValueOut();\n         if (nTxFee < 0)\n-            return state.DoS(100, error(\"CheckInputs() : %s nTxFee < 0\", tx.GetHash().ToString()),\n+            return state.DoS(100, error(\"CheckInputs(): %s nTxFee < 0\", tx.GetHash().ToString()),\n                              REJECT_INVALID, \"bad-txns-fee-negative\");\n         nFees += nTxFee;\n         if (!MoneyRange(nFees))\n-            return state.DoS(100, error(\"CheckInputs() : nFees out of range\"),\n+            return state.DoS(100, error(\"CheckInputs(): nFees out of range\"),\n                              REJECT_INVALID, \"bad-txns-fee-outofrange\");\n \n         // The first loop above does all the inexpensive checks.\n@@ -1537,7 +1537,7 @@ bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint\n     // Open history file to append\n     CAutoFile fileout(OpenUndoFile(pos), SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull())\n-        return error(\"%s : OpenUndoFile failed\", __func__);\n+        return error(\"%s: OpenUndoFile failed\", __func__);\n \n     // Write index header\n     unsigned int nSize = fileout.GetSerializeSize(blockundo);\n@@ -1546,7 +1546,7 @@ bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint\n     // Write undo data\n     long fileOutPos = ftell(fileout.Get());\n     if (fileOutPos < 0)\n-        return error(\"%s : ftell failed\", __func__);\n+        return error(\"%s: ftell failed\", __func__);\n     pos.nPos = (unsigned int)fileOutPos;\n     fileout << blockundo;\n \n@@ -1564,7 +1564,7 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uin\n     // Open history file to read\n     CAutoFile filein(OpenUndoFile(pos, true), SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n-        return error(\"%s : OpenBlockFile failed\", __func__);\n+        return error(\"%s: OpenBlockFile failed\", __func__);\n \n     // Read block\n     uint256 hashChecksum;\n@@ -1573,15 +1573,15 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uin\n         filein >> hashChecksum;\n     }\n     catch (const std::exception& e) {\n-        return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n     }\n \n     // Verify checksum\n     CHashWriter hasher(SER_GETHASH, PROTOCOL_VERSION);\n     hasher << hashBlock;\n     hasher << blockundo;\n     if (hashChecksum != hasher.GetHash())\n-        return error(\"%s : Checksum mismatch\", __func__);\n+        return error(\"%s: Checksum mismatch\", __func__);\n \n     return true;\n }\n@@ -1600,12 +1600,12 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n     CBlockUndo blockUndo;\n     CDiskBlockPos pos = pindex->GetUndoPos();\n     if (pos.IsNull())\n-        return error(\"DisconnectBlock() : no undo data available\");\n+        return error(\"DisconnectBlock(): no undo data available\");\n     if (!UndoReadFromDisk(blockUndo, pos, pindex->pprev->GetBlockHash()))\n-        return error(\"DisconnectBlock() : failure reading undo data\");\n+        return error(\"DisconnectBlock(): failure reading undo data\");\n \n     if (blockUndo.vtxundo.size() + 1 != block.vtx.size())\n-        return error(\"DisconnectBlock() : block and undo data inconsistent\");\n+        return error(\"DisconnectBlock(): block and undo data inconsistent\");\n \n     // undo transactions in reverse order\n     for (int i = block.vtx.size() - 1; i >= 0; i--) {\n@@ -1628,7 +1628,7 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n         if (outsBlock.nVersion < 0)\n             outs->nVersion = outsBlock.nVersion;\n         if (*outs != outsBlock)\n-            fClean = fClean && error(\"DisconnectBlock() : added transaction mismatch? database corrupted\");\n+            fClean = fClean && error(\"DisconnectBlock(): added transaction mismatch? database corrupted\");\n \n         // remove outputs\n         outs->Clear();\n@@ -1638,25 +1638,25 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n         if (i > 0) { // not coinbases\n             const CTxUndo &txundo = blockUndo.vtxundo[i-1];\n             if (txundo.vprevout.size() != tx.vin.size())\n-                return error(\"DisconnectBlock() : transaction and undo data inconsistent\");\n+                return error(\"DisconnectBlock(): transaction and undo data inconsistent\");\n             for (unsigned int j = tx.vin.size(); j-- > 0;) {\n                 const COutPoint &out = tx.vin[j].prevout;\n                 const CTxInUndo &undo = txundo.vprevout[j];\n                 CCoinsModifier coins = view.ModifyCoins(out.hash);\n                 if (undo.nHeight != 0) {\n                     // undo data contains height: this is the last output of the prevout tx being spent\n                     if (!coins->IsPruned())\n-                        fClean = fClean && error(\"DisconnectBlock() : undo data overwriting existing transaction\");\n+                        fClean = fClean && error(\"DisconnectBlock(): undo data overwriting existing transaction\");\n                     coins->Clear();\n                     coins->fCoinBase = undo.fCoinBase;\n                     coins->nHeight = undo.nHeight;\n                     coins->nVersion = undo.nVersion;\n                 } else {\n                     if (coins->IsPruned())\n-                        fClean = fClean && error(\"DisconnectBlock() : undo data adding output to missing transaction\");\n+                        fClean = fClean && error(\"DisconnectBlock(): undo data adding output to missing transaction\");\n                 }\n                 if (coins->IsAvailable(out.n))\n-                    fClean = fClean && error(\"DisconnectBlock() : undo data overwriting existing output\");\n+                    fClean = fClean && error(\"DisconnectBlock(): undo data overwriting existing output\");\n                 if (coins->vout.size() < out.n+1)\n                     coins->vout.resize(out.n+1);\n                 coins->vout[out.n] = undo.txout;\n@@ -1753,7 +1753,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n             const CCoins* coins = view.AccessCoins(tx.GetHash());\n             if (coins && !coins->IsPruned())\n-                return state.DoS(100, error(\"ConnectBlock() : tried to overwrite transaction\"),\n+                return state.DoS(100, error(\"ConnectBlock(): tried to overwrite transaction\"),\n                                  REJECT_INVALID, \"bad-txns-BIP30\");\n         }\n     }\n@@ -1783,13 +1783,13 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         nInputs += tx.vin.size();\n         nSigOps += GetLegacySigOpCount(tx);\n         if (nSigOps > MAX_BLOCK_SIGOPS)\n-            return state.DoS(100, error(\"ConnectBlock() : too many sigops\"),\n+            return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n                              REJECT_INVALID, \"bad-blk-sigops\");\n \n         if (!tx.IsCoinBase())\n         {\n             if (!view.HaveInputs(tx))\n-                return state.DoS(100, error(\"ConnectBlock() : inputs missing/spent\"),\n+                return state.DoS(100, error(\"ConnectBlock(): inputs missing/spent\"),\n                                  REJECT_INVALID, \"bad-txns-inputs-missingorspent\");\n \n             if (fStrictPayToScriptHash)\n@@ -1799,7 +1799,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                 // an incredibly-expensive-to-validate block.\n                 nSigOps += GetP2SHSigOpCount(tx, view);\n                 if (nSigOps > MAX_BLOCK_SIGOPS)\n-                    return state.DoS(100, error(\"ConnectBlock() : too many sigops\"),\n+                    return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n                                      REJECT_INVALID, \"bad-blk-sigops\");\n             }\n \n@@ -1825,7 +1825,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     if (block.vtx[0].GetValueOut() > GetBlockValue(pindex->nHeight, nFees))\n         return state.DoS(100,\n-                         error(\"ConnectBlock() : coinbase pays too much (actual=%d vs limit=%d)\",\n+                         error(\"ConnectBlock(): coinbase pays too much (actual=%d vs limit=%d)\",\n                                block.vtx[0].GetValueOut(), GetBlockValue(pindex->nHeight, nFees)),\n                                REJECT_INVALID, \"bad-cb-amount\");\n \n@@ -1843,7 +1843,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         if (pindex->GetUndoPos().IsNull()) {\n             CDiskBlockPos pos;\n             if (!FindUndoPos(state, pindex->nFile, pos, ::GetSerializeSize(blockundo, SER_DISK, CLIENT_VERSION) + 40))\n-                return error(\"ConnectBlock() : FindUndoPos failed\");\n+                return error(\"ConnectBlock(): FindUndoPos failed\");\n             if (!UndoWriteToDisk(blockundo, pos, pindex->pprev->GetBlockHash()))\n                 return state.Abort(\"Failed to write undo data\");\n \n@@ -1995,7 +1995,7 @@ bool static DisconnectTip(CValidationState &state) {\n     {\n         CCoinsViewCache view(pcoinsTip);\n         if (!DisconnectBlock(block, state, pindexDelete, view))\n-            return error(\"DisconnectTip() : DisconnectBlock %s failed\", pindexDelete->GetBlockHash().ToString());\n+            return error(\"DisconnectTip(): DisconnectBlock %s failed\", pindexDelete->GetBlockHash().ToString());\n         assert(view.Flush());\n     }\n     LogPrint(\"bench\", \"- Disconnect block: %.2fms\\n\", (GetTimeMicros() - nStart) * 0.001);\n@@ -2055,7 +2055,7 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n         if (!rv) {\n             if (state.IsInvalid())\n                 InvalidBlockFound(pindexNew, state);\n-            return error(\"ConnectTip() : ConnectBlock %s failed\", pindexNew->GetBlockHash().ToString());\n+            return error(\"ConnectTip(): ConnectBlock %s failed\", pindexNew->GetBlockHash().ToString());\n         }\n         mapBlockSource.erase(inv.hash);\n         nTime3 = GetTimeMicros(); nTimeConnectTotal += nTime3 - nTime2;\n@@ -2492,12 +2492,12 @@ bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool f\n {\n     // Check proof of work matches claimed amount\n     if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits))\n-        return state.DoS(50, error(\"CheckBlockHeader() : proof of work failed\"),\n+        return state.DoS(50, error(\"CheckBlockHeader(): proof of work failed\"),\n                          REJECT_INVALID, \"high-hash\");\n \n     // Check timestamp\n     if (block.GetBlockTime() > GetAdjustedTime() + 2 * 60 * 60)\n-        return state.Invalid(error(\"CheckBlockHeader() : block timestamp too far in the future\"),\n+        return state.Invalid(error(\"CheckBlockHeader(): block timestamp too far in the future\"),\n                              REJECT_INVALID, \"time-too-new\");\n \n     return true;\n@@ -2517,14 +2517,14 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n         bool mutated;\n         uint256 hashMerkleRoot2 = block.BuildMerkleTree(&mutated);\n         if (block.hashMerkleRoot != hashMerkleRoot2)\n-            return state.DoS(100, error(\"CheckBlock() : hashMerkleRoot mismatch\"),\n+            return state.DoS(100, error(\"CheckBlock(): hashMerkleRoot mismatch\"),\n                              REJECT_INVALID, \"bad-txnmrklroot\", true);\n \n         // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n         // of transactions in a block without affecting the merkle root of a block,\n         // while still invalidating it.\n         if (mutated)\n-            return state.DoS(100, error(\"CheckBlock() : duplicate transaction\"),\n+            return state.DoS(100, error(\"CheckBlock(): duplicate transaction\"),\n                              REJECT_INVALID, \"bad-txns-duplicate\", true);\n     }\n \n@@ -2534,30 +2534,30 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n \n     // Size limits\n     if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, error(\"CheckBlock() : size limits failed\"),\n+        return state.DoS(100, error(\"CheckBlock(): size limits failed\"),\n                          REJECT_INVALID, \"bad-blk-length\");\n \n     // First transaction must be coinbase, the rest must not be\n     if (block.vtx.empty() || !block.vtx[0].IsCoinBase())\n-        return state.DoS(100, error(\"CheckBlock() : first tx is not coinbase\"),\n+        return state.DoS(100, error(\"CheckBlock(): first tx is not coinbase\"),\n                          REJECT_INVALID, \"bad-cb-missing\");\n     for (unsigned int i = 1; i < block.vtx.size(); i++)\n         if (block.vtx[i].IsCoinBase())\n-            return state.DoS(100, error(\"CheckBlock() : more than one coinbase\"),\n+            return state.DoS(100, error(\"CheckBlock(): more than one coinbase\"),\n                              REJECT_INVALID, \"bad-cb-multiple\");\n \n     // Check transactions\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n         if (!CheckTransaction(tx, state))\n-            return error(\"CheckBlock() : CheckTransaction failed\");\n+            return error(\"CheckBlock(): CheckTransaction failed\");\n \n     unsigned int nSigOps = 0;\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n     {\n         nSigOps += GetLegacySigOpCount(tx);\n     }\n     if (nSigOps > MAX_BLOCK_SIGOPS)\n-        return state.DoS(100, error(\"CheckBlock() : out-of-bounds SigOpCount\"),\n+        return state.DoS(100, error(\"CheckBlock(): out-of-bounds SigOpCount\"),\n                          REJECT_INVALID, \"bad-blk-sigops\", true);\n \n     return true;\n@@ -2576,28 +2576,28 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n     // Check proof of work\n     if ((!Params().SkipProofOfWorkCheck()) &&\n        (block.nBits != GetNextWorkRequired(pindexPrev, &block)))\n-        return state.DoS(100, error(\"%s : incorrect proof of work\", __func__),\n+        return state.DoS(100, error(\"%s: incorrect proof of work\", __func__),\n                          REJECT_INVALID, \"bad-diffbits\");\n \n     // Check timestamp against prev\n     if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n-        return state.Invalid(error(\"%s : block's timestamp is too early\", __func__),\n+        return state.Invalid(error(\"%s: block's timestamp is too early\", __func__),\n                              REJECT_INVALID, \"time-too-old\");\n \n     // Check that the block chain matches the known block chain up to a checkpoint\n     if (!Checkpoints::CheckBlock(nHeight, hash))\n-        return state.DoS(100, error(\"%s : rejected by checkpoint lock-in at %d\", __func__, nHeight),\n+        return state.DoS(100, error(\"%s: rejected by checkpoint lock-in at %d\", __func__, nHeight),\n                          REJECT_CHECKPOINT, \"checkpoint mismatch\");\n \n     // Don't accept any forks from the main chain prior to last checkpoint\n     CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n     if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n-        return state.DoS(100, error(\"%s : forked chain older than last checkpoint (height %d)\", __func__, nHeight));\n+        return state.DoS(100, error(\"%s: forked chain older than last checkpoint (height %d)\", __func__, nHeight));\n \n     // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n     if (block.nVersion < 2 && IsSuperMajority(2, pindexPrev, Params().RejectBlockOutdatedMajority()))\n     {\n-        return state.Invalid(error(\"%s : rejected nVersion=1 block\", __func__),\n+        return state.Invalid(error(\"%s: rejected nVersion=1 block\", __func__),\n                              REJECT_OBSOLETE, \"bad-version\");\n     }\n \n@@ -2611,7 +2611,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     // Check that all transactions are finalized\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n         if (!IsFinalTx(tx, nHeight, block.GetBlockTime())) {\n-            return state.DoS(10, error(\"%s : contains a non-final transaction\", __func__), REJECT_INVALID, \"bad-txns-nonfinal\");\n+            return state.DoS(10, error(\"%s: contains a non-final transaction\", __func__), REJECT_INVALID, \"bad-txns-nonfinal\");\n         }\n \n     // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n@@ -2621,7 +2621,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n         CScript expect = CScript() << nHeight;\n         if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n             !std::equal(expect.begin(), expect.end(), block.vtx[0].vin[0].scriptSig.begin())) {\n-            return state.DoS(100, error(\"%s : block height mismatch in coinbase\", __func__), REJECT_INVALID, \"bad-cb-height\");\n+            return state.DoS(100, error(\"%s: block height mismatch in coinbase\", __func__), REJECT_INVALID, \"bad-cb-height\");\n         }\n     }\n \n@@ -2641,7 +2641,7 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n         if (ppindex)\n             *ppindex = pindex;\n         if (pindex->nStatus & BLOCK_FAILED_MASK)\n-            return state.Invalid(error(\"%s : block is marked invalid\", __func__), 0, \"duplicate\");\n+            return state.Invalid(error(\"%s: block is marked invalid\", __func__), 0, \"duplicate\");\n         return true;\n     }\n \n@@ -2653,10 +2653,10 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n     if (hash != Params().HashGenesisBlock()) {\n         BlockMap::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n         if (mi == mapBlockIndex.end())\n-            return state.DoS(10, error(\"%s : prev block not found\", __func__), 0, \"bad-prevblk\");\n+            return state.DoS(10, error(\"%s: prev block not found\", __func__), 0, \"bad-prevblk\");\n         pindexPrev = (*mi).second;\n         if (pindexPrev->nStatus & BLOCK_FAILED_MASK)\n-            return state.DoS(100, error(\"%s : prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n+            return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n     }\n \n     if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n@@ -2682,7 +2682,7 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n \n     if (pindex->nStatus & BLOCK_HAVE_DATA) {\n         // TODO: deal better with duplicate blocks.\n-        // return state.DoS(20, error(\"AcceptBlock() : already have block %d %s\", pindex->nHeight, pindex->GetBlockHash().ToString()), REJECT_DUPLICATE, \"duplicate\");\n+        // return state.DoS(20, error(\"AcceptBlock(): already have block %d %s\", pindex->nHeight, pindex->GetBlockHash().ToString()), REJECT_DUPLICATE, \"duplicate\");\n         return true;\n     }\n \n@@ -2703,12 +2703,12 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n         if (dbp != NULL)\n             blockPos = *dbp;\n         if (!FindBlockPos(state, blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != NULL))\n-            return error(\"AcceptBlock() : FindBlockPos failed\");\n+            return error(\"AcceptBlock(): FindBlockPos failed\");\n         if (dbp == NULL)\n             if (!WriteBlockToDisk(block, blockPos))\n                 return state.Abort(\"Failed to write block\");\n         if (!ReceivedBlockTransactions(block, state, pindex, blockPos))\n-            return error(\"AcceptBlock() : ReceivedBlockTransactions failed\");\n+            return error(\"AcceptBlock(): ReceivedBlockTransactions failed\");\n     } catch (const std::runtime_error& e) {\n         return state.Abort(std::string(\"System error: \") + e.what());\n     }\n@@ -2739,7 +2739,7 @@ bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDis\n         LOCK(cs_main);\n         MarkBlockAsReceived(pblock->GetHash());\n         if (!checked) {\n-            return error(\"%s : CheckBlock FAILED\", __func__);\n+            return error(\"%s: CheckBlock FAILED\", __func__);\n         }\n \n         // Store to disk\n@@ -2749,11 +2749,11 @@ bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDis\n             mapBlockSource[pindex->GetBlockHash()] = pfrom->GetId();\n         }\n         if (!ret)\n-            return error(\"%s : AcceptBlock FAILED\", __func__);\n+            return error(\"%s: AcceptBlock FAILED\", __func__);\n     }\n \n     if (!ActivateBestChain(state, pblock))\n-        return error(\"%s : ActivateBestChain failed\", __func__);\n+        return error(\"%s: ActivateBestChain failed\", __func__);\n \n     return true;\n }\n@@ -2859,7 +2859,7 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n     // Create new\n     CBlockIndex* pindexNew = new CBlockIndex();\n     if (!pindexNew)\n-        throw runtime_error(\"LoadBlockIndex() : new CBlockIndex failed\");\n+        throw runtime_error(\"LoadBlockIndex(): new CBlockIndex failed\");\n     mi = mapBlockIndex.insert(make_pair(hash, pindexNew)).first;\n     pindexNew->phashBlock = &((*mi).first);\n \n@@ -3005,24 +3005,24 @@ bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth\n         CBlock block;\n         // check level 0: read from disk\n         if (!ReadBlockFromDisk(block, pindex))\n-            return error(\"VerifyDB() : *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+            return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 1: verify block validity\n         if (nCheckLevel >= 1 && !CheckBlock(block, state))\n-            return error(\"VerifyDB() : *** found bad block at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+            return error(\"VerifyDB(): *** found bad block at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 2: verify undo validity\n         if (nCheckLevel >= 2 && pindex) {\n             CBlockUndo undo;\n             CDiskBlockPos pos = pindex->GetUndoPos();\n             if (!pos.IsNull()) {\n                 if (!UndoReadFromDisk(undo, pos, pindex->pprev->GetBlockHash()))\n-                    return error(\"VerifyDB() : *** found bad undo data at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                    return error(\"VerifyDB(): *** found bad undo data at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n             }\n         }\n         // check level 3: check for inconsistencies during memory-only disconnect of tip blocks\n         if (nCheckLevel >= 3 && pindex == pindexState && (coins.GetCacheSize() + pcoinsTip->GetCacheSize()) <= nCoinCacheSize) {\n             bool fClean = true;\n             if (!DisconnectBlock(block, state, pindex, coins, &fClean))\n-                return error(\"VerifyDB() : *** irrecoverable inconsistency in block data at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                return error(\"VerifyDB(): *** irrecoverable inconsistency in block data at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n             pindexState = pindex->pprev;\n             if (!fClean) {\n                 nGoodTransactions = 0;\n@@ -3034,7 +3034,7 @@ bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth\n             return true;\n     }\n     if (pindexFailure)\n-        return error(\"VerifyDB() : *** coin database inconsistencies found (last %i blocks, %i good transactions before that)\\n\", chainActive.Height() - pindexFailure->nHeight + 1, nGoodTransactions);\n+        return error(\"VerifyDB(): *** coin database inconsistencies found (last %i blocks, %i good transactions before that)\\n\", chainActive.Height() - pindexFailure->nHeight + 1, nGoodTransactions);\n \n     // check level 4: try reconnecting blocks\n     if (nCheckLevel >= 4) {\n@@ -3045,9 +3045,9 @@ bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth\n             pindex = chainActive.Next(pindex);\n             CBlock block;\n             if (!ReadBlockFromDisk(block, pindex))\n-                return error(\"VerifyDB() : *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n             if (!ConnectBlock(block, state, pindex, coins))\n-                return error(\"VerifyDB() : *** found unconnectable block at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                return error(\"VerifyDB(): *** found unconnectable block at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         }\n     }\n \n@@ -3093,18 +3093,18 @@ bool InitBlockIndex() {\n             CDiskBlockPos blockPos;\n             CValidationState state;\n             if (!FindBlockPos(state, blockPos, nBlockSize+8, 0, block.GetBlockTime()))\n-                return error(\"LoadBlockIndex() : FindBlockPos failed\");\n+                return error(\"LoadBlockIndex(): FindBlockPos failed\");\n             if (!WriteBlockToDisk(block, blockPos))\n-                return error(\"LoadBlockIndex() : writing genesis block to disk failed\");\n+                return error(\"LoadBlockIndex(): writing genesis block to disk failed\");\n             CBlockIndex *pindex = AddToBlockIndex(block);\n             if (!ReceivedBlockTransactions(block, state, pindex, blockPos))\n-                return error(\"LoadBlockIndex() : genesis block not accepted\");\n+                return error(\"LoadBlockIndex(): genesis block not accepted\");\n             if (!ActivateBestChain(state, &block))\n-                return error(\"LoadBlockIndex() : genesis block cannot be activated\");\n+                return error(\"LoadBlockIndex(): genesis block cannot be activated\");\n             // Force a chainstate write so that when we VerifyDB in a moment, it doesn't check stale data\n             return FlushStateToDisk(state, FLUSH_STATE_ALWAYS);\n         } catch (const std::runtime_error& e) {\n-            return error(\"LoadBlockIndex() : failed to initialize block database: %s\", e.what());\n+            return error(\"LoadBlockIndex(): failed to initialize block database: %s\", e.what());\n         }\n     }\n \n@@ -3204,7 +3204,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n                     }\n                 }\n             } catch (const std::exception& e) {\n-                LogPrintf(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+                LogPrintf(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n             }\n         }\n     } catch (const std::runtime_error& e) {\n@@ -3268,7 +3268,7 @@ string GetWarnings(string strFor)\n         return strStatusBar;\n     else if (strFor == \"rpc\")\n         return strRPC;\n-    assert(!\"GetWarnings() : invalid parameter\");\n+    assert(!\"GetWarnings(): invalid parameter\");\n     return \"error\";\n }\n \n@@ -3835,7 +3835,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             vWorkQueue.push_back(inv.hash);\n             vEraseQueue.push_back(inv.hash);\n \n-            LogPrint(\"mempool\", \"AcceptToMemoryPool: peer=%d %s : accepted %s (poolsz %u)\\n\",\n+            LogPrint(\"mempool\", \"AcceptToMemoryPool: peer=%d %s: accepted %s (poolsz %u)\\n\",\n                 pfrom->id, pfrom->cleanSubVer,\n                 tx.GetHash().ToString(),\n                 mempool.mapTx.size());\n@@ -4297,7 +4297,7 @@ bool ProcessMessages(CNode* pfrom)\n         memcpy(&nChecksum, &hash, sizeof(nChecksum));\n         if (nChecksum != hdr.nChecksum)\n         {\n-            LogPrintf(\"ProcessMessages(%s, %u bytes) : CHECKSUM ERROR nChecksum=%08x hdr.nChecksum=%08x\\n\",\n+            LogPrintf(\"ProcessMessages(%s, %u bytes): CHECKSUM ERROR nChecksum=%08x hdr.nChecksum=%08x\\n\",\n                strCommand, nMessageSize, nChecksum, hdr.nChecksum);\n             continue;\n         }\n@@ -4315,12 +4315,12 @@ bool ProcessMessages(CNode* pfrom)\n             if (strstr(e.what(), \"end of data\"))\n             {\n                 // Allow exceptions from under-length message on vRecv\n-                LogPrintf(\"ProcessMessages(%s, %u bytes) : Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", strCommand, nMessageSize, e.what());\n+                LogPrintf(\"ProcessMessages(%s, %u bytes): Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", strCommand, nMessageSize, e.what());\n             }\n             else if (strstr(e.what(), \"size too large\"))\n             {\n                 // Allow exceptions from over-long size\n-                LogPrintf(\"ProcessMessages(%s, %u bytes) : Exception '%s' caught\\n\", strCommand, nMessageSize, e.what());\n+                LogPrintf(\"ProcessMessages(%s, %u bytes): Exception '%s' caught\\n\", strCommand, nMessageSize, e.what());\n             }\n             else\n             {"
      },
      {
        "sha": "e359654d7ba26004c0c09fc44e52fab19b4ad3ce",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -332,7 +332,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n         CValidationState state;\n         if (!TestBlockValidity(state, *pblock, pindexPrev, false, false))\n-            throw std::runtime_error(\"CreateNewBlock() : TestBlockValidity failed\");\n+            throw std::runtime_error(\"CreateNewBlock(): TestBlockValidity failed\");\n     }\n \n     return pblocktemplate.release();\n@@ -415,7 +415,7 @@ static bool ProcessBlockFound(CBlock* pblock, CWallet& wallet, CReserveKey& rese\n     {\n         LOCK(cs_main);\n         if (pblock->hashPrevBlock != chainActive.Tip()->GetBlockHash())\n-            return error(\"BitcoinMiner : generated block is stale\");\n+            return error(\"BitcoinMiner: generated block is stale\");\n     }\n \n     // Remove key from key pool\n@@ -430,7 +430,7 @@ static bool ProcessBlockFound(CBlock* pblock, CWallet& wallet, CReserveKey& rese\n     // Process this block the same as if we had received it from another node\n     CValidationState state;\n     if (!ProcessNewBlock(state, NULL, pblock))\n-        return error(\"BitcoinMiner : ProcessNewBlock, block not accepted\");\n+        return error(\"BitcoinMiner: ProcessNewBlock, block not accepted\");\n \n     return true;\n }"
      },
      {
        "sha": "e4ab9d706d86e77308ec515a2c772d33451b733e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -1020,7 +1020,7 @@ void ThreadMapPort()\n         catch (const boost::thread_interrupted&)\n         {\n             r = UPNP_DeletePortMapping(urls.controlURL, data.first.servicetype, port.c_str(), \"TCP\", 0);\n-            LogPrintf(\"UPNP_DeletePortMapping() returned : %d\\n\", r);\n+            LogPrintf(\"UPNP_DeletePortMapping() returned: %d\\n\", r);\n             freeUPNPDevlist(devlist); devlist = 0;\n             FreeUPNPUrls(&urls);\n             throw;\n@@ -1797,21 +1797,21 @@ bool CAddrDB::Write(const CAddrMan& addr)\n     FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n     CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull())\n-        return error(\"%s : Failed to open file %s\", __func__, pathTmp.string());\n+        return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n \n     // Write and commit header, data\n     try {\n         fileout << ssPeers;\n     }\n     catch (const std::exception& e) {\n-        return error(\"%s : Serialize or I/O error - %s\", __func__, e.what());\n+        return error(\"%s: Serialize or I/O error - %s\", __func__, e.what());\n     }\n     FileCommit(fileout.Get());\n     fileout.fclose();\n \n     // replace existing peers.dat, if any, with new peers.dat.XXXX\n     if (!RenameOver(pathTmp, pathAddr))\n-        return error(\"%s : Rename-into-place failed\", __func__);\n+        return error(\"%s: Rename-into-place failed\", __func__);\n \n     return true;\n }\n@@ -1822,7 +1822,7 @@ bool CAddrDB::Read(CAddrMan& addr)\n     FILE *file = fopen(pathAddr.string().c_str(), \"rb\");\n     CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n-        return error(\"%s : Failed to open file %s\", __func__, pathAddr.string());\n+        return error(\"%s: Failed to open file %s\", __func__, pathAddr.string());\n \n     // use file size to size memory buffer\n     int fileSize = boost::filesystem::file_size(pathAddr);\n@@ -1840,7 +1840,7 @@ bool CAddrDB::Read(CAddrMan& addr)\n         filein >> hashIn;\n     }\n     catch (const std::exception& e) {\n-        return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n     }\n     filein.fclose();\n \n@@ -1849,7 +1849,7 @@ bool CAddrDB::Read(CAddrMan& addr)\n     // verify stored checksum matches input data\n     uint256 hashTmp = Hash(ssPeers.begin(), ssPeers.end());\n     if (hashIn != hashTmp)\n-        return error(\"%s : Checksum mismatch, data corrupted\", __func__);\n+        return error(\"%s: Checksum mismatch, data corrupted\", __func__);\n \n     unsigned char pchMsgTmp[4];\n     try {\n@@ -1858,13 +1858,13 @@ bool CAddrDB::Read(CAddrMan& addr)\n \n         // ... verify the network matches ours\n         if (memcmp(pchMsgTmp, Params().MessageStart(), sizeof(pchMsgTmp)))\n-            return error(\"%s : Invalid network magic number\", __func__);\n+            return error(\"%s: Invalid network magic number\", __func__);\n \n         // de-serialize address data into one CAddrMan object\n         ssPeers >> addr;\n     }\n     catch (const std::exception& e) {\n-        return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n     }\n \n     return true;"
      },
      {
        "sha": "e49f0d104c26600c78ef5f392925c6c8f9c63280",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -89,11 +89,11 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n \n     // Check range\n     if (fNegative || bnTarget == 0 || fOverflow || bnTarget > Params().ProofOfWorkLimit())\n-        return error(\"CheckProofOfWork() : nBits below minimum work\");\n+        return error(\"CheckProofOfWork(): nBits below minimum work\");\n \n     // Check proof of work matches claimed amount\n     if (UintToArith256(hash) > bnTarget)\n-        return error(\"CheckProofOfWork() : hash doesn't match nBits\");\n+        return error(\"CheckProofOfWork(): hash doesn't match nBits\");\n \n     return true;\n }"
      },
      {
        "sha": "606dbea79857d2f4cc79b0136ad46486f3c187d9",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -94,7 +94,7 @@ CAmount CTransaction::GetValueOut() const\n     {\n         nValueOut += it->nValue;\n         if (!MoneyRange(it->nValue) || !MoneyRange(nValueOut))\n-            throw std::runtime_error(\"CTransaction::GetValueOut() : value out of range\");\n+            throw std::runtime_error(\"CTransaction::GetValueOut(): value out of range\");\n     }\n     return nValueOut;\n }"
      },
      {
        "sha": "74ac706d60c6f14fc060e047068ee716128cb09b",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -66,7 +66,7 @@ bool CMessageHeader::IsValid() const\n     // Message size\n     if (nMessageSize > MAX_SIZE)\n     {\n-        LogPrintf(\"CMessageHeader::IsValid() : (%s, %u bytes) nMessageSize > MAX_SIZE\\n\", GetCommand(), nMessageSize);\n+        LogPrintf(\"CMessageHeader::IsValid(): (%s, %u bytes) nMessageSize > MAX_SIZE\\n\", GetCommand(), nMessageSize);\n         return false;\n     }\n \n@@ -117,7 +117,7 @@ CInv::CInv(const std::string& strType, const uint256& hashIn)\n         }\n     }\n     if (i == ARRAYLEN(ppszTypeName))\n-        throw std::out_of_range(strprintf(\"CInv::CInv(string, uint256) : unknown type '%s'\", strType));\n+        throw std::out_of_range(strprintf(\"CInv::CInv(string, uint256): unknown type '%s'\", strType));\n     hash = hashIn;\n }\n \n@@ -134,7 +134,7 @@ bool CInv::IsKnownType() const\n const char* CInv::GetCommand() const\n {\n     if (!IsKnownType())\n-        throw std::out_of_range(strprintf(\"CInv::GetCommand() : type=%d unknown type\", type));\n+        throw std::out_of_range(strprintf(\"CInv::GetCommand(): type=%d unknown type\", type));\n     return ppszTypeName[type];\n }\n "
      },
      {
        "sha": "162ecdba4ef4c84d4288e504db4e337664eb6282",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -114,7 +114,7 @@ class AddressTablePriv\n         case CT_NEW:\n             if(inModel)\n             {\n-                qWarning() << \"AddressTablePriv::updateEntry : Warning: Got CT_NEW, but entry is already in model\";\n+                qWarning() << \"AddressTablePriv::updateEntry: Warning: Got CT_NEW, but entry is already in model\";\n                 break;\n             }\n             parent->beginInsertRows(QModelIndex(), lowerIndex, lowerIndex);\n@@ -124,7 +124,7 @@ class AddressTablePriv\n         case CT_UPDATED:\n             if(!inModel)\n             {\n-                qWarning() << \"AddressTablePriv::updateEntry : Warning: Got CT_UPDATED, but entry is not in model\";\n+                qWarning() << \"AddressTablePriv::updateEntry: Warning: Got CT_UPDATED, but entry is not in model\";\n                 break;\n             }\n             lower->type = newEntryType;\n@@ -134,7 +134,7 @@ class AddressTablePriv\n         case CT_DELETED:\n             if(!inModel)\n             {\n-                qWarning() << \"AddressTablePriv::updateEntry : Warning: Got CT_DELETED, but entry is not in model\";\n+                qWarning() << \"AddressTablePriv::updateEntry: Warning: Got CT_DELETED, but entry is not in model\";\n                 break;\n             }\n             parent->beginRemoveRows(QModelIndex(), lowerIndex, upperIndex-1);"
      },
      {
        "sha": "03d94f2e13f127dcb875d733eef691506df7a5a1",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -212,14 +212,14 @@ static void ShowProgress(ClientModel *clientmodel, const std::string &title, int\n \n static void NotifyNumConnectionsChanged(ClientModel *clientmodel, int newNumConnections)\n {\n-    // Too noisy: qDebug() << \"NotifyNumConnectionsChanged : \" + QString::number(newNumConnections);\n+    // Too noisy: qDebug() << \"NotifyNumConnectionsChanged: \" + QString::number(newNumConnections);\n     QMetaObject::invokeMethod(clientmodel, \"updateNumConnections\", Qt::QueuedConnection,\n                               Q_ARG(int, newNumConnections));\n }\n \n static void NotifyAlertChanged(ClientModel *clientmodel, const uint256 &hash, ChangeType status)\n {\n-    qDebug() << \"NotifyAlertChanged : \" + QString::fromStdString(hash.GetHex()) + \" status=\" + QString::number(status);\n+    qDebug() << \"NotifyAlertChanged: \" + QString::fromStdString(hash.GetHex()) + \" status=\" + QString::number(status);\n     QMetaObject::invokeMethod(clientmodel, \"updateAlert\", Qt::QueuedConnection,\n                               Q_ARG(QString, QString::fromStdString(hash.GetHex())),\n                               Q_ARG(int, status));"
      },
      {
        "sha": "4c1e898020dcdfe8034396ae6fb19f5180ac8ecc",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -32,18 +32,18 @@ bool PaymentRequestPlus::parse(const QByteArray& data)\n {\n     bool parseOK = paymentRequest.ParseFromArray(data.data(), data.size());\n     if (!parseOK) {\n-        qWarning() << \"PaymentRequestPlus::parse : Error parsing payment request\";\n+        qWarning() << \"PaymentRequestPlus::parse: Error parsing payment request\";\n         return false;\n     }\n     if (paymentRequest.payment_details_version() > 1) {\n-        qWarning() << \"PaymentRequestPlus::parse : Received up-version payment details, version=\" << paymentRequest.payment_details_version();\n+        qWarning() << \"PaymentRequestPlus::parse: Received up-version payment details, version=\" << paymentRequest.payment_details_version();\n         return false;\n     }\n \n     parseOK = details.ParseFromString(paymentRequest.serialized_payment_details());\n     if (!parseOK)\n     {\n-        qWarning() << \"PaymentRequestPlus::parse : Error parsing payment details\";\n+        qWarning() << \"PaymentRequestPlus::parse: Error parsing payment details\";\n         paymentRequest.Clear();\n         return false;\n     }\n@@ -83,17 +83,17 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n         digestAlgorithm = EVP_sha1();\n     }\n     else if (paymentRequest.pki_type() == \"none\") {\n-        qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: pki_type == none\";\n+        qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: pki_type == none\";\n         return false;\n     }\n     else {\n-        qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: unknown pki_type \" << QString::fromStdString(paymentRequest.pki_type());\n+        qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: unknown pki_type \" << QString::fromStdString(paymentRequest.pki_type());\n         return false;\n     }\n \n     payments::X509Certificates certChain;\n     if (!certChain.ParseFromString(paymentRequest.pki_data())) {\n-        qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: error parsing pki_data\";\n+        qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: error parsing pki_data\";\n         return false;\n     }\n \n@@ -103,12 +103,12 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n         QByteArray certData(certChain.certificate(i).data(), certChain.certificate(i).size());\n         QSslCertificate qCert(certData, QSsl::Der);\n         if (currentTime < qCert.effectiveDate() || currentTime > qCert.expiryDate()) {\n-            qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: certificate expired or not yet active: \" << qCert;\n+            qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: certificate expired or not yet active: \" << qCert;\n             return false;\n         }\n #if QT_VERSION >= 0x050000\n         if (qCert.isBlacklisted()) {\n-            qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: certificate blacklisted: \" << qCert;\n+            qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: certificate blacklisted: \" << qCert;\n             return false;\n         }\n #endif\n@@ -118,7 +118,7 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n             certs.push_back(cert);\n     }\n     if (certs.empty()) {\n-        qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: empty certificate chain\";\n+        qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: empty certificate chain\";\n         return false;\n     }\n \n@@ -134,7 +134,7 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n     // load the signing cert into it and verify.\n     X509_STORE_CTX *store_ctx = X509_STORE_CTX_new();\n     if (!store_ctx) {\n-        qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: error creating X509_STORE_CTX\";\n+        qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: error creating X509_STORE_CTX\";\n         return false;\n     }\n \n@@ -191,7 +191,7 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n     }\n     catch (const SSLVerifyError& err) {\n         fResult = false;\n-        qWarning() << \"PaymentRequestPlus::getMerchant : SSL error: \" << err.what();\n+        qWarning() << \"PaymentRequestPlus::getMerchant: SSL error: \" << err.what();\n     }\n \n     if (website)"
      },
      {
        "sha": "a00916bf7f96b1668e6db5604b650e07302a9c5a",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -97,7 +97,7 @@ static QList<QString> savedPaymentRequests;\n \n static void ReportInvalidCertificate(const QSslCertificate& cert)\n {\n-    qDebug() << \"ReportInvalidCertificate : Payment server found an invalid certificate: \" << cert.subjectInfo(QSslCertificate::CommonName);\n+    qDebug() << \"ReportInvalidCertificate: Payment server found an invalid certificate: \" << cert.subjectInfo(QSslCertificate::CommonName);\n }\n \n //\n@@ -171,7 +171,7 @@ void PaymentServer::LoadRootCAs(X509_STORE* _store)\n             continue;\n         }\n     }\n-    qWarning() << \"PaymentServer::LoadRootCAs : Loaded \" << nRootCerts << \" root certificates\";\n+    qWarning() << \"PaymentServer::LoadRootCAs: Loaded \" << nRootCerts << \" root certificates\";\n \n     // Project for another day:\n     // Fetch certificate revocation lists, and add them to certStore.\n@@ -244,7 +244,7 @@ void PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n         {\n             // Printing to debug.log is about the best we can do here, the\n             // GUI hasn't started yet so we can't pop up a message box.\n-            qWarning() << \"PaymentServer::ipcSendCommandLine : Payment request file does not exist: \" << arg;\n+            qWarning() << \"PaymentServer::ipcSendCommandLine: Payment request file does not exist: \" << arg;\n         }\n     }\n }\n@@ -368,10 +368,10 @@ void PaymentServer::initNetManager()\n     if (optionsModel->getProxySettings(proxy)) {\n         netManager->setProxy(proxy);\n \n-        qDebug() << \"PaymentServer::initNetManager : Using SOCKS5 proxy\" << proxy.hostName() << \":\" << proxy.port();\n+        qDebug() << \"PaymentServer::initNetManager: Using SOCKS5 proxy\" << proxy.hostName() << \":\" << proxy.port();\n     }\n     else\n-        qDebug() << \"PaymentServer::initNetManager : No active proxy server found.\";\n+        qDebug() << \"PaymentServer::initNetManager: No active proxy server found.\";\n \n     connect(netManager, SIGNAL(finished(QNetworkReply*)),\n             this, SLOT(netRequestFinished(QNetworkReply*)));\n@@ -415,12 +415,12 @@ void PaymentServer::handleURIOrFile(const QString& s)\n \n             if (fetchUrl.isValid())\n             {\n-                qDebug() << \"PaymentServer::handleURIOrFile : fetchRequest(\" << fetchUrl << \")\";\n+                qDebug() << \"PaymentServer::handleURIOrFile: fetchRequest(\" << fetchUrl << \")\";\n                 fetchRequest(fetchUrl);\n             }\n             else\n             {\n-                qWarning() << \"PaymentServer::handleURIOrFile : Invalid URL: \" << fetchUrl;\n+                qWarning() << \"PaymentServer::handleURIOrFile: Invalid URL: \" << fetchUrl;\n                 emit message(tr(\"URI handling\"),\n                     tr(\"Payment request fetch URL is invalid: %1\").arg(fetchUrl.toString()),\n                     CClientUIInterface::ICON_WARNING);\n@@ -585,10 +585,10 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n     recipient.address = addresses.join(\"<br />\");\n \n     if (!recipient.authenticatedMerchant.isEmpty()) {\n-        qDebug() << \"PaymentServer::processPaymentRequest : Secure payment request from \" << recipient.authenticatedMerchant;\n+        qDebug() << \"PaymentServer::processPaymentRequest: Secure payment request from \" << recipient.authenticatedMerchant;\n     }\n     else {\n-        qDebug() << \"PaymentServer::processPaymentRequest : Insecure payment request to \" << addresses.join(\", \");\n+        qDebug() << \"PaymentServer::processPaymentRequest: Insecure payment request to \" << addresses.join(\", \");\n     }\n \n     return true;\n@@ -643,7 +643,7 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipien\n         else {\n             // This should never happen, because sending coins should have\n             // just unlocked the wallet and refilled the keypool.\n-            qWarning() << \"PaymentServer::fetchPaymentACK : Error getting refund key, refund_to not set\";\n+            qWarning() << \"PaymentServer::fetchPaymentACK: Error getting refund key, refund_to not set\";\n         }\n     }\n \n@@ -655,7 +655,7 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipien\n     }\n     else {\n         // This should never happen, either.\n-        qWarning() << \"PaymentServer::fetchPaymentACK : Error serializing payment message\";\n+        qWarning() << \"PaymentServer::fetchPaymentACK: Error serializing payment message\";\n     }\n }\n \n@@ -694,7 +694,7 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n         SendCoinsRecipient recipient;\n         if (!request.parse(data))\n         {\n-            qWarning() << \"PaymentServer::netRequestFinished : Error parsing payment request\";\n+            qWarning() << \"PaymentServer::netRequestFinished: Error parsing payment request\";\n             emit message(tr(\"Payment request error\"),\n                 tr(\"Payment request cannot be parsed!\"),\n                 CClientUIInterface::MSG_ERROR);\n@@ -712,7 +712,7 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n             QString msg = tr(\"Bad response from server %1\")\n                 .arg(reply->request().url().toString());\n \n-            qWarning() << \"PaymentServer::netRequestFinished : \" << msg;\n+            qWarning() << \"PaymentServer::netRequestFinished: \" << msg;\n             emit message(tr(\"Payment request error\"), msg, CClientUIInterface::MSG_ERROR);\n         }\n         else\n@@ -728,7 +728,7 @@ void PaymentServer::reportSslErrors(QNetworkReply* reply, const QList<QSslError>\n \n     QString errString;\n     foreach (const QSslError& err, errs) {\n-        qWarning() << \"PaymentServer::reportSslErrors : \" << err;\n+        qWarning() << \"PaymentServer::reportSslErrors: \" << err;\n         errString += err.errorString() + \"\\n\";\n     }\n     emit message(tr(\"Network request error\"), errString, CClientUIInterface::MSG_ERROR);"
      },
      {
        "sha": "df1afbfaaae31266db335a94423581896697a65c",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -94,7 +94,7 @@ class TransactionTablePriv\n      */\n     void updateWallet(const uint256 &hash, int status, bool showTransaction)\n     {\n-        qDebug() << \"TransactionTablePriv::updateWallet : \" + QString::fromStdString(hash.ToString()) + \" \" + QString::number(status);\n+        qDebug() << \"TransactionTablePriv::updateWallet: \" + QString::fromStdString(hash.ToString()) + \" \" + QString::number(status);\n \n         // Find bounds of this transaction in model\n         QList<TransactionRecord>::iterator lower = qLowerBound(\n@@ -122,7 +122,7 @@ class TransactionTablePriv\n         case CT_NEW:\n             if(inModel)\n             {\n-                qWarning() << \"TransactionTablePriv::updateWallet : Warning: Got CT_NEW, but transaction is already in model\";\n+                qWarning() << \"TransactionTablePriv::updateWallet: Warning: Got CT_NEW, but transaction is already in model\";\n                 break;\n             }\n             if(showTransaction)\n@@ -132,7 +132,7 @@ class TransactionTablePriv\n                 std::map<uint256, CWalletTx>::iterator mi = wallet->mapWallet.find(hash);\n                 if(mi == wallet->mapWallet.end())\n                 {\n-                    qWarning() << \"TransactionTablePriv::updateWallet : Warning: Got CT_NEW, but transaction is not in wallet\";\n+                    qWarning() << \"TransactionTablePriv::updateWallet: Warning: Got CT_NEW, but transaction is not in wallet\";\n                     break;\n                 }\n                 // Added -- insert at the right position\n@@ -154,7 +154,7 @@ class TransactionTablePriv\n         case CT_DELETED:\n             if(!inModel)\n             {\n-                qWarning() << \"TransactionTablePriv::updateWallet : Warning: Got CT_DELETED, but transaction is not in model\";\n+                qWarning() << \"TransactionTablePriv::updateWallet: Warning: Got CT_DELETED, but transaction is not in model\";\n                 break;\n             }\n             // Removed -- remove entire transaction from table\n@@ -664,7 +664,7 @@ struct TransactionNotification\n     void invoke(QObject *ttm)\n     {\n         QString strHash = QString::fromStdString(hash.GetHex());\n-        qDebug() << \"NotifyTransactionChanged : \" + strHash + \" status= \" + QString::number(status);\n+        qDebug() << \"NotifyTransactionChanged: \" + strHash + \" status= \" + QString::number(status);\n         QMetaObject::invokeMethod(ttm, \"updateTransaction\", Qt::QueuedConnection,\n                                   Q_ARG(QString, strHash),\n                                   Q_ARG(int, status),"
      },
      {
        "sha": "4a7abf999cb04806f7f244239cb15996e14fc18f",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -452,7 +452,7 @@ static void NotifyAddressBookChanged(WalletModel *walletmodel, CWallet *wallet,\n     QString strLabel = QString::fromStdString(label);\n     QString strPurpose = QString::fromStdString(purpose);\n \n-    qDebug() << \"NotifyAddressBookChanged : \" + strAddress + \" \" + strLabel + \" isMine=\" + QString::number(isMine) + \" purpose=\" + strPurpose + \" status=\" + QString::number(status);\n+    qDebug() << \"NotifyAddressBookChanged: \" + strAddress + \" \" + strLabel + \" isMine=\" + QString::number(isMine) + \" purpose=\" + strPurpose + \" status=\" + QString::number(status);\n     QMetaObject::invokeMethod(walletmodel, \"updateAddressBook\", Qt::QueuedConnection,\n                               Q_ARG(QString, strAddress),\n                               Q_ARG(QString, strLabel),"
      },
      {
        "sha": "28371771a9efbe7951f156b0b0bd789cdfe11288",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -82,7 +82,7 @@ Value getnewaddress(const Array& params, bool fHelp)\n             \"If 'account' is specified (DEPRECATED), it is added to the address book \\n\"\n             \"so payments received with the address will be credited to 'account'.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"account\\\"        (string, optional) DEPRECATED. The account name for the address to be linked to. if not provided, the default account \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.\\n\"\n+            \"1. \\\"account\\\"        (string, optional) DEPRECATED. The account name for the address to be linked to. If not provided, the default account \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"bitcoinaddress\\\"    (string) The new bitcoin address\\n\"\n             \"\\nExamples:\\n\"\n@@ -319,7 +319,7 @@ void SendMoney(const CTxDestination &address, CAmount nValue, CWalletTx& wtxNew)\n     if (pwalletMain->IsLocked())\n     {\n         strError = \"Error: Wallet locked, unable to create transaction!\";\n-        LogPrintf(\"SendMoney() : %s\", strError);\n+        LogPrintf(\"SendMoney(): %s\", strError);\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n \n@@ -333,7 +333,7 @@ void SendMoney(const CTxDestination &address, CAmount nValue, CWalletTx& wtxNew)\n     {\n         if (nValue + nFeeRequired > pwalletMain->GetBalance())\n             strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n-        LogPrintf(\"SendMoney() : %s\\n\", strError);\n+        LogPrintf(\"SendMoney(): %s\\n\", strError);\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n     if (!pwalletMain->CommitTransaction(wtxNew, reservekey))"
      },
      {
        "sha": "0cee1a0116df6a7a7117948c864eabb56d4f6bd6",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -60,7 +60,7 @@ bool CastToBool(const valtype& vch)\n static inline void popstack(vector<valtype>& stack)\n {\n     if (stack.empty())\n-        throw runtime_error(\"popstack() : stack empty\");\n+        throw runtime_error(\"popstack(): stack empty\");\n     stack.pop_back();\n }\n "
      },
      {
        "sha": "8b36aa2f5061fcbb204d73737bbf1c734aacb9ec",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -391,7 +391,7 @@ class CScript : public std::vector<unsigned char>\n     CScript& operator<<(opcodetype opcode)\n     {\n         if (opcode < 0 || opcode > 0xff)\n-            throw std::runtime_error(\"CScript::operator<<() : invalid opcode\");\n+            throw std::runtime_error(\"CScript::operator<<(): invalid opcode\");\n         insert(end(), (unsigned char)opcode);\n         return *this;\n     }"
      },
      {
        "sha": "a62760a7938dec3f0111cc5f600345e8c48b14c0",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -249,7 +249,7 @@ uint64_t ReadCompactSize(Stream& is)\n             throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");\n     }\n     if (nSizeRet > (uint64_t)MAX_SIZE)\n-        throw std::ios_base::failure(\"ReadCompactSize() : size too large\");\n+        throw std::ios_base::failure(\"ReadCompactSize(): size too large\");\n     return nSizeRet;\n }\n "
      },
      {
        "sha": "bd8568b1af35093c4db4b85b2ddcfff2431a019c",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -224,7 +224,7 @@ class CDataStream\n         {\n             if (nReadPosNext > vch.size())\n             {\n-                throw std::ios_base::failure(\"CDataStream::read() : end of data\");\n+                throw std::ios_base::failure(\"CDataStream::read(): end of data\");\n             }\n             memcpy(pch, &vch[nReadPos], nSize);\n             nReadPos = 0;\n@@ -244,7 +244,7 @@ class CDataStream\n         if (nReadPosNext >= vch.size())\n         {\n             if (nReadPosNext > vch.size())\n-                throw std::ios_base::failure(\"CDataStream::ignore() : end of data\");\n+                throw std::ios_base::failure(\"CDataStream::ignore(): end of data\");\n             nReadPos = 0;\n             vch.clear();\n             return (*this);\n@@ -374,18 +374,18 @@ class CAutoFile\n     CAutoFile& read(char* pch, size_t nSize)\n     {\n         if (!file)\n-            throw std::ios_base::failure(\"CAutoFile::read : file handle is NULL\");\n+            throw std::ios_base::failure(\"CAutoFile::read: file handle is NULL\");\n         if (fread(pch, 1, nSize, file) != nSize)\n-            throw std::ios_base::failure(feof(file) ? \"CAutoFile::read : end of file\" : \"CAutoFile::read : fread failed\");\n+            throw std::ios_base::failure(feof(file) ? \"CAutoFile::read: end of file\" : \"CAutoFile::read: fread failed\");\n         return (*this);\n     }\n \n     CAutoFile& write(const char* pch, size_t nSize)\n     {\n         if (!file)\n-            throw std::ios_base::failure(\"CAutoFile::write : file handle is NULL\");\n+            throw std::ios_base::failure(\"CAutoFile::write: file handle is NULL\");\n         if (fwrite(pch, 1, nSize, file) != nSize)\n-            throw std::ios_base::failure(\"CAutoFile::write : write failed\");\n+            throw std::ios_base::failure(\"CAutoFile::write: write failed\");\n         return (*this);\n     }\n \n@@ -401,7 +401,7 @@ class CAutoFile\n     {\n         // Serialize to this stream\n         if (!file)\n-            throw std::ios_base::failure(\"CAutoFile::operator<< : file handle is NULL\");\n+            throw std::ios_base::failure(\"CAutoFile::operator<<: file handle is NULL\");\n         ::Serialize(*this, obj, nType, nVersion);\n         return (*this);\n     }\n@@ -411,7 +411,7 @@ class CAutoFile\n     {\n         // Unserialize from this stream\n         if (!file)\n-            throw std::ios_base::failure(\"CAutoFile::operator>> : file handle is NULL\");\n+            throw std::ios_base::failure(\"CAutoFile::operator>>: file handle is NULL\");\n         ::Unserialize(*this, obj, nType, nVersion);\n         return (*this);\n     }\n@@ -452,7 +452,7 @@ class CBufferedFile\n             return false;\n         size_t read = fread((void*)&vchBuf[pos], 1, readNow, src);\n         if (read == 0) {\n-            throw std::ios_base::failure(feof(src) ? \"CBufferedFile::Fill : end of file\" : \"CBufferedFile::Fill : fread failed\");\n+            throw std::ios_base::failure(feof(src) ? \"CBufferedFile::Fill: end of file\" : \"CBufferedFile::Fill: fread failed\");\n         } else {\n             nSrcPos += read;\n             return true;"
      },
      {
        "sha": "e7aeee9db606c870315542a50dca96b9eb7e2ff7",
        "filename": "src/test/bignum.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/test/bignum.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/test/bignum.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bignum.h?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -37,14 +37,14 @@ class CBigNum : public BIGNUM\n         if (!BN_copy(this, &b))\n         {\n             BN_clear_free(this);\n-            throw bignum_error(\"CBigNum::CBigNum(const CBigNum&) : BN_copy failed\");\n+            throw bignum_error(\"CBigNum::CBigNum(const CBigNum&): BN_copy failed\");\n         }\n     }\n \n     CBigNum& operator=(const CBigNum& b)\n     {\n         if (!BN_copy(this, &b))\n-            throw bignum_error(\"CBigNum::operator= : BN_copy failed\");\n+            throw bignum_error(\"CBigNum::operator=: BN_copy failed\");\n         return (*this);\n     }\n \n@@ -151,15 +151,15 @@ inline const CBigNum operator+(const CBigNum& a, const CBigNum& b)\n {\n     CBigNum r;\n     if (!BN_add(&r, &a, &b))\n-        throw bignum_error(\"CBigNum::operator+ : BN_add failed\");\n+        throw bignum_error(\"CBigNum::operator+: BN_add failed\");\n     return r;\n }\n \n inline const CBigNum operator-(const CBigNum& a, const CBigNum& b)\n {\n     CBigNum r;\n     if (!BN_sub(&r, &a, &b))\n-        throw bignum_error(\"CBigNum::operator- : BN_sub failed\");\n+        throw bignum_error(\"CBigNum::operator-: BN_sub failed\");\n     return r;\n }\n "
      },
      {
        "sha": "e43a08629a1ae2b51feba692b244b8a301649208",
        "filename": "src/test/data/sig_canonical.json",
        "status": "removed",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6af674ecdc99db2eb741b8dc79e44bd0202e3855/src/test/data/sig_canonical.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6af674ecdc99db2eb741b8dc79e44bd0202e3855/src/test/data/sig_canonical.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/sig_canonical.json?ref=6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "patch": "@@ -1,7 +0,0 @@\n-[\n-    \"300602010002010001\",\n-    \"3008020200ff020200ff01\",\n-    \"304402203932c892e2e550f3af8ee4ce9c215a87f9bb831dcac87b2838e2c2eaa891df0c022030b61dd36543125d56b9f9f3a1f9353189e5af33cdda8d77a5209aec03978fa001\",\n-    \"30450220076045be6f9eca28ff1ec606b833d0b87e70b2a630f5e3a496b110967a40f90a0221008fffd599910eefe00bc803c688c2eca1d2ba7f6b180620eaa03488e6585db6ba01\",\n-    \"3046022100876045be6f9eca28ff1ec606b833d0b87e70b2a630f5e3a496b110967a40f90a0221008fffd599910eefe00bc803c688c2eca1d2ba7f6b180620eaa03488e6585db6ba01\"\n-]"
      },
      {
        "sha": "d9a6c1cdd872ec1d64ac429577b6b210f67b17b8",
        "filename": "src/test/data/sig_noncanonical.json",
        "status": "removed",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6af674ecdc99db2eb741b8dc79e44bd0202e3855/src/test/data/sig_noncanonical.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6af674ecdc99db2eb741b8dc79e44bd0202e3855/src/test/data/sig_noncanonical.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/sig_noncanonical.json?ref=6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "patch": "@@ -1,22 +0,0 @@\n-[\n-    \"non-hex strings are ignored\",\n-\n-    \"too short:\",    \"30050201FF020001\",\n-    \"too long:\",     \"30470221005990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba6105022200002d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"hashtype:\",     \"304402205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed11\",\n-    \"type:\",         \"314402205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"total length:\", \"304502205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"S len oob:\",    \"301F01205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb101\",\n-    \"R+S:\",          \"304502205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed0001\",\n-\n-    \"R type:\",       \"304401205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"R len = 0:\",    \"3024020002202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"R<0:\",          \"304402208990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"R padded:\",     \"30450221005990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-\n-\n-    \"S type:\",       \"304402205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610501202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"S len = 0:\",    \"302402205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba6105020001\",\n-    \"S<0:\",          \"304402205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba61050220fd5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"S padded:\",     \"304502205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba61050221002d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\"\n-]"
      },
      {
        "sha": "ea41dbcde23435912f8b6ac0a7e09a3df8717d05",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -27,7 +27,7 @@ uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, un\n     static const uint256 one(uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\"));\n     if (nIn >= txTo.vin.size())\n     {\n-        printf(\"ERROR: SignatureHash() : nIn=%d out of range\\n\", nIn);\n+        printf(\"ERROR: SignatureHash(): nIn=%d out of range\\n\", nIn);\n         return one;\n     }\n     CMutableTransaction txTmp(txTo);\n@@ -58,7 +58,7 @@ uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, un\n         unsigned int nOut = nIn;\n         if (nOut >= txTmp.vout.size())\n         {\n-            printf(\"ERROR: SignatureHash() : nOut=%d out of range\\n\", nOut);\n+            printf(\"ERROR: SignatureHash(): nOut=%d out of range\\n\", nOut);\n             return one;\n         }\n         txTmp.vout.resize(nOut+1);"
      },
      {
        "sha": "da271bd5d1a11c95a16d7139a0241ff738b78dba",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -141,7 +141,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n             }\n             pcursor->Next();\n         } catch (const std::exception& e) {\n-            return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+            return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n         }\n     }\n     stats.nHeight = mapBlockIndex.find(GetBestBlock())->second->nHeight;\n@@ -223,14 +223,14 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n                 pindexNew->nTx            = diskindex.nTx;\n \n                 if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits))\n-                    return error(\"LoadBlockIndex() : CheckProofOfWork failed: %s\", pindexNew->ToString());\n+                    return error(\"LoadBlockIndex(): CheckProofOfWork failed: %s\", pindexNew->ToString());\n \n                 pcursor->Next();\n             } else {\n                 break; // if shutdown requested or finished loading block index\n             }\n         } catch (const std::exception& e) {\n-            return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+            return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n         }\n     }\n "
      },
      {
        "sha": "6e0f7e9c5a6bd5a2afedba96c1dd7e1b2d1c3305",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -192,7 +192,7 @@ class CMinerPolicyEstimator\n             // Neither or both fee and priority sufficient to get confirmed:\n             // don't know why they got confirmed.\n         }\n-        LogPrint(\"estimatefee\", \"Seen TX confirm: %s : %s fee/%g priority, took %d blocks\\n\",\n+        LogPrint(\"estimatefee\", \"Seen TX confirm: %s: %s fee/%g priority, took %d blocks\\n\",\n                  assignedTo, feeRate.ToString(), dPriority, nBlocksAgo);\n     }\n \n@@ -658,7 +658,7 @@ CTxMemPool::WriteFeeEstimates(CAutoFile& fileout) const\n         minerPolicyEstimator->Write(fileout);\n     }\n     catch (const std::exception&) {\n-        LogPrintf(\"CTxMemPool::WriteFeeEstimates() : unable to write policy estimator data (non-fatal)\");\n+        LogPrintf(\"CTxMemPool::WriteFeeEstimates(): unable to write policy estimator data (non-fatal)\");\n         return false;\n     }\n     return true;\n@@ -671,13 +671,13 @@ CTxMemPool::ReadFeeEstimates(CAutoFile& filein)\n         int nVersionRequired, nVersionThatWrote;\n         filein >> nVersionRequired >> nVersionThatWrote;\n         if (nVersionRequired > CLIENT_VERSION)\n-            return error(\"CTxMemPool::ReadFeeEstimates() : up-version (%d) fee estimate file\", nVersionRequired);\n+            return error(\"CTxMemPool::ReadFeeEstimates(): up-version (%d) fee estimate file\", nVersionRequired);\n \n         LOCK(cs);\n         minerPolicyEstimator->Read(filein, minRelayFee);\n     }\n     catch (const std::exception&) {\n-        LogPrintf(\"CTxMemPool::ReadFeeEstimates() : unable to read policy estimator data (non-fatal)\");\n+        LogPrintf(\"CTxMemPool::ReadFeeEstimates(): unable to read policy estimator data (non-fatal)\");\n         return false;\n     }\n     return true;"
      },
      {
        "sha": "d66a4465c53f494d15dbae26f39dad8a53a77abb",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -88,7 +88,7 @@ CPubKey CWallet::GenerateNewKey()\n         nTimeFirstKey = nCreationTime;\n \n     if (!AddKeyPubKey(secret, pubkey))\n-        throw std::runtime_error(\"CWallet::GenerateNewKey() : AddKey failed\");\n+        throw std::runtime_error(\"CWallet::GenerateNewKey(): AddKey failed\");\n     return pubkey;\n }\n \n@@ -619,7 +619,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletD\n                     wtx.nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\n                 }\n                 else\n-                    LogPrintf(\"AddToWallet() : found %s in block %s not in index\\n\",\n+                    LogPrintf(\"AddToWallet(): found %s in block %s not in index\\n\",\n                              wtxIn.GetHash().ToString(),\n                              wtxIn.hashBlock.ToString());\n             }\n@@ -1616,7 +1616,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n         if (!wtxNew.AcceptToMemoryPool(false))\n         {\n             // This must not fail. The transaction has already been signed and recorded.\n-            LogPrintf(\"CommitTransaction() : Error: Transaction not valid\");\n+            LogPrintf(\"CommitTransaction(): Error: Transaction not valid\");\n             return false;\n         }\n         wtxNew.RelayWalletTransaction();\n@@ -1809,7 +1809,7 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n             if (!setKeyPool.empty())\n                 nEnd = *(--setKeyPool.end()) + 1;\n             if (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey())))\n-                throw runtime_error(\"TopUpKeyPool() : writing generated key failed\");\n+                throw runtime_error(\"TopUpKeyPool(): writing generated key failed\");\n             setKeyPool.insert(nEnd);\n             LogPrintf(\"keypool added key %d, size=%u\\n\", nEnd, setKeyPool.size());\n         }\n@@ -1836,9 +1836,9 @@ void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool)\n         nIndex = *(setKeyPool.begin());\n         setKeyPool.erase(setKeyPool.begin());\n         if (!walletdb.ReadPool(nIndex, keypool))\n-            throw runtime_error(\"ReserveKeyFromKeyPool() : read failed\");\n+            throw runtime_error(\"ReserveKeyFromKeyPool(): read failed\");\n         if (!HaveKey(keypool.vchPubKey.GetID()))\n-            throw runtime_error(\"ReserveKeyFromKeyPool() : unknown key in key pool\");\n+            throw runtime_error(\"ReserveKeyFromKeyPool(): unknown key in key pool\");\n         assert(keypool.vchPubKey.IsValid());\n         LogPrintf(\"keypool reserve %d\\n\", nIndex);\n     }\n@@ -2086,11 +2086,11 @@ void CWallet::GetAllReserveKeys(set<CKeyID>& setAddress) const\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n-            throw runtime_error(\"GetAllReserveKeyHashes() : read failed\");\n+            throw runtime_error(\"GetAllReserveKeyHashes(): read failed\");\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();\n         if (!HaveKey(keyID))\n-            throw runtime_error(\"GetAllReserveKeyHashes() : unknown key in key pool\");\n+            throw runtime_error(\"GetAllReserveKeyHashes(): unknown key in key pool\");\n         setAddress.insert(keyID);\n     }\n }\n@@ -2303,7 +2303,7 @@ int CMerkleTx::SetMerkleBranch(const CBlock& block)\n     {\n         vMerkleBranch.clear();\n         nIndex = -1;\n-        LogPrintf(\"ERROR: SetMerkleBranch() : couldn't find tx in block\\n\");\n+        LogPrintf(\"ERROR: SetMerkleBranch(): couldn't find tx in block\\n\");\n         return 0;\n     }\n "
      },
      {
        "sha": "aaff00b71660ff10e5257ac39dd6deb2d410e685",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -320,14 +320,14 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetCredit(const CTxOut& txout, const isminefilter& filter) const\n     {\n         if (!MoneyRange(txout.nValue))\n-            throw std::runtime_error(\"CWallet::GetCredit() : value out of range\");\n+            throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n         return ((IsMine(txout) & filter) ? txout.nValue : 0);\n     }\n     bool IsChange(const CTxOut& txout) const;\n     CAmount GetChange(const CTxOut& txout) const\n     {\n         if (!MoneyRange(txout.nValue))\n-            throw std::runtime_error(\"CWallet::GetChange() : value out of range\");\n+            throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n         return (IsChange(txout) ? txout.nValue : 0);\n     }\n     bool IsMine(const CTransaction& tx) const\n@@ -349,7 +349,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         {\n             nDebit += GetDebit(txin, filter);\n             if (!MoneyRange(nDebit))\n-                throw std::runtime_error(\"CWallet::GetDebit() : value out of range\");\n+                throw std::runtime_error(\"CWallet::GetDebit(): value out of range\");\n         }\n         return nDebit;\n     }\n@@ -360,7 +360,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         {\n             nCredit += GetCredit(txout, filter);\n             if (!MoneyRange(nCredit))\n-                throw std::runtime_error(\"CWallet::GetCredit() : value out of range\");\n+                throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n         }\n         return nCredit;\n     }\n@@ -371,7 +371,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         {\n             nChange += GetChange(txout);\n             if (!MoneyRange(nChange))\n-                throw std::runtime_error(\"CWallet::GetChange() : value out of range\");\n+                throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n         }\n         return nChange;\n     }\n@@ -804,7 +804,7 @@ class CWalletTx : public CMerkleTx\n                 const CTxOut &txout = vout[i];\n                 nCredit += pwallet->GetCredit(txout, ISMINE_SPENDABLE);\n                 if (!MoneyRange(nCredit))\n-                    throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n+                    throw std::runtime_error(\"CWalletTx::GetAvailableCredit(): value out of range\");\n             }\n         }\n \n@@ -847,7 +847,7 @@ class CWalletTx : public CMerkleTx\n                 const CTxOut &txout = vout[i];\n                 nCredit += pwallet->GetCredit(txout, ISMINE_WATCH_ONLY);\n                 if (!MoneyRange(nCredit))\n-                    throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n+                    throw std::runtime_error(\"CWalletTx::GetAvailableCredit(): value out of range\");\n             }\n         }\n "
      },
      {
        "sha": "b2daf036ff7308f6cc3df1282e2d08b58c35bcbf",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -210,7 +210,7 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin\n \n     Dbc* pcursor = GetCursor();\n     if (!pcursor)\n-        throw runtime_error(\"CWalletDB::ListAccountCreditDebit() : cannot create DB cursor\");\n+        throw runtime_error(\"CWalletDB::ListAccountCreditDebit(): cannot create DB cursor\");\n     unsigned int fFlags = DB_SET_RANGE;\n     while (true)\n     {\n@@ -226,7 +226,7 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin\n         else if (ret != 0)\n         {\n             pcursor->close();\n-            throw runtime_error(\"CWalletDB::ListAccountCreditDebit() : error scanning DB\");\n+            throw runtime_error(\"CWalletDB::ListAccountCreditDebit(): error scanning DB\");\n         }\n \n         // Unserialize"
      }
    ]
  },
  {
    "sha": "f4b2078f721887b8b913464e197f6eaae9086938",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNGIyMDc4ZjcyMTg4N2I4YjkxMzQ2NGUxOTdmNmVhYWU5MDg2OTM4",
    "commit": {
      "author": {
        "name": "Shaul Kfir",
        "email": "shaul.kfir@gmail.com",
        "date": "2015-02-02T17:30:56Z"
      },
      "committer": {
        "name": "Shaul Kfir",
        "email": "shaul.kfir@gmail.com",
        "date": "2015-02-02T19:36:00Z"
      },
      "message": "Replace difficulty readjustment blocks with Interval()",
      "tree": {
        "sha": "77f25a424cb67035c6f12f40920b74b98d989a62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77f25a424cb67035c6f12f40920b74b98d989a62"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4b2078f721887b8b913464e197f6eaae9086938",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4b2078f721887b8b913464e197f6eaae9086938",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f4b2078f721887b8b913464e197f6eaae9086938",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4b2078f721887b8b913464e197f6eaae9086938/comments",
    "author": {
      "login": "shaulkf",
      "id": 4781551,
      "node_id": "MDQ6VXNlcjQ3ODE1NTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4781551?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shaulkf",
      "html_url": "https://github.com/shaulkf",
      "followers_url": "https://api.github.com/users/shaulkf/followers",
      "following_url": "https://api.github.com/users/shaulkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/shaulkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shaulkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shaulkf/subscriptions",
      "organizations_url": "https://api.github.com/users/shaulkf/orgs",
      "repos_url": "https://api.github.com/users/shaulkf/repos",
      "events_url": "https://api.github.com/users/shaulkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shaulkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "shaulkf",
      "id": 4781551,
      "node_id": "MDQ6VXNlcjQ3ODE1NTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4781551?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shaulkf",
      "html_url": "https://github.com/shaulkf",
      "followers_url": "https://api.github.com/users/shaulkf/followers",
      "following_url": "https://api.github.com/users/shaulkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/shaulkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shaulkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shaulkf/subscriptions",
      "organizations_url": "https://api.github.com/users/shaulkf/orgs",
      "repos_url": "https://api.github.com/users/shaulkf/repos",
      "events_url": "https://api.github.com/users/shaulkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shaulkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a62649731fb1babaedff10b7c0baec4c50c90d60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a62649731fb1babaedff10b7c0baec4c50c90d60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a62649731fb1babaedff10b7c0baec4c50c90d60"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f1c4016575ebc0ca7f92d4b3daad893fc33164a3",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b2078f721887b8b913464e197f6eaae9086938/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b2078f721887b8b913464e197f6eaae9086938/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=f4b2078f721887b8b913464e197f6eaae9086938",
        "patch": "@@ -44,7 +44,7 @@ Value GetNetworkHashPS(int lookup, int height) {\n \n     // If lookup is -1, then use blocks since last difficulty change.\n     if (lookup <= 0)\n-        lookup = pb->nHeight % 2016 + 1;\n+        lookup = pb->nHeight % Params().Interval() + 1;\n \n     // If lookup is larger than chain, then set it to chain length.\n     if (lookup > pb->nHeight)"
      }
    ]
  },
  {
    "sha": "858809a33e4f690c4ad213f44a6c4465fc2ef025",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTg4MDlhMzNlNGY2OTBjNGFkMjEzZjQ0YTZjNDQ2NWZjMmVmMDI1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-27T13:28:45Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-03T04:19:12Z"
      },
      "message": "Use separate SignatureChecker for CMutableTransaction",
      "tree": {
        "sha": "a7b1dad512fb2040431a92f50b2131c0a872d088",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7b1dad512fb2040431a92f50b2131c0a872d088"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/858809a33e4f690c4ad213f44a6c4465fc2ef025",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/858809a33e4f690c4ad213f44a6c4465fc2ef025",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/858809a33e4f690c4ad213f44a6c4465fc2ef025",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/858809a33e4f690c4ad213f44a6c4465fc2ef025/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a62649731fb1babaedff10b7c0baec4c50c90d60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a62649731fb1babaedff10b7c0baec4c50c90d60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a62649731fb1babaedff10b7c0baec4c50c90d60"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 49,
      "deletions": 39
    },
    "files": [
      {
        "sha": "ff409d741b4a5c442bce7f79bee6e3d9a89b742a",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=858809a33e4f690c4ad213f44a6c4465fc2ef025",
        "patch": "@@ -436,7 +436,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n         BOOST_FOREACH(const CTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(mergedTx, i)))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(mergedTx, i)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "702358cf9406ad97632a264906151f4239ab9581",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=858809a33e4f690c4ad213f44a6c4465fc2ef025",
        "patch": "@@ -1422,7 +1422,7 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n \n bool CScriptCheck::operator()() {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n-    if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingSignatureChecker(*ptxTo, nIn, cacheStore), &error)) {\n+    if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingTransactionSignatureChecker(*ptxTo, nIn, cacheStore), &error)) {\n         return ::error(\"CScriptCheck(): %s:%d VerifySignature failed: %s\", ptxTo->GetHash().ToString(), nIn, ScriptErrorString(error));\n     }\n     return true;"
      },
      {
        "sha": "07ddcc5026beffba30f5bf1ca49d67a3d3ef6809",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=858809a33e4f690c4ad213f44a6c4465fc2ef025",
        "patch": "@@ -688,7 +688,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         BOOST_FOREACH(const CMutableTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(mergedTx, i)))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(mergedTx, i)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "5e1f4735314c8eb2d0c92ef151a6ecc152809849",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=858809a33e4f690c4ad213f44a6c4465fc2ef025",
        "patch": "@@ -78,7 +78,7 @@ int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned i\n          // Regardless of the verification result, the tx did not error.\n          set_error(err, bitcoinconsensus_ERR_OK);\n \n-        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), flags, SignatureChecker(tx, nIn), NULL);\n+        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), flags, TransactionSignatureChecker(tx, nIn), NULL);\n     } catch (const std::exception&) {\n         return set_error(err, bitcoinconsensus_ERR_TX_DESERIALIZE); // Error deserializing\n     }"
      },
      {
        "sha": "b1cf028c54db84dca13a5474a7c8fd6a2c4f1a27",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=858809a33e4f690c4ad213f44a6c4465fc2ef025",
        "patch": "@@ -1058,12 +1058,12 @@ uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsig\n     return ss.GetHash();\n }\n \n-bool SignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const\n+bool TransactionSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const\n {\n     return pubkey.Verify(sighash, vchSig);\n }\n \n-bool SignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vector<unsigned char>& vchPubKey, const CScript& scriptCode) const\n+bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vector<unsigned char>& vchPubKey, const CScript& scriptCode) const\n {\n     CPubKey pubkey(vchPubKey);\n     if (!pubkey.IsValid())"
      },
      {
        "sha": "063a072368818808ececb8dabdc63ba4bcc307be",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=858809a33e4f690c4ad213f44a6c4465fc2ef025",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_SCRIPT_INTERPRETER_H\n \n #include \"script_error.h\"\n+#include \"primitives/transaction.h\"\n \n #include <vector>\n #include <stdint.h>\n@@ -90,7 +91,7 @@ class BaseSignatureChecker\n     virtual ~BaseSignatureChecker() {}\n };\n \n-class SignatureChecker : public BaseSignatureChecker\n+class TransactionSignatureChecker : public BaseSignatureChecker\n {\n private:\n     const CTransaction& txTo;\n@@ -100,10 +101,19 @@ class SignatureChecker : public BaseSignatureChecker\n     virtual bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n \n public:\n-    SignatureChecker(const CTransaction& txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n+    TransactionSignatureChecker(const CTransaction& txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n     bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const;\n };\n \n+class MutableTransactionSignatureChecker : public TransactionSignatureChecker\n+{\n+private:\n+    const CTransaction txTo;\n+\n+public:\n+    MutableTransactionSignatureChecker(const CMutableTransaction& txToIn, unsigned int nInIn) : TransactionSignatureChecker(txTo, nInIn), txTo(txToIn) {}\n+};\n+\n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* error = NULL);\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* error = NULL);\n "
      },
      {
        "sha": "099b4ad0e315d13b506960a485bc63899bf56a0b",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=858809a33e4f690c4ad213f44a6c4465fc2ef025",
        "patch": "@@ -74,14 +74,14 @@ class CSignatureCache\n \n }\n \n-bool CachingSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const\n+bool CachingTransactionSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const\n {\n     static CSignatureCache signatureCache;\n \n     if (signatureCache.Get(sighash, vchSig, pubkey))\n         return true;\n \n-    if (!SignatureChecker::VerifySignature(vchSig, pubkey, sighash))\n+    if (!TransactionSignatureChecker::VerifySignature(vchSig, pubkey, sighash))\n         return false;\n \n     if (store)"
      },
      {
        "sha": "6c5bba2c0126b61c82bd2908dec9572a5b602181",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=858809a33e4f690c4ad213f44a6c4465fc2ef025",
        "patch": "@@ -12,13 +12,13 @@\n \n class CPubKey;\n \n-class CachingSignatureChecker : public SignatureChecker\n+class CachingTransactionSignatureChecker : public TransactionSignatureChecker\n {\n private:\n     bool store;\n \n public:\n-    CachingSignatureChecker(const CTransaction& txToIn, unsigned int nInIn, bool storeIn=true) : SignatureChecker(txToIn, nInIn), store(storeIn) {}\n+    CachingTransactionSignatureChecker(const CTransaction& txToIn, unsigned int nInIn, bool storeIn=true) : TransactionSignatureChecker(txToIn, nInIn), store(storeIn) {}\n \n     bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n };"
      },
      {
        "sha": "d76466b7036069fd48e60325275f62a43e6cf6e7",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=858809a33e4f690c4ad213f44a6c4465fc2ef025",
        "patch": "@@ -123,7 +123,7 @@ bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutabl\n     }\n \n     // Test solution\n-    return VerifyScript(txin.scriptSig, fromPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(txTo, nIn));\n+    return VerifyScript(txin.scriptSig, fromPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(txTo, nIn));\n }\n \n bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n@@ -174,7 +174,7 @@ static CScript CombineMultisig(const CScript& scriptPubKey, const CTransaction&\n             if (sigs.count(pubkey))\n                 continue; // Already got a sig for this pubkey\n \n-            if (SignatureChecker(txTo, nIn).CheckSig(sig, pubkey, scriptPubKey))\n+            if (TransactionSignatureChecker(txTo, nIn).CheckSig(sig, pubkey, scriptPubKey))\n             {\n                 sigs[pubkey] = sig;\n                 break;"
      },
      {
        "sha": "dcc8bf887cb3acb960ec6787592f695aee757d4f",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=858809a33e4f690c4ad213f44a6c4465fc2ef025",
        "patch": "@@ -82,20 +82,20 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     keys.assign(1,key[0]);\n     keys.push_back(key[1]);\n     s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-    BOOST_CHECK(VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0), &err));\n+    BOOST_CHECK(VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(txTo[0], 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     for (int i = 0; i < 4; i++)\n     {\n         keys.assign(1,key[i]);\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0), &err), strprintf(\"a&b 1: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(txTo[0], 0), &err), strprintf(\"a&b 1: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n \n         keys.assign(1,key[1]);\n         keys.push_back(key[i]);\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0), &err), strprintf(\"a&b 2: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(txTo[0], 0), &err), strprintf(\"a&b 2: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n     }\n \n@@ -106,18 +106,18 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n         s = sign_multisig(a_or_b, keys, txTo[1], 0);\n         if (i == 0 || i == 1)\n         {\n-            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n             BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n         }\n         else\n         {\n-            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n             BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n         }\n     }\n     s.clear();\n     s << OP_0 << OP_1;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0), &err));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(txTo[1], 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_SIG_DER, ScriptErrorString(err));\n \n \n@@ -129,12 +129,12 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n             s = sign_multisig(escrow, keys, txTo[2], 0);\n             if (i < j && i < 3 && j < 3)\n             {\n-                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, flags, SignatureChecker(txTo[2], 0), &err), strprintf(\"escrow 1: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, flags, MutableTransactionSignatureChecker(txTo[2], 0), &err), strprintf(\"escrow 1: %d %d\", i, j));\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n             else\n             {\n-                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, flags, SignatureChecker(txTo[2], 0), &err), strprintf(\"escrow 2: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, flags, MutableTransactionSignatureChecker(txTo[2], 0), &err), strprintf(\"escrow 2: %d %d\", i, j));\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n             }\n         }"
      },
      {
        "sha": "6ec301ce40c933884859d1acab35edd5515c227c",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=858809a33e4f690c4ad213f44a6c4465fc2ef025",
        "patch": "@@ -43,7 +43,7 @@ Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict, Scri\n     txTo.vin[0].scriptSig = scriptSig;\n     txTo.vout[0].nValue = 1;\n \n-    return VerifyScript(scriptSig, scriptPubKey, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, SignatureChecker(txTo, 0), &err);\n+    return VerifyScript(scriptSig, scriptPubKey, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, MutableTransactionSignatureChecker(txTo, 0), &err);\n }\n \n "
      },
      {
        "sha": "6bbc3e41c1032ce319561c8eff72fbf3bf7f41a8",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=858809a33e4f690c4ad213f44a6c4465fc2ef025",
        "patch": "@@ -93,7 +93,7 @@ void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, bo\n     ScriptError err;\n     CMutableTransaction tx = BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey));\n     CMutableTransaction tx2 = tx;\n-    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, flags, SignatureChecker(tx, 0), &err) == expect, message);\n+    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, flags, MutableTransactionSignatureChecker(tx, 0), &err) == expect, message);\n     BOOST_CHECK_MESSAGE(expect == (err == SCRIPT_ERR_OK), std::string(ScriptErrorString(err)) + \": \" + message);\n #if defined(HAVE_CONSENSUS_LIB)\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n@@ -682,18 +682,18 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     CMutableTransaction txTo12 = BuildSpendingTransaction(CScript(), txFrom12);\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, flags, SignatureChecker(txTo12, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n     txTo12.vout[0].nValue = 2;\n-    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, flags, SignatureChecker(txTo12, 0), &err));\n+    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     CScript goodsig2 = sign_multisig(scriptPubKey12, key2, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, flags, SignatureChecker(txTo12, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, flags, MutableTransactionSignatureChecker(txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     CScript badsig1 = sign_multisig(scriptPubKey12, key3, txTo12);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, flags, SignatureChecker(txTo12, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n }\n \n@@ -715,54 +715,54 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     std::vector<CKey> keys;\n     keys.push_back(key1); keys.push_back(key2);\n     CScript goodsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key3);\n     CScript goodsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key3);\n     CScript goodsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key2); // Can't re-use sig\n     CScript badsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key1); // sigs must be in correct order\n     CScript badsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key3); keys.push_back(key2); // sigs must be in correct order\n     CScript badsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key4); keys.push_back(key2); // sigs must match pubkeys\n     CScript badsig4 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key4); // sigs must match pubkeys\n     CScript badsig5 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear(); // Must have signatures\n     CScript badsig6 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n }    \n "
      },
      {
        "sha": "04a79caf02083a84be2f67c5260307333d4ccc31",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=858809a33e4f690c4ad213f44a6c4465fc2ef025",
        "patch": "@@ -145,7 +145,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                                 verify_flags, SignatureChecker(tx, i), &err),\n+                                                 verify_flags, TransactionSignatureChecker(tx, i), &err),\n                                     strTest);\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n@@ -220,7 +220,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                      verify_flags, SignatureChecker(tx, i), &err);\n+                                      verify_flags, TransactionSignatureChecker(tx, i), &err);\n             }\n             BOOST_CHECK_MESSAGE(!fValid, strTest);\n             BOOST_CHECK_MESSAGE(err != SCRIPT_ERR_OK, ScriptErrorString(err));"
      }
    ]
  },
  {
    "sha": "9fddceda44fb5592be179d783f0e5ac616c51c0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZmRkY2VkYTQ0ZmI1NTkyYmUxNzlkNzgzZjBlNWFjNjE2YzUxYzBk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-27T14:01:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-03T04:19:46Z"
      },
      "message": "Avoid storing a reference passed to SignatureChecker constructors",
      "tree": {
        "sha": "e5fbeb4aa5f3fcc6109911b61156e1b1adbcfff2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5fbeb4aa5f3fcc6109911b61156e1b1adbcfff2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fddceda44fb5592be179d783f0e5ac616c51c0d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fddceda44fb5592be179d783f0e5ac616c51c0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9fddceda44fb5592be179d783f0e5ac616c51c0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fddceda44fb5592be179d783f0e5ac616c51c0d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "858809a33e4f690c4ad213f44a6c4465fc2ef025",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/858809a33e4f690c4ad213f44a6c4465fc2ef025",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/858809a33e4f690c4ad213f44a6c4465fc2ef025"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 36,
      "deletions": 36
    },
    "files": [
      {
        "sha": "c1622cf5d3e60f31a4c8ca6d09c39d2fe4090014",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=9fddceda44fb5592be179d783f0e5ac616c51c0d",
        "patch": "@@ -436,7 +436,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n         BOOST_FOREACH(const CTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(mergedTx, i)))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "57b44baac5d989421e59949c6fa4e6e7ad094066",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9fddceda44fb5592be179d783f0e5ac616c51c0d",
        "patch": "@@ -1422,7 +1422,7 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n \n bool CScriptCheck::operator()() {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n-    if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingTransactionSignatureChecker(*ptxTo, nIn, cacheStore), &error)) {\n+    if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, cacheStore), &error)) {\n         return ::error(\"CScriptCheck(): %s:%d VerifySignature failed: %s\", ptxTo->GetHash().ToString(), nIn, ScriptErrorString(error));\n     }\n     return true;"
      },
      {
        "sha": "a3b0e47d00f39b68d359ec01a7878083f10cc3d5",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=9fddceda44fb5592be179d783f0e5ac616c51c0d",
        "patch": "@@ -688,7 +688,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         BOOST_FOREACH(const CMutableTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(mergedTx, i)))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "b0d5faaf777f359c8289fd4cc2dcd42a1826bda3",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=9fddceda44fb5592be179d783f0e5ac616c51c0d",
        "patch": "@@ -78,7 +78,7 @@ int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned i\n          // Regardless of the verification result, the tx did not error.\n          set_error(err, bitcoinconsensus_ERR_OK);\n \n-        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), flags, TransactionSignatureChecker(tx, nIn), NULL);\n+        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), flags, TransactionSignatureChecker(&tx, nIn), NULL);\n     } catch (const std::exception&) {\n         return set_error(err, bitcoinconsensus_ERR_TX_DESERIALIZE); // Error deserializing\n     }"
      },
      {
        "sha": "af7c641c05f3e14192ce2ef8cfb76a2a78a4a816",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=9fddceda44fb5592be179d783f0e5ac616c51c0d",
        "patch": "@@ -1076,7 +1076,7 @@ bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn\n     int nHashType = vchSig.back();\n     vchSig.pop_back();\n \n-    uint256 sighash = SignatureHash(scriptCode, txTo, nIn, nHashType);\n+    uint256 sighash = SignatureHash(scriptCode, *txTo, nIn, nHashType);\n \n     if (!VerifySignature(vchSig, pubkey, sighash))\n         return false;"
      },
      {
        "sha": "fc64438f6873bc005a4688f5b231c5ebb9499b69",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=9fddceda44fb5592be179d783f0e5ac616c51c0d",
        "patch": "@@ -94,14 +94,14 @@ class BaseSignatureChecker\n class TransactionSignatureChecker : public BaseSignatureChecker\n {\n private:\n-    const CTransaction& txTo;\n+    const CTransaction* txTo;\n     unsigned int nIn;\n \n protected:\n     virtual bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n \n public:\n-    TransactionSignatureChecker(const CTransaction& txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n+    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n     bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const;\n };\n \n@@ -111,7 +111,7 @@ class MutableTransactionSignatureChecker : public TransactionSignatureChecker\n     const CTransaction txTo;\n \n public:\n-    MutableTransactionSignatureChecker(const CMutableTransaction& txToIn, unsigned int nInIn) : TransactionSignatureChecker(txTo, nInIn), txTo(txToIn) {}\n+    MutableTransactionSignatureChecker(const CMutableTransaction* txToIn, unsigned int nInIn) : TransactionSignatureChecker(&txTo, nInIn), txTo(*txToIn) {}\n };\n \n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* error = NULL);"
      },
      {
        "sha": "b299038daa34105541e006ca83492cb515db2ad2",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=9fddceda44fb5592be179d783f0e5ac616c51c0d",
        "patch": "@@ -18,7 +18,7 @@ class CachingTransactionSignatureChecker : public TransactionSignatureChecker\n     bool store;\n \n public:\n-    CachingTransactionSignatureChecker(const CTransaction& txToIn, unsigned int nInIn, bool storeIn=true) : TransactionSignatureChecker(txToIn, nInIn), store(storeIn) {}\n+    CachingTransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, bool storeIn=true) : TransactionSignatureChecker(txToIn, nInIn), store(storeIn) {}\n \n     bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n };"
      },
      {
        "sha": "14119f7e2cc812c4c96d057544fb7a7c8150f1b7",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=9fddceda44fb5592be179d783f0e5ac616c51c0d",
        "patch": "@@ -123,7 +123,7 @@ bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutabl\n     }\n \n     // Test solution\n-    return VerifyScript(txin.scriptSig, fromPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(txTo, nIn));\n+    return VerifyScript(txin.scriptSig, fromPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&txTo, nIn));\n }\n \n bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n@@ -174,7 +174,7 @@ static CScript CombineMultisig(const CScript& scriptPubKey, const CTransaction&\n             if (sigs.count(pubkey))\n                 continue; // Already got a sig for this pubkey\n \n-            if (TransactionSignatureChecker(txTo, nIn).CheckSig(sig, pubkey, scriptPubKey))\n+            if (TransactionSignatureChecker(&txTo, nIn).CheckSig(sig, pubkey, scriptPubKey))\n             {\n                 sigs[pubkey] = sig;\n                 break;"
      },
      {
        "sha": "2168a5fef1f9fe64d6b8d2f7204a5c185b1bc8b2",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=9fddceda44fb5592be179d783f0e5ac616c51c0d",
        "patch": "@@ -82,20 +82,20 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     keys.assign(1,key[0]);\n     keys.push_back(key[1]);\n     s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-    BOOST_CHECK(VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(txTo[0], 0), &err));\n+    BOOST_CHECK(VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     for (int i = 0; i < 4; i++)\n     {\n         keys.assign(1,key[i]);\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(txTo[0], 0), &err), strprintf(\"a&b 1: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err), strprintf(\"a&b 1: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n \n         keys.assign(1,key[1]);\n         keys.push_back(key[i]);\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(txTo[0], 0), &err), strprintf(\"a&b 2: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err), strprintf(\"a&b 2: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n     }\n \n@@ -106,18 +106,18 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n         s = sign_multisig(a_or_b, keys, txTo[1], 0);\n         if (i == 0 || i == 1)\n         {\n-            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n             BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n         }\n         else\n         {\n-            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n             BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n         }\n     }\n     s.clear();\n     s << OP_0 << OP_1;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(txTo[1], 0), &err));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_SIG_DER, ScriptErrorString(err));\n \n \n@@ -129,12 +129,12 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n             s = sign_multisig(escrow, keys, txTo[2], 0);\n             if (i < j && i < 3 && j < 3)\n             {\n-                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, flags, MutableTransactionSignatureChecker(txTo[2], 0), &err), strprintf(\"escrow 1: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, flags, MutableTransactionSignatureChecker(&txTo[2], 0), &err), strprintf(\"escrow 1: %d %d\", i, j));\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n             else\n             {\n-                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, flags, MutableTransactionSignatureChecker(txTo[2], 0), &err), strprintf(\"escrow 2: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, flags, MutableTransactionSignatureChecker(&txTo[2], 0), &err), strprintf(\"escrow 2: %d %d\", i, j));\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n             }\n         }"
      },
      {
        "sha": "94f2ce1a29affb880f9114a8003e5e16cbd60f45",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=9fddceda44fb5592be179d783f0e5ac616c51c0d",
        "patch": "@@ -43,7 +43,7 @@ Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict, Scri\n     txTo.vin[0].scriptSig = scriptSig;\n     txTo.vout[0].nValue = 1;\n \n-    return VerifyScript(scriptSig, scriptPubKey, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, MutableTransactionSignatureChecker(txTo, 0), &err);\n+    return VerifyScript(scriptSig, scriptPubKey, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, MutableTransactionSignatureChecker(&txTo, 0), &err);\n }\n \n "
      },
      {
        "sha": "4858cf9e53158c8eb3494bcae2c64794d2d35c07",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=9fddceda44fb5592be179d783f0e5ac616c51c0d",
        "patch": "@@ -93,7 +93,7 @@ void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, bo\n     ScriptError err;\n     CMutableTransaction tx = BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey));\n     CMutableTransaction tx2 = tx;\n-    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, flags, MutableTransactionSignatureChecker(tx, 0), &err) == expect, message);\n+    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, flags, MutableTransactionSignatureChecker(&tx, 0), &err) == expect, message);\n     BOOST_CHECK_MESSAGE(expect == (err == SCRIPT_ERR_OK), std::string(ScriptErrorString(err)) + \": \" + message);\n #if defined(HAVE_CONSENSUS_LIB)\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n@@ -682,18 +682,18 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     CMutableTransaction txTo12 = BuildSpendingTransaction(CScript(), txFrom12);\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(txTo12, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n     txTo12.vout[0].nValue = 2;\n-    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(txTo12, 0), &err));\n+    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     CScript goodsig2 = sign_multisig(scriptPubKey12, key2, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, flags, MutableTransactionSignatureChecker(txTo12, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     CScript badsig1 = sign_multisig(scriptPubKey12, key3, txTo12);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(txTo12, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n }\n \n@@ -715,54 +715,54 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     std::vector<CKey> keys;\n     keys.push_back(key1); keys.push_back(key2);\n     CScript goodsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key3);\n     CScript goodsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key3);\n     CScript goodsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key2); // Can't re-use sig\n     CScript badsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key1); // sigs must be in correct order\n     CScript badsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key3); keys.push_back(key2); // sigs must be in correct order\n     CScript badsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key4); keys.push_back(key2); // sigs must match pubkeys\n     CScript badsig4 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key4); // sigs must match pubkeys\n     CScript badsig5 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear(); // Must have signatures\n     CScript badsig6 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n }    \n "
      },
      {
        "sha": "5a109cabca860313f75f714f9fc7f58a46a2ce59",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=9fddceda44fb5592be179d783f0e5ac616c51c0d",
        "patch": "@@ -145,7 +145,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                                 verify_flags, TransactionSignatureChecker(tx, i), &err),\n+                                                 verify_flags, TransactionSignatureChecker(&tx, i), &err),\n                                     strTest);\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n@@ -220,7 +220,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                      verify_flags, TransactionSignatureChecker(tx, i), &err);\n+                                      verify_flags, TransactionSignatureChecker(&tx, i), &err);\n             }\n             BOOST_CHECK_MESSAGE(!fValid, strTest);\n             BOOST_CHECK_MESSAGE(err != SCRIPT_ERR_OK, ScriptErrorString(err));"
      }
    ]
  },
  {
    "sha": "f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDI1MDUwNTQ2NjQ0YTM2YjBiOGUwZWIyZjY5MzRhM2UwZjZmODBm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-03T07:15:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-03T07:26:08Z"
      },
      "message": "Merge pull request #5719\n\n9fddced Avoid storing a reference passed to SignatureChecker constructors (Pieter Wuille)\n858809a Use separate SignatureChecker for CMutableTransaction (Pieter Wuille)",
      "tree": {
        "sha": "e5fbeb4aa5f3fcc6109911b61156e1b1adbcfff2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5fbeb4aa5f3fcc6109911b61156e1b1adbcfff2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU0HgQAAoJEHSBCwEjRsmm88kH/jhKlmQXFb+xOpa4Amio8e2d\nl7gYyGTQlzEkgELgw956WZckkD5y7thq9yDmCqhjlxt4XdDkzb+h8MNGk1QGOfOa\nuq7E5qXNIRXoweBubksx03KDhmtU/28KPLlbAIcW/BCaVD2OXcEgnM4Ea/Gn/Ybt\nuppsfNr478YGMHgW/VjBAMz4AMV2SSdeaNbBKjc8VGO1vEDk5hu9+9M5L6pizYyo\nzoklVSRSMIAgtDtIMvZKB2A6rb9etFGyvDQ8DLWVR8ZFptgXeO0iwOSQX1uCblyS\nKHGxkpFLQUZ1C+McklVT/NMP1WQ01M2M2gTPZ0oscH06gDK8Hn2/7cHyHad3OM8=\n=xFKm\n-----END PGP SIGNATURE-----",
        "payload": "tree e5fbeb4aa5f3fcc6109911b61156e1b1adbcfff2\nparent a62649731fb1babaedff10b7c0baec4c50c90d60\nparent 9fddceda44fb5592be179d783f0e5ac616c51c0d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422947751 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422948368 +0100\n\nMerge pull request #5719\n\n9fddced Avoid storing a reference passed to SignatureChecker constructors (Pieter Wuille)\n858809a Use separate SignatureChecker for CMutableTransaction (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a62649731fb1babaedff10b7c0baec4c50c90d60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a62649731fb1babaedff10b7c0baec4c50c90d60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a62649731fb1babaedff10b7c0baec4c50c90d60"
      },
      {
        "sha": "9fddceda44fb5592be179d783f0e5ac616c51c0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fddceda44fb5592be179d783f0e5ac616c51c0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9fddceda44fb5592be179d783f0e5ac616c51c0d"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 51,
      "deletions": 41
    },
    "files": [
      {
        "sha": "c1622cf5d3e60f31a4c8ca6d09c39d2fe4090014",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
        "patch": "@@ -436,7 +436,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n         BOOST_FOREACH(const CTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(mergedTx, i)))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "57b44baac5d989421e59949c6fa4e6e7ad094066",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
        "patch": "@@ -1422,7 +1422,7 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n \n bool CScriptCheck::operator()() {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n-    if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingSignatureChecker(*ptxTo, nIn, cacheStore), &error)) {\n+    if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, cacheStore), &error)) {\n         return ::error(\"CScriptCheck(): %s:%d VerifySignature failed: %s\", ptxTo->GetHash().ToString(), nIn, ScriptErrorString(error));\n     }\n     return true;"
      },
      {
        "sha": "a3b0e47d00f39b68d359ec01a7878083f10cc3d5",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
        "patch": "@@ -688,7 +688,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         BOOST_FOREACH(const CMutableTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(mergedTx, i)))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "b0d5faaf777f359c8289fd4cc2dcd42a1826bda3",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
        "patch": "@@ -78,7 +78,7 @@ int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned i\n          // Regardless of the verification result, the tx did not error.\n          set_error(err, bitcoinconsensus_ERR_OK);\n \n-        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), flags, SignatureChecker(tx, nIn), NULL);\n+        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), flags, TransactionSignatureChecker(&tx, nIn), NULL);\n     } catch (const std::exception&) {\n         return set_error(err, bitcoinconsensus_ERR_TX_DESERIALIZE); // Error deserializing\n     }"
      },
      {
        "sha": "af7c641c05f3e14192ce2ef8cfb76a2a78a4a816",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
        "patch": "@@ -1058,12 +1058,12 @@ uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsig\n     return ss.GetHash();\n }\n \n-bool SignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const\n+bool TransactionSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const\n {\n     return pubkey.Verify(sighash, vchSig);\n }\n \n-bool SignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vector<unsigned char>& vchPubKey, const CScript& scriptCode) const\n+bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vector<unsigned char>& vchPubKey, const CScript& scriptCode) const\n {\n     CPubKey pubkey(vchPubKey);\n     if (!pubkey.IsValid())\n@@ -1076,7 +1076,7 @@ bool SignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vec\n     int nHashType = vchSig.back();\n     vchSig.pop_back();\n \n-    uint256 sighash = SignatureHash(scriptCode, txTo, nIn, nHashType);\n+    uint256 sighash = SignatureHash(scriptCode, *txTo, nIn, nHashType);\n \n     if (!VerifySignature(vchSig, pubkey, sighash))\n         return false;"
      },
      {
        "sha": "fc64438f6873bc005a4688f5b231c5ebb9499b69",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_SCRIPT_INTERPRETER_H\n \n #include \"script_error.h\"\n+#include \"primitives/transaction.h\"\n \n #include <vector>\n #include <stdint.h>\n@@ -90,20 +91,29 @@ class BaseSignatureChecker\n     virtual ~BaseSignatureChecker() {}\n };\n \n-class SignatureChecker : public BaseSignatureChecker\n+class TransactionSignatureChecker : public BaseSignatureChecker\n {\n private:\n-    const CTransaction& txTo;\n+    const CTransaction* txTo;\n     unsigned int nIn;\n \n protected:\n     virtual bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n \n public:\n-    SignatureChecker(const CTransaction& txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n+    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n     bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const;\n };\n \n+class MutableTransactionSignatureChecker : public TransactionSignatureChecker\n+{\n+private:\n+    const CTransaction txTo;\n+\n+public:\n+    MutableTransactionSignatureChecker(const CMutableTransaction* txToIn, unsigned int nInIn) : TransactionSignatureChecker(&txTo, nInIn), txTo(*txToIn) {}\n+};\n+\n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* error = NULL);\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* error = NULL);\n "
      },
      {
        "sha": "099b4ad0e315d13b506960a485bc63899bf56a0b",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
        "patch": "@@ -74,14 +74,14 @@ class CSignatureCache\n \n }\n \n-bool CachingSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const\n+bool CachingTransactionSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const\n {\n     static CSignatureCache signatureCache;\n \n     if (signatureCache.Get(sighash, vchSig, pubkey))\n         return true;\n \n-    if (!SignatureChecker::VerifySignature(vchSig, pubkey, sighash))\n+    if (!TransactionSignatureChecker::VerifySignature(vchSig, pubkey, sighash))\n         return false;\n \n     if (store)"
      },
      {
        "sha": "b299038daa34105541e006ca83492cb515db2ad2",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
        "patch": "@@ -12,13 +12,13 @@\n \n class CPubKey;\n \n-class CachingSignatureChecker : public SignatureChecker\n+class CachingTransactionSignatureChecker : public TransactionSignatureChecker\n {\n private:\n     bool store;\n \n public:\n-    CachingSignatureChecker(const CTransaction& txToIn, unsigned int nInIn, bool storeIn=true) : SignatureChecker(txToIn, nInIn), store(storeIn) {}\n+    CachingTransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, bool storeIn=true) : TransactionSignatureChecker(txToIn, nInIn), store(storeIn) {}\n \n     bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n };"
      },
      {
        "sha": "14119f7e2cc812c4c96d057544fb7a7c8150f1b7",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
        "patch": "@@ -123,7 +123,7 @@ bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutabl\n     }\n \n     // Test solution\n-    return VerifyScript(txin.scriptSig, fromPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(txTo, nIn));\n+    return VerifyScript(txin.scriptSig, fromPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&txTo, nIn));\n }\n \n bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n@@ -174,7 +174,7 @@ static CScript CombineMultisig(const CScript& scriptPubKey, const CTransaction&\n             if (sigs.count(pubkey))\n                 continue; // Already got a sig for this pubkey\n \n-            if (SignatureChecker(txTo, nIn).CheckSig(sig, pubkey, scriptPubKey))\n+            if (TransactionSignatureChecker(&txTo, nIn).CheckSig(sig, pubkey, scriptPubKey))\n             {\n                 sigs[pubkey] = sig;\n                 break;"
      },
      {
        "sha": "2168a5fef1f9fe64d6b8d2f7204a5c185b1bc8b2",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
        "patch": "@@ -82,20 +82,20 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     keys.assign(1,key[0]);\n     keys.push_back(key[1]);\n     s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-    BOOST_CHECK(VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0), &err));\n+    BOOST_CHECK(VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     for (int i = 0; i < 4; i++)\n     {\n         keys.assign(1,key[i]);\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0), &err), strprintf(\"a&b 1: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err), strprintf(\"a&b 1: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n \n         keys.assign(1,key[1]);\n         keys.push_back(key[i]);\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0), &err), strprintf(\"a&b 2: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err), strprintf(\"a&b 2: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n     }\n \n@@ -106,18 +106,18 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n         s = sign_multisig(a_or_b, keys, txTo[1], 0);\n         if (i == 0 || i == 1)\n         {\n-            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n             BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n         }\n         else\n         {\n-            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n             BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n         }\n     }\n     s.clear();\n     s << OP_0 << OP_1;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0), &err));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_SIG_DER, ScriptErrorString(err));\n \n \n@@ -129,12 +129,12 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n             s = sign_multisig(escrow, keys, txTo[2], 0);\n             if (i < j && i < 3 && j < 3)\n             {\n-                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, flags, SignatureChecker(txTo[2], 0), &err), strprintf(\"escrow 1: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, flags, MutableTransactionSignatureChecker(&txTo[2], 0), &err), strprintf(\"escrow 1: %d %d\", i, j));\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n             else\n             {\n-                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, flags, SignatureChecker(txTo[2], 0), &err), strprintf(\"escrow 2: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, flags, MutableTransactionSignatureChecker(&txTo[2], 0), &err), strprintf(\"escrow 2: %d %d\", i, j));\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n             }\n         }"
      },
      {
        "sha": "94f2ce1a29affb880f9114a8003e5e16cbd60f45",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
        "patch": "@@ -43,7 +43,7 @@ Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict, Scri\n     txTo.vin[0].scriptSig = scriptSig;\n     txTo.vout[0].nValue = 1;\n \n-    return VerifyScript(scriptSig, scriptPubKey, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, SignatureChecker(txTo, 0), &err);\n+    return VerifyScript(scriptSig, scriptPubKey, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, MutableTransactionSignatureChecker(&txTo, 0), &err);\n }\n \n "
      },
      {
        "sha": "4858cf9e53158c8eb3494bcae2c64794d2d35c07",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
        "patch": "@@ -93,7 +93,7 @@ void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, bo\n     ScriptError err;\n     CMutableTransaction tx = BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey));\n     CMutableTransaction tx2 = tx;\n-    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, flags, SignatureChecker(tx, 0), &err) == expect, message);\n+    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, flags, MutableTransactionSignatureChecker(&tx, 0), &err) == expect, message);\n     BOOST_CHECK_MESSAGE(expect == (err == SCRIPT_ERR_OK), std::string(ScriptErrorString(err)) + \": \" + message);\n #if defined(HAVE_CONSENSUS_LIB)\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n@@ -682,18 +682,18 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     CMutableTransaction txTo12 = BuildSpendingTransaction(CScript(), txFrom12);\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, flags, SignatureChecker(txTo12, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n     txTo12.vout[0].nValue = 2;\n-    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, flags, SignatureChecker(txTo12, 0), &err));\n+    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     CScript goodsig2 = sign_multisig(scriptPubKey12, key2, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, flags, SignatureChecker(txTo12, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     CScript badsig1 = sign_multisig(scriptPubKey12, key3, txTo12);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, flags, SignatureChecker(txTo12, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n }\n \n@@ -715,54 +715,54 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     std::vector<CKey> keys;\n     keys.push_back(key1); keys.push_back(key2);\n     CScript goodsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key3);\n     CScript goodsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key3);\n     CScript goodsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key2); // Can't re-use sig\n     CScript badsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key1); // sigs must be in correct order\n     CScript badsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key3); keys.push_back(key2); // sigs must be in correct order\n     CScript badsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key4); keys.push_back(key2); // sigs must match pubkeys\n     CScript badsig4 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key4); // sigs must match pubkeys\n     CScript badsig5 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear(); // Must have signatures\n     CScript badsig6 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n }    \n "
      },
      {
        "sha": "5a109cabca860313f75f714f9fc7f58a46a2ce59",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
        "patch": "@@ -145,7 +145,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                                 verify_flags, SignatureChecker(tx, i), &err),\n+                                                 verify_flags, TransactionSignatureChecker(&tx, i), &err),\n                                     strTest);\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n@@ -220,7 +220,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                      verify_flags, SignatureChecker(tx, i), &err);\n+                                      verify_flags, TransactionSignatureChecker(&tx, i), &err);\n             }\n             BOOST_CHECK_MESSAGE(!fValid, strTest);\n             BOOST_CHECK_MESSAGE(err != SCRIPT_ERR_OK, ScriptErrorString(err));"
      }
    ]
  },
  {
    "sha": "9c4a5a506787130a17f59277ca140bcfdd263e36",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzRhNWE1MDY3ODcxMzBhMTdmNTkyNzdjYTE0MGJjZmRkMjYzZTM2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-03T08:47:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-03T08:49:26Z"
      },
      "message": "Merge pull request #5729\n\nfdf80ea [Qt] allow unit changes for read-only BitcoinAmountField (Philip Kaufmann)",
      "tree": {
        "sha": "4c1e813e942164f961fe5ca75942e226ce4c6947",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c1e813e942164f961fe5ca75942e226ce4c6947"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c4a5a506787130a17f59277ca140bcfdd263e36",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEbBAABCgAGBQJU0IuWAAoJEHSBCwEjRsmmNa0H9j2AEd97Zm+SymEZoyqnvNJM\nHVJan2ZeZIn3uHoyiGtiImWAtoDjoA5YQXfv6uqmyhgjE6frOCO1h+KHGL1ieNB3\nelMbJgi6Y8jQ0DfFzI7rsyPA2JqrIbJitDAVtFuq4LKGY9GWHkerGPQ+bMt/c0X8\n0nUOeFasHiogEZ3/sRXbH3cKcr1a1gAA3zY2MlIioqqgZomlgu2x+OuXfxUBgJLH\nXMf1g7AS6/yucXELGsQYZybi9k+TeZm97GsF0wGytzr2iDmFFALl+9drG0ZLdvXU\nRmq/yZWZzwkdeTWwMC1z9c9p+Z1MDsAcrU+XIWSRycyypcCYc2PM2HPphqUaTA==\n=igMM\n-----END PGP SIGNATURE-----",
        "payload": "tree 4c1e813e942164f961fe5ca75942e226ce4c6947\nparent f425050546644a36b0b8e0eb2f6934a3e0f6f80f\nparent fdf80ea7b19dde7ddec3baffeb1400fe1ca1c37a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422953276 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422953366 +0100\n\nMerge pull request #5729\n\nfdf80ea [Qt] allow unit changes for read-only BitcoinAmountField (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c4a5a506787130a17f59277ca140bcfdd263e36",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c4a5a506787130a17f59277ca140bcfdd263e36",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c4a5a506787130a17f59277ca140bcfdd263e36/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f425050546644a36b0b8e0eb2f6934a3e0f6f80f"
      },
      {
        "sha": "fdf80ea7b19dde7ddec3baffeb1400fe1ca1c37a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdf80ea7b19dde7ddec3baffeb1400fe1ca1c37a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fdf80ea7b19dde7ddec3baffeb1400fe1ca1c37a"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d31a1e018b2898a5bea2338abd3ad84002040cdb",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c4a5a506787130a17f59277ca140bcfdd263e36/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c4a5a506787130a17f59277ca140bcfdd263e36/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=9c4a5a506787130a17f59277ca140bcfdd263e36",
        "patch": "@@ -278,7 +278,6 @@ void BitcoinAmountField::setValue(const CAmount& value)\n void BitcoinAmountField::setReadOnly(bool fReadOnly)\n {\n     amount->setReadOnly(fReadOnly);\n-    unit->setEnabled(!fReadOnly);\n }\n \n void BitcoinAmountField::unitChanged(int idx)"
      }
    ]
  },
  {
    "sha": "41e6e4caba9899ce7c165b0784461c55c867ee24",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MWU2ZTRjYWJhOTg5OWNlN2MxNjViMDc4NDQ2MWM1NWM4NjdlZTI0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-03T09:34:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-03T09:34:53Z"
      },
      "message": "Merge pull request #5713\n\nbf6cdeb Increase coverage of DERSIG edge cases (Pieter Wuille)\n819bcf9 Add RPC test for DERSIG BIP switchover logic (Pieter Wuille)\n5a47811 BIP66 changeover logic (Pieter Wuille)\n092e9fe Example unit tests from BIP66 (Pieter Wuille)\n80ad135 Change IsDERSignature to BIP66 implementation (Pieter Wuille)",
      "tree": {
        "sha": "04ee66c394416e33cc3e665cea99bc61716976c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04ee66c394416e33cc3e665cea99bc61716976c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41e6e4caba9899ce7c165b0784461c55c867ee24",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU0JY9AAoJEHSBCwEjRsmm1nQIALFpbOb7hTp+NRqA/BV8SOe5\nxp2Gt8HhZaplUnsIF2ZBeDhvzYiz1jZCiM1CkFzilLNjVqNyMJyuIPLl1k0r9FVk\nvIRndI7dgX6mcSuhnOeQEl50cxkFz7AyktlJjrKVg8Pw0NxGiZYGtFAO2p0S0xNF\naqKEoBaTA5cDnZPRWrXxBX9ZQB9JuR9BtubHDkCWWWoRM/JDpTvPjJncfciVqZXi\n/H5JP4Pz2zEpfDJu836xgjT2veonAg5geg8iXpF14PesvtRuuTtxGHLlebW1FrcD\nyWa4m7GEZTZmt8QtasJ2VWve+XJ8yLDwF/hx9eO3WuptRRGQaX4WGhACNU4ZjP4=\n=ztAH\n-----END PGP SIGNATURE-----",
        "payload": "tree 04ee66c394416e33cc3e665cea99bc61716976c4\nparent 9c4a5a506787130a17f59277ca140bcfdd263e36\nparent bf6cdebdc5b750cea6121095dcbbbf720b726bb9\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422956082 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422956093 +0100\n\nMerge pull request #5713\n\nbf6cdeb Increase coverage of DERSIG edge cases (Pieter Wuille)\n819bcf9 Add RPC test for DERSIG BIP switchover logic (Pieter Wuille)\n5a47811 BIP66 changeover logic (Pieter Wuille)\n092e9fe Example unit tests from BIP66 (Pieter Wuille)\n80ad135 Change IsDERSignature to BIP66 implementation (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41e6e4caba9899ce7c165b0784461c55c867ee24",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41e6e4caba9899ce7c165b0784461c55c867ee24",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41e6e4caba9899ce7c165b0784461c55c867ee24/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c4a5a506787130a17f59277ca140bcfdd263e36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c4a5a506787130a17f59277ca140bcfdd263e36",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c4a5a506787130a17f59277ca140bcfdd263e36"
      },
      {
        "sha": "bf6cdebdc5b750cea6121095dcbbbf720b726bb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf6cdebdc5b750cea6121095dcbbbf720b726bb9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf6cdebdc5b750cea6121095dcbbbf720b726bb9"
      }
    ],
    "stats": {
      "total": 469,
      "additions": 405,
      "deletions": 64
    },
    "files": [
      {
        "sha": "9f2cc84601545796b87c6e181acb10e88e829e4f",
        "filename": "qa/rpc-tests/bipdersig.py",
        "status": "added",
        "additions": 90,
        "deletions": 0,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41e6e4caba9899ce7c165b0784461c55c867ee24/qa/rpc-tests/bipdersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41e6e4caba9899ce7c165b0784461c55c867ee24/qa/rpc-tests/bipdersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig.py?ref=41e6e4caba9899ce7c165b0784461c55c867ee24",
        "patch": "@@ -0,0 +1,90 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test the BIP66 changeover logic\n+#\n+\n+from test_framework import BitcoinTestFramework\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+from util import *\n+import os\n+import shutil\n+\n+class BIP66Test(BitcoinTestFramework):\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, []))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-blockversion=2\"]))\n+        self.nodes.append(start_node(2, self.options.tmpdir, [\"-blockversion=3\"]))\n+        connect_nodes(self.nodes[1], 0)\n+        connect_nodes(self.nodes[2], 0)\n+        self.is_network_split = False\n+        self.sync_all()\n+\n+    def run_test(self):\n+        cnt = self.nodes[0].getblockcount()\n+\n+        # Mine some old-version blocks\n+        self.nodes[1].setgenerate(True, 100)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 100):\n+            raise AssertionError(\"Failed to mine 100 version=2 blocks\")\n+\n+        # Mine 750 new-version blocks\n+        for i in xrange(15):\n+            self.nodes[2].setgenerate(True, 50)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 850):\n+            raise AssertionError(\"Failed to mine 750 version=3 blocks\")\n+\n+        # TODO: check that new DERSIG rules are not enforced\n+\n+        # Mine 1 new-version block\n+        self.nodes[2].setgenerate(True, 1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 851):\n+            raise AssertionFailure(\"Failed to mine a version=3 blocks\")\n+\n+        # TODO: check that new DERSIG rules are enforced\n+\n+        # Mine 198 new-version blocks\n+        for i in xrange(2):\n+            self.nodes[2].setgenerate(True, 99)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1049):\n+            raise AssertionError(\"Failed to mine 198 version=3 blocks\")\n+\n+        # Mine 1 old-version block\n+        self.nodes[1].setgenerate(True, 1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1050):\n+            raise AssertionError(\"Failed to mine a version=2 block after 949 version=3 blocks\")\n+\n+        # Mine 1 new-version blocks\n+        self.nodes[2].setgenerate(True, 1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1051):\n+            raise AssertionError(\"Failed to mine a version=3 block\")\n+\n+        # Mine 1 old-version blocks\n+        try:\n+            self.nodes[1].setgenerate(True, 1)\n+            raise AssertionError(\"Succeeded to mine a version=2 block after 950 version=3 blocks\")\n+        except JSONRPCException:\n+            pass\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1051):\n+            raise AssertionError(\"Accepted a version=2 block after 950 version=3 blocks\")\n+\n+        # Mine 1 new-version blocks\n+        self.nodes[2].setgenerate(True, 1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1052):\n+            raise AssertionError(\"Failed to mine a version=3 block\")\n+\n+if __name__ == '__main__':\n+    BIP66Test().main()"
      },
      {
        "sha": "0afcae4b57f22c32b2fb78381142a78723ad45a8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41e6e4caba9899ce7c165b0784461c55c867ee24/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41e6e4caba9899ce7c165b0784461c55c867ee24/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=41e6e4caba9899ce7c165b0784461c55c867ee24",
        "patch": "@@ -1764,6 +1764,11 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n \n+    // Start enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks, when 75% of the network has upgraded:\n+    if (block.nVersion >= 3 && IsSuperMajority(3, pindex->pprev, Params().EnforceBlockUpgradeMajority())) {\n+        flags |= SCRIPT_VERIFY_DERSIG;\n+    }\n+\n     CBlockUndo blockundo;\n \n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n@@ -2601,6 +2606,13 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n                              REJECT_OBSOLETE, \"bad-version\");\n     }\n \n+    // Reject block.nVersion=2 blocks when 95% (75% on testnet) of the network has upgraded:\n+    if (block.nVersion < 3 && IsSuperMajority(3, pindexPrev, Params().RejectBlockOutdatedMajority()))\n+    {\n+        return state.Invalid(error(\"%s : rejected nVersion=2 block\", __func__),\n+                             REJECT_OBSOLETE, \"bad-version\");\n+    }\n+\n     return true;\n }\n "
      },
      {
        "sha": "c7ed6f723a4d35c77eec7fb40e90e92b6f2b531b",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41e6e4caba9899ce7c165b0784461c55c867ee24/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41e6e4caba9899ce7c165b0784461c55c867ee24/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=41e6e4caba9899ce7c165b0784461c55c867ee24",
        "patch": "@@ -24,7 +24,7 @@ class CBlockHeader\n {\n public:\n     // header\n-    static const int32_t CURRENT_VERSION=2;\n+    static const int32_t CURRENT_VERSION=3;\n     int32_t nVersion;\n     uint256 hashPrevBlock;\n     uint256 hashMerkleRoot;"
      },
      {
        "sha": "0320577797873e2b03e50930f4330cc58ec9c692",
        "filename": "src/script/bitcoinconsensus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41e6e4caba9899ce7c165b0784461c55c867ee24/src/script/bitcoinconsensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41e6e4caba9899ce7c165b0784461c55c867ee24/src/script/bitcoinconsensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.h?ref=41e6e4caba9899ce7c165b0784461c55c867ee24",
        "patch": "@@ -46,6 +46,7 @@ enum\n {\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NONE      = 0,\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH      = (1U << 0), // evaluate P2SH (BIP16) subscripts\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG    = (1U << 2), // enforce strict DER (BIP66) compliance\n };\n \n /// Returns 1 if the input nIn of the serialized transaction pointed to by"
      },
      {
        "sha": "84a7432fdbdd3515efb4574c8a74aed4539cc552",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 63,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41e6e4caba9899ce7c165b0784461c55c867ee24/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41e6e4caba9899ce7c165b0784461c55c867ee24/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=41e6e4caba9899ce7c165b0784461c55c867ee24",
        "patch": "@@ -93,76 +93,76 @@ bool static IsCompressedOrUncompressedPubKey(const valtype &vchPubKey) {\n  * in which case a single 0 byte is necessary and even required).\n  * \n  * See https://bitcointalk.org/index.php?topic=8392.msg127623#msg127623\n+ *\n+ * This function is consensus-critical since BIP66.\n  */\n-bool static IsDERSignature(const valtype &vchSig) {\n+bool static IsValidSignatureEncoding(const std::vector<unsigned char> &sig) {\n+    // Format: 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S] [sighash]\n+    // * total-length: 1-byte length descriptor of everything that follows,\n+    //   excluding the sighash byte.\n+    // * R-length: 1-byte length descriptor of the R value that follows.\n+    // * R: arbitrary-length big-endian encoded R value. It must use the shortest\n+    //   possible encoding for a positive integers (which means no null bytes at\n+    //   the start, except a single one when the next byte has its highest bit set).\n+    // * S-length: 1-byte length descriptor of the S value that follows.\n+    // * S: arbitrary-length big-endian encoded S value. The same rules apply.\n+    // * sighash: 1-byte value indicating what data is hashed (not part of the DER\n+    //   signature)\n \n-    if (vchSig.size() < 9) {\n-        //  Non-canonical signature: too short\n-        return false;\n-    }\n-    if (vchSig.size() > 73) {\n-        // Non-canonical signature: too long\n-        return false;\n-    }\n-    if (vchSig[0] != 0x30) {\n-        //  Non-canonical signature: wrong type\n-        return false;\n-    }\n-    if (vchSig[1] != vchSig.size()-3) {\n-        //  Non-canonical signature: wrong length marker\n-        return false;\n-    }\n-    unsigned int nLenR = vchSig[3];\n-    if (5 + nLenR >= vchSig.size()) {\n-        //  Non-canonical signature: S length misplaced\n-        return false;\n-    }\n-    unsigned int nLenS = vchSig[5+nLenR];\n-    if ((unsigned long)(nLenR+nLenS+7) != vchSig.size()) {\n-        //  Non-canonical signature: R+S length mismatch\n-        return false;\n-    }\n+    // Minimum and maximum size constraints.\n+    if (sig.size() < 9) return false;\n+    if (sig.size() > 73) return false;\n \n-    const unsigned char *R = &vchSig[4];\n-    if (R[-2] != 0x02) {\n-        //  Non-canonical signature: R value type mismatch\n-        return false;\n-    }\n-    if (nLenR == 0) {\n-        //  Non-canonical signature: R length is zero\n-        return false;\n-    }\n-    if (R[0] & 0x80) {\n-        //  Non-canonical signature: R value negative\n-        return false;\n-    }\n-    if (nLenR > 1 && (R[0] == 0x00) && !(R[1] & 0x80)) {\n-        //  Non-canonical signature: R value excessively padded\n-        return false;\n-    }\n+    // A signature is of type 0x30 (compound).\n+    if (sig[0] != 0x30) return false;\n+\n+    // Make sure the length covers the entire signature.\n+    if (sig[1] != sig.size() - 3) return false;\n+\n+    // Extract the length of the R element.\n+    unsigned int lenR = sig[3];\n+\n+    // Make sure the length of the S element is still inside the signature.\n+    if (5 + lenR >= sig.size()) return false;\n+\n+    // Extract the length of the S element.\n+    unsigned int lenS = sig[5 + lenR];\n+\n+    // Verify that the length of the signature matches the sum of the length\n+    // of the elements.\n+    if ((size_t)(lenR + lenS + 7) != sig.size()) return false;\n+ \n+    // Check whether the R element is an integer.\n+    if (sig[2] != 0x02) return false;\n+\n+    // Zero-length integers are not allowed for R.\n+    if (lenR == 0) return false;\n+\n+    // Negative numbers are not allowed for R.\n+    if (sig[4] & 0x80) return false;\n+\n+    // Null bytes at the start of R are not allowed, unless R would\n+    // otherwise be interpreted as a negative number.\n+    if (lenR > 1 && (sig[4] == 0x00) && !(sig[5] & 0x80)) return false;\n+\n+    // Check whether the S element is an integer.\n+    if (sig[lenR + 4] != 0x02) return false;\n+\n+    // Zero-length integers are not allowed for S.\n+    if (lenS == 0) return false;\n+\n+    // Negative numbers are not allowed for S.\n+    if (sig[lenR + 6] & 0x80) return false;\n+\n+    // Null bytes at the start of S are not allowed, unless S would otherwise be\n+    // interpreted as a negative number.\n+    if (lenS > 1 && (sig[lenR + 6] == 0x00) && !(sig[lenR + 7] & 0x80)) return false;\n \n-    const unsigned char *S = &vchSig[6+nLenR];\n-    if (S[-2] != 0x02) {\n-        //  Non-canonical signature: S value type mismatch\n-        return false;\n-    }\n-    if (nLenS == 0) {\n-        //  Non-canonical signature: S length is zero\n-        return false;\n-    }\n-    if (S[0] & 0x80) {\n-        //  Non-canonical signature: S value negative\n-        return false;\n-    }\n-    if (nLenS > 1 && (S[0] == 0x00) && !(S[1] & 0x80)) {\n-        //  Non-canonical signature: S value excessively padded\n-        return false;\n-    }\n     return true;\n }\n \n bool static IsLowDERSignature(const valtype &vchSig, ScriptError* serror) {\n-    if (!IsDERSignature(vchSig)) {\n+    if (!IsValidSignatureEncoding(vchSig)) {\n         return set_error(serror, SCRIPT_ERR_SIG_DER);\n     }\n     unsigned int nLenR = vchSig[3];\n@@ -194,7 +194,7 @@ bool static CheckSignatureEncoding(const valtype &vchSig, unsigned int flags, Sc\n     if (vchSig.size() == 0) {\n         return true;\n     }\n-    if ((flags & (SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC)) != 0 && !IsDERSignature(vchSig)) {\n+    if ((flags & (SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC)) != 0 && !IsValidSignatureEncoding(vchSig)) {\n         return set_error(serror, SCRIPT_ERR_SIG_DER);\n     } else if ((flags & SCRIPT_VERIFY_LOW_S) != 0 && !IsLowDERSignature(vchSig, serror)) {\n         // serror is set"
      },
      {
        "sha": "92e2c27c13c860934829997972665ad422135673",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41e6e4caba9899ce7c165b0784461c55c867ee24/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41e6e4caba9899ce7c165b0784461c55c867ee24/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=41e6e4caba9899ce7c165b0784461c55c867ee24",
        "patch": "@@ -45,6 +45,7 @@ static const unsigned int MANDATORY_SCRIPT_VERIFY_FLAGS = SCRIPT_VERIFY_P2SH;\n  * blocks and we must accept those blocks.\n  */\n static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY_FLAGS |\n+                                                         SCRIPT_VERIFY_DERSIG |\n                                                          SCRIPT_VERIFY_STRICTENC |\n                                                          SCRIPT_VERIFY_MINIMALDATA |\n                                                          SCRIPT_VERIFY_NULLDUMMY |"
      },
      {
        "sha": "a67c157aff768f49666e0a55730eca2c10ae79fd",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 106,
        "deletions": 0,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41e6e4caba9899ce7c165b0784461c55c867ee24/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41e6e4caba9899ce7c165b0784461c55c867ee24/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=41e6e4caba9899ce7c165b0784461c55c867ee24",
        "patch": "@@ -510,6 +510,16 @@\n     \"2-of-2 CHECKMULTISIG NOT with both pubkeys valid, but first signature invalid.\"\n ],\n \n+[\"Increase DERSIG test coverage\"],\n+[\"0x4a 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"0 CHECKSIG NOT\", \"DERSIG\", \"Overly long signature is incorrectly encoded for DERSIG\"],\n+[\"0x25 0x30220220000000000000000000000000000000000000000000000000000000000000000000\", \"0 CHECKSIG NOT\", \"DERSIG\", \"Missing S is incorrectly encoded for DERSIG\"],\n+[\"0x27 0x3024021077777777777777777777777777777777020a7777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"S with invalid S length is incorrectly encoded for DERSIG\"],\n+[\"0x27 0x302403107777777777777777777777777777777702107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"Non-integer R is incorrectly encoded for DERSIG\"],\n+[\"0x27 0x302402107777777777777777777777777777777703107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"Non-integer S is incorrectly encoded for DERSIG\"],\n+[\"0x17 0x3014020002107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"Zero-length R is incorrectly encoded for DERSIG\"],\n+[\"0x17 0x3014021077777777777777777777777777777777020001\", \"0 CHECKSIG NOT\", \"DERSIG\", \"Zero-length S is incorrectly encoded for DERSIG\"],\n+[\"0x27 0x302402107777777777777777777777777777777702108777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"Negative S is incorrectly encoded for DERSIG\"],\n+\n [\"Automatically generated test cases\"],\n [\n     \"0x47 0x3044022053205076a7bb12d2db3162a2d97d8197631f829b065948b7019b15482af819a902204328dcc02c994ca086b1226d0d5f1674d23cfae0d846143df812b81cab3391e801\",\n@@ -589,6 +599,102 @@\n     \"DERSIG\",\n     \"P2PK NOT with too much R padding\"\n ],\n+[\n+    \"0x47 0x30440220d7a0417c3f6d1a15094d1cf2a3378ca0503eb8a57630953a9e2987e21ddd0a6502207a6266d686c99090920249991d3d42065b6d43eb70187b219c0db82e4f94d1a201\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"DERSIG\",\n+    \"BIP66 example 1, with DERSIG\"\n+],\n+[\n+    \"0x47 0x304402208e43c0b91f7c1e5bc58e41c8185f8a6086e111b0090187968a86f2822462d3c902200a58f4076b1133b18ff1dc83ee51676e44c60cc608d9534e0df5ace0424fc0be01\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n+    \"\",\n+    \"BIP66 example 2, without DERSIG\"\n+],\n+[\n+    \"0x47 0x304402208e43c0b91f7c1e5bc58e41c8185f8a6086e111b0090187968a86f2822462d3c902200a58f4076b1133b18ff1dc83ee51676e44c60cc608d9534e0df5ace0424fc0be01\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"BIP66 example 2, with DERSIG\"\n+],\n+[\n+    \"0\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"\",\n+    \"BIP66 example 3, without DERSIG\"\n+],\n+[\n+    \"0\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"DERSIG\",\n+    \"BIP66 example 3, with DERSIG\"\n+],\n+[\n+    \"1\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"\",\n+    \"BIP66 example 5, without DERSIG\"\n+],\n+[\n+    \"1\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"DERSIG\",\n+    \"BIP66 example 5, with DERSIG\"\n+],\n+[\n+    \"1\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"BIP66 example 6, with DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0x47 0x304402200b3d0b0375bb15c14620afa4aa10ae90a0d6a046ce217bc20fe0bc1ced68c1b802204b550acab90ae6d3478057c9ad24f9df743815b799b6449dd7e7f6d3bc6e274c01\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"DERSIG\",\n+    \"BIP66 example 7, with DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220f00a77260d34ec2f0c59621dc710f58169d0ca06df1a88cd4b1f1b97bd46991b02201ee220c7e04f26aed03f94aa97fb09ca5627163bf4ba07e6979972ec737db22601 0x47 0x3044022079ea80afd538d9ada421b5101febeb6bc874e01dde5bca108c1d0479aec339a4022004576db8f66130d1df686ccf00935703689d69cf539438da1edab208b0d63c4801\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n+    \"\",\n+    \"BIP66 example 8, without DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220f00a77260d34ec2f0c59621dc710f58169d0ca06df1a88cd4b1f1b97bd46991b02201ee220c7e04f26aed03f94aa97fb09ca5627163bf4ba07e6979972ec737db22601 0x47 0x3044022079ea80afd538d9ada421b5101febeb6bc874e01dde5bca108c1d0479aec339a4022004576db8f66130d1df686ccf00935703689d69cf539438da1edab208b0d63c4801\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n+    \"DERSIG\",\n+    \"BIP66 example 8, with DERSIG\"\n+],\n+[\n+    \"0 0 0x47 0x3044022081aa9d436f2154e8b6d600516db03d78de71df685b585a9807ead4210bd883490220534bb6bdf318a419ac0749660b60e78d17d515558ef369bf872eff405b676b2e01\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"\",\n+    \"BIP66 example 9, without DERSIG\"\n+],\n+[\n+    \"0 0 0x47 0x3044022081aa9d436f2154e8b6d600516db03d78de71df685b585a9807ead4210bd883490220534bb6bdf318a419ac0749660b60e78d17d515558ef369bf872eff405b676b2e01\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"DERSIG\",\n+    \"BIP66 example 9, with DERSIG\"\n+],\n+[\n+    \"0 0 0x47 0x30440220afa76a8f60622f813b05711f051c6c3407e32d1b1b70b0576c1f01b54e4c05c702200d58e9df044fd1845cabfbeef6e624ba0401daf7d7e084736f9ff601c3783bf501\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n+    \"DERSIG\",\n+    \"BIP66 example 10, with DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"\",\n+    \"BIP66 example 11, without DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"DERSIG\",\n+    \"BIP66 example 11, with DERSIG\"\n+],\n [\n     \"0x49 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef05101\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\","
      },
      {
        "sha": "fb81fcb1f53f18375b2f957064f9038fc9e76d4b",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 58,
        "deletions": 0,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41e6e4caba9899ce7c165b0784461c55c867ee24/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41e6e4caba9899ce7c165b0784461c55c867ee24/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=41e6e4caba9899ce7c165b0784461c55c867ee24",
        "patch": "@@ -688,6 +688,16 @@\n     \"2-of-2 CHECKMULTISIG NOT with both pubkeys valid, but second signature invalid. Valid pubkey fails, and CHECKMULTISIG exits early, prior to evaluation of second invalid signature.\"\n ],\n \n+[\"Increase test coverage for DERSIG\"],\n+[\"0x4a 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"0 CHECKSIG NOT\", \"\", \"Overly long signature is correctly encoded\"],\n+[\"0x25 0x30220220000000000000000000000000000000000000000000000000000000000000000000\", \"0 CHECKSIG NOT\", \"\", \"Missing S is correctly encoded\"],\n+[\"0x27 0x3024021077777777777777777777777777777777020a7777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"\", \"S with invalid S length is correctly encoded\"],\n+[\"0x27 0x302403107777777777777777777777777777777702107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"\", \"Non-integer R is correctly encoded\"],\n+[\"0x27 0x302402107777777777777777777777777777777703107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"\", \"Non-integer S is correctly encoded\"],\n+[\"0x17 0x3014020002107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"\", \"Zero-length R is correctly encoded\"],\n+[\"0x17 0x3014021077777777777777777777777777777777020001\", \"0 CHECKSIG NOT\", \"\", \"Zero-length S is correctly encoded for DERSIG\"],\n+[\"0x27 0x302402107777777777777777777777777777777702108777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"\", \"Negative S is correctly encoded\"],\n+\n [\"Automatically generated test cases\"],\n [\n     \"0x47 0x3044022053205076a7bb13d2db3162a2d97d8197631f829b065948b7019b15482af819a902204328dcc02c994ca086b1226d0d5f1674d23cfae0d846143df812b81cab3391e801\",\n@@ -755,6 +765,54 @@\n     \"\",\n     \"P2PK NOT with bad sig with too much R padding but no DERSIG\"\n ],\n+[\n+    \"0x47 0x30440220d7a0417c3f6d1a15094d1cf2a3378ca0503eb8a57630953a9e2987e21ddd0a6502207a6266d686c99090920249991d3d42065b6d43eb70187b219c0db82e4f94d1a201\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"\",\n+    \"BIP66 example 1, without DERSIG\"\n+],\n+[\n+    \"0\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n+    \"\",\n+    \"BIP66 example 4, without DERSIG\"\n+],\n+[\n+    \"0\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"BIP66 example 4, with DERSIG\"\n+],\n+[\n+    \"1\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n+    \"\",\n+    \"BIP66 example 6, without DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0x47 0x304402200b3d0b0375bb15c14620afa4aa10ae90a0d6a046ce217bc20fe0bc1ced68c1b802204b550acab90ae6d3478057c9ad24f9df743815b799b6449dd7e7f6d3bc6e274c01\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"\",\n+    \"BIP66 example 7, without DERSIG\"\n+],\n+[\n+    \"0 0 0x47 0x30440220afa76a8f60622f813b05711f051c6c3407e32d1b1b70b0576c1f01b54e4c05c702200d58e9df044fd1845cabfbeef6e624ba0401daf7d7e084736f9ff601c3783bf501\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n+    \"\",\n+    \"BIP66 example 10, without DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220f00a77260d34ec2f0c59621dc710f58169d0ca06df1a88cd4b1f1b97bd46991b02201ee220c7e04f26aed03f94aa97fb09ca5627163bf4ba07e6979972ec737db22601 0\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n+    \"\",\n+    \"BIP66 example 12, without DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220f00a77260d34ec2f0c59621dc710f58169d0ca06df1a88cd4b1f1b97bd46991b02201ee220c7e04f26aed03f94aa97fb09ca5627163bf4ba07e6979972ec737db22601 0\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n+    \"DERSIG\",\n+    \"BIP66 example 12, with DERSIG\"\n+],\n [\n     \"0x49 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef05101\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\","
      },
      {
        "sha": "6092afd782781dc5a79585c2e503b487c14e7169",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 73,
        "deletions": 0,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41e6e4caba9899ce7c165b0784461c55c867ee24/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41e6e4caba9899ce7c165b0784461c55c867ee24/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=41e6e4caba9899ce7c165b0784461c55c867ee24",
        "patch": "@@ -406,6 +406,79 @@ BOOST_AUTO_TEST_CASE(script_build)\n                               \"P2PK NOT with too much R padding\", SCRIPT_VERIFY_DERSIG\n                              ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n \n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                               \"BIP66 example 1, without DERSIG\", 0\n+                              ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                              \"BIP66 example 1, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                              \"BIP66 example 2, without DERSIG\", 0\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                              \"BIP66 example 2, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                              \"BIP66 example 3, without DERSIG\", 0\n+                             ).Num(0));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                              \"BIP66 example 3, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(0));\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                               \"BIP66 example 4, without DERSIG\", 0\n+                              ).Num(0));\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                               \"BIP66 example 4, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                              ).Num(0));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                              \"BIP66 example 5, without DERSIG\", 0\n+                             ).Num(1));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                              \"BIP66 example 5, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(1));\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                               \"BIP66 example 6, without DERSIG\", 0\n+                              ).Num(1));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                              \"BIP66 example 6, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(1));\n+    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                               \"BIP66 example 7, without DERSIG\", 0\n+                              ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                              \"BIP66 example 7, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                              \"BIP66 example 8, without DERSIG\", 0\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                              \"BIP66 example 8, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                              \"BIP66 example 9, without DERSIG\", 0\n+                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                              \"BIP66 example 9, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                               \"BIP66 example 10, without DERSIG\", 0\n+                              ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                              \"BIP66 example 10, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                              \"BIP66 example 11, without DERSIG\", 0\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                              \"BIP66 example 11, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n+    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                               \"BIP66 example 12, without DERSIG\", 0\n+                              ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n+    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                               \"BIP66 example 12, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                              ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n+\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n                                \"P2PK with high S but no LOW_S\", 0\n                               ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));"
      }
    ]
  },
  {
    "sha": "4e2b1fff98a36a07028457e48967d64ed0ce4386",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTJiMWZmZjk4YTM2YTA3MDI4NDU3ZTQ4OTY3ZDY0ZWQwY2U0Mzg2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-03T09:35:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-03T09:36:01Z"
      },
      "message": "Merge pull request #5675\n\n2d9b0b7 Fix priority calculation in CreateTransaction (Alex Morcos)",
      "tree": {
        "sha": "22b69f6420d553485411f4575d95a8b24317c269",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22b69f6420d553485411f4575d95a8b24317c269"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e2b1fff98a36a07028457e48967d64ed0ce4386",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU0JaBAAoJEHSBCwEjRsmmTC4IAI9gQx1jXSyQ9ehK8iRBiOLP\nGzPEBDGbFKs+8ZWBUFvvWYNsqiQ7PFnqdvz7eaStrqqtXp33r9cVd6ZS1+hcGm5V\nz0xaP12ahqEPo6g1fmSRFiApgAFUqXVSr66oj9Cmhaowv6PFQEobBY8jeZ4B96AP\numjy+el8fABz+lWYhg56y7vjP7h1qZdACSW70e3RxLrEMZ5hkShte44PT5kk3uE4\nMt6VDJxspbgNREhDEboxPxHQa9mFztNb0wmJW6FpAuIl1D7ElK2up0uLschMnmIA\nQOSvLjMJKoSRcXTJIPtiRtdqn5KjNiZNRl6wKgaiwR+F48uVQaFkTDpzD+9cP2U=\n=xOwW\n-----END PGP SIGNATURE-----",
        "payload": "tree 22b69f6420d553485411f4575d95a8b24317c269\nparent 41e6e4caba9899ce7c165b0784461c55c867ee24\nparent 2d9b0b7f03a268e557c6dce1dfa29401b5c9178b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422956147 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422956161 +0100\n\nMerge pull request #5675\n\n2d9b0b7 Fix priority calculation in CreateTransaction (Alex Morcos)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e2b1fff98a36a07028457e48967d64ed0ce4386",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e2b1fff98a36a07028457e48967d64ed0ce4386",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e2b1fff98a36a07028457e48967d64ed0ce4386/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41e6e4caba9899ce7c165b0784461c55c867ee24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41e6e4caba9899ce7c165b0784461c55c867ee24",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41e6e4caba9899ce7c165b0784461c55c867ee24"
      },
      {
        "sha": "2d9b0b7f03a268e557c6dce1dfa29401b5c9178b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d9b0b7f03a268e557c6dce1dfa29401b5c9178b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2d9b0b7f03a268e557c6dce1dfa29401b5c9178b"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "51cd714197f3af8408133c9b343082dc82a562d2",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e2b1fff98a36a07028457e48967d64ed0ce4386/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e2b1fff98a36a07028457e48967d64ed0ce4386/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=4e2b1fff98a36a07028457e48967d64ed0ce4386",
        "patch": "@@ -1445,10 +1445,14 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n                 BOOST_FOREACH(PAIRTYPE(const CWalletTx*, unsigned int) pcoin, setCoins)\n                 {\n                     CAmount nCredit = pcoin.first->vout[pcoin.second].nValue;\n-                    //The priority after the next block (depth+1) is used instead of the current,\n+                    //The coin age after the next block (depth+1) is used instead of the current,\n                     //reflecting an assumption the user would accept a bit more delay for\n                     //a chance at a free transaction.\n-                    dPriority += (double)nCredit * (pcoin.first->GetDepthInMainChain()+1);\n+                    //But mempool inputs might still be in the mempool, so their age stays 0\n+                    int age = pcoin.first->GetDepthInMainChain();\n+                    if (age != 0)\n+                        age += 1;\n+                    dPriority += (double)nCredit * age;\n                 }\n \n                 CAmount nChange = nValueIn - nValue - nFeeRet;"
      }
    ]
  },
  {
    "sha": "6ee87f9bc5d8a4a9f9cac24d8ba85f6769e8f312",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZWU4N2Y5YmM1ZDhhNGE5ZjljYWMyNGQ4YmE4NWY2NzY5ZThmMzEy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-03T09:36:34Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-03T09:36:44Z"
      },
      "message": "Merge pull request #5647\n\n3ff735c Increase block download timeout base from 10 to 20 minutes. (Gregory Maxwell)",
      "tree": {
        "sha": "bb7e95ed4d4098944d99a8bf0b7a934686c5e106",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb7e95ed4d4098944d99a8bf0b7a934686c5e106"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ee87f9bc5d8a4a9f9cac24d8ba85f6769e8f312",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU0JasAAoJEHSBCwEjRsmmgUYH/1K2BaksHECmwr3eaoFsf7T8\nhIGV8l1llTtJ64Vl7NNBnNkgkszOSGL1IgFxORFK/10LlbB9uyXh9cGwKV3czRkT\nlKsfaT8AQv1gSigcrp+urMnI3yeer94xIVQDlTG61ZzyAVvLRaKOBGWiKGh4z70w\nq3S9gCEUfxtGWuYiWhtSpYCGfzf4se2YmU6WJKEUEFI7Ub8cm7MJGfJSI8rKBopX\nCkRmrPX5qu+0YqqsU/VmZjr5LJZr2mMQiGQ+87VcRHkiBopWE3WLvXxEbNkvFpPl\nfOvqmmNHxgYSA8caI/bAG3LAbftqKuSDTL1PKFjgrQBZnHhKqUhVypKiX4MYJqE=\n=ULyr\n-----END PGP SIGNATURE-----",
        "payload": "tree bb7e95ed4d4098944d99a8bf0b7a934686c5e106\nparent 4e2b1fff98a36a07028457e48967d64ed0ce4386\nparent 3ff735c99ae75c21397079f49859b81e89a2f5f8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422956194 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422956204 +0100\n\nMerge pull request #5647\n\n3ff735c Increase block download timeout base from 10 to 20 minutes. (Gregory Maxwell)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ee87f9bc5d8a4a9f9cac24d8ba85f6769e8f312",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ee87f9bc5d8a4a9f9cac24d8ba85f6769e8f312",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ee87f9bc5d8a4a9f9cac24d8ba85f6769e8f312/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e2b1fff98a36a07028457e48967d64ed0ce4386",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e2b1fff98a36a07028457e48967d64ed0ce4386",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e2b1fff98a36a07028457e48967d64ed0ce4386"
      },
      {
        "sha": "3ff735c99ae75c21397079f49859b81e89a2f5f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ff735c99ae75c21397079f49859b81e89a2f5f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ff735c99ae75c21397079f49859b81e89a2f5f8"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "38a22e4297b1cd6a092f09884e9ff40277ad9d68",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ee87f9bc5d8a4a9f9cac24d8ba85f6769e8f312/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ee87f9bc5d8a4a9f9cac24d8ba85f6769e8f312/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6ee87f9bc5d8a4a9f9cac24d8ba85f6769e8f312",
        "patch": "@@ -4546,12 +4546,12 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             LogPrintf(\"Peer=%d is stalling block download, disconnecting\\n\", pto->id);\n             pto->fDisconnect = true;\n         }\n-        // In case there is a block that has been in flight from this peer for (1 + 0.5 * N) times the block interval\n+        // In case there is a block that has been in flight from this peer for (2 + 0.5 * N) times the block interval\n         // (with N the number of validated blocks that were in flight at the time it was requested), disconnect due to\n         // timeout. We compensate for in-flight blocks to prevent killing off peers due to our own downstream link\n         // being saturated. We only count validated in-flight blocks so peers can't advertize nonexisting block hashes\n         // to unreasonably increase our timeout.\n-        if (!pto->fDisconnect && state.vBlocksInFlight.size() > 0 && state.vBlocksInFlight.front().nTime < nNow - 500000 * Params().TargetSpacing() * (2 + state.vBlocksInFlight.front().nValidatedQueuedBefore)) {\n+        if (!pto->fDisconnect && state.vBlocksInFlight.size() > 0 && state.vBlocksInFlight.front().nTime < nNow - 500000 * Params().TargetSpacing() * (4 + state.vBlocksInFlight.front().nValidatedQueuedBefore)) {\n             LogPrintf(\"Timeout downloading block %s from peer=%d, disconnecting\\n\", state.vBlocksInFlight.front().hash.ToString(), pto->id);\n             pto->fDisconnect = true;\n         }"
      }
    ]
  },
  {
    "sha": "e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNWYxZjVhMjYzOTljN2QzNmZhOGUyYzI5ZWM0MTFlZWE0OWIwYTRj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-03T12:02:23Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-03T12:12:12Z"
      },
      "message": "Merge pull request #5732\n\n1371e6f Change \"insane\" to \"absurd\" (referring to high fees) in text strings and identifiers. (Daira Hopwood)",
      "tree": {
        "sha": "400528ae4094e50ac6db7b49671ec43d7a8f16b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/400528ae4094e50ac6db7b49671ec43d7a8f16b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU0LscAAoJEHSBCwEjRsmmAOIH/iDfFVzEWC+pFmvAOdF+6tP+\n3ILWZUsefBERhP8d7hH8tINRpm+qivG8WTa+sjFtoLP9P9L6sQcvsXkH2Eos+dQN\nifJKdFdQ60psCXuR3z7/iLdI+O0gnfv411DA8H+dqbbZcbYPzOyO+8inTJdBhmFZ\nJcfLt4qioJDb3PxN4fTqbNe1w58IcH9+yn1VpjYXDVSjv82UAYawlhyE9wT0GKiE\nIUcDNaXmdFdrhZupMofMgb1pdMJmtAQ3fuCkS6ydFbTgxN10EjLo+2xUhJIa4/Sk\ny9F6k9Mg24/X+oOejQD1Q2XBPmK4d54EP3nHqOWxUhCGvCL+g/pevixdcrOa3ro=\n=QeBi\n-----END PGP SIGNATURE-----",
        "payload": "tree 400528ae4094e50ac6db7b49671ec43d7a8f16b0\nparent 6ee87f9bc5d8a4a9f9cac24d8ba85f6769e8f312\nparent 1371e6f5db88941c3b3c70d7a13b0cbf150ebf66\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422964943 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422965532 +0100\n\nMerge pull request #5732\n\n1371e6f Change \"insane\" to \"absurd\" (referring to high fees) in text strings and identifiers. (Daira Hopwood)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ee87f9bc5d8a4a9f9cac24d8ba85f6769e8f312",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ee87f9bc5d8a4a9f9cac24d8ba85f6769e8f312",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ee87f9bc5d8a4a9f9cac24d8ba85f6769e8f312"
      },
      {
        "sha": "1371e6f5db88941c3b3c70d7a13b0cbf150ebf66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "27c427f7cdb3c2c6f9f3713a4723146db653d7b7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c",
        "patch": "@@ -904,7 +904,7 @@ CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowF\n \n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, bool fRejectInsaneFee)\n+                        bool* pfMissingInputs, bool fRejectAbsurdFee)\n {\n     AssertLockHeld(cs_main);\n     if (pfMissingInputs)\n@@ -1063,8 +1063,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             dFreeCount += nSize;\n         }\n \n-        if (fRejectInsaneFee && nFees > ::minRelayTxFee.GetFee(nSize) * 10000)\n-            return error(\"AcceptToMemoryPool: insane fees %s, %d > %d\",\n+        if (fRejectAbsurdFee && nFees > ::minRelayTxFee.GetFee(nSize) * 10000)\n+            return error(\"AcceptToMemoryPool: absurdly high fees %s, %d > %d\",\n                          hash.ToString(),\n                          nFees, ::minRelayTxFee.GetFee(nSize) * 10000);\n "
      },
      {
        "sha": "936cd43e99edb497ef022e0b7272d9df11c93be0",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c",
        "patch": "@@ -205,7 +205,7 @@ void FlushStateToDisk();\n \n /** (try to) add transaction to memory pool **/\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, bool fRejectInsaneFee=false);\n+                        bool* pfMissingInputs, bool fRejectAbsurdFee=false);\n \n \n struct CNodeStateStats {"
      },
      {
        "sha": "5aef2d7539b1da6bd930d9bad9c8f46647b5ace6",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c",
        "patch": "@@ -526,8 +526,8 @@ void SendCoinsDialog::processSendCoinsReturn(const WalletModel::SendCoinsReturn\n         msgParams.first = tr(\"The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n         msgParams.second = CClientUIInterface::MSG_ERROR;\n         break;\n-    case WalletModel::InsaneFee:\n-        msgParams.first = tr(\"A fee higher than %1 is considered an insanely high fee.\").arg(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), 10000000));\n+    case WalletModel::AbsurdFee:\n+        msgParams.first = tr(\"A fee higher than %1 is considered an absurdly high fee.\").arg(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), 10000000));\n         break;\n     case WalletModel::PaymentRequestExpired:\n         msgParams.first = tr(\"Payment request expired!\");"
      },
      {
        "sha": "79f5191fc0d94c964f4fb051e8d92ee1458e033c",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c",
        "patch": "@@ -279,9 +279,9 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n             return TransactionCreationFailed;\n         }\n \n-        // reject insane fee > 0.1 bitcoin\n+        // reject absurdly high fee > 0.1 bitcoin\n         if (nFeeRequired > 10000000)\n-            return InsaneFee;\n+            return AbsurdFee;\n     }\n \n     return SendCoinsReturn(OK);"
      },
      {
        "sha": "4a9a12beaa9d10c67f392fb8fd0ec668f12fc20f",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c",
        "patch": "@@ -111,7 +111,7 @@ class WalletModel : public QObject\n         DuplicateAddress,\n         TransactionCreationFailed, // Error returned when wallet is still locked\n         TransactionCommitFailed,\n-        InsaneFee,\n+        AbsurdFee,\n         PaymentRequestExpired\n     };\n "
      },
      {
        "sha": "d565a3dee3ea7ef7185c36dd251ae0f72d608bbe",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c",
        "patch": "@@ -2369,9 +2369,9 @@ int CMerkleTx::GetBlocksToMaturity() const\n }\n \n \n-bool CMerkleTx::AcceptToMemoryPool(bool fLimitFree, bool fRejectInsaneFee)\n+bool CMerkleTx::AcceptToMemoryPool(bool fLimitFree, bool fRejectAbsurdFee)\n {\n     CValidationState state;\n-    return ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, NULL, fRejectInsaneFee);\n+    return ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, NULL, fRejectAbsurdFee);\n }\n "
      },
      {
        "sha": "a7d75b70cf47d8596742cc941517dd5416708a46",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c",
        "patch": "@@ -548,7 +548,7 @@ class CMerkleTx : public CTransaction\n     int GetDepthInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n     bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChainINTERNAL(pindexRet) > 0; }\n     int GetBlocksToMaturity() const;\n-    bool AcceptToMemoryPool(bool fLimitFree=true, bool fRejectInsaneFee=true);\n+    bool AcceptToMemoryPool(bool fLimitFree=true, bool fRejectAbsurdFee=true);\n };\n \n /** "
      }
    ]
  },
  {
    "sha": "fcf646c9b08e7f846d6c99314f937ace50809d7a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmY2Y2NDZjOWIwOGU3Zjg0NmQ2Yzk5MzE0ZjkzN2FjZTUwODA5ZDdh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-03T12:12:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-03T12:12:44Z"
      },
      "message": "Merge pull request #5286\n\n44e9a6b Update the 'test_IsStandard' unit test (Flavien Charlon)\na930658 Change the default maximum OP_RETURN size to 80 bytes (Flavien Charlon)",
      "tree": {
        "sha": "0b105ce721266dd4f00795d006b72e5233739385",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b105ce721266dd4f00795d006b72e5233739385"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fcf646c9b08e7f846d6c99314f937ace50809d7a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU0Ls8AAoJEHSBCwEjRsmmOCQH/RmPMl3Rp6F/WDl7gc/hpZkM\nTV1OPTookZBUOnnvanQAuzUBUD1slOO6F+czzJQhSD6SC7Dycsa7ORf4Xj6YHnLA\nm3kFqDrG95KsgM9pX5PpfDSRt/bhiaqIXQ50QdvzTmW0+EfpUOqVlTDA0l/oGPbK\nVX+PsiF2vstV/zv6EjljX7u5b1gYvQSWtgTW9dz7GLg3ATG505I9UuEmBijeaqY4\nsIjg+5RV9Nrs6EVIfDPUJWlPsWNbPMoQwup6bY9TXKyPIjOXRbFRBQlzldujW2SX\nodbK5K8UEBnSND0O8zonanCgBGo37Nw0kPpr3TW7c+vCm4BaOHCWwLC8lKHlelo=\n=OLT7\n-----END PGP SIGNATURE-----",
        "payload": "tree 0b105ce721266dd4f00795d006b72e5233739385\nparent e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c\nparent 44e9a6b22e472971aebf647f4386fb5a4436a0e3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422965560 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422965564 +0100\n\nMerge pull request #5286\n\n44e9a6b Update the 'test_IsStandard' unit test (Flavien Charlon)\na930658 Change the default maximum OP_RETURN size to 80 bytes (Flavien Charlon)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcf646c9b08e7f846d6c99314f937ace50809d7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fcf646c9b08e7f846d6c99314f937ace50809d7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcf646c9b08e7f846d6c99314f937ace50809d7a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c"
      },
      {
        "sha": "44e9a6b22e472971aebf647f4386fb5a4436a0e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44e9a6b22e472971aebf647f4386fb5a4436a0e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44e9a6b22e472971aebf647f4386fb5a4436a0e3"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "a8b0acc98150ba5b4fa85fcc88b5c438a115b8ab",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcf646c9b08e7f846d6c99314f937ace50809d7a/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcf646c9b08e7f846d6c99314f937ace50809d7a/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=fcf646c9b08e7f846d6c99314f937ace50809d7a",
        "patch": "@@ -25,7 +25,7 @@ class CScriptID : public uint160\n     CScriptID(const uint160& in) : uint160(in) {}\n };\n \n-static const unsigned int MAX_OP_RETURN_RELAY = 40;      //! bytes\n+static const unsigned int MAX_OP_RETURN_RELAY = 80;      //! bytes\n extern unsigned nMaxDatacarrierBytes;\n \n /**"
      },
      {
        "sha": "52adfea992ff71f282991319729fa1458c6e679a",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcf646c9b08e7f846d6c99314f937ace50809d7a/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcf646c9b08e7f846d6c99314f937ace50809d7a/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=fcf646c9b08e7f846d6c99314f937ace50809d7a",
        "patch": "@@ -347,12 +347,12 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     t.vout[0].scriptPubKey = CScript() << OP_1;\n     BOOST_CHECK(!IsStandardTx(t, reason));\n \n-    // 40-byte TX_NULL_DATA (standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    // 80-byte TX_NULL_DATA (standard)\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n     BOOST_CHECK(IsStandardTx(t, reason));\n \n-    // 41-byte TX_NULL_DATA (non-standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    // 81-byte TX_NULL_DATA (non-standard)\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n     BOOST_CHECK(!IsStandardTx(t, reason));\n \n     // TX_NULL_DATA w/o PUSHDATA"
      }
    ]
  },
  {
    "sha": "cf008ac8c3c5d582562d88ad89020daef3e64dcb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjAwOGFjOGMzYzVkNTgyNTYyZDg4YWQ4OTAyMGRhZWYzZTY0ZGNi",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-01-28T18:48:36Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-02-03T13:53:08Z"
      },
      "message": "Acquire CCheckQueue's lock to avoid race condition\n\nThis fixes a potential race condition in the CCheckQueueControl constructor,\nwhich was looking directly at data in CCheckQueue without acquiring its lock.\n\nRemove the now-unnecessary friendship for CCheckQueueControl",
      "tree": {
        "sha": "75c5c0bec467de682b340c39573dcecee0d95497",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/75c5c0bec467de682b340c39573dcecee0d95497"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf008ac8c3c5d582562d88ad89020daef3e64dcb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf008ac8c3c5d582562d88ad89020daef3e64dcb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf008ac8c3c5d582562d88ad89020daef3e64dcb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf008ac8c3c5d582562d88ad89020daef3e64dcb/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6acd4563d3b96b244e61b87b9f08c0eb61ecaa6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6acd4563d3b96b244e61b87b9f08c0eb61ecaa6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6acd4563d3b96b244e61b87b9f08c0eb61ecaa6"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 8,
      "deletions": 4
    },
    "files": [
      {
        "sha": "7f6eae6509a3205f309036af933ea4ed98fa444b",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf008ac8c3c5d582562d88ad89020daef3e64dcb/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf008ac8c3c5d582562d88ad89020daef3e64dcb/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=cf008ac8c3c5d582562d88ad89020daef3e64dcb",
        "patch": "@@ -161,7 +161,12 @@ class CCheckQueue\n     {\n     }\n \n-    friend class CCheckQueueControl<T>;\n+    bool IsIdle()\n+    {\n+        boost::unique_lock<boost::mutex> lock(mutex);\n+        return (nTotal == nIdle && nTodo == 0 && fAllOk == true);\n+    }\n+\n };\n \n /** \n@@ -180,9 +185,8 @@ class CCheckQueueControl\n     {\n         // passed queue is supposed to be unused, or NULL\n         if (pqueue != NULL) {\n-            assert(pqueue->nTotal == pqueue->nIdle);\n-            assert(pqueue->nTodo == 0);\n-            assert(pqueue->fAllOk == true);\n+            bool isIdle = pqueue->IsIdle();\n+            assert(isIdle);\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "eb1c2cd37f75cf4d0e85970932b9774b2d073225",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjFjMmNkMzdmNzVjZjRkMGU4NTk3MDkzMmI5Nzc0YjJkMDczMjI1",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2015-02-03T14:44:39Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2015-02-03T14:44:39Z"
      },
      "message": "Split logic to undo txin's off DisconnectBlock.\n\nInstead, create a separate function that applies the undo operation of a\nCTxInUndo object onto a CCoinsViewCache.  This method is used from\nDisconnectBlock.",
      "tree": {
        "sha": "ff27a32087c80b95e1c0e1fe7f304dcd366bad88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff27a32087c80b95e1c0e1fe7f304dcd366bad88"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb1c2cd37f75cf4d0e85970932b9774b2d073225",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb1c2cd37f75cf4d0e85970932b9774b2d073225",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb1c2cd37f75cf4d0e85970932b9774b2d073225",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb1c2cd37f75cf4d0e85970932b9774b2d073225/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fcf646c9b08e7f846d6c99314f937ace50809d7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcf646c9b08e7f846d6c99314f937ace50809d7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fcf646c9b08e7f846d6c99314f937ace50809d7a"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 38,
      "deletions": 24
    },
    "files": [
      {
        "sha": "a0ad5e51f65560f6c60ba54ec602e20ab7281d68",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 24,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb1c2cd37f75cf4d0e85970932b9774b2d073225/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb1c2cd37f75cf4d0e85970932b9774b2d073225/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=eb1c2cd37f75cf4d0e85970932b9774b2d073225",
        "patch": "@@ -1588,6 +1588,39 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uin\n \n } // anon namespace\n \n+/**\n+ * Apply the undo operation of a CTxInUndo to the given chain state.\n+ * @param undo The undo object.\n+ * @param view The coins view to which to apply the changes.\n+ * @param out The out point that corresponds to the tx input.\n+ * @return True on success.\n+ */\n+static bool ApplyTxInUndo(const CTxInUndo& undo, CCoinsViewCache& view, const COutPoint& out)\n+{\n+    bool fClean = true;\n+\n+    CCoinsModifier coins = view.ModifyCoins(out.hash);\n+    if (undo.nHeight != 0) {\n+        // undo data contains height: this is the last output of the prevout tx being spent\n+        if (!coins->IsPruned())\n+            fClean = fClean && error(\"%s: undo data overwriting existing transaction\", __func__);\n+        coins->Clear();\n+        coins->fCoinBase = undo.fCoinBase;\n+        coins->nHeight = undo.nHeight;\n+        coins->nVersion = undo.nVersion;\n+    } else {\n+        if (coins->IsPruned())\n+            fClean = fClean && error(\"%s: undo data adding output to missing transaction\", __func__);\n+    }\n+    if (coins->IsAvailable(out.n))\n+        fClean = fClean && error(\"%s: undo data overwriting existing output\", __func__);\n+    if (coins->vout.size() < out.n+1)\n+        coins->vout.resize(out.n+1);\n+    coins->vout[out.n] = undo.txout;\n+\n+    return fClean;\n+}\n+\n bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& view, bool* pfClean)\n {\n     assert(pindex->GetBlockHash() == view.GetBestBlock());\n@@ -1613,11 +1646,8 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n         uint256 hash = tx.GetHash();\n \n         // Check that all outputs are available and match the outputs in the block itself\n-        // exactly. Note that transactions with only provably unspendable outputs won't\n-        // have outputs available even in the block itself, so we handle that case\n-        // specially with outsEmpty.\n+        // exactly.\n         {\n-        CCoins outsEmpty;\n         CCoinsModifier outs = view.ModifyCoins(hash);\n         outs->ClearUnspendable();\n \n@@ -1642,24 +1672,8 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n             for (unsigned int j = tx.vin.size(); j-- > 0;) {\n                 const COutPoint &out = tx.vin[j].prevout;\n                 const CTxInUndo &undo = txundo.vprevout[j];\n-                CCoinsModifier coins = view.ModifyCoins(out.hash);\n-                if (undo.nHeight != 0) {\n-                    // undo data contains height: this is the last output of the prevout tx being spent\n-                    if (!coins->IsPruned())\n-                        fClean = fClean && error(\"DisconnectBlock(): undo data overwriting existing transaction\");\n-                    coins->Clear();\n-                    coins->fCoinBase = undo.fCoinBase;\n-                    coins->nHeight = undo.nHeight;\n-                    coins->nVersion = undo.nVersion;\n-                } else {\n-                    if (coins->IsPruned())\n-                        fClean = fClean && error(\"DisconnectBlock(): undo data adding output to missing transaction\");\n-                }\n-                if (coins->IsAvailable(out.n))\n-                    fClean = fClean && error(\"DisconnectBlock(): undo data overwriting existing output\");\n-                if (coins->vout.size() < out.n+1)\n-                    coins->vout.resize(out.n+1);\n-                coins->vout[out.n] = undo.txout;\n+                if (!ApplyTxInUndo(undo, view, out))\n+                    fClean = false;\n             }\n         }\n     }\n@@ -1670,9 +1684,9 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n     if (pfClean) {\n         *pfClean = fClean;\n         return true;\n-    } else {\n-        return fClean;\n     }\n+\n+    return fClean;\n }\n \n void static FlushBlockFile(bool fFinalize = false)"
      }
    ]
  },
  {
    "sha": "a2b04ddfe6452e7d6274f4096bf3f2aee695a6d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMmIwNGRkZmU2NDUyZTdkNjI3NGY0MDk2YmYzZjJhZWU2OTVhNmQ5",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-11-24T22:25:58Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-04T03:41:01Z"
      },
      "message": "build: fix newer boost build with c++11",
      "tree": {
        "sha": "7824e65ba6a141c3420999b8c195434009c81cef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7824e65ba6a141c3420999b8c195434009c81cef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2b04ddfe6452e7d6274f4096bf3f2aee695a6d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2b04ddfe6452e7d6274f4096bf3f2aee695a6d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a2b04ddfe6452e7d6274f4096bf3f2aee695a6d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2b04ddfe6452e7d6274f4096bf3f2aee695a6d9/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fcf646c9b08e7f846d6c99314f937ace50809d7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcf646c9b08e7f846d6c99314f937ace50809d7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fcf646c9b08e7f846d6c99314f937ace50809d7a"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "1fd3b0168125e1c64fd4923ed5e4730f9ab9c035",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2b04ddfe6452e7d6274f4096bf3f2aee695a6d9/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2b04ddfe6452e7d6274f4096bf3f2aee695a6d9/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=a2b04ddfe6452e7d6274f4096bf3f2aee695a6d9",
        "patch": "@@ -156,11 +156,11 @@ class CMainParams : public CChainParams {\n         vSeeds.push_back(CDNSSeedData(\"bitcoinstats.com\", \"seed.bitcoinstats.com\"));\n         vSeeds.push_back(CDNSSeedData(\"xf2.org\", \"bitseed.xf2.org\"));\n \n-        base58Prefixes[PUBKEY_ADDRESS] = boost::assign::list_of(0);\n-        base58Prefixes[SCRIPT_ADDRESS] = boost::assign::list_of(5);\n-        base58Prefixes[SECRET_KEY] =     boost::assign::list_of(128);\n-        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x88)(0xB2)(0x1E);\n-        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x88)(0xAD)(0xE4);\n+        base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,0);\n+        base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,5);\n+        base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,128);\n+        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x88)(0xB2)(0x1E).convert_to_container<std::vector<unsigned char> >();\n+        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x88)(0xAD)(0xE4).convert_to_container<std::vector<unsigned char> >();\n \n         convertSeed6(vFixedSeeds, pnSeed6_main, ARRAYLEN(pnSeed6_main));\n \n@@ -214,11 +214,11 @@ class CTestNetParams : public CMainParams {\n         vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"testnet-seed.bluematt.me\"));\n         vSeeds.push_back(CDNSSeedData(\"bitcoin.schildbach.de\", \"testnet-seed.bitcoin.schildbach.de\"));\n \n-        base58Prefixes[PUBKEY_ADDRESS] = boost::assign::list_of(111);\n-        base58Prefixes[SCRIPT_ADDRESS] = boost::assign::list_of(196);\n-        base58Prefixes[SECRET_KEY]     = boost::assign::list_of(239);\n-        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x35)(0x87)(0xCF);\n-        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94);\n+        base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,111);\n+        base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,196);\n+        base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,239);\n+        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x35)(0x87)(0xCF).convert_to_container<std::vector<unsigned char> >();\n+        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94).convert_to_container<std::vector<unsigned char> >();\n \n         convertSeed6(vFixedSeeds, pnSeed6_test, ARRAYLEN(pnSeed6_test));\n "
      }
    ]
  },
  {
    "sha": "bbacd88204090e9233be375199f52d378bb75627",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYmFjZDg4MjA0MDkwZTkyMzNiZTM3NTE5OWY1MmQzNzhiYjc1NjI3",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-12-19T01:00:01Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-04T03:41:33Z"
      },
      "message": "c++11: MOVEONLY: move function definitions out of the header\n\nThese need to be moved out of the header in order to resolve a circular\ndependency between CWallet and CTxWallet. See next commit.",
      "tree": {
        "sha": "9a6d9f9828d2cb9583eb733a78ec5734a50dbb8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a6d9f9828d2cb9583eb733a78ec5734a50dbb8e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bbacd88204090e9233be375199f52d378bb75627",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbacd88204090e9233be375199f52d378bb75627",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bbacd88204090e9233be375199f52d378bb75627",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbacd88204090e9233be375199f52d378bb75627/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a2b04ddfe6452e7d6274f4096bf3f2aee695a6d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2b04ddfe6452e7d6274f4096bf3f2aee695a6d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2b04ddfe6452e7d6274f4096bf3f2aee695a6d9"
      }
    ],
    "stats": {
      "total": 380,
      "additions": 195,
      "deletions": 185
    },
    "files": [
      {
        "sha": "b51c4d4b14aaf9f3025f2440eda2530b9f817073",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 187,
        "deletions": 0,
        "changes": 187,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbacd88204090e9233be375199f52d378bb75627/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbacd88204090e9233be375199f52d378bb75627/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=bbacd88204090e9233be375199f52d378bb75627",
        "patch": "@@ -1015,6 +1015,193 @@ set<uint256> CWalletTx::GetConflicts() const\n     return result;\n }\n \n+CAmount CWalletTx::GetDebit(const isminefilter& filter) const\n+{\n+    if (vin.empty())\n+        return 0;\n+\n+    CAmount debit = 0;\n+    if(filter & ISMINE_SPENDABLE)\n+    {\n+        if (fDebitCached)\n+            debit += nDebitCached;\n+        else\n+        {\n+            nDebitCached = pwallet->GetDebit(*this, ISMINE_SPENDABLE);\n+            fDebitCached = true;\n+            debit += nDebitCached;\n+        }\n+    }\n+    if(filter & ISMINE_WATCH_ONLY)\n+    {\n+        if(fWatchDebitCached)\n+            debit += nWatchDebitCached;\n+        else\n+        {\n+            nWatchDebitCached = pwallet->GetDebit(*this, ISMINE_WATCH_ONLY);\n+            fWatchDebitCached = true;\n+            debit += nWatchDebitCached;\n+        }\n+    }\n+    return debit;\n+}\n+\n+CAmount CWalletTx::GetCredit(const isminefilter& filter) const\n+{\n+    // Must wait until coinbase is safely deep enough in the chain before valuing it\n+    if (IsCoinBase() && GetBlocksToMaturity() > 0)\n+        return 0;\n+\n+    int64_t credit = 0;\n+    if (filter & ISMINE_SPENDABLE)\n+    {\n+        // GetBalance can assume transactions in mapWallet won't change\n+        if (fCreditCached)\n+            credit += nCreditCached;\n+        else\n+        {\n+            nCreditCached = pwallet->GetCredit(*this, ISMINE_SPENDABLE);\n+            fCreditCached = true;\n+            credit += nCreditCached;\n+        }\n+    }\n+    if (filter & ISMINE_WATCH_ONLY)\n+    {\n+        if (fWatchCreditCached)\n+            credit += nWatchCreditCached;\n+        else\n+        {\n+            nWatchCreditCached = pwallet->GetCredit(*this, ISMINE_WATCH_ONLY);\n+            fWatchCreditCached = true;\n+            credit += nWatchCreditCached;\n+        }\n+    }\n+    return credit;\n+}\n+\n+CAmount CWalletTx::GetImmatureCredit(bool fUseCache) const\n+{\n+    if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n+    {\n+        if (fUseCache && fImmatureCreditCached)\n+            return nImmatureCreditCached;\n+        nImmatureCreditCached = pwallet->GetCredit(*this, ISMINE_SPENDABLE);\n+        fImmatureCreditCached = true;\n+        return nImmatureCreditCached;\n+    }\n+\n+    return 0;\n+}\n+\n+CAmount CWalletTx::GetAvailableCredit(bool fUseCache) const\n+{\n+    if (pwallet == 0)\n+        return 0;\n+\n+    // Must wait until coinbase is safely deep enough in the chain before valuing it\n+    if (IsCoinBase() && GetBlocksToMaturity() > 0)\n+        return 0;\n+\n+    if (fUseCache && fAvailableCreditCached)\n+        return nAvailableCreditCached;\n+\n+    CAmount nCredit = 0;\n+    uint256 hashTx = GetHash();\n+    for (unsigned int i = 0; i < vout.size(); i++)\n+    {\n+        if (!pwallet->IsSpent(hashTx, i))\n+        {\n+            const CTxOut &txout = vout[i];\n+            nCredit += pwallet->GetCredit(txout, ISMINE_SPENDABLE);\n+            if (!MoneyRange(nCredit))\n+                throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n+        }\n+    }\n+\n+    nAvailableCreditCached = nCredit;\n+    fAvailableCreditCached = true;\n+    return nCredit;\n+}\n+\n+CAmount CWalletTx::GetImmatureWatchOnlyCredit(const bool& fUseCache) const\n+{\n+    if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n+    {\n+        if (fUseCache && fImmatureWatchCreditCached)\n+            return nImmatureWatchCreditCached;\n+        nImmatureWatchCreditCached = pwallet->GetCredit(*this, ISMINE_WATCH_ONLY);\n+        fImmatureWatchCreditCached = true;\n+        return nImmatureWatchCreditCached;\n+    }\n+\n+    return 0;\n+}\n+\n+CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool& fUseCache) const\n+{\n+    if (pwallet == 0)\n+        return 0;\n+\n+    // Must wait until coinbase is safely deep enough in the chain before valuing it\n+    if (IsCoinBase() && GetBlocksToMaturity() > 0)\n+        return 0;\n+\n+    if (fUseCache && fAvailableWatchCreditCached)\n+        return nAvailableWatchCreditCached;\n+\n+    CAmount nCredit = 0;\n+    for (unsigned int i = 0; i < vout.size(); i++)\n+    {\n+        if (!pwallet->IsSpent(GetHash(), i))\n+        {\n+            const CTxOut &txout = vout[i];\n+            nCredit += pwallet->GetCredit(txout, ISMINE_WATCH_ONLY);\n+            if (!MoneyRange(nCredit))\n+                throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n+        }\n+    }\n+\n+    nAvailableWatchCreditCached = nCredit;\n+    fAvailableWatchCreditCached = true;\n+    return nCredit;\n+}\n+\n+CAmount CWalletTx::GetChange() const\n+{\n+    if (fChangeCached)\n+        return nChangeCached;\n+    nChangeCached = pwallet->GetChange(*this);\n+    fChangeCached = true;\n+    return nChangeCached;\n+}\n+\n+bool CWalletTx::IsTrusted() const\n+{\n+    // Quick answer in most cases\n+    if (!IsFinalTx(*this))\n+        return false;\n+    int nDepth = GetDepthInMainChain();\n+    if (nDepth >= 1)\n+        return true;\n+    if (nDepth < 0)\n+        return false;\n+    if (!bSpendZeroConfChange || !IsFromMe(ISMINE_ALL)) // using wtx's cached debit\n+        return false;\n+\n+    // Trusted if all inputs are from us and are in the mempool:\n+    BOOST_FOREACH(const CTxIn& txin, vin)\n+    {\n+        // Transactions not sent by us: not trusted\n+        const CWalletTx* parent = pwallet->GetWalletTx(txin.prevout.hash);\n+        if (parent == NULL)\n+            return false;\n+        const CTxOut& parentOut = parent->vout[txin.prevout.n];\n+        if (pwallet->IsMine(parentOut) != ISMINE_SPENDABLE)\n+            return false;\n+    }\n+    return true;\n+}\n+\n void CWallet::ResendWalletTransactions()\n {\n     // Do this infrequently and randomly to avoid giving away"
      },
      {
        "sha": "d571b92b60661bf1ca9ae31ef2f435d82187c0e5",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 8,
        "deletions": 185,
        "changes": 193,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbacd88204090e9233be375199f52d378bb75627/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbacd88204090e9233be375199f52d378bb75627/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=bbacd88204090e9233be375199f52d378bb75627",
        "patch": "@@ -705,165 +705,13 @@ class CWalletTx : public CMerkleTx\n     }\n \n     //! filter decides which addresses will count towards the debit\n-    CAmount GetDebit(const isminefilter& filter) const\n-    {\n-        if (vin.empty())\n-            return 0;\n-\n-        CAmount debit = 0;\n-        if(filter & ISMINE_SPENDABLE)\n-        {\n-            if (fDebitCached)\n-                debit += nDebitCached;\n-            else\n-            {\n-                nDebitCached = pwallet->GetDebit(*this, ISMINE_SPENDABLE);\n-                fDebitCached = true;\n-                debit += nDebitCached;\n-            }\n-        }\n-        if(filter & ISMINE_WATCH_ONLY)\n-        {\n-            if(fWatchDebitCached)\n-                debit += nWatchDebitCached;\n-            else\n-            {\n-                nWatchDebitCached = pwallet->GetDebit(*this, ISMINE_WATCH_ONLY);\n-                fWatchDebitCached = true;\n-                debit += nWatchDebitCached;\n-            }\n-        }\n-        return debit;\n-    }\n-\n-    CAmount GetCredit(const isminefilter& filter) const\n-    {\n-        // Must wait until coinbase is safely deep enough in the chain before valuing it\n-        if (IsCoinBase() && GetBlocksToMaturity() > 0)\n-            return 0;\n-\n-        int64_t credit = 0;\n-        if (filter & ISMINE_SPENDABLE)\n-        {\n-            // GetBalance can assume transactions in mapWallet won't change\n-            if (fCreditCached)\n-                credit += nCreditCached;\n-            else\n-            {\n-                nCreditCached = pwallet->GetCredit(*this, ISMINE_SPENDABLE);\n-                fCreditCached = true;\n-                credit += nCreditCached;\n-            }\n-        }\n-        if (filter & ISMINE_WATCH_ONLY)\n-        {\n-            if (fWatchCreditCached)\n-                credit += nWatchCreditCached;\n-            else\n-            {\n-                nWatchCreditCached = pwallet->GetCredit(*this, ISMINE_WATCH_ONLY);\n-                fWatchCreditCached = true;\n-                credit += nWatchCreditCached;\n-            }\n-        }\n-        return credit;\n-    }\n-\n-    CAmount GetImmatureCredit(bool fUseCache=true) const\n-    {\n-        if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n-        {\n-            if (fUseCache && fImmatureCreditCached)\n-                return nImmatureCreditCached;\n-            nImmatureCreditCached = pwallet->GetCredit(*this, ISMINE_SPENDABLE);\n-            fImmatureCreditCached = true;\n-            return nImmatureCreditCached;\n-        }\n-\n-        return 0;\n-    }\n-\n-    CAmount GetAvailableCredit(bool fUseCache=true) const\n-    {\n-        if (pwallet == 0)\n-            return 0;\n-\n-        // Must wait until coinbase is safely deep enough in the chain before valuing it\n-        if (IsCoinBase() && GetBlocksToMaturity() > 0)\n-            return 0;\n-\n-        if (fUseCache && fAvailableCreditCached)\n-            return nAvailableCreditCached;\n-\n-        CAmount nCredit = 0;\n-        uint256 hashTx = GetHash();\n-        for (unsigned int i = 0; i < vout.size(); i++)\n-        {\n-            if (!pwallet->IsSpent(hashTx, i))\n-            {\n-                const CTxOut &txout = vout[i];\n-                nCredit += pwallet->GetCredit(txout, ISMINE_SPENDABLE);\n-                if (!MoneyRange(nCredit))\n-                    throw std::runtime_error(\"CWalletTx::GetAvailableCredit(): value out of range\");\n-            }\n-        }\n-\n-        nAvailableCreditCached = nCredit;\n-        fAvailableCreditCached = true;\n-        return nCredit;\n-    }\n-\n-    CAmount GetImmatureWatchOnlyCredit(const bool& fUseCache=true) const\n-    {\n-        if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n-        {\n-            if (fUseCache && fImmatureWatchCreditCached)\n-                return nImmatureWatchCreditCached;\n-            nImmatureWatchCreditCached = pwallet->GetCredit(*this, ISMINE_WATCH_ONLY);\n-            fImmatureWatchCreditCached = true;\n-            return nImmatureWatchCreditCached;\n-        }\n-\n-        return 0;\n-    }\n-\n-    CAmount GetAvailableWatchOnlyCredit(const bool& fUseCache=true) const\n-    {\n-        if (pwallet == 0)\n-            return 0;\n-\n-        // Must wait until coinbase is safely deep enough in the chain before valuing it\n-        if (IsCoinBase() && GetBlocksToMaturity() > 0)\n-            return 0;\n-\n-        if (fUseCache && fAvailableWatchCreditCached)\n-            return nAvailableWatchCreditCached;\n-\n-        CAmount nCredit = 0;\n-        for (unsigned int i = 0; i < vout.size(); i++)\n-        {\n-            if (!pwallet->IsSpent(GetHash(), i))\n-            {\n-                const CTxOut &txout = vout[i];\n-                nCredit += pwallet->GetCredit(txout, ISMINE_WATCH_ONLY);\n-                if (!MoneyRange(nCredit))\n-                    throw std::runtime_error(\"CWalletTx::GetAvailableCredit(): value out of range\");\n-            }\n-        }\n-\n-        nAvailableWatchCreditCached = nCredit;\n-        fAvailableWatchCreditCached = true;\n-        return nCredit;\n-    }\n-\n-    CAmount GetChange() const\n-    {\n-        if (fChangeCached)\n-            return nChangeCached;\n-        nChangeCached = pwallet->GetChange(*this);\n-        fChangeCached = true;\n-        return nChangeCached;\n-    }\n+    CAmount GetDebit(const isminefilter& filter) const;\n+    CAmount GetCredit(const isminefilter& filter) const;\n+    CAmount GetImmatureCredit(bool fUseCache=true) const;\n+    CAmount GetAvailableCredit(bool fUseCache=true) const;\n+    CAmount GetImmatureWatchOnlyCredit(const bool& fUseCache=true) const;\n+    CAmount GetAvailableWatchOnlyCredit(const bool& fUseCache=true) const;\n+    CAmount GetChange() const;\n \n     void GetAmounts(std::list<COutputEntry>& listReceived,\n                     std::list<COutputEntry>& listSent, CAmount& nFee, std::string& strSentAccount, const isminefilter& filter) const;\n@@ -876,32 +724,7 @@ class CWalletTx : public CMerkleTx\n         return (GetDebit(filter) > 0);\n     }\n \n-    bool IsTrusted() const\n-    {\n-        // Quick answer in most cases\n-        if (!IsFinalTx(*this))\n-            return false;\n-        int nDepth = GetDepthInMainChain();\n-        if (nDepth >= 1)\n-            return true;\n-        if (nDepth < 0)\n-            return false;\n-        if (!bSpendZeroConfChange || !IsFromMe(ISMINE_ALL)) // using wtx's cached debit\n-            return false;\n-\n-        // Trusted if all inputs are from us and are in the mempool:\n-        BOOST_FOREACH(const CTxIn& txin, vin)\n-        {\n-            // Transactions not sent by us: not trusted\n-            const CWalletTx* parent = pwallet->GetWalletTx(txin.prevout.hash);\n-            if (parent == NULL)\n-                return false;\n-            const CTxOut& parentOut = parent->vout[txin.prevout.n];\n-            if (pwallet->IsMine(parentOut) != ISMINE_SPENDABLE)\n-                return false;\n-        }\n-        return true;\n-    }\n+    bool IsTrusted() const;\n \n     bool WriteToDisk(CWalletDB *pwalletdb);\n "
      }
    ]
  },
  {
    "sha": "3447cf87e27262c57031361b3659fef938783295",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDQ3Y2Y4N2UyNzI2MmM1NzAzMTM2MWIzNjU5ZmVmOTM4NzgzMjk1",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-12-19T01:03:51Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-04T04:30:59Z"
      },
      "message": "c++11: MOVEONLY: break circular dependency in wallet\n\nc++11 (libc++'s stdlib implementation anyway) doesn't allow for map types to be\nforward-declared. for example:\n\nclass foo;\nstd::map<int, foo> bar; // error, foo has not been defined.\nclass foo{};\n\nSince CWallet and CWalletTx are inter-dependent, but only std::map<*,CWalletTx>\nis used, forward-declare CWallet instead and define CWalletTx first.\n\nDespite the mangled git diff, this change only amounts to moving ~320 lines in\na single chunk.",
      "tree": {
        "sha": "b4328a8a7658eebea713d7e2a3f05e4e693db560",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b4328a8a7658eebea713d7e2a3f05e4e693db560"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3447cf87e27262c57031361b3659fef938783295",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3447cf87e27262c57031361b3659fef938783295",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3447cf87e27262c57031361b3659fef938783295",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3447cf87e27262c57031361b3659fef938783295/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bbacd88204090e9233be375199f52d378bb75627",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbacd88204090e9233be375199f52d378bb75627",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbacd88204090e9233be375199f52d378bb75627"
      }
    ],
    "stats": {
      "total": 990,
      "additions": 494,
      "deletions": 496
    },
    "files": [
      {
        "sha": "6ed87d1e687d5f3833fd9050ee456601241bc503",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 494,
        "deletions": 496,
        "changes": 990,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3447cf87e27262c57031361b3659fef938783295/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3447cf87e27262c57031361b3659fef938783295/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=3447cf87e27262c57031361b3659fef938783295",
        "patch": "@@ -103,114 +103,437 @@ class CAddressBookData\n     StringMap destdata;\n };\n \n-/** \n- * A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n- * and provides the ability to create new transactions.\n- */\n-class CWallet : public CCryptoKeyStore, public CValidationInterface\n+\n+typedef std::map<std::string, std::string> mapValue_t;\n+\n+\n+static void ReadOrderPos(int64_t& nOrderPos, mapValue_t& mapValue)\n+{\n+    if (!mapValue.count(\"n\"))\n+    {\n+        nOrderPos = -1; // TODO: calculate elsewhere\n+        return;\n+    }\n+    nOrderPos = atoi64(mapValue[\"n\"].c_str());\n+}\n+\n+\n+static void WriteOrderPos(const int64_t& nOrderPos, mapValue_t& mapValue)\n+{\n+    if (nOrderPos == -1)\n+        return;\n+    mapValue[\"n\"] = i64tostr(nOrderPos);\n+}\n+\n+struct COutputEntry\n+{\n+    CTxDestination destination;\n+    CAmount amount;\n+    int vout;\n+};\n+\n+/** A transaction with a merkle branch linking it to the block chain. */\n+class CMerkleTx : public CTransaction\n {\n private:\n-    bool SelectCoins(const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl *coinControl = NULL) const;\n+    int GetDepthInMainChainINTERNAL(const CBlockIndex* &pindexRet) const;\n \n-    CWalletDB *pwalletdbEncryption;\n+public:\n+    uint256 hashBlock;\n+    std::vector<uint256> vMerkleBranch;\n+    int nIndex;\n \n-    //! the current wallet version: clients below this version are not able to load the wallet\n-    int nWalletVersion;\n+    // memory only\n+    mutable bool fMerkleVerified;\n \n-    //! the maximum wallet format version: memory-only variable that specifies to what version this wallet may be upgraded\n-    int nWalletMaxVersion;\n \n-    int64_t nNextResend;\n-    int64_t nLastResend;\n+    CMerkleTx()\n+    {\n+        Init();\n+    }\n \n-    /**\n-     * Used to keep track of spent outpoints, and\n-     * detect and report conflicts (double-spends or\n-     * mutated transactions where the mutant gets mined).\n-     */\n-    typedef std::multimap<COutPoint, uint256> TxSpends;\n-    TxSpends mapTxSpends;\n-    void AddToSpends(const COutPoint& outpoint, const uint256& wtxid);\n-    void AddToSpends(const uint256& wtxid);\n+    CMerkleTx(const CTransaction& txIn) : CTransaction(txIn)\n+    {\n+        Init();\n+    }\n \n-    void SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator>);\n+    void Init()\n+    {\n+        hashBlock = uint256();\n+        nIndex = -1;\n+        fMerkleVerified = false;\n+    }\n \n-public:\n-    /*\n-     * Main wallet lock.\n-     * This lock protects all the fields added by CWallet\n-     *   except for:\n-     *      fFileBacked (immutable after instantiation)\n-     *      strWalletFile (immutable after instantiation)\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(*(CTransaction*)this);\n+        nVersion = this->nVersion;\n+        READWRITE(hashBlock);\n+        READWRITE(vMerkleBranch);\n+        READWRITE(nIndex);\n+    }\n+\n+    int SetMerkleBranch(const CBlock& block);\n+\n+\n+    /**\n+     * Return depth of transaction in blockchain:\n+     * -1  : not in blockchain, and not in memory pool (conflicted transaction)\n+     *  0  : in memory pool, waiting to be included in a block\n+     * >=1 : this many blocks deep in the main chain\n      */\n-    mutable CCriticalSection cs_wallet;\n+    int GetDepthInMainChain(const CBlockIndex* &pindexRet) const;\n+    int GetDepthInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n+    bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChainINTERNAL(pindexRet) > 0; }\n+    int GetBlocksToMaturity() const;\n+    bool AcceptToMemoryPool(bool fLimitFree=true, bool fRejectAbsurdFee=true);\n+};\n \n-    bool fFileBacked;\n-    std::string strWalletFile;\n+/** \n+ * A transaction with a bunch of additional info that only the owner cares about.\n+ * It includes any unrecorded transactions needed to link it back to the block chain.\n+ */\n+class CWalletTx : public CMerkleTx\n+{\n+private:\n+    const CWallet* pwallet;\n \n-    std::set<int64_t> setKeyPool;\n-    std::map<CKeyID, CKeyMetadata> mapKeyMetadata;\n+public:\n+    mapValue_t mapValue;\n+    std::vector<std::pair<std::string, std::string> > vOrderForm;\n+    unsigned int fTimeReceivedIsTxTime;\n+    unsigned int nTimeReceived; //! time received by this node\n+    unsigned int nTimeSmart;\n+    char fFromMe;\n+    std::string strFromAccount;\n+    int64_t nOrderPos; //! position in ordered transaction list\n \n-    typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n-    MasterKeyMap mapMasterKeys;\n-    unsigned int nMasterKeyMaxID;\n+    // memory only\n+    mutable bool fDebitCached;\n+    mutable bool fCreditCached;\n+    mutable bool fImmatureCreditCached;\n+    mutable bool fAvailableCreditCached;\n+    mutable bool fWatchDebitCached;\n+    mutable bool fWatchCreditCached;\n+    mutable bool fImmatureWatchCreditCached;\n+    mutable bool fAvailableWatchCreditCached;\n+    mutable bool fChangeCached;\n+    mutable CAmount nDebitCached;\n+    mutable CAmount nCreditCached;\n+    mutable CAmount nImmatureCreditCached;\n+    mutable CAmount nAvailableCreditCached;\n+    mutable CAmount nWatchDebitCached;\n+    mutable CAmount nWatchCreditCached;\n+    mutable CAmount nImmatureWatchCreditCached;\n+    mutable CAmount nAvailableWatchCreditCached;\n+    mutable CAmount nChangeCached;\n \n-    CWallet()\n+    CWalletTx()\n     {\n-        SetNull();\n+        Init(NULL);\n     }\n \n-    CWallet(std::string strWalletFileIn)\n+    CWalletTx(const CWallet* pwalletIn)\n     {\n-        SetNull();\n+        Init(pwalletIn);\n+    }\n \n-        strWalletFile = strWalletFileIn;\n-        fFileBacked = true;\n+    CWalletTx(const CWallet* pwalletIn, const CMerkleTx& txIn) : CMerkleTx(txIn)\n+    {\n+        Init(pwalletIn);\n     }\n \n-    ~CWallet()\n+    CWalletTx(const CWallet* pwalletIn, const CTransaction& txIn) : CMerkleTx(txIn)\n     {\n-        delete pwalletdbEncryption;\n-        pwalletdbEncryption = NULL;\n+        Init(pwalletIn);\n     }\n \n-    void SetNull()\n+    void Init(const CWallet* pwalletIn)\n     {\n-        nWalletVersion = FEATURE_BASE;\n-        nWalletMaxVersion = FEATURE_BASE;\n-        fFileBacked = false;\n-        nMasterKeyMaxID = 0;\n-        pwalletdbEncryption = NULL;\n-        nOrderPosNext = 0;\n-        nNextResend = 0;\n-        nLastResend = 0;\n-        nTimeFirstKey = 0;\n+        pwallet = pwalletIn;\n+        mapValue.clear();\n+        vOrderForm.clear();\n+        fTimeReceivedIsTxTime = false;\n+        nTimeReceived = 0;\n+        nTimeSmart = 0;\n+        fFromMe = false;\n+        strFromAccount.clear();\n+        fDebitCached = false;\n+        fCreditCached = false;\n+        fImmatureCreditCached = false;\n+        fAvailableCreditCached = false;\n+        fWatchDebitCached = false;\n+        fWatchCreditCached = false;\n+        fImmatureWatchCreditCached = false;\n+        fAvailableWatchCreditCached = false;\n+        fChangeCached = false;\n+        nDebitCached = 0;\n+        nCreditCached = 0;\n+        nImmatureCreditCached = 0;\n+        nAvailableCreditCached = 0;\n+        nWatchDebitCached = 0;\n+        nWatchCreditCached = 0;\n+        nAvailableWatchCreditCached = 0;\n+        nImmatureWatchCreditCached = 0;\n+        nChangeCached = 0;\n+        nOrderPos = -1;\n     }\n \n-    std::map<uint256, CWalletTx> mapWallet;\n+    ADD_SERIALIZE_METHODS;\n \n-    int64_t nOrderPosNext;\n-    std::map<uint256, int> mapRequestCount;\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        if (ser_action.ForRead())\n+            Init(NULL);\n+        char fSpent = false;\n \n-    std::map<CTxDestination, CAddressBookData> mapAddressBook;\n+        if (!ser_action.ForRead())\n+        {\n+            mapValue[\"fromaccount\"] = strFromAccount;\n \n-    CPubKey vchDefaultKey;\n+            WriteOrderPos(nOrderPos, mapValue);\n \n-    std::set<COutPoint> setLockedCoins;\n+            if (nTimeSmart)\n+                mapValue[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n+        }\n \n-    int64_t nTimeFirstKey;\n+        READWRITE(*(CMerkleTx*)this);\n+        std::vector<CMerkleTx> vUnused; //! Used to be vtxPrev\n+        READWRITE(vUnused);\n+        READWRITE(mapValue);\n+        READWRITE(vOrderForm);\n+        READWRITE(fTimeReceivedIsTxTime);\n+        READWRITE(nTimeReceived);\n+        READWRITE(fFromMe);\n+        READWRITE(fSpent);\n \n-    const CWalletTx* GetWalletTx(const uint256& hash) const;\n+        if (ser_action.ForRead())\n+        {\n+            strFromAccount = mapValue[\"fromaccount\"];\n \n-    //! check whether we are allowed to upgrade (or already support) to the named feature\n-    bool CanSupportFeature(enum WalletFeature wf) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n+            ReadOrderPos(nOrderPos, mapValue);\n \n-    void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL) const;\n-    bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const;\n+            nTimeSmart = mapValue.count(\"timesmart\") ? (unsigned int)atoi64(mapValue[\"timesmart\"]) : 0;\n+        }\n \n-    bool IsSpent(const uint256& hash, unsigned int n) const;\n+        mapValue.erase(\"fromaccount\");\n+        mapValue.erase(\"version\");\n+        mapValue.erase(\"spent\");\n+        mapValue.erase(\"n\");\n+        mapValue.erase(\"timesmart\");\n+    }\n \n-    bool IsLockedCoin(uint256 hash, unsigned int n) const;\n+    //! make sure balances are recalculated\n+    void MarkDirty()\n+    {\n+        fCreditCached = false;\n+        fAvailableCreditCached = false;\n+        fWatchDebitCached = false;\n+        fWatchCreditCached = false;\n+        fAvailableWatchCreditCached = false;\n+        fImmatureWatchCreditCached = false;\n+        fDebitCached = false;\n+        fChangeCached = false;\n+    }\n+\n+    void BindWallet(CWallet *pwalletIn)\n+    {\n+        pwallet = pwalletIn;\n+        MarkDirty();\n+    }\n+\n+    //! filter decides which addresses will count towards the debit\n+    CAmount GetDebit(const isminefilter& filter) const;\n+    CAmount GetCredit(const isminefilter& filter) const;\n+    CAmount GetImmatureCredit(bool fUseCache=true) const;\n+    CAmount GetAvailableCredit(bool fUseCache=true) const;\n+    CAmount GetImmatureWatchOnlyCredit(const bool& fUseCache=true) const;\n+    CAmount GetAvailableWatchOnlyCredit(const bool& fUseCache=true) const;\n+    CAmount GetChange() const;\n+\n+    void GetAmounts(std::list<COutputEntry>& listReceived,\n+                    std::list<COutputEntry>& listSent, CAmount& nFee, std::string& strSentAccount, const isminefilter& filter) const;\n+\n+    void GetAccountAmounts(const std::string& strAccount, CAmount& nReceived,\n+                           CAmount& nSent, CAmount& nFee, const isminefilter& filter) const;\n+\n+    bool IsFromMe(const isminefilter& filter) const\n+    {\n+        return (GetDebit(filter) > 0);\n+    }\n+\n+    bool IsTrusted() const;\n+\n+    bool WriteToDisk(CWalletDB *pwalletdb);\n+\n+    int64_t GetTxTime() const;\n+    int GetRequestCount() const;\n+\n+    void RelayWalletTransaction();\n+\n+    std::set<uint256> GetConflicts() const;\n+};\n+\n+\n+\n+\n+class COutput\n+{\n+public:\n+    const CWalletTx *tx;\n+    int i;\n+    int nDepth;\n+    bool fSpendable;\n+\n+    COutput(const CWalletTx *txIn, int iIn, int nDepthIn, bool fSpendableIn)\n+    {\n+        tx = txIn; i = iIn; nDepth = nDepthIn; fSpendable = fSpendableIn;\n+    }\n+\n+    std::string ToString() const;\n+};\n+\n+\n+\n+\n+/** Private key that includes an expiration date in case it never gets used. */\n+class CWalletKey\n+{\n+public:\n+    CPrivKey vchPrivKey;\n+    int64_t nTimeCreated;\n+    int64_t nTimeExpires;\n+    std::string strComment;\n+    //! todo: add something to note what created it (user, getnewaddress, change)\n+    //!   maybe should have a map<string, string> property map\n+\n+    CWalletKey(int64_t nExpires=0);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        if (!(nType & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(vchPrivKey);\n+        READWRITE(nTimeCreated);\n+        READWRITE(nTimeExpires);\n+        READWRITE(LIMITED_STRING(strComment, 65536));\n+    }\n+};\n+\n+\n+\n+/** \n+ * A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n+ * and provides the ability to create new transactions.\n+ */\n+class CWallet : public CCryptoKeyStore, public CValidationInterface\n+{\n+private:\n+    bool SelectCoins(const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl *coinControl = NULL) const;\n+\n+    CWalletDB *pwalletdbEncryption;\n+\n+    //! the current wallet version: clients below this version are not able to load the wallet\n+    int nWalletVersion;\n+\n+    //! the maximum wallet format version: memory-only variable that specifies to what version this wallet may be upgraded\n+    int nWalletMaxVersion;\n+\n+    int64_t nNextResend;\n+    int64_t nLastResend;\n+\n+    /**\n+     * Used to keep track of spent outpoints, and\n+     * detect and report conflicts (double-spends or\n+     * mutated transactions where the mutant gets mined).\n+     */\n+    typedef std::multimap<COutPoint, uint256> TxSpends;\n+    TxSpends mapTxSpends;\n+    void AddToSpends(const COutPoint& outpoint, const uint256& wtxid);\n+    void AddToSpends(const uint256& wtxid);\n+\n+    void SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator>);\n+\n+public:\n+    /*\n+     * Main wallet lock.\n+     * This lock protects all the fields added by CWallet\n+     *   except for:\n+     *      fFileBacked (immutable after instantiation)\n+     *      strWalletFile (immutable after instantiation)\n+     */\n+    mutable CCriticalSection cs_wallet;\n+\n+    bool fFileBacked;\n+    std::string strWalletFile;\n+\n+    std::set<int64_t> setKeyPool;\n+    std::map<CKeyID, CKeyMetadata> mapKeyMetadata;\n+\n+    typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n+    MasterKeyMap mapMasterKeys;\n+    unsigned int nMasterKeyMaxID;\n+\n+    CWallet()\n+    {\n+        SetNull();\n+    }\n+\n+    CWallet(std::string strWalletFileIn)\n+    {\n+        SetNull();\n+\n+        strWalletFile = strWalletFileIn;\n+        fFileBacked = true;\n+    }\n+\n+    ~CWallet()\n+    {\n+        delete pwalletdbEncryption;\n+        pwalletdbEncryption = NULL;\n+    }\n+\n+    void SetNull()\n+    {\n+        nWalletVersion = FEATURE_BASE;\n+        nWalletMaxVersion = FEATURE_BASE;\n+        fFileBacked = false;\n+        nMasterKeyMaxID = 0;\n+        pwalletdbEncryption = NULL;\n+        nOrderPosNext = 0;\n+        nNextResend = 0;\n+        nLastResend = 0;\n+        nTimeFirstKey = 0;\n+    }\n+\n+    std::map<uint256, CWalletTx> mapWallet;\n+\n+    int64_t nOrderPosNext;\n+    std::map<uint256, int> mapRequestCount;\n+\n+    std::map<CTxDestination, CAddressBookData> mapAddressBook;\n+\n+    CPubKey vchDefaultKey;\n+\n+    std::set<COutPoint> setLockedCoins;\n+\n+    int64_t nTimeFirstKey;\n+\n+    const CWalletTx* GetWalletTx(const uint256& hash) const;\n+\n+    //! check whether we are allowed to upgrade (or already support) to the named feature\n+    bool CanSupportFeature(enum WalletFeature wf) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n+\n+    void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL) const;\n+    bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const;\n+\n+    bool IsSpent(const uint256& hash, unsigned int n) const;\n+\n+    bool IsLockedCoin(uint256 hash, unsigned int n) const;\n     void LockCoin(COutPoint& output);\n     void UnlockCoin(COutPoint& output);\n     void UnlockAllCoins();\n@@ -322,471 +645,146 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         if (!MoneyRange(txout.nValue))\n             throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n         return ((IsMine(txout) & filter) ? txout.nValue : 0);\n-    }\n-    bool IsChange(const CTxOut& txout) const;\n-    CAmount GetChange(const CTxOut& txout) const\n-    {\n-        if (!MoneyRange(txout.nValue))\n-            throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n-        return (IsChange(txout) ? txout.nValue : 0);\n-    }\n-    bool IsMine(const CTransaction& tx) const\n-    {\n-        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-            if (IsMine(txout))\n-                return true;\n-        return false;\n-    }\n-    /** should probably be renamed to IsRelevantToMe */\n-    bool IsFromMe(const CTransaction& tx) const\n-    {\n-        return (GetDebit(tx, ISMINE_ALL) > 0);\n-    }\n-    CAmount GetDebit(const CTransaction& tx, const isminefilter& filter) const\n-    {\n-        CAmount nDebit = 0;\n-        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-        {\n-            nDebit += GetDebit(txin, filter);\n-            if (!MoneyRange(nDebit))\n-                throw std::runtime_error(\"CWallet::GetDebit(): value out of range\");\n-        }\n-        return nDebit;\n-    }\n-    CAmount GetCredit(const CTransaction& tx, const isminefilter& filter) const\n-    {\n-        CAmount nCredit = 0;\n-        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-        {\n-            nCredit += GetCredit(txout, filter);\n-            if (!MoneyRange(nCredit))\n-                throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n-        }\n-        return nCredit;\n-    }\n-    CAmount GetChange(const CTransaction& tx) const\n-    {\n-        CAmount nChange = 0;\n-        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-        {\n-            nChange += GetChange(txout);\n-            if (!MoneyRange(nChange))\n-                throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n-        }\n-        return nChange;\n-    }\n-    void SetBestChain(const CBlockLocator& loc);\n-\n-    DBErrors LoadWallet(bool& fFirstRunRet);\n-    DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);\n-\n-    bool SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& purpose);\n-\n-    bool DelAddressBook(const CTxDestination& address);\n-\n-    void UpdatedTransaction(const uint256 &hashTx);\n-\n-    void Inventory(const uint256 &hash)\n-    {\n-        {\n-            LOCK(cs_wallet);\n-            std::map<uint256, int>::iterator mi = mapRequestCount.find(hash);\n-            if (mi != mapRequestCount.end())\n-                (*mi).second++;\n-        }\n-    }\n-\n-    unsigned int GetKeyPoolSize()\n-    {\n-        AssertLockHeld(cs_wallet); // setKeyPool\n-        return setKeyPool.size();\n-    }\n-\n-    bool SetDefaultKey(const CPubKey &vchPubKey);\n-\n-    //! signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower\n-    bool SetMinVersion(enum WalletFeature, CWalletDB* pwalletdbIn = NULL, bool fExplicit = false);\n-\n-    //! change which version we're allowed to upgrade to (note that this does not immediately imply upgrading to that format)\n-    bool SetMaxVersion(int nVersion);\n-\n-    //! get the current wallet format (the oldest client version guaranteed to understand this wallet)\n-    int GetVersion() { LOCK(cs_wallet); return nWalletVersion; }\n-\n-    //! Get wallet transactions that conflict with given transaction (spend same outputs)\n-    std::set<uint256> GetConflicts(const uint256& txid) const;\n-\n-    /** \n-     * Address book entry changed.\n-     * @note called with lock cs_wallet held.\n-     */\n-    boost::signals2::signal<void (CWallet *wallet, const CTxDestination\n-            &address, const std::string &label, bool isMine,\n-            const std::string &purpose,\n-            ChangeType status)> NotifyAddressBookChanged;\n-\n-    /** \n-     * Wallet transaction added, removed or updated.\n-     * @note called with lock cs_wallet held.\n-     */\n-    boost::signals2::signal<void (CWallet *wallet, const uint256 &hashTx,\n-            ChangeType status)> NotifyTransactionChanged;\n-\n-    /** Show progress e.g. for rescan */\n-    boost::signals2::signal<void (const std::string &title, int nProgress)> ShowProgress;\n-\n-    /** Watch-only address added */\n-    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n-};\n-\n-/** A key allocated from the key pool. */\n-class CReserveKey\n-{\n-protected:\n-    CWallet* pwallet;\n-    int64_t nIndex;\n-    CPubKey vchPubKey;\n-public:\n-    CReserveKey(CWallet* pwalletIn)\n-    {\n-        nIndex = -1;\n-        pwallet = pwalletIn;\n-    }\n-\n-    ~CReserveKey()\n-    {\n-        ReturnKey();\n-    }\n-\n-    void ReturnKey();\n-    bool GetReservedKey(CPubKey &pubkey);\n-    void KeepKey();\n-};\n-\n-\n-typedef std::map<std::string, std::string> mapValue_t;\n-\n-\n-static void ReadOrderPos(int64_t& nOrderPos, mapValue_t& mapValue)\n-{\n-    if (!mapValue.count(\"n\"))\n-    {\n-        nOrderPos = -1; // TODO: calculate elsewhere\n-        return;\n-    }\n-    nOrderPos = atoi64(mapValue[\"n\"].c_str());\n-}\n-\n-\n-static void WriteOrderPos(const int64_t& nOrderPos, mapValue_t& mapValue)\n-{\n-    if (nOrderPos == -1)\n-        return;\n-    mapValue[\"n\"] = i64tostr(nOrderPos);\n-}\n-\n-struct COutputEntry\n-{\n-    CTxDestination destination;\n-    CAmount amount;\n-    int vout;\n-};\n-\n-/** A transaction with a merkle branch linking it to the block chain. */\n-class CMerkleTx : public CTransaction\n-{\n-private:\n-    int GetDepthInMainChainINTERNAL(const CBlockIndex* &pindexRet) const;\n-\n-public:\n-    uint256 hashBlock;\n-    std::vector<uint256> vMerkleBranch;\n-    int nIndex;\n-\n-    // memory only\n-    mutable bool fMerkleVerified;\n-\n-\n-    CMerkleTx()\n-    {\n-        Init();\n-    }\n-\n-    CMerkleTx(const CTransaction& txIn) : CTransaction(txIn)\n-    {\n-        Init();\n-    }\n-\n-    void Init()\n-    {\n-        hashBlock = uint256();\n-        nIndex = -1;\n-        fMerkleVerified = false;\n-    }\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(*(CTransaction*)this);\n-        nVersion = this->nVersion;\n-        READWRITE(hashBlock);\n-        READWRITE(vMerkleBranch);\n-        READWRITE(nIndex);\n-    }\n-\n-    int SetMerkleBranch(const CBlock& block);\n-\n-\n-    /**\n-     * Return depth of transaction in blockchain:\n-     * -1  : not in blockchain, and not in memory pool (conflicted transaction)\n-     *  0  : in memory pool, waiting to be included in a block\n-     * >=1 : this many blocks deep in the main chain\n-     */\n-    int GetDepthInMainChain(const CBlockIndex* &pindexRet) const;\n-    int GetDepthInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n-    bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChainINTERNAL(pindexRet) > 0; }\n-    int GetBlocksToMaturity() const;\n-    bool AcceptToMemoryPool(bool fLimitFree=true, bool fRejectAbsurdFee=true);\n-};\n-\n-/** \n- * A transaction with a bunch of additional info that only the owner cares about.\n- * It includes any unrecorded transactions needed to link it back to the block chain.\n- */\n-class CWalletTx : public CMerkleTx\n-{\n-private:\n-    const CWallet* pwallet;\n-\n-public:\n-    mapValue_t mapValue;\n-    std::vector<std::pair<std::string, std::string> > vOrderForm;\n-    unsigned int fTimeReceivedIsTxTime;\n-    unsigned int nTimeReceived; //! time received by this node\n-    unsigned int nTimeSmart;\n-    char fFromMe;\n-    std::string strFromAccount;\n-    int64_t nOrderPos; //! position in ordered transaction list\n-\n-    // memory only\n-    mutable bool fDebitCached;\n-    mutable bool fCreditCached;\n-    mutable bool fImmatureCreditCached;\n-    mutable bool fAvailableCreditCached;\n-    mutable bool fWatchDebitCached;\n-    mutable bool fWatchCreditCached;\n-    mutable bool fImmatureWatchCreditCached;\n-    mutable bool fAvailableWatchCreditCached;\n-    mutable bool fChangeCached;\n-    mutable CAmount nDebitCached;\n-    mutable CAmount nCreditCached;\n-    mutable CAmount nImmatureCreditCached;\n-    mutable CAmount nAvailableCreditCached;\n-    mutable CAmount nWatchDebitCached;\n-    mutable CAmount nWatchCreditCached;\n-    mutable CAmount nImmatureWatchCreditCached;\n-    mutable CAmount nAvailableWatchCreditCached;\n-    mutable CAmount nChangeCached;\n-\n-    CWalletTx()\n+    }\n+    bool IsChange(const CTxOut& txout) const;\n+    CAmount GetChange(const CTxOut& txout) const\n     {\n-        Init(NULL);\n+        if (!MoneyRange(txout.nValue))\n+            throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n+        return (IsChange(txout) ? txout.nValue : 0);\n     }\n-\n-    CWalletTx(const CWallet* pwalletIn)\n+    bool IsMine(const CTransaction& tx) const\n     {\n-        Init(pwalletIn);\n+        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+            if (IsMine(txout))\n+                return true;\n+        return false;\n     }\n-\n-    CWalletTx(const CWallet* pwalletIn, const CMerkleTx& txIn) : CMerkleTx(txIn)\n+    /** should probably be renamed to IsRelevantToMe */\n+    bool IsFromMe(const CTransaction& tx) const\n     {\n-        Init(pwalletIn);\n+        return (GetDebit(tx, ISMINE_ALL) > 0);\n     }\n-\n-    CWalletTx(const CWallet* pwalletIn, const CTransaction& txIn) : CMerkleTx(txIn)\n+    CAmount GetDebit(const CTransaction& tx, const isminefilter& filter) const\n     {\n-        Init(pwalletIn);\n+        CAmount nDebit = 0;\n+        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+        {\n+            nDebit += GetDebit(txin, filter);\n+            if (!MoneyRange(nDebit))\n+                throw std::runtime_error(\"CWallet::GetDebit(): value out of range\");\n+        }\n+        return nDebit;\n     }\n-\n-    void Init(const CWallet* pwalletIn)\n+    CAmount GetCredit(const CTransaction& tx, const isminefilter& filter) const\n     {\n-        pwallet = pwalletIn;\n-        mapValue.clear();\n-        vOrderForm.clear();\n-        fTimeReceivedIsTxTime = false;\n-        nTimeReceived = 0;\n-        nTimeSmart = 0;\n-        fFromMe = false;\n-        strFromAccount.clear();\n-        fDebitCached = false;\n-        fCreditCached = false;\n-        fImmatureCreditCached = false;\n-        fAvailableCreditCached = false;\n-        fWatchDebitCached = false;\n-        fWatchCreditCached = false;\n-        fImmatureWatchCreditCached = false;\n-        fAvailableWatchCreditCached = false;\n-        fChangeCached = false;\n-        nDebitCached = 0;\n-        nCreditCached = 0;\n-        nImmatureCreditCached = 0;\n-        nAvailableCreditCached = 0;\n-        nWatchDebitCached = 0;\n-        nWatchCreditCached = 0;\n-        nAvailableWatchCreditCached = 0;\n-        nImmatureWatchCreditCached = 0;\n-        nChangeCached = 0;\n-        nOrderPos = -1;\n+        CAmount nCredit = 0;\n+        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+        {\n+            nCredit += GetCredit(txout, filter);\n+            if (!MoneyRange(nCredit))\n+                throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n+        }\n+        return nCredit;\n     }\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        if (ser_action.ForRead())\n-            Init(NULL);\n-        char fSpent = false;\n-\n-        if (!ser_action.ForRead())\n+    CAmount GetChange(const CTransaction& tx) const\n+    {\n+        CAmount nChange = 0;\n+        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n         {\n-            mapValue[\"fromaccount\"] = strFromAccount;\n-\n-            WriteOrderPos(nOrderPos, mapValue);\n-\n-            if (nTimeSmart)\n-                mapValue[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n+            nChange += GetChange(txout);\n+            if (!MoneyRange(nChange))\n+                throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n         }\n+        return nChange;\n+    }\n+    void SetBestChain(const CBlockLocator& loc);\n \n-        READWRITE(*(CMerkleTx*)this);\n-        std::vector<CMerkleTx> vUnused; //! Used to be vtxPrev\n-        READWRITE(vUnused);\n-        READWRITE(mapValue);\n-        READWRITE(vOrderForm);\n-        READWRITE(fTimeReceivedIsTxTime);\n-        READWRITE(nTimeReceived);\n-        READWRITE(fFromMe);\n-        READWRITE(fSpent);\n-\n-        if (ser_action.ForRead())\n-        {\n-            strFromAccount = mapValue[\"fromaccount\"];\n+    DBErrors LoadWallet(bool& fFirstRunRet);\n+    DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);\n \n-            ReadOrderPos(nOrderPos, mapValue);\n+    bool SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& purpose);\n \n-            nTimeSmart = mapValue.count(\"timesmart\") ? (unsigned int)atoi64(mapValue[\"timesmart\"]) : 0;\n-        }\n+    bool DelAddressBook(const CTxDestination& address);\n \n-        mapValue.erase(\"fromaccount\");\n-        mapValue.erase(\"version\");\n-        mapValue.erase(\"spent\");\n-        mapValue.erase(\"n\");\n-        mapValue.erase(\"timesmart\");\n-    }\n+    void UpdatedTransaction(const uint256 &hashTx);\n \n-    //! make sure balances are recalculated\n-    void MarkDirty()\n+    void Inventory(const uint256 &hash)\n     {\n-        fCreditCached = false;\n-        fAvailableCreditCached = false;\n-        fWatchDebitCached = false;\n-        fWatchCreditCached = false;\n-        fAvailableWatchCreditCached = false;\n-        fImmatureWatchCreditCached = false;\n-        fDebitCached = false;\n-        fChangeCached = false;\n+        {\n+            LOCK(cs_wallet);\n+            std::map<uint256, int>::iterator mi = mapRequestCount.find(hash);\n+            if (mi != mapRequestCount.end())\n+                (*mi).second++;\n+        }\n     }\n \n-    void BindWallet(CWallet *pwalletIn)\n+    unsigned int GetKeyPoolSize()\n     {\n-        pwallet = pwalletIn;\n-        MarkDirty();\n+        AssertLockHeld(cs_wallet); // setKeyPool\n+        return setKeyPool.size();\n     }\n \n-    //! filter decides which addresses will count towards the debit\n-    CAmount GetDebit(const isminefilter& filter) const;\n-    CAmount GetCredit(const isminefilter& filter) const;\n-    CAmount GetImmatureCredit(bool fUseCache=true) const;\n-    CAmount GetAvailableCredit(bool fUseCache=true) const;\n-    CAmount GetImmatureWatchOnlyCredit(const bool& fUseCache=true) const;\n-    CAmount GetAvailableWatchOnlyCredit(const bool& fUseCache=true) const;\n-    CAmount GetChange() const;\n+    bool SetDefaultKey(const CPubKey &vchPubKey);\n \n-    void GetAmounts(std::list<COutputEntry>& listReceived,\n-                    std::list<COutputEntry>& listSent, CAmount& nFee, std::string& strSentAccount, const isminefilter& filter) const;\n+    //! signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower\n+    bool SetMinVersion(enum WalletFeature, CWalletDB* pwalletdbIn = NULL, bool fExplicit = false);\n \n-    void GetAccountAmounts(const std::string& strAccount, CAmount& nReceived,\n-                           CAmount& nSent, CAmount& nFee, const isminefilter& filter) const;\n+    //! change which version we're allowed to upgrade to (note that this does not immediately imply upgrading to that format)\n+    bool SetMaxVersion(int nVersion);\n \n-    bool IsFromMe(const isminefilter& filter) const\n-    {\n-        return (GetDebit(filter) > 0);\n-    }\n+    //! get the current wallet format (the oldest client version guaranteed to understand this wallet)\n+    int GetVersion() { LOCK(cs_wallet); return nWalletVersion; }\n \n-    bool IsTrusted() const;\n+    //! Get wallet transactions that conflict with given transaction (spend same outputs)\n+    std::set<uint256> GetConflicts(const uint256& txid) const;\n \n-    bool WriteToDisk(CWalletDB *pwalletdb);\n+    /** \n+     * Address book entry changed.\n+     * @note called with lock cs_wallet held.\n+     */\n+    boost::signals2::signal<void (CWallet *wallet, const CTxDestination\n+            &address, const std::string &label, bool isMine,\n+            const std::string &purpose,\n+            ChangeType status)> NotifyAddressBookChanged;\n \n-    int64_t GetTxTime() const;\n-    int GetRequestCount() const;\n+    /** \n+     * Wallet transaction added, removed or updated.\n+     * @note called with lock cs_wallet held.\n+     */\n+    boost::signals2::signal<void (CWallet *wallet, const uint256 &hashTx,\n+            ChangeType status)> NotifyTransactionChanged;\n \n-    void RelayWalletTransaction();\n+    /** Show progress e.g. for rescan */\n+    boost::signals2::signal<void (const std::string &title, int nProgress)> ShowProgress;\n \n-    std::set<uint256> GetConflicts() const;\n+    /** Watch-only address added */\n+    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n };\n \n-\n-\n-\n-class COutput\n+/** A key allocated from the key pool. */\n+class CReserveKey\n {\n+protected:\n+    CWallet* pwallet;\n+    int64_t nIndex;\n+    CPubKey vchPubKey;\n public:\n-    const CWalletTx *tx;\n-    int i;\n-    int nDepth;\n-    bool fSpendable;\n-\n-    COutput(const CWalletTx *txIn, int iIn, int nDepthIn, bool fSpendableIn)\n+    CReserveKey(CWallet* pwalletIn)\n     {\n-        tx = txIn; i = iIn; nDepth = nDepthIn; fSpendable = fSpendableIn;\n+        nIndex = -1;\n+        pwallet = pwalletIn;\n     }\n \n-    std::string ToString() const;\n-};\n-\n-\n-\n-\n-/** Private key that includes an expiration date in case it never gets used. */\n-class CWalletKey\n-{\n-public:\n-    CPrivKey vchPrivKey;\n-    int64_t nTimeCreated;\n-    int64_t nTimeExpires;\n-    std::string strComment;\n-    //! todo: add something to note what created it (user, getnewaddress, change)\n-    //!   maybe should have a map<string, string> property map\n-\n-    CWalletKey(int64_t nExpires=0);\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        if (!(nType & SER_GETHASH))\n-            READWRITE(nVersion);\n-        READWRITE(vchPrivKey);\n-        READWRITE(nTimeCreated);\n-        READWRITE(nTimeExpires);\n-        READWRITE(LIMITED_STRING(strComment, 65536));\n+    ~CReserveKey()\n+    {\n+        ReturnKey();\n     }\n-};\n-\n-\n-\n \n+    void ReturnKey();\n+    bool GetReservedKey(CPubKey &pubkey);\n+    void KeepKey();\n+};\n \n \n /** "
      }
    ]
  },
  {
    "sha": "5a6155ccfa7ee8bb2187054c67f750101986588f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTYxNTVjY2ZhN2VlOGJiMjE4NzA1NGM2N2Y3NTAxMDE5ODY1ODhm",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-12-19T01:17:28Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-04T04:30:59Z"
      },
      "message": "c++11: don't forward-declare types used in maps",
      "tree": {
        "sha": "7637a86b5c8e77caf3af820ac20bce10539af56b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7637a86b5c8e77caf3af820ac20bce10539af56b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a6155ccfa7ee8bb2187054c67f750101986588f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a6155ccfa7ee8bb2187054c67f750101986588f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a6155ccfa7ee8bb2187054c67f750101986588f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a6155ccfa7ee8bb2187054c67f750101986588f/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3447cf87e27262c57031361b3659fef938783295",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3447cf87e27262c57031361b3659fef938783295",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3447cf87e27262c57031361b3659fef938783295"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 2,
      "deletions": 5
    },
    "files": [
      {
        "sha": "7531737e04d53d3e84300336fd640cb31e5ac507",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a6155ccfa7ee8bb2187054c67f750101986588f/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a6155ccfa7ee8bb2187054c67f750101986588f/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=5a6155ccfa7ee8bb2187054c67f750101986588f",
        "patch": "@@ -7,8 +7,6 @@\n \n #include \"crypter.h\"\n #include \"key.h\"\n-#include \"script/script.h\"\n-#include \"script/standard.h\"\n #include \"util.h\"\n \n #include <boost/foreach.hpp>"
      },
      {
        "sha": "4a4b6d20afe7270ec1a6397925905e185513d674",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a6155ccfa7ee8bb2187054c67f750101986588f/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a6155ccfa7ee8bb2187054c67f750101986588f/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=5a6155ccfa7ee8bb2187054c67f750101986588f",
        "patch": "@@ -8,14 +8,13 @@\n \n #include \"key.h\"\n #include \"pubkey.h\"\n+#include \"script/script.h\"\n+#include \"script/standard.h\"\n #include \"sync.h\"\n \n #include <boost/signals2/signal.hpp>\n #include <boost/variant.hpp>\n \n-class CScript;\n-class CScriptID;\n-\n /** A virtual base class for key stores */\n class CKeyStore\n {"
      }
    ]
  },
  {
    "sha": "7f991e364eb50bd14970de9d96981a7ca268d4aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Zjk5MWUzNjRlYjUwYmQxNDk3MGRlOWQ5Njk4MWE3Y2EyNjhkNGFh",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-12-19T01:43:48Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-04T04:31:00Z"
      },
      "message": "c++11: These look like user-defined literals.\n\nAdd a space to keep the compiler happy",
      "tree": {
        "sha": "a0cd24690077c0b241b711d1c555f33389f5fe88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0cd24690077c0b241b711d1c555f33389f5fe88"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f991e364eb50bd14970de9d96981a7ca268d4aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f991e364eb50bd14970de9d96981a7ca268d4aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f991e364eb50bd14970de9d96981a7ca268d4aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f991e364eb50bd14970de9d96981a7ca268d4aa/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a6155ccfa7ee8bb2187054c67f750101986588f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a6155ccfa7ee8bb2187054c67f750101986588f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a6155ccfa7ee8bb2187054c67f750101986588f"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "d829ec228db6dda417904bc4347b725d009303f0",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f991e364eb50bd14970de9d96981a7ca268d4aa/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f991e364eb50bd14970de9d96981a7ca268d4aa/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=7f991e364eb50bd14970de9d96981a7ca268d4aa",
        "patch": "@@ -282,21 +282,21 @@ BOOST_AUTO_TEST_CASE(strprintf_numbers)\n {\n     int64_t s64t = -9223372036854775807LL; /* signed 64 bit test value */\n     uint64_t u64t = 18446744073709551615ULL; /* unsigned 64 bit test value */\n-    BOOST_CHECK(strprintf(\"%s %d %s\", B, s64t, E) == B\" -9223372036854775807 \"E);\n-    BOOST_CHECK(strprintf(\"%s %u %s\", B, u64t, E) == B\" 18446744073709551615 \"E);\n-    BOOST_CHECK(strprintf(\"%s %x %s\", B, u64t, E) == B\" ffffffffffffffff \"E);\n+    BOOST_CHECK(strprintf(\"%s %d %s\", B, s64t, E) == B\" -9223372036854775807 \" E);\n+    BOOST_CHECK(strprintf(\"%s %u %s\", B, u64t, E) == B\" 18446744073709551615 \" E);\n+    BOOST_CHECK(strprintf(\"%s %x %s\", B, u64t, E) == B\" ffffffffffffffff \" E);\n \n     size_t st = 12345678; /* unsigned size_t test value */\n     ssize_t sst = -12345678; /* signed size_t test value */\n-    BOOST_CHECK(strprintf(\"%s %d %s\", B, sst, E) == B\" -12345678 \"E);\n-    BOOST_CHECK(strprintf(\"%s %u %s\", B, st, E) == B\" 12345678 \"E);\n-    BOOST_CHECK(strprintf(\"%s %x %s\", B, st, E) == B\" bc614e \"E);\n+    BOOST_CHECK(strprintf(\"%s %d %s\", B, sst, E) == B\" -12345678 \" E);\n+    BOOST_CHECK(strprintf(\"%s %u %s\", B, st, E) == B\" 12345678 \" E);\n+    BOOST_CHECK(strprintf(\"%s %x %s\", B, st, E) == B\" bc614e \" E);\n \n     ptrdiff_t pt = 87654321; /* positive ptrdiff_t test value */\n     ptrdiff_t spt = -87654321; /* negative ptrdiff_t test value */\n-    BOOST_CHECK(strprintf(\"%s %d %s\", B, spt, E) == B\" -87654321 \"E);\n-    BOOST_CHECK(strprintf(\"%s %u %s\", B, pt, E) == B\" 87654321 \"E);\n-    BOOST_CHECK(strprintf(\"%s %x %s\", B, pt, E) == B\" 5397fb1 \"E);\n+    BOOST_CHECK(strprintf(\"%s %d %s\", B, spt, E) == B\" -87654321 \" E);\n+    BOOST_CHECK(strprintf(\"%s %u %s\", B, pt, E) == B\" 87654321 \" E);\n+    BOOST_CHECK(strprintf(\"%s %x %s\", B, pt, E) == B\" 5397fb1 \" E);\n }\n #undef B\n #undef E"
      }
    ]
  },
  {
    "sha": "87ecfb0f9675ef46d360014a65886e9556d28e66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4N2VjZmIwZjk2NzVlZjQ2ZDM2MDAxNGE2NTg4NmU5NTU2ZDI4ZTY2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-04T09:16:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-04T09:23:09Z"
      },
      "message": "Merge pull request #5711\n\n5ebe095 Trim RPC command table (Wladimir J. van der Laan)\n4401b2d Removed main.h dependency from rpcserver.cpp (Eric Lombrozo)",
      "tree": {
        "sha": "8c093b395637147d1d2dc31b7582041231b04e6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c093b395637147d1d2dc31b7582041231b04e6e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87ecfb0f9675ef46d360014a65886e9556d28e66",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU0eT9AAoJEHSBCwEjRsmmxxMH/jK3GFJYcxIUWU88TnLZpjG7\nY6ToZ7Qyk/WLvaULJIM64lqAF7IzkfMDoAWG7YP5vAlYNHZELPr7jVNtU+LGTRLx\nfamU6s0Ax906zM+79/LZrg2aitpZRSKax4xSMVTvheHVfyQESypdB/nLISSGX9zk\nW2En4ey2DSAtcZmCt14soa9wvSbVePQHxIJCept1ee/k6Ie4WtWsbyjknTXuh6oS\n0Qp7FKX4rvMLrEvSTcyc9ekgQ11ElsPKW85xB0MIAuDxeFnUKdreg1D+Tkd2XDJC\npm1uhTZREwypvGgA7MRTevwiX73XBWHmkb6e6BFJ3vWbDZLFw3plr46cVA4WmKY=\n=pniz\n-----END PGP SIGNATURE-----",
        "payload": "tree 8c093b395637147d1d2dc31b7582041231b04e6e\nparent fcf646c9b08e7f846d6c99314f937ace50809d7a\nparent 5ebe0956b391cfa782fd97bb417d20b479df6a36\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423041384 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423041789 +0100\n\nMerge pull request #5711\n\n5ebe095 Trim RPC command table (Wladimir J. van der Laan)\n4401b2d Removed main.h dependency from rpcserver.cpp (Eric Lombrozo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87ecfb0f9675ef46d360014a65886e9556d28e66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/87ecfb0f9675ef46d360014a65886e9556d28e66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87ecfb0f9675ef46d360014a65886e9556d28e66/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fcf646c9b08e7f846d6c99314f937ace50809d7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcf646c9b08e7f846d6c99314f937ace50809d7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fcf646c9b08e7f846d6c99314f937ace50809d7a"
      },
      {
        "sha": "5ebe0956b391cfa782fd97bb417d20b479df6a36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ebe0956b391cfa782fd97bb417d20b479df6a36",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ebe0956b391cfa782fd97bb417d20b479df6a36"
      }
    ],
    "stats": {
      "total": 433,
      "additions": 308,
      "deletions": 125
    },
    "files": [
      {
        "sha": "c8f32d8bfd151a92896f2a1cb6038f526c81f08a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ecfb0f9675ef46d360014a65886e9556d28e66/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ecfb0f9675ef46d360014a65886e9556d28e66/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=87ecfb0f9675ef46d360014a65886e9556d28e66",
        "patch": "@@ -234,6 +234,26 @@ bool static Bind(const CService &addr, unsigned int flags) {\n     return true;\n }\n \n+void OnRPCStopped()\n+{\n+    cvBlockChange.notify_all();\n+    LogPrint(\"rpc\", \"RPC stopped.\\n\");\n+}\n+\n+void OnRPCPreCommand(const CRPCCommand& cmd)\n+{\n+#ifdef ENABLE_WALLET\n+    if (cmd.reqWallet && !pwalletMain)\n+        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found (disabled)\");\n+#endif\n+\n+    // Observe safe mode\n+    string strWarning = GetWarnings(\"rpc\");\n+    if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\", false) &&\n+        !cmd.okSafeMode)\n+        throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, string(\"Safe mode: \") + strWarning);\n+}\n+\n std::string HelpMessage(HelpMessageMode mode)\n {\n     // When adding new options to the categories, please keep and ensure alphabetical ordering.\n@@ -802,6 +822,8 @@ bool AppInit2(boost::thread_group& threadGroup)\n     if (fServer)\n     {\n         uiInterface.InitMessage.connect(SetRPCWarmupStatus);\n+        RPCServer::OnStopped(&OnRPCStopped);\n+        RPCServer::OnPreCommand(&OnRPCPreCommand);\n         StartRPCThreads();\n     }\n "
      },
      {
        "sha": "293d6d5619a2325bfba31b077c226e4c3e8aaf82",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=87ecfb0f9675ef46d360014a65886e9556d28e66",
        "patch": "@@ -105,6 +105,7 @@ Value getblockcount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getblockcount\", \"\")\n         );\n \n+    LOCK(cs_main);\n     return chainActive.Height();\n }\n \n@@ -121,6 +122,7 @@ Value getbestblockhash(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getbestblockhash\", \"\")\n         );\n \n+    LOCK(cs_main);\n     return chainActive.Tip()->GetBlockHash().GetHex();\n }\n \n@@ -137,6 +139,7 @@ Value getdifficulty(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getdifficulty\", \"\")\n         );\n \n+    LOCK(cs_main);\n     return GetDifficulty();\n }\n \n@@ -173,6 +176,8 @@ Value getrawmempool(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getrawmempool\", \"true\")\n         );\n \n+    LOCK(cs_main);\n+\n     bool fVerbose = false;\n     if (params.size() > 0)\n         fVerbose = params[0].get_bool();\n@@ -233,6 +238,8 @@ Value getblockhash(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getblockhash\", \"1000\")\n         );\n \n+    LOCK(cs_main);\n+\n     int nHeight = params[0].get_int();\n     if (nHeight < 0 || nHeight > chainActive.Height())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block height out of range\");\n@@ -277,6 +284,8 @@ Value getblock(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n         );\n \n+    LOCK(cs_main);\n+\n     std::string strHash = params[0].get_str();\n     uint256 hash(uint256S(strHash));\n \n@@ -326,6 +335,8 @@ Value gettxoutsetinfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"gettxoutsetinfo\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     Object ret;\n \n     CCoinsStats stats;\n@@ -380,6 +391,8 @@ Value gettxout(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"gettxout\", \"\\\"txid\\\", 1\")\n         );\n \n+    LOCK(cs_main);\n+\n     Object ret;\n \n     std::string strHash = params[0].get_str();\n@@ -436,6 +449,8 @@ Value verifychain(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"verifychain\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     int nCheckLevel = GetArg(\"-checklevel\", 3);\n     int nCheckDepth = GetArg(\"-checkblocks\", 288);\n     if (params.size() > 0)\n@@ -467,6 +482,8 @@ Value getblockchaininfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getblockchaininfo\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     Object obj;\n     obj.push_back(Pair(\"chain\",                 Params().NetworkIDString()));\n     obj.push_back(Pair(\"blocks\",                (int)chainActive.Height()));\n@@ -526,6 +543,8 @@ Value getchaintips(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getchaintips\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     /* Build up a list of chain tips.  We start with the list of all\n        known blocks, and successively remove blocks that appear as pprev\n        of another block.  */"
      },
      {
        "sha": "b9c92a06c5deb2e8696019a51d0d29fa69a41c95",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=87ecfb0f9675ef46d360014a65886e9556d28e66",
        "patch": "@@ -91,6 +91,8 @@ Value importprivkey(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"importprivkey\", \"\\\"mykey\\\", \\\"testing\\\", false\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     EnsureWalletIsUnlocked();\n \n     string strSecret = params[0].get_str();\n@@ -158,6 +160,8 @@ Value importaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"importaddress\", \"\\\"myaddress\\\", \\\"testing\\\", false\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     CScript script;\n \n     CBitcoinAddress address(params[0].get_str());\n@@ -223,6 +227,8 @@ Value importwallet(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"importwallet\", \"\\\"test\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     EnsureWalletIsUnlocked();\n \n     ifstream file;\n@@ -322,6 +328,8 @@ Value dumpprivkey(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"dumpprivkey\", \"\\\"myaddress\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     EnsureWalletIsUnlocked();\n \n     string strAddress = params[0].get_str();\n@@ -351,6 +359,8 @@ Value dumpwallet(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"dumpwallet\", \"\\\"test\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     EnsureWalletIsUnlocked();\n \n     ofstream file;"
      },
      {
        "sha": "369b3fb4d7872639d305033b3bacdacf10f78230",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=87ecfb0f9675ef46d360014a65886e9556d28e66",
        "patch": "@@ -88,6 +88,7 @@ Value getnetworkhashps(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getnetworkhashps\", \"\")\n        );\n \n+    LOCK(cs_main);\n     return GetNetworkHashPS(params.size() > 0 ? params[0].get_int() : 120, params.size() > 1 ? params[1].get_int() : -1);\n }\n \n@@ -107,6 +108,7 @@ Value getgenerate(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getgenerate\", \"\")\n         );\n \n+    LOCK(cs_main);\n     return GetBoolArg(\"-gen\", false);\n }\n \n@@ -200,7 +202,6 @@ Value setgenerate(const Array& params, bool fHelp)\n \n     return Value::null;\n }\n-\n #endif\n \n \n@@ -228,6 +229,9 @@ Value getmininginfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getmininginfo\", \"\")\n         );\n \n+\n+    LOCK(cs_main);\n+\n     Object obj;\n     obj.push_back(Pair(\"blocks\",           (int)chainActive.Height()));\n     obj.push_back(Pair(\"currentblocksize\", (uint64_t)nLastBlockSize));\n@@ -268,8 +272,9 @@ Value prioritisetransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"prioritisetransaction\", \"\\\"txid\\\", 0.0, 10000\")\n         );\n \n-    uint256 hash = ParseHashStr(params[0].get_str(), \"txid\");\n+    LOCK(cs_main);\n \n+    uint256 hash = ParseHashStr(params[0].get_str(), \"txid\");\n     CAmount nAmount = params[2].get_int64();\n \n     mempool.PrioritiseTransaction(hash, params[0].get_str(), params[1].get_real(), nAmount);\n@@ -358,6 +363,8 @@ Value getblocktemplate(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getblocktemplate\", \"\")\n          );\n \n+    LOCK(cs_main);\n+\n     std::string strMode = \"template\";\n     Value lpval = Value::null;\n     if (params.size() > 0)"
      },
      {
        "sha": "8d260b1cc9b0cc657f3e1990ae0b82aad9dbbfcb",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=87ecfb0f9675ef46d360014a65886e9556d28e66",
        "patch": "@@ -69,6 +69,12 @@ Value getinfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getinfo\", \"\")\n         );\n \n+#ifdef ENABLE_WALLET\n+    LOCK2(cs_main, pwalletMain ? &pwalletMain->cs_wallet : NULL);\n+#else\n+    LOCK(cs_main);\n+#endif\n+\n     proxyType proxy;\n     GetProxy(NET_IPV4, proxy);\n \n@@ -172,6 +178,12 @@ Value validateaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n         );\n \n+#ifdef ENABLE_WALLET\n+    LOCK2(cs_main, pwalletMain ? &pwalletMain->cs_wallet : NULL);\n+#else\n+    LOCK(cs_main);\n+#endif\n+\n     CBitcoinAddress address(params[0].get_str());\n     bool isValid = address.IsValid();\n \n@@ -329,6 +341,8 @@ Value verifymessage(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"signature\\\", \\\"my message\\\"\")\n         );\n \n+    LOCK(cs_main);\n+\n     string strAddress  = params[0].get_str();\n     string strSign     = params[1].get_str();\n     string strMessage  = params[2].get_str();\n@@ -372,6 +386,8 @@ Value setmocktime(const Array& params, bool fHelp)\n     if (!Params().MineBlocksOnDemand())\n         throw runtime_error(\"setmocktime for regression testing (-regtest mode) only\");\n \n+    LOCK(cs_main);\n+\n     RPCTypeCheck(params, boost::assign::list_of(int_type));\n     SetMockTime(params[0].get_int64());\n "
      },
      {
        "sha": "6306fd4406051fca36646e28ffd79c9796c791ef",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=87ecfb0f9675ef46d360014a65886e9556d28e66",
        "patch": "@@ -34,7 +34,8 @@ Value getconnectioncount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getconnectioncount\", \"\")\n         );\n \n-    LOCK(cs_vNodes);\n+    LOCK2(cs_main, cs_vNodes);\n+\n     return (int)vNodes.size();\n }\n \n@@ -52,7 +53,8 @@ Value ping(const Array& params, bool fHelp)\n         );\n \n     // Request that each node send a ping during next message processing pass\n-    LOCK(cs_vNodes);\n+    LOCK2(cs_main, cs_vNodes);\n+\n     BOOST_FOREACH(CNode* pNode, vNodes) {\n         pNode->fPingQueued = true;\n     }\n@@ -113,6 +115,8 @@ Value getpeerinfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getpeerinfo\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     vector<CNodeStats> vstats;\n     CopyNodeStats(vstats);\n \n@@ -411,6 +415,8 @@ Value getnetworkinfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getnetworkinfo\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     Object obj;\n     obj.push_back(Pair(\"version\",       CLIENT_VERSION));\n     obj.push_back(Pair(\"subversion\","
      },
      {
        "sha": "4a079f5c81fbcf3b179327473ed252e79239d218",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=87ecfb0f9675ef46d360014a65886e9556d28e66",
        "patch": "@@ -169,6 +169,8 @@ Value getrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getrawtransaction\", \"\\\"mytxid\\\", 1\")\n         );\n \n+    LOCK(cs_main);\n+\n     uint256 hash = ParseHashV(params[0], \"parameter 1\");\n \n     bool fVerbose = false;\n@@ -256,6 +258,7 @@ Value listunspent(const Array& params, bool fHelp)\n     Array results;\n     vector<COutput> vecOutputs;\n     assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n     pwalletMain->AvailableCoins(vecOutputs, false);\n     BOOST_FOREACH(const COutput& out, vecOutputs) {\n         if (out.nDepth < nMinDepth || out.nDepth > nMaxDepth)\n@@ -334,6 +337,7 @@ Value createrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"{\\\\\\\"address\\\\\\\":0.01}\\\"\")\n         );\n \n+    LOCK(cs_main);\n     RPCTypeCheck(params, boost::assign::list_of(array_type)(obj_type));\n \n     Array inputs = params[0].get_array();\n@@ -428,6 +432,7 @@ Value decoderawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"decoderawtransaction\", \"\\\"hexstring\\\"\")\n         );\n \n+    LOCK(cs_main);\n     RPCTypeCheck(params, boost::assign::list_of(str_type));\n \n     CTransaction tx;\n@@ -466,6 +471,7 @@ Value decodescript(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"decodescript\", \"\\\"hexstring\\\"\")\n         );\n \n+    LOCK(cs_main);\n     RPCTypeCheck(params, boost::assign::list_of(str_type));\n \n     Object r;\n@@ -532,6 +538,11 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n         );\n \n+#ifdef ENABLE_WALLET\n+    LOCK2(cs_main, pwalletMain ? &pwalletMain->cs_wallet : NULL);\n+#else\n+    LOCK(cs_main);\n+#endif\n     RPCTypeCheck(params, boost::assign::list_of(str_type)(array_type)(array_type)(str_type), true);\n \n     vector<unsigned char> txData(ParseHexV(params[0], \"argument 1\"));\n@@ -591,7 +602,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         }\n     }\n #ifdef ENABLE_WALLET\n-    else\n+    else if (pwalletMain)\n         EnsureWalletIsUnlocked();\n #endif\n \n@@ -722,6 +733,7 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"sendrawtransaction\", \"\\\"signedhex\\\"\")\n         );\n \n+    LOCK(cs_main);\n     RPCTypeCheck(params, boost::assign::list_of(str_type)(bool_type));\n \n     // parse hex string from parameter"
      },
      {
        "sha": "823b1fcf240b3e41e967c0f68c48bb430fec4e3d",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 123,
        "deletions": 117,
        "changes": 240,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=87ecfb0f9675ef46d360014a65886e9556d28e66",
        "patch": "@@ -7,9 +7,11 @@\n \n #include \"base58.h\"\n #include \"init.h\"\n-#include \"main.h\"\n+#include \"random.h\"\n+#include \"sync.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet.h\"\n #endif\n@@ -23,11 +25,13 @@\n #include <boost/iostreams/concepts.hpp>\n #include <boost/iostreams/stream.hpp>\n #include <boost/shared_ptr.hpp>\n+#include <boost/signals2/signal.hpp>\n #include <boost/thread.hpp>\n #include \"json/json_spirit_writer_template.h\"\n \n using namespace boost::asio;\n using namespace json_spirit;\n+using namespace RPCServer;\n using namespace std;\n \n static std::string strRPCUserColonPass;\n@@ -46,6 +50,34 @@ static boost::asio::io_service::work *rpc_dummy_work = NULL;\n static std::vector<CSubNet> rpc_allow_subnets; //!< List of subnets to allow RPC connections from\n static std::vector< boost::shared_ptr<ip::tcp::acceptor> > rpc_acceptors;\n \n+static struct CRPCSignals\n+{\n+    boost::signals2::signal<void ()> Started;\n+    boost::signals2::signal<void ()> Stopped;\n+    boost::signals2::signal<void (const CRPCCommand&)> PreCommand;\n+    boost::signals2::signal<void (const CRPCCommand&)> PostCommand;\n+} g_rpcSignals;\n+\n+void RPCServer::OnStarted(boost::function<void ()> slot)\n+{\n+    g_rpcSignals.Started.connect(slot);\n+}\n+\n+void RPCServer::OnStopped(boost::function<void ()> slot)\n+{\n+    g_rpcSignals.Stopped.connect(slot);\n+}\n+\n+void RPCServer::OnPreCommand(boost::function<void (const CRPCCommand&)> slot)\n+{\n+    g_rpcSignals.PreCommand.connect(boost::bind(slot, _1));\n+}\n+\n+void RPCServer::OnPostCommand(boost::function<void (const CRPCCommand&)> slot)\n+{\n+    g_rpcSignals.PostCommand.connect(boost::bind(slot, _1));\n+}\n+\n void RPCTypeCheck(const Array& params,\n                   const list<Value_type>& typesExpected,\n                   bool fAllowNull)\n@@ -239,112 +271,110 @@ Value stop(const Array& params, bool fHelp)\n  * Call Table\n  */\n static const CRPCCommand vRPCCommands[] =\n-{ //  category              name                      actor (function)         okSafeMode threadSafe reqWallet\n-  //  --------------------- ------------------------  -----------------------  ---------- ---------- ---------\n+{ //  category              name                      actor (function)         okSafeMode reqWallet\n+  //  --------------------- ------------------------  -----------------------  ---------- ---------\n     /* Overall control/query calls */\n-    { \"control\",            \"getinfo\",                &getinfo,                true,      false,      false }, /* uses wallet if enabled */\n-    { \"control\",            \"help\",                   &help,                   true,      true,       false },\n-    { \"control\",            \"stop\",                   &stop,                   true,      true,       false },\n+    { \"control\",            \"getinfo\",                &getinfo,                true,      false }, /* uses wallet if enabled */\n+    { \"control\",            \"help\",                   &help,                   true,      false },\n+    { \"control\",            \"stop\",                   &stop,                   true,      false },\n \n     /* P2P networking */\n-    { \"network\",            \"getnetworkinfo\",         &getnetworkinfo,         true,      false,      false },\n-    { \"network\",            \"addnode\",                &addnode,                true,      true,       false },\n-    { \"network\",            \"getaddednodeinfo\",       &getaddednodeinfo,       true,      true,       false },\n-    { \"network\",            \"getconnectioncount\",     &getconnectioncount,     true,      false,      false },\n-    { \"network\",            \"getnettotals\",           &getnettotals,           true,      true,       false },\n-    { \"network\",            \"getpeerinfo\",            &getpeerinfo,            true,      false,      false },\n-    { \"network\",            \"ping\",                   &ping,                   true,      false,      false },\n+    { \"network\",            \"getnetworkinfo\",         &getnetworkinfo,         true,      false },\n+    { \"network\",            \"addnode\",                &addnode,                true,      false },\n+    { \"network\",            \"getaddednodeinfo\",       &getaddednodeinfo,       true,      false },\n+    { \"network\",            \"getconnectioncount\",     &getconnectioncount,     true,      false },\n+    { \"network\",            \"getnettotals\",           &getnettotals,           true,      false },\n+    { \"network\",            \"getpeerinfo\",            &getpeerinfo,            true,      false },\n+    { \"network\",            \"ping\",                   &ping,                   true,      false },\n \n     /* Block chain and UTXO */\n-    { \"blockchain\",         \"getblockchaininfo\",      &getblockchaininfo,      true,      false,      false },\n-    { \"blockchain\",         \"getbestblockhash\",       &getbestblockhash,       true,      false,      false },\n-    { \"blockchain\",         \"getblockcount\",          &getblockcount,          true,      false,      false },\n-    { \"blockchain\",         \"getblock\",               &getblock,               true,      false,      false },\n-    { \"blockchain\",         \"getblockhash\",           &getblockhash,           true,      false,      false },\n-    { \"blockchain\",         \"getchaintips\",           &getchaintips,           true,      false,      false },\n-    { \"blockchain\",         \"getdifficulty\",          &getdifficulty,          true,      false,      false },\n-    { \"blockchain\",         \"getmempoolinfo\",         &getmempoolinfo,         true,      true,       false },\n-    { \"blockchain\",         \"getrawmempool\",          &getrawmempool,          true,      false,      false },\n-    { \"blockchain\",         \"gettxout\",               &gettxout,               true,      false,      false },\n-    { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        true,      false,      false },\n-    { \"blockchain\",         \"verifychain\",            &verifychain,            true,      false,      false },\n-    { \"blockchain\",         \"invalidateblock\",        &invalidateblock,        true,      true,       false },\n-    { \"blockchain\",         \"reconsiderblock\",        &reconsiderblock,        true,      true,       false },\n+    { \"blockchain\",         \"getblockchaininfo\",      &getblockchaininfo,      true,      false },\n+    { \"blockchain\",         \"getbestblockhash\",       &getbestblockhash,       true,      false },\n+    { \"blockchain\",         \"getblockcount\",          &getblockcount,          true,      false },\n+    { \"blockchain\",         \"getblock\",               &getblock,               true,      false },\n+    { \"blockchain\",         \"getblockhash\",           &getblockhash,           true,      false },\n+    { \"blockchain\",         \"getchaintips\",           &getchaintips,           true,      false },\n+    { \"blockchain\",         \"getdifficulty\",          &getdifficulty,          true,      false },\n+    { \"blockchain\",         \"getmempoolinfo\",         &getmempoolinfo,         true,      false },\n+    { \"blockchain\",         \"getrawmempool\",          &getrawmempool,          true,      false },\n+    { \"blockchain\",         \"gettxout\",               &gettxout,               true,      false },\n+    { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        true,      false },\n+    { \"blockchain\",         \"verifychain\",            &verifychain,            true,      false },\n \n     /* Mining */\n-    { \"mining\",             \"getblocktemplate\",       &getblocktemplate,       true,      false,      false },\n-    { \"mining\",             \"getmininginfo\",          &getmininginfo,          true,      false,      false },\n-    { \"mining\",             \"getnetworkhashps\",       &getnetworkhashps,       true,      false,      false },\n-    { \"mining\",             \"prioritisetransaction\",  &prioritisetransaction,  true,      false,      false },\n-    { \"mining\",             \"submitblock\",            &submitblock,            true,      true,       false },\n+    { \"mining\",             \"getblocktemplate\",       &getblocktemplate,       true,      false },\n+    { \"mining\",             \"getmininginfo\",          &getmininginfo,          true,      false },\n+    { \"mining\",             \"getnetworkhashps\",       &getnetworkhashps,       true,      false },\n+    { \"mining\",             \"prioritisetransaction\",  &prioritisetransaction,  true,      false },\n+    { \"mining\",             \"submitblock\",            &submitblock,            true,      false },\n \n #ifdef ENABLE_WALLET\n     /* Coin generation */\n-    { \"generating\",         \"getgenerate\",            &getgenerate,            true,      false,      false },\n-    { \"generating\",         \"setgenerate\",            &setgenerate,            true,      true,       false },\n+    { \"generating\",         \"getgenerate\",            &getgenerate,            true,      false },\n+    { \"generating\",         \"setgenerate\",            &setgenerate,            true,      false },\n #endif\n \n     /* Raw transactions */\n-    { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   true,      false,      false },\n-    { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   true,      false,      false },\n-    { \"rawtransactions\",    \"decodescript\",           &decodescript,           true,      false,      false },\n-    { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true,      false,      false },\n-    { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false,     false,      false },\n-    { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false,     false,      false }, /* uses wallet if enabled */\n+    { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   true,      false },\n+    { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   true,      false },\n+    { \"rawtransactions\",    \"decodescript\",           &decodescript,           true,      false },\n+    { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true,      false },\n+    { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false,     false },\n+    { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false,     false }, /* uses wallet if enabled */\n \n     /* Utility functions */\n-    { \"util\",               \"createmultisig\",         &createmultisig,         true,      true ,      false },\n-    { \"util\",               \"validateaddress\",        &validateaddress,        true,      false,      false }, /* uses wallet if enabled */\n-    { \"util\",               \"verifymessage\",          &verifymessage,          true,      false,      false },\n-    { \"util\",               \"estimatefee\",            &estimatefee,            true,      true,       false },\n-    { \"util\",               \"estimatepriority\",       &estimatepriority,       true,      true,       false },\n+    { \"util\",               \"createmultisig\",         &createmultisig,         true,      false },\n+    { \"util\",               \"validateaddress\",        &validateaddress,        true,      false }, /* uses wallet if enabled */\n+    { \"util\",               \"verifymessage\",          &verifymessage,          true,      false },\n+    { \"util\",               \"estimatefee\",            &estimatefee,            true,      false },\n+    { \"util\",               \"estimatepriority\",       &estimatepriority,       true,      false },\n \n     /* Not shown in help */\n-    { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true,      true,       false },\n-    { \"hidden\",             \"reconsiderblock\",        &reconsiderblock,        true,      true,       false },\n-    { \"hidden\",             \"setmocktime\",            &setmocktime,            true,      false,      false },\n+    { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true,      false },\n+    { \"hidden\",             \"reconsiderblock\",        &reconsiderblock,        true,      false },\n+    { \"hidden\",             \"setmocktime\",            &setmocktime,            true,      false },\n \n #ifdef ENABLE_WALLET\n     /* Wallet */\n-    { \"wallet\",             \"addmultisigaddress\",     &addmultisigaddress,     true,      false,      true },\n-    { \"wallet\",             \"backupwallet\",           &backupwallet,           true,      false,      true },\n-    { \"wallet\",             \"dumpprivkey\",            &dumpprivkey,            true,      false,      true },\n-    { \"wallet\",             \"dumpwallet\",             &dumpwallet,             true,      false,      true },\n-    { \"wallet\",             \"encryptwallet\",          &encryptwallet,          true,      false,      true },\n-    { \"wallet\",             \"getaccountaddress\",      &getaccountaddress,      true,      false,      true },\n-    { \"wallet\",             \"getaccount\",             &getaccount,             true,      false,      true },\n-    { \"wallet\",             \"getaddressesbyaccount\",  &getaddressesbyaccount,  true,      false,      true },\n-    { \"wallet\",             \"getbalance\",             &getbalance,             false,     false,      true },\n-    { \"wallet\",             \"getnewaddress\",          &getnewaddress,          true,      false,      true },\n-    { \"wallet\",             \"getrawchangeaddress\",    &getrawchangeaddress,    true,      false,      true },\n-    { \"wallet\",             \"getreceivedbyaccount\",   &getreceivedbyaccount,   false,     false,      true },\n-    { \"wallet\",             \"getreceivedbyaddress\",   &getreceivedbyaddress,   false,     false,      true },\n-    { \"wallet\",             \"gettransaction\",         &gettransaction,         false,     false,      true },\n-    { \"wallet\",             \"getunconfirmedbalance\",  &getunconfirmedbalance,  false,     false,      true },\n-    { \"wallet\",             \"getwalletinfo\",          &getwalletinfo,          false,     false,      true },\n-    { \"wallet\",             \"importprivkey\",          &importprivkey,          true,      false,      true },\n-    { \"wallet\",             \"importwallet\",           &importwallet,           true,      false,      true },\n-    { \"wallet\",             \"importaddress\",          &importaddress,          true,      false,      true },\n-    { \"wallet\",             \"keypoolrefill\",          &keypoolrefill,          true,      false,      true },\n-    { \"wallet\",             \"listaccounts\",           &listaccounts,           false,     false,      true },\n-    { \"wallet\",             \"listaddressgroupings\",   &listaddressgroupings,   false,     false,      true },\n-    { \"wallet\",             \"listlockunspent\",        &listlockunspent,        false,     false,      true },\n-    { \"wallet\",             \"listreceivedbyaccount\",  &listreceivedbyaccount,  false,     false,      true },\n-    { \"wallet\",             \"listreceivedbyaddress\",  &listreceivedbyaddress,  false,     false,      true },\n-    { \"wallet\",             \"listsinceblock\",         &listsinceblock,         false,     false,      true },\n-    { \"wallet\",             \"listtransactions\",       &listtransactions,       false,     false,      true },\n-    { \"wallet\",             \"listunspent\",            &listunspent,            false,     false,      true },\n-    { \"wallet\",             \"lockunspent\",            &lockunspent,            true,      false,      true },\n-    { \"wallet\",             \"move\",                   &movecmd,                false,     false,      true },\n-    { \"wallet\",             \"sendfrom\",               &sendfrom,               false,     false,      true },\n-    { \"wallet\",             \"sendmany\",               &sendmany,               false,     false,      true },\n-    { \"wallet\",             \"sendtoaddress\",          &sendtoaddress,          false,     false,      true },\n-    { \"wallet\",             \"setaccount\",             &setaccount,             true,      false,      true },\n-    { \"wallet\",             \"settxfee\",               &settxfee,               true,      false,      true },\n-    { \"wallet\",             \"signmessage\",            &signmessage,            true,      false,      true },\n-    { \"wallet\",             \"walletlock\",             &walletlock,             true,      false,      true },\n-    { \"wallet\",             \"walletpassphrasechange\", &walletpassphrasechange, true,      false,      true },\n-    { \"wallet\",             \"walletpassphrase\",       &walletpassphrase,       true,      false,      true },\n+    { \"wallet\",             \"addmultisigaddress\",     &addmultisigaddress,     true,      true },\n+    { \"wallet\",             \"backupwallet\",           &backupwallet,           true,      true },\n+    { \"wallet\",             \"dumpprivkey\",            &dumpprivkey,            true,      true },\n+    { \"wallet\",             \"dumpwallet\",             &dumpwallet,             true,      true },\n+    { \"wallet\",             \"encryptwallet\",          &encryptwallet,          true,      true },\n+    { \"wallet\",             \"getaccountaddress\",      &getaccountaddress,      true,      true },\n+    { \"wallet\",             \"getaccount\",             &getaccount,             true,      true },\n+    { \"wallet\",             \"getaddressesbyaccount\",  &getaddressesbyaccount,  true,      true },\n+    { \"wallet\",             \"getbalance\",             &getbalance,             false,     true },\n+    { \"wallet\",             \"getnewaddress\",          &getnewaddress,          true,      true },\n+    { \"wallet\",             \"getrawchangeaddress\",    &getrawchangeaddress,    true,      true },\n+    { \"wallet\",             \"getreceivedbyaccount\",   &getreceivedbyaccount,   false,     true },\n+    { \"wallet\",             \"getreceivedbyaddress\",   &getreceivedbyaddress,   false,     true },\n+    { \"wallet\",             \"gettransaction\",         &gettransaction,         false,     true },\n+    { \"wallet\",             \"getunconfirmedbalance\",  &getunconfirmedbalance,  false,     true },\n+    { \"wallet\",             \"getwalletinfo\",          &getwalletinfo,          false,     true },\n+    { \"wallet\",             \"importprivkey\",          &importprivkey,          true,      true },\n+    { \"wallet\",             \"importwallet\",           &importwallet,           true,      true },\n+    { \"wallet\",             \"importaddress\",          &importaddress,          true,      true },\n+    { \"wallet\",             \"keypoolrefill\",          &keypoolrefill,          true,      true },\n+    { \"wallet\",             \"listaccounts\",           &listaccounts,           false,     true },\n+    { \"wallet\",             \"listaddressgroupings\",   &listaddressgroupings,   false,     true },\n+    { \"wallet\",             \"listlockunspent\",        &listlockunspent,        false,     true },\n+    { \"wallet\",             \"listreceivedbyaccount\",  &listreceivedbyaccount,  false,     true },\n+    { \"wallet\",             \"listreceivedbyaddress\",  &listreceivedbyaddress,  false,     true },\n+    { \"wallet\",             \"listsinceblock\",         &listsinceblock,         false,     true },\n+    { \"wallet\",             \"listtransactions\",       &listtransactions,       false,     true },\n+    { \"wallet\",             \"listunspent\",            &listunspent,            false,     true },\n+    { \"wallet\",             \"lockunspent\",            &lockunspent,            true,      true },\n+    { \"wallet\",             \"move\",                   &movecmd,                false,     true },\n+    { \"wallet\",             \"sendfrom\",               &sendfrom,               false,     true },\n+    { \"wallet\",             \"sendmany\",               &sendmany,               false,     true },\n+    { \"wallet\",             \"sendtoaddress\",          &sendtoaddress,          false,     true },\n+    { \"wallet\",             \"setaccount\",             &setaccount,             true,      true },\n+    { \"wallet\",             \"settxfee\",               &settxfee,               true,      true },\n+    { \"wallet\",             \"signmessage\",            &signmessage,            true,      true },\n+    { \"wallet\",             \"walletlock\",             &walletlock,             true,      true },\n+    { \"wallet\",             \"walletpassphrasechange\", &walletpassphrasechange, true,      true },\n+    { \"wallet\",             \"walletpassphrase\",       &walletpassphrase,       true,      true },\n #endif // ENABLE_WALLET\n };\n \n@@ -693,6 +723,7 @@ void StartRPCThreads()\n     for (int i = 0; i < GetArg(\"-rpcthreads\", 4); i++)\n         rpc_worker_group->create_thread(boost::bind(&boost::asio::io_service::run, rpc_io_service));\n     fRPCRunning = true;\n+    g_rpcSignals.Started();\n }\n \n void StartDummyRPCThread()\n@@ -735,7 +766,7 @@ void StopRPCThreads()\n     deadlineTimers.clear();\n \n     rpc_io_service->stop();\n-    cvBlockChange.notify_all();\n+    g_rpcSignals.Stopped();\n     if (rpc_worker_group != NULL)\n         rpc_worker_group->join_all();\n     delete rpc_dummy_work; rpc_dummy_work = NULL;\n@@ -978,45 +1009,20 @@ json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_s\n     const CRPCCommand *pcmd = tableRPC[strMethod];\n     if (!pcmd)\n         throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found\");\n-#ifdef ENABLE_WALLET\n-    if (pcmd->reqWallet && !pwalletMain)\n-        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found (disabled)\");\n-#endif\n \n-    // Observe safe mode\n-    string strWarning = GetWarnings(\"rpc\");\n-    if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\", false) &&\n-        !pcmd->okSafeMode)\n-        throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, string(\"Safe mode: \") + strWarning);\n+    g_rpcSignals.PreCommand(*pcmd);\n \n     try\n     {\n         // Execute\n-        Value result;\n-        {\n-            if (pcmd->threadSafe)\n-                result = pcmd->actor(params, false);\n-#ifdef ENABLE_WALLET\n-            else if (!pwalletMain) {\n-                LOCK(cs_main);\n-                result = pcmd->actor(params, false);\n-            } else {\n-                LOCK2(cs_main, pwalletMain->cs_wallet);\n-                result = pcmd->actor(params, false);\n-            }\n-#else // ENABLE_WALLET\n-            else {\n-                LOCK(cs_main);\n-                result = pcmd->actor(params, false);\n-            }\n-#endif // !ENABLE_WALLET\n-        }\n-        return result;\n+        return pcmd->actor(params, false);\n     }\n     catch (const std::exception& e)\n     {\n         throw JSONRPCError(RPC_MISC_ERROR, e.what());\n     }\n+\n+    g_rpcSignals.PostCommand(*pcmd);\n }\n \n std::string HelpExampleCli(string methodname, string args){"
      },
      {
        "sha": "f63438ecb882422f6035c0e8f329d5685dc9fdb0",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=87ecfb0f9675ef46d360014a65886e9556d28e66",
        "patch": "@@ -19,6 +19,16 @@\n #include \"json/json_spirit_utils.h\"\n #include \"json/json_spirit_writer_template.h\"\n \n+class CRPCCommand;\n+\n+namespace RPCServer\n+{\n+    void OnStarted(boost::function<void ()> slot);\n+    void OnStopped(boost::function<void ()> slot);\n+    void OnPreCommand(boost::function<void (const CRPCCommand&)> slot);\n+    void OnPostCommand(boost::function<void (const CRPCCommand&)> slot);\n+}\n+\n class CBlockIndex;\n class CNetAddr;\n \n@@ -88,7 +98,6 @@ class CRPCCommand\n     std::string name;\n     rpcfn_type actor;\n     bool okSafeMode;\n-    bool threadSafe;\n     bool reqWallet;\n };\n "
      },
      {
        "sha": "1afc3c910e43a27cb9d438472bd811b89a500d35",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 67,
        "deletions": 2,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=87ecfb0f9675ef46d360014a65886e9556d28e66",
        "patch": "@@ -90,6 +90,8 @@ Value getnewaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getnewaddress\", \"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     // Parse the account first so we don't generate a key if there's an error\n     string strAccount;\n     if (params.size() > 0)\n@@ -164,13 +166,14 @@ Value getaccountaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getaccountaddress\", \"\\\"myaccount\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     // Parse the account first so we don't generate a key if there's an error\n     string strAccount = AccountFromValue(params[0]);\n \n     Value ret;\n \n     ret = GetAccountAddress(strAccount).ToString();\n-\n     return ret;\n }\n \n@@ -189,6 +192,8 @@ Value getrawchangeaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getrawchangeaddress\", \"\")\n        );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (!pwalletMain->IsLocked())\n         pwalletMain->TopUpKeyPool();\n \n@@ -219,11 +224,12 @@ Value setaccount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"setaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"tabby\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n-\n     string strAccount;\n     if (params.size() > 1)\n         strAccount = AccountFromValue(params[1]);\n@@ -262,6 +268,8 @@ Value getaccount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n@@ -292,6 +300,8 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getaddressesbyaccount\", \"\\\"tabby\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strAccount = AccountFromValue(params[0]);\n \n     // Find all addresses that have the given account\n@@ -363,6 +373,8 @@ Value sendtoaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\", 0.1, \\\"donation\\\", \\\"seans outpost\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n@@ -409,6 +421,8 @@ Value listaddressgroupings(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listaddressgroupings\", \"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     Array jsonGroupings;\n     map<CTxDestination, CAmount> balances = pwalletMain->GetAddressBalances();\n     BOOST_FOREACH(set<CTxDestination> grouping, pwalletMain->GetAddressGroupings())\n@@ -454,6 +468,8 @@ Value signmessage(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"my message\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     EnsureWalletIsUnlocked();\n \n     string strAddress = params[0].get_str();\n@@ -504,6 +520,8 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", 6\")\n        );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     // Bitcoin address\n     CBitcoinAddress address = CBitcoinAddress(params[0].get_str());\n     if (!address.IsValid())\n@@ -557,6 +575,8 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getreceivedbyaccount\", \"\\\"tabby\\\", 6\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     // Minimum confirmations\n     int nMinDepth = 1;\n     if (params.size() > 1)\n@@ -643,6 +663,8 @@ Value getbalance(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getbalance\", \"\\\"*\\\", 6\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (params.size() == 0)\n         return  ValueFromAmount(pwalletMain->GetBalance());\n \n@@ -695,6 +717,9 @@ Value getunconfirmedbalance(const Array &params, bool fHelp)\n         throw runtime_error(\n                 \"getunconfirmedbalance\\n\"\n                 \"Returns the server's total unconfirmed balance\\n\");\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     return ValueFromAmount(pwalletMain->GetUnconfirmedBalance());\n }\n \n@@ -721,6 +746,8 @@ Value movecmd(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"move\", \"\\\"timotei\\\", \\\"akiko\\\", 0.01, 6, \\\"happy birthday!\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strFrom = AccountFromValue(params[0]);\n     string strTo = AccountFromValue(params[1]);\n     CAmount nAmount = AmountFromValue(params[2]);\n@@ -793,6 +820,8 @@ Value sendfrom(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"sendfrom\", \"\\\"tabby\\\", \\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\", 0.01, 6, \\\"donation\\\", \\\"seans outpost\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strAccount = AccountFromValue(params[0]);\n     CBitcoinAddress address(params[1].get_str());\n     if (!address.IsValid())\n@@ -850,6 +879,8 @@ Value sendmany(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"sendmany\", \"\\\"\\\", \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\", 6, \\\"testing\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strAccount = AccountFromValue(params[0]);\n     Object sendTo = params[1].get_obj();\n     int nMinDepth = 1;\n@@ -935,6 +966,8 @@ Value addmultisigaddress(const Array& params, bool fHelp)\n         throw runtime_error(msg);\n     }\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strAccount;\n     if (params.size() > 2)\n         strAccount = AccountFromValue(params[2]);\n@@ -1110,6 +1143,8 @@ Value listreceivedbyaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listreceivedbyaddress\", \"6, true, true\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     return ListReceived(params, false);\n }\n \n@@ -1141,6 +1176,8 @@ Value listreceivedbyaccount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listreceivedbyaccount\", \"6, true, true\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     return ListReceived(params, true);\n }\n \n@@ -1292,6 +1329,8 @@ Value listtransactions(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listtransactions\", \"\\\"*\\\", 20, 100\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strAccount = \"*\";\n     if (params.size() > 0)\n         strAccount = params[0].get_str();\n@@ -1372,6 +1411,8 @@ Value listaccounts(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listaccounts\", \"6\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     int nMinDepth = 1;\n     if (params.size() > 0)\n         nMinDepth = params[0].get_int();\n@@ -1460,6 +1501,8 @@ Value listsinceblock(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listsinceblock\", \"\\\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\\\", 6\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     CBlockIndex *pindex = NULL;\n     int target_confirms = 1;\n     isminefilter filter = ISMINE_SPENDABLE;\n@@ -1546,6 +1589,8 @@ Value gettransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     uint256 hash;\n     hash.SetHex(params[0].get_str());\n \n@@ -1594,6 +1639,8 @@ Value backupwallet(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"backupwallet\", \"\\\"backup.dat\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strDest = params[0].get_str();\n     if (!BackupWallet(*pwalletMain, strDest))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Wallet backup failed!\");\n@@ -1616,6 +1663,8 @@ Value keypoolrefill(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"keypoolrefill\", \"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     // 0 is interpreted by TopUpKeyPool() as the default keypool size given by -keypool\n     unsigned int kpSize = 0;\n     if (params.size() > 0) {\n@@ -1663,6 +1712,8 @@ Value walletpassphrase(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"walletpassphrase\", \"\\\"my pass phrase\\\", 60\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n@@ -1710,6 +1761,8 @@ Value walletpassphrasechange(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"walletpassphrasechange\", \"\\\"old one\\\", \\\"new one\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n@@ -1756,6 +1809,8 @@ Value walletlock(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"walletlock\", \"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n@@ -1797,6 +1852,8 @@ Value encryptwallet(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"encryptwallet\", \"\\\"my pass phrase\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (fHelp)\n         return true;\n     if (pwalletMain->IsCrypted())\n@@ -1861,6 +1918,8 @@ Value lockunspent(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"lockunspent\", \"false, \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (params.size() == 1)\n         RPCTypeCheck(params, boost::assign::list_of(bool_type));\n     else\n@@ -1930,6 +1989,8 @@ Value listlockunspent(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listlockunspent\", \"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     vector<COutPoint> vOutpts;\n     pwalletMain->ListLockedCoins(vOutpts);\n \n@@ -1961,6 +2022,8 @@ Value settxfee(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"settxfee\", \"0.00001\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     // Amount\n     CAmount nAmount = 0;\n     if (params[0].get_real() != 0.0)\n@@ -1992,6 +2055,8 @@ Value getwalletinfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getwalletinfo\", \"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     Object obj;\n     obj.push_back(Pair(\"walletversion\", pwalletMain->GetVersion()));\n     obj.push_back(Pair(\"balance\",       ValueFromAmount(pwalletMain->GetBalance())));"
      },
      {
        "sha": "27e80e813b77ca0754d8e2a8165a35ffb97d6fe5",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ecfb0f9675ef46d360014a65886e9556d28e66/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ecfb0f9675ef46d360014a65886e9556d28e66/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=87ecfb0f9675ef46d360014a65886e9556d28e66",
        "patch": "@@ -142,6 +142,17 @@ class CMutexLock\n             Enter(pszName, pszFile, nLine);\n     }\n \n+    CMutexLock(Mutex* pmutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false)\n+    {\n+        if (!pmutexIn) return;\n+\n+        lock = boost::unique_lock<Mutex>(*pmutexIn, boost::defer_lock);\n+        if (fTry)\n+            TryEnter(pszName, pszFile, nLine);\n+        else\n+            Enter(pszName, pszFile, nLine);\n+    }\n+\n     ~CMutexLock()\n     {\n         if (lock.owns_lock())"
      }
    ]
  },
  {
    "sha": "31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMWRlZGI0NjNiMGNlNzczNjRlNTE2MjM5YmYxYjljN2VlZDViM2Iw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-04T11:56:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-04T12:06:16Z"
      },
      "message": "Merge pull request #5509\n\n7f991e3 c++11: These look like user-defined literals. (Cory Fields)\n5a6155c c++11: don't forward-declare types used in maps (Cory Fields)\n3447cf8 c++11: MOVEONLY: break circular dependency in wallet (Cory Fields)\nbbacd88 c++11: MOVEONLY: move function definitions out of the header (Cory Fields)\na2b04dd build: fix newer boost build with c++11 (Cory Fields)",
      "tree": {
        "sha": "737f42a6f13f8b1521d42795ba339527f50f8535",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/737f42a6f13f8b1521d42795ba339527f50f8535"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU0gs4AAoJEHSBCwEjRsmmOFYIAM49W6yU6dR3mM/DV5bAAN0g\nevkbpoMkNE0bbNryJg8t4/kcsaMvtb34rEj7mPo+Uxg9ALEsAGJdwKhzAcnayIxj\nRdlFX7/5HHtRL+LH85H+EgFAFypWZlXnK8brPEqufOa4oguTRn0RDJejzFICxJJI\nKS09vrj5jMN3Wu0Rv6bjwLVAcc7/6VsbHs0qeQamUpbg+Bz74wclkO5VYrbLf1xN\n653pgrep5Wd3ERV/wJ/rODUpFm/sp2XH2NTLNBjlS1fY9I27nuyQoXoZMdaNOTiC\nQR5WN8Umcr9z0roC/EAhNfomAh6g818NhmtFjWdr964q/hABvkQb+lRvk7my7Mg=\n=7hBR\n-----END PGP SIGNATURE-----",
        "payload": "tree 737f42a6f13f8b1521d42795ba339527f50f8535\nparent 87ecfb0f9675ef46d360014a65886e9556d28e66\nparent 7f991e364eb50bd14970de9d96981a7ca268d4aa\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423050980 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423051576 +0100\n\nMerge pull request #5509\n\n7f991e3 c++11: These look like user-defined literals. (Cory Fields)\n5a6155c c++11: don't forward-declare types used in maps (Cory Fields)\n3447cf8 c++11: MOVEONLY: break circular dependency in wallet (Cory Fields)\nbbacd88 c++11: MOVEONLY: move function definitions out of the header (Cory Fields)\na2b04dd build: fix newer boost build with c++11 (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31dedb463b0ce77364e516239bf1b9c7eed5b3b0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "87ecfb0f9675ef46d360014a65886e9556d28e66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87ecfb0f9675ef46d360014a65886e9556d28e66",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87ecfb0f9675ef46d360014a65886e9556d28e66"
      },
      {
        "sha": "7f991e364eb50bd14970de9d96981a7ca268d4aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f991e364eb50bd14970de9d96981a7ca268d4aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f991e364eb50bd14970de9d96981a7ca268d4aa"
      }
    ],
    "stats": {
      "total": 1443,
      "additions": 724,
      "deletions": 719
    },
    "files": [
      {
        "sha": "1fd3b0168125e1c64fd4923ed5e4730f9ab9c035",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31dedb463b0ce77364e516239bf1b9c7eed5b3b0/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31dedb463b0ce77364e516239bf1b9c7eed5b3b0/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
        "patch": "@@ -156,11 +156,11 @@ class CMainParams : public CChainParams {\n         vSeeds.push_back(CDNSSeedData(\"bitcoinstats.com\", \"seed.bitcoinstats.com\"));\n         vSeeds.push_back(CDNSSeedData(\"xf2.org\", \"bitseed.xf2.org\"));\n \n-        base58Prefixes[PUBKEY_ADDRESS] = boost::assign::list_of(0);\n-        base58Prefixes[SCRIPT_ADDRESS] = boost::assign::list_of(5);\n-        base58Prefixes[SECRET_KEY] =     boost::assign::list_of(128);\n-        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x88)(0xB2)(0x1E);\n-        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x88)(0xAD)(0xE4);\n+        base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,0);\n+        base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,5);\n+        base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,128);\n+        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x88)(0xB2)(0x1E).convert_to_container<std::vector<unsigned char> >();\n+        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x88)(0xAD)(0xE4).convert_to_container<std::vector<unsigned char> >();\n \n         convertSeed6(vFixedSeeds, pnSeed6_main, ARRAYLEN(pnSeed6_main));\n \n@@ -214,11 +214,11 @@ class CTestNetParams : public CMainParams {\n         vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"testnet-seed.bluematt.me\"));\n         vSeeds.push_back(CDNSSeedData(\"bitcoin.schildbach.de\", \"testnet-seed.bitcoin.schildbach.de\"));\n \n-        base58Prefixes[PUBKEY_ADDRESS] = boost::assign::list_of(111);\n-        base58Prefixes[SCRIPT_ADDRESS] = boost::assign::list_of(196);\n-        base58Prefixes[SECRET_KEY]     = boost::assign::list_of(239);\n-        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x35)(0x87)(0xCF);\n-        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94);\n+        base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,111);\n+        base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,196);\n+        base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,239);\n+        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x35)(0x87)(0xCF).convert_to_container<std::vector<unsigned char> >();\n+        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94).convert_to_container<std::vector<unsigned char> >();\n \n         convertSeed6(vFixedSeeds, pnSeed6_test, ARRAYLEN(pnSeed6_test));\n "
      },
      {
        "sha": "7531737e04d53d3e84300336fd640cb31e5ac507",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31dedb463b0ce77364e516239bf1b9c7eed5b3b0/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31dedb463b0ce77364e516239bf1b9c7eed5b3b0/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
        "patch": "@@ -7,8 +7,6 @@\n \n #include \"crypter.h\"\n #include \"key.h\"\n-#include \"script/script.h\"\n-#include \"script/standard.h\"\n #include \"util.h\"\n \n #include <boost/foreach.hpp>"
      },
      {
        "sha": "4a4b6d20afe7270ec1a6397925905e185513d674",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31dedb463b0ce77364e516239bf1b9c7eed5b3b0/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31dedb463b0ce77364e516239bf1b9c7eed5b3b0/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
        "patch": "@@ -8,14 +8,13 @@\n \n #include \"key.h\"\n #include \"pubkey.h\"\n+#include \"script/script.h\"\n+#include \"script/standard.h\"\n #include \"sync.h\"\n \n #include <boost/signals2/signal.hpp>\n #include <boost/variant.hpp>\n \n-class CScript;\n-class CScriptID;\n-\n /** A virtual base class for key stores */\n class CKeyStore\n {"
      },
      {
        "sha": "d829ec228db6dda417904bc4347b725d009303f0",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31dedb463b0ce77364e516239bf1b9c7eed5b3b0/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31dedb463b0ce77364e516239bf1b9c7eed5b3b0/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
        "patch": "@@ -282,21 +282,21 @@ BOOST_AUTO_TEST_CASE(strprintf_numbers)\n {\n     int64_t s64t = -9223372036854775807LL; /* signed 64 bit test value */\n     uint64_t u64t = 18446744073709551615ULL; /* unsigned 64 bit test value */\n-    BOOST_CHECK(strprintf(\"%s %d %s\", B, s64t, E) == B\" -9223372036854775807 \"E);\n-    BOOST_CHECK(strprintf(\"%s %u %s\", B, u64t, E) == B\" 18446744073709551615 \"E);\n-    BOOST_CHECK(strprintf(\"%s %x %s\", B, u64t, E) == B\" ffffffffffffffff \"E);\n+    BOOST_CHECK(strprintf(\"%s %d %s\", B, s64t, E) == B\" -9223372036854775807 \" E);\n+    BOOST_CHECK(strprintf(\"%s %u %s\", B, u64t, E) == B\" 18446744073709551615 \" E);\n+    BOOST_CHECK(strprintf(\"%s %x %s\", B, u64t, E) == B\" ffffffffffffffff \" E);\n \n     size_t st = 12345678; /* unsigned size_t test value */\n     ssize_t sst = -12345678; /* signed size_t test value */\n-    BOOST_CHECK(strprintf(\"%s %d %s\", B, sst, E) == B\" -12345678 \"E);\n-    BOOST_CHECK(strprintf(\"%s %u %s\", B, st, E) == B\" 12345678 \"E);\n-    BOOST_CHECK(strprintf(\"%s %x %s\", B, st, E) == B\" bc614e \"E);\n+    BOOST_CHECK(strprintf(\"%s %d %s\", B, sst, E) == B\" -12345678 \" E);\n+    BOOST_CHECK(strprintf(\"%s %u %s\", B, st, E) == B\" 12345678 \" E);\n+    BOOST_CHECK(strprintf(\"%s %x %s\", B, st, E) == B\" bc614e \" E);\n \n     ptrdiff_t pt = 87654321; /* positive ptrdiff_t test value */\n     ptrdiff_t spt = -87654321; /* negative ptrdiff_t test value */\n-    BOOST_CHECK(strprintf(\"%s %d %s\", B, spt, E) == B\" -87654321 \"E);\n-    BOOST_CHECK(strprintf(\"%s %u %s\", B, pt, E) == B\" 87654321 \"E);\n-    BOOST_CHECK(strprintf(\"%s %x %s\", B, pt, E) == B\" 5397fb1 \"E);\n+    BOOST_CHECK(strprintf(\"%s %d %s\", B, spt, E) == B\" -87654321 \" E);\n+    BOOST_CHECK(strprintf(\"%s %u %s\", B, pt, E) == B\" 87654321 \" E);\n+    BOOST_CHECK(strprintf(\"%s %x %s\", B, pt, E) == B\" 5397fb1 \" E);\n }\n #undef B\n #undef E"
      },
      {
        "sha": "b51c4d4b14aaf9f3025f2440eda2530b9f817073",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 187,
        "deletions": 0,
        "changes": 187,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31dedb463b0ce77364e516239bf1b9c7eed5b3b0/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31dedb463b0ce77364e516239bf1b9c7eed5b3b0/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
        "patch": "@@ -1015,6 +1015,193 @@ set<uint256> CWalletTx::GetConflicts() const\n     return result;\n }\n \n+CAmount CWalletTx::GetDebit(const isminefilter& filter) const\n+{\n+    if (vin.empty())\n+        return 0;\n+\n+    CAmount debit = 0;\n+    if(filter & ISMINE_SPENDABLE)\n+    {\n+        if (fDebitCached)\n+            debit += nDebitCached;\n+        else\n+        {\n+            nDebitCached = pwallet->GetDebit(*this, ISMINE_SPENDABLE);\n+            fDebitCached = true;\n+            debit += nDebitCached;\n+        }\n+    }\n+    if(filter & ISMINE_WATCH_ONLY)\n+    {\n+        if(fWatchDebitCached)\n+            debit += nWatchDebitCached;\n+        else\n+        {\n+            nWatchDebitCached = pwallet->GetDebit(*this, ISMINE_WATCH_ONLY);\n+            fWatchDebitCached = true;\n+            debit += nWatchDebitCached;\n+        }\n+    }\n+    return debit;\n+}\n+\n+CAmount CWalletTx::GetCredit(const isminefilter& filter) const\n+{\n+    // Must wait until coinbase is safely deep enough in the chain before valuing it\n+    if (IsCoinBase() && GetBlocksToMaturity() > 0)\n+        return 0;\n+\n+    int64_t credit = 0;\n+    if (filter & ISMINE_SPENDABLE)\n+    {\n+        // GetBalance can assume transactions in mapWallet won't change\n+        if (fCreditCached)\n+            credit += nCreditCached;\n+        else\n+        {\n+            nCreditCached = pwallet->GetCredit(*this, ISMINE_SPENDABLE);\n+            fCreditCached = true;\n+            credit += nCreditCached;\n+        }\n+    }\n+    if (filter & ISMINE_WATCH_ONLY)\n+    {\n+        if (fWatchCreditCached)\n+            credit += nWatchCreditCached;\n+        else\n+        {\n+            nWatchCreditCached = pwallet->GetCredit(*this, ISMINE_WATCH_ONLY);\n+            fWatchCreditCached = true;\n+            credit += nWatchCreditCached;\n+        }\n+    }\n+    return credit;\n+}\n+\n+CAmount CWalletTx::GetImmatureCredit(bool fUseCache) const\n+{\n+    if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n+    {\n+        if (fUseCache && fImmatureCreditCached)\n+            return nImmatureCreditCached;\n+        nImmatureCreditCached = pwallet->GetCredit(*this, ISMINE_SPENDABLE);\n+        fImmatureCreditCached = true;\n+        return nImmatureCreditCached;\n+    }\n+\n+    return 0;\n+}\n+\n+CAmount CWalletTx::GetAvailableCredit(bool fUseCache) const\n+{\n+    if (pwallet == 0)\n+        return 0;\n+\n+    // Must wait until coinbase is safely deep enough in the chain before valuing it\n+    if (IsCoinBase() && GetBlocksToMaturity() > 0)\n+        return 0;\n+\n+    if (fUseCache && fAvailableCreditCached)\n+        return nAvailableCreditCached;\n+\n+    CAmount nCredit = 0;\n+    uint256 hashTx = GetHash();\n+    for (unsigned int i = 0; i < vout.size(); i++)\n+    {\n+        if (!pwallet->IsSpent(hashTx, i))\n+        {\n+            const CTxOut &txout = vout[i];\n+            nCredit += pwallet->GetCredit(txout, ISMINE_SPENDABLE);\n+            if (!MoneyRange(nCredit))\n+                throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n+        }\n+    }\n+\n+    nAvailableCreditCached = nCredit;\n+    fAvailableCreditCached = true;\n+    return nCredit;\n+}\n+\n+CAmount CWalletTx::GetImmatureWatchOnlyCredit(const bool& fUseCache) const\n+{\n+    if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n+    {\n+        if (fUseCache && fImmatureWatchCreditCached)\n+            return nImmatureWatchCreditCached;\n+        nImmatureWatchCreditCached = pwallet->GetCredit(*this, ISMINE_WATCH_ONLY);\n+        fImmatureWatchCreditCached = true;\n+        return nImmatureWatchCreditCached;\n+    }\n+\n+    return 0;\n+}\n+\n+CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool& fUseCache) const\n+{\n+    if (pwallet == 0)\n+        return 0;\n+\n+    // Must wait until coinbase is safely deep enough in the chain before valuing it\n+    if (IsCoinBase() && GetBlocksToMaturity() > 0)\n+        return 0;\n+\n+    if (fUseCache && fAvailableWatchCreditCached)\n+        return nAvailableWatchCreditCached;\n+\n+    CAmount nCredit = 0;\n+    for (unsigned int i = 0; i < vout.size(); i++)\n+    {\n+        if (!pwallet->IsSpent(GetHash(), i))\n+        {\n+            const CTxOut &txout = vout[i];\n+            nCredit += pwallet->GetCredit(txout, ISMINE_WATCH_ONLY);\n+            if (!MoneyRange(nCredit))\n+                throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n+        }\n+    }\n+\n+    nAvailableWatchCreditCached = nCredit;\n+    fAvailableWatchCreditCached = true;\n+    return nCredit;\n+}\n+\n+CAmount CWalletTx::GetChange() const\n+{\n+    if (fChangeCached)\n+        return nChangeCached;\n+    nChangeCached = pwallet->GetChange(*this);\n+    fChangeCached = true;\n+    return nChangeCached;\n+}\n+\n+bool CWalletTx::IsTrusted() const\n+{\n+    // Quick answer in most cases\n+    if (!IsFinalTx(*this))\n+        return false;\n+    int nDepth = GetDepthInMainChain();\n+    if (nDepth >= 1)\n+        return true;\n+    if (nDepth < 0)\n+        return false;\n+    if (!bSpendZeroConfChange || !IsFromMe(ISMINE_ALL)) // using wtx's cached debit\n+        return false;\n+\n+    // Trusted if all inputs are from us and are in the mempool:\n+    BOOST_FOREACH(const CTxIn& txin, vin)\n+    {\n+        // Transactions not sent by us: not trusted\n+        const CWalletTx* parent = pwallet->GetWalletTx(txin.prevout.hash);\n+        if (parent == NULL)\n+            return false;\n+        const CTxOut& parentOut = parent->vout[txin.prevout.n];\n+        if (pwallet->IsMine(parentOut) != ISMINE_SPENDABLE)\n+            return false;\n+    }\n+    return true;\n+}\n+\n void CWallet::ResendWalletTransactions()\n {\n     // Do this infrequently and randomly to avoid giving away"
      },
      {
        "sha": "6ed87d1e687d5f3833fd9050ee456601241bc503",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 516,
        "deletions": 695,
        "changes": 1211,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31dedb463b0ce77364e516239bf1b9c7eed5b3b0/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31dedb463b0ce77364e516239bf1b9c7eed5b3b0/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
        "patch": "@@ -103,114 +103,437 @@ class CAddressBookData\n     StringMap destdata;\n };\n \n-/** \n- * A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n- * and provides the ability to create new transactions.\n- */\n-class CWallet : public CCryptoKeyStore, public CValidationInterface\n+\n+typedef std::map<std::string, std::string> mapValue_t;\n+\n+\n+static void ReadOrderPos(int64_t& nOrderPos, mapValue_t& mapValue)\n+{\n+    if (!mapValue.count(\"n\"))\n+    {\n+        nOrderPos = -1; // TODO: calculate elsewhere\n+        return;\n+    }\n+    nOrderPos = atoi64(mapValue[\"n\"].c_str());\n+}\n+\n+\n+static void WriteOrderPos(const int64_t& nOrderPos, mapValue_t& mapValue)\n+{\n+    if (nOrderPos == -1)\n+        return;\n+    mapValue[\"n\"] = i64tostr(nOrderPos);\n+}\n+\n+struct COutputEntry\n+{\n+    CTxDestination destination;\n+    CAmount amount;\n+    int vout;\n+};\n+\n+/** A transaction with a merkle branch linking it to the block chain. */\n+class CMerkleTx : public CTransaction\n {\n private:\n-    bool SelectCoins(const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl *coinControl = NULL) const;\n+    int GetDepthInMainChainINTERNAL(const CBlockIndex* &pindexRet) const;\n \n-    CWalletDB *pwalletdbEncryption;\n+public:\n+    uint256 hashBlock;\n+    std::vector<uint256> vMerkleBranch;\n+    int nIndex;\n \n-    //! the current wallet version: clients below this version are not able to load the wallet\n-    int nWalletVersion;\n+    // memory only\n+    mutable bool fMerkleVerified;\n \n-    //! the maximum wallet format version: memory-only variable that specifies to what version this wallet may be upgraded\n-    int nWalletMaxVersion;\n \n-    int64_t nNextResend;\n-    int64_t nLastResend;\n+    CMerkleTx()\n+    {\n+        Init();\n+    }\n \n-    /**\n-     * Used to keep track of spent outpoints, and\n-     * detect and report conflicts (double-spends or\n-     * mutated transactions where the mutant gets mined).\n-     */\n-    typedef std::multimap<COutPoint, uint256> TxSpends;\n-    TxSpends mapTxSpends;\n-    void AddToSpends(const COutPoint& outpoint, const uint256& wtxid);\n-    void AddToSpends(const uint256& wtxid);\n+    CMerkleTx(const CTransaction& txIn) : CTransaction(txIn)\n+    {\n+        Init();\n+    }\n \n-    void SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator>);\n+    void Init()\n+    {\n+        hashBlock = uint256();\n+        nIndex = -1;\n+        fMerkleVerified = false;\n+    }\n \n-public:\n-    /*\n-     * Main wallet lock.\n-     * This lock protects all the fields added by CWallet\n-     *   except for:\n-     *      fFileBacked (immutable after instantiation)\n-     *      strWalletFile (immutable after instantiation)\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(*(CTransaction*)this);\n+        nVersion = this->nVersion;\n+        READWRITE(hashBlock);\n+        READWRITE(vMerkleBranch);\n+        READWRITE(nIndex);\n+    }\n+\n+    int SetMerkleBranch(const CBlock& block);\n+\n+\n+    /**\n+     * Return depth of transaction in blockchain:\n+     * -1  : not in blockchain, and not in memory pool (conflicted transaction)\n+     *  0  : in memory pool, waiting to be included in a block\n+     * >=1 : this many blocks deep in the main chain\n      */\n-    mutable CCriticalSection cs_wallet;\n+    int GetDepthInMainChain(const CBlockIndex* &pindexRet) const;\n+    int GetDepthInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n+    bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChainINTERNAL(pindexRet) > 0; }\n+    int GetBlocksToMaturity() const;\n+    bool AcceptToMemoryPool(bool fLimitFree=true, bool fRejectAbsurdFee=true);\n+};\n \n-    bool fFileBacked;\n-    std::string strWalletFile;\n+/** \n+ * A transaction with a bunch of additional info that only the owner cares about.\n+ * It includes any unrecorded transactions needed to link it back to the block chain.\n+ */\n+class CWalletTx : public CMerkleTx\n+{\n+private:\n+    const CWallet* pwallet;\n \n-    std::set<int64_t> setKeyPool;\n-    std::map<CKeyID, CKeyMetadata> mapKeyMetadata;\n+public:\n+    mapValue_t mapValue;\n+    std::vector<std::pair<std::string, std::string> > vOrderForm;\n+    unsigned int fTimeReceivedIsTxTime;\n+    unsigned int nTimeReceived; //! time received by this node\n+    unsigned int nTimeSmart;\n+    char fFromMe;\n+    std::string strFromAccount;\n+    int64_t nOrderPos; //! position in ordered transaction list\n \n-    typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n-    MasterKeyMap mapMasterKeys;\n-    unsigned int nMasterKeyMaxID;\n+    // memory only\n+    mutable bool fDebitCached;\n+    mutable bool fCreditCached;\n+    mutable bool fImmatureCreditCached;\n+    mutable bool fAvailableCreditCached;\n+    mutable bool fWatchDebitCached;\n+    mutable bool fWatchCreditCached;\n+    mutable bool fImmatureWatchCreditCached;\n+    mutable bool fAvailableWatchCreditCached;\n+    mutable bool fChangeCached;\n+    mutable CAmount nDebitCached;\n+    mutable CAmount nCreditCached;\n+    mutable CAmount nImmatureCreditCached;\n+    mutable CAmount nAvailableCreditCached;\n+    mutable CAmount nWatchDebitCached;\n+    mutable CAmount nWatchCreditCached;\n+    mutable CAmount nImmatureWatchCreditCached;\n+    mutable CAmount nAvailableWatchCreditCached;\n+    mutable CAmount nChangeCached;\n \n-    CWallet()\n+    CWalletTx()\n     {\n-        SetNull();\n+        Init(NULL);\n     }\n \n-    CWallet(std::string strWalletFileIn)\n+    CWalletTx(const CWallet* pwalletIn)\n     {\n-        SetNull();\n+        Init(pwalletIn);\n+    }\n \n-        strWalletFile = strWalletFileIn;\n-        fFileBacked = true;\n+    CWalletTx(const CWallet* pwalletIn, const CMerkleTx& txIn) : CMerkleTx(txIn)\n+    {\n+        Init(pwalletIn);\n     }\n \n-    ~CWallet()\n+    CWalletTx(const CWallet* pwalletIn, const CTransaction& txIn) : CMerkleTx(txIn)\n     {\n-        delete pwalletdbEncryption;\n-        pwalletdbEncryption = NULL;\n+        Init(pwalletIn);\n     }\n \n-    void SetNull()\n+    void Init(const CWallet* pwalletIn)\n     {\n-        nWalletVersion = FEATURE_BASE;\n-        nWalletMaxVersion = FEATURE_BASE;\n-        fFileBacked = false;\n-        nMasterKeyMaxID = 0;\n-        pwalletdbEncryption = NULL;\n-        nOrderPosNext = 0;\n-        nNextResend = 0;\n-        nLastResend = 0;\n-        nTimeFirstKey = 0;\n+        pwallet = pwalletIn;\n+        mapValue.clear();\n+        vOrderForm.clear();\n+        fTimeReceivedIsTxTime = false;\n+        nTimeReceived = 0;\n+        nTimeSmart = 0;\n+        fFromMe = false;\n+        strFromAccount.clear();\n+        fDebitCached = false;\n+        fCreditCached = false;\n+        fImmatureCreditCached = false;\n+        fAvailableCreditCached = false;\n+        fWatchDebitCached = false;\n+        fWatchCreditCached = false;\n+        fImmatureWatchCreditCached = false;\n+        fAvailableWatchCreditCached = false;\n+        fChangeCached = false;\n+        nDebitCached = 0;\n+        nCreditCached = 0;\n+        nImmatureCreditCached = 0;\n+        nAvailableCreditCached = 0;\n+        nWatchDebitCached = 0;\n+        nWatchCreditCached = 0;\n+        nAvailableWatchCreditCached = 0;\n+        nImmatureWatchCreditCached = 0;\n+        nChangeCached = 0;\n+        nOrderPos = -1;\n     }\n \n-    std::map<uint256, CWalletTx> mapWallet;\n+    ADD_SERIALIZE_METHODS;\n \n-    int64_t nOrderPosNext;\n-    std::map<uint256, int> mapRequestCount;\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        if (ser_action.ForRead())\n+            Init(NULL);\n+        char fSpent = false;\n \n-    std::map<CTxDestination, CAddressBookData> mapAddressBook;\n+        if (!ser_action.ForRead())\n+        {\n+            mapValue[\"fromaccount\"] = strFromAccount;\n \n-    CPubKey vchDefaultKey;\n+            WriteOrderPos(nOrderPos, mapValue);\n \n-    std::set<COutPoint> setLockedCoins;\n+            if (nTimeSmart)\n+                mapValue[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n+        }\n \n-    int64_t nTimeFirstKey;\n+        READWRITE(*(CMerkleTx*)this);\n+        std::vector<CMerkleTx> vUnused; //! Used to be vtxPrev\n+        READWRITE(vUnused);\n+        READWRITE(mapValue);\n+        READWRITE(vOrderForm);\n+        READWRITE(fTimeReceivedIsTxTime);\n+        READWRITE(nTimeReceived);\n+        READWRITE(fFromMe);\n+        READWRITE(fSpent);\n \n-    const CWalletTx* GetWalletTx(const uint256& hash) const;\n+        if (ser_action.ForRead())\n+        {\n+            strFromAccount = mapValue[\"fromaccount\"];\n \n-    //! check whether we are allowed to upgrade (or already support) to the named feature\n-    bool CanSupportFeature(enum WalletFeature wf) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n+            ReadOrderPos(nOrderPos, mapValue);\n \n-    void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL) const;\n-    bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const;\n+            nTimeSmart = mapValue.count(\"timesmart\") ? (unsigned int)atoi64(mapValue[\"timesmart\"]) : 0;\n+        }\n \n-    bool IsSpent(const uint256& hash, unsigned int n) const;\n+        mapValue.erase(\"fromaccount\");\n+        mapValue.erase(\"version\");\n+        mapValue.erase(\"spent\");\n+        mapValue.erase(\"n\");\n+        mapValue.erase(\"timesmart\");\n+    }\n \n-    bool IsLockedCoin(uint256 hash, unsigned int n) const;\n+    //! make sure balances are recalculated\n+    void MarkDirty()\n+    {\n+        fCreditCached = false;\n+        fAvailableCreditCached = false;\n+        fWatchDebitCached = false;\n+        fWatchCreditCached = false;\n+        fAvailableWatchCreditCached = false;\n+        fImmatureWatchCreditCached = false;\n+        fDebitCached = false;\n+        fChangeCached = false;\n+    }\n+\n+    void BindWallet(CWallet *pwalletIn)\n+    {\n+        pwallet = pwalletIn;\n+        MarkDirty();\n+    }\n+\n+    //! filter decides which addresses will count towards the debit\n+    CAmount GetDebit(const isminefilter& filter) const;\n+    CAmount GetCredit(const isminefilter& filter) const;\n+    CAmount GetImmatureCredit(bool fUseCache=true) const;\n+    CAmount GetAvailableCredit(bool fUseCache=true) const;\n+    CAmount GetImmatureWatchOnlyCredit(const bool& fUseCache=true) const;\n+    CAmount GetAvailableWatchOnlyCredit(const bool& fUseCache=true) const;\n+    CAmount GetChange() const;\n+\n+    void GetAmounts(std::list<COutputEntry>& listReceived,\n+                    std::list<COutputEntry>& listSent, CAmount& nFee, std::string& strSentAccount, const isminefilter& filter) const;\n+\n+    void GetAccountAmounts(const std::string& strAccount, CAmount& nReceived,\n+                           CAmount& nSent, CAmount& nFee, const isminefilter& filter) const;\n+\n+    bool IsFromMe(const isminefilter& filter) const\n+    {\n+        return (GetDebit(filter) > 0);\n+    }\n+\n+    bool IsTrusted() const;\n+\n+    bool WriteToDisk(CWalletDB *pwalletdb);\n+\n+    int64_t GetTxTime() const;\n+    int GetRequestCount() const;\n+\n+    void RelayWalletTransaction();\n+\n+    std::set<uint256> GetConflicts() const;\n+};\n+\n+\n+\n+\n+class COutput\n+{\n+public:\n+    const CWalletTx *tx;\n+    int i;\n+    int nDepth;\n+    bool fSpendable;\n+\n+    COutput(const CWalletTx *txIn, int iIn, int nDepthIn, bool fSpendableIn)\n+    {\n+        tx = txIn; i = iIn; nDepth = nDepthIn; fSpendable = fSpendableIn;\n+    }\n+\n+    std::string ToString() const;\n+};\n+\n+\n+\n+\n+/** Private key that includes an expiration date in case it never gets used. */\n+class CWalletKey\n+{\n+public:\n+    CPrivKey vchPrivKey;\n+    int64_t nTimeCreated;\n+    int64_t nTimeExpires;\n+    std::string strComment;\n+    //! todo: add something to note what created it (user, getnewaddress, change)\n+    //!   maybe should have a map<string, string> property map\n+\n+    CWalletKey(int64_t nExpires=0);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        if (!(nType & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(vchPrivKey);\n+        READWRITE(nTimeCreated);\n+        READWRITE(nTimeExpires);\n+        READWRITE(LIMITED_STRING(strComment, 65536));\n+    }\n+};\n+\n+\n+\n+/** \n+ * A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n+ * and provides the ability to create new transactions.\n+ */\n+class CWallet : public CCryptoKeyStore, public CValidationInterface\n+{\n+private:\n+    bool SelectCoins(const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl *coinControl = NULL) const;\n+\n+    CWalletDB *pwalletdbEncryption;\n+\n+    //! the current wallet version: clients below this version are not able to load the wallet\n+    int nWalletVersion;\n+\n+    //! the maximum wallet format version: memory-only variable that specifies to what version this wallet may be upgraded\n+    int nWalletMaxVersion;\n+\n+    int64_t nNextResend;\n+    int64_t nLastResend;\n+\n+    /**\n+     * Used to keep track of spent outpoints, and\n+     * detect and report conflicts (double-spends or\n+     * mutated transactions where the mutant gets mined).\n+     */\n+    typedef std::multimap<COutPoint, uint256> TxSpends;\n+    TxSpends mapTxSpends;\n+    void AddToSpends(const COutPoint& outpoint, const uint256& wtxid);\n+    void AddToSpends(const uint256& wtxid);\n+\n+    void SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator>);\n+\n+public:\n+    /*\n+     * Main wallet lock.\n+     * This lock protects all the fields added by CWallet\n+     *   except for:\n+     *      fFileBacked (immutable after instantiation)\n+     *      strWalletFile (immutable after instantiation)\n+     */\n+    mutable CCriticalSection cs_wallet;\n+\n+    bool fFileBacked;\n+    std::string strWalletFile;\n+\n+    std::set<int64_t> setKeyPool;\n+    std::map<CKeyID, CKeyMetadata> mapKeyMetadata;\n+\n+    typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n+    MasterKeyMap mapMasterKeys;\n+    unsigned int nMasterKeyMaxID;\n+\n+    CWallet()\n+    {\n+        SetNull();\n+    }\n+\n+    CWallet(std::string strWalletFileIn)\n+    {\n+        SetNull();\n+\n+        strWalletFile = strWalletFileIn;\n+        fFileBacked = true;\n+    }\n+\n+    ~CWallet()\n+    {\n+        delete pwalletdbEncryption;\n+        pwalletdbEncryption = NULL;\n+    }\n+\n+    void SetNull()\n+    {\n+        nWalletVersion = FEATURE_BASE;\n+        nWalletMaxVersion = FEATURE_BASE;\n+        fFileBacked = false;\n+        nMasterKeyMaxID = 0;\n+        pwalletdbEncryption = NULL;\n+        nOrderPosNext = 0;\n+        nNextResend = 0;\n+        nLastResend = 0;\n+        nTimeFirstKey = 0;\n+    }\n+\n+    std::map<uint256, CWalletTx> mapWallet;\n+\n+    int64_t nOrderPosNext;\n+    std::map<uint256, int> mapRequestCount;\n+\n+    std::map<CTxDestination, CAddressBookData> mapAddressBook;\n+\n+    CPubKey vchDefaultKey;\n+\n+    std::set<COutPoint> setLockedCoins;\n+\n+    int64_t nTimeFirstKey;\n+\n+    const CWalletTx* GetWalletTx(const uint256& hash) const;\n+\n+    //! check whether we are allowed to upgrade (or already support) to the named feature\n+    bool CanSupportFeature(enum WalletFeature wf) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n+\n+    void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL) const;\n+    bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const;\n+\n+    bool IsSpent(const uint256& hash, unsigned int n) const;\n+\n+    bool IsLockedCoin(uint256 hash, unsigned int n) const;\n     void LockCoin(COutPoint& output);\n     void UnlockCoin(COutPoint& output);\n     void UnlockAllCoins();\n@@ -285,685 +608,183 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetBalance() const;\n     CAmount GetUnconfirmedBalance() const;\n     CAmount GetImmatureBalance() const;\n-    CAmount GetWatchOnlyBalance() const;\n-    CAmount GetUnconfirmedWatchOnlyBalance() const;\n-    CAmount GetImmatureWatchOnlyBalance() const;\n-    bool CreateTransaction(const std::vector<std::pair<CScript, CAmount> >& vecSend,\n-                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n-    bool CreateTransaction(CScript scriptPubKey, const CAmount& nValue,\n-                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n-    bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n-\n-    static CFeeRate minTxFee;\n-    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool);\n-\n-    bool NewKeyPool();\n-    bool TopUpKeyPool(unsigned int kpSize = 0);\n-    void ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool);\n-    void KeepKey(int64_t nIndex);\n-    void ReturnKey(int64_t nIndex);\n-    bool GetKeyFromPool(CPubKey &key);\n-    int64_t GetOldestKeyPoolTime();\n-    void GetAllReserveKeys(std::set<CKeyID>& setAddress) const;\n-\n-    std::set< std::set<CTxDestination> > GetAddressGroupings();\n-    std::map<CTxDestination, CAmount> GetAddressBalances();\n-\n-    std::set<CTxDestination> GetAccountAddresses(std::string strAccount) const;\n-\n-    isminetype IsMine(const CTxIn& txin) const;\n-    CAmount GetDebit(const CTxIn& txin, const isminefilter& filter) const;\n-    isminetype IsMine(const CTxOut& txout) const\n-    {\n-        return ::IsMine(*this, txout.scriptPubKey);\n-    }\n-    CAmount GetCredit(const CTxOut& txout, const isminefilter& filter) const\n-    {\n-        if (!MoneyRange(txout.nValue))\n-            throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n-        return ((IsMine(txout) & filter) ? txout.nValue : 0);\n-    }\n-    bool IsChange(const CTxOut& txout) const;\n-    CAmount GetChange(const CTxOut& txout) const\n-    {\n-        if (!MoneyRange(txout.nValue))\n-            throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n-        return (IsChange(txout) ? txout.nValue : 0);\n-    }\n-    bool IsMine(const CTransaction& tx) const\n-    {\n-        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-            if (IsMine(txout))\n-                return true;\n-        return false;\n-    }\n-    /** should probably be renamed to IsRelevantToMe */\n-    bool IsFromMe(const CTransaction& tx) const\n-    {\n-        return (GetDebit(tx, ISMINE_ALL) > 0);\n-    }\n-    CAmount GetDebit(const CTransaction& tx, const isminefilter& filter) const\n-    {\n-        CAmount nDebit = 0;\n-        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-        {\n-            nDebit += GetDebit(txin, filter);\n-            if (!MoneyRange(nDebit))\n-                throw std::runtime_error(\"CWallet::GetDebit(): value out of range\");\n-        }\n-        return nDebit;\n-    }\n-    CAmount GetCredit(const CTransaction& tx, const isminefilter& filter) const\n-    {\n-        CAmount nCredit = 0;\n-        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-        {\n-            nCredit += GetCredit(txout, filter);\n-            if (!MoneyRange(nCredit))\n-                throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n-        }\n-        return nCredit;\n-    }\n-    CAmount GetChange(const CTransaction& tx) const\n-    {\n-        CAmount nChange = 0;\n-        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-        {\n-            nChange += GetChange(txout);\n-            if (!MoneyRange(nChange))\n-                throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n-        }\n-        return nChange;\n-    }\n-    void SetBestChain(const CBlockLocator& loc);\n-\n-    DBErrors LoadWallet(bool& fFirstRunRet);\n-    DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);\n-\n-    bool SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& purpose);\n-\n-    bool DelAddressBook(const CTxDestination& address);\n-\n-    void UpdatedTransaction(const uint256 &hashTx);\n-\n-    void Inventory(const uint256 &hash)\n-    {\n-        {\n-            LOCK(cs_wallet);\n-            std::map<uint256, int>::iterator mi = mapRequestCount.find(hash);\n-            if (mi != mapRequestCount.end())\n-                (*mi).second++;\n-        }\n-    }\n-\n-    unsigned int GetKeyPoolSize()\n-    {\n-        AssertLockHeld(cs_wallet); // setKeyPool\n-        return setKeyPool.size();\n-    }\n-\n-    bool SetDefaultKey(const CPubKey &vchPubKey);\n-\n-    //! signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower\n-    bool SetMinVersion(enum WalletFeature, CWalletDB* pwalletdbIn = NULL, bool fExplicit = false);\n-\n-    //! change which version we're allowed to upgrade to (note that this does not immediately imply upgrading to that format)\n-    bool SetMaxVersion(int nVersion);\n-\n-    //! get the current wallet format (the oldest client version guaranteed to understand this wallet)\n-    int GetVersion() { LOCK(cs_wallet); return nWalletVersion; }\n-\n-    //! Get wallet transactions that conflict with given transaction (spend same outputs)\n-    std::set<uint256> GetConflicts(const uint256& txid) const;\n-\n-    /** \n-     * Address book entry changed.\n-     * @note called with lock cs_wallet held.\n-     */\n-    boost::signals2::signal<void (CWallet *wallet, const CTxDestination\n-            &address, const std::string &label, bool isMine,\n-            const std::string &purpose,\n-            ChangeType status)> NotifyAddressBookChanged;\n-\n-    /** \n-     * Wallet transaction added, removed or updated.\n-     * @note called with lock cs_wallet held.\n-     */\n-    boost::signals2::signal<void (CWallet *wallet, const uint256 &hashTx,\n-            ChangeType status)> NotifyTransactionChanged;\n-\n-    /** Show progress e.g. for rescan */\n-    boost::signals2::signal<void (const std::string &title, int nProgress)> ShowProgress;\n-\n-    /** Watch-only address added */\n-    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n-};\n-\n-/** A key allocated from the key pool. */\n-class CReserveKey\n-{\n-protected:\n-    CWallet* pwallet;\n-    int64_t nIndex;\n-    CPubKey vchPubKey;\n-public:\n-    CReserveKey(CWallet* pwalletIn)\n-    {\n-        nIndex = -1;\n-        pwallet = pwalletIn;\n-    }\n-\n-    ~CReserveKey()\n-    {\n-        ReturnKey();\n-    }\n-\n-    void ReturnKey();\n-    bool GetReservedKey(CPubKey &pubkey);\n-    void KeepKey();\n-};\n-\n-\n-typedef std::map<std::string, std::string> mapValue_t;\n-\n-\n-static void ReadOrderPos(int64_t& nOrderPos, mapValue_t& mapValue)\n-{\n-    if (!mapValue.count(\"n\"))\n-    {\n-        nOrderPos = -1; // TODO: calculate elsewhere\n-        return;\n-    }\n-    nOrderPos = atoi64(mapValue[\"n\"].c_str());\n-}\n-\n-\n-static void WriteOrderPos(const int64_t& nOrderPos, mapValue_t& mapValue)\n-{\n-    if (nOrderPos == -1)\n-        return;\n-    mapValue[\"n\"] = i64tostr(nOrderPos);\n-}\n-\n-struct COutputEntry\n-{\n-    CTxDestination destination;\n-    CAmount amount;\n-    int vout;\n-};\n-\n-/** A transaction with a merkle branch linking it to the block chain. */\n-class CMerkleTx : public CTransaction\n-{\n-private:\n-    int GetDepthInMainChainINTERNAL(const CBlockIndex* &pindexRet) const;\n-\n-public:\n-    uint256 hashBlock;\n-    std::vector<uint256> vMerkleBranch;\n-    int nIndex;\n-\n-    // memory only\n-    mutable bool fMerkleVerified;\n-\n-\n-    CMerkleTx()\n-    {\n-        Init();\n-    }\n-\n-    CMerkleTx(const CTransaction& txIn) : CTransaction(txIn)\n-    {\n-        Init();\n-    }\n-\n-    void Init()\n-    {\n-        hashBlock = uint256();\n-        nIndex = -1;\n-        fMerkleVerified = false;\n-    }\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(*(CTransaction*)this);\n-        nVersion = this->nVersion;\n-        READWRITE(hashBlock);\n-        READWRITE(vMerkleBranch);\n-        READWRITE(nIndex);\n-    }\n-\n-    int SetMerkleBranch(const CBlock& block);\n-\n-\n-    /**\n-     * Return depth of transaction in blockchain:\n-     * -1  : not in blockchain, and not in memory pool (conflicted transaction)\n-     *  0  : in memory pool, waiting to be included in a block\n-     * >=1 : this many blocks deep in the main chain\n-     */\n-    int GetDepthInMainChain(const CBlockIndex* &pindexRet) const;\n-    int GetDepthInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n-    bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChainINTERNAL(pindexRet) > 0; }\n-    int GetBlocksToMaturity() const;\n-    bool AcceptToMemoryPool(bool fLimitFree=true, bool fRejectAbsurdFee=true);\n-};\n-\n-/** \n- * A transaction with a bunch of additional info that only the owner cares about.\n- * It includes any unrecorded transactions needed to link it back to the block chain.\n- */\n-class CWalletTx : public CMerkleTx\n-{\n-private:\n-    const CWallet* pwallet;\n-\n-public:\n-    mapValue_t mapValue;\n-    std::vector<std::pair<std::string, std::string> > vOrderForm;\n-    unsigned int fTimeReceivedIsTxTime;\n-    unsigned int nTimeReceived; //! time received by this node\n-    unsigned int nTimeSmart;\n-    char fFromMe;\n-    std::string strFromAccount;\n-    int64_t nOrderPos; //! position in ordered transaction list\n-\n-    // memory only\n-    mutable bool fDebitCached;\n-    mutable bool fCreditCached;\n-    mutable bool fImmatureCreditCached;\n-    mutable bool fAvailableCreditCached;\n-    mutable bool fWatchDebitCached;\n-    mutable bool fWatchCreditCached;\n-    mutable bool fImmatureWatchCreditCached;\n-    mutable bool fAvailableWatchCreditCached;\n-    mutable bool fChangeCached;\n-    mutable CAmount nDebitCached;\n-    mutable CAmount nCreditCached;\n-    mutable CAmount nImmatureCreditCached;\n-    mutable CAmount nAvailableCreditCached;\n-    mutable CAmount nWatchDebitCached;\n-    mutable CAmount nWatchCreditCached;\n-    mutable CAmount nImmatureWatchCreditCached;\n-    mutable CAmount nAvailableWatchCreditCached;\n-    mutable CAmount nChangeCached;\n-\n-    CWalletTx()\n-    {\n-        Init(NULL);\n-    }\n-\n-    CWalletTx(const CWallet* pwalletIn)\n-    {\n-        Init(pwalletIn);\n-    }\n-\n-    CWalletTx(const CWallet* pwalletIn, const CMerkleTx& txIn) : CMerkleTx(txIn)\n-    {\n-        Init(pwalletIn);\n-    }\n-\n-    CWalletTx(const CWallet* pwalletIn, const CTransaction& txIn) : CMerkleTx(txIn)\n-    {\n-        Init(pwalletIn);\n-    }\n-\n-    void Init(const CWallet* pwalletIn)\n-    {\n-        pwallet = pwalletIn;\n-        mapValue.clear();\n-        vOrderForm.clear();\n-        fTimeReceivedIsTxTime = false;\n-        nTimeReceived = 0;\n-        nTimeSmart = 0;\n-        fFromMe = false;\n-        strFromAccount.clear();\n-        fDebitCached = false;\n-        fCreditCached = false;\n-        fImmatureCreditCached = false;\n-        fAvailableCreditCached = false;\n-        fWatchDebitCached = false;\n-        fWatchCreditCached = false;\n-        fImmatureWatchCreditCached = false;\n-        fAvailableWatchCreditCached = false;\n-        fChangeCached = false;\n-        nDebitCached = 0;\n-        nCreditCached = 0;\n-        nImmatureCreditCached = 0;\n-        nAvailableCreditCached = 0;\n-        nWatchDebitCached = 0;\n-        nWatchCreditCached = 0;\n-        nAvailableWatchCreditCached = 0;\n-        nImmatureWatchCreditCached = 0;\n-        nChangeCached = 0;\n-        nOrderPos = -1;\n-    }\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        if (ser_action.ForRead())\n-            Init(NULL);\n-        char fSpent = false;\n-\n-        if (!ser_action.ForRead())\n-        {\n-            mapValue[\"fromaccount\"] = strFromAccount;\n-\n-            WriteOrderPos(nOrderPos, mapValue);\n-\n-            if (nTimeSmart)\n-                mapValue[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n-        }\n+    CAmount GetWatchOnlyBalance() const;\n+    CAmount GetUnconfirmedWatchOnlyBalance() const;\n+    CAmount GetImmatureWatchOnlyBalance() const;\n+    bool CreateTransaction(const std::vector<std::pair<CScript, CAmount> >& vecSend,\n+                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n+    bool CreateTransaction(CScript scriptPubKey, const CAmount& nValue,\n+                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n+    bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n \n-        READWRITE(*(CMerkleTx*)this);\n-        std::vector<CMerkleTx> vUnused; //! Used to be vtxPrev\n-        READWRITE(vUnused);\n-        READWRITE(mapValue);\n-        READWRITE(vOrderForm);\n-        READWRITE(fTimeReceivedIsTxTime);\n-        READWRITE(nTimeReceived);\n-        READWRITE(fFromMe);\n-        READWRITE(fSpent);\n+    static CFeeRate minTxFee;\n+    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool);\n \n-        if (ser_action.ForRead())\n-        {\n-            strFromAccount = mapValue[\"fromaccount\"];\n+    bool NewKeyPool();\n+    bool TopUpKeyPool(unsigned int kpSize = 0);\n+    void ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool);\n+    void KeepKey(int64_t nIndex);\n+    void ReturnKey(int64_t nIndex);\n+    bool GetKeyFromPool(CPubKey &key);\n+    int64_t GetOldestKeyPoolTime();\n+    void GetAllReserveKeys(std::set<CKeyID>& setAddress) const;\n \n-            ReadOrderPos(nOrderPos, mapValue);\n+    std::set< std::set<CTxDestination> > GetAddressGroupings();\n+    std::map<CTxDestination, CAmount> GetAddressBalances();\n \n-            nTimeSmart = mapValue.count(\"timesmart\") ? (unsigned int)atoi64(mapValue[\"timesmart\"]) : 0;\n-        }\n+    std::set<CTxDestination> GetAccountAddresses(std::string strAccount) const;\n \n-        mapValue.erase(\"fromaccount\");\n-        mapValue.erase(\"version\");\n-        mapValue.erase(\"spent\");\n-        mapValue.erase(\"n\");\n-        mapValue.erase(\"timesmart\");\n+    isminetype IsMine(const CTxIn& txin) const;\n+    CAmount GetDebit(const CTxIn& txin, const isminefilter& filter) const;\n+    isminetype IsMine(const CTxOut& txout) const\n+    {\n+        return ::IsMine(*this, txout.scriptPubKey);\n     }\n-\n-    //! make sure balances are recalculated\n-    void MarkDirty()\n+    CAmount GetCredit(const CTxOut& txout, const isminefilter& filter) const\n     {\n-        fCreditCached = false;\n-        fAvailableCreditCached = false;\n-        fWatchDebitCached = false;\n-        fWatchCreditCached = false;\n-        fAvailableWatchCreditCached = false;\n-        fImmatureWatchCreditCached = false;\n-        fDebitCached = false;\n-        fChangeCached = false;\n+        if (!MoneyRange(txout.nValue))\n+            throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n+        return ((IsMine(txout) & filter) ? txout.nValue : 0);\n     }\n-\n-    void BindWallet(CWallet *pwalletIn)\n+    bool IsChange(const CTxOut& txout) const;\n+    CAmount GetChange(const CTxOut& txout) const\n     {\n-        pwallet = pwalletIn;\n-        MarkDirty();\n+        if (!MoneyRange(txout.nValue))\n+            throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n+        return (IsChange(txout) ? txout.nValue : 0);\n     }\n-\n-    //! filter decides which addresses will count towards the debit\n-    CAmount GetDebit(const isminefilter& filter) const\n+    bool IsMine(const CTransaction& tx) const\n     {\n-        if (vin.empty())\n-            return 0;\n-\n-        CAmount debit = 0;\n-        if(filter & ISMINE_SPENDABLE)\n-        {\n-            if (fDebitCached)\n-                debit += nDebitCached;\n-            else\n-            {\n-                nDebitCached = pwallet->GetDebit(*this, ISMINE_SPENDABLE);\n-                fDebitCached = true;\n-                debit += nDebitCached;\n-            }\n-        }\n-        if(filter & ISMINE_WATCH_ONLY)\n-        {\n-            if(fWatchDebitCached)\n-                debit += nWatchDebitCached;\n-            else\n-            {\n-                nWatchDebitCached = pwallet->GetDebit(*this, ISMINE_WATCH_ONLY);\n-                fWatchDebitCached = true;\n-                debit += nWatchDebitCached;\n-            }\n-        }\n-        return debit;\n+        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+            if (IsMine(txout))\n+                return true;\n+        return false;\n     }\n-\n-    CAmount GetCredit(const isminefilter& filter) const\n+    /** should probably be renamed to IsRelevantToMe */\n+    bool IsFromMe(const CTransaction& tx) const\n     {\n-        // Must wait until coinbase is safely deep enough in the chain before valuing it\n-        if (IsCoinBase() && GetBlocksToMaturity() > 0)\n-            return 0;\n-\n-        int64_t credit = 0;\n-        if (filter & ISMINE_SPENDABLE)\n-        {\n-            // GetBalance can assume transactions in mapWallet won't change\n-            if (fCreditCached)\n-                credit += nCreditCached;\n-            else\n-            {\n-                nCreditCached = pwallet->GetCredit(*this, ISMINE_SPENDABLE);\n-                fCreditCached = true;\n-                credit += nCreditCached;\n-            }\n-        }\n-        if (filter & ISMINE_WATCH_ONLY)\n-        {\n-            if (fWatchCreditCached)\n-                credit += nWatchCreditCached;\n-            else\n-            {\n-                nWatchCreditCached = pwallet->GetCredit(*this, ISMINE_WATCH_ONLY);\n-                fWatchCreditCached = true;\n-                credit += nWatchCreditCached;\n-            }\n-        }\n-        return credit;\n+        return (GetDebit(tx, ISMINE_ALL) > 0);\n     }\n-\n-    CAmount GetImmatureCredit(bool fUseCache=true) const\n+    CAmount GetDebit(const CTransaction& tx, const isminefilter& filter) const\n     {\n-        if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n+        CAmount nDebit = 0;\n+        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n         {\n-            if (fUseCache && fImmatureCreditCached)\n-                return nImmatureCreditCached;\n-            nImmatureCreditCached = pwallet->GetCredit(*this, ISMINE_SPENDABLE);\n-            fImmatureCreditCached = true;\n-            return nImmatureCreditCached;\n+            nDebit += GetDebit(txin, filter);\n+            if (!MoneyRange(nDebit))\n+                throw std::runtime_error(\"CWallet::GetDebit(): value out of range\");\n         }\n-\n-        return 0;\n+        return nDebit;\n     }\n-\n-    CAmount GetAvailableCredit(bool fUseCache=true) const\n+    CAmount GetCredit(const CTransaction& tx, const isminefilter& filter) const\n     {\n-        if (pwallet == 0)\n-            return 0;\n-\n-        // Must wait until coinbase is safely deep enough in the chain before valuing it\n-        if (IsCoinBase() && GetBlocksToMaturity() > 0)\n-            return 0;\n-\n-        if (fUseCache && fAvailableCreditCached)\n-            return nAvailableCreditCached;\n-\n         CAmount nCredit = 0;\n-        uint256 hashTx = GetHash();\n-        for (unsigned int i = 0; i < vout.size(); i++)\n+        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n         {\n-            if (!pwallet->IsSpent(hashTx, i))\n-            {\n-                const CTxOut &txout = vout[i];\n-                nCredit += pwallet->GetCredit(txout, ISMINE_SPENDABLE);\n-                if (!MoneyRange(nCredit))\n-                    throw std::runtime_error(\"CWalletTx::GetAvailableCredit(): value out of range\");\n-            }\n+            nCredit += GetCredit(txout, filter);\n+            if (!MoneyRange(nCredit))\n+                throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n         }\n-\n-        nAvailableCreditCached = nCredit;\n-        fAvailableCreditCached = true;\n         return nCredit;\n     }\n-\n-    CAmount GetImmatureWatchOnlyCredit(const bool& fUseCache=true) const\n+    CAmount GetChange(const CTransaction& tx) const\n     {\n-        if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n+        CAmount nChange = 0;\n+        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n         {\n-            if (fUseCache && fImmatureWatchCreditCached)\n-                return nImmatureWatchCreditCached;\n-            nImmatureWatchCreditCached = pwallet->GetCredit(*this, ISMINE_WATCH_ONLY);\n-            fImmatureWatchCreditCached = true;\n-            return nImmatureWatchCreditCached;\n+            nChange += GetChange(txout);\n+            if (!MoneyRange(nChange))\n+                throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n         }\n-\n-        return 0;\n+        return nChange;\n     }\n+    void SetBestChain(const CBlockLocator& loc);\n \n-    CAmount GetAvailableWatchOnlyCredit(const bool& fUseCache=true) const\n-    {\n-        if (pwallet == 0)\n-            return 0;\n+    DBErrors LoadWallet(bool& fFirstRunRet);\n+    DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);\n \n-        // Must wait until coinbase is safely deep enough in the chain before valuing it\n-        if (IsCoinBase() && GetBlocksToMaturity() > 0)\n-            return 0;\n+    bool SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& purpose);\n \n-        if (fUseCache && fAvailableWatchCreditCached)\n-            return nAvailableWatchCreditCached;\n+    bool DelAddressBook(const CTxDestination& address);\n \n-        CAmount nCredit = 0;\n-        for (unsigned int i = 0; i < vout.size(); i++)\n+    void UpdatedTransaction(const uint256 &hashTx);\n+\n+    void Inventory(const uint256 &hash)\n+    {\n         {\n-            if (!pwallet->IsSpent(GetHash(), i))\n-            {\n-                const CTxOut &txout = vout[i];\n-                nCredit += pwallet->GetCredit(txout, ISMINE_WATCH_ONLY);\n-                if (!MoneyRange(nCredit))\n-                    throw std::runtime_error(\"CWalletTx::GetAvailableCredit(): value out of range\");\n-            }\n+            LOCK(cs_wallet);\n+            std::map<uint256, int>::iterator mi = mapRequestCount.find(hash);\n+            if (mi != mapRequestCount.end())\n+                (*mi).second++;\n         }\n-\n-        nAvailableWatchCreditCached = nCredit;\n-        fAvailableWatchCreditCached = true;\n-        return nCredit;\n     }\n \n-    CAmount GetChange() const\n+    unsigned int GetKeyPoolSize()\n     {\n-        if (fChangeCached)\n-            return nChangeCached;\n-        nChangeCached = pwallet->GetChange(*this);\n-        fChangeCached = true;\n-        return nChangeCached;\n+        AssertLockHeld(cs_wallet); // setKeyPool\n+        return setKeyPool.size();\n     }\n \n-    void GetAmounts(std::list<COutputEntry>& listReceived,\n-                    std::list<COutputEntry>& listSent, CAmount& nFee, std::string& strSentAccount, const isminefilter& filter) const;\n-\n-    void GetAccountAmounts(const std::string& strAccount, CAmount& nReceived,\n-                           CAmount& nSent, CAmount& nFee, const isminefilter& filter) const;\n-\n-    bool IsFromMe(const isminefilter& filter) const\n-    {\n-        return (GetDebit(filter) > 0);\n-    }\n+    bool SetDefaultKey(const CPubKey &vchPubKey);\n \n-    bool IsTrusted() const\n-    {\n-        // Quick answer in most cases\n-        if (!IsFinalTx(*this))\n-            return false;\n-        int nDepth = GetDepthInMainChain();\n-        if (nDepth >= 1)\n-            return true;\n-        if (nDepth < 0)\n-            return false;\n-        if (!bSpendZeroConfChange || !IsFromMe(ISMINE_ALL)) // using wtx's cached debit\n-            return false;\n-\n-        // Trusted if all inputs are from us and are in the mempool:\n-        BOOST_FOREACH(const CTxIn& txin, vin)\n-        {\n-            // Transactions not sent by us: not trusted\n-            const CWalletTx* parent = pwallet->GetWalletTx(txin.prevout.hash);\n-            if (parent == NULL)\n-                return false;\n-            const CTxOut& parentOut = parent->vout[txin.prevout.n];\n-            if (pwallet->IsMine(parentOut) != ISMINE_SPENDABLE)\n-                return false;\n-        }\n-        return true;\n-    }\n+    //! signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower\n+    bool SetMinVersion(enum WalletFeature, CWalletDB* pwalletdbIn = NULL, bool fExplicit = false);\n \n-    bool WriteToDisk(CWalletDB *pwalletdb);\n+    //! change which version we're allowed to upgrade to (note that this does not immediately imply upgrading to that format)\n+    bool SetMaxVersion(int nVersion);\n \n-    int64_t GetTxTime() const;\n-    int GetRequestCount() const;\n+    //! get the current wallet format (the oldest client version guaranteed to understand this wallet)\n+    int GetVersion() { LOCK(cs_wallet); return nWalletVersion; }\n \n-    void RelayWalletTransaction();\n+    //! Get wallet transactions that conflict with given transaction (spend same outputs)\n+    std::set<uint256> GetConflicts(const uint256& txid) const;\n \n-    std::set<uint256> GetConflicts() const;\n-};\n+    /** \n+     * Address book entry changed.\n+     * @note called with lock cs_wallet held.\n+     */\n+    boost::signals2::signal<void (CWallet *wallet, const CTxDestination\n+            &address, const std::string &label, bool isMine,\n+            const std::string &purpose,\n+            ChangeType status)> NotifyAddressBookChanged;\n \n+    /** \n+     * Wallet transaction added, removed or updated.\n+     * @note called with lock cs_wallet held.\n+     */\n+    boost::signals2::signal<void (CWallet *wallet, const uint256 &hashTx,\n+            ChangeType status)> NotifyTransactionChanged;\n \n+    /** Show progress e.g. for rescan */\n+    boost::signals2::signal<void (const std::string &title, int nProgress)> ShowProgress;\n \n+    /** Watch-only address added */\n+    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n+};\n \n-class COutput\n+/** A key allocated from the key pool. */\n+class CReserveKey\n {\n+protected:\n+    CWallet* pwallet;\n+    int64_t nIndex;\n+    CPubKey vchPubKey;\n public:\n-    const CWalletTx *tx;\n-    int i;\n-    int nDepth;\n-    bool fSpendable;\n-\n-    COutput(const CWalletTx *txIn, int iIn, int nDepthIn, bool fSpendableIn)\n+    CReserveKey(CWallet* pwalletIn)\n     {\n-        tx = txIn; i = iIn; nDepth = nDepthIn; fSpendable = fSpendableIn;\n+        nIndex = -1;\n+        pwallet = pwalletIn;\n     }\n \n-    std::string ToString() const;\n-};\n-\n-\n-\n-\n-/** Private key that includes an expiration date in case it never gets used. */\n-class CWalletKey\n-{\n-public:\n-    CPrivKey vchPrivKey;\n-    int64_t nTimeCreated;\n-    int64_t nTimeExpires;\n-    std::string strComment;\n-    //! todo: add something to note what created it (user, getnewaddress, change)\n-    //!   maybe should have a map<string, string> property map\n-\n-    CWalletKey(int64_t nExpires=0);\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        if (!(nType & SER_GETHASH))\n-            READWRITE(nVersion);\n-        READWRITE(vchPrivKey);\n-        READWRITE(nTimeCreated);\n-        READWRITE(nTimeExpires);\n-        READWRITE(LIMITED_STRING(strComment, 65536));\n+    ~CReserveKey()\n+    {\n+        ReturnKey();\n     }\n-};\n-\n-\n-\n \n+    void ReturnKey();\n+    bool GetReservedKey(CPubKey &pubkey);\n+    void KeepKey();\n+};\n \n \n /** "
      }
    ]
  },
  {
    "sha": "a6516686dcf0b93dd0bcae304e74f9ac69cb305c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjUxNjY4NmRjZjBiOTNkZDBiY2FlMzA0ZTc0ZjlhYzY5Y2IzMDVj",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-01-09T13:25:43Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-02-04T12:47:32Z"
      },
      "message": "[Qt] prevent amount overflow problem with payment requests\n\nBitcoin amounts are stored as uint64 in the protobuf messages (see\npaymentrequest.proto), but CAmount is defined as int64_t. Because\nof that we need to verify that single and accumulated amounts are\nin a valid range and no variable overflow has happened.\n\n- fixes #5624 (#5622)\n\nThanks @SergioDemianLerner for reporting that issue and also supplying us\nwith a possible solution.\n\n- add static verifyAmount() function to PaymentServer and move the logging\n  on error into the function\n- also add a unit test to paymentservertests.cpp",
      "tree": {
        "sha": "44d9394cf2c1ac085f2815c8b55f1539f9c2d3c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44d9394cf2c1ac085f2815c8b55f1539f9c2d3c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6516686dcf0b93dd0bcae304e74f9ac69cb305c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6516686dcf0b93dd0bcae304e74f9ac69cb305c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6516686dcf0b93dd0bcae304e74f9ac69cb305c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6516686dcf0b93dd0bcae304e74f9ac69cb305c/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31dedb463b0ce77364e516239bf1b9c7eed5b3b0"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 69,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9aab944f6b5f383a82abc0d3a82b37ad1dbb138d",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6516686dcf0b93dd0bcae304e74f9ac69cb305c/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6516686dcf0b93dd0bcae304e74f9ac69cb305c/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=a6516686dcf0b93dd0bcae304e74f9ac69cb305c",
        "patch": "@@ -569,6 +569,14 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n             return false;\n         }\n \n+        // Bitcoin amounts are stored as (optional) uint64 in the protobuf messages (see paymentrequest.proto),\n+        // but CAmount is defined as int64_t. Because of that we need to verify that amounts are in a valid range\n+        // and no overflow has happened.\n+        if (!verifyAmount(sendingTo.second)) {\n+            emit message(tr(\"Payment request rejected\"), tr(\"Invalid payment request.\"), CClientUIInterface::MSG_ERROR);\n+            return false;\n+        }\n+\n         // Extract and check amounts\n         CTxOut txOut(sendingTo.second, sendingTo.first);\n         if (txOut.IsDust(::minRelayTxFee)) {\n@@ -580,6 +588,11 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n         }\n \n         recipient.amount += sendingTo.second;\n+        // Also verify that the final amount is still in a valid range after adding additional amounts.\n+        if (!verifyAmount(recipient.amount)) {\n+            emit message(tr(\"Payment request rejected\"), tr(\"Invalid payment request.\"), CClientUIInterface::MSG_ERROR);\n+            return false;\n+        }\n     }\n     // Store addresses and format them to fit nicely into the GUI\n     recipient.address = addresses.join(\"<br />\");\n@@ -768,3 +781,15 @@ bool PaymentServer::verifyExpired(const payments::PaymentDetails& requestDetails\n     }\n     return fVerified;\n }\n+\n+bool PaymentServer::verifyAmount(const CAmount& requestAmount)\n+{\n+    bool fVerified = MoneyRange(requestAmount);\n+    if (!fVerified) {\n+        qWarning() << QString(\"PaymentServer::%1: Payment request amount out of allowed range (%2, allowed 0 - %3).\")\n+            .arg(__func__)\n+            .arg(requestAmount)\n+            .arg(MAX_MONEY);\n+    }\n+    return fVerified;\n+}"
      },
      {
        "sha": "6bf5ac2eea291fdae1eee4b82583d99ce69dc1a3",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6516686dcf0b93dd0bcae304e74f9ac69cb305c/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6516686dcf0b93dd0bcae304e74f9ac69cb305c/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=a6516686dcf0b93dd0bcae304e74f9ac69cb305c",
        "patch": "@@ -95,6 +95,8 @@ class PaymentServer : public QObject\n     static bool verifyNetwork(const payments::PaymentDetails& requestDetails);\n     // Verify if the payment request is expired\n     static bool verifyExpired(const payments::PaymentDetails& requestDetails);\n+    // Verify the payment request amount is valid\n+    static bool verifyAmount(const CAmount& requestAmount);\n \n signals:\n     // Fired when a valid payment request is received"
      },
      {
        "sha": "c548ffe429fdacd45ab3e03aa2094895c5c9bf14",
        "filename": "src/qt/test/paymentrequestdata.h",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6516686dcf0b93dd0bcae304e74f9ac69cb305c/src/qt/test/paymentrequestdata.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6516686dcf0b93dd0bcae304e74f9ac69cb305c/src/qt/test/paymentrequestdata.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentrequestdata.h?ref=a6516686dcf0b93dd0bcae304e74f9ac69cb305c",
        "patch": "@@ -433,3 +433,28 @@ dGluZyB0ZXN0bmV0ISqAAXSQG8+GFA18VaKarlYrOz293rNMIub0swKGcQm8jAGX\\\n HSLaRgHfUDeEPr4hydy4dtfu59KNwe2xsHOHu/SpO4L8SrA4Dm9A7SlNBVWdcLbw\\\n d2hj739GDLz0b5KuJ2SG6VknMRQM976w/m2qlq0ccVGaaZ2zMIGfpzL3p6adwx/5\\\n \";\n+\n+//\n+// Payment request with amount overflow (amount is set to 21000001 BTC)\n+//\n+const char* paymentrequest5_cert2_BASE64 =\n+\"\\\n+Egt4NTA5K3NoYTI1NhrQBArNBDCCAkkwggExoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n+BQAwITEfMB0GA1UEAwwWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xNTAxMTEx\\\n+ODIxMDhaFw0yNTAxMDgxODIxMDhaMCExHzAdBgNVBAMMFlBheW1lbnRSZXF1ZXN0\\\n+IFRlc3QgQ0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMsZqzkzeBGo+i2N\\\n+mUak3Ciodr1V7S062VOy7N0OQYNDQHYkgDFAUET7cEb5VJaHPv5m3ppTBpU9xBcf\\\n+wbHHUt4VjA+mhRmYrl1khjvZM+X8kEqvWn20BtcM9R6r0yIYec8UERDDHBleL/P8\\\n+RkxEnVLjYTV9zigCXfMsgYb3EQShAgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8wDQYJ\\\n+KoZIhvcNAQELBQADggEBABUJpl3QCqsoDSxAsQdV6zKT4VGV76AzoGj7etQsQY+r\\\n++S26VfWh/fMobEzuxFChr0USgLJ6FoK78hAtoZvt1lrye9yqFv/ig3WLWsJKWHHb\\\n+3RT6oR03CIwZXFSUasi08QDVLxafwsU5OMcPLucF3a1lRL1ccYrNgVCCx1+X7Bos\\\n+tIgDGRQQ4AyoHTcfVd2hEGeUv7k14mOxFsAp6851yosHq9Q2kwmdH+rHEJbjof87\\\n+yyKLagc4owyXBZYkQmkeHWCNqnuRmO5vUsfVb0UUrkD64o7Th/NjwooA7SCiUXl6\\\n+dfygT1b7ggpx7GC+sP2DsIM47IAZ55drjqX5u2f+Ba0iTAoEdGVzdBIkCIDC9P+F\\\n+vt0DEhl2qRQErGqUUwSsaMpDvWIaGnJGNQqi8oisGLzcrKYFKhhUZXN0aW5nIGFt\\\n+b3VudCBvdmVyZmxvdyEqgAG8S7WEDUC6tCL6q2CTBjop/AitgEy31RL9IqYruytR\\\n+iEBFUrBDJZU+UEezGwr7/zoECjo5ZY3PmtZcM2sILNjyweJF6XVzGqTxUw6pN6sW\\\n+XR2T3Gy2LzRvhVA25QgGqpz0/juS2BtmNbsZPkN9gMMwKimgzc+PuCzmEKwPK9cQ\\\n+YQ==\\\n+\";"
      },
      {
        "sha": "e2ec439b2e39a1550230b4744f24a4feef8bbac6",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6516686dcf0b93dd0bcae304e74f9ac69cb305c/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6516686dcf0b93dd0bcae304e74f9ac69cb305c/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=a6516686dcf0b93dd0bcae304e74f9ac69cb305c",
        "patch": "@@ -7,7 +7,10 @@\n #include \"optionsmodel.h\"\n #include \"paymentrequestdata.h\"\n \n+#include \"amount.h\"\n #include \"random.h\"\n+#include \"script/script.h\"\n+#include \"script/standard.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n@@ -184,6 +187,20 @@ void PaymentServerTests::paymentServerTests()\n     tempFile.close();\n     QCOMPARE(PaymentServer::readPaymentRequestFromFile(tempFile.fileName(), r.paymentRequest), false);\n \n+    // Payment request with amount overflow (amount is set to 21000001 BTC):\n+    data = DecodeBase64(paymentrequest5_cert2_BASE64);\n+    byteArray = QByteArray((const char*)&data[0], data.size());\n+    r.paymentRequest.parse(byteArray);\n+    // Ensure the request is initialized\n+    QVERIFY(r.paymentRequest.IsInitialized());\n+    // Extract address and amount from the request\n+    QList<std::pair<CScript, CAmount> > sendingTos = r.paymentRequest.getPayTo();\n+    foreach (const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n+        CTxDestination dest;\n+        if (ExtractDestination(sendingTo.first, dest))\n+            QCOMPARE(PaymentServer::verifyAmount(sendingTo.second), false);\n+    }\n+\n     delete server;\n }\n "
      }
    ]
  },
  {
    "sha": "93b7544501d6154f1d6530b670319d72754636ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5M2I3NTQ0NTAxZDYxNTRmMWQ2NTMwYjY3MDMxOWQ3Mjc1NDYzNmFl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-04T12:51:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-04T12:56:57Z"
      },
      "message": "Merge pull request #5319\n\n35f7227 Clean up wallet encryption code. (Daniel Kraft)",
      "tree": {
        "sha": "ee6c0993e9f36758c8f4d133c760251e8e035947",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee6c0993e9f36758c8f4d133c760251e8e035947"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93b7544501d6154f1d6530b670319d72754636ae",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU0hcZAAoJEHSBCwEjRsmmU4sH/Akn+kKMVkReR+F5ypttrwsj\nuDzW2qLl1Uk+6hU3V80XfPV4BzchvBQc7C14cCxSFPow8yE2htXEOXWLhQvc8BCj\nYytj4rT8r8rkmY67odETJQxI/YILPWptXU6zL4PigbuD42lsRC6xqxdgLSl8/JMM\n4XQs9+m30euJkKFXoUorYFeSFUaEthen64hioqwMooWvrGWz69Cg9DiqKcecWLY3\nuPl3lS17mzl6U2bEBFzU27cFmHtY9fKXsVysLqO+p1YVTQJWpQh5Ey9p5aOJ9vcP\n1gIXHMZlwl71bs1P2gThKo2FT2Sxb8LhzIF2Wf6qvYU5luHz2kd8VkOmOJ3fA10=\n=sCuM\n-----END PGP SIGNATURE-----",
        "payload": "tree ee6c0993e9f36758c8f4d133c760251e8e035947\nparent 31dedb463b0ce77364e516239bf1b9c7eed5b3b0\nparent 35f7227a860b2b8c273e4bb299e6bd67cfef9a3f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423054300 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423054617 +0100\n\nMerge pull request #5319\n\n35f7227 Clean up wallet encryption code. (Daniel Kraft)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93b7544501d6154f1d6530b670319d72754636ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93b7544501d6154f1d6530b670319d72754636ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93b7544501d6154f1d6530b670319d72754636ae/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31dedb463b0ce77364e516239bf1b9c7eed5b3b0"
      },
      {
        "sha": "35f7227a860b2b8c273e4bb299e6bd67cfef9a3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35f7227a860b2b8c273e4bb299e6bd67cfef9a3f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35f7227a860b2b8c273e4bb299e6bd67cfef9a3f"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 17,
      "deletions": 25
    },
    "files": [
      {
        "sha": "75d84dbf13eaa7e4f62874c0573e9afc5d687c4f",
        "filename": "src/crypter.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 22,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93b7544501d6154f1d6530b670319d72754636ae/src/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93b7544501d6154f1d6530b670319d72754636ae/src/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.cpp?ref=93b7544501d6154f1d6530b670319d72754636ae",
        "patch": "@@ -102,7 +102,7 @@ bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingM\n }\n \n \n-bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vchPlaintext, const uint256& nIV, std::vector<unsigned char> &vchCiphertext)\n+static bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vchPlaintext, const uint256& nIV, std::vector<unsigned char> &vchCiphertext)\n {\n     CCrypter cKeyCrypter;\n     std::vector<unsigned char> chIV(WALLET_CRYPTO_KEY_SIZE);\n@@ -112,7 +112,7 @@ bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vch\n     return cKeyCrypter.Encrypt(*((const CKeyingMaterial*)&vchPlaintext), vchCiphertext);\n }\n \n-bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext)\n+static bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext)\n {\n     CCrypter cKeyCrypter;\n     std::vector<unsigned char> chIV(WALLET_CRYPTO_KEY_SIZE);\n@@ -122,6 +122,19 @@ bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned\n     return cKeyCrypter.Decrypt(vchCiphertext, *((CKeyingMaterial*)&vchPlaintext));\n }\n \n+static bool DecryptKey(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCryptedSecret, const CPubKey& vchPubKey, CKey& key)\n+{\n+    CKeyingMaterial vchSecret;\n+    if(!DecryptSecret(vMasterKey, vchCryptedSecret, vchPubKey.GetHash(), vchSecret))\n+        return false;\n+\n+    if (vchSecret.size() != 32)\n+        return false;\n+\n+    key.Set(vchSecret.begin(), vchSecret.end(), vchPubKey.IsCompressed());\n+    return key.VerifyPubKey(vchPubKey);\n+}\n+\n bool CCryptoKeyStore::SetCrypted()\n {\n     LOCK(cs_KeyStore);\n@@ -161,20 +174,8 @@ bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)\n         {\n             const CPubKey &vchPubKey = (*mi).second.first;\n             const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n-            CKeyingMaterial vchSecret;\n-            if(!DecryptSecret(vMasterKeyIn, vchCryptedSecret, vchPubKey.GetHash(), vchSecret))\n-            {\n-                keyFail = true;\n-                break;\n-            }\n-            if (vchSecret.size() != 32)\n-            {\n-                keyFail = true;\n-                break;\n-            }\n             CKey key;\n-            key.Set(vchSecret.begin(), vchSecret.end(), vchPubKey.IsCompressed());\n-            if (key.GetPubKey() != vchPubKey)\n+            if (!DecryptKey(vMasterKeyIn, vchCryptedSecret, vchPubKey, key))\n             {\n                 keyFail = true;\n                 break;\n@@ -243,13 +244,7 @@ bool CCryptoKeyStore::GetKey(const CKeyID &address, CKey& keyOut) const\n         {\n             const CPubKey &vchPubKey = (*mi).second.first;\n             const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n-            CKeyingMaterial vchSecret;\n-            if (!DecryptSecret(vMasterKey, vchCryptedSecret, vchPubKey.GetHash(), vchSecret))\n-                return false;\n-            if (vchSecret.size() != 32)\n-                return false;\n-            keyOut.Set(vchSecret.begin(), vchSecret.end(), vchPubKey.IsCompressed());\n-            return true;\n+            return DecryptKey(vMasterKey, vchCryptedSecret, vchPubKey, keyOut);\n         }\n     }\n     return false;"
      },
      {
        "sha": "cbaf1562f09f873bddd150d078d5d86695decf1f",
        "filename": "src/crypter.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93b7544501d6154f1d6530b670319d72754636ae/src/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93b7544501d6154f1d6530b670319d72754636ae/src/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.h?ref=93b7544501d6154f1d6530b670319d72754636ae",
        "patch": "@@ -107,9 +107,6 @@ class CCrypter\n     }\n };\n \n-bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vchPlaintext, const uint256& nIV, std::vector<unsigned char> &vchCiphertext);\n-bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext);\n-\n /** Keystore which keeps the private keys encrypted.\n  * It derives from the basic key store, which is used if no encryption is active.\n  */"
      }
    ]
  },
  {
    "sha": "25cf6f3d41b33c4d8523b6613f0169772fd3937f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNWNmNmYzZDQxYjMzYzRkODUyM2I2NjEzZjAxNjk3NzJmZDM5Mzdm",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-12-09T13:50:01Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-02-04T14:11:54Z"
      },
      "message": "minor rework of SendMoney in rpcwallet\n\n- rework the function to not log errors but use throw JSONRPCError\n- remove a check for IsLocked() that is done in sendtoaddress and\n  sendfrom RPC calls already\n- cache GetBalance() return value, because it's possibly used twice",
      "tree": {
        "sha": "c649b253c2dff8bdba5649bb7a8d833b668577d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c649b253c2dff8bdba5649bb7a8d833b668577d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25cf6f3d41b33c4d8523b6613f0169772fd3937f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25cf6f3d41b33c4d8523b6613f0169772fd3937f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/25cf6f3d41b33c4d8523b6613f0169772fd3937f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25cf6f3d41b33c4d8523b6613f0169772fd3937f/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "93b7544501d6154f1d6530b670319d72754636ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93b7544501d6154f1d6530b670319d72754636ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93b7544501d6154f1d6530b670319d72754636ae"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 11,
      "deletions": 16
    },
    "files": [
      {
        "sha": "d097b6a0fafc2042efbcc220216e308742b72348",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 16,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25cf6f3d41b33c4d8523b6613f0169772fd3937f/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25cf6f3d41b33c4d8523b6613f0169772fd3937f/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=25cf6f3d41b33c4d8523b6613f0169772fd3937f",
        "patch": "@@ -19,6 +19,7 @@\n #include <stdint.h>\n \n #include <boost/assign/list_of.hpp>\n+\n #include \"json/json_spirit_utils.h\"\n #include \"json/json_spirit_value.h\"\n \n@@ -316,35 +317,29 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n     return ret;\n }\n \n-void SendMoney(const CTxDestination &address, CAmount nValue, CWalletTx& wtxNew)\n+static void SendMoney(const CTxDestination &address, CAmount nValue, CWalletTx& wtxNew)\n {\n+    CAmount curBalance = pwalletMain->GetBalance();\n+\n     // Check amount\n     if (nValue <= 0)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid amount\");\n \n-    if (nValue > pwalletMain->GetBalance())\n+    if (nValue > curBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n \n-    string strError;\n-    if (pwalletMain->IsLocked())\n-    {\n-        strError = \"Error: Wallet locked, unable to create transaction!\";\n-        LogPrintf(\"SendMoney(): %s\", strError);\n-        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n-    }\n-\n     // Parse Bitcoin address\n     CScript scriptPubKey = GetScriptForDestination(address);\n \n     // Create and send the transaction\n     CReserveKey reservekey(pwalletMain);\n     CAmount nFeeRequired;\n-    if (!pwalletMain->CreateTransaction(scriptPubKey, nValue, wtxNew, reservekey, nFeeRequired, strError))\n-    {\n-        if (nValue + nFeeRequired > pwalletMain->GetBalance())\n-            strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n-        LogPrintf(\"SendMoney(): %s\\n\", strError);\n-        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    std::string strError;\n+    if (!pwalletMain->CreateTransaction(scriptPubKey, nValue, wtxNew, reservekey, nFeeRequired, strError)) {\n+        if (nValue + nFeeRequired > curBalance)\n+            throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired)));\n+        else\n+            throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n     if (!pwalletMain->CommitTransaction(wtxNew, reservekey))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");"
      }
    ]
  },
  {
    "sha": "17115d0a34ce5c370e45fb51560c02bee5339b11",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzExNWQwYTM0Y2U1YzM3MGU0NWZiNTE1NjBjMDJiZWU1MzM5YjEx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-02-04T15:34:34Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-02-04T15:34:34Z"
      },
      "message": "fix getblocktemplate lock issue\n\ngetblocktemplate didn't have a wallet lock before #5711 and IMO there is no need for LEAVE/ENTER critical section.",
      "tree": {
        "sha": "7dcfec4b6fd774630be21ce5739d969517703205",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7dcfec4b6fd774630be21ce5739d969517703205"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17115d0a34ce5c370e45fb51560c02bee5339b11",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17115d0a34ce5c370e45fb51560c02bee5339b11",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/17115d0a34ce5c370e45fb51560c02bee5339b11",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17115d0a34ce5c370e45fb51560c02bee5339b11/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "93b7544501d6154f1d6530b670319d72754636ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93b7544501d6154f1d6530b670319d72754636ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93b7544501d6154f1d6530b670319d72754636ae"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 0,
      "deletions": 8
    },
    "files": [
      {
        "sha": "8f2d34edff3f44e2408f245f4c8fb260b5a7dbe3",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17115d0a34ce5c370e45fb51560c02bee5339b11/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17115d0a34ce5c370e45fb51560c02bee5339b11/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=17115d0a34ce5c370e45fb51560c02bee5339b11",
        "patch": "@@ -446,10 +446,6 @@ Value getblocktemplate(const Array& params, bool fHelp)\n         }\n \n         // Release the wallet and main lock while waiting\n-#ifdef ENABLE_WALLET\n-        if(pwalletMain)\n-            LEAVE_CRITICAL_SECTION(pwalletMain->cs_wallet);\n-#endif\n         LEAVE_CRITICAL_SECTION(cs_main);\n         {\n             checktxtime = boost::get_system_time() + boost::posix_time::minutes(1);\n@@ -467,10 +463,6 @@ Value getblocktemplate(const Array& params, bool fHelp)\n             }\n         }\n         ENTER_CRITICAL_SECTION(cs_main);\n-#ifdef ENABLE_WALLET\n-        if(pwalletMain)\n-            ENTER_CRITICAL_SECTION(pwalletMain->cs_wallet);\n-#endif\n \n         if (!IsRPCRunning())\n             throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Shutting down\");"
      }
    ]
  },
  {
    "sha": "1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzRlM2Y5OWYwNTI3M2U0ZDBmYWU3MjQ2ZDNhZmU1YTMzYzUyZWUw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-04T16:16:49Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-04T16:16:56Z"
      },
      "message": "Merge pull request #5754\n\n17115d0 fix getblocktemplate lock issue (Jonas Schnelli)",
      "tree": {
        "sha": "7dcfec4b6fd774630be21ce5739d969517703205",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7dcfec4b6fd774630be21ce5739d969517703205"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU0kX4AAoJEHSBCwEjRsmmGVIH/in1J/Ni8GdTYGWkbbbToJ9U\ngBmORCvxEcRz91RI1wGvmTc7TtaWZYavkuQyF+p4q4DmD33LkjXifvysyve3kCUT\nZI/F8iidxav0/E08M0TGwMUQNtPakahMkb6/rDFG7pQCVs14Q13Jon/1Kr8CQ3Y6\nkHqVcpD1ujmDrFxKPPgr8TItwZGbjSwP22nGB12thnf5OPqbWVniz8jwfWmDd35H\npK/MC+PXRs2YuXxgwslGBulXjzVz564dpN3M9eVOcvADrCH9SQjqjP52KRCXlf+u\n2lZd9OZRg+Z9/oOeSrjrJxBWrlOyBKSTbT7N6V4V662mjQEe0krB+7tBKmDUvGg=\n=noWw\n-----END PGP SIGNATURE-----",
        "payload": "tree 7dcfec4b6fd774630be21ce5739d969517703205\nparent 93b7544501d6154f1d6530b670319d72754636ae\nparent 17115d0a34ce5c370e45fb51560c02bee5339b11\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423066609 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423066616 +0100\n\nMerge pull request #5754\n\n17115d0 fix getblocktemplate lock issue (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "93b7544501d6154f1d6530b670319d72754636ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93b7544501d6154f1d6530b670319d72754636ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93b7544501d6154f1d6530b670319d72754636ae"
      },
      {
        "sha": "17115d0a34ce5c370e45fb51560c02bee5339b11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17115d0a34ce5c370e45fb51560c02bee5339b11",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17115d0a34ce5c370e45fb51560c02bee5339b11"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 0,
      "deletions": 8
    },
    "files": [
      {
        "sha": "8f2d34edff3f44e2408f245f4c8fb260b5a7dbe3",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0",
        "patch": "@@ -446,10 +446,6 @@ Value getblocktemplate(const Array& params, bool fHelp)\n         }\n \n         // Release the wallet and main lock while waiting\n-#ifdef ENABLE_WALLET\n-        if(pwalletMain)\n-            LEAVE_CRITICAL_SECTION(pwalletMain->cs_wallet);\n-#endif\n         LEAVE_CRITICAL_SECTION(cs_main);\n         {\n             checktxtime = boost::get_system_time() + boost::posix_time::minutes(1);\n@@ -467,10 +463,6 @@ Value getblocktemplate(const Array& params, bool fHelp)\n             }\n         }\n         ENTER_CRITICAL_SECTION(cs_main);\n-#ifdef ENABLE_WALLET\n-        if(pwalletMain)\n-            ENTER_CRITICAL_SECTION(pwalletMain->cs_wallet);\n-#endif\n \n         if (!IsRPCRunning())\n             throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Shutting down\");"
      }
    ]
  },
  {
    "sha": "1cb2a00cb8221841e7d748ed49fd2ea0ad50ac12",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxY2IyYTAwY2I4MjIxODQxZTdkNzQ4ZWQ0OWZkMmVhMGFkNTBhYzEy",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-02-04T16:34:28Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-02-04T17:04:49Z"
      },
      "message": "Fix getblocktemplate_proposals test by mining one block\n\nThis triggers the tested node to no longer be in initial\ndownload, allowing the call to getblocktemplate() to succeed.",
      "tree": {
        "sha": "71545511a2e449d532cb655d3eb3df7bdeb4d542",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71545511a2e449d532cb655d3eb3df7bdeb4d542"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1cb2a00cb8221841e7d748ed49fd2ea0ad50ac12",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cb2a00cb8221841e7d748ed49fd2ea0ad50ac12",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1cb2a00cb8221841e7d748ed49fd2ea0ad50ac12",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cb2a00cb8221841e7d748ed49fd2ea0ad50ac12/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f65162002d2c39fde40097316b0be62add9446dd",
        "filename": "qa/rpc-tests/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cb2a00cb8221841e7d748ed49fd2ea0ad50ac12/qa/rpc-tests/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cb2a00cb8221841e7d748ed49fd2ea0ad50ac12/qa/rpc-tests/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_proposals.py?ref=1cb2a00cb8221841e7d748ed49fd2ea0ad50ac12",
        "patch": "@@ -95,6 +95,7 @@ class GetBlockTemplateProposalTest(BitcoinTestFramework):\n \n     def run_test(self):\n         node = self.nodes[0]\n+        node.setgenerate(True, 1) # Mine a block to leave initial block download\n         tmpl = node.getblocktemplate()\n         if 'coinbasetxn' not in tmpl:\n             rawcoinbase = encodeUNum(tmpl['height'])"
      }
    ]
  },
  {
    "sha": "d67a642392e1c217acfe15098f68778062c896bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjdhNjQyMzkyZTFjMjE3YWNmZTE1MDk4ZjY4Nzc4MDYyYzg5NmJi",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-02-04T14:15:52Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-02-04T19:52:18Z"
      },
      "message": "[Qt] add bitcoin logo to about screen",
      "tree": {
        "sha": "c9ab85ef514ca37d4fb4ece1698ca97194e7cb9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9ab85ef514ca37d4fb4ece1698ca97194e7cb9a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d67a642392e1c217acfe15098f68778062c896bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d67a642392e1c217acfe15098f68778062c896bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d67a642392e1c217acfe15098f68778062c896bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d67a642392e1c217acfe15098f68778062c896bb/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31dedb463b0ce77364e516239bf1b9c7eed5b3b0"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 83,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dc7df9d6c888a3223c4839cf2f7ba639ee6dc748",
        "filename": "src/qt/forms/helpmessagedialog.ui",
        "status": "modified",
        "additions": 82,
        "deletions": 0,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d67a642392e1c217acfe15098f68778062c896bb/src/qt/forms/helpmessagedialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d67a642392e1c217acfe15098f68778062c896bb/src/qt/forms/helpmessagedialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/helpmessagedialog.ui?ref=d67a642392e1c217acfe15098f68778062c896bb",
        "patch": "@@ -14,6 +14,69 @@\n    <string notr=\"true\">Bitcoin Core - Command-line options</string>\n   </property>\n   <layout class=\"QHBoxLayout\" name=\"horizontalLayout_2\">\n+   <property name=\"spacing\">\n+    <number>0</number>\n+   </property>\n+   <property name=\"leftMargin\">\n+    <number>12</number>\n+   </property>\n+   <property name=\"topMargin\">\n+    <number>12</number>\n+   </property>\n+   <property name=\"rightMargin\">\n+    <number>12</number>\n+   </property>\n+   <property name=\"bottomMargin\">\n+    <number>12</number>\n+   </property>\n+   <item>\n+    <layout class=\"QVBoxLayout\" name=\"verticalLayoutLogo\" stretch=\"0,0\">\n+     <property name=\"leftMargin\">\n+      <number>0</number>\n+     </property>\n+     <property name=\"topMargin\">\n+      <number>4</number>\n+     </property>\n+     <property name=\"rightMargin\">\n+      <number>0</number>\n+     </property>\n+     <item>\n+      <widget class=\"QLabel\" name=\"aboutLogo\">\n+       <property name=\"sizePolicy\">\n+        <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Ignored\">\n+         <horstretch>0</horstretch>\n+         <verstretch>0</verstretch>\n+        </sizepolicy>\n+       </property>\n+       <property name=\"maximumSize\">\n+        <size>\n+         <width>100</width>\n+         <height>100</height>\n+        </size>\n+       </property>\n+       <property name=\"pixmap\">\n+        <pixmap resource=\"../bitcoin.qrc\">:/icons/bitcoin</pixmap>\n+       </property>\n+       <property name=\"scaledContents\">\n+        <bool>true</bool>\n+       </property>\n+       <property name=\"alignment\">\n+        <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>\n+       </property>\n+      </widget>\n+     </item>\n+     <item>\n+      <widget class=\"QFrame\" name=\"frame\">\n+       <property name=\"frameShape\">\n+        <enum>QFrame::NoFrame</enum>\n+       </property>\n+       <property name=\"frameShadow\">\n+        <enum>QFrame::Raised</enum>\n+       </property>\n+      </widget>\n+     </item>\n+    </layout>\n+   </item>\n    <item>\n     <layout class=\"QVBoxLayout\" name=\"verticalLayout\">\n      <item>\n@@ -25,6 +88,9 @@\n      </item>\n      <item>\n       <widget class=\"QScrollArea\" name=\"scrollArea\">\n+       <property name=\"frameShape\">\n+        <enum>QFrame::NoFrame</enum>\n+       </property>\n        <property name=\"verticalScrollBarPolicy\">\n         <enum>Qt::ScrollBarAlwaysOn</enum>\n        </property>\n@@ -56,6 +122,22 @@\n        </widget>\n       </widget>\n      </item>\n+     <item>\n+      <spacer name=\"verticalSpacer\">\n+       <property name=\"orientation\">\n+        <enum>Qt::Vertical</enum>\n+       </property>\n+       <property name=\"sizeType\">\n+        <enum>QSizePolicy::Fixed</enum>\n+       </property>\n+       <property name=\"sizeHint\" stdset=\"0\">\n+        <size>\n+         <width>4</width>\n+         <height>4</height>\n+        </size>\n+       </property>\n+      </spacer>\n+     </item>\n      <item>\n       <widget class=\"QDialogButtonBox\" name=\"okButton\">\n        <property name=\"orientation\">"
      },
      {
        "sha": "63dd6efb52e9cbf0da9d65d5e2ff280dbd8fffb6",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d67a642392e1c217acfe15098f68778062c896bb/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d67a642392e1c217acfe15098f68778062c896bb/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=d67a642392e1c217acfe15098f68778062c896bb",
        "patch": "@@ -137,6 +137,7 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n \n         ui->helpMessage->moveCursor(QTextCursor::Start);\n         ui->scrollArea->setVisible(false);\n+        ui->aboutLogo->setVisible(false);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "f5791c6ae3b59ef4c8d04e6873310a022e1211b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNTc5MWM2YWUzYjU5ZWY0YzhkMDRlNjg3MzMxMGEwMjJlMTIxMWI2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T08:47:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-05T13:21:25Z"
      },
      "message": "Add more information to errors in ReadBlockFromDisk\n\nA lot of times, disk corruption problems appear here.\nTo facilitate debugging and troubleshooting, add position information\nto the error messages.",
      "tree": {
        "sha": "b4c259437b6104c1efd4db667fd5c13dfac08976",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b4c259437b6104c1efd4db667fd5c13dfac08976"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5791c6ae3b59ef4c8d04e6873310a022e1211b6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5791c6ae3b59ef4c8d04e6873310a022e1211b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5791c6ae3b59ef4c8d04e6873310a022e1211b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5791c6ae3b59ef4c8d04e6873310a022e1211b6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 11,
      "deletions": 4
    },
    "files": [
      {
        "sha": "02f53cd2f2d518ead2da778930f86d7bcb88edb1",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5791c6ae3b59ef4c8d04e6873310a022e1211b6/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5791c6ae3b59ef4c8d04e6873310a022e1211b6/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=f5791c6ae3b59ef4c8d04e6873310a022e1211b6",
        "patch": "@@ -48,6 +48,12 @@ struct CDiskBlockPos\n \n     void SetNull() { nFile = -1; nPos = 0; }\n     bool IsNull() const { return (nFile == -1); }\n+\n+    std::string ToString() const\n+    {\n+        return strprintf(\"CBlockDiskPos(nFile=%i, nPos=%i)\", nFile, nPos);\n+    }\n+\n };\n \n enum BlockStatus {"
      },
      {
        "sha": "32baf5508aeeba1f6179b569681e24fae676ac9d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5791c6ae3b59ef4c8d04e6873310a022e1211b6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5791c6ae3b59ef4c8d04e6873310a022e1211b6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f5791c6ae3b59ef4c8d04e6873310a022e1211b6",
        "patch": "@@ -1199,19 +1199,19 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos)\n     // Open history file to read\n     CAutoFile filein(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n-        return error(\"ReadBlockFromDisk: OpenBlockFile failed\");\n+        return error(\"ReadBlockFromDisk: OpenBlockFile failed for %s\", pos.ToString());\n \n     // Read block\n     try {\n         filein >> block;\n     }\n     catch (const std::exception& e) {\n-        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+        return error(\"%s: Deserialize or I/O error - %s at %s\", __func__, e.what(), pos.ToString());\n     }\n \n     // Check the header\n     if (!CheckProofOfWork(block.GetHash(), block.nBits))\n-        return error(\"ReadBlockFromDisk: Errors in block header\");\n+        return error(\"ReadBlockFromDisk: Errors in block header at %s\", pos.ToString());\n \n     return true;\n }\n@@ -1221,7 +1221,8 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex)\n     if (!ReadBlockFromDisk(block, pindex->GetBlockPos()))\n         return false;\n     if (block.GetHash() != pindex->GetBlockHash())\n-        return error(\"ReadBlockFromDisk(CBlock&, CBlockIndex*): GetHash() doesn't match index\");\n+        return error(\"ReadBlockFromDisk(CBlock&, CBlockIndex*): GetHash() doesn't match index for %s at %s\",\n+                pindex->ToString(), pindex->GetBlockPos().ToString());\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "5d901d8ece9aa29dc1dcacc3f10f24321288b548",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDkwMWQ4ZWNlOWFhMjlkYzFkY2FjYzNmMTBmMjQzMjEyODhiNTQ4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-05T15:01:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-05T15:02:01Z"
      },
      "message": "Merge pull request #5756\n\n1cb2a00 Fix getblocktemplate_proposals test by mining one block (Suhas Daftuar)",
      "tree": {
        "sha": "71545511a2e449d532cb655d3eb3df7bdeb4d542",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71545511a2e449d532cb655d3eb3df7bdeb4d542"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d901d8ece9aa29dc1dcacc3f10f24321288b548",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU04XpAAoJEHSBCwEjRsmm+xsH/iK+LV9rMgEXYLxel7FaOLW9\nztLEBx0FzKO9vOspFW3z2/FUt6RxIFvxvNcu7hdhlfFaXpCv0Fkov+O1o314WRak\n+xHsIjNQ6C5tLeobyFQu+Crr4gib7/F7p6MpY90orJPLSG6P1ga/vfXb/l2g+pE8\nmyn4VJ/NAPk0YYwwXGwlIf9N0DSBVtTtzRY+kjz2e0nxTX+eCexvHOE9eI2JkcZw\n75+/NO86hpPm6Vw3sEYYhkZsUVDVmW8/rgH1l72Q99pPCDd7ewDqNJX6uF+U6EfA\nl7Ljtx+PVQp9SKqc+qqb2HNrSMBFdKQDRr4PIX68PHLlhi+sKARgQMnqCSKHznY=\n=2zjL\n-----END PGP SIGNATURE-----",
        "payload": "tree 71545511a2e449d532cb655d3eb3df7bdeb4d542\nparent 1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0\nparent 1cb2a00cb8221841e7d748ed49fd2ea0ad50ac12\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423148516 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423148521 +0100\n\nMerge pull request #5756\n\n1cb2a00 Fix getblocktemplate_proposals test by mining one block (Suhas Daftuar)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d901d8ece9aa29dc1dcacc3f10f24321288b548",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d901d8ece9aa29dc1dcacc3f10f24321288b548",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d901d8ece9aa29dc1dcacc3f10f24321288b548/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0"
      },
      {
        "sha": "1cb2a00cb8221841e7d748ed49fd2ea0ad50ac12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cb2a00cb8221841e7d748ed49fd2ea0ad50ac12",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1cb2a00cb8221841e7d748ed49fd2ea0ad50ac12"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f65162002d2c39fde40097316b0be62add9446dd",
        "filename": "qa/rpc-tests/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d901d8ece9aa29dc1dcacc3f10f24321288b548/qa/rpc-tests/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d901d8ece9aa29dc1dcacc3f10f24321288b548/qa/rpc-tests/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_proposals.py?ref=5d901d8ece9aa29dc1dcacc3f10f24321288b548",
        "patch": "@@ -95,6 +95,7 @@ class GetBlockTemplateProposalTest(BitcoinTestFramework):\n \n     def run_test(self):\n         node = self.nodes[0]\n+        node.setgenerate(True, 1) # Mine a block to leave initial block download\n         tmpl = node.getblocktemplate()\n         if 'coinbasetxn' not in tmpl:\n             rawcoinbase = encodeUNum(tmpl['height'])"
      }
    ]
  },
  {
    "sha": "65f10e0ffc0359a0af6575711d6a4cc9b96afd7a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWYxMGUwZmZjMDM1OWEwYWY2NTc1NzExZDZhNGNjOWI5NmFmZDdh",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-02-06T10:13:38Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-02-06T10:13:38Z"
      },
      "message": "fix jonasschnelli's gitian key\n\nThere where two keys in the keyfile and it also had a missing \"-key\" in the filename.\nSee: http://bitcoinstats.com/irc/bitcoin-dev/logs/2015/02/05#l1423162105",
      "tree": {
        "sha": "4b351c4fc061e8a83a9f259c222d388fd73106a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b351c4fc061e8a83a9f259c222d388fd73106a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65f10e0ffc0359a0af6575711d6a4cc9b96afd7a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65f10e0ffc0359a0af6575711d6a4cc9b96afd7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65f10e0ffc0359a0af6575711d6a4cc9b96afd7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65f10e0ffc0359a0af6575711d6a4cc9b96afd7a/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d901d8ece9aa29dc1dcacc3f10f24321288b548",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d901d8ece9aa29dc1dcacc3f10f24321288b548",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d901d8ece9aa29dc1dcacc3f10f24321288b548"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fe44c0fbd4eb3b57ff658f48a1e7af67e2d25dda",
        "filename": "contrib/gitian-downloader/jonasschnelli-key.pgp",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f10e0ffc0359a0af6575711d6a4cc9b96afd7a/contrib/gitian-downloader/jonasschnelli-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f10e0ffc0359a0af6575711d6a4cc9b96afd7a/contrib/gitian-downloader/jonasschnelli-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/jonasschnelli-key.pgp?ref=65f10e0ffc0359a0af6575711d6a4cc9b96afd7a"
      },
      {
        "sha": "96140fe171651577d56ce75c3ce50b81026dadac",
        "filename": "contrib/gitian-downloader/jonasschnelli.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d901d8ece9aa29dc1dcacc3f10f24321288b548/contrib/gitian-downloader/jonasschnelli.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d901d8ece9aa29dc1dcacc3f10f24321288b548/contrib/gitian-downloader/jonasschnelli.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/jonasschnelli.pgp?ref=5d901d8ece9aa29dc1dcacc3f10f24321288b548"
      }
    ]
  },
  {
    "sha": "fb6140b54bad51e3b063dfb005bfde13aca64eb4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjYxNDBiNTRiYWQ1MWUzYjA2M2RmYjAwNWJmZGUxM2FjYTY0ZWI0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-06T15:51:01Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-06T15:51:39Z"
      },
      "message": "Merge pull request #5721\n\ncf008ac Acquire CCheckQueue's lock to avoid race condition (Suhas Daftuar)",
      "tree": {
        "sha": "be1accf03bc06675785a66072bfbaf56aaf5ffd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be1accf03bc06675785a66072bfbaf56aaf5ffd9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb6140b54bad51e3b063dfb005bfde13aca64eb4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU1OMLAAoJEHSBCwEjRsmmlK8H/3ZFLGNrfcZq7UFz0nFLi+cz\nW5tqZAfJcKp3b6zZAweGs67w4TU6KGXq+xgz4/h2jjzzlYOaasCEI/x7CP+wG67d\nhOSBgmnwoqz38yYNan1TQ8gGGikUwNVCcvs2xplvQx1SzpelLKW78yEutL/2EH6U\nITbzBfiRu6iAcqLSdDP0HI7vA7w5yPwmf0qFzzeMp0Lu/dyW/J9psnr9yV+JL3Tq\n5Ms4Oiag5KitUha3mdz2Zh+WGoMEe/D0e8IAE1ujJCuraA5c8Jr/EfW/l733ci3m\n19JlMhn7B5ripEgfbXioYtpYjdzgT1OXTHJ4uovIKgNxjYPpYVv9NVU8On/aLC8=\n=NGh+\n-----END PGP SIGNATURE-----",
        "payload": "tree be1accf03bc06675785a66072bfbaf56aaf5ffd9\nparent 5d901d8ece9aa29dc1dcacc3f10f24321288b548\nparent cf008ac8c3c5d582562d88ad89020daef3e64dcb\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423237861 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423237899 +0100\n\nMerge pull request #5721\n\ncf008ac Acquire CCheckQueue's lock to avoid race condition (Suhas Daftuar)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb6140b54bad51e3b063dfb005bfde13aca64eb4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb6140b54bad51e3b063dfb005bfde13aca64eb4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb6140b54bad51e3b063dfb005bfde13aca64eb4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d901d8ece9aa29dc1dcacc3f10f24321288b548",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d901d8ece9aa29dc1dcacc3f10f24321288b548",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d901d8ece9aa29dc1dcacc3f10f24321288b548"
      },
      {
        "sha": "cf008ac8c3c5d582562d88ad89020daef3e64dcb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf008ac8c3c5d582562d88ad89020daef3e64dcb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf008ac8c3c5d582562d88ad89020daef3e64dcb"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 8,
      "deletions": 4
    },
    "files": [
      {
        "sha": "6f6b97e3a7a33b0ead1ffeef6931cc1356d6e420",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb6140b54bad51e3b063dfb005bfde13aca64eb4/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb6140b54bad51e3b063dfb005bfde13aca64eb4/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=fb6140b54bad51e3b063dfb005bfde13aca64eb4",
        "patch": "@@ -161,7 +161,12 @@ class CCheckQueue\n     {\n     }\n \n-    friend class CCheckQueueControl<T>;\n+    bool IsIdle()\n+    {\n+        boost::unique_lock<boost::mutex> lock(mutex);\n+        return (nTotal == nIdle && nTodo == 0 && fAllOk == true);\n+    }\n+\n };\n \n /** \n@@ -180,9 +185,8 @@ class CCheckQueueControl\n     {\n         // passed queue is supposed to be unused, or NULL\n         if (pqueue != NULL) {\n-            assert(pqueue->nTotal == pqueue->nIdle);\n-            assert(pqueue->nTodo == 0);\n-            assert(pqueue->fAllOk == true);\n+            bool isIdle = pqueue->IsIdle();\n+            assert(isIdle);\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "dca799e1db6e319fdd47e0bfdb038eab0efabb85",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkY2E3OTllMWRiNmUzMTlmZGQ0N2UwYmZkYjAzOGVhYjBlZmFiYjg1",
    "commit": {
      "author": {
        "name": "Ivan Pustogarov",
        "email": "ivanpustogarov@users.noreply.github.com",
        "date": "2014-12-07T16:30:57Z"
      },
      "committer": {
        "name": "Ivan Pustogarov",
        "email": "ivanpustogarov@users.noreply.github.com",
        "date": "2015-02-06T21:03:42Z"
      },
      "message": "Ignore getaddr messages on Outbound connections.\n\nThe only time when a client sends a \"getaddr\" message is when he\nesatblishes an Outbound connection (see ProcessMessage() in\nsrc/main.cpp).  Another bitcoin client is expected to receive a\n\"getaddr\" message only on Inbound connection. Ignoring \"gettaddr\"\nrequests on Outbound connections can resolve potential privacy issues\n(and as was said such request normally do not happen anyway).",
      "tree": {
        "sha": "ced9b22d5688baf8ed31b37a59f34e4db2851673",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ced9b22d5688baf8ed31b37a59f34e4db2851673"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dca799e1db6e319fdd47e0bfdb038eab0efabb85",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dca799e1db6e319fdd47e0bfdb038eab0efabb85",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dca799e1db6e319fdd47e0bfdb038eab0efabb85",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dca799e1db6e319fdd47e0bfdb038eab0efabb85/comments",
    "author": {
      "login": "ivanpustogarov",
      "id": 8126617,
      "node_id": "MDQ6VXNlcjgxMjY2MTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8126617?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanpustogarov",
      "html_url": "https://github.com/ivanpustogarov",
      "followers_url": "https://api.github.com/users/ivanpustogarov/followers",
      "following_url": "https://api.github.com/users/ivanpustogarov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanpustogarov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanpustogarov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanpustogarov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanpustogarov/orgs",
      "repos_url": "https://api.github.com/users/ivanpustogarov/repos",
      "events_url": "https://api.github.com/users/ivanpustogarov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanpustogarov/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ivanpustogarov",
      "id": 8126617,
      "node_id": "MDQ6VXNlcjgxMjY2MTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8126617?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanpustogarov",
      "html_url": "https://github.com/ivanpustogarov",
      "followers_url": "https://api.github.com/users/ivanpustogarov/followers",
      "following_url": "https://api.github.com/users/ivanpustogarov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanpustogarov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanpustogarov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanpustogarov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanpustogarov/orgs",
      "repos_url": "https://api.github.com/users/ivanpustogarov/repos",
      "events_url": "https://api.github.com/users/ivanpustogarov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanpustogarov/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb6140b54bad51e3b063dfb005bfde13aca64eb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb6140b54bad51e3b063dfb005bfde13aca64eb4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb6140b54bad51e3b063dfb005bfde13aca64eb4"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a30084a75bd5dc7e3057edd3168fb8e90b27cb5d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dca799e1db6e319fdd47e0bfdb038eab0efabb85/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dca799e1db6e319fdd47e0bfdb038eab0efabb85/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=dca799e1db6e319fdd47e0bfdb038eab0efabb85",
        "patch": "@@ -4008,7 +4008,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     }\n \n \n-    else if (strCommand == \"getaddr\")\n+    // This asymmetric behavior for inbound and outbound connections was introduced\n+    // to prevent a fingerprinting attack: an attacker can send specific fake addresses\n+    // to users' AddrMan and later request them by sending getaddr messages. \n+    // Making users (which are behind NAT and can only make outgoing connections) ignore \n+    // getaddr message mitigates the attack.\n+    else if ((strCommand == \"getaddr\") && (pfrom->fInbound))\n     {\n         pfrom->vAddrToSend.clear();\n         vector<CAddress> vAddr = addrman.GetAddr();"
      }
    ]
  },
  {
    "sha": "28d4cff0ed2d4438da4bbf2d4ca0465715603af5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOGQ0Y2ZmMGVkMmQ0NDM4ZGE0YmJmMmQ0Y2EwNDY1NzE1NjAzYWY1",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-02-08T00:59:58Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-02-08T19:58:59Z"
      },
      "message": "Sanitize command strings before logging them.\n\nNormally bitcoin core does not display any network originated strings without\n sanitizing or hex encoding.  This wasn't done for strcommand in many places.\n\nThis could be used to play havoc with a terminal displaying the logs,\n especially with printtoconsole in use.\n\nThanks to Evil-Knievel for reporting this issue.",
      "tree": {
        "sha": "052974da2c9aba3e088f4e714f66a0962cda6710",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/052974da2c9aba3e088f4e714f66a0962cda6710"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28d4cff0ed2d4438da4bbf2d4ca0465715603af5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28d4cff0ed2d4438da4bbf2d4ca0465715603af5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28d4cff0ed2d4438da4bbf2d4ca0465715603af5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28d4cff0ed2d4438da4bbf2d4ca0465715603af5/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb6140b54bad51e3b063dfb005bfde13aca64eb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb6140b54bad51e3b063dfb005bfde13aca64eb4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb6140b54bad51e3b063dfb005bfde13aca64eb4"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "43e5a2d024edeeede19713ed2c643ad51d0f67ae",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28d4cff0ed2d4438da4bbf2d4ca0465715603af5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28d4cff0ed2d4438da4bbf2d4ca0465715603af5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=28d4cff0ed2d4438da4bbf2d4ca0465715603af5",
        "patch": "@@ -3450,7 +3450,7 @@ void static ProcessGetData(CNode* pfrom)\n bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv, int64_t nTimeReceived)\n {\n     RandAddSeedPerfmon();\n-    LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", strCommand, vRecv.size(), pfrom->id);\n+    LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n     if (mapArgs.count(\"-dropmessagestest\") && GetRand(atoi(mapArgs[\"-dropmessagestest\"])) == 0)\n     {\n         LogPrintf(\"dropmessagestest DROPPING RECV MESSAGE\\n\");\n@@ -4285,7 +4285,7 @@ bool ProcessMessages(CNode* pfrom)\n \n         // Scan for message start\n         if (memcmp(msg.hdr.pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE) != 0) {\n-            LogPrintf(\"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", msg.hdr.GetCommand(), pfrom->id);\n+            LogPrintf(\"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", SanitizeString(msg.hdr.GetCommand()), pfrom->id);\n             fOk = false;\n             break;\n         }\n@@ -4294,7 +4294,7 @@ bool ProcessMessages(CNode* pfrom)\n         CMessageHeader& hdr = msg.hdr;\n         if (!hdr.IsValid())\n         {\n-            LogPrintf(\"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", hdr.GetCommand(), pfrom->id);\n+            LogPrintf(\"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", SanitizeString(hdr.GetCommand()), pfrom->id);\n             continue;\n         }\n         string strCommand = hdr.GetCommand();\n@@ -4310,7 +4310,7 @@ bool ProcessMessages(CNode* pfrom)\n         if (nChecksum != hdr.nChecksum)\n         {\n             LogPrintf(\"ProcessMessages(%s, %u bytes): CHECKSUM ERROR nChecksum=%08x hdr.nChecksum=%08x\\n\",\n-               strCommand, nMessageSize, nChecksum, hdr.nChecksum);\n+               SanitizeString(strCommand), nMessageSize, nChecksum, hdr.nChecksum);\n             continue;\n         }\n \n@@ -4327,12 +4327,12 @@ bool ProcessMessages(CNode* pfrom)\n             if (strstr(e.what(), \"end of data\"))\n             {\n                 // Allow exceptions from under-length message on vRecv\n-                LogPrintf(\"ProcessMessages(%s, %u bytes): Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", strCommand, nMessageSize, e.what());\n+                LogPrintf(\"ProcessMessages(%s, %u bytes): Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", SanitizeString(strCommand), nMessageSize, e.what());\n             }\n             else if (strstr(e.what(), \"size too large\"))\n             {\n                 // Allow exceptions from over-long size\n-                LogPrintf(\"ProcessMessages(%s, %u bytes): Exception '%s' caught\\n\", strCommand, nMessageSize, e.what());\n+                LogPrintf(\"ProcessMessages(%s, %u bytes): Exception '%s' caught\\n\", SanitizeString(strCommand), nMessageSize, e.what());\n             }\n             else\n             {\n@@ -4349,7 +4349,7 @@ bool ProcessMessages(CNode* pfrom)\n         }\n \n         if (!fRet)\n-            LogPrintf(\"ProcessMessage(%s, %u bytes) FAILED peer=%d\\n\", strCommand, nMessageSize, pfrom->id);\n+            LogPrintf(\"ProcessMessage(%s, %u bytes) FAILED peer=%d\\n\", SanitizeString(strCommand), nMessageSize, pfrom->id);\n \n         break;\n     }"
      },
      {
        "sha": "3c3666615e11cdd3a8f5557b16d8a09f4ad36a56",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28d4cff0ed2d4438da4bbf2d4ca0465715603af5/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28d4cff0ed2d4438da4bbf2d4ca0465715603af5/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=28d4cff0ed2d4438da4bbf2d4ca0465715603af5",
        "patch": "@@ -1971,7 +1971,7 @@ void CNode::BeginMessage(const char* pszCommand) EXCLUSIVE_LOCK_FUNCTION(cs_vSen\n     ENTER_CRITICAL_SECTION(cs_vSend);\n     assert(ssSend.size() == 0);\n     ssSend << CMessageHeader(pszCommand, 0);\n-    LogPrint(\"net\", \"sending: %s \", pszCommand);\n+    LogPrint(\"net\", \"sending: %s \", SanitizeString(pszCommand));\n }\n \n void CNode::AbortMessage() UNLOCK_FUNCTION(cs_vSend)"
      },
      {
        "sha": "20e9252d7ee8dfb63cba099e265a0782660e33b9",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28d4cff0ed2d4438da4bbf2d4ca0465715603af5/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28d4cff0ed2d4438da4bbf2d4ca0465715603af5/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=28d4cff0ed2d4438da4bbf2d4ca0465715603af5",
        "patch": "@@ -849,7 +849,7 @@ void JSONRequest::parse(const Value& valRequest)\n         throw JSONRPCError(RPC_INVALID_REQUEST, \"Method must be a string\");\n     strMethod = valMethod.get_str();\n     if (strMethod != \"getblocktemplate\")\n-        LogPrint(\"rpc\", \"ThreadRPCServer method=%s\\n\", strMethod);\n+        LogPrint(\"rpc\", \"ThreadRPCServer method=%s\\n\", SanitizeString(strMethod));\n \n     // Parse params\n     Value valParams = find_value(request, \"params\");"
      }
    ]
  },
  {
    "sha": "32a8b6a9d771aeff805898df1fe36ca9d0eb63a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMmE4YjZhOWQ3NzFhZWZmODA1ODk4ZGYxZmUzNmNhOWQwZWI2M2E0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T09:43:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T09:43:53Z"
      },
      "message": "Merge pull request #5770\n\n28d4cff Sanitize command strings before logging them. (Gregory Maxwell)",
      "tree": {
        "sha": "052974da2c9aba3e088f4e714f66a0962cda6710",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/052974da2c9aba3e088f4e714f66a0962cda6710"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32a8b6a9d771aeff805898df1fe36ca9d0eb63a4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU2IFZAAoJEHSBCwEjRsmmZckH/RObeBgC7OTJl6hJeNC+LlIj\nBeoGTHMlqiUnxkTU6U4JbedwEw+ld3I7rkGeZNxiRrcIj3G1fTnpTbmXGvwNHeVE\nnaRFYG2U+ZSnI6Beu4hInOdWp4yQ/arYajr8/O38LhzRRimg1EfExXfTjXUUxcl6\n14bc46h6cG5IsP36BgwdWLzf9DpOrMlMJUYovohVK5mv8eA7s2cb2hvdA4n2hXcL\nYVW9KDJqiYqNudAK8VLM7UeFGilywTewnPkE8zdDX5PvTIWQzmiWG7gYD8uRlyhK\nIWXqVlV8kfzvHE7aXP4AckRzJrOO+iu/qQIyy/HyBxUL1dACRXtrFCaeTj9mmPg=\n=H2FY\n-----END PGP SIGNATURE-----",
        "payload": "tree 052974da2c9aba3e088f4e714f66a0962cda6710\nparent fb6140b54bad51e3b063dfb005bfde13aca64eb4\nparent 28d4cff0ed2d4438da4bbf2d4ca0465715603af5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423475025 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423475033 +0100\n\nMerge pull request #5770\n\n28d4cff Sanitize command strings before logging them. (Gregory Maxwell)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32a8b6a9d771aeff805898df1fe36ca9d0eb63a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32a8b6a9d771aeff805898df1fe36ca9d0eb63a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32a8b6a9d771aeff805898df1fe36ca9d0eb63a4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb6140b54bad51e3b063dfb005bfde13aca64eb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb6140b54bad51e3b063dfb005bfde13aca64eb4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb6140b54bad51e3b063dfb005bfde13aca64eb4"
      },
      {
        "sha": "28d4cff0ed2d4438da4bbf2d4ca0465715603af5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28d4cff0ed2d4438da4bbf2d4ca0465715603af5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28d4cff0ed2d4438da4bbf2d4ca0465715603af5"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "43e5a2d024edeeede19713ed2c643ad51d0f67ae",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32a8b6a9d771aeff805898df1fe36ca9d0eb63a4/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32a8b6a9d771aeff805898df1fe36ca9d0eb63a4/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=32a8b6a9d771aeff805898df1fe36ca9d0eb63a4",
        "patch": "@@ -3450,7 +3450,7 @@ void static ProcessGetData(CNode* pfrom)\n bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv, int64_t nTimeReceived)\n {\n     RandAddSeedPerfmon();\n-    LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", strCommand, vRecv.size(), pfrom->id);\n+    LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n     if (mapArgs.count(\"-dropmessagestest\") && GetRand(atoi(mapArgs[\"-dropmessagestest\"])) == 0)\n     {\n         LogPrintf(\"dropmessagestest DROPPING RECV MESSAGE\\n\");\n@@ -4285,7 +4285,7 @@ bool ProcessMessages(CNode* pfrom)\n \n         // Scan for message start\n         if (memcmp(msg.hdr.pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE) != 0) {\n-            LogPrintf(\"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", msg.hdr.GetCommand(), pfrom->id);\n+            LogPrintf(\"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", SanitizeString(msg.hdr.GetCommand()), pfrom->id);\n             fOk = false;\n             break;\n         }\n@@ -4294,7 +4294,7 @@ bool ProcessMessages(CNode* pfrom)\n         CMessageHeader& hdr = msg.hdr;\n         if (!hdr.IsValid())\n         {\n-            LogPrintf(\"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", hdr.GetCommand(), pfrom->id);\n+            LogPrintf(\"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", SanitizeString(hdr.GetCommand()), pfrom->id);\n             continue;\n         }\n         string strCommand = hdr.GetCommand();\n@@ -4310,7 +4310,7 @@ bool ProcessMessages(CNode* pfrom)\n         if (nChecksum != hdr.nChecksum)\n         {\n             LogPrintf(\"ProcessMessages(%s, %u bytes): CHECKSUM ERROR nChecksum=%08x hdr.nChecksum=%08x\\n\",\n-               strCommand, nMessageSize, nChecksum, hdr.nChecksum);\n+               SanitizeString(strCommand), nMessageSize, nChecksum, hdr.nChecksum);\n             continue;\n         }\n \n@@ -4327,12 +4327,12 @@ bool ProcessMessages(CNode* pfrom)\n             if (strstr(e.what(), \"end of data\"))\n             {\n                 // Allow exceptions from under-length message on vRecv\n-                LogPrintf(\"ProcessMessages(%s, %u bytes): Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", strCommand, nMessageSize, e.what());\n+                LogPrintf(\"ProcessMessages(%s, %u bytes): Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", SanitizeString(strCommand), nMessageSize, e.what());\n             }\n             else if (strstr(e.what(), \"size too large\"))\n             {\n                 // Allow exceptions from over-long size\n-                LogPrintf(\"ProcessMessages(%s, %u bytes): Exception '%s' caught\\n\", strCommand, nMessageSize, e.what());\n+                LogPrintf(\"ProcessMessages(%s, %u bytes): Exception '%s' caught\\n\", SanitizeString(strCommand), nMessageSize, e.what());\n             }\n             else\n             {\n@@ -4349,7 +4349,7 @@ bool ProcessMessages(CNode* pfrom)\n         }\n \n         if (!fRet)\n-            LogPrintf(\"ProcessMessage(%s, %u bytes) FAILED peer=%d\\n\", strCommand, nMessageSize, pfrom->id);\n+            LogPrintf(\"ProcessMessage(%s, %u bytes) FAILED peer=%d\\n\", SanitizeString(strCommand), nMessageSize, pfrom->id);\n \n         break;\n     }"
      },
      {
        "sha": "3c3666615e11cdd3a8f5557b16d8a09f4ad36a56",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32a8b6a9d771aeff805898df1fe36ca9d0eb63a4/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32a8b6a9d771aeff805898df1fe36ca9d0eb63a4/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=32a8b6a9d771aeff805898df1fe36ca9d0eb63a4",
        "patch": "@@ -1971,7 +1971,7 @@ void CNode::BeginMessage(const char* pszCommand) EXCLUSIVE_LOCK_FUNCTION(cs_vSen\n     ENTER_CRITICAL_SECTION(cs_vSend);\n     assert(ssSend.size() == 0);\n     ssSend << CMessageHeader(pszCommand, 0);\n-    LogPrint(\"net\", \"sending: %s \", pszCommand);\n+    LogPrint(\"net\", \"sending: %s \", SanitizeString(pszCommand));\n }\n \n void CNode::AbortMessage() UNLOCK_FUNCTION(cs_vSend)"
      },
      {
        "sha": "20e9252d7ee8dfb63cba099e265a0782660e33b9",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32a8b6a9d771aeff805898df1fe36ca9d0eb63a4/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32a8b6a9d771aeff805898df1fe36ca9d0eb63a4/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=32a8b6a9d771aeff805898df1fe36ca9d0eb63a4",
        "patch": "@@ -849,7 +849,7 @@ void JSONRequest::parse(const Value& valRequest)\n         throw JSONRPCError(RPC_INVALID_REQUEST, \"Method must be a string\");\n     strMethod = valMethod.get_str();\n     if (strMethod != \"getblocktemplate\")\n-        LogPrint(\"rpc\", \"ThreadRPCServer method=%s\\n\", strMethod);\n+        LogPrint(\"rpc\", \"ThreadRPCServer method=%s\\n\", SanitizeString(strMethod));\n \n     // Parse params\n     Value valParams = find_value(request, \"params\");"
      }
    ]
  },
  {
    "sha": "47ee8cf0911a8da90fe2f952da5f5b9dfe94e181",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0N2VlOGNmMDkxMWE4ZGE5MGZlMmY5NTJkYTVmNWI5ZGZlOTRlMTgx",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-02-09T10:21:26Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-02-09T10:21:26Z"
      },
      "message": "[Qt] use qint64 in BitcoinGUI::setNumBlocks\n\n- as QDateTime.secsTo() returns a qint64 also store in a qint64 and not in\n  an integer",
      "tree": {
        "sha": "751aad1c3c28ef81d2cbee42b0ce1eff1c0e06eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/751aad1c3c28ef81d2cbee42b0ce1eff1c0e06eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47ee8cf0911a8da90fe2f952da5f5b9dfe94e181",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47ee8cf0911a8da90fe2f952da5f5b9dfe94e181",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47ee8cf0911a8da90fe2f952da5f5b9dfe94e181",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47ee8cf0911a8da90fe2f952da5f5b9dfe94e181/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "32a8b6a9d771aeff805898df1fe36ca9d0eb63a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32a8b6a9d771aeff805898df1fe36ca9d0eb63a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32a8b6a9d771aeff805898df1fe36ca9d0eb63a4"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5c5da6dba0b59d3aabc95f64627860d67d2b009d",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ee8cf0911a8da90fe2f952da5f5b9dfe94e181/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ee8cf0911a8da90fe2f952da5f5b9dfe94e181/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=47ee8cf0911a8da90fe2f952da5f5b9dfe94e181",
        "patch": "@@ -682,7 +682,7 @@ void BitcoinGUI::setNumBlocks(int count)\n \n     QDateTime lastBlockDate = clientModel->getLastBlockDate();\n     QDateTime currentDate = QDateTime::currentDateTime();\n-    int secs = lastBlockDate.secsTo(currentDate);\n+    qint64 secs = lastBlockDate.secsTo(currentDate);\n \n     tooltip = tr(\"Processed %n blocks of transaction history.\", \"\", count);\n \n@@ -722,8 +722,8 @@ void BitcoinGUI::setNumBlocks(int count)\n         }\n         else\n         {\n-            int years = secs / YEAR_IN_SECONDS;\n-            int remainder = secs % YEAR_IN_SECONDS;\n+            qint64 years = secs / YEAR_IN_SECONDS;\n+            qint64 remainder = secs % YEAR_IN_SECONDS;\n             timeBehindText = tr(\"%1 and %2\").arg(tr(\"%n year(s)\", \"\", years)).arg(tr(\"%n week(s)\",\"\", remainder/WEEK_IN_SECONDS));\n         }\n "
      }
    ]
  },
  {
    "sha": "deda3e156d9d424051758eeca9569a90365d2dd5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZWRhM2UxNTZkOWQ0MjQwNTE3NThlZWNhOTU2OWE5MDM2NWQyZGQ1",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-02-09T10:25:23Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-02-09T10:28:03Z"
      },
      "message": "[Qt] remove unused getNumBlocksAtStartup() from ClientModel",
      "tree": {
        "sha": "0bb72ae599b4833a74a091a183c18029d6c5043c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0bb72ae599b4833a74a091a183c18029d6c5043c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/deda3e156d9d424051758eeca9569a90365d2dd5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deda3e156d9d424051758eeca9569a90365d2dd5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/deda3e156d9d424051758eeca9569a90365d2dd5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deda3e156d9d424051758eeca9569a90365d2dd5/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "47ee8cf0911a8da90fe2f952da5f5b9dfe94e181",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47ee8cf0911a8da90fe2f952da5f5b9dfe94e181",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47ee8cf0911a8da90fe2f952da5f5b9dfe94e181"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 3,
      "deletions": 11
    },
    "files": [
      {
        "sha": "729eb84a18190349364bbc1ec78fb7b6dcc6d058",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deda3e156d9d424051758eeca9569a90365d2dd5/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deda3e156d9d424051758eeca9569a90365d2dd5/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=deda3e156d9d424051758eeca9569a90365d2dd5",
        "patch": "@@ -29,8 +29,9 @@ ClientModel::ClientModel(OptionsModel *optionsModel, QObject *parent) :\n     optionsModel(optionsModel),\n     peerTableModel(0),\n     cachedNumBlocks(0),\n-    cachedReindexing(0), cachedImporting(0),\n-    numBlocksAtStartup(-1), pollTimer(0)\n+    cachedReindexing(0),\n+    cachedImporting(0),\n+    pollTimer(0)\n {\n     peerTableModel = new PeerTableModel(this);\n     pollTimer = new QTimer(this);\n@@ -65,12 +66,6 @@ int ClientModel::getNumBlocks() const\n     return chainActive.Height();\n }\n \n-int ClientModel::getNumBlocksAtStartup()\n-{\n-    if (numBlocksAtStartup == -1) numBlocksAtStartup = getNumBlocks();\n-    return numBlocksAtStartup;\n-}\n-\n quint64 ClientModel::getTotalBytesRecv() const\n {\n     return CNode::GetTotalBytesRecv();"
      },
      {
        "sha": "7b74728b262e33ef77c7b8b22c58fb2dc640f82e",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deda3e156d9d424051758eeca9569a90365d2dd5/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deda3e156d9d424051758eeca9569a90365d2dd5/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=deda3e156d9d424051758eeca9569a90365d2dd5",
        "patch": "@@ -48,7 +48,6 @@ class ClientModel : public QObject\n     //! Return number of connections, default is in- and outbound (total)\n     int getNumConnections(unsigned int flags = CONNECTIONS_ALL) const;\n     int getNumBlocks() const;\n-    int getNumBlocksAtStartup();\n \n     quint64 getTotalBytesRecv() const;\n     quint64 getTotalBytesSent() const;\n@@ -77,8 +76,6 @@ class ClientModel : public QObject\n     bool cachedReindexing;\n     bool cachedImporting;\n \n-    int numBlocksAtStartup;\n-\n     QTimer *pollTimer;\n \n     void subscribeToCoreSignals();"
      }
    ]
  },
  {
    "sha": "0f446724370646a3332911e03c287d91772aa515",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjQ0NjcyNDM3MDY0NmEzMzMyOTExZTAzYzI4N2Q5MTc3MmFhNTE1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T10:13:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T10:34:01Z"
      },
      "message": "Merge pull request #5753\n\nd67a642 [Qt] add bitcoin logo to about screen (Jonas Schnelli)",
      "tree": {
        "sha": "b3e72832c5d8b79e23c7b0406a0cc7c1ccef0861",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3e72832c5d8b79e23c7b0406a0cc7c1ccef0861"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f446724370646a3332911e03c287d91772aa515",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU2I0ZAAoJEHSBCwEjRsmm8OcH/1AV30yCpsMwrQHlYGeLClY6\nEriOPaivkpgdj6Tcjn9zxzefKy9wIxcBdvBjoP5pVaG0oQel2jyg1mBcTwrCHchi\nvQLlkUcNuVYWD9e5Ss0z5QO3IkUEUSEhWr2YMEeAfxhNgUaOgIhE6kcSS8nAtg3D\nYy7LjTwybJh2eXwygOBkfIyjrGzNEAGh0OIUc2I4+R/Kc8SGWe8RpIRdY0Xywn1N\nAw1tXdZqvDtKLUMfP84bN78F1mWy9ooLFTrKFJzzyFinc7d7VrjeB/Jmj12j+wn6\nfr2+4NzQqikQtT9nGa91Mq9XcQHWYVsk3SS+4EW6vHdNzzTPU0vKe5Rpg6ZW7XY=\n=Tr/l\n-----END PGP SIGNATURE-----",
        "payload": "tree b3e72832c5d8b79e23c7b0406a0cc7c1ccef0861\nparent 32a8b6a9d771aeff805898df1fe36ca9d0eb63a4\nparent d67a642392e1c217acfe15098f68778062c896bb\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423476806 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423478041 +0100\n\nMerge pull request #5753\n\nd67a642 [Qt] add bitcoin logo to about screen (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f446724370646a3332911e03c287d91772aa515",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f446724370646a3332911e03c287d91772aa515",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f446724370646a3332911e03c287d91772aa515/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "32a8b6a9d771aeff805898df1fe36ca9d0eb63a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32a8b6a9d771aeff805898df1fe36ca9d0eb63a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32a8b6a9d771aeff805898df1fe36ca9d0eb63a4"
      },
      {
        "sha": "d67a642392e1c217acfe15098f68778062c896bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d67a642392e1c217acfe15098f68778062c896bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d67a642392e1c217acfe15098f68778062c896bb"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 83,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dc7df9d6c888a3223c4839cf2f7ba639ee6dc748",
        "filename": "src/qt/forms/helpmessagedialog.ui",
        "status": "modified",
        "additions": 82,
        "deletions": 0,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f446724370646a3332911e03c287d91772aa515/src/qt/forms/helpmessagedialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f446724370646a3332911e03c287d91772aa515/src/qt/forms/helpmessagedialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/helpmessagedialog.ui?ref=0f446724370646a3332911e03c287d91772aa515",
        "patch": "@@ -14,6 +14,69 @@\n    <string notr=\"true\">Bitcoin Core - Command-line options</string>\n   </property>\n   <layout class=\"QHBoxLayout\" name=\"horizontalLayout_2\">\n+   <property name=\"spacing\">\n+    <number>0</number>\n+   </property>\n+   <property name=\"leftMargin\">\n+    <number>12</number>\n+   </property>\n+   <property name=\"topMargin\">\n+    <number>12</number>\n+   </property>\n+   <property name=\"rightMargin\">\n+    <number>12</number>\n+   </property>\n+   <property name=\"bottomMargin\">\n+    <number>12</number>\n+   </property>\n+   <item>\n+    <layout class=\"QVBoxLayout\" name=\"verticalLayoutLogo\" stretch=\"0,0\">\n+     <property name=\"leftMargin\">\n+      <number>0</number>\n+     </property>\n+     <property name=\"topMargin\">\n+      <number>4</number>\n+     </property>\n+     <property name=\"rightMargin\">\n+      <number>0</number>\n+     </property>\n+     <item>\n+      <widget class=\"QLabel\" name=\"aboutLogo\">\n+       <property name=\"sizePolicy\">\n+        <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Ignored\">\n+         <horstretch>0</horstretch>\n+         <verstretch>0</verstretch>\n+        </sizepolicy>\n+       </property>\n+       <property name=\"maximumSize\">\n+        <size>\n+         <width>100</width>\n+         <height>100</height>\n+        </size>\n+       </property>\n+       <property name=\"pixmap\">\n+        <pixmap resource=\"../bitcoin.qrc\">:/icons/bitcoin</pixmap>\n+       </property>\n+       <property name=\"scaledContents\">\n+        <bool>true</bool>\n+       </property>\n+       <property name=\"alignment\">\n+        <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>\n+       </property>\n+      </widget>\n+     </item>\n+     <item>\n+      <widget class=\"QFrame\" name=\"frame\">\n+       <property name=\"frameShape\">\n+        <enum>QFrame::NoFrame</enum>\n+       </property>\n+       <property name=\"frameShadow\">\n+        <enum>QFrame::Raised</enum>\n+       </property>\n+      </widget>\n+     </item>\n+    </layout>\n+   </item>\n    <item>\n     <layout class=\"QVBoxLayout\" name=\"verticalLayout\">\n      <item>\n@@ -25,6 +88,9 @@\n      </item>\n      <item>\n       <widget class=\"QScrollArea\" name=\"scrollArea\">\n+       <property name=\"frameShape\">\n+        <enum>QFrame::NoFrame</enum>\n+       </property>\n        <property name=\"verticalScrollBarPolicy\">\n         <enum>Qt::ScrollBarAlwaysOn</enum>\n        </property>\n@@ -56,6 +122,22 @@\n        </widget>\n       </widget>\n      </item>\n+     <item>\n+      <spacer name=\"verticalSpacer\">\n+       <property name=\"orientation\">\n+        <enum>Qt::Vertical</enum>\n+       </property>\n+       <property name=\"sizeType\">\n+        <enum>QSizePolicy::Fixed</enum>\n+       </property>\n+       <property name=\"sizeHint\" stdset=\"0\">\n+        <size>\n+         <width>4</width>\n+         <height>4</height>\n+        </size>\n+       </property>\n+      </spacer>\n+     </item>\n      <item>\n       <widget class=\"QDialogButtonBox\" name=\"okButton\">\n        <property name=\"orientation\">"
      },
      {
        "sha": "63dd6efb52e9cbf0da9d65d5e2ff280dbd8fffb6",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f446724370646a3332911e03c287d91772aa515/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f446724370646a3332911e03c287d91772aa515/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=0f446724370646a3332911e03c287d91772aa515",
        "patch": "@@ -137,6 +137,7 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n \n         ui->helpMessage->moveCursor(QTextCursor::Start);\n         ui->scrollArea->setVisible(false);\n+        ui->aboutLogo->setVisible(false);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "5cefea9c4bf8880628157113cc44dcb9ffbcd6de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Y2VmZWE5YzRiZjg4ODA2MjgxNTcxMTNjYzQ0ZGNiOWZmYmNkNmRl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T10:34:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T10:34:26Z"
      },
      "message": "Merge pull request #5764\n\n65f10e0 fix jonasschnelli's gitian key (Jonas Schnelli)",
      "tree": {
        "sha": "824094895926eec36b479794f8c2edf638bbef5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/824094895926eec36b479794f8c2edf638bbef5b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5cefea9c4bf8880628157113cc44dcb9ffbcd6de",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU2I0yAAoJEHSBCwEjRsmmXJ0H/2heVZoMW95sBhLSBzywGuuN\ntG4tDmKU8X5e1p5GA1d6bR6e3WT7h6Wo2OX/KGo9Mxb2LgJiUDYQvaIvMxt6R1AQ\nRkeqUefk2u1UDx5cBEJP6RTlcX5O69H010zSHu8mVl0vvzMcDcZabSeW7rXve+2F\n54vD/SnAKpd2Yh/vZa7McQwxVKBQZUjBSEtw2j3DfKTW/yQB4KDDPBDXYLQIOFoH\nL0Ahfst8zz43RtL2h4SuSOqpsKBItJlG44+iA7sXfkUzVkyjC1kv7N0tYW3JsD5J\nnqNiN08LyB5laObvzCf0Rh0NyL+9tY8lmdgej93pdeJEGcmpXqzQSqvi+YD956k=\n=OOiL\n-----END PGP SIGNATURE-----",
        "payload": "tree 824094895926eec36b479794f8c2edf638bbef5b\nparent 0f446724370646a3332911e03c287d91772aa515\nparent 65f10e0ffc0359a0af6575711d6a4cc9b96afd7a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423478061 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423478066 +0100\n\nMerge pull request #5764\n\n65f10e0 fix jonasschnelli's gitian key (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cefea9c4bf8880628157113cc44dcb9ffbcd6de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5cefea9c4bf8880628157113cc44dcb9ffbcd6de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cefea9c4bf8880628157113cc44dcb9ffbcd6de/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f446724370646a3332911e03c287d91772aa515",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f446724370646a3332911e03c287d91772aa515",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f446724370646a3332911e03c287d91772aa515"
      },
      {
        "sha": "65f10e0ffc0359a0af6575711d6a4cc9b96afd7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65f10e0ffc0359a0af6575711d6a4cc9b96afd7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65f10e0ffc0359a0af6575711d6a4cc9b96afd7a"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fe44c0fbd4eb3b57ff658f48a1e7af67e2d25dda",
        "filename": "contrib/gitian-downloader/jonasschnelli-key.pgp",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cefea9c4bf8880628157113cc44dcb9ffbcd6de/contrib/gitian-downloader/jonasschnelli-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cefea9c4bf8880628157113cc44dcb9ffbcd6de/contrib/gitian-downloader/jonasschnelli-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/jonasschnelli-key.pgp?ref=5cefea9c4bf8880628157113cc44dcb9ffbcd6de"
      },
      {
        "sha": "96140fe171651577d56ce75c3ce50b81026dadac",
        "filename": "contrib/gitian-downloader/jonasschnelli.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f446724370646a3332911e03c287d91772aa515/contrib/gitian-downloader/jonasschnelli.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f446724370646a3332911e03c287d91772aa515/contrib/gitian-downloader/jonasschnelli.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/jonasschnelli.pgp?ref=0f446724370646a3332911e03c287d91772aa515"
      }
    ]
  },
  {
    "sha": "7225577f6b8bcdc3b4f109717b11a1a6a8ee3ed6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjI1NTc3ZjZiOGJjZGMzYjRmMTA5NzE3YjExYTFhNmE4ZWUzZWQ2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T11:48:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T11:48:38Z"
      },
      "message": "Merge pull request #5739\n\nf4b2078 Replace difficulty readjustment blocks with Interval() (Shaul Kfir)",
      "tree": {
        "sha": "6656768049de60d707a1996a660b7de5aba12a72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6656768049de60d707a1996a660b7de5aba12a72"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7225577f6b8bcdc3b4f109717b11a1a6a8ee3ed6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU2J6WAAoJEHSBCwEjRsmmw2kIAMazSNbLdUFBhvi2yxyMhRKz\ndsF7YvIb80zzG7QudV7lkGjC4AWJulAECxbLm04j/YyctJkm2p/0BV2J3BsKkoaH\nNVqNY69uNA46F3sFEPCa99LJn2asn7hEriagoLKGYswVfRHG18WmkW4u912tBhZU\n5BwtAnBCDET9f1sOLl2RiHMrW+avzh7MoXsnAfowLqJvha+HzfYkDKYOaW0e+tIS\nNz1J/0h3Fxizxpud4fM+MKEYkNFdZTVRzeAViCjvbne6OvFdp0e4kV4PBDNEoHTY\nK2ss4DEbIr7cKFvAbxtH1B9Ihvkj8phgaT0TAinKBVM6iRt+ol01CPBhTx9ADsg=\n=3qAm\n-----END PGP SIGNATURE-----",
        "payload": "tree 6656768049de60d707a1996a660b7de5aba12a72\nparent 5cefea9c4bf8880628157113cc44dcb9ffbcd6de\nparent f4b2078f721887b8b913464e197f6eaae9086938\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423482498 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423482518 +0100\n\nMerge pull request #5739\n\nf4b2078 Replace difficulty readjustment blocks with Interval() (Shaul Kfir)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7225577f6b8bcdc3b4f109717b11a1a6a8ee3ed6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7225577f6b8bcdc3b4f109717b11a1a6a8ee3ed6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7225577f6b8bcdc3b4f109717b11a1a6a8ee3ed6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5cefea9c4bf8880628157113cc44dcb9ffbcd6de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cefea9c4bf8880628157113cc44dcb9ffbcd6de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5cefea9c4bf8880628157113cc44dcb9ffbcd6de"
      },
      {
        "sha": "f4b2078f721887b8b913464e197f6eaae9086938",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4b2078f721887b8b913464e197f6eaae9086938",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4b2078f721887b8b913464e197f6eaae9086938"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e3ae5cff42855965fc8ee09f57eb3dac7a1e3b29",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7225577f6b8bcdc3b4f109717b11a1a6a8ee3ed6/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7225577f6b8bcdc3b4f109717b11a1a6a8ee3ed6/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=7225577f6b8bcdc3b4f109717b11a1a6a8ee3ed6",
        "patch": "@@ -44,7 +44,7 @@ Value GetNetworkHashPS(int lookup, int height) {\n \n     // If lookup is -1, then use blocks since last difficulty change.\n     if (lookup <= 0)\n-        lookup = pb->nHeight % 2016 + 1;\n+        lookup = pb->nHeight % Params().Interval() + 1;\n \n     // If lookup is larger than chain, then set it to chain length.\n     if (lookup > pb->nHeight)"
      }
    ]
  },
  {
    "sha": "f69941620ba8716679c141b973dfa24d5623b9ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNjk5NDE2MjBiYTg3MTY2NzljMTQxYjk3M2RmYTI0ZDU2MjNiOWFl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T11:52:34Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T11:53:00Z"
      },
      "message": "Merge #5623: Make nicer pull request merge messages\n\n1078fb0 Make nicer pull request merge messages (BtcDrak)",
      "tree": {
        "sha": "89179c6f8f4103c098bbdeb893f11399f02216b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89179c6f8f4103c098bbdeb893f11399f02216b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f69941620ba8716679c141b973dfa24d5623b9ae",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU2J+cAAoJEHSBCwEjRsmmzOIH/AlmwYSs+Xpz1S0YKLkpRqau\n5N8Y1a76dorURgmZQEslEZtYlDxvMsSLMeebOyhv5sdBU8Oux4wAs1WKmMQANnn9\nu8Y4bWXaIPtGIhT7OMe8qDW+6yNsIErkdGyNFOmTEFIyYCnQ53XSmj6rdp+ZoBvh\nKPjVNdkEdpYAd+6Ht4LD/v3K60WkJxeMXU7aHkYpvKzJ5yquEx/z+g3UwV+xwlp0\n7mtOkwh/c252hYsWwimlVTvOBY6lf+ReI0XlsihjvIEbHjhSrm8z0wdB+h9c18lh\ntmgF52hiANixlUEfvE5teyRi3i2PCvlSbUuSBUyVz545lEogjbISo0ffDHgrIwI=\n=ZvRO\n-----END PGP SIGNATURE-----",
        "payload": "tree 89179c6f8f4103c098bbdeb893f11399f02216b8\nparent 7225577f6b8bcdc3b4f109717b11a1a6a8ee3ed6\nparent 1078fb08851442bcd7750c3d5015dc1fe7e4d927\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423482754 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423482780 +0100\n\nMerge #5623: Make nicer pull request merge messages\n\n1078fb0 Make nicer pull request merge messages (BtcDrak)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f69941620ba8716679c141b973dfa24d5623b9ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f69941620ba8716679c141b973dfa24d5623b9ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f69941620ba8716679c141b973dfa24d5623b9ae/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7225577f6b8bcdc3b4f109717b11a1a6a8ee3ed6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7225577f6b8bcdc3b4f109717b11a1a6a8ee3ed6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7225577f6b8bcdc3b4f109717b11a1a6a8ee3ed6"
      },
      {
        "sha": "1078fb08851442bcd7750c3d5015dc1fe7e4d927",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1078fb08851442bcd7750c3d5015dc1fe7e4d927",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1078fb08851442bcd7750c3d5015dc1fe7e4d927"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7e3dad49d2edbf3f7aebafd81cad9d6cb4fac2be",
        "filename": "contrib/devtools/github-merge.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f69941620ba8716679c141b973dfa24d5623b9ae/contrib/devtools/github-merge.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f69941620ba8716679c141b973dfa24d5623b9ae/contrib/devtools/github-merge.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/github-merge.sh?ref=f69941620ba8716679c141b973dfa24d5623b9ae",
        "patch": "@@ -82,13 +82,15 @@ function cleanup() {\n }\n \n # Create unsigned merge commit.\n+PRTITLE=`curl -s https://api.github.com/repos/$REPO/pulls/$PULL | grep -e '  \"title\": \".*\",'| awk -F'\"' '{print $4}'`\n+MERGEMESSAGE=\"Merge #$PULL: $PRTITLE\"\n (\n-  echo \"Merge pull request #$PULL\"\n+  echo $MERGEMESSAGE\n   echo \"\"\n   git log --no-merges --topo-order --pretty='format:%h %s (%an)' pull/\"$PULL\"/base..pull/\"$PULL\"/head\n )>\"$TMPDIR/message\"\n if git merge -q --commit --no-edit --no-ff -m \"$(<\"$TMPDIR/message\")\" pull/\"$PULL\"/head; then\n-  if [ \"d$(git log --pretty='format:%s' -n 1)\" != \"dMerge pull request #$PULL\" ]; then\n+  if [ \"d$(git log --pretty='format:%s' -n 1)\" != \"d$MERGEMESSAGE\" ]; then\n     echo \"ERROR: Creating merge failed (already merged?).\" >&2\n     cleanup\n     exit 4"
      }
    ]
  },
  {
    "sha": "beff11a3a1282e674a07fcb285a999cb4a264ba3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZWZmMTFhM2ExMjgyZTY3NGEwN2ZjYjI4NWE5OTljYjRhMjY0YmEz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T11:55:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T11:57:09Z"
      },
      "message": "Merge #5679: Get rid of DetectShutdownThread\n\n28ee7e8 Get rid of DetectShutdownThread (Wladimir J. van der Laan)",
      "tree": {
        "sha": "35e614669a1a82de8ec180305b4fdc348fcbed4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35e614669a1a82de8ec180305b4fdc348fcbed4e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/beff11a3a1282e674a07fcb285a999cb4a264ba3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU2KCVAAoJEHSBCwEjRsmmklQIALmaDlAlXr7IUEVeYPwXGURG\nyVFwzUhHSmTKIGK7hDar4pMX5BYH/jTUZNmOTofB8MQyjCOUnKRqhVqO1vw07x+P\nR2ONJ3I3bFqILTtX6WafSaWmapbgQVrSLNXTtDbXO0xlmf0wOL59HSmWyLlvgoNW\nhURRoeNrKkwEGGeeoeYlgD+NrDVGup29hurdPoE0WsAVeML4DwesBlq/zyFGMTqn\nrd9UD4Wg4hdMjOMqzPAaCnqwVXPMhS4mbwqxdafaDEGmELWj9A/RelSl7mAPHI/n\n1hiJDcpBshXUc5WDYCdblRiUGlmaqkgld8kgwiljh02NQ/ZFhHOqwa2wrECQmoE=\n=dNU1\n-----END PGP SIGNATURE-----",
        "payload": "tree 35e614669a1a82de8ec180305b4fdc348fcbed4e\nparent f69941620ba8716679c141b973dfa24d5623b9ae\nparent 28ee7e8b8c658bab4a5e13a13254950e226453a7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423482930 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423483029 +0100\n\nMerge #5679: Get rid of DetectShutdownThread\n\n28ee7e8 Get rid of DetectShutdownThread (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/beff11a3a1282e674a07fcb285a999cb4a264ba3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/beff11a3a1282e674a07fcb285a999cb4a264ba3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/beff11a3a1282e674a07fcb285a999cb4a264ba3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f69941620ba8716679c141b973dfa24d5623b9ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f69941620ba8716679c141b973dfa24d5623b9ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f69941620ba8716679c141b973dfa24d5623b9ae"
      },
      {
        "sha": "28ee7e8b8c658bab4a5e13a13254950e226453a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28ee7e8b8c658bab4a5e13a13254950e226453a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28ee7e8b8c658bab4a5e13a13254950e226453a7"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 3,
      "deletions": 13
    },
    "files": [
      {
        "sha": "a0a96c2dfa61750d9c8764852a11591940b10953",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 13,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beff11a3a1282e674a07fcb285a999cb4a264ba3/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beff11a3a1282e674a07fcb285a999cb4a264ba3/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=beff11a3a1282e674a07fcb285a999cb4a264ba3",
        "patch": "@@ -33,7 +33,7 @@\n \n static bool fDaemon;\n \n-void DetectShutdownThread(boost::thread_group* threadGroup)\n+void WaitForShutdown(boost::thread_group* threadGroup)\n {\n     bool fShutdown = ShutdownRequested();\n     // Tell the main threads to shutdown.\n@@ -56,7 +56,6 @@ void DetectShutdownThread(boost::thread_group* threadGroup)\n bool AppInit(int argc, char* argv[])\n {\n     boost::thread_group threadGroup;\n-    boost::thread* detectShutdownThread = NULL;\n \n     bool fRet = false;\n \n@@ -144,7 +143,6 @@ bool AppInit(int argc, char* argv[])\n #endif\n         SoftSetBoolArg(\"-server\", true);\n \n-        detectShutdownThread = new boost::thread(boost::bind(&DetectShutdownThread, &threadGroup));\n         fRet = AppInit2(threadGroup);\n     }\n     catch (const std::exception& e) {\n@@ -155,20 +153,12 @@ bool AppInit(int argc, char* argv[])\n \n     if (!fRet)\n     {\n-        if (detectShutdownThread)\n-            detectShutdownThread->interrupt();\n-\n         threadGroup.interrupt_all();\n         // threadGroup.join_all(); was left out intentionally here, because we didn't re-test all of\n         // the startup-failure cases to make sure they don't result in a hang due to some\n         // thread-blocking-waiting-for-another-thread-during-startup case\n-    }\n-\n-    if (detectShutdownThread)\n-    {\n-        detectShutdownThread->join();\n-        delete detectShutdownThread;\n-        detectShutdownThread = NULL;\n+    } else {\n+        WaitForShutdown(&threadGroup);\n     }\n     Shutdown();\n "
      }
    ]
  },
  {
    "sha": "183ca292bd244973698347a6744836e2e9ea8a89",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxODNjYTI5MmJkMjQ0OTczNjk4MzQ3YTY3NDQ4MzZlMmU5ZWE4YTg5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T12:07:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T12:22:35Z"
      },
      "message": "Merge #5699: Split logic to undo txin's off DisconnectBlock.\n\neb1c2cd Split logic to undo txin's off DisconnectBlock. (Daniel Kraft)",
      "tree": {
        "sha": "a4775b1d6b230e4bda9f6e638d97d3e6bac23d55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a4775b1d6b230e4bda9f6e638d97d3e6bac23d55"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/183ca292bd244973698347a6744836e2e9ea8a89",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU2KaLAAoJEHSBCwEjRsmmoMkIALxF2bDO/9Y2AieHnS4r/jzr\nmaQES78kLjdd9qnape65MNEUp4etJz1sDifLkc36znHpQN5+HHF1O+3OzeXUDg2B\nj0adZ8VMWQbtWGhFtmDo2Y2iVWaKkGsHc8ip0ZSPRM/G/PtalN21CR+Z1QJYyalj\noZqXx4tO8YauBBe4cyVX1T9+LGWOSSnC1Hd82m2W2GIlIjHZP4usSJ6LIZNKEJjs\n5ZAd+u+grxBUC2UHN7l++HQsaHGtUKUAXGN+4/YlJ94qTeAPLmQgQo/U25SMdI6q\n3jC3PoLLZUtHZxWKTrmqy+lKMAn3e8FfL7VWTKV1gyRUVweGvxaxyGBlmaOUqrk=\n=D7uF\n-----END PGP SIGNATURE-----",
        "payload": "tree a4775b1d6b230e4bda9f6e638d97d3e6bac23d55\nparent beff11a3a1282e674a07fcb285a999cb4a264ba3\nparent eb1c2cd37f75cf4d0e85970932b9774b2d073225\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423483649 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423484555 +0100\n\nMerge #5699: Split logic to undo txin's off DisconnectBlock.\n\neb1c2cd Split logic to undo txin's off DisconnectBlock. (Daniel Kraft)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/183ca292bd244973698347a6744836e2e9ea8a89",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/183ca292bd244973698347a6744836e2e9ea8a89",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/183ca292bd244973698347a6744836e2e9ea8a89/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "beff11a3a1282e674a07fcb285a999cb4a264ba3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/beff11a3a1282e674a07fcb285a999cb4a264ba3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/beff11a3a1282e674a07fcb285a999cb4a264ba3"
      },
      {
        "sha": "eb1c2cd37f75cf4d0e85970932b9774b2d073225",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb1c2cd37f75cf4d0e85970932b9774b2d073225",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb1c2cd37f75cf4d0e85970932b9774b2d073225"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 38,
      "deletions": 24
    },
    "files": [
      {
        "sha": "fb2b2482e6028ce51085f297483d808a168ee0d7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 24,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/183ca292bd244973698347a6744836e2e9ea8a89/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/183ca292bd244973698347a6744836e2e9ea8a89/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=183ca292bd244973698347a6744836e2e9ea8a89",
        "patch": "@@ -1588,6 +1588,39 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uin\n \n } // anon namespace\n \n+/**\n+ * Apply the undo operation of a CTxInUndo to the given chain state.\n+ * @param undo The undo object.\n+ * @param view The coins view to which to apply the changes.\n+ * @param out The out point that corresponds to the tx input.\n+ * @return True on success.\n+ */\n+static bool ApplyTxInUndo(const CTxInUndo& undo, CCoinsViewCache& view, const COutPoint& out)\n+{\n+    bool fClean = true;\n+\n+    CCoinsModifier coins = view.ModifyCoins(out.hash);\n+    if (undo.nHeight != 0) {\n+        // undo data contains height: this is the last output of the prevout tx being spent\n+        if (!coins->IsPruned())\n+            fClean = fClean && error(\"%s: undo data overwriting existing transaction\", __func__);\n+        coins->Clear();\n+        coins->fCoinBase = undo.fCoinBase;\n+        coins->nHeight = undo.nHeight;\n+        coins->nVersion = undo.nVersion;\n+    } else {\n+        if (coins->IsPruned())\n+            fClean = fClean && error(\"%s: undo data adding output to missing transaction\", __func__);\n+    }\n+    if (coins->IsAvailable(out.n))\n+        fClean = fClean && error(\"%s: undo data overwriting existing output\", __func__);\n+    if (coins->vout.size() < out.n+1)\n+        coins->vout.resize(out.n+1);\n+    coins->vout[out.n] = undo.txout;\n+\n+    return fClean;\n+}\n+\n bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& view, bool* pfClean)\n {\n     assert(pindex->GetBlockHash() == view.GetBestBlock());\n@@ -1613,11 +1646,8 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n         uint256 hash = tx.GetHash();\n \n         // Check that all outputs are available and match the outputs in the block itself\n-        // exactly. Note that transactions with only provably unspendable outputs won't\n-        // have outputs available even in the block itself, so we handle that case\n-        // specially with outsEmpty.\n+        // exactly.\n         {\n-        CCoins outsEmpty;\n         CCoinsModifier outs = view.ModifyCoins(hash);\n         outs->ClearUnspendable();\n \n@@ -1642,24 +1672,8 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n             for (unsigned int j = tx.vin.size(); j-- > 0;) {\n                 const COutPoint &out = tx.vin[j].prevout;\n                 const CTxInUndo &undo = txundo.vprevout[j];\n-                CCoinsModifier coins = view.ModifyCoins(out.hash);\n-                if (undo.nHeight != 0) {\n-                    // undo data contains height: this is the last output of the prevout tx being spent\n-                    if (!coins->IsPruned())\n-                        fClean = fClean && error(\"DisconnectBlock(): undo data overwriting existing transaction\");\n-                    coins->Clear();\n-                    coins->fCoinBase = undo.fCoinBase;\n-                    coins->nHeight = undo.nHeight;\n-                    coins->nVersion = undo.nVersion;\n-                } else {\n-                    if (coins->IsPruned())\n-                        fClean = fClean && error(\"DisconnectBlock(): undo data adding output to missing transaction\");\n-                }\n-                if (coins->IsAvailable(out.n))\n-                    fClean = fClean && error(\"DisconnectBlock(): undo data overwriting existing output\");\n-                if (coins->vout.size() < out.n+1)\n-                    coins->vout.resize(out.n+1);\n-                coins->vout[out.n] = undo.txout;\n+                if (!ApplyTxInUndo(undo, view, out))\n+                    fClean = false;\n             }\n         }\n     }\n@@ -1670,9 +1684,9 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n     if (pfClean) {\n         *pfClean = fClean;\n         return true;\n-    } else {\n-        return fClean;\n     }\n+\n+    return fClean;\n }\n \n void static FlushBlockFile(bool fFinalize = false)"
      }
    ]
  },
  {
    "sha": "a9565863e09a32729bd6ce33f31889099b3d75cb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOTU2NTg2M2UwOWEzMjcyOWJkNmNlMzNmMzE4ODkwOTliM2Q3NWNi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T12:49:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T12:50:56Z"
      },
      "message": "Merge #5629: [Qt] prevent amount overflow problem with payment requests\n\na651668 [Qt] prevent amount overflow problem with payment requests (Philip Kaufmann)",
      "tree": {
        "sha": "5c2f7367f506dc03c57ae5842cb83b3e1d69cabf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c2f7367f506dc03c57ae5842cb83b3e1d69cabf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9565863e09a32729bd6ce33f31889099b3d75cb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU2K0wAAoJEHSBCwEjRsmmtKcH/3BOOKow1nQBJXaw2TcFIuTJ\nRHjQ2X/k0zTrYaXe/rLiTAlPZFDPAzDVWZFxHdaxtcAWvqxXGsny0wocRS0nAl27\nEirXQXJj8s9d6Sx7AfcPMLHGMY+dZo5zKru9JGWM8XiDQ6leSy8tk1Z6I1YRlp6X\n12YokZETd+uhWj2/XEhp8X6cOpKSiD2mpMbGEPH25E7J/mwC0b69OgK8ME9DicL8\nVyyF4lFjq0oa62Tz1W9Xdaj6jlaenJA4g0uHDluilk15wOTJ1Pbyd+b+ZyATlt1t\nf9neHF0vKL+v2Ip4BiNo/YVJ+IGBFcGAZQpmFRGyuOP3I6VW3bivNEqPF7vczJY=\n=ktz2\n-----END PGP SIGNATURE-----",
        "payload": "tree 5c2f7367f506dc03c57ae5842cb83b3e1d69cabf\nparent 183ca292bd244973698347a6744836e2e9ea8a89\nparent a6516686dcf0b93dd0bcae304e74f9ac69cb305c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423486191 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423486256 +0100\n\nMerge #5629: [Qt] prevent amount overflow problem with payment requests\n\na651668 [Qt] prevent amount overflow problem with payment requests (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9565863e09a32729bd6ce33f31889099b3d75cb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9565863e09a32729bd6ce33f31889099b3d75cb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9565863e09a32729bd6ce33f31889099b3d75cb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "183ca292bd244973698347a6744836e2e9ea8a89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/183ca292bd244973698347a6744836e2e9ea8a89",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/183ca292bd244973698347a6744836e2e9ea8a89"
      },
      {
        "sha": "a6516686dcf0b93dd0bcae304e74f9ac69cb305c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6516686dcf0b93dd0bcae304e74f9ac69cb305c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6516686dcf0b93dd0bcae304e74f9ac69cb305c"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 69,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9aab944f6b5f383a82abc0d3a82b37ad1dbb138d",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9565863e09a32729bd6ce33f31889099b3d75cb/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9565863e09a32729bd6ce33f31889099b3d75cb/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=a9565863e09a32729bd6ce33f31889099b3d75cb",
        "patch": "@@ -569,6 +569,14 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n             return false;\n         }\n \n+        // Bitcoin amounts are stored as (optional) uint64 in the protobuf messages (see paymentrequest.proto),\n+        // but CAmount is defined as int64_t. Because of that we need to verify that amounts are in a valid range\n+        // and no overflow has happened.\n+        if (!verifyAmount(sendingTo.second)) {\n+            emit message(tr(\"Payment request rejected\"), tr(\"Invalid payment request.\"), CClientUIInterface::MSG_ERROR);\n+            return false;\n+        }\n+\n         // Extract and check amounts\n         CTxOut txOut(sendingTo.second, sendingTo.first);\n         if (txOut.IsDust(::minRelayTxFee)) {\n@@ -580,6 +588,11 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n         }\n \n         recipient.amount += sendingTo.second;\n+        // Also verify that the final amount is still in a valid range after adding additional amounts.\n+        if (!verifyAmount(recipient.amount)) {\n+            emit message(tr(\"Payment request rejected\"), tr(\"Invalid payment request.\"), CClientUIInterface::MSG_ERROR);\n+            return false;\n+        }\n     }\n     // Store addresses and format them to fit nicely into the GUI\n     recipient.address = addresses.join(\"<br />\");\n@@ -768,3 +781,15 @@ bool PaymentServer::verifyExpired(const payments::PaymentDetails& requestDetails\n     }\n     return fVerified;\n }\n+\n+bool PaymentServer::verifyAmount(const CAmount& requestAmount)\n+{\n+    bool fVerified = MoneyRange(requestAmount);\n+    if (!fVerified) {\n+        qWarning() << QString(\"PaymentServer::%1: Payment request amount out of allowed range (%2, allowed 0 - %3).\")\n+            .arg(__func__)\n+            .arg(requestAmount)\n+            .arg(MAX_MONEY);\n+    }\n+    return fVerified;\n+}"
      },
      {
        "sha": "6bf5ac2eea291fdae1eee4b82583d99ce69dc1a3",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9565863e09a32729bd6ce33f31889099b3d75cb/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9565863e09a32729bd6ce33f31889099b3d75cb/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=a9565863e09a32729bd6ce33f31889099b3d75cb",
        "patch": "@@ -95,6 +95,8 @@ class PaymentServer : public QObject\n     static bool verifyNetwork(const payments::PaymentDetails& requestDetails);\n     // Verify if the payment request is expired\n     static bool verifyExpired(const payments::PaymentDetails& requestDetails);\n+    // Verify the payment request amount is valid\n+    static bool verifyAmount(const CAmount& requestAmount);\n \n signals:\n     // Fired when a valid payment request is received"
      },
      {
        "sha": "c548ffe429fdacd45ab3e03aa2094895c5c9bf14",
        "filename": "src/qt/test/paymentrequestdata.h",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9565863e09a32729bd6ce33f31889099b3d75cb/src/qt/test/paymentrequestdata.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9565863e09a32729bd6ce33f31889099b3d75cb/src/qt/test/paymentrequestdata.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentrequestdata.h?ref=a9565863e09a32729bd6ce33f31889099b3d75cb",
        "patch": "@@ -433,3 +433,28 @@ dGluZyB0ZXN0bmV0ISqAAXSQG8+GFA18VaKarlYrOz293rNMIub0swKGcQm8jAGX\\\n HSLaRgHfUDeEPr4hydy4dtfu59KNwe2xsHOHu/SpO4L8SrA4Dm9A7SlNBVWdcLbw\\\n d2hj739GDLz0b5KuJ2SG6VknMRQM976w/m2qlq0ccVGaaZ2zMIGfpzL3p6adwx/5\\\n \";\n+\n+//\n+// Payment request with amount overflow (amount is set to 21000001 BTC)\n+//\n+const char* paymentrequest5_cert2_BASE64 =\n+\"\\\n+Egt4NTA5K3NoYTI1NhrQBArNBDCCAkkwggExoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n+BQAwITEfMB0GA1UEAwwWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xNTAxMTEx\\\n+ODIxMDhaFw0yNTAxMDgxODIxMDhaMCExHzAdBgNVBAMMFlBheW1lbnRSZXF1ZXN0\\\n+IFRlc3QgQ0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMsZqzkzeBGo+i2N\\\n+mUak3Ciodr1V7S062VOy7N0OQYNDQHYkgDFAUET7cEb5VJaHPv5m3ppTBpU9xBcf\\\n+wbHHUt4VjA+mhRmYrl1khjvZM+X8kEqvWn20BtcM9R6r0yIYec8UERDDHBleL/P8\\\n+RkxEnVLjYTV9zigCXfMsgYb3EQShAgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8wDQYJ\\\n+KoZIhvcNAQELBQADggEBABUJpl3QCqsoDSxAsQdV6zKT4VGV76AzoGj7etQsQY+r\\\n++S26VfWh/fMobEzuxFChr0USgLJ6FoK78hAtoZvt1lrye9yqFv/ig3WLWsJKWHHb\\\n+3RT6oR03CIwZXFSUasi08QDVLxafwsU5OMcPLucF3a1lRL1ccYrNgVCCx1+X7Bos\\\n+tIgDGRQQ4AyoHTcfVd2hEGeUv7k14mOxFsAp6851yosHq9Q2kwmdH+rHEJbjof87\\\n+yyKLagc4owyXBZYkQmkeHWCNqnuRmO5vUsfVb0UUrkD64o7Th/NjwooA7SCiUXl6\\\n+dfygT1b7ggpx7GC+sP2DsIM47IAZ55drjqX5u2f+Ba0iTAoEdGVzdBIkCIDC9P+F\\\n+vt0DEhl2qRQErGqUUwSsaMpDvWIaGnJGNQqi8oisGLzcrKYFKhhUZXN0aW5nIGFt\\\n+b3VudCBvdmVyZmxvdyEqgAG8S7WEDUC6tCL6q2CTBjop/AitgEy31RL9IqYruytR\\\n+iEBFUrBDJZU+UEezGwr7/zoECjo5ZY3PmtZcM2sILNjyweJF6XVzGqTxUw6pN6sW\\\n+XR2T3Gy2LzRvhVA25QgGqpz0/juS2BtmNbsZPkN9gMMwKimgzc+PuCzmEKwPK9cQ\\\n+YQ==\\\n+\";"
      },
      {
        "sha": "e2ec439b2e39a1550230b4744f24a4feef8bbac6",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9565863e09a32729bd6ce33f31889099b3d75cb/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9565863e09a32729bd6ce33f31889099b3d75cb/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=a9565863e09a32729bd6ce33f31889099b3d75cb",
        "patch": "@@ -7,7 +7,10 @@\n #include \"optionsmodel.h\"\n #include \"paymentrequestdata.h\"\n \n+#include \"amount.h\"\n #include \"random.h\"\n+#include \"script/script.h\"\n+#include \"script/standard.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n@@ -184,6 +187,20 @@ void PaymentServerTests::paymentServerTests()\n     tempFile.close();\n     QCOMPARE(PaymentServer::readPaymentRequestFromFile(tempFile.fileName(), r.paymentRequest), false);\n \n+    // Payment request with amount overflow (amount is set to 21000001 BTC):\n+    data = DecodeBase64(paymentrequest5_cert2_BASE64);\n+    byteArray = QByteArray((const char*)&data[0], data.size());\n+    r.paymentRequest.parse(byteArray);\n+    // Ensure the request is initialized\n+    QVERIFY(r.paymentRequest.IsInitialized());\n+    // Extract address and amount from the request\n+    QList<std::pair<CScript, CAmount> > sendingTos = r.paymentRequest.getPayTo();\n+    foreach (const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n+        CTxDestination dest;\n+        if (ExtractDestination(sendingTo.first, dest))\n+            QCOMPARE(PaymentServer::verifyAmount(sendingTo.second), false);\n+    }\n+\n     delete server;\n }\n "
      }
    ]
  },
  {
    "sha": "d48ce48093faf1a0778b424397a2879a93e5fb5e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDhjZTQ4MDkzZmFmMWEwNzc4YjQyNDM5N2EyODc5YTkzZTVmYjVl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-10T11:04:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-10T11:08:07Z"
      },
      "message": "Merge #5548: [REST] add /rest/chaininfos\n\n2c0f901 [REST] rest/chaininfos add documentation (Jonas Schnelli)\n59582c8 [REST] add /rest/chaininfos (Jonas Schnelli)",
      "tree": {
        "sha": "46c66a3c288b70603cb2b7069e57b6ad9e7f6e75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46c66a3c288b70603cb2b7069e57b6ad9e7f6e75"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d48ce48093faf1a0778b424397a2879a93e5fb5e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU2eaXAAoJEHSBCwEjRsmmG80H/1X+0DurdSCgmb/CE3iVBMqZ\nUTkc9kBE97rTobRZO0J28BXT1roqzvtp8O9Ws71Ti0V9g8aNn7itNOdOAFXSmJhP\ntp9fDfAbTst0Equ3YSkdAcpqOnq0yDXXBIJyu3v/Pna6vtkAlrMll7Q02LxH5oPE\nD0Sjik6U9mKXfSxw2PGli2PvNPxSkAIU102qfZL3js0sM5xiiLX03Z8mJFPNaSk6\n1bx4BU024g6bksn7+92UNDirNFtuVteyD71rXGRK8Iwpy83tKOD4BvmgLFP0D27X\nknTXOdHiUcXDfjlxVxkTBXRw5r6JcLwrksKV1PsQvPJk6a9aBD02XBWFyxCjU+A=\n=v5+n\n-----END PGP SIGNATURE-----",
        "payload": "tree 46c66a3c288b70603cb2b7069e57b6ad9e7f6e75\nparent a9565863e09a32729bd6ce33f31889099b3d75cb\nparent 2c0f901ea90e3efab5e15abeba011597cfdd92c1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423566290 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423566487 +0100\n\nMerge #5548: [REST] add /rest/chaininfos\n\n2c0f901 [REST] rest/chaininfos add documentation (Jonas Schnelli)\n59582c8 [REST] add /rest/chaininfos (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d48ce48093faf1a0778b424397a2879a93e5fb5e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d48ce48093faf1a0778b424397a2879a93e5fb5e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d48ce48093faf1a0778b424397a2879a93e5fb5e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a9565863e09a32729bd6ce33f31889099b3d75cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9565863e09a32729bd6ce33f31889099b3d75cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9565863e09a32729bd6ce33f31889099b3d75cb"
      },
      {
        "sha": "2c0f901ea90e3efab5e15abeba011597cfdd92c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c0f901ea90e3efab5e15abeba011597cfdd92c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c0f901ea90e3efab5e15abeba011597cfdd92c1"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 51,
      "deletions": 5
    },
    "files": [
      {
        "sha": "23154ee903ec54a40172bd6e95118cdc044db671",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d48ce48093faf1a0778b424397a2879a93e5fb5e/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d48ce48093faf1a0778b424397a2879a93e5fb5e/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=d48ce48093faf1a0778b424397a2879a93e5fb5e",
        "patch": "@@ -10,6 +10,8 @@ Supported API\n Given a transaction hash,\n Returns a transaction, in binary, hex-encoded binary or JSON formats.\n \n+For full TX query capability, one must enable the transaction index via \"txindex=1\" command line / configuration option.\n+\n `GET /rest/block/BLOCK-HASH.{bin|hex|json}`\n `GET /rest/block/notxdetails/BLOCK-HASH.{bin|hex|json}`\n \n@@ -20,7 +22,17 @@ The HTTP request and response are both handled entirely in-memory, thus making m\n \n With the /notxdetails/ option JSON response will only contain the transaction hash instead of the complete transaction details. The option only affects the JSON response.\n \n-For full TX query capability, one must enable the transaction index via \"txindex=1\" command line / configuration option.\n+`GET /rest/chaininfo.json`\n+\n+Returns various state info regarding block chain processing.\n+Only supports JSON as output format.\n+* chain : (string) current network name as defined in BIP70 (main, test, regtest)\n+* blocks : (numeric) the current number of blocks processed in the server\n+* headers : (numeric) the current number of headers we have validated\n+* bestblockhash : (string) the hash of the currently best block\n+* difficulty : (numeric) the current difficulty\n+* verificationprogress : (numeric) estimate of verification progress [0..1]\n+* chainwork : (string) total amount of work in active chain, in hexadecimal\n \n Risks\n -------------"
      },
      {
        "sha": "a9d41cf367273d5ad126eda937fa864541f1eeee",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d48ce48093faf1a0778b424397a2879a93e5fb5e/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d48ce48093faf1a0778b424397a2879a93e5fb5e/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=d48ce48093faf1a0778b424397a2879a93e5fb5e",
        "patch": "@@ -78,7 +78,7 @@ def run_test(self):\n \n         # check hex format response\n         hex_string = http_get_call(url.hostname, url.port, '/rest/tx/'+tx_hash+self.FORMAT_SEPARATOR+\"hex\", True)\n-        assert_equal(response.status, 200)\n+        assert_equal(hex_string.status, 200)\n         assert_greater_than(int(response.getheader('content-length')), 10)\n \n         # check block tx details\n@@ -106,5 +106,12 @@ def run_test(self):\n         for tx in txs:\n             assert_equal(tx in json_obj['tx'], True)\n \n+        #test rest bestblock\n+        bb_hash = self.nodes[0].getbestblockhash()\n+        \n+        json_string = http_get_call(url.hostname, url.port, '/rest/chaininfo.json')\n+        json_obj = json.loads(json_string)\n+        assert_equal(json_obj['bestblockhash'], bb_hash)\n+\n if __name__ == '__main__':\n     RESTTest ().main ()"
      },
      {
        "sha": "adc2d56284205da0a7c3cb05d2c1bc34d6d0122e",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 3,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d48ce48093faf1a0778b424397a2879a93e5fb5e/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d48ce48093faf1a0778b424397a2879a93e5fb5e/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=d48ce48093faf1a0778b424397a2879a93e5fb5e",
        "patch": "@@ -95,7 +95,7 @@ static bool rest_headers(AcceptedConnection* conn,\n                          bool fRun)\n {\n     vector<string> params;\n-    enum RetFormat rf = ParseDataFormat(params, strReq);\n+    const RetFormat rf = ParseDataFormat(params, strReq);\n     vector<string> path;\n     boost::split(path, params[0], boost::is_any_of(\"/\"));\n \n@@ -159,7 +159,7 @@ static bool rest_block(AcceptedConnection* conn,\n                        bool showTxDetails)\n {\n     vector<string> params;\n-    enum RetFormat rf = ParseDataFormat(params, strReq);\n+    const RetFormat rf = ParseDataFormat(params, strReq);\n \n     string hashStr = params[0];\n     uint256 hash;\n@@ -226,13 +226,39 @@ static bool rest_block_notxdetails(AcceptedConnection* conn,\n     return rest_block(conn, strReq, mapHeaders, fRun, false);\n }\n \n+static bool rest_chaininfo(AcceptedConnection* conn,\n+                                   const std::string& strReq,\n+                                   const std::map<std::string, std::string>& mapHeaders,\n+                                   bool fRun)\n+{\n+    vector<string> params;\n+    const RetFormat rf = ParseDataFormat(params, strReq);\n+    \n+    switch (rf) {\n+    case RF_JSON: {\n+        Array rpcParams;\n+        Value chainInfoObject = getblockchaininfo(rpcParams, false);\n+        \n+        string strJSON = write_string(chainInfoObject, false) + \"\\n\";\n+        conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n+        return true;\n+    }\n+    default: {\n+        throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: json)\");\n+    }\n+    }\n+    \n+    // not reached\n+    return true; // continue to process further HTTP reqs on this cxn\n+}\n+\n static bool rest_tx(AcceptedConnection* conn,\n                     const std::string& strReq,\n                     const std::map<std::string, std::string>& mapHeaders,\n                     bool fRun)\n {\n     vector<string> params;\n-    enum RetFormat rf = ParseDataFormat(params, strReq);\n+    const RetFormat rf = ParseDataFormat(params, strReq);\n \n     string hashStr = params[0];\n     uint256 hash;\n@@ -287,6 +313,7 @@ static const struct {\n       {\"/rest/tx/\", rest_tx},\n       {\"/rest/block/notxdetails/\", rest_block_notxdetails},\n       {\"/rest/block/\", rest_block_extended},\n+      {\"/rest/chaininfo\", rest_chaininfo},\n       {\"/rest/headers/\", rest_headers},\n };\n "
      }
    ]
  },
  {
    "sha": "6f50dbd2fdeef7bc24317a487936502e25a05de9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjUwZGJkMmZkZWVmN2JjMjQzMTdhNDg3OTM2NTAyZTI1YTA1ZGU5",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-02-09T20:28:35Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-02-10T18:23:57Z"
      },
      "message": "Fix NegateSignatureS to not duplicate last byte of S\n\nNegateSignatureS is called with a signature without a hashtype, so\ndo not save the last byte and append it after S negation.\n\nUpdates the two tests which were affected by this bug.",
      "tree": {
        "sha": "cffe21b53032fc9faa6f55b090cf2222c7a03857",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cffe21b53032fc9faa6f55b090cf2222c7a03857"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f50dbd2fdeef7bc24317a487936502e25a05de9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f50dbd2fdeef7bc24317a487936502e25a05de9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f50dbd2fdeef7bc24317a487936502e25a05de9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f50dbd2fdeef7bc24317a487936502e25a05de9/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 2,
      "deletions": 4
    },
    "files": [
      {
        "sha": "3b2f64d766df3144c12539ec8157ec3eada0f1fb",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f50dbd2fdeef7bc24317a487936502e25a05de9/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f50dbd2fdeef7bc24317a487936502e25a05de9/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=6f50dbd2fdeef7bc24317a487936502e25a05de9",
        "patch": "@@ -696,7 +696,7 @@\n     \"BIP66 example 11, with DERSIG\"\n ],\n [\n-    \"0x49 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef05101\",\n+    \"0x48 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef001\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n     \"LOW_S\",\n     \"P2PK with high S\""
      },
      {
        "sha": "2b4b0989b99063ec7220a566b5e7826fcfc87d11",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f50dbd2fdeef7bc24317a487936502e25a05de9/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f50dbd2fdeef7bc24317a487936502e25a05de9/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=6f50dbd2fdeef7bc24317a487936502e25a05de9",
        "patch": "@@ -814,7 +814,7 @@\n     \"BIP66 example 12, with DERSIG\"\n ],\n [\n-    \"0x49 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef05101\",\n+    \"0x48 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef001\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n     \"\",\n     \"P2PK with high S but no LOW_S\""
      },
      {
        "sha": "35a7f6639ac643c6599def45884eca1e7bb59128",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f50dbd2fdeef7bc24317a487936502e25a05de9/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f50dbd2fdeef7bc24317a487936502e25a05de9/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=6f50dbd2fdeef7bc24317a487936502e25a05de9",
        "patch": "@@ -107,7 +107,6 @@ void static NegateSignatureS(std::vector<unsigned char>& vchSig) {\n     std::vector<unsigned char> r, s;\n     r = std::vector<unsigned char>(vchSig.begin() + 4, vchSig.begin() + 4 + vchSig[3]);\n     s = std::vector<unsigned char>(vchSig.begin() + 6 + vchSig[3], vchSig.begin() + 6 + vchSig[3] + vchSig[5 + vchSig[3]]);\n-    unsigned char hashtype = vchSig.back();\n \n     // Really ugly to implement mod-n negation here, but it would be feature creep to expose such functionality from libsecp256k1.\n     static const unsigned char order[33] = {\n@@ -141,7 +140,6 @@ void static NegateSignatureS(std::vector<unsigned char>& vchSig) {\n     vchSig.push_back(0x02);\n     vchSig.push_back(s.size());\n     vchSig.insert(vchSig.end(), s.begin(), s.end());\n-    vchSig.push_back(hashtype);\n }\n \n namespace"
      }
    ]
  },
  {
    "sha": "78c6bedb9cd3ed85f829a288146533e3b41f784b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OGM2YmVkYjljZDNlZDg1ZjgyOWEyODgxNDY1MzNlM2I0MWY3ODRi",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-02-10T17:11:59Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-02-10T18:25:41Z"
      },
      "message": "Add test for DER-encoding edge case\n\nThe fix to NegateSignatureS caused a test which had been failing\nin IsValidSignatureEncoding to then fail in IsLowDERSignature.\nAdd new test so the original check remains exercised.",
      "tree": {
        "sha": "4121912553a9292039683105611d6917cff5c038",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4121912553a9292039683105611d6917cff5c038"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78c6bedb9cd3ed85f829a288146533e3b41f784b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78c6bedb9cd3ed85f829a288146533e3b41f784b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78c6bedb9cd3ed85f829a288146533e3b41f784b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78c6bedb9cd3ed85f829a288146533e3b41f784b/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f50dbd2fdeef7bc24317a487936502e25a05de9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f50dbd2fdeef7bc24317a487936502e25a05de9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f50dbd2fdeef7bc24317a487936502e25a05de9"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 18,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3c52547a64e22fe439545e4561cb931948ad3034",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78c6bedb9cd3ed85f829a288146533e3b41f784b/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78c6bedb9cd3ed85f829a288146533e3b41f784b/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=78c6bedb9cd3ed85f829a288146533e3b41f784b",
        "patch": "@@ -695,6 +695,12 @@\n     \"DERSIG\",\n     \"BIP66 example 11, with DERSIG\"\n ],\n+[\n+    \"0x48 0x304402203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022054e1c258c2981cdfba5df1f46661fb6541c44f77ca0092f3600331abfffb12510101\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n+    \"DERSIG\",\n+    \"P2PK with multi-byte hashtype, with DERSIG\"\n+],\n [\n     \"0x48 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef001\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\","
      },
      {
        "sha": "34e2c8d61a7dc131159c199dae5a01a0e80d8950",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78c6bedb9cd3ed85f829a288146533e3b41f784b/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78c6bedb9cd3ed85f829a288146533e3b41f784b/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=78c6bedb9cd3ed85f829a288146533e3b41f784b",
        "patch": "@@ -813,6 +813,12 @@\n     \"DERSIG\",\n     \"BIP66 example 12, with DERSIG\"\n ],\n+[\n+    \"0x48 0x304402203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022054e1c258c2981cdfba5df1f46661fb6541c44f77ca0092f3600331abfffb12510101\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n+    \"\",\n+    \"P2PK with multi-byte hashtype, without DERSIG\"\n+],\n [\n     \"0x48 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef001\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\","
      },
      {
        "sha": "e410b59710c144c2c88d8c0481e317844d18dc60",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78c6bedb9cd3ed85f829a288146533e3b41f784b/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78c6bedb9cd3ed85f829a288146533e3b41f784b/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=78c6bedb9cd3ed85f829a288146533e3b41f784b",
        "patch": "@@ -476,6 +476,12 @@ BOOST_AUTO_TEST_CASE(script_build)\n     good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n                                \"BIP66 example 12, with DERSIG\", SCRIPT_VERIFY_DERSIG\n                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n+                               \"P2PK with multi-byte hashtype, without DERSIG\", 0\n+                              ).PushSig(keys.key2, SIGHASH_ALL).EditPush(70, \"01\", \"0101\"));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n+                               \"P2PK with multi-byte hashtype, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                              ).PushSig(keys.key2, SIGHASH_ALL).EditPush(70, \"01\", \"0101\"));\n \n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n                                \"P2PK with high S but no LOW_S\", 0"
      }
    ]
  },
  {
    "sha": "99437c51bafd137e94a829e0b4ade55635cc84ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTQzN2M1MWJhZmQxMzdlOTRhODI5ZTBiNGFkZTU1NjM1Y2M4NGFk",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2015-02-11T13:50:24Z"
      },
      "committer": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2015-02-11T13:50:24Z"
      },
      "message": "Add fanquake PGP key",
      "tree": {
        "sha": "319f361c616524a5fc36296ee3181351dbc6641e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/319f361c616524a5fc36296ee3181351dbc6641e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99437c51bafd137e94a829e0b4ade55635cc84ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99437c51bafd137e94a829e0b4ade55635cc84ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/99437c51bafd137e94a829e0b4ade55635cc84ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99437c51bafd137e94a829e0b4ade55635cc84ad/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d48ce48093faf1a0778b424397a2879a93e5fb5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d48ce48093faf1a0778b424397a2879a93e5fb5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d48ce48093faf1a0778b424397a2879a93e5fb5e"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 63,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9c03ff45226c5629d24e5f9925da7210df0760a5",
        "filename": "contrib/gitian-downloader/fanquake-key.pgp",
        "status": "added",
        "additions": 63,
        "deletions": 0,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99437c51bafd137e94a829e0b4ade55635cc84ad/contrib/gitian-downloader/fanquake-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99437c51bafd137e94a829e0b4ade55635cc84ad/contrib/gitian-downloader/fanquake-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/fanquake-key.pgp?ref=99437c51bafd137e94a829e0b4ade55635cc84ad",
        "patch": "@@ -0,0 +1,63 @@\n+-----BEGIN PGP PUBLIC KEY BLOCK-----\n+Version: GnuPG/MacGPG2 v2.0.26\n+\n+mQINBFFlV7oBEAC3dRAS7gSWQ1fV4JySD0HMBOtY+Y2oCX8vEuTI4atGcxbwXr4/\n+OElRYhDK6Zirk8rMoKPxmr8OVek5LNnY3gcDffco6NXmZ+wTstQm6oqUxFfgzznG\n+X/ExEVuCqiaPAwdWSKn9tC1GuOqRFcD+p2zmxw5mNH5XdsqaPSEGsKESY1IK+dMv\n+K+YUrfrtexZyb66wCtupYziEeag6iEK/i2x2wewOji6IvtI+wB5FO+YMXw+LKucw\n+PoHUOxjoz6YX3s04UxFaZo4R8x6J9XnJBSB2E5kfsSAzz3xR+zuapXY6H6mo/grq\n+nr3c6ACcbAHnMWwQLYvWzde6iwswhyl0whebsajJH7Rd3G4c1U3L/oj4RwUFmZYU\n+5Prs+Q5PepKAJfBeWCXZtUY2BNFCFj7b2H2NXYFR92Oc2GtoHAYACNeP070I9d3m\n+IeuYhOrOckkunwaijUczq4rb3n3Vaq6YrdwZIzs8fALwc9Th98jj2dCUq0fljpSh\n+UQFnPG83UsNkeWzUSgw+lBeEQqgOqUQQ293MbgRg0mJ8q677Iv+WaFqPKZzXxkwT\n+QCCXhjcBmUKgXIHLFcbfmkR8pCcCToWXBD8CU441cBsootDD7SanPHbpcwZjt74x\n+uLrVoCIyaju0T1jSrsPnm2A/8VkWLSCh1WRAlbjvMr7DwizGnRtzTiB6HQARAQAB\n+tC9NaWNoYWVsIEZvcmQgKGJpdGNvaW4tb3RjKSA8ZmFucXVha2VAZ21haWwuY29t\n+PokCNwQTAQoAIQUCUWVXugIbLwULCQgHAwUVCgkICwUWAgMBAAIeAQIXgAAKCRCU\n+TTX5rD23agJgEAC0ouDjufjCMHL4DkaVkOnFbHzP+nR2Mq7pcjdiPNIt9tj8B6cI\n+PRh/E+tt2iEJJ4lzlfj0uEqjqexmSBaMgY+pFb6ESg42EPQjRQ95oBoyZfp+uL/0\n+KC3+Hh+EgmZGIFPZy2HneVfusiBUz2/YTOoqFkzmHalJe9Yvl2+dO0SUC7i6TUdJ\n++ugSr/91hkjQC52LXgHzurH4zOz7ZjzRtZgUIG3oOx8mtEDf46eJ0IUsr+tWJqOp\n+ce5xFh6nkKfS92B7YjGJ4YrkBHC7F9vmbrtIeuWiaxGzVqhHFmLvQe+4xyOpRgHM\n+kcyD5uJNmSMO9gT3udut4hd0yUKg5rdqaUzqsvv19eNL/pZ7aBK2aDAK/yAi1T7X\n+/nrhBJAU49zg1JRS6atRnhKSyd7wRSwVPJAXfVuelHsUgenSdLmSBxRha+9mL6Lb\n+bLK/Dij/0r2fyhBJx4pV6V1n4BpHjv5ivkpgCvOupx8wx3PIxZq/rx+hK+ZBe2EQ\n+7vq8rmLfBkSavHWyNxXEKWQed+mFS3d+Qsoy90bi7gQygIYNZOIBYwsy+qjCZ3om\n+LwkzRjypH23ps7WmiaoenOaCjRYooNL4qtQwNVaDGYwvbMnXJ8Vb4/2j/Riz7+Ui\n+BBVww+Wd72Fml/OFPDFep6HG/PuwFB9m5hmfSzrA01TIdjcWljtTDneufbkCDQRR\n+ZVe6ARAAvi1IAxn9xKQCCqhsoKOiXNbpnmf6lYnoEwGtgI+0a0YQwtzm39P5T8P0\n+esZ65/Re6jCCHLc23/urFPfW9VfrKPmNJncyzlx7OopJ7G1MWdRLEUzwqSaglC6x\n+Zb4r1xR6eq2lBX6CAa5Q+AuAqkoGCEiYBpTyKij4sXE0c+Y9nIDIZhru7EnZvpL3\n+SQvxzFryQLbWCGri0x9GKXZ2ZcDM7jRi/P+iX6yX6sVvOvyKz6NW2BI5OmpI1JbJ\n+3fIXt/R6Wl2xpAFL/pxtYTYbfL6277HWtLDTqIkkRFKh64JdkH8n4G4m6VNUtGEu\n+qP3SxtyShauxY44WzR0YX4rag6tU2Hks6h1JmyF8aQTBAkdP7UrQ0oxZ8f+iG9n6\n+3GtTxgw2NyrqVMx3kBLm8DipyslbA2wCeZLrW6Co0j3pebJsDrMP/3zcmbJqRSLq\n+qnkcxA4gn5j/N0oe8t26Y2WjovndhoR0QQxw8D/BKoMXbl0lvvRAtcnWtyG0COut\n+AGB2PUbGdAX2Ky+uYKrG4uhu1edfV8JZVvB7NIQGzM2P8F9PrDRz7EtG6z7ky/pq\n+HQwRbqwLWGs4QpQmHZchFmXH7pHmLC8i29W+xYhdeUstvx7oESbunICGrPjJOShJ\n+G4191Zg0m/M6jeWV/v+piUXe3YVrgs42UWFusm5ZIduPUfgqUtkAEQEAAYkEPgQY\n+AQoACQUCUWVXugIbLgIpCRCUTTX5rD23asFdIAQZAQoABgUCUWVXugAKCRAu659c\n+wJUmwaduEACCiiRpBeKF5fSaM0cTb97hAHVQJL9Wk3xvA49YuROsSwtCzq9v+js5\n+f/fE+QV/dIQUNwifEPQk8MqUVKpe1lIXwRp23GinzDAnOhfWnECqrMdR0dP99D49\n+Zb7Dd4LDvP9c0mYtnX/78qQilxWmXhzDXcunnPsfCqsrduk9hMwkjmIrWFeSWSAg\n+BEJDuZ4WLuqjni1udth0iZtZYrDaDgX/RWcTFW8QCc5hLsCRcInAxb75AWfWq6i/\n+s3Ibg5tGm4+UfqGbFPuNyy6ow3ggqkovBp6ABMxe8dAYVXSmM2tKWZXBb3L6eho8\n+QKKzyoezqpbQ2YUaYZ8XAdLuumXCtAHKP3/DI1JBefE0mxi1CXjdLK9sE5OO5KNt\n+FXR8Dnot5C4BHrcaF6Iq2sqbhPxnhcDrEwv2mUgruD7n04LKIztAG0A35rcu6A2i\n+IUq/PsXjS/5rX/p4CeYvnTTspXkhXgkvfhWz1cISXyfcNTWBKwOsLW4lY8bi05cv\n+4Axl88tTg2dNYXIxSK7Jtu1YCEsZ8uaT3AAiTp1sKAOcRX8hIOTmPPxMxbIm8yg1\n+jl71ovsV5rAyuVTUouFnljXyuLWXLotUOkmC6DjJUuRaxzt23/eByJ45x94T/A2U\n+iT1oU+voigQGARrDkApXlgSI4oekg3Zgq57y6toV9F7o9A1PMtBq3AvDD/0as1K0\n+wCRZIXinSwW2F6tFnVV+z+vvE0i54yHaskkuJYZRSQ/yJR1VgmW/BtAr7ooXF7l+\n+9g7XOH7D8T28h+m4ABLN5ZDOxfTMZuV5Y4MnELh4dlBIfKGG2kjmW8+y/PUqMMGE\n+BYRmGOD1qtWvFYoZ2ss5yrlvfenRRhQbIYSRz/YiT8OTogaNcYNpArUwT4z+05af\n+kdxx0AaqauHqKRo/XTO5GIZQ6NbtPH6G++2Ie+oP8AyBWEpL3rvjZpzn7jxTBXMc\n+MOMmhnb0Go4hD+BSphgDTZOgMLOLcorjb1Ct2VnajxPZD0aTB13SCgZjJhs9j3on\n+EoI3gTHkRgiBjMBNtw7iaAumIRgrDwGzyuIL6bbyfDnbE02zxCqkYP6P0u48FGLs\n+E4U60GrYSlFxa1MexF+HIPgqWsTOv4D2zXEJYvm1XEu1VOGQUkw7J5RFTDxHgkbh\n+qvmkZ492iW2IC4L9hSdSqiZ5LhD2JwpgrMt8vrCzVitkjYQnXJ6WbWYfCybPsmLb\n+mfQ03i9E+a50UC2SGDf8e3oxImAbbXLP/LyI7oczCxyb0EzcQlIIOtBgl3gI6KAh\n+PTRQGeHCzIOSgUf7B0ihY7qiDeR1OshvTY0wdykdS0c+hzwuS5TZvfY4YM7Tssvt\n+XwbdK0Zpx/oDtRHpuDMGKJBV2LWAZYkEbFsmtg==\n+=3o2I\n+-----END PGP PUBLIC KEY BLOCK-----"
      }
    ]
  },
  {
    "sha": "9bd8c9b13132d45db4240b2dec256ee1500ce133",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YmQ4YzliMTMxMzJkNDVkYjQyNDBiMmRlYzI1NmVlMTUwMGNlMTMz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-12T17:04:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-12T17:05:04Z"
      },
      "message": "Merge #5787: Add fanquake PGP key\n\n99437c5 Add fanquake PGP key (Michael Ford)",
      "tree": {
        "sha": "319f361c616524a5fc36296ee3181351dbc6641e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/319f361c616524a5fc36296ee3181351dbc6641e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9bd8c9b13132d45db4240b2dec256ee1500ce133",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU3N1AAAoJEHSBCwEjRsmmNVIH/RSyGxYk0bWA+J9TBXlPtVyb\nNO+a0n66wbP45FEb5Tbhi33P556eMXc1WLa84rBGK4hj9uT98jz1NAbzns0wRvhg\nySVYwW/N4GdZQnOSyXaMKOEIeEeud9+k1QdGS4iVnNtwWuS5y02JKp0Ctx0isWbN\nI4XhUdnTNWTGo5UmJclhYMQS3y1iX8HAjF5HVLKG5XLXaSaiL1y8Ygz3+rubHFqj\nMxhlgKzwSWQ9uz3QX/tcFCiXxiMBqseMaqAfLKiSMckt/8o6LdoPl7GZPxfdAKob\nlJMWO6w5lKzM1j1oE3LbUAdrj1xswoGnHq/CJOkklT1V2RE+QPWlD/xzvM6PEaM=\n=rpVv\n-----END PGP SIGNATURE-----",
        "payload": "tree 319f361c616524a5fc36296ee3181351dbc6641e\nparent d48ce48093faf1a0778b424397a2879a93e5fb5e\nparent 99437c51bafd137e94a829e0b4ade55635cc84ad\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423760684 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423760704 +0100\n\nMerge #5787: Add fanquake PGP key\n\n99437c5 Add fanquake PGP key (Michael Ford)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bd8c9b13132d45db4240b2dec256ee1500ce133",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9bd8c9b13132d45db4240b2dec256ee1500ce133",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bd8c9b13132d45db4240b2dec256ee1500ce133/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d48ce48093faf1a0778b424397a2879a93e5fb5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d48ce48093faf1a0778b424397a2879a93e5fb5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d48ce48093faf1a0778b424397a2879a93e5fb5e"
      },
      {
        "sha": "99437c51bafd137e94a829e0b4ade55635cc84ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99437c51bafd137e94a829e0b4ade55635cc84ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/99437c51bafd137e94a829e0b4ade55635cc84ad"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 63,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9c03ff45226c5629d24e5f9925da7210df0760a5",
        "filename": "contrib/gitian-downloader/fanquake-key.pgp",
        "status": "added",
        "additions": 63,
        "deletions": 0,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bd8c9b13132d45db4240b2dec256ee1500ce133/contrib/gitian-downloader/fanquake-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bd8c9b13132d45db4240b2dec256ee1500ce133/contrib/gitian-downloader/fanquake-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/fanquake-key.pgp?ref=9bd8c9b13132d45db4240b2dec256ee1500ce133",
        "patch": "@@ -0,0 +1,63 @@\n+-----BEGIN PGP PUBLIC KEY BLOCK-----\n+Version: GnuPG/MacGPG2 v2.0.26\n+\n+mQINBFFlV7oBEAC3dRAS7gSWQ1fV4JySD0HMBOtY+Y2oCX8vEuTI4atGcxbwXr4/\n+OElRYhDK6Zirk8rMoKPxmr8OVek5LNnY3gcDffco6NXmZ+wTstQm6oqUxFfgzznG\n+X/ExEVuCqiaPAwdWSKn9tC1GuOqRFcD+p2zmxw5mNH5XdsqaPSEGsKESY1IK+dMv\n+K+YUrfrtexZyb66wCtupYziEeag6iEK/i2x2wewOji6IvtI+wB5FO+YMXw+LKucw\n+PoHUOxjoz6YX3s04UxFaZo4R8x6J9XnJBSB2E5kfsSAzz3xR+zuapXY6H6mo/grq\n+nr3c6ACcbAHnMWwQLYvWzde6iwswhyl0whebsajJH7Rd3G4c1U3L/oj4RwUFmZYU\n+5Prs+Q5PepKAJfBeWCXZtUY2BNFCFj7b2H2NXYFR92Oc2GtoHAYACNeP070I9d3m\n+IeuYhOrOckkunwaijUczq4rb3n3Vaq6YrdwZIzs8fALwc9Th98jj2dCUq0fljpSh\n+UQFnPG83UsNkeWzUSgw+lBeEQqgOqUQQ293MbgRg0mJ8q677Iv+WaFqPKZzXxkwT\n+QCCXhjcBmUKgXIHLFcbfmkR8pCcCToWXBD8CU441cBsootDD7SanPHbpcwZjt74x\n+uLrVoCIyaju0T1jSrsPnm2A/8VkWLSCh1WRAlbjvMr7DwizGnRtzTiB6HQARAQAB\n+tC9NaWNoYWVsIEZvcmQgKGJpdGNvaW4tb3RjKSA8ZmFucXVha2VAZ21haWwuY29t\n+PokCNwQTAQoAIQUCUWVXugIbLwULCQgHAwUVCgkICwUWAgMBAAIeAQIXgAAKCRCU\n+TTX5rD23agJgEAC0ouDjufjCMHL4DkaVkOnFbHzP+nR2Mq7pcjdiPNIt9tj8B6cI\n+PRh/E+tt2iEJJ4lzlfj0uEqjqexmSBaMgY+pFb6ESg42EPQjRQ95oBoyZfp+uL/0\n+KC3+Hh+EgmZGIFPZy2HneVfusiBUz2/YTOoqFkzmHalJe9Yvl2+dO0SUC7i6TUdJ\n++ugSr/91hkjQC52LXgHzurH4zOz7ZjzRtZgUIG3oOx8mtEDf46eJ0IUsr+tWJqOp\n+ce5xFh6nkKfS92B7YjGJ4YrkBHC7F9vmbrtIeuWiaxGzVqhHFmLvQe+4xyOpRgHM\n+kcyD5uJNmSMO9gT3udut4hd0yUKg5rdqaUzqsvv19eNL/pZ7aBK2aDAK/yAi1T7X\n+/nrhBJAU49zg1JRS6atRnhKSyd7wRSwVPJAXfVuelHsUgenSdLmSBxRha+9mL6Lb\n+bLK/Dij/0r2fyhBJx4pV6V1n4BpHjv5ivkpgCvOupx8wx3PIxZq/rx+hK+ZBe2EQ\n+7vq8rmLfBkSavHWyNxXEKWQed+mFS3d+Qsoy90bi7gQygIYNZOIBYwsy+qjCZ3om\n+LwkzRjypH23ps7WmiaoenOaCjRYooNL4qtQwNVaDGYwvbMnXJ8Vb4/2j/Riz7+Ui\n+BBVww+Wd72Fml/OFPDFep6HG/PuwFB9m5hmfSzrA01TIdjcWljtTDneufbkCDQRR\n+ZVe6ARAAvi1IAxn9xKQCCqhsoKOiXNbpnmf6lYnoEwGtgI+0a0YQwtzm39P5T8P0\n+esZ65/Re6jCCHLc23/urFPfW9VfrKPmNJncyzlx7OopJ7G1MWdRLEUzwqSaglC6x\n+Zb4r1xR6eq2lBX6CAa5Q+AuAqkoGCEiYBpTyKij4sXE0c+Y9nIDIZhru7EnZvpL3\n+SQvxzFryQLbWCGri0x9GKXZ2ZcDM7jRi/P+iX6yX6sVvOvyKz6NW2BI5OmpI1JbJ\n+3fIXt/R6Wl2xpAFL/pxtYTYbfL6277HWtLDTqIkkRFKh64JdkH8n4G4m6VNUtGEu\n+qP3SxtyShauxY44WzR0YX4rag6tU2Hks6h1JmyF8aQTBAkdP7UrQ0oxZ8f+iG9n6\n+3GtTxgw2NyrqVMx3kBLm8DipyslbA2wCeZLrW6Co0j3pebJsDrMP/3zcmbJqRSLq\n+qnkcxA4gn5j/N0oe8t26Y2WjovndhoR0QQxw8D/BKoMXbl0lvvRAtcnWtyG0COut\n+AGB2PUbGdAX2Ky+uYKrG4uhu1edfV8JZVvB7NIQGzM2P8F9PrDRz7EtG6z7ky/pq\n+HQwRbqwLWGs4QpQmHZchFmXH7pHmLC8i29W+xYhdeUstvx7oESbunICGrPjJOShJ\n+G4191Zg0m/M6jeWV/v+piUXe3YVrgs42UWFusm5ZIduPUfgqUtkAEQEAAYkEPgQY\n+AQoACQUCUWVXugIbLgIpCRCUTTX5rD23asFdIAQZAQoABgUCUWVXugAKCRAu659c\n+wJUmwaduEACCiiRpBeKF5fSaM0cTb97hAHVQJL9Wk3xvA49YuROsSwtCzq9v+js5\n+f/fE+QV/dIQUNwifEPQk8MqUVKpe1lIXwRp23GinzDAnOhfWnECqrMdR0dP99D49\n+Zb7Dd4LDvP9c0mYtnX/78qQilxWmXhzDXcunnPsfCqsrduk9hMwkjmIrWFeSWSAg\n+BEJDuZ4WLuqjni1udth0iZtZYrDaDgX/RWcTFW8QCc5hLsCRcInAxb75AWfWq6i/\n+s3Ibg5tGm4+UfqGbFPuNyy6ow3ggqkovBp6ABMxe8dAYVXSmM2tKWZXBb3L6eho8\n+QKKzyoezqpbQ2YUaYZ8XAdLuumXCtAHKP3/DI1JBefE0mxi1CXjdLK9sE5OO5KNt\n+FXR8Dnot5C4BHrcaF6Iq2sqbhPxnhcDrEwv2mUgruD7n04LKIztAG0A35rcu6A2i\n+IUq/PsXjS/5rX/p4CeYvnTTspXkhXgkvfhWz1cISXyfcNTWBKwOsLW4lY8bi05cv\n+4Axl88tTg2dNYXIxSK7Jtu1YCEsZ8uaT3AAiTp1sKAOcRX8hIOTmPPxMxbIm8yg1\n+jl71ovsV5rAyuVTUouFnljXyuLWXLotUOkmC6DjJUuRaxzt23/eByJ45x94T/A2U\n+iT1oU+voigQGARrDkApXlgSI4oekg3Zgq57y6toV9F7o9A1PMtBq3AvDD/0as1K0\n+wCRZIXinSwW2F6tFnVV+z+vvE0i54yHaskkuJYZRSQ/yJR1VgmW/BtAr7ooXF7l+\n+9g7XOH7D8T28h+m4ABLN5ZDOxfTMZuV5Y4MnELh4dlBIfKGG2kjmW8+y/PUqMMGE\n+BYRmGOD1qtWvFYoZ2ss5yrlvfenRRhQbIYSRz/YiT8OTogaNcYNpArUwT4z+05af\n+kdxx0AaqauHqKRo/XTO5GIZQ6NbtPH6G++2Ie+oP8AyBWEpL3rvjZpzn7jxTBXMc\n+MOMmhnb0Go4hD+BSphgDTZOgMLOLcorjb1Ct2VnajxPZD0aTB13SCgZjJhs9j3on\n+EoI3gTHkRgiBjMBNtw7iaAumIRgrDwGzyuIL6bbyfDnbE02zxCqkYP6P0u48FGLs\n+E4U60GrYSlFxa1MexF+HIPgqWsTOv4D2zXEJYvm1XEu1VOGQUkw7J5RFTDxHgkbh\n+qvmkZ492iW2IC4L9hSdSqiZ5LhD2JwpgrMt8vrCzVitkjYQnXJ6WbWYfCybPsmLb\n+mfQ03i9E+a50UC2SGDf8e3oxImAbbXLP/LyI7oczCxyb0EzcQlIIOtBgl3gI6KAh\n+PTRQGeHCzIOSgUf7B0ihY7qiDeR1OshvTY0wdykdS0c+hzwuS5TZvfY4YM7Tssvt\n+XwbdK0Zpx/oDtRHpuDMGKJBV2LWAZYkEbFsmtg==\n+=3o2I\n+-----END PGP PUBLIC KEY BLOCK-----"
      }
    ]
  },
  {
    "sha": "0c6ab676ee7d2071d48775d81116c86dacc6abf6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzZhYjY3NmVlN2QyMDcxZDQ4Nzc1ZDgxMTE2Yzg2ZGFjYzZhYmY2",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-12T22:07:13Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-13T08:08:08Z"
      },
      "message": "gitian: don't add . to tar list\n\nSince permissions and timestamps are changed for the sake of determinism,\n. must not be added to the archive. Otherwise, tar may try to modify pwd when\nextracting.",
      "tree": {
        "sha": "baf412ac0ec6053eecccb18f6e281171cec9691c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/baf412ac0ec6053eecccb18f6e281171cec9691c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c6ab676ee7d2071d48775d81116c86dacc6abf6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c6ab676ee7d2071d48775d81116c86dacc6abf6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c6ab676ee7d2071d48775d81116c86dacc6abf6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c6ab676ee7d2071d48775d81116c86dacc6abf6/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9bd8c9b13132d45db4240b2dec256ee1500ce133",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bd8c9b13132d45db4240b2dec256ee1500ce133",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bd8c9b13132d45db4240b2dec256ee1500ce133"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "80de6770c5f7475f6a940192ee0e955b7d311c8d",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c6ab676ee7d2071d48775d81116c86dacc6abf6/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c6ab676ee7d2071d48775d81116c86dacc6abf6/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=0c6ab676ee7d2071d48775d81116c86dacc6abf6",
        "patch": "@@ -99,7 +99,7 @@ script: |\n     find . -name \"lib*.la\" -delete\n     find . -name \"lib*.a\" -delete\n     rm -rf ${DISTNAME}/lib/pkgconfig\n-    find . | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n+    find ${DISTNAME} | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n     cd ../../\n   done\n   mkdir -p $OUTDIR/src"
      },
      {
        "sha": "43eb79d8483cff06714ca54a750097c8e4cabd92",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c6ab676ee7d2071d48775d81116c86dacc6abf6/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c6ab676ee7d2071d48775d81116c86dacc6abf6/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=0c6ab676ee7d2071d48775d81116c86dacc6abf6",
        "patch": "@@ -126,7 +126,7 @@ script: |\n     find . -name \"lib*.la\" -delete\n     find . -name \"lib*.a\" -delete\n     rm -rf ${DISTNAME}/lib/pkgconfig\n-    find . | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n+    find ${DISTNAME} | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n     cd ../../\n   done\n   mkdir -p $OUTDIR/src"
      },
      {
        "sha": "f0459ee9461db13c53810b923ca6df446337d74d",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c6ab676ee7d2071d48775d81116c86dacc6abf6/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c6ab676ee7d2071d48775d81116c86dacc6abf6/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=0c6ab676ee7d2071d48775d81116c86dacc6abf6",
        "patch": "@@ -106,7 +106,7 @@ script: |\n     find . -name \"lib*.la\" -delete\n     find . -name \"lib*.a\" -delete\n     rm -rf ${DISTNAME}/lib/pkgconfig\n-    find . -type f | sort | zip -X@ ${OUTDIR}/${DISTNAME}-${i}.zip\n+    find ${DISTNAME} -type f | sort | zip -X@ ${OUTDIR}/${DISTNAME}-${i}.zip\n     cd ../..\n   done\n   mkdir -p $OUTDIR/src"
      }
    ]
  },
  {
    "sha": "c70cdbc393c7ea7228337feb86e64bf4b2461761",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzBjZGJjMzkzYzdlYTcyMjgzMzdmZWI4NmU2NGJmNGIyNDYxNzYx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-13T08:43:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-13T08:44:14Z"
      },
      "message": "Merge #5790: gitian: don't add . to tar list\n\n0c6ab67 gitian: don't add . to tar list (Cory Fields)",
      "tree": {
        "sha": "baf412ac0ec6053eecccb18f6e281171cec9691c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/baf412ac0ec6053eecccb18f6e281171cec9691c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c70cdbc393c7ea7228337feb86e64bf4b2461761",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU3bleAAoJEHSBCwEjRsmmU/0H/0OL7bQDaZKjdrn+6Qb5892j\nI6v+zio76uGiFl5fH/i1UyZeX+6sWgR5rmx8wqH/vTzzFv6/eg8oO+PrN3lhFWbf\nf5MadvOb1SkaOATi+Ovk+5eEAGSmAZ6Hpbu5njISeABFIIJiCMr6DcJvDrCmCJaA\nlfKk9fsd6L4UyXcHKmJVceju0t2K0NJ8wqSxRq1SVCOB6pJn2a4Hs7u2f1/4nK9M\nkNCW9LY7kNw0Eaf3ZTAixmkJv2LGNKUcQAN9x90ifkYegdy3qqsC6uX1flaFuLFD\nACLdjuvqjRqx1cksp8C6OqLXlXjR6SbP75RfcyfSp/kjJV0DaT236qtlDOZq2/I=\n=ziF1\n-----END PGP SIGNATURE-----",
        "payload": "tree baf412ac0ec6053eecccb18f6e281171cec9691c\nparent 9bd8c9b13132d45db4240b2dec256ee1500ce133\nparent 0c6ab676ee7d2071d48775d81116c86dacc6abf6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423817036 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423817054 +0100\n\nMerge #5790: gitian: don't add . to tar list\n\n0c6ab67 gitian: don't add . to tar list (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c70cdbc393c7ea7228337feb86e64bf4b2461761",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c70cdbc393c7ea7228337feb86e64bf4b2461761",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c70cdbc393c7ea7228337feb86e64bf4b2461761/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9bd8c9b13132d45db4240b2dec256ee1500ce133",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bd8c9b13132d45db4240b2dec256ee1500ce133",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bd8c9b13132d45db4240b2dec256ee1500ce133"
      },
      {
        "sha": "0c6ab676ee7d2071d48775d81116c86dacc6abf6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c6ab676ee7d2071d48775d81116c86dacc6abf6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c6ab676ee7d2071d48775d81116c86dacc6abf6"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "80de6770c5f7475f6a940192ee0e955b7d311c8d",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c70cdbc393c7ea7228337feb86e64bf4b2461761/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c70cdbc393c7ea7228337feb86e64bf4b2461761/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=c70cdbc393c7ea7228337feb86e64bf4b2461761",
        "patch": "@@ -99,7 +99,7 @@ script: |\n     find . -name \"lib*.la\" -delete\n     find . -name \"lib*.a\" -delete\n     rm -rf ${DISTNAME}/lib/pkgconfig\n-    find . | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n+    find ${DISTNAME} | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n     cd ../../\n   done\n   mkdir -p $OUTDIR/src"
      },
      {
        "sha": "43eb79d8483cff06714ca54a750097c8e4cabd92",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c70cdbc393c7ea7228337feb86e64bf4b2461761/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c70cdbc393c7ea7228337feb86e64bf4b2461761/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=c70cdbc393c7ea7228337feb86e64bf4b2461761",
        "patch": "@@ -126,7 +126,7 @@ script: |\n     find . -name \"lib*.la\" -delete\n     find . -name \"lib*.a\" -delete\n     rm -rf ${DISTNAME}/lib/pkgconfig\n-    find . | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n+    find ${DISTNAME} | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n     cd ../../\n   done\n   mkdir -p $OUTDIR/src"
      },
      {
        "sha": "f0459ee9461db13c53810b923ca6df446337d74d",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c70cdbc393c7ea7228337feb86e64bf4b2461761/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c70cdbc393c7ea7228337feb86e64bf4b2461761/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=c70cdbc393c7ea7228337feb86e64bf4b2461761",
        "patch": "@@ -106,7 +106,7 @@ script: |\n     find . -name \"lib*.la\" -delete\n     find . -name \"lib*.a\" -delete\n     rm -rf ${DISTNAME}/lib/pkgconfig\n-    find . -type f | sort | zip -X@ ${OUTDIR}/${DISTNAME}-${i}.zip\n+    find ${DISTNAME} -type f | sort | zip -X@ ${OUTDIR}/${DISTNAME}-${i}.zip\n     cd ../..\n   done\n   mkdir -p $OUTDIR/src"
      }
    ]
  },
  {
    "sha": "f9a8fc4b1a7579b843e3b1a3136ef85a0435c918",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOWE4ZmM0YjFhNzU3OWI4NDNlM2IxYTMxMzZlZjg1YTA0MzVjOTE4",
    "commit": {
      "author": {
        "name": "Jonathan Brown",
        "email": "jbrown@bluedroplet.com",
        "date": "2015-02-14T05:07:40Z"
      },
      "committer": {
        "name": "Jonathan Brown",
        "email": "jbrown@bluedroplet.com",
        "date": "2015-02-14T05:07:40Z"
      },
      "message": "Fix filename for testing QT.",
      "tree": {
        "sha": "27917dafa607ae1ebf8a22a62b9c525e5a39d264",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/27917dafa607ae1ebf8a22a62b9c525e5a39d264"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9a8fc4b1a7579b843e3b1a3136ef85a0435c918",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9a8fc4b1a7579b843e3b1a3136ef85a0435c918",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9a8fc4b1a7579b843e3b1a3136ef85a0435c918",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9a8fc4b1a7579b843e3b1a3136ef85a0435c918/comments",
    "author": {
      "login": "ethernomad",
      "id": 161566,
      "node_id": "MDQ6VXNlcjE2MTU2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/161566?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ethernomad",
      "html_url": "https://github.com/ethernomad",
      "followers_url": "https://api.github.com/users/ethernomad/followers",
      "following_url": "https://api.github.com/users/ethernomad/following{/other_user}",
      "gists_url": "https://api.github.com/users/ethernomad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ethernomad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ethernomad/subscriptions",
      "organizations_url": "https://api.github.com/users/ethernomad/orgs",
      "repos_url": "https://api.github.com/users/ethernomad/repos",
      "events_url": "https://api.github.com/users/ethernomad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ethernomad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ethernomad",
      "id": 161566,
      "node_id": "MDQ6VXNlcjE2MTU2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/161566?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ethernomad",
      "html_url": "https://github.com/ethernomad",
      "followers_url": "https://api.github.com/users/ethernomad/followers",
      "following_url": "https://api.github.com/users/ethernomad/following{/other_user}",
      "gists_url": "https://api.github.com/users/ethernomad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ethernomad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ethernomad/subscriptions",
      "organizations_url": "https://api.github.com/users/ethernomad/orgs",
      "repos_url": "https://api.github.com/users/ethernomad/repos",
      "events_url": "https://api.github.com/users/ethernomad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ethernomad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c70cdbc393c7ea7228337feb86e64bf4b2461761",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c70cdbc393c7ea7228337feb86e64bf4b2461761",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c70cdbc393c7ea7228337feb86e64bf4b2461761"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "72613054b91deb68c5fdd3bb3e9e30ca563959cb",
        "filename": "doc/unit-tests.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9a8fc4b1a7579b843e3b1a3136ef85a0435c918/doc/unit-tests.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9a8fc4b1a7579b843e3b1a3136ef85a0435c918/doc/unit-tests.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/unit-tests.md?ref=f9a8fc4b1a7579b843e3b1a3136ef85a0435c918",
        "patch": "@@ -12,7 +12,7 @@ To add more bitcoind tests, add `BOOST_AUTO_TEST_CASE` functions to the existing\n .cpp files in the test/ directory or add new .cpp files that\n implement new BOOST_AUTO_TEST_SUITE sections.\n \n-To run the bitcoin-qt tests manually, launch src/qt/test/bitcoin-qt_test\n+To run the bitcoin-qt tests manually, launch src/qt/test/test_bitcoin-qt\n \n To add more bitcoin-qt tests, add them to the `src/qt/test/` directory and\n the `src/qt/test/test_main.cpp` file."
      }
    ]
  },
  {
    "sha": "d8ed3bd8eeeee74bec1b5aa797052b5cfa58dfe6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOGVkM2JkOGVlZWVlNzRiZWMxYjVhYTc5NzA1MmI1Y2ZhNThkZmU2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-14T06:11:25Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-14T06:11:30Z"
      },
      "message": "Merge #5792: Fix filename for testing QT.\n\nf9a8fc4 Fix filename for testing QT. (Jonathan Brown)",
      "tree": {
        "sha": "27917dafa607ae1ebf8a22a62b9c525e5a39d264",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/27917dafa607ae1ebf8a22a62b9c525e5a39d264"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8ed3bd8eeeee74bec1b5aa797052b5cfa58dfe6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJU3ucSAAoJEFeJbS/48LZX+TMMAJGWINzI0VPtFr8S+0ncs7ZA\nVV1fJijAbs99GTbXDsHOIn5Oynrcgh5nqwVXuggiP41b0nqR6KHdCOTEWOS943p5\nWliAU4Z2RoaGFuHXN1/0bZdU72CwnE8T7zm/2dcswUF6Zw08yx0W0+XwTRUmeNAg\niurudB3KCxWiUfeovAuQXW9NYKxu5KvV002ivL7L4E621oMJDF8ONwZAbUyii3bN\noD+ZSQ6lMhOT+8J8n4st/CPvi7B/55tt4vEK1h6akIhHOf0Gd8nQ9ayrmAY6TDZW\nkRZ4LArOBQfuXZ7OqzaVTKKiIzJA8GoF84JrK3KTUSnxPR+2LS/kcX8xibZ4mcP5\nmrq3g3dkZBTDeNVmu8gK6F1oN446e2WnjWT8y+vhbyoADxWUHRIDSdbPo0tagyi3\nj3FR9NQD1UnSvMAhhJhUFWN1T1hxWulOXXDxAAUf+iER3NoX6x8MnfnVoAf8cOx2\nKTwp49Rzwi0sgx0IZFctX3Qj1xRfWZHNiC1oDkMmng==\n=IkVq\n-----END PGP SIGNATURE-----",
        "payload": "tree 27917dafa607ae1ebf8a22a62b9c525e5a39d264\nparent c70cdbc393c7ea7228337feb86e64bf4b2461761\nparent f9a8fc4b1a7579b843e3b1a3136ef85a0435c918\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1423894285 -0800\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1423894290 -0800\n\nMerge #5792: Fix filename for testing QT.\n\nf9a8fc4 Fix filename for testing QT. (Jonathan Brown)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8ed3bd8eeeee74bec1b5aa797052b5cfa58dfe6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8ed3bd8eeeee74bec1b5aa797052b5cfa58dfe6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8ed3bd8eeeee74bec1b5aa797052b5cfa58dfe6/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c70cdbc393c7ea7228337feb86e64bf4b2461761",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c70cdbc393c7ea7228337feb86e64bf4b2461761",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c70cdbc393c7ea7228337feb86e64bf4b2461761"
      },
      {
        "sha": "f9a8fc4b1a7579b843e3b1a3136ef85a0435c918",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9a8fc4b1a7579b843e3b1a3136ef85a0435c918",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9a8fc4b1a7579b843e3b1a3136ef85a0435c918"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "72613054b91deb68c5fdd3bb3e9e30ca563959cb",
        "filename": "doc/unit-tests.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8ed3bd8eeeee74bec1b5aa797052b5cfa58dfe6/doc/unit-tests.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8ed3bd8eeeee74bec1b5aa797052b5cfa58dfe6/doc/unit-tests.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/unit-tests.md?ref=d8ed3bd8eeeee74bec1b5aa797052b5cfa58dfe6",
        "patch": "@@ -12,7 +12,7 @@ To add more bitcoind tests, add `BOOST_AUTO_TEST_CASE` functions to the existing\n .cpp files in the test/ directory or add new .cpp files that\n implement new BOOST_AUTO_TEST_SUITE sections.\n \n-To run the bitcoin-qt tests manually, launch src/qt/test/bitcoin-qt_test\n+To run the bitcoin-qt tests manually, launch src/qt/test/test_bitcoin-qt\n \n To add more bitcoin-qt tests, add them to the `src/qt/test/` directory and\n the `src/qt/test/test_main.cpp` file."
      }
    ]
  },
  {
    "sha": "1630219d906f592c9258bfe2a0e0c4923df35782",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjMwMjE5ZDkwNmY1OTJjOTI1OGJmZTJhMGUwYzQ5MjNkZjM1Nzgy",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-21T00:23:25Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-15T16:34:02Z"
      },
      "message": "openssl: abstract out OPENSSL_cleanse\n\nThis makes it easier for us to replace it if desired, since it's now only in\none spot. Also, it avoids the openssl include from allocators.h, which\nessentially forced openssl to be included from every compilation unit.",
      "tree": {
        "sha": "02b0ed9574290873f88bd0ebc1bd0a224c98e5b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/02b0ed9574290873f88bd0ebc1bd0a224c98e5b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1630219d906f592c9258bfe2a0e0c4923df35782",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1630219d906f592c9258bfe2a0e0c4923df35782",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1630219d906f592c9258bfe2a0e0c4923df35782",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1630219d906f592c9258bfe2a0e0c4923df35782/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a9565863e09a32729bd6ce33f31889099b3d75cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9565863e09a32729bd6ce33f31889099b3d75cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9565863e09a32729bd6ce33f31889099b3d75cb"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 44,
      "deletions": 17
    },
    "files": [
      {
        "sha": "7644f6b325bf1170cc6b794909a8485a0384c924",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1630219d906f592c9258bfe2a0e0c4923df35782/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1630219d906f592c9258bfe2a0e0c4923df35782/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=1630219d906f592c9258bfe2a0e0c4923df35782",
        "patch": "@@ -123,6 +123,7 @@ BITCOIN_CORE_H = \\\n   script/standard.h \\\n   serialize.h \\\n   streams.h \\\n+  support/cleanse.h \\\n   sync.h \\\n   threadsafety.h \\\n   timedata.h \\\n@@ -268,6 +269,7 @@ libbitcoin_util_a_SOURCES = \\\n   compat/strnlen.cpp \\\n   random.cpp \\\n   rpcprotocol.cpp \\\n+  support/cleanse.cpp \\\n   sync.cpp \\\n   uint256.cpp \\\n   util.cpp \\"
      },
      {
        "sha": "8ffe015b9e5fb1c930d72e0938418220a0914349",
        "filename": "src/allocators.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1630219d906f592c9258bfe2a0e0c4923df35782/src/allocators.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1630219d906f592c9258bfe2a0e0c4923df35782/src/allocators.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/allocators.h?ref=1630219d906f592c9258bfe2a0e0c4923df35782",
        "patch": "@@ -6,6 +6,8 @@\n #ifndef BITCOIN_ALLOCATORS_H\n #define BITCOIN_ALLOCATORS_H\n \n+#include \"support/cleanse.h\"\n+\n #include <map>\n #include <string>\n #include <string.h>\n@@ -14,8 +16,6 @@\n #include <boost/thread/mutex.hpp>\n #include <boost/thread/once.hpp>\n \n-#include <openssl/crypto.h> // for OPENSSL_cleanse()\n-\n /**\n  * Thread-safe class to keep track of locked (ie, non-swappable) memory pages.\n  *\n@@ -174,7 +174,7 @@ void LockObject(const T& t)\n template <typename T>\n void UnlockObject(const T& t)\n {\n-    OPENSSL_cleanse((void*)(&t), sizeof(T));\n+    memory_cleanse((void*)(&t), sizeof(T));\n     LockedPageManager::Instance().UnlockRange((void*)(&t), sizeof(T));\n }\n \n@@ -217,7 +217,7 @@ struct secure_allocator : public std::allocator<T> {\n     void deallocate(T* p, std::size_t n)\n     {\n         if (p != NULL) {\n-            OPENSSL_cleanse(p, sizeof(T) * n);\n+            memory_cleanse(p, sizeof(T) * n);\n             LockedPageManager::Instance().UnlockRange(p, sizeof(T) * n);\n         }\n         std::allocator<T>::deallocate(p, n);\n@@ -254,7 +254,7 @@ struct zero_after_free_allocator : public std::allocator<T> {\n     void deallocate(T* p, std::size_t n)\n     {\n         if (p != NULL)\n-            OPENSSL_cleanse(p, sizeof(T) * n);\n+            memory_cleanse(p, sizeof(T) * n);\n         std::allocator<T>::deallocate(p, n);\n     }\n };"
      },
      {
        "sha": "c8091850560a73065d48d52466199f5c9f0c6acf",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1630219d906f592c9258bfe2a0e0c4923df35782/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1630219d906f592c9258bfe2a0e0c4923df35782/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=1630219d906f592c9258bfe2a0e0c4923df35782",
        "patch": "@@ -172,7 +172,7 @@ bool CBase58Data::SetString(const char* psz, unsigned int nVersionBytes)\n     vchData.resize(vchTemp.size() - nVersionBytes);\n     if (!vchData.empty())\n         memcpy(&vchData[0], &vchTemp[nVersionBytes], vchData.size());\n-    OPENSSL_cleanse(&vchTemp[0], vchData.size());\n+    memory_cleanse(&vchTemp[0], vchData.size());\n     return true;\n }\n "
      },
      {
        "sha": "c7f7e2167904ea1ee89704fe58e754cf10ed871c",
        "filename": "src/crypter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1630219d906f592c9258bfe2a0e0c4923df35782/src/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1630219d906f592c9258bfe2a0e0c4923df35782/src/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.cpp?ref=1630219d906f592c9258bfe2a0e0c4923df35782",
        "patch": "@@ -26,8 +26,8 @@ bool CCrypter::SetKeyFromPassphrase(const SecureString& strKeyData, const std::v\n \n     if (i != (int)WALLET_CRYPTO_KEY_SIZE)\n     {\n-        OPENSSL_cleanse(chKey, sizeof(chKey));\n-        OPENSSL_cleanse(chIV, sizeof(chIV));\n+        memory_cleanse(chKey, sizeof(chKey));\n+        memory_cleanse(chIV, sizeof(chIV));\n         return false;\n     }\n "
      },
      {
        "sha": "8a91498e2e82d2fa94474adc951907412b3beade",
        "filename": "src/crypter.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1630219d906f592c9258bfe2a0e0c4923df35782/src/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1630219d906f592c9258bfe2a0e0c4923df35782/src/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.h?ref=1630219d906f592c9258bfe2a0e0c4923df35782",
        "patch": "@@ -82,8 +82,8 @@ class CCrypter\n \n     void CleanKey()\n     {\n-        OPENSSL_cleanse(chKey, sizeof(chKey));\n-        OPENSSL_cleanse(chIV, sizeof(chIV));\n+        memory_cleanse(chKey, sizeof(chKey));\n+        memory_cleanse(chIV, sizeof(chIV));\n         fKeySet = false;\n     }\n "
      },
      {
        "sha": "3246e4b67a1c0def79c64f428390a2e51fca6807",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1630219d906f592c9258bfe2a0e0c4923df35782/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1630219d906f592c9258bfe2a0e0c4923df35782/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=1630219d906f592c9258bfe2a0e0c4923df35782",
        "patch": "@@ -21,8 +21,6 @@\n #include <boost/thread.hpp>\n #include <boost/version.hpp>\n \n-#include <openssl/rand.h>\n-\n using namespace std;\n \n "
      },
      {
        "sha": "b69461ad9edbca93a6c11f6e6aa5ecb7d77944dd",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1630219d906f592c9258bfe2a0e0c4923df35782/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1630219d906f592c9258bfe2a0e0c4923df35782/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=1630219d906f592c9258bfe2a0e0c4923df35782",
        "patch": "@@ -13,7 +13,6 @@\n \n #include <stdexcept>\n \n-#include <openssl/x509.h>\n #include <openssl/x509_vfy.h>\n \n #include <QDateTime>"
      },
      {
        "sha": "61f8a3415decf682ef56a31c00a90a9e8dd8f7bd",
        "filename": "src/qt/paymentrequestplus.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1630219d906f592c9258bfe2a0e0c4923df35782/src/qt/paymentrequestplus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1630219d906f592c9258bfe2a0e0c4923df35782/src/qt/paymentrequestplus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.h?ref=1630219d906f592c9258bfe2a0e0c4923df35782",
        "patch": "@@ -9,6 +9,8 @@\n \n #include \"base58.h\"\n \n+#include <openssl/x509.h>\n+\n #include <QByteArray>\n #include <QList>\n #include <QString>"
      },
      {
        "sha": "96ceeb18a4b98c560320dd3260dbea834b20a27e",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1630219d906f592c9258bfe2a0e0c4923df35782/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1630219d906f592c9258bfe2a0e0c4923df35782/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=1630219d906f592c9258bfe2a0e0c4923df35782",
        "patch": "@@ -16,7 +16,6 @@\n \n #include <cstdlib>\n \n-#include <openssl/x509.h>\n #include <openssl/x509_vfy.h>\n \n #include <QApplication>"
      },
      {
        "sha": "ae25bee1b71c8cd280d2eb13e1968d079594d45a",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1630219d906f592c9258bfe2a0e0c4923df35782/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1630219d906f592c9258bfe2a0e0c4923df35782/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=1630219d906f592c9258bfe2a0e0c4923df35782",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"random.h\"\n \n+#include \"support/cleanse.h\"\n #ifdef WIN32\n #include \"compat.h\" // for Windows API\n #endif\n@@ -18,7 +19,6 @@\n #include <sys/time.h>\n #endif\n \n-#include <openssl/crypto.h>\n #include <openssl/err.h>\n #include <openssl/rand.h>\n \n@@ -40,7 +40,7 @@ void RandAddSeed()\n     // Seed with CPU performance counter\n     int64_t nCounter = GetPerformanceCounter();\n     RAND_add(&nCounter, sizeof(nCounter), 1.5);\n-    OPENSSL_cleanse((void*)&nCounter, sizeof(nCounter));\n+    memory_cleanse((void*)&nCounter, sizeof(nCounter));\n }\n \n void RandAddSeedPerfmon()\n@@ -70,7 +70,7 @@ void RandAddSeedPerfmon()\n     RegCloseKey(HKEY_PERFORMANCE_DATA);\n     if (ret == ERROR_SUCCESS) {\n         RAND_add(begin_ptr(vData), nSize, nSize / 100.0);\n-        OPENSSL_cleanse(begin_ptr(vData), nSize);\n+        memory_cleanse(begin_ptr(vData), nSize);\n         LogPrint(\"rand\", \"%s: %lu bytes\\n\", __func__, nSize);\n     } else {\n         static bool warned = false; // Warn only once"
      },
      {
        "sha": "9999c2341f78d8f9b0dc0801fea7b4916aca1046",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1630219d906f592c9258bfe2a0e0c4923df35782/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1630219d906f592c9258bfe2a0e0c4923df35782/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=1630219d906f592c9258bfe2a0e0c4923df35782",
        "patch": "@@ -16,6 +16,7 @@\n #include <map>\n #include <set>\n #include <stdint.h>\n+#include <stdio.h>\n #include <string>\n #include <string.h>\n #include <utility>"
      },
      {
        "sha": "a2141b244980399ab4d91b351ff809dd43f4efab",
        "filename": "src/support/cleanse.cpp",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1630219d906f592c9258bfe2a0e0c4923df35782/src/support/cleanse.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1630219d906f592c9258bfe2a0e0c4923df35782/src/support/cleanse.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/cleanse.cpp?ref=1630219d906f592c9258bfe2a0e0c4923df35782",
        "patch": "@@ -0,0 +1,13 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"cleanse.h\"\n+\n+#include <openssl/crypto.h>\n+\n+void memory_cleanse(void *ptr, size_t len)\n+{\n+    OPENSSL_cleanse(ptr, len);\n+}"
      },
      {
        "sha": "3e02aa8fd1fe59b7283730635d0774f3119fa0c5",
        "filename": "src/support/cleanse.h",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1630219d906f592c9258bfe2a0e0c4923df35782/src/support/cleanse.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1630219d906f592c9258bfe2a0e0c4923df35782/src/support/cleanse.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/cleanse.h?ref=1630219d906f592c9258bfe2a0e0c4923df35782",
        "patch": "@@ -0,0 +1,13 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_CLEANSE_H\n+#define BITCOIN_SUPPORT_CLEANSE_H\n+\n+#include <stdlib.h>\n+\n+void memory_cleanse(void *ptr, size_t len);\n+\n+#endif // BITCOIN_SUPPORT_CLEANSE_H"
      }
    ]
  },
  {
    "sha": "a77021a76361108b21d1e3b59c56915ad82655a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzcwMjFhNzYzNjExMDhiMjFkMWUzYjU5YzU2OTE1YWQ4MjY1NWE1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-16T09:37:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-16T09:38:00Z"
      },
      "message": "doc: Add note-to-self about SHA256SUMS to release-process.md",
      "tree": {
        "sha": "3b0fea752d59d0fe2b21a2b87e4f6f6db58d67e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b0fea752d59d0fe2b21a2b87e4f6f6db58d67e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a77021a76361108b21d1e3b59c56915ad82655a5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU4bp5AAoJEHSBCwEjRsmmye4IALZ6E8FqX+ri7CHqWz+idr3r\nSDFHbxzBT1ECny8gD4mQm5i6xfmn1mJelNMQJu/Dv2yTtqzgxy5Mr7X/QoKdMOAz\nDZsA24M7LDSx19eMGgyqaBV8rfKMe6nrHKTTZV7T+n+LO0qd7spk1yC7d/F7eFk5\nER5xIJ2UM9lpebukoWb6/4ZSlmh/cUA60/sodKtzLcwnX47/9SBE3CvLM0AZRzEq\nVFdAC51nffkkaRNwpQ7Et0WsMym2xAl5oTIay9uc1owmt8KI37SSt5f40jdDWsnD\naq4OjsUFe3DR0Uz6KJdh5q/FeYcv+NV3vQ+q2KMitpkYGKM4dOiJ+U4eCzb3hZY=\n=tyQp\n-----END PGP SIGNATURE-----",
        "payload": "tree 3b0fea752d59d0fe2b21a2b87e4f6f6db58d67e0\nparent d8ed3bd8eeeee74bec1b5aa797052b5cfa58dfe6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1424079433 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1424079480 +0100\n\ndoc: Add note-to-self about SHA256SUMS to release-process.md\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a77021a76361108b21d1e3b59c56915ad82655a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a77021a76361108b21d1e3b59c56915ad82655a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a77021a76361108b21d1e3b59c56915ad82655a5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8ed3bd8eeeee74bec1b5aa797052b5cfa58dfe6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8ed3bd8eeeee74bec1b5aa797052b5cfa58dfe6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8ed3bd8eeeee74bec1b5aa797052b5cfa58dfe6"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "016090c5949920868699d1a55243b04e84d7d16d",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a77021a76361108b21d1e3b59c56915ad82655a5/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a77021a76361108b21d1e3b59c56915ad82655a5/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=a77021a76361108b21d1e3b59c56915ad82655a5",
        "patch": "@@ -130,6 +130,7 @@ gpg --digest-algo sha256 --clearsign SHA256SUMS # outputs SHA256SUMS.asc\n rm SHA256SUMS\n ```\n (the digest algorithm is forced to sha256 to avoid confusion of the `Hash:` header that GPG adds with the SHA256 used for the files)\n+Note: check that SHA256SUMS itself doesn't end up in SHA256SUMS, which is a spurious/nonsensical entry.\n \n - Upload zips and installers, as well as `SHA256SUMS.asc` from last step, to the bitcoin.org server\n "
      }
    ]
  },
  {
    "sha": "175d86e633bedcfb642fb326f1ec0b43c14c4f3b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzVkODZlNjMzYmVkY2ZiNjQyZmIzMjZmMWVjMGI0M2MxNGM0ZjNi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-16T19:55:51Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-16T19:58:35Z"
      },
      "message": "Merge #5710: Add more information to errors in ReadBlockFromDisk\n\nf5791c6 Add more information to errors in ReadBlockFromDisk (Wladimir J. van der Laan)",
      "tree": {
        "sha": "be67cf54b84e46bdd5d14f341c9a2f08c9dfd21d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be67cf54b84e46bdd5d14f341c9a2f08c9dfd21d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/175d86e633bedcfb642fb326f1ec0b43c14c4f3b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJU4kvrAAoJEFeJbS/48LZXfyUL/jMGQEs7TkiHY7vrpUYwvO4x\neDzzJRekijoX3PTy4CprN530uvxNnQP9+DSrXNjtZrA5gKRBYdgGd3ozJHylZ23b\nQk05/+khbUnfdJsDutk8TVQVJ/SJ+Nu05zFIx5L4ilTEB9ll5uBJP+v8Vi4+A+n6\nfCLtyVLZPI4qNnLwUIlAalRB+ew/uT9QHvDsreoHqUF3qvosVOvOgVuOGlm6pQ8X\nDoykIexvncJblSNC58HvDfzaqqXxLmcNDUdaMBuxUv0Qu2BJFhjNMxPUPyEh57ku\n3mM9NYuvLJ4seePs1SRqqFkIxDkhCf2O3gMPkGLLMlYAZWTgcXzHNyff2j4OsHPP\nSmZIKTQdWt6gXNdclvusQlxZ5fNQhBh/SXkWeOyr3HiErZ4OIguJAf7xmwpO4fVv\nqv+xEVTBJDIOURjGcw+pFU7yZxl0ZOsVMNuqNSsnzRp8+YNWXnP7uaTO+zlTnW8S\nFa430TCRJB5md3PeLWHKirb23A+DHuuFJeCEzPcgbg==\n=V+fx\n-----END PGP SIGNATURE-----",
        "payload": "tree be67cf54b84e46bdd5d14f341c9a2f08c9dfd21d\nparent a77021a76361108b21d1e3b59c56915ad82655a5\nparent f5791c6ae3b59ef4c8d04e6873310a022e1211b6\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1424116551 -0800\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1424116715 -0800\n\nMerge #5710: Add more information to errors in ReadBlockFromDisk\n\nf5791c6 Add more information to errors in ReadBlockFromDisk (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/175d86e633bedcfb642fb326f1ec0b43c14c4f3b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/175d86e633bedcfb642fb326f1ec0b43c14c4f3b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/175d86e633bedcfb642fb326f1ec0b43c14c4f3b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a77021a76361108b21d1e3b59c56915ad82655a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a77021a76361108b21d1e3b59c56915ad82655a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a77021a76361108b21d1e3b59c56915ad82655a5"
      },
      {
        "sha": "f5791c6ae3b59ef4c8d04e6873310a022e1211b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5791c6ae3b59ef4c8d04e6873310a022e1211b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5791c6ae3b59ef4c8d04e6873310a022e1211b6"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 11,
      "deletions": 4
    },
    "files": [
      {
        "sha": "02f53cd2f2d518ead2da778930f86d7bcb88edb1",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/175d86e633bedcfb642fb326f1ec0b43c14c4f3b/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/175d86e633bedcfb642fb326f1ec0b43c14c4f3b/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=175d86e633bedcfb642fb326f1ec0b43c14c4f3b",
        "patch": "@@ -48,6 +48,12 @@ struct CDiskBlockPos\n \n     void SetNull() { nFile = -1; nPos = 0; }\n     bool IsNull() const { return (nFile == -1); }\n+\n+    std::string ToString() const\n+    {\n+        return strprintf(\"CBlockDiskPos(nFile=%i, nPos=%i)\", nFile, nPos);\n+    }\n+\n };\n \n enum BlockStatus {"
      },
      {
        "sha": "34b4c51d5f83944e1cf48ea52fc414359299546f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/175d86e633bedcfb642fb326f1ec0b43c14c4f3b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/175d86e633bedcfb642fb326f1ec0b43c14c4f3b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=175d86e633bedcfb642fb326f1ec0b43c14c4f3b",
        "patch": "@@ -1199,19 +1199,19 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos)\n     // Open history file to read\n     CAutoFile filein(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n-        return error(\"ReadBlockFromDisk: OpenBlockFile failed\");\n+        return error(\"ReadBlockFromDisk: OpenBlockFile failed for %s\", pos.ToString());\n \n     // Read block\n     try {\n         filein >> block;\n     }\n     catch (const std::exception& e) {\n-        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+        return error(\"%s: Deserialize or I/O error - %s at %s\", __func__, e.what(), pos.ToString());\n     }\n \n     // Check the header\n     if (!CheckProofOfWork(block.GetHash(), block.nBits))\n-        return error(\"ReadBlockFromDisk: Errors in block header\");\n+        return error(\"ReadBlockFromDisk: Errors in block header at %s\", pos.ToString());\n \n     return true;\n }\n@@ -1221,7 +1221,8 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex)\n     if (!ReadBlockFromDisk(block, pindex->GetBlockPos()))\n         return false;\n     if (block.GetHash() != pindex->GetBlockHash())\n-        return error(\"ReadBlockFromDisk(CBlock&, CBlockIndex*): GetHash() doesn't match index\");\n+        return error(\"ReadBlockFromDisk(CBlock&, CBlockIndex*): GetHash() doesn't match index for %s at %s\",\n+                pindex->ToString(), pindex->GetBlockPos().ToString());\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "b63ae5626910eaa41337c8173cac0c4728a5432d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjNhZTU2MjY5MTBlYWE0MTMzN2M4MTczY2FjMGM0NzI4YTU0MzJk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-25T19:34:20Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-16T20:24:37Z"
      },
      "message": "Add list of implemented BIPs",
      "tree": {
        "sha": "98022aeebefc3c26f81c8c2b186784fccc01cc08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/98022aeebefc3c26f81c8c2b186784fccc01cc08"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b63ae5626910eaa41337c8173cac0c4728a5432d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b63ae5626910eaa41337c8173cac0c4728a5432d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b63ae5626910eaa41337c8173cac0c4728a5432d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b63ae5626910eaa41337c8173cac0c4728a5432d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "175d86e633bedcfb642fb326f1ec0b43c14c4f3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/175d86e633bedcfb642fb326f1ec0b43c14c4f3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/175d86e633bedcfb642fb326f1ec0b43c14c4f3b"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 18,
      "deletions": 0
    },
    "files": [
      {
        "sha": "579eadfff336fcc7f53e034bf7b0140b303b20db",
        "filename": "doc/bips.md",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b63ae5626910eaa41337c8173cac0c4728a5432d/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b63ae5626910eaa41337c8173cac0c4728a5432d/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=b63ae5626910eaa41337c8173cac0c4728a5432d",
        "patch": "@@ -0,0 +1,18 @@\n+BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.10.0**):\n+\n+* [`BIP 11`](https://github.com/bitcoin/bips/blob/master/bip-0011.mediawiki): Multisig outputs are standard since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669)).\n+* [`BIP 13`](https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki): The address format for P2SH addresses has been implemented since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669)).\n+* [`BIP 14`](https://github.com/bitcoin/bips/blob/master/bip-0014.mediawiki): The subversion string is being used as User Agent since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669)).\n+* [`BIP 16`](https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki): The pay-to-script-hash evaluation rules have been implemented since **v0.6.0**, and took effect on *April 1st 2012* ([PR #748](https://github.com/bitcoin/bitcoin/pull/748)).\n+* [`BIP 21`](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki): The URI format for Bitcoin payments has been implemented since **v0.6.0** ([PR #176](https://github.com/bitcoin/bitcoin/pull/176)).\n+* [`BIP 22`](https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki): The 'getblocktemplate' (GBT) RPC protocol for mining has been implemented since **v0.7.0** ([PR #936](https://github.com/bitcoin/bitcoin/pull/936)).\n+* [`BIP 23`](https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki): Some extensions to GBT have been implemented since **v0.10.0rc1**, including longpolling and block proposals ([PR #1816](https://github.com/bitcoin/bitcoin/pull/1816)).\n+* [`BIP 30`](https://github.com/bitcoin/bips/blob/master/bip-0030.mediawiki): The evaluation rules to forbid creating new transactions with the same txid as previous not-fully-spent transactions were implemented since **v0.6.0**, and the rule took effect on *March 15th 2012* ([PR #915](https://github.com/bitcoin/bitcoin/pull/915)).\n+* [`BIP 31`](https://github.com/bitcoin/bips/blob/master/bip-0031.mediawiki): The 'pong' protocol message (and the protocol version bump to 60001) has been implemented since **v0.6.1** ([PR #1081](https://github.com/bitcoin/bitcoin/pull/1081)).\n+* [`BIP 34`](https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki): The rule that requires blocks to contain their height (number) in the coinbase input, and the introduction of version 2 blocks has been implemented since **v0.7.0**. The rule took effect for version 2 blocks as of *block 224413* (March 5th 2013), and version 1 blocks are no longer allowed since *block 227931* (March 25th 2013) ([PR #1526](https://github.com/bitcoin/bitcoin/pull/1526)).\n+* [`BIP 35`](https://github.com/bitcoin/bips/blob/master/bip-0035.mediawiki): The 'mempool' protocol message (and the protocol version bump to 60002) has been implemented since **v0.7.0** ([PR #1641](https://github.com/bitcoin/bitcoin/pull/1641)).\n+* [`BIP 37`](https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki): The bloom filtering for transaction relaying, partial merkle trees for blocks , and the protocol version bump to 70001 (enabling low-bandwidth SPV clients) has been implemented since **v0.8.0** ([PR #1795](https://github.com/bitcoin/bitcoin/pull/1795)).\n+* [`BIP 42`](https://github.com/bitcoin/bips/blob/master/bip-0042.mediawiki): The bug that would have caused the subsidy schedule to resume after block 13440000 was fixed in **v0.9.2** ([PR #3842](https://github.com/bitcoin/bitcoin/pull/3842)).\n+* [`BIP 61`](https://github.com/bitcoin/bips/blob/master/bip-0061.mediawiki): The 'reject' protocol message (and the protocol version bump to 70002) was added in **v0.9.0** ([PR #3185](https://github.com/bitcoin/bitcoin/pull/3185)).\n+* [`BIP 66`](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki): The strict DER rules and associated version 3 blocks have been implemented since **v0.10.0** ([PR #5713](https://github.com/bitcoin/bitcoin/pull/5713)).\n+* [`BIP 70`](https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki) [`71`](https://github.com/bitcoin/bips/blob/master/bip-0071.mediawiki) [`72`](https://github.com/bitcoin/bips/blob/master/bip-0072.mediawiki): Payment Protocol support has been available in Bitcoin Core GUI since **v0.9.0** ([PR #5216](https://github.com/bitcoin/bitcoin/pull/5216))."
      }
    ]
  },
  {
    "sha": "e5ece053da705a630bb664e16036299915ac1246",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNWVjZTA1M2RhNzA1YTYzMGJiNjY0ZTE2MDM2Mjk5OTE1YWMxMjQ2",
    "commit": {
      "author": {
        "name": "Shaul Kfir",
        "email": "shaul.kfir@gmail.com",
        "date": "2015-02-17T13:46:51Z"
      },
      "committer": {
        "name": "Shaul Kfir",
        "email": "shaul.kfir@gmail.com",
        "date": "2015-02-17T13:46:51Z"
      },
      "message": "Rename Interval() to DifficultyAdjustmentInterval()",
      "tree": {
        "sha": "532f7872bc94d87796ddb5143cf34b5fdf789c4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/532f7872bc94d87796ddb5143cf34b5fdf789c4b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5ece053da705a630bb664e16036299915ac1246",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5ece053da705a630bb664e16036299915ac1246",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e5ece053da705a630bb664e16036299915ac1246",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5ece053da705a630bb664e16036299915ac1246/comments",
    "author": {
      "login": "shaulkf",
      "id": 4781551,
      "node_id": "MDQ6VXNlcjQ3ODE1NTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4781551?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shaulkf",
      "html_url": "https://github.com/shaulkf",
      "followers_url": "https://api.github.com/users/shaulkf/followers",
      "following_url": "https://api.github.com/users/shaulkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/shaulkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shaulkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shaulkf/subscriptions",
      "organizations_url": "https://api.github.com/users/shaulkf/orgs",
      "repos_url": "https://api.github.com/users/shaulkf/repos",
      "events_url": "https://api.github.com/users/shaulkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shaulkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "shaulkf",
      "id": 4781551,
      "node_id": "MDQ6VXNlcjQ3ODE1NTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4781551?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shaulkf",
      "html_url": "https://github.com/shaulkf",
      "followers_url": "https://api.github.com/users/shaulkf/followers",
      "following_url": "https://api.github.com/users/shaulkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/shaulkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shaulkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shaulkf/subscriptions",
      "organizations_url": "https://api.github.com/users/shaulkf/orgs",
      "repos_url": "https://api.github.com/users/shaulkf/repos",
      "events_url": "https://api.github.com/users/shaulkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shaulkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "175d86e633bedcfb642fb326f1ec0b43c14c4f3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/175d86e633bedcfb642fb326f1ec0b43c14c4f3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/175d86e633bedcfb642fb326f1ec0b43c14c4f3b"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "86b84df6677f7ecbbe8f1a852b884a305216a2c0",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5ece053da705a630bb664e16036299915ac1246/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5ece053da705a630bb664e16036299915ac1246/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=e5ece053da705a630bb664e16036299915ac1246",
        "patch": "@@ -68,7 +68,7 @@ class CChainParams\n     bool RequireStandard() const { return fRequireStandard; }\n     int64_t TargetTimespan() const { return nTargetTimespan; }\n     int64_t TargetSpacing() const { return nTargetSpacing; }\n-    int64_t Interval() const { return nTargetTimespan / nTargetSpacing; }\n+    int64_t DifficultyAdjustmentInterval() const { return nTargetTimespan / nTargetSpacing; }\n     /** Make miner stop after a block is found. In RPC, don't return until nGenProcLimit blocks are generated */\n     bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }\n     /** In the future use NetworkIDString() for RPC fields */"
      },
      {
        "sha": "6dd5c4c12c76806e766a3a358aec52778c1b1f49",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5ece053da705a630bb664e16036299915ac1246/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5ece053da705a630bb664e16036299915ac1246/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=e5ece053da705a630bb664e16036299915ac1246",
        "patch": "@@ -20,8 +20,8 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n     if (pindexLast == NULL)\n         return nProofOfWorkLimit;\n \n-    // Only change once per interval\n-    if ((pindexLast->nHeight+1) % Params().Interval() != 0)\n+    // Only change once per difficulty adjustment interval\n+    if ((pindexLast->nHeight+1) % Params().DifficultyAdjustmentInterval() != 0)\n     {\n         if (Params().AllowMinDifficultyBlocks())\n         {\n@@ -34,7 +34,7 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n             {\n                 // Return the last non-special-min-difficulty-rules-block\n                 const CBlockIndex* pindex = pindexLast;\n-                while (pindex->pprev && pindex->nHeight % Params().Interval() != 0 && pindex->nBits == nProofOfWorkLimit)\n+                while (pindex->pprev && pindex->nHeight % Params().DifficultyAdjustmentInterval() != 0 && pindex->nBits == nProofOfWorkLimit)\n                     pindex = pindex->pprev;\n                 return pindex->nBits;\n             }\n@@ -44,7 +44,7 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n \n     // Go back by what we want to be 14 days worth of blocks\n     const CBlockIndex* pindexFirst = pindexLast;\n-    for (int i = 0; pindexFirst && i < Params().Interval()-1; i++)\n+    for (int i = 0; pindexFirst && i < Params().DifficultyAdjustmentInterval()-1; i++)\n         pindexFirst = pindexFirst->pprev;\n     assert(pindexFirst);\n "
      },
      {
        "sha": "165a9df697d6daef2492ada5417226808b7149a6",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5ece053da705a630bb664e16036299915ac1246/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5ece053da705a630bb664e16036299915ac1246/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=e5ece053da705a630bb664e16036299915ac1246",
        "patch": "@@ -44,7 +44,7 @@ Value GetNetworkHashPS(int lookup, int height) {\n \n     // If lookup is -1, then use blocks since last difficulty change.\n     if (lookup <= 0)\n-        lookup = pb->nHeight % Params().Interval() + 1;\n+        lookup = pb->nHeight % Params().DifficultyAdjustmentInterval() + 1;\n \n     // If lookup is larger than chain, then set it to chain length.\n     if (lookup > pb->nHeight)"
      }
    ]
  },
  {
    "sha": "e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplM2EzY2Q3YTI4YzhhMGYyZjIxMmYxNWI2OWNlZjZmY2JlY2JkOThl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-18T08:50:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-18T08:52:59Z"
      },
      "message": "Merge #5784: Fix usage of NegateSignatureS in script_tests\n\n78c6bed Add test for DER-encoding edge case (Suhas Daftuar)\n6f50dbd Fix NegateSignatureS to not duplicate last byte of S (Suhas Daftuar)",
      "tree": {
        "sha": "5ed19c0723afe8121ddb1b6213e975be273b4723",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ed19c0723afe8121ddb1b6213e975be273b4723"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU5FLrAAoJEHSBCwEjRsmmJbUH/3DKexrvYumjCSpvP+TWZQMs\n+u7tj1gh2DbZibj5UKUu8yRC6JNZF1N8Sc+kau7MCm3HmrVeyOw3IuxJ9h5JQszs\nenZ4IxXlLFeRFIh71z1WU6R4VgKVVLdQ6E2vt5qgqckTy71daiVcWXePRJDCD8eP\nDw5oEz38FlNhtYfIpquan5VhfTm1gkN8ya20FQBtUcdGjjcuXSNqcPjphNK/RVUt\nNVUd3u73wy8seu8kJu009hSDkxcQg/vbZ0OdlK8RbpHGVaxhp+ZFMD0QU57Nifwm\nfmXwnof4g7ntaAEseKYBotlH1VsvlX4ZsnB4g1KwJ6s2dwVzcI2+5ExUsqn1HrM=\n=nyZ6\n-----END PGP SIGNATURE-----",
        "payload": "tree 5ed19c0723afe8121ddb1b6213e975be273b4723\nparent 175d86e633bedcfb642fb326f1ec0b43c14c4f3b\nparent 78c6bedb9cd3ed85f829a288146533e3b41f784b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1424249411 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1424249579 +0100\n\nMerge #5784: Fix usage of NegateSignatureS in script_tests\n\n78c6bed Add test for DER-encoding edge case (Suhas Daftuar)\n6f50dbd Fix NegateSignatureS to not duplicate last byte of S (Suhas Daftuar)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "175d86e633bedcfb642fb326f1ec0b43c14c4f3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/175d86e633bedcfb642fb326f1ec0b43c14c4f3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/175d86e633bedcfb642fb326f1ec0b43c14c4f3b"
      },
      {
        "sha": "78c6bedb9cd3ed85f829a288146533e3b41f784b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78c6bedb9cd3ed85f829a288146533e3b41f784b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/78c6bedb9cd3ed85f829a288146533e3b41f784b"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 20,
      "deletions": 4
    },
    "files": [
      {
        "sha": "3c52547a64e22fe439545e4561cb931948ad3034",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e",
        "patch": "@@ -696,7 +696,13 @@\n     \"BIP66 example 11, with DERSIG\"\n ],\n [\n-    \"0x49 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef05101\",\n+    \"0x48 0x304402203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022054e1c258c2981cdfba5df1f46661fb6541c44f77ca0092f3600331abfffb12510101\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n+    \"DERSIG\",\n+    \"P2PK with multi-byte hashtype, with DERSIG\"\n+],\n+[\n+    \"0x48 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef001\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n     \"LOW_S\",\n     \"P2PK with high S\""
      },
      {
        "sha": "34e2c8d61a7dc131159c199dae5a01a0e80d8950",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e",
        "patch": "@@ -814,7 +814,13 @@\n     \"BIP66 example 12, with DERSIG\"\n ],\n [\n-    \"0x49 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef05101\",\n+    \"0x48 0x304402203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022054e1c258c2981cdfba5df1f46661fb6541c44f77ca0092f3600331abfffb12510101\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n+    \"\",\n+    \"P2PK with multi-byte hashtype, without DERSIG\"\n+],\n+[\n+    \"0x48 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef001\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n     \"\",\n     \"P2PK with high S but no LOW_S\""
      },
      {
        "sha": "e410b59710c144c2c88d8c0481e317844d18dc60",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e",
        "patch": "@@ -107,7 +107,6 @@ void static NegateSignatureS(std::vector<unsigned char>& vchSig) {\n     std::vector<unsigned char> r, s;\n     r = std::vector<unsigned char>(vchSig.begin() + 4, vchSig.begin() + 4 + vchSig[3]);\n     s = std::vector<unsigned char>(vchSig.begin() + 6 + vchSig[3], vchSig.begin() + 6 + vchSig[3] + vchSig[5 + vchSig[3]]);\n-    unsigned char hashtype = vchSig.back();\n \n     // Really ugly to implement mod-n negation here, but it would be feature creep to expose such functionality from libsecp256k1.\n     static const unsigned char order[33] = {\n@@ -141,7 +140,6 @@ void static NegateSignatureS(std::vector<unsigned char>& vchSig) {\n     vchSig.push_back(0x02);\n     vchSig.push_back(s.size());\n     vchSig.insert(vchSig.end(), s.begin(), s.end());\n-    vchSig.push_back(hashtype);\n }\n \n namespace\n@@ -478,6 +476,12 @@ BOOST_AUTO_TEST_CASE(script_build)\n     good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n                                \"BIP66 example 12, with DERSIG\", SCRIPT_VERIFY_DERSIG\n                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n+                               \"P2PK with multi-byte hashtype, without DERSIG\", 0\n+                              ).PushSig(keys.key2, SIGHASH_ALL).EditPush(70, \"01\", \"0101\"));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n+                               \"P2PK with multi-byte hashtype, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                              ).PushSig(keys.key2, SIGHASH_ALL).EditPush(70, \"01\", \"0101\"));\n \n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n                                \"P2PK with high S but no LOW_S\", 0"
      }
    ]
  },
  {
    "sha": "8d0418720c29b72bd369f0b3b23b6d75584f3c08",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDA0MTg3MjBjMjliNzJiZDM2OWYwYjNiMjNiNmQ3NTU4NGYzYzA4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-18T16:29:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-18T16:29:28Z"
      },
      "message": "Merge #5799: Rename Interval() to DifficultyAdjustmentInterval()\n\ne5ece05 Rename Interval() to DifficultyAdjustmentInterval() (Shaul Kfir)",
      "tree": {
        "sha": "eb4bcc06141923f1e9c94804fce8d52affbc5a38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eb4bcc06141923f1e9c94804fce8d52affbc5a38"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d0418720c29b72bd369f0b3b23b6d75584f3c08",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU5L3oAAoJEHSBCwEjRsmmTRIH/jq8ZSCdWjTKJLaF3MTIQCeL\nHyZXB2Jh4qc2O++FHVAWaYlHbxhHOd1JoA8pmk10GkKupXLrP8tBSaIqaninT64Y\nD/XkQUu4r91oUbmAlP1TPEhsJlfPJnFw7ci/QSe38Y1EUR9yBJSf0V//0BeM6KgD\nBoINCwUqvgsUFFlIIPIVFoJ3XGVuEmKbyUqT50zwmEKdM0TaPFKYORGtayr/yfEk\nn57EHTSkjW+kaPUSQit/o3xAtEnr3pirCRdkZIgCtANm4zai94iwTTn+FudKPyH0\nSYzy4I5vs8Qv7LCSPBx5G0j1MTPW5EFHYNmnOKSzbVvAwZwg+5OZF0sFaSylSJQ=\n=Jtqf\n-----END PGP SIGNATURE-----",
        "payload": "tree eb4bcc06141923f1e9c94804fce8d52affbc5a38\nparent e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e\nparent e5ece053da705a630bb664e16036299915ac1246\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1424276957 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1424276968 +0100\n\nMerge #5799: Rename Interval() to DifficultyAdjustmentInterval()\n\ne5ece05 Rename Interval() to DifficultyAdjustmentInterval() (Shaul Kfir)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d0418720c29b72bd369f0b3b23b6d75584f3c08",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d0418720c29b72bd369f0b3b23b6d75584f3c08",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d0418720c29b72bd369f0b3b23b6d75584f3c08/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e"
      },
      {
        "sha": "e5ece053da705a630bb664e16036299915ac1246",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5ece053da705a630bb664e16036299915ac1246",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5ece053da705a630bb664e16036299915ac1246"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "86b84df6677f7ecbbe8f1a852b884a305216a2c0",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0418720c29b72bd369f0b3b23b6d75584f3c08/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0418720c29b72bd369f0b3b23b6d75584f3c08/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=8d0418720c29b72bd369f0b3b23b6d75584f3c08",
        "patch": "@@ -68,7 +68,7 @@ class CChainParams\n     bool RequireStandard() const { return fRequireStandard; }\n     int64_t TargetTimespan() const { return nTargetTimespan; }\n     int64_t TargetSpacing() const { return nTargetSpacing; }\n-    int64_t Interval() const { return nTargetTimespan / nTargetSpacing; }\n+    int64_t DifficultyAdjustmentInterval() const { return nTargetTimespan / nTargetSpacing; }\n     /** Make miner stop after a block is found. In RPC, don't return until nGenProcLimit blocks are generated */\n     bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }\n     /** In the future use NetworkIDString() for RPC fields */"
      },
      {
        "sha": "6dd5c4c12c76806e766a3a358aec52778c1b1f49",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0418720c29b72bd369f0b3b23b6d75584f3c08/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0418720c29b72bd369f0b3b23b6d75584f3c08/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=8d0418720c29b72bd369f0b3b23b6d75584f3c08",
        "patch": "@@ -20,8 +20,8 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n     if (pindexLast == NULL)\n         return nProofOfWorkLimit;\n \n-    // Only change once per interval\n-    if ((pindexLast->nHeight+1) % Params().Interval() != 0)\n+    // Only change once per difficulty adjustment interval\n+    if ((pindexLast->nHeight+1) % Params().DifficultyAdjustmentInterval() != 0)\n     {\n         if (Params().AllowMinDifficultyBlocks())\n         {\n@@ -34,7 +34,7 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n             {\n                 // Return the last non-special-min-difficulty-rules-block\n                 const CBlockIndex* pindex = pindexLast;\n-                while (pindex->pprev && pindex->nHeight % Params().Interval() != 0 && pindex->nBits == nProofOfWorkLimit)\n+                while (pindex->pprev && pindex->nHeight % Params().DifficultyAdjustmentInterval() != 0 && pindex->nBits == nProofOfWorkLimit)\n                     pindex = pindex->pprev;\n                 return pindex->nBits;\n             }\n@@ -44,7 +44,7 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n \n     // Go back by what we want to be 14 days worth of blocks\n     const CBlockIndex* pindexFirst = pindexLast;\n-    for (int i = 0; pindexFirst && i < Params().Interval()-1; i++)\n+    for (int i = 0; pindexFirst && i < Params().DifficultyAdjustmentInterval()-1; i++)\n         pindexFirst = pindexFirst->pprev;\n     assert(pindexFirst);\n "
      },
      {
        "sha": "165a9df697d6daef2492ada5417226808b7149a6",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0418720c29b72bd369f0b3b23b6d75584f3c08/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0418720c29b72bd369f0b3b23b6d75584f3c08/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=8d0418720c29b72bd369f0b3b23b6d75584f3c08",
        "patch": "@@ -44,7 +44,7 @@ Value GetNetworkHashPS(int lookup, int height) {\n \n     // If lookup is -1, then use blocks since last difficulty change.\n     if (lookup <= 0)\n-        lookup = pb->nHeight % Params().Interval() + 1;\n+        lookup = pb->nHeight % Params().DifficultyAdjustmentInterval() + 1;\n \n     // If lookup is larger than chain, then set it to chain length.\n     if (lookup > pb->nHeight)"
      }
    ]
  },
  {
    "sha": "47a79bb880fa7dceafdbdc5df50a36173fe74de9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0N2E3OWJiODgwZmE3ZGNlYWZkYmRjNWRmNTBhMzYxNzNmZTc0ZGU5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-18T16:36:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-18T16:36:39Z"
      },
      "message": "Merge #5366: No longer check osx compatibility in RenameThread\n\n850c570 No longer check osx compatibility in RenameThread (Michael Ford)",
      "tree": {
        "sha": "0f16c777dfe9cc75e3368652cc481d5e707993cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f16c777dfe9cc75e3368652cc481d5e707993cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47a79bb880fa7dceafdbdc5df50a36173fe74de9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU5L+XAAoJEHSBCwEjRsmmliMIALOnRjOnquZ3/Kx2d3wdUHw6\nFDU9GjRm99yUsTW9HJE3g38PPng1HNLgZVpiCm3S17H61KLoyonBG2nxnYXEMahx\nIadY5yxzjo2GdX+E60termrK39BJiNCpmnQwCqVHLaTpJQR6s97pvK3voQZT4fIx\nHK4xT9RZAOxuNXGHs856x4Ke9dPsOgbz0JqxuRWxyMMHsNM6DuupH0uSKivtJDBs\nJfERnezpuL0l6OOK64+kjdfdVXhHc+DIkWq/IXxeEaFx7tLcAmaoFmMvuHku4q5H\nhZmy7dW2VKMRYYQh/iNs52E2fCcRh0yQalrbaLnWpDSrAm498wt9malGI2H8UsQ=\n=84qE\n-----END PGP SIGNATURE-----",
        "payload": "tree 0f16c777dfe9cc75e3368652cc481d5e707993cf\nparent 8d0418720c29b72bd369f0b3b23b6d75584f3c08\nparent 850c570d685a3bd350eea30c4688185c586de1db\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1424277376 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1424277399 +0100\n\nMerge #5366: No longer check osx compatibility in RenameThread\n\n850c570 No longer check osx compatibility in RenameThread (Michael Ford)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47a79bb880fa7dceafdbdc5df50a36173fe74de9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47a79bb880fa7dceafdbdc5df50a36173fe74de9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47a79bb880fa7dceafdbdc5df50a36173fe74de9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d0418720c29b72bd369f0b3b23b6d75584f3c08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d0418720c29b72bd369f0b3b23b6d75584f3c08",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d0418720c29b72bd369f0b3b23b6d75584f3c08"
      },
      {
        "sha": "850c570d685a3bd350eea30c4688185c586de1db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/850c570d685a3bd350eea30c4688185c586de1db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/850c570d685a3bd350eea30c4688185c586de1db"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 1,
      "deletions": 6
    },
    "files": [
      {
        "sha": "361b3631f567121acb310c958eabc92a9a608d60",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47a79bb880fa7dceafdbdc5df50a36173fe74de9/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47a79bb880fa7dceafdbdc5df50a36173fe74de9/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=47a79bb880fa7dceafdbdc5df50a36173fe74de9",
        "patch": "@@ -698,13 +698,8 @@ void RenameThread(const char* name)\n     //       removed.\n     pthread_set_name_np(pthread_self(), name);\n \n-#elif defined(MAC_OSX) && defined(__MAC_OS_X_VERSION_MAX_ALLOWED)\n-\n-// pthread_setname_np is XCode 10.6-and-later\n-#if __MAC_OS_X_VERSION_MAX_ALLOWED >= 1060\n+#elif defined(MAC_OSX)\n     pthread_setname_np(name);\n-#endif\n-\n #else\n     // Prevent warnings for unused parameters...\n     (void)name;"
      }
    ]
  },
  {
    "sha": "544e64e975e93dcf22a682a12acebd26d2306b86",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDRlNjRlOTc1ZTkzZGNmMjJhNjgyYTEyYWNlYmQyNmQyMzA2Yjg2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-02-18T21:32:46Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-02-18T21:34:33Z"
      },
      "message": "Update debian changelog and control file",
      "tree": {
        "sha": "09394463e1452eae2dabcbf4dc757423772fbed5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09394463e1452eae2dabcbf4dc757423772fbed5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/544e64e975e93dcf22a682a12acebd26d2306b86",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/544e64e975e93dcf22a682a12acebd26d2306b86",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/544e64e975e93dcf22a682a12acebd26d2306b86",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/544e64e975e93dcf22a682a12acebd26d2306b86/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "47a79bb880fa7dceafdbdc5df50a36173fe74de9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47a79bb880fa7dceafdbdc5df50a36173fe74de9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47a79bb880fa7dceafdbdc5df50a36173fe74de9"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 13,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7ce3babc1b1ae5cdb8ce5f84ffa6cb67c4abba71",
        "filename": "contrib/debian/changelog",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/544e64e975e93dcf22a682a12acebd26d2306b86/contrib/debian/changelog",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/544e64e975e93dcf22a682a12acebd26d2306b86/contrib/debian/changelog",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/changelog?ref=544e64e975e93dcf22a682a12acebd26d2306b86",
        "patch": "@@ -1,3 +1,15 @@\n+bitcoin (0.10.0-precise1) precise; urgency=medium\n+\n+  * New upstream releases.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Wed, 18 Feb 2015 13:22:00 -1000\n+\n+bitcoin (0.9.4-precise1) precise; urgency=high\n+\n+  * New upstream releases.\n+\n+ -- Matt Corallo (laptop - only while traveling) <matt@mattcorallo.com>  Mon, 12 Jan 2015 23:30:00 -1000\n+\n bitcoin (0.9.3-precise1) precise; urgency=medium\n \n   * New upstream releases."
      },
      {
        "sha": "4392bb33853f9d29b0567f51a8648e962b8f322d",
        "filename": "contrib/debian/control",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/544e64e975e93dcf22a682a12acebd26d2306b86/contrib/debian/control",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/544e64e975e93dcf22a682a12acebd26d2306b86/contrib/debian/control",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/control?ref=544e64e975e93dcf22a682a12acebd26d2306b86",
        "patch": "@@ -12,7 +12,7 @@ Build-Depends: debhelper,\n  libdb4.8++-dev,\n  libssl-dev,\n  pkg-config,\n- libminiupnpc8-dev,\n+ libminiupnpc8-dev | libminiupnpc-dev (>> 1.6),\n  libboost-filesystem-dev (>> 1.35) | libboost-filesystem1.35-dev,\n  libboost-program-options-dev (>> 1.35) | libboost-program-options1.35-dev,\n  libboost-thread-dev (>> 1.35) | libboost-thread1.35-dev,"
      }
    ]
  },
  {
    "sha": "ea98509fa5f76fac581a1d016c42c2407065e48d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTk4NTA5ZmE1Zjc2ZmFjNTgxYTFkMDE2YzQyYzI0MDcwNjVlNDhk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-19T09:51:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-19T09:51:32Z"
      },
      "message": "Merge #5803: Update debian changelog and control file\n\n544e64e Update debian changelog and control file (Matt Corallo)",
      "tree": {
        "sha": "09394463e1452eae2dabcbf4dc757423772fbed5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09394463e1452eae2dabcbf4dc757423772fbed5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea98509fa5f76fac581a1d016c42c2407065e48d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU5bIkAAoJEHSBCwEjRsmmNiMH/jOlRwgjSVwCIKPvH3h2bOqs\n0h7YniSCK+gynK2x2PAHDnvPB3ysJd7RM8Xnfj5FNxnzOwi/KFH2cuFU7mCwbtiz\nF2NUt7BuyLYmNzPArRnTQMS2mf030Cx7b2+lER6XsReIcpmMorMLMrn07UduZXeZ\nw5AJmfbgWYZ0MQDWfT2vf6MlKGqENgyCR3ENN1+MY1JqsMZAtQK9xsuYnRclKK7X\n2/cV5JZ2ZB9r5fp+gOLbgAmWyz/5FgxGYOIq49HQ4cKGTlqZkUvrZjraz8C7bV2r\nGc8gu8lG1Oyn7K5urRkf+kuNZXzGhsfLhjUBsV8WBhXqIT0LaIBLfIXrqHk/f58=\n=SYGP\n-----END PGP SIGNATURE-----",
        "payload": "tree 09394463e1452eae2dabcbf4dc757423772fbed5\nparent 47a79bb880fa7dceafdbdc5df50a36173fe74de9\nparent 544e64e975e93dcf22a682a12acebd26d2306b86\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1424339472 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1424339492 +0100\n\nMerge #5803: Update debian changelog and control file\n\n544e64e Update debian changelog and control file (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea98509fa5f76fac581a1d016c42c2407065e48d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea98509fa5f76fac581a1d016c42c2407065e48d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea98509fa5f76fac581a1d016c42c2407065e48d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "47a79bb880fa7dceafdbdc5df50a36173fe74de9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47a79bb880fa7dceafdbdc5df50a36173fe74de9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47a79bb880fa7dceafdbdc5df50a36173fe74de9"
      },
      {
        "sha": "544e64e975e93dcf22a682a12acebd26d2306b86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/544e64e975e93dcf22a682a12acebd26d2306b86",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/544e64e975e93dcf22a682a12acebd26d2306b86"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 13,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7ce3babc1b1ae5cdb8ce5f84ffa6cb67c4abba71",
        "filename": "contrib/debian/changelog",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea98509fa5f76fac581a1d016c42c2407065e48d/contrib/debian/changelog",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea98509fa5f76fac581a1d016c42c2407065e48d/contrib/debian/changelog",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/changelog?ref=ea98509fa5f76fac581a1d016c42c2407065e48d",
        "patch": "@@ -1,3 +1,15 @@\n+bitcoin (0.10.0-precise1) precise; urgency=medium\n+\n+  * New upstream releases.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Wed, 18 Feb 2015 13:22:00 -1000\n+\n+bitcoin (0.9.4-precise1) precise; urgency=high\n+\n+  * New upstream releases.\n+\n+ -- Matt Corallo (laptop - only while traveling) <matt@mattcorallo.com>  Mon, 12 Jan 2015 23:30:00 -1000\n+\n bitcoin (0.9.3-precise1) precise; urgency=medium\n \n   * New upstream releases."
      },
      {
        "sha": "4392bb33853f9d29b0567f51a8648e962b8f322d",
        "filename": "contrib/debian/control",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea98509fa5f76fac581a1d016c42c2407065e48d/contrib/debian/control",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea98509fa5f76fac581a1d016c42c2407065e48d/contrib/debian/control",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/control?ref=ea98509fa5f76fac581a1d016c42c2407065e48d",
        "patch": "@@ -12,7 +12,7 @@ Build-Depends: debhelper,\n  libdb4.8++-dev,\n  libssl-dev,\n  pkg-config,\n- libminiupnpc8-dev,\n+ libminiupnpc8-dev | libminiupnpc-dev (>> 1.6),\n  libboost-filesystem-dev (>> 1.35) | libboost-filesystem1.35-dev,\n  libboost-program-options-dev (>> 1.35) | libboost-program-options1.35-dev,\n  libboost-thread-dev (>> 1.35) | libboost-thread1.35-dev,"
      }
    ]
  },
  {
    "sha": "9673c35dafee3522ec707c0ecc5e02ae9bba9409",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NjczYzM1ZGFmZWUzNTIyZWM3MDdjMGVjYzVlMDJhZTliYmE5NDA5",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-02-14T20:41:12Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-02-19T11:06:49Z"
      },
      "message": "[Qt, Win] honor current network when creating autostart link\n\n- creates a \"Bitcoin (testnet).lnk\" when on testnet or a \"Bitcoin\n  (regtest).lnk, when on regtest\n- fixes #5778",
      "tree": {
        "sha": "580f5d66b7832a2e893fee0476168eb949a9bfe3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/580f5d66b7832a2e893fee0476168eb949a9bfe3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9673c35dafee3522ec707c0ecc5e02ae9bba9409",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9673c35dafee3522ec707c0ecc5e02ae9bba9409",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9673c35dafee3522ec707c0ecc5e02ae9bba9409",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9673c35dafee3522ec707c0ecc5e02ae9bba9409/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 27,
      "deletions": 8
    },
    "files": [
      {
        "sha": "d2dcdf63959d0c62590b5cc634500aaff366dc03",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 8,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9673c35dafee3522ec707c0ecc5e02ae9bba9409/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9673c35dafee3522ec707c0ecc5e02ae9bba9409/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=9673c35dafee3522ec707c0ecc5e02ae9bba9409",
        "patch": "@@ -40,6 +40,7 @@\n #if BOOST_FILESYSTEM_VERSION >= 3\n #include <boost/filesystem/detail/utf8_codecvt_facet.hpp>\n #endif\n+#include <boost/scoped_array.hpp>\n \n #include <QAbstractItemView>\n #include <QApplication>\n@@ -567,12 +568,17 @@ TableViewLastColumnResizingFixer::TableViewLastColumnResizingFixer(QTableView* t\n #ifdef WIN32\n boost::filesystem::path static StartupShortcutPath()\n {\n+    if (GetBoolArg(\"-testnet\", false))\n+        return GetSpecialFolderPath(CSIDL_STARTUP) / \"Bitcoin (testnet).lnk\";\n+    else if (GetBoolArg(\"-regtest\", false))\n+        return GetSpecialFolderPath(CSIDL_STARTUP) / \"Bitcoin (regtest).lnk\";\n+\n     return GetSpecialFolderPath(CSIDL_STARTUP) / \"Bitcoin.lnk\";\n }\n \n bool GetStartOnSystemStartup()\n {\n-    // check for Bitcoin.lnk\n+    // check for Bitcoin*.lnk\n     return boost::filesystem::exists(StartupShortcutPath());\n }\n \n@@ -588,29 +594,43 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n         // Get a pointer to the IShellLink interface.\n         IShellLink* psl = NULL;\n         HRESULT hres = CoCreateInstance(CLSID_ShellLink, NULL,\n-                                CLSCTX_INPROC_SERVER, IID_IShellLink,\n-                                reinterpret_cast<void**>(&psl));\n+            CLSCTX_INPROC_SERVER, IID_IShellLink,\n+            reinterpret_cast<void**>(&psl));\n \n         if (SUCCEEDED(hres))\n         {\n             // Get the current executable path\n             TCHAR pszExePath[MAX_PATH];\n             GetModuleFileName(NULL, pszExePath, sizeof(pszExePath));\n \n-            TCHAR pszArgs[5] = TEXT(\"-min\");\n+            // Start client minimized\n+            QString strArgs = \"-min\";\n+            // Set -testnet /-regtest options\n+            strArgs += QString::fromStdString(strprintf(\" -testnet=%d -regtest=%d\", GetBoolArg(\"-testnet\", false), GetBoolArg(\"-regtest\", false)));\n+\n+#ifdef UNICODE\n+            boost::scoped_array<TCHAR> args(new TCHAR[strArgs.length() + 1]);\n+            // Convert the QString to TCHAR*\n+            strArgs.toWCharArray(args.get());\n+            // Add missing '\\0'-termination to string\n+            args[strArgs.length()] = '\\0';\n+#endif\n \n             // Set the path to the shortcut target\n             psl->SetPath(pszExePath);\n             PathRemoveFileSpec(pszExePath);\n             psl->SetWorkingDirectory(pszExePath);\n             psl->SetShowCmd(SW_SHOWMINNOACTIVE);\n-            psl->SetArguments(pszArgs);\n+#ifndef UNICODE\n+            psl->SetArguments(strArgs.toStdString().c_str());\n+#else\n+            psl->SetArguments(args.get());\n+#endif\n \n             // Query IShellLink for the IPersistFile interface for\n             // saving the shortcut in persistent storage.\n             IPersistFile* ppf = NULL;\n-            hres = psl->QueryInterface(IID_IPersistFile,\n-                                       reinterpret_cast<void**>(&ppf));\n+            hres = psl->QueryInterface(IID_IPersistFile, reinterpret_cast<void**>(&ppf));\n             if (SUCCEEDED(hres))\n             {\n                 WCHAR pwsz[MAX_PATH];\n@@ -630,7 +650,6 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n     }\n     return true;\n }\n-\n #elif defined(Q_OS_LINUX)\n \n // Follow the Desktop Application Autostart Spec:"
      }
    ]
  },
  {
    "sha": "6cb4a5253551269db4ce6d853b39e61f9050a21e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Y2I0YTUyNTM1NTEyNjlkYjRjZTZkODUzYjM5ZTYxZjkwNTBhMjFl",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-02-15T15:27:08Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-02-19T11:08:47Z"
      },
      "message": "[Qt, Linux] honor current network when creating autostart link",
      "tree": {
        "sha": "80bd49a330e824b320ecea1360bd38a1c8870ab4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80bd49a330e824b320ecea1360bd38a1c8870ab4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6cb4a5253551269db4ce6d853b39e61f9050a21e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cb4a5253551269db4ce6d853b39e61f9050a21e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6cb4a5253551269db4ce6d853b39e61f9050a21e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cb4a5253551269db4ce6d853b39e61f9050a21e/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "9673c35dafee3522ec707c0ecc5e02ae9bba9409",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9673c35dafee3522ec707c0ecc5e02ae9bba9409",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9673c35dafee3522ec707c0ecc5e02ae9bba9409"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "9db0a75971ac5ed2497022de013207380c00192a",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cb4a5253551269db4ce6d853b39e61f9050a21e/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cb4a5253551269db4ce6d853b39e61f9050a21e/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=6cb4a5253551269db4ce6d853b39e61f9050a21e",
        "patch": "@@ -653,7 +653,7 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n #elif defined(Q_OS_LINUX)\n \n // Follow the Desktop Application Autostart Spec:\n-//  http://standards.freedesktop.org/autostart-spec/autostart-spec-latest.html\n+// http://standards.freedesktop.org/autostart-spec/autostart-spec-latest.html\n \n boost::filesystem::path static GetAutostartDir()\n {\n@@ -709,8 +709,13 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n         // Write a bitcoin.desktop file to the autostart directory:\n         optionFile << \"[Desktop Entry]\\n\";\n         optionFile << \"Type=Application\\n\";\n-        optionFile << \"Name=Bitcoin\\n\";\n-        optionFile << \"Exec=\" << pszExePath << \" -min\\n\";\n+        if (GetBoolArg(\"-testnet\", false))\n+            optionFile << \"Name=Bitcoin (testnet)\\n\";\n+        else if (GetBoolArg(\"-regtest\", false))\n+            optionFile << \"Name=Bitcoin (regtest)\\n\";\n+        else\n+            optionFile << \"Name=Bitcoin\\n\";\n+        optionFile << \"Exec=\" << pszExePath << strprintf(\" -min -testnet=%d -regtest=%d\\n\", GetBoolArg(\"-testnet\", false), GetBoolArg(\"-regtest\", false));\n         optionFile << \"Terminal=false\\n\";\n         optionFile << \"Hidden=false\\n\";\n         optionFile.close();"
      }
    ]
  },
  {
    "sha": "07f4386b387caddd82502d575cc9dba80b81d9f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowN2Y0Mzg2YjM4N2NhZGRkODI1MDJkNTc1Y2M5ZGJhODBiODFkOWYy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-19T11:00:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-19T11:09:26Z"
      },
      "message": "Merge #5689: openssl: abstract out OPENSSL_cleanse\n\n1630219 openssl: abstract out OPENSSL_cleanse (Cory Fields)",
      "tree": {
        "sha": "65727039c39354977ca8b9007ed9e395cb089586",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65727039c39354977ca8b9007ed9e395cb089586"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07f4386b387caddd82502d575cc9dba80b81d9f2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU5cRmAAoJEHSBCwEjRsmmqZsIAMv4Idw+6xfOl6XbayfbMOCi\n36VCthH37yJQI1jrCx+iB3Pa/tRHa5Zyn1HXHvEJ5hTMnghovSnwqY7E6SM1bv3N\nipYD4B8wYkWNQfCi5b9BYUnPxizj1bfEOcIOTf6PbYHf63BOiBd8QnX6Aj25t1CW\n7mAtVDISXdPXjvOkd0FsJ66wSmvzwHQi/FWB9tqvSAEJJMHRCxP8I10ctPdnAEAj\nqZdLJYzfY67j0vuj/Gs8nImBQsxwht1BAgFmhIzY7qkODy8pz020BYIiHeUJyphV\nvVK+vc+8qhV0jma2QSakdVUqF3PrK0YqOW63w/rPIosSP5Rl1QHrWOhcD5Kaa/w=\n=emYg\n-----END PGP SIGNATURE-----",
        "payload": "tree 65727039c39354977ca8b9007ed9e395cb089586\nparent ea98509fa5f76fac581a1d016c42c2407065e48d\nparent 1630219d906f592c9258bfe2a0e0c4923df35782\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1424343617 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1424344166 +0100\n\nMerge #5689: openssl: abstract out OPENSSL_cleanse\n\n1630219 openssl: abstract out OPENSSL_cleanse (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07f4386b387caddd82502d575cc9dba80b81d9f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/07f4386b387caddd82502d575cc9dba80b81d9f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07f4386b387caddd82502d575cc9dba80b81d9f2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea98509fa5f76fac581a1d016c42c2407065e48d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea98509fa5f76fac581a1d016c42c2407065e48d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea98509fa5f76fac581a1d016c42c2407065e48d"
      },
      {
        "sha": "1630219d906f592c9258bfe2a0e0c4923df35782",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1630219d906f592c9258bfe2a0e0c4923df35782",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1630219d906f592c9258bfe2a0e0c4923df35782"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 44,
      "deletions": 17
    },
    "files": [
      {
        "sha": "7644f6b325bf1170cc6b794909a8485a0384c924",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07f4386b387caddd82502d575cc9dba80b81d9f2/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07f4386b387caddd82502d575cc9dba80b81d9f2/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=07f4386b387caddd82502d575cc9dba80b81d9f2",
        "patch": "@@ -123,6 +123,7 @@ BITCOIN_CORE_H = \\\n   script/standard.h \\\n   serialize.h \\\n   streams.h \\\n+  support/cleanse.h \\\n   sync.h \\\n   threadsafety.h \\\n   timedata.h \\\n@@ -268,6 +269,7 @@ libbitcoin_util_a_SOURCES = \\\n   compat/strnlen.cpp \\\n   random.cpp \\\n   rpcprotocol.cpp \\\n+  support/cleanse.cpp \\\n   sync.cpp \\\n   uint256.cpp \\\n   util.cpp \\"
      },
      {
        "sha": "8ffe015b9e5fb1c930d72e0938418220a0914349",
        "filename": "src/allocators.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07f4386b387caddd82502d575cc9dba80b81d9f2/src/allocators.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07f4386b387caddd82502d575cc9dba80b81d9f2/src/allocators.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/allocators.h?ref=07f4386b387caddd82502d575cc9dba80b81d9f2",
        "patch": "@@ -6,6 +6,8 @@\n #ifndef BITCOIN_ALLOCATORS_H\n #define BITCOIN_ALLOCATORS_H\n \n+#include \"support/cleanse.h\"\n+\n #include <map>\n #include <string>\n #include <string.h>\n@@ -14,8 +16,6 @@\n #include <boost/thread/mutex.hpp>\n #include <boost/thread/once.hpp>\n \n-#include <openssl/crypto.h> // for OPENSSL_cleanse()\n-\n /**\n  * Thread-safe class to keep track of locked (ie, non-swappable) memory pages.\n  *\n@@ -174,7 +174,7 @@ void LockObject(const T& t)\n template <typename T>\n void UnlockObject(const T& t)\n {\n-    OPENSSL_cleanse((void*)(&t), sizeof(T));\n+    memory_cleanse((void*)(&t), sizeof(T));\n     LockedPageManager::Instance().UnlockRange((void*)(&t), sizeof(T));\n }\n \n@@ -217,7 +217,7 @@ struct secure_allocator : public std::allocator<T> {\n     void deallocate(T* p, std::size_t n)\n     {\n         if (p != NULL) {\n-            OPENSSL_cleanse(p, sizeof(T) * n);\n+            memory_cleanse(p, sizeof(T) * n);\n             LockedPageManager::Instance().UnlockRange(p, sizeof(T) * n);\n         }\n         std::allocator<T>::deallocate(p, n);\n@@ -254,7 +254,7 @@ struct zero_after_free_allocator : public std::allocator<T> {\n     void deallocate(T* p, std::size_t n)\n     {\n         if (p != NULL)\n-            OPENSSL_cleanse(p, sizeof(T) * n);\n+            memory_cleanse(p, sizeof(T) * n);\n         std::allocator<T>::deallocate(p, n);\n     }\n };"
      },
      {
        "sha": "c8091850560a73065d48d52466199f5c9f0c6acf",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07f4386b387caddd82502d575cc9dba80b81d9f2/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07f4386b387caddd82502d575cc9dba80b81d9f2/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=07f4386b387caddd82502d575cc9dba80b81d9f2",
        "patch": "@@ -172,7 +172,7 @@ bool CBase58Data::SetString(const char* psz, unsigned int nVersionBytes)\n     vchData.resize(vchTemp.size() - nVersionBytes);\n     if (!vchData.empty())\n         memcpy(&vchData[0], &vchTemp[nVersionBytes], vchData.size());\n-    OPENSSL_cleanse(&vchTemp[0], vchData.size());\n+    memory_cleanse(&vchTemp[0], vchData.size());\n     return true;\n }\n "
      },
      {
        "sha": "c7f7e2167904ea1ee89704fe58e754cf10ed871c",
        "filename": "src/crypter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07f4386b387caddd82502d575cc9dba80b81d9f2/src/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07f4386b387caddd82502d575cc9dba80b81d9f2/src/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.cpp?ref=07f4386b387caddd82502d575cc9dba80b81d9f2",
        "patch": "@@ -26,8 +26,8 @@ bool CCrypter::SetKeyFromPassphrase(const SecureString& strKeyData, const std::v\n \n     if (i != (int)WALLET_CRYPTO_KEY_SIZE)\n     {\n-        OPENSSL_cleanse(chKey, sizeof(chKey));\n-        OPENSSL_cleanse(chIV, sizeof(chIV));\n+        memory_cleanse(chKey, sizeof(chKey));\n+        memory_cleanse(chIV, sizeof(chIV));\n         return false;\n     }\n "
      },
      {
        "sha": "8a91498e2e82d2fa94474adc951907412b3beade",
        "filename": "src/crypter.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07f4386b387caddd82502d575cc9dba80b81d9f2/src/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07f4386b387caddd82502d575cc9dba80b81d9f2/src/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.h?ref=07f4386b387caddd82502d575cc9dba80b81d9f2",
        "patch": "@@ -82,8 +82,8 @@ class CCrypter\n \n     void CleanKey()\n     {\n-        OPENSSL_cleanse(chKey, sizeof(chKey));\n-        OPENSSL_cleanse(chIV, sizeof(chIV));\n+        memory_cleanse(chKey, sizeof(chKey));\n+        memory_cleanse(chIV, sizeof(chIV));\n         fKeySet = false;\n     }\n "
      },
      {
        "sha": "3246e4b67a1c0def79c64f428390a2e51fca6807",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07f4386b387caddd82502d575cc9dba80b81d9f2/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07f4386b387caddd82502d575cc9dba80b81d9f2/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=07f4386b387caddd82502d575cc9dba80b81d9f2",
        "patch": "@@ -21,8 +21,6 @@\n #include <boost/thread.hpp>\n #include <boost/version.hpp>\n \n-#include <openssl/rand.h>\n-\n using namespace std;\n \n "
      },
      {
        "sha": "b69461ad9edbca93a6c11f6e6aa5ecb7d77944dd",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07f4386b387caddd82502d575cc9dba80b81d9f2/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07f4386b387caddd82502d575cc9dba80b81d9f2/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=07f4386b387caddd82502d575cc9dba80b81d9f2",
        "patch": "@@ -13,7 +13,6 @@\n \n #include <stdexcept>\n \n-#include <openssl/x509.h>\n #include <openssl/x509_vfy.h>\n \n #include <QDateTime>"
      },
      {
        "sha": "61f8a3415decf682ef56a31c00a90a9e8dd8f7bd",
        "filename": "src/qt/paymentrequestplus.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07f4386b387caddd82502d575cc9dba80b81d9f2/src/qt/paymentrequestplus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07f4386b387caddd82502d575cc9dba80b81d9f2/src/qt/paymentrequestplus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.h?ref=07f4386b387caddd82502d575cc9dba80b81d9f2",
        "patch": "@@ -9,6 +9,8 @@\n \n #include \"base58.h\"\n \n+#include <openssl/x509.h>\n+\n #include <QByteArray>\n #include <QList>\n #include <QString>"
      },
      {
        "sha": "96ceeb18a4b98c560320dd3260dbea834b20a27e",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07f4386b387caddd82502d575cc9dba80b81d9f2/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07f4386b387caddd82502d575cc9dba80b81d9f2/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=07f4386b387caddd82502d575cc9dba80b81d9f2",
        "patch": "@@ -16,7 +16,6 @@\n \n #include <cstdlib>\n \n-#include <openssl/x509.h>\n #include <openssl/x509_vfy.h>\n \n #include <QApplication>"
      },
      {
        "sha": "ae25bee1b71c8cd280d2eb13e1968d079594d45a",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07f4386b387caddd82502d575cc9dba80b81d9f2/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07f4386b387caddd82502d575cc9dba80b81d9f2/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=07f4386b387caddd82502d575cc9dba80b81d9f2",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"random.h\"\n \n+#include \"support/cleanse.h\"\n #ifdef WIN32\n #include \"compat.h\" // for Windows API\n #endif\n@@ -18,7 +19,6 @@\n #include <sys/time.h>\n #endif\n \n-#include <openssl/crypto.h>\n #include <openssl/err.h>\n #include <openssl/rand.h>\n \n@@ -40,7 +40,7 @@ void RandAddSeed()\n     // Seed with CPU performance counter\n     int64_t nCounter = GetPerformanceCounter();\n     RAND_add(&nCounter, sizeof(nCounter), 1.5);\n-    OPENSSL_cleanse((void*)&nCounter, sizeof(nCounter));\n+    memory_cleanse((void*)&nCounter, sizeof(nCounter));\n }\n \n void RandAddSeedPerfmon()\n@@ -70,7 +70,7 @@ void RandAddSeedPerfmon()\n     RegCloseKey(HKEY_PERFORMANCE_DATA);\n     if (ret == ERROR_SUCCESS) {\n         RAND_add(begin_ptr(vData), nSize, nSize / 100.0);\n-        OPENSSL_cleanse(begin_ptr(vData), nSize);\n+        memory_cleanse(begin_ptr(vData), nSize);\n         LogPrint(\"rand\", \"%s: %lu bytes\\n\", __func__, nSize);\n     } else {\n         static bool warned = false; // Warn only once"
      },
      {
        "sha": "9999c2341f78d8f9b0dc0801fea7b4916aca1046",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07f4386b387caddd82502d575cc9dba80b81d9f2/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07f4386b387caddd82502d575cc9dba80b81d9f2/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=07f4386b387caddd82502d575cc9dba80b81d9f2",
        "patch": "@@ -16,6 +16,7 @@\n #include <map>\n #include <set>\n #include <stdint.h>\n+#include <stdio.h>\n #include <string>\n #include <string.h>\n #include <utility>"
      },
      {
        "sha": "a2141b244980399ab4d91b351ff809dd43f4efab",
        "filename": "src/support/cleanse.cpp",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07f4386b387caddd82502d575cc9dba80b81d9f2/src/support/cleanse.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07f4386b387caddd82502d575cc9dba80b81d9f2/src/support/cleanse.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/cleanse.cpp?ref=07f4386b387caddd82502d575cc9dba80b81d9f2",
        "patch": "@@ -0,0 +1,13 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"cleanse.h\"\n+\n+#include <openssl/crypto.h>\n+\n+void memory_cleanse(void *ptr, size_t len)\n+{\n+    OPENSSL_cleanse(ptr, len);\n+}"
      },
      {
        "sha": "3e02aa8fd1fe59b7283730635d0774f3119fa0c5",
        "filename": "src/support/cleanse.h",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07f4386b387caddd82502d575cc9dba80b81d9f2/src/support/cleanse.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07f4386b387caddd82502d575cc9dba80b81d9f2/src/support/cleanse.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/cleanse.h?ref=07f4386b387caddd82502d575cc9dba80b81d9f2",
        "patch": "@@ -0,0 +1,13 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_CLEANSE_H\n+#define BITCOIN_SUPPORT_CLEANSE_H\n+\n+#include <stdlib.h>\n+\n+void memory_cleanse(void *ptr, size_t len);\n+\n+#endif // BITCOIN_SUPPORT_CLEANSE_H"
      }
    ]
  },
  {
    "sha": "a026a56c4eb558e9c85d90854ad06f8155c45e91",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDI2YTU2YzRlYjU1OGU5Yzg1ZDkwODU0YWQwNmY4MTU1YzQ1ZTkx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-20T08:43:55Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-20T08:51:38Z"
      },
      "message": "Merge #5706: fix crash: RPC \\\n\ne5d9d77 fix crash: createmultisig and addmultisigaddress (fsb4000)",
      "tree": {
        "sha": "2936945f3868fd22965eb24d57952bf520d08c6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2936945f3868fd22965eb24d57952bf520d08c6c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a026a56c4eb558e9c85d90854ad06f8155c45e91",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU5vWaAAoJEHSBCwEjRsmmx9YH/3WWPmJ+alI+ZPHq9GoyVXi4\nPcC6wPUS+dAYg3ZiBI0EXmqzqFtgHwOczl30u5Ss/vPoC894aQAfNDlB1h7WtuB3\n+0Um/VuXMmpsl7E3IQN8oVmUrxJ01aGrpvFNTciLY+Xv0S1hg4E2gpb6gKl0PW9g\ngpc+LeUphi8F62+T12Wr32ZskgzIENtfRNYgmwFjnukx1zgw13ExKKAlC9QkHRqa\nAN0BSA2wKM30asdLZczjBfi8K28O6gHwEFYk10X5zhuqeFz+vWBTFH/UjgfJvdeR\nHOyXnJvmlOccBxZbLrFAMu7mSXfIGmyCGmR8sYbB/v0jquChSkeWnWBfGpSTywc=\n=rSkG\n-----END PGP SIGNATURE-----",
        "payload": "tree 2936945f3868fd22965eb24d57952bf520d08c6c\nparent 07f4386b387caddd82502d575cc9dba80b81d9f2\nparent e5d9d77df2de715d24638e3bab78750b7ad3e1fd\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1424421835 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1424422298 +0100\n\nMerge #5706: fix crash: RPC \\\n\ne5d9d77 fix crash: createmultisig and addmultisigaddress (fsb4000)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a026a56c4eb558e9c85d90854ad06f8155c45e91",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a026a56c4eb558e9c85d90854ad06f8155c45e91",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a026a56c4eb558e9c85d90854ad06f8155c45e91/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "07f4386b387caddd82502d575cc9dba80b81d9f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07f4386b387caddd82502d575cc9dba80b81d9f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07f4386b387caddd82502d575cc9dba80b81d9f2"
      },
      {
        "sha": "e5d9d77df2de715d24638e3bab78750b7ad3e1fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5d9d77df2de715d24638e3bab78750b7ad3e1fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5d9d77df2de715d24638e3bab78750b7ad3e1fd"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2eda4d3355236b89f91562b877cec5575cfb9a99",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a026a56c4eb558e9c85d90854ad06f8155c45e91/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a026a56c4eb558e9c85d90854ad06f8155c45e91/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=a026a56c4eb558e9c85d90854ad06f8155c45e91",
        "patch": "@@ -228,6 +228,8 @@ CScript _createmultisig_redeemScript(const Array& params)\n         throw runtime_error(\n             strprintf(\"not enough keys supplied \"\n                       \"(got %u keys, but need at least %d to redeem)\", keys.size(), nRequired));\n+    if (keys.size() > 16)\n+        throw runtime_error(\"Number of addresses involved in the multisignature address creation > 16\\nReduce the number\");\n     std::vector<CPubKey> pubkeys;\n     pubkeys.resize(keys.size());\n     for (unsigned int i = 0; i < keys.size(); i++)"
      }
    ]
  },
  {
    "sha": "aaba10f275059cd762c1f07597aa5efb24176cdd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYWJhMTBmMjc1MDU5Y2Q3NjJjMWYwNzU5N2FhNWVmYjI0MTc2Y2Rk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-20T08:54:38Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-20T08:59:33Z"
      },
      "message": "Revert \"Make nicer pull request merge messages\"\n\nThis reverts commit 1078fb08851442bcd7750c3d5015dc1fe7e4d927 (and thus\npull #5623). It has various issues:\n\n- Pull request names get cut off at \", see e.g. a026a56\n\n- Merge script no longer copes with pulls that have a milestone\n  attached, due to a duplicate 'title' in JSON that is not handled by the\n  ad-hoc parsing.",
      "tree": {
        "sha": "3b07e17fcc358b054c95245942769498e8787ac9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b07e17fcc358b054c95245942769498e8787ac9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aaba10f275059cd762c1f07597aa5efb24176cdd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU5vd2AAoJEHSBCwEjRsmmWXsH/jOCjVEmbE3Iep3i9dH2STig\nU/UUoDqBAhGSChlk9EeYn+cz+ZXiN3di4WB/UC94y+xHPd0EpPc83KIFOdsz1wZd\nZ6iqWeQJ1KVU16zG3fyrMeE1UwQDj0gnrL9zdHA/njj+0RGu7ccsAr5uxzQpI52n\n5jpgwuLP4DmIoVMBeTeo1pmKmNOAJUUVqWEBX+G/EZxkJ3c79uXJ3hBxcwRLSjgK\nhdO8IAp5nh6tME0DaGIt5eO6oNTBQligromtbJMuT4NeSPrgBEgLDET5DShxzFTX\n26QqKllLw7QFcVcqPPq3+oVQfPKNVo5BUL426TsxyZKmfQOUmOBrS6ghurR91fE=\n=UgPR\n-----END PGP SIGNATURE-----",
        "payload": "tree 3b07e17fcc358b054c95245942769498e8787ac9\nparent a026a56c4eb558e9c85d90854ad06f8155c45e91\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1424422478 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1424422773 +0100\n\nRevert \"Make nicer pull request merge messages\"\n\nThis reverts commit 1078fb08851442bcd7750c3d5015dc1fe7e4d927 (and thus\npull #5623). It has various issues:\n\n- Pull request names get cut off at \", see e.g. a026a56\n\n- Merge script no longer copes with pulls that have a milestone\n  attached, due to a duplicate 'title' in JSON that is not handled by the\n  ad-hoc parsing.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aaba10f275059cd762c1f07597aa5efb24176cdd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aaba10f275059cd762c1f07597aa5efb24176cdd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aaba10f275059cd762c1f07597aa5efb24176cdd/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a026a56c4eb558e9c85d90854ad06f8155c45e91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a026a56c4eb558e9c85d90854ad06f8155c45e91",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a026a56c4eb558e9c85d90854ad06f8155c45e91"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 2,
      "deletions": 4
    },
    "files": [
      {
        "sha": "ec7a1f4c4b3d881b8887656bf7fa3eb2eb531c91",
        "filename": "contrib/devtools/github-merge.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aaba10f275059cd762c1f07597aa5efb24176cdd/contrib/devtools/github-merge.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aaba10f275059cd762c1f07597aa5efb24176cdd/contrib/devtools/github-merge.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/github-merge.sh?ref=aaba10f275059cd762c1f07597aa5efb24176cdd",
        "patch": "@@ -82,15 +82,13 @@ function cleanup() {\n }\n \n # Create unsigned merge commit.\n-PRTITLE=`curl -s https://api.github.com/repos/$REPO/pulls/$PULL | grep -e '  \"title\": \".*\",'| awk -F'\"' '{print $4}'`\n-MERGEMESSAGE=\"Merge #$PULL: $PRTITLE\"\n (\n-  echo $MERGEMESSAGE\n+  echo \"Merge pull request #$PULL\"\n   echo \"\"\n   git log --no-merges --topo-order --pretty='format:%h %s (%an)' pull/\"$PULL\"/base..pull/\"$PULL\"/head\n )>\"$TMPDIR/message\"\n if git merge -q --commit --no-edit --no-ff -m \"$(<\"$TMPDIR/message\")\" pull/\"$PULL\"/head; then\n-  if [ \"d$(git log --pretty='format:%s' -n 1)\" != \"d$MERGEMESSAGE\" ]; then\n+  if [ \"d$(git log --pretty='format:%s' -n 1)\" != \"dMerge pull request #$PULL\" ]; then\n     echo \"ERROR: Creating merge failed (already merged?).\" >&2\n     cleanup\n     exit 4"
      }
    ]
  },
  {
    "sha": "de5403f87874c5c54c5a8358cbf38140bee87a9e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZTU0MDNmODc4NzRjNWM1NGM1YTgzNThjYmYzODE0MGJlZTg3YTll",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2015-02-18T16:33:56Z"
      },
      "committer": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2015-02-21T01:11:33Z"
      },
      "message": "[GUI] Move fee dialog minimise button away from \"Transaction Fee\"\n\nIts original placement was causing confusion among some users.",
      "tree": {
        "sha": "39d72fe269abc6811525016e593fa01fb0107579",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39d72fe269abc6811525016e593fa01fb0107579"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de5403f87874c5c54c5a8358cbf38140bee87a9e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de5403f87874c5c54c5a8358cbf38140bee87a9e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de5403f87874c5c54c5a8358cbf38140bee87a9e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de5403f87874c5c54c5a8358cbf38140bee87a9e/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "175d86e633bedcfb642fb326f1ec0b43c14c4f3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/175d86e633bedcfb642fb326f1ec0b43c14c4f3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/175d86e633bedcfb642fb326f1ec0b43c14c4f3b"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "b1ed7a27b5c8882be87077c33ae19383347ca76a",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de5403f87874c5c54c5a8358cbf38140bee87a9e/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de5403f87874c5c54c5a8358cbf38140bee87a9e/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=de5403f87874c5c54c5a8358cbf38140bee87a9e",
        "patch": "@@ -771,16 +771,6 @@\n                 </property>\n                </widget>\n               </item>\n-              <item>\n-               <widget class=\"QPushButton\" name=\"buttonMinimizeFee\">\n-                <property name=\"toolTip\">\n-                 <string>collapse fee-settings</string>\n-                </property>\n-                <property name=\"text\">\n-                 <string>Minimize</string>\n-                </property>\n-               </widget>\n-              </item>\n              </layout>\n             </item>\n             <item>\n@@ -811,6 +801,16 @@\n             </property>\n            </spacer>\n           </item>\n+          <item>\n+           <widget class=\"QPushButton\" name=\"buttonMinimizeFee\">\n+            <property name=\"toolTip\">\n+             <string>collapse fee-settings</string>\n+            </property>\n+            <property name=\"text\">\n+             <string>Minimize</string>\n+            </property>\n+           </widget>\n+          </item>\n          </layout>\n         </item>\n         <item>"
      }
    ]
  },
  {
    "sha": "34e5015cd21e27c1bf635d92531afac93f553096",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNGU1MDE1Y2QyMWUyN2MxYmY2MzVkOTI1MzFhZmFjOTNmNTUzMDk2",
    "commit": {
      "author": {
        "name": "Ross Nicoll",
        "email": "jrn@jrn.me.uk",
        "date": "2015-02-21T12:57:44Z"
      },
      "committer": {
        "name": "Ross Nicoll",
        "email": "jrn@jrn.me.uk",
        "date": "2015-02-21T13:14:19Z"
      },
      "message": "Add unit tests for next difficulty calculations\n\nSplit GetNextWorkRequired() into two functions to allow the difficulty calculations to\nbe tested without requiring a full blockchain.\nAdd unit tests to cover basic difficulty calculation, plus each of the min/max actual\ntime, and maximum difficulty target conditions.",
      "tree": {
        "sha": "0497bd7f74f211fd261ec173225ab8eca1760fdb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0497bd7f74f211fd261ec173225ab8eca1760fdb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34e5015cd21e27c1bf635d92531afac93f553096",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABAgAGBQJU6ISrAAoJEJFC5fflM847RC8IAJGxJiyv5z/EmkKCJEU6CU3a\ncuCjORvxRQFyBPYShvbe7W22nQZilUAFMtjgReuyNqnRoU3E0wlYPzdWZT4WKXZ9\nPUMvcBQdwJXuLefaZuPmI+i+Mtk8D5/uXlHXT+J5xI8yTe+8q+9VNN53lyWM2RX3\nnqrbV1OMECqWP31BsWG18use6JcuXfFZw2o+XoFCWYH2a0sp6Ue5l7TCZHwitoUs\n0XMVCxkbkf+bPKJbGb5r83s3ZaL4uYfX80eItkRmvvmBrRZ/wqUurPgIhoDSKKGj\nWV9M+mDYL9luDyT1t+34B3tZCbj+khkD7it6Pj5Y3aA41VqIdFVacu1SxiELbWo=\n=pZCh\n-----END PGP SIGNATURE-----",
        "payload": "tree 0497bd7f74f211fd261ec173225ab8eca1760fdb\nparent aaba10f275059cd762c1f07597aa5efb24176cdd\nauthor Ross Nicoll <jrn@jrn.me.uk> 1424523464 +0000\ncommitter Ross Nicoll <jrn@jrn.me.uk> 1424524459 +0000\n\nAdd unit tests for next difficulty calculations\n\nSplit GetNextWorkRequired() into two functions to allow the difficulty calculations to\nbe tested without requiring a full blockchain.\nAdd unit tests to cover basic difficulty calculation, plus each of the min/max actual\ntime, and maximum difficulty target conditions.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34e5015cd21e27c1bf635d92531afac93f553096",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34e5015cd21e27c1bf635d92531afac93f553096",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34e5015cd21e27c1bf635d92531afac93f553096/comments",
    "author": {
      "login": "rnicoll",
      "id": 3513077,
      "node_id": "MDQ6VXNlcjM1MTMwNzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3513077?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rnicoll",
      "html_url": "https://github.com/rnicoll",
      "followers_url": "https://api.github.com/users/rnicoll/followers",
      "following_url": "https://api.github.com/users/rnicoll/following{/other_user}",
      "gists_url": "https://api.github.com/users/rnicoll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rnicoll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rnicoll/subscriptions",
      "organizations_url": "https://api.github.com/users/rnicoll/orgs",
      "repos_url": "https://api.github.com/users/rnicoll/repos",
      "events_url": "https://api.github.com/users/rnicoll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rnicoll/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rnicoll",
      "id": 3513077,
      "node_id": "MDQ6VXNlcjM1MTMwNzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3513077?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rnicoll",
      "html_url": "https://github.com/rnicoll",
      "followers_url": "https://api.github.com/users/rnicoll/followers",
      "following_url": "https://api.github.com/users/rnicoll/following{/other_user}",
      "gists_url": "https://api.github.com/users/rnicoll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rnicoll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rnicoll/subscriptions",
      "organizations_url": "https://api.github.com/users/rnicoll/orgs",
      "repos_url": "https://api.github.com/users/rnicoll/repos",
      "events_url": "https://api.github.com/users/rnicoll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rnicoll/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aaba10f275059cd762c1f07597aa5efb24176cdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aaba10f275059cd762c1f07597aa5efb24176cdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aaba10f275059cd762c1f07597aa5efb24176cdd"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 74,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6774745de2453ebe9d998e3a7f90b8252ae09432",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34e5015cd21e27c1bf635d92531afac93f553096/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34e5015cd21e27c1bf635d92531afac93f553096/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=34e5015cd21e27c1bf635d92531afac93f553096",
        "patch": "@@ -55,6 +55,7 @@ BITCOIN_TESTS =\\\n   test/multisig_tests.cpp \\\n   test/netbase_tests.cpp \\\n   test/pmt_tests.cpp \\\n+  test/pow_tests.cpp \\\n   test/rpc_tests.cpp \\\n   test/sanity_tests.cpp \\\n   test/script_P2SH_tests.cpp \\"
      },
      {
        "sha": "b75b293c908ba67b3663df29193d33f50e8c0fd9",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34e5015cd21e27c1bf635d92531afac93f553096/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34e5015cd21e27c1bf635d92531afac93f553096/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=34e5015cd21e27c1bf635d92531afac93f553096",
        "patch": "@@ -48,8 +48,13 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n         pindexFirst = pindexFirst->pprev;\n     assert(pindexFirst);\n \n+    return CalculateNextWorkRequired(pindexLast, pindexFirst->GetBlockTime());\n+}\n+\n+unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime)\n+{\n     // Limit adjustment step\n-    int64_t nActualTimespan = pindexLast->GetBlockTime() - pindexFirst->GetBlockTime();\n+    int64_t nActualTimespan = pindexLast->GetBlockTime() - nFirstBlockTime;\n     LogPrintf(\"  nActualTimespan = %d  before bounds\\n\", nActualTimespan);\n     if (nActualTimespan < Params().TargetTimespan()/4)\n         nActualTimespan = Params().TargetTimespan()/4;"
      },
      {
        "sha": "a5fbba62364c0f1709cd11723b5137694dac6586",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34e5015cd21e27c1bf635d92531afac93f553096/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34e5015cd21e27c1bf635d92531afac93f553096/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=34e5015cd21e27c1bf635d92531afac93f553096",
        "patch": "@@ -14,6 +14,7 @@ class uint256;\n class arith_uint256;\n \n unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock);\n+unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime);\n \n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n bool CheckProofOfWork(uint256 hash, unsigned int nBits);"
      },
      {
        "sha": "e42c1b0a8b66af7e2952c1b48f172b983af92de4",
        "filename": "src/test/pow_tests.cpp",
        "status": "added",
        "additions": 66,
        "deletions": 0,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34e5015cd21e27c1bf635d92531afac93f553096/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34e5015cd21e27c1bf635d92531afac93f553096/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=34e5015cd21e27c1bf635d92531afac93f553096",
        "patch": "@@ -0,0 +1,66 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"main.h\"\n+#include \"pow.h\"\n+#include \"util.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace std;\n+\n+BOOST_AUTO_TEST_SUITE(pow_tests)\n+\n+/* Test calculation of next difficulty target with no constraints applying */\n+BOOST_AUTO_TEST_CASE(get_next_work)\n+{\n+    SelectParams(CBaseChainParams::MAIN);\n+\n+    int64_t nLastRetargetTime = 1261130161; // Block #30240\n+    CBlockIndex pindexLast;\n+    pindexLast.nHeight = 32255;\n+    pindexLast.nTime = 1262152739;  // Block #32255\n+    pindexLast.nBits = 0x1d00ffff;\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1d00d86a);\n+}\n+\n+/* Test the constraint on the upper bound for next work */\n+BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)\n+{\n+    SelectParams(CBaseChainParams::MAIN);\n+\n+    int64_t nLastRetargetTime = 1231006505; // Block #0\n+    CBlockIndex pindexLast;\n+    pindexLast.nHeight = 2015;\n+    pindexLast.nTime = 1233061996;  // Block #2015\n+    pindexLast.nBits = 0x1d00ffff;\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1d00ffff);\n+}\n+\n+/* Test the constraint on the lower bound for actual time taken */\n+BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)\n+{\n+    SelectParams(CBaseChainParams::MAIN);\n+\n+    int64_t nLastRetargetTime = 1279008237; // Block #66528\n+    CBlockIndex pindexLast;\n+    pindexLast.nHeight = 68543;\n+    pindexLast.nTime = 1279297671;  // Block #68543\n+    pindexLast.nBits = 0x1c05a3f4;\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1c0168fd);\n+}\n+\n+/* Test the constraint on the upper bound for actual time taken */\n+BOOST_AUTO_TEST_CASE(get_next_work_upper_limit_actual)\n+{\n+    SelectParams(CBaseChainParams::MAIN);\n+    int64_t nLastRetargetTime = 1263163443; // NOTE: Not an actual block time\n+    CBlockIndex pindexLast;\n+    pindexLast.nHeight = 46367;\n+    pindexLast.nTime = 1269211443;  // Block #46367\n+    pindexLast.nBits = 0x1c387f6f;\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1d00e1fd);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YjI5OGNhN2Q3NTQwYWNjMTlkMWRmNzlhNWMyYWY3YjVhY2E4Y2Jl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-23T18:29:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-23T18:30:24Z"
      },
      "message": "Merge pull request #5708\n\nb63ae56 Add list of implemented BIPs (Pieter Wuille)",
      "tree": {
        "sha": "44680ed49bcb925e058e56b5ac93b947551fb781",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44680ed49bcb925e058e56b5ac93b947551fb781"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU63HAAAoJEHSBCwEjRsmmeiQH/26IXEO+ViyWOm8XRlcZUGEr\nqYV9ul13xkojuyaKq6QjBUZAxghyD0v+8VOzwR5tbVhpmrn6IoiDIQFpV1NOUXye\nqO1WtGyflbOunVt9OdaCfgCAsDXJ2ChaMiyEda2FkIHS4os2AAy2PTRr0GYoJFCk\n8sqm4poUldGsM15fCzksNwIBoiQhUOYNxV+aC92moaBQdraGuBcqM7ahfL8jon1e\nKFCP8OqZszxePaKXw1BOMLxfh8Q/AlDiylC/TG/IMwV9voLNVL8bkd+np3ihUO0i\n6U+9z78YLLTDj48dcESg43Atd3Vj/pjJ5XKAyRA4cIx4mCar9GMBAqbWU3M1CPk=\n=y6FH\n-----END PGP SIGNATURE-----",
        "payload": "tree 44680ed49bcb925e058e56b5ac93b947551fb781\nparent aaba10f275059cd762c1f07597aa5efb24176cdd\nparent b63ae5626910eaa41337c8173cac0c4728a5432d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1424716199 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1424716224 +0100\n\nMerge pull request #5708\n\nb63ae56 Add list of implemented BIPs (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aaba10f275059cd762c1f07597aa5efb24176cdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aaba10f275059cd762c1f07597aa5efb24176cdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aaba10f275059cd762c1f07597aa5efb24176cdd"
      },
      {
        "sha": "b63ae5626910eaa41337c8173cac0c4728a5432d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b63ae5626910eaa41337c8173cac0c4728a5432d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b63ae5626910eaa41337c8173cac0c4728a5432d"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 18,
      "deletions": 0
    },
    "files": [
      {
        "sha": "579eadfff336fcc7f53e034bf7b0140b303b20db",
        "filename": "doc/bips.md",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
        "patch": "@@ -0,0 +1,18 @@\n+BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.10.0**):\n+\n+* [`BIP 11`](https://github.com/bitcoin/bips/blob/master/bip-0011.mediawiki): Multisig outputs are standard since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669)).\n+* [`BIP 13`](https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki): The address format for P2SH addresses has been implemented since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669)).\n+* [`BIP 14`](https://github.com/bitcoin/bips/blob/master/bip-0014.mediawiki): The subversion string is being used as User Agent since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669)).\n+* [`BIP 16`](https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki): The pay-to-script-hash evaluation rules have been implemented since **v0.6.0**, and took effect on *April 1st 2012* ([PR #748](https://github.com/bitcoin/bitcoin/pull/748)).\n+* [`BIP 21`](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki): The URI format for Bitcoin payments has been implemented since **v0.6.0** ([PR #176](https://github.com/bitcoin/bitcoin/pull/176)).\n+* [`BIP 22`](https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki): The 'getblocktemplate' (GBT) RPC protocol for mining has been implemented since **v0.7.0** ([PR #936](https://github.com/bitcoin/bitcoin/pull/936)).\n+* [`BIP 23`](https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki): Some extensions to GBT have been implemented since **v0.10.0rc1**, including longpolling and block proposals ([PR #1816](https://github.com/bitcoin/bitcoin/pull/1816)).\n+* [`BIP 30`](https://github.com/bitcoin/bips/blob/master/bip-0030.mediawiki): The evaluation rules to forbid creating new transactions with the same txid as previous not-fully-spent transactions were implemented since **v0.6.0**, and the rule took effect on *March 15th 2012* ([PR #915](https://github.com/bitcoin/bitcoin/pull/915)).\n+* [`BIP 31`](https://github.com/bitcoin/bips/blob/master/bip-0031.mediawiki): The 'pong' protocol message (and the protocol version bump to 60001) has been implemented since **v0.6.1** ([PR #1081](https://github.com/bitcoin/bitcoin/pull/1081)).\n+* [`BIP 34`](https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki): The rule that requires blocks to contain their height (number) in the coinbase input, and the introduction of version 2 blocks has been implemented since **v0.7.0**. The rule took effect for version 2 blocks as of *block 224413* (March 5th 2013), and version 1 blocks are no longer allowed since *block 227931* (March 25th 2013) ([PR #1526](https://github.com/bitcoin/bitcoin/pull/1526)).\n+* [`BIP 35`](https://github.com/bitcoin/bips/blob/master/bip-0035.mediawiki): The 'mempool' protocol message (and the protocol version bump to 60002) has been implemented since **v0.7.0** ([PR #1641](https://github.com/bitcoin/bitcoin/pull/1641)).\n+* [`BIP 37`](https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki): The bloom filtering for transaction relaying, partial merkle trees for blocks , and the protocol version bump to 70001 (enabling low-bandwidth SPV clients) has been implemented since **v0.8.0** ([PR #1795](https://github.com/bitcoin/bitcoin/pull/1795)).\n+* [`BIP 42`](https://github.com/bitcoin/bips/blob/master/bip-0042.mediawiki): The bug that would have caused the subsidy schedule to resume after block 13440000 was fixed in **v0.9.2** ([PR #3842](https://github.com/bitcoin/bitcoin/pull/3842)).\n+* [`BIP 61`](https://github.com/bitcoin/bips/blob/master/bip-0061.mediawiki): The 'reject' protocol message (and the protocol version bump to 70002) was added in **v0.9.0** ([PR #3185](https://github.com/bitcoin/bitcoin/pull/3185)).\n+* [`BIP 66`](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki): The strict DER rules and associated version 3 blocks have been implemented since **v0.10.0** ([PR #5713](https://github.com/bitcoin/bitcoin/pull/5713)).\n+* [`BIP 70`](https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki) [`71`](https://github.com/bitcoin/bips/blob/master/bip-0071.mediawiki) [`72`](https://github.com/bitcoin/bips/blob/master/bip-0072.mediawiki): Payment Protocol support has been available in Bitcoin Core GUI since **v0.9.0** ([PR #5216](https://github.com/bitcoin/bitcoin/pull/5216))."
      }
    ]
  },
  {
    "sha": "3ee028f131db0ea78bfde0961a3fca7b9e95b193",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZWUwMjhmMTMxZGIwZWE3OGJmZGUwOTYxYTNmY2E3YjllOTViMTkz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-23T22:48:57Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-23T22:48:57Z"
      },
      "message": "build: disable reduced exports by default\n\nThis is really a packager's option. While it's helpful to encourage devs to\ntest this option for daily builds, it's not reliable in several real-world\nuse-cases. Some older libstdc++ runtimes (freebsd 9, debian wheezy, for\nexample) fail to properly catch exceptions due to mismatched type_info.\n\nSee https://gcc.gnu.org/bugzilla/show_bug.cgi?id=19664 for more info.",
      "tree": {
        "sha": "f4f7828672be0e9daa5337a14d51bd61d400b697",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4f7828672be0e9daa5337a14d51bd61d400b697"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ee028f131db0ea78bfde0961a3fca7b9e95b193",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ee028f131db0ea78bfde0961a3fca7b9e95b193",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ee028f131db0ea78bfde0961a3fca7b9e95b193",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ee028f131db0ea78bfde0961a3fca7b9e95b193/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 9,
      "deletions": 28
    },
    "files": [
      {
        "sha": "9dd3f17d88dd82be4d93f7652b5f2b0db9780ebf",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 9,
        "deletions": 28,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ee028f131db0ea78bfde0961a3fca7b9e95b193/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ee028f131db0ea78bfde0961a3fca7b9e95b193/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=3ee028f131db0ea78bfde0961a3fca7b9e95b193",
        "patch": "@@ -115,9 +115,9 @@ AC_ARG_ENABLE([hardening],\n \n AC_ARG_ENABLE([reduce-exports],\n   [AS_HELP_STRING([--enable-reduce-exports],\n-  [attempt to reduce exported symbols in the resulting executables (default is yes)])],\n+  [attempt to reduce exported symbols in the resulting executables (default is no)])],\n   [use_reduce_exports=$enableval],\n-  [use_reduce_exports=auto])\n+  [use_reduce_exports=no])\n \n AC_ARG_ENABLE([ccache],\n   [AS_HELP_STRING([--enable-ccache],\n@@ -473,20 +473,12 @@ AC_LINK_IFELSE([AC_LANG_SOURCE([\n     if test x$use_reduce_exports = xyes; then\n       AC_MSG_ERROR([Cannot find a working visibility attribute. Use --disable-reduced-exports.])\n     fi\n-      AC_MSG_WARN([Cannot find a working visibility attribute. Disabling reduced exports.])\n-      use_reduce_exports=no\n   ]\n )\n \n-if test x$use_reduce_exports != xno; then\n+if test x$use_reduce_exports = xyes; then\n   AX_CHECK_COMPILE_FLAG([-fvisibility=hidden],[RE_CXXFLAGS=\"-fvisibility=hidden\"],\n-  [\n-    if test x$use_reduce_exports = xyes; then\n-      AC_MSG_ERROR([Cannot set default symbol visibility. Use --disable-reduced-exports.])\n-    fi\n-    AC_MSG_WARN([Cannot set default symbol visibility. Disabling reduced exports.])\n-    use_reduce_exports=no\n-  ])\n+  [AC_MSG_ERROR([Cannot set default symbol visibility. Use --disable-reduced-exports.])])\n fi\n \n LEVELDB_CPPFLAGS=\n@@ -533,7 +525,7 @@ AX_BOOST_THREAD\n AX_BOOST_CHRONO\n \n \n-if test x$use_reduce_exports != xno; then\n+if test x$use_reduce_exports = xyes; then\n   AC_MSG_CHECKING([for working boost reduced exports])\n   TEMP_CPPFLAGS=\"$CPPFLAGS\"\n   CPPFLAGS=\"$BOOST_CPPFLAGS $CPPFLAGS\"\n@@ -547,25 +539,14 @@ if test x$use_reduce_exports != xno; then\n       #endif\n     ]])],[\n       AC_MSG_RESULT(yes)\n-    ],[:\n-    if test x$use_reduce_exports = xauto; then\n-      use_reduce_exports=no\n-    else\n-      if test x$use_reduce_exports = xyes; then\n-        AC_MSG_ERROR([boost versions < 1.49 are known to be broken with reduced exports. Use --disable-reduced-exports.])\n-      fi\n-    fi\n-    AC_MSG_RESULT(no)\n-    AC_MSG_WARN([boost versions < 1.49 are known to have symbol visibility issues. Disabling reduced exports.])\n+    ],[\n+    AC_MSG_ERROR([boost versions < 1.49 are known to be broken with reduced exports. Use --disable-reduced-exports.])\n   ])\n   CPPFLAGS=\"$TEMP_CPPFLAGS\"\n fi\n-\n-elif test x$use_reduce_exports = xauto; then\n-    use_reduce_exports=yes\n fi\n \n-if test x$use_reduce_exports != xno; then\n+if test x$use_reduce_exports = xyes; then\n     CXXFLAGS=\"$CXXFLAGS $RE_CXXFLAGS\"\n     AX_CHECK_LINK_FLAG([[-Wl,--exclude-libs,ALL]], [RELDFLAGS=\"-Wl,--exclude-libs,ALL\"])\n fi\n@@ -827,7 +808,7 @@ else\n fi\n \n AC_MSG_CHECKING([whether to reduce exports])\n-if test x$use_reduce_exports != xno; then\n+if test x$use_reduce_exports = xyes; then\n   AC_MSG_RESULT([yes])\n else\n   AC_MSG_RESULT([no])"
      }
    ]
  },
  {
    "sha": "aa3673064c5cc2009d4a75d0ab8a553e99861ccb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTM2NzMwNjRjNWNjMjAwOWQ0YTc1ZDBhYjhhNTUzZTk5ODYxY2Ni",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-23T22:56:15Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-23T22:56:15Z"
      },
      "message": "build: remove libstdc++ backwards-compat\n\nBackwards-compatibility for libstdc++ is not limited to straightforward abi\nchanges. Symbol visibility also needs to be taken into consideration, and\nthat really can't be addressed simply.\n\nInstead, just static-link libstdc++ for backwards-compat.",
      "tree": {
        "sha": "fc3a91b57fbe4e3e1306d5e3488c0da54a60ef7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc3a91b57fbe4e3e1306d5e3488c0da54a60ef7f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa3673064c5cc2009d4a75d0ab8a553e99861ccb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa3673064c5cc2009d4a75d0ab8a553e99861ccb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa3673064c5cc2009d4a75d0ab8a553e99861ccb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa3673064c5cc2009d4a75d0ab8a553e99861ccb/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ee028f131db0ea78bfde0961a3fca7b9e95b193",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ee028f131db0ea78bfde0961a3fca7b9e95b193",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ee028f131db0ea78bfde0961a3fca7b9e95b193"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 1,
      "deletions": 97
    },
    "files": [
      {
        "sha": "006c5f38aa963c3cde504e04b375499d5a709fe2",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa3673064c5cc2009d4a75d0ab8a553e99861ccb/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa3673064c5cc2009d4a75d0ab8a553e99861ccb/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=aa3673064c5cc2009d4a75d0ab8a553e99861ccb",
        "patch": "@@ -133,7 +133,7 @@ AC_ARG_ENABLE([lcov],\n \n AC_ARG_ENABLE([glibc-back-compat],\n   [AS_HELP_STRING([--enable-glibc-back-compat],\n-  [enable backwards compatibility with glibc and libstdc++])],\n+  [enable backwards compatibility with glibc])],\n   [use_glibc_compat=$enableval],\n   [use_glibc_compat=no])\n "
      },
      {
        "sha": "37dfd5dbaa117d49643e5d2fdde5f22a723af7e2",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa3673064c5cc2009d4a75d0ab8a553e99861ccb/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa3673064c5cc2009d4a75d0ab8a553e99861ccb/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=aa3673064c5cc2009d4a75d0ab8a553e99861ccb",
        "patch": "@@ -280,7 +280,6 @@ libbitcoin_util_a_SOURCES = \\\n \n if GLIBC_BACK_COMPAT\n libbitcoin_util_a_SOURCES += compat/glibc_compat.cpp\n-libbitcoin_util_a_SOURCES += compat/glibcxx_compat.cpp\n endif\n \n # cli: shared between bitcoin-cli and bitcoin-qt\n@@ -372,7 +371,6 @@ libbitcoinconsensus_la_SOURCES = \\\n \n if GLIBC_BACK_COMPAT\n   libbitcoinconsensus_la_SOURCES += compat/glibc_compat.cpp\n-  libbitcoinconsensus_la_SOURCES += compat/glibcxx_compat.cpp\n endif\n \n libbitcoinconsensus_la_LDFLAGS = -no-undefined $(RELDFLAGS)"
      },
      {
        "sha": "4f2771e57a086ca983cec57b42376c003d480da8",
        "filename": "src/compat/glibcxx_compat.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 94,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ee028f131db0ea78bfde0961a3fca7b9e95b193/src/compat/glibcxx_compat.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ee028f131db0ea78bfde0961a3fca7b9e95b193/src/compat/glibcxx_compat.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibcxx_compat.cpp?ref=3ee028f131db0ea78bfde0961a3fca7b9e95b193",
        "patch": "@@ -1,94 +0,0 @@\n-// Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <cstddef>\n-#include <istream>\n-#include <stdexcept>\n-#include <typeinfo>\n-\n-#ifndef _GLIBCXX_USE_NOEXCEPT\n-#define _GLIBCXX_USE_NOEXCEPT throw()\n-#endif\n-\n-namespace std\n-{\n-const char* bad_exception::what() const throw()\n-{\n-    return \"std::bad_exception\";\n-}\n-\n-const char* bad_cast::what() const throw()\n-{\n-    return \"std::bad_cast\";\n-}\n-\n-const char* bad_alloc::what() const throw()\n-{\n-    return \"std::bad_alloc\";\n-}\n-\n-namespace __detail\n-{\n-struct _List_node_base {\n-    void _M_hook(std::__detail::_List_node_base* const __position) throw() __attribute__((used))\n-    {\n-        _M_next = __position;\n-        _M_prev = __position->_M_prev;\n-        __position->_M_prev->_M_next = this;\n-        __position->_M_prev = this;\n-    }\n-\n-    void _M_unhook() __attribute__((used))\n-    {\n-        _List_node_base* const __next_node = _M_next;\n-        _List_node_base* const __prev_node = _M_prev;\n-        __prev_node->_M_next = __next_node;\n-        __next_node->_M_prev = __prev_node;\n-    }\n-\n-    _List_node_base* _M_next;\n-    _List_node_base* _M_prev;\n-};\n-} // namespace detail\n-\n-template ostream& ostream::_M_insert(bool);\n-template ostream& ostream::_M_insert(long);\n-template ostream& ostream::_M_insert(double);\n-template ostream& ostream::_M_insert(unsigned long);\n-template ostream& ostream::_M_insert(const void*);\n-template ostream& __ostream_insert(ostream&, const char*, streamsize);\n-template istream& istream::_M_extract(long&);\n-template istream& istream::_M_extract(unsigned short&);\n-\n-out_of_range::~out_of_range() _GLIBCXX_USE_NOEXCEPT {}\n-\n-length_error::~length_error() _GLIBCXX_USE_NOEXCEPT {}\n-\n-// Used with permission.\n-// See: https://github.com/madlib/madlib/commit/c3db418c0d34d6813608f2137fef1012ce03043d\n-\n-void ctype<char>::_M_widen_init() const\n-{\n-    char __tmp[sizeof(_M_widen)];\n-    for (unsigned __i = 0; __i < sizeof(_M_widen); ++__i)\n-        __tmp[__i] = __i;\n-    do_widen(__tmp, __tmp + sizeof(__tmp), _M_widen);\n-\n-    _M_widen_ok = 1;\n-    // Set _M_widen_ok to 2 if memcpy can't be used.\n-    for (unsigned __i = 0; __i < sizeof(_M_widen); ++__i)\n-        if (__tmp[__i] != _M_widen[__i]) {\n-            _M_widen_ok = 2;\n-            break;\n-        }\n-}\n-\n-void __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__));\n-void __throw_out_of_range_fmt(const char* err, ...)\n-{\n-    // Safe and over-simplified version. Ignore the format and print it as-is.\n-    __throw_out_of_range(err);\n-}\n-\n-} // namespace std"
      }
    ]
  },
  {
    "sha": "06715165f9215a954c0b5d0b15037aecff8b1d74",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNjcxNTE2NWY5MjE1YTk1NGMwYjVkMGIxNTAzN2FlY2ZmOGIxZDc0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-23T23:18:08Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-23T23:22:58Z"
      },
      "message": "build: change reduce exports/static libstdc++ options for gitian and travis\n\nFor Gitian releases:\n  - Windows builds remain unchanged. libstdc++ was already linked statically.\n  - OSX builds remain unchanged. libstdc++ is tied to the SDK and not worth\n    messing with.\n  - Linux builds now statically link libstdc++.\n\nFor Travis:\n  - Match the previous behavior by adding --enable-reduce-exports as\n  necessary.\n  - Use static libstdc++ for the full Linux build.",
      "tree": {
        "sha": "96cd6fbdc46d557d89fbb87396a77f9546abcbd4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96cd6fbdc46d557d89fbb87396a77f9546abcbd4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/06715165f9215a954c0b5d0b15037aecff8b1d74",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06715165f9215a954c0b5d0b15037aecff8b1d74",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/06715165f9215a954c0b5d0b15037aecff8b1d74",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06715165f9215a954c0b5d0b15037aecff8b1d74/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aa3673064c5cc2009d4a75d0ab8a553e99861ccb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa3673064c5cc2009d4a75d0ab8a553e99861ccb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa3673064c5cc2009d4a75d0ab8a553e99861ccb"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "e08e78dabf5e1e60c7ac39116e4d27b390fa4bd2",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06715165f9215a954c0b5d0b15037aecff8b1d74/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06715165f9215a954c0b5d0b15037aecff8b1d74/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=06715165f9215a954c0b5d0b15037aecff8b1d74",
        "patch": "@@ -25,19 +25,19 @@ matrix:\n   fast_finish: true\n   include:\n     - compiler: \": ARM\"\n-      env: HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n+      env: HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n     - compiler: \": bitcoind\"\n-      env: HOST=x86_64-unknown-linux-gnu PACKAGES=\"bc\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat CPPFLAGS=-DDEBUG_LOCKORDER\"\n+      env: HOST=x86_64-unknown-linux-gnu PACKAGES=\"bc\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CPPFLAGS=-DDEBUG_LOCKORDER\"\n     - compiler: \": No wallet\"\n-      env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n+      env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n     - compiler: \": 32-bit + dash\"\n-      env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\" USE_SHELL=\"/bin/dash\"\n+      env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\" USE_SHELL=\"/bin/dash\"\n     - compiler: \": Cross-Mac\"\n-      env: HOST=x86_64-apple-darwin11 PACKAGES=\"cmake libcap-dev libz-dev libbz2-dev\" OSX_SDK=10.9 GOAL=\"deploy\"\n+      env: HOST=x86_64-apple-darwin11 PACKAGES=\"cmake libcap-dev libz-dev libbz2-dev\" BITCOIN_CONFIG=\"--enable-reduce-exports\" OSX_SDK=10.9 GOAL=\"deploy\"\n     - compiler: \": Win64\"\n-      env: HOST=x86_64-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui\" MAKEJOBS=\"-j2\"\n+      env: HOST=x86_64-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n     - compiler: \": Win32\"\n-      env: HOST=i686-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui\" MAKEJOBS=\"-j2\"\n+      env: HOST=i686-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n install:\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES; fi"
      },
      {
        "sha": "10463c871ef4e92422bdeaabcc683a7dd94a6240",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06715165f9215a954c0b5d0b15037aecff8b1d74/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06715165f9215a954c0b5d0b15037aecff8b1d74/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=06715165f9215a954c0b5d0b15037aecff8b1d74",
        "patch": "@@ -23,7 +23,7 @@ files: []\n script: |\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"i686-pc-linux-gnu x86_64-unknown-linux-gnu\"\n-  CONFIGFLAGS=\"--enable-upnp-default --enable-glibc-back-compat\"\n+  CONFIGFLAGS=\"--enable-upnp-default --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\"\n   FAKETIME_HOST_PROGS=\"\"\n   FAKETIME_PROGS=\"date ar ranlib nm strip\"\n "
      },
      {
        "sha": "b401482c70d4b329c6579e0664e28b24191db433",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06715165f9215a954c0b5d0b15037aecff8b1d74/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06715165f9215a954c0b5d0b15037aecff8b1d74/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=06715165f9215a954c0b5d0b15037aecff8b1d74",
        "patch": "@@ -27,7 +27,7 @@ files:\n script: |\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"x86_64-apple-darwin11\"\n-  CONFIGFLAGS=\"--enable-upnp-default GENISOIMAGE=$WRAP_DIR/genisoimage\"\n+  CONFIGFLAGS=\"--enable-upnp-default --enable-reduce-exports GENISOIMAGE=$WRAP_DIR/genisoimage\"\n   FAKETIME_HOST_PROGS=\"\"\n   FAKETIME_PROGS=\"ar ranlib date dmg genisoimage\"\n "
      },
      {
        "sha": "2d72f7b6e5aafe7935a7289dfee1f6e103e16c10",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06715165f9215a954c0b5d0b15037aecff8b1d74/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06715165f9215a954c0b5d0b15037aecff8b1d74/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=06715165f9215a954c0b5d0b15037aecff8b1d74",
        "patch": "@@ -26,7 +26,7 @@ files: []\n script: |\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"x86_64-w64-mingw32 i686-w64-mingw32\"\n-  CONFIGFLAGS=\"--enable-upnp-default\"\n+  CONFIGFLAGS=\"--enable-upnp-default --enable-reduce-exports\"\n   FAKETIME_HOST_PROGS=\"g++ ar ranlib nm windres strip\"\n   FAKETIME_PROGS=\"date makensis zip\"\n "
      }
    ]
  },
  {
    "sha": "c95ac83e5115a2e9f1c29df6a3839d6788b4eafd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTVhYzgzZTUxMTVhMmU5ZjFjMjlkZjZhMzgzOWQ2Nzg4YjRlYWZk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-24T00:43:25Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-24T00:43:25Z"
      },
      "message": "gitian: fix x86_64 build with static libstdc++",
      "tree": {
        "sha": "c07f68c501f140bc2c87388399d69d8bded73633",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c07f68c501f140bc2c87388399d69d8bded73633"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c95ac83e5115a2e9f1c29df6a3839d6788b4eafd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c95ac83e5115a2e9f1c29df6a3839d6788b4eafd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c95ac83e5115a2e9f1c29df6a3839d6788b4eafd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c95ac83e5115a2e9f1c29df6a3839d6788b4eafd/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "06715165f9215a954c0b5d0b15037aecff8b1d74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06715165f9215a954c0b5d0b15037aecff8b1d74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/06715165f9215a954c0b5d0b15037aecff8b1d74"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dde4af34915c2ccf07f0dc184779416efe60f4de",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c95ac83e5115a2e9f1c29df6a3839d6788b4eafd/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c95ac83e5115a2e9f1c29df6a3839d6788b4eafd/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=c95ac83e5115a2e9f1c29df6a3839d6788b4eafd",
        "patch": "@@ -15,6 +15,7 @@ packages:\n - \"faketime\"\n - \"bsdmainutils\"\n - \"binutils-gold\"\n+- \"libstdc++6-4.6-pic\"\n reference_datetime: \"2013-06-01 00:00:00\"\n remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n@@ -69,6 +70,14 @@ script: |\n     make ${MAKEOPTS} -C ${BASEPREFIX} HOST=\"${i}\"\n   done\n \n+  # Ubuntu precise hack: Not an issue in later versions.\n+  # Precise's libstdc++.a is non-pic. There's an optional libstdc++6-4.6-pic\n+  #   package which provides libstdc++_pic.a, but the linker can't find it.\n+  # Symlink it to a path that will be included in our link-line so that the\n+  # linker picks it up before the default libstdc++.a.\n+  # This is only necessary for 64bit.\n+  ln -s /usr/lib/gcc/x86_64-linux-gnu/4.6/libstdc++_pic.a ${BASEPREFIX}/x86_64-unknown-linux-gnu/lib/libstdc++.a\n+\n   # Create the release tarball using (arbitrarily) the first host\n   ./autogen.sh\n   ./configure --prefix=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`"
      }
    ]
  },
  {
    "sha": "3448b132c4150509eec9bf585552d1994fd32090",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDQ4YjEzMmM0MTUwNTA5ZWVjOWJmNTg1NTUyZDE5OTRmZDMyMDkw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-24T01:18:54Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-24T01:18:54Z"
      },
      "message": "build: fix typo in configure help",
      "tree": {
        "sha": "018fd8fbc87ead622b6347ed60e7136d85636900",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/018fd8fbc87ead622b6347ed60e7136d85636900"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3448b132c4150509eec9bf585552d1994fd32090",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3448b132c4150509eec9bf585552d1994fd32090",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3448b132c4150509eec9bf585552d1994fd32090",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3448b132c4150509eec9bf585552d1994fd32090/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c95ac83e5115a2e9f1c29df6a3839d6788b4eafd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c95ac83e5115a2e9f1c29df6a3839d6788b4eafd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c95ac83e5115a2e9f1c29df6a3839d6788b4eafd"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "67a0cc28e51ee9430a736d69bfa7dd6a46194069",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3448b132c4150509eec9bf585552d1994fd32090/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3448b132c4150509eec9bf585552d1994fd32090/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=3448b132c4150509eec9bf585552d1994fd32090",
        "patch": "@@ -471,14 +471,14 @@ AC_LINK_IFELSE([AC_LANG_SOURCE([\n   [\n     AC_MSG_RESULT(no)\n     if test x$use_reduce_exports = xyes; then\n-      AC_MSG_ERROR([Cannot find a working visibility attribute. Use --disable-reduced-exports.])\n+      AC_MSG_ERROR([Cannot find a working visibility attribute. Use --disable-reduce-exports.])\n     fi\n   ]\n )\n \n if test x$use_reduce_exports = xyes; then\n   AX_CHECK_COMPILE_FLAG([-fvisibility=hidden],[RE_CXXFLAGS=\"-fvisibility=hidden\"],\n-  [AC_MSG_ERROR([Cannot set default symbol visibility. Use --disable-reduced-exports.])])\n+  [AC_MSG_ERROR([Cannot set default symbol visibility. Use --disable-reduce-exports.])])\n fi\n \n LEVELDB_CPPFLAGS=\n@@ -540,7 +540,7 @@ if test x$use_reduce_exports = xyes; then\n     ]])],[\n       AC_MSG_RESULT(yes)\n     ],[\n-    AC_MSG_ERROR([boost versions < 1.49 are known to be broken with reduced exports. Use --disable-reduced-exports.])\n+    AC_MSG_ERROR([boost versions < 1.49 are known to be broken with reduced exports. Use --disable-reduce-exports.])\n   ])\n   CPPFLAGS=\"$TEMP_CPPFLAGS\"\n fi"
      }
    ]
  },
  {
    "sha": "85da07a5a001a563488382435202b74a3e3e964a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NWRhMDdhNWEwMDFhNTYzNDg4MzgyNDM1MjAyYjc0YTNlM2U5NjRh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-24T12:27:25Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-24T12:35:13Z"
      },
      "message": "Better fingerprinting protection for non-main-chain getdatas.\n\nWith headers-first we can compare against the best header timestamp, rather\nthan using checkpoints which require code updates to maintain.",
      "tree": {
        "sha": "d5f6e29e2f5aa01ebb964cd29e052644cdf09112",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5f6e29e2f5aa01ebb964cd29e052644cdf09112"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85da07a5a001a563488382435202b74a3e3e964a",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85da07a5a001a563488382435202b74a3e3e964a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/85da07a5a001a563488382435202b74a3e3e964a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85da07a5a001a563488382435202b74a3e3e964a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 10,
      "deletions": 12
    },
    "files": [
      {
        "sha": "b6a61f7da1c14951d7851e0cff8a8a5d1139c270",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 12,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85da07a5a001a563488382435202b74a3e3e964a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85da07a5a001a563488382435202b74a3e3e964a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=85da07a5a001a563488382435202b74a3e3e964a",
        "patch": "@@ -3355,19 +3355,17 @@ void static ProcessGetData(CNode* pfrom)\n                 BlockMap::iterator mi = mapBlockIndex.find(inv.hash);\n                 if (mi != mapBlockIndex.end())\n                 {\n-                    // If the requested block is at a height below our last\n-                    // checkpoint, only serve it if it's in the checkpointed chain\n-                    int nHeight = mi->second->nHeight;\n-                    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n-                    if (pcheckpoint && nHeight < pcheckpoint->nHeight) {\n-                        if (!chainActive.Contains(mi->second))\n-                        {\n-                            LogPrintf(\"ProcessGetData(): ignoring request for old block that isn't in the main chain\\n\");\n-                        } else {\n-                            send = true;\n-                        }\n-                    } else {\n+                    if (chainActive.Contains(mi->second)) {\n                         send = true;\n+                    } else {\n+                        // To prevent fingerprinting attacks, only send blocks outside of the active\n+                        // chain if they are valid, and no more than a month older than the best header\n+                        // chain we know about.\n+                        send = mi->second->IsValid(BLOCK_VALID_SCRIPTS) && (pindexBestHeader != NULL) &&\n+                            (mi->second->GetBlockTime() > pindexBestHeader->GetBlockTime() - 30 * 24 * 60 * 60);\n+                        if (!send) {\n+                            LogPrintf(\"ProcessGetData(): ignoring request from peer=%i for old block that isn't in the main chain\\n\", pfrom->GetId());\n+                        }\n                     }\n                 }\n                 if (send)"
      }
    ]
  },
  {
    "sha": "32eaf8a3dedb849f81a4b8d32a800ef59ca261ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMmVhZjhhM2RlZGI4NDlmODFhNGI4ZDMyYTgwMGVmNTljYTI2MWFj",
    "commit": {
      "author": {
        "name": "21E14",
        "email": "21xe14@gmail.com",
        "date": "2015-02-25T02:03:53Z"
      },
      "committer": {
        "name": "21E14",
        "email": "21xe14@gmail.com",
        "date": "2015-02-25T23:37:06Z"
      },
      "message": "WIN32 Seed Cleanup: Move nLastPerfmon behind win32 ifdef.\nCode to avoid calling Perfmon too often is only needed when perfmon is actually going to get called.\nThis is not intended to make any functional difference in the addition of entropy to the random pool.",
      "tree": {
        "sha": "de5f7c057999f1b4d1c7785f848c2be2efae4a06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de5f7c057999f1b4d1c7785f848c2be2efae4a06"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32eaf8a3dedb849f81a4b8d32a800ef59ca261ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32eaf8a3dedb849f81a4b8d32a800ef59ca261ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32eaf8a3dedb849f81a4b8d32a800ef59ca261ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32eaf8a3dedb849f81a4b8d32a800ef59ca261ac/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0ba0de908d8ff3fe873b7d1bed573fe92e1eefe2",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32eaf8a3dedb849f81a4b8d32a800ef59ca261ac/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32eaf8a3dedb849f81a4b8d32a800ef59ca261ac/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=32eaf8a3dedb849f81a4b8d32a800ef59ca261ac",
        "patch": "@@ -47,15 +47,16 @@ void RandAddSeedPerfmon()\n {\n     RandAddSeed();\n \n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n     // This can take up to 2 seconds, so only do it every 10 minutes\n     static int64_t nLastPerfmon;\n     if (GetTime() < nLastPerfmon + 10 * 60)\n         return;\n     nLastPerfmon = GetTime();\n \n-#ifdef WIN32\n-    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n-    // Seed with the entire set of perfmon data\n     std::vector<unsigned char> vData(250000, 0);\n     long ret = 0;\n     unsigned long nSize = 0;"
      }
    ]
  },
  {
    "sha": "d23b0a271163d187eb362164d375148fdd752148",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjNiMGEyNzExNjNkMTg3ZWIzNjIxNjRkMzc1MTQ4ZmRkNzUyMTQ4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-25T19:01:02Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-25T23:41:59Z"
      },
      "message": "depends: always use static qt5 for linux",
      "tree": {
        "sha": "056677278d30b4cb119bacf53ffde22e35826904",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/056677278d30b4cb119bacf53ffde22e35826904"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d23b0a271163d187eb362164d375148fdd752148",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d23b0a271163d187eb362164d375148fdd752148",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d23b0a271163d187eb362164d375148fdd752148",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d23b0a271163d187eb362164d375148fdd752148/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3448b132c4150509eec9bf585552d1994fd32090",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3448b132c4150509eec9bf585552d1994fd32090",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3448b132c4150509eec9bf585552d1994fd32090"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 1,
      "deletions": 8
    },
    "files": [
      {
        "sha": "05ef33f2ee83326eeb264c25c8744c16f82f2d33",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d23b0a271163d187eb362164d375148fdd752148/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d23b0a271163d187eb362164d375148fdd752148/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=d23b0a271163d187eb362164d375148fdd752148",
        "patch": "@@ -6,7 +6,6 @@ SDK_PATH ?= $(BASEDIR)/SDKs\n NO_QT ?=\n NO_WALLET ?=\n NO_UPNP ?=\n-USE_LINUX_STATIC_QT5 ?=\n FALLBACK_DOWNLOAD_PATH ?= https://bitcoincore.org/depends-sources\n \n BUILD = $(shell ./config.guess)"
      },
      {
        "sha": "24e1231d8265f60f54af3ca2f9ece954b0c48452",
        "filename": "depends/README.usage",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d23b0a271163d187eb362164d375148fdd752148/depends/README.usage",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d23b0a271163d187eb362164d375148fdd752148/depends/README.usage",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.usage?ref=d23b0a271163d187eb362164d375148fdd752148",
        "patch": "@@ -23,7 +23,6 @@ NO_QT: Don't download/build/cache qt and its dependencies\n NO_WALLET: Don't download/build/cache libs needed to enable the wallet\n NO_UPNP: Don't download/build/cache packages needed for enabling upnp\n DEBUG: disable some optimizations and enable more runtime checking\n-USE_LINUX_STATIC_QT5: Build a static qt5 rather than shared qt4. Linux only.\n \n If some packages are not built, for example 'make NO_WALLET=1', the appropriate\n options will be passed to bitcoin's configure. In this case, --disable-wallet."
      },
      {
        "sha": "03908aba599ed82d375eb340f3837957dbcb5efe",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d23b0a271163d187eb362164d375148fdd752148/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d23b0a271163d187eb362164d375148fdd752148/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=d23b0a271163d187eb362164d375148fdd752148",
        "patch": "@@ -4,15 +4,10 @@ native_packages := native_ccache native_comparisontool\n qt_native_packages = native_protobuf\n qt_packages = qrencode protobuf\n \n-qt46_linux_packages = qt46 expat dbus libxcb xcb_proto libXau xproto freetype libX11 xextproto libXext xtrans libICE libSM\n-qt5_linux_packages= qt expat dbus libxcb xcb_proto libXau xproto freetype fontconfig libX11 xextproto libXext xtrans\n-\n+qt_linux_packages= qt expat dbus libxcb xcb_proto libXau xproto freetype fontconfig libX11 xextproto libXext xtrans\n qt_darwin_packages=qt\n qt_mingw32_packages=qt\n \n-qt_linux_$(USE_LINUX_STATIC_QT5):=$(qt5_linux_packages)\n-qt_linux_:=$(qt46_linux_packages)\n-qt_linux_packages:=$(qt_linux_$(USE_LINUX_STATIC_QT5))\n \n wallet_packages=bdb\n "
      }
    ]
  },
  {
    "sha": "eec37136fd0f6ab80772380d8f047d98743f31f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWMzNzEzNmZkMGY2YWI4MDc3MjM4MGQ4ZjA0N2Q5ODc0M2YzMWY1",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-28T00:24:31Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-25T23:44:49Z"
      },
      "message": "make CMessageHeader a dumb storage class\n\nIt shouldn't know or care about bitcoind's chain param selection",
      "tree": {
        "sha": "f2e22ac82464d1d37ec312c1b76ab98cb8a29525",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2e22ac82464d1d37ec312c1b76ab98cb8a29525"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eec37136fd0f6ab80772380d8f047d98743f31f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eec37136fd0f6ab80772380d8f047d98743f31f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eec37136fd0f6ab80772380d8f047d98743f31f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eec37136fd0f6ab80772380d8f047d98743f31f5/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 17,
      "deletions": 18
    },
    "files": [
      {
        "sha": "78b575d8f3769ded221e527b0f3f65fa60b6e5e3",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec37136fd0f6ab80772380d8f047d98743f31f5/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec37136fd0f6ab80772380d8f047d98743f31f5/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=eec37136fd0f6ab80772380d8f047d98743f31f5",
        "patch": "@@ -14,8 +14,6 @@\n \n #include <vector>\n \n-typedef unsigned char MessageStartChars[MESSAGE_START_SIZE];\n-\n struct CDNSSeedData {\n     std::string name, host;\n     CDNSSeedData(const std::string &strName, const std::string &strHost) : name(strName), host(strHost) {}\n@@ -42,7 +40,7 @@ class CChainParams\n     };\n \n     const uint256& HashGenesisBlock() const { return hashGenesisBlock; }\n-    const MessageStartChars& MessageStart() const { return pchMessageStart; }\n+    const CMessageHeader::MessageStartChars& MessageStart() const { return pchMessageStart; }\n     const std::vector<unsigned char>& AlertKey() const { return vAlertPubKey; }\n     int GetDefaultPort() const { return nDefaultPort; }\n     const arith_uint256& ProofOfWorkLimit() const { return bnProofOfWorkLimit; }\n@@ -83,7 +81,7 @@ class CChainParams\n     CChainParams() {}\n \n     uint256 hashGenesisBlock;\n-    MessageStartChars pchMessageStart;\n+    CMessageHeader::MessageStartChars pchMessageStart;\n     //! Raw pub key bytes for the broadcast alert signing key.\n     std::vector<unsigned char> vAlertPubKey;\n     int nDefaultPort;"
      },
      {
        "sha": "c9a2f34a4d454a7bbc691a1b7965cd5002efd41f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec37136fd0f6ab80772380d8f047d98743f31f5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec37136fd0f6ab80772380d8f047d98743f31f5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=eec37136fd0f6ab80772380d8f047d98743f31f5",
        "patch": "@@ -4307,7 +4307,7 @@ bool ProcessMessages(CNode* pfrom)\n \n         // Read header\n         CMessageHeader& hdr = msg.hdr;\n-        if (!hdr.IsValid())\n+        if (!hdr.IsValid(Params().MessageStart()))\n         {\n             LogPrintf(\"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", SanitizeString(hdr.GetCommand()), pfrom->id);\n             continue;"
      },
      {
        "sha": "36a5b6fb6b3856f2a840c39f48ef0d66277d006d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec37136fd0f6ab80772380d8f047d98743f31f5/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec37136fd0f6ab80772380d8f047d98743f31f5/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=eec37136fd0f6ab80772380d8f047d98743f31f5",
        "patch": "@@ -509,7 +509,7 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes)\n         // get current incomplete message, or create a new one\n         if (vRecvMsg.empty() ||\n             vRecvMsg.back().complete())\n-            vRecvMsg.push_back(CNetMessage(SER_NETWORK, nRecvVersion));\n+            vRecvMsg.push_back(CNetMessage(Params().MessageStart(), SER_NETWORK, nRecvVersion));\n \n         CNetMessage& msg = vRecvMsg.back();\n \n@@ -1970,7 +1970,7 @@ void CNode::BeginMessage(const char* pszCommand) EXCLUSIVE_LOCK_FUNCTION(cs_vSen\n {\n     ENTER_CRITICAL_SECTION(cs_vSend);\n     assert(ssSend.size() == 0);\n-    ssSend << CMessageHeader(pszCommand, 0);\n+    ssSend << CMessageHeader(Params().MessageStart(), pszCommand, 0);\n     LogPrint(\"net\", \"sending: %s \", SanitizeString(pszCommand));\n }\n "
      },
      {
        "sha": "0a9fbb38c0cd5cc3fb931ebfaf1bdf792c2cebfb",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec37136fd0f6ab80772380d8f047d98743f31f5/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec37136fd0f6ab80772380d8f047d98743f31f5/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=eec37136fd0f6ab80772380d8f047d98743f31f5",
        "patch": "@@ -183,7 +183,7 @@ class CNetMessage {\n \n     int64_t nTime;                  // time (in microseconds) of message receipt.\n \n-    CNetMessage(int nTypeIn, int nVersionIn) : hdrbuf(nTypeIn, nVersionIn), vRecv(nTypeIn, nVersionIn) {\n+    CNetMessage(const CMessageHeader::MessageStartChars& pchMessageStartIn, int nTypeIn, int nVersionIn) : hdrbuf(nTypeIn, nVersionIn), hdr(pchMessageStartIn), vRecv(nTypeIn, nVersionIn) {\n         hdrbuf.resize(24);\n         in_data = false;\n         nHdrPos = 0;"
      },
      {
        "sha": "568580a595a89d8e9f3c49e3502d8b7eaf38f412",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec37136fd0f6ab80772380d8f047d98743f31f5/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec37136fd0f6ab80772380d8f047d98743f31f5/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=eec37136fd0f6ab80772380d8f047d98743f31f5",
        "patch": "@@ -5,7 +5,6 @@\n \n #include \"protocol.h\"\n \n-#include \"chainparams.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n@@ -21,17 +20,17 @@ static const char* ppszTypeName[] =\n     \"filtered block\"\n };\n \n-CMessageHeader::CMessageHeader()\n+CMessageHeader::CMessageHeader(const MessageStartChars& pchMessageStartIn)\n {\n-    memcpy(pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE);\n+    memcpy(pchMessageStart, pchMessageStartIn, MESSAGE_START_SIZE);\n     memset(pchCommand, 0, sizeof(pchCommand));\n     nMessageSize = -1;\n     nChecksum = 0;\n }\n \n-CMessageHeader::CMessageHeader(const char* pszCommand, unsigned int nMessageSizeIn)\n+CMessageHeader::CMessageHeader(const MessageStartChars& pchMessageStartIn, const char* pszCommand, unsigned int nMessageSizeIn)\n {\n-    memcpy(pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE);\n+    memcpy(pchMessageStart, pchMessageStartIn, MESSAGE_START_SIZE);\n     memset(pchCommand, 0, sizeof(pchCommand));\n     strncpy(pchCommand, pszCommand, COMMAND_SIZE);\n     nMessageSize = nMessageSizeIn;\n@@ -43,10 +42,10 @@ std::string CMessageHeader::GetCommand() const\n     return std::string(pchCommand, pchCommand + strnlen(pchCommand, COMMAND_SIZE));\n }\n \n-bool CMessageHeader::IsValid() const\n+bool CMessageHeader::IsValid(const MessageStartChars& pchMessageStartIn) const\n {\n     // Check start string\n-    if (memcmp(pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE) != 0)\n+    if (memcmp(pchMessageStart, pchMessageStartIn, MESSAGE_START_SIZE) != 0)\n         return false;\n \n     // Check the command string for errors"
      },
      {
        "sha": "e838c0d363874dd1dcaf9855063d9e970f46f69d",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec37136fd0f6ab80772380d8f047d98743f31f5/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec37136fd0f6ab80772380d8f047d98743f31f5/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=eec37136fd0f6ab80772380d8f047d98743f31f5",
        "patch": "@@ -29,11 +29,13 @@\n class CMessageHeader\n {\n public:\n-    CMessageHeader();\n-    CMessageHeader(const char* pszCommand, unsigned int nMessageSizeIn);\n+    typedef unsigned char MessageStartChars[MESSAGE_START_SIZE];\n+\n+    CMessageHeader(const MessageStartChars& pchMessageStartIn);\n+    CMessageHeader(const MessageStartChars& pchMessageStartIn, const char* pszCommand, unsigned int nMessageSizeIn);\n \n     std::string GetCommand() const;\n-    bool IsValid() const;\n+    bool IsValid(const MessageStartChars& messageStart) const;\n \n     ADD_SERIALIZE_METHODS;\n "
      }
    ]
  },
  {
    "sha": "25d713c941d1a73597c90e4feed317660cb9af6d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNWQ3MTNjOTQxZDFhNzM1OTdjOTBlNGZlZWQzMTc2NjBjYjlhZjZk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-26T08:42:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-26T08:43:19Z"
      },
      "message": "Merge pull request #5824\n\n32eaf8a WIN32 Seed Cleanup: Move nLastPerfmon behind win32 ifdef. Code to avoid calling Perfmon too often is only needed when perfmon is actually going to get called. This is not intended to make any functional difference in the addition of entropy to the random pool. (21E14)",
      "tree": {
        "sha": "de5f7c057999f1b4d1c7785f848c2be2efae4a06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de5f7c057999f1b4d1c7785f848c2be2efae4a06"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25d713c941d1a73597c90e4feed317660cb9af6d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU7tynAAoJEHSBCwEjRsmmX88H/R1Rc2/u/MfSeX1cLDKmnAIy\nobyOmDUD7juYfv9wZNNysFFI6d58BVvz6zu7h9ee8dmDJNAR8hlSyVolKW8AYQVQ\nVth6ah0usg45lY8D6pPb2WIX2RLNTchivvTea+U8q+GPUtPjGJZRwEa2MmC/leWu\n2K1i98THq8dpcMHvXZ/rjn31VvtW+DyzJq3qAJ772tmTw0HkUMsUtsx4NsVhsKlU\njLQwuubp05AMjmh4a4rF/YqH73XCrLuyVBFHtXBpKZlVb5SSEkgTBmbEWBWcZZGa\n59Du4uGOrpSTjLgJ2EIYQImeUwhC/6EYqPSVwb4SMa1bZ0LQGFqIDgEV/fvct1k=\n=hYl8\n-----END PGP SIGNATURE-----",
        "payload": "tree de5f7c057999f1b4d1c7785f848c2be2efae4a06\nparent 8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe\nparent 32eaf8a3dedb849f81a4b8d32a800ef59ca261ac\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1424940144 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1424940199 +0100\n\nMerge pull request #5824\n\n32eaf8a WIN32 Seed Cleanup: Move nLastPerfmon behind win32 ifdef. Code to avoid calling Perfmon too often is only needed when perfmon is actually going to get called. This is not intended to make any functional difference in the addition of entropy to the random pool. (21E14)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25d713c941d1a73597c90e4feed317660cb9af6d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/25d713c941d1a73597c90e4feed317660cb9af6d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25d713c941d1a73597c90e4feed317660cb9af6d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe"
      },
      {
        "sha": "32eaf8a3dedb849f81a4b8d32a800ef59ca261ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32eaf8a3dedb849f81a4b8d32a800ef59ca261ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32eaf8a3dedb849f81a4b8d32a800ef59ca261ac"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0ba0de908d8ff3fe873b7d1bed573fe92e1eefe2",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25d713c941d1a73597c90e4feed317660cb9af6d/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25d713c941d1a73597c90e4feed317660cb9af6d/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=25d713c941d1a73597c90e4feed317660cb9af6d",
        "patch": "@@ -47,15 +47,16 @@ void RandAddSeedPerfmon()\n {\n     RandAddSeed();\n \n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n     // This can take up to 2 seconds, so only do it every 10 minutes\n     static int64_t nLastPerfmon;\n     if (GetTime() < nLastPerfmon + 10 * 60)\n         return;\n     nLastPerfmon = GetTime();\n \n-#ifdef WIN32\n-    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n-    // Seed with the entire set of perfmon data\n     std::vector<unsigned char> vData(250000, 0);\n     long ret = 0;\n     unsigned long nSize = 0;"
      }
    ]
  },
  {
    "sha": "6f1274c8c9cf3e9361aa149f6d271caf3e016991",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjEyNzRjOGM5Y2YzZTkzNjFhYTE0OWY2ZDI3MWNhZjNlMDE2OTkx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-26T09:16:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-26T09:23:42Z"
      },
      "message": "qt: Don't save geometry for options and about/help window\n\nThese dialogs will be something that people occasionally open, not keep\nopen during their session, so just popping it up in a sensible place\nis good enough. Remembering only creates potential issues, like spawning\nit outside the current screen area.\n\nOn Ubuntu this causes the dialogs to be positioned in the\nmiddle of the main dialog, so I didn't add code for that. YMMV.\n\nInspired by github pull #5777 by @L-Cranston-Shadow",
      "tree": {
        "sha": "d5d4274969b8997e31de1d6046e97decceb4b221",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5d4274969b8997e31de1d6046e97decceb4b221"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f1274c8c9cf3e9361aa149f6d271caf3e016991",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU7uaSAAoJEHSBCwEjRsmmYGcH/ishqSbBeWbTtzjYv5Zs7ekK\ngRgE28rDiCtxiJPFmyn9QkyoBBt6zU2cDHx2OSk+bpn79U8w8Azr64dM8aNZHVFM\nMmXyUlQf8p1xegsHq4oSFk8P+vYtfZOn8P0HRUN3EH7vjtn+4VIAD0IMzI5bF0R+\nCssdFNUvRhk3yD5Gq4OB/iepJNXL2vEAG0yA0dGfsQNFqrnfcO7bpngtL4/5tHSo\nY2/v2JmpxVhe+/98m79zN0oUg72FC6HOjmJIx+B3euE7Tm9+4pR5TSKVHQc8+X7X\nOe59myM7lnW1YeahekZWxNCN3NCVBcP7ZR4ag8VqM/8m6EY+9D9KMrswU8HuvkA=\n=pBEp\n-----END PGP SIGNATURE-----",
        "payload": "tree d5d4274969b8997e31de1d6046e97decceb4b221\nparent 25d713c941d1a73597c90e4feed317660cb9af6d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1424942208 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1424942622 +0100\n\nqt: Don't save geometry for options and about/help window\n\nThese dialogs will be something that people occasionally open, not keep\nopen during their session, so just popping it up in a sensible place\nis good enough. Remembering only creates potential issues, like spawning\nit outside the current screen area.\n\nOn Ubuntu this causes the dialogs to be positioned in the\nmiddle of the main dialog, so I didn't add code for that. YMMV.\n\nInspired by github pull #5777 by @L-Cranston-Shadow\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f1274c8c9cf3e9361aa149f6d271caf3e016991",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f1274c8c9cf3e9361aa149f6d271caf3e016991",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f1274c8c9cf3e9361aa149f6d271caf3e016991/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25d713c941d1a73597c90e4feed317660cb9af6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25d713c941d1a73597c90e4feed317660cb9af6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25d713c941d1a73597c90e4feed317660cb9af6d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 0,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a342b4bfea40f03012fbe9e0afc396328ce28b2d",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f1274c8c9cf3e9361aa149f6d271caf3e016991/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f1274c8c9cf3e9361aa149f6d271caf3e016991/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=6f1274c8c9cf3e9361aa149f6d271caf3e016991",
        "patch": "@@ -38,7 +38,6 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     fProxyIpValid(true)\n {\n     ui->setupUi(this);\n-    GUIUtil::restoreWindowGeometry(\"nOptionsDialogWindow\", this->size(), this);\n \n     /* Main elements init */\n     ui->databaseCache->setMinimum(nMinDbCache);\n@@ -117,7 +116,6 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n \n OptionsDialog::~OptionsDialog()\n {\n-    GUIUtil::saveWindowGeometry(\"nOptionsDialogWindow\", this);\n     delete ui;\n }\n "
      },
      {
        "sha": "4e7b70efe6bbff7d5d9d97bde913bc1b0a6ffd57",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f1274c8c9cf3e9361aa149f6d271caf3e016991/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f1274c8c9cf3e9361aa149f6d271caf3e016991/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=6f1274c8c9cf3e9361aa149f6d271caf3e016991",
        "patch": "@@ -29,7 +29,6 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n     ui(new Ui::HelpMessageDialog)\n {\n     ui->setupUi(this);\n-    GUIUtil::restoreWindowGeometry(\"nHelpMessageDialogWindow\", this->size(), this);\n \n     QString version = tr(\"Bitcoin Core\") + \" \" + tr(\"version\") + \" \" + QString::fromStdString(FormatFullVersion());\n     /* On x86 add a bit specifier to the version so that users can distinguish between\n@@ -143,7 +142,6 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n \n HelpMessageDialog::~HelpMessageDialog()\n {\n-    GUIUtil::saveWindowGeometry(\"nHelpMessageDialogWindow\", this);\n     delete ui;\n }\n "
      }
    ]
  },
  {
    "sha": "96c19a3a8e08047f6639de91b1ea871bc142a46a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NmMxOWEzYThlMDgwNDdmNjYzOWRlOTFiMWVhODcxYmMxNDJhNDZh",
    "commit": {
      "author": {
        "name": "Ciemon",
        "email": "ciemon@gmail.com",
        "date": "2015-02-20T17:33:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-26T10:07:41Z"
      },
      "message": "Add bitcoin-cli man page",
      "tree": {
        "sha": "07c9a604cb96736fb33ec8e18c76c255a220977f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07c9a604cb96736fb33ec8e18c76c255a220977f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96c19a3a8e08047f6639de91b1ea871bc142a46a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96c19a3a8e08047f6639de91b1ea871bc142a46a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/96c19a3a8e08047f6639de91b1ea871bc142a46a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96c19a3a8e08047f6639de91b1ea871bc142a46a/comments",
    "author": {
      "login": "Ciemon",
      "id": 570513,
      "node_id": "MDQ6VXNlcjU3MDUxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/570513?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Ciemon",
      "html_url": "https://github.com/Ciemon",
      "followers_url": "https://api.github.com/users/Ciemon/followers",
      "following_url": "https://api.github.com/users/Ciemon/following{/other_user}",
      "gists_url": "https://api.github.com/users/Ciemon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Ciemon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Ciemon/subscriptions",
      "organizations_url": "https://api.github.com/users/Ciemon/orgs",
      "repos_url": "https://api.github.com/users/Ciemon/repos",
      "events_url": "https://api.github.com/users/Ciemon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Ciemon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25d713c941d1a73597c90e4feed317660cb9af6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25d713c941d1a73597c90e4feed317660cb9af6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25d713c941d1a73597c90e4feed317660cb9af6d"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 49,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6d3e683855018ec721d97853b0d5c9b90edd5c35",
        "filename": "contrib/debian/bitcoind.manpages",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96c19a3a8e08047f6639de91b1ea871bc142a46a/contrib/debian/bitcoind.manpages",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96c19a3a8e08047f6639de91b1ea871bc142a46a/contrib/debian/bitcoind.manpages",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/bitcoind.manpages?ref=96c19a3a8e08047f6639de91b1ea871bc142a46a",
        "patch": "@@ -1,2 +1,3 @@\n debian/manpages/bitcoind.1\n debian/manpages/bitcoin.conf.5\n+debian/manpages/bitcoin-cli.1"
      },
      {
        "sha": "f953ae9db7a3b4818c71e176dc4edbebada338f9",
        "filename": "contrib/debian/manpages/bitcoin-cli.1",
        "status": "added",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96c19a3a8e08047f6639de91b1ea871bc142a46a/contrib/debian/manpages/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96c19a3a8e08047f6639de91b1ea871bc142a46a/contrib/debian/manpages/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/manpages/bitcoin-cli.1?ref=96c19a3a8e08047f6639de91b1ea871bc142a46a",
        "patch": "@@ -0,0 +1,48 @@\n+.TH BITCOIN-CLI \"1\" \"February 2015\" \"bitcoin-cli 0.10\" \n+.SH NAME\n+bitcoin-cli \\- a remote procedure call client for Bitcoin Core. \n+.SH SYNOPSIS\n+bitcoin-cli [options] <command> [params] \\- Send command to Bitcoin Core. \n+.TP\n+bitcoin-cli [options] help \\- Asks Bitcoin Core for a list of supported commands.\n+.SH DESCRIPTION\n+This manual page documents the bitcoin-cli program. bitcoin-cli is an RPC client used to send commands to Bitcoin Core.\n+\n+.SH OPTIONS\n+.TP\n+\\fB\\-?\\fR\n+Show the help message.\n+.TP\n+\\fB\\-conf=\\fR<file>\n+Specify configuration file (default: bitcoin.conf).\n+.TP\n+\\fB\\-datadir=\\fR<dir>\n+Specify data directory.\n+.TP\n+\\fB\\-testnet\\fR\n+Connect to a Bitcoin Core instance running in testnet mode.\n+.TP\n+\\fB\\-regtest\\fR\n+Connect to a Bitcoin Core instance running in regtest mode (see documentation for -regtest on bitcoind).\n+.TP\n+\\fB\\-rpcuser=\\fR<user>\n+Username for JSON\\-RPC connections.\n+.TP\n+\\fB\\-rpcpassword=\\fR<pw>\n+Password for JSON\\-RPC connections.\n+.TP\n+\\fB\\-rpcport=\\fR<port>\n+Listen for JSON\\-RPC connections on <port> (default: 8332 or testnet: 18332).\n+.TP\n+\\fB\\-rpcconnect=\\fR<ip>\n+Send commands to node running on <ip> (default: 127.0.0.1).\n+.TP\n+\\fB\\-rpcssl\\fR=\\fI1\\fR\n+Use OpenSSL (https) for JSON\\-RPC connections (see the Bitcoin Wiki for SSL setup instructions).\n+\n+.SH \"SEE ALSO\"\n+\\fBbitcoind\\fP, \\fBbitcoin.conf\\fP\n+.SH AUTHOR\n+This manual page was written by Ciemon Dunville <ciemon@gmail.com>. Permission is granted to copy, distribute and/or modify this document under the terms of the MIT License.\n+\n+The complete text of the MIT License can be found on the web at \\fIhttp://opensource.org/licenses/MIT\\fP."
      }
    ]
  },
  {
    "sha": "46bfbe71483f4f7cb677d3206969822bdcc58256",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmJmYmU3MTQ4M2Y0ZjdjYjY3N2QzMjA2OTY5ODIyYmRjYzU4MjU2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-26T10:08:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-26T10:08:52Z"
      },
      "message": "Merge #5809: Add bitcoin-cli man page\n\n96c19a3 Add bitcoin-cli man page (Ciemon)",
      "tree": {
        "sha": "07c9a604cb96736fb33ec8e18c76c255a220977f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07c9a604cb96736fb33ec8e18c76c255a220977f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46bfbe71483f4f7cb677d3206969822bdcc58256",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU7vC0AAoJEHSBCwEjRsmmQFcH/iK1X6fKjxklhqnun3Prmhvy\nYUND9bql/FmTnsvJ6YpRn/9G2dvEHwvC2qx/YVmxhv9ze5NSBk9gSL9j3w8zA1dP\nlfU71gL8+6nz9M/Iha6JDJgvIy+r9yPbD4vCzyHXdCps+oB+N8vvUGcmZaavOsxd\nv9DnbWQG9ike73hx1vCuARk2C+e7orGJ1X9MwFtGqdGO7xBhqFGV2yi8a7MVDfzY\nFWM4i+cs/w/pfM4C/RT0ZCH9UfCR6B0BZWjq1W8QwIOg2mS/LwQNGYGH+vS3J+MF\nm+bSMheDX9WBv6wkJ8qeHTqLwZej6FkNWjkcMLg42/YqdOKSxVyqmsdOj5ChHw8=\n=YBg9\n-----END PGP SIGNATURE-----",
        "payload": "tree 07c9a604cb96736fb33ec8e18c76c255a220977f\nparent 25d713c941d1a73597c90e4feed317660cb9af6d\nparent 96c19a3a8e08047f6639de91b1ea871bc142a46a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1424945331 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1424945332 +0100\n\nMerge #5809: Add bitcoin-cli man page\n\n96c19a3 Add bitcoin-cli man page (Ciemon)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46bfbe71483f4f7cb677d3206969822bdcc58256",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46bfbe71483f4f7cb677d3206969822bdcc58256",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46bfbe71483f4f7cb677d3206969822bdcc58256/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25d713c941d1a73597c90e4feed317660cb9af6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25d713c941d1a73597c90e4feed317660cb9af6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25d713c941d1a73597c90e4feed317660cb9af6d"
      },
      {
        "sha": "96c19a3a8e08047f6639de91b1ea871bc142a46a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96c19a3a8e08047f6639de91b1ea871bc142a46a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96c19a3a8e08047f6639de91b1ea871bc142a46a"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 49,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6d3e683855018ec721d97853b0d5c9b90edd5c35",
        "filename": "contrib/debian/bitcoind.manpages",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46bfbe71483f4f7cb677d3206969822bdcc58256/contrib/debian/bitcoind.manpages",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46bfbe71483f4f7cb677d3206969822bdcc58256/contrib/debian/bitcoind.manpages",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/bitcoind.manpages?ref=46bfbe71483f4f7cb677d3206969822bdcc58256",
        "patch": "@@ -1,2 +1,3 @@\n debian/manpages/bitcoind.1\n debian/manpages/bitcoin.conf.5\n+debian/manpages/bitcoin-cli.1"
      },
      {
        "sha": "f953ae9db7a3b4818c71e176dc4edbebada338f9",
        "filename": "contrib/debian/manpages/bitcoin-cli.1",
        "status": "added",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46bfbe71483f4f7cb677d3206969822bdcc58256/contrib/debian/manpages/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46bfbe71483f4f7cb677d3206969822bdcc58256/contrib/debian/manpages/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/manpages/bitcoin-cli.1?ref=46bfbe71483f4f7cb677d3206969822bdcc58256",
        "patch": "@@ -0,0 +1,48 @@\n+.TH BITCOIN-CLI \"1\" \"February 2015\" \"bitcoin-cli 0.10\" \n+.SH NAME\n+bitcoin-cli \\- a remote procedure call client for Bitcoin Core. \n+.SH SYNOPSIS\n+bitcoin-cli [options] <command> [params] \\- Send command to Bitcoin Core. \n+.TP\n+bitcoin-cli [options] help \\- Asks Bitcoin Core for a list of supported commands.\n+.SH DESCRIPTION\n+This manual page documents the bitcoin-cli program. bitcoin-cli is an RPC client used to send commands to Bitcoin Core.\n+\n+.SH OPTIONS\n+.TP\n+\\fB\\-?\\fR\n+Show the help message.\n+.TP\n+\\fB\\-conf=\\fR<file>\n+Specify configuration file (default: bitcoin.conf).\n+.TP\n+\\fB\\-datadir=\\fR<dir>\n+Specify data directory.\n+.TP\n+\\fB\\-testnet\\fR\n+Connect to a Bitcoin Core instance running in testnet mode.\n+.TP\n+\\fB\\-regtest\\fR\n+Connect to a Bitcoin Core instance running in regtest mode (see documentation for -regtest on bitcoind).\n+.TP\n+\\fB\\-rpcuser=\\fR<user>\n+Username for JSON\\-RPC connections.\n+.TP\n+\\fB\\-rpcpassword=\\fR<pw>\n+Password for JSON\\-RPC connections.\n+.TP\n+\\fB\\-rpcport=\\fR<port>\n+Listen for JSON\\-RPC connections on <port> (default: 8332 or testnet: 18332).\n+.TP\n+\\fB\\-rpcconnect=\\fR<ip>\n+Send commands to node running on <ip> (default: 127.0.0.1).\n+.TP\n+\\fB\\-rpcssl\\fR=\\fI1\\fR\n+Use OpenSSL (https) for JSON\\-RPC connections (see the Bitcoin Wiki for SSL setup instructions).\n+\n+.SH \"SEE ALSO\"\n+\\fBbitcoind\\fP, \\fBbitcoin.conf\\fP\n+.SH AUTHOR\n+This manual page was written by Ciemon Dunville <ciemon@gmail.com>. Permission is granted to copy, distribute and/or modify this document under the terms of the MIT License.\n+\n+The complete text of the MIT License can be found on the web at \\fIhttp://opensource.org/licenses/MIT\\fP."
      }
    ]
  },
  {
    "sha": "482783b341a078c1604207941f01100839e8c9e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODI3ODNiMzQxYTA3OGMxNjA0MjA3OTQxZjAxMTAwODM5ZThjOWU2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-26T10:17:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-26T10:26:32Z"
      },
      "message": "Merge pull request #5801\n\nde5403f [GUI] Move fee dialog minimise button away from \"Transaction Fee\" (Michael Ford)",
      "tree": {
        "sha": "d4e263fe5d021edc4cd14b57793cf05ee71f1479",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4e263fe5d021edc4cd14b57793cf05ee71f1479"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/482783b341a078c1604207941f01100839e8c9e6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU7vTYAAoJEHSBCwEjRsmmGv4H/1EuGmNVLsMT40v/b0BbkFB2\nAtGHF4pjPH9eJYZqHFYq1HEE4mYXBrwouCzxnUH9vKK1R3Ops7JPcfpKQBarvrGE\nbtNnXWNh5vWCFOMeDekj/9zY/qlzuWgBH21rNjFB8mvucm7RqvzEtT+2RThigG0X\n12zpul8SpFAHOeQPA7wEMv1dFc99+DfoZMR+xVOw90zY12jy9ffJuxK6hQGh1rDl\n1vDts0/wJp74/zBiRAB2jk3KoxU6xJjgeKgW0PQcUjgL0d74w4oUc5MwoksH2htD\nkDLuU9LOMiJLO+9lKQQshcRTr+QqNNSZBqes5Zj/o/NX4x/KpzXzlC88Ep+JD3c=\n=jJci\n-----END PGP SIGNATURE-----",
        "payload": "tree d4e263fe5d021edc4cd14b57793cf05ee71f1479\nparent 46bfbe71483f4f7cb677d3206969822bdcc58256\nparent de5403f87874c5c54c5a8358cbf38140bee87a9e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1424945828 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1424946392 +0100\n\nMerge pull request #5801\n\nde5403f [GUI] Move fee dialog minimise button away from \"Transaction Fee\" (Michael Ford)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/482783b341a078c1604207941f01100839e8c9e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/482783b341a078c1604207941f01100839e8c9e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/482783b341a078c1604207941f01100839e8c9e6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46bfbe71483f4f7cb677d3206969822bdcc58256",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46bfbe71483f4f7cb677d3206969822bdcc58256",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46bfbe71483f4f7cb677d3206969822bdcc58256"
      },
      {
        "sha": "de5403f87874c5c54c5a8358cbf38140bee87a9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de5403f87874c5c54c5a8358cbf38140bee87a9e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de5403f87874c5c54c5a8358cbf38140bee87a9e"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "b1ed7a27b5c8882be87077c33ae19383347ca76a",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/482783b341a078c1604207941f01100839e8c9e6/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/482783b341a078c1604207941f01100839e8c9e6/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=482783b341a078c1604207941f01100839e8c9e6",
        "patch": "@@ -771,16 +771,6 @@\n                 </property>\n                </widget>\n               </item>\n-              <item>\n-               <widget class=\"QPushButton\" name=\"buttonMinimizeFee\">\n-                <property name=\"toolTip\">\n-                 <string>collapse fee-settings</string>\n-                </property>\n-                <property name=\"text\">\n-                 <string>Minimize</string>\n-                </property>\n-               </widget>\n-              </item>\n              </layout>\n             </item>\n             <item>\n@@ -811,6 +801,16 @@\n             </property>\n            </spacer>\n           </item>\n+          <item>\n+           <widget class=\"QPushButton\" name=\"buttonMinimizeFee\">\n+            <property name=\"toolTip\">\n+             <string>collapse fee-settings</string>\n+            </property>\n+            <property name=\"text\">\n+             <string>Minimize</string>\n+            </property>\n+           </widget>\n+          </item>\n          </layout>\n         </item>\n         <item>"
      }
    ]
  },
  {
    "sha": "9abbeeabd745b2817f69166b73fa3de16f15c0e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YWJiZWVhYmQ3NDViMjgxN2Y2OTE2NmI3M2ZhM2RlMTZmMTVjMGUy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-26T13:30:59Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-26T13:30:59Z"
      },
      "message": "Remove obsolete pubsub method definitions",
      "tree": {
        "sha": "4a1b879b0d0688e25608a0da726594e5a9e92d2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a1b879b0d0688e25608a0da726594e5a9e92d2b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9abbeeabd745b2817f69166b73fa3de16f15c0e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9abbeeabd745b2817f69166b73fa3de16f15c0e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9abbeeabd745b2817f69166b73fa3de16f15c0e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9abbeeabd745b2817f69166b73fa3de16f15c0e2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "482783b341a078c1604207941f01100839e8c9e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/482783b341a078c1604207941f01100839e8c9e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/482783b341a078c1604207941f01100839e8c9e6"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 0,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d2b2d88ddbef79667c2c8424c78ae95b10553fea",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9abbeeabd745b2817f69166b73fa3de16f15c0e2/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9abbeeabd745b2817f69166b73fa3de16f15c0e2/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=9abbeeabd745b2817f69166b73fa3de16f15c0e2",
        "patch": "@@ -570,9 +570,6 @@ class CNode\n         }\n     }\n \n-    bool IsSubscribed(unsigned int nChannel);\n-    void Subscribe(unsigned int nChannel, unsigned int nHops=0);\n-    void CancelSubscribe(unsigned int nChannel);\n     void CloseSocketDisconnect();\n \n     // Denial-of-service detection/prevention"
      }
    ]
  },
  {
    "sha": "59310f1c02673c3ee068cd82f8654bed9b757889",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTMxMGYxYzAyNjczYzNlZTA2OGNkODJmODY1NGJlZDliNzU3ODg5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-26T16:07:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-26T16:13:13Z"
      },
      "message": "Merge pull request #5820\n\n85da07a Better fingerprinting protection for non-main-chain getdatas. (Pieter Wuille)",
      "tree": {
        "sha": "8dd58d6488d74ea27b93c418464d455063e13530",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8dd58d6488d74ea27b93c418464d455063e13530"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59310f1c02673c3ee068cd82f8654bed9b757889",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU70YZAAoJEHSBCwEjRsmmf0wIAKdiNw1rZL53ErZ6WU5uU4vN\nZbizRHuHif8xFgn/WDesvoC7BiDnarEPV+zVd43I7TH6OfErTOqI5MpS0wPaHo9d\ndWW1fbk0BQEelIJ7P3diqjHQvMhLuLg3lAgsgEBDKK+f7DgRmvSz4ORJn2MCzczN\nwGftUxUCLmYEET9bFqaT2QVtSTmvWc1HjGhCqYjk24VO91o1TtHAwlmYkYJpcL30\nfq0FfoM5yIOaEkZxkE5N0PJqXnQ7vLnEq/GM3jKgiVELGrnYkhXP/lpSYUFRK1+V\nqFvo0XlHbpB7Zk5sMTOqxLowbkp4cVz1h1ZoXA5mIeikOwS2B2KnaLz+FFdkQy4=\n=p0RD\n-----END PGP SIGNATURE-----",
        "payload": "tree 8dd58d6488d74ea27b93c418464d455063e13530\nparent 482783b341a078c1604207941f01100839e8c9e6\nparent 85da07a5a001a563488382435202b74a3e3e964a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1424966867 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1424967193 +0100\n\nMerge pull request #5820\n\n85da07a Better fingerprinting protection for non-main-chain getdatas. (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59310f1c02673c3ee068cd82f8654bed9b757889",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/59310f1c02673c3ee068cd82f8654bed9b757889",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59310f1c02673c3ee068cd82f8654bed9b757889/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "482783b341a078c1604207941f01100839e8c9e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/482783b341a078c1604207941f01100839e8c9e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/482783b341a078c1604207941f01100839e8c9e6"
      },
      {
        "sha": "85da07a5a001a563488382435202b74a3e3e964a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85da07a5a001a563488382435202b74a3e3e964a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/85da07a5a001a563488382435202b74a3e3e964a"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 10,
      "deletions": 12
    },
    "files": [
      {
        "sha": "b6a61f7da1c14951d7851e0cff8a8a5d1139c270",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 12,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59310f1c02673c3ee068cd82f8654bed9b757889/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59310f1c02673c3ee068cd82f8654bed9b757889/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=59310f1c02673c3ee068cd82f8654bed9b757889",
        "patch": "@@ -3355,19 +3355,17 @@ void static ProcessGetData(CNode* pfrom)\n                 BlockMap::iterator mi = mapBlockIndex.find(inv.hash);\n                 if (mi != mapBlockIndex.end())\n                 {\n-                    // If the requested block is at a height below our last\n-                    // checkpoint, only serve it if it's in the checkpointed chain\n-                    int nHeight = mi->second->nHeight;\n-                    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n-                    if (pcheckpoint && nHeight < pcheckpoint->nHeight) {\n-                        if (!chainActive.Contains(mi->second))\n-                        {\n-                            LogPrintf(\"ProcessGetData(): ignoring request for old block that isn't in the main chain\\n\");\n-                        } else {\n-                            send = true;\n-                        }\n-                    } else {\n+                    if (chainActive.Contains(mi->second)) {\n                         send = true;\n+                    } else {\n+                        // To prevent fingerprinting attacks, only send blocks outside of the active\n+                        // chain if they are valid, and no more than a month older than the best header\n+                        // chain we know about.\n+                        send = mi->second->IsValid(BLOCK_VALID_SCRIPTS) && (pindexBestHeader != NULL) &&\n+                            (mi->second->GetBlockTime() > pindexBestHeader->GetBlockTime() - 30 * 24 * 60 * 60);\n+                        if (!send) {\n+                            LogPrintf(\"ProcessGetData(): ignoring request from peer=%i for old block that isn't in the main chain\\n\", pfrom->GetId());\n+                        }\n                     }\n                 }\n                 if (send)"
      }
    ]
  },
  {
    "sha": "db4a1d598cf8b414b81ded64fd3a08230ad95d72",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjRhMWQ1OThjZjhiNDE0YjgxZGVkNjRmZDNhMDgyMzBhZDk1ZDcy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-26T16:19:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-26T16:20:29Z"
      },
      "message": "Merge pull request #5694\n\n25cf6f3 minor rework of SendMoney in rpcwallet (Philip Kaufmann)",
      "tree": {
        "sha": "5b913e3c3af72c3f0112c7bbad4456eb42b5d4db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b913e3c3af72c3f0112c7bbad4456eb42b5d4db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db4a1d598cf8b414b81ded64fd3a08230ad95d72",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU70fNAAoJEHSBCwEjRsmmadEH/1FTWfoiJQnUAggvJpADy2Dn\nZMr16bCxHZMLjzzAUcG9owTT7j7AIIVkY0jkkQal4D9gZJHZ0Izbqm0rbZ3rBneu\nrF8knGPr7M8vCxutHgWnxAl8aYVJq/lnHuktBzPHdMYqaXXiA/aLPQCDxIRyt9d7\nMi8bkkHEUfKm5fPjApd/IKo+LEg0vAql+e31flJypfNNpy+RyJ14sR9IkOY8hMoi\nkxFOkmHtI2GDjVOj23GNJxwV01Gh7DptmseyBo3YzM4TWU6e+X/HoVMP1LNL0bRV\npEObb9sU4KZ3urgECSv8LOd+6ZWvHWXmN5w4RQ44Zz2Bu0RhpTAvPf0eNE5FEEA=\n=6IkF\n-----END PGP SIGNATURE-----",
        "payload": "tree 5b913e3c3af72c3f0112c7bbad4456eb42b5d4db\nparent 59310f1c02673c3ee068cd82f8654bed9b757889\nparent 25cf6f3d41b33c4d8523b6613f0169772fd3937f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1424967592 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1424967629 +0100\n\nMerge pull request #5694\n\n25cf6f3 minor rework of SendMoney in rpcwallet (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db4a1d598cf8b414b81ded64fd3a08230ad95d72",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db4a1d598cf8b414b81ded64fd3a08230ad95d72",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db4a1d598cf8b414b81ded64fd3a08230ad95d72/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "59310f1c02673c3ee068cd82f8654bed9b757889",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59310f1c02673c3ee068cd82f8654bed9b757889",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59310f1c02673c3ee068cd82f8654bed9b757889"
      },
      {
        "sha": "25cf6f3d41b33c4d8523b6613f0169772fd3937f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25cf6f3d41b33c4d8523b6613f0169772fd3937f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25cf6f3d41b33c4d8523b6613f0169772fd3937f"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 11,
      "deletions": 16
    },
    "files": [
      {
        "sha": "d097b6a0fafc2042efbcc220216e308742b72348",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 16,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db4a1d598cf8b414b81ded64fd3a08230ad95d72/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db4a1d598cf8b414b81ded64fd3a08230ad95d72/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=db4a1d598cf8b414b81ded64fd3a08230ad95d72",
        "patch": "@@ -19,6 +19,7 @@\n #include <stdint.h>\n \n #include <boost/assign/list_of.hpp>\n+\n #include \"json/json_spirit_utils.h\"\n #include \"json/json_spirit_value.h\"\n \n@@ -316,35 +317,29 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n     return ret;\n }\n \n-void SendMoney(const CTxDestination &address, CAmount nValue, CWalletTx& wtxNew)\n+static void SendMoney(const CTxDestination &address, CAmount nValue, CWalletTx& wtxNew)\n {\n+    CAmount curBalance = pwalletMain->GetBalance();\n+\n     // Check amount\n     if (nValue <= 0)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid amount\");\n \n-    if (nValue > pwalletMain->GetBalance())\n+    if (nValue > curBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n \n-    string strError;\n-    if (pwalletMain->IsLocked())\n-    {\n-        strError = \"Error: Wallet locked, unable to create transaction!\";\n-        LogPrintf(\"SendMoney(): %s\", strError);\n-        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n-    }\n-\n     // Parse Bitcoin address\n     CScript scriptPubKey = GetScriptForDestination(address);\n \n     // Create and send the transaction\n     CReserveKey reservekey(pwalletMain);\n     CAmount nFeeRequired;\n-    if (!pwalletMain->CreateTransaction(scriptPubKey, nValue, wtxNew, reservekey, nFeeRequired, strError))\n-    {\n-        if (nValue + nFeeRequired > pwalletMain->GetBalance())\n-            strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n-        LogPrintf(\"SendMoney(): %s\\n\", strError);\n-        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    std::string strError;\n+    if (!pwalletMain->CreateTransaction(scriptPubKey, nValue, wtxNew, reservekey, nFeeRequired, strError)) {\n+        if (nValue + nFeeRequired > curBalance)\n+            throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired)));\n+        else\n+            throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n     if (!pwalletMain->CommitTransaction(wtxNew, reservekey))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");"
      }
    ]
  },
  {
    "sha": "10a3ff07f59f8c02c92286e440e5832045a07596",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGEzZmYwN2Y1OWY4YzAyYzkyMjg2ZTQ0MGU1ODMyMDQ1YTA3NTk2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-01T11:04:00Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-01T11:13:09Z"
      },
      "message": "Merge pull request #5832\n\n9abbeea Remove obsolete pubsub method definitions (Pieter Wuille)",
      "tree": {
        "sha": "23257fcb9db63c948a32349256c95eff159a5ee4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23257fcb9db63c948a32349256c95eff159a5ee4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10a3ff07f59f8c02c92286e440e5832045a07596",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJU8vRFAAoJEFeJbS/48LZXRTAL/3t1jw7alDJxpoUQxJLcW9oZ\nmILlxr5xB7lMh0m06Pt30pyefUzkHoaxpeg+AG3jp8+OF/lUlSF4QSuooqJYnmwy\njePiY0MaaWYSmDkqSqyUVswcM1vquws7xiO+7JtoOX2Fw6pVOZKmnNRB5h/09bJN\nGrOuYNO5hIFmW4AJcqcG6Au+UQLHZG12lab6LKyknWDU6BaBOcOshjT5TxQJG/Gc\nTqa3kGAWtmIiONP/AloxPoXq08+NnInuyp6YJBKledywrGADzhVu4vGYWWKWfXvC\nxgqIbAEoxFJlSrGirr1RaP8GlJ0W2iLBG3ZAksoqplECkN9P4DhU/dlKt9zjUY43\nVMbOj/u6Hy7qUMOsT6VizCYMqr6Od7r53APHx6wcD5Ue77Rws/Gc665gD+wM8RA6\nbHeBSOX/cAzE0xYQOmGCQCVm3RnvkWd8U26r8bYHBx9rpnXFpYxX2FDeQ1eji0LP\nKksbXv+ntJbpwHS7qpYGh8lUKFsVK2GyyOfCXBNG8w==\n=otp+\n-----END PGP SIGNATURE-----",
        "payload": "tree 23257fcb9db63c948a32349256c95eff159a5ee4\nparent db4a1d598cf8b414b81ded64fd3a08230ad95d72\nparent 9abbeeabd745b2817f69166b73fa3de16f15c0e2\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1425207840 -0800\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1425208389 -0800\n\nMerge pull request #5832\n\n9abbeea Remove obsolete pubsub method definitions (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10a3ff07f59f8c02c92286e440e5832045a07596",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10a3ff07f59f8c02c92286e440e5832045a07596",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10a3ff07f59f8c02c92286e440e5832045a07596/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db4a1d598cf8b414b81ded64fd3a08230ad95d72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db4a1d598cf8b414b81ded64fd3a08230ad95d72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db4a1d598cf8b414b81ded64fd3a08230ad95d72"
      },
      {
        "sha": "9abbeeabd745b2817f69166b73fa3de16f15c0e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9abbeeabd745b2817f69166b73fa3de16f15c0e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9abbeeabd745b2817f69166b73fa3de16f15c0e2"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 0,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d2b2d88ddbef79667c2c8424c78ae95b10553fea",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10a3ff07f59f8c02c92286e440e5832045a07596/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10a3ff07f59f8c02c92286e440e5832045a07596/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=10a3ff07f59f8c02c92286e440e5832045a07596",
        "patch": "@@ -570,9 +570,6 @@ class CNode\n         }\n     }\n \n-    bool IsSubscribed(unsigned int nChannel);\n-    void Subscribe(unsigned int nChannel, unsigned int nHops=0);\n-    void CancelSubscribe(unsigned int nChannel);\n     void CloseSocketDisconnect();\n \n     // Denial-of-service detection/prevention"
      }
    ]
  },
  {
    "sha": "16a58a86442ad587449f321c0dbab08cc028c2bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNmE1OGE4NjQ0MmFkNTg3NDQ5ZjMyMWMwZGJhYjA4Y2MwMjhjMmJk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-27T21:44:26Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-03-02T16:31:43Z"
      },
      "message": "keys: remove libsecp256k1 verification until it's actually supported\n\nThis was added a while ago for testing purposes, but was never intended to be\nused. Remove it until upstream libsecp256k1 decides that verification is\nstable/ready.",
      "tree": {
        "sha": "4af84d5dfdc2e272d007b7fe33e281a7abcbfbaf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4af84d5dfdc2e272d007b7fe33e281a7abcbfbaf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/16a58a86442ad587449f321c0dbab08cc028c2bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16a58a86442ad587449f321c0dbab08cc028c2bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/16a58a86442ad587449f321c0dbab08cc028c2bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16a58a86442ad587449f321c0dbab08cc028c2bd/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 0,
      "deletions": 39
    },
    "files": [
      {
        "sha": "185f7e2918b12880b684661c0f799f1a55fc9bbc",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16a58a86442ad587449f321c0dbab08cc028c2bd/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16a58a86442ad587449f321c0dbab08cc028c2bd/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=16a58a86442ad587449f321c0dbab08cc028c2bd",
        "patch": "@@ -849,7 +849,6 @@ AM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\n AM_CONDITIONAL([USE_COMPARISON_TOOL],[test x$use_comparison_tool != xno])\n AM_CONDITIONAL([USE_COMPARISON_TOOL_REORG_TESTS],[test x$use_comparison_tool_reorg_test != xno])\n AM_CONDITIONAL([GLIBC_BACK_COMPAT],[test x$use_glibc_compat = xyes])\n-AM_CONDITIONAL([USE_LIBSECP256K1],[test x$use_libsecp256k1 = xyes])\n \n AC_DEFINE(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR, [Major version])\n AC_DEFINE(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR, [Minor version])"
      },
      {
        "sha": "4587727cca59bd61337acbd8387235e8e45cdec7",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16a58a86442ad587449f321c0dbab08cc028c2bd/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16a58a86442ad587449f321c0dbab08cc028c2bd/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=16a58a86442ad587449f321c0dbab08cc028c2bd",
        "patch": "@@ -379,9 +379,6 @@ libbitcoinconsensus_la_LDFLAGS = -no-undefined $(RELDFLAGS)\n libbitcoinconsensus_la_LIBADD = $(CRYPTO_LIBS)\n libbitcoinconsensus_la_CPPFLAGS = $(CRYPTO_CFLAGS) -I$(builddir)/obj -DBUILD_BITCOIN_INTERNAL\n \n-if USE_LIBSECP256K1\n-libbitcoinconsensus_la_LIBADD += secp256k1/libsecp256k1.la\n-endif\n endif\n #\n "
      },
      {
        "sha": "64c9bc71190cc65968f4db81c8e2f56e93abc50d",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16a58a86442ad587449f321c0dbab08cc028c2bd/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16a58a86442ad587449f321c0dbab08cc028c2bd/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=16a58a86442ad587449f321c0dbab08cc028c2bd",
        "patch": "@@ -208,11 +208,9 @@ void CExtKey::Decode(const unsigned char code[74]) {\n }\n \n bool ECC_InitSanityCheck() {\n-#if !defined(USE_SECP256K1)\n     if (!CECKey::SanityCheck()) {\n         return false;\n     }\n-#endif\n     CKey key;\n     key.MakeNewKey(true);\n     CPubKey pubkey = key.GetPubKey();"
      },
      {
        "sha": "a4c046bff53806f05e5d81b8be78731dda0d90cc",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 33,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16a58a86442ad587449f321c0dbab08cc028c2bd/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16a58a86442ad587449f321c0dbab08cc028c2bd/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=16a58a86442ad587449f321c0dbab08cc028c2bd",
        "patch": "@@ -6,25 +6,16 @@\n \n #include \"eccryptoverify.h\"\n \n-#ifdef USE_SECP256K1\n-#include <secp256k1.h>\n-#else\n #include \"ecwrapper.h\"\n-#endif\n \n bool CPubKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig) const {\n     if (!IsValid())\n         return false;\n-#ifdef USE_SECP256K1\n-    if (secp256k1_ecdsa_verify((const unsigned char*)&hash, &vchSig[0], vchSig.size(), begin(), size()) != 1)\n-        return false;\n-#else\n     CECKey key;\n     if (!key.SetPubKey(begin(), size()))\n         return false;\n     if (!key.Verify(hash, vchSig))\n         return false;\n-#endif\n     return true;\n }\n \n@@ -33,52 +24,33 @@ bool CPubKey::RecoverCompact(const uint256 &hash, const std::vector<unsigned cha\n         return false;\n     int recid = (vchSig[0] - 27) & 3;\n     bool fComp = ((vchSig[0] - 27) & 4) != 0;\n-#ifdef USE_SECP256K1\n-    int pubkeylen = 65;\n-    if (!secp256k1_ecdsa_recover_compact((const unsigned char*)&hash, &vchSig[1], (unsigned char*)begin(), &pubkeylen, fComp, recid))\n-        return false;\n-    assert((int)size() == pubkeylen);\n-#else\n     CECKey key;\n     if (!key.Recover(hash, &vchSig[1], recid))\n         return false;\n     std::vector<unsigned char> pubkey;\n     key.GetPubKey(pubkey, fComp);\n     Set(pubkey.begin(), pubkey.end());\n-#endif\n     return true;\n }\n \n bool CPubKey::IsFullyValid() const {\n     if (!IsValid())\n         return false;\n-#ifdef USE_SECP256K1\n-    if (!secp256k1_ecdsa_pubkey_verify(begin(), size()))\n-        return false;\n-#else\n     CECKey key;\n     if (!key.SetPubKey(begin(), size()))\n         return false;\n-#endif\n     return true;\n }\n \n bool CPubKey::Decompress() {\n     if (!IsValid())\n         return false;\n-#ifdef USE_SECP256K1\n-    int clen = size();\n-    int ret = secp256k1_ecdsa_pubkey_decompress((unsigned char*)begin(), &clen);\n-    assert(ret);\n-    assert(clen == (int)size());\n-#else\n     CECKey key;\n     if (!key.SetPubKey(begin(), size()))\n         return false;\n     std::vector<unsigned char> pubkey;\n     key.GetPubKey(pubkey, false);\n     Set(pubkey.begin(), pubkey.end());\n-#endif\n     return true;\n }\n \n@@ -89,17 +61,12 @@ bool CPubKey::Derive(CPubKey& pubkeyChild, unsigned char ccChild[32], unsigned i\n     unsigned char out[64];\n     BIP32Hash(cc, nChild, *begin(), begin()+1, out);\n     memcpy(ccChild, out+32, 32);\n-#ifdef USE_SECP256K1\n-    pubkeyChild = *this;\n-    bool ret = secp256k1_ecdsa_pubkey_tweak_add((unsigned char*)pubkeyChild.begin(), pubkeyChild.size(), out);\n-#else\n     CECKey key;\n     bool ret = key.SetPubKey(begin(), size());\n     ret &= key.TweakPublic(out);\n     std::vector<unsigned char> pubkey;\n     key.GetPubKey(pubkey, true);\n     pubkeyChild.Set(pubkey.begin(), pubkey.end());\n-#endif\n     return ret;\n }\n "
      }
    ]
  },
  {
    "sha": "3c6d594e646f6d9427eb1c850ce26430a94051e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzZkNTk0ZTY0NmY2ZDk0MjdlYjFjODUwY2UyNjQzMGE5NDA1MWUw",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-03-03T09:52:21Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-03-03T09:52:21Z"
      },
      "message": "contrib/init/bitcoind.openrc: Compatibility with previous OpenRC init script variables",
      "tree": {
        "sha": "6427b7bfa44d90b97072909a72d47ec555ea7479",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6427b7bfa44d90b97072909a72d47ec555ea7479"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c6d594e646f6d9427eb1c850ce26430a94051e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c6d594e646f6d9427eb1c850ce26430a94051e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c6d594e646f6d9427eb1c850ce26430a94051e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c6d594e646f6d9427eb1c850ce26430a94051e0/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41cced21063a89992ef393dda4fffc44ff60c7c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41cced21063a89992ef393dda4fffc44ff60c7c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41cced21063a89992ef393dda4fffc44ff60c7c3"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b0ac5e31e183a9f81d15f95be1e4b3d9fa08e02b",
        "filename": "contrib/init/bitcoind.openrc",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c6d594e646f6d9427eb1c850ce26430a94051e0/contrib/init/bitcoind.openrc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c6d594e646f6d9427eb1c850ce26430a94051e0/contrib/init/bitcoind.openrc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/bitcoind.openrc?ref=3c6d594e646f6d9427eb1c850ce26430a94051e0",
        "patch": "@@ -12,9 +12,11 @@ BITCOIND_CONFIGFILE=${BITCOIND_CONFIGFILE:-/etc/bitcoin/bitcoin.conf}\n BITCOIND_PIDDIR=${BITCOIND_PIDDIR:-/var/run/bitcoind}\n BITCOIND_PIDFILE=${BITCOIND_PIDFILE:-${BITCOIND_PIDDIR}/bitcoind.pid}\n BITCOIND_DATADIR=${BITCOIND_DATADIR:-${BITCOIND_DEFAULT_DATADIR}}\n-BITCOIND_USER=${BITCOIND_USER:-bitcoin}\n+BITCOIND_USER=${BITCOIND_USER:-${BITCOIN_USER:-bitcoin}}\n BITCOIND_GROUP=${BITCOIND_GROUP:-bitcoin}\n BITCOIND_BIN=${BITCOIND_BIN:-/usr/bin/bitcoind}\n+BITCOIND_NICE=${BITCOIND_NICE:-${NICELEVEL:-0}}\n+BITCOIND_OPTS=\"${BITCOIND_OPTS:-${BITCOIN_OPTS}}\"\n \n name=\"Bitcoin Core Daemon\"\n description=\"Bitcoin crypto-currency p2p network daemon\"\n@@ -28,7 +30,7 @@ command_args=\"-pid=\\\"${BITCOIND_PIDFILE}\\\" \\\n \n required_files=\"${BITCOIND_CONFIGFILE}\"\n start_stop_daemon_args=\"-u ${BITCOIND_USER} \\\n-\t\t\t-N ${BITCOIND_NICE:-0} -w 2000\"\n+\t\t\t-N ${BITCOIND_NICE} -w 2000\"\n pidfile=\"${BITCOIND_PIDFILE}\"\n retry=60\n "
      }
    ]
  },
  {
    "sha": "86eb461c5bbe8200ab066f75b5acdf79fbae1086",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NmViNDYxYzViYmU4MjAwYWIwNjZmNzViNWFjZGY3OWZiYWUxMDg2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-03T12:07:12Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-03T12:08:15Z"
      },
      "message": "Merge pull request #5839\n\n16a58a8 keys: remove libsecp256k1 verification until it's actually supported (Cory Fields)",
      "tree": {
        "sha": "fc7587c365042d9216af66b1bcc5d2bbe14c1e8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc7587c365042d9216af66b1bcc5d2bbe14c1e8d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86eb461c5bbe8200ab066f75b5acdf79fbae1086",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJU9aQvAAoJEFeJbS/48LZX3DUL+gJmNvDsT6K3AzdkDIJ4jIcn\no2LV5zeE+Nh3/EwH0Zs2m6MgNf3qLYcISPiT1sRKgiL+A8/Cc2xd+DxpeEvekyDZ\niMADip+f0/NcWkZDEOh0dX1/+RjkZZdMhmaxbOVvATwiGBuL975W+KvDMumja3EM\nvSJfdGUFcLHhwpLLKNgtv5YGvLOi5bnpVNEs+mnLdkf20gorEj+sWMuz+5UKRQwl\newWdX9l/EEz0aVLPbBZ3Tsf/dXB8vfAdYGc+LWSJooqtP0Refur8qygxu+BrBPSv\nO8rmrUdR4q5rp/pnftRltthecG40VKPnBGRLxY7h4dHXldFH1ERN+iBE1CO6h4kA\nW8qA47n3P2nGtx6xWZVk9jknkmqbKN54jsvA10tioCj2Rc/Tbv3Cx5uhCboR6+s5\ntooyjvdNngpFNzEGotZKKR4zxgtSyhINFQj3kqzG3HiDzSavgO0HQJ3ZVsjLQOWc\ncDrWUj9G8QZrjchgabLGZH7rQlcx9KqrpusASwW9nw==\n=TAMI\n-----END PGP SIGNATURE-----",
        "payload": "tree fc7587c365042d9216af66b1bcc5d2bbe14c1e8d\nparent 10a3ff07f59f8c02c92286e440e5832045a07596\nparent 16a58a86442ad587449f321c0dbab08cc028c2bd\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1425384432 -0800\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1425384495 -0800\n\nMerge pull request #5839\n\n16a58a8 keys: remove libsecp256k1 verification until it's actually supported (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86eb461c5bbe8200ab066f75b5acdf79fbae1086",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86eb461c5bbe8200ab066f75b5acdf79fbae1086",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86eb461c5bbe8200ab066f75b5acdf79fbae1086/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10a3ff07f59f8c02c92286e440e5832045a07596",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10a3ff07f59f8c02c92286e440e5832045a07596",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10a3ff07f59f8c02c92286e440e5832045a07596"
      },
      {
        "sha": "16a58a86442ad587449f321c0dbab08cc028c2bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16a58a86442ad587449f321c0dbab08cc028c2bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16a58a86442ad587449f321c0dbab08cc028c2bd"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 0,
      "deletions": 39
    },
    "files": [
      {
        "sha": "185f7e2918b12880b684661c0f799f1a55fc9bbc",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86eb461c5bbe8200ab066f75b5acdf79fbae1086/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86eb461c5bbe8200ab066f75b5acdf79fbae1086/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=86eb461c5bbe8200ab066f75b5acdf79fbae1086",
        "patch": "@@ -849,7 +849,6 @@ AM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\n AM_CONDITIONAL([USE_COMPARISON_TOOL],[test x$use_comparison_tool != xno])\n AM_CONDITIONAL([USE_COMPARISON_TOOL_REORG_TESTS],[test x$use_comparison_tool_reorg_test != xno])\n AM_CONDITIONAL([GLIBC_BACK_COMPAT],[test x$use_glibc_compat = xyes])\n-AM_CONDITIONAL([USE_LIBSECP256K1],[test x$use_libsecp256k1 = xyes])\n \n AC_DEFINE(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR, [Major version])\n AC_DEFINE(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR, [Minor version])"
      },
      {
        "sha": "4587727cca59bd61337acbd8387235e8e45cdec7",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86eb461c5bbe8200ab066f75b5acdf79fbae1086/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86eb461c5bbe8200ab066f75b5acdf79fbae1086/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=86eb461c5bbe8200ab066f75b5acdf79fbae1086",
        "patch": "@@ -379,9 +379,6 @@ libbitcoinconsensus_la_LDFLAGS = -no-undefined $(RELDFLAGS)\n libbitcoinconsensus_la_LIBADD = $(CRYPTO_LIBS)\n libbitcoinconsensus_la_CPPFLAGS = $(CRYPTO_CFLAGS) -I$(builddir)/obj -DBUILD_BITCOIN_INTERNAL\n \n-if USE_LIBSECP256K1\n-libbitcoinconsensus_la_LIBADD += secp256k1/libsecp256k1.la\n-endif\n endif\n #\n "
      },
      {
        "sha": "64c9bc71190cc65968f4db81c8e2f56e93abc50d",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86eb461c5bbe8200ab066f75b5acdf79fbae1086/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86eb461c5bbe8200ab066f75b5acdf79fbae1086/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=86eb461c5bbe8200ab066f75b5acdf79fbae1086",
        "patch": "@@ -208,11 +208,9 @@ void CExtKey::Decode(const unsigned char code[74]) {\n }\n \n bool ECC_InitSanityCheck() {\n-#if !defined(USE_SECP256K1)\n     if (!CECKey::SanityCheck()) {\n         return false;\n     }\n-#endif\n     CKey key;\n     key.MakeNewKey(true);\n     CPubKey pubkey = key.GetPubKey();"
      },
      {
        "sha": "a4c046bff53806f05e5d81b8be78731dda0d90cc",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 33,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86eb461c5bbe8200ab066f75b5acdf79fbae1086/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86eb461c5bbe8200ab066f75b5acdf79fbae1086/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=86eb461c5bbe8200ab066f75b5acdf79fbae1086",
        "patch": "@@ -6,25 +6,16 @@\n \n #include \"eccryptoverify.h\"\n \n-#ifdef USE_SECP256K1\n-#include <secp256k1.h>\n-#else\n #include \"ecwrapper.h\"\n-#endif\n \n bool CPubKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig) const {\n     if (!IsValid())\n         return false;\n-#ifdef USE_SECP256K1\n-    if (secp256k1_ecdsa_verify((const unsigned char*)&hash, &vchSig[0], vchSig.size(), begin(), size()) != 1)\n-        return false;\n-#else\n     CECKey key;\n     if (!key.SetPubKey(begin(), size()))\n         return false;\n     if (!key.Verify(hash, vchSig))\n         return false;\n-#endif\n     return true;\n }\n \n@@ -33,52 +24,33 @@ bool CPubKey::RecoverCompact(const uint256 &hash, const std::vector<unsigned cha\n         return false;\n     int recid = (vchSig[0] - 27) & 3;\n     bool fComp = ((vchSig[0] - 27) & 4) != 0;\n-#ifdef USE_SECP256K1\n-    int pubkeylen = 65;\n-    if (!secp256k1_ecdsa_recover_compact((const unsigned char*)&hash, &vchSig[1], (unsigned char*)begin(), &pubkeylen, fComp, recid))\n-        return false;\n-    assert((int)size() == pubkeylen);\n-#else\n     CECKey key;\n     if (!key.Recover(hash, &vchSig[1], recid))\n         return false;\n     std::vector<unsigned char> pubkey;\n     key.GetPubKey(pubkey, fComp);\n     Set(pubkey.begin(), pubkey.end());\n-#endif\n     return true;\n }\n \n bool CPubKey::IsFullyValid() const {\n     if (!IsValid())\n         return false;\n-#ifdef USE_SECP256K1\n-    if (!secp256k1_ecdsa_pubkey_verify(begin(), size()))\n-        return false;\n-#else\n     CECKey key;\n     if (!key.SetPubKey(begin(), size()))\n         return false;\n-#endif\n     return true;\n }\n \n bool CPubKey::Decompress() {\n     if (!IsValid())\n         return false;\n-#ifdef USE_SECP256K1\n-    int clen = size();\n-    int ret = secp256k1_ecdsa_pubkey_decompress((unsigned char*)begin(), &clen);\n-    assert(ret);\n-    assert(clen == (int)size());\n-#else\n     CECKey key;\n     if (!key.SetPubKey(begin(), size()))\n         return false;\n     std::vector<unsigned char> pubkey;\n     key.GetPubKey(pubkey, false);\n     Set(pubkey.begin(), pubkey.end());\n-#endif\n     return true;\n }\n \n@@ -89,17 +61,12 @@ bool CPubKey::Derive(CPubKey& pubkeyChild, unsigned char ccChild[32], unsigned i\n     unsigned char out[64];\n     BIP32Hash(cc, nChild, *begin(), begin()+1, out);\n     memcpy(ccChild, out+32, 32);\n-#ifdef USE_SECP256K1\n-    pubkeyChild = *this;\n-    bool ret = secp256k1_ecdsa_pubkey_tweak_add((unsigned char*)pubkeyChild.begin(), pubkeyChild.size(), out);\n-#else\n     CECKey key;\n     bool ret = key.SetPubKey(begin(), size());\n     ret &= key.TweakPublic(out);\n     std::vector<unsigned char> pubkey;\n     key.GetPubKey(pubkey, true);\n     pubkeyChild.Set(pubkey.begin(), pubkey.end());\n-#endif\n     return ret;\n }\n "
      }
    ]
  },
  {
    "sha": "f8e68f7bfbaaa830331f37137d0771147b85cf4a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOGU2OGY3YmZiYWFhODMwMzMxZjM3MTM3ZDA3NzExNDdiODVjZjRh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-03T15:27:37Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-03T15:27:50Z"
      },
      "message": "Merge pull request #5819\n\nd23b0a2 depends: always use static qt5 for linux (Cory Fields)\n3448b13 build: fix typo in configure help (Cory Fields)\nc95ac83 gitian: fix x86_64 build with static libstdc++ (Cory Fields)\n0671516 build: change reduce exports/static libstdc++ options for gitian and travis (Cory Fields)\naa36730 build: remove libstdc++ backwards-compat (Cory Fields)\n3ee028f build: disable reduced exports by default (Cory Fields)",
      "tree": {
        "sha": "ffba3bb681582d734093ae792b6a53d3a5ed9047",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ffba3bb681582d734093ae792b6a53d3a5ed9047"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8e68f7bfbaaa830331f37137d0771147b85cf4a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU9dL2AAoJEHSBCwEjRsmm41oH/3M76LPuK0fqXrxM9gmghpmD\n9KiQadTNrPlgsJpvv5CkedRwtqCSXwRKlOhbS17vU9yWaxf972EyuX7rgntqT01Y\nmwVORbgPlcg6i3arJJXoDB0HZjrUr6PRxca5P8siHDRfgXTHHsQqwpvMOV5pTksz\n4d2pLLWUthNzL5Kif3fL/8r7AzP+f8ssSg3HKTXT7FhhHoR2iyT899Wyml/A/oRd\n+WzX6WVB5T78chCZM6CdDX6uG2X1TsH2LvKZVlXKHC6xllkV4eePAJbNHn/7To5t\nwhioNghclY00CCb6mGZksL5DfuTrrX+asCoKSCzhrUUWf5HZgmzYOKuGtgNDSX0=\n=68LE\n-----END PGP SIGNATURE-----",
        "payload": "tree ffba3bb681582d734093ae792b6a53d3a5ed9047\nparent 86eb461c5bbe8200ab066f75b5acdf79fbae1086\nparent d23b0a271163d187eb362164d375148fdd752148\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1425396457 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1425396470 +0100\n\nMerge pull request #5819\n\nd23b0a2 depends: always use static qt5 for linux (Cory Fields)\n3448b13 build: fix typo in configure help (Cory Fields)\nc95ac83 gitian: fix x86_64 build with static libstdc++ (Cory Fields)\n0671516 build: change reduce exports/static libstdc++ options for gitian and travis (Cory Fields)\naa36730 build: remove libstdc++ backwards-compat (Cory Fields)\n3ee028f build: disable reduced exports by default (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8e68f7bfbaaa830331f37137d0771147b85cf4a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8e68f7bfbaaa830331f37137d0771147b85cf4a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8e68f7bfbaaa830331f37137d0771147b85cf4a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86eb461c5bbe8200ab066f75b5acdf79fbae1086",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86eb461c5bbe8200ab066f75b5acdf79fbae1086",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86eb461c5bbe8200ab066f75b5acdf79fbae1086"
      },
      {
        "sha": "d23b0a271163d187eb362164d375148fdd752148",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d23b0a271163d187eb362164d375148fdd752148",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d23b0a271163d187eb362164d375148fdd752148"
      }
    ],
    "stats": {
      "total": 175,
      "additions": 31,
      "deletions": 144
    },
    "files": [
      {
        "sha": "e08e78dabf5e1e60c7ac39116e4d27b390fa4bd2",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8e68f7bfbaaa830331f37137d0771147b85cf4a/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8e68f7bfbaaa830331f37137d0771147b85cf4a/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=f8e68f7bfbaaa830331f37137d0771147b85cf4a",
        "patch": "@@ -25,19 +25,19 @@ matrix:\n   fast_finish: true\n   include:\n     - compiler: \": ARM\"\n-      env: HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n+      env: HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n     - compiler: \": bitcoind\"\n-      env: HOST=x86_64-unknown-linux-gnu PACKAGES=\"bc\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat CPPFLAGS=-DDEBUG_LOCKORDER\"\n+      env: HOST=x86_64-unknown-linux-gnu PACKAGES=\"bc\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CPPFLAGS=-DDEBUG_LOCKORDER\"\n     - compiler: \": No wallet\"\n-      env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n+      env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n     - compiler: \": 32-bit + dash\"\n-      env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\" USE_SHELL=\"/bin/dash\"\n+      env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\" USE_SHELL=\"/bin/dash\"\n     - compiler: \": Cross-Mac\"\n-      env: HOST=x86_64-apple-darwin11 PACKAGES=\"cmake libcap-dev libz-dev libbz2-dev\" OSX_SDK=10.9 GOAL=\"deploy\"\n+      env: HOST=x86_64-apple-darwin11 PACKAGES=\"cmake libcap-dev libz-dev libbz2-dev\" BITCOIN_CONFIG=\"--enable-reduce-exports\" OSX_SDK=10.9 GOAL=\"deploy\"\n     - compiler: \": Win64\"\n-      env: HOST=x86_64-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui\" MAKEJOBS=\"-j2\"\n+      env: HOST=x86_64-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n     - compiler: \": Win32\"\n-      env: HOST=i686-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui\" MAKEJOBS=\"-j2\"\n+      env: HOST=i686-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n install:\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES; fi"
      },
      {
        "sha": "f5bc1e3122b2529168e752788cc68b03f31dbfb4",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 11,
        "deletions": 30,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8e68f7bfbaaa830331f37137d0771147b85cf4a/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8e68f7bfbaaa830331f37137d0771147b85cf4a/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=f8e68f7bfbaaa830331f37137d0771147b85cf4a",
        "patch": "@@ -115,9 +115,9 @@ AC_ARG_ENABLE([hardening],\n \n AC_ARG_ENABLE([reduce-exports],\n   [AS_HELP_STRING([--enable-reduce-exports],\n-  [attempt to reduce exported symbols in the resulting executables (default is yes)])],\n+  [attempt to reduce exported symbols in the resulting executables (default is no)])],\n   [use_reduce_exports=$enableval],\n-  [use_reduce_exports=auto])\n+  [use_reduce_exports=no])\n \n AC_ARG_ENABLE([ccache],\n   [AS_HELP_STRING([--enable-ccache],\n@@ -133,7 +133,7 @@ AC_ARG_ENABLE([lcov],\n \n AC_ARG_ENABLE([glibc-back-compat],\n   [AS_HELP_STRING([--enable-glibc-back-compat],\n-  [enable backwards compatibility with glibc and libstdc++])],\n+  [enable backwards compatibility with glibc])],\n   [use_glibc_compat=$enableval],\n   [use_glibc_compat=no])\n \n@@ -471,22 +471,14 @@ AC_LINK_IFELSE([AC_LANG_SOURCE([\n   [\n     AC_MSG_RESULT(no)\n     if test x$use_reduce_exports = xyes; then\n-      AC_MSG_ERROR([Cannot find a working visibility attribute. Use --disable-reduced-exports.])\n+      AC_MSG_ERROR([Cannot find a working visibility attribute. Use --disable-reduce-exports.])\n     fi\n-      AC_MSG_WARN([Cannot find a working visibility attribute. Disabling reduced exports.])\n-      use_reduce_exports=no\n   ]\n )\n \n-if test x$use_reduce_exports != xno; then\n+if test x$use_reduce_exports = xyes; then\n   AX_CHECK_COMPILE_FLAG([-fvisibility=hidden],[RE_CXXFLAGS=\"-fvisibility=hidden\"],\n-  [\n-    if test x$use_reduce_exports = xyes; then\n-      AC_MSG_ERROR([Cannot set default symbol visibility. Use --disable-reduced-exports.])\n-    fi\n-    AC_MSG_WARN([Cannot set default symbol visibility. Disabling reduced exports.])\n-    use_reduce_exports=no\n-  ])\n+  [AC_MSG_ERROR([Cannot set default symbol visibility. Use --disable-reduce-exports.])])\n fi\n \n LEVELDB_CPPFLAGS=\n@@ -533,7 +525,7 @@ AX_BOOST_THREAD\n AX_BOOST_CHRONO\n \n \n-if test x$use_reduce_exports != xno; then\n+if test x$use_reduce_exports = xyes; then\n   AC_MSG_CHECKING([for working boost reduced exports])\n   TEMP_CPPFLAGS=\"$CPPFLAGS\"\n   CPPFLAGS=\"$BOOST_CPPFLAGS $CPPFLAGS\"\n@@ -547,25 +539,14 @@ if test x$use_reduce_exports != xno; then\n       #endif\n     ]])],[\n       AC_MSG_RESULT(yes)\n-    ],[:\n-    if test x$use_reduce_exports = xauto; then\n-      use_reduce_exports=no\n-    else\n-      if test x$use_reduce_exports = xyes; then\n-        AC_MSG_ERROR([boost versions < 1.49 are known to be broken with reduced exports. Use --disable-reduced-exports.])\n-      fi\n-    fi\n-    AC_MSG_RESULT(no)\n-    AC_MSG_WARN([boost versions < 1.49 are known to have symbol visibility issues. Disabling reduced exports.])\n+    ],[\n+    AC_MSG_ERROR([boost versions < 1.49 are known to be broken with reduced exports. Use --disable-reduce-exports.])\n   ])\n   CPPFLAGS=\"$TEMP_CPPFLAGS\"\n fi\n-\n-elif test x$use_reduce_exports = xauto; then\n-    use_reduce_exports=yes\n fi\n \n-if test x$use_reduce_exports != xno; then\n+if test x$use_reduce_exports = xyes; then\n     CXXFLAGS=\"$CXXFLAGS $RE_CXXFLAGS\"\n     AX_CHECK_LINK_FLAG([[-Wl,--exclude-libs,ALL]], [RELDFLAGS=\"-Wl,--exclude-libs,ALL\"])\n fi\n@@ -827,7 +808,7 @@ else\n fi\n \n AC_MSG_CHECKING([whether to reduce exports])\n-if test x$use_reduce_exports != xno; then\n+if test x$use_reduce_exports = xyes; then\n   AC_MSG_RESULT([yes])\n else\n   AC_MSG_RESULT([no])"
      },
      {
        "sha": "dde4af34915c2ccf07f0dc184779416efe60f4de",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8e68f7bfbaaa830331f37137d0771147b85cf4a/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8e68f7bfbaaa830331f37137d0771147b85cf4a/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=f8e68f7bfbaaa830331f37137d0771147b85cf4a",
        "patch": "@@ -15,6 +15,7 @@ packages:\n - \"faketime\"\n - \"bsdmainutils\"\n - \"binutils-gold\"\n+- \"libstdc++6-4.6-pic\"\n reference_datetime: \"2013-06-01 00:00:00\"\n remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n@@ -23,7 +24,7 @@ files: []\n script: |\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"i686-pc-linux-gnu x86_64-unknown-linux-gnu\"\n-  CONFIGFLAGS=\"--enable-upnp-default --enable-glibc-back-compat\"\n+  CONFIGFLAGS=\"--enable-upnp-default --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\"\n   FAKETIME_HOST_PROGS=\"\"\n   FAKETIME_PROGS=\"date ar ranlib nm strip\"\n \n@@ -69,6 +70,14 @@ script: |\n     make ${MAKEOPTS} -C ${BASEPREFIX} HOST=\"${i}\"\n   done\n \n+  # Ubuntu precise hack: Not an issue in later versions.\n+  # Precise's libstdc++.a is non-pic. There's an optional libstdc++6-4.6-pic\n+  #   package which provides libstdc++_pic.a, but the linker can't find it.\n+  # Symlink it to a path that will be included in our link-line so that the\n+  # linker picks it up before the default libstdc++.a.\n+  # This is only necessary for 64bit.\n+  ln -s /usr/lib/gcc/x86_64-linux-gnu/4.6/libstdc++_pic.a ${BASEPREFIX}/x86_64-unknown-linux-gnu/lib/libstdc++.a\n+\n   # Create the release tarball using (arbitrarily) the first host\n   ./autogen.sh\n   ./configure --prefix=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`"
      },
      {
        "sha": "b401482c70d4b329c6579e0664e28b24191db433",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8e68f7bfbaaa830331f37137d0771147b85cf4a/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8e68f7bfbaaa830331f37137d0771147b85cf4a/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=f8e68f7bfbaaa830331f37137d0771147b85cf4a",
        "patch": "@@ -27,7 +27,7 @@ files:\n script: |\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"x86_64-apple-darwin11\"\n-  CONFIGFLAGS=\"--enable-upnp-default GENISOIMAGE=$WRAP_DIR/genisoimage\"\n+  CONFIGFLAGS=\"--enable-upnp-default --enable-reduce-exports GENISOIMAGE=$WRAP_DIR/genisoimage\"\n   FAKETIME_HOST_PROGS=\"\"\n   FAKETIME_PROGS=\"ar ranlib date dmg genisoimage\"\n "
      },
      {
        "sha": "2d72f7b6e5aafe7935a7289dfee1f6e103e16c10",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8e68f7bfbaaa830331f37137d0771147b85cf4a/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8e68f7bfbaaa830331f37137d0771147b85cf4a/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=f8e68f7bfbaaa830331f37137d0771147b85cf4a",
        "patch": "@@ -26,7 +26,7 @@ files: []\n script: |\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"x86_64-w64-mingw32 i686-w64-mingw32\"\n-  CONFIGFLAGS=\"--enable-upnp-default\"\n+  CONFIGFLAGS=\"--enable-upnp-default --enable-reduce-exports\"\n   FAKETIME_HOST_PROGS=\"g++ ar ranlib nm windres strip\"\n   FAKETIME_PROGS=\"date makensis zip\"\n "
      },
      {
        "sha": "05ef33f2ee83326eeb264c25c8744c16f82f2d33",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8e68f7bfbaaa830331f37137d0771147b85cf4a/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8e68f7bfbaaa830331f37137d0771147b85cf4a/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=f8e68f7bfbaaa830331f37137d0771147b85cf4a",
        "patch": "@@ -6,7 +6,6 @@ SDK_PATH ?= $(BASEDIR)/SDKs\n NO_QT ?=\n NO_WALLET ?=\n NO_UPNP ?=\n-USE_LINUX_STATIC_QT5 ?=\n FALLBACK_DOWNLOAD_PATH ?= https://bitcoincore.org/depends-sources\n \n BUILD = $(shell ./config.guess)"
      },
      {
        "sha": "24e1231d8265f60f54af3ca2f9ece954b0c48452",
        "filename": "depends/README.usage",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8e68f7bfbaaa830331f37137d0771147b85cf4a/depends/README.usage",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8e68f7bfbaaa830331f37137d0771147b85cf4a/depends/README.usage",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.usage?ref=f8e68f7bfbaaa830331f37137d0771147b85cf4a",
        "patch": "@@ -23,7 +23,6 @@ NO_QT: Don't download/build/cache qt and its dependencies\n NO_WALLET: Don't download/build/cache libs needed to enable the wallet\n NO_UPNP: Don't download/build/cache packages needed for enabling upnp\n DEBUG: disable some optimizations and enable more runtime checking\n-USE_LINUX_STATIC_QT5: Build a static qt5 rather than shared qt4. Linux only.\n \n If some packages are not built, for example 'make NO_WALLET=1', the appropriate\n options will be passed to bitcoin's configure. In this case, --disable-wallet."
      },
      {
        "sha": "03908aba599ed82d375eb340f3837957dbcb5efe",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8e68f7bfbaaa830331f37137d0771147b85cf4a/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8e68f7bfbaaa830331f37137d0771147b85cf4a/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=f8e68f7bfbaaa830331f37137d0771147b85cf4a",
        "patch": "@@ -4,15 +4,10 @@ native_packages := native_ccache native_comparisontool\n qt_native_packages = native_protobuf\n qt_packages = qrencode protobuf\n \n-qt46_linux_packages = qt46 expat dbus libxcb xcb_proto libXau xproto freetype libX11 xextproto libXext xtrans libICE libSM\n-qt5_linux_packages= qt expat dbus libxcb xcb_proto libXau xproto freetype fontconfig libX11 xextproto libXext xtrans\n-\n+qt_linux_packages= qt expat dbus libxcb xcb_proto libXau xproto freetype fontconfig libX11 xextproto libXext xtrans\n qt_darwin_packages=qt\n qt_mingw32_packages=qt\n \n-qt_linux_$(USE_LINUX_STATIC_QT5):=$(qt5_linux_packages)\n-qt_linux_:=$(qt46_linux_packages)\n-qt_linux_packages:=$(qt_linux_$(USE_LINUX_STATIC_QT5))\n \n wallet_packages=bdb\n "
      },
      {
        "sha": "e1d467ff8540ca7881bd591fe9584a37b3ab452b",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8e68f7bfbaaa830331f37137d0771147b85cf4a/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8e68f7bfbaaa830331f37137d0771147b85cf4a/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=f8e68f7bfbaaa830331f37137d0771147b85cf4a",
        "patch": "@@ -280,7 +280,6 @@ libbitcoin_util_a_SOURCES = \\\n \n if GLIBC_BACK_COMPAT\n libbitcoin_util_a_SOURCES += compat/glibc_compat.cpp\n-libbitcoin_util_a_SOURCES += compat/glibcxx_compat.cpp\n endif\n \n # cli: shared between bitcoin-cli and bitcoin-qt\n@@ -372,7 +371,6 @@ libbitcoinconsensus_la_SOURCES = \\\n \n if GLIBC_BACK_COMPAT\n   libbitcoinconsensus_la_SOURCES += compat/glibc_compat.cpp\n-  libbitcoinconsensus_la_SOURCES += compat/glibcxx_compat.cpp\n endif\n \n libbitcoinconsensus_la_LDFLAGS = -no-undefined $(RELDFLAGS)"
      },
      {
        "sha": "4f2771e57a086ca983cec57b42376c003d480da8",
        "filename": "src/compat/glibcxx_compat.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 94,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86eb461c5bbe8200ab066f75b5acdf79fbae1086/src/compat/glibcxx_compat.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86eb461c5bbe8200ab066f75b5acdf79fbae1086/src/compat/glibcxx_compat.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibcxx_compat.cpp?ref=86eb461c5bbe8200ab066f75b5acdf79fbae1086",
        "patch": "@@ -1,94 +0,0 @@\n-// Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <cstddef>\n-#include <istream>\n-#include <stdexcept>\n-#include <typeinfo>\n-\n-#ifndef _GLIBCXX_USE_NOEXCEPT\n-#define _GLIBCXX_USE_NOEXCEPT throw()\n-#endif\n-\n-namespace std\n-{\n-const char* bad_exception::what() const throw()\n-{\n-    return \"std::bad_exception\";\n-}\n-\n-const char* bad_cast::what() const throw()\n-{\n-    return \"std::bad_cast\";\n-}\n-\n-const char* bad_alloc::what() const throw()\n-{\n-    return \"std::bad_alloc\";\n-}\n-\n-namespace __detail\n-{\n-struct _List_node_base {\n-    void _M_hook(std::__detail::_List_node_base* const __position) throw() __attribute__((used))\n-    {\n-        _M_next = __position;\n-        _M_prev = __position->_M_prev;\n-        __position->_M_prev->_M_next = this;\n-        __position->_M_prev = this;\n-    }\n-\n-    void _M_unhook() __attribute__((used))\n-    {\n-        _List_node_base* const __next_node = _M_next;\n-        _List_node_base* const __prev_node = _M_prev;\n-        __prev_node->_M_next = __next_node;\n-        __next_node->_M_prev = __prev_node;\n-    }\n-\n-    _List_node_base* _M_next;\n-    _List_node_base* _M_prev;\n-};\n-} // namespace detail\n-\n-template ostream& ostream::_M_insert(bool);\n-template ostream& ostream::_M_insert(long);\n-template ostream& ostream::_M_insert(double);\n-template ostream& ostream::_M_insert(unsigned long);\n-template ostream& ostream::_M_insert(const void*);\n-template ostream& __ostream_insert(ostream&, const char*, streamsize);\n-template istream& istream::_M_extract(long&);\n-template istream& istream::_M_extract(unsigned short&);\n-\n-out_of_range::~out_of_range() _GLIBCXX_USE_NOEXCEPT {}\n-\n-length_error::~length_error() _GLIBCXX_USE_NOEXCEPT {}\n-\n-// Used with permission.\n-// See: https://github.com/madlib/madlib/commit/c3db418c0d34d6813608f2137fef1012ce03043d\n-\n-void ctype<char>::_M_widen_init() const\n-{\n-    char __tmp[sizeof(_M_widen)];\n-    for (unsigned __i = 0; __i < sizeof(_M_widen); ++__i)\n-        __tmp[__i] = __i;\n-    do_widen(__tmp, __tmp + sizeof(__tmp), _M_widen);\n-\n-    _M_widen_ok = 1;\n-    // Set _M_widen_ok to 2 if memcpy can't be used.\n-    for (unsigned __i = 0; __i < sizeof(_M_widen); ++__i)\n-        if (__tmp[__i] != _M_widen[__i]) {\n-            _M_widen_ok = 2;\n-            break;\n-        }\n-}\n-\n-void __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__));\n-void __throw_out_of_range_fmt(const char* err, ...)\n-{\n-    // Safe and over-simplified version. Ignore the format and print it as-is.\n-    __throw_out_of_range(err);\n-}\n-\n-} // namespace std"
      }
    ]
  },
  {
    "sha": "3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZGZjZGY0NmMyYzFhMzIyYjY2NDlmMDRlOGM5Y2E3NjM2YzViYWYz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-03T15:30:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-03T15:57:30Z"
      },
      "message": "Merge pull request #5775\n\ndeda3e1 [Qt] remove unused getNumBlocksAtStartup() from ClientModel (Philip Kaufmann)\n47ee8cf [Qt] use qint64 in BitcoinGUI::setNumBlocks (Philip Kaufmann)",
      "tree": {
        "sha": "fba09eb236db25663005b91b68e2b57152ea5b54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fba09eb236db25663005b91b68e2b57152ea5b54"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU9dnqAAoJEHSBCwEjRsmmEwAIAMEP1vNV9b4N5K30TA4xMRjJ\nky/bSTEEyjgltPTQ5xwHyhwZAsLdrcUycaxa8cV8v7NUT8Lk+COpzw0wkLLqysep\nAkULi68UIR0kOQKdulr1ZppwF1iQ5gZf1PkFV4ZnPeolX6JDvZSz/5EsRL0grITA\nMh3eHsMXsWYORhapNMzJCwQrarVS2u17m/R7tG7s/TROJLRfrDJ69zGntL2s4Gvs\n74ZXiCR8ZrfkWCBzjYYnpnbnR2VHgJKZlIRCls2kAsiQlT+TyccMWFgOxWnsJldY\npI7ntdW2aH/dqHOlKP/IZyQLOMmf3m2RM0pphwQMV/HsL0psz/849E3EHsgp1yc=\n=hEkr\n-----END PGP SIGNATURE-----",
        "payload": "tree fba09eb236db25663005b91b68e2b57152ea5b54\nparent f8e68f7bfbaaa830331f37137d0771147b85cf4a\nparent deda3e156d9d424051758eeca9569a90365d2dd5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1425396629 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1425398250 +0100\n\nMerge pull request #5775\n\ndeda3e1 [Qt] remove unused getNumBlocksAtStartup() from ClientModel (Philip Kaufmann)\n47ee8cf [Qt] use qint64 in BitcoinGUI::setNumBlocks (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8e68f7bfbaaa830331f37137d0771147b85cf4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8e68f7bfbaaa830331f37137d0771147b85cf4a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8e68f7bfbaaa830331f37137d0771147b85cf4a"
      },
      {
        "sha": "deda3e156d9d424051758eeca9569a90365d2dd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deda3e156d9d424051758eeca9569a90365d2dd5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/deda3e156d9d424051758eeca9569a90365d2dd5"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 6,
      "deletions": 14
    },
    "files": [
      {
        "sha": "5c5da6dba0b59d3aabc95f64627860d67d2b009d",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3",
        "patch": "@@ -682,7 +682,7 @@ void BitcoinGUI::setNumBlocks(int count)\n \n     QDateTime lastBlockDate = clientModel->getLastBlockDate();\n     QDateTime currentDate = QDateTime::currentDateTime();\n-    int secs = lastBlockDate.secsTo(currentDate);\n+    qint64 secs = lastBlockDate.secsTo(currentDate);\n \n     tooltip = tr(\"Processed %n blocks of transaction history.\", \"\", count);\n \n@@ -722,8 +722,8 @@ void BitcoinGUI::setNumBlocks(int count)\n         }\n         else\n         {\n-            int years = secs / YEAR_IN_SECONDS;\n-            int remainder = secs % YEAR_IN_SECONDS;\n+            qint64 years = secs / YEAR_IN_SECONDS;\n+            qint64 remainder = secs % YEAR_IN_SECONDS;\n             timeBehindText = tr(\"%1 and %2\").arg(tr(\"%n year(s)\", \"\", years)).arg(tr(\"%n week(s)\",\"\", remainder/WEEK_IN_SECONDS));\n         }\n "
      },
      {
        "sha": "729eb84a18190349364bbc1ec78fb7b6dcc6d058",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3",
        "patch": "@@ -29,8 +29,9 @@ ClientModel::ClientModel(OptionsModel *optionsModel, QObject *parent) :\n     optionsModel(optionsModel),\n     peerTableModel(0),\n     cachedNumBlocks(0),\n-    cachedReindexing(0), cachedImporting(0),\n-    numBlocksAtStartup(-1), pollTimer(0)\n+    cachedReindexing(0),\n+    cachedImporting(0),\n+    pollTimer(0)\n {\n     peerTableModel = new PeerTableModel(this);\n     pollTimer = new QTimer(this);\n@@ -65,12 +66,6 @@ int ClientModel::getNumBlocks() const\n     return chainActive.Height();\n }\n \n-int ClientModel::getNumBlocksAtStartup()\n-{\n-    if (numBlocksAtStartup == -1) numBlocksAtStartup = getNumBlocks();\n-    return numBlocksAtStartup;\n-}\n-\n quint64 ClientModel::getTotalBytesRecv() const\n {\n     return CNode::GetTotalBytesRecv();"
      },
      {
        "sha": "7b74728b262e33ef77c7b8b22c58fb2dc640f82e",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3",
        "patch": "@@ -48,7 +48,6 @@ class ClientModel : public QObject\n     //! Return number of connections, default is in- and outbound (total)\n     int getNumConnections(unsigned int flags = CONNECTIONS_ALL) const;\n     int getNumBlocks() const;\n-    int getNumBlocksAtStartup();\n \n     quint64 getTotalBytesRecv() const;\n     quint64 getTotalBytesSent() const;\n@@ -77,8 +76,6 @@ class ClientModel : public QObject\n     bool cachedReindexing;\n     bool cachedImporting;\n \n-    int numBlocksAtStartup;\n-\n     QTimer *pollTimer;\n \n     void subscribeToCoreSignals();"
      }
    ]
  },
  {
    "sha": "723664b5dbc2829ed6988dd90af2d077dd9d555a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjM2NjRiNWRiYzI4MjllZDY5ODhkZDkwYWYyZDA3N2RkOWQ1NTVh",
    "commit": {
      "author": {
        "name": "joshr",
        "email": "joshr@joshr.com",
        "date": "2015-03-03T16:06:41Z"
      },
      "committer": {
        "name": "joshr",
        "email": "joshr@joshr.com",
        "date": "2015-03-03T16:23:54Z"
      },
      "message": "startup script for centos, with documentation.",
      "tree": {
        "sha": "894d5d76fb0b91949a228695c83adfbbe8c3ca26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/894d5d76fb0b91949a228695c83adfbbe8c3ca26"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/723664b5dbc2829ed6988dd90af2d077dd9d555a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/723664b5dbc2829ed6988dd90af2d077dd9d555a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/723664b5dbc2829ed6988dd90af2d077dd9d555a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/723664b5dbc2829ed6988dd90af2d077dd9d555a/comments",
    "author": {
      "login": "joshrabinowitz",
      "id": 699993,
      "node_id": "MDQ6VXNlcjY5OTk5Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/699993?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joshrabinowitz",
      "html_url": "https://github.com/joshrabinowitz",
      "followers_url": "https://api.github.com/users/joshrabinowitz/followers",
      "following_url": "https://api.github.com/users/joshrabinowitz/following{/other_user}",
      "gists_url": "https://api.github.com/users/joshrabinowitz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joshrabinowitz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joshrabinowitz/subscriptions",
      "organizations_url": "https://api.github.com/users/joshrabinowitz/orgs",
      "repos_url": "https://api.github.com/users/joshrabinowitz/repos",
      "events_url": "https://api.github.com/users/joshrabinowitz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joshrabinowitz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "joshrabinowitz",
      "id": 699993,
      "node_id": "MDQ6VXNlcjY5OTk5Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/699993?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joshrabinowitz",
      "html_url": "https://github.com/joshrabinowitz",
      "followers_url": "https://api.github.com/users/joshrabinowitz/followers",
      "following_url": "https://api.github.com/users/joshrabinowitz/following{/other_user}",
      "gists_url": "https://api.github.com/users/joshrabinowitz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joshrabinowitz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joshrabinowitz/subscriptions",
      "organizations_url": "https://api.github.com/users/joshrabinowitz/orgs",
      "repos_url": "https://api.github.com/users/joshrabinowitz/repos",
      "events_url": "https://api.github.com/users/joshrabinowitz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joshrabinowitz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10a3ff07f59f8c02c92286e440e5832045a07596",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10a3ff07f59f8c02c92286e440e5832045a07596",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10a3ff07f59f8c02c92286e440e5832045a07596"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 79,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0d19da30399b0a11be458948974e2b7ab45380a7",
        "filename": "contrib/init/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/723664b5dbc2829ed6988dd90af2d077dd9d555a/contrib/init/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/723664b5dbc2829ed6988dd90af2d077dd9d555a/contrib/init/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/README.md?ref=723664b5dbc2829ed6988dd90af2d077dd9d555a",
        "patch": "@@ -4,6 +4,7 @@ SystemD: bitcoind.service\n Upstart: bitcoind.conf\n OpenRC:  bitcoind.openrc\n          bitcoind.openrcconf\n+CentOS:  bitcoind.init\n \n have been made available to assist packagers in creating node packages here.\n "
      },
      {
        "sha": "db5061874b3a923278fa11d4f3117fca19da1bcc",
        "filename": "contrib/init/bitcoind.init",
        "status": "added",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/723664b5dbc2829ed6988dd90af2d077dd9d555a/contrib/init/bitcoind.init",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/723664b5dbc2829ed6988dd90af2d077dd9d555a/contrib/init/bitcoind.init",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/bitcoind.init?ref=723664b5dbc2829ed6988dd90af2d077dd9d555a",
        "patch": "@@ -0,0 +1,67 @@\n+#!/bin/bash\n+#\n+#  bitcoind The bitcoin core server.\n+#\n+#\n+# chkconfig: 345 80 20\n+# description: bitcoind\n+# processname: bitcoind\n+#\n+\n+# Source function library.\n+. /etc/init.d/functions\n+\n+# you can override defaults in /etc/sysconfig/bitcoind, see below\n+if [ -f /etc/sysconfig/bitcoind ]; then\n+        . /etc/sysconfig/bitcoind\n+fi\n+\n+RETVAL=0\n+\n+prog=bitcoind\n+# you can override the lockfile via BITCOIND_LOCKFILE in /etc/sysconfig/bitcoind\n+lockfile=${BITCOIND_LOCKFILE-/var/lock/subsys/bitcoind}\n+\n+# bitcoind defaults to /usr/bin/bitcoind, override with BITCOIND_BIN\n+bitcoind=${BITCOIND_BIN-/usr/bin/bitcoind}\n+\n+# bitcoind opts default to -disablewallet, override with BITCOIND_OPTS\n+bitcoind_opts=${BITCOIND_OPTS--disablewallet}\n+\n+start() {\n+    echo -n $\"Starting $prog: \"\n+    daemon $DAEMONOPTS $bitcoind $bitcoind_opts\n+    RETVAL=$?\n+    echo\n+    [ $RETVAL -eq 0 ] && touch $lockfile\n+    return $RETVAL\n+}\n+\n+stop() {\n+    echo -n $\"Stopping $prog: \"\n+    killproc $prog\n+    RETVAL=$?\n+    echo\n+    [ $RETVAL -eq 0 ] && rm -f $lockfile\n+    return $RETVAL\n+}\n+\n+case \"$1\" in\n+    start)\n+        start\n+        ;;\n+    stop)\n+        stop\n+        ;;\n+    status)\n+        status $prog\n+        ;;\n+    restart)\n+        stop\n+        start\n+        ;;\n+    *)\n+        echo \"Usage: service $prog {start|stop|status|restart}\"\n+        exit 1\n+        ;;\n+esac"
      },
      {
        "sha": "871bdc812344c235fa0c1e97d5f063cfe829f17b",
        "filename": "doc/init.md",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/723664b5dbc2829ed6988dd90af2d077dd9d555a/doc/init.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/723664b5dbc2829ed6988dd90af2d077dd9d555a/doc/init.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/init.md?ref=723664b5dbc2829ed6988dd90af2d077dd9d555a",
        "patch": "@@ -8,6 +8,7 @@ can be found in the contrib/init folder.\n     contrib/init/bitcoind.openrc:     OpenRC compatible SysV style init script\n     contrib/init/bitcoind.openrcconf: OpenRC conf.d file\n     contrib/init/bitcoind.conf:       Upstart service configuration file\n+    contrib/init/bitcoind.init:       CentOS compatible SysV style init script\n \n 1. Service User\n ---------------------------------\n@@ -49,6 +50,7 @@ Configuration file:  /etc/bitcoin/bitcoin.conf\n Data directory:      /var/lib/bitcoind\n PID file:            /var/run/bitcoind/bitcoind.pid (OpenRC and Upstart)\n                      /var/lib/bitcoind/bitcoind.pid (systemd)\n+Lock file:           /var/lock/subsys/bitcoind (CentOS)\n \n The configuration file, PID directory (if applicable) and data directory\n should all be owned by the bitcoin user and group.  It is advised for security\n@@ -81,7 +83,15 @@ Drop bitcoind.conf in /etc/init.  Test by running \"service bitcoind start\"\n it will automatically start on reboot.\n \n NOTE: This script is incompatible with CentOS 5 and Amazon Linux 2014 as they\n-use old versions of Upstart and do not supply the start-stop-daemon uitility.\n+use old versions of Upstart and do not supply the start-stop-daemon utility.\n+\n+4d) CentOS\n+\n+Copy bitcoind.init to /etc/init.d/bitcoind. Test by running \"service bitcoind start\".\n+\n+Using this script, you can adjust the path and flags to the bitcoind program by \n+setting the BITCOIND and FLAGS environment variables in the file \n+/etc/sysconfig/bitcoind. You can also use the DAEMONOPTS environment variable here.\n \n 5. Auto-respawn\n -----------------------------------"
      }
    ]
  },
  {
    "sha": "51598b26319bf1ee98b399dee8152b902c62891a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTU5OGIyNjMxOWJmMWVlOThiMzk5ZGVlODE1MmI5MDJjNjI4OTFh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-03T15:49:12Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-03T17:01:46Z"
      },
      "message": "Reinitialize state in between individual unit tests.\n\nThis changes the TestingSetup fixture to be per-unit-test rather than global.\nMost tests don't need it, so it's only invoked in a few.",
      "tree": {
        "sha": "21805efdbe19e67f3ed953695cb5f27c9d4ff4fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21805efdbe19e67f3ed953695cb5f27c9d4ff4fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51598b26319bf1ee98b399dee8152b902c62891a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51598b26319bf1ee98b399dee8152b902c62891a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/51598b26319bf1ee98b399dee8152b902c62891a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51598b26319bf1ee98b399dee8152b902c62891a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86eb461c5bbe8200ab066f75b5acdf79fbae1086",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86eb461c5bbe8200ab066f75b5acdf79fbae1086",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86eb461c5bbe8200ab066f75b5acdf79fbae1086"
      }
    ],
    "stats": {
      "total": 185,
      "additions": 124,
      "deletions": 61
    },
    "files": [
      {
        "sha": "517cd7ea21d35d0deceb2f2a0336aeb15a90c9e6",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51598b26319bf1ee98b399dee8152b902c62891a/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51598b26319bf1ee98b399dee8152b902c62891a/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=51598b26319bf1ee98b399dee8152b902c62891a",
        "patch": "@@ -65,6 +65,7 @@ BITCOIN_TESTS =\\\n   test/sigopcount_tests.cpp \\\n   test/skiplist_tests.cpp \\\n   test/test_bitcoin.cpp \\\n+  test/test_bitcoin.h \\\n   test/timedata_tests.cpp \\\n   test/transaction_tests.cpp \\\n   test/uint256_tests.cpp \\"
      },
      {
        "sha": "36946b7dcca255e08a00529f441a2787227386d2",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 34,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51598b26319bf1ee98b399dee8152b902c62891a/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51598b26319bf1ee98b399dee8152b902c62891a/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=51598b26319bf1ee98b399dee8152b902c62891a",
        "patch": "@@ -39,22 +39,31 @@ void CDBEnv::EnvShutdown()\n         return;\n \n     fDbEnvInit = false;\n-    int ret = dbenv.close(0);\n+    int ret = dbenv->close(0);\n     if (ret != 0)\n         LogPrintf(\"CDBEnv::EnvShutdown: Error %d shutting down database environment: %s\\n\", ret, DbEnv::strerror(ret));\n     if (!fMockDb)\n         DbEnv(0).remove(path.string().c_str(), 0);\n }\n \n-CDBEnv::CDBEnv() : dbenv(DB_CXX_NO_EXCEPTIONS)\n+void CDBEnv::Reset()\n {\n+    delete dbenv;\n+    dbenv = new DbEnv(DB_CXX_NO_EXCEPTIONS);\n     fDbEnvInit = false;\n     fMockDb = false;\n }\n \n+CDBEnv::CDBEnv() : dbenv(NULL)\n+{\n+    Reset();\n+}\n+\n CDBEnv::~CDBEnv()\n {\n     EnvShutdown();\n+    delete dbenv;\n+    dbenv = NULL;\n }\n \n void CDBEnv::Close()\n@@ -79,17 +88,17 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n     if (GetBoolArg(\"-privdb\", true))\n         nEnvFlags |= DB_PRIVATE;\n \n-    dbenv.set_lg_dir(pathLogDir.string().c_str());\n-    dbenv.set_cachesize(0, 0x100000, 1); // 1 MiB should be enough for just the wallet\n-    dbenv.set_lg_bsize(0x10000);\n-    dbenv.set_lg_max(1048576);\n-    dbenv.set_lk_max_locks(40000);\n-    dbenv.set_lk_max_objects(40000);\n-    dbenv.set_errfile(fopen(pathErrorFile.string().c_str(), \"a\")); /// debug\n-    dbenv.set_flags(DB_AUTO_COMMIT, 1);\n-    dbenv.set_flags(DB_TXN_WRITE_NOSYNC, 1);\n-    dbenv.log_set_config(DB_LOG_AUTO_REMOVE, 1);\n-    int ret = dbenv.open(path.string().c_str(),\n+    dbenv->set_lg_dir(pathLogDir.string().c_str());\n+    dbenv->set_cachesize(0, 0x100000, 1); // 1 MiB should be enough for just the wallet\n+    dbenv->set_lg_bsize(0x10000);\n+    dbenv->set_lg_max(1048576);\n+    dbenv->set_lk_max_locks(40000);\n+    dbenv->set_lk_max_objects(40000);\n+    dbenv->set_errfile(fopen(pathErrorFile.string().c_str(), \"a\")); /// debug\n+    dbenv->set_flags(DB_AUTO_COMMIT, 1);\n+    dbenv->set_flags(DB_TXN_WRITE_NOSYNC, 1);\n+    dbenv->log_set_config(DB_LOG_AUTO_REMOVE, 1);\n+    int ret = dbenv->open(path.string().c_str(),\n                          DB_CREATE |\n                              DB_INIT_LOCK |\n                              DB_INIT_LOG |\n@@ -116,14 +125,14 @@ void CDBEnv::MakeMock()\n \n     LogPrint(\"db\", \"CDBEnv::MakeMock\\n\");\n \n-    dbenv.set_cachesize(1, 0, 1);\n-    dbenv.set_lg_bsize(10485760 * 4);\n-    dbenv.set_lg_max(10485760);\n-    dbenv.set_lk_max_locks(10000);\n-    dbenv.set_lk_max_objects(10000);\n-    dbenv.set_flags(DB_AUTO_COMMIT, 1);\n-    dbenv.log_set_config(DB_LOG_IN_MEMORY, 1);\n-    int ret = dbenv.open(NULL,\n+    dbenv->set_cachesize(1, 0, 1);\n+    dbenv->set_lg_bsize(10485760 * 4);\n+    dbenv->set_lg_max(10485760);\n+    dbenv->set_lk_max_locks(10000);\n+    dbenv->set_lk_max_objects(10000);\n+    dbenv->set_flags(DB_AUTO_COMMIT, 1);\n+    dbenv->log_set_config(DB_LOG_IN_MEMORY, 1);\n+    int ret = dbenv->open(NULL,\n                          DB_CREATE |\n                              DB_INIT_LOCK |\n                              DB_INIT_LOG |\n@@ -144,7 +153,7 @@ CDBEnv::VerifyResult CDBEnv::Verify(std::string strFile, bool (*recoverFunc)(CDB\n     LOCK(cs_db);\n     assert(mapFileUseCount.count(strFile) == 0);\n \n-    Db db(&dbenv, 0);\n+    Db db(dbenv, 0);\n     int result = db.verify(strFile.c_str(), NULL, NULL, 0);\n     if (result == 0)\n         return VERIFY_OK;\n@@ -167,7 +176,7 @@ bool CDBEnv::Salvage(std::string strFile, bool fAggressive, std::vector<CDBEnv::\n \n     stringstream strDump;\n \n-    Db db(&dbenv, 0);\n+    Db db(dbenv, 0);\n     int result = db.verify(strFile.c_str(), NULL, &strDump, flags);\n     if (result == DB_VERIFY_BAD) {\n         LogPrintf(\"CDBEnv::Salvage: Database salvage found errors, all data may not be recoverable.\\n\");\n@@ -208,10 +217,10 @@ bool CDBEnv::Salvage(std::string strFile, bool fAggressive, std::vector<CDBEnv::\n \n void CDBEnv::CheckpointLSN(const std::string& strFile)\n {\n-    dbenv.txn_checkpoint(0, 0, 0);\n+    dbenv->txn_checkpoint(0, 0, 0);\n     if (fMockDb)\n         return;\n-    dbenv.lsn_reset(strFile.c_str(), 0);\n+    dbenv->lsn_reset(strFile.c_str(), 0);\n }\n \n \n@@ -237,7 +246,7 @@ CDB::CDB(const std::string& strFilename, const char* pszMode, bool fFlushOnClose\n         ++bitdb.mapFileUseCount[strFile];\n         pdb = bitdb.mapDb[strFile];\n         if (pdb == NULL) {\n-            pdb = new Db(&bitdb.dbenv, 0);\n+            pdb = new Db(bitdb.dbenv, 0);\n \n             bool fMockDb = bitdb.IsMock();\n             if (fMockDb) {\n@@ -284,7 +293,7 @@ void CDB::Flush()\n     if (fReadOnly)\n         nMinutes = 1;\n \n-    bitdb.dbenv.txn_checkpoint(nMinutes ? GetArg(\"-dblogsize\", 100) * 1024 : 0, nMinutes, 0);\n+    bitdb.dbenv->txn_checkpoint(nMinutes ? GetArg(\"-dblogsize\", 100) * 1024 : 0, nMinutes, 0);\n }\n \n void CDB::Close()\n@@ -324,7 +333,7 @@ bool CDBEnv::RemoveDb(const string& strFile)\n     this->CloseDb(strFile);\n \n     LOCK(cs_db);\n-    int rc = dbenv.dbremove(NULL, strFile.c_str(), NULL, DB_AUTO_COMMIT);\n+    int rc = dbenv->dbremove(NULL, strFile.c_str(), NULL, DB_AUTO_COMMIT);\n     return (rc == 0);\n }\n \n@@ -344,7 +353,7 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                 string strFileRes = strFile + \".rewrite\";\n                 { // surround usage of db with extra {}\n                     CDB db(strFile.c_str(), \"r\");\n-                    Db* pdbCopy = new Db(&bitdb.dbenv, 0);\n+                    Db* pdbCopy = new Db(bitdb.dbenv, 0);\n \n                     int ret = pdbCopy->open(NULL,               // Txn pointer\n                                             strFileRes.c_str(), // Filename\n@@ -394,10 +403,10 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                     }\n                 }\n                 if (fSuccess) {\n-                    Db dbA(&bitdb.dbenv, 0);\n+                    Db dbA(bitdb.dbenv, 0);\n                     if (dbA.remove(strFile.c_str(), NULL, 0))\n                         fSuccess = false;\n-                    Db dbB(&bitdb.dbenv, 0);\n+                    Db dbB(bitdb.dbenv, 0);\n                     if (dbB.rename(strFileRes.c_str(), NULL, strFile.c_str(), 0))\n                         fSuccess = false;\n                 }\n@@ -430,10 +439,10 @@ void CDBEnv::Flush(bool fShutdown)\n                 // Move log data to the dat file\n                 CloseDb(strFile);\n                 LogPrint(\"db\", \"CDBEnv::Flush: %s checkpoint\\n\", strFile);\n-                dbenv.txn_checkpoint(0, 0, 0);\n+                dbenv->txn_checkpoint(0, 0, 0);\n                 LogPrint(\"db\", \"CDBEnv::Flush: %s detach\\n\", strFile);\n                 if (!fMockDb)\n-                    dbenv.lsn_reset(strFile.c_str(), 0);\n+                    dbenv->lsn_reset(strFile.c_str(), 0);\n                 LogPrint(\"db\", \"CDBEnv::Flush: %s closed\\n\", strFile);\n                 mapFileUseCount.erase(mi++);\n             } else\n@@ -443,7 +452,7 @@ void CDBEnv::Flush(bool fShutdown)\n         if (fShutdown) {\n             char** listp;\n             if (mapFileUseCount.empty()) {\n-                dbenv.log_archive(&listp, DB_ARCH_REMOVE);\n+                dbenv->log_archive(&listp, DB_ARCH_REMOVE);\n                 Close();\n                 if (!fMockDb)\n                     boost::filesystem::remove_all(path / \"database\");"
      },
      {
        "sha": "71133f969914ae47559f15a5ecf07e30a1644526",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51598b26319bf1ee98b399dee8152b902c62891a/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51598b26319bf1ee98b399dee8152b902c62891a/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=51598b26319bf1ee98b399dee8152b902c62891a",
        "patch": "@@ -39,12 +39,14 @@ class CDBEnv\n \n public:\n     mutable CCriticalSection cs_db;\n-    DbEnv dbenv;\n+    DbEnv *dbenv;\n     std::map<std::string, int> mapFileUseCount;\n     std::map<std::string, Db*> mapDb;\n \n     CDBEnv();\n     ~CDBEnv();\n+    void Reset();\n+\n     void MakeMock();\n     bool IsMock() { return fMockDb; }\n \n@@ -79,7 +81,7 @@ class CDBEnv\n     DbTxn* TxnBegin(int flags = DB_TXN_WRITE_NOSYNC)\n     {\n         DbTxn* ptxn = NULL;\n-        int ret = dbenv.txn_begin(NULL, &ptxn, flags);\n+        int ret = dbenv->txn_begin(NULL, &ptxn, flags);\n         if (!ptxn || ret != 0)\n             return NULL;\n         return ptxn;"
      },
      {
        "sha": "d945ece417f4a68ceb1115edebf80c30516f86c4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 2,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51598b26319bf1ee98b399dee8152b902c62891a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51598b26319bf1ee98b399dee8152b902c62891a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=51598b26319bf1ee98b399dee8152b902c62891a",
        "patch": "@@ -54,7 +54,6 @@ bool fTxIndex = false;\n bool fIsBareMultisigStd = true;\n unsigned int nCoinCacheSize = 5000;\n \n-\n /** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n CFeeRate minRelayTxFee = CFeeRate(1000);\n \n@@ -3085,10 +3084,31 @@ bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth\n \n void UnloadBlockIndex()\n {\n-    mapBlockIndex.clear();\n+    LOCK(cs_main);\n     setBlockIndexCandidates.clear();\n     chainActive.SetTip(NULL);\n     pindexBestInvalid = NULL;\n+    pindexBestHeader = NULL;\n+    mempool.clear();\n+    mapOrphanTransactions.clear();\n+    mapOrphanTransactionsByPrev.clear();\n+    nSyncStarted = 0;\n+    mapBlocksUnlinked.clear();\n+    vinfoBlockFile.clear();\n+    nLastBlockFile = 0;\n+    nBlockSequenceId = 1;\n+    mapBlockSource.clear();\n+    mapBlocksInFlight.clear();\n+    nQueuedValidatedHeaders = 0;\n+    nPreferredDownload = 0;\n+    setDirtyBlockIndex.clear();\n+    setDirtyFileInfo.clear();\n+    mapNodeState.clear();\n+\n+    BOOST_FOREACH(BlockMap::value_type& entry, mapBlockIndex) {\n+        delete entry.second;\n+    }\n+    mapBlockIndex.clear();\n }\n \n bool LoadBlockIndex()"
      },
      {
        "sha": "bf255487550cb2fee2ac1f939f93ab2e5d02439e",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51598b26319bf1ee98b399dee8152b902c62891a/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51598b26319bf1ee98b399dee8152b902c62891a/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=51598b26319bf1ee98b399dee8152b902c62891a",
        "patch": "@@ -16,6 +16,8 @@\n #include \"serialize.h\"\n #include \"util.h\"\n \n+#include \"test/test_bitcoin.h\"\n+\n #include <stdint.h>\n \n #include <boost/assign/list_of.hpp> // for 'map_list_of()'\n@@ -41,7 +43,7 @@ CService ip(uint32_t i)\n     return CService(CNetAddr(s), Params().GetDefaultPort());\n }\n \n-BOOST_AUTO_TEST_SUITE(DoS_tests)\n+BOOST_FIXTURE_TEST_SUITE(DoS_tests, TestingSetup)\n \n BOOST_AUTO_TEST_CASE(DoS_banning)\n {"
      },
      {
        "sha": "36499f01a7b0d77ea2cb884852f30cf9e1092713",
        "filename": "src/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51598b26319bf1ee98b399dee8152b902c62891a/src/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51598b26319bf1ee98b399dee8152b902c62891a/src/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/accounting_tests.cpp?ref=51598b26319bf1ee98b399dee8152b902c62891a",
        "patch": "@@ -5,14 +5,16 @@\n #include \"wallet.h\"\n #include \"walletdb.h\"\n \n+#include \"test/test_bitcoin.h\"\n+\n #include <stdint.h>\n \n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n extern CWallet* pwalletMain;\n \n-BOOST_AUTO_TEST_SUITE(accounting_tests)\n+BOOST_FIXTURE_TEST_SUITE(accounting_tests, TestingSetup)\n \n static void\n GetResults(CWalletDB& walletdb, std::map<CAmount, CAccountingEntry>& results)"
      },
      {
        "sha": "5e1f5f0294e2feebd4f54c03d040ad5d32fe3806",
        "filename": "src/test/alert_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51598b26319bf1ee98b399dee8152b902c62891a/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51598b26319bf1ee98b399dee8152b902c62891a/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=51598b26319bf1ee98b399dee8152b902c62891a",
        "patch": "@@ -15,6 +15,8 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n+#include \"test/test_bitcoin.h\"\n+\n #include <fstream>\n \n #include <boost/filesystem/operations.hpp>\n@@ -78,7 +80,7 @@\n }\n #endif\n \n-struct ReadAlerts\n+struct ReadAlerts : public TestingSetup\n {\n     ReadAlerts()\n     {"
      },
      {
        "sha": "6ab9cb8a440b3c779a28979deab2c53d2ab6a936",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51598b26319bf1ee98b399dee8152b902c62891a/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51598b26319bf1ee98b399dee8152b902c62891a/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=51598b26319bf1ee98b399dee8152b902c62891a",
        "patch": "@@ -8,9 +8,11 @@\n #include \"uint256.h\"\n #include \"util.h\"\n \n+#include \"test/test_bitcoin.h\"\n+\n #include <boost/test/unit_test.hpp>\n \n-BOOST_AUTO_TEST_SUITE(miner_tests)\n+BOOST_FIXTURE_TEST_SUITE(miner_tests, TestingSetup)\n \n static\n struct {"
      },
      {
        "sha": "45cb551d04aa59e4bb1c278bcfa43bf145a9e698",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51598b26319bf1ee98b399dee8152b902c62891a/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51598b26319bf1ee98b399dee8152b902c62891a/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=51598b26319bf1ee98b399dee8152b902c62891a",
        "patch": "@@ -8,6 +8,8 @@\n #include \"base58.h\"\n #include \"netbase.h\"\n \n+#include \"test/test_bitcoin.h\"\n+\n #include <boost/algorithm/string.hpp>\n #include <boost/test/unit_test.hpp>\n \n@@ -45,7 +47,7 @@ Value CallRPC(string args)\n }\n \n \n-BOOST_AUTO_TEST_SUITE(rpc_tests)\n+BOOST_FIXTURE_TEST_SUITE(rpc_tests, TestingSetup)\n \n BOOST_AUTO_TEST_CASE(rpc_rawparams)\n {"
      },
      {
        "sha": "44475076b3c4faaa2094454c667a35a72cd843a9",
        "filename": "src/test/rpc_wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51598b26319bf1ee98b399dee8152b902c62891a/src/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51598b26319bf1ee98b399dee8152b902c62891a/src/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_wallet_tests.cpp?ref=51598b26319bf1ee98b399dee8152b902c62891a",
        "patch": "@@ -8,6 +8,8 @@\n #include \"base58.h\"\n #include \"wallet.h\"\n \n+#include \"test/test_bitcoin.h\"\n+\n #include <boost/algorithm/string.hpp>\n #include <boost/test/unit_test.hpp>\n \n@@ -19,7 +21,7 @@ extern Value CallRPC(string args);\n \n extern CWallet* pwalletMain;\n \n-BOOST_AUTO_TEST_SUITE(rpc_wallet_tests)\n+BOOST_FIXTURE_TEST_SUITE(rpc_wallet_tests, TestingSetup)\n \n BOOST_AUTO_TEST_CASE(rpc_addmultisig)\n {"
      },
      {
        "sha": "5df417b8e5e4793775dee5824e96af7d44828b00",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51598b26319bf1ee98b399dee8152b902c62891a/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51598b26319bf1ee98b399dee8152b902c62891a/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=51598b26319bf1ee98b399dee8152b902c62891a",
        "patch": "@@ -4,6 +4,8 @@\n \n #define BOOST_TEST_MODULE Bitcoin Test Suite\n \n+#include \"test_bitcoin.h\"\n+\n #include \"main.h\"\n #include \"random.h\"\n #include \"txdb.h\"\n@@ -24,18 +26,15 @@ CWallet* pwalletMain;\n extern bool fPrintToConsole;\n extern void noui_connect();\n \n-struct TestingSetup {\n-    CCoinsViewDB *pcoinsdbview;\n-    boost::filesystem::path pathTemp;\n-    boost::thread_group threadGroup;\n-\n-    TestingSetup() {\n+TestingSetup::TestingSetup()\n+{\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n         SelectParams(CBaseChainParams::UNITTEST);\n         noui_connect();\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();\n #endif\n+        ClearDatadirCache();\n         pathTemp = GetTempPath() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(GetRand(100000)));\n         boost::filesystem::create_directories(pathTemp);\n         mapArgs[\"-datadir\"] = pathTemp.string();\n@@ -53,27 +52,28 @@ struct TestingSetup {\n         for (int i=0; i < nScriptCheckThreads-1; i++)\n             threadGroup.create_thread(&ThreadScriptCheck);\n         RegisterNodeSignals(GetNodeSignals());\n-    }\n-    ~TestingSetup()\n-    {\n+}\n+\n+TestingSetup::~TestingSetup()\n+{\n+        UnregisterNodeSignals(GetNodeSignals());\n         threadGroup.interrupt_all();\n         threadGroup.join_all();\n-        UnregisterNodeSignals(GetNodeSignals());\n #ifdef ENABLE_WALLET\n+        UnregisterValidationInterface(pwalletMain);\n         delete pwalletMain;\n         pwalletMain = NULL;\n #endif\n+        UnloadBlockIndex();\n         delete pcoinsTip;\n         delete pcoinsdbview;\n         delete pblocktree;\n #ifdef ENABLE_WALLET\n         bitdb.Flush(true);\n+        bitdb.Reset();\n #endif\n         boost::filesystem::remove_all(pathTemp);\n-    }\n-};\n-\n-BOOST_GLOBAL_FIXTURE(TestingSetup);\n+}\n \n void Shutdown(void* parg)\n {"
      },
      {
        "sha": "c1448dcdebe08e4db90f0f83e52148a770747247",
        "filename": "src/test/test_bitcoin.h",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51598b26319bf1ee98b399dee8152b902c62891a/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51598b26319bf1ee98b399dee8152b902c62891a/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=51598b26319bf1ee98b399dee8152b902c62891a",
        "patch": "@@ -0,0 +1,18 @@\n+#ifndef BITCOIN_TEST_TEST_BITCOIN_H\n+#define BITCOIN_TEST_TEST_BITCOIN_H\n+\n+#include \"txdb.h\"\n+\n+#include <boost/filesystem.hpp>\n+#include <boost/thread.hpp>\n+\n+struct TestingSetup {\n+    CCoinsViewDB *pcoinsdbview;\n+    boost::filesystem::path pathTemp;\n+    boost::thread_group threadGroup;\n+\n+    TestingSetup();\n+    ~TestingSetup();\n+};\n+\n+#endif"
      },
      {
        "sha": "4d0cb7136e9e97ccfc055c2efa0db4041d6dfc1a",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51598b26319bf1ee98b399dee8152b902c62891a/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51598b26319bf1ee98b399dee8152b902c62891a/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=51598b26319bf1ee98b399dee8152b902c62891a",
        "patch": "@@ -94,6 +94,7 @@ bool RenameOver(boost::filesystem::path src, boost::filesystem::path dest);\n bool TryCreateDirectory(const boost::filesystem::path& p);\n boost::filesystem::path GetDefaultDataDir();\n const boost::filesystem::path &GetDataDir(bool fNetSpecific = true);\n+void ClearDatadirCache();\n boost::filesystem::path GetConfigFile();\n #ifndef WIN32\n boost::filesystem::path GetPidFile();"
      },
      {
        "sha": "ddec57d9a90ce5212e9cf88bc8f456847a1b4658",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51598b26319bf1ee98b399dee8152b902c62891a/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51598b26319bf1ee98b399dee8152b902c62891a/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=51598b26319bf1ee98b399dee8152b902c62891a",
        "patch": "@@ -903,8 +903,8 @@ bool CWalletDB::Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys)\n     int64_t now = GetTime();\n     std::string newFilename = strprintf(\"wallet.%d.bak\", now);\n \n-    int result = dbenv.dbenv.dbrename(NULL, filename.c_str(), NULL,\n-                                      newFilename.c_str(), DB_AUTO_COMMIT);\n+    int result = dbenv.dbenv->dbrename(NULL, filename.c_str(), NULL,\n+                                       newFilename.c_str(), DB_AUTO_COMMIT);\n     if (result == 0)\n         LogPrintf(\"Renamed %s to %s\\n\", filename, newFilename);\n     else\n@@ -923,7 +923,7 @@ bool CWalletDB::Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys)\n     LogPrintf(\"Salvage(aggressive) found %u records\\n\", salvagedData.size());\n \n     bool fSuccess = allOK;\n-    boost::scoped_ptr<Db> pdbCopy(new Db(&dbenv.dbenv, 0));\n+    boost::scoped_ptr<Db> pdbCopy(new Db(dbenv.dbenv, 0));\n     int ret = pdbCopy->open(NULL,               // Txn pointer\n                             filename.c_str(),   // Filename\n                             \"main\",             // Logical db name"
      }
    ]
  },
  {
    "sha": "90a43c1e93318584d5443b513c2c0e937acb966a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MGE0M2MxZTkzMzE4NTg0ZDU0NDNiNTEzYzJjMGU5MzdhY2I5NjZh",
    "commit": {
      "author": {
        "name": "Cozz Lovan",
        "email": "cozzlovan@yahoo.com",
        "date": "2014-06-10T01:14:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-05T12:25:12Z"
      },
      "message": "[Qt] Code-movement-only: Format confirmation message in sendcoinsdialog",
      "tree": {
        "sha": "4ac3b6cac10908da18961d6423dc5bb6aad6a517",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ac3b6cac10908da18961d6423dc5bb6aad6a517"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90a43c1e93318584d5443b513c2c0e937acb966a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90a43c1e93318584d5443b513c2c0e937acb966a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90a43c1e93318584d5443b513c2c0e937acb966a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90a43c1e93318584d5443b513c2c0e937acb966a/comments",
    "author": {
      "login": "cozz",
      "id": 2814559,
      "node_id": "MDQ6VXNlcjI4MTQ1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2814559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cozz",
      "html_url": "https://github.com/cozz",
      "followers_url": "https://api.github.com/users/cozz/followers",
      "following_url": "https://api.github.com/users/cozz/following{/other_user}",
      "gists_url": "https://api.github.com/users/cozz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cozz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cozz/subscriptions",
      "organizations_url": "https://api.github.com/users/cozz/orgs",
      "repos_url": "https://api.github.com/users/cozz/repos",
      "events_url": "https://api.github.com/users/cozz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cozz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 30,
      "deletions": 29
    },
    "files": [
      {
        "sha": "4338e58e260c283b010315e1afc162dfc24a55c9",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 29,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90a43c1e93318584d5443b513c2c0e937acb966a/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90a43c1e93318584d5443b513c2c0e937acb966a/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=90a43c1e93318584d5443b513c2c0e937acb966a",
        "patch": "@@ -220,6 +220,36 @@ void SendCoinsDialog::on_sendButton_clicked()\n         return;\n     }\n \n+    fNewRecipientAllowed = false;\n+\n+\n+    WalletModel::UnlockContext ctx(model->requestUnlock());\n+    if(!ctx.isValid())\n+    {\n+        // Unlock wallet was cancelled\n+        fNewRecipientAllowed = true;\n+        return;\n+    }\n+\n+    // prepare transaction for getting txFee earlier\n+    WalletModelTransaction currentTransaction(recipients);\n+    WalletModel::SendCoinsReturn prepareStatus;\n+    if (model->getOptionsModel()->getCoinControlFeatures()) // coin control enabled\n+        prepareStatus = model->prepareTransaction(currentTransaction, CoinControlDialog::coinControl);\n+    else\n+        prepareStatus = model->prepareTransaction(currentTransaction);\n+\n+    // process prepareStatus and on error generate message shown to user\n+    processSendCoinsReturn(prepareStatus,\n+        BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), currentTransaction.getTransactionFee()));\n+\n+    if(prepareStatus.status != WalletModel::OK) {\n+        fNewRecipientAllowed = true;\n+        return;\n+    }\n+\n+    CAmount txFee = currentTransaction.getTransactionFee();\n+\n     // Format confirmation message\n     QStringList formatted;\n     foreach(const SendCoinsRecipient &rcp, recipients)\n@@ -257,35 +287,6 @@ void SendCoinsDialog::on_sendButton_clicked()\n         formatted.append(recipientElement);\n     }\n \n-    fNewRecipientAllowed = false;\n-\n-\n-    WalletModel::UnlockContext ctx(model->requestUnlock());\n-    if(!ctx.isValid())\n-    {\n-        // Unlock wallet was cancelled\n-        fNewRecipientAllowed = true;\n-        return;\n-    }\n-\n-    // prepare transaction for getting txFee earlier\n-    WalletModelTransaction currentTransaction(recipients);\n-    WalletModel::SendCoinsReturn prepareStatus;\n-    if (model->getOptionsModel()->getCoinControlFeatures()) // coin control enabled\n-        prepareStatus = model->prepareTransaction(currentTransaction, CoinControlDialog::coinControl);\n-    else\n-        prepareStatus = model->prepareTransaction(currentTransaction);\n-\n-    // process prepareStatus and on error generate message shown to user\n-    processSendCoinsReturn(prepareStatus,\n-        BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), currentTransaction.getTransactionFee()));\n-\n-    if(prepareStatus.status != WalletModel::OK) {\n-        fNewRecipientAllowed = true;\n-        return;\n-    }\n-\n-    CAmount txFee = currentTransaction.getTransactionFee();\n     QString questionString = tr(\"Are you sure you want to send?\");\n     questionString.append(\"<br /><br />%1\");\n "
      }
    ]
  },
  {
    "sha": "215475aa0024e48f91e26be09f7e9c25e72717d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTU0NzVhYTAwMjRlNDhmOTFlMjZiZTA5ZjdlOWMyNWU3MjcxN2Qz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-05T13:41:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-05T13:42:20Z"
      },
      "message": "Merge pull request #5830\n\n6f1274c qt: Don't save geometry for options and about/help window (Wladimir J. van der Laan)",
      "tree": {
        "sha": "0266daad49ef670a16f368b94b44b242639e9c4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0266daad49ef670a16f368b94b44b242639e9c4a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/215475aa0024e48f91e26be09f7e9c25e72717d3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU+F08AAoJEHSBCwEjRsmmsPwH/AgrtEL9GJbrO6xbdfYQhxDy\nvmPMamamxcdYus5ETBrpogjQiM88CrlyFWEVFX8LrKC5pBUQrzfpPsMlBM7ng2Nk\nekH2oYjyn2Rp3EAdLp9rMSUgwLb8hjHAIe5b6EE1FE09nwmeXkoTE8UqCZmN7OMW\nK0Pj4w2H1j8fxy0KC+oDNpnDPE6rL4JUsFatsLmAgdaQ7AWnbQn4+wPBpXXFPRgv\ngN/eyrUDkHDqd9YgKpBAy7+6/MDtFzYv+JWqsJ3u3YTUqPNmt5MVoq59vLFXbQMV\nwXT4KLiMA5wIDrmr4M4XUcr1OZUvt8DwJfgrYQ8Lry+TVMToER/7+SP39OQS3A4=\n=NsgX\n-----END PGP SIGNATURE-----",
        "payload": "tree 0266daad49ef670a16f368b94b44b242639e9c4a\nparent 3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3\nparent 6f1274c8c9cf3e9361aa149f6d271caf3e016991\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1425562919 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1425562940 +0100\n\nMerge pull request #5830\n\n6f1274c qt: Don't save geometry for options and about/help window (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/215475aa0024e48f91e26be09f7e9c25e72717d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/215475aa0024e48f91e26be09f7e9c25e72717d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/215475aa0024e48f91e26be09f7e9c25e72717d3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3"
      },
      {
        "sha": "6f1274c8c9cf3e9361aa149f6d271caf3e016991",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f1274c8c9cf3e9361aa149f6d271caf3e016991",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f1274c8c9cf3e9361aa149f6d271caf3e016991"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 0,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a342b4bfea40f03012fbe9e0afc396328ce28b2d",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/215475aa0024e48f91e26be09f7e9c25e72717d3/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/215475aa0024e48f91e26be09f7e9c25e72717d3/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=215475aa0024e48f91e26be09f7e9c25e72717d3",
        "patch": "@@ -38,7 +38,6 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     fProxyIpValid(true)\n {\n     ui->setupUi(this);\n-    GUIUtil::restoreWindowGeometry(\"nOptionsDialogWindow\", this->size(), this);\n \n     /* Main elements init */\n     ui->databaseCache->setMinimum(nMinDbCache);\n@@ -117,7 +116,6 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n \n OptionsDialog::~OptionsDialog()\n {\n-    GUIUtil::saveWindowGeometry(\"nOptionsDialogWindow\", this);\n     delete ui;\n }\n "
      },
      {
        "sha": "4e7b70efe6bbff7d5d9d97bde913bc1b0a6ffd57",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/215475aa0024e48f91e26be09f7e9c25e72717d3/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/215475aa0024e48f91e26be09f7e9c25e72717d3/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=215475aa0024e48f91e26be09f7e9c25e72717d3",
        "patch": "@@ -29,7 +29,6 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n     ui(new Ui::HelpMessageDialog)\n {\n     ui->setupUi(this);\n-    GUIUtil::restoreWindowGeometry(\"nHelpMessageDialogWindow\", this->size(), this);\n \n     QString version = tr(\"Bitcoin Core\") + \" \" + tr(\"version\") + \" \" + QString::fromStdString(FormatFullVersion());\n     /* On x86 add a bit specifier to the version so that users can distinguish between\n@@ -143,7 +142,6 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n \n HelpMessageDialog::~HelpMessageDialog()\n {\n-    GUIUtil::saveWindowGeometry(\"nHelpMessageDialogWindow\", this);\n     delete ui;\n }\n "
      }
    ]
  },
  {
    "sha": "84a05b843b8ab704266289de67c9779ad733a196",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NGEwNWI4NDNiOGFiNzA0MjY2Mjg5ZGU2N2M5Nzc5YWQ3MzNhMTk2",
    "commit": {
      "author": {
        "name": "Rob Van Mieghem",
        "email": "rob@vanmieghemcloud.com",
        "date": "2015-03-03T07:42:52Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-03-05T17:20:49Z"
      },
      "message": "QT: remove unused parameter",
      "tree": {
        "sha": "98b09c74d7a7b72de4ad9d1d8bcdcc133a46cd6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/98b09c74d7a7b72de4ad9d1d8bcdcc133a46cd6c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84a05b843b8ab704266289de67c9779ad733a196",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlT4kHEACgkQdYgkL74406gbGgCgxAHb4iL1W+0ac85nBQBdeCFm\nflUAn2JxJCjWMZ0wtrFaaITGjogB03Se\n=oMJo\n-----END PGP SIGNATURE-----",
        "payload": "tree 98b09c74d7a7b72de4ad9d1d8bcdcc133a46cd6c\nparent 215475aa0024e48f91e26be09f7e9c25e72717d3\nauthor Rob Van Mieghem <rob@vanmieghemcloud.com> 1425368572 +0100\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1425576049 -0500\n\nQT: remove unused parameter\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84a05b843b8ab704266289de67c9779ad733a196",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/84a05b843b8ab704266289de67c9779ad733a196",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84a05b843b8ab704266289de67c9779ad733a196/comments",
    "author": {
      "login": "robvanmieghem",
      "id": 3511318,
      "node_id": "MDQ6VXNlcjM1MTEzMTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3511318?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robvanmieghem",
      "html_url": "https://github.com/robvanmieghem",
      "followers_url": "https://api.github.com/users/robvanmieghem/followers",
      "following_url": "https://api.github.com/users/robvanmieghem/following{/other_user}",
      "gists_url": "https://api.github.com/users/robvanmieghem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robvanmieghem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robvanmieghem/subscriptions",
      "organizations_url": "https://api.github.com/users/robvanmieghem/orgs",
      "repos_url": "https://api.github.com/users/robvanmieghem/repos",
      "events_url": "https://api.github.com/users/robvanmieghem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robvanmieghem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "215475aa0024e48f91e26be09f7e9c25e72717d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/215475aa0024e48f91e26be09f7e9c25e72717d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/215475aa0024e48f91e26be09f7e9c25e72717d3"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "a0dcb46e27f49d10cc6a489f825220fb0cc6ab23",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84a05b843b8ab704266289de67c9779ad733a196/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84a05b843b8ab704266289de67c9779ad733a196/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=84a05b843b8ab704266289de67c9779ad733a196",
        "patch": "@@ -151,7 +151,7 @@ BitcoinGUI::BitcoinGUI(const NetworkStyle *networkStyle, QWidget *parent) :\n \n     // Create actions for the toolbar, menu bar and tray/dock icon\n     // Needs walletFrame to be initialized\n-    createActions(networkStyle);\n+    createActions();\n \n     // Create application menu bar\n     createMenuBar();\n@@ -243,7 +243,7 @@ BitcoinGUI::~BitcoinGUI()\n     delete rpcConsole;\n }\n \n-void BitcoinGUI::createActions(const NetworkStyle *networkStyle)\n+void BitcoinGUI::createActions()\n {\n     QActionGroup *tabGroup = new QActionGroup(this);\n "
      },
      {
        "sha": "fd776d63f80a9d245ea815a7a2fb9f7fd83b4199",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84a05b843b8ab704266289de67c9779ad733a196/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84a05b843b8ab704266289de67c9779ad733a196/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=84a05b843b8ab704266289de67c9779ad733a196",
        "patch": "@@ -118,7 +118,7 @@ class BitcoinGUI : public QMainWindow\n     int spinnerFrame;\n \n     /** Create the main UI actions. */\n-    void createActions(const NetworkStyle *networkStyle);\n+    void createActions();\n     /** Create the menu bar and sub-menus. */\n     void createMenuBar();\n     /** Create the toolbars */"
      }
    ]
  },
  {
    "sha": "9bbb880be44dbc378bdd3210eed42eaa77efb774",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YmJiODgwYmU0NGRiYzM3OGJkZDMyMTBlZWQ0MmVhYTc3ZWZiNzc0",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-03-06T08:33:23Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-03-06T08:33:23Z"
      },
      "message": "[Qt] fix a issue where \"command line options\"-action overwrite \"Preference\"-action (on OSX)\n\n- fixes #5800",
      "tree": {
        "sha": "01a9d73b9192cfe30acd2e7f4e20ddffe3f4480f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/01a9d73b9192cfe30acd2e7f4e20ddffe3f4480f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9bbb880be44dbc378bdd3210eed42eaa77efb774",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bbb880be44dbc378bdd3210eed42eaa77efb774",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9bbb880be44dbc378bdd3210eed42eaa77efb774",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bbb880be44dbc378bdd3210eed42eaa77efb774/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "84a05b843b8ab704266289de67c9779ad733a196",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84a05b843b8ab704266289de67c9779ad733a196",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84a05b843b8ab704266289de67c9779ad733a196"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "34209920815b5279d89b735da28d17f9a68b3bed",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bbb880be44dbc378bdd3210eed42eaa77efb774/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bbb880be44dbc378bdd3210eed42eaa77efb774/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=9bbb880be44dbc378bdd3210eed42eaa77efb774",
        "patch": "@@ -340,6 +340,7 @@ void BitcoinGUI::createActions()\n     openAction->setStatusTip(tr(\"Open a bitcoin: URI or payment request\"));\n \n     showHelpMessageAction = new QAction(TextColorIcon(\":/icons/info\"), tr(\"&Command-line options\"), this);\n+    showHelpMessageAction->setMenuRole(QAction::NoRole);\n     showHelpMessageAction->setStatusTip(tr(\"Show the Bitcoin Core help message to get a list with possible Bitcoin command-line options\"));\n \n     connect(quitAction, SIGNAL(triggered()), qApp, SLOT(quit()));"
      }
    ]
  },
  {
    "sha": "9519a9a4202cd5fcaaad6d4cf0bf6bad38a27369",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTE5YTlhNDIwMmNkNWZjYWFhZDZkNGNmMGJmNmJhZDM4YTI3MzY5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-05T12:01:01Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-06T11:45:26Z"
      },
      "message": "Add correct bool combiner for net signals",
      "tree": {
        "sha": "d89c628e0de68971753dbaa9d67b707ba3ebc1ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d89c628e0de68971753dbaa9d67b707ba3ebc1ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9519a9a4202cd5fcaaad6d4cf0bf6bad38a27369",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9519a9a4202cd5fcaaad6d4cf0bf6bad38a27369",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9519a9a4202cd5fcaaad6d4cf0bf6bad38a27369",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9519a9a4202cd5fcaaad6d4cf0bf6bad38a27369/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "84a05b843b8ab704266289de67c9779ad733a196",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84a05b843b8ab704266289de67c9779ad733a196",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84a05b843b8ab704266289de67c9779ad733a196"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 34,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e500536cb4912f5175f54868371644ceebd159f3",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 17,
        "deletions": 2,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9519a9a4202cd5fcaaad6d4cf0bf6bad38a27369/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9519a9a4202cd5fcaaad6d4cf0bf6bad38a27369/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=9519a9a4202cd5fcaaad6d4cf0bf6bad38a27369",
        "patch": "@@ -76,12 +76,27 @@ void SocketSendData(CNode *pnode);\n \n typedef int NodeId;\n \n+struct CombinerAll\n+{\n+    typedef bool result_type;\n+\n+    template<typename I>\n+    bool operator()(I first, I last) const\n+    {\n+        while (first != last) {\n+            if (!(*first)) return false;\n+            ++first;\n+        }\n+        return true;\n+    }\n+};\n+\n // Signals for message handling\n struct CNodeSignals\n {\n     boost::signals2::signal<int ()> GetHeight;\n-    boost::signals2::signal<bool (CNode*)> ProcessMessages;\n-    boost::signals2::signal<bool (CNode*, bool)> SendMessages;\n+    boost::signals2::signal<bool (CNode*), CombinerAll> ProcessMessages;\n+    boost::signals2::signal<bool (CNode*, bool), CombinerAll> SendMessages;\n     boost::signals2::signal<void (NodeId, const CNode*)> InitializeNode;\n     boost::signals2::signal<void (NodeId)> FinalizeNode;\n };"
      },
      {
        "sha": "5e968c26fff90f4ed6c629666e0d9e7e91402f4a",
        "filename": "src/test/main_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9519a9a4202cd5fcaaad6d4cf0bf6bad38a27369/src/test/main_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9519a9a4202cd5fcaaad6d4cf0bf6bad38a27369/src/test/main_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main_tests.cpp?ref=9519a9a4202cd5fcaaad6d4cf0bf6bad38a27369",
        "patch": "@@ -21,4 +21,21 @@ BOOST_AUTO_TEST_CASE(subsidy_limit_test)\n     BOOST_CHECK(nSum == 2099999997690000ULL);\n }\n \n+bool ReturnFalse() { return false; }\n+bool ReturnTrue() { return true; }\n+\n+BOOST_AUTO_TEST_CASE(test_combiner_all)\n+{\n+    boost::signals2::signal<bool (), CombinerAll> Test;\n+    BOOST_CHECK(Test());\n+    Test.connect(&ReturnFalse);\n+    BOOST_CHECK(!Test());\n+    Test.connect(&ReturnTrue);\n+    BOOST_CHECK(!Test());\n+    Test.disconnect(&ReturnFalse);\n+    BOOST_CHECK(Test());\n+    Test.disconnect(&ReturnTrue);\n+    BOOST_CHECK(Test());\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "ba04c4a7801e7d68a5e84035b919e5c3626eb7a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTA0YzRhNzgwMWU3ZDY4YTVlODQwMzViOTE5ZTVjMzYyNmViN2E3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-05T12:01:22Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-06T12:03:17Z"
      },
      "message": "Limit message sizes before transfer\n\nThis introduces a fixed limit for the size of p2p messages, and enforces it\nbefore download.",
      "tree": {
        "sha": "f4719f30e05d9b918ce0175355d81d313526135f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4719f30e05d9b918ce0175355d81d313526135f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba04c4a7801e7d68a5e84035b919e5c3626eb7a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba04c4a7801e7d68a5e84035b919e5c3626eb7a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba04c4a7801e7d68a5e84035b919e5c3626eb7a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba04c4a7801e7d68a5e84035b919e5c3626eb7a7/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "84a05b843b8ab704266289de67c9779ad733a196",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84a05b843b8ab704266289de67c9779ad733a196",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84a05b843b8ab704266289de67c9779ad733a196"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d9f470b9e450c1b0b658dbe62b86aac783eb7358",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba04c4a7801e7d68a5e84035b919e5c3626eb7a7/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba04c4a7801e7d68a5e84035b919e5c3626eb7a7/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ba04c4a7801e7d68a5e84035b919e5c3626eb7a7",
        "patch": "@@ -523,6 +523,11 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes)\n         if (handled < 0)\n                 return false;\n \n+        if (msg.in_data && msg.hdr.nMessageSize > MAX_PROTOCOL_MESSAGE_LENGTH) {\n+            LogPrint(\"net\", \"Oversized message from peer=%i, disconnecting\", GetId());\n+            return false;\n+        }\n+\n         pch += handled;\n         nBytes -= handled;\n "
      },
      {
        "sha": "24275d4a9d335bb5c5384366371dce11d1bdd053",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba04c4a7801e7d68a5e84035b919e5c3626eb7a7/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba04c4a7801e7d68a5e84035b919e5c3626eb7a7/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=ba04c4a7801e7d68a5e84035b919e5c3626eb7a7",
        "patch": "@@ -46,6 +46,8 @@ static const int TIMEOUT_INTERVAL = 20 * 60;\n static const unsigned int MAX_INV_SZ = 50000;\n /** The maximum number of new addresses to accumulate before announcing. */\n static const unsigned int MAX_ADDR_TO_SEND = 1000;\n+/** Maximum length of incoming protocol messages (no message over 2 MiB is currently acceptable). */\n+static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 2 * 1024 * 1024;\n /** -listen default */\n static const bool DEFAULT_LISTEN = true;\n /** -upnp default */"
      }
    ]
  },
  {
    "sha": "ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTlmMmJmYTdiN2E2MjlhZmRjYzZkM2RkYzNiNzk4YWNkZjAwNWVk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T14:26:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T14:27:00Z"
      },
      "message": "Merge pull request #5813\n\n34e5015 Add unit tests for next difficulty calculations (Ross Nicoll)",
      "tree": {
        "sha": "5d38178be834792d85b2d52392b0bb20f3f365ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d38178be834792d85b2d52392b0bb20f3f365ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU+bk0AAoJEHSBCwEjRsmmd3AH/3LYKYHuk6+oEMAFDhkgmTqN\nQ+axDpU4YXpb4yqcLNmyPY03UVh7jw4OdKYnyDv0mE25vfRh0UATtMoH3Vz22t7M\nd/WcZER38AEyJdlfrUVE0CopzXYEGhtlL427MzbQr8RUIYHCkTKubXXfr9JGB9SE\nGk3dlK6w57CSWDjbHHIx2KM/uxBJl4Shdjfh9/AZ6tirAgBgbTHhQw49Vwf4nnr+\n0JhvO+SrUaASQh7BqpD3bfxpa1AbRwhkzdnPfCvSZBYFcRFwoWvVwvoFZC7jriJF\nGTxO57XQ6boLuYdBEZ4FN8oMg16OH8oDSj38hK18QBxTnbxQ99FvYAwca0fUmRg=\n=G65P\n-----END PGP SIGNATURE-----",
        "payload": "tree 5d38178be834792d85b2d52392b0bb20f3f365ea\nparent 84a05b843b8ab704266289de67c9779ad733a196\nparent 34e5015cd21e27c1bf635d92531afac93f553096\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1425652004 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1425652020 +0100\n\nMerge pull request #5813\n\n34e5015 Add unit tests for next difficulty calculations (Ross Nicoll)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "84a05b843b8ab704266289de67c9779ad733a196",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84a05b843b8ab704266289de67c9779ad733a196",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84a05b843b8ab704266289de67c9779ad733a196"
      },
      {
        "sha": "34e5015cd21e27c1bf635d92531afac93f553096",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34e5015cd21e27c1bf635d92531afac93f553096",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34e5015cd21e27c1bf635d92531afac93f553096"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 74,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6774745de2453ebe9d998e3a7f90b8252ae09432",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed",
        "patch": "@@ -55,6 +55,7 @@ BITCOIN_TESTS =\\\n   test/multisig_tests.cpp \\\n   test/netbase_tests.cpp \\\n   test/pmt_tests.cpp \\\n+  test/pow_tests.cpp \\\n   test/rpc_tests.cpp \\\n   test/sanity_tests.cpp \\\n   test/script_P2SH_tests.cpp \\"
      },
      {
        "sha": "b75b293c908ba67b3663df29193d33f50e8c0fd9",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed",
        "patch": "@@ -48,8 +48,13 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n         pindexFirst = pindexFirst->pprev;\n     assert(pindexFirst);\n \n+    return CalculateNextWorkRequired(pindexLast, pindexFirst->GetBlockTime());\n+}\n+\n+unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime)\n+{\n     // Limit adjustment step\n-    int64_t nActualTimespan = pindexLast->GetBlockTime() - pindexFirst->GetBlockTime();\n+    int64_t nActualTimespan = pindexLast->GetBlockTime() - nFirstBlockTime;\n     LogPrintf(\"  nActualTimespan = %d  before bounds\\n\", nActualTimespan);\n     if (nActualTimespan < Params().TargetTimespan()/4)\n         nActualTimespan = Params().TargetTimespan()/4;"
      },
      {
        "sha": "a5fbba62364c0f1709cd11723b5137694dac6586",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed",
        "patch": "@@ -14,6 +14,7 @@ class uint256;\n class arith_uint256;\n \n unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock);\n+unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime);\n \n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n bool CheckProofOfWork(uint256 hash, unsigned int nBits);"
      },
      {
        "sha": "e42c1b0a8b66af7e2952c1b48f172b983af92de4",
        "filename": "src/test/pow_tests.cpp",
        "status": "added",
        "additions": 66,
        "deletions": 0,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed",
        "patch": "@@ -0,0 +1,66 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"main.h\"\n+#include \"pow.h\"\n+#include \"util.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace std;\n+\n+BOOST_AUTO_TEST_SUITE(pow_tests)\n+\n+/* Test calculation of next difficulty target with no constraints applying */\n+BOOST_AUTO_TEST_CASE(get_next_work)\n+{\n+    SelectParams(CBaseChainParams::MAIN);\n+\n+    int64_t nLastRetargetTime = 1261130161; // Block #30240\n+    CBlockIndex pindexLast;\n+    pindexLast.nHeight = 32255;\n+    pindexLast.nTime = 1262152739;  // Block #32255\n+    pindexLast.nBits = 0x1d00ffff;\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1d00d86a);\n+}\n+\n+/* Test the constraint on the upper bound for next work */\n+BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)\n+{\n+    SelectParams(CBaseChainParams::MAIN);\n+\n+    int64_t nLastRetargetTime = 1231006505; // Block #0\n+    CBlockIndex pindexLast;\n+    pindexLast.nHeight = 2015;\n+    pindexLast.nTime = 1233061996;  // Block #2015\n+    pindexLast.nBits = 0x1d00ffff;\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1d00ffff);\n+}\n+\n+/* Test the constraint on the lower bound for actual time taken */\n+BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)\n+{\n+    SelectParams(CBaseChainParams::MAIN);\n+\n+    int64_t nLastRetargetTime = 1279008237; // Block #66528\n+    CBlockIndex pindexLast;\n+    pindexLast.nHeight = 68543;\n+    pindexLast.nTime = 1279297671;  // Block #68543\n+    pindexLast.nBits = 0x1c05a3f4;\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1c0168fd);\n+}\n+\n+/* Test the constraint on the upper bound for actual time taken */\n+BOOST_AUTO_TEST_CASE(get_next_work_upper_limit_actual)\n+{\n+    SelectParams(CBaseChainParams::MAIN);\n+    int64_t nLastRetargetTime = 1263163443; // NOTE: Not an actual block time\n+    CBlockIndex pindexLast;\n+    pindexLast.nHeight = 46367;\n+    pindexLast.nTime = 1269211443;  // Block #46367\n+    pindexLast.nBits = 0x1c387f6f;\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1d00e1fd);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "51377c2dbe0d71dad953a43187749a38010d1f1f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTM3N2MyZGJlMGQ3MWRhZDk1M2E0MzE4Nzc0OWEzODAxMGQxZjFm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T14:30:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T14:31:31Z"
      },
      "message": "Merge pull request #5843\n\nba04c4a Limit message sizes before transfer (Pieter Wuille)",
      "tree": {
        "sha": "5e6b0f601795a266b3ad4a1ab6e6385dea9966ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e6b0f601795a266b3ad4a1ab6e6385dea9966ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51377c2dbe0d71dad953a43187749a38010d1f1f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU+bpDAAoJEHSBCwEjRsmm4IsIALpCGAHY+Atc/RWo75yJpzpm\nhEwde/GEeUXHjaTD7OZIJmoeHgFkCpypOKAewtvRbutkQdMn+6rUh7yg5SIG8uOV\neU+TIlo/BftfHb15KGHe/bU2JL7OCM7kI+8luPUeum3kfPRWp3KCmn68N7KNM0N3\nEOkWVgwD6Kufqj936eWfaxhmFyRUrclGOhymuzU9UttlfgBcdV3lU+/VhlYDqKfz\naAaPdjaUSQFbvw7YRhDOwZ05/Zn2nsWONFhZ/L6AEbPm6Hah+QPEdXiBcVwnrnEy\nkngs+x+67AHRgEoLOOcOsagcNdsAga+GwYATAvADNGpNbmBuKKJk03F0U1i7pJQ=\n=h9PH\n-----END PGP SIGNATURE-----",
        "payload": "tree 5e6b0f601795a266b3ad4a1ab6e6385dea9966ca\nparent ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed\nparent ba04c4a7801e7d68a5e84035b919e5c3626eb7a7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1425652212 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1425652291 +0100\n\nMerge pull request #5843\n\nba04c4a Limit message sizes before transfer (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51377c2dbe0d71dad953a43187749a38010d1f1f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/51377c2dbe0d71dad953a43187749a38010d1f1f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51377c2dbe0d71dad953a43187749a38010d1f1f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed"
      },
      {
        "sha": "ba04c4a7801e7d68a5e84035b919e5c3626eb7a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba04c4a7801e7d68a5e84035b919e5c3626eb7a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba04c4a7801e7d68a5e84035b919e5c3626eb7a7"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d9f470b9e450c1b0b658dbe62b86aac783eb7358",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51377c2dbe0d71dad953a43187749a38010d1f1f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51377c2dbe0d71dad953a43187749a38010d1f1f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=51377c2dbe0d71dad953a43187749a38010d1f1f",
        "patch": "@@ -523,6 +523,11 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes)\n         if (handled < 0)\n                 return false;\n \n+        if (msg.in_data && msg.hdr.nMessageSize > MAX_PROTOCOL_MESSAGE_LENGTH) {\n+            LogPrint(\"net\", \"Oversized message from peer=%i, disconnecting\", GetId());\n+            return false;\n+        }\n+\n         pch += handled;\n         nBytes -= handled;\n "
      },
      {
        "sha": "24275d4a9d335bb5c5384366371dce11d1bdd053",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51377c2dbe0d71dad953a43187749a38010d1f1f/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51377c2dbe0d71dad953a43187749a38010d1f1f/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=51377c2dbe0d71dad953a43187749a38010d1f1f",
        "patch": "@@ -46,6 +46,8 @@ static const int TIMEOUT_INTERVAL = 20 * 60;\n static const unsigned int MAX_INV_SZ = 50000;\n /** The maximum number of new addresses to accumulate before announcing. */\n static const unsigned int MAX_ADDR_TO_SEND = 1000;\n+/** Maximum length of incoming protocol messages (no message over 2 MiB is currently acceptable). */\n+static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 2 * 1024 * 1024;\n /** -listen default */\n static const bool DEFAULT_LISTEN = true;\n /** -upnp default */"
      }
    ]
  },
  {
    "sha": "4414f5ffe130f46becdc75c8e59ee74604e978aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDE0ZjVmZmUxMzBmNDZiZWNkYzc1YzhlNTllZTc0NjA0ZTk3OGFh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T08:53:43Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T14:54:53Z"
      },
      "message": "build: Endian compatibility\n\n- Detect endian instead of stopping configure on big-endian\n- Add `byteswap.h` and `endian.h` header for compatibility with\n  Windows and other operating systems that don't come with them\n- Update `crypto/common.h` functions to use compat\n  endian header",
      "tree": {
        "sha": "857dbb3624c21023894060ea030f55f4628432e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/857dbb3624c21023894060ea030f55f4628432e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4414f5ffe130f46becdc75c8e59ee74604e978aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4414f5ffe130f46becdc75c8e59ee74604e978aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4414f5ffe130f46becdc75c8e59ee74604e978aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4414f5ffe130f46becdc75c8e59ee74604e978aa/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51377c2dbe0d71dad953a43187749a38010d1f1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51377c2dbe0d71dad953a43187749a38010d1f1f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51377c2dbe0d71dad953a43187749a38010d1f1f"
      }
    ],
    "stats": {
      "total": 332,
      "additions": 263,
      "deletions": 69
    },
    "files": [
      {
        "sha": "2c918218bb836e19cf078b55526e34f72a456eee",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4414f5ffe130f46becdc75c8e59ee74604e978aa/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4414f5ffe130f46becdc75c8e59ee74604e978aa/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=4414f5ffe130f46becdc75c8e59ee74604e978aa",
        "patch": "@@ -350,8 +350,8 @@ if test x$use_lcov = xyes; then\n     [AC_MSG_ERROR(\"lcov testing requested but --coverage flag does not work\")])\n fi\n \n-dnl Require little endian\n-AC_C_BIGENDIAN([AC_MSG_ERROR(\"Big Endian not supported\")])\n+dnl Check for endianness\n+AC_C_BIGENDIAN\n \n dnl Check for pthread compile/link requirements\n AX_PTHREAD\n@@ -438,17 +438,22 @@ if test x$TARGET_OS = xdarwin; then\n   AX_CHECK_LINK_FLAG([[-Wl,-dead_strip]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip\"])\n fi\n \n-AC_CHECK_HEADERS([endian.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h])\n+AC_CHECK_HEADERS([endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h])\n AC_SEARCH_LIBS([getaddrinfo_a], [anl], [AC_DEFINE(HAVE_GETADDRINFO_A, 1, [Define this symbol if you have getaddrinfo_a])])\n AC_SEARCH_LIBS([inet_pton], [nsl resolv], [AC_DEFINE(HAVE_INET_PTON, 1, [Define this symbol if you have inet_pton])])\n \n AC_CHECK_DECLS([strnlen])\n \n-AC_CHECK_DECLS([le32toh, le64toh, htole32, htole64, be32toh, be64toh, htobe32, htobe64],,,\n+AC_CHECK_DECLS([le16toh, le32toh, le64toh, htole16, htole32, htole64, be16toh, be32toh, be64toh, htobe16, htobe32, htobe64],,,\n \t\t[#if HAVE_ENDIAN_H\n                  #include <endian.h>\n                  #endif])\n \n+AC_CHECK_DECLS([bswap_16, bswap_32, bswap_64],,,\n+\t\t[#if HAVE_BYTESWAP_H\n+                 #include <byteswap.h>\n+                 #endif])\n+\n dnl Check for MSG_NOSIGNAL\n AC_MSG_CHECKING(for MSG_NOSIGNAL)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/socket.h>]],"
      },
      {
        "sha": "da65efa713279c2b23df5b791bbd3b72a2bbb06b",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4414f5ffe130f46becdc75c8e59ee74604e978aa/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4414f5ffe130f46becdc75c8e59ee74604e978aa/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=4414f5ffe130f46becdc75c8e59ee74604e978aa",
        "patch": "@@ -141,6 +141,8 @@ BITCOIN_CORE_H = \\\n   walletdb.h \\\n   wallet.h \\\n   wallet_ismine.h \\\n+  compat/byteswap.h \\\n+  compat/endian.h \\\n   compat/sanity.h\n \n JSON_H = \\"
      },
      {
        "sha": "899220bdc549053927edf86a29bc415310fb5eba",
        "filename": "src/compat/byteswap.h",
        "status": "added",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4414f5ffe130f46becdc75c8e59ee74604e978aa/src/compat/byteswap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4414f5ffe130f46becdc75c8e59ee74604e978aa/src/compat/byteswap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/byteswap.h?ref=4414f5ffe130f46becdc75c8e59ee74604e978aa",
        "patch": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMPAT_BYTESWAP_H\n+#define BITCOIN_COMPAT_BYTESWAP_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n+#include <stdint.h>\n+\n+#if defined(HAVE_BYTESWAP_H)\n+#include <byteswap.h>\n+#endif\n+\n+#if HAVE_DECL_BSWAP_16 == 0\n+inline uint16_t bswap_16(uint16_t x)\n+{\n+    return (x >> 8) | ((x & 0x00ff) << 8);\n+}\n+#endif // HAVE_DECL_BSWAP16\n+\n+#if HAVE_DECL_BSWAP_32 == 0\n+inline uint32_t bswap_32(uint32_t x)\n+{\n+    return (((x & 0xff000000U) >> 24) | ((x & 0x00ff0000U) >>  8) |\n+            ((x & 0x0000ff00U) <<  8) | ((x & 0x000000ffU) << 24));\n+}\n+#endif // HAVE_DECL_BSWAP32\n+\n+#if HAVE_DECL_BSWAP_64 == 0\n+inline uint64_t bswap_64(uint64_t x)\n+{\n+     return (((x & 0xff00000000000000ull) >> 56)\n+          | ((x & 0x00ff000000000000ull) >> 40)\n+          | ((x & 0x0000ff0000000000ull) >> 24)\n+          | ((x & 0x000000ff00000000ull) >> 8)\n+          | ((x & 0x00000000ff000000ull) << 8)\n+          | ((x & 0x0000000000ff0000ull) << 24)\n+          | ((x & 0x000000000000ff00ull) << 40)\n+          | ((x & 0x00000000000000ffull) << 56));\n+}\n+#endif // HAVE_DECL_BSWAP64\n+\n+#endif // BITCOIN_COMPAT_BYTESWAP_H"
      },
      {
        "sha": "4d041d655411738476ecbc1e5c96e845452d8b8f",
        "filename": "src/compat/endian.h",
        "status": "added",
        "additions": 194,
        "deletions": 0,
        "changes": 194,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4414f5ffe130f46becdc75c8e59ee74604e978aa/src/compat/endian.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4414f5ffe130f46becdc75c8e59ee74604e978aa/src/compat/endian.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/endian.h?ref=4414f5ffe130f46becdc75c8e59ee74604e978aa",
        "patch": "@@ -0,0 +1,194 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMPAT_ENDIAN_H\n+#define BITCOIN_COMPAT_ENDIAN_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n+#include <stdint.h>\n+\n+#include \"compat/byteswap.h\"\n+\n+#if defined(HAVE_ENDIAN_H)\n+#include <endian.h>\n+#endif\n+\n+#if defined(WORDS_BIGENDIAN)\n+\n+#if HAVE_DECL_HTOBE16 == 0\n+inline uint16_t htobe16(uint16_t host_16bits)\n+{\n+    return host_16bits;\n+}\n+#endif // HAVE_DECL_HTOBE16\n+\n+#if HAVE_DECL_HTOLE16 == 0\n+inline uint16_t htole16(uint16_t host_16bits)\n+{\n+    return bswap_16(host_16bits);\n+}\n+#endif // HAVE_DECL_HTOLE16\n+\n+#if HAVE_DECL_BE16TOH == 0\n+inline uint16_t be16toh(uint16_t big_endian_16bits)\n+{\n+    return big_endian_16bits;\n+}\n+#endif // HAVE_DECL_BE16TOH\n+\n+#if HAVE_DECL_LE16TOH == 0\n+inline uint16_t le16toh(uint16_t little_endian_16bits)\n+{\n+    return bswap_16(little_endian_16bits);\n+}\n+#endif // HAVE_DECL_LE16TOH\n+\n+#if HAVE_DECL_HTOBE32 == 0\n+inline uint32_t htobe32(uint32_t host_32bits)\n+{\n+    return host_32bits;\n+}\n+#endif // HAVE_DECL_HTOBE32\n+\n+#if HAVE_DECL_HTOLE32 == 0\n+inline uint32_t htole32(uint32_t host_32bits)\n+{\n+    return bswap_32(host_32bits);\n+}\n+#endif // HAVE_DECL_HTOLE32\n+\n+#if HAVE_DECL_BE32TOH == 0\n+inline uint32_t be32toh(uint32_t big_endian_32bits)\n+{\n+    return big_endian_32bits;\n+}\n+#endif // HAVE_DECL_BE32TOH\n+\n+#if HAVE_DECL_LE32TOH == 0\n+inline uint32_t le32toh(uint32_t little_endian_32bits)\n+{\n+    return bswap_32(little_endian_32bits);\n+}\n+#endif // HAVE_DECL_LE32TOH\n+\n+#if HAVE_DECL_HTOBE64 == 0\n+inline uint64_t htobe64(uint64_t host_64bits)\n+{\n+    return host_64bits;\n+}\n+#endif // HAVE_DECL_HTOBE64\n+\n+#if HAVE_DECL_HTOLE64 == 0\n+inline uint64_t htole64(uint64_t host_64bits)\n+{\n+    return bswap_64(host_64bits);\n+}\n+#endif // HAVE_DECL_HTOLE64\n+\n+#if HAVE_DECL_BE64TOH == 0\n+inline uint64_t be64toh(uint64_t big_endian_64bits)\n+{\n+    return big_endian_64bits;\n+}\n+#endif // HAVE_DECL_BE64TOH\n+\n+#if HAVE_DECL_LE64TOH == 0\n+inline uint64_t le64toh(uint64_t little_endian_64bits)\n+{\n+    return bswap_64(little_endian_64bits);\n+}\n+#endif // HAVE_DECL_LE64TOH\n+\n+#else // WORDS_BIGENDIAN\n+\n+#if HAVE_DECL_HTOBE16 == 0\n+inline uint16_t htobe16(uint16_t host_16bits)\n+{\n+    return bswap_16(host_16bits);\n+}\n+#endif // HAVE_DECL_HTOBE16\n+\n+#if HAVE_DECL_HTOLE16 == 0\n+inline uint16_t htole16(uint16_t host_16bits)\n+{\n+    return host_16bits;\n+}\n+#endif // HAVE_DECL_HTOLE16\n+\n+#if HAVE_DECL_BE16TOH == 0\n+inline uint16_t be16toh(uint16_t big_endian_16bits)\n+{\n+    return bswap_16(big_endian_16bits);\n+}\n+#endif // HAVE_DECL_BE16TOH\n+\n+#if HAVE_DECL_LE16TOH == 0\n+inline uint16_t le16toh(uint16_t little_endian_16bits)\n+{\n+    return little_endian_16bits;\n+}\n+#endif // HAVE_DECL_LE16TOH\n+\n+#if HAVE_DECL_HTOBE32 == 0\n+inline uint32_t htobe32(uint32_t host_32bits)\n+{\n+    return bswap_32(host_32bits);\n+}\n+#endif // HAVE_DECL_HTOBE32\n+\n+#if HAVE_DECL_HTOLE32 == 0\n+inline uint32_t htole32(uint32_t host_32bits)\n+{\n+    return host_32bits;\n+}\n+#endif // HAVE_DECL_HTOLE32\n+\n+#if HAVE_DECL_BE32TOH == 0\n+inline uint32_t be32toh(uint32_t big_endian_32bits)\n+{\n+    return bswap_32(big_endian_32bits);\n+}\n+#endif // HAVE_DECL_BE32TOH\n+\n+#if HAVE_DECL_LE32TOH == 0\n+inline uint32_t le32toh(uint32_t little_endian_32bits)\n+{\n+    return little_endian_32bits;\n+}\n+#endif // HAVE_DECL_LE32TOH\n+\n+#if HAVE_DECL_HTOBE64 == 0\n+inline uint64_t htobe64(uint64_t host_64bits)\n+{\n+    return bswap_64(host_64bits);\n+}\n+#endif // HAVE_DECL_HTOBE64\n+\n+#if HAVE_DECL_HTOLE64 == 0\n+inline uint64_t htole64(uint64_t host_64bits)\n+{\n+    return host_64bits;\n+}\n+#endif // HAVE_DECL_HTOLE64\n+\n+#if HAVE_DECL_BE64TOH == 0\n+inline uint64_t be64toh(uint64_t big_endian_64bits)\n+{\n+    return bswap_64(big_endian_64bits);\n+}\n+#endif // HAVE_DECL_BE64TOH\n+\n+#if HAVE_DECL_LE64TOH == 0\n+inline uint64_t le64toh(uint64_t little_endian_64bits)\n+{\n+    return little_endian_64bits;\n+}\n+#endif // HAVE_DECL_LE64TOH\n+\n+#endif // WORDS_BIGENDIAN\n+\n+#endif // BITCOIN_COMPAT_ENDIAN_H"
      },
      {
        "sha": "580c72f5a6480f1e884120d78b51fb628fe515dc",
        "filename": "src/crypto/common.h",
        "status": "modified",
        "additions": 11,
        "deletions": 65,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4414f5ffe130f46becdc75c8e59ee74604e978aa/src/crypto/common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4414f5ffe130f46becdc75c8e59ee74604e978aa/src/crypto/common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/common.h?ref=4414f5ffe130f46becdc75c8e59ee74604e978aa",
        "patch": "@@ -11,110 +11,56 @@\n \n #include <stdint.h>\n \n-#if defined(HAVE_ENDIAN_H)\n-#include <endian.h>\n-#endif\n+#include \"compat/endian.h\"\n+\n+uint16_t static inline ReadLE16(const unsigned char* ptr)\n+{\n+    return le16toh(*((uint16_t*)ptr));\n+}\n \n uint32_t static inline ReadLE32(const unsigned char* ptr)\n {\n-#if HAVE_DECL_LE32TOH == 1\n     return le32toh(*((uint32_t*)ptr));\n-#elif !defined(WORDS_BIGENDIAN)\n-    return *((uint32_t*)ptr);\n-#else\n-    return ((uint32_t)ptr[3] << 24 | (uint32_t)ptr[2] << 16 | (uint32_t)ptr[1] << 8 | (uint32_t)ptr[0]);\n-#endif\n }\n \n uint64_t static inline ReadLE64(const unsigned char* ptr)\n {\n-#if HAVE_DECL_LE64TOH == 1\n     return le64toh(*((uint64_t*)ptr));\n-#elif !defined(WORDS_BIGENDIAN)\n-    return *((uint64_t*)ptr);\n-#else\n-    return ((uint64_t)ptr[7] << 56 | (uint64_t)ptr[6] << 48 | (uint64_t)ptr[5] << 40 | (uint64_t)ptr[4] << 32 |\n-            (uint64_t)ptr[3] << 24 | (uint64_t)ptr[2] << 16 | (uint64_t)ptr[1] << 8 | (uint64_t)ptr[0]);\n-#endif\n+}\n+\n+void static inline WriteLE16(unsigned char* ptr, uint16_t x)\n+{\n+    *((uint16_t*)ptr) = htole16(x);\n }\n \n void static inline WriteLE32(unsigned char* ptr, uint32_t x)\n {\n-#if HAVE_DECL_HTOLE32 == 1\n     *((uint32_t*)ptr) = htole32(x);\n-#elif !defined(WORDS_BIGENDIAN)\n-    *((uint32_t*)ptr) = x;\n-#else\n-    ptr[3] = x >> 24;\n-    ptr[2] = x >> 16;\n-    ptr[1] = x >> 8;\n-    ptr[0] = x;\n-#endif\n }\n \n void static inline WriteLE64(unsigned char* ptr, uint64_t x)\n {\n-#if HAVE_DECL_HTOLE64 == 1\n     *((uint64_t*)ptr) = htole64(x);\n-#elif !defined(WORDS_BIGENDIAN)\n-    *((uint64_t*)ptr) = x;\n-#else\n-    ptr[7] = x >> 56;\n-    ptr[6] = x >> 48;\n-    ptr[5] = x >> 40;\n-    ptr[4] = x >> 32;\n-    ptr[3] = x >> 24;\n-    ptr[2] = x >> 16;\n-    ptr[1] = x >> 8;\n-    ptr[0] = x;\n-#endif\n }\n \n uint32_t static inline ReadBE32(const unsigned char* ptr)\n {\n-#if HAVE_DECL_BE32TOH == 1\n     return be32toh(*((uint32_t*)ptr));\n-#else\n-    return ((uint32_t)ptr[0] << 24 | (uint32_t)ptr[1] << 16 | (uint32_t)ptr[2] << 8 | (uint32_t)ptr[3]);\n-#endif\n }\n \n uint64_t static inline ReadBE64(const unsigned char* ptr)\n {\n-#if HAVE_DECL_BE64TOH == 1\n     return be64toh(*((uint64_t*)ptr));\n-#else\n-    return ((uint64_t)ptr[0] << 56 | (uint64_t)ptr[1] << 48 | (uint64_t)ptr[2] << 40 | (uint64_t)ptr[3] << 32 |\n-            (uint64_t)ptr[4] << 24 | (uint64_t)ptr[5] << 16 | (uint64_t)ptr[6] << 8 | (uint64_t)ptr[7]);\n-#endif\n }\n \n void static inline WriteBE32(unsigned char* ptr, uint32_t x)\n {\n-#if HAVE_DECL_HTOBE32 == 1\n     *((uint32_t*)ptr) = htobe32(x);\n-#else\n-    ptr[0] = x >> 24;\n-    ptr[1] = x >> 16;\n-    ptr[2] = x >> 8;\n-    ptr[3] = x;\n-#endif\n }\n \n void static inline WriteBE64(unsigned char* ptr, uint64_t x)\n {\n-#if HAVE_DECL_HTOBE64 == 1\n     *((uint64_t*)ptr) = htobe64(x);\n-#else\n-    ptr[0] = x >> 56;\n-    ptr[1] = x >> 48;\n-    ptr[2] = x >> 40;\n-    ptr[3] = x >> 32;\n-    ptr[4] = x >> 24;\n-    ptr[5] = x >> 16;\n-    ptr[6] = x >> 8;\n-    ptr[7] = x;\n-#endif\n }\n \n #endif // BITCOIN_CRYPTO_COMMON_H"
      }
    ]
  },
  {
    "sha": "3ca5852dc27cec926e4e7b09ec3ccc369a2a0781",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2E1ODUyZGMyN2NlYzkyNmU0ZTdiMDllYzNjY2MzNjlhMmEwNzgx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T10:38:03Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T14:54:53Z"
      },
      "message": "src/hash.cpp: endian compatibility",
      "tree": {
        "sha": "dd6a31fac844b268137b7b0dcfbaa68756903156",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd6a31fac844b268137b7b0dcfbaa68756903156"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ca5852dc27cec926e4e7b09ec3ccc369a2a0781",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ca5852dc27cec926e4e7b09ec3ccc369a2a0781",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ca5852dc27cec926e4e7b09ec3ccc369a2a0781",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ca5852dc27cec926e4e7b09ec3ccc369a2a0781/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4414f5ffe130f46becdc75c8e59ee74604e978aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4414f5ffe130f46becdc75c8e59ee74604e978aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4414f5ffe130f46becdc75c8e59ee74604e978aa"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "20d5d217778f2beb5f007d6e3e36a8175c69ea10",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ca5852dc27cec926e4e7b09ec3ccc369a2a0781/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ca5852dc27cec926e4e7b09ec3ccc369a2a0781/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=3ca5852dc27cec926e4e7b09ec3ccc369a2a0781",
        "patch": "@@ -3,8 +3,10 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"hash.h\"\n+#include \"crypto/common.h\"\n #include \"crypto/hmac_sha512.h\"\n \n+\n inline uint32_t ROTL32(uint32_t x, int8_t r)\n {\n     return (x << r) | (x >> (32 - r));\n@@ -23,10 +25,10 @@ unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char\n \n         //----------\n         // body\n-        const uint32_t* blocks = (const uint32_t*)(&vDataToHash[0] + nblocks * 4);\n+        const uint8_t* blocks = &vDataToHash[0] + nblocks * 4;\n \n         for (int i = -nblocks; i; i++) {\n-            uint32_t k1 = blocks[i];\n+            uint32_t k1 = ReadLE32(blocks + i*4);\n \n             k1 *= c1;\n             k1 = ROTL32(k1, 15);"
      }
    ]
  },
  {
    "sha": "556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTY4MTRlYzRlYzdlMmM1YTFiNDQxZjhiOWE0OWRiZjcxNWZlYzZi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T10:38:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:55Z"
      },
      "message": "src/main.cpp: endian compatibility in packet checksum check",
      "tree": {
        "sha": "d3d84ddb9d4025bd68d677d4acec639e01cb98f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d3d84ddb9d4025bd68d677d4acec639e01cb98f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ca5852dc27cec926e4e7b09ec3ccc369a2a0781",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ca5852dc27cec926e4e7b09ec3ccc369a2a0781",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ca5852dc27cec926e4e7b09ec3ccc369a2a0781"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "9927ac75987740f68d2a0ca29fd61cc0a5ae172f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b",
        "patch": "@@ -4318,8 +4318,7 @@ bool ProcessMessages(CNode* pfrom)\n         // Checksum\n         CDataStream& vRecv = msg.vRecv;\n         uint256 hash = Hash(vRecv.begin(), vRecv.begin() + nMessageSize);\n-        unsigned int nChecksum = 0;\n-        memcpy(&nChecksum, &hash, sizeof(nChecksum));\n+        unsigned int nChecksum = ReadLE32((unsigned char*)&hash);\n         if (nChecksum != hdr.nChecksum)\n         {\n             LogPrintf(\"ProcessMessages(%s, %u bytes): CHECKSUM ERROR nChecksum=%08x hdr.nChecksum=%08x\\n\","
      }
    ]
  },
  {
    "sha": "dec84cae2a7534af95873d5d96e38ad96b447d52",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZWM4NGNhZTJhNzUzNGFmOTU4NzNkNWQ5NmUzOGFkOTZiNDQ3ZDUy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T10:38:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:58Z"
      },
      "message": "src/net.cpp: endian compatibility in EndMessage",
      "tree": {
        "sha": "64c04330da17f4da94945aea84ef927402342d22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64c04330da17f4da94945aea84ef927402342d22"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dec84cae2a7534af95873d5d96e38ad96b447d52",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dec84cae2a7534af95873d5d96e38ad96b447d52",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dec84cae2a7534af95873d5d96e38ad96b447d52",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dec84cae2a7534af95873d5d96e38ad96b447d52/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "08d1d57408344b46630ad745a5a6348c609c3e6b",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dec84cae2a7534af95873d5d96e38ad96b447d52/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dec84cae2a7534af95873d5d96e38ad96b447d52/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=dec84cae2a7534af95873d5d96e38ad96b447d52",
        "patch": "@@ -14,6 +14,7 @@\n #include \"clientversion.h\"\n #include \"primitives/transaction.h\"\n #include \"ui_interface.h\"\n+#include \"crypto/common.h\"\n \n #ifdef WIN32\n #include <string.h>\n@@ -2007,7 +2008,7 @@ void CNode::EndMessage() UNLOCK_FUNCTION(cs_vSend)\n \n     // Set the size\n     unsigned int nSize = ssSend.size() - CMessageHeader::HEADER_SIZE;\n-    memcpy((char*)&ssSend[CMessageHeader::MESSAGE_SIZE_OFFSET], &nSize, sizeof(nSize));\n+    WriteLE32((uint8_t*)&ssSend[CMessageHeader::MESSAGE_SIZE_OFFSET], nSize);\n \n     // Set the checksum\n     uint256 hash = Hash(ssSend.begin() + CMessageHeader::HEADER_SIZE, ssSend.end());"
      }
    ]
  },
  {
    "sha": "81aeb28436d847ed4e6bcda8c746a3e5631c7feb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MWFlYjI4NDM2ZDg0N2VkNGU2YmNkYThjNzQ2YTNlNTYzMWM3ZmVi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T10:39:38Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:58Z"
      },
      "message": "src/primitives/block.cpp: endian compatibility in GetHash",
      "tree": {
        "sha": "c59787dbd7315c10eea11b7ae31573bda6e7c05d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c59787dbd7315c10eea11b7ae31573bda6e7c05d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81aeb28436d847ed4e6bcda8c746a3e5631c7feb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81aeb28436d847ed4e6bcda8c746a3e5631c7feb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/81aeb28436d847ed4e6bcda8c746a3e5631c7feb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81aeb28436d847ed4e6bcda8c746a3e5631c7feb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dec84cae2a7534af95873d5d96e38ad96b447d52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dec84cae2a7534af95873d5d96e38ad96b447d52",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dec84cae2a7534af95873d5d96e38ad96b447d52"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8338762a38a7083481a58562fb67d3d4d9077132",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81aeb28436d847ed4e6bcda8c746a3e5631c7feb/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81aeb28436d847ed4e6bcda8c746a3e5631c7feb/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=81aeb28436d847ed4e6bcda8c746a3e5631c7feb",
        "patch": "@@ -8,10 +8,22 @@\n #include \"hash.h\"\n #include \"tinyformat.h\"\n #include \"utilstrencodings.h\"\n+#include \"crypto/common.h\"\n \n uint256 CBlockHeader::GetHash() const\n {\n+#if defined(WORDS_BIGENDIAN)\n+    uint8_t data[80];\n+    WriteLE32(&data[0], nVersion);\n+    memcpy(&data[4], hashPrevBlock.begin(), hashPrevBlock.size());\n+    memcpy(&data[36], hashMerkleRoot.begin(), hashMerkleRoot.size());\n+    WriteLE32(&data[68], nTime);\n+    WriteLE32(&data[72], nBits);\n+    WriteLE32(&data[76], nNonce);\n+    return Hash(data, data + 80);\n+#else // Can take shortcut for little endian\n     return Hash(BEGIN(nVersion), END(nNonce));\n+#endif\n }\n \n uint256 CBlock::BuildMerkleTree(bool* fMutated) const"
      }
    ]
  },
  {
    "sha": "4f92773f9285760fe3e2eb14f5ca21de850d1955",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZjkyNzczZjkyODU3NjBmZTNlMmViMTRmNWNhMjFkZTg1MGQxOTU1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T10:40:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:58Z"
      },
      "message": "src/primitives/transaction.h: endian compatibility in serialization",
      "tree": {
        "sha": "5270003fb01a7c84b60a688a1e510ddd9fb0fb05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5270003fb01a7c84b60a688a1e510ddd9fb0fb05"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f92773f9285760fe3e2eb14f5ca21de850d1955",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f92773f9285760fe3e2eb14f5ca21de850d1955",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4f92773f9285760fe3e2eb14f5ca21de850d1955",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f92773f9285760fe3e2eb14f5ca21de850d1955/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "81aeb28436d847ed4e6bcda8c746a3e5631c7feb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81aeb28436d847ed4e6bcda8c746a3e5631c7feb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/81aeb28436d847ed4e6bcda8c746a3e5631c7feb"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0ba9affeda5a63b9a0ab62945f045e691b685359",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f92773f9285760fe3e2eb14f5ca21de850d1955/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f92773f9285760fe3e2eb14f5ca21de850d1955/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=4f92773f9285760fe3e2eb14f5ca21de850d1955",
        "patch": "@@ -25,7 +25,8 @@ class COutPoint\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(FLATDATA(*this));\n+        READWRITE(hash);\n+        READWRITE(n);\n     }\n \n     void SetNull() { hash.SetNull(); n = (uint32_t) -1; }"
      }
    ]
  },
  {
    "sha": "4e853aa163ddb978d25bd8b8ecfd730a1d09e051",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTg1M2FhMTYzZGRiOTc4ZDI1YmQ4YjhlY2ZkNzMwYTFkMDllMDUx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T10:41:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:58Z"
      },
      "message": "src/script/script.h: endian compatibility for PUSHDATA sizes",
      "tree": {
        "sha": "f97f78650dfb96ffb43ff3fd26e4cdd1457a9952",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f97f78650dfb96ffb43ff3fd26e4cdd1457a9952"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e853aa163ddb978d25bd8b8ecfd730a1d09e051",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e853aa163ddb978d25bd8b8ecfd730a1d09e051",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e853aa163ddb978d25bd8b8ecfd730a1d09e051",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e853aa163ddb978d25bd8b8ecfd730a1d09e051/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4f92773f9285760fe3e2eb14f5ca21de850d1955",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f92773f9285760fe3e2eb14f5ca21de850d1955",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4f92773f9285760fe3e2eb14f5ca21de850d1955"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 9,
      "deletions": 7
    },
    "files": [
      {
        "sha": "ed456f5c5ad53944895684ef196bfa4f55585bc6",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e853aa163ddb978d25bd8b8ecfd730a1d09e051/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e853aa163ddb978d25bd8b8ecfd730a1d09e051/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=4e853aa163ddb978d25bd8b8ecfd730a1d09e051",
        "patch": "@@ -14,6 +14,7 @@\n #include <string.h>\n #include <string>\n #include <vector>\n+#include \"crypto/common.h\"\n \n static const unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520; // bytes\n \n@@ -416,14 +417,16 @@ class CScript : public std::vector<unsigned char>\n         else if (b.size() <= 0xffff)\n         {\n             insert(end(), OP_PUSHDATA2);\n-            unsigned short nSize = b.size();\n-            insert(end(), (unsigned char*)&nSize, (unsigned char*)&nSize + sizeof(nSize));\n+            uint8_t data[2];\n+            WriteLE16(data, b.size());\n+            insert(end(), data, data + sizeof(data));\n         }\n         else\n         {\n             insert(end(), OP_PUSHDATA4);\n-            unsigned int nSize = b.size();\n-            insert(end(), (unsigned char*)&nSize, (unsigned char*)&nSize + sizeof(nSize));\n+            uint8_t data[4];\n+            WriteLE32(data, b.size());\n+            insert(end(), data, data + sizeof(data));\n         }\n         insert(end(), b.begin(), b.end());\n         return *this;\n@@ -496,15 +499,14 @@ class CScript : public std::vector<unsigned char>\n             {\n                 if (end() - pc < 2)\n                     return false;\n-                nSize = 0;\n-                memcpy(&nSize, &pc[0], 2);\n+                nSize = ReadLE16(&pc[0]);\n                 pc += 2;\n             }\n             else if (opcode == OP_PUSHDATA4)\n             {\n                 if (end() - pc < 4)\n                     return false;\n-                memcpy(&nSize, &pc[0], 4);\n+                nSize = ReadLE32(&pc[0]);\n                 pc += 4;\n             }\n             if (end() - pc < 0 || (unsigned int)(end() - pc) < nSize)"
      }
    ]
  },
  {
    "sha": "01f9c3449a88748722dd51c7b54305fd1ba87359",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMWY5YzM0NDlhODg3NDg3MjJkZDUxYzdiNTQzMDVmZDFiYTg3MzU5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T10:41:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:58Z"
      },
      "message": "src/serialize.h: base serialization level endianness neutrality\n\nSerialization type-safety and endianness compatibility.",
      "tree": {
        "sha": "e903a2035f511f55e3f9662c0fa0513a2522e19c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e903a2035f511f55e3f9662c0fa0513a2522e19c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01f9c3449a88748722dd51c7b54305fd1ba87359",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01f9c3449a88748722dd51c7b54305fd1ba87359",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01f9c3449a88748722dd51c7b54305fd1ba87359",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01f9c3449a88748722dd51c7b54305fd1ba87359/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e853aa163ddb978d25bd8b8ecfd730a1d09e051",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e853aa163ddb978d25bd8b8ecfd730a1d09e051",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e853aa163ddb978d25bd8b8ecfd730a1d09e051"
      }
    ],
    "stats": {
      "total": 225,
      "additions": 149,
      "deletions": 76
    },
    "files": [
      {
        "sha": "741f78f8b4fa86daa5827deb2935239ed7940cb2",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 125,
        "deletions": 76,
        "changes": 201,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01f9c3449a88748722dd51c7b54305fd1ba87359/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01f9c3449a88748722dd51c7b54305fd1ba87359/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=01f9c3449a88748722dd51c7b54305fd1ba87359",
        "patch": "@@ -18,6 +18,8 @@\n #include <utility>\n #include <vector>\n \n+#include \"compat/endian.h\"\n+\n class CScript;\n \n static const unsigned int MAX_SIZE = 0x02000000;\n@@ -71,6 +73,79 @@ inline const T* end_ptr(const std::vector<T,TAl>& v)\n     return v.empty() ? NULL : (&v[0] + v.size());\n }\n \n+/*\n+ * Lowest-level serialization and conversion.\n+ * @note Sizes of these types are verified in the tests\n+ */\n+template<typename Stream> inline void ser_writedata8(Stream &s, uint8_t obj)\n+{\n+    s.write((char*)&obj, 1);\n+}\n+template<typename Stream> inline void ser_writedata16(Stream &s, uint16_t obj)\n+{\n+    obj = htole16(obj);\n+    s.write((char*)&obj, 2);\n+}\n+template<typename Stream> inline void ser_writedata32(Stream &s, uint32_t obj)\n+{\n+    obj = htole32(obj);\n+    s.write((char*)&obj, 4);\n+}\n+template<typename Stream> inline void ser_writedata64(Stream &s, uint64_t obj)\n+{\n+    obj = htole64(obj);\n+    s.write((char*)&obj, 8);\n+}\n+template<typename Stream> inline uint8_t ser_readdata8(Stream &s)\n+{\n+    uint8_t obj;\n+    s.read((char*)&obj, 1);\n+    return obj;\n+}\n+template<typename Stream> inline uint16_t ser_readdata16(Stream &s)\n+{\n+    uint16_t obj;\n+    s.read((char*)&obj, 2);\n+    return le16toh(obj);\n+}\n+template<typename Stream> inline uint32_t ser_readdata32(Stream &s)\n+{\n+    uint32_t obj;\n+    s.read((char*)&obj, 4);\n+    return le32toh(obj);\n+}\n+template<typename Stream> inline uint64_t ser_readdata64(Stream &s)\n+{\n+    uint64_t obj;\n+    s.read((char*)&obj, 8);\n+    return le64toh(obj);\n+}\n+inline uint64_t ser_double_to_uint64(double x)\n+{\n+    union { double x; uint64_t y; } tmp;\n+    tmp.x = x;\n+    return tmp.y;\n+}\n+inline uint32_t ser_float_to_uint32(float x)\n+{\n+    union { float x; uint32_t y; } tmp;\n+    tmp.x = x;\n+    return tmp.y;\n+}\n+inline double ser_uint64_to_double(uint64_t y)\n+{\n+    union { double x; uint64_t y; } tmp;\n+    tmp.y = y;\n+    return tmp.x;\n+}\n+inline float ser_uint32_to_float(uint32_t y)\n+{\n+    union { float x; uint32_t y; } tmp;\n+    tmp.y = y;\n+    return tmp.x;\n+}\n+\n+\n /////////////////////////////////////////////////////////////////\n //\n // Templates for serializing to anything that looks like a stream,\n@@ -108,59 +183,48 @@ enum\n         SerializationOp(s, CSerActionUnserialize(), nType, nVersion);                \\\n     }\n \n-\n-\n /*\n  * Basic Types\n  */\n-#define WRITEDATA(s, obj)   s.write((char*)&(obj), sizeof(obj))\n-#define READDATA(s, obj)    s.read((char*)&(obj), sizeof(obj))\n-\n-inline unsigned int GetSerializeSize(char a,               int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed char a,        int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned char a,      int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed short a,       int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned short a,     int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed int a,         int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned int a,       int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed long a,        int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned long a,      int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed long long a,   int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned long long a, int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(float a,              int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(double a,             int, int=0) { return sizeof(a); }\n-\n-template<typename Stream> inline void Serialize(Stream& s, char a,               int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed char a,        int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned char a,      int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed short a,       int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned short a,     int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed int a,         int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned int a,       int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed long a,        int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned long a,      int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed long long a,   int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned long long a, int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, float a,              int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, double a,             int, int=0) { WRITEDATA(s, a); }\n-\n-template<typename Stream> inline void Unserialize(Stream& s, char& a,               int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed char& a,        int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned char& a,      int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed short& a,       int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned short& a,     int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed int& a,         int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned int& a,       int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed long& a,        int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned long& a,      int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed long long& a,   int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned long long& a, int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, float& a,              int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, double& a,             int, int=0) { READDATA(s, a); }\n+inline unsigned int GetSerializeSize(char a,      int, int=0) { return 1; }\n+inline unsigned int GetSerializeSize(int8_t a,    int, int=0) { return 1; }\n+inline unsigned int GetSerializeSize(uint8_t a,   int, int=0) { return 1; }\n+inline unsigned int GetSerializeSize(int16_t a,   int, int=0) { return 2; }\n+inline unsigned int GetSerializeSize(uint16_t a,  int, int=0) { return 2; }\n+inline unsigned int GetSerializeSize(int32_t a,   int, int=0) { return 4; }\n+inline unsigned int GetSerializeSize(uint32_t a,  int, int=0) { return 4; }\n+inline unsigned int GetSerializeSize(int64_t a,   int, int=0) { return 8; }\n+inline unsigned int GetSerializeSize(uint64_t a,  int, int=0) { return 8; }\n+inline unsigned int GetSerializeSize(float a,     int, int=0) { return 4; }\n+inline unsigned int GetSerializeSize(double a,    int, int=0) { return 8; }\n+\n+template<typename Stream> inline void Serialize(Stream& s, char a,         int, int=0) { ser_writedata8(s, a); } // TODO Get rid of bare char\n+template<typename Stream> inline void Serialize(Stream& s, int8_t a,       int, int=0) { ser_writedata8(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint8_t a,      int, int=0) { ser_writedata8(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, int16_t a,      int, int=0) { ser_writedata16(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint16_t a,     int, int=0) { ser_writedata16(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, int32_t a,      int, int=0) { ser_writedata32(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint32_t a,     int, int=0) { ser_writedata32(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, int64_t a,      int, int=0) { ser_writedata64(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint64_t a,     int, int=0) { ser_writedata64(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, float a,        int, int=0) { ser_writedata32(s, ser_float_to_uint32(a)); }\n+template<typename Stream> inline void Serialize(Stream& s, double a,       int, int=0) { ser_writedata64(s, ser_double_to_uint64(a)); }\n+\n+template<typename Stream> inline void Unserialize(Stream& s, char& a,      int, int=0) { a = ser_readdata8(s); } // TODO Get rid of bare char\n+template<typename Stream> inline void Unserialize(Stream& s, int8_t& a,    int, int=0) { a = ser_readdata8(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint8_t& a,   int, int=0) { a = ser_readdata8(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, int16_t& a,   int, int=0) { a = ser_readdata16(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint16_t& a,  int, int=0) { a = ser_readdata16(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, int32_t& a,   int, int=0) { a = ser_readdata32(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint32_t& a,  int, int=0) { a = ser_readdata32(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, int64_t& a,   int, int=0) { a = ser_readdata64(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint64_t& a,  int, int=0) { a = ser_readdata64(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, float& a,     int, int=0) { a = ser_uint32_to_float(ser_readdata32(s)); }\n+template<typename Stream> inline void Unserialize(Stream& s, double& a,    int, int=0) { a = ser_uint64_to_double(ser_readdata64(s)); }\n \n inline unsigned int GetSerializeSize(bool a, int, int=0)                          { return sizeof(char); }\n-template<typename Stream> inline void Serialize(Stream& s, bool a, int, int=0)    { char f=a; WRITEDATA(s, f); }\n-template<typename Stream> inline void Unserialize(Stream& s, bool& a, int, int=0) { char f; READDATA(s, f); a=f; }\n+template<typename Stream> inline void Serialize(Stream& s, bool a, int, int=0)    { char f=a; ser_writedata8(s, f); }\n+template<typename Stream> inline void Unserialize(Stream& s, bool& a, int, int=0) { char f=ser_readdata8(s); a=f; }\n \n \n \n@@ -187,64 +251,50 @@ void WriteCompactSize(Stream& os, uint64_t nSize)\n {\n     if (nSize < 253)\n     {\n-        unsigned char chSize = nSize;\n-        WRITEDATA(os, chSize);\n+        ser_writedata8(os, nSize);\n     }\n     else if (nSize <= std::numeric_limits<unsigned short>::max())\n     {\n-        unsigned char chSize = 253;\n-        unsigned short xSize = nSize;\n-        WRITEDATA(os, chSize);\n-        WRITEDATA(os, xSize);\n+        ser_writedata8(os, 253);\n+        ser_writedata16(os, nSize);\n     }\n     else if (nSize <= std::numeric_limits<unsigned int>::max())\n     {\n-        unsigned char chSize = 254;\n-        unsigned int xSize = nSize;\n-        WRITEDATA(os, chSize);\n-        WRITEDATA(os, xSize);\n+        ser_writedata8(os, 254);\n+        ser_writedata32(os, nSize);\n     }\n     else\n     {\n-        unsigned char chSize = 255;\n-        uint64_t xSize = nSize;\n-        WRITEDATA(os, chSize);\n-        WRITEDATA(os, xSize);\n+        ser_writedata8(os, 255);\n+        ser_writedata64(os, nSize);\n     }\n     return;\n }\n \n template<typename Stream>\n uint64_t ReadCompactSize(Stream& is)\n {\n-    unsigned char chSize;\n-    READDATA(is, chSize);\n+    uint8_t chSize = ser_readdata8(is);\n     uint64_t nSizeRet = 0;\n     if (chSize < 253)\n     {\n         nSizeRet = chSize;\n     }\n     else if (chSize == 253)\n     {\n-        unsigned short xSize;\n-        READDATA(is, xSize);\n-        nSizeRet = xSize;\n+        nSizeRet = ser_readdata16(is);\n         if (nSizeRet < 253)\n             throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");\n     }\n     else if (chSize == 254)\n     {\n-        unsigned int xSize;\n-        READDATA(is, xSize);\n-        nSizeRet = xSize;\n+        nSizeRet = ser_readdata32(is);\n         if (nSizeRet < 0x10000u)\n             throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");\n     }\n     else\n     {\n-        uint64_t xSize;\n-        READDATA(is, xSize);\n-        nSizeRet = xSize;\n+        nSizeRet = ser_readdata64(is);\n         if (nSizeRet < 0x100000000ULL)\n             throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");\n     }\n@@ -303,7 +353,7 @@ void WriteVarInt(Stream& os, I n)\n         len++;\n     }\n     do {\n-        WRITEDATA(os, tmp[len]);\n+        ser_writedata8(os, tmp[len]);\n     } while(len--);\n }\n \n@@ -312,8 +362,7 @@ I ReadVarInt(Stream& is)\n {\n     I n = 0;\n     while(true) {\n-        unsigned char chData;\n-        READDATA(is, chData);\n+        unsigned char chData = ser_readdata8(is);\n         n = (n << 7) | (chData & 0x7F);\n         if (chData & 0x80)\n             n++;"
      },
      {
        "sha": "e2d19ce5ccbfb8b2468625eef85ed35916994893",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01f9c3449a88748722dd51c7b54305fd1ba87359/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01f9c3449a88748722dd51c7b54305fd1ba87359/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=01f9c3449a88748722dd51c7b54305fd1ba87359",
        "patch": "@@ -13,6 +13,30 @@ using namespace std;\n \n BOOST_AUTO_TEST_SUITE(serialize_tests)\n \n+BOOST_AUTO_TEST_CASE(sizes)\n+{\n+    BOOST_CHECK_EQUAL(sizeof(char), GetSerializeSize(char(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(int8_t), GetSerializeSize(int8_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(uint8_t), GetSerializeSize(uint8_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(int16_t), GetSerializeSize(int16_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(uint16_t), GetSerializeSize(uint16_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(int32_t), GetSerializeSize(int32_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(uint32_t), GetSerializeSize(uint32_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(int64_t), GetSerializeSize(int64_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(uint64_t), GetSerializeSize(uint64_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(float), GetSerializeSize(float(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(double), GetSerializeSize(double(0), 0));\n+\n+    // Bool is serialized as char\n+    BOOST_CHECK_EQUAL(sizeof(char), GetSerializeSize(bool(0), 0));\n+}\n+\n+BOOST_AUTO_TEST_CASE(floats)\n+{\n+    // TODO ser_uint32_to_float, ser_uint64_to_double\n+    // TODO ser_float_to_uint32, ser_double_to_uint64\n+}\n+\n BOOST_AUTO_TEST_CASE(varints)\n {\n     // encode"
      }
    ]
  },
  {
    "sha": "aac320537523f1df1523adeba22a8498884715c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYWMzMjA1Mzc1MjNmMWRmMTUyM2FkZWJhMjJhODQ5ODg4NDcxNWM5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-18T21:07:31Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:58Z"
      },
      "message": "src/netbase.h: Fix endian in CNetAddr serialization\n\nWe've chosen to htons/ntohs explicitly on reading and writing\n(I do not know why). But as READWRITE already does an endian swap\non big endian, this means the port number gets switched around,\nwhich was what we were trying to avoid in the first place. So\nto make this compatible, serialize it as FLATDATA.",
      "tree": {
        "sha": "8fff77336fa1a0b79090de8d9da288e7743303d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8fff77336fa1a0b79090de8d9da288e7743303d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aac320537523f1df1523adeba22a8498884715c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aac320537523f1df1523adeba22a8498884715c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aac320537523f1df1523adeba22a8498884715c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aac320537523f1df1523adeba22a8498884715c9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "01f9c3449a88748722dd51c7b54305fd1ba87359",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01f9c3449a88748722dd51c7b54305fd1ba87359",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01f9c3449a88748722dd51c7b54305fd1ba87359"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b42c2dffa4d69da971cc2d4c6c75593ceadf6fb7",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aac320537523f1df1523adeba22a8498884715c9/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aac320537523f1df1523adeba22a8498884715c9/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=aac320537523f1df1523adeba22a8498884715c9",
        "patch": "@@ -162,7 +162,7 @@ class CService : public CNetAddr\n         inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n             READWRITE(FLATDATA(ip));\n             unsigned short portN = htons(port);\n-            READWRITE(portN);\n+            READWRITE(FLATDATA(portN));\n             if (ser_action.ForRead())\n                  port = ntohs(portN);\n         }"
      }
    ]
  },
  {
    "sha": "f4e6487219d4b861df71e80d89d864ff6f312d17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNGU2NDg3MjE5ZDRiODYxZGY3MWU4MGQ4OWQ4NjRmZjZmMzEyZDE3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T12:08:06Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:59Z"
      },
      "message": "src/arith_256.cpp: bigendian compatibility",
      "tree": {
        "sha": "c8b9005d0d53616c66e6ef12cbc5b6091295a793",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c8b9005d0d53616c66e6ef12cbc5b6091295a793"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4e6487219d4b861df71e80d89d864ff6f312d17",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4e6487219d4b861df71e80d89d864ff6f312d17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f4e6487219d4b861df71e80d89d864ff6f312d17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4e6487219d4b861df71e80d89d864ff6f312d17/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aac320537523f1df1523adeba22a8498884715c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aac320537523f1df1523adeba22a8498884715c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aac320537523f1df1523adeba22a8498884715c9"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "2e613635761d8622032ff85c51f506548700f70d",
        "filename": "src/arith_uint256.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4e6487219d4b861df71e80d89d864ff6f312d17/src/arith_uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4e6487219d4b861df71e80d89d864ff6f312d17/src/arith_uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.cpp?ref=f4e6487219d4b861df71e80d89d864ff6f312d17",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"uint256.h\"\n #include \"utilstrencodings.h\"\n+#include \"crypto/common.h\"\n \n #include <stdio.h>\n #include <string.h>\n@@ -246,14 +247,14 @@ uint32_t arith_uint256::GetCompact(bool fNegative) const\n uint256 ArithToUint256(const arith_uint256 &a)\n {\n     uint256 b;\n-    // TODO: needs bswap32 on big-endian\n-    memcpy(b.begin(), a.pn, a.size());\n+    for(int x=0; x<a.WIDTH; ++x)\n+        WriteLE32(b.begin() + x*4, a.pn[x]);\n     return b;\n }\n arith_uint256 UintToArith256(const uint256 &a)\n {\n     arith_uint256 b;\n-    // TODO: needs bswap32 on big-endian\n-    memcpy(b.pn, a.begin(), a.size());\n+    for(int x=0; x<b.WIDTH; ++x)\n+        b.pn[x] = ReadLE32(a.begin() + x*4);\n     return b;\n }"
      }
    ]
  },
  {
    "sha": "9f4fac98c429d9ee2135fab32dfae2d1fe171a45",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZjRmYWM5OGM0MjlkOWVlMjEzNWZhYjMyZGZhZTJkMWZlMTcxYTQ1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T14:21:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:59Z"
      },
      "message": "src/txmempool.cpp: make numEntries a uint32_t\n\nDon't ever serialize a size_t or long, their sizes are platform\ndependent.",
      "tree": {
        "sha": "33bdfe1a0fcd2a0c136464c8f2ba6849f8743231",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33bdfe1a0fcd2a0c136464c8f2ba6849f8743231"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f4fac98c429d9ee2135fab32dfae2d1fe171a45",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f4fac98c429d9ee2135fab32dfae2d1fe171a45",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f4fac98c429d9ee2135fab32dfae2d1fe171a45",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f4fac98c429d9ee2135fab32dfae2d1fe171a45/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4e6487219d4b861df71e80d89d864ff6f312d17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4e6487219d4b861df71e80d89d864ff6f312d17",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4e6487219d4b861df71e80d89d864ff6f312d17"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0d506603276f3a95b4676d2bbac0ce563e0d4eea",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f4fac98c429d9ee2135fab32dfae2d1fe171a45/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f4fac98c429d9ee2135fab32dfae2d1fe171a45/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=9f4fac98c429d9ee2135fab32dfae2d1fe171a45",
        "patch": "@@ -337,7 +337,7 @@ class CMinerPolicyEstimator\n     void Write(CAutoFile& fileout) const\n     {\n         fileout << nBestSeenHeight;\n-        fileout << history.size();\n+        fileout << (uint32_t)history.size();\n         BOOST_FOREACH(const CBlockAverage& entry, history)\n         {\n             entry.Write(fileout);\n@@ -348,7 +348,7 @@ class CMinerPolicyEstimator\n     {\n         int nFileBestSeenHeight;\n         filein >> nFileBestSeenHeight;\n-        size_t numEntries;\n+        uint32_t numEntries;\n         filein >> numEntries;\n         if (numEntries <= 0 || numEntries > 10000)\n             throw runtime_error(\"Corrupt estimates file. Must have between 1 and 10k entries.\");"
      }
    ]
  },
  {
    "sha": "62b30f09acae20f83dfb7995fa8b221c35e2fbff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MmIzMGYwOWFjYWUyMGY4M2RmYjc5OTVmYThiMjIxYzM1ZTJmYmZm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-14T10:07:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:59Z"
      },
      "message": "Add serialize float/double tests",
      "tree": {
        "sha": "1d89b17b869ace8756b6fc5f8260be01680952b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d89b17b869ace8756b6fc5f8260be01680952b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/62b30f09acae20f83dfb7995fa8b221c35e2fbff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62b30f09acae20f83dfb7995fa8b221c35e2fbff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/62b30f09acae20f83dfb7995fa8b221c35e2fbff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62b30f09acae20f83dfb7995fa8b221c35e2fbff/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9f4fac98c429d9ee2135fab32dfae2d1fe171a45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f4fac98c429d9ee2135fab32dfae2d1fe171a45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f4fac98c429d9ee2135fab32dfae2d1fe171a45"
      }
    ],
    "stats": {
      "total": 96,
      "additions": 93,
      "deletions": 3
    },
    "files": [
      {
        "sha": "de9510d54a451f81a1f9d347d96ffe5264b0ec33",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 93,
        "deletions": 3,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62b30f09acae20f83dfb7995fa8b221c35e2fbff/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62b30f09acae20f83dfb7995fa8b221c35e2fbff/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=62b30f09acae20f83dfb7995fa8b221c35e2fbff",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"serialize.h\"\n #include \"streams.h\"\n+#include \"hash.h\"\n \n #include <stdint.h>\n \n@@ -26,15 +27,104 @@ BOOST_AUTO_TEST_CASE(sizes)\n     BOOST_CHECK_EQUAL(sizeof(uint64_t), GetSerializeSize(uint64_t(0), 0));\n     BOOST_CHECK_EQUAL(sizeof(float), GetSerializeSize(float(0), 0));\n     BOOST_CHECK_EQUAL(sizeof(double), GetSerializeSize(double(0), 0));\n-\n     // Bool is serialized as char\n     BOOST_CHECK_EQUAL(sizeof(char), GetSerializeSize(bool(0), 0));\n+\n+    // Sanity-check GetSerializeSize and c++ type matching\n+    BOOST_CHECK_EQUAL(GetSerializeSize(char(0), 0), 1);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int8_t(0), 0), 1);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint8_t(0), 0), 1);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int16_t(0), 0), 2);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint16_t(0), 0), 2);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int32_t(0), 0), 4);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint32_t(0), 0), 4);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int64_t(0), 0), 8);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint64_t(0), 0), 8);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(float(0), 0), 4);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(double(0), 0), 8);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(bool(0), 0), 1);\n }\n \n+BOOST_AUTO_TEST_CASE(floats_conversion)\n+{\n+    // Choose values that map unambigiously to binary floating point to avoid\n+    // rounding issues at the compiler side.\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x00000000), 0.0F);\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x3f000000), 0.5F);\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x3f800000), 1.0F);\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x40000000), 2.0F);\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x40800000), 4.0F);\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x44444444), 785.066650390625F);\n+\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(0.0F), 0x00000000);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(0.5F), 0x3f000000);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(1.0F), 0x3f800000);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(2.0F), 0x40000000);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(4.0F), 0x40800000);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(785.066650390625F), 0x44444444);\n+}\n+\n+BOOST_AUTO_TEST_CASE(doubles_conversion)\n+{\n+    // Choose values that map unambigiously to binary floating point to avoid\n+    // rounding issues at the compiler side.\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x0000000000000000ULL), 0.0);\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x3fe0000000000000ULL), 0.5);\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x3ff0000000000000ULL), 1.0);\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x4000000000000000ULL), 2.0);\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x4010000000000000ULL), 4.0);\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x4088888880000000ULL), 785.066650390625);\n+\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(0.0), 0x0000000000000000ULL);\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(0.5), 0x3fe0000000000000ULL);\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(1.0), 0x3ff0000000000000ULL);\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(2.0), 0x4000000000000000ULL);\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(4.0), 0x4010000000000000ULL);\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(785.066650390625), 0x4088888880000000ULL);\n+}\n+/*\n+Python code to generate the below hashes:\n+\n+    def reversed_hex(x):\n+        return binascii.hexlify(''.join(reversed(x)))\n+    def dsha256(x):\n+        return hashlib.sha256(hashlib.sha256(x).digest()).digest()\n+\n+    reversed_hex(dsha256(''.join(struct.pack('<f', x) for x in range(0,1000)))) == '8e8b4cf3e4df8b332057e3e23af42ebc663b61e0495d5e7e32d85099d7f3fe0c'\n+    reversed_hex(dsha256(''.join(struct.pack('<d', x) for x in range(0,1000)))) == '43d0c82591953c4eafe114590d392676a01585d25b25d433557f0d7878b23f96'\n+*/\n BOOST_AUTO_TEST_CASE(floats)\n {\n-    // TODO ser_uint32_to_float, ser_uint64_to_double\n-    // TODO ser_float_to_uint32, ser_double_to_uint64\n+    CDataStream ss(SER_DISK, 0);\n+    // encode\n+    for (int i = 0; i < 1000; i++) {\n+        ss << float(i);\n+    }\n+    BOOST_CHECK(Hash(ss.begin(), ss.end()) == uint256S(\"8e8b4cf3e4df8b332057e3e23af42ebc663b61e0495d5e7e32d85099d7f3fe0c\"));\n+\n+    // decode\n+    for (int i = 0; i < 1000; i++) {\n+        float j;\n+        ss >> j;\n+        BOOST_CHECK_MESSAGE(i == j, \"decoded:\" << j << \" expected:\" << i);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(doubles)\n+{\n+    CDataStream ss(SER_DISK, 0);\n+    // encode\n+    for (int i = 0; i < 1000; i++) {\n+        ss << double(i);\n+    }\n+    BOOST_CHECK(Hash(ss.begin(), ss.end()) == uint256S(\"43d0c82591953c4eafe114590d392676a01585d25b25d433557f0d7878b23f96\"));\n+\n+    // decode\n+    for (int i = 0; i < 1000; i++) {\n+        double j;\n+        ss >> j;\n+        BOOST_CHECK_MESSAGE(i == j, \"decoded:\" << j << \" expected:\" << i);\n+    }\n }\n \n BOOST_AUTO_TEST_CASE(varints)"
      }
    ]
  },
  {
    "sha": "a0ae79d77552d9ee67469c934458a3f3bd170858",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMGFlNzlkNzc1NTJkOWVlNjc0NjljOTM0NDU4YTNmM2JkMTcwODU4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-18T18:23:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:59Z"
      },
      "message": "Replace CBlockHeader::GetHash with call to SerializeHash\n\nRemoves variability between LE and BE.\nAs suggested by @sipa.",
      "tree": {
        "sha": "e52428f7cb819fddbdc8b801ea3894306e266d85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e52428f7cb819fddbdc8b801ea3894306e266d85"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a0ae79d77552d9ee67469c934458a3f3bd170858",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0ae79d77552d9ee67469c934458a3f3bd170858",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a0ae79d77552d9ee67469c934458a3f3bd170858",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0ae79d77552d9ee67469c934458a3f3bd170858/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "62b30f09acae20f83dfb7995fa8b221c35e2fbff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62b30f09acae20f83dfb7995fa8b221c35e2fbff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/62b30f09acae20f83dfb7995fa8b221c35e2fbff"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 1,
      "deletions": 12
    },
    "files": [
      {
        "sha": "5b9c13d87011bf192b70bb7fc2902801e1e16e2e",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 12,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0ae79d77552d9ee67469c934458a3f3bd170858/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0ae79d77552d9ee67469c934458a3f3bd170858/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=a0ae79d77552d9ee67469c934458a3f3bd170858",
        "patch": "@@ -12,18 +12,7 @@\n \n uint256 CBlockHeader::GetHash() const\n {\n-#if defined(WORDS_BIGENDIAN)\n-    uint8_t data[80];\n-    WriteLE32(&data[0], nVersion);\n-    memcpy(&data[4], hashPrevBlock.begin(), hashPrevBlock.size());\n-    memcpy(&data[36], hashMerkleRoot.begin(), hashMerkleRoot.size());\n-    WriteLE32(&data[68], nTime);\n-    WriteLE32(&data[72], nBits);\n-    WriteLE32(&data[76], nNonce);\n-    return Hash(data, data + 80);\n-#else // Can take shortcut for little endian\n-    return Hash(BEGIN(nVersion), END(nNonce));\n-#endif\n+    return SerializeHash(*this);\n }\n \n uint256 CBlock::BuildMerkleTree(bool* fMutated) const"
      }
    ]
  },
  {
    "sha": "69866436be692497cf7e0aabd93a2becdcdd72f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OTg2NjQzNmJlNjkyNDk3Y2Y3ZTBhYWJkOTNhMmJlY2RjZGQ3MmY1",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-03-05T16:49:06Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-03-06T17:15:08Z"
      },
      "message": "Run unit tests in different orders\n\nSet the BOOST_TEST_RANDOM environment variable, to\nrun unit tests in different orders for each test in the\ntest matrix that runs tests.",
      "tree": {
        "sha": "5ca1af8132c8d0dcde0289614013f52e8285c7c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ca1af8132c8d0dcde0289614013f52e8285c7c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69866436be692497cf7e0aabd93a2becdcdd72f5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlT54KcACgkQdYgkL74406ixYQCglTFtM96/ga+3981l5LCGWCSr\nvYEAn1GqgZvjRqWs31ahZ+WXew3nvETx\n=OcGc\n-----END PGP SIGNATURE-----",
        "payload": "tree 5ca1af8132c8d0dcde0289614013f52e8285c7c5\nparent 84a05b843b8ab704266289de67c9779ad733a196\nauthor Gavin Andresen <gavinandresen@gmail.com> 1425574146 -0500\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1425662108 -0500\n\nRun unit tests in different orders\n\nSet the BOOST_TEST_RANDOM environment variable, to\nrun unit tests in different orders for each test in the\ntest matrix that runs tests.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69866436be692497cf7e0aabd93a2becdcdd72f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69866436be692497cf7e0aabd93a2becdcdd72f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69866436be692497cf7e0aabd93a2becdcdd72f5/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "84a05b843b8ab704266289de67c9779ad733a196",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84a05b843b8ab704266289de67c9779ad733a196",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84a05b843b8ab704266289de67c9779ad733a196"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9c18729b42a85461f71e4b2c1f37d9a01f2e3af0",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69866436be692497cf7e0aabd93a2becdcdd72f5/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69866436be692497cf7e0aabd93a2becdcdd72f5/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=69866436be692497cf7e0aabd93a2becdcdd72f5",
        "patch": "@@ -10,6 +10,7 @@ env:\n   global:\n     - MAKEJOBS=-j3\n     - RUN_TESTS=false\n+    - BOOST_TEST_RANDOM=1$TRAVIS_BUILD_ID\n     - CCACHE_SIZE=100M\n     - CCACHE_TEMPDIR=/tmp/.ccache-temp\n     - CCACHE_COMPRESS=1"
      }
    ]
  },
  {
    "sha": "7c3fbc34aed578398b3f180a621c671ff3837cec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YzNmYmMzNGFlZDU3ODM5OGIzZjE4MGE2MjFjNjcxZmYzODM3Y2Vj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T17:23:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T17:35:25Z"
      },
      "message": "Merge pull request #5510\n\na0ae79d Replace CBlockHeader::GetHash with call to SerializeHash (Wladimir J. van der Laan)\n62b30f0 Add serialize float/double tests (Wladimir J. van der Laan)\n9f4fac9 src/txmempool.cpp: make numEntries a uint32_t (Wladimir J. van der Laan)\nf4e6487 src/arith_256.cpp: bigendian compatibility (Wladimir J. van der Laan)\naac3205 src/netbase.h: Fix endian in CNetAddr serialization (Wladimir J. van der Laan)\n01f9c34 src/serialize.h: base serialization level endianness neutrality (Wladimir J. van der Laan)\n4e853aa src/script/script.h: endian compatibility for PUSHDATA sizes (Wladimir J. van der Laan)\n4f92773 src/primitives/transaction.h: endian compatibility in serialization (Wladimir J. van der Laan)\n81aeb28 src/primitives/block.cpp: endian compatibility in GetHash (Wladimir J. van der Laan)\ndec84ca src/net.cpp: endian compatibility in EndMessage (Wladimir J. van der Laan)\n556814e src/main.cpp: endian compatibility in packet checksum check (Wladimir J. van der Laan)\n3ca5852 src/hash.cpp: endian compatibility (Wladimir J. van der Laan)\n4414f5f build: Endian compatibility (Wladimir J. van der Laan)",
      "tree": {
        "sha": "e52428f7cb819fddbdc8b801ea3894306e266d85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e52428f7cb819fddbdc8b801ea3894306e266d85"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c3fbc34aed578398b3f180a621c671ff3837cec",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU+eVdAAoJEHSBCwEjRsmmJ7wH/iga+a5M651lsQl+KBI61Z9T\nXnyPjLYXv5EPT2cltBiSumP9ahxMml29EyWtloYF9nTjSQgOilgIHDonFaAyPYqn\nP0//HRNTyyjvt0jv5q2ic/I1fYChps9yv3Ciwc0y6INT2EtGM4iCwnQmwWVEHaOS\nPY5pIepXpqoQhh37tOQxETtaS1vkAJDnvdY/i3kHMltOKexlpfklfn3WHZTuCV6S\n1/AppfTJnBYmljnpAwyTjB9fC4W5jGgXDQcmnGF3JposdbDFFUoAZPZMcU8PrYPI\nYqiDIK3iDyxJNBPGaKhqoG7ESWOUXqrG+QUyrdU8nVsL2ikLkk+X2I3LDJRzZw0=\n=X2/B\n-----END PGP SIGNATURE-----",
        "payload": "tree e52428f7cb819fddbdc8b801ea3894306e266d85\nparent 51377c2dbe0d71dad953a43187749a38010d1f1f\nparent a0ae79d77552d9ee67469c934458a3f3bd170858\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1425662625 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1425663325 +0100\n\nMerge pull request #5510\n\na0ae79d Replace CBlockHeader::GetHash with call to SerializeHash (Wladimir J. van der Laan)\n62b30f0 Add serialize float/double tests (Wladimir J. van der Laan)\n9f4fac9 src/txmempool.cpp: make numEntries a uint32_t (Wladimir J. van der Laan)\nf4e6487 src/arith_256.cpp: bigendian compatibility (Wladimir J. van der Laan)\naac3205 src/netbase.h: Fix endian in CNetAddr serialization (Wladimir J. van der Laan)\n01f9c34 src/serialize.h: base serialization level endianness neutrality (Wladimir J. van der Laan)\n4e853aa src/script/script.h: endian compatibility for PUSHDATA sizes (Wladimir J. van der Laan)\n4f92773 src/primitives/transaction.h: endian compatibility in serialization (Wladimir J. van der Laan)\n81aeb28 src/primitives/block.cpp: endian compatibility in GetHash (Wladimir J. van der Laan)\ndec84ca src/net.cpp: endian compatibility in EndMessage (Wladimir J. van der Laan)\n556814e src/main.cpp: endian compatibility in packet checksum check (Wladimir J. van der Laan)\n3ca5852 src/hash.cpp: endian compatibility (Wladimir J. van der Laan)\n4414f5f build: Endian compatibility (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c3fbc34aed578398b3f180a621c671ff3837cec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7c3fbc34aed578398b3f180a621c671ff3837cec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c3fbc34aed578398b3f180a621c671ff3837cec/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51377c2dbe0d71dad953a43187749a38010d1f1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51377c2dbe0d71dad953a43187749a38010d1f1f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51377c2dbe0d71dad953a43187749a38010d1f1f"
      },
      {
        "sha": "a0ae79d77552d9ee67469c934458a3f3bd170858",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0ae79d77552d9ee67469c934458a3f3bd170858",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a0ae79d77552d9ee67469c934458a3f3bd170858"
      }
    ],
    "stats": {
      "total": 696,
      "additions": 530,
      "deletions": 166
    },
    "files": [
      {
        "sha": "2c918218bb836e19cf078b55526e34f72a456eee",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -350,8 +350,8 @@ if test x$use_lcov = xyes; then\n     [AC_MSG_ERROR(\"lcov testing requested but --coverage flag does not work\")])\n fi\n \n-dnl Require little endian\n-AC_C_BIGENDIAN([AC_MSG_ERROR(\"Big Endian not supported\")])\n+dnl Check for endianness\n+AC_C_BIGENDIAN\n \n dnl Check for pthread compile/link requirements\n AX_PTHREAD\n@@ -438,17 +438,22 @@ if test x$TARGET_OS = xdarwin; then\n   AX_CHECK_LINK_FLAG([[-Wl,-dead_strip]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip\"])\n fi\n \n-AC_CHECK_HEADERS([endian.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h])\n+AC_CHECK_HEADERS([endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h])\n AC_SEARCH_LIBS([getaddrinfo_a], [anl], [AC_DEFINE(HAVE_GETADDRINFO_A, 1, [Define this symbol if you have getaddrinfo_a])])\n AC_SEARCH_LIBS([inet_pton], [nsl resolv], [AC_DEFINE(HAVE_INET_PTON, 1, [Define this symbol if you have inet_pton])])\n \n AC_CHECK_DECLS([strnlen])\n \n-AC_CHECK_DECLS([le32toh, le64toh, htole32, htole64, be32toh, be64toh, htobe32, htobe64],,,\n+AC_CHECK_DECLS([le16toh, le32toh, le64toh, htole16, htole32, htole64, be16toh, be32toh, be64toh, htobe16, htobe32, htobe64],,,\n \t\t[#if HAVE_ENDIAN_H\n                  #include <endian.h>\n                  #endif])\n \n+AC_CHECK_DECLS([bswap_16, bswap_32, bswap_64],,,\n+\t\t[#if HAVE_BYTESWAP_H\n+                 #include <byteswap.h>\n+                 #endif])\n+\n dnl Check for MSG_NOSIGNAL\n AC_MSG_CHECKING(for MSG_NOSIGNAL)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/socket.h>]],"
      },
      {
        "sha": "da65efa713279c2b23df5b791bbd3b72a2bbb06b",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -141,6 +141,8 @@ BITCOIN_CORE_H = \\\n   walletdb.h \\\n   wallet.h \\\n   wallet_ismine.h \\\n+  compat/byteswap.h \\\n+  compat/endian.h \\\n   compat/sanity.h\n \n JSON_H = \\"
      },
      {
        "sha": "2e613635761d8622032ff85c51f506548700f70d",
        "filename": "src/arith_uint256.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/src/arith_uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/src/arith_uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.cpp?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"uint256.h\"\n #include \"utilstrencodings.h\"\n+#include \"crypto/common.h\"\n \n #include <stdio.h>\n #include <string.h>\n@@ -246,14 +247,14 @@ uint32_t arith_uint256::GetCompact(bool fNegative) const\n uint256 ArithToUint256(const arith_uint256 &a)\n {\n     uint256 b;\n-    // TODO: needs bswap32 on big-endian\n-    memcpy(b.begin(), a.pn, a.size());\n+    for(int x=0; x<a.WIDTH; ++x)\n+        WriteLE32(b.begin() + x*4, a.pn[x]);\n     return b;\n }\n arith_uint256 UintToArith256(const uint256 &a)\n {\n     arith_uint256 b;\n-    // TODO: needs bswap32 on big-endian\n-    memcpy(b.pn, a.begin(), a.size());\n+    for(int x=0; x<b.WIDTH; ++x)\n+        b.pn[x] = ReadLE32(a.begin() + x*4);\n     return b;\n }"
      },
      {
        "sha": "899220bdc549053927edf86a29bc415310fb5eba",
        "filename": "src/compat/byteswap.h",
        "status": "added",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/src/compat/byteswap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/src/compat/byteswap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/byteswap.h?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMPAT_BYTESWAP_H\n+#define BITCOIN_COMPAT_BYTESWAP_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n+#include <stdint.h>\n+\n+#if defined(HAVE_BYTESWAP_H)\n+#include <byteswap.h>\n+#endif\n+\n+#if HAVE_DECL_BSWAP_16 == 0\n+inline uint16_t bswap_16(uint16_t x)\n+{\n+    return (x >> 8) | ((x & 0x00ff) << 8);\n+}\n+#endif // HAVE_DECL_BSWAP16\n+\n+#if HAVE_DECL_BSWAP_32 == 0\n+inline uint32_t bswap_32(uint32_t x)\n+{\n+    return (((x & 0xff000000U) >> 24) | ((x & 0x00ff0000U) >>  8) |\n+            ((x & 0x0000ff00U) <<  8) | ((x & 0x000000ffU) << 24));\n+}\n+#endif // HAVE_DECL_BSWAP32\n+\n+#if HAVE_DECL_BSWAP_64 == 0\n+inline uint64_t bswap_64(uint64_t x)\n+{\n+     return (((x & 0xff00000000000000ull) >> 56)\n+          | ((x & 0x00ff000000000000ull) >> 40)\n+          | ((x & 0x0000ff0000000000ull) >> 24)\n+          | ((x & 0x000000ff00000000ull) >> 8)\n+          | ((x & 0x00000000ff000000ull) << 8)\n+          | ((x & 0x0000000000ff0000ull) << 24)\n+          | ((x & 0x000000000000ff00ull) << 40)\n+          | ((x & 0x00000000000000ffull) << 56));\n+}\n+#endif // HAVE_DECL_BSWAP64\n+\n+#endif // BITCOIN_COMPAT_BYTESWAP_H"
      },
      {
        "sha": "4d041d655411738476ecbc1e5c96e845452d8b8f",
        "filename": "src/compat/endian.h",
        "status": "added",
        "additions": 194,
        "deletions": 0,
        "changes": 194,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/src/compat/endian.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/src/compat/endian.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/endian.h?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -0,0 +1,194 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMPAT_ENDIAN_H\n+#define BITCOIN_COMPAT_ENDIAN_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n+#include <stdint.h>\n+\n+#include \"compat/byteswap.h\"\n+\n+#if defined(HAVE_ENDIAN_H)\n+#include <endian.h>\n+#endif\n+\n+#if defined(WORDS_BIGENDIAN)\n+\n+#if HAVE_DECL_HTOBE16 == 0\n+inline uint16_t htobe16(uint16_t host_16bits)\n+{\n+    return host_16bits;\n+}\n+#endif // HAVE_DECL_HTOBE16\n+\n+#if HAVE_DECL_HTOLE16 == 0\n+inline uint16_t htole16(uint16_t host_16bits)\n+{\n+    return bswap_16(host_16bits);\n+}\n+#endif // HAVE_DECL_HTOLE16\n+\n+#if HAVE_DECL_BE16TOH == 0\n+inline uint16_t be16toh(uint16_t big_endian_16bits)\n+{\n+    return big_endian_16bits;\n+}\n+#endif // HAVE_DECL_BE16TOH\n+\n+#if HAVE_DECL_LE16TOH == 0\n+inline uint16_t le16toh(uint16_t little_endian_16bits)\n+{\n+    return bswap_16(little_endian_16bits);\n+}\n+#endif // HAVE_DECL_LE16TOH\n+\n+#if HAVE_DECL_HTOBE32 == 0\n+inline uint32_t htobe32(uint32_t host_32bits)\n+{\n+    return host_32bits;\n+}\n+#endif // HAVE_DECL_HTOBE32\n+\n+#if HAVE_DECL_HTOLE32 == 0\n+inline uint32_t htole32(uint32_t host_32bits)\n+{\n+    return bswap_32(host_32bits);\n+}\n+#endif // HAVE_DECL_HTOLE32\n+\n+#if HAVE_DECL_BE32TOH == 0\n+inline uint32_t be32toh(uint32_t big_endian_32bits)\n+{\n+    return big_endian_32bits;\n+}\n+#endif // HAVE_DECL_BE32TOH\n+\n+#if HAVE_DECL_LE32TOH == 0\n+inline uint32_t le32toh(uint32_t little_endian_32bits)\n+{\n+    return bswap_32(little_endian_32bits);\n+}\n+#endif // HAVE_DECL_LE32TOH\n+\n+#if HAVE_DECL_HTOBE64 == 0\n+inline uint64_t htobe64(uint64_t host_64bits)\n+{\n+    return host_64bits;\n+}\n+#endif // HAVE_DECL_HTOBE64\n+\n+#if HAVE_DECL_HTOLE64 == 0\n+inline uint64_t htole64(uint64_t host_64bits)\n+{\n+    return bswap_64(host_64bits);\n+}\n+#endif // HAVE_DECL_HTOLE64\n+\n+#if HAVE_DECL_BE64TOH == 0\n+inline uint64_t be64toh(uint64_t big_endian_64bits)\n+{\n+    return big_endian_64bits;\n+}\n+#endif // HAVE_DECL_BE64TOH\n+\n+#if HAVE_DECL_LE64TOH == 0\n+inline uint64_t le64toh(uint64_t little_endian_64bits)\n+{\n+    return bswap_64(little_endian_64bits);\n+}\n+#endif // HAVE_DECL_LE64TOH\n+\n+#else // WORDS_BIGENDIAN\n+\n+#if HAVE_DECL_HTOBE16 == 0\n+inline uint16_t htobe16(uint16_t host_16bits)\n+{\n+    return bswap_16(host_16bits);\n+}\n+#endif // HAVE_DECL_HTOBE16\n+\n+#if HAVE_DECL_HTOLE16 == 0\n+inline uint16_t htole16(uint16_t host_16bits)\n+{\n+    return host_16bits;\n+}\n+#endif // HAVE_DECL_HTOLE16\n+\n+#if HAVE_DECL_BE16TOH == 0\n+inline uint16_t be16toh(uint16_t big_endian_16bits)\n+{\n+    return bswap_16(big_endian_16bits);\n+}\n+#endif // HAVE_DECL_BE16TOH\n+\n+#if HAVE_DECL_LE16TOH == 0\n+inline uint16_t le16toh(uint16_t little_endian_16bits)\n+{\n+    return little_endian_16bits;\n+}\n+#endif // HAVE_DECL_LE16TOH\n+\n+#if HAVE_DECL_HTOBE32 == 0\n+inline uint32_t htobe32(uint32_t host_32bits)\n+{\n+    return bswap_32(host_32bits);\n+}\n+#endif // HAVE_DECL_HTOBE32\n+\n+#if HAVE_DECL_HTOLE32 == 0\n+inline uint32_t htole32(uint32_t host_32bits)\n+{\n+    return host_32bits;\n+}\n+#endif // HAVE_DECL_HTOLE32\n+\n+#if HAVE_DECL_BE32TOH == 0\n+inline uint32_t be32toh(uint32_t big_endian_32bits)\n+{\n+    return bswap_32(big_endian_32bits);\n+}\n+#endif // HAVE_DECL_BE32TOH\n+\n+#if HAVE_DECL_LE32TOH == 0\n+inline uint32_t le32toh(uint32_t little_endian_32bits)\n+{\n+    return little_endian_32bits;\n+}\n+#endif // HAVE_DECL_LE32TOH\n+\n+#if HAVE_DECL_HTOBE64 == 0\n+inline uint64_t htobe64(uint64_t host_64bits)\n+{\n+    return bswap_64(host_64bits);\n+}\n+#endif // HAVE_DECL_HTOBE64\n+\n+#if HAVE_DECL_HTOLE64 == 0\n+inline uint64_t htole64(uint64_t host_64bits)\n+{\n+    return host_64bits;\n+}\n+#endif // HAVE_DECL_HTOLE64\n+\n+#if HAVE_DECL_BE64TOH == 0\n+inline uint64_t be64toh(uint64_t big_endian_64bits)\n+{\n+    return bswap_64(big_endian_64bits);\n+}\n+#endif // HAVE_DECL_BE64TOH\n+\n+#if HAVE_DECL_LE64TOH == 0\n+inline uint64_t le64toh(uint64_t little_endian_64bits)\n+{\n+    return little_endian_64bits;\n+}\n+#endif // HAVE_DECL_LE64TOH\n+\n+#endif // WORDS_BIGENDIAN\n+\n+#endif // BITCOIN_COMPAT_ENDIAN_H"
      },
      {
        "sha": "580c72f5a6480f1e884120d78b51fb628fe515dc",
        "filename": "src/crypto/common.h",
        "status": "modified",
        "additions": 11,
        "deletions": 65,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/src/crypto/common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/src/crypto/common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/common.h?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -11,110 +11,56 @@\n \n #include <stdint.h>\n \n-#if defined(HAVE_ENDIAN_H)\n-#include <endian.h>\n-#endif\n+#include \"compat/endian.h\"\n+\n+uint16_t static inline ReadLE16(const unsigned char* ptr)\n+{\n+    return le16toh(*((uint16_t*)ptr));\n+}\n \n uint32_t static inline ReadLE32(const unsigned char* ptr)\n {\n-#if HAVE_DECL_LE32TOH == 1\n     return le32toh(*((uint32_t*)ptr));\n-#elif !defined(WORDS_BIGENDIAN)\n-    return *((uint32_t*)ptr);\n-#else\n-    return ((uint32_t)ptr[3] << 24 | (uint32_t)ptr[2] << 16 | (uint32_t)ptr[1] << 8 | (uint32_t)ptr[0]);\n-#endif\n }\n \n uint64_t static inline ReadLE64(const unsigned char* ptr)\n {\n-#if HAVE_DECL_LE64TOH == 1\n     return le64toh(*((uint64_t*)ptr));\n-#elif !defined(WORDS_BIGENDIAN)\n-    return *((uint64_t*)ptr);\n-#else\n-    return ((uint64_t)ptr[7] << 56 | (uint64_t)ptr[6] << 48 | (uint64_t)ptr[5] << 40 | (uint64_t)ptr[4] << 32 |\n-            (uint64_t)ptr[3] << 24 | (uint64_t)ptr[2] << 16 | (uint64_t)ptr[1] << 8 | (uint64_t)ptr[0]);\n-#endif\n+}\n+\n+void static inline WriteLE16(unsigned char* ptr, uint16_t x)\n+{\n+    *((uint16_t*)ptr) = htole16(x);\n }\n \n void static inline WriteLE32(unsigned char* ptr, uint32_t x)\n {\n-#if HAVE_DECL_HTOLE32 == 1\n     *((uint32_t*)ptr) = htole32(x);\n-#elif !defined(WORDS_BIGENDIAN)\n-    *((uint32_t*)ptr) = x;\n-#else\n-    ptr[3] = x >> 24;\n-    ptr[2] = x >> 16;\n-    ptr[1] = x >> 8;\n-    ptr[0] = x;\n-#endif\n }\n \n void static inline WriteLE64(unsigned char* ptr, uint64_t x)\n {\n-#if HAVE_DECL_HTOLE64 == 1\n     *((uint64_t*)ptr) = htole64(x);\n-#elif !defined(WORDS_BIGENDIAN)\n-    *((uint64_t*)ptr) = x;\n-#else\n-    ptr[7] = x >> 56;\n-    ptr[6] = x >> 48;\n-    ptr[5] = x >> 40;\n-    ptr[4] = x >> 32;\n-    ptr[3] = x >> 24;\n-    ptr[2] = x >> 16;\n-    ptr[1] = x >> 8;\n-    ptr[0] = x;\n-#endif\n }\n \n uint32_t static inline ReadBE32(const unsigned char* ptr)\n {\n-#if HAVE_DECL_BE32TOH == 1\n     return be32toh(*((uint32_t*)ptr));\n-#else\n-    return ((uint32_t)ptr[0] << 24 | (uint32_t)ptr[1] << 16 | (uint32_t)ptr[2] << 8 | (uint32_t)ptr[3]);\n-#endif\n }\n \n uint64_t static inline ReadBE64(const unsigned char* ptr)\n {\n-#if HAVE_DECL_BE64TOH == 1\n     return be64toh(*((uint64_t*)ptr));\n-#else\n-    return ((uint64_t)ptr[0] << 56 | (uint64_t)ptr[1] << 48 | (uint64_t)ptr[2] << 40 | (uint64_t)ptr[3] << 32 |\n-            (uint64_t)ptr[4] << 24 | (uint64_t)ptr[5] << 16 | (uint64_t)ptr[6] << 8 | (uint64_t)ptr[7]);\n-#endif\n }\n \n void static inline WriteBE32(unsigned char* ptr, uint32_t x)\n {\n-#if HAVE_DECL_HTOBE32 == 1\n     *((uint32_t*)ptr) = htobe32(x);\n-#else\n-    ptr[0] = x >> 24;\n-    ptr[1] = x >> 16;\n-    ptr[2] = x >> 8;\n-    ptr[3] = x;\n-#endif\n }\n \n void static inline WriteBE64(unsigned char* ptr, uint64_t x)\n {\n-#if HAVE_DECL_HTOBE64 == 1\n     *((uint64_t*)ptr) = htobe64(x);\n-#else\n-    ptr[0] = x >> 56;\n-    ptr[1] = x >> 48;\n-    ptr[2] = x >> 40;\n-    ptr[3] = x >> 32;\n-    ptr[4] = x >> 24;\n-    ptr[5] = x >> 16;\n-    ptr[6] = x >> 8;\n-    ptr[7] = x;\n-#endif\n }\n \n #endif // BITCOIN_CRYPTO_COMMON_H"
      },
      {
        "sha": "20d5d217778f2beb5f007d6e3e36a8175c69ea10",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -3,8 +3,10 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"hash.h\"\n+#include \"crypto/common.h\"\n #include \"crypto/hmac_sha512.h\"\n \n+\n inline uint32_t ROTL32(uint32_t x, int8_t r)\n {\n     return (x << r) | (x >> (32 - r));\n@@ -23,10 +25,10 @@ unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char\n \n         //----------\n         // body\n-        const uint32_t* blocks = (const uint32_t*)(&vDataToHash[0] + nblocks * 4);\n+        const uint8_t* blocks = &vDataToHash[0] + nblocks * 4;\n \n         for (int i = -nblocks; i; i++) {\n-            uint32_t k1 = blocks[i];\n+            uint32_t k1 = ReadLE32(blocks + i*4);\n \n             k1 *= c1;\n             k1 = ROTL32(k1, 15);"
      },
      {
        "sha": "9927ac75987740f68d2a0ca29fd61cc0a5ae172f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -4318,8 +4318,7 @@ bool ProcessMessages(CNode* pfrom)\n         // Checksum\n         CDataStream& vRecv = msg.vRecv;\n         uint256 hash = Hash(vRecv.begin(), vRecv.begin() + nMessageSize);\n-        unsigned int nChecksum = 0;\n-        memcpy(&nChecksum, &hash, sizeof(nChecksum));\n+        unsigned int nChecksum = ReadLE32((unsigned char*)&hash);\n         if (nChecksum != hdr.nChecksum)\n         {\n             LogPrintf(\"ProcessMessages(%s, %u bytes): CHECKSUM ERROR nChecksum=%08x hdr.nChecksum=%08x\\n\","
      },
      {
        "sha": "08d1d57408344b46630ad745a5a6348c609c3e6b",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -14,6 +14,7 @@\n #include \"clientversion.h\"\n #include \"primitives/transaction.h\"\n #include \"ui_interface.h\"\n+#include \"crypto/common.h\"\n \n #ifdef WIN32\n #include <string.h>\n@@ -2007,7 +2008,7 @@ void CNode::EndMessage() UNLOCK_FUNCTION(cs_vSend)\n \n     // Set the size\n     unsigned int nSize = ssSend.size() - CMessageHeader::HEADER_SIZE;\n-    memcpy((char*)&ssSend[CMessageHeader::MESSAGE_SIZE_OFFSET], &nSize, sizeof(nSize));\n+    WriteLE32((uint8_t*)&ssSend[CMessageHeader::MESSAGE_SIZE_OFFSET], nSize);\n \n     // Set the checksum\n     uint256 hash = Hash(ssSend.begin() + CMessageHeader::HEADER_SIZE, ssSend.end());"
      },
      {
        "sha": "b42c2dffa4d69da971cc2d4c6c75593ceadf6fb7",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -162,7 +162,7 @@ class CService : public CNetAddr\n         inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n             READWRITE(FLATDATA(ip));\n             unsigned short portN = htons(port);\n-            READWRITE(portN);\n+            READWRITE(FLATDATA(portN));\n             if (ser_action.ForRead())\n                  port = ntohs(portN);\n         }"
      },
      {
        "sha": "5b9c13d87011bf192b70bb7fc2902801e1e16e2e",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -8,10 +8,11 @@\n #include \"hash.h\"\n #include \"tinyformat.h\"\n #include \"utilstrencodings.h\"\n+#include \"crypto/common.h\"\n \n uint256 CBlockHeader::GetHash() const\n {\n-    return Hash(BEGIN(nVersion), END(nNonce));\n+    return SerializeHash(*this);\n }\n \n uint256 CBlock::BuildMerkleTree(bool* fMutated) const"
      },
      {
        "sha": "0ba9affeda5a63b9a0ab62945f045e691b685359",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -25,7 +25,8 @@ class COutPoint\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(FLATDATA(*this));\n+        READWRITE(hash);\n+        READWRITE(n);\n     }\n \n     void SetNull() { hash.SetNull(); n = (uint32_t) -1; }"
      },
      {
        "sha": "ed456f5c5ad53944895684ef196bfa4f55585bc6",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -14,6 +14,7 @@\n #include <string.h>\n #include <string>\n #include <vector>\n+#include \"crypto/common.h\"\n \n static const unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520; // bytes\n \n@@ -416,14 +417,16 @@ class CScript : public std::vector<unsigned char>\n         else if (b.size() <= 0xffff)\n         {\n             insert(end(), OP_PUSHDATA2);\n-            unsigned short nSize = b.size();\n-            insert(end(), (unsigned char*)&nSize, (unsigned char*)&nSize + sizeof(nSize));\n+            uint8_t data[2];\n+            WriteLE16(data, b.size());\n+            insert(end(), data, data + sizeof(data));\n         }\n         else\n         {\n             insert(end(), OP_PUSHDATA4);\n-            unsigned int nSize = b.size();\n-            insert(end(), (unsigned char*)&nSize, (unsigned char*)&nSize + sizeof(nSize));\n+            uint8_t data[4];\n+            WriteLE32(data, b.size());\n+            insert(end(), data, data + sizeof(data));\n         }\n         insert(end(), b.begin(), b.end());\n         return *this;\n@@ -496,15 +499,14 @@ class CScript : public std::vector<unsigned char>\n             {\n                 if (end() - pc < 2)\n                     return false;\n-                nSize = 0;\n-                memcpy(&nSize, &pc[0], 2);\n+                nSize = ReadLE16(&pc[0]);\n                 pc += 2;\n             }\n             else if (opcode == OP_PUSHDATA4)\n             {\n                 if (end() - pc < 4)\n                     return false;\n-                memcpy(&nSize, &pc[0], 4);\n+                nSize = ReadLE32(&pc[0]);\n                 pc += 4;\n             }\n             if (end() - pc < 0 || (unsigned int)(end() - pc) < nSize)"
      },
      {
        "sha": "741f78f8b4fa86daa5827deb2935239ed7940cb2",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 125,
        "deletions": 76,
        "changes": 201,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -18,6 +18,8 @@\n #include <utility>\n #include <vector>\n \n+#include \"compat/endian.h\"\n+\n class CScript;\n \n static const unsigned int MAX_SIZE = 0x02000000;\n@@ -71,6 +73,79 @@ inline const T* end_ptr(const std::vector<T,TAl>& v)\n     return v.empty() ? NULL : (&v[0] + v.size());\n }\n \n+/*\n+ * Lowest-level serialization and conversion.\n+ * @note Sizes of these types are verified in the tests\n+ */\n+template<typename Stream> inline void ser_writedata8(Stream &s, uint8_t obj)\n+{\n+    s.write((char*)&obj, 1);\n+}\n+template<typename Stream> inline void ser_writedata16(Stream &s, uint16_t obj)\n+{\n+    obj = htole16(obj);\n+    s.write((char*)&obj, 2);\n+}\n+template<typename Stream> inline void ser_writedata32(Stream &s, uint32_t obj)\n+{\n+    obj = htole32(obj);\n+    s.write((char*)&obj, 4);\n+}\n+template<typename Stream> inline void ser_writedata64(Stream &s, uint64_t obj)\n+{\n+    obj = htole64(obj);\n+    s.write((char*)&obj, 8);\n+}\n+template<typename Stream> inline uint8_t ser_readdata8(Stream &s)\n+{\n+    uint8_t obj;\n+    s.read((char*)&obj, 1);\n+    return obj;\n+}\n+template<typename Stream> inline uint16_t ser_readdata16(Stream &s)\n+{\n+    uint16_t obj;\n+    s.read((char*)&obj, 2);\n+    return le16toh(obj);\n+}\n+template<typename Stream> inline uint32_t ser_readdata32(Stream &s)\n+{\n+    uint32_t obj;\n+    s.read((char*)&obj, 4);\n+    return le32toh(obj);\n+}\n+template<typename Stream> inline uint64_t ser_readdata64(Stream &s)\n+{\n+    uint64_t obj;\n+    s.read((char*)&obj, 8);\n+    return le64toh(obj);\n+}\n+inline uint64_t ser_double_to_uint64(double x)\n+{\n+    union { double x; uint64_t y; } tmp;\n+    tmp.x = x;\n+    return tmp.y;\n+}\n+inline uint32_t ser_float_to_uint32(float x)\n+{\n+    union { float x; uint32_t y; } tmp;\n+    tmp.x = x;\n+    return tmp.y;\n+}\n+inline double ser_uint64_to_double(uint64_t y)\n+{\n+    union { double x; uint64_t y; } tmp;\n+    tmp.y = y;\n+    return tmp.x;\n+}\n+inline float ser_uint32_to_float(uint32_t y)\n+{\n+    union { float x; uint32_t y; } tmp;\n+    tmp.y = y;\n+    return tmp.x;\n+}\n+\n+\n /////////////////////////////////////////////////////////////////\n //\n // Templates for serializing to anything that looks like a stream,\n@@ -108,59 +183,48 @@ enum\n         SerializationOp(s, CSerActionUnserialize(), nType, nVersion);                \\\n     }\n \n-\n-\n /*\n  * Basic Types\n  */\n-#define WRITEDATA(s, obj)   s.write((char*)&(obj), sizeof(obj))\n-#define READDATA(s, obj)    s.read((char*)&(obj), sizeof(obj))\n-\n-inline unsigned int GetSerializeSize(char a,               int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed char a,        int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned char a,      int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed short a,       int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned short a,     int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed int a,         int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned int a,       int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed long a,        int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned long a,      int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed long long a,   int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned long long a, int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(float a,              int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(double a,             int, int=0) { return sizeof(a); }\n-\n-template<typename Stream> inline void Serialize(Stream& s, char a,               int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed char a,        int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned char a,      int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed short a,       int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned short a,     int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed int a,         int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned int a,       int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed long a,        int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned long a,      int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed long long a,   int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned long long a, int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, float a,              int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, double a,             int, int=0) { WRITEDATA(s, a); }\n-\n-template<typename Stream> inline void Unserialize(Stream& s, char& a,               int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed char& a,        int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned char& a,      int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed short& a,       int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned short& a,     int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed int& a,         int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned int& a,       int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed long& a,        int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned long& a,      int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed long long& a,   int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned long long& a, int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, float& a,              int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, double& a,             int, int=0) { READDATA(s, a); }\n+inline unsigned int GetSerializeSize(char a,      int, int=0) { return 1; }\n+inline unsigned int GetSerializeSize(int8_t a,    int, int=0) { return 1; }\n+inline unsigned int GetSerializeSize(uint8_t a,   int, int=0) { return 1; }\n+inline unsigned int GetSerializeSize(int16_t a,   int, int=0) { return 2; }\n+inline unsigned int GetSerializeSize(uint16_t a,  int, int=0) { return 2; }\n+inline unsigned int GetSerializeSize(int32_t a,   int, int=0) { return 4; }\n+inline unsigned int GetSerializeSize(uint32_t a,  int, int=0) { return 4; }\n+inline unsigned int GetSerializeSize(int64_t a,   int, int=0) { return 8; }\n+inline unsigned int GetSerializeSize(uint64_t a,  int, int=0) { return 8; }\n+inline unsigned int GetSerializeSize(float a,     int, int=0) { return 4; }\n+inline unsigned int GetSerializeSize(double a,    int, int=0) { return 8; }\n+\n+template<typename Stream> inline void Serialize(Stream& s, char a,         int, int=0) { ser_writedata8(s, a); } // TODO Get rid of bare char\n+template<typename Stream> inline void Serialize(Stream& s, int8_t a,       int, int=0) { ser_writedata8(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint8_t a,      int, int=0) { ser_writedata8(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, int16_t a,      int, int=0) { ser_writedata16(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint16_t a,     int, int=0) { ser_writedata16(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, int32_t a,      int, int=0) { ser_writedata32(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint32_t a,     int, int=0) { ser_writedata32(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, int64_t a,      int, int=0) { ser_writedata64(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint64_t a,     int, int=0) { ser_writedata64(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, float a,        int, int=0) { ser_writedata32(s, ser_float_to_uint32(a)); }\n+template<typename Stream> inline void Serialize(Stream& s, double a,       int, int=0) { ser_writedata64(s, ser_double_to_uint64(a)); }\n+\n+template<typename Stream> inline void Unserialize(Stream& s, char& a,      int, int=0) { a = ser_readdata8(s); } // TODO Get rid of bare char\n+template<typename Stream> inline void Unserialize(Stream& s, int8_t& a,    int, int=0) { a = ser_readdata8(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint8_t& a,   int, int=0) { a = ser_readdata8(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, int16_t& a,   int, int=0) { a = ser_readdata16(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint16_t& a,  int, int=0) { a = ser_readdata16(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, int32_t& a,   int, int=0) { a = ser_readdata32(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint32_t& a,  int, int=0) { a = ser_readdata32(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, int64_t& a,   int, int=0) { a = ser_readdata64(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint64_t& a,  int, int=0) { a = ser_readdata64(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, float& a,     int, int=0) { a = ser_uint32_to_float(ser_readdata32(s)); }\n+template<typename Stream> inline void Unserialize(Stream& s, double& a,    int, int=0) { a = ser_uint64_to_double(ser_readdata64(s)); }\n \n inline unsigned int GetSerializeSize(bool a, int, int=0)                          { return sizeof(char); }\n-template<typename Stream> inline void Serialize(Stream& s, bool a, int, int=0)    { char f=a; WRITEDATA(s, f); }\n-template<typename Stream> inline void Unserialize(Stream& s, bool& a, int, int=0) { char f; READDATA(s, f); a=f; }\n+template<typename Stream> inline void Serialize(Stream& s, bool a, int, int=0)    { char f=a; ser_writedata8(s, f); }\n+template<typename Stream> inline void Unserialize(Stream& s, bool& a, int, int=0) { char f=ser_readdata8(s); a=f; }\n \n \n \n@@ -187,64 +251,50 @@ void WriteCompactSize(Stream& os, uint64_t nSize)\n {\n     if (nSize < 253)\n     {\n-        unsigned char chSize = nSize;\n-        WRITEDATA(os, chSize);\n+        ser_writedata8(os, nSize);\n     }\n     else if (nSize <= std::numeric_limits<unsigned short>::max())\n     {\n-        unsigned char chSize = 253;\n-        unsigned short xSize = nSize;\n-        WRITEDATA(os, chSize);\n-        WRITEDATA(os, xSize);\n+        ser_writedata8(os, 253);\n+        ser_writedata16(os, nSize);\n     }\n     else if (nSize <= std::numeric_limits<unsigned int>::max())\n     {\n-        unsigned char chSize = 254;\n-        unsigned int xSize = nSize;\n-        WRITEDATA(os, chSize);\n-        WRITEDATA(os, xSize);\n+        ser_writedata8(os, 254);\n+        ser_writedata32(os, nSize);\n     }\n     else\n     {\n-        unsigned char chSize = 255;\n-        uint64_t xSize = nSize;\n-        WRITEDATA(os, chSize);\n-        WRITEDATA(os, xSize);\n+        ser_writedata8(os, 255);\n+        ser_writedata64(os, nSize);\n     }\n     return;\n }\n \n template<typename Stream>\n uint64_t ReadCompactSize(Stream& is)\n {\n-    unsigned char chSize;\n-    READDATA(is, chSize);\n+    uint8_t chSize = ser_readdata8(is);\n     uint64_t nSizeRet = 0;\n     if (chSize < 253)\n     {\n         nSizeRet = chSize;\n     }\n     else if (chSize == 253)\n     {\n-        unsigned short xSize;\n-        READDATA(is, xSize);\n-        nSizeRet = xSize;\n+        nSizeRet = ser_readdata16(is);\n         if (nSizeRet < 253)\n             throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");\n     }\n     else if (chSize == 254)\n     {\n-        unsigned int xSize;\n-        READDATA(is, xSize);\n-        nSizeRet = xSize;\n+        nSizeRet = ser_readdata32(is);\n         if (nSizeRet < 0x10000u)\n             throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");\n     }\n     else\n     {\n-        uint64_t xSize;\n-        READDATA(is, xSize);\n-        nSizeRet = xSize;\n+        nSizeRet = ser_readdata64(is);\n         if (nSizeRet < 0x100000000ULL)\n             throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");\n     }\n@@ -303,7 +353,7 @@ void WriteVarInt(Stream& os, I n)\n         len++;\n     }\n     do {\n-        WRITEDATA(os, tmp[len]);\n+        ser_writedata8(os, tmp[len]);\n     } while(len--);\n }\n \n@@ -312,8 +362,7 @@ I ReadVarInt(Stream& is)\n {\n     I n = 0;\n     while(true) {\n-        unsigned char chData;\n-        READDATA(is, chData);\n+        unsigned char chData = ser_readdata8(is);\n         n = (n << 7) | (chData & 0x7F);\n         if (chData & 0x80)\n             n++;"
      },
      {
        "sha": "de9510d54a451f81a1f9d347d96ffe5264b0ec33",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 114,
        "deletions": 0,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"serialize.h\"\n #include \"streams.h\"\n+#include \"hash.h\"\n \n #include <stdint.h>\n \n@@ -13,6 +14,119 @@ using namespace std;\n \n BOOST_AUTO_TEST_SUITE(serialize_tests)\n \n+BOOST_AUTO_TEST_CASE(sizes)\n+{\n+    BOOST_CHECK_EQUAL(sizeof(char), GetSerializeSize(char(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(int8_t), GetSerializeSize(int8_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(uint8_t), GetSerializeSize(uint8_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(int16_t), GetSerializeSize(int16_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(uint16_t), GetSerializeSize(uint16_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(int32_t), GetSerializeSize(int32_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(uint32_t), GetSerializeSize(uint32_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(int64_t), GetSerializeSize(int64_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(uint64_t), GetSerializeSize(uint64_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(float), GetSerializeSize(float(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(double), GetSerializeSize(double(0), 0));\n+    // Bool is serialized as char\n+    BOOST_CHECK_EQUAL(sizeof(char), GetSerializeSize(bool(0), 0));\n+\n+    // Sanity-check GetSerializeSize and c++ type matching\n+    BOOST_CHECK_EQUAL(GetSerializeSize(char(0), 0), 1);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int8_t(0), 0), 1);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint8_t(0), 0), 1);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int16_t(0), 0), 2);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint16_t(0), 0), 2);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int32_t(0), 0), 4);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint32_t(0), 0), 4);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int64_t(0), 0), 8);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint64_t(0), 0), 8);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(float(0), 0), 4);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(double(0), 0), 8);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(bool(0), 0), 1);\n+}\n+\n+BOOST_AUTO_TEST_CASE(floats_conversion)\n+{\n+    // Choose values that map unambigiously to binary floating point to avoid\n+    // rounding issues at the compiler side.\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x00000000), 0.0F);\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x3f000000), 0.5F);\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x3f800000), 1.0F);\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x40000000), 2.0F);\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x40800000), 4.0F);\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x44444444), 785.066650390625F);\n+\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(0.0F), 0x00000000);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(0.5F), 0x3f000000);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(1.0F), 0x3f800000);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(2.0F), 0x40000000);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(4.0F), 0x40800000);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(785.066650390625F), 0x44444444);\n+}\n+\n+BOOST_AUTO_TEST_CASE(doubles_conversion)\n+{\n+    // Choose values that map unambigiously to binary floating point to avoid\n+    // rounding issues at the compiler side.\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x0000000000000000ULL), 0.0);\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x3fe0000000000000ULL), 0.5);\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x3ff0000000000000ULL), 1.0);\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x4000000000000000ULL), 2.0);\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x4010000000000000ULL), 4.0);\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x4088888880000000ULL), 785.066650390625);\n+\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(0.0), 0x0000000000000000ULL);\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(0.5), 0x3fe0000000000000ULL);\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(1.0), 0x3ff0000000000000ULL);\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(2.0), 0x4000000000000000ULL);\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(4.0), 0x4010000000000000ULL);\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(785.066650390625), 0x4088888880000000ULL);\n+}\n+/*\n+Python code to generate the below hashes:\n+\n+    def reversed_hex(x):\n+        return binascii.hexlify(''.join(reversed(x)))\n+    def dsha256(x):\n+        return hashlib.sha256(hashlib.sha256(x).digest()).digest()\n+\n+    reversed_hex(dsha256(''.join(struct.pack('<f', x) for x in range(0,1000)))) == '8e8b4cf3e4df8b332057e3e23af42ebc663b61e0495d5e7e32d85099d7f3fe0c'\n+    reversed_hex(dsha256(''.join(struct.pack('<d', x) for x in range(0,1000)))) == '43d0c82591953c4eafe114590d392676a01585d25b25d433557f0d7878b23f96'\n+*/\n+BOOST_AUTO_TEST_CASE(floats)\n+{\n+    CDataStream ss(SER_DISK, 0);\n+    // encode\n+    for (int i = 0; i < 1000; i++) {\n+        ss << float(i);\n+    }\n+    BOOST_CHECK(Hash(ss.begin(), ss.end()) == uint256S(\"8e8b4cf3e4df8b332057e3e23af42ebc663b61e0495d5e7e32d85099d7f3fe0c\"));\n+\n+    // decode\n+    for (int i = 0; i < 1000; i++) {\n+        float j;\n+        ss >> j;\n+        BOOST_CHECK_MESSAGE(i == j, \"decoded:\" << j << \" expected:\" << i);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(doubles)\n+{\n+    CDataStream ss(SER_DISK, 0);\n+    // encode\n+    for (int i = 0; i < 1000; i++) {\n+        ss << double(i);\n+    }\n+    BOOST_CHECK(Hash(ss.begin(), ss.end()) == uint256S(\"43d0c82591953c4eafe114590d392676a01585d25b25d433557f0d7878b23f96\"));\n+\n+    // decode\n+    for (int i = 0; i < 1000; i++) {\n+        double j;\n+        ss >> j;\n+        BOOST_CHECK_MESSAGE(i == j, \"decoded:\" << j << \" expected:\" << i);\n+    }\n+}\n+\n BOOST_AUTO_TEST_CASE(varints)\n {\n     // encode"
      },
      {
        "sha": "0d506603276f3a95b4676d2bbac0ce563e0d4eea",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -337,7 +337,7 @@ class CMinerPolicyEstimator\n     void Write(CAutoFile& fileout) const\n     {\n         fileout << nBestSeenHeight;\n-        fileout << history.size();\n+        fileout << (uint32_t)history.size();\n         BOOST_FOREACH(const CBlockAverage& entry, history)\n         {\n             entry.Write(fileout);\n@@ -348,7 +348,7 @@ class CMinerPolicyEstimator\n     {\n         int nFileBestSeenHeight;\n         filein >> nFileBestSeenHeight;\n-        size_t numEntries;\n+        uint32_t numEntries;\n         filein >> numEntries;\n         if (numEntries <= 0 || numEntries > 10000)\n             throw runtime_error(\"Corrupt estimates file. Must have between 1 and 10k entries.\");"
      }
    ]
  },
  {
    "sha": "2f10aa0fa122b089d8affbe725008f054a00fe46",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZjEwYWEwZmExMjJiMDg5ZDhhZmZiZTcyNTAwOGYwNTRhMDBmZTQ2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-07T13:34:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-07T13:38:34Z"
      },
      "message": "Merge pull request #5151\n\neec3713 make CMessageHeader a dumb storage class (Cory Fields)",
      "tree": {
        "sha": "ff176c05bac7107d27fc3220472d33a03bc29fb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff176c05bac7107d27fc3220472d33a03bc29fb4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f10aa0fa122b089d8affbe725008f054a00fe46",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJU+v9aAAoJEFeJbS/48LZXZMkMAJGhQ3cRFNibTMAJAYHi7IFg\nKTOXw6j+lOmCu0LwSppfg2BDtA32ygQJEZKeAjOirjdDvUZBECEMJqxbQrEA73wF\nOjbZZl++7OG37pS4DsQl+HvkUQ/63qniNjAGutCvDRwSsUGxdQzsIBh3GhdBCszU\neN66lrFtSkroC265AU+GkXvDNWy+XBtLjsAc3Y6dLeb0VB66wiH73dYDRBi6ahyZ\nxJlZ8ghxcyqepgbxnJPfoyzTfeWPcN0uxRo1bGBVvoT376pUsxAAVr36WIi43ET3\nSNFQ537I+nthuwitgLvigRHJGeMFcvvXBc2+WGf4FDxeODO9xKjm7jMQv9y1vVqI\nBgb/4u/O4DsbH22ersZiCPxiHv9g2WL2UsX6oIzqTv/3LKiVQcTMBWAF3zebR4pq\nKcjYi0Tn/qVm/DQCP2gdsOeRhjj8wmK93Y1CBrRxaD5JNht/NdJ+DE5OLuBMukyb\n1zujMjqjjEjqMmSB1P7Cp7aW6e+oTOvv+P9iymPgzg==\n=BPQM\n-----END PGP SIGNATURE-----",
        "payload": "tree ff176c05bac7107d27fc3220472d33a03bc29fb4\nparent 7c3fbc34aed578398b3f180a621c671ff3837cec\nparent eec37136fd0f6ab80772380d8f047d98743f31f5\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1425735271 -0800\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1425735514 -0800\n\nMerge pull request #5151\n\neec3713 make CMessageHeader a dumb storage class (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f10aa0fa122b089d8affbe725008f054a00fe46",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f10aa0fa122b089d8affbe725008f054a00fe46",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f10aa0fa122b089d8affbe725008f054a00fe46/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c3fbc34aed578398b3f180a621c671ff3837cec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c3fbc34aed578398b3f180a621c671ff3837cec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c3fbc34aed578398b3f180a621c671ff3837cec"
      },
      {
        "sha": "eec37136fd0f6ab80772380d8f047d98743f31f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eec37136fd0f6ab80772380d8f047d98743f31f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eec37136fd0f6ab80772380d8f047d98743f31f5"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 17,
      "deletions": 18
    },
    "files": [
      {
        "sha": "78b575d8f3769ded221e527b0f3f65fa60b6e5e3",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f10aa0fa122b089d8affbe725008f054a00fe46/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f10aa0fa122b089d8affbe725008f054a00fe46/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=2f10aa0fa122b089d8affbe725008f054a00fe46",
        "patch": "@@ -14,8 +14,6 @@\n \n #include <vector>\n \n-typedef unsigned char MessageStartChars[MESSAGE_START_SIZE];\n-\n struct CDNSSeedData {\n     std::string name, host;\n     CDNSSeedData(const std::string &strName, const std::string &strHost) : name(strName), host(strHost) {}\n@@ -42,7 +40,7 @@ class CChainParams\n     };\n \n     const uint256& HashGenesisBlock() const { return hashGenesisBlock; }\n-    const MessageStartChars& MessageStart() const { return pchMessageStart; }\n+    const CMessageHeader::MessageStartChars& MessageStart() const { return pchMessageStart; }\n     const std::vector<unsigned char>& AlertKey() const { return vAlertPubKey; }\n     int GetDefaultPort() const { return nDefaultPort; }\n     const arith_uint256& ProofOfWorkLimit() const { return bnProofOfWorkLimit; }\n@@ -83,7 +81,7 @@ class CChainParams\n     CChainParams() {}\n \n     uint256 hashGenesisBlock;\n-    MessageStartChars pchMessageStart;\n+    CMessageHeader::MessageStartChars pchMessageStart;\n     //! Raw pub key bytes for the broadcast alert signing key.\n     std::vector<unsigned char> vAlertPubKey;\n     int nDefaultPort;"
      },
      {
        "sha": "fdbcfa52fa29b6c8bb121dbdd1b518f38fc749cc",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f10aa0fa122b089d8affbe725008f054a00fe46/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f10aa0fa122b089d8affbe725008f054a00fe46/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2f10aa0fa122b089d8affbe725008f054a00fe46",
        "patch": "@@ -4305,7 +4305,7 @@ bool ProcessMessages(CNode* pfrom)\n \n         // Read header\n         CMessageHeader& hdr = msg.hdr;\n-        if (!hdr.IsValid())\n+        if (!hdr.IsValid(Params().MessageStart()))\n         {\n             LogPrintf(\"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", SanitizeString(hdr.GetCommand()), pfrom->id);\n             continue;"
      },
      {
        "sha": "0723ee218a4f2523b5d154423482eab85f6b749f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f10aa0fa122b089d8affbe725008f054a00fe46/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f10aa0fa122b089d8affbe725008f054a00fe46/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2f10aa0fa122b089d8affbe725008f054a00fe46",
        "patch": "@@ -510,7 +510,7 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes)\n         // get current incomplete message, or create a new one\n         if (vRecvMsg.empty() ||\n             vRecvMsg.back().complete())\n-            vRecvMsg.push_back(CNetMessage(SER_NETWORK, nRecvVersion));\n+            vRecvMsg.push_back(CNetMessage(Params().MessageStart(), SER_NETWORK, nRecvVersion));\n \n         CNetMessage& msg = vRecvMsg.back();\n \n@@ -1976,7 +1976,7 @@ void CNode::BeginMessage(const char* pszCommand) EXCLUSIVE_LOCK_FUNCTION(cs_vSen\n {\n     ENTER_CRITICAL_SECTION(cs_vSend);\n     assert(ssSend.size() == 0);\n-    ssSend << CMessageHeader(pszCommand, 0);\n+    ssSend << CMessageHeader(Params().MessageStart(), pszCommand, 0);\n     LogPrint(\"net\", \"sending: %s \", SanitizeString(pszCommand));\n }\n "
      },
      {
        "sha": "7dd02b84ef635a7fb01ae61c9812a05083639c99",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f10aa0fa122b089d8affbe725008f054a00fe46/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f10aa0fa122b089d8affbe725008f054a00fe46/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=2f10aa0fa122b089d8affbe725008f054a00fe46",
        "patch": "@@ -185,7 +185,7 @@ class CNetMessage {\n \n     int64_t nTime;                  // time (in microseconds) of message receipt.\n \n-    CNetMessage(int nTypeIn, int nVersionIn) : hdrbuf(nTypeIn, nVersionIn), vRecv(nTypeIn, nVersionIn) {\n+    CNetMessage(const CMessageHeader::MessageStartChars& pchMessageStartIn, int nTypeIn, int nVersionIn) : hdrbuf(nTypeIn, nVersionIn), hdr(pchMessageStartIn), vRecv(nTypeIn, nVersionIn) {\n         hdrbuf.resize(24);\n         in_data = false;\n         nHdrPos = 0;"
      },
      {
        "sha": "568580a595a89d8e9f3c49e3502d8b7eaf38f412",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f10aa0fa122b089d8affbe725008f054a00fe46/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f10aa0fa122b089d8affbe725008f054a00fe46/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=2f10aa0fa122b089d8affbe725008f054a00fe46",
        "patch": "@@ -5,7 +5,6 @@\n \n #include \"protocol.h\"\n \n-#include \"chainparams.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n@@ -21,17 +20,17 @@ static const char* ppszTypeName[] =\n     \"filtered block\"\n };\n \n-CMessageHeader::CMessageHeader()\n+CMessageHeader::CMessageHeader(const MessageStartChars& pchMessageStartIn)\n {\n-    memcpy(pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE);\n+    memcpy(pchMessageStart, pchMessageStartIn, MESSAGE_START_SIZE);\n     memset(pchCommand, 0, sizeof(pchCommand));\n     nMessageSize = -1;\n     nChecksum = 0;\n }\n \n-CMessageHeader::CMessageHeader(const char* pszCommand, unsigned int nMessageSizeIn)\n+CMessageHeader::CMessageHeader(const MessageStartChars& pchMessageStartIn, const char* pszCommand, unsigned int nMessageSizeIn)\n {\n-    memcpy(pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE);\n+    memcpy(pchMessageStart, pchMessageStartIn, MESSAGE_START_SIZE);\n     memset(pchCommand, 0, sizeof(pchCommand));\n     strncpy(pchCommand, pszCommand, COMMAND_SIZE);\n     nMessageSize = nMessageSizeIn;\n@@ -43,10 +42,10 @@ std::string CMessageHeader::GetCommand() const\n     return std::string(pchCommand, pchCommand + strnlen(pchCommand, COMMAND_SIZE));\n }\n \n-bool CMessageHeader::IsValid() const\n+bool CMessageHeader::IsValid(const MessageStartChars& pchMessageStartIn) const\n {\n     // Check start string\n-    if (memcmp(pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE) != 0)\n+    if (memcmp(pchMessageStart, pchMessageStartIn, MESSAGE_START_SIZE) != 0)\n         return false;\n \n     // Check the command string for errors"
      },
      {
        "sha": "e838c0d363874dd1dcaf9855063d9e970f46f69d",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f10aa0fa122b089d8affbe725008f054a00fe46/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f10aa0fa122b089d8affbe725008f054a00fe46/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=2f10aa0fa122b089d8affbe725008f054a00fe46",
        "patch": "@@ -29,11 +29,13 @@\n class CMessageHeader\n {\n public:\n-    CMessageHeader();\n-    CMessageHeader(const char* pszCommand, unsigned int nMessageSizeIn);\n+    typedef unsigned char MessageStartChars[MESSAGE_START_SIZE];\n+\n+    CMessageHeader(const MessageStartChars& pchMessageStartIn);\n+    CMessageHeader(const MessageStartChars& pchMessageStartIn, const char* pszCommand, unsigned int nMessageSizeIn);\n \n     std::string GetCommand() const;\n-    bool IsValid() const;\n+    bool IsValid(const MessageStartChars& messageStart) const;\n \n     ADD_SERIALIZE_METHODS;\n "
      }
    ]
  },
  {
    "sha": "d26f0b263cb22210722a2293c8de2de7672d092d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjZmMGIyNjNjYjIyMjEwNzIyYTIyOTNjOGRlMmRlNzY3MmQwOTJk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-09T08:55:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-09T08:55:49Z"
      },
      "message": "Merge pull request #5793\n\n6cb4a52 [Qt, Linux] honor current network when creating autostart link (Philip Kaufmann)\n9673c35 [Qt, Win] honor current network when creating autostart link (Philip Kaufmann)",
      "tree": {
        "sha": "7cb50760821a37644de3e6a080b9d9e497f58742",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7cb50760821a37644de3e6a080b9d9e497f58742"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d26f0b263cb22210722a2293c8de2de7672d092d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU/WAVAAoJEHSBCwEjRsmmODMH/jLykIrzc/RzF+k6QlB7CQg1\nf81k26r6hl8ntiMQUfl4UkkETWahJ6AXRsuRNqpf3Q7bczIyRgWUC1XidstRi715\nY9/y8HuqcXW4io8eoBA7DRHH5YT9tfZ/oyC7xKyb1EtJRjFVydpqJxYuLmifQ9hp\nPC21sEGuU5LXiHtbBLEZbQH+oUGuy2WKvLp1JBZclebhHhz/2RG4t53UvVI4j04g\ntvurqZ6BWJIRhL4wwMD1gqyU+KziOWRYEb3bYsgvDJkoDVOjog/pMY+LG+VSFcFy\nBi6HNEyE0l43ixY2FVWJ1dx0Cg/pk5YhpowG+gc9mpD/WzCCg2GxkrzofSjBFs0=\n=t4Yd\n-----END PGP SIGNATURE-----",
        "payload": "tree 7cb50760821a37644de3e6a080b9d9e497f58742\nparent 2f10aa0fa122b089d8affbe725008f054a00fe46\nparent 6cb4a5253551269db4ce6d853b39e61f9050a21e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1425891340 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1425891349 +0100\n\nMerge pull request #5793\n\n6cb4a52 [Qt, Linux] honor current network when creating autostart link (Philip Kaufmann)\n9673c35 [Qt, Win] honor current network when creating autostart link (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d26f0b263cb22210722a2293c8de2de7672d092d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d26f0b263cb22210722a2293c8de2de7672d092d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d26f0b263cb22210722a2293c8de2de7672d092d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2f10aa0fa122b089d8affbe725008f054a00fe46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f10aa0fa122b089d8affbe725008f054a00fe46",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f10aa0fa122b089d8affbe725008f054a00fe46"
      },
      {
        "sha": "6cb4a5253551269db4ce6d853b39e61f9050a21e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cb4a5253551269db4ce6d853b39e61f9050a21e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6cb4a5253551269db4ce6d853b39e61f9050a21e"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 35,
      "deletions": 11
    },
    "files": [
      {
        "sha": "9db0a75971ac5ed2497022de013207380c00192a",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 11,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d26f0b263cb22210722a2293c8de2de7672d092d/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d26f0b263cb22210722a2293c8de2de7672d092d/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=d26f0b263cb22210722a2293c8de2de7672d092d",
        "patch": "@@ -40,6 +40,7 @@\n #if BOOST_FILESYSTEM_VERSION >= 3\n #include <boost/filesystem/detail/utf8_codecvt_facet.hpp>\n #endif\n+#include <boost/scoped_array.hpp>\n \n #include <QAbstractItemView>\n #include <QApplication>\n@@ -567,12 +568,17 @@ TableViewLastColumnResizingFixer::TableViewLastColumnResizingFixer(QTableView* t\n #ifdef WIN32\n boost::filesystem::path static StartupShortcutPath()\n {\n+    if (GetBoolArg(\"-testnet\", false))\n+        return GetSpecialFolderPath(CSIDL_STARTUP) / \"Bitcoin (testnet).lnk\";\n+    else if (GetBoolArg(\"-regtest\", false))\n+        return GetSpecialFolderPath(CSIDL_STARTUP) / \"Bitcoin (regtest).lnk\";\n+\n     return GetSpecialFolderPath(CSIDL_STARTUP) / \"Bitcoin.lnk\";\n }\n \n bool GetStartOnSystemStartup()\n {\n-    // check for Bitcoin.lnk\n+    // check for Bitcoin*.lnk\n     return boost::filesystem::exists(StartupShortcutPath());\n }\n \n@@ -588,29 +594,43 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n         // Get a pointer to the IShellLink interface.\n         IShellLink* psl = NULL;\n         HRESULT hres = CoCreateInstance(CLSID_ShellLink, NULL,\n-                                CLSCTX_INPROC_SERVER, IID_IShellLink,\n-                                reinterpret_cast<void**>(&psl));\n+            CLSCTX_INPROC_SERVER, IID_IShellLink,\n+            reinterpret_cast<void**>(&psl));\n \n         if (SUCCEEDED(hres))\n         {\n             // Get the current executable path\n             TCHAR pszExePath[MAX_PATH];\n             GetModuleFileName(NULL, pszExePath, sizeof(pszExePath));\n \n-            TCHAR pszArgs[5] = TEXT(\"-min\");\n+            // Start client minimized\n+            QString strArgs = \"-min\";\n+            // Set -testnet /-regtest options\n+            strArgs += QString::fromStdString(strprintf(\" -testnet=%d -regtest=%d\", GetBoolArg(\"-testnet\", false), GetBoolArg(\"-regtest\", false)));\n+\n+#ifdef UNICODE\n+            boost::scoped_array<TCHAR> args(new TCHAR[strArgs.length() + 1]);\n+            // Convert the QString to TCHAR*\n+            strArgs.toWCharArray(args.get());\n+            // Add missing '\\0'-termination to string\n+            args[strArgs.length()] = '\\0';\n+#endif\n \n             // Set the path to the shortcut target\n             psl->SetPath(pszExePath);\n             PathRemoveFileSpec(pszExePath);\n             psl->SetWorkingDirectory(pszExePath);\n             psl->SetShowCmd(SW_SHOWMINNOACTIVE);\n-            psl->SetArguments(pszArgs);\n+#ifndef UNICODE\n+            psl->SetArguments(strArgs.toStdString().c_str());\n+#else\n+            psl->SetArguments(args.get());\n+#endif\n \n             // Query IShellLink for the IPersistFile interface for\n             // saving the shortcut in persistent storage.\n             IPersistFile* ppf = NULL;\n-            hres = psl->QueryInterface(IID_IPersistFile,\n-                                       reinterpret_cast<void**>(&ppf));\n+            hres = psl->QueryInterface(IID_IPersistFile, reinterpret_cast<void**>(&ppf));\n             if (SUCCEEDED(hres))\n             {\n                 WCHAR pwsz[MAX_PATH];\n@@ -630,11 +650,10 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n     }\n     return true;\n }\n-\n #elif defined(Q_OS_LINUX)\n \n // Follow the Desktop Application Autostart Spec:\n-//  http://standards.freedesktop.org/autostart-spec/autostart-spec-latest.html\n+// http://standards.freedesktop.org/autostart-spec/autostart-spec-latest.html\n \n boost::filesystem::path static GetAutostartDir()\n {\n@@ -690,8 +709,13 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n         // Write a bitcoin.desktop file to the autostart directory:\n         optionFile << \"[Desktop Entry]\\n\";\n         optionFile << \"Type=Application\\n\";\n-        optionFile << \"Name=Bitcoin\\n\";\n-        optionFile << \"Exec=\" << pszExePath << \" -min\\n\";\n+        if (GetBoolArg(\"-testnet\", false))\n+            optionFile << \"Name=Bitcoin (testnet)\\n\";\n+        else if (GetBoolArg(\"-regtest\", false))\n+            optionFile << \"Name=Bitcoin (regtest)\\n\";\n+        else\n+            optionFile << \"Name=Bitcoin\\n\";\n+        optionFile << \"Exec=\" << pszExePath << strprintf(\" -min -testnet=%d -regtest=%d\\n\", GetBoolArg(\"-testnet\", false), GetBoolArg(\"-regtest\", false));\n         optionFile << \"Terminal=false\\n\";\n         optionFile << \"Hidden=false\\n\";\n         optionFile.close();"
      }
    ]
  },
  {
    "sha": "d7989c04f654a73fee147369510eaef4cc1a4550",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzk4OWMwNGY2NTRhNzNmZWUxNDczNjk1MTBlYWVmNGNjMWE0NTUw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-09T09:05:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-09T09:06:27Z"
      },
      "message": "Merge pull request #5855\n\n6986643 Run unit tests in different orders (Gavin Andresen)",
      "tree": {
        "sha": "35ef0cfded68e4e9d4172143b80621e2138fa8c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35ef0cfded68e4e9d4172143b80621e2138fa8c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d7989c04f654a73fee147369510eaef4cc1a4550",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU/WKTAAoJEHSBCwEjRsmm7MIH/2liOlgjzWO9l4Mp7sUC/+Ui\nXmYepOjl4BDOlZI0RGxUtWWn7pHCnPjJFIz2UfPoRIRNVKqHL19GryIOK1BedU0C\nr9zmbFxQq8+dMEv2Cc19kTCOWFkVEz35hX36Fz56U7tYlQIRH59hdHGWetO6wdRj\nrpdLcao/Vqqvei40njbXxUfIUTvewJACm+LO3NN1REg0UPTqiA8LPoFk4W3oPwnP\nX2QTm+ef67NQ7L2VYLWzdYwJQYXFYZUceXHZmpAivsSp50XPOLRIhMFz+EvoDEMF\nLQAlDSc3HMya3f/jwcaDvwuYaNoenVjJ4ZqR+jvjfPXbtbVEwkcuytFGDaD++pE=\n=Ly1Z\n-----END PGP SIGNATURE-----",
        "payload": "tree 35ef0cfded68e4e9d4172143b80621e2138fa8c5\nparent d26f0b263cb22210722a2293c8de2de7672d092d\nparent 69866436be692497cf7e0aabd93a2becdcdd72f5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1425891939 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1425891987 +0100\n\nMerge pull request #5855\n\n6986643 Run unit tests in different orders (Gavin Andresen)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7989c04f654a73fee147369510eaef4cc1a4550",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d7989c04f654a73fee147369510eaef4cc1a4550",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7989c04f654a73fee147369510eaef4cc1a4550/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d26f0b263cb22210722a2293c8de2de7672d092d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d26f0b263cb22210722a2293c8de2de7672d092d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d26f0b263cb22210722a2293c8de2de7672d092d"
      },
      {
        "sha": "69866436be692497cf7e0aabd93a2becdcdd72f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69866436be692497cf7e0aabd93a2becdcdd72f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/69866436be692497cf7e0aabd93a2becdcdd72f5"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9c18729b42a85461f71e4b2c1f37d9a01f2e3af0",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7989c04f654a73fee147369510eaef4cc1a4550/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7989c04f654a73fee147369510eaef4cc1a4550/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=d7989c04f654a73fee147369510eaef4cc1a4550",
        "patch": "@@ -10,6 +10,7 @@ env:\n   global:\n     - MAKEJOBS=-j3\n     - RUN_TESTS=false\n+    - BOOST_TEST_RANDOM=1$TRAVIS_BUILD_ID\n     - CCACHE_SIZE=100M\n     - CCACHE_TEMPDIR=/tmp/.ccache-temp\n     - CCACHE_COMPRESS=1"
      }
    ]
  },
  {
    "sha": "513e0252391688b919f1b08980c5759a515c341b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTNlMDI1MjM5MTY4OGI5MTlmMWIwODk4MGM1NzU5YTUxNWMzNDFi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-09T09:16:41Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-09T09:45:12Z"
      },
      "message": "Merge pull request #5858\n\n9bbb880 [Qt] fix a issue where \"command line options\"-action overwrite \"Preference\"-action (on OSX) (Jonas Schnelli)",
      "tree": {
        "sha": "3cab52a33786b8b1980e97f16529587cfb2475e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3cab52a33786b8b1980e97f16529587cfb2475e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/513e0252391688b919f1b08980c5759a515c341b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU/WuoAAoJEHSBCwEjRsmm0YAIAMeVGwgottomn0J9KEO3qmcu\nDA8SmoY24YXHlPj7l1nQvkHZtn2H9NSwgb+w4haK7qJlvrr01QINJirAekOve+vF\nk3quPMSWboMlKlBD8As4dQJEiX9RrFeyrSn/hA1q5gwA+JWdUCeRvIPbjzfqvo96\npWsM1hIu5Hdo540jSjuFqQtaNpGFp3s9BRxkdvc3RWPjR0Kcs24AQQfqochfgEIa\nJ/p4XfCSW85RfIszz+WPa81awhmn8s0cy/wTbWI+thPL3Jtv87kBmfrZ7XVyqtIO\nQegGsvcdVzI0O7LMXwvWrDX87EdJljtmgBmpfxJ1rq5dxjnNwyVgAlKPOhgoHh0=\n=VDuB\n-----END PGP SIGNATURE-----",
        "payload": "tree 3cab52a33786b8b1980e97f16529587cfb2475e2\nparent d7989c04f654a73fee147369510eaef4cc1a4550\nparent 9bbb880be44dbc378bdd3210eed42eaa77efb774\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1425892601 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1425894312 +0100\n\nMerge pull request #5858\n\n9bbb880 [Qt] fix a issue where \"command line options\"-action overwrite \"Preference\"-action (on OSX) (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/513e0252391688b919f1b08980c5759a515c341b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/513e0252391688b919f1b08980c5759a515c341b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/513e0252391688b919f1b08980c5759a515c341b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d7989c04f654a73fee147369510eaef4cc1a4550",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7989c04f654a73fee147369510eaef4cc1a4550",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d7989c04f654a73fee147369510eaef4cc1a4550"
      },
      {
        "sha": "9bbb880be44dbc378bdd3210eed42eaa77efb774",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bbb880be44dbc378bdd3210eed42eaa77efb774",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bbb880be44dbc378bdd3210eed42eaa77efb774"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "34209920815b5279d89b735da28d17f9a68b3bed",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/513e0252391688b919f1b08980c5759a515c341b/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/513e0252391688b919f1b08980c5759a515c341b/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=513e0252391688b919f1b08980c5759a515c341b",
        "patch": "@@ -340,6 +340,7 @@ void BitcoinGUI::createActions()\n     openAction->setStatusTip(tr(\"Open a bitcoin: URI or payment request\"));\n \n     showHelpMessageAction = new QAction(TextColorIcon(\":/icons/info\"), tr(\"&Command-line options\"), this);\n+    showHelpMessageAction->setMenuRole(QAction::NoRole);\n     showHelpMessageAction->setStatusTip(tr(\"Show the Bitcoin Core help message to get a list with possible Bitcoin command-line options\"));\n \n     connect(quitAction, SIGNAL(triggered()), qApp, SLOT(quit()));"
      }
    ]
  },
  {
    "sha": "8517e9709e883ef59603d56b45dd2e06f8b7c7d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTE3ZTk3MDllODgzZWY1OTYwM2Q1NmI0NWRkMmUwNmY4YjdjN2Q3",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-02-09T10:19:01Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-03-09T09:58:17Z"
      },
      "message": "[Qt] rework setNumBlocks to have blockDate as parameter\n\n- reduces some functional overhead and simplifies the code",
      "tree": {
        "sha": "7534aee2b8a461e0ff470b9ad2ff95909ff26df4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7534aee2b8a461e0ff470b9ad2ff95909ff26df4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8517e9709e883ef59603d56b45dd2e06f8b7c7d7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8517e9709e883ef59603d56b45dd2e06f8b7c7d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8517e9709e883ef59603d56b45dd2e06f8b7c7d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8517e9709e883ef59603d56b45dd2e06f8b7c7d7/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "513e0252391688b919f1b08980c5759a515c341b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/513e0252391688b919f1b08980c5759a515c341b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/513e0252391688b919f1b08980c5759a515c341b"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 28,
      "deletions": 23
    },
    "files": [
      {
        "sha": "1ec968ff2bee20b23d6b4bb3105b810776062d91",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8517e9709e883ef59603d56b45dd2e06f8b7c7d7/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8517e9709e883ef59603d56b45dd2e06f8b7c7d7/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=8517e9709e883ef59603d56b45dd2e06f8b7c7d7",
        "patch": "@@ -436,8 +436,8 @@ void BitcoinGUI::setClientModel(ClientModel *clientModel)\n         setNumConnections(clientModel->getNumConnections());\n         connect(clientModel, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));\n \n-        setNumBlocks(clientModel->getNumBlocks());\n-        connect(clientModel, SIGNAL(numBlocksChanged(int)), this, SLOT(setNumBlocks(int)));\n+        setNumBlocks(clientModel->getNumBlocks(), clientModel->getLastBlockDate());\n+        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime)), this, SLOT(setNumBlocks(int,QDateTime)));\n \n         // Receive and report messages from client model\n         connect(clientModel, SIGNAL(message(QString,QString,unsigned int)), this, SLOT(message(QString,QString,unsigned int)));\n@@ -653,7 +653,7 @@ void BitcoinGUI::setNumConnections(int count)\n     labelConnectionsIcon->setToolTip(tr(\"%n active connection(s) to Bitcoin network\", \"\", count));\n }\n \n-void BitcoinGUI::setNumBlocks(int count)\n+void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate)\n {\n     if(!clientModel)\n         return;\n@@ -681,9 +681,8 @@ void BitcoinGUI::setNumBlocks(int count)\n \n     QString tooltip;\n \n-    QDateTime lastBlockDate = clientModel->getLastBlockDate();\n     QDateTime currentDate = QDateTime::currentDateTime();\n-    qint64 secs = lastBlockDate.secsTo(currentDate);\n+    qint64 secs = blockDate.secsTo(currentDate);\n \n     tooltip = tr(\"Processed %n blocks of transaction history.\", \"\", count);\n "
      },
      {
        "sha": "5a289a90460025a7a9b87542e9b024580babeda1",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8517e9709e883ef59603d56b45dd2e06f8b7c7d7/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8517e9709e883ef59603d56b45dd2e06f8b7c7d7/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=8517e9709e883ef59603d56b45dd2e06f8b7c7d7",
        "patch": "@@ -143,8 +143,8 @@ class BitcoinGUI : public QMainWindow\n public slots:\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n-    /** Set number of blocks shown in the UI */\n-    void setNumBlocks(int count);\n+    /** Set number of blocks and last block date shown in the UI */\n+    void setNumBlocks(int count, const QDateTime& blockDate);\n \n     /** Notify the user of an event from the core network or transaction handling code.\n        @param[in] title     the message box / notification title"
      },
      {
        "sha": "dc32f8157100031c59a2b87b3ea60ca63190d885",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 6,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8517e9709e883ef59603d56b45dd2e06f8b7c7d7/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8517e9709e883ef59603d56b45dd2e06f8b7c7d7/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=8517e9709e883ef59603d56b45dd2e06f8b7c7d7",
        "patch": "@@ -18,7 +18,6 @@\n \n #include <stdint.h>\n \n-#include <QDateTime>\n #include <QDebug>\n #include <QTimer>\n \n@@ -29,6 +28,7 @@ ClientModel::ClientModel(OptionsModel *optionsModel, QObject *parent) :\n     optionsModel(optionsModel),\n     peerTableModel(0),\n     cachedNumBlocks(0),\n+    cachedBlockDate(QDateTime()),\n     cachedReindexing(0),\n     cachedImporting(0),\n     pollTimer(0)\n@@ -79,10 +79,11 @@ quint64 ClientModel::getTotalBytesSent() const\n QDateTime ClientModel::getLastBlockDate() const\n {\n     LOCK(cs_main);\n+\n     if (chainActive.Tip())\n         return QDateTime::fromTime_t(chainActive.Tip()->GetBlockTime());\n-    else\n-        return QDateTime::fromTime_t(Params().GenesisBlock().GetBlockTime()); // Genesis block's time of current network\n+\n+    return QDateTime::fromTime_t(Params().GenesisBlock().GetBlockTime()); // Genesis block's time of current network\n }\n \n double ClientModel::getVerificationProgress() const\n@@ -97,21 +98,26 @@ void ClientModel::updateTimer()\n     // periodical polls if the core is holding the locks for a longer time -\n     // for example, during a wallet rescan.\n     TRY_LOCK(cs_main, lockMain);\n-    if(!lockMain)\n+    if (!lockMain)\n         return;\n+\n     // Some quantities (such as number of blocks) change so fast that we don't want to be notified for each change.\n     // Periodically check and update with a timer.\n     int newNumBlocks = getNumBlocks();\n+    QDateTime newBlockDate = getLastBlockDate();\n \n     // check for changed number of blocks we have, number of blocks peers claim to have, reindexing state and importing state\n     if (cachedNumBlocks != newNumBlocks ||\n-        cachedReindexing != fReindex || cachedImporting != fImporting)\n+        cachedBlockDate != newBlockDate ||\n+        cachedReindexing != fReindex ||\n+        cachedImporting != fImporting)\n     {\n         cachedNumBlocks = newNumBlocks;\n+        cachedBlockDate = newBlockDate;\n         cachedReindexing = fReindex;\n         cachedImporting = fImporting;\n \n-        emit numBlocksChanged(newNumBlocks);\n+        emit numBlocksChanged(newNumBlocks, newBlockDate);\n     }\n \n     emit bytesChanged(getTotalBytesRecv(), getTotalBytesSent());"
      },
      {
        "sha": "214701810c0dff36dabcc3aa77fe17e989685e1f",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8517e9709e883ef59603d56b45dd2e06f8b7c7d7/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8517e9709e883ef59603d56b45dd2e06f8b7c7d7/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=8517e9709e883ef59603d56b45dd2e06f8b7c7d7",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_QT_CLIENTMODEL_H\n \n #include <QObject>\n+#include <QDateTime>\n \n class AddressTableModel;\n class OptionsModel;\n@@ -15,7 +16,6 @@ class TransactionTableModel;\n class CWallet;\n \n QT_BEGIN_NAMESPACE\n-class QDateTime;\n class QTimer;\n QT_END_NAMESPACE\n \n@@ -73,6 +73,7 @@ class ClientModel : public QObject\n     PeerTableModel *peerTableModel;\n \n     int cachedNumBlocks;\n+    QDateTime cachedBlockDate;\n     bool cachedReindexing;\n     bool cachedImporting;\n \n@@ -83,7 +84,7 @@ class ClientModel : public QObject\n \n signals:\n     void numConnectionsChanged(int count);\n-    void numBlocksChanged(int count);\n+    void numBlocksChanged(int count, const QDateTime& blockDate);\n     void alertsChanged(const QString &warnings);\n     void bytesChanged(quint64 totalBytesIn, quint64 totalBytesOut);\n "
      },
      {
        "sha": "ccde44fb29a781bc8dc50ba896febba5606b06c6",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8517e9709e883ef59603d56b45dd2e06f8b7c7d7/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8517e9709e883ef59603d56b45dd2e06f8b7c7d7/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=8517e9709e883ef59603d56b45dd2e06f8b7c7d7",
        "patch": "@@ -293,8 +293,8 @@ void RPCConsole::setClientModel(ClientModel *model)\n         setNumConnections(model->getNumConnections());\n         connect(model, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));\n \n-        setNumBlocks(model->getNumBlocks());\n-        connect(model, SIGNAL(numBlocksChanged(int)), this, SLOT(setNumBlocks(int)));\n+        setNumBlocks(model->getNumBlocks(), model->getLastBlockDate());\n+        connect(model, SIGNAL(numBlocksChanged(int,QDateTime)), this, SLOT(setNumBlocks(int,QDateTime)));\n \n         updateTrafficStats(model->getTotalBytesRecv(), model->getTotalBytesSent());\n         connect(model, SIGNAL(bytesChanged(quint64,quint64)), this, SLOT(updateTrafficStats(quint64, quint64)));\n@@ -404,11 +404,10 @@ void RPCConsole::setNumConnections(int count)\n     ui->numberOfConnections->setText(connections);\n }\n \n-void RPCConsole::setNumBlocks(int count)\n+void RPCConsole::setNumBlocks(int count, const QDateTime& blockDate)\n {\n     ui->numberOfBlocks->setText(QString::number(count));\n-    if(clientModel)\n-        ui->lastBlockTime->setText(clientModel->getLastBlockDate().toString());\n+    ui->lastBlockTime->setText(blockDate.toString());\n }\n \n void RPCConsole::on_lineEdit_returnPressed()"
      },
      {
        "sha": "8737be35d1a180f7d7070c2dc094174381824825",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8517e9709e883ef59603d56b45dd2e06f8b7c7d7/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8517e9709e883ef59603d56b45dd2e06f8b7c7d7/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=8517e9709e883ef59603d56b45dd2e06f8b7c7d7",
        "patch": "@@ -63,8 +63,8 @@ public slots:\n     void message(int category, const QString &message, bool html = false);\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n-    /** Set number of blocks shown in the UI */\n-    void setNumBlocks(int count);\n+    /** Set number of blocks and last block date shown in the UI */\n+    void setNumBlocks(int count, const QDateTime& blockDate);\n     /** Go forward or back in history */\n     void browseHistory(int offset);\n     /** Scroll console view to end */"
      },
      {
        "sha": "4f3230a8c9e8caaf9a18fb25e6a566b4b2e6e544",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8517e9709e883ef59603d56b45dd2e06f8b7c7d7/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8517e9709e883ef59603d56b45dd2e06f8b7c7d7/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=8517e9709e883ef59603d56b45dd2e06f8b7c7d7",
        "patch": "@@ -121,7 +121,7 @@ void SendCoinsDialog::setClientModel(ClientModel *clientModel)\n     this->clientModel = clientModel;\n \n     if (clientModel) {\n-        connect(clientModel, SIGNAL(numBlocksChanged(int)), this, SLOT(updateSmartFeeLabel()));\n+        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime)), this, SLOT(updateSmartFeeLabel()));\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "f50120ab4d244f52efbe37996dbc086ee698ee6b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNTAxMjBhYjRkMjQ0ZjUyZWZiZTM3OTk2ZGJjMDg2ZWU2OThlZTZi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-09T10:30:25Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-09T10:32:39Z"
      },
      "message": "Merge pull request #5776\n\n8517e97 [Qt] rework setNumBlocks to have blockDate as parameter (Philip Kaufmann)",
      "tree": {
        "sha": "7534aee2b8a461e0ff470b9ad2ff95909ff26df4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7534aee2b8a461e0ff470b9ad2ff95909ff26df4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f50120ab4d244f52efbe37996dbc086ee698ee6b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU/XbHAAoJEHSBCwEjRsmm9poH/i/b4zWJSHXL8wCvtSQSC1Ny\nmnaEQ2aFe63JGt/wDvav6Sc5CjAeQfGfjC9TFUAuAy7JssDO9sEtxW5AhNuiUan7\nfaFBESYXL9ktjS2Uai59XCXpq3VqVVs2K0vFYzJK6VG35vbQ+oQRiBagyhBTtXCS\nw9iIVT0DjAQXoK0BnLuDRa7XUcDdVvoIMvks++degyH8YOL3Hstcy2KUHFQjKZug\nEtQyGZE9l5g8kfwmSCJ+F0IusCNdzHK1srQY+x9Jsc2iQgeGe7OaGOPOeWrJfkRL\nmadwkoR1+pTkHEYmI5+pwaUlmIY7X5Ay6AQSjTKodBgwrDRtOFFNTHBmm9DHgXk=\n=PBmf\n-----END PGP SIGNATURE-----",
        "payload": "tree 7534aee2b8a461e0ff470b9ad2ff95909ff26df4\nparent 513e0252391688b919f1b08980c5759a515c341b\nparent 8517e9709e883ef59603d56b45dd2e06f8b7c7d7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1425897025 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1425897159 +0100\n\nMerge pull request #5776\n\n8517e97 [Qt] rework setNumBlocks to have blockDate as parameter (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f50120ab4d244f52efbe37996dbc086ee698ee6b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f50120ab4d244f52efbe37996dbc086ee698ee6b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f50120ab4d244f52efbe37996dbc086ee698ee6b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "513e0252391688b919f1b08980c5759a515c341b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/513e0252391688b919f1b08980c5759a515c341b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/513e0252391688b919f1b08980c5759a515c341b"
      },
      {
        "sha": "8517e9709e883ef59603d56b45dd2e06f8b7c7d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8517e9709e883ef59603d56b45dd2e06f8b7c7d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8517e9709e883ef59603d56b45dd2e06f8b7c7d7"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 28,
      "deletions": 23
    },
    "files": [
      {
        "sha": "1ec968ff2bee20b23d6b4bb3105b810776062d91",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f50120ab4d244f52efbe37996dbc086ee698ee6b/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f50120ab4d244f52efbe37996dbc086ee698ee6b/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=f50120ab4d244f52efbe37996dbc086ee698ee6b",
        "patch": "@@ -436,8 +436,8 @@ void BitcoinGUI::setClientModel(ClientModel *clientModel)\n         setNumConnections(clientModel->getNumConnections());\n         connect(clientModel, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));\n \n-        setNumBlocks(clientModel->getNumBlocks());\n-        connect(clientModel, SIGNAL(numBlocksChanged(int)), this, SLOT(setNumBlocks(int)));\n+        setNumBlocks(clientModel->getNumBlocks(), clientModel->getLastBlockDate());\n+        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime)), this, SLOT(setNumBlocks(int,QDateTime)));\n \n         // Receive and report messages from client model\n         connect(clientModel, SIGNAL(message(QString,QString,unsigned int)), this, SLOT(message(QString,QString,unsigned int)));\n@@ -653,7 +653,7 @@ void BitcoinGUI::setNumConnections(int count)\n     labelConnectionsIcon->setToolTip(tr(\"%n active connection(s) to Bitcoin network\", \"\", count));\n }\n \n-void BitcoinGUI::setNumBlocks(int count)\n+void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate)\n {\n     if(!clientModel)\n         return;\n@@ -681,9 +681,8 @@ void BitcoinGUI::setNumBlocks(int count)\n \n     QString tooltip;\n \n-    QDateTime lastBlockDate = clientModel->getLastBlockDate();\n     QDateTime currentDate = QDateTime::currentDateTime();\n-    qint64 secs = lastBlockDate.secsTo(currentDate);\n+    qint64 secs = blockDate.secsTo(currentDate);\n \n     tooltip = tr(\"Processed %n blocks of transaction history.\", \"\", count);\n "
      },
      {
        "sha": "5a289a90460025a7a9b87542e9b024580babeda1",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f50120ab4d244f52efbe37996dbc086ee698ee6b/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f50120ab4d244f52efbe37996dbc086ee698ee6b/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=f50120ab4d244f52efbe37996dbc086ee698ee6b",
        "patch": "@@ -143,8 +143,8 @@ class BitcoinGUI : public QMainWindow\n public slots:\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n-    /** Set number of blocks shown in the UI */\n-    void setNumBlocks(int count);\n+    /** Set number of blocks and last block date shown in the UI */\n+    void setNumBlocks(int count, const QDateTime& blockDate);\n \n     /** Notify the user of an event from the core network or transaction handling code.\n        @param[in] title     the message box / notification title"
      },
      {
        "sha": "dc32f8157100031c59a2b87b3ea60ca63190d885",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 6,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f50120ab4d244f52efbe37996dbc086ee698ee6b/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f50120ab4d244f52efbe37996dbc086ee698ee6b/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=f50120ab4d244f52efbe37996dbc086ee698ee6b",
        "patch": "@@ -18,7 +18,6 @@\n \n #include <stdint.h>\n \n-#include <QDateTime>\n #include <QDebug>\n #include <QTimer>\n \n@@ -29,6 +28,7 @@ ClientModel::ClientModel(OptionsModel *optionsModel, QObject *parent) :\n     optionsModel(optionsModel),\n     peerTableModel(0),\n     cachedNumBlocks(0),\n+    cachedBlockDate(QDateTime()),\n     cachedReindexing(0),\n     cachedImporting(0),\n     pollTimer(0)\n@@ -79,10 +79,11 @@ quint64 ClientModel::getTotalBytesSent() const\n QDateTime ClientModel::getLastBlockDate() const\n {\n     LOCK(cs_main);\n+\n     if (chainActive.Tip())\n         return QDateTime::fromTime_t(chainActive.Tip()->GetBlockTime());\n-    else\n-        return QDateTime::fromTime_t(Params().GenesisBlock().GetBlockTime()); // Genesis block's time of current network\n+\n+    return QDateTime::fromTime_t(Params().GenesisBlock().GetBlockTime()); // Genesis block's time of current network\n }\n \n double ClientModel::getVerificationProgress() const\n@@ -97,21 +98,26 @@ void ClientModel::updateTimer()\n     // periodical polls if the core is holding the locks for a longer time -\n     // for example, during a wallet rescan.\n     TRY_LOCK(cs_main, lockMain);\n-    if(!lockMain)\n+    if (!lockMain)\n         return;\n+\n     // Some quantities (such as number of blocks) change so fast that we don't want to be notified for each change.\n     // Periodically check and update with a timer.\n     int newNumBlocks = getNumBlocks();\n+    QDateTime newBlockDate = getLastBlockDate();\n \n     // check for changed number of blocks we have, number of blocks peers claim to have, reindexing state and importing state\n     if (cachedNumBlocks != newNumBlocks ||\n-        cachedReindexing != fReindex || cachedImporting != fImporting)\n+        cachedBlockDate != newBlockDate ||\n+        cachedReindexing != fReindex ||\n+        cachedImporting != fImporting)\n     {\n         cachedNumBlocks = newNumBlocks;\n+        cachedBlockDate = newBlockDate;\n         cachedReindexing = fReindex;\n         cachedImporting = fImporting;\n \n-        emit numBlocksChanged(newNumBlocks);\n+        emit numBlocksChanged(newNumBlocks, newBlockDate);\n     }\n \n     emit bytesChanged(getTotalBytesRecv(), getTotalBytesSent());"
      },
      {
        "sha": "214701810c0dff36dabcc3aa77fe17e989685e1f",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f50120ab4d244f52efbe37996dbc086ee698ee6b/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f50120ab4d244f52efbe37996dbc086ee698ee6b/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=f50120ab4d244f52efbe37996dbc086ee698ee6b",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_QT_CLIENTMODEL_H\n \n #include <QObject>\n+#include <QDateTime>\n \n class AddressTableModel;\n class OptionsModel;\n@@ -15,7 +16,6 @@ class TransactionTableModel;\n class CWallet;\n \n QT_BEGIN_NAMESPACE\n-class QDateTime;\n class QTimer;\n QT_END_NAMESPACE\n \n@@ -73,6 +73,7 @@ class ClientModel : public QObject\n     PeerTableModel *peerTableModel;\n \n     int cachedNumBlocks;\n+    QDateTime cachedBlockDate;\n     bool cachedReindexing;\n     bool cachedImporting;\n \n@@ -83,7 +84,7 @@ class ClientModel : public QObject\n \n signals:\n     void numConnectionsChanged(int count);\n-    void numBlocksChanged(int count);\n+    void numBlocksChanged(int count, const QDateTime& blockDate);\n     void alertsChanged(const QString &warnings);\n     void bytesChanged(quint64 totalBytesIn, quint64 totalBytesOut);\n "
      },
      {
        "sha": "ccde44fb29a781bc8dc50ba896febba5606b06c6",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f50120ab4d244f52efbe37996dbc086ee698ee6b/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f50120ab4d244f52efbe37996dbc086ee698ee6b/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=f50120ab4d244f52efbe37996dbc086ee698ee6b",
        "patch": "@@ -293,8 +293,8 @@ void RPCConsole::setClientModel(ClientModel *model)\n         setNumConnections(model->getNumConnections());\n         connect(model, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));\n \n-        setNumBlocks(model->getNumBlocks());\n-        connect(model, SIGNAL(numBlocksChanged(int)), this, SLOT(setNumBlocks(int)));\n+        setNumBlocks(model->getNumBlocks(), model->getLastBlockDate());\n+        connect(model, SIGNAL(numBlocksChanged(int,QDateTime)), this, SLOT(setNumBlocks(int,QDateTime)));\n \n         updateTrafficStats(model->getTotalBytesRecv(), model->getTotalBytesSent());\n         connect(model, SIGNAL(bytesChanged(quint64,quint64)), this, SLOT(updateTrafficStats(quint64, quint64)));\n@@ -404,11 +404,10 @@ void RPCConsole::setNumConnections(int count)\n     ui->numberOfConnections->setText(connections);\n }\n \n-void RPCConsole::setNumBlocks(int count)\n+void RPCConsole::setNumBlocks(int count, const QDateTime& blockDate)\n {\n     ui->numberOfBlocks->setText(QString::number(count));\n-    if(clientModel)\n-        ui->lastBlockTime->setText(clientModel->getLastBlockDate().toString());\n+    ui->lastBlockTime->setText(blockDate.toString());\n }\n \n void RPCConsole::on_lineEdit_returnPressed()"
      },
      {
        "sha": "8737be35d1a180f7d7070c2dc094174381824825",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f50120ab4d244f52efbe37996dbc086ee698ee6b/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f50120ab4d244f52efbe37996dbc086ee698ee6b/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=f50120ab4d244f52efbe37996dbc086ee698ee6b",
        "patch": "@@ -63,8 +63,8 @@ public slots:\n     void message(int category, const QString &message, bool html = false);\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n-    /** Set number of blocks shown in the UI */\n-    void setNumBlocks(int count);\n+    /** Set number of blocks and last block date shown in the UI */\n+    void setNumBlocks(int count, const QDateTime& blockDate);\n     /** Go forward or back in history */\n     void browseHistory(int offset);\n     /** Scroll console view to end */"
      },
      {
        "sha": "4f3230a8c9e8caaf9a18fb25e6a566b4b2e6e544",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f50120ab4d244f52efbe37996dbc086ee698ee6b/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f50120ab4d244f52efbe37996dbc086ee698ee6b/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=f50120ab4d244f52efbe37996dbc086ee698ee6b",
        "patch": "@@ -121,7 +121,7 @@ void SendCoinsDialog::setClientModel(ClientModel *clientModel)\n     this->clientModel = clientModel;\n \n     if (clientModel) {\n-        connect(clientModel, SIGNAL(numBlocksChanged(int)), this, SLOT(updateSmartFeeLabel()));\n+        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime)), this, SLOT(updateSmartFeeLabel()));\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "c1b723c30a57811ad5801ab8a839186b654ae2bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMWI3MjNjMzBhNTc4MTFhZDU4MDFhYjhhODM5MTg2YjY1NGFlMmJm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-09T11:24:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-09T11:24:53Z"
      },
      "message": "Merge pull request #5442\n\ndca799e Ignore getaddr messages on Outbound connections. (Ivan Pustogarov)",
      "tree": {
        "sha": "9cf000e1909f3b08ab90fc2f982e6f2996b8e58c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9cf000e1909f3b08ab90fc2f982e6f2996b8e58c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1b723c30a57811ad5801ab8a839186b654ae2bf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU/YMFAAoJEHSBCwEjRsmm4sUH/10T0/cQ6/Dv26lwuTLEjPwp\nbA74HmhZk3eHWrqD8zpYUF7hOVBeKHusmfed0KY86wLBIIc2FQD6TeAALlcoGtxv\nPF727gM8WBCZWCGn0oES0QBC7gQV6YMgLIsFQSiaifeVVKsg1KRuBw/xFR2RaI87\nvFpaOjPPedFOY4kroufe2UYh2Q43ysWCkiwtjqAyovClgJj6YrsRklsHKwm+PFW9\naOktlZjpKI7Fx5YE+kszOa5s7rIzoHs/foE25ZVbWiqBU+9VzUye5CxeFOJymU1J\nh2GXeXNxLmZ4YKoHGWGtFJjncVW+8jElMVmPcfWtvNL9xm3qy9zrFbFCOrxCH4o=\n=lqE9\n-----END PGP SIGNATURE-----",
        "payload": "tree 9cf000e1909f3b08ab90fc2f982e6f2996b8e58c\nparent f50120ab4d244f52efbe37996dbc086ee698ee6b\nparent dca799e1db6e319fdd47e0bfdb038eab0efabb85\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1425900287 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1425900293 +0100\n\nMerge pull request #5442\n\ndca799e Ignore getaddr messages on Outbound connections. (Ivan Pustogarov)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1b723c30a57811ad5801ab8a839186b654ae2bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1b723c30a57811ad5801ab8a839186b654ae2bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1b723c30a57811ad5801ab8a839186b654ae2bf/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f50120ab4d244f52efbe37996dbc086ee698ee6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f50120ab4d244f52efbe37996dbc086ee698ee6b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f50120ab4d244f52efbe37996dbc086ee698ee6b"
      },
      {
        "sha": "dca799e1db6e319fdd47e0bfdb038eab0efabb85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dca799e1db6e319fdd47e0bfdb038eab0efabb85",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dca799e1db6e319fdd47e0bfdb038eab0efabb85"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a2043dd9cba22ca663b216e96127e445d9620482",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1b723c30a57811ad5801ab8a839186b654ae2bf/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1b723c30a57811ad5801ab8a839186b654ae2bf/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c1b723c30a57811ad5801ab8a839186b654ae2bf",
        "patch": "@@ -4021,7 +4021,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     }\n \n \n-    else if (strCommand == \"getaddr\")\n+    // This asymmetric behavior for inbound and outbound connections was introduced\n+    // to prevent a fingerprinting attack: an attacker can send specific fake addresses\n+    // to users' AddrMan and later request them by sending getaddr messages. \n+    // Making users (which are behind NAT and can only make outgoing connections) ignore \n+    // getaddr message mitigates the attack.\n+    else if ((strCommand == \"getaddr\") && (pfrom->fInbound))\n     {\n         pfrom->vAddrToSend.clear();\n         vector<CAddress> vAddr = addrman.GetAddr();"
      }
    ]
  },
  {
    "sha": "cdae53e456ad35216e33a90f1681aade546cc431",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZGFlNTNlNDU2YWQzNTIxNmUzM2E5MGYxNjgxYWFkZTU0NmNjNDMx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-09T11:43:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-09T11:51:07Z"
      },
      "message": "Merge pull request #5852\n\n51598b2 Reinitialize state in between individual unit tests. (Pieter Wuille)",
      "tree": {
        "sha": "d21c3163a804c7542241c089075586acd16c218e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d21c3163a804c7542241c089075586acd16c218e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cdae53e456ad35216e33a90f1681aade546cc431",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU/YkrAAoJEHSBCwEjRsmmjX8IAIul0upIaRiqsF3EP4gs6itW\nBs93bPA4MljD7QG8PpBO5Sarpy8zMf7EyUgkRBL63PZaKRm+HuBKGotYuDqapst0\nCJnAom1Y1Mtd1Q1lJ22tts6/MS8HfIjc4hRnfoMjwqxml7sqL913I6R2Per12qy+\nzczMgO00ajX1I5Ir8ZLZXaKNNHs2iKmlISCQnIC427zYzi0w1I80/jGUpTYsAJZf\n4ZX098na/HPoWmudqxh1H/x3kapL0HPUNMr0RYNPV8yR8BMxEHz/2+eu3zaP1i7c\nBetyBq9YmgSm36eMm61+oEXfo58Cf/AZ4UxnU0rAN9HS5ohl+TIF9gwbtIjcews=\n=jqY/\n-----END PGP SIGNATURE-----",
        "payload": "tree d21c3163a804c7542241c089075586acd16c218e\nparent c1b723c30a57811ad5801ab8a839186b654ae2bf\nparent 51598b26319bf1ee98b399dee8152b902c62891a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1425901401 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1425901867 +0100\n\nMerge pull request #5852\n\n51598b2 Reinitialize state in between individual unit tests. (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdae53e456ad35216e33a90f1681aade546cc431",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cdae53e456ad35216e33a90f1681aade546cc431",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdae53e456ad35216e33a90f1681aade546cc431/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1b723c30a57811ad5801ab8a839186b654ae2bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1b723c30a57811ad5801ab8a839186b654ae2bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1b723c30a57811ad5801ab8a839186b654ae2bf"
      },
      {
        "sha": "51598b26319bf1ee98b399dee8152b902c62891a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51598b26319bf1ee98b399dee8152b902c62891a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51598b26319bf1ee98b399dee8152b902c62891a"
      }
    ],
    "stats": {
      "total": 185,
      "additions": 124,
      "deletions": 61
    },
    "files": [
      {
        "sha": "e9d99323c5f0e537ece826e0f4ece15670abdd95",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdae53e456ad35216e33a90f1681aade546cc431/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdae53e456ad35216e33a90f1681aade546cc431/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=cdae53e456ad35216e33a90f1681aade546cc431",
        "patch": "@@ -66,6 +66,7 @@ BITCOIN_TESTS =\\\n   test/sigopcount_tests.cpp \\\n   test/skiplist_tests.cpp \\\n   test/test_bitcoin.cpp \\\n+  test/test_bitcoin.h \\\n   test/timedata_tests.cpp \\\n   test/transaction_tests.cpp \\\n   test/uint256_tests.cpp \\"
      },
      {
        "sha": "36946b7dcca255e08a00529f441a2787227386d2",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 34,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdae53e456ad35216e33a90f1681aade546cc431/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdae53e456ad35216e33a90f1681aade546cc431/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=cdae53e456ad35216e33a90f1681aade546cc431",
        "patch": "@@ -39,22 +39,31 @@ void CDBEnv::EnvShutdown()\n         return;\n \n     fDbEnvInit = false;\n-    int ret = dbenv.close(0);\n+    int ret = dbenv->close(0);\n     if (ret != 0)\n         LogPrintf(\"CDBEnv::EnvShutdown: Error %d shutting down database environment: %s\\n\", ret, DbEnv::strerror(ret));\n     if (!fMockDb)\n         DbEnv(0).remove(path.string().c_str(), 0);\n }\n \n-CDBEnv::CDBEnv() : dbenv(DB_CXX_NO_EXCEPTIONS)\n+void CDBEnv::Reset()\n {\n+    delete dbenv;\n+    dbenv = new DbEnv(DB_CXX_NO_EXCEPTIONS);\n     fDbEnvInit = false;\n     fMockDb = false;\n }\n \n+CDBEnv::CDBEnv() : dbenv(NULL)\n+{\n+    Reset();\n+}\n+\n CDBEnv::~CDBEnv()\n {\n     EnvShutdown();\n+    delete dbenv;\n+    dbenv = NULL;\n }\n \n void CDBEnv::Close()\n@@ -79,17 +88,17 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n     if (GetBoolArg(\"-privdb\", true))\n         nEnvFlags |= DB_PRIVATE;\n \n-    dbenv.set_lg_dir(pathLogDir.string().c_str());\n-    dbenv.set_cachesize(0, 0x100000, 1); // 1 MiB should be enough for just the wallet\n-    dbenv.set_lg_bsize(0x10000);\n-    dbenv.set_lg_max(1048576);\n-    dbenv.set_lk_max_locks(40000);\n-    dbenv.set_lk_max_objects(40000);\n-    dbenv.set_errfile(fopen(pathErrorFile.string().c_str(), \"a\")); /// debug\n-    dbenv.set_flags(DB_AUTO_COMMIT, 1);\n-    dbenv.set_flags(DB_TXN_WRITE_NOSYNC, 1);\n-    dbenv.log_set_config(DB_LOG_AUTO_REMOVE, 1);\n-    int ret = dbenv.open(path.string().c_str(),\n+    dbenv->set_lg_dir(pathLogDir.string().c_str());\n+    dbenv->set_cachesize(0, 0x100000, 1); // 1 MiB should be enough for just the wallet\n+    dbenv->set_lg_bsize(0x10000);\n+    dbenv->set_lg_max(1048576);\n+    dbenv->set_lk_max_locks(40000);\n+    dbenv->set_lk_max_objects(40000);\n+    dbenv->set_errfile(fopen(pathErrorFile.string().c_str(), \"a\")); /// debug\n+    dbenv->set_flags(DB_AUTO_COMMIT, 1);\n+    dbenv->set_flags(DB_TXN_WRITE_NOSYNC, 1);\n+    dbenv->log_set_config(DB_LOG_AUTO_REMOVE, 1);\n+    int ret = dbenv->open(path.string().c_str(),\n                          DB_CREATE |\n                              DB_INIT_LOCK |\n                              DB_INIT_LOG |\n@@ -116,14 +125,14 @@ void CDBEnv::MakeMock()\n \n     LogPrint(\"db\", \"CDBEnv::MakeMock\\n\");\n \n-    dbenv.set_cachesize(1, 0, 1);\n-    dbenv.set_lg_bsize(10485760 * 4);\n-    dbenv.set_lg_max(10485760);\n-    dbenv.set_lk_max_locks(10000);\n-    dbenv.set_lk_max_objects(10000);\n-    dbenv.set_flags(DB_AUTO_COMMIT, 1);\n-    dbenv.log_set_config(DB_LOG_IN_MEMORY, 1);\n-    int ret = dbenv.open(NULL,\n+    dbenv->set_cachesize(1, 0, 1);\n+    dbenv->set_lg_bsize(10485760 * 4);\n+    dbenv->set_lg_max(10485760);\n+    dbenv->set_lk_max_locks(10000);\n+    dbenv->set_lk_max_objects(10000);\n+    dbenv->set_flags(DB_AUTO_COMMIT, 1);\n+    dbenv->log_set_config(DB_LOG_IN_MEMORY, 1);\n+    int ret = dbenv->open(NULL,\n                          DB_CREATE |\n                              DB_INIT_LOCK |\n                              DB_INIT_LOG |\n@@ -144,7 +153,7 @@ CDBEnv::VerifyResult CDBEnv::Verify(std::string strFile, bool (*recoverFunc)(CDB\n     LOCK(cs_db);\n     assert(mapFileUseCount.count(strFile) == 0);\n \n-    Db db(&dbenv, 0);\n+    Db db(dbenv, 0);\n     int result = db.verify(strFile.c_str(), NULL, NULL, 0);\n     if (result == 0)\n         return VERIFY_OK;\n@@ -167,7 +176,7 @@ bool CDBEnv::Salvage(std::string strFile, bool fAggressive, std::vector<CDBEnv::\n \n     stringstream strDump;\n \n-    Db db(&dbenv, 0);\n+    Db db(dbenv, 0);\n     int result = db.verify(strFile.c_str(), NULL, &strDump, flags);\n     if (result == DB_VERIFY_BAD) {\n         LogPrintf(\"CDBEnv::Salvage: Database salvage found errors, all data may not be recoverable.\\n\");\n@@ -208,10 +217,10 @@ bool CDBEnv::Salvage(std::string strFile, bool fAggressive, std::vector<CDBEnv::\n \n void CDBEnv::CheckpointLSN(const std::string& strFile)\n {\n-    dbenv.txn_checkpoint(0, 0, 0);\n+    dbenv->txn_checkpoint(0, 0, 0);\n     if (fMockDb)\n         return;\n-    dbenv.lsn_reset(strFile.c_str(), 0);\n+    dbenv->lsn_reset(strFile.c_str(), 0);\n }\n \n \n@@ -237,7 +246,7 @@ CDB::CDB(const std::string& strFilename, const char* pszMode, bool fFlushOnClose\n         ++bitdb.mapFileUseCount[strFile];\n         pdb = bitdb.mapDb[strFile];\n         if (pdb == NULL) {\n-            pdb = new Db(&bitdb.dbenv, 0);\n+            pdb = new Db(bitdb.dbenv, 0);\n \n             bool fMockDb = bitdb.IsMock();\n             if (fMockDb) {\n@@ -284,7 +293,7 @@ void CDB::Flush()\n     if (fReadOnly)\n         nMinutes = 1;\n \n-    bitdb.dbenv.txn_checkpoint(nMinutes ? GetArg(\"-dblogsize\", 100) * 1024 : 0, nMinutes, 0);\n+    bitdb.dbenv->txn_checkpoint(nMinutes ? GetArg(\"-dblogsize\", 100) * 1024 : 0, nMinutes, 0);\n }\n \n void CDB::Close()\n@@ -324,7 +333,7 @@ bool CDBEnv::RemoveDb(const string& strFile)\n     this->CloseDb(strFile);\n \n     LOCK(cs_db);\n-    int rc = dbenv.dbremove(NULL, strFile.c_str(), NULL, DB_AUTO_COMMIT);\n+    int rc = dbenv->dbremove(NULL, strFile.c_str(), NULL, DB_AUTO_COMMIT);\n     return (rc == 0);\n }\n \n@@ -344,7 +353,7 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                 string strFileRes = strFile + \".rewrite\";\n                 { // surround usage of db with extra {}\n                     CDB db(strFile.c_str(), \"r\");\n-                    Db* pdbCopy = new Db(&bitdb.dbenv, 0);\n+                    Db* pdbCopy = new Db(bitdb.dbenv, 0);\n \n                     int ret = pdbCopy->open(NULL,               // Txn pointer\n                                             strFileRes.c_str(), // Filename\n@@ -394,10 +403,10 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                     }\n                 }\n                 if (fSuccess) {\n-                    Db dbA(&bitdb.dbenv, 0);\n+                    Db dbA(bitdb.dbenv, 0);\n                     if (dbA.remove(strFile.c_str(), NULL, 0))\n                         fSuccess = false;\n-                    Db dbB(&bitdb.dbenv, 0);\n+                    Db dbB(bitdb.dbenv, 0);\n                     if (dbB.rename(strFileRes.c_str(), NULL, strFile.c_str(), 0))\n                         fSuccess = false;\n                 }\n@@ -430,10 +439,10 @@ void CDBEnv::Flush(bool fShutdown)\n                 // Move log data to the dat file\n                 CloseDb(strFile);\n                 LogPrint(\"db\", \"CDBEnv::Flush: %s checkpoint\\n\", strFile);\n-                dbenv.txn_checkpoint(0, 0, 0);\n+                dbenv->txn_checkpoint(0, 0, 0);\n                 LogPrint(\"db\", \"CDBEnv::Flush: %s detach\\n\", strFile);\n                 if (!fMockDb)\n-                    dbenv.lsn_reset(strFile.c_str(), 0);\n+                    dbenv->lsn_reset(strFile.c_str(), 0);\n                 LogPrint(\"db\", \"CDBEnv::Flush: %s closed\\n\", strFile);\n                 mapFileUseCount.erase(mi++);\n             } else\n@@ -443,7 +452,7 @@ void CDBEnv::Flush(bool fShutdown)\n         if (fShutdown) {\n             char** listp;\n             if (mapFileUseCount.empty()) {\n-                dbenv.log_archive(&listp, DB_ARCH_REMOVE);\n+                dbenv->log_archive(&listp, DB_ARCH_REMOVE);\n                 Close();\n                 if (!fMockDb)\n                     boost::filesystem::remove_all(path / \"database\");"
      },
      {
        "sha": "71133f969914ae47559f15a5ecf07e30a1644526",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdae53e456ad35216e33a90f1681aade546cc431/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdae53e456ad35216e33a90f1681aade546cc431/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=cdae53e456ad35216e33a90f1681aade546cc431",
        "patch": "@@ -39,12 +39,14 @@ class CDBEnv\n \n public:\n     mutable CCriticalSection cs_db;\n-    DbEnv dbenv;\n+    DbEnv *dbenv;\n     std::map<std::string, int> mapFileUseCount;\n     std::map<std::string, Db*> mapDb;\n \n     CDBEnv();\n     ~CDBEnv();\n+    void Reset();\n+\n     void MakeMock();\n     bool IsMock() { return fMockDb; }\n \n@@ -79,7 +81,7 @@ class CDBEnv\n     DbTxn* TxnBegin(int flags = DB_TXN_WRITE_NOSYNC)\n     {\n         DbTxn* ptxn = NULL;\n-        int ret = dbenv.txn_begin(NULL, &ptxn, flags);\n+        int ret = dbenv->txn_begin(NULL, &ptxn, flags);\n         if (!ptxn || ret != 0)\n             return NULL;\n         return ptxn;"
      },
      {
        "sha": "0b36b5f2194f79f898ccb1614e518127e4841d70",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 2,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdae53e456ad35216e33a90f1681aade546cc431/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdae53e456ad35216e33a90f1681aade546cc431/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=cdae53e456ad35216e33a90f1681aade546cc431",
        "patch": "@@ -54,7 +54,6 @@ bool fTxIndex = false;\n bool fIsBareMultisigStd = true;\n unsigned int nCoinCacheSize = 5000;\n \n-\n /** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n CFeeRate minRelayTxFee = CFeeRate(1000);\n \n@@ -3085,10 +3084,31 @@ bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth\n \n void UnloadBlockIndex()\n {\n-    mapBlockIndex.clear();\n+    LOCK(cs_main);\n     setBlockIndexCandidates.clear();\n     chainActive.SetTip(NULL);\n     pindexBestInvalid = NULL;\n+    pindexBestHeader = NULL;\n+    mempool.clear();\n+    mapOrphanTransactions.clear();\n+    mapOrphanTransactionsByPrev.clear();\n+    nSyncStarted = 0;\n+    mapBlocksUnlinked.clear();\n+    vinfoBlockFile.clear();\n+    nLastBlockFile = 0;\n+    nBlockSequenceId = 1;\n+    mapBlockSource.clear();\n+    mapBlocksInFlight.clear();\n+    nQueuedValidatedHeaders = 0;\n+    nPreferredDownload = 0;\n+    setDirtyBlockIndex.clear();\n+    setDirtyFileInfo.clear();\n+    mapNodeState.clear();\n+\n+    BOOST_FOREACH(BlockMap::value_type& entry, mapBlockIndex) {\n+        delete entry.second;\n+    }\n+    mapBlockIndex.clear();\n }\n \n bool LoadBlockIndex()"
      },
      {
        "sha": "bf255487550cb2fee2ac1f939f93ab2e5d02439e",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdae53e456ad35216e33a90f1681aade546cc431/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdae53e456ad35216e33a90f1681aade546cc431/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=cdae53e456ad35216e33a90f1681aade546cc431",
        "patch": "@@ -16,6 +16,8 @@\n #include \"serialize.h\"\n #include \"util.h\"\n \n+#include \"test/test_bitcoin.h\"\n+\n #include <stdint.h>\n \n #include <boost/assign/list_of.hpp> // for 'map_list_of()'\n@@ -41,7 +43,7 @@ CService ip(uint32_t i)\n     return CService(CNetAddr(s), Params().GetDefaultPort());\n }\n \n-BOOST_AUTO_TEST_SUITE(DoS_tests)\n+BOOST_FIXTURE_TEST_SUITE(DoS_tests, TestingSetup)\n \n BOOST_AUTO_TEST_CASE(DoS_banning)\n {"
      },
      {
        "sha": "36499f01a7b0d77ea2cb884852f30cf9e1092713",
        "filename": "src/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdae53e456ad35216e33a90f1681aade546cc431/src/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdae53e456ad35216e33a90f1681aade546cc431/src/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/accounting_tests.cpp?ref=cdae53e456ad35216e33a90f1681aade546cc431",
        "patch": "@@ -5,14 +5,16 @@\n #include \"wallet.h\"\n #include \"walletdb.h\"\n \n+#include \"test/test_bitcoin.h\"\n+\n #include <stdint.h>\n \n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n extern CWallet* pwalletMain;\n \n-BOOST_AUTO_TEST_SUITE(accounting_tests)\n+BOOST_FIXTURE_TEST_SUITE(accounting_tests, TestingSetup)\n \n static void\n GetResults(CWalletDB& walletdb, std::map<CAmount, CAccountingEntry>& results)"
      },
      {
        "sha": "5e1f5f0294e2feebd4f54c03d040ad5d32fe3806",
        "filename": "src/test/alert_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdae53e456ad35216e33a90f1681aade546cc431/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdae53e456ad35216e33a90f1681aade546cc431/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=cdae53e456ad35216e33a90f1681aade546cc431",
        "patch": "@@ -15,6 +15,8 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n+#include \"test/test_bitcoin.h\"\n+\n #include <fstream>\n \n #include <boost/filesystem/operations.hpp>\n@@ -78,7 +80,7 @@\n }\n #endif\n \n-struct ReadAlerts\n+struct ReadAlerts : public TestingSetup\n {\n     ReadAlerts()\n     {"
      },
      {
        "sha": "6ab9cb8a440b3c779a28979deab2c53d2ab6a936",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdae53e456ad35216e33a90f1681aade546cc431/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdae53e456ad35216e33a90f1681aade546cc431/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=cdae53e456ad35216e33a90f1681aade546cc431",
        "patch": "@@ -8,9 +8,11 @@\n #include \"uint256.h\"\n #include \"util.h\"\n \n+#include \"test/test_bitcoin.h\"\n+\n #include <boost/test/unit_test.hpp>\n \n-BOOST_AUTO_TEST_SUITE(miner_tests)\n+BOOST_FIXTURE_TEST_SUITE(miner_tests, TestingSetup)\n \n static\n struct {"
      },
      {
        "sha": "45cb551d04aa59e4bb1c278bcfa43bf145a9e698",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdae53e456ad35216e33a90f1681aade546cc431/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdae53e456ad35216e33a90f1681aade546cc431/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=cdae53e456ad35216e33a90f1681aade546cc431",
        "patch": "@@ -8,6 +8,8 @@\n #include \"base58.h\"\n #include \"netbase.h\"\n \n+#include \"test/test_bitcoin.h\"\n+\n #include <boost/algorithm/string.hpp>\n #include <boost/test/unit_test.hpp>\n \n@@ -45,7 +47,7 @@ Value CallRPC(string args)\n }\n \n \n-BOOST_AUTO_TEST_SUITE(rpc_tests)\n+BOOST_FIXTURE_TEST_SUITE(rpc_tests, TestingSetup)\n \n BOOST_AUTO_TEST_CASE(rpc_rawparams)\n {"
      },
      {
        "sha": "44475076b3c4faaa2094454c667a35a72cd843a9",
        "filename": "src/test/rpc_wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdae53e456ad35216e33a90f1681aade546cc431/src/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdae53e456ad35216e33a90f1681aade546cc431/src/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_wallet_tests.cpp?ref=cdae53e456ad35216e33a90f1681aade546cc431",
        "patch": "@@ -8,6 +8,8 @@\n #include \"base58.h\"\n #include \"wallet.h\"\n \n+#include \"test/test_bitcoin.h\"\n+\n #include <boost/algorithm/string.hpp>\n #include <boost/test/unit_test.hpp>\n \n@@ -19,7 +21,7 @@ extern Value CallRPC(string args);\n \n extern CWallet* pwalletMain;\n \n-BOOST_AUTO_TEST_SUITE(rpc_wallet_tests)\n+BOOST_FIXTURE_TEST_SUITE(rpc_wallet_tests, TestingSetup)\n \n BOOST_AUTO_TEST_CASE(rpc_addmultisig)\n {"
      },
      {
        "sha": "5df417b8e5e4793775dee5824e96af7d44828b00",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdae53e456ad35216e33a90f1681aade546cc431/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdae53e456ad35216e33a90f1681aade546cc431/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=cdae53e456ad35216e33a90f1681aade546cc431",
        "patch": "@@ -4,6 +4,8 @@\n \n #define BOOST_TEST_MODULE Bitcoin Test Suite\n \n+#include \"test_bitcoin.h\"\n+\n #include \"main.h\"\n #include \"random.h\"\n #include \"txdb.h\"\n@@ -24,18 +26,15 @@ CWallet* pwalletMain;\n extern bool fPrintToConsole;\n extern void noui_connect();\n \n-struct TestingSetup {\n-    CCoinsViewDB *pcoinsdbview;\n-    boost::filesystem::path pathTemp;\n-    boost::thread_group threadGroup;\n-\n-    TestingSetup() {\n+TestingSetup::TestingSetup()\n+{\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n         SelectParams(CBaseChainParams::UNITTEST);\n         noui_connect();\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();\n #endif\n+        ClearDatadirCache();\n         pathTemp = GetTempPath() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(GetRand(100000)));\n         boost::filesystem::create_directories(pathTemp);\n         mapArgs[\"-datadir\"] = pathTemp.string();\n@@ -53,27 +52,28 @@ struct TestingSetup {\n         for (int i=0; i < nScriptCheckThreads-1; i++)\n             threadGroup.create_thread(&ThreadScriptCheck);\n         RegisterNodeSignals(GetNodeSignals());\n-    }\n-    ~TestingSetup()\n-    {\n+}\n+\n+TestingSetup::~TestingSetup()\n+{\n+        UnregisterNodeSignals(GetNodeSignals());\n         threadGroup.interrupt_all();\n         threadGroup.join_all();\n-        UnregisterNodeSignals(GetNodeSignals());\n #ifdef ENABLE_WALLET\n+        UnregisterValidationInterface(pwalletMain);\n         delete pwalletMain;\n         pwalletMain = NULL;\n #endif\n+        UnloadBlockIndex();\n         delete pcoinsTip;\n         delete pcoinsdbview;\n         delete pblocktree;\n #ifdef ENABLE_WALLET\n         bitdb.Flush(true);\n+        bitdb.Reset();\n #endif\n         boost::filesystem::remove_all(pathTemp);\n-    }\n-};\n-\n-BOOST_GLOBAL_FIXTURE(TestingSetup);\n+}\n \n void Shutdown(void* parg)\n {"
      },
      {
        "sha": "c1448dcdebe08e4db90f0f83e52148a770747247",
        "filename": "src/test/test_bitcoin.h",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdae53e456ad35216e33a90f1681aade546cc431/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdae53e456ad35216e33a90f1681aade546cc431/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=cdae53e456ad35216e33a90f1681aade546cc431",
        "patch": "@@ -0,0 +1,18 @@\n+#ifndef BITCOIN_TEST_TEST_BITCOIN_H\n+#define BITCOIN_TEST_TEST_BITCOIN_H\n+\n+#include \"txdb.h\"\n+\n+#include <boost/filesystem.hpp>\n+#include <boost/thread.hpp>\n+\n+struct TestingSetup {\n+    CCoinsViewDB *pcoinsdbview;\n+    boost::filesystem::path pathTemp;\n+    boost::thread_group threadGroup;\n+\n+    TestingSetup();\n+    ~TestingSetup();\n+};\n+\n+#endif"
      },
      {
        "sha": "4d0cb7136e9e97ccfc055c2efa0db4041d6dfc1a",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdae53e456ad35216e33a90f1681aade546cc431/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdae53e456ad35216e33a90f1681aade546cc431/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=cdae53e456ad35216e33a90f1681aade546cc431",
        "patch": "@@ -94,6 +94,7 @@ bool RenameOver(boost::filesystem::path src, boost::filesystem::path dest);\n bool TryCreateDirectory(const boost::filesystem::path& p);\n boost::filesystem::path GetDefaultDataDir();\n const boost::filesystem::path &GetDataDir(bool fNetSpecific = true);\n+void ClearDatadirCache();\n boost::filesystem::path GetConfigFile();\n #ifndef WIN32\n boost::filesystem::path GetPidFile();"
      },
      {
        "sha": "ddec57d9a90ce5212e9cf88bc8f456847a1b4658",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdae53e456ad35216e33a90f1681aade546cc431/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdae53e456ad35216e33a90f1681aade546cc431/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=cdae53e456ad35216e33a90f1681aade546cc431",
        "patch": "@@ -903,8 +903,8 @@ bool CWalletDB::Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys)\n     int64_t now = GetTime();\n     std::string newFilename = strprintf(\"wallet.%d.bak\", now);\n \n-    int result = dbenv.dbenv.dbrename(NULL, filename.c_str(), NULL,\n-                                      newFilename.c_str(), DB_AUTO_COMMIT);\n+    int result = dbenv.dbenv->dbrename(NULL, filename.c_str(), NULL,\n+                                       newFilename.c_str(), DB_AUTO_COMMIT);\n     if (result == 0)\n         LogPrintf(\"Renamed %s to %s\\n\", filename, newFilename);\n     else\n@@ -923,7 +923,7 @@ bool CWalletDB::Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys)\n     LogPrintf(\"Salvage(aggressive) found %u records\\n\", salvagedData.size());\n \n     bool fSuccess = allOK;\n-    boost::scoped_ptr<Db> pdbCopy(new Db(&dbenv.dbenv, 0));\n+    boost::scoped_ptr<Db> pdbCopy(new Db(dbenv.dbenv, 0));\n     int ret = pdbCopy->open(NULL,               // Txn pointer\n                             filename.c_str(),   // Filename\n                             \"main\",             // Logical db name"
      }
    ]
  },
  {
    "sha": "8cbe1f4f5870a165be729cabb9b55dcbf0f85e09",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Y2JlMWY0ZjU4NzBhMTY1YmU3MjljYWJiOWI1NWRjYmYwZjg1ZTA5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-09T14:04:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-09T14:04:59Z"
      },
      "message": "tests: change main and wallet tests to BOOST_FIXTURE_TEST_SUITE\n\nAvoid this travis error:\n\n    test_bitcoin: chainparams.cpp:330: const CChainParams& Params():\n    Assertion `pCurrentParams' failed.\n    unknown location(0): fatal error in \"subsidy_limit_test\": signal:\n    SIGABRT (application abort requested)\n    test/allocator_tests.cpp(116): last checkpoint",
      "tree": {
        "sha": "9730f249914a647714ae0af0546a72808180695e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9730f249914a647714ae0af0546a72808180695e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8cbe1f4f5870a165be729cabb9b55dcbf0f85e09",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU/aiMAAoJEHSBCwEjRsmm/TcH/1214ib+/hrc5FSOVl6C777k\n3HvqBJw3JZ2mbw+TbPdFrDkimsVH1bYn+f7Ovm1ZOOG1l4JdX0y+IDyXMsZuHPNq\n0rZAkg9C2DYwqrW3cPkPhECM2OyYi1XxkF5+dNavOtYw1iVfh2fjaIAq3kIj0rPg\nKmHoyO8WZKSkzPFo/ZsWnmpfPo3WWFGHdfisUCh7tUqLdoJGvBgYv/cSvIl9OBjm\nllikdCaaqlyXrMg2DI5mz7BvOt1Vn+MFR6WEV6Xl/gHWcax8Y1zU2aU2GxBVFGe1\neXJaFy07WfsqxvF8dg0VqTwvxo4pMJmo0DOFpQJLnPWYvI09OeI3RU1tgAJNmMU=\n=KR1R\n-----END PGP SIGNATURE-----",
        "payload": "tree 9730f249914a647714ae0af0546a72808180695e\nparent cdae53e456ad35216e33a90f1681aade546cc431\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1425909852 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1425909899 +0100\n\ntests: change main and wallet tests to BOOST_FIXTURE_TEST_SUITE\n\nAvoid this travis error:\n\n    test_bitcoin: chainparams.cpp:330: const CChainParams& Params():\n    Assertion `pCurrentParams' failed.\n    unknown location(0): fatal error in \"subsidy_limit_test\": signal:\n    SIGABRT (application abort requested)\n    test/allocator_tests.cpp(116): last checkpoint\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cbe1f4f5870a165be729cabb9b55dcbf0f85e09",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8cbe1f4f5870a165be729cabb9b55dcbf0f85e09",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cbe1f4f5870a165be729cabb9b55dcbf0f85e09/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cdae53e456ad35216e33a90f1681aade546cc431",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdae53e456ad35216e33a90f1681aade546cc431",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cdae53e456ad35216e33a90f1681aade546cc431"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1927f3deab84c6e63426d96f77a57fcf5709cb04",
        "filename": "src/test/main_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cbe1f4f5870a165be729cabb9b55dcbf0f85e09/src/test/main_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cbe1f4f5870a165be729cabb9b55dcbf0f85e09/src/test/main_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main_tests.cpp?ref=8cbe1f4f5870a165be729cabb9b55dcbf0f85e09",
        "patch": "@@ -5,9 +5,11 @@\n #include \"primitives/transaction.h\"\n #include \"main.h\"\n \n+#include \"test/test_bitcoin.h\"\n+\n #include <boost/test/unit_test.hpp>\n \n-BOOST_AUTO_TEST_SUITE(main_tests)\n+BOOST_FIXTURE_TEST_SUITE(main_tests, TestingSetup)\n \n BOOST_AUTO_TEST_CASE(subsidy_limit_test)\n {"
      },
      {
        "sha": "25c8fab335468f3b1904f912a1987a9ea21a3fbe",
        "filename": "src/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cbe1f4f5870a165be729cabb9b55dcbf0f85e09/src/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cbe1f4f5870a165be729cabb9b55dcbf0f85e09/src/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/wallet_tests.cpp?ref=8cbe1f4f5870a165be729cabb9b55dcbf0f85e09",
        "patch": "@@ -9,6 +9,8 @@\n #include <utility>\n #include <vector>\n \n+#include \"test/test_bitcoin.h\"\n+\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n@@ -23,7 +25,7 @@ using namespace std;\n \n typedef set<pair<const CWalletTx*,unsigned int> > CoinSet;\n \n-BOOST_AUTO_TEST_SUITE(wallet_tests)\n+BOOST_FIXTURE_TEST_SUITE(wallet_tests, TestingSetup)\n \n static CWallet wallet;\n static vector<COutput> vCoins;"
      }
    ]
  },
  {
    "sha": "59bd89f11636e90b2d684e8f411d8d7a88622458",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OWJkODlmMTE2MzZlOTBiMmQ2ODRlOGY0MTFkOGQ3YTg4NjIyNDU4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-09T15:04:43Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-09T15:06:14Z"
      },
      "message": "test: Remove UNITTEST params\n\nUNITTEST parameter are not used by any current tests, and the model\n(modifyable parameters) is inconvenient when unit-testing. As\nthey are stored in a global structure eevery test\nwould have to (re)set up its own parameters.\n\nFor consistency it is also better to test with MAIN parameters.",
      "tree": {
        "sha": "8c01545831dd3ba1701f584adacfbc2a6b992a9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c01545831dd3ba1701f584adacfbc2a6b992a9b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59bd89f11636e90b2d684e8f411d8d7a88622458",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59bd89f11636e90b2d684e8f411d8d7a88622458",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/59bd89f11636e90b2d684e8f411d8d7a88622458",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59bd89f11636e90b2d684e8f411d8d7a88622458/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8cbe1f4f5870a165be729cabb9b55dcbf0f85e09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cbe1f4f5870a165be729cabb9b55dcbf0f85e09",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8cbe1f4f5870a165be729cabb9b55dcbf0f85e09"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 3,
      "deletions": 74
    },
    "files": [
      {
        "sha": "c48ccbc08abf749a0db2c4d8d65b9804afada036",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 45,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59bd89f11636e90b2d684e8f411d8d7a88622458/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59bd89f11636e90b2d684e8f411d8d7a88622458/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=59bd89f11636e90b2d684e8f411d8d7a88622458",
        "patch": "@@ -281,51 +281,8 @@ class CRegTestParams : public CTestNetParams {\n };\n static CRegTestParams regTestParams;\n \n-/**\n- * Unit test\n- */\n-class CUnitTestParams : public CMainParams, public CModifiableParams {\n-public:\n-    CUnitTestParams() {\n-        strNetworkID = \"unittest\";\n-        nDefaultPort = 18445;\n-        vFixedSeeds.clear(); //! Unit test mode doesn't have any fixed seeds.\n-        vSeeds.clear();  //! Unit test mode doesn't have any DNS seeds.\n-\n-        fRequireRPCPassword = false;\n-        fMiningRequiresPeers = false;\n-        fDefaultCheckMemPool = true;\n-        fAllowMinDifficultyBlocks = false;\n-        fMineBlocksOnDemand = true;\n-    }\n-\n-    const Checkpoints::CCheckpointData& Checkpoints() const \n-    {\n-        // UnitTest share the same checkpoints as MAIN\n-        return data;\n-    }\n-\n-    //! Published setters to allow changing values in unit test cases\n-    virtual void setSubsidyHalvingInterval(int anSubsidyHalvingInterval)  { nSubsidyHalvingInterval=anSubsidyHalvingInterval; }\n-    virtual void setEnforceBlockUpgradeMajority(int anEnforceBlockUpgradeMajority)  { nEnforceBlockUpgradeMajority=anEnforceBlockUpgradeMajority; }\n-    virtual void setRejectBlockOutdatedMajority(int anRejectBlockOutdatedMajority)  { nRejectBlockOutdatedMajority=anRejectBlockOutdatedMajority; }\n-    virtual void setToCheckBlockUpgradeMajority(int anToCheckBlockUpgradeMajority)  { nToCheckBlockUpgradeMajority=anToCheckBlockUpgradeMajority; }\n-    virtual void setDefaultCheckMemPool(bool afDefaultCheckMemPool)  { fDefaultCheckMemPool=afDefaultCheckMemPool; }\n-    virtual void setAllowMinDifficultyBlocks(bool afAllowMinDifficultyBlocks) {  fAllowMinDifficultyBlocks=afAllowMinDifficultyBlocks; }\n-    virtual void setSkipProofOfWorkCheck(bool afSkipProofOfWorkCheck) { fSkipProofOfWorkCheck = afSkipProofOfWorkCheck; }\n-};\n-static CUnitTestParams unitTestParams;\n-\n-\n static CChainParams *pCurrentParams = 0;\n \n-CModifiableParams *ModifiableParams()\n-{\n-   assert(pCurrentParams);\n-   assert(pCurrentParams==&unitTestParams);\n-   return (CModifiableParams*)&unitTestParams;\n-}\n-\n const CChainParams &Params() {\n     assert(pCurrentParams);\n     return *pCurrentParams;\n@@ -339,8 +296,6 @@ CChainParams &Params(CBaseChainParams::Network network) {\n             return testNetParams;\n         case CBaseChainParams::REGTEST:\n             return regTestParams;\n-        case CBaseChainParams::UNITTEST:\n-            return unitTestParams;\n         default:\n             assert(false && \"Unimplemented network\");\n             return mainParams;"
      },
      {
        "sha": "48b1383a675c352919f9a1d60dd82476040cb5aa",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59bd89f11636e90b2d684e8f411d8d7a88622458/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59bd89f11636e90b2d684e8f411d8d7a88622458/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=59bd89f11636e90b2d684e8f411d8d7a88622458",
        "patch": "@@ -108,25 +108,6 @@ class CChainParams\n     bool fTestnetToBeDeprecatedFieldRPC;\n };\n \n-/** \n- * Modifiable parameters interface is used by test cases to adapt the parameters in order\n- * to test specific features more easily. Test cases should always restore the previous\n- * values after finalization.\n- */\n-\n-class CModifiableParams {\n-public:\n-    //! Published setters to allow changing values in unit test cases\n-    virtual void setSubsidyHalvingInterval(int anSubsidyHalvingInterval) =0;\n-    virtual void setEnforceBlockUpgradeMajority(int anEnforceBlockUpgradeMajority)=0;\n-    virtual void setRejectBlockOutdatedMajority(int anRejectBlockOutdatedMajority)=0;\n-    virtual void setToCheckBlockUpgradeMajority(int anToCheckBlockUpgradeMajority)=0;\n-    virtual void setDefaultCheckMemPool(bool aDefaultCheckMemPool)=0;\n-    virtual void setAllowMinDifficultyBlocks(bool aAllowMinDifficultyBlocks)=0;\n-    virtual void setSkipProofOfWorkCheck(bool aSkipProofOfWorkCheck)=0;\n-};\n-\n-\n /**\n  * Return the currently selected parameters. This won't change after app startup\n  * outside of the unit tests.\n@@ -136,9 +117,6 @@ const CChainParams &Params();\n /** Return parameters for the given network. */\n CChainParams &Params(CBaseChainParams::Network network);\n \n-/** Get modifiable network parameters (UNITTEST only) */\n-CModifiableParams *ModifiableParams();\n-\n /** Sets the params returned by Params() to those for the given network. */\n void SelectParams(CBaseChainParams::Network network);\n "
      },
      {
        "sha": "7d82d689ec45f9f96bcae66da6f196db4ee8323b",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59bd89f11636e90b2d684e8f411d8d7a88622458/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59bd89f11636e90b2d684e8f411d8d7a88622458/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=59bd89f11636e90b2d684e8f411d8d7a88622458",
        "patch": "@@ -82,9 +82,6 @@ void SelectBaseParams(CBaseChainParams::Network network)\n     case CBaseChainParams::REGTEST:\n         pCurrentBaseParams = &regTestParams;\n         break;\n-    case CBaseChainParams::UNITTEST:\n-        pCurrentBaseParams = &unitTestParams;\n-        break;\n     default:\n         assert(false && \"Unimplemented network\");\n         return;"
      },
      {
        "sha": "421a3a06ff4c6c76ece3554963941daccdb2906f",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59bd89f11636e90b2d684e8f411d8d7a88622458/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59bd89f11636e90b2d684e8f411d8d7a88622458/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=59bd89f11636e90b2d684e8f411d8d7a88622458",
        "patch": "@@ -19,7 +19,6 @@ class CBaseChainParams\n         MAIN,\n         TESTNET,\n         REGTEST,\n-        UNITTEST,\n \n         MAX_NETWORK_TYPES\n     };"
      },
      {
        "sha": "c242dd26e2b2caaf9e172aae788a3a0733df6949",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59bd89f11636e90b2d684e8f411d8d7a88622458/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59bd89f11636e90b2d684e8f411d8d7a88622458/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=59bd89f11636e90b2d684e8f411d8d7a88622458",
        "patch": "@@ -127,6 +127,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n     std::vector<unsigned char> result;\n     CBitcoinSecret secret;\n     CBitcoinAddress addr;\n+    SelectParams(CBaseChainParams::MAIN);\n \n     BOOST_FOREACH(Value& tv, tests)\n     {\n@@ -176,7 +177,6 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n             BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid pubkey as privkey:\" + strTest);\n         }\n     }\n-    SelectParams(CBaseChainParams::UNITTEST);\n }\n \n // Goal: check that generated keys match test vectors\n@@ -244,7 +244,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n     CTxDestination nodest = CNoDestination();\n     BOOST_CHECK(!dummyAddr.Set(nodest));\n \n-    SelectParams(CBaseChainParams::UNITTEST);\n+    SelectParams(CBaseChainParams::MAIN);\n }\n \n // Goal: check that base58 parsing code is robust against a variety of corrupted data"
      },
      {
        "sha": "a1355ad445aaf9e5e4220997ac5711241acd217f",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59bd89f11636e90b2d684e8f411d8d7a88622458/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59bd89f11636e90b2d684e8f411d8d7a88622458/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=59bd89f11636e90b2d684e8f411d8d7a88622458",
        "patch": "@@ -29,7 +29,7 @@ extern void noui_connect();\n TestingSetup::TestingSetup()\n {\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n-        SelectParams(CBaseChainParams::UNITTEST);\n+        SelectParams(CBaseChainParams::MAIN);\n         noui_connect();\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();"
      }
    ]
  },
  {
    "sha": "3aa0130b963087025b64108225bbadea36d8c6df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYWEwMTMwYjk2MzA4NzAyNWI2NDEwODIyNWJiYWRlYTM2ZDhjNmRm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-09T15:09:54Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-09T15:09:54Z"
      },
      "message": "test: remove fSkipProofOfWork\n\nNot used, and REGTEST already allows creating blocks at\nthe lowerst possible difficulty.",
      "tree": {
        "sha": "024f6956d4d5c6df9c9c232a25cfbd6ceb409168",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/024f6956d4d5c6df9c9c232a25cfbd6ceb409168"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3aa0130b963087025b64108225bbadea36d8c6df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3aa0130b963087025b64108225bbadea36d8c6df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3aa0130b963087025b64108225bbadea36d8c6df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3aa0130b963087025b64108225bbadea36d8c6df/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "59bd89f11636e90b2d684e8f411d8d7a88622458",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59bd89f11636e90b2d684e8f411d8d7a88622458",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59bd89f11636e90b2d684e8f411d8d7a88622458"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 1,
      "deletions": 9
    },
    "files": [
      {
        "sha": "2bc8976510a2fe4d0da4686f2871222e3c0849e6",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3aa0130b963087025b64108225bbadea36d8c6df/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3aa0130b963087025b64108225bbadea36d8c6df/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=3aa0130b963087025b64108225bbadea36d8c6df",
        "patch": "@@ -170,7 +170,6 @@ class CMainParams : public CChainParams {\n         fAllowMinDifficultyBlocks = false;\n         fRequireStandard = true;\n         fMineBlocksOnDemand = false;\n-        fSkipProofOfWorkCheck = false;\n         fTestnetToBeDeprecatedFieldRPC = false;\n     }\n "
      },
      {
        "sha": "134dcd65582d5f0845d1d73b920234d309229f60",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3aa0130b963087025b64108225bbadea36d8c6df/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3aa0130b963087025b64108225bbadea36d8c6df/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=3aa0130b963087025b64108225bbadea36d8c6df",
        "patch": "@@ -60,8 +60,6 @@ class CChainParams\n     bool DefaultCheckMemPool() const { return fDefaultCheckMemPool; }\n     /** Allow mining of a min-difficulty block */\n     bool AllowMinDifficultyBlocks() const { return fAllowMinDifficultyBlocks; }\n-    /** Skip proof-of-work check: allow mining of any difficulty block */\n-    bool SkipProofOfWorkCheck() const { return fSkipProofOfWorkCheck; }\n     /** Make standard checks */\n     bool RequireStandard() const { return fRequireStandard; }\n     int64_t TargetTimespan() const { return nTargetTimespan; }\n@@ -104,7 +102,6 @@ class CChainParams\n     bool fAllowMinDifficultyBlocks;\n     bool fRequireStandard;\n     bool fMineBlocksOnDemand;\n-    bool fSkipProofOfWorkCheck;\n     bool fTestnetToBeDeprecatedFieldRPC;\n };\n "
      },
      {
        "sha": "f47155ca904e818181a16a8f868e3b651022bf66",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3aa0130b963087025b64108225bbadea36d8c6df/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3aa0130b963087025b64108225bbadea36d8c6df/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3aa0130b963087025b64108225bbadea36d8c6df",
        "patch": "@@ -2593,8 +2593,7 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n     int nHeight = pindexPrev->nHeight+1;\n \n     // Check proof of work\n-    if ((!Params().SkipProofOfWorkCheck()) &&\n-       (block.nBits != GetNextWorkRequired(pindexPrev, &block)))\n+    if ((block.nBits != GetNextWorkRequired(pindexPrev, &block)))\n         return state.DoS(100, error(\"%s: incorrect proof of work\", __func__),\n                          REJECT_INVALID, \"bad-diffbits\");\n "
      },
      {
        "sha": "eb899ffc942b599029ab6bc4dc92a91bf2d74189",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3aa0130b963087025b64108225bbadea36d8c6df/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3aa0130b963087025b64108225bbadea36d8c6df/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=3aa0130b963087025b64108225bbadea36d8c6df",
        "patch": "@@ -87,9 +87,6 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n     bool fOverflow;\n     arith_uint256 bnTarget;\n \n-    if (Params().SkipProofOfWorkCheck())\n-       return true;\n-\n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n \n     // Check range"
      }
    ]
  },
  {
    "sha": "bb6acff07982dda68b5c2ac81c99dbd7255bb9cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjZhY2ZmMDc5ODJkZGE2OGI1YzJhYzgxYzk5ZGJkNzI1NWJiOWNj",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-03-07T01:26:09Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-03-10T17:59:46Z"
      },
      "message": "fix possible block db breakage during re-index\n\nWhen re-indexing, there are a few cases where garbage data may be skipped in\nthe block files. In these cases, the indices are correctly written to the index\ndb, however the pointer to the next position for writing in the current block\nfile is calculated by adding the sizes of the valid blocks found.\n\nAs a result, when the re-index is finished, the index db is correct for all\nexisting blocks, but the next block will be written to an incorrect offset,\nlikely overwriting existing blocks.\n\nRather than using the sum of all valid blocks to determine the next write\nposition, use the end of the last block written to the file. Don't assume that\nthe current block is the last one in the file, since they may be read\nout-of-order.",
      "tree": {
        "sha": "00eb1a97470a5e8d3728c9d00908d5ff5274d285",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00eb1a97470a5e8d3728c9d00908d5ff5274d285"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb6acff07982dda68b5c2ac81c99dbd7255bb9cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb6acff07982dda68b5c2ac81c99dbd7255bb9cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb6acff07982dda68b5c2ac81c99dbd7255bb9cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb6acff07982dda68b5c2ac81c99dbd7255bb9cc/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c3fbc34aed578398b3f180a621c671ff3837cec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c3fbc34aed578398b3f180a621c671ff3837cec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c3fbc34aed578398b3f180a621c671ff3837cec"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "183dff6d39b5fdfe6c972d2016a0869bc2c151eb",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb6acff07982dda68b5c2ac81c99dbd7255bb9cc/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb6acff07982dda68b5c2ac81c99dbd7255bb9cc/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bb6acff07982dda68b5c2ac81c99dbd7255bb9cc",
        "patch": "@@ -2455,8 +2455,11 @@ bool FindBlockPos(CValidationState &state, CDiskBlockPos &pos, unsigned int nAdd\n     }\n \n     nLastBlockFile = nFile;\n-    vinfoBlockFile[nFile].nSize += nAddSize;\n     vinfoBlockFile[nFile].AddBlock(nHeight, nTime);\n+    if (fKnown)\n+        vinfoBlockFile[nFile].nSize = std::max(pos.nPos + nAddSize, vinfoBlockFile[nFile].nSize);\n+    else\n+        vinfoBlockFile[nFile].nSize += nAddSize;\n \n     if (!fKnown) {\n         unsigned int nOldChunks = (pos.nPos + BLOCKFILE_CHUNK_SIZE - 1) / BLOCKFILE_CHUNK_SIZE;"
      }
    ]
  },
  {
    "sha": "1fdb9fa3f905df956ed61dbf6ae086c963fd1793",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZmRiOWZhM2Y5MDVkZjk1NmVkNjFkYmY2YWUwODZjOTYzZmQxNzkz",
    "commit": {
      "author": {
        "name": "Luca Venturini",
        "email": "luca@yepa.com",
        "date": "2015-02-04T08:11:49Z"
      },
      "committer": {
        "name": "Luca Venturini",
        "email": "luca@yepa.com",
        "date": "2015-03-11T05:07:17Z"
      },
      "message": "Help messages correctly formatted (79 chars)\n\nHelp messages are formatted programmatically with FormatParagraph\nin order not to break existing strings in Transifex.\n\nThe new format works even if the translation of the strings\nmodifies the lenght of the message.\n\nSqashed 6 commits in a single one.\nHelp messages correctly formatted for SVGA text mode (132 chars)\n\nHelp messages are formatted programmatically with FormatParagraph\nin order not to break existing strings in Transifex.\n\nThe new format should work even if the translation of the strings\nmodifies the lenght of the message.\n\nFix - syntax error\n\nCorrect formatting for 79 chars\n\nCorrectly based on C++ functions\n\nRemoved spare spaces from option strings\n\nFix - syntax error",
      "tree": {
        "sha": "e41a28ea27ed9d6a43a0ce375f7c251c0de40e5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e41a28ea27ed9d6a43a0ce375f7c251c0de40e5d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1fdb9fa3f905df956ed61dbf6ae086c963fd1793",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fdb9fa3f905df956ed61dbf6ae086c963fd1793",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1fdb9fa3f905df956ed61dbf6ae086c963fd1793",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fdb9fa3f905df956ed61dbf6ae086c963fd1793/comments",
    "author": {
      "login": "lucayepa",
      "id": 697159,
      "node_id": "MDQ6VXNlcjY5NzE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/697159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lucayepa",
      "html_url": "https://github.com/lucayepa",
      "followers_url": "https://api.github.com/users/lucayepa/followers",
      "following_url": "https://api.github.com/users/lucayepa/following{/other_user}",
      "gists_url": "https://api.github.com/users/lucayepa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lucayepa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lucayepa/subscriptions",
      "organizations_url": "https://api.github.com/users/lucayepa/orgs",
      "repos_url": "https://api.github.com/users/lucayepa/repos",
      "events_url": "https://api.github.com/users/lucayepa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lucayepa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lucayepa",
      "id": 697159,
      "node_id": "MDQ6VXNlcjY5NzE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/697159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lucayepa",
      "html_url": "https://github.com/lucayepa",
      "followers_url": "https://api.github.com/users/lucayepa/followers",
      "following_url": "https://api.github.com/users/lucayepa/following{/other_user}",
      "gists_url": "https://api.github.com/users/lucayepa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lucayepa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lucayepa/subscriptions",
      "organizations_url": "https://api.github.com/users/lucayepa/orgs",
      "repos_url": "https://api.github.com/users/lucayepa/repos",
      "events_url": "https://api.github.com/users/lucayepa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lucayepa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8cbe1f4f5870a165be729cabb9b55dcbf0f85e09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cbe1f4f5870a165be729cabb9b55dcbf0f85e09",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8cbe1f4f5870a165be729cabb9b55dcbf0f85e09"
      }
    ],
    "stats": {
      "total": 354,
      "additions": 193,
      "deletions": 161
    },
    "files": [
      {
        "sha": "2fa8de6fd83996e2543e5670be49730053ed2736",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fdb9fa3f905df956ed61dbf6ae086c963fd1793/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fdb9fa3f905df956ed61dbf6ae086c963fd1793/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=1fdb9fa3f905df956ed61dbf6ae086c963fd1793",
        "patch": "@@ -20,21 +20,21 @@ using namespace json_spirit;\n std::string HelpMessageCli()\n {\n     string strUsage;\n-    strUsage += _(\"Options:\") + \"\\n\";\n-    strUsage += \"  -?                     \" + _(\"This help message\") + \"\\n\";\n-    strUsage += \"  -conf=<file>           \" + strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\") + \"\\n\";\n-    strUsage += \"  -datadir=<dir>         \" + _(\"Specify data directory\") + \"\\n\";\n-    strUsage += \"  -testnet               \" + _(\"Use the test network\") + \"\\n\";\n-    strUsage += \"  -regtest               \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be \"\n-                                                \"solved instantly. This is intended for regression testing tools and app development.\") + \"\\n\";\n-    strUsage += \"  -rpcconnect=<ip>       \" + strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), \"127.0.0.1\") + \"\\n\";\n-    strUsage += \"  -rpcport=<port>        \" + strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), 8332, 18332) + \"\\n\";\n-    strUsage += \"  -rpcwait               \" + _(\"Wait for RPC server to start\") + \"\\n\";\n-    strUsage += \"  -rpcuser=<user>        \" + _(\"Username for JSON-RPC connections\") + \"\\n\";\n-    strUsage += \"  -rpcpassword=<pw>      \" + _(\"Password for JSON-RPC connections\") + \"\\n\";\n-\n-    strUsage += \"\\n\" + _(\"SSL options: (see the Bitcoin Wiki for SSL setup instructions)\") + \"\\n\";\n-    strUsage += \"  -rpcssl                \" + _(\"Use OpenSSL (https) for JSON-RPC connections\") + \"\\n\";\n+    strUsage += HelpMessageGroup(_(\"Options:\"));\n+    strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n+    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\"));\n+    strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n+    strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n+    strUsage += HelpMessageOpt(\"-regtest\", _(\"Enter regression test mode, which uses a special chain in which blocks can be \"\n+                                             \"solved instantly. This is intended for regression testing tools and app development.\"));\n+    strUsage += HelpMessageOpt(\"-rpcconnect=<ip>\", strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), \"127.0.0.1\"));\n+    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), 8332, 18332));\n+    strUsage += HelpMessageOpt(\"-rpcwait\", _(\"Wait for RPC server to start\"));\n+    strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n+    strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n+\n+    strUsage += HelpMessageGroup(_(\"SSL options: (see the Bitcoin Wiki for SSL setup instructions)\"));\n+    strUsage += HelpMessageOpt(\"-rpcssl\", _(\"Use OpenSSL (https) for JSON-RPC connections\"));\n \n     return strUsage;\n }"
      },
      {
        "sha": "78f5c2c4b6bf6fe21846e7c1d6ca906d8e333e08",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 27,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fdb9fa3f905df956ed61dbf6ae086c963fd1793/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fdb9fa3f905df956ed61dbf6ae086c963fd1793/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=1fdb9fa3f905df956ed61dbf6ae086c963fd1793",
        "patch": "@@ -54,38 +54,34 @@ static bool AppInitRawTx(int argc, char* argv[])\n \n         fprintf(stdout, \"%s\", strUsage.c_str());\n \n-        strUsage = _(\"Options:\") + \"\\n\";\n-        strUsage += \"  -?                      \" + _(\"This help message\") + \"\\n\";\n-        strUsage += \"  -create                 \" + _(\"Create new, empty TX.\") + \"\\n\";\n-        strUsage += \"  -json                   \" + _(\"Select JSON output\") + \"\\n\";\n-        strUsage += \"  -txid                   \" + _(\"Output only the hex-encoded transaction id of the resultant transaction.\") + \"\\n\";\n-        strUsage += \"  -regtest                \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \"\\n\";\n-        strUsage += \"  -testnet                \" + _(\"Use the test network\") + \"\\n\";\n-        strUsage += \"\\n\";\n+        strUsage = HelpMessageGroup(_(\"Options:\"));\n+        strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n+        strUsage += HelpMessageOpt(\"-create\", _(\"Create new, empty TX.\"));\n+        strUsage += HelpMessageOpt(\"-json\", _(\"Select JSON output\"));\n+        strUsage += HelpMessageOpt(\"-txid\", _(\"Output only the hex-encoded transaction id of the resultant transaction.\"));\n+        strUsage += HelpMessageOpt(\"-regtest\", _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\"));\n+        strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n \n         fprintf(stdout, \"%s\", strUsage.c_str());\n \n-\n-        strUsage = _(\"Commands:\") + \"\\n\";\n-        strUsage += \"  delin=N                \" + _(\"Delete input N from TX\") + \"\\n\";\n-        strUsage += \"  delout=N               \" + _(\"Delete output N from TX\") + \"\\n\";\n-        strUsage += \"  in=TXID:VOUT           \" + _(\"Add input to TX\") + \"\\n\";\n-        strUsage += \"  locktime=N             \" + _(\"Set TX lock time to N\") + \"\\n\";\n-        strUsage += \"  nversion=N             \" + _(\"Set TX version to N\") + \"\\n\";\n-        strUsage += \"  outaddr=VALUE:ADDRESS  \" + _(\"Add address-based output to TX\") + \"\\n\";\n-        strUsage += \"  outscript=VALUE:SCRIPT \" + _(\"Add raw script output to TX\") + \"\\n\";\n-        strUsage += \"  sign=SIGHASH-FLAGS     \" + _(\"Add zero or more signatures to transaction\") + \"\\n\";\n-        strUsage += \"      This command requires JSON registers:\\n\";\n-        strUsage += \"      prevtxs=JSON object\\n\";\n-        strUsage += \"      privatekeys=JSON object\\n\";\n-        strUsage += \"      See signrawtransaction docs for format of sighash flags, JSON objects.\\n\";\n-        strUsage += \"\\n\";\n+        strUsage = HelpMessageGroup(_(\"Commands:\"));\n+        strUsage += HelpMessageOpt(\"delin=N\", _(\"Delete input N from TX\"));\n+        strUsage += HelpMessageOpt(\"delout=N\", _(\"Delete output N from TX\"));\n+        strUsage += HelpMessageOpt(\"in=TXID:VOUT\", _(\"Add input to TX\"));\n+        strUsage += HelpMessageOpt(\"locktime=N\", _(\"Set TX lock time to N\"));\n+        strUsage += HelpMessageOpt(\"nversion=N\", _(\"Set TX version to N\"));\n+        strUsage += HelpMessageOpt(\"outaddr=VALUE:ADDRESS\", _(\"Add address-based output to TX\"));\n+        strUsage += HelpMessageOpt(\"outscript=VALUE:SCRIPT\", _(\"Add raw script output to TX\"));\n+        strUsage += HelpMessageOpt(\"sign=SIGHASH-FLAGS\", _(\"Add zero or more signatures to transaction\") + \". \" +\n+            _(\"This command requires JSON registers:\") +\n+            _(\"prevtxs=JSON object\") + \", \" +\n+            _(\"privatekeys=JSON object\") + \". \" +\n+            _(\"See signrawtransaction docs for format of sighash flags, JSON objects.\"));\n         fprintf(stdout, \"%s\", strUsage.c_str());\n \n-        strUsage = _(\"Register Commands:\") + \"\\n\";\n-        strUsage += \"  load=NAME:FILENAME     \" + _(\"Load JSON file FILENAME into register NAME\") + \"\\n\";\n-        strUsage += \"  set=NAME:JSON-STRING   \" + _(\"Set register NAME to given JSON-STRING\") + \"\\n\";\n-        strUsage += \"\\n\";\n+        strUsage = HelpMessageGroup(_(\"Register Commands:\"));\n+        strUsage += HelpMessageOpt(\"load=NAME:FILENAME\", _(\"Load JSON file FILENAME into register NAME\"));\n+        strUsage += HelpMessageOpt(\"set=NAME:JSON-STRING\", _(\"Set register NAME to given JSON-STRING\"));\n         fprintf(stdout, \"%s\", strUsage.c_str());\n \n         return false;"
      },
      {
        "sha": "eea02dc242ffb754b409cdd4c348deb9bb61818b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 123,
        "deletions": 119,
        "changes": 242,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fdb9fa3f905df956ed61dbf6ae086c963fd1793/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fdb9fa3f905df956ed61dbf6ae086c963fd1793/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1fdb9fa3f905df956ed61dbf6ae086c963fd1793",
        "patch": "@@ -256,157 +256,161 @@ void OnRPCPreCommand(const CRPCCommand& cmd)\n \n std::string HelpMessage(HelpMessageMode mode)\n {\n+\n     // When adding new options to the categories, please keep and ensure alphabetical ordering.\n-    string strUsage = _(\"Options:\") + \"\\n\";\n-    strUsage += \"  -?                     \" + _(\"This help message\") + \"\\n\";\n-    strUsage += \"  -alertnotify=<cmd>     \" + _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\") + \"\\n\";\n-    strUsage += \"  -blocknotify=<cmd>     \" + _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\") + \"\\n\";\n-    strUsage += \"  -checkblocks=<n>       \" + strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), 288) + \"\\n\";\n-    strUsage += \"  -checklevel=<n>        \" + strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), 3) + \"\\n\";\n-    strUsage += \"  -conf=<file>           \" + strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\") + \"\\n\";\n+    string strUsage = HelpMessageGroup(_(\"Options:\"));\n+    strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n+    strUsage += HelpMessageOpt(\"-alertnotify=<cmd>\", _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\"));\n+    strUsage += HelpMessageOpt(\"-blocknotify=<cmd>\", _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\"));\n+    strUsage += HelpMessageOpt(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), 288));\n+    strUsage += HelpMessageOpt(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), 3));\n+    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\"));\n     if (mode == HMM_BITCOIND)\n     {\n #if !defined(WIN32)\n-        strUsage += \"  -daemon                \" + _(\"Run in the background as a daemon and accept commands\") + \"\\n\";\n+        strUsage += HelpMessageOpt(\"-daemon\", _(\"Run in the background as a daemon and accept commands\"));\n #endif\n     }\n-    strUsage += \"  -datadir=<dir>         \" + _(\"Specify data directory\") + \"\\n\";\n-    strUsage += \"  -dbcache=<n>           \" + strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache) + \"\\n\";\n-    strUsage += \"  -loadblock=<file>      \" + _(\"Imports blocks from external blk000??.dat file\") + \" \" + _(\"on startup\") + \"\\n\";\n-    strUsage += \"  -maxorphantx=<n>       \" + strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS) + \"\\n\";\n-    strUsage += \"  -par=<n>               \" + strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"), -(int)boost::thread::hardware_concurrency(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS) + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n+    strUsage += HelpMessageOpt(\"-dbcache=<n>\", strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache));\n+    strUsage += HelpMessageOpt(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n+    strUsage += HelpMessageOpt(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n+        -(int)boost::thread::hardware_concurrency(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n #ifndef WIN32\n-    strUsage += \"  -pid=<file>            \" + strprintf(_(\"Specify pid file (default: %s)\"), \"bitcoind.pid\") + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-pid=<file>\", strprintf(_(\"Specify pid file (default: %s)\"), \"bitcoind.pid\"));\n #endif\n-    strUsage += \"  -reindex               \" + _(\"Rebuild block chain index from current blk000??.dat files\") + \" \" + _(\"on startup\") + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-reindex\", _(\"Rebuild block chain index from current blk000??.dat files\") + \" \" + _(\"on startup\"));\n #if !defined(WIN32)\n-    strUsage += \"  -sysperms              \" + _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\") + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-sysperms\", _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\"));\n #endif\n-    strUsage += \"  -txindex               \" + strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), 0) + \"\\n\";\n-\n-    strUsage += \"\\n\" + _(\"Connection options:\") + \"\\n\";\n-    strUsage += \"  -addnode=<ip>          \" + _(\"Add a node to connect to and attempt to keep the connection open\") + \"\\n\";\n-    strUsage += \"  -banscore=<n>          \" + strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), 100) + \"\\n\";\n-    strUsage += \"  -bantime=<n>           \" + strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), 86400) + \"\\n\";\n-    strUsage += \"  -bind=<addr>           \" + _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\") + \"\\n\";\n-    strUsage += \"  -connect=<ip>          \" + _(\"Connect only to the specified node(s)\") + \"\\n\";\n-    strUsage += \"  -discover              \" + _(\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\") + \"\\n\";\n-    strUsage += \"  -dns                   \" + _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + _(\"(default: 1)\") + \"\\n\";\n-    strUsage += \"  -dnsseed               \" + _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect)\") + \"\\n\";\n-    strUsage += \"  -externalip=<ip>       \" + _(\"Specify your own public address\") + \"\\n\";\n-    strUsage += \"  -forcednsseed          \" + strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), 0) + \"\\n\";\n-    strUsage += \"  -listen                \" + _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\") + \"\\n\";\n-    strUsage += \"  -maxconnections=<n>    \" + strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), 125) + \"\\n\";\n-    strUsage += \"  -maxreceivebuffer=<n>  \" + strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), 5000) + \"\\n\";\n-    strUsage += \"  -maxsendbuffer=<n>     \" + strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), 1000) + \"\\n\";\n-    strUsage += \"  -onion=<ip:port>       \" + strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\") + \"\\n\";\n-    strUsage += \"  -onlynet=<net>         \" + _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\") + \"\\n\";\n-    strUsage += \"  -permitbaremultisig    \" + strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), 1) + \"\\n\";\n-    strUsage += \"  -port=<port>           \" + strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), 8333, 18333) + \"\\n\";\n-    strUsage += \"  -proxy=<ip:port>       \" + _(\"Connect through SOCKS5 proxy\") + \"\\n\";\n-    strUsage += \"  -seednode=<ip>         \" + _(\"Connect to a node to retrieve peer addresses, and disconnect\") + \"\\n\";\n-    strUsage += \"  -timeout=<n>           \" + strprintf(_(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\"), DEFAULT_CONNECT_TIMEOUT) + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-txindex\", strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), 0));\n+\n+    strUsage += HelpMessageGroup(_(\"Connection options:\"));\n+    strUsage += HelpMessageOpt(\"-addnode=<ip>\", _(\"Add a node to connect to and attempt to keep the connection open\"));\n+    strUsage += HelpMessageOpt(\"-banscore=<n>\", strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), 100));\n+    strUsage += HelpMessageOpt(\"-bantime=<n>\", strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), 86400));\n+    strUsage += HelpMessageOpt(\"-bind=<addr>\", _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\"));\n+    strUsage += HelpMessageOpt(\"-connect=<ip>\", _(\"Connect only to the specified node(s)\"));\n+    strUsage += HelpMessageOpt(\"-discover\", _(\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\"));\n+    strUsage += HelpMessageOpt(\"-dns\", _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + _(\"(default: 1)\"));\n+    strUsage += HelpMessageOpt(\"-dnsseed\", _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect)\"));\n+    strUsage += HelpMessageOpt(\"-externalip=<ip>\", _(\"Specify your own public address\"));\n+    strUsage += HelpMessageOpt(\"-forcednsseed\", strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-listen\", _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\"));\n+    strUsage += HelpMessageOpt(\"-maxconnections=<n>\", strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), 125));\n+    strUsage += HelpMessageOpt(\"-maxreceivebuffer=<n>\", strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), 5000));\n+    strUsage += HelpMessageOpt(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), 1000));\n+    strUsage += HelpMessageOpt(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"));\n+    strUsage += HelpMessageOpt(\"-onlynet=<net>\", _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"));\n+    strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), 8333, 18333));\n+    strUsage += HelpMessageOpt(\"-proxy=<ip:port>\", _(\"Connect through SOCKS5 proxy\"));\n+    strUsage += HelpMessageOpt(\"-seednode=<ip>\", _(\"Connect to a node to retrieve peer addresses, and disconnect\"));\n+    strUsage += HelpMessageOpt(\"-timeout=<n>\", strprintf(_(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\"), DEFAULT_CONNECT_TIMEOUT));\n #ifdef USE_UPNP\n #if USE_UPNP\n-    strUsage += \"  -upnp                  \" + _(\"Use UPnP to map the listening port (default: 1 when listening)\") + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-upnp\", _(\"Use UPnP to map the listening port (default: 1 when listening)\"));\n #else\n-    strUsage += \"  -upnp                  \" + strprintf(_(\"Use UPnP to map the listening port (default: %u)\"), 0) + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-upnp\", strprintf(_(\"Use UPnP to map the listening port (default: %u)\"), 0));\n #endif\n #endif\n-    strUsage += \"  -whitebind=<addr>      \" + _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\") + \"\\n\";\n-    strUsage += \"  -whitelist=<netmask>   \" + _(\"Whitelist peers connecting from the given netmask or IP address. Can be specified multiple times.\") + \"\\n\";\n-    strUsage += \"                         \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\") + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-whitebind=<addr>\", _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\"));\n+    strUsage += HelpMessageOpt(\"-whitelist=<netmask>\", _(\"Whitelist peers connecting from the given netmask or IP address. Can be specified multiple times.\") +\n+        \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"));\n+        \n \n #ifdef ENABLE_WALLET\n-    strUsage += \"\\n\" + _(\"Wallet options:\") + \"\\n\";\n-    strUsage += \"  -disablewallet         \" + _(\"Do not load the wallet and disable wallet RPC calls\") + \"\\n\";\n-    strUsage += \"  -keypool=<n>           \" + strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100) + \"\\n\";\n+    strUsage += HelpMessageGroup(_(\"Wallet options:\"));\n+    strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n+    strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100));\n     if (GetBoolArg(\"-help-debug\", false))\n-        strUsage += \"  -mintxfee=<amt>        \" + strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for transaction creation (default: %s)\"), FormatMoney(CWallet::minTxFee.GetFeePerK())) + \"\\n\";\n-    strUsage += \"  -paytxfee=<amt>        \" + strprintf(_(\"Fee (in BTC/kB) to add to transactions you send (default: %s)\"), FormatMoney(payTxFee.GetFeePerK())) + \"\\n\";\n-    strUsage += \"  -rescan                \" + _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\") + \"\\n\";\n-    strUsage += \"  -salvagewallet         \" + _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \" \" + _(\"on startup\") + \"\\n\";\n-    strUsage += \"  -sendfreetransactions  \" + strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0) + \"\\n\";\n-    strUsage += \"  -spendzeroconfchange   \" + strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), 1) + \"\\n\";\n-    strUsage += \"  -txconfirmtarget=<n>   \" + strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), 1) + \"\\n\";\n-    strUsage += \"  -maxtxfee=<amt>        \" + strprintf(_(\"Maximum total fees to use in a single wallet transaction, setting too low may abort large transactions (default: %s)\"), FormatMoney(maxTxFee)) + \"\\n\";\n-    strUsage += \"  -upgradewallet         \" + _(\"Upgrade wallet to latest format\") + \" \" + _(\"on startup\") + \"\\n\";\n-    strUsage += \"  -wallet=<file>         \" + _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\") + \"\\n\";\n-    strUsage += \"  -walletnotify=<cmd>    \" + _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\") + \"\\n\";\n-    strUsage += \"  -zapwallettxes=<mode>  \" + _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") + \"\\n\";\n-    strUsage += \"                         \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\") + \"\\n\";\n+        strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for transaction creation (default: %s)\"),\n+            FormatMoney(CWallet::minTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in BTC/kB) to add to transactions you send (default: %s)\"), FormatMoney(payTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees to use in a single wallet transaction, setting too low may abort large transactions (default: %s)\"),\n+        FormatMoney(maxTxFee)));\n+    strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\"));\n+    strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n+    strUsage += HelpMessageOpt(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +\n+        \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"));\n+                    \n #endif\n \n-    strUsage += \"\\n\" + _(\"Debugging/Testing options:\") + \"\\n\";\n+    strUsage += HelpMessageGroup(_(\"Debugging/Testing options:\"));\n     if (GetBoolArg(\"-help-debug\", false))\n     {\n-        strUsage += \"  -checkpoints           \" + strprintf(_(\"Only accept block chain matching built-in checkpoints (default: %u)\"), 1) + \"\\n\";\n-        strUsage += \"  -dblogsize=<n>         \" + strprintf(_(\"Flush database activity from memory pool to disk log every <n> megabytes (default: %u)\"), 100) + \"\\n\";\n-        strUsage += \"  -disablesafemode       \" + strprintf(_(\"Disable safemode, override a real safe mode event (default: %u)\"), 0) + \"\\n\";\n-        strUsage += \"  -testsafemode          \" + strprintf(_(\"Force safe mode (default: %u)\"), 0) + \"\\n\";\n-        strUsage += \"  -dropmessagestest=<n>  \" + _(\"Randomly drop 1 of every <n> network messages\") + \"\\n\";\n-        strUsage += \"  -fuzzmessagestest=<n>  \" + _(\"Randomly fuzz 1 of every <n> network messages\") + \"\\n\";\n-        strUsage += \"  -flushwallet           \" + strprintf(_(\"Run a thread to flush wallet periodically (default: %u)\"), 1) + \"\\n\";\n-        strUsage += \"  -stopafterblockimport  \" + strprintf(_(\"Stop running after importing blocks from disk (default: %u)\"), 0) + \"\\n\";\n+        strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(_(\"Only accept block chain matching built-in checkpoints (default: %u)\"), 1));\n+        strUsage += HelpMessageOpt(\"-dblogsize=<n>\", strprintf(_(\"Flush database activity from memory pool to disk log every <n> megabytes (default: %u)\"), 100));\n+        strUsage += HelpMessageOpt(\"-disablesafemode\", strprintf(_(\"Disable safemode, override a real safe mode event (default: %u)\"), 0));\n+        strUsage += HelpMessageOpt(\"-testsafemode\", strprintf(_(\"Force safe mode (default: %u)\"), 0));\n+        strUsage += HelpMessageOpt(\"-dropmessagestest=<n>\", _(\"Randomly drop 1 of every <n> network messages\"));\n+        strUsage += HelpMessageOpt(\"-fuzzmessagestest=<n>\", _(\"Randomly fuzz 1 of every <n> network messages\"));\n+        strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(_(\"Run a thread to flush wallet periodically (default: %u)\"), 1));\n+        strUsage += HelpMessageOpt(\"-stopafterblockimport\", strprintf(_(\"Stop running after importing blocks from disk (default: %u)\"), 0));\n     }\n-    strUsage += \"  -debug=<category>      \" + strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \"\\n\";\n-    strUsage += \"                         \" + _(\"If <category> is not supplied, output all debugging information.\") + \"\\n\";\n-    strUsage += \"                         \" + _(\"<category> can be:\");\n-    strUsage +=                                 \" addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, net\"; // Don't translate these and qt below\n+    string debugCategories = \"addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, net\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n-        strUsage += \", qt\";\n-    strUsage += \".\\n\";\n+        debugCategories += \", qt\";\n+    strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n+        _(\"If <category> is not supplied, output all debugging information.\") + _(\"<category> can be:\") + \" \" + debugCategories + \".\");\n #ifdef ENABLE_WALLET\n-    strUsage += \"  -gen                   \" + strprintf(_(\"Generate coins (default: %u)\"), 0) + \"\\n\";\n-    strUsage += \"  -genproclimit=<n>      \" + strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), 1) + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), 1));\n #endif\n-    strUsage += \"  -help-debug            \" + _(\"Show all debugging options (usage: --help -help-debug)\") + \"\\n\";\n-    strUsage += \"  -logips                \" + strprintf(_(\"Include IP addresses in debug output (default: %u)\"), 0) + \"\\n\";\n-    strUsage += \"  -logtimestamps         \" + strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), 1) + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-help-debug\", _(\"Show all debugging options (usage: --help -help-debug)\"));\n+    strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), 1));\n     if (GetBoolArg(\"-help-debug\", false))\n     {\n-        strUsage += \"  -limitfreerelay=<n>    \" + strprintf(_(\"Continuously rate-limit free transactions to <n>*1000 bytes per minute (default:%u)\"), 15) + \"\\n\";\n-        strUsage += \"  -relaypriority         \" + strprintf(_(\"Require high priority for relaying free or low-fee transactions (default:%u)\"), 1) + \"\\n\";\n-        strUsage += \"  -maxsigcachesize=<n>   \" + strprintf(_(\"Limit size of signature cache to <n> entries (default: %u)\"), 50000) + \"\\n\";\n+        strUsage += HelpMessageOpt(\"-limitfreerelay=<n>\", strprintf(_(\"Continuously rate-limit free transactions to <n>*1000 bytes per minute (default:%u)\"), 15));\n+        strUsage += HelpMessageOpt(\"-relaypriority\", strprintf(_(\"Require high priority for relaying free or low-fee transactions (default:%u)\"), 1));\n+        strUsage += HelpMessageOpt(\"-maxsigcachesize=<n>\", strprintf(_(\"Limit size of signature cache to <n> entries (default: %u)\"), 50000));\n     }\n-    strUsage += \"  -minrelaytxfee=<amt>   \" + strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for relaying (default: %s)\"), FormatMoney(::minRelayTxFee.GetFeePerK())) + \"\\n\";\n-    strUsage += \"  -printtoconsole        \" + _(\"Send trace/debug info to console instead of debug.log file\") + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for relaying (default: %s)\"), FormatMoney(::minRelayTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"));\n     if (GetBoolArg(\"-help-debug\", false))\n     {\n-        strUsage += \"  -printpriority         \" + strprintf(_(\"Log transaction priority and fee per kB when mining blocks (default: %u)\"), 0) + \"\\n\";\n-        strUsage += \"  -privdb                \" + strprintf(_(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\"), 1) + \"\\n\";\n-        strUsage += \"  -regtest               \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \"\\n\";\n-        strUsage += \"                         \" + _(\"This is intended for regression testing tools and app development.\") + \"\\n\";\n-        strUsage += \"                         \" + _(\"In this mode -genproclimit controls how many blocks are generated immediately.\") + \"\\n\";\n+        strUsage += HelpMessageOpt(\"-printpriority\", strprintf(_(\"Log transaction priority and fee per kB when mining blocks (default: %u)\"), 0));\n+        strUsage += HelpMessageOpt(\"-privdb\", strprintf(_(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\"), 1));\n+        strUsage += HelpMessageOpt(\"-regtest\", _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \" \" +\n+            _(\"This is intended for regression testing tools and app development.\") + \" \" +\n+            _(\"In this mode -genproclimit controls how many blocks are generated immediately.\"));\n     }\n-    strUsage += \"  -shrinkdebugfile       \" + _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\") + \"\\n\";\n-    strUsage += \"  -testnet               \" + _(\"Use the test network\") + \"\\n\";\n-\n-    strUsage += \"\\n\" + _(\"Node relay options:\") + \"\\n\";\n-    strUsage += \"  -datacarrier           \" + strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1) + \"\\n\";\n-    strUsage += \"  -datacarriersize       \" + strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY) + \"\\n\";\n-\n-    strUsage += \"\\n\" + _(\"Block creation options:\") + \"\\n\";\n-    strUsage += \"  -blockminsize=<n>      \" + strprintf(_(\"Set minimum block size in bytes (default: %u)\"), 0) + \"\\n\";\n-    strUsage += \"  -blockmaxsize=<n>      \" + strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE) + \"\\n\";\n-    strUsage += \"  -blockprioritysize=<n> \" + strprintf(_(\"Set maximum size of high-priority/low-fee transactions in bytes (default: %d)\"), DEFAULT_BLOCK_PRIORITY_SIZE) + \"\\n\";\n-\n-    strUsage += \"\\n\" + _(\"RPC server options:\") + \"\\n\";\n-    strUsage += \"  -server                \" + _(\"Accept command line and JSON-RPC commands\") + \"\\n\";\n-    strUsage += \"  -rest                  \" + strprintf(_(\"Accept public REST requests (default: %u)\"), 0) + \"\\n\";\n-    strUsage += \"  -rpcbind=<addr>        \" + _(\"Bind to given address to listen for JSON-RPC connections. Use [host]:port notation for IPv6. This option can be specified multiple times (default: bind to all interfaces)\") + \"\\n\";\n-    strUsage += \"  -rpcuser=<user>        \" + _(\"Username for JSON-RPC connections\") + \"\\n\";\n-    strUsage += \"  -rpcpassword=<pw>      \" + _(\"Password for JSON-RPC connections\") + \"\\n\";\n-    strUsage += \"  -rpcport=<port>        \" + strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), 8332, 18332) + \"\\n\";\n-    strUsage += \"  -rpcallowip=<ip>       \" + _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\") + \"\\n\";\n-    strUsage += \"  -rpcthreads=<n>        \" + strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), 4) + \"\\n\";\n-    strUsage += \"  -rpckeepalive          \" + strprintf(_(\"RPC support for HTTP persistent connections (default: %d)\"), 1) + \"\\n\";\n-\n-    strUsage += \"\\n\" + _(\"RPC SSL options: (see the Bitcoin Wiki for SSL setup instructions)\") + \"\\n\";\n-    strUsage += \"  -rpcssl                                  \" + _(\"Use OpenSSL (https) for JSON-RPC connections\") + \"\\n\";\n-    strUsage += \"  -rpcsslcertificatechainfile=<file.cert>  \" + strprintf(_(\"Server certificate file (default: %s)\"), \"server.cert\") + \"\\n\";\n-    strUsage += \"  -rpcsslprivatekeyfile=<file.pem>         \" + strprintf(_(\"Server private key (default: %s)\"), \"server.pem\") + \"\\n\";\n-    strUsage += \"  -rpcsslciphers=<ciphers>                 \" + strprintf(_(\"Acceptable ciphers (default: %s)\"), \"TLSv1.2+HIGH:TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!3DES:@STRENGTH\") + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"));\n+    strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n+\n+    strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n+    strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n+\n+    strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n+    strUsage += HelpMessageOpt(\"-blockminsize=<n>\", strprintf(_(\"Set minimum block size in bytes (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE));\n+    strUsage += HelpMessageOpt(\"-blockprioritysize=<n>\", strprintf(_(\"Set maximum size of high-priority/low-fee transactions in bytes (default: %d)\"), DEFAULT_BLOCK_PRIORITY_SIZE));\n+\n+    strUsage += HelpMessageGroup(_(\"RPC server options:\"));\n+    strUsage += HelpMessageOpt(\"-server\", _(\"Accept command line and JSON-RPC commands\"));\n+    strUsage += HelpMessageOpt(\"-rest\", strprintf(_(\"Accept public REST requests (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-rpcbind=<addr>\", _(\"Bind to given address to listen for JSON-RPC connections. Use [host]:port notation for IPv6. This option can be specified multiple times (default: bind to all interfaces)\"));\n+    strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n+    strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n+    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), 8332, 18332));\n+    strUsage += HelpMessageOpt(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"));\n+    strUsage += HelpMessageOpt(\"-rpcthreads=<n>\", strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), 4));\n+    strUsage += HelpMessageOpt(\"-rpckeepalive\", strprintf(_(\"RPC support for HTTP persistent connections (default: %d)\"), 1));\n+\n+    strUsage += HelpMessageGroup(_(\"RPC SSL options: (see the Bitcoin Wiki for SSL setup instructions)\"));\n+    strUsage += HelpMessageOpt(\"-rpcssl\", _(\"Use OpenSSL (https) for JSON-RPC connections\"));\n+    strUsage += HelpMessageOpt(\"-rpcsslcertificatechainfile=<file.cert>\", strprintf(_(\"Server certificate file (default: %s)\"), \"server.cert\"));\n+    strUsage += HelpMessageOpt(\"-rpcsslprivatekeyfile=<file.pem>\", strprintf(_(\"Server private key (default: %s)\"), \"server.pem\"));\n+    strUsage += HelpMessageOpt(\"-rpcsslciphers=<ciphers>\", strprintf(_(\"Acceptable ciphers (default: %s)\"), \"TLSv1.2+HIGH:TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!3DES:@STRENGTH\"));\n \n     return strUsage;\n }"
      },
      {
        "sha": "792f00b61d3ea79b734f6054d228fbf575a838de",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fdb9fa3f905df956ed61dbf6ae086c963fd1793/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fdb9fa3f905df956ed61dbf6ae086c963fd1793/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=1fdb9fa3f905df956ed61dbf6ae086c963fd1793",
        "patch": "@@ -346,6 +346,21 @@ bool SoftSetBoolArg(const std::string& strArg, bool fValue)\n         return SoftSetArg(strArg, std::string(\"0\"));\n }\n \n+static const int screenWidth = 79;\n+static const int optIndent = 2;\n+static const int msgIndent = 7;\n+\n+std::string HelpMessageGroup(const std::string &message) {\n+    return std::string(message) + std::string(\"\\n\\n\");\n+}\n+\n+std::string HelpMessageOpt(const std::string &option, const std::string &message) {\n+    return std::string(optIndent,' ') + std::string(option) +\n+           std::string(\"\\n\") + std::string(msgIndent,' ') +\n+           FormatParagraph(message, screenWidth - msgIndent, msgIndent) +\n+           std::string(\"\\n\\n\");\n+}\n+\n static std::string FormatException(const std::exception* pex, const char* pszThread)\n {\n #ifdef WIN32"
      },
      {
        "sha": "9b5a4153dd9a86db45667865b5654d5f4768f74c",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fdb9fa3f905df956ed61dbf6ae086c963fd1793/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fdb9fa3f905df956ed61dbf6ae086c963fd1793/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=1fdb9fa3f905df956ed61dbf6ae086c963fd1793",
        "patch": "@@ -162,6 +162,23 @@ bool SoftSetArg(const std::string& strArg, const std::string& strValue);\n  */\n bool SoftSetBoolArg(const std::string& strArg, bool fValue);\n \n+/**\n+ * Format a string to be used as group of options in help messages\n+ *\n+ * @param message Group name (e.g. \"RPC server options:\")\n+ * @return the formatted string\n+ */\n+std::string HelpMessageGroup(const std::string& message);\n+\n+/**\n+ * Format a string to be used as option description in help messages\n+ *\n+ * @param option Option message (e.g. \"-rpcuser=<user>\")\n+ * @param message Option description (e.g. \"Username for JSON-RPC connections\")\n+ * @return the formatted string\n+ */\n+std::string HelpMessageOpt(const std::string& option, const std::string& message);\n+\n void SetThreadPriority(int nPriority);\n void RenameThread(const char* name);\n "
      }
    ]
  },
  {
    "sha": "f75470794bd344ec25e1a540637c675e7f2ad6b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzU0NzA3OTRiZDM0NGVjMjVlMWE1NDA2MzdjNjc1ZTdmMmFkNmIw",
    "commit": {
      "author": {
        "name": "Luca Venturini",
        "email": "luca@yepa.com",
        "date": "2015-03-09T07:29:59Z"
      },
      "committer": {
        "name": "Luca Venturini",
        "email": "luca@yepa.com",
        "date": "2015-03-11T05:07:17Z"
      },
      "message": "Fix - bitcoin-qt usage message\n\n. Closes the bug from commit e179eb3d9bfec7e67908242c71c87b716a41c97c\n(\"bitcoin-qt -help\" did not show any message)\n. Move all the options in init.cpp (there were already some\noptions related to bitcoin-qt)",
      "tree": {
        "sha": "ca9e7f1fb147418585caad636358e9abf731ebbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca9e7f1fb147418585caad636358e9abf731ebbd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f75470794bd344ec25e1a540637c675e7f2ad6b0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f75470794bd344ec25e1a540637c675e7f2ad6b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f75470794bd344ec25e1a540637c675e7f2ad6b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f75470794bd344ec25e1a540637c675e7f2ad6b0/comments",
    "author": {
      "login": "lucayepa",
      "id": 697159,
      "node_id": "MDQ6VXNlcjY5NzE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/697159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lucayepa",
      "html_url": "https://github.com/lucayepa",
      "followers_url": "https://api.github.com/users/lucayepa/followers",
      "following_url": "https://api.github.com/users/lucayepa/following{/other_user}",
      "gists_url": "https://api.github.com/users/lucayepa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lucayepa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lucayepa/subscriptions",
      "organizations_url": "https://api.github.com/users/lucayepa/orgs",
      "repos_url": "https://api.github.com/users/lucayepa/repos",
      "events_url": "https://api.github.com/users/lucayepa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lucayepa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lucayepa",
      "id": 697159,
      "node_id": "MDQ6VXNlcjY5NzE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/697159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lucayepa",
      "html_url": "https://github.com/lucayepa",
      "followers_url": "https://api.github.com/users/lucayepa/followers",
      "following_url": "https://api.github.com/users/lucayepa/following{/other_user}",
      "gists_url": "https://api.github.com/users/lucayepa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lucayepa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lucayepa/subscriptions",
      "organizations_url": "https://api.github.com/users/lucayepa/orgs",
      "repos_url": "https://api.github.com/users/lucayepa/repos",
      "events_url": "https://api.github.com/users/lucayepa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lucayepa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1fdb9fa3f905df956ed61dbf6ae086c963fd1793",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fdb9fa3f905df956ed61dbf6ae086c963fd1793",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1fdb9fa3f905df956ed61dbf6ae086c963fd1793"
      }
    ],
    "stats": {
      "total": 91,
      "additions": 37,
      "deletions": 54
    },
    "files": [
      {
        "sha": "1e3cc1d899eb7694a17771630b68e19807ba8137",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f75470794bd344ec25e1a540637c675e7f2ad6b0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f75470794bd344ec25e1a540637c675e7f2ad6b0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f75470794bd344ec25e1a540637c675e7f2ad6b0",
        "patch": "@@ -412,6 +412,19 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-rpcsslprivatekeyfile=<file.pem>\", strprintf(_(\"Server private key (default: %s)\"), \"server.pem\"));\n     strUsage += HelpMessageOpt(\"-rpcsslciphers=<ciphers>\", strprintf(_(\"Acceptable ciphers (default: %s)\"), \"TLSv1.2+HIGH:TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!3DES:@STRENGTH\"));\n \n+    if (mode == HMM_BITCOIN_QT)\n+    {\n+        strUsage += HelpMessageGroup(_(\"UI Options:\"));\n+        if (GetBoolArg(\"-help-debug\", false)) {\n+            strUsage += HelpMessageOpt(\"-allowselfsignedrootcertificates\", _(\"Allow self signed root certificates (default: 0)\"));\n+        }\n+        strUsage += HelpMessageOpt(\"-choosedatadir\", _(\"Choose data directory on startup (default: 0)\"));\n+        strUsage += HelpMessageOpt(\"-lang=<lang>\", _(\"Set language, for example \\\"de_DE\\\" (default: system locale)\"));\n+        strUsage += HelpMessageOpt(\"-min\", _(\"Start minimized\"));\n+        strUsage += HelpMessageOpt(\"-rootcertificates=<file>\", _(\"Set SSL root certificates for payment request (default: -system-)\"));\n+        strUsage += HelpMessageOpt(\"-splash\", _(\"Show splash screen on startup (default: 1)\"));\n+    }\n+\n     return strUsage;\n }\n "
      },
      {
        "sha": "386cf31d736850acc2bf95eebe3c76ddebeee2f6",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 54,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f75470794bd344ec25e1a540637c675e7f2ad6b0/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f75470794bd344ec25e1a540637c675e7f2ad6b0/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=f75470794bd344ec25e1a540637c675e7f2ad6b0",
        "patch": "@@ -62,77 +62,47 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n         ui->helpMessage->setVisible(false);\n     } else {\n         setWindowTitle(tr(\"Command-line options\"));\n+        QString header = tr(\"Usage:\") + \"\\n\" +\n+            \"  bitcoin-qt [\" + tr(\"command-line options\") + \"]                     \" + \"\\n\";\n         QTextCursor cursor(ui->helpMessage->document());\n         cursor.insertText(version);\n         cursor.insertBlock();\n-        cursor.insertText(tr(\"Usage:\") + '\\n' +\n-            \"  bitcoin-qt [\" + tr(\"command-line options\") + \"]\\n\");\n-\n+        cursor.insertText(header);\n         cursor.insertBlock();\n+\n+        QString coreOptions = QString::fromStdString(HelpMessage(HMM_BITCOIN_QT));\n+        text = version + \"\\n\" + header + \"\\n\" + coreOptions;\n+\n         QTextTableFormat tf;\n         tf.setBorderStyle(QTextFrameFormat::BorderStyle_None);\n         tf.setCellPadding(2);\n         QVector<QTextLength> widths;\n         widths << QTextLength(QTextLength::PercentageLength, 35);\n         widths << QTextLength(QTextLength::PercentageLength, 65);\n         tf.setColumnWidthConstraints(widths);\n-        QTextTable *table = cursor.insertTable(2, 2, tf);\n \n-        QString coreOptions = QString::fromStdString(HelpMessage(HMM_BITCOIN_QT));\n-        bool first = true;\n         QTextCharFormat bold;\n         bold.setFontWeight(QFont::Bold);\n-        // note that coreOptions is not translated.\n-        foreach (const QString &line, coreOptions.split('\\n')) {\n-            if (!first) {\n-                table->appendRows(1);\n+\n+        foreach (const QString &line, coreOptions.split(\"\\n\")) {\n+            if (line.startsWith(\"  -\"))\n+            {\n+                cursor.currentTable()->appendRows(1);\n+                cursor.movePosition(QTextCursor::PreviousCell);\n                 cursor.movePosition(QTextCursor::NextRow);\n+                cursor.insertText(line.trimmed());\n+                cursor.movePosition(QTextCursor::NextCell);\n+            } else if (line.startsWith(\"   \")) {\n+                cursor.insertText(line.trimmed()+' ');\n+            } else if (line.size() > 0) {\n+                //Title of a group\n+                if (cursor.currentTable())\n+                    cursor.currentTable()->appendRows(1);\n+                cursor.movePosition(QTextCursor::Down);\n+                cursor.insertText(line.trimmed(), bold);\n+                cursor.insertTable(1, 2, tf);\n             }\n-            first = false;\n-\n-            if (line.startsWith(\"  \")) {\n-                int index = line.indexOf(' ', 3);\n-                if (index > 0) {\n-                    cursor.insertText(line.left(index).trimmed());\n-                    cursor.movePosition(QTextCursor::NextCell);\n-                    cursor.insertText(line.mid(index).trimmed());\n-                    continue;\n-                }\n-            }\n-            cursor.movePosition(QTextCursor::NextCell, QTextCursor::KeepAnchor);\n-            table->mergeCells(cursor);\n-            cursor.insertText(line.trimmed(), bold);\n-        }\n-\n-        table->appendRows(6);\n-        cursor.movePosition(QTextCursor::NextRow);\n-        cursor.insertText(tr(\"UI options\") + \":\", bold);\n-        cursor.movePosition(QTextCursor::NextRow);\n-        if (GetBoolArg(\"-help-debug\", false)) {\n-            cursor.insertText(\"-allowselfsignedrootcertificates\");\n-            cursor.movePosition(QTextCursor::NextCell);\n-            cursor.insertText(tr(\"Allow self signed root certificates (default: 0)\"));\n-            cursor.movePosition(QTextCursor::NextCell);\n         }\n-        cursor.insertText(\"-choosedatadir\");\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(tr(\"Choose data directory on startup (default: 0)\"));\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(\"-lang=<lang>\");\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(tr(\"Set language, for example \\\"de_DE\\\" (default: system locale)\"));\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(\"-min\");\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(tr(\"Start minimized\"));\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(\"-rootcertificates=<file>\");\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(tr(\"Set SSL root certificates for payment request (default: -system-)\"));\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(\"-splash\");\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(tr(\"Show splash screen on startup (default: 1)\"));\n \n         ui->helpMessage->moveCursor(QTextCursor::Start);\n         ui->scrollArea->setVisible(false);"
      }
    ]
  },
  {
    "sha": "45b7dc2c25a5e977cc45c483d6dd6094ceb2e7a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWI3ZGMyYzI1YTVlOTc3Y2M0NWM0ODNkNmRkNjA5NGNlYjJlN2E4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-11T07:33:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-11T07:33:52Z"
      },
      "message": "Merge pull request #5864\n\nbb6acff fix possible block db breakage during re-index (Cory Fields)",
      "tree": {
        "sha": "6f39c4416f5568c3870db057018b244b6479a757",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f39c4416f5568c3870db057018b244b6479a757"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45b7dc2c25a5e977cc45c483d6dd6094ceb2e7a8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU/+/gAAoJEHSBCwEjRsmmTD0IAMiWouAsN/mlnms4AFTqo4rI\nLtm7ykU2uSo3ZtNGzYFLk/Df+yzdqtKq94m/2jvtQEbABEBwnEkcnNuAn6a5HcUx\nA8mfQCWucgRzpX1hTR9WzZvDi+FW4hKf+T3cjFRmsWkJ1AIsB8bFXuQoiVLTdejs\ns3nwk4ZDpQTjKVWu2T2q+F21dYnXohaJlqDUpqWwfO/pResKE4T1R9tqTutUqw6W\nz57riqn4obYdk57z+P2miPET6UmKyKB+g3P9+uLB8I1v3fWMUDdUvcmdYBp4xKCZ\nWBoMNxOsvYo3SHYdLHxBP9ZyuS2mc8ET3vowE8O0avoPMviUXrkpT5iLT8svi+o=\n=DIrt\n-----END PGP SIGNATURE-----",
        "payload": "tree 6f39c4416f5568c3870db057018b244b6479a757\nparent 8cbe1f4f5870a165be729cabb9b55dcbf0f85e09\nparent bb6acff07982dda68b5c2ac81c99dbd7255bb9cc\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1426059225 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1426059232 +0100\n\nMerge pull request #5864\n\nbb6acff fix possible block db breakage during re-index (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45b7dc2c25a5e977cc45c483d6dd6094ceb2e7a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45b7dc2c25a5e977cc45c483d6dd6094ceb2e7a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45b7dc2c25a5e977cc45c483d6dd6094ceb2e7a8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8cbe1f4f5870a165be729cabb9b55dcbf0f85e09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cbe1f4f5870a165be729cabb9b55dcbf0f85e09",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8cbe1f4f5870a165be729cabb9b55dcbf0f85e09"
      },
      {
        "sha": "bb6acff07982dda68b5c2ac81c99dbd7255bb9cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb6acff07982dda68b5c2ac81c99dbd7255bb9cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb6acff07982dda68b5c2ac81c99dbd7255bb9cc"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e16887fa4af7c7ae35573e048fb659e4749c7358",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45b7dc2c25a5e977cc45c483d6dd6094ceb2e7a8/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45b7dc2c25a5e977cc45c483d6dd6094ceb2e7a8/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=45b7dc2c25a5e977cc45c483d6dd6094ceb2e7a8",
        "patch": "@@ -2454,8 +2454,11 @@ bool FindBlockPos(CValidationState &state, CDiskBlockPos &pos, unsigned int nAdd\n     }\n \n     nLastBlockFile = nFile;\n-    vinfoBlockFile[nFile].nSize += nAddSize;\n     vinfoBlockFile[nFile].AddBlock(nHeight, nTime);\n+    if (fKnown)\n+        vinfoBlockFile[nFile].nSize = std::max(pos.nPos + nAddSize, vinfoBlockFile[nFile].nSize);\n+    else\n+        vinfoBlockFile[nFile].nSize += nAddSize;\n \n     if (!fKnown) {\n         unsigned int nOldChunks = (pos.nPos + BLOCKFILE_CHUNK_SIZE - 1) / BLOCKFILE_CHUNK_SIZE;"
      }
    ]
  },
  {
    "sha": "d734d87b28ccbf2a4a4eb19a28285b5dea782105",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzM0ZDg3YjI4Y2NiZjJhNGE0ZWIxOWEyODI4NWI1ZGVhNzgyMTA1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-11T09:12:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-11T09:20:59Z"
      },
      "message": "Merge pull request #5749\n\nf754707 Fix - bitcoin-qt usage message (Luca Venturini)\n1fdb9fa Help messages correctly formatted (79 chars) (Luca Venturini)",
      "tree": {
        "sha": "854c7b98bfee26268436eedf10a054a2e93becea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/854c7b98bfee26268436eedf10a054a2e93becea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d734d87b28ccbf2a4a4eb19a28285b5dea782105",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVAAj7AAoJEHSBCwEjRsmmo7QH/0t2hHtKb02+ZYZPe+Q8NsYB\nIet/yuPz1zkdXaEjMYa5nxdwmGrfvYjCKqHoCYRRDTOeCxTrigclqYcQqjHrin2j\nb8sbVnYpwU7VHIieuH0GgwdepY7bPKD28H6RPHd78dD4SkDK8fjuOU4criGA7BeP\nGuail9JqcMR7SJTVZoS9o794blyfPnZ5FbtLVAMUEYzqf/T/rX6/ZvNQgWVS+aNX\nfK0Z7Xy712Uuf/eOnb/JL/dD3Z6trvLnaVh+dsCvOr5K879w5Yh0iUdKeXwI4hC0\nuFT9HIGLf8nT2gQKYWQcqYmf3tWP8maegk68WRs9jI7cOZhTgHvRjxtYirVAdoA=\n=rqc2\n-----END PGP SIGNATURE-----",
        "payload": "tree 854c7b98bfee26268436eedf10a054a2e93becea\nparent 45b7dc2c25a5e977cc45c483d6dd6094ceb2e7a8\nparent f75470794bd344ec25e1a540637c675e7f2ad6b0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1426065140 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1426065659 +0100\n\nMerge pull request #5749\n\nf754707 Fix - bitcoin-qt usage message (Luca Venturini)\n1fdb9fa Help messages correctly formatted (79 chars) (Luca Venturini)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d734d87b28ccbf2a4a4eb19a28285b5dea782105",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d734d87b28ccbf2a4a4eb19a28285b5dea782105",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d734d87b28ccbf2a4a4eb19a28285b5dea782105/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45b7dc2c25a5e977cc45c483d6dd6094ceb2e7a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45b7dc2c25a5e977cc45c483d6dd6094ceb2e7a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45b7dc2c25a5e977cc45c483d6dd6094ceb2e7a8"
      },
      {
        "sha": "f75470794bd344ec25e1a540637c675e7f2ad6b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f75470794bd344ec25e1a540637c675e7f2ad6b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f75470794bd344ec25e1a540637c675e7f2ad6b0"
      }
    ],
    "stats": {
      "total": 445,
      "additions": 230,
      "deletions": 215
    },
    "files": [
      {
        "sha": "2fa8de6fd83996e2543e5670be49730053ed2736",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d734d87b28ccbf2a4a4eb19a28285b5dea782105/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d734d87b28ccbf2a4a4eb19a28285b5dea782105/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=d734d87b28ccbf2a4a4eb19a28285b5dea782105",
        "patch": "@@ -20,21 +20,21 @@ using namespace json_spirit;\n std::string HelpMessageCli()\n {\n     string strUsage;\n-    strUsage += _(\"Options:\") + \"\\n\";\n-    strUsage += \"  -?                     \" + _(\"This help message\") + \"\\n\";\n-    strUsage += \"  -conf=<file>           \" + strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\") + \"\\n\";\n-    strUsage += \"  -datadir=<dir>         \" + _(\"Specify data directory\") + \"\\n\";\n-    strUsage += \"  -testnet               \" + _(\"Use the test network\") + \"\\n\";\n-    strUsage += \"  -regtest               \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be \"\n-                                                \"solved instantly. This is intended for regression testing tools and app development.\") + \"\\n\";\n-    strUsage += \"  -rpcconnect=<ip>       \" + strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), \"127.0.0.1\") + \"\\n\";\n-    strUsage += \"  -rpcport=<port>        \" + strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), 8332, 18332) + \"\\n\";\n-    strUsage += \"  -rpcwait               \" + _(\"Wait for RPC server to start\") + \"\\n\";\n-    strUsage += \"  -rpcuser=<user>        \" + _(\"Username for JSON-RPC connections\") + \"\\n\";\n-    strUsage += \"  -rpcpassword=<pw>      \" + _(\"Password for JSON-RPC connections\") + \"\\n\";\n-\n-    strUsage += \"\\n\" + _(\"SSL options: (see the Bitcoin Wiki for SSL setup instructions)\") + \"\\n\";\n-    strUsage += \"  -rpcssl                \" + _(\"Use OpenSSL (https) for JSON-RPC connections\") + \"\\n\";\n+    strUsage += HelpMessageGroup(_(\"Options:\"));\n+    strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n+    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\"));\n+    strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n+    strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n+    strUsage += HelpMessageOpt(\"-regtest\", _(\"Enter regression test mode, which uses a special chain in which blocks can be \"\n+                                             \"solved instantly. This is intended for regression testing tools and app development.\"));\n+    strUsage += HelpMessageOpt(\"-rpcconnect=<ip>\", strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), \"127.0.0.1\"));\n+    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), 8332, 18332));\n+    strUsage += HelpMessageOpt(\"-rpcwait\", _(\"Wait for RPC server to start\"));\n+    strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n+    strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n+\n+    strUsage += HelpMessageGroup(_(\"SSL options: (see the Bitcoin Wiki for SSL setup instructions)\"));\n+    strUsage += HelpMessageOpt(\"-rpcssl\", _(\"Use OpenSSL (https) for JSON-RPC connections\"));\n \n     return strUsage;\n }"
      },
      {
        "sha": "78f5c2c4b6bf6fe21846e7c1d6ca906d8e333e08",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 27,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d734d87b28ccbf2a4a4eb19a28285b5dea782105/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d734d87b28ccbf2a4a4eb19a28285b5dea782105/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=d734d87b28ccbf2a4a4eb19a28285b5dea782105",
        "patch": "@@ -54,38 +54,34 @@ static bool AppInitRawTx(int argc, char* argv[])\n \n         fprintf(stdout, \"%s\", strUsage.c_str());\n \n-        strUsage = _(\"Options:\") + \"\\n\";\n-        strUsage += \"  -?                      \" + _(\"This help message\") + \"\\n\";\n-        strUsage += \"  -create                 \" + _(\"Create new, empty TX.\") + \"\\n\";\n-        strUsage += \"  -json                   \" + _(\"Select JSON output\") + \"\\n\";\n-        strUsage += \"  -txid                   \" + _(\"Output only the hex-encoded transaction id of the resultant transaction.\") + \"\\n\";\n-        strUsage += \"  -regtest                \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \"\\n\";\n-        strUsage += \"  -testnet                \" + _(\"Use the test network\") + \"\\n\";\n-        strUsage += \"\\n\";\n+        strUsage = HelpMessageGroup(_(\"Options:\"));\n+        strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n+        strUsage += HelpMessageOpt(\"-create\", _(\"Create new, empty TX.\"));\n+        strUsage += HelpMessageOpt(\"-json\", _(\"Select JSON output\"));\n+        strUsage += HelpMessageOpt(\"-txid\", _(\"Output only the hex-encoded transaction id of the resultant transaction.\"));\n+        strUsage += HelpMessageOpt(\"-regtest\", _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\"));\n+        strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n \n         fprintf(stdout, \"%s\", strUsage.c_str());\n \n-\n-        strUsage = _(\"Commands:\") + \"\\n\";\n-        strUsage += \"  delin=N                \" + _(\"Delete input N from TX\") + \"\\n\";\n-        strUsage += \"  delout=N               \" + _(\"Delete output N from TX\") + \"\\n\";\n-        strUsage += \"  in=TXID:VOUT           \" + _(\"Add input to TX\") + \"\\n\";\n-        strUsage += \"  locktime=N             \" + _(\"Set TX lock time to N\") + \"\\n\";\n-        strUsage += \"  nversion=N             \" + _(\"Set TX version to N\") + \"\\n\";\n-        strUsage += \"  outaddr=VALUE:ADDRESS  \" + _(\"Add address-based output to TX\") + \"\\n\";\n-        strUsage += \"  outscript=VALUE:SCRIPT \" + _(\"Add raw script output to TX\") + \"\\n\";\n-        strUsage += \"  sign=SIGHASH-FLAGS     \" + _(\"Add zero or more signatures to transaction\") + \"\\n\";\n-        strUsage += \"      This command requires JSON registers:\\n\";\n-        strUsage += \"      prevtxs=JSON object\\n\";\n-        strUsage += \"      privatekeys=JSON object\\n\";\n-        strUsage += \"      See signrawtransaction docs for format of sighash flags, JSON objects.\\n\";\n-        strUsage += \"\\n\";\n+        strUsage = HelpMessageGroup(_(\"Commands:\"));\n+        strUsage += HelpMessageOpt(\"delin=N\", _(\"Delete input N from TX\"));\n+        strUsage += HelpMessageOpt(\"delout=N\", _(\"Delete output N from TX\"));\n+        strUsage += HelpMessageOpt(\"in=TXID:VOUT\", _(\"Add input to TX\"));\n+        strUsage += HelpMessageOpt(\"locktime=N\", _(\"Set TX lock time to N\"));\n+        strUsage += HelpMessageOpt(\"nversion=N\", _(\"Set TX version to N\"));\n+        strUsage += HelpMessageOpt(\"outaddr=VALUE:ADDRESS\", _(\"Add address-based output to TX\"));\n+        strUsage += HelpMessageOpt(\"outscript=VALUE:SCRIPT\", _(\"Add raw script output to TX\"));\n+        strUsage += HelpMessageOpt(\"sign=SIGHASH-FLAGS\", _(\"Add zero or more signatures to transaction\") + \". \" +\n+            _(\"This command requires JSON registers:\") +\n+            _(\"prevtxs=JSON object\") + \", \" +\n+            _(\"privatekeys=JSON object\") + \". \" +\n+            _(\"See signrawtransaction docs for format of sighash flags, JSON objects.\"));\n         fprintf(stdout, \"%s\", strUsage.c_str());\n \n-        strUsage = _(\"Register Commands:\") + \"\\n\";\n-        strUsage += \"  load=NAME:FILENAME     \" + _(\"Load JSON file FILENAME into register NAME\") + \"\\n\";\n-        strUsage += \"  set=NAME:JSON-STRING   \" + _(\"Set register NAME to given JSON-STRING\") + \"\\n\";\n-        strUsage += \"\\n\";\n+        strUsage = HelpMessageGroup(_(\"Register Commands:\"));\n+        strUsage += HelpMessageOpt(\"load=NAME:FILENAME\", _(\"Load JSON file FILENAME into register NAME\"));\n+        strUsage += HelpMessageOpt(\"set=NAME:JSON-STRING\", _(\"Set register NAME to given JSON-STRING\"));\n         fprintf(stdout, \"%s\", strUsage.c_str());\n \n         return false;"
      },
      {
        "sha": "1e3cc1d899eb7694a17771630b68e19807ba8137",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 136,
        "deletions": 119,
        "changes": 255,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d734d87b28ccbf2a4a4eb19a28285b5dea782105/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d734d87b28ccbf2a4a4eb19a28285b5dea782105/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d734d87b28ccbf2a4a4eb19a28285b5dea782105",
        "patch": "@@ -256,157 +256,174 @@ void OnRPCPreCommand(const CRPCCommand& cmd)\n \n std::string HelpMessage(HelpMessageMode mode)\n {\n+\n     // When adding new options to the categories, please keep and ensure alphabetical ordering.\n-    string strUsage = _(\"Options:\") + \"\\n\";\n-    strUsage += \"  -?                     \" + _(\"This help message\") + \"\\n\";\n-    strUsage += \"  -alertnotify=<cmd>     \" + _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\") + \"\\n\";\n-    strUsage += \"  -blocknotify=<cmd>     \" + _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\") + \"\\n\";\n-    strUsage += \"  -checkblocks=<n>       \" + strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), 288) + \"\\n\";\n-    strUsage += \"  -checklevel=<n>        \" + strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), 3) + \"\\n\";\n-    strUsage += \"  -conf=<file>           \" + strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\") + \"\\n\";\n+    string strUsage = HelpMessageGroup(_(\"Options:\"));\n+    strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n+    strUsage += HelpMessageOpt(\"-alertnotify=<cmd>\", _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\"));\n+    strUsage += HelpMessageOpt(\"-blocknotify=<cmd>\", _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\"));\n+    strUsage += HelpMessageOpt(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), 288));\n+    strUsage += HelpMessageOpt(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), 3));\n+    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\"));\n     if (mode == HMM_BITCOIND)\n     {\n #if !defined(WIN32)\n-        strUsage += \"  -daemon                \" + _(\"Run in the background as a daemon and accept commands\") + \"\\n\";\n+        strUsage += HelpMessageOpt(\"-daemon\", _(\"Run in the background as a daemon and accept commands\"));\n #endif\n     }\n-    strUsage += \"  -datadir=<dir>         \" + _(\"Specify data directory\") + \"\\n\";\n-    strUsage += \"  -dbcache=<n>           \" + strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache) + \"\\n\";\n-    strUsage += \"  -loadblock=<file>      \" + _(\"Imports blocks from external blk000??.dat file\") + \" \" + _(\"on startup\") + \"\\n\";\n-    strUsage += \"  -maxorphantx=<n>       \" + strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS) + \"\\n\";\n-    strUsage += \"  -par=<n>               \" + strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"), -(int)boost::thread::hardware_concurrency(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS) + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n+    strUsage += HelpMessageOpt(\"-dbcache=<n>\", strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache));\n+    strUsage += HelpMessageOpt(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n+    strUsage += HelpMessageOpt(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n+        -(int)boost::thread::hardware_concurrency(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n #ifndef WIN32\n-    strUsage += \"  -pid=<file>            \" + strprintf(_(\"Specify pid file (default: %s)\"), \"bitcoind.pid\") + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-pid=<file>\", strprintf(_(\"Specify pid file (default: %s)\"), \"bitcoind.pid\"));\n #endif\n-    strUsage += \"  -reindex               \" + _(\"Rebuild block chain index from current blk000??.dat files\") + \" \" + _(\"on startup\") + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-reindex\", _(\"Rebuild block chain index from current blk000??.dat files\") + \" \" + _(\"on startup\"));\n #if !defined(WIN32)\n-    strUsage += \"  -sysperms              \" + _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\") + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-sysperms\", _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\"));\n #endif\n-    strUsage += \"  -txindex               \" + strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), 0) + \"\\n\";\n-\n-    strUsage += \"\\n\" + _(\"Connection options:\") + \"\\n\";\n-    strUsage += \"  -addnode=<ip>          \" + _(\"Add a node to connect to and attempt to keep the connection open\") + \"\\n\";\n-    strUsage += \"  -banscore=<n>          \" + strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), 100) + \"\\n\";\n-    strUsage += \"  -bantime=<n>           \" + strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), 86400) + \"\\n\";\n-    strUsage += \"  -bind=<addr>           \" + _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\") + \"\\n\";\n-    strUsage += \"  -connect=<ip>          \" + _(\"Connect only to the specified node(s)\") + \"\\n\";\n-    strUsage += \"  -discover              \" + _(\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\") + \"\\n\";\n-    strUsage += \"  -dns                   \" + _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + _(\"(default: 1)\") + \"\\n\";\n-    strUsage += \"  -dnsseed               \" + _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect)\") + \"\\n\";\n-    strUsage += \"  -externalip=<ip>       \" + _(\"Specify your own public address\") + \"\\n\";\n-    strUsage += \"  -forcednsseed          \" + strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), 0) + \"\\n\";\n-    strUsage += \"  -listen                \" + _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\") + \"\\n\";\n-    strUsage += \"  -maxconnections=<n>    \" + strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), 125) + \"\\n\";\n-    strUsage += \"  -maxreceivebuffer=<n>  \" + strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), 5000) + \"\\n\";\n-    strUsage += \"  -maxsendbuffer=<n>     \" + strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), 1000) + \"\\n\";\n-    strUsage += \"  -onion=<ip:port>       \" + strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\") + \"\\n\";\n-    strUsage += \"  -onlynet=<net>         \" + _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\") + \"\\n\";\n-    strUsage += \"  -permitbaremultisig    \" + strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), 1) + \"\\n\";\n-    strUsage += \"  -port=<port>           \" + strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), 8333, 18333) + \"\\n\";\n-    strUsage += \"  -proxy=<ip:port>       \" + _(\"Connect through SOCKS5 proxy\") + \"\\n\";\n-    strUsage += \"  -seednode=<ip>         \" + _(\"Connect to a node to retrieve peer addresses, and disconnect\") + \"\\n\";\n-    strUsage += \"  -timeout=<n>           \" + strprintf(_(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\"), DEFAULT_CONNECT_TIMEOUT) + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-txindex\", strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), 0));\n+\n+    strUsage += HelpMessageGroup(_(\"Connection options:\"));\n+    strUsage += HelpMessageOpt(\"-addnode=<ip>\", _(\"Add a node to connect to and attempt to keep the connection open\"));\n+    strUsage += HelpMessageOpt(\"-banscore=<n>\", strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), 100));\n+    strUsage += HelpMessageOpt(\"-bantime=<n>\", strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), 86400));\n+    strUsage += HelpMessageOpt(\"-bind=<addr>\", _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\"));\n+    strUsage += HelpMessageOpt(\"-connect=<ip>\", _(\"Connect only to the specified node(s)\"));\n+    strUsage += HelpMessageOpt(\"-discover\", _(\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\"));\n+    strUsage += HelpMessageOpt(\"-dns\", _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + _(\"(default: 1)\"));\n+    strUsage += HelpMessageOpt(\"-dnsseed\", _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect)\"));\n+    strUsage += HelpMessageOpt(\"-externalip=<ip>\", _(\"Specify your own public address\"));\n+    strUsage += HelpMessageOpt(\"-forcednsseed\", strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-listen\", _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\"));\n+    strUsage += HelpMessageOpt(\"-maxconnections=<n>\", strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), 125));\n+    strUsage += HelpMessageOpt(\"-maxreceivebuffer=<n>\", strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), 5000));\n+    strUsage += HelpMessageOpt(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), 1000));\n+    strUsage += HelpMessageOpt(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"));\n+    strUsage += HelpMessageOpt(\"-onlynet=<net>\", _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"));\n+    strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), 8333, 18333));\n+    strUsage += HelpMessageOpt(\"-proxy=<ip:port>\", _(\"Connect through SOCKS5 proxy\"));\n+    strUsage += HelpMessageOpt(\"-seednode=<ip>\", _(\"Connect to a node to retrieve peer addresses, and disconnect\"));\n+    strUsage += HelpMessageOpt(\"-timeout=<n>\", strprintf(_(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\"), DEFAULT_CONNECT_TIMEOUT));\n #ifdef USE_UPNP\n #if USE_UPNP\n-    strUsage += \"  -upnp                  \" + _(\"Use UPnP to map the listening port (default: 1 when listening)\") + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-upnp\", _(\"Use UPnP to map the listening port (default: 1 when listening)\"));\n #else\n-    strUsage += \"  -upnp                  \" + strprintf(_(\"Use UPnP to map the listening port (default: %u)\"), 0) + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-upnp\", strprintf(_(\"Use UPnP to map the listening port (default: %u)\"), 0));\n #endif\n #endif\n-    strUsage += \"  -whitebind=<addr>      \" + _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\") + \"\\n\";\n-    strUsage += \"  -whitelist=<netmask>   \" + _(\"Whitelist peers connecting from the given netmask or IP address. Can be specified multiple times.\") + \"\\n\";\n-    strUsage += \"                         \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\") + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-whitebind=<addr>\", _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\"));\n+    strUsage += HelpMessageOpt(\"-whitelist=<netmask>\", _(\"Whitelist peers connecting from the given netmask or IP address. Can be specified multiple times.\") +\n+        \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"));\n+        \n \n #ifdef ENABLE_WALLET\n-    strUsage += \"\\n\" + _(\"Wallet options:\") + \"\\n\";\n-    strUsage += \"  -disablewallet         \" + _(\"Do not load the wallet and disable wallet RPC calls\") + \"\\n\";\n-    strUsage += \"  -keypool=<n>           \" + strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100) + \"\\n\";\n+    strUsage += HelpMessageGroup(_(\"Wallet options:\"));\n+    strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n+    strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100));\n     if (GetBoolArg(\"-help-debug\", false))\n-        strUsage += \"  -mintxfee=<amt>        \" + strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for transaction creation (default: %s)\"), FormatMoney(CWallet::minTxFee.GetFeePerK())) + \"\\n\";\n-    strUsage += \"  -paytxfee=<amt>        \" + strprintf(_(\"Fee (in BTC/kB) to add to transactions you send (default: %s)\"), FormatMoney(payTxFee.GetFeePerK())) + \"\\n\";\n-    strUsage += \"  -rescan                \" + _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\") + \"\\n\";\n-    strUsage += \"  -salvagewallet         \" + _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \" \" + _(\"on startup\") + \"\\n\";\n-    strUsage += \"  -sendfreetransactions  \" + strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0) + \"\\n\";\n-    strUsage += \"  -spendzeroconfchange   \" + strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), 1) + \"\\n\";\n-    strUsage += \"  -txconfirmtarget=<n>   \" + strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), 1) + \"\\n\";\n-    strUsage += \"  -maxtxfee=<amt>        \" + strprintf(_(\"Maximum total fees to use in a single wallet transaction, setting too low may abort large transactions (default: %s)\"), FormatMoney(maxTxFee)) + \"\\n\";\n-    strUsage += \"  -upgradewallet         \" + _(\"Upgrade wallet to latest format\") + \" \" + _(\"on startup\") + \"\\n\";\n-    strUsage += \"  -wallet=<file>         \" + _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\") + \"\\n\";\n-    strUsage += \"  -walletnotify=<cmd>    \" + _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\") + \"\\n\";\n-    strUsage += \"  -zapwallettxes=<mode>  \" + _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") + \"\\n\";\n-    strUsage += \"                         \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\") + \"\\n\";\n+        strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for transaction creation (default: %s)\"),\n+            FormatMoney(CWallet::minTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in BTC/kB) to add to transactions you send (default: %s)\"), FormatMoney(payTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees to use in a single wallet transaction, setting too low may abort large transactions (default: %s)\"),\n+        FormatMoney(maxTxFee)));\n+    strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\"));\n+    strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n+    strUsage += HelpMessageOpt(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +\n+        \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"));\n+                    \n #endif\n \n-    strUsage += \"\\n\" + _(\"Debugging/Testing options:\") + \"\\n\";\n+    strUsage += HelpMessageGroup(_(\"Debugging/Testing options:\"));\n     if (GetBoolArg(\"-help-debug\", false))\n     {\n-        strUsage += \"  -checkpoints           \" + strprintf(_(\"Only accept block chain matching built-in checkpoints (default: %u)\"), 1) + \"\\n\";\n-        strUsage += \"  -dblogsize=<n>         \" + strprintf(_(\"Flush database activity from memory pool to disk log every <n> megabytes (default: %u)\"), 100) + \"\\n\";\n-        strUsage += \"  -disablesafemode       \" + strprintf(_(\"Disable safemode, override a real safe mode event (default: %u)\"), 0) + \"\\n\";\n-        strUsage += \"  -testsafemode          \" + strprintf(_(\"Force safe mode (default: %u)\"), 0) + \"\\n\";\n-        strUsage += \"  -dropmessagestest=<n>  \" + _(\"Randomly drop 1 of every <n> network messages\") + \"\\n\";\n-        strUsage += \"  -fuzzmessagestest=<n>  \" + _(\"Randomly fuzz 1 of every <n> network messages\") + \"\\n\";\n-        strUsage += \"  -flushwallet           \" + strprintf(_(\"Run a thread to flush wallet periodically (default: %u)\"), 1) + \"\\n\";\n-        strUsage += \"  -stopafterblockimport  \" + strprintf(_(\"Stop running after importing blocks from disk (default: %u)\"), 0) + \"\\n\";\n+        strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(_(\"Only accept block chain matching built-in checkpoints (default: %u)\"), 1));\n+        strUsage += HelpMessageOpt(\"-dblogsize=<n>\", strprintf(_(\"Flush database activity from memory pool to disk log every <n> megabytes (default: %u)\"), 100));\n+        strUsage += HelpMessageOpt(\"-disablesafemode\", strprintf(_(\"Disable safemode, override a real safe mode event (default: %u)\"), 0));\n+        strUsage += HelpMessageOpt(\"-testsafemode\", strprintf(_(\"Force safe mode (default: %u)\"), 0));\n+        strUsage += HelpMessageOpt(\"-dropmessagestest=<n>\", _(\"Randomly drop 1 of every <n> network messages\"));\n+        strUsage += HelpMessageOpt(\"-fuzzmessagestest=<n>\", _(\"Randomly fuzz 1 of every <n> network messages\"));\n+        strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(_(\"Run a thread to flush wallet periodically (default: %u)\"), 1));\n+        strUsage += HelpMessageOpt(\"-stopafterblockimport\", strprintf(_(\"Stop running after importing blocks from disk (default: %u)\"), 0));\n     }\n-    strUsage += \"  -debug=<category>      \" + strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \"\\n\";\n-    strUsage += \"                         \" + _(\"If <category> is not supplied, output all debugging information.\") + \"\\n\";\n-    strUsage += \"                         \" + _(\"<category> can be:\");\n-    strUsage +=                                 \" addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, net\"; // Don't translate these and qt below\n+    string debugCategories = \"addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, net\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n-        strUsage += \", qt\";\n-    strUsage += \".\\n\";\n+        debugCategories += \", qt\";\n+    strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n+        _(\"If <category> is not supplied, output all debugging information.\") + _(\"<category> can be:\") + \" \" + debugCategories + \".\");\n #ifdef ENABLE_WALLET\n-    strUsage += \"  -gen                   \" + strprintf(_(\"Generate coins (default: %u)\"), 0) + \"\\n\";\n-    strUsage += \"  -genproclimit=<n>      \" + strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), 1) + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), 1));\n #endif\n-    strUsage += \"  -help-debug            \" + _(\"Show all debugging options (usage: --help -help-debug)\") + \"\\n\";\n-    strUsage += \"  -logips                \" + strprintf(_(\"Include IP addresses in debug output (default: %u)\"), 0) + \"\\n\";\n-    strUsage += \"  -logtimestamps         \" + strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), 1) + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-help-debug\", _(\"Show all debugging options (usage: --help -help-debug)\"));\n+    strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), 1));\n     if (GetBoolArg(\"-help-debug\", false))\n     {\n-        strUsage += \"  -limitfreerelay=<n>    \" + strprintf(_(\"Continuously rate-limit free transactions to <n>*1000 bytes per minute (default:%u)\"), 15) + \"\\n\";\n-        strUsage += \"  -relaypriority         \" + strprintf(_(\"Require high priority for relaying free or low-fee transactions (default:%u)\"), 1) + \"\\n\";\n-        strUsage += \"  -maxsigcachesize=<n>   \" + strprintf(_(\"Limit size of signature cache to <n> entries (default: %u)\"), 50000) + \"\\n\";\n+        strUsage += HelpMessageOpt(\"-limitfreerelay=<n>\", strprintf(_(\"Continuously rate-limit free transactions to <n>*1000 bytes per minute (default:%u)\"), 15));\n+        strUsage += HelpMessageOpt(\"-relaypriority\", strprintf(_(\"Require high priority for relaying free or low-fee transactions (default:%u)\"), 1));\n+        strUsage += HelpMessageOpt(\"-maxsigcachesize=<n>\", strprintf(_(\"Limit size of signature cache to <n> entries (default: %u)\"), 50000));\n     }\n-    strUsage += \"  -minrelaytxfee=<amt>   \" + strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for relaying (default: %s)\"), FormatMoney(::minRelayTxFee.GetFeePerK())) + \"\\n\";\n-    strUsage += \"  -printtoconsole        \" + _(\"Send trace/debug info to console instead of debug.log file\") + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for relaying (default: %s)\"), FormatMoney(::minRelayTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"));\n     if (GetBoolArg(\"-help-debug\", false))\n     {\n-        strUsage += \"  -printpriority         \" + strprintf(_(\"Log transaction priority and fee per kB when mining blocks (default: %u)\"), 0) + \"\\n\";\n-        strUsage += \"  -privdb                \" + strprintf(_(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\"), 1) + \"\\n\";\n-        strUsage += \"  -regtest               \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \"\\n\";\n-        strUsage += \"                         \" + _(\"This is intended for regression testing tools and app development.\") + \"\\n\";\n-        strUsage += \"                         \" + _(\"In this mode -genproclimit controls how many blocks are generated immediately.\") + \"\\n\";\n+        strUsage += HelpMessageOpt(\"-printpriority\", strprintf(_(\"Log transaction priority and fee per kB when mining blocks (default: %u)\"), 0));\n+        strUsage += HelpMessageOpt(\"-privdb\", strprintf(_(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\"), 1));\n+        strUsage += HelpMessageOpt(\"-regtest\", _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \" \" +\n+            _(\"This is intended for regression testing tools and app development.\") + \" \" +\n+            _(\"In this mode -genproclimit controls how many blocks are generated immediately.\"));\n+    }\n+    strUsage += HelpMessageOpt(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"));\n+    strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n+\n+    strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n+    strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n+\n+    strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n+    strUsage += HelpMessageOpt(\"-blockminsize=<n>\", strprintf(_(\"Set minimum block size in bytes (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE));\n+    strUsage += HelpMessageOpt(\"-blockprioritysize=<n>\", strprintf(_(\"Set maximum size of high-priority/low-fee transactions in bytes (default: %d)\"), DEFAULT_BLOCK_PRIORITY_SIZE));\n+\n+    strUsage += HelpMessageGroup(_(\"RPC server options:\"));\n+    strUsage += HelpMessageOpt(\"-server\", _(\"Accept command line and JSON-RPC commands\"));\n+    strUsage += HelpMessageOpt(\"-rest\", strprintf(_(\"Accept public REST requests (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-rpcbind=<addr>\", _(\"Bind to given address to listen for JSON-RPC connections. Use [host]:port notation for IPv6. This option can be specified multiple times (default: bind to all interfaces)\"));\n+    strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n+    strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n+    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), 8332, 18332));\n+    strUsage += HelpMessageOpt(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"));\n+    strUsage += HelpMessageOpt(\"-rpcthreads=<n>\", strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), 4));\n+    strUsage += HelpMessageOpt(\"-rpckeepalive\", strprintf(_(\"RPC support for HTTP persistent connections (default: %d)\"), 1));\n+\n+    strUsage += HelpMessageGroup(_(\"RPC SSL options: (see the Bitcoin Wiki for SSL setup instructions)\"));\n+    strUsage += HelpMessageOpt(\"-rpcssl\", _(\"Use OpenSSL (https) for JSON-RPC connections\"));\n+    strUsage += HelpMessageOpt(\"-rpcsslcertificatechainfile=<file.cert>\", strprintf(_(\"Server certificate file (default: %s)\"), \"server.cert\"));\n+    strUsage += HelpMessageOpt(\"-rpcsslprivatekeyfile=<file.pem>\", strprintf(_(\"Server private key (default: %s)\"), \"server.pem\"));\n+    strUsage += HelpMessageOpt(\"-rpcsslciphers=<ciphers>\", strprintf(_(\"Acceptable ciphers (default: %s)\"), \"TLSv1.2+HIGH:TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!3DES:@STRENGTH\"));\n+\n+    if (mode == HMM_BITCOIN_QT)\n+    {\n+        strUsage += HelpMessageGroup(_(\"UI Options:\"));\n+        if (GetBoolArg(\"-help-debug\", false)) {\n+            strUsage += HelpMessageOpt(\"-allowselfsignedrootcertificates\", _(\"Allow self signed root certificates (default: 0)\"));\n+        }\n+        strUsage += HelpMessageOpt(\"-choosedatadir\", _(\"Choose data directory on startup (default: 0)\"));\n+        strUsage += HelpMessageOpt(\"-lang=<lang>\", _(\"Set language, for example \\\"de_DE\\\" (default: system locale)\"));\n+        strUsage += HelpMessageOpt(\"-min\", _(\"Start minimized\"));\n+        strUsage += HelpMessageOpt(\"-rootcertificates=<file>\", _(\"Set SSL root certificates for payment request (default: -system-)\"));\n+        strUsage += HelpMessageOpt(\"-splash\", _(\"Show splash screen on startup (default: 1)\"));\n     }\n-    strUsage += \"  -shrinkdebugfile       \" + _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\") + \"\\n\";\n-    strUsage += \"  -testnet               \" + _(\"Use the test network\") + \"\\n\";\n-\n-    strUsage += \"\\n\" + _(\"Node relay options:\") + \"\\n\";\n-    strUsage += \"  -datacarrier           \" + strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1) + \"\\n\";\n-    strUsage += \"  -datacarriersize       \" + strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY) + \"\\n\";\n-\n-    strUsage += \"\\n\" + _(\"Block creation options:\") + \"\\n\";\n-    strUsage += \"  -blockminsize=<n>      \" + strprintf(_(\"Set minimum block size in bytes (default: %u)\"), 0) + \"\\n\";\n-    strUsage += \"  -blockmaxsize=<n>      \" + strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE) + \"\\n\";\n-    strUsage += \"  -blockprioritysize=<n> \" + strprintf(_(\"Set maximum size of high-priority/low-fee transactions in bytes (default: %d)\"), DEFAULT_BLOCK_PRIORITY_SIZE) + \"\\n\";\n-\n-    strUsage += \"\\n\" + _(\"RPC server options:\") + \"\\n\";\n-    strUsage += \"  -server                \" + _(\"Accept command line and JSON-RPC commands\") + \"\\n\";\n-    strUsage += \"  -rest                  \" + strprintf(_(\"Accept public REST requests (default: %u)\"), 0) + \"\\n\";\n-    strUsage += \"  -rpcbind=<addr>        \" + _(\"Bind to given address to listen for JSON-RPC connections. Use [host]:port notation for IPv6. This option can be specified multiple times (default: bind to all interfaces)\") + \"\\n\";\n-    strUsage += \"  -rpcuser=<user>        \" + _(\"Username for JSON-RPC connections\") + \"\\n\";\n-    strUsage += \"  -rpcpassword=<pw>      \" + _(\"Password for JSON-RPC connections\") + \"\\n\";\n-    strUsage += \"  -rpcport=<port>        \" + strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), 8332, 18332) + \"\\n\";\n-    strUsage += \"  -rpcallowip=<ip>       \" + _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\") + \"\\n\";\n-    strUsage += \"  -rpcthreads=<n>        \" + strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), 4) + \"\\n\";\n-    strUsage += \"  -rpckeepalive          \" + strprintf(_(\"RPC support for HTTP persistent connections (default: %d)\"), 1) + \"\\n\";\n-\n-    strUsage += \"\\n\" + _(\"RPC SSL options: (see the Bitcoin Wiki for SSL setup instructions)\") + \"\\n\";\n-    strUsage += \"  -rpcssl                                  \" + _(\"Use OpenSSL (https) for JSON-RPC connections\") + \"\\n\";\n-    strUsage += \"  -rpcsslcertificatechainfile=<file.cert>  \" + strprintf(_(\"Server certificate file (default: %s)\"), \"server.cert\") + \"\\n\";\n-    strUsage += \"  -rpcsslprivatekeyfile=<file.pem>         \" + strprintf(_(\"Server private key (default: %s)\"), \"server.pem\") + \"\\n\";\n-    strUsage += \"  -rpcsslciphers=<ciphers>                 \" + strprintf(_(\"Acceptable ciphers (default: %s)\"), \"TLSv1.2+HIGH:TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!3DES:@STRENGTH\") + \"\\n\";\n \n     return strUsage;\n }"
      },
      {
        "sha": "386cf31d736850acc2bf95eebe3c76ddebeee2f6",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 54,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d734d87b28ccbf2a4a4eb19a28285b5dea782105/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d734d87b28ccbf2a4a4eb19a28285b5dea782105/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=d734d87b28ccbf2a4a4eb19a28285b5dea782105",
        "patch": "@@ -62,77 +62,47 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n         ui->helpMessage->setVisible(false);\n     } else {\n         setWindowTitle(tr(\"Command-line options\"));\n+        QString header = tr(\"Usage:\") + \"\\n\" +\n+            \"  bitcoin-qt [\" + tr(\"command-line options\") + \"]                     \" + \"\\n\";\n         QTextCursor cursor(ui->helpMessage->document());\n         cursor.insertText(version);\n         cursor.insertBlock();\n-        cursor.insertText(tr(\"Usage:\") + '\\n' +\n-            \"  bitcoin-qt [\" + tr(\"command-line options\") + \"]\\n\");\n-\n+        cursor.insertText(header);\n         cursor.insertBlock();\n+\n+        QString coreOptions = QString::fromStdString(HelpMessage(HMM_BITCOIN_QT));\n+        text = version + \"\\n\" + header + \"\\n\" + coreOptions;\n+\n         QTextTableFormat tf;\n         tf.setBorderStyle(QTextFrameFormat::BorderStyle_None);\n         tf.setCellPadding(2);\n         QVector<QTextLength> widths;\n         widths << QTextLength(QTextLength::PercentageLength, 35);\n         widths << QTextLength(QTextLength::PercentageLength, 65);\n         tf.setColumnWidthConstraints(widths);\n-        QTextTable *table = cursor.insertTable(2, 2, tf);\n \n-        QString coreOptions = QString::fromStdString(HelpMessage(HMM_BITCOIN_QT));\n-        bool first = true;\n         QTextCharFormat bold;\n         bold.setFontWeight(QFont::Bold);\n-        // note that coreOptions is not translated.\n-        foreach (const QString &line, coreOptions.split('\\n')) {\n-            if (!first) {\n-                table->appendRows(1);\n+\n+        foreach (const QString &line, coreOptions.split(\"\\n\")) {\n+            if (line.startsWith(\"  -\"))\n+            {\n+                cursor.currentTable()->appendRows(1);\n+                cursor.movePosition(QTextCursor::PreviousCell);\n                 cursor.movePosition(QTextCursor::NextRow);\n+                cursor.insertText(line.trimmed());\n+                cursor.movePosition(QTextCursor::NextCell);\n+            } else if (line.startsWith(\"   \")) {\n+                cursor.insertText(line.trimmed()+' ');\n+            } else if (line.size() > 0) {\n+                //Title of a group\n+                if (cursor.currentTable())\n+                    cursor.currentTable()->appendRows(1);\n+                cursor.movePosition(QTextCursor::Down);\n+                cursor.insertText(line.trimmed(), bold);\n+                cursor.insertTable(1, 2, tf);\n             }\n-            first = false;\n-\n-            if (line.startsWith(\"  \")) {\n-                int index = line.indexOf(' ', 3);\n-                if (index > 0) {\n-                    cursor.insertText(line.left(index).trimmed());\n-                    cursor.movePosition(QTextCursor::NextCell);\n-                    cursor.insertText(line.mid(index).trimmed());\n-                    continue;\n-                }\n-            }\n-            cursor.movePosition(QTextCursor::NextCell, QTextCursor::KeepAnchor);\n-            table->mergeCells(cursor);\n-            cursor.insertText(line.trimmed(), bold);\n-        }\n-\n-        table->appendRows(6);\n-        cursor.movePosition(QTextCursor::NextRow);\n-        cursor.insertText(tr(\"UI options\") + \":\", bold);\n-        cursor.movePosition(QTextCursor::NextRow);\n-        if (GetBoolArg(\"-help-debug\", false)) {\n-            cursor.insertText(\"-allowselfsignedrootcertificates\");\n-            cursor.movePosition(QTextCursor::NextCell);\n-            cursor.insertText(tr(\"Allow self signed root certificates (default: 0)\"));\n-            cursor.movePosition(QTextCursor::NextCell);\n         }\n-        cursor.insertText(\"-choosedatadir\");\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(tr(\"Choose data directory on startup (default: 0)\"));\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(\"-lang=<lang>\");\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(tr(\"Set language, for example \\\"de_DE\\\" (default: system locale)\"));\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(\"-min\");\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(tr(\"Start minimized\"));\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(\"-rootcertificates=<file>\");\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(tr(\"Set SSL root certificates for payment request (default: -system-)\"));\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(\"-splash\");\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(tr(\"Show splash screen on startup (default: 1)\"));\n \n         ui->helpMessage->moveCursor(QTextCursor::Start);\n         ui->scrollArea->setVisible(false);"
      },
      {
        "sha": "792f00b61d3ea79b734f6054d228fbf575a838de",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d734d87b28ccbf2a4a4eb19a28285b5dea782105/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d734d87b28ccbf2a4a4eb19a28285b5dea782105/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=d734d87b28ccbf2a4a4eb19a28285b5dea782105",
        "patch": "@@ -346,6 +346,21 @@ bool SoftSetBoolArg(const std::string& strArg, bool fValue)\n         return SoftSetArg(strArg, std::string(\"0\"));\n }\n \n+static const int screenWidth = 79;\n+static const int optIndent = 2;\n+static const int msgIndent = 7;\n+\n+std::string HelpMessageGroup(const std::string &message) {\n+    return std::string(message) + std::string(\"\\n\\n\");\n+}\n+\n+std::string HelpMessageOpt(const std::string &option, const std::string &message) {\n+    return std::string(optIndent,' ') + std::string(option) +\n+           std::string(\"\\n\") + std::string(msgIndent,' ') +\n+           FormatParagraph(message, screenWidth - msgIndent, msgIndent) +\n+           std::string(\"\\n\\n\");\n+}\n+\n static std::string FormatException(const std::exception* pex, const char* pszThread)\n {\n #ifdef WIN32"
      },
      {
        "sha": "9b5a4153dd9a86db45667865b5654d5f4768f74c",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d734d87b28ccbf2a4a4eb19a28285b5dea782105/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d734d87b28ccbf2a4a4eb19a28285b5dea782105/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=d734d87b28ccbf2a4a4eb19a28285b5dea782105",
        "patch": "@@ -162,6 +162,23 @@ bool SoftSetArg(const std::string& strArg, const std::string& strValue);\n  */\n bool SoftSetBoolArg(const std::string& strArg, bool fValue);\n \n+/**\n+ * Format a string to be used as group of options in help messages\n+ *\n+ * @param message Group name (e.g. \"RPC server options:\")\n+ * @return the formatted string\n+ */\n+std::string HelpMessageGroup(const std::string& message);\n+\n+/**\n+ * Format a string to be used as option description in help messages\n+ *\n+ * @param option Option message (e.g. \"-rpcuser=<user>\")\n+ * @param message Option description (e.g. \"Username for JSON-RPC connections\")\n+ * @return the formatted string\n+ */\n+std::string HelpMessageOpt(const std::string& option, const std::string& message);\n+\n void SetThreadPriority(int nPriority);\n void RenameThread(const char* name);\n "
      }
    ]
  },
  {
    "sha": "317e66c741aef0fd272e50aa2e82ff192ca5f7e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTdlNjZjNzQxYWVmMGZkMjcyZTUwYWEyZTgyZmYxOTJjYTVmN2U1",
    "commit": {
      "author": {
        "name": "dexX7",
        "email": "dexx@bitwatch.co",
        "date": "2015-03-11T12:34:20Z"
      },
      "committer": {
        "name": "dexX7",
        "email": "dexx@bitwatch.co",
        "date": "2015-03-11T13:33:29Z"
      },
      "message": "Initialization: set Boost path locale in main thread\n\nThe path locale is lazy initialized and to avoid deinitialization errors\nin multithreading environments, it is set explicitly by the main thread.",
      "tree": {
        "sha": "ef18c402c1f411a54a3a0fec568da8e2844c2fd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef18c402c1f411a54a3a0fec568da8e2844c2fd0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/317e66c741aef0fd272e50aa2e82ff192ca5f7e5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJVAETMAAoJEHZ14xz1cZgyc9kP/3Yg5jCaD+0FXBTHL4jSHHV+\nVU6koPp5OdmoHuUGuAYlPPZbvkJGy0j60Om04VU3s7PvcrGL1xI2w136erdV9zLh\nMd0RhGyQlWhW8S0Dj8jeCBOA3oO1z4lKKFt+OHrUIQZ8URcVYtbIaWqJ3j+33Uri\ngZ5SH3hvxHbYAs7FfqaOZ9AYn/Vb7gjw+58GGKtksk/1cZ5bCwy+5UUJykvxEsL+\nX/bxZSmJDERa03GcH6tkzAQZ9WbiLmW1FtYYCKhJxlkNlJItljVAK467115CkHUZ\nDxfICORdBZI4UJxTd1x6hQEECwD9iA9kXfDO1fu4Tjnc5F/YhJK4Ijgx7sZFL/3K\nNhLHmU1WfYv/25E50XjkEntZxpeQRAwXynkSQA9cfZEPWhFPjmVSWDNOiZkTB4bs\n5gP8w7FA6cbRnroAYZdiVjO37B4k9fqumlp01TTkYxLy277HquONVjIEZ5gNMqQc\nFddD/GNsRpmSOmqcl7Kv0IrsyQLWa0XtI59Y7dgIvZTcZJj1trQ0GJdcWsGdYffE\n4e2sXLVMvxpALofKHhD0k4d0xTpxtPU3xYX9m9VLXroh1uMMOb5xXf7LFKdn/PmJ\n4pf7J5Rlgo/2wIxsjvfyTnBODNRrVYxBvOLeAZ9nPaZJd9hk2ek3ICF13u3SDBjx\nsr0rS4L+k9Mz2jHhyCVj\n=5A2c\n-----END PGP SIGNATURE-----",
        "payload": "tree ef18c402c1f411a54a3a0fec568da8e2844c2fd0\nparent d734d87b28ccbf2a4a4eb19a28285b5dea782105\nauthor dexX7 <dexx@bitwatch.co> 1426077260 +0100\ncommitter dexX7 <dexx@bitwatch.co> 1426080809 +0100\n\nInitialization: set Boost path locale in main thread\n\nThe path locale is lazy initialized and to avoid deinitialization errors\nin multithreading environments, it is set explicitly by the main thread.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/317e66c741aef0fd272e50aa2e82ff192ca5f7e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/317e66c741aef0fd272e50aa2e82ff192ca5f7e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/317e66c741aef0fd272e50aa2e82ff192ca5f7e5/comments",
    "author": {
      "login": "dexX7",
      "id": 5836089,
      "node_id": "MDQ6VXNlcjU4MzYwODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5836089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dexX7",
      "html_url": "https://github.com/dexX7",
      "followers_url": "https://api.github.com/users/dexX7/followers",
      "following_url": "https://api.github.com/users/dexX7/following{/other_user}",
      "gists_url": "https://api.github.com/users/dexX7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dexX7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dexX7/subscriptions",
      "organizations_url": "https://api.github.com/users/dexX7/orgs",
      "repos_url": "https://api.github.com/users/dexX7/repos",
      "events_url": "https://api.github.com/users/dexX7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dexX7/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dexX7",
      "id": 5836089,
      "node_id": "MDQ6VXNlcjU4MzYwODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5836089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dexX7",
      "html_url": "https://github.com/dexX7",
      "followers_url": "https://api.github.com/users/dexX7/followers",
      "following_url": "https://api.github.com/users/dexX7/following{/other_user}",
      "gists_url": "https://api.github.com/users/dexX7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dexX7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dexX7/subscriptions",
      "organizations_url": "https://api.github.com/users/dexX7/orgs",
      "repos_url": "https://api.github.com/users/dexX7/repos",
      "events_url": "https://api.github.com/users/dexX7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dexX7/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d734d87b28ccbf2a4a4eb19a28285b5dea782105",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d734d87b28ccbf2a4a4eb19a28285b5dea782105",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d734d87b28ccbf2a4a4eb19a28285b5dea782105"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "4192e44ae1b240f5c154c9450cea00df952e152f",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/317e66c741aef0fd272e50aa2e82ff192ca5f7e5/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/317e66c741aef0fd272e50aa2e82ff192ca5f7e5/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=317e66c741aef0fd272e50aa2e82ff192ca5f7e5",
        "patch": "@@ -723,18 +723,18 @@ void RenameThread(const char* name)\n \n void SetupEnvironment()\n {\n-#ifndef WIN32\n-    try\n-    {\n-#if BOOST_FILESYSTEM_VERSION == 3\n-            boost::filesystem::path::codecvt(); // Raises runtime error if current locale is invalid\n-#else // boost filesystem v2\n-            std::locale();                      // Raises runtime error if current locale is invalid\n-#endif\n+    // On most POSIX systems (e.g. Linux, but not BSD) the environment's locale\n+    // may be invalid, in which case the \"C\" locale is used as fallback.\n+#if !defined(WIN32) && !defined(MAC_OSX) && !defined(__FreeBSD__) && !defined(__OpenBSD__)\n+    try {\n+        std::locale(\"\"); // Raises a runtime error if current locale is invalid\n     } catch (const std::runtime_error&) {\n-        setenv(\"LC_ALL\", \"C\", 1); // Force C locale\n+        std::locale::global(std::locale(\"C\"));\n     }\n #endif\n+    // The path locale is lazy initialized and to avoid deinitialization errors \n+    // in multithreading environments, it is set explicitly by the main thread.\n+    boost::filesystem::path::imbue(std::locale());    \n }\n \n void SetThreadPriority(int nPriority)"
      }
    ]
  },
  {
    "sha": "e564e63ef04e55b1e446f8440d51c611bc41cec6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTY0ZTYzZWYwNGU1NWIxZTQ0NmY4NDQwZDUxYzYxMWJjNDFjZWM2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-11T14:06:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-11T14:13:05Z"
      },
      "message": "Merge pull request #5871\n\n3aa0130 test: remove fSkipProofOfWork (Wladimir J. van der Laan)\n59bd89f test: Remove UNITTEST params (Wladimir J. van der Laan)",
      "tree": {
        "sha": "2d82b4c9e378cffcd0fb23c75126086df4d07503",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d82b4c9e378cffcd0fb23c75126086df4d07503"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e564e63ef04e55b1e446f8440d51c611bc41cec6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVAE1xAAoJEHSBCwEjRsmmMlYH/2yEh+vltCAj1K7Sz0iE1625\ni4A1/qUHzNiwd48pXkqAzZ70qzzdrKQpKnX1YLcwESX4xabBbi7n2U9YA8T7Ih8D\nhG3yTd15juQz9Zw1+da8bz7dlIv/rZHu6JPGCITFL4IzzH7KaqyLPzMvwpfcPjxy\nexbIPVIsCTcmzq64MF6DVCeRLV1gFqfqfxCmL7KBHbv2D+504YJKhavlXM/+6tD1\nxKcsUEj8LE3T8bSTsdNc7stYfXkNSevuGnLrI1VkJRQu0j+YL9P7B4RQE/y9eeCH\nd69wmJkxUTLIOLdb4YycCxeNd8RQHho7WcJJdfslMIdz6qlWEomtfe0bA0szv5k=\n=7TEx\n-----END PGP SIGNATURE-----",
        "payload": "tree 2d82b4c9e378cffcd0fb23c75126086df4d07503\nparent d734d87b28ccbf2a4a4eb19a28285b5dea782105\nparent 3aa0130b963087025b64108225bbadea36d8c6df\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1426082818 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1426083185 +0100\n\nMerge pull request #5871\n\n3aa0130 test: remove fSkipProofOfWork (Wladimir J. van der Laan)\n59bd89f test: Remove UNITTEST params (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e564e63ef04e55b1e446f8440d51c611bc41cec6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e564e63ef04e55b1e446f8440d51c611bc41cec6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e564e63ef04e55b1e446f8440d51c611bc41cec6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d734d87b28ccbf2a4a4eb19a28285b5dea782105",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d734d87b28ccbf2a4a4eb19a28285b5dea782105",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d734d87b28ccbf2a4a4eb19a28285b5dea782105"
      },
      {
        "sha": "3aa0130b963087025b64108225bbadea36d8c6df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3aa0130b963087025b64108225bbadea36d8c6df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3aa0130b963087025b64108225bbadea36d8c6df"
      }
    ],
    "stats": {
      "total": 87,
      "additions": 4,
      "deletions": 83
    },
    "files": [
      {
        "sha": "2bc8976510a2fe4d0da4686f2871222e3c0849e6",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 46,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e564e63ef04e55b1e446f8440d51c611bc41cec6/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e564e63ef04e55b1e446f8440d51c611bc41cec6/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=e564e63ef04e55b1e446f8440d51c611bc41cec6",
        "patch": "@@ -170,7 +170,6 @@ class CMainParams : public CChainParams {\n         fAllowMinDifficultyBlocks = false;\n         fRequireStandard = true;\n         fMineBlocksOnDemand = false;\n-        fSkipProofOfWorkCheck = false;\n         fTestnetToBeDeprecatedFieldRPC = false;\n     }\n \n@@ -281,51 +280,8 @@ class CRegTestParams : public CTestNetParams {\n };\n static CRegTestParams regTestParams;\n \n-/**\n- * Unit test\n- */\n-class CUnitTestParams : public CMainParams, public CModifiableParams {\n-public:\n-    CUnitTestParams() {\n-        strNetworkID = \"unittest\";\n-        nDefaultPort = 18445;\n-        vFixedSeeds.clear(); //! Unit test mode doesn't have any fixed seeds.\n-        vSeeds.clear();  //! Unit test mode doesn't have any DNS seeds.\n-\n-        fRequireRPCPassword = false;\n-        fMiningRequiresPeers = false;\n-        fDefaultCheckMemPool = true;\n-        fAllowMinDifficultyBlocks = false;\n-        fMineBlocksOnDemand = true;\n-    }\n-\n-    const Checkpoints::CCheckpointData& Checkpoints() const \n-    {\n-        // UnitTest share the same checkpoints as MAIN\n-        return data;\n-    }\n-\n-    //! Published setters to allow changing values in unit test cases\n-    virtual void setSubsidyHalvingInterval(int anSubsidyHalvingInterval)  { nSubsidyHalvingInterval=anSubsidyHalvingInterval; }\n-    virtual void setEnforceBlockUpgradeMajority(int anEnforceBlockUpgradeMajority)  { nEnforceBlockUpgradeMajority=anEnforceBlockUpgradeMajority; }\n-    virtual void setRejectBlockOutdatedMajority(int anRejectBlockOutdatedMajority)  { nRejectBlockOutdatedMajority=anRejectBlockOutdatedMajority; }\n-    virtual void setToCheckBlockUpgradeMajority(int anToCheckBlockUpgradeMajority)  { nToCheckBlockUpgradeMajority=anToCheckBlockUpgradeMajority; }\n-    virtual void setDefaultCheckMemPool(bool afDefaultCheckMemPool)  { fDefaultCheckMemPool=afDefaultCheckMemPool; }\n-    virtual void setAllowMinDifficultyBlocks(bool afAllowMinDifficultyBlocks) {  fAllowMinDifficultyBlocks=afAllowMinDifficultyBlocks; }\n-    virtual void setSkipProofOfWorkCheck(bool afSkipProofOfWorkCheck) { fSkipProofOfWorkCheck = afSkipProofOfWorkCheck; }\n-};\n-static CUnitTestParams unitTestParams;\n-\n-\n static CChainParams *pCurrentParams = 0;\n \n-CModifiableParams *ModifiableParams()\n-{\n-   assert(pCurrentParams);\n-   assert(pCurrentParams==&unitTestParams);\n-   return (CModifiableParams*)&unitTestParams;\n-}\n-\n const CChainParams &Params() {\n     assert(pCurrentParams);\n     return *pCurrentParams;\n@@ -339,8 +295,6 @@ CChainParams &Params(CBaseChainParams::Network network) {\n             return testNetParams;\n         case CBaseChainParams::REGTEST:\n             return regTestParams;\n-        case CBaseChainParams::UNITTEST:\n-            return unitTestParams;\n         default:\n             assert(false && \"Unimplemented network\");\n             return mainParams;"
      },
      {
        "sha": "134dcd65582d5f0845d1d73b920234d309229f60",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 25,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e564e63ef04e55b1e446f8440d51c611bc41cec6/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e564e63ef04e55b1e446f8440d51c611bc41cec6/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=e564e63ef04e55b1e446f8440d51c611bc41cec6",
        "patch": "@@ -60,8 +60,6 @@ class CChainParams\n     bool DefaultCheckMemPool() const { return fDefaultCheckMemPool; }\n     /** Allow mining of a min-difficulty block */\n     bool AllowMinDifficultyBlocks() const { return fAllowMinDifficultyBlocks; }\n-    /** Skip proof-of-work check: allow mining of any difficulty block */\n-    bool SkipProofOfWorkCheck() const { return fSkipProofOfWorkCheck; }\n     /** Make standard checks */\n     bool RequireStandard() const { return fRequireStandard; }\n     int64_t TargetTimespan() const { return nTargetTimespan; }\n@@ -104,29 +102,9 @@ class CChainParams\n     bool fAllowMinDifficultyBlocks;\n     bool fRequireStandard;\n     bool fMineBlocksOnDemand;\n-    bool fSkipProofOfWorkCheck;\n     bool fTestnetToBeDeprecatedFieldRPC;\n };\n \n-/** \n- * Modifiable parameters interface is used by test cases to adapt the parameters in order\n- * to test specific features more easily. Test cases should always restore the previous\n- * values after finalization.\n- */\n-\n-class CModifiableParams {\n-public:\n-    //! Published setters to allow changing values in unit test cases\n-    virtual void setSubsidyHalvingInterval(int anSubsidyHalvingInterval) =0;\n-    virtual void setEnforceBlockUpgradeMajority(int anEnforceBlockUpgradeMajority)=0;\n-    virtual void setRejectBlockOutdatedMajority(int anRejectBlockOutdatedMajority)=0;\n-    virtual void setToCheckBlockUpgradeMajority(int anToCheckBlockUpgradeMajority)=0;\n-    virtual void setDefaultCheckMemPool(bool aDefaultCheckMemPool)=0;\n-    virtual void setAllowMinDifficultyBlocks(bool aAllowMinDifficultyBlocks)=0;\n-    virtual void setSkipProofOfWorkCheck(bool aSkipProofOfWorkCheck)=0;\n-};\n-\n-\n /**\n  * Return the currently selected parameters. This won't change after app startup\n  * outside of the unit tests.\n@@ -136,9 +114,6 @@ const CChainParams &Params();\n /** Return parameters for the given network. */\n CChainParams &Params(CBaseChainParams::Network network);\n \n-/** Get modifiable network parameters (UNITTEST only) */\n-CModifiableParams *ModifiableParams();\n-\n /** Sets the params returned by Params() to those for the given network. */\n void SelectParams(CBaseChainParams::Network network);\n "
      },
      {
        "sha": "7d82d689ec45f9f96bcae66da6f196db4ee8323b",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e564e63ef04e55b1e446f8440d51c611bc41cec6/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e564e63ef04e55b1e446f8440d51c611bc41cec6/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=e564e63ef04e55b1e446f8440d51c611bc41cec6",
        "patch": "@@ -82,9 +82,6 @@ void SelectBaseParams(CBaseChainParams::Network network)\n     case CBaseChainParams::REGTEST:\n         pCurrentBaseParams = &regTestParams;\n         break;\n-    case CBaseChainParams::UNITTEST:\n-        pCurrentBaseParams = &unitTestParams;\n-        break;\n     default:\n         assert(false && \"Unimplemented network\");\n         return;"
      },
      {
        "sha": "421a3a06ff4c6c76ece3554963941daccdb2906f",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e564e63ef04e55b1e446f8440d51c611bc41cec6/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e564e63ef04e55b1e446f8440d51c611bc41cec6/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=e564e63ef04e55b1e446f8440d51c611bc41cec6",
        "patch": "@@ -19,7 +19,6 @@ class CBaseChainParams\n         MAIN,\n         TESTNET,\n         REGTEST,\n-        UNITTEST,\n \n         MAX_NETWORK_TYPES\n     };"
      },
      {
        "sha": "6bbb3bc1356ace3763c22e6d0275be8b7fa50909",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e564e63ef04e55b1e446f8440d51c611bc41cec6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e564e63ef04e55b1e446f8440d51c611bc41cec6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e564e63ef04e55b1e446f8440d51c611bc41cec6",
        "patch": "@@ -2596,8 +2596,7 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n     int nHeight = pindexPrev->nHeight+1;\n \n     // Check proof of work\n-    if ((!Params().SkipProofOfWorkCheck()) &&\n-       (block.nBits != GetNextWorkRequired(pindexPrev, &block)))\n+    if ((block.nBits != GetNextWorkRequired(pindexPrev, &block)))\n         return state.DoS(100, error(\"%s: incorrect proof of work\", __func__),\n                          REJECT_INVALID, \"bad-diffbits\");\n "
      },
      {
        "sha": "eb899ffc942b599029ab6bc4dc92a91bf2d74189",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e564e63ef04e55b1e446f8440d51c611bc41cec6/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e564e63ef04e55b1e446f8440d51c611bc41cec6/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=e564e63ef04e55b1e446f8440d51c611bc41cec6",
        "patch": "@@ -87,9 +87,6 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n     bool fOverflow;\n     arith_uint256 bnTarget;\n \n-    if (Params().SkipProofOfWorkCheck())\n-       return true;\n-\n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n \n     // Check range"
      },
      {
        "sha": "c242dd26e2b2caaf9e172aae788a3a0733df6949",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e564e63ef04e55b1e446f8440d51c611bc41cec6/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e564e63ef04e55b1e446f8440d51c611bc41cec6/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=e564e63ef04e55b1e446f8440d51c611bc41cec6",
        "patch": "@@ -127,6 +127,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n     std::vector<unsigned char> result;\n     CBitcoinSecret secret;\n     CBitcoinAddress addr;\n+    SelectParams(CBaseChainParams::MAIN);\n \n     BOOST_FOREACH(Value& tv, tests)\n     {\n@@ -176,7 +177,6 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n             BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid pubkey as privkey:\" + strTest);\n         }\n     }\n-    SelectParams(CBaseChainParams::UNITTEST);\n }\n \n // Goal: check that generated keys match test vectors\n@@ -244,7 +244,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n     CTxDestination nodest = CNoDestination();\n     BOOST_CHECK(!dummyAddr.Set(nodest));\n \n-    SelectParams(CBaseChainParams::UNITTEST);\n+    SelectParams(CBaseChainParams::MAIN);\n }\n \n // Goal: check that base58 parsing code is robust against a variety of corrupted data"
      },
      {
        "sha": "a1355ad445aaf9e5e4220997ac5711241acd217f",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e564e63ef04e55b1e446f8440d51c611bc41cec6/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e564e63ef04e55b1e446f8440d51c611bc41cec6/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=e564e63ef04e55b1e446f8440d51c611bc41cec6",
        "patch": "@@ -29,7 +29,7 @@ extern void noui_connect();\n TestingSetup::TestingSetup()\n {\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n-        SelectParams(CBaseChainParams::UNITTEST);\n+        SelectParams(CBaseChainParams::MAIN);\n         noui_connect();\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();"
      }
    ]
  },
  {
    "sha": "89e70e931d3d320d2dae4c296601aab113b2e508",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OWU3MGU5MzFkM2QzMjBkMmRhZTRjMjk2NjAxYWFiMTEzYjJlNTA4",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-03-11T23:08:22Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-03-11T23:16:23Z"
      },
      "message": "[QT] fix OSX dock icon window reopening\n\nfixes #5878",
      "tree": {
        "sha": "af4ebf6772b6f8e40fef6820b62ca62193e4472c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af4ebf6772b6f8e40fef6820b62ca62193e4472c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89e70e931d3d320d2dae4c296601aab113b2e508",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89e70e931d3d320d2dae4c296601aab113b2e508",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/89e70e931d3d320d2dae4c296601aab113b2e508",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89e70e931d3d320d2dae4c296601aab113b2e508/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e564e63ef04e55b1e446f8440d51c611bc41cec6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e564e63ef04e55b1e446f8440d51c611bc41cec6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e564e63ef04e55b1e446f8440d51c611bc41cec6"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 24,
      "deletions": 31
    },
    "files": [
      {
        "sha": "564fd0353e92ec0fe9c3d89b1fa040d1c8c4e2b4",
        "filename": "src/qt/macdockiconhandler.mm",
        "status": "modified",
        "additions": 24,
        "deletions": 31,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89e70e931d3d320d2dae4c296601aab113b2e508/src/qt/macdockiconhandler.mm",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89e70e931d3d320d2dae4c296601aab113b2e508/src/qt/macdockiconhandler.mm",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/macdockiconhandler.mm?ref=89e70e931d3d320d2dae4c296601aab113b2e508",
        "patch": "@@ -11,52 +11,46 @@\n \n #undef slots\n #include <Cocoa/Cocoa.h>\n+#include <objc/objc.h>\n+#include <objc/message.h>\n \n #if QT_VERSION < 0x050000\n extern void qt_mac_set_dock_menu(QMenu *);\n #endif\n \n-@interface DockIconClickEventHandler : NSObject\n-{\n-    MacDockIconHandler* dockIconHandler;\n-}\n-\n-@end\n-\n-@implementation DockIconClickEventHandler\n+static MacDockIconHandler *s_instance = NULL;\n \n-- (id)initWithDockIconHandler:(MacDockIconHandler *)aDockIconHandler\n-{\n-    self = [super init];\n-    if (self) {\n-        dockIconHandler = aDockIconHandler;\n-\n-        [[NSAppleEventManager sharedAppleEventManager]\n-            setEventHandler:self\n-                andSelector:@selector(handleDockClickEvent:withReplyEvent:)\n-              forEventClass:kCoreEventClass\n-                 andEventID:kAEReopenApplication];\n-    }\n-    return self;\n+bool dockClickHandler(id self,SEL _cmd,...) {\n+    Q_UNUSED(self)\n+    Q_UNUSED(_cmd)\n+    \n+    s_instance->handleDockIconClickEvent();\n+    \n+    // Return NO (false) to suppress the default OS X actions\n+    return false;\n }\n \n-- (void)handleDockClickEvent:(NSAppleEventDescriptor*)event withReplyEvent:(NSAppleEventDescriptor*)replyEvent\n-{\n-    Q_UNUSED(event)\n-    Q_UNUSED(replyEvent)\n-\n-    if (dockIconHandler) {\n-        dockIconHandler->handleDockIconClickEvent();\n+void setupDockClickHandler() {\n+    Class cls = objc_getClass(\"NSApplication\");\n+    id appInst = objc_msgSend((id)cls, sel_registerName(\"sharedApplication\"));\n+    \n+    if (appInst != NULL) {\n+        id delegate = objc_msgSend(appInst, sel_registerName(\"delegate\"));\n+        Class delClass = (Class)objc_msgSend(delegate,  sel_registerName(\"class\"));\n+        SEL shouldHandle = sel_registerName(\"applicationShouldHandleReopen:hasVisibleWindows:\");\n+        if (class_getInstanceMethod(delClass, shouldHandle))\n+            class_replaceMethod(delClass, shouldHandle, (IMP)dockClickHandler, \"B@:\");\n+        else\n+            class_addMethod(delClass, shouldHandle, (IMP)dockClickHandler,\"B@:\");\n     }\n }\n \n-@end\n \n MacDockIconHandler::MacDockIconHandler() : QObject()\n {\n     NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];\n \n-    this->m_dockIconClickEventHandler = [[DockIconClickEventHandler alloc] initWithDockIconHandler:this];\n+    setupDockClickHandler();\n     this->m_dummyWidget = new QWidget();\n     this->m_dockMenu = new QMenu(this->m_dummyWidget);\n     this->setMainWindow(NULL);\n@@ -119,7 +113,6 @@ - (void)handleDockClickEvent:(NSAppleEventDescriptor*)event withReplyEvent:(NSAp\n \n MacDockIconHandler *MacDockIconHandler::instance()\n {\n-    static MacDockIconHandler *s_instance = NULL;\n     if (!s_instance)\n         s_instance = new MacDockIconHandler();\n     return s_instance;"
      }
    ]
  },
  {
    "sha": "92fd887fd42a61e95f716d3193104827f60f856c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmZkODg3ZmQ0MmE2MWU5NWY3MTZkMzE5MzEwNDgyN2Y2MGY4NTZj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-12T08:34:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-12T08:45:22Z"
      },
      "message": "tests: add a BasicTestingSetup and apply to all tests\n\nMake sure that chainparams and logging is properly initialized. Doing\nthis for every test may be overkill, but this initialization is so\nsimple that that does not matter.\n\nThis should fix the travis issues.",
      "tree": {
        "sha": "3768ed6d0cba9128dd6fc5b8caa65c2dafac7bf1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3768ed6d0cba9128dd6fc5b8caa65c2dafac7bf1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92fd887fd42a61e95f716d3193104827f60f856c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92fd887fd42a61e95f716d3193104827f60f856c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92fd887fd42a61e95f716d3193104827f60f856c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92fd887fd42a61e95f716d3193104827f60f856c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e564e63ef04e55b1e446f8440d51c611bc41cec6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e564e63ef04e55b1e446f8440d51c611bc41cec6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e564e63ef04e55b1e446f8440d51c611bc41cec6"
      }
    ],
    "stats": {
      "total": 126,
      "additions": 90,
      "deletions": 36
    },
    "files": [
      {
        "sha": "c3125d76dc55353eabdfb2619dd118425e328bab",
        "filename": "src/test/Checkpoints_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/Checkpoints_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/Checkpoints_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Checkpoints_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -9,12 +9,13 @@\n #include \"checkpoints.h\"\n \n #include \"uint256.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>\n \n using namespace std;\n \n-BOOST_AUTO_TEST_SUITE(Checkpoints_tests)\n+BOOST_FIXTURE_TEST_SUITE(Checkpoints_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(sanity)\n {"
      },
      {
        "sha": "d4df7b5415797731cae702b958e8247ca06d2f72",
        "filename": "src/test/allocator_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/allocator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/allocator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/allocator_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -5,10 +5,11 @@\n #include \"util.h\"\n \n #include \"allocators.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>\n \n-BOOST_AUTO_TEST_SUITE(allocator_tests)\n+BOOST_FIXTURE_TEST_SUITE(allocator_tests, BasicTestingSetup)\n \n // Dummy memory page locker for platform independent tests\n static const void *last_lock_addr, *last_unlock_addr;"
      },
      {
        "sha": "17d6bed6d2fb952133b8123f37a2b6b8b4715ec1",
        "filename": "src/test/arith_uint256_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/arith_uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/arith_uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/arith_uint256_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -12,8 +12,9 @@\n #include \"arith_uint256.h\"\n #include <string>\n #include \"version.h\"\n+#include \"test/test_bitcoin.h\"\n \n-BOOST_AUTO_TEST_SUITE(arith_uint256_tests)\n+BOOST_FIXTURE_TEST_SUITE(arith_uint256_tests, BasicTestingSetup)\n \n /// Convert vector to arith_uint256, via uint256 blob\n inline arith_uint256 arith_uint256V(const std::vector<unsigned char>& vch)"
      },
      {
        "sha": "8ec88614259873a6adb64f06c7d1bd39a9e30718",
        "filename": "src/test/base32_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/base32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/base32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base32_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -3,10 +3,11 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"utilstrencodings.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>\n \n-BOOST_AUTO_TEST_SUITE(base32_tests)\n+BOOST_FIXTURE_TEST_SUITE(base32_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(base32_testvectors)\n {"
      },
      {
        "sha": "f07dd7a7db9647bd4460cc7dfae3b9cccf976460",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -13,6 +13,7 @@\n #include \"uint256.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n@@ -23,7 +24,7 @@\n using namespace json_spirit;\n extern Array read_json(const std::string& jsondata);\n \n-BOOST_AUTO_TEST_SUITE(base58_tests)\n+BOOST_FIXTURE_TEST_SUITE(base58_tests, BasicTestingSetup)\n \n // Goal: test low-level base58 encoding functionality\n BOOST_AUTO_TEST_CASE(base58_EncodeBase58)"
      },
      {
        "sha": "54c081b0ef9f88fd85330afe329196654a86c21b",
        "filename": "src/test/base64_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/base64_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/base64_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base64_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -3,10 +3,11 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"utilstrencodings.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>\n \n-BOOST_AUTO_TEST_SUITE(base64_tests)\n+BOOST_FIXTURE_TEST_SUITE(base64_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(base64_testvectors)\n {"
      },
      {
        "sha": "d738851c1f81c826acfb8a37a322981c77705b83",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -8,6 +8,7 @@\n #include \"key.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <string>\n #include <vector>\n@@ -107,7 +108,7 @@ void RunTest(const TestVector &test) {\n     }\n }\n \n-BOOST_AUTO_TEST_SUITE(bip32_tests)\n+BOOST_FIXTURE_TEST_SUITE(bip32_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(bip32_test1) {\n     RunTest(test1);"
      },
      {
        "sha": "73a146f05c42a491d0416f28571360e40f7fe983",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -13,6 +13,7 @@\n #include \"uint256.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <vector>\n \n@@ -21,7 +22,7 @@\n \n using namespace std;\n \n-BOOST_AUTO_TEST_SUITE(bloom_tests)\n+BOOST_FIXTURE_TEST_SUITE(bloom_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize)\n {"
      },
      {
        "sha": "7abfad151efed756eafc0066bd48200720017a6d",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -11,6 +11,7 @@\n #include \"clientversion.h\"\n #include \"main.h\"\n #include \"utiltime.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <cstdio>\n \n@@ -19,7 +20,7 @@\n #include <boost/test/unit_test.hpp>\n \n \n-BOOST_AUTO_TEST_SUITE(CheckBlock_tests)\n+BOOST_FIXTURE_TEST_SUITE(CheckBlock_tests, BasicTestingSetup)\n \n bool read_block(const std::string& filename, CBlock& block)\n {"
      },
      {
        "sha": "2e2cc2214b9b6192ec01e9849340580ea8cdb3a0",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -5,6 +5,7 @@\n #include \"coins.h\"\n #include \"random.h\"\n #include \"uint256.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <vector>\n #include <map>\n@@ -60,7 +61,7 @@ class CCoinsViewTest : public CCoinsView\n };\n }\n \n-BOOST_AUTO_TEST_SUITE(coins_tests)\n+BOOST_FIXTURE_TEST_SUITE(coins_tests, BasicTestingSetup)\n \n static const unsigned int NUM_SIMULATION_ITERATIONS = 40000;\n "
      },
      {
        "sha": "376ae9368107aa1d309e010b472ceec297ef1ef7",
        "filename": "src/test/compress_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/compress_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/compress_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/compress_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"compressor.h\"\n #include \"util.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <stdint.h>\n \n@@ -21,7 +22,7 @@\n // amounts 50 .. 21000000\n #define NUM_MULTIPLES_50BTC 420000\n \n-BOOST_AUTO_TEST_SUITE(compress_tests)\n+BOOST_FIXTURE_TEST_SUITE(compress_tests, BasicTestingSetup)\n \n bool static TestEncode(uint64_t in) {\n     return in == CTxOutCompressor::DecompressAmount(CTxOutCompressor::CompressAmount(in));"
      },
      {
        "sha": "aeb2a5caa322cb5c96225471ed9874e16db73b8c",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -10,13 +10,14 @@\n #include \"crypto/hmac_sha512.h\"\n #include \"random.h\"\n #include \"utilstrencodings.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <vector>\n \n #include <boost/assign/list_of.hpp>\n #include <boost/test/unit_test.hpp>\n \n-BOOST_AUTO_TEST_SUITE(crypto_tests)\n+BOOST_FIXTURE_TEST_SUITE(crypto_tests, BasicTestingSetup)\n \n template<typename Hasher, typename In, typename Out>\n void TestVector(const Hasher &h, const In &in, const Out &out) {"
      },
      {
        "sha": "a0c5592a95945e73d1f8c2e3bdb3af882a98a928",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"util.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <string>\n #include <vector>\n@@ -11,7 +12,7 @@\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n-BOOST_AUTO_TEST_SUITE(getarg_tests)\n+BOOST_FIXTURE_TEST_SUITE(getarg_tests, BasicTestingSetup)\n \n static void ResetArgs(const std::string& strArg)\n {"
      },
      {
        "sha": "e5d2e5a439efc061fefc4913369d29d0b5972b58",
        "filename": "src/test/hash_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/hash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/hash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/hash_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -4,14 +4,15 @@\n \n #include \"hash.h\"\n #include \"utilstrencodings.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n using namespace std;\n \n-BOOST_AUTO_TEST_SUITE(hash_tests)\n+BOOST_FIXTURE_TEST_SUITE(hash_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(murmurhash3)\n {"
      },
      {
        "sha": "13ca9494690ca2fd003ff889fe1560da9978a3b7",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -9,6 +9,7 @@\n #include \"uint256.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <string>\n #include <vector>\n@@ -58,7 +59,7 @@ void dumpKeyInfo(uint256 privkey)\n #endif\n \n \n-BOOST_AUTO_TEST_SUITE(key_tests)\n+BOOST_FIXTURE_TEST_SUITE(key_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(key_test1)\n {"
      },
      {
        "sha": "bd4e9c1d381b50f79063606a340ba9041cd6b9e1",
        "filename": "src/test/mruset_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/mruset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/mruset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mruset_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -6,6 +6,7 @@\n \n #include \"random.h\"\n #include \"util.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <set>\n \n@@ -34,7 +35,7 @@ class mrutester\n     }\n };\n \n-BOOST_AUTO_TEST_SUITE(mruset_tests)\n+BOOST_FIXTURE_TEST_SUITE(mruset_tests, BasicTestingSetup)\n \n // Test that an mruset behaves like a set, as long as no more than MAX_SIZE elements are in it\n BOOST_AUTO_TEST_CASE(mruset_like_set)"
      },
      {
        "sha": "054bc3b37bf4966282562ad58ee111d78fe9579d",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -10,6 +10,7 @@\n #include \"script/interpreter.h\"\n #include \"script/sign.h\"\n #include \"uint256.h\"\n+#include \"test/test_bitcoin.h\"\n \n #ifdef ENABLE_WALLET\n #include \"wallet_ismine.h\"\n@@ -22,7 +23,7 @@ using namespace std;\n \n typedef vector<unsigned char> valtype;\n \n-BOOST_AUTO_TEST_SUITE(multisig_tests)\n+BOOST_FIXTURE_TEST_SUITE(multisig_tests, BasicTestingSetup)\n \n CScript\n sign_multisig(CScript scriptPubKey, vector<CKey> keys, CTransaction transaction, int whichIn)"
      },
      {
        "sha": "cb357d295c2d420a53ccd5fb44843bbd1ef71a47",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -3,14 +3,15 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"netbase.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <string>\n \n #include <boost/test/unit_test.hpp>\n \n using namespace std;\n \n-BOOST_AUTO_TEST_SUITE(netbase_tests)\n+BOOST_FIXTURE_TEST_SUITE(netbase_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(netbase_networks)\n {"
      },
      {
        "sha": "f6d06d6805caa8234ccf9f6d53cd928bc1d83ba8",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -9,6 +9,7 @@\n #include \"arith_uint256.h\"\n #include \"version.h\"\n #include \"random.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <vector>\n \n@@ -28,7 +29,7 @@ class CPartialMerkleTreeTester : public CPartialMerkleTree\n     }\n };\n \n-BOOST_AUTO_TEST_SUITE(pmt_tests)\n+BOOST_FIXTURE_TEST_SUITE(pmt_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(pmt_test1)\n {"
      },
      {
        "sha": "7b197c527de44396afdc8b2c1d182a1fb2c3998b",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -5,12 +5,13 @@\n #include \"main.h\"\n #include \"pow.h\"\n #include \"util.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>\n \n using namespace std;\n \n-BOOST_AUTO_TEST_SUITE(pow_tests)\n+BOOST_FIXTURE_TEST_SUITE(pow_tests, BasicTestingSetup)\n \n /* Test calculation of next difficulty target with no constraints applying */\n BOOST_AUTO_TEST_CASE(get_next_work)"
      },
      {
        "sha": "f5f7f381d315777871e9fc5c47af3524b2f6064f",
        "filename": "src/test/sanity_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/sanity_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/sanity_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sanity_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -4,9 +4,11 @@\n \n #include \"compat/sanity.h\"\n #include \"key.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>\n-BOOST_AUTO_TEST_SUITE(sanity_tests)\n+\n+BOOST_FIXTURE_TEST_SUITE(sanity_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(basic_sanity)\n {"
      },
      {
        "sha": "52171b9e3c82f1b8e3218bff30bf2c85fcad84d7",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -8,6 +8,7 @@\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n #include \"script/sign.h\"\n+#include \"test/test_bitcoin.h\"\n \n #ifdef ENABLE_WALLET\n #include \"wallet_ismine.h\"\n@@ -47,7 +48,7 @@ Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict, Scri\n }\n \n \n-BOOST_AUTO_TEST_SUITE(script_P2SH_tests)\n+BOOST_FIXTURE_TEST_SUITE(script_P2SH_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(sign)\n {"
      },
      {
        "sha": "c0614cca431f588a07f4c2e50cfbb945c1f46286",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -13,6 +13,7 @@\n #include \"script/script_error.h\"\n #include \"script/sign.h\"\n #include \"util.h\"\n+#include \"test/test_bitcoin.h\"\n \n #if defined(HAVE_CONSENSUS_LIB)\n #include \"script/bitcoinconsensus.h\"\n@@ -53,7 +54,7 @@ read_json(const std::string& jsondata)\n     return v.get_array();\n }\n \n-BOOST_AUTO_TEST_SUITE(script_tests)\n+BOOST_FIXTURE_TEST_SUITE(script_tests, BasicTestingSetup)\n \n CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)\n {"
      },
      {
        "sha": "24c7dd3d5a4745efa22d7a0d89087fa2f9510685",
        "filename": "src/test/scriptnum_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/scriptnum_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/scriptnum_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scriptnum_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -4,10 +4,13 @@\n \n #include \"bignum.h\"\n #include \"script/script.h\"\n+#include \"test/test_bitcoin.h\"\n+\n #include <boost/test/unit_test.hpp>\n #include <limits.h>\n #include <stdint.h>\n-BOOST_AUTO_TEST_SUITE(scriptnum_tests)\n+\n+BOOST_FIXTURE_TEST_SUITE(scriptnum_tests, BasicTestingSetup)\n \n static const int64_t values[] = \\\n { 0, 1, CHAR_MIN, CHAR_MAX, UCHAR_MAX, SHRT_MIN, USHRT_MAX, INT_MIN, INT_MAX, UINT_MAX, LONG_MIN, LONG_MAX };"
      },
      {
        "sha": "cc8f2b788d6d579398165f9b2fcb52a2a49450ef",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -5,14 +5,15 @@\n #include \"serialize.h\"\n #include \"streams.h\"\n #include \"hash.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <stdint.h>\n \n #include <boost/test/unit_test.hpp>\n \n using namespace std;\n \n-BOOST_AUTO_TEST_SUITE(serialize_tests)\n+BOOST_FIXTURE_TEST_SUITE(serialize_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(sizes)\n {"
      },
      {
        "sha": "afb7a41bbd4b3af49520ec038bd40f9daeb459c2",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -10,6 +10,7 @@\n #include \"script/interpreter.h\"\n #include \"util.h\"\n #include \"version.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <iostream>\n \n@@ -115,7 +116,7 @@ void static RandomTransaction(CMutableTransaction &tx, bool fSingle) {\n     }\n }\n \n-BOOST_AUTO_TEST_SUITE(sighash_tests)\n+BOOST_FIXTURE_TEST_SUITE(sighash_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(sighash_test)\n {"
      },
      {
        "sha": "b26fed99f2a60935074f94e9fc680955047895a7",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -7,6 +7,7 @@\n #include \"script/script.h\"\n #include \"script/standard.h\"\n #include \"uint256.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <vector>\n \n@@ -23,7 +24,7 @@ Serialize(const CScript& s)\n     return sSerialized;\n }\n \n-BOOST_AUTO_TEST_SUITE(sigopcount_tests)\n+BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(GetSigOpCount)\n {"
      },
      {
        "sha": "86a4bc67272ef475f6800d078b70853999b81627",
        "filename": "src/test/skiplist_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/skiplist_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/skiplist_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/skiplist_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -5,14 +5,15 @@\n #include \"main.h\"\n #include \"random.h\"\n #include \"util.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n #define SKIPLIST_LENGTH 300000\n \n-BOOST_AUTO_TEST_SUITE(skiplist_tests)\n+BOOST_FIXTURE_TEST_SUITE(skiplist_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(skiplist_test)\n {"
      },
      {
        "sha": "48e49ed757cf938da607f20f37c4c546ad3b4e82",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -26,11 +26,17 @@ CWallet* pwalletMain;\n extern bool fPrintToConsole;\n extern void noui_connect();\n \n-TestingSetup::TestingSetup()\n+BasicTestingSetup::BasicTestingSetup()\n {\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n         SelectParams(CBaseChainParams::MAIN);\n-        noui_connect();\n+}\n+BasicTestingSetup::~BasicTestingSetup()\n+{\n+}\n+\n+TestingSetup::TestingSetup()\n+{\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();\n #endif"
      },
      {
        "sha": "2f75332d40d0f5575dc5dd4fa72c4ac0441fb473",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -6,7 +6,19 @@\n #include <boost/filesystem.hpp>\n #include <boost/thread.hpp>\n \n-struct TestingSetup {\n+/** Basic testing setup.\n+ * This just configures logging and chain parameters.\n+ */\n+struct BasicTestingSetup {\n+    BasicTestingSetup();\n+    ~BasicTestingSetup();\n+};\n+\n+/** Testing setup that configures a complete environment.\n+ * Included are data directory, coins database, script check threads\n+ * and wallet (if enabled) setup.\n+ */\n+struct TestingSetup: public BasicTestingSetup {\n     CCoinsViewDB *pcoinsdbview;\n     boost::filesystem::path pathTemp;\n     boost::thread_group threadGroup;"
      },
      {
        "sha": "887cfb47613e9fe81c23e2b88cb9438736e39185",
        "filename": "src/test/timedata_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/timedata_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/timedata_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/timedata_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -3,12 +3,13 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n //\n #include \"timedata.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>\n \n using namespace std;\n \n-BOOST_AUTO_TEST_SUITE(timedata_tests)\n+BOOST_FIXTURE_TEST_SUITE(timedata_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(util_MedianFilter)\n {"
      },
      {
        "sha": "2a3083316e939d9e53e8fd615d88f88ecf31d83c",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"data/tx_invalid.json.h\"\n #include \"data/tx_valid.json.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include \"clientversion.h\"\n #include \"key.h\"\n@@ -75,7 +76,7 @@ string FormatScriptFlags(unsigned int flags)\n     return ret.substr(0, ret.size() - 1);\n }\n \n-BOOST_AUTO_TEST_SUITE(transaction_tests)\n+BOOST_FIXTURE_TEST_SUITE(transaction_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(tx_valid)\n {"
      },
      {
        "sha": "426d296a9ac56cf623e0be806c1b87a4ca3e81c0",
        "filename": "src/test/uint256_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint256_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -4,6 +4,7 @@\n #include \"arith_uint256.h\"\n #include \"uint256.h\"\n #include \"version.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>\n #include <stdint.h>\n@@ -14,7 +15,7 @@\n #include <string>\n #include <stdio.h>\n \n-BOOST_AUTO_TEST_SUITE(uint256_tests)\n+BOOST_FIXTURE_TEST_SUITE(uint256_tests, BasicTestingSetup)\n \n const unsigned char R1Array[] =\n     \"\\x9c\\x52\\x4a\\xdb\\xcf\\x56\\x11\\x12\\x2b\\x29\\x12\\x5e\\x5d\\x35\\xd2\\xd2\""
      },
      {
        "sha": "8cecfbf651666a8a5eba2f8cd65f042117ee51c3",
        "filename": "src/test/univalue_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/univalue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/univalue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/univalue_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -7,12 +7,13 @@\n #include <string>\n #include <map>\n #include \"univalue/univalue.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>\n \n using namespace std;\n \n-BOOST_AUTO_TEST_SUITE(univalue_tests)\n+BOOST_FIXTURE_TEST_SUITE(univalue_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(univalue_constructor)\n {"
      },
      {
        "sha": "3309e2e387737f252ab63bd7e7f1f625a346d1a2",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fd887fd42a61e95f716d3193104827f60f856c/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fd887fd42a61e95f716d3193104827f60f856c/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=92fd887fd42a61e95f716d3193104827f60f856c",
        "patch": "@@ -10,6 +10,7 @@\n #include \"sync.h\"\n #include \"utilstrencodings.h\"\n #include \"utilmoneystr.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <stdint.h>\n #include <vector>\n@@ -18,7 +19,7 @@\n \n using namespace std;\n \n-BOOST_AUTO_TEST_SUITE(util_tests)\n+BOOST_FIXTURE_TEST_SUITE(util_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(util_criticalsection)\n {"
      }
    ]
  },
  {
    "sha": "164d7b674b49b3c062d0331f28d21ad4f6bf5207",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjRkN2I2NzRiNDliM2MwNjJkMDMzMWYyOGQyMWFkNGY2YmY1MjA3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-12T09:54:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-12T10:00:16Z"
      },
      "message": "Merge pull request #5883\n\n92fd887 tests: add a BasicTestingSetup and apply to all tests (Wladimir J. van der Laan)",
      "tree": {
        "sha": "3768ed6d0cba9128dd6fc5b8caa65c2dafac7bf1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3768ed6d0cba9128dd6fc5b8caa65c2dafac7bf1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/164d7b674b49b3c062d0331f28d21ad4f6bf5207",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVAWOwAAoJEHSBCwEjRsmmcpwIAMwtMSVaWcGJKIj3E9cBoUOA\n5cWQd7B50lPRbw9eCw4pf/kAvBWZDoXBSHhwvlHseTRPypWS9akY0rV/TBTvFmVb\n0ZibPBgJzacpHbA45838efZ/dtOLr+6NAXJF8jclBl/yi6Puy7W9V2GL9U5pqKvS\nfOwRw99KeDk9ILOffJQvhvjGnCk30SShQ8l/M1QnQEP2vDdPVgp2kz4YMDKmK3lS\nLZjiRi6kmA47YN6sKUzPFDMGml+OxGIxbG7fp3PRbnFTxPMLXW2FGr4+DS9um1cq\nG9dkr8nl7l44zBA5R+7b7xd5CxwemnKTt0hjGoR3WAZjN8FWsIDu4UsMFE0xRvg=\n=pSnr\n-----END PGP SIGNATURE-----",
        "payload": "tree 3768ed6d0cba9128dd6fc5b8caa65c2dafac7bf1\nparent e564e63ef04e55b1e446f8440d51c611bc41cec6\nparent 92fd887fd42a61e95f716d3193104827f60f856c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1426154053 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1426154416 +0100\n\nMerge pull request #5883\n\n92fd887 tests: add a BasicTestingSetup and apply to all tests (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/164d7b674b49b3c062d0331f28d21ad4f6bf5207",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/164d7b674b49b3c062d0331f28d21ad4f6bf5207",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/164d7b674b49b3c062d0331f28d21ad4f6bf5207/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e564e63ef04e55b1e446f8440d51c611bc41cec6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e564e63ef04e55b1e446f8440d51c611bc41cec6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e564e63ef04e55b1e446f8440d51c611bc41cec6"
      },
      {
        "sha": "92fd887fd42a61e95f716d3193104827f60f856c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92fd887fd42a61e95f716d3193104827f60f856c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92fd887fd42a61e95f716d3193104827f60f856c"
      }
    ],
    "stats": {
      "total": 126,
      "additions": 90,
      "deletions": 36
    },
    "files": [
      {
        "sha": "c3125d76dc55353eabdfb2619dd118425e328bab",
        "filename": "src/test/Checkpoints_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/Checkpoints_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/Checkpoints_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Checkpoints_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -9,12 +9,13 @@\n #include \"checkpoints.h\"\n \n #include \"uint256.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>\n \n using namespace std;\n \n-BOOST_AUTO_TEST_SUITE(Checkpoints_tests)\n+BOOST_FIXTURE_TEST_SUITE(Checkpoints_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(sanity)\n {"
      },
      {
        "sha": "d4df7b5415797731cae702b958e8247ca06d2f72",
        "filename": "src/test/allocator_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/allocator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/allocator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/allocator_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -5,10 +5,11 @@\n #include \"util.h\"\n \n #include \"allocators.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>\n \n-BOOST_AUTO_TEST_SUITE(allocator_tests)\n+BOOST_FIXTURE_TEST_SUITE(allocator_tests, BasicTestingSetup)\n \n // Dummy memory page locker for platform independent tests\n static const void *last_lock_addr, *last_unlock_addr;"
      },
      {
        "sha": "17d6bed6d2fb952133b8123f37a2b6b8b4715ec1",
        "filename": "src/test/arith_uint256_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/arith_uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/arith_uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/arith_uint256_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -12,8 +12,9 @@\n #include \"arith_uint256.h\"\n #include <string>\n #include \"version.h\"\n+#include \"test/test_bitcoin.h\"\n \n-BOOST_AUTO_TEST_SUITE(arith_uint256_tests)\n+BOOST_FIXTURE_TEST_SUITE(arith_uint256_tests, BasicTestingSetup)\n \n /// Convert vector to arith_uint256, via uint256 blob\n inline arith_uint256 arith_uint256V(const std::vector<unsigned char>& vch)"
      },
      {
        "sha": "8ec88614259873a6adb64f06c7d1bd39a9e30718",
        "filename": "src/test/base32_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/base32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/base32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base32_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -3,10 +3,11 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"utilstrencodings.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>\n \n-BOOST_AUTO_TEST_SUITE(base32_tests)\n+BOOST_FIXTURE_TEST_SUITE(base32_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(base32_testvectors)\n {"
      },
      {
        "sha": "f07dd7a7db9647bd4460cc7dfae3b9cccf976460",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -13,6 +13,7 @@\n #include \"uint256.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n@@ -23,7 +24,7 @@\n using namespace json_spirit;\n extern Array read_json(const std::string& jsondata);\n \n-BOOST_AUTO_TEST_SUITE(base58_tests)\n+BOOST_FIXTURE_TEST_SUITE(base58_tests, BasicTestingSetup)\n \n // Goal: test low-level base58 encoding functionality\n BOOST_AUTO_TEST_CASE(base58_EncodeBase58)"
      },
      {
        "sha": "54c081b0ef9f88fd85330afe329196654a86c21b",
        "filename": "src/test/base64_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/base64_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/base64_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base64_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -3,10 +3,11 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"utilstrencodings.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>\n \n-BOOST_AUTO_TEST_SUITE(base64_tests)\n+BOOST_FIXTURE_TEST_SUITE(base64_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(base64_testvectors)\n {"
      },
      {
        "sha": "d738851c1f81c826acfb8a37a322981c77705b83",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -8,6 +8,7 @@\n #include \"key.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <string>\n #include <vector>\n@@ -107,7 +108,7 @@ void RunTest(const TestVector &test) {\n     }\n }\n \n-BOOST_AUTO_TEST_SUITE(bip32_tests)\n+BOOST_FIXTURE_TEST_SUITE(bip32_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(bip32_test1) {\n     RunTest(test1);"
      },
      {
        "sha": "73a146f05c42a491d0416f28571360e40f7fe983",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -13,6 +13,7 @@\n #include \"uint256.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <vector>\n \n@@ -21,7 +22,7 @@\n \n using namespace std;\n \n-BOOST_AUTO_TEST_SUITE(bloom_tests)\n+BOOST_FIXTURE_TEST_SUITE(bloom_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize)\n {"
      },
      {
        "sha": "7abfad151efed756eafc0066bd48200720017a6d",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -11,6 +11,7 @@\n #include \"clientversion.h\"\n #include \"main.h\"\n #include \"utiltime.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <cstdio>\n \n@@ -19,7 +20,7 @@\n #include <boost/test/unit_test.hpp>\n \n \n-BOOST_AUTO_TEST_SUITE(CheckBlock_tests)\n+BOOST_FIXTURE_TEST_SUITE(CheckBlock_tests, BasicTestingSetup)\n \n bool read_block(const std::string& filename, CBlock& block)\n {"
      },
      {
        "sha": "2e2cc2214b9b6192ec01e9849340580ea8cdb3a0",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -5,6 +5,7 @@\n #include \"coins.h\"\n #include \"random.h\"\n #include \"uint256.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <vector>\n #include <map>\n@@ -60,7 +61,7 @@ class CCoinsViewTest : public CCoinsView\n };\n }\n \n-BOOST_AUTO_TEST_SUITE(coins_tests)\n+BOOST_FIXTURE_TEST_SUITE(coins_tests, BasicTestingSetup)\n \n static const unsigned int NUM_SIMULATION_ITERATIONS = 40000;\n "
      },
      {
        "sha": "376ae9368107aa1d309e010b472ceec297ef1ef7",
        "filename": "src/test/compress_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/compress_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/compress_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/compress_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"compressor.h\"\n #include \"util.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <stdint.h>\n \n@@ -21,7 +22,7 @@\n // amounts 50 .. 21000000\n #define NUM_MULTIPLES_50BTC 420000\n \n-BOOST_AUTO_TEST_SUITE(compress_tests)\n+BOOST_FIXTURE_TEST_SUITE(compress_tests, BasicTestingSetup)\n \n bool static TestEncode(uint64_t in) {\n     return in == CTxOutCompressor::DecompressAmount(CTxOutCompressor::CompressAmount(in));"
      },
      {
        "sha": "aeb2a5caa322cb5c96225471ed9874e16db73b8c",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -10,13 +10,14 @@\n #include \"crypto/hmac_sha512.h\"\n #include \"random.h\"\n #include \"utilstrencodings.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <vector>\n \n #include <boost/assign/list_of.hpp>\n #include <boost/test/unit_test.hpp>\n \n-BOOST_AUTO_TEST_SUITE(crypto_tests)\n+BOOST_FIXTURE_TEST_SUITE(crypto_tests, BasicTestingSetup)\n \n template<typename Hasher, typename In, typename Out>\n void TestVector(const Hasher &h, const In &in, const Out &out) {"
      },
      {
        "sha": "a0c5592a95945e73d1f8c2e3bdb3af882a98a928",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"util.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <string>\n #include <vector>\n@@ -11,7 +12,7 @@\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n-BOOST_AUTO_TEST_SUITE(getarg_tests)\n+BOOST_FIXTURE_TEST_SUITE(getarg_tests, BasicTestingSetup)\n \n static void ResetArgs(const std::string& strArg)\n {"
      },
      {
        "sha": "e5d2e5a439efc061fefc4913369d29d0b5972b58",
        "filename": "src/test/hash_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/hash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/hash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/hash_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -4,14 +4,15 @@\n \n #include \"hash.h\"\n #include \"utilstrencodings.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n using namespace std;\n \n-BOOST_AUTO_TEST_SUITE(hash_tests)\n+BOOST_FIXTURE_TEST_SUITE(hash_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(murmurhash3)\n {"
      },
      {
        "sha": "13ca9494690ca2fd003ff889fe1560da9978a3b7",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -9,6 +9,7 @@\n #include \"uint256.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <string>\n #include <vector>\n@@ -58,7 +59,7 @@ void dumpKeyInfo(uint256 privkey)\n #endif\n \n \n-BOOST_AUTO_TEST_SUITE(key_tests)\n+BOOST_FIXTURE_TEST_SUITE(key_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(key_test1)\n {"
      },
      {
        "sha": "bd4e9c1d381b50f79063606a340ba9041cd6b9e1",
        "filename": "src/test/mruset_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/mruset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/mruset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mruset_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -6,6 +6,7 @@\n \n #include \"random.h\"\n #include \"util.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <set>\n \n@@ -34,7 +35,7 @@ class mrutester\n     }\n };\n \n-BOOST_AUTO_TEST_SUITE(mruset_tests)\n+BOOST_FIXTURE_TEST_SUITE(mruset_tests, BasicTestingSetup)\n \n // Test that an mruset behaves like a set, as long as no more than MAX_SIZE elements are in it\n BOOST_AUTO_TEST_CASE(mruset_like_set)"
      },
      {
        "sha": "054bc3b37bf4966282562ad58ee111d78fe9579d",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -10,6 +10,7 @@\n #include \"script/interpreter.h\"\n #include \"script/sign.h\"\n #include \"uint256.h\"\n+#include \"test/test_bitcoin.h\"\n \n #ifdef ENABLE_WALLET\n #include \"wallet_ismine.h\"\n@@ -22,7 +23,7 @@ using namespace std;\n \n typedef vector<unsigned char> valtype;\n \n-BOOST_AUTO_TEST_SUITE(multisig_tests)\n+BOOST_FIXTURE_TEST_SUITE(multisig_tests, BasicTestingSetup)\n \n CScript\n sign_multisig(CScript scriptPubKey, vector<CKey> keys, CTransaction transaction, int whichIn)"
      },
      {
        "sha": "cb357d295c2d420a53ccd5fb44843bbd1ef71a47",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -3,14 +3,15 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"netbase.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <string>\n \n #include <boost/test/unit_test.hpp>\n \n using namespace std;\n \n-BOOST_AUTO_TEST_SUITE(netbase_tests)\n+BOOST_FIXTURE_TEST_SUITE(netbase_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(netbase_networks)\n {"
      },
      {
        "sha": "f6d06d6805caa8234ccf9f6d53cd928bc1d83ba8",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -9,6 +9,7 @@\n #include \"arith_uint256.h\"\n #include \"version.h\"\n #include \"random.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <vector>\n \n@@ -28,7 +29,7 @@ class CPartialMerkleTreeTester : public CPartialMerkleTree\n     }\n };\n \n-BOOST_AUTO_TEST_SUITE(pmt_tests)\n+BOOST_FIXTURE_TEST_SUITE(pmt_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(pmt_test1)\n {"
      },
      {
        "sha": "7b197c527de44396afdc8b2c1d182a1fb2c3998b",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -5,12 +5,13 @@\n #include \"main.h\"\n #include \"pow.h\"\n #include \"util.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>\n \n using namespace std;\n \n-BOOST_AUTO_TEST_SUITE(pow_tests)\n+BOOST_FIXTURE_TEST_SUITE(pow_tests, BasicTestingSetup)\n \n /* Test calculation of next difficulty target with no constraints applying */\n BOOST_AUTO_TEST_CASE(get_next_work)"
      },
      {
        "sha": "f5f7f381d315777871e9fc5c47af3524b2f6064f",
        "filename": "src/test/sanity_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/sanity_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/sanity_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sanity_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -4,9 +4,11 @@\n \n #include \"compat/sanity.h\"\n #include \"key.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>\n-BOOST_AUTO_TEST_SUITE(sanity_tests)\n+\n+BOOST_FIXTURE_TEST_SUITE(sanity_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(basic_sanity)\n {"
      },
      {
        "sha": "52171b9e3c82f1b8e3218bff30bf2c85fcad84d7",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -8,6 +8,7 @@\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n #include \"script/sign.h\"\n+#include \"test/test_bitcoin.h\"\n \n #ifdef ENABLE_WALLET\n #include \"wallet_ismine.h\"\n@@ -47,7 +48,7 @@ Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict, Scri\n }\n \n \n-BOOST_AUTO_TEST_SUITE(script_P2SH_tests)\n+BOOST_FIXTURE_TEST_SUITE(script_P2SH_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(sign)\n {"
      },
      {
        "sha": "c0614cca431f588a07f4c2e50cfbb945c1f46286",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -13,6 +13,7 @@\n #include \"script/script_error.h\"\n #include \"script/sign.h\"\n #include \"util.h\"\n+#include \"test/test_bitcoin.h\"\n \n #if defined(HAVE_CONSENSUS_LIB)\n #include \"script/bitcoinconsensus.h\"\n@@ -53,7 +54,7 @@ read_json(const std::string& jsondata)\n     return v.get_array();\n }\n \n-BOOST_AUTO_TEST_SUITE(script_tests)\n+BOOST_FIXTURE_TEST_SUITE(script_tests, BasicTestingSetup)\n \n CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)\n {"
      },
      {
        "sha": "24c7dd3d5a4745efa22d7a0d89087fa2f9510685",
        "filename": "src/test/scriptnum_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/scriptnum_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/scriptnum_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scriptnum_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -4,10 +4,13 @@\n \n #include \"bignum.h\"\n #include \"script/script.h\"\n+#include \"test/test_bitcoin.h\"\n+\n #include <boost/test/unit_test.hpp>\n #include <limits.h>\n #include <stdint.h>\n-BOOST_AUTO_TEST_SUITE(scriptnum_tests)\n+\n+BOOST_FIXTURE_TEST_SUITE(scriptnum_tests, BasicTestingSetup)\n \n static const int64_t values[] = \\\n { 0, 1, CHAR_MIN, CHAR_MAX, UCHAR_MAX, SHRT_MIN, USHRT_MAX, INT_MIN, INT_MAX, UINT_MAX, LONG_MIN, LONG_MAX };"
      },
      {
        "sha": "cc8f2b788d6d579398165f9b2fcb52a2a49450ef",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -5,14 +5,15 @@\n #include \"serialize.h\"\n #include \"streams.h\"\n #include \"hash.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <stdint.h>\n \n #include <boost/test/unit_test.hpp>\n \n using namespace std;\n \n-BOOST_AUTO_TEST_SUITE(serialize_tests)\n+BOOST_FIXTURE_TEST_SUITE(serialize_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(sizes)\n {"
      },
      {
        "sha": "afb7a41bbd4b3af49520ec038bd40f9daeb459c2",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -10,6 +10,7 @@\n #include \"script/interpreter.h\"\n #include \"util.h\"\n #include \"version.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <iostream>\n \n@@ -115,7 +116,7 @@ void static RandomTransaction(CMutableTransaction &tx, bool fSingle) {\n     }\n }\n \n-BOOST_AUTO_TEST_SUITE(sighash_tests)\n+BOOST_FIXTURE_TEST_SUITE(sighash_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(sighash_test)\n {"
      },
      {
        "sha": "b26fed99f2a60935074f94e9fc680955047895a7",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -7,6 +7,7 @@\n #include \"script/script.h\"\n #include \"script/standard.h\"\n #include \"uint256.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <vector>\n \n@@ -23,7 +24,7 @@ Serialize(const CScript& s)\n     return sSerialized;\n }\n \n-BOOST_AUTO_TEST_SUITE(sigopcount_tests)\n+BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(GetSigOpCount)\n {"
      },
      {
        "sha": "86a4bc67272ef475f6800d078b70853999b81627",
        "filename": "src/test/skiplist_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/skiplist_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/skiplist_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/skiplist_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -5,14 +5,15 @@\n #include \"main.h\"\n #include \"random.h\"\n #include \"util.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n #define SKIPLIST_LENGTH 300000\n \n-BOOST_AUTO_TEST_SUITE(skiplist_tests)\n+BOOST_FIXTURE_TEST_SUITE(skiplist_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(skiplist_test)\n {"
      },
      {
        "sha": "48e49ed757cf938da607f20f37c4c546ad3b4e82",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -26,11 +26,17 @@ CWallet* pwalletMain;\n extern bool fPrintToConsole;\n extern void noui_connect();\n \n-TestingSetup::TestingSetup()\n+BasicTestingSetup::BasicTestingSetup()\n {\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n         SelectParams(CBaseChainParams::MAIN);\n-        noui_connect();\n+}\n+BasicTestingSetup::~BasicTestingSetup()\n+{\n+}\n+\n+TestingSetup::TestingSetup()\n+{\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();\n #endif"
      },
      {
        "sha": "2f75332d40d0f5575dc5dd4fa72c4ac0441fb473",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -6,7 +6,19 @@\n #include <boost/filesystem.hpp>\n #include <boost/thread.hpp>\n \n-struct TestingSetup {\n+/** Basic testing setup.\n+ * This just configures logging and chain parameters.\n+ */\n+struct BasicTestingSetup {\n+    BasicTestingSetup();\n+    ~BasicTestingSetup();\n+};\n+\n+/** Testing setup that configures a complete environment.\n+ * Included are data directory, coins database, script check threads\n+ * and wallet (if enabled) setup.\n+ */\n+struct TestingSetup: public BasicTestingSetup {\n     CCoinsViewDB *pcoinsdbview;\n     boost::filesystem::path pathTemp;\n     boost::thread_group threadGroup;"
      },
      {
        "sha": "887cfb47613e9fe81c23e2b88cb9438736e39185",
        "filename": "src/test/timedata_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/timedata_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/timedata_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/timedata_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -3,12 +3,13 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n //\n #include \"timedata.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>\n \n using namespace std;\n \n-BOOST_AUTO_TEST_SUITE(timedata_tests)\n+BOOST_FIXTURE_TEST_SUITE(timedata_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(util_MedianFilter)\n {"
      },
      {
        "sha": "2a3083316e939d9e53e8fd615d88f88ecf31d83c",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"data/tx_invalid.json.h\"\n #include \"data/tx_valid.json.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include \"clientversion.h\"\n #include \"key.h\"\n@@ -75,7 +76,7 @@ string FormatScriptFlags(unsigned int flags)\n     return ret.substr(0, ret.size() - 1);\n }\n \n-BOOST_AUTO_TEST_SUITE(transaction_tests)\n+BOOST_FIXTURE_TEST_SUITE(transaction_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(tx_valid)\n {"
      },
      {
        "sha": "426d296a9ac56cf623e0be806c1b87a4ca3e81c0",
        "filename": "src/test/uint256_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint256_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -4,6 +4,7 @@\n #include \"arith_uint256.h\"\n #include \"uint256.h\"\n #include \"version.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>\n #include <stdint.h>\n@@ -14,7 +15,7 @@\n #include <string>\n #include <stdio.h>\n \n-BOOST_AUTO_TEST_SUITE(uint256_tests)\n+BOOST_FIXTURE_TEST_SUITE(uint256_tests, BasicTestingSetup)\n \n const unsigned char R1Array[] =\n     \"\\x9c\\x52\\x4a\\xdb\\xcf\\x56\\x11\\x12\\x2b\\x29\\x12\\x5e\\x5d\\x35\\xd2\\xd2\""
      },
      {
        "sha": "8cecfbf651666a8a5eba2f8cd65f042117ee51c3",
        "filename": "src/test/univalue_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/univalue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/univalue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/univalue_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -7,12 +7,13 @@\n #include <string>\n #include <map>\n #include \"univalue/univalue.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>\n \n using namespace std;\n \n-BOOST_AUTO_TEST_SUITE(univalue_tests)\n+BOOST_FIXTURE_TEST_SUITE(univalue_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(univalue_constructor)\n {"
      },
      {
        "sha": "3309e2e387737f252ab63bd7e7f1f625a346d1a2",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164d7b674b49b3c062d0331f28d21ad4f6bf5207/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "patch": "@@ -10,6 +10,7 @@\n #include \"sync.h\"\n #include \"utilstrencodings.h\"\n #include \"utilmoneystr.h\"\n+#include \"test/test_bitcoin.h\"\n \n #include <stdint.h>\n #include <vector>\n@@ -18,7 +19,7 @@\n \n using namespace std;\n \n-BOOST_AUTO_TEST_SUITE(util_tests)\n+BOOST_FIXTURE_TEST_SUITE(util_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(util_criticalsection)\n {"
      }
    ]
  },
  {
    "sha": "dd4ffcec0ea561e16c4621b31712166717db3e0b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDRmZmNlYzBlYTU2MWUxNmM0NjIxYjMxNzEyMTY2NzE3ZGIzZTBi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-12T10:13:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-12T10:14:03Z"
      },
      "message": "Merge pull request #5859\n\n9519a9a Add correct bool combiner for net signals (Pieter Wuille)",
      "tree": {
        "sha": "287c1b988fa2d912ff4f830317d77482b554f0b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/287c1b988fa2d912ff4f830317d77482b554f0b7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd4ffcec0ea561e16c4621b31712166717db3e0b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVAWbrAAoJEHSBCwEjRsmm4A8H/iXD1ftuC8wprbvUZVZZjFVa\nvFH9uF8iZuREj37cHaiT06G7fGBwrNMApTRgQO1IoQqpYdjqlHl1iPW7AC+r2bYS\nHfEOICNtgW4aHDeZTgIj8qiKIFpItjY0SFdI9h0KjNU64iekuj6STpDVz96DRh4U\nHFs/6hOoqvM9PwSmomD8YgHiicDqmJO7To1Yv3/PAwlrepjr/O25EDMLZpj25V8m\n0i1s+rCKwyicsm6bi9yvrGFPOkUGmV+a+uxzX2qtondMmEtg95sFaimYgyl2Os2H\nikuO7pfv//PqQcBJT2UgjWRL6CAHosALJGE8mvlM3jLD9Wjb58ezq17ajuEo4b8=\n=yutv\n-----END PGP SIGNATURE-----",
        "payload": "tree 287c1b988fa2d912ff4f830317d77482b554f0b7\nparent 164d7b674b49b3c062d0331f28d21ad4f6bf5207\nparent 9519a9a4202cd5fcaaad6d4cf0bf6bad38a27369\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1426155237 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1426155243 +0100\n\nMerge pull request #5859\n\n9519a9a Add correct bool combiner for net signals (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd4ffcec0ea561e16c4621b31712166717db3e0b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd4ffcec0ea561e16c4621b31712166717db3e0b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd4ffcec0ea561e16c4621b31712166717db3e0b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/164d7b674b49b3c062d0331f28d21ad4f6bf5207",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/164d7b674b49b3c062d0331f28d21ad4f6bf5207"
      },
      {
        "sha": "9519a9a4202cd5fcaaad6d4cf0bf6bad38a27369",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9519a9a4202cd5fcaaad6d4cf0bf6bad38a27369",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9519a9a4202cd5fcaaad6d4cf0bf6bad38a27369"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 34,
      "deletions": 2
    },
    "files": [
      {
        "sha": "9fc6ce68d03c656a2e31ea436e6d27afc2857ce3",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 17,
        "deletions": 2,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd4ffcec0ea561e16c4621b31712166717db3e0b/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd4ffcec0ea561e16c4621b31712166717db3e0b/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=dd4ffcec0ea561e16c4621b31712166717db3e0b",
        "patch": "@@ -78,12 +78,27 @@ void SocketSendData(CNode *pnode);\n \n typedef int NodeId;\n \n+struct CombinerAll\n+{\n+    typedef bool result_type;\n+\n+    template<typename I>\n+    bool operator()(I first, I last) const\n+    {\n+        while (first != last) {\n+            if (!(*first)) return false;\n+            ++first;\n+        }\n+        return true;\n+    }\n+};\n+\n // Signals for message handling\n struct CNodeSignals\n {\n     boost::signals2::signal<int ()> GetHeight;\n-    boost::signals2::signal<bool (CNode*)> ProcessMessages;\n-    boost::signals2::signal<bool (CNode*, bool)> SendMessages;\n+    boost::signals2::signal<bool (CNode*), CombinerAll> ProcessMessages;\n+    boost::signals2::signal<bool (CNode*, bool), CombinerAll> SendMessages;\n     boost::signals2::signal<void (NodeId, const CNode*)> InitializeNode;\n     boost::signals2::signal<void (NodeId)> FinalizeNode;\n };"
      },
      {
        "sha": "9ec533bcca7e757e84a7821a38b1b5aeac009389",
        "filename": "src/test/main_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd4ffcec0ea561e16c4621b31712166717db3e0b/src/test/main_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd4ffcec0ea561e16c4621b31712166717db3e0b/src/test/main_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main_tests.cpp?ref=dd4ffcec0ea561e16c4621b31712166717db3e0b",
        "patch": "@@ -23,4 +23,21 @@ BOOST_AUTO_TEST_CASE(subsidy_limit_test)\n     BOOST_CHECK(nSum == 2099999997690000ULL);\n }\n \n+bool ReturnFalse() { return false; }\n+bool ReturnTrue() { return true; }\n+\n+BOOST_AUTO_TEST_CASE(test_combiner_all)\n+{\n+    boost::signals2::signal<bool (), CombinerAll> Test;\n+    BOOST_CHECK(Test());\n+    Test.connect(&ReturnFalse);\n+    BOOST_CHECK(!Test());\n+    Test.connect(&ReturnTrue);\n+    BOOST_CHECK(!Test());\n+    Test.disconnect(&ReturnFalse);\n+    BOOST_CHECK(Test());\n+    Test.disconnect(&ReturnTrue);\n+    BOOST_CHECK(Test());\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "50c72f23ad5f7fcd13bf016f79cac6323c329caf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MGM3MmYyM2FkNWY3ZmNkMTNiZjAxNmY3OWNhYzYzMjNjMzI5Y2Fm",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-02-03T20:09:47Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-03-12T13:13:02Z"
      },
      "message": "[Move Only] Move wallet related things to src/wallet/\n\ncould once be renamed from /src/wallet to /src/legacywallet.",
      "tree": {
        "sha": "2ea49700ab27d3e9705f7a035f1a5783beed4ca2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ea49700ab27d3e9705f7a035f1a5783beed4ca2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/50c72f23ad5f7fcd13bf016f79cac6323c329caf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50c72f23ad5f7fcd13bf016f79cac6323c329caf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/50c72f23ad5f7fcd13bf016f79cac6323c329caf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50c72f23ad5f7fcd13bf016f79cac6323c329caf/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e564e63ef04e55b1e446f8440d51c611bc41cec6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e564e63ef04e55b1e446f8440d51c611bc41cec6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e564e63ef04e55b1e446f8440d51c611bc41cec6"
      }
    ],
    "stats": {
      "total": 106,
      "additions": 53,
      "deletions": 53
    },
    "files": [
      {
        "sha": "c30368c5bf953dc641f4872d97cc09831681ffa7",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -90,7 +90,7 @@ BITCOIN_CORE_H = \\\n   compressor.h \\\n   core_io.h \\\n   crypter.h \\\n-  db.h \\\n+  wallet/db.h \\\n   eccryptoverify.h \\\n   ecwrapper.h \\\n   hash.h \\\n@@ -138,9 +138,9 @@ BITCOIN_CORE_H = \\\n   utilstrencodings.h \\\n   utiltime.h \\\n   version.h \\\n-  walletdb.h \\\n-  wallet.h \\\n-  wallet_ismine.h \\\n+  wallet/walletdb.h \\\n+  wallet/wallet.h \\\n+  wallet/wallet_ismine.h \\\n   compat/byteswap.h \\\n   compat/endian.h \\\n   compat/sanity.h\n@@ -196,13 +196,13 @@ libbitcoin_server_a_SOURCES = \\\n # when wallet enabled\n libbitcoin_wallet_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n libbitcoin_wallet_a_SOURCES = \\\n-  db.cpp \\\n+  wallet/db.cpp \\\n   crypter.cpp \\\n-  rpcdump.cpp \\\n-  rpcwallet.cpp \\\n-  wallet.cpp \\\n-  wallet_ismine.cpp \\\n-  walletdb.cpp \\\n+  wallet/rpcdump.cpp \\\n+  wallet/rpcwallet.cpp \\\n+  wallet/wallet.cpp \\\n+  wallet/wallet_ismine.cpp \\\n+  wallet/walletdb.cpp \\\n   $(BITCOIN_CORE_H)\n \n # crypto primitives library"
      },
      {
        "sha": "8dd0a28454fa8f832946ca927015a3c9193f754c",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -76,7 +76,7 @@ BITCOIN_TESTS =\\\n if ENABLE_WALLET\n BITCOIN_TESTS += \\\n   test/accounting_tests.cpp \\\n-  test/wallet_tests.cpp \\\n+  wallet/test/wallet_tests.cpp \\\n   test/rpc_wallet_tests.cpp\n endif\n "
      },
      {
        "sha": "a930a97a94f43161072dec6f1d54a2b8fc00ceed",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -24,9 +24,9 @@\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n #ifdef ENABLE_WALLET\n-#include \"db.h\"\n-#include \"wallet.h\"\n-#include \"walletdb.h\"\n+#include \"wallet/db.h\"\n+#include \"wallet/wallet.h\"\n+#include \"wallet/walletdb.h\"\n #endif\n \n #include <stdint.h>"
      },
      {
        "sha": "01212b19c4cdb118f757f8987826065a0969b80a",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -15,7 +15,7 @@\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n #ifdef ENABLE_WALLET\n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n #endif\n \n #include <boost/thread.hpp>"
      },
      {
        "sha": "9573fe43df8abec0c95abdf59a56b6cd556e1c93",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -8,7 +8,7 @@\n #include \"walletmodel.h\"\n \n #include \"base58.h\"\n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n \n #include <QFont>\n #include <QDebug>"
      },
      {
        "sha": "3ae780abfd8d6ad7e1074f7f20591ab73757b62f",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -30,7 +30,7 @@\n #include \"util.h\"\n \n #ifdef ENABLE_WALLET\n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n #endif\n \n #include <stdint.h>"
      },
      {
        "sha": "6d7ef70a706efeb694e073e1601351b7eab0aea9",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -15,7 +15,7 @@\n \n #include \"coincontrol.h\"\n #include \"main.h\"\n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n \n #include <boost/assign/list_of.hpp> // for 'map_list_of()'\n "
      },
      {
        "sha": "a9e4b339e485c3cced6588d315ba937213ae21c5",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -18,7 +18,7 @@\n #include \"txdb.h\" // for -dbcache defaults\n \n #ifdef ENABLE_WALLET\n-#include \"wallet.h\" // for CWallet::minTxFee\n+#include \"wallet/wallet.h\" // for CWallet::minTxFee\n #endif\n \n #include <boost/thread.hpp>"
      },
      {
        "sha": "a169ed6b55a5817d66fae647b57ef8d2534c18d3",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -18,8 +18,8 @@\n #include \"txdb.h\" // for -dbcache defaults\n \n #ifdef ENABLE_WALLET\n-#include \"wallet.h\"\n-#include \"walletdb.h\"\n+#include \"wallet/wallet.h\"\n+#include \"wallet/walletdb.h\"\n #endif\n \n #include <QNetworkProxy>"
      },
      {
        "sha": "40d6e16f519c5c06dbc433bc656c70bc43799db3",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -12,7 +12,7 @@\n #include \"chainparams.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n \n #include <cstdlib>\n "
      },
      {
        "sha": "2ec180c3ac43de6ea7a85e7b6a4a4649ca00798c",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -18,7 +18,7 @@\n #include \"base58.h\"\n #include \"coincontrol.h\"\n #include \"ui_interface.h\"\n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n \n #include <QMessageBox>\n #include <QScrollBar>"
      },
      {
        "sha": "76da6904a98691621896c4ae599bc6f711070819",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -12,7 +12,7 @@\n \n #include \"base58.h\"\n #include \"init.h\"\n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n \n #include <string>\n #include <vector>"
      },
      {
        "sha": "414fe02ff9b03f3e0ea705a700c4192fac0717e5",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -12,7 +12,7 @@\n #include \"version.h\"\n \n #ifdef ENABLE_WALLET\n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n #endif\n \n #include <QApplication>"
      },
      {
        "sha": "9b235f9130244fbf26c56ba4eec95e063d8bf3d0",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -10,13 +10,13 @@\n #include \"transactionrecord.h\"\n \n #include \"base58.h\"\n-#include \"db.h\"\n+#include \"wallet/db.h\"\n #include \"main.h\"\n #include \"script/script.h\"\n #include \"timedata.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n \n #include <stdint.h>\n #include <string>"
      },
      {
        "sha": "19e3fc0dc28bfbeb459dcd5e7b9c8fcb3f6a4d39",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -6,7 +6,7 @@\n \n #include \"base58.h\"\n #include \"timedata.h\"\n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n \n #include <stdint.h>\n "
      },
      {
        "sha": "dff2676b10bab6e18fe4837eb471c693aa7edc3e",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -17,7 +17,7 @@\n #include \"sync.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n \n #include <QColor>\n #include <QDateTime>"
      },
      {
        "sha": "d4e88c1a51c99c5864fbc547617457e22b216ab2",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -11,13 +11,13 @@\n #include \"transactiontablemodel.h\"\n \n #include \"base58.h\"\n-#include \"db.h\"\n+#include \"wallet/db.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"sync.h\"\n #include \"ui_interface.h\"\n-#include \"wallet.h\"\n-#include \"walletdb.h\" // for BackupWallet\n+#include \"wallet/wallet.h\"\n+#include \"wallet/walletdb.h\" // for BackupWallet\n \n #include <stdint.h>\n "
      },
      {
        "sha": "d9129077f59763cbc3d180103532083c12babfde",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -4,7 +4,7 @@\n \n #include \"walletmodeltransaction.h\"\n \n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n \n WalletModelTransaction::WalletModelTransaction(const QList<SendCoinsRecipient> &recipients) :\n     recipients(recipients),"
      },
      {
        "sha": "a07acea9aad67976430023978172888e9df1e973",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -14,8 +14,8 @@\n #include \"rpcserver.h\"\n #include \"util.h\"\n #ifdef ENABLE_WALLET\n-#include \"db.h\"\n-#include \"wallet.h\"\n+#include \"wallet/db.h\"\n+#include \"wallet/wallet.h\"\n #endif\n \n #include <stdint.h>"
      },
      {
        "sha": "938d79513f38688a0c6be24ac6d8532f74683a59",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -13,8 +13,8 @@\n #include \"timedata.h\"\n #include \"util.h\"\n #ifdef ENABLE_WALLET\n-#include \"wallet.h\"\n-#include \"walletdb.h\"\n+#include \"wallet/wallet.h\"\n+#include \"wallet/walletdb.h\"\n #endif\n \n #include <stdint.h>"
      },
      {
        "sha": "a79b4e33940873201f153ec7c8175a765a816884",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -16,7 +16,7 @@\n #include \"script/standard.h\"\n #include \"uint256.h\"\n #ifdef ENABLE_WALLET\n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n #endif\n \n #include <stdint.h>"
      },
      {
        "sha": "ba71725222edfde4d94160accc039a2c59af68ac",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -13,7 +13,7 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n #ifdef ENABLE_WALLET\n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n #endif\n \n #include <boost/algorithm/string.hpp>"
      },
      {
        "sha": "0c2ade48d629c895e8d9ad619b80c75cca1cc89b",
        "filename": "src/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/accounting_tests.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"wallet.h\"\n-#include \"walletdb.h\"\n+#include \"wallet/wallet.h\"\n+#include \"wallet/walletdb.h\"\n \n #include \"test/test_bitcoin.h\"\n "
      },
      {
        "sha": "431ad995ded36d2f34e284c65fb4a2c3a5cfb291",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -12,7 +12,7 @@\n #include \"uint256.h\"\n \n #ifdef ENABLE_WALLET\n-#include \"wallet_ismine.h\"\n+#include \"wallet/wallet_ismine.h\"\n #endif\n \n #include <boost/foreach.hpp>"
      },
      {
        "sha": "d97bea8bd2a9c5c516a58e37449d58daf3fa4567",
        "filename": "src/test/rpc_wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_wallet_tests.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -6,7 +6,7 @@\n #include \"rpcclient.h\"\n \n #include \"base58.h\"\n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n \n #include \"test/test_bitcoin.h\"\n "
      },
      {
        "sha": "357c8e93c91d84dd9c49c41490b0e32220d226f4",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -10,7 +10,7 @@\n #include \"script/sign.h\"\n \n #ifdef ENABLE_WALLET\n-#include \"wallet_ismine.h\"\n+#include \"wallet/wallet_ismine.h\"\n #endif\n \n #include <vector>"
      },
      {
        "sha": "35f2ecd287957950bc0b573dda2b023a677339f0",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -12,8 +12,8 @@\n #include \"ui_interface.h\"\n #include \"util.h\"\n #ifdef ENABLE_WALLET\n-#include \"db.h\"\n-#include \"wallet.h\"\n+#include \"wallet/db.h\"\n+#include \"wallet/wallet.h\"\n #endif\n \n #include <boost/filesystem.hpp>"
      },
      {
        "sha": "36946b7dcca255e08a00529f441a2787227386d2",
        "filename": "src/wallet/db.cpp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "previous_filename": "src/db.cpp"
      },
      {
        "sha": "71133f969914ae47559f15a5ecf07e30a1644526",
        "filename": "src/wallet/db.h",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "previous_filename": "src/db.h"
      },
      {
        "sha": "b9c92a06c5deb2e8696019a51d0d29fa69a41c95",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "previous_filename": "src/rpcdump.cpp"
      },
      {
        "sha": "d097b6a0fafc2042efbcc220216e308742b72348",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "previous_filename": "src/rpcwallet.cpp"
      },
      {
        "sha": "a5bc52b8dc94e29606cf3bcfb4f875d77b253829",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "renamed",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n \n #include <set>\n #include <stdint.h>",
        "previous_filename": "src/test/wallet_tests.cpp"
      },
      {
        "sha": "5b4add8431844c1bd2763159ea83a5a354d23356",
        "filename": "src/wallet/wallet.cpp",
        "status": "renamed",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -3,7 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n \n #include \"base58.h\"\n #include \"checkpoints.h\"",
        "previous_filename": "src/wallet.cpp"
      },
      {
        "sha": "093336080e842f02da33d5daee64493c2024c3b7",
        "filename": "src/wallet/wallet.h",
        "status": "renamed",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -14,8 +14,8 @@\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"ui_interface.h\"\n-#include \"wallet_ismine.h\"\n-#include \"walletdb.h\"\n+#include \"wallet/wallet_ismine.h\"\n+#include \"wallet/walletdb.h\"\n \n #include <algorithm>\n #include <map>",
        "previous_filename": "src/wallet.h"
      },
      {
        "sha": "5482348e356abda372fb5b3b5a3e3e8f8fcf5796",
        "filename": "src/wallet/wallet_ismine.cpp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/wallet/wallet_ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/wallet/wallet_ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet_ismine.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "previous_filename": "src/wallet_ismine.cpp"
      },
      {
        "sha": "6293df8b10e596ed16453af32901e9aeaa97aee1",
        "filename": "src/wallet/wallet_ismine.h",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/wallet/wallet_ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/wallet/wallet_ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet_ismine.h?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "previous_filename": "src/wallet_ismine.h"
      },
      {
        "sha": "880026d187c3f325e1c6379fb8192ca2fe29d22c",
        "filename": "src/wallet/walletdb.cpp",
        "status": "renamed",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -3,15 +3,15 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"walletdb.h\"\n+#include \"wallet/walletdb.h\"\n \n #include \"base58.h\"\n #include \"protocol.h\"\n #include \"serialize.h\"\n #include \"sync.h\"\n #include \"util.h\"\n #include \"utiltime.h\"\n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n \n #include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>",
        "previous_filename": "src/walletdb.cpp"
      },
      {
        "sha": "6aa0fa40df09f090dc4febb38db8b37c42155e6a",
        "filename": "src/wallet/walletdb.h",
        "status": "renamed",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c72f23ad5f7fcd13bf016f79cac6323c329caf/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "patch": "@@ -7,7 +7,7 @@\n #define BITCOIN_WALLETDB_H\n \n #include \"amount.h\"\n-#include \"db.h\"\n+#include \"wallet/db.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n ",
        "previous_filename": "src/walletdb.h"
      }
    ]
  },
  {
    "sha": "a9af415887f03cb2565895bc55be72748549e527",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOWFmNDE1ODg3ZjAzY2IyNTY1ODk1YmM1NWJlNzI3NDg1NDllNTI3",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-03-11T15:56:44Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-03-12T14:15:33Z"
      },
      "message": "fix InvalidateBlock to repopulate setBlockIndexCandidates",
      "tree": {
        "sha": "72c95055ea10a624e1977a69658d64e6bc2cadef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/72c95055ea10a624e1977a69658d64e6bc2cadef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9af415887f03cb2565895bc55be72748549e527",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9af415887f03cb2565895bc55be72748549e527",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9af415887f03cb2565895bc55be72748549e527",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9af415887f03cb2565895bc55be72748549e527/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd4ffcec0ea561e16c4621b31712166717db3e0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd4ffcec0ea561e16c4621b31712166717db3e0b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd4ffcec0ea561e16c4621b31712166717db3e0b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9b4bb431283dee97de6a8a9e167f4f7ca62c60e8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9af415887f03cb2565895bc55be72748549e527/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9af415887f03cb2565895bc55be72748549e527/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a9af415887f03cb2565895bc55be72748549e527",
        "patch": "@@ -2311,7 +2311,7 @@ bool InvalidateBlock(CValidationState& state, CBlockIndex *pindex) {\n     BlockMap::iterator it = mapBlockIndex.begin();\n     while (it != mapBlockIndex.end()) {\n         if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->nChainTx && setBlockIndexCandidates.value_comp()(chainActive.Tip(), it->second)) {\n-            setBlockIndexCandidates.insert(pindex);\n+            setBlockIndexCandidates.insert(it->second);\n         }\n         it++;\n     }"
      }
    ]
  },
  {
    "sha": "88f6c8c3657cba81c65da34a7161c860c8a23c5f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OGY2YzhjMzY1N2NiYTgxYzY1ZGEzNGE3MTYxYzg2MGM4YTIzYzVm",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-03-11T15:58:40Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-03-12T14:15:33Z"
      },
      "message": "add RPC test for InvalidateBlock",
      "tree": {
        "sha": "e0bfa1f89c19d8f60232be0e0788c1f82e6c0637",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e0bfa1f89c19d8f60232be0e0788c1f82e6c0637"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/88f6c8c3657cba81c65da34a7161c860c8a23c5f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88f6c8c3657cba81c65da34a7161c860c8a23c5f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/88f6c8c3657cba81c65da34a7161c860c8a23c5f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88f6c8c3657cba81c65da34a7161c860c8a23c5f/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a9af415887f03cb2565895bc55be72748549e527",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9af415887f03cb2565895bc55be72748549e527",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9af415887f03cb2565895bc55be72748549e527"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 51,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a8bfbe6e6c7f2ca1e3fb0acfc9933ab840dc4934",
        "filename": "qa/rpc-tests/invalidateblock.py",
        "status": "added",
        "additions": 51,
        "deletions": 0,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88f6c8c3657cba81c65da34a7161c860c8a23c5f/qa/rpc-tests/invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88f6c8c3657cba81c65da34a7161c860c8a23c5f/qa/rpc-tests/invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidateblock.py?ref=88f6c8c3657cba81c65da34a7161c860c8a23c5f",
        "patch": "@@ -0,0 +1,51 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test InvalidateBlock code\n+#\n+\n+from test_framework import BitcoinTestFramework\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+from util import *\n+\n+class InvalidateTest(BitcoinTestFramework):\n+    \n+        \n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 2)\n+                 \n+    def setup_network(self):\n+        self.nodes = []\n+        self.is_network_split = False \n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\"]))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\"]))\n+        \n+    def run_test(self):\n+        print \"Mine 4 blocks on Node 0\"\n+        self.nodes[0].setgenerate(True, 4)\n+        assert(self.nodes[0].getblockcount() == 4)\n+        besthash = self.nodes[0].getbestblockhash()\n+\n+        print \"Mine competing 6 blocks on Node 1\"\n+        self.nodes[1].setgenerate(True, 6)\n+        assert(self.nodes[1].getblockcount() == 6)\n+\n+        print \"Connect nodes to force a reorg\"\n+        connect_nodes_bi(self.nodes,0,1)\n+        sync_blocks(self.nodes)\n+        assert(self.nodes[0].getblockcount() == 6)\n+        badhash = self.nodes[1].getblockhash(2)\n+\n+        print \"Invalidate block 2 on node 0 and verify we reorg to node 0's original chain\"\n+        self.nodes[0].invalidateblock(badhash)\n+        newheight = self.nodes[0].getblockcount()\n+        newhash = self.nodes[0].getbestblockhash()\n+        if (newheight != 4 or newhash != besthash):\n+            raise AssertionError(\"Wrong tip for node0, hash %s, height %d\"%(newhash,newheight))\n+\n+if __name__ == '__main__':\n+    InvalidateTest().main()"
      }
    ]
  },
  {
    "sha": "e96c5184e783cf940956bf803dae8690dcf2b496",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOTZjNTE4NGU3ODNjZjk0MDk1NmJmODAzZGFlODY5MGRjZjJiNDk2",
    "commit": {
      "author": {
        "name": "fsb4000",
        "email": "fsb4000@yandex.ru",
        "date": "2015-03-12T14:13:49Z"
      },
      "committer": {
        "name": "fsb4000",
        "email": "fsb4000@yandex.ru",
        "date": "2015-03-12T16:17:22Z"
      },
      "message": "BUGFIX: Stack around the variable 'rv' was corrupted",
      "tree": {
        "sha": "dd005a556e66cf569bd8dbbc0014d675f508e5c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd005a556e66cf569bd8dbbc0014d675f508e5c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e96c5184e783cf940956bf803dae8690dcf2b496",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e96c5184e783cf940956bf803dae8690dcf2b496",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e96c5184e783cf940956bf803dae8690dcf2b496",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e96c5184e783cf940956bf803dae8690dcf2b496/comments",
    "author": {
      "login": "fsb4000",
      "id": 4289847,
      "node_id": "MDQ6VXNlcjQyODk4NDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4289847?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fsb4000",
      "html_url": "https://github.com/fsb4000",
      "followers_url": "https://api.github.com/users/fsb4000/followers",
      "following_url": "https://api.github.com/users/fsb4000/following{/other_user}",
      "gists_url": "https://api.github.com/users/fsb4000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fsb4000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fsb4000/subscriptions",
      "organizations_url": "https://api.github.com/users/fsb4000/orgs",
      "repos_url": "https://api.github.com/users/fsb4000/repos",
      "events_url": "https://api.github.com/users/fsb4000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fsb4000/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fsb4000",
      "id": 4289847,
      "node_id": "MDQ6VXNlcjQyODk4NDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4289847?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fsb4000",
      "html_url": "https://github.com/fsb4000",
      "followers_url": "https://api.github.com/users/fsb4000/followers",
      "following_url": "https://api.github.com/users/fsb4000/following{/other_user}",
      "gists_url": "https://api.github.com/users/fsb4000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fsb4000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fsb4000/subscriptions",
      "organizations_url": "https://api.github.com/users/fsb4000/orgs",
      "repos_url": "https://api.github.com/users/fsb4000/repos",
      "events_url": "https://api.github.com/users/fsb4000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fsb4000/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd4ffcec0ea561e16c4621b31712166717db3e0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd4ffcec0ea561e16c4621b31712166717db3e0b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd4ffcec0ea561e16c4621b31712166717db3e0b"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "25148808c67efe4f87c0ce275841c04d47b04dd4",
        "filename": "src/uint256.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e96c5184e783cf940956bf803dae8690dcf2b496/src/uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e96c5184e783cf940956bf803dae8690dcf2b496/src/uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.cpp?ref=e96c5184e783cf940956bf803dae8690dcf2b496",
        "patch": "@@ -45,7 +45,7 @@ void base_blob<BITS>::SetHex(const char* psz)\n         psz++;\n     psz--;\n     unsigned char* p1 = (unsigned char*)data;\n-    unsigned char* pend = p1 + WIDTH * 4;\n+    unsigned char* pend = p1 + WIDTH;\n     while (psz >= pbegin && p1 < pend) {\n         *p1 = ::HexDigit(*psz--);\n         if (psz >= pbegin) {\n@@ -128,7 +128,7 @@ uint64_t uint256::GetHash(const uint256& salt) const\n     uint32_t a, b, c;\n     const uint32_t *pn = (const uint32_t*)data;\n     const uint32_t *salt_pn = (const uint32_t*)salt.data;\n-    a = b = c = 0xdeadbeef + (WIDTH << 2);\n+    a = b = c = 0xdeadbeef + WIDTH;\n \n     a += pn[0] ^ salt_pn[0];\n     b += pn[1] ^ salt_pn[1];"
      }
    ]
  },
  {
    "sha": "84a7789b291ee7c72cf02f777f3011243f384d95",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NGE3Nzg5YjI5MWVlN2M3MmNmMDJmNzc3ZjMwMTEyNDNmMzg0ZDk1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-12T16:49:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-12T16:50:02Z"
      },
      "message": "Merge pull request #5879\n\n88f6c8c add RPC test for InvalidateBlock (Alex Morcos)\na9af415 fix InvalidateBlock to repopulate setBlockIndexCandidates (Alex Morcos)",
      "tree": {
        "sha": "e0bfa1f89c19d8f60232be0e0788c1f82e6c0637",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e0bfa1f89c19d8f60232be0e0788c1f82e6c0637"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84a7789b291ee7c72cf02f777f3011243f384d95",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVAcO6AAoJEHSBCwEjRsmmL0cH+wd+HKqfYhxC37ndg4tCgqY6\noZeEinBG9BdJwXbzkSRUasTY5eOIbPnsqxqznwtjyRiTBq6s+jWRF3lncVedQLVy\nx69omWvm7rD/XUOovRMtMe4ODixYNMJxTONsSEnXkYoGU4L8zrm6v9auWgfE7JR6\nxr/T0SLon0Bcu/NgC7kg0AE+nbr0o5xoamx5K1PZIDaR7zQqChi5z75wfgTd7R1e\nRU0GEQqvGZaQv11mRs2B0B0Yzgh8Gr4nPQFahfGn49iKoE7fESGyts+g9CQRCI1y\nzAssi9lf3zNoeVxVlqVGtFprtVO1ahBl25tLE0OSPj1ZlXNox4d4xld/TrNDY4c=\n=ifX0\n-----END PGP SIGNATURE-----",
        "payload": "tree e0bfa1f89c19d8f60232be0e0788c1f82e6c0637\nparent dd4ffcec0ea561e16c4621b31712166717db3e0b\nparent 88f6c8c3657cba81c65da34a7161c860c8a23c5f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1426178988 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1426179002 +0100\n\nMerge pull request #5879\n\n88f6c8c add RPC test for InvalidateBlock (Alex Morcos)\na9af415 fix InvalidateBlock to repopulate setBlockIndexCandidates (Alex Morcos)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84a7789b291ee7c72cf02f777f3011243f384d95",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/84a7789b291ee7c72cf02f777f3011243f384d95",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84a7789b291ee7c72cf02f777f3011243f384d95/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd4ffcec0ea561e16c4621b31712166717db3e0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd4ffcec0ea561e16c4621b31712166717db3e0b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd4ffcec0ea561e16c4621b31712166717db3e0b"
      },
      {
        "sha": "88f6c8c3657cba81c65da34a7161c860c8a23c5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88f6c8c3657cba81c65da34a7161c860c8a23c5f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88f6c8c3657cba81c65da34a7161c860c8a23c5f"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 52,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a8bfbe6e6c7f2ca1e3fb0acfc9933ab840dc4934",
        "filename": "qa/rpc-tests/invalidateblock.py",
        "status": "added",
        "additions": 51,
        "deletions": 0,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84a7789b291ee7c72cf02f777f3011243f384d95/qa/rpc-tests/invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84a7789b291ee7c72cf02f777f3011243f384d95/qa/rpc-tests/invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidateblock.py?ref=84a7789b291ee7c72cf02f777f3011243f384d95",
        "patch": "@@ -0,0 +1,51 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test InvalidateBlock code\n+#\n+\n+from test_framework import BitcoinTestFramework\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+from util import *\n+\n+class InvalidateTest(BitcoinTestFramework):\n+    \n+        \n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 2)\n+                 \n+    def setup_network(self):\n+        self.nodes = []\n+        self.is_network_split = False \n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\"]))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\"]))\n+        \n+    def run_test(self):\n+        print \"Mine 4 blocks on Node 0\"\n+        self.nodes[0].setgenerate(True, 4)\n+        assert(self.nodes[0].getblockcount() == 4)\n+        besthash = self.nodes[0].getbestblockhash()\n+\n+        print \"Mine competing 6 blocks on Node 1\"\n+        self.nodes[1].setgenerate(True, 6)\n+        assert(self.nodes[1].getblockcount() == 6)\n+\n+        print \"Connect nodes to force a reorg\"\n+        connect_nodes_bi(self.nodes,0,1)\n+        sync_blocks(self.nodes)\n+        assert(self.nodes[0].getblockcount() == 6)\n+        badhash = self.nodes[1].getblockhash(2)\n+\n+        print \"Invalidate block 2 on node 0 and verify we reorg to node 0's original chain\"\n+        self.nodes[0].invalidateblock(badhash)\n+        newheight = self.nodes[0].getblockcount()\n+        newhash = self.nodes[0].getbestblockhash()\n+        if (newheight != 4 or newhash != besthash):\n+            raise AssertionError(\"Wrong tip for node0, hash %s, height %d\"%(newhash,newheight))\n+\n+if __name__ == '__main__':\n+    InvalidateTest().main()"
      },
      {
        "sha": "9b4bb431283dee97de6a8a9e167f4f7ca62c60e8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84a7789b291ee7c72cf02f777f3011243f384d95/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84a7789b291ee7c72cf02f777f3011243f384d95/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=84a7789b291ee7c72cf02f777f3011243f384d95",
        "patch": "@@ -2311,7 +2311,7 @@ bool InvalidateBlock(CValidationState& state, CBlockIndex *pindex) {\n     BlockMap::iterator it = mapBlockIndex.begin();\n     while (it != mapBlockIndex.end()) {\n         if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->nChainTx && setBlockIndexCandidates.value_comp()(chainActive.Tip(), it->second)) {\n-            setBlockIndexCandidates.insert(pindex);\n+            setBlockIndexCandidates.insert(it->second);\n         }\n         it++;\n     }"
      }
    ]
  },
  {
    "sha": "7077fe6dd4208bdbd46940f7923b7d89202c3287",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MDc3ZmU2ZGQ0MjA4YmRiZDQ2OTQwZjc5MjNiN2Q4OTIwMmMzMjg3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-12T17:02:35Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-12T17:16:24Z"
      },
      "message": "Merge pull request #5884\n\ne96c518 BUGFIX: Stack around the variable 'rv' was corrupted (fsb4000)",
      "tree": {
        "sha": "9df5b2d8ea4a0f5b5fa715e578bbf8b511bc79a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9df5b2d8ea4a0f5b5fa715e578bbf8b511bc79a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7077fe6dd4208bdbd46940f7923b7d89202c3287",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVAcnoAAoJEHSBCwEjRsmm5mgIALTNqXdKyFpMDa/GhnCV9F1X\nZtlDborNjjEwcKsowcsgCVSaPNCgDhA9hikJ+DcQQXJmker1Jq8eML40JhhioM55\nlL3Sm1BdI6RZyOtcpe/BoLNDLLcwd/Z5GB7Iuc7/aZZEApAYBWR+3e7PFHWxjStw\nteJsnc1j3xi1lcEyCu2QgT5Sc51+o/Pb+0DeAsJaJ74WjmKiDECjosqgvTVWB2bF\nCGjJQEH3voCWNhUSON2Vn3jMv+OcfFV1bvwFxA4z3UAtjoKAiauSwm2+rGk7C98i\nkrdWDaCEJKXLalp1+sMT3fYqwSeuE42vDcl7Lu54dCvdL/navLPVZaPUyHcW7wY=\n=PcX4\n-----END PGP SIGNATURE-----",
        "payload": "tree 9df5b2d8ea4a0f5b5fa715e578bbf8b511bc79a8\nparent 84a7789b291ee7c72cf02f777f3011243f384d95\nparent e96c5184e783cf940956bf803dae8690dcf2b496\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1426179755 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1426180584 +0100\n\nMerge pull request #5884\n\ne96c518 BUGFIX: Stack around the variable 'rv' was corrupted (fsb4000)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7077fe6dd4208bdbd46940f7923b7d89202c3287",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7077fe6dd4208bdbd46940f7923b7d89202c3287",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7077fe6dd4208bdbd46940f7923b7d89202c3287/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "84a7789b291ee7c72cf02f777f3011243f384d95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84a7789b291ee7c72cf02f777f3011243f384d95",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84a7789b291ee7c72cf02f777f3011243f384d95"
      },
      {
        "sha": "e96c5184e783cf940956bf803dae8690dcf2b496",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e96c5184e783cf940956bf803dae8690dcf2b496",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e96c5184e783cf940956bf803dae8690dcf2b496"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "25148808c67efe4f87c0ce275841c04d47b04dd4",
        "filename": "src/uint256.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7077fe6dd4208bdbd46940f7923b7d89202c3287/src/uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7077fe6dd4208bdbd46940f7923b7d89202c3287/src/uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.cpp?ref=7077fe6dd4208bdbd46940f7923b7d89202c3287",
        "patch": "@@ -45,7 +45,7 @@ void base_blob<BITS>::SetHex(const char* psz)\n         psz++;\n     psz--;\n     unsigned char* p1 = (unsigned char*)data;\n-    unsigned char* pend = p1 + WIDTH * 4;\n+    unsigned char* pend = p1 + WIDTH;\n     while (psz >= pbegin && p1 < pend) {\n         *p1 = ::HexDigit(*psz--);\n         if (psz >= pbegin) {\n@@ -128,7 +128,7 @@ uint64_t uint256::GetHash(const uint256& salt) const\n     uint32_t a, b, c;\n     const uint32_t *pn = (const uint32_t*)data;\n     const uint32_t *salt_pn = (const uint32_t*)salt.data;\n-    a = b = c = 0xdeadbeef + (WIDTH << 2);\n+    a = b = c = 0xdeadbeef + WIDTH;\n \n     a += pn[0] ^ salt_pn[0];\n     b += pn[1] ^ salt_pn[1];"
      }
    ]
  },
  {
    "sha": "292623adf59edea52b2927b3d67fd2ff7f997882",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTI2MjNhZGY1OWVkZWE1MmIyOTI3YjNkNjdmZDJmZjdmOTk3ODgy",
    "commit": {
      "author": {
        "name": "Cozz Lovan",
        "email": "cozzlovan@yahoo.com",
        "date": "2014-07-23T12:34:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-13T10:04:18Z"
      },
      "message": "Subtract fee from amount\n\nFixes #2724 and #1570.\n\nAdds the\nautomatically-subtract-the-fee-from-the-amount-and-send-whats-left\nfeature to the GUI and RPC (sendtoaddress,sendmany).",
      "tree": {
        "sha": "afec21b4e7ff1c2b551b060f5f435895d43d15d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afec21b4e7ff1c2b551b060f5f435895d43d15d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/292623adf59edea52b2927b3d67fd2ff7f997882",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/292623adf59edea52b2927b3d67fd2ff7f997882",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/292623adf59edea52b2927b3d67fd2ff7f997882",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/292623adf59edea52b2927b3d67fd2ff7f997882/comments",
    "author": {
      "login": "cozz",
      "id": 2814559,
      "node_id": "MDQ6VXNlcjI4MTQ1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2814559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cozz",
      "html_url": "https://github.com/cozz",
      "followers_url": "https://api.github.com/users/cozz/followers",
      "following_url": "https://api.github.com/users/cozz/following{/other_user}",
      "gists_url": "https://api.github.com/users/cozz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cozz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cozz/subscriptions",
      "organizations_url": "https://api.github.com/users/cozz/orgs",
      "repos_url": "https://api.github.com/users/cozz/repos",
      "events_url": "https://api.github.com/users/cozz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cozz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90a43c1e93318584d5443b513c2c0e937acb966a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90a43c1e93318584d5443b513c2c0e937acb966a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90a43c1e93318584d5443b513c2c0e937acb966a"
      }
    ],
    "stats": {
      "total": 310,
      "additions": 248,
      "deletions": 62
    },
    "files": [
      {
        "sha": "84d30239969c3afbdb84cea1442bafc8711ebb60",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/292623adf59edea52b2927b3d67fd2ff7f997882/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/292623adf59edea52b2927b3d67fd2ff7f997882/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=292623adf59edea52b2927b3d67fd2ff7f997882",
        "patch": "@@ -102,6 +102,21 @@ def run_test (self):\n         assert_equal(self.nodes[2].getbalance(), 100)\n         assert_equal(self.nodes[2].getbalance(\"from1\"), 100-21)\n \n+        # Send 10 XBT normal\n+        address = self.nodes[0].getnewaddress(\"test\")\n+        self.nodes[2].settxfee(Decimal('0.001'))\n+        txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", False)\n+        self.nodes[2].setgenerate(True, 1)\n+        self.sync_all()\n+        assert_equal(self.nodes[2].getbalance(), Decimal('89.99900000'))\n+        assert_equal(self.nodes[0].getbalance(), Decimal('10.00000000'))\n+\n+        # Send 10 XBT with subtract fee from amount\n+        txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", True)\n+        self.nodes[2].setgenerate(True, 1)\n+        self.sync_all()\n+        assert_equal(self.nodes[2].getbalance(), Decimal('79.99900000'))\n+        assert_equal(self.nodes[0].getbalance(), Decimal('19.99900000'))\n \n if __name__ == '__main__':\n     WalletTest ().main ()"
      },
      {
        "sha": "fdb8c50a46eac17acd75ce5778c8a0169aa46f69",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/292623adf59edea52b2927b3d67fd2ff7f997882/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/292623adf59edea52b2927b3d67fd2ff7f997882/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=292623adf59edea52b2927b3d67fd2ff7f997882",
        "patch": "@@ -134,7 +134,7 @@ class CTxOut\n \n     uint256 GetHash() const;\n \n-    bool IsDust(CFeeRate minRelayTxFee) const\n+    CAmount GetDustThreshold(const CFeeRate &minRelayTxFee) const\n     {\n         // \"Dust\" is defined in terms of CTransaction::minRelayTxFee,\n         // which has units satoshis-per-kilobyte.\n@@ -145,7 +145,12 @@ class CTxOut\n         // so dust is a txout less than 546 satoshis \n         // with default minRelayTxFee.\n         size_t nSize = GetSerializeSize(SER_DISK,0)+148u;\n-        return (nValue < 3*minRelayTxFee.GetFee(nSize));\n+        return 3*minRelayTxFee.GetFee(nSize);\n+    }\n+\n+    bool IsDust(const CFeeRate &minRelayTxFee) const\n+    {\n+        return (nValue < GetDustThreshold(minRelayTxFee));\n     }\n \n     friend bool operator==(const CTxOut& a, const CTxOut& b)"
      },
      {
        "sha": "5042ff06a26f64fac76aede09909aca3ec1c1c1e",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 5,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/292623adf59edea52b2927b3d67fd2ff7f997882/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/292623adf59edea52b2927b3d67fd2ff7f997882/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=292623adf59edea52b2927b3d67fd2ff7f997882",
        "patch": "@@ -33,6 +33,7 @@\n using namespace std;\n QList<CAmount> CoinControlDialog::payAmounts;\n CCoinControl* CoinControlDialog::coinControl = new CCoinControl();\n+bool CoinControlDialog::fSubtractFeeFromAmount = false;\n \n CoinControlDialog::CoinControlDialog(QWidget *parent) :\n     QDialog(parent),\n@@ -541,6 +542,11 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         dPriority = dPriorityInputs / (nBytes - nBytesInputs + (nQuantityUncompressed * 29)); // 29 = 180 - 151 (uncompressed public keys are over the limit. max 151 bytes of the input are ignored for priority)\n         sPriorityLabel = CoinControlDialog::getPriorityLabel(dPriority, mempoolEstimatePriority);\n \n+        // in the subtract fee from amount case, we can tell if zero change already and subtract the bytes, so that fee calculation afterwards is accurate\n+        if (CoinControlDialog::fSubtractFeeFromAmount)\n+            if (nAmount - nPayAmount == 0)\n+                nBytes -= 34;\n+\n         // Fee\n         nPayFee = CWallet::GetMinimumFee(nBytes, nTxConfirmTarget, mempool);\n \n@@ -556,20 +562,27 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n \n         if (nPayAmount > 0)\n         {\n-            nChange = nAmount - nPayFee - nPayAmount;\n+            nChange = nAmount - nPayAmount;\n+            if (!CoinControlDialog::fSubtractFeeFromAmount)\n+                nChange -= nPayFee;\n \n             // Never create dust outputs; if we would, just add the dust to the fee.\n             if (nChange > 0 && nChange < CENT)\n             {\n                 CTxOut txout(nChange, (CScript)vector<unsigned char>(24, 0));\n                 if (txout.IsDust(::minRelayTxFee))\n                 {\n-                    nPayFee += nChange;\n-                    nChange = 0;\n+                    if (CoinControlDialog::fSubtractFeeFromAmount) // dust-change will be raised until no dust\n+                        nChange = txout.GetDustThreshold(::minRelayTxFee);\n+                    else\n+                    {\n+                        nPayFee += nChange;\n+                        nChange = 0;\n+                    }\n                 }\n             }\n \n-            if (nChange == 0)\n+            if (nChange == 0 && !CoinControlDialog::fSubtractFeeFromAmount)\n                 nBytes -= 34;\n         }\n \n@@ -612,7 +625,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     {\n         l3->setText(ASYMP_UTF8 + l3->text());\n         l4->setText(ASYMP_UTF8 + l4->text());\n-        if (nChange > 0)\n+        if (nChange > 0 && !CoinControlDialog::fSubtractFeeFromAmount)\n             l8->setText(ASYMP_UTF8 + l8->text());\n     }\n "
      },
      {
        "sha": "5ec382838f9069442773ec09a9d5571adf495214",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/292623adf59edea52b2927b3d67fd2ff7f997882/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/292623adf59edea52b2927b3d67fd2ff7f997882/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=292623adf59edea52b2927b3d67fd2ff7f997882",
        "patch": "@@ -43,6 +43,7 @@ class CoinControlDialog : public QDialog\n \n     static QList<CAmount> payAmounts;\n     static CCoinControl *coinControl;\n+    static bool fSubtractFeeFromAmount;\n \n private:\n     Ui::CoinControlDialog *ui;"
      },
      {
        "sha": "b362928438cee988fad5a10657916611a58fb870",
        "filename": "src/qt/forms/sendcoinsentry.ui",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/292623adf59edea52b2927b3d67fd2ff7f997882/src/qt/forms/sendcoinsentry.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/292623adf59edea52b2927b3d67fd2ff7f997882/src/qt/forms/sendcoinsentry.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsentry.ui?ref=292623adf59edea52b2927b3d67fd2ff7f997882",
        "patch": "@@ -157,7 +157,21 @@\n      </widget>\n     </item>\n     <item row=\"2\" column=\"1\">\n-     <widget class=\"BitcoinAmountField\" name=\"payAmount\"/>\n+     <layout class=\"QHBoxLayout\" name=\"horizontalLayoutAmount\" stretch=\"0,1\">\n+      <item>\n+       <widget class=\"BitcoinAmountField\" name=\"payAmount\"/>\n+      </item>\n+      <item>\n+       <widget class=\"QCheckBox\" name=\"checkboxSubtractFeeFromAmount\">\n+        <property name=\"toolTip\">\n+         <string>The fee will be deducted from the amount being sent. The recipient will receive less bitcoins than you enter in the amount field. If multiple recipients are selected, the fee is split equally.</string>\n+        </property>\n+        <property name=\"text\">\n+         <string>S&amp;ubtract fee from amount</string>\n+        </property>\n+       </widget>\n+      </item>\n+     </layout>\n     </item>\n     <item row=\"3\" column=\"0\">\n      <widget class=\"QLabel\" name=\"messageLabel\">"
      },
      {
        "sha": "55ca65c8e6b5b5602fd9549f91f6f058defecd21",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/292623adf59edea52b2927b3d67fd2ff7f997882/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/292623adf59edea52b2927b3d67fd2ff7f997882/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=292623adf59edea52b2927b3d67fd2ff7f997882",
        "patch": "@@ -221,8 +221,6 @@ void SendCoinsDialog::on_sendButton_clicked()\n     }\n \n     fNewRecipientAllowed = false;\n-\n-\n     WalletModel::UnlockContext ctx(model->requestUnlock());\n     if(!ctx.isValid())\n     {\n@@ -252,7 +250,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n \n     // Format confirmation message\n     QStringList formatted;\n-    foreach(const SendCoinsRecipient &rcp, recipients)\n+    foreach(const SendCoinsRecipient &rcp, currentTransaction.getRecipients())\n     {\n         // generate bold amount string\n         QString amount = \"<b>\" + BitcoinUnits::formatHtmlWithUnit(model->getOptionsModel()->getDisplayUnit(), rcp.amount);\n@@ -369,6 +367,7 @@ SendCoinsEntry *SendCoinsDialog::addEntry()\n     ui->entries->addWidget(entry);\n     connect(entry, SIGNAL(removeEntry(SendCoinsEntry*)), this, SLOT(removeEntry(SendCoinsEntry*)));\n     connect(entry, SIGNAL(payAmountChanged()), this, SLOT(coinControlUpdateLabels()));\n+    connect(entry, SIGNAL(subtractFeeFromAmountChanged()), this, SLOT(coinControlUpdateLabels()));\n \n     updateTabsAndLabels();\n \n@@ -784,11 +783,17 @@ void SendCoinsDialog::coinControlUpdateLabels()\n \n     // set pay amounts\n     CoinControlDialog::payAmounts.clear();\n+    CoinControlDialog::fSubtractFeeFromAmount = false;\n     for(int i = 0; i < ui->entries->count(); ++i)\n     {\n         SendCoinsEntry *entry = qobject_cast<SendCoinsEntry*>(ui->entries->itemAt(i)->widget());\n         if(entry)\n-            CoinControlDialog::payAmounts.append(entry->getValue().amount);\n+        {\n+            SendCoinsRecipient rcp = entry->getValue();\n+            CoinControlDialog::payAmounts.append(rcp.amount);\n+            if (rcp.fSubtractFeeFromAmount)\n+                CoinControlDialog::fSubtractFeeFromAmount = true;\n+        }\n     }\n \n     if (CoinControlDialog::coinControl->HasSelected())"
      },
      {
        "sha": "6ac650e74fc383b3d0a21f815b174cfc309074bd",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/292623adf59edea52b2927b3d67fd2ff7f997882/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/292623adf59edea52b2927b3d67fd2ff7f997882/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=292623adf59edea52b2927b3d67fd2ff7f997882",
        "patch": "@@ -44,6 +44,7 @@ SendCoinsEntry::SendCoinsEntry(QWidget *parent) :\n \n     // Connect signals\n     connect(ui->payAmount, SIGNAL(valueChanged()), this, SIGNAL(payAmountChanged()));\n+    connect(ui->checkboxSubtractFeeFromAmount, SIGNAL(toggled(bool)), this, SIGNAL(subtractFeeFromAmountChanged()));\n     connect(ui->deleteButton, SIGNAL(clicked()), this, SLOT(deleteClicked()));\n     connect(ui->deleteButton_is, SIGNAL(clicked()), this, SLOT(deleteClicked()));\n     connect(ui->deleteButton_s, SIGNAL(clicked()), this, SLOT(deleteClicked()));\n@@ -94,6 +95,7 @@ void SendCoinsEntry::clear()\n     ui->payTo->clear();\n     ui->addAsLabel->clear();\n     ui->payAmount->clear();\n+    ui->checkboxSubtractFeeFromAmount->setCheckState(Qt::Unchecked);\n     ui->messageTextLabel->clear();\n     ui->messageTextLabel->hide();\n     ui->messageLabel->hide();\n@@ -165,6 +167,7 @@ SendCoinsRecipient SendCoinsEntry::getValue()\n     recipient.label = ui->addAsLabel->text();\n     recipient.amount = ui->payAmount->value();\n     recipient.message = ui->messageTextLabel->text();\n+    recipient.fSubtractFeeFromAmount = (ui->checkboxSubtractFeeFromAmount->checkState() == Qt::Checked);\n \n     return recipient;\n }\n@@ -174,7 +177,8 @@ QWidget *SendCoinsEntry::setupTabChain(QWidget *prev)\n     QWidget::setTabOrder(prev, ui->payTo);\n     QWidget::setTabOrder(ui->payTo, ui->addAsLabel);\n     QWidget *w = ui->payAmount->setupTabChain(ui->addAsLabel);\n-    QWidget::setTabOrder(w, ui->addressBookButton);\n+    QWidget::setTabOrder(w, ui->checkboxSubtractFeeFromAmount);\n+    QWidget::setTabOrder(ui->checkboxSubtractFeeFromAmount, ui->addressBookButton);\n     QWidget::setTabOrder(ui->addressBookButton, ui->pasteButton);\n     QWidget::setTabOrder(ui->pasteButton, ui->deleteButton);\n     return ui->deleteButton;"
      },
      {
        "sha": "c2d1185bddb8e29ebfda6925001e2943934bd935",
        "filename": "src/qt/sendcoinsentry.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/292623adf59edea52b2927b3d67fd2ff7f997882/src/qt/sendcoinsentry.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/292623adf59edea52b2927b3d67fd2ff7f997882/src/qt/sendcoinsentry.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.h?ref=292623adf59edea52b2927b3d67fd2ff7f997882",
        "patch": "@@ -51,6 +51,7 @@ public slots:\n signals:\n     void removeEntry(SendCoinsEntry *entry);\n     void payAmountChanged();\n+    void subtractFeeFromAmountChanged();\n \n private slots:\n     void deleteClicked();"
      },
      {
        "sha": "1baa5eb9322e77972bcccca0c7a2ac9f0c4331cf",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 5,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/292623adf59edea52b2927b3d67fd2ff7f997882/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/292623adf59edea52b2927b3d67fd2ff7f997882/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=292623adf59edea52b2927b3d67fd2ff7f997882",
        "patch": "@@ -6,6 +6,7 @@\n \n #include \"addresstablemodel.h\"\n #include \"guiconstants.h\"\n+#include \"guiutil.h\"\n #include \"paymentserver.h\"\n #include \"recentrequeststablemodel.h\"\n #include \"transactiontablemodel.h\"\n@@ -192,8 +193,9 @@ bool WalletModel::validateAddress(const QString &address)\n WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransaction &transaction, const CCoinControl *coinControl)\n {\n     CAmount total = 0;\n+    bool fSubtractFeeFromAmount = false;\n     QList<SendCoinsRecipient> recipients = transaction.getRecipients();\n-    std::vector<std::pair<CScript, CAmount> > vecSend;\n+    std::vector<CRecipient> vecSend;\n \n     if(recipients.empty())\n     {\n@@ -206,6 +208,9 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n     // Pre-check input data for validity\n     foreach(const SendCoinsRecipient &rcp, recipients)\n     {\n+        if (rcp.fSubtractFeeFromAmount)\n+            fSubtractFeeFromAmount = true;\n+\n         if (rcp.paymentRequest.IsInitialized())\n         {   // PaymentRequest...\n             CAmount subtotal = 0;\n@@ -217,7 +222,9 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n                 subtotal += out.amount();\n                 const unsigned char* scriptStr = (const unsigned char*)out.script().data();\n                 CScript scriptPubKey(scriptStr, scriptStr+out.script().size());\n-                vecSend.push_back(std::pair<CScript, CAmount>(scriptPubKey, out.amount()));\n+                CAmount nAmount = out.amount();\n+                CRecipient recipient = {scriptPubKey, nAmount, rcp.fSubtractFeeFromAmount};\n+                vecSend.push_back(recipient);\n             }\n             if (subtotal <= 0)\n             {\n@@ -239,7 +246,8 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n             ++nAddresses;\n \n             CScript scriptPubKey = GetScriptForDestination(CBitcoinAddress(rcp.address.toStdString()).Get());\n-            vecSend.push_back(std::pair<CScript, CAmount>(scriptPubKey, rcp.amount));\n+            CRecipient recipient = {scriptPubKey, rcp.amount, rcp.fSubtractFeeFromAmount};\n+            vecSend.push_back(recipient);\n \n             total += rcp.amount;\n         }\n@@ -260,17 +268,21 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n         LOCK2(cs_main, wallet->cs_wallet);\n \n         transaction.newPossibleKeyChange(wallet);\n+\n         CAmount nFeeRequired = 0;\n+        int nChangePosRet = -1;\n         std::string strFailReason;\n \n         CWalletTx *newTx = transaction.getTransaction();\n         CReserveKey *keyChange = transaction.getPossibleKeyChange();\n-        bool fCreated = wallet->CreateTransaction(vecSend, *newTx, *keyChange, nFeeRequired, strFailReason, coinControl);\n+        bool fCreated = wallet->CreateTransaction(vecSend, *newTx, *keyChange, nFeeRequired, nChangePosRet, strFailReason, coinControl);\n         transaction.setTransactionFee(nFeeRequired);\n+        if (fSubtractFeeFromAmount && fCreated)\n+            transaction.reassignAmounts(nChangePosRet);\n \n         if(!fCreated)\n         {\n-            if((total + nFeeRequired) > nBalance)\n+            if(!fSubtractFeeFromAmount && (total + nFeeRequired) > nBalance)\n             {\n                 return SendCoinsReturn(AmountWithFeeExceedsBalance);\n             }"
      },
      {
        "sha": "de915165f941d9ec2b96ccb6c9ab32f87780961f",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/292623adf59edea52b2927b3d67fd2ff7f997882/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/292623adf59edea52b2927b3d67fd2ff7f997882/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=292623adf59edea52b2927b3d67fd2ff7f997882",
        "patch": "@@ -36,9 +36,9 @@ QT_END_NAMESPACE\n class SendCoinsRecipient\n {\n public:\n-    explicit SendCoinsRecipient() : amount(0), nVersion(SendCoinsRecipient::CURRENT_VERSION) { }\n+    explicit SendCoinsRecipient() : amount(0), fSubtractFeeFromAmount(false), nVersion(SendCoinsRecipient::CURRENT_VERSION) { }\n     explicit SendCoinsRecipient(const QString &addr, const QString &label, const CAmount& amount, const QString &message):\n-        address(addr), label(label), amount(amount), message(message), nVersion(SendCoinsRecipient::CURRENT_VERSION) {}\n+        address(addr), label(label), amount(amount), message(message), fSubtractFeeFromAmount(false), nVersion(SendCoinsRecipient::CURRENT_VERSION) {}\n \n     // If from an unauthenticated payment request, this is used for storing\n     // the addresses, e.g. address-A<br />address-B<br />address-C.\n@@ -56,6 +56,8 @@ class SendCoinsRecipient\n     // Empty if no authentication or invalid signature/cert/etc.\n     QString authenticatedMerchant;\n \n+    bool fSubtractFeeFromAmount; // memory only\n+\n     static const int CURRENT_VERSION = 1;\n     int nVersion;\n "
      },
      {
        "sha": "c97add6befbf6081efb2f4b02841cd5e987ee1ec",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/292623adf59edea52b2927b3d67fd2ff7f997882/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/292623adf59edea52b2927b3d67fd2ff7f997882/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=292623adf59edea52b2927b3d67fd2ff7f997882",
        "patch": "@@ -46,6 +46,38 @@ void WalletModelTransaction::setTransactionFee(const CAmount& newFee)\n     fee = newFee;\n }\n \n+void WalletModelTransaction::reassignAmounts(int nChangePosRet)\n+{\n+    int i = 0;\n+    for (QList<SendCoinsRecipient>::iterator it = recipients.begin(); it != recipients.end(); ++it)\n+    {\n+        SendCoinsRecipient& rcp = (*it);\n+\n+        if (rcp.paymentRequest.IsInitialized())\n+        {\n+            CAmount subtotal = 0;\n+            const payments::PaymentDetails& details = rcp.paymentRequest.getDetails();\n+            for (int j = 0; j < details.outputs_size(); j++)\n+            {\n+                const payments::Output& out = details.outputs(j);\n+                if (out.amount() <= 0) continue;\n+                if (i == nChangePosRet)\n+                    i++;\n+                subtotal += walletTransaction->vout[i].nValue;\n+                i++;\n+            }\n+            rcp.amount = subtotal;\n+        }\n+        else // normal recipient (no payment request)\n+        {\n+            if (i == nChangePosRet)\n+                i++;\n+            rcp.amount = walletTransaction->vout[i].nValue;\n+            i++;\n+        }\n+    }\n+}\n+\n CAmount WalletModelTransaction::getTotalTransactionAmount()\n {\n     CAmount totalTransactionAmount = 0;"
      },
      {
        "sha": "7765fea4afe0f719fe33a0ca184904a4d6b32d6c",
        "filename": "src/qt/walletmodeltransaction.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/292623adf59edea52b2927b3d67fd2ff7f997882/src/qt/walletmodeltransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/292623adf59edea52b2927b3d67fd2ff7f997882/src/qt/walletmodeltransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.h?ref=292623adf59edea52b2927b3d67fd2ff7f997882",
        "patch": "@@ -35,8 +35,10 @@ class WalletModelTransaction\n     void newPossibleKeyChange(CWallet *wallet);\n     CReserveKey *getPossibleKeyChange();\n \n+    void reassignAmounts(int nChangePosRet); // needed for the subtract-fee-from-amount feature\n+\n private:\n-    const QList<SendCoinsRecipient> recipients;\n+    QList<SendCoinsRecipient> recipients;\n     CWalletTx *walletTransaction;\n     CReserveKey *keyChange;\n     CAmount fee;"
      },
      {
        "sha": "a45ea9839beab179e862d382f35fcfbc751168cb",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/292623adf59edea52b2927b3d67fd2ff7f997882/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/292623adf59edea52b2927b3d67fd2ff7f997882/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=292623adf59edea52b2927b3d67fd2ff7f997882",
        "patch": "@@ -32,6 +32,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getnetworkhashps\", 0 },\n     { \"getnetworkhashps\", 1 },\n     { \"sendtoaddress\", 1 },\n+    { \"sendtoaddress\", 4 },\n     { \"settxfee\", 0 },\n     { \"getreceivedbyaddress\", 1 },\n     { \"getreceivedbyaccount\", 1 },\n@@ -59,6 +60,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"listsinceblock\", 2 },\n     { \"sendmany\", 1 },\n     { \"sendmany\", 2 },\n+    { \"sendmany\", 4 },\n     { \"addmultisigaddress\", 0 },\n     { \"addmultisigaddress\", 1 },\n     { \"createmultisig\", 0 },"
      },
      {
        "sha": "142487bc8ccf522398a924ce8c97cbda30222db2",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 15,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/292623adf59edea52b2927b3d67fd2ff7f997882/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/292623adf59edea52b2927b3d67fd2ff7f997882/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=292623adf59edea52b2927b3d67fd2ff7f997882",
        "patch": "@@ -317,7 +317,7 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n     return ret;\n }\n \n-static void SendMoney(const CTxDestination &address, CAmount nValue, CWalletTx& wtxNew)\n+static void SendMoney(const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew)\n {\n     CAmount curBalance = pwalletMain->GetBalance();\n \n@@ -335,21 +335,24 @@ static void SendMoney(const CTxDestination &address, CAmount nValue, CWalletTx&\n     CReserveKey reservekey(pwalletMain);\n     CAmount nFeeRequired;\n     std::string strError;\n-    if (!pwalletMain->CreateTransaction(scriptPubKey, nValue, wtxNew, reservekey, nFeeRequired, strError)) {\n-        if (nValue + nFeeRequired > curBalance)\n-            throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired)));\n-        else\n-            throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    vector<CRecipient> vecSend;\n+    int nChangePosRet = -1;\n+    CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n+    vecSend.push_back(recipient);\n+    if (!pwalletMain->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError)) {\n+        if (!fSubtractFeeFromAmount && nValue + nFeeRequired > pwalletMain->GetBalance())\n+            strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n+        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n     if (!pwalletMain->CommitTransaction(wtxNew, reservekey))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n }\n \n Value sendtoaddress(const Array& params, bool fHelp)\n {\n-    if (fHelp || params.size() < 2 || params.size() > 4)\n+    if (fHelp || params.size() < 2 || params.size() > 5)\n         throw runtime_error(\n-            \"sendtoaddress \\\"bitcoinaddress\\\" amount ( \\\"comment\\\" \\\"comment-to\\\" )\\n\"\n+            \"sendtoaddress \\\"bitcoinaddress\\\" amount ( \\\"comment\\\" \\\"comment-to\\\" subtractfeefromamount )\\n\"\n             \"\\nSend an amount to a given address. The amount is a real and is rounded to the nearest 0.00000001\\n\"\n             + HelpRequiringPassphrase() +\n             \"\\nArguments:\\n\"\n@@ -360,11 +363,14 @@ Value sendtoaddress(const Array& params, bool fHelp)\n             \"4. \\\"comment-to\\\"  (string, optional) A comment to store the name of the person or organization \\n\"\n             \"                             to which you're sending the transaction. This is not part of the \\n\"\n             \"                             transaction, just kept in your wallet.\\n\"\n+            \"5. subtractfeefromamount  (boolean, optional, default=false) The fee will be deducted from the amount being sent.\\n\"\n+            \"                             The recipient will receive less bitcoins than you enter in the amount field.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"transactionid\\\"  (string) The transaction id.\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.1\")\n             + HelpExampleCli(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.1 \\\"donation\\\" \\\"seans outpost\\\"\")\n+            + HelpExampleCli(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.1 \\\"\\\" \\\"\\\" true\")\n             + HelpExampleRpc(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\", 0.1, \\\"donation\\\", \\\"seans outpost\\\"\")\n         );\n \n@@ -384,9 +390,13 @@ Value sendtoaddress(const Array& params, bool fHelp)\n     if (params.size() > 3 && params[3].type() != null_type && !params[3].get_str().empty())\n         wtx.mapValue[\"to\"]      = params[3].get_str();\n \n+    bool fSubtractFeeFromAmount = false;\n+    if (params.size() > 4)\n+        fSubtractFeeFromAmount = params[4].get_bool();\n+\n     EnsureWalletIsUnlocked();\n \n-    SendMoney(address.Get(), nAmount, wtx);\n+    SendMoney(address.Get(), nAmount, fSubtractFeeFromAmount, wtx);\n \n     return wtx.GetHash().GetHex();\n }\n@@ -840,17 +850,17 @@ Value sendfrom(const Array& params, bool fHelp)\n     if (nAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n-    SendMoney(address.Get(), nAmount, wtx);\n+    SendMoney(address.Get(), nAmount, false, wtx);\n \n     return wtx.GetHash().GetHex();\n }\n \n \n Value sendmany(const Array& params, bool fHelp)\n {\n-    if (fHelp || params.size() < 2 || params.size() > 4)\n+    if (fHelp || params.size() < 2 || params.size() > 5)\n         throw runtime_error(\n-            \"sendmany \\\"fromaccount\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" )\\n\"\n+            \"sendmany \\\"fromaccount\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" {\\\"address\\\":true,...} )\\n\"\n             \"\\nSend multiple times. Amounts are double-precision floating point numbers.\"\n             + HelpRequiringPassphrase() + \"\\n\"\n             \"\\nArguments:\\n\"\n@@ -862,6 +872,14 @@ Value sendmany(const Array& params, bool fHelp)\n             \"    }\\n\"\n             \"3. minconf                 (numeric, optional, default=1) Only use the balance confirmed at least this many times.\\n\"\n             \"4. \\\"comment\\\"             (string, optional) A comment\\n\"\n+            \"5. subtractfeefromamount   (string, optional) A json object with addresses and booleans.\\n\"\n+            \"                           The fee will be equally deducted from the amount of each selected address.\\n\"\n+            \"                           Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+            \"                           Default for each address is false. If no addresses are specified here, the sender pays the fee.\\n\"\n+            \"    {\\n\"\n+            \"      \\\"address\\\":true     (boolean) Subtract fee from this address\\n\"\n+            \"      ,...\\n\"\n+            \"    }\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"transactionid\\\"          (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n             \"                                    the number of addresses.\\n\"\n@@ -870,6 +888,8 @@ Value sendmany(const Array& params, bool fHelp)\n             + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\"\") +\n             \"\\nSend two amounts to two different addresses setting the confirmation and comment:\\n\"\n             + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\" 6 \\\"testing\\\"\") +\n+            \"\\nSend two amounts to two different addresses, subtract fee from amount:\\n\"\n+            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\" 1 \\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":true,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":true}\\\"\") +\n             \"\\nAs a json rpc call\\n\"\n             + HelpExampleRpc(\"sendmany\", \"\\\"\\\", \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\", 6, \\\"testing\\\"\")\n         );\n@@ -887,8 +907,12 @@ Value sendmany(const Array& params, bool fHelp)\n     if (params.size() > 3 && params[3].type() != null_type && !params[3].get_str().empty())\n         wtx.mapValue[\"comment\"] = params[3].get_str();\n \n+    Object subtractFeeFromAmount;\n+    if (params.size() > 4)\n+        subtractFeeFromAmount = params[4].get_obj();\n+\n     set<CBitcoinAddress> setAddress;\n-    vector<pair<CScript, CAmount> > vecSend;\n+    vector<CRecipient> vecSend;\n \n     CAmount totalAmount = 0;\n     BOOST_FOREACH(const Pair& s, sendTo)\n@@ -905,7 +929,13 @@ Value sendmany(const Array& params, bool fHelp)\n         CAmount nAmount = AmountFromValue(s.value_);\n         totalAmount += nAmount;\n \n-        vecSend.push_back(make_pair(scriptPubKey, nAmount));\n+        bool fSubtractFeeFromAmount = false;\n+        BOOST_FOREACH(const Pair& s2, subtractFeeFromAmount)\n+            if (s2.name_ == s.name_ && s2.value_.get_bool() == true)\n+                fSubtractFeeFromAmount = true;\n+\n+        CRecipient recipient = {scriptPubKey, nAmount, fSubtractFeeFromAmount};\n+        vecSend.push_back(recipient);\n     }\n \n     EnsureWalletIsUnlocked();\n@@ -918,8 +948,9 @@ Value sendmany(const Array& params, bool fHelp)\n     // Send\n     CReserveKey keyChange(pwalletMain);\n     CAmount nFeeRequired = 0;\n+    int nChangePosRet = -1;\n     string strFailReason;\n-    bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, strFailReason);\n+    bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, nChangePosRet, strFailReason);\n     if (!fCreated)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n     if (!pwalletMain->CommitTransaction(wtx, keyChange))"
      },
      {
        "sha": "9dfd34de9f4310adc78a75361317fafa7778f6d3",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 65,
        "deletions": 22,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/292623adf59edea52b2927b3d67fd2ff7f997882/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/292623adf59edea52b2927b3d67fd2ff7f997882/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=292623adf59edea52b2927b3d67fd2ff7f997882",
        "patch": "@@ -1549,21 +1549,22 @@ bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*\n             (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue, 0, 1, vCoins, setCoinsRet, nValueRet)));\n }\n \n-\n-\n-\n-bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n-                                CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl)\n+bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend,\n+                                CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, const CCoinControl* coinControl)\n {\n     CAmount nValue = 0;\n-    BOOST_FOREACH (const PAIRTYPE(CScript, CAmount)& s, vecSend)\n+    unsigned int nSubtractFeeFromAmount = 0;\n+    BOOST_FOREACH (const CRecipient& recipient, vecSend)\n     {\n-        if (nValue < 0)\n+        if (nValue < 0 || recipient.nAmount < 0)\n         {\n             strFailReason = _(\"Transaction amounts must be positive\");\n             return false;\n         }\n-        nValue += s.second;\n+        nValue += recipient.nAmount;\n+\n+        if (recipient.fSubtractFeeFromAmount)\n+            nSubtractFeeFromAmount++;\n     }\n     if (vecSend.empty() || nValue < 0)\n     {\n@@ -1606,16 +1607,40 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n                 txNew.vin.clear();\n                 txNew.vout.clear();\n                 wtxNew.fFromMe = true;\n+                nChangePosRet = -1;\n+                bool fFirst = true;\n \n-                CAmount nTotalValue = nValue + nFeeRet;\n+                CAmount nTotalValue = nValue;\n+                if (nSubtractFeeFromAmount == 0)\n+                    nTotalValue += nFeeRet;\n                 double dPriority = 0;\n                 // vouts to the payees\n-                BOOST_FOREACH (const PAIRTYPE(CScript, CAmount)& s, vecSend)\n+                BOOST_FOREACH (const CRecipient& recipient, vecSend)\n                 {\n-                    CTxOut txout(s.second, s.first);\n+                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                    if (recipient.fSubtractFeeFromAmount)\n+                    {\n+                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+\n+                        if (fFirst) // first receiver pays the remainder not divisible by output count\n+                        {\n+                            fFirst = false;\n+                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n+                        }\n+                    }\n+\n                     if (txout.IsDust(::minRelayTxFee))\n                     {\n-                        strFailReason = _(\"Transaction amount too small\");\n+                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n+                        {\n+                            if (txout.nValue < 0)\n+                                strFailReason = _(\"The transaction amount is too small to pay the fee\");\n+                            else\n+                                strFailReason = _(\"The transaction amount is too small to send after the fee has been deducted\");\n+                        }\n+                        else\n+                            strFailReason = _(\"Transaction amount too small\");\n                         return false;\n                     }\n                     txNew.vout.push_back(txout);\n@@ -1642,7 +1667,9 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n                     dPriority += (double)nCredit * age;\n                 }\n \n-                CAmount nChange = nValueIn - nValue - nFeeRet;\n+                CAmount nChange = nValueIn - nValue;\n+                if (nSubtractFeeFromAmount == 0)\n+                    nChange -= nFeeRet;\n \n                 if (nChange > 0)\n                 {\n@@ -1676,6 +1703,28 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n \n                     CTxOut newTxOut(nChange, scriptChange);\n \n+                    // We do not move dust-change to fees, because the sender would end up paying more than requested.\n+                    // This would be against the purpose of the all-inclusive feature.\n+                    // So instead we raise the change and deduct from the recipient.\n+                    if (nSubtractFeeFromAmount > 0 && newTxOut.IsDust(::minRelayTxFee))\n+                    {\n+                        CAmount nDust = newTxOut.GetDustThreshold(::minRelayTxFee) - newTxOut.nValue;\n+                        newTxOut.nValue += nDust; // raise change until no more dust\n+                        for (unsigned int i = 0; i < vecSend.size(); i++) // subtract from first recipient\n+                        {\n+                            if (vecSend[i].fSubtractFeeFromAmount)\n+                            {\n+                                txNew.vout[i].nValue -= nDust;\n+                                if (txNew.vout[i].IsDust(::minRelayTxFee))\n+                                {\n+                                    strFailReason = _(\"The transaction amount is too small to send after the fee has been deducted\");\n+                                    return false;\n+                                }\n+                                break;\n+                            }\n+                        }\n+                    }\n+\n                     // Never create dust outputs; if we would, just\n                     // add the dust to the fee.\n                     if (newTxOut.IsDust(::minRelayTxFee))\n@@ -1686,7 +1735,8 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n                     else\n                     {\n                         // Insert change txn at random position:\n-                        vector<CTxOut>::iterator position = txNew.vout.begin()+GetRandInt(txNew.vout.size()+1);\n+                        nChangePosRet = GetRandInt(txNew.vout.size()+1);\n+                        vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosRet;\n                         txNew.vout.insert(position, newTxOut);\n                     }\n                 }\n@@ -1755,15 +1805,8 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n             }\n         }\n     }\n-    return true;\n-}\n \n-bool CWallet::CreateTransaction(CScript scriptPubKey, const CAmount& nValue,\n-                                CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl)\n-{\n-    vector< pair<CScript, CAmount> > vecSend;\n-    vecSend.push_back(make_pair(scriptPubKey, nValue));\n-    return CreateTransaction(vecSend, wtxNew, reservekey, nFeeRet, strFailReason, coinControl);\n+    return true;\n }\n \n /**"
      },
      {
        "sha": "a5a2558f94bb5f2b61b287b44fd98cca6f8f8897",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/292623adf59edea52b2927b3d67fd2ff7f997882/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/292623adf59edea52b2927b3d67fd2ff7f997882/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=292623adf59edea52b2927b3d67fd2ff7f997882",
        "patch": "@@ -103,6 +103,12 @@ class CAddressBookData\n     StringMap destdata;\n };\n \n+struct CRecipient\n+{\n+    CScript scriptPubKey;\n+    CAmount nAmount;\n+    bool fSubtractFeeFromAmount;\n+};\n \n typedef std::map<std::string, std::string> mapValue_t;\n \n@@ -611,10 +617,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetWatchOnlyBalance() const;\n     CAmount GetUnconfirmedWatchOnlyBalance() const;\n     CAmount GetImmatureWatchOnlyBalance() const;\n-    bool CreateTransaction(const std::vector<std::pair<CScript, CAmount> >& vecSend,\n-                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n-    bool CreateTransaction(CScript scriptPubKey, const CAmount& nValue,\n-                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n+    bool CreateTransaction(const std::vector<CRecipient>& vecSend,\n+                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n \n     static CFeeRate minTxFee;"
      }
    ]
  },
  {
    "sha": "40a757331af84135e9c451ebe490b5a87c780944",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MGE3NTczMzFhZjg0MTM1ZTljNDUxZWJlNDkwYjVhODdjNzgwOTQ0",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-03-05T13:30:15Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-13T10:04:25Z"
      },
      "message": "rpcwallet/sendmany: Just take an array of addresses to subtract fees from, rather than an Object with all values being identical",
      "tree": {
        "sha": "87d25eae244996f4eb69f5f521d6c2cd2d80908c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87d25eae244996f4eb69f5f521d6c2cd2d80908c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/40a757331af84135e9c451ebe490b5a87c780944",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40a757331af84135e9c451ebe490b5a87c780944",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/40a757331af84135e9c451ebe490b5a87c780944",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40a757331af84135e9c451ebe490b5a87c780944/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "292623adf59edea52b2927b3d67fd2ff7f997882",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/292623adf59edea52b2927b3d67fd2ff7f997882",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/292623adf59edea52b2927b3d67fd2ff7f997882"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "5502b0b261dfd5e115e04ff740c4898bb3a59420",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40a757331af84135e9c451ebe490b5a87c780944/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40a757331af84135e9c451ebe490b5a87c780944/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=40a757331af84135e9c451ebe490b5a87c780944",
        "patch": "@@ -860,7 +860,7 @@ Value sendmany(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 2 || params.size() > 5)\n         throw runtime_error(\n-            \"sendmany \\\"fromaccount\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" {\\\"address\\\":true,...} )\\n\"\n+            \"sendmany \\\"fromaccount\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] )\\n\"\n             \"\\nSend multiple times. Amounts are double-precision floating point numbers.\"\n             + HelpRequiringPassphrase() + \"\\n\"\n             \"\\nArguments:\\n\"\n@@ -872,14 +872,14 @@ Value sendmany(const Array& params, bool fHelp)\n             \"    }\\n\"\n             \"3. minconf                 (numeric, optional, default=1) Only use the balance confirmed at least this many times.\\n\"\n             \"4. \\\"comment\\\"             (string, optional) A comment\\n\"\n-            \"5. subtractfeefromamount   (string, optional) A json object with addresses and booleans.\\n\"\n+            \"5. subtractfeefromamount   (string, optional) A json array with addresses.\\n\"\n             \"                           The fee will be equally deducted from the amount of each selected address.\\n\"\n             \"                           Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n-            \"                           Default for each address is false. If no addresses are specified here, the sender pays the fee.\\n\"\n-            \"    {\\n\"\n-            \"      \\\"address\\\":true     (boolean) Subtract fee from this address\\n\"\n+            \"                           If no addresses are specified here, the sender pays the fee.\\n\"\n+            \"    [\\n\"\n+            \"      \\\"address\\\"            (string) Subtract fee from this address\\n\"\n             \"      ,...\\n\"\n-            \"    }\\n\"\n+            \"    ]\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"transactionid\\\"          (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n             \"                                    the number of addresses.\\n\"\n@@ -889,7 +889,7 @@ Value sendmany(const Array& params, bool fHelp)\n             \"\\nSend two amounts to two different addresses setting the confirmation and comment:\\n\"\n             + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\" 6 \\\"testing\\\"\") +\n             \"\\nSend two amounts to two different addresses, subtract fee from amount:\\n\"\n-            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\" 1 \\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":true,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":true}\\\"\") +\n+            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\" 1 \\\"\\\" \\\"[\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\",\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\"]\\\"\") +\n             \"\\nAs a json rpc call\\n\"\n             + HelpExampleRpc(\"sendmany\", \"\\\"\\\", \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\", 6, \\\"testing\\\"\")\n         );\n@@ -907,9 +907,9 @@ Value sendmany(const Array& params, bool fHelp)\n     if (params.size() > 3 && params[3].type() != null_type && !params[3].get_str().empty())\n         wtx.mapValue[\"comment\"] = params[3].get_str();\n \n-    Object subtractFeeFromAmount;\n+    Array subtractFeeFromAmount;\n     if (params.size() > 4)\n-        subtractFeeFromAmount = params[4].get_obj();\n+        subtractFeeFromAmount = params[4].get_array();\n \n     set<CBitcoinAddress> setAddress;\n     vector<CRecipient> vecSend;\n@@ -930,8 +930,8 @@ Value sendmany(const Array& params, bool fHelp)\n         totalAmount += nAmount;\n \n         bool fSubtractFeeFromAmount = false;\n-        BOOST_FOREACH(const Pair& s2, subtractFeeFromAmount)\n-            if (s2.name_ == s.name_ && s2.value_.get_bool() == true)\n+        BOOST_FOREACH(const Value& addr, subtractFeeFromAmount)\n+            if (addr.get_str() == s.name_)\n                 fSubtractFeeFromAmount = true;\n \n         CRecipient recipient = {scriptPubKey, nAmount, fSubtractFeeFromAmount};"
      }
    ]
  },
  {
    "sha": "1d9b378c3071293a31a3b4d1845d9626f10da432",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDliMzc4YzMwNzEyOTNhMzFhM2I0ZDE4NDVkOTYyNmYxMGRhNDMy",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-03-05T13:59:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-13T10:04:25Z"
      },
      "message": "qa/rpc-tests/wallet: Tests for sendmany",
      "tree": {
        "sha": "dac559bc306b67adf8358e498532e157de255019",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dac559bc306b67adf8358e498532e157de255019"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d9b378c3071293a31a3b4d1845d9626f10da432",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d9b378c3071293a31a3b4d1845d9626f10da432",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d9b378c3071293a31a3b4d1845d9626f10da432",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d9b378c3071293a31a3b4d1845d9626f10da432/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40a757331af84135e9c451ebe490b5a87c780944",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40a757331af84135e9c451ebe490b5a87c780944",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40a757331af84135e9c451ebe490b5a87c780944"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 16,
      "deletions": 2
    },
    "files": [
      {
        "sha": "dc4e0f77bd4b0b6b323a1d52df87169537130f32",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 16,
        "deletions": 2,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d9b378c3071293a31a3b4d1845d9626f10da432/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d9b378c3071293a31a3b4d1845d9626f10da432/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=1d9b378c3071293a31a3b4d1845d9626f10da432",
        "patch": "@@ -102,7 +102,7 @@ def run_test (self):\n         assert_equal(self.nodes[2].getbalance(), 100)\n         assert_equal(self.nodes[2].getbalance(\"from1\"), 100-21)\n \n-        # Send 10 XBT normal\n+        # Send 10 BTC normal\n         address = self.nodes[0].getnewaddress(\"test\")\n         self.nodes[2].settxfee(Decimal('0.001'))\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", False)\n@@ -111,12 +111,26 @@ def run_test (self):\n         assert_equal(self.nodes[2].getbalance(), Decimal('89.99900000'))\n         assert_equal(self.nodes[0].getbalance(), Decimal('10.00000000'))\n \n-        # Send 10 XBT with subtract fee from amount\n+        # Send 10 BTC with subtract fee from amount\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", True)\n         self.nodes[2].setgenerate(True, 1)\n         self.sync_all()\n         assert_equal(self.nodes[2].getbalance(), Decimal('79.99900000'))\n         assert_equal(self.nodes[0].getbalance(), Decimal('19.99900000'))\n \n+        # Sendmany 10 BTC\n+        txid = self.nodes[2].sendmany('from1', {address: 10}, 0, \"\", [])\n+        self.nodes[2].setgenerate(True, 1)\n+        self.sync_all()\n+        assert_equal(self.nodes[2].getbalance(), Decimal('69.99800000'))\n+        assert_equal(self.nodes[0].getbalance(), Decimal('29.99900000'))\n+\n+        # Sendmany 10 BTC with subtract fee from amount\n+        txid = self.nodes[2].sendmany('from1', {address: 10}, 0, \"\", [address])\n+        self.nodes[2].setgenerate(True, 1)\n+        self.sync_all()\n+        assert_equal(self.nodes[2].getbalance(), Decimal('59.99800000'))\n+        assert_equal(self.nodes[0].getbalance(), Decimal('39.99800000'))\n+\n if __name__ == '__main__':\n     WalletTest ().main ()"
      }
    ]
  },
  {
    "sha": "5abe2cf1107689598b9f0754801e3b27108a85f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YWJlMmNmMTEwNzY4OTU5OGI5ZjA3NTQ4MDFlM2IyNzEwOGE4NWYy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-12-05T09:45:29Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-13T14:12:37Z"
      },
      "message": "Reorder travis builds for faster response",
      "tree": {
        "sha": "12392d574efe67a55af1448374b614d1deccd91d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/12392d574efe67a55af1448374b614d1deccd91d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5abe2cf1107689598b9f0754801e3b27108a85f2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5abe2cf1107689598b9f0754801e3b27108a85f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5abe2cf1107689598b9f0754801e3b27108a85f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5abe2cf1107689598b9f0754801e3b27108a85f2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7077fe6dd4208bdbd46940f7923b7d89202c3287",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7077fe6dd4208bdbd46940f7923b7d89202c3287",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7077fe6dd4208bdbd46940f7923b7d89202c3287"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "44ea7b62d7f373d7aec5acd734192e6292624e37",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5abe2cf1107689598b9f0754801e3b27108a85f2/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5abe2cf1107689598b9f0754801e3b27108a85f2/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=5abe2cf1107689598b9f0754801e3b27108a85f2",
        "patch": "@@ -27,18 +27,18 @@ matrix:\n   include:\n     - compiler: \": ARM\"\n       env: HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n+    - compiler: \": Win32\"\n+      env: HOST=i686-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n+    - compiler: \": 32-bit + dash\"\n+      env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\" USE_SHELL=\"/bin/dash\"\n+    - compiler: \": Win64\"\n+      env: HOST=x86_64-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n     - compiler: \": bitcoind\"\n       env: HOST=x86_64-unknown-linux-gnu PACKAGES=\"bc\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CPPFLAGS=-DDEBUG_LOCKORDER\"\n     - compiler: \": No wallet\"\n       env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n-    - compiler: \": 32-bit + dash\"\n-      env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\" USE_SHELL=\"/bin/dash\"\n     - compiler: \": Cross-Mac\"\n       env: HOST=x86_64-apple-darwin11 PACKAGES=\"cmake libcap-dev libz-dev libbz2-dev\" BITCOIN_CONFIG=\"--enable-reduce-exports\" OSX_SDK=10.9 GOAL=\"deploy\"\n-    - compiler: \": Win64\"\n-      env: HOST=x86_64-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n-    - compiler: \": Win32\"\n-      env: HOST=i686-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n install:\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES; fi"
      }
    ]
  },
  {
    "sha": "8b60808c1eaddb402a699ba53d865932e08109ec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YjYwODA4YzFlYWRkYjQwMmE2OTliYTUzZDg2NTkzMmUwODEwOWVj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-03-13T14:40:53Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-03-13T14:40:53Z"
      },
      "message": "[QT] some mac specifiy cleanup (memory handling, unnecessary code)",
      "tree": {
        "sha": "7b3a4218e9dca79f030d791f6096e28f0e1b3e21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b3a4218e9dca79f030d791f6096e28f0e1b3e21"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b60808c1eaddb402a699ba53d865932e08109ec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b60808c1eaddb402a699ba53d865932e08109ec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b60808c1eaddb402a699ba53d865932e08109ec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b60808c1eaddb402a699ba53d865932e08109ec/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89e70e931d3d320d2dae4c296601aab113b2e508",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89e70e931d3d320d2dae4c296601aab113b2e508",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89e70e931d3d320d2dae4c296601aab113b2e508"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 7,
      "deletions": 10
    },
    "files": [
      {
        "sha": "58c005ae75ba4056c944ecf7da96ec25416b772c",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b60808c1eaddb402a699ba53d865932e08109ec/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b60808c1eaddb402a699ba53d865932e08109ec/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=8b60808c1eaddb402a699ba53d865932e08109ec",
        "patch": "@@ -237,7 +237,7 @@ BitcoinGUI::~BitcoinGUI()\n         trayIcon->hide();\n #ifdef Q_OS_MAC\n     delete appMenuBar;\n-    MacDockIconHandler::instance()->setMainWindow(NULL);\n+    MacDockIconHandler::cleanup();\n #endif\n \n     delete rpcConsole;"
      },
      {
        "sha": "15a6583ca44c45c26acf66236b8cacbf285f1931",
        "filename": "src/qt/macdockiconhandler.h",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b60808c1eaddb402a699ba53d865932e08109ec/src/qt/macdockiconhandler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b60808c1eaddb402a699ba53d865932e08109ec/src/qt/macdockiconhandler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/macdockiconhandler.h?ref=8b60808c1eaddb402a699ba53d865932e08109ec",
        "patch": "@@ -14,12 +14,6 @@ class QMenu;\n class QWidget;\n QT_END_NAMESPACE\n \n-#ifdef __OBJC__\n-@class DockIconClickEventHandler;\n-#else\n-class DockIconClickEventHandler;\n-#endif\n-\n /** Macintosh-specific dock icon handler.\n  */\n class MacDockIconHandler : public QObject\n@@ -33,7 +27,7 @@ class MacDockIconHandler : public QObject\n     void setIcon(const QIcon &icon);\n     void setMainWindow(QMainWindow *window);\n     static MacDockIconHandler *instance();\n-\n+    static void cleanup();\n     void handleDockIconClickEvent();\n \n signals:\n@@ -42,7 +36,6 @@ class MacDockIconHandler : public QObject\n private:\n     MacDockIconHandler();\n \n-    DockIconClickEventHandler *m_dockIconClickEventHandler;\n     QWidget *m_dummyWidget;\n     QMenu *m_dockMenu;\n     QMainWindow *mainWindow;"
      },
      {
        "sha": "58a0365d3dca8923b94203ab74912ea7e4544914",
        "filename": "src/qt/macdockiconhandler.mm",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b60808c1eaddb402a699ba53d865932e08109ec/src/qt/macdockiconhandler.mm",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b60808c1eaddb402a699ba53d865932e08109ec/src/qt/macdockiconhandler.mm",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/macdockiconhandler.mm?ref=8b60808c1eaddb402a699ba53d865932e08109ec",
        "patch": "@@ -68,7 +68,6 @@ void setupDockClickHandler() {\n \n MacDockIconHandler::~MacDockIconHandler()\n {\n-    [this->m_dockIconClickEventHandler release];\n     delete this->m_dummyWidget;\n     this->setMainWindow(NULL);\n }\n@@ -118,6 +117,11 @@ void setupDockClickHandler() {\n     return s_instance;\n }\n \n+void MacDockIconHandler::cleanup()\n+{\n+    delete s_instance;\n+}\n+\n void MacDockIconHandler::handleDockIconClickEvent()\n {\n     if (this->mainWindow)"
      }
    ]
  },
  {
    "sha": "cd3d67cf3b0d573d2c387c2ec35e8b52129863d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDNkNjdjZjNiMGQ1NzNkMmMzODdjMmVjMzVlOGI1MjEyOTg2M2Q5",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-03-12T20:03:23Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-03-13T17:11:11Z"
      },
      "message": "Fix InvalidateBlock to add chainActive.Tip to setBlockIndexCandidates",
      "tree": {
        "sha": "b9c8a454b4c9fbd8c0d3dc5df17b2cde3ddb0256",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9c8a454b4c9fbd8c0d3dc5df17b2cde3ddb0256"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd3d67cf3b0d573d2c387c2ec35e8b52129863d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd3d67cf3b0d573d2c387c2ec35e8b52129863d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd3d67cf3b0d573d2c387c2ec35e8b52129863d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd3d67cf3b0d573d2c387c2ec35e8b52129863d9/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7077fe6dd4208bdbd46940f7923b7d89202c3287",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7077fe6dd4208bdbd46940f7923b7d89202c3287",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7077fe6dd4208bdbd46940f7923b7d89202c3287"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 28,
      "deletions": 3
    },
    "files": [
      {
        "sha": "ccfcf00e30e286498700e8396b0351ddf6073752",
        "filename": "qa/rpc-tests/invalidateblock.py",
        "status": "modified",
        "additions": 27,
        "deletions": 2,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd3d67cf3b0d573d2c387c2ec35e8b52129863d9/qa/rpc-tests/invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd3d67cf3b0d573d2c387c2ec35e8b52129863d9/qa/rpc-tests/invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidateblock.py?ref=cd3d67cf3b0d573d2c387c2ec35e8b52129863d9",
        "patch": "@@ -16,15 +16,17 @@ class InvalidateTest(BitcoinTestFramework):\n         \n     def setup_chain(self):\n         print(\"Initializing test directory \"+self.options.tmpdir)\n-        initialize_chain_clean(self.options.tmpdir, 2)\n+        initialize_chain_clean(self.options.tmpdir, 3)\n                  \n     def setup_network(self):\n         self.nodes = []\n         self.is_network_split = False \n         self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\"]))\n         self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\"]))\n+        self.nodes.append(start_node(2, self.options.tmpdir, [\"-debug\"]))\n         \n     def run_test(self):\n+        print \"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\"\n         print \"Mine 4 blocks on Node 0\"\n         self.nodes[0].setgenerate(True, 4)\n         assert(self.nodes[0].getblockcount() == 4)\n@@ -36,7 +38,7 @@ def run_test(self):\n \n         print \"Connect nodes to force a reorg\"\n         connect_nodes_bi(self.nodes,0,1)\n-        sync_blocks(self.nodes)\n+        sync_blocks(self.nodes[0:2])\n         assert(self.nodes[0].getblockcount() == 6)\n         badhash = self.nodes[1].getblockhash(2)\n \n@@ -47,5 +49,28 @@ def run_test(self):\n         if (newheight != 4 or newhash != besthash):\n             raise AssertionError(\"Wrong tip for node0, hash %s, height %d\"%(newhash,newheight))\n \n+        print \"\\nMake sure we won't reorg to a lower work chain:\"\n+        connect_nodes_bi(self.nodes,1,2)\n+        print \"Sync node 2 to node 1 so both have 6 blocks\"\n+        sync_blocks(self.nodes[1:3])\n+        assert(self.nodes[2].getblockcount() == 6)\n+        print \"Invalidate block 5 on node 1 so its tip is now at 4\"\n+        self.nodes[1].invalidateblock(self.nodes[1].getblockhash(5))\n+        assert(self.nodes[1].getblockcount() == 4)\n+        print \"Invalidate block 3 on node 2, so its tip is now 2\"\n+        self.nodes[2].invalidateblock(self.nodes[2].getblockhash(3))\n+        assert(self.nodes[2].getblockcount() == 2)\n+        print \"..and then mine a block\"\n+        self.nodes[2].setgenerate(True, 1)\n+        print \"Verify all nodes are at the right height\"\n+        time.sleep(5)\n+        for i in xrange(3):\n+            print i,self.nodes[i].getblockcount()\n+        assert(self.nodes[2].getblockcount() == 3)\n+        assert(self.nodes[0].getblockcount() == 4)\n+        node1height = self.nodes[1].getblockcount()\n+        if node1height < 4:\n+            raise AssertionError(\"Node 1 reorged to a lower height: %d\"%node1height)\n+\n if __name__ == '__main__':\n     InvalidateTest().main()"
      },
      {
        "sha": "5207f608969831d289fefe85d34d4bdb6bec4367",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd3d67cf3b0d573d2c387c2ec35e8b52129863d9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd3d67cf3b0d573d2c387c2ec35e8b52129863d9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=cd3d67cf3b0d573d2c387c2ec35e8b52129863d9",
        "patch": "@@ -2310,7 +2310,7 @@ bool InvalidateBlock(CValidationState& state, CBlockIndex *pindex) {\n     // add them again.\n     BlockMap::iterator it = mapBlockIndex.begin();\n     while (it != mapBlockIndex.end()) {\n-        if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->nChainTx && setBlockIndexCandidates.value_comp()(chainActive.Tip(), it->second)) {\n+        if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->nChainTx && !setBlockIndexCandidates.value_comp()(it->second, chainActive.Tip())) {\n             setBlockIndexCandidates.insert(it->second);\n         }\n         it++;"
      }
    ]
  },
  {
    "sha": "41259ca6350cc9e27bd9a69bb7ab76af81262577",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTI1OWNhNjM1MGNjOWUyN2JkOWE2OWJiN2FiNzZhZjgxMjYyNTc3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-16T11:21:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-16T11:21:33Z"
      },
      "message": "Merge pull request #5849\n\n3c6d594 contrib/init/bitcoind.openrc: Compatibility with previous OpenRC init script variables (Luke Dashjr)",
      "tree": {
        "sha": "cd357f6e7e02d02998ba426d5d8a4b14a7d718c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd357f6e7e02d02998ba426d5d8a4b14a7d718c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41259ca6350cc9e27bd9a69bb7ab76af81262577",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVBry9AAoJEHSBCwEjRsmm4Y4IAMpVYWFS6AT10ciPjS4L0SjJ\nsVcHs9COAlVZTiKN5t+5X2d0D9ICmt3VEvWr1lg6Si3sD9i9iC96r+G/5HpuShMV\nbCMXTF7ZXxTei+PwL8zJw/zD2a+P+TZ8vKE7+4pc1tdClWNOpSgXgAUaGmXb1Fbj\nQaP4QbrhdkB6abARc9KJbfF9eCik1C3TZC+0pVUb9poJ+uh6Hl5VCNTXK7FL5AAZ\nZ+Dqlw7VjAkVfi1llfKNC62Jl+f+1iCbxfRxO03hYl0vGKdcMxFgK3BPgED7De1y\nuHpstUZK02zAbGYR+hnrGuwvRG3BTbAHEI0/1R+Wk8T74Juge5emVPdCh0/N1c0=\n=2nBJ\n-----END PGP SIGNATURE-----",
        "payload": "tree cd357f6e7e02d02998ba426d5d8a4b14a7d718c1\nparent 7077fe6dd4208bdbd46940f7923b7d89202c3287\nparent 3c6d594e646f6d9427eb1c850ce26430a94051e0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1426504884 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1426504893 +0100\n\nMerge pull request #5849\n\n3c6d594 contrib/init/bitcoind.openrc: Compatibility with previous OpenRC init script variables (Luke Dashjr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41259ca6350cc9e27bd9a69bb7ab76af81262577",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41259ca6350cc9e27bd9a69bb7ab76af81262577",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41259ca6350cc9e27bd9a69bb7ab76af81262577/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7077fe6dd4208bdbd46940f7923b7d89202c3287",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7077fe6dd4208bdbd46940f7923b7d89202c3287",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7077fe6dd4208bdbd46940f7923b7d89202c3287"
      },
      {
        "sha": "3c6d594e646f6d9427eb1c850ce26430a94051e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c6d594e646f6d9427eb1c850ce26430a94051e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c6d594e646f6d9427eb1c850ce26430a94051e0"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b0ac5e31e183a9f81d15f95be1e4b3d9fa08e02b",
        "filename": "contrib/init/bitcoind.openrc",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41259ca6350cc9e27bd9a69bb7ab76af81262577/contrib/init/bitcoind.openrc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41259ca6350cc9e27bd9a69bb7ab76af81262577/contrib/init/bitcoind.openrc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/bitcoind.openrc?ref=41259ca6350cc9e27bd9a69bb7ab76af81262577",
        "patch": "@@ -12,9 +12,11 @@ BITCOIND_CONFIGFILE=${BITCOIND_CONFIGFILE:-/etc/bitcoin/bitcoin.conf}\n BITCOIND_PIDDIR=${BITCOIND_PIDDIR:-/var/run/bitcoind}\n BITCOIND_PIDFILE=${BITCOIND_PIDFILE:-${BITCOIND_PIDDIR}/bitcoind.pid}\n BITCOIND_DATADIR=${BITCOIND_DATADIR:-${BITCOIND_DEFAULT_DATADIR}}\n-BITCOIND_USER=${BITCOIND_USER:-bitcoin}\n+BITCOIND_USER=${BITCOIND_USER:-${BITCOIN_USER:-bitcoin}}\n BITCOIND_GROUP=${BITCOIND_GROUP:-bitcoin}\n BITCOIND_BIN=${BITCOIND_BIN:-/usr/bin/bitcoind}\n+BITCOIND_NICE=${BITCOIND_NICE:-${NICELEVEL:-0}}\n+BITCOIND_OPTS=\"${BITCOIND_OPTS:-${BITCOIN_OPTS}}\"\n \n name=\"Bitcoin Core Daemon\"\n description=\"Bitcoin crypto-currency p2p network daemon\"\n@@ -28,7 +30,7 @@ command_args=\"-pid=\\\"${BITCOIND_PIDFILE}\\\" \\\n \n required_files=\"${BITCOIND_CONFIGFILE}\"\n start_stop_daemon_args=\"-u ${BITCOIND_USER} \\\n-\t\t\t-N ${BITCOIND_NICE:-0} -w 2000\"\n+\t\t\t-N ${BITCOIND_NICE} -w 2000\"\n pidfile=\"${BITCOIND_PIDFILE}\"\n retry=60\n "
      }
    ]
  },
  {
    "sha": "df5c246ba38c5b5bdd6192b0201d2fe8245451ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjVjMjQ2YmEzOGM1YjViZGQ2MTkyYjAyMDFkMmZlODI0NTQ1MWNh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-16T11:22:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-16T11:23:14Z"
      },
      "message": "Merge pull request #5831\n\n1d9b378 qa/rpc-tests/wallet: Tests for sendmany (Luke Dashjr)\n40a7573 rpcwallet/sendmany: Just take an array of addresses to subtract fees from, rather than an Object with all values being identical (Luke Dashjr)\n292623a Subtract fee from amount (Cozz Lovan)\n90a43c1 [Qt] Code-movement-only: Format confirmation message in sendcoinsdialog (Cozz Lovan)",
      "tree": {
        "sha": "d03315ec086de900551c1e0413c537edabdff2c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d03315ec086de900551c1e0413c537edabdff2c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df5c246ba38c5b5bdd6192b0201d2fe8245451ca",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVBr0iAAoJEHSBCwEjRsmmvE0H/2K/r8dKUm9CB+Qm32+LXo59\nwHz5l0aIG9QRQkk0SUMyWbaDtQp+noGRgxqj7lc/iZ8MHVYgR9aMk9aJ4AKIthTI\nStIh9k1Pgu7gZa39JCGc5ambZyddXGf1bM3yjHCRfRs7vH9Yyc6TBOoym+4nfRPq\nVjqIBh70KGfgRE5k3agGljqPkFTQFMjNMVzCcG9/lSpIW23LuKOtScfGJchv7xby\nG3EiwxWX6oPi3gBeks74r84gr3D9ak4By7cj5jigFFlQ4/gvZ2SqmeRnWhfbzR2s\noe0BWSoJy1CHeRqHQXYt2tYx0eYATBmWHjhi1NAeH/IFuFdG8VvFpZSfkhEXl7k=\n=x7w8\n-----END PGP SIGNATURE-----",
        "payload": "tree d03315ec086de900551c1e0413c537edabdff2c4\nparent 41259ca6350cc9e27bd9a69bb7ab76af81262577\nparent 1d9b378c3071293a31a3b4d1845d9626f10da432\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1426504972 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1426504994 +0100\n\nMerge pull request #5831\n\n1d9b378 qa/rpc-tests/wallet: Tests for sendmany (Luke Dashjr)\n40a7573 rpcwallet/sendmany: Just take an array of addresses to subtract fees from, rather than an Object with all values being identical (Luke Dashjr)\n292623a Subtract fee from amount (Cozz Lovan)\n90a43c1 [Qt] Code-movement-only: Format confirmation message in sendcoinsdialog (Cozz Lovan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df5c246ba38c5b5bdd6192b0201d2fe8245451ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df5c246ba38c5b5bdd6192b0201d2fe8245451ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41259ca6350cc9e27bd9a69bb7ab76af81262577",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41259ca6350cc9e27bd9a69bb7ab76af81262577",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41259ca6350cc9e27bd9a69bb7ab76af81262577"
      },
      {
        "sha": "1d9b378c3071293a31a3b4d1845d9626f10da432",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d9b378c3071293a31a3b4d1845d9626f10da432",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d9b378c3071293a31a3b4d1845d9626f10da432"
      }
    ],
    "stats": {
      "total": 379,
      "additions": 290,
      "deletions": 89
    },
    "files": [
      {
        "sha": "dc4e0f77bd4b0b6b323a1d52df87169537130f32",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=df5c246ba38c5b5bdd6192b0201d2fe8245451ca",
        "patch": "@@ -102,6 +102,35 @@ def run_test (self):\n         assert_equal(self.nodes[2].getbalance(), 100)\n         assert_equal(self.nodes[2].getbalance(\"from1\"), 100-21)\n \n+        # Send 10 BTC normal\n+        address = self.nodes[0].getnewaddress(\"test\")\n+        self.nodes[2].settxfee(Decimal('0.001'))\n+        txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", False)\n+        self.nodes[2].setgenerate(True, 1)\n+        self.sync_all()\n+        assert_equal(self.nodes[2].getbalance(), Decimal('89.99900000'))\n+        assert_equal(self.nodes[0].getbalance(), Decimal('10.00000000'))\n+\n+        # Send 10 BTC with subtract fee from amount\n+        txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", True)\n+        self.nodes[2].setgenerate(True, 1)\n+        self.sync_all()\n+        assert_equal(self.nodes[2].getbalance(), Decimal('79.99900000'))\n+        assert_equal(self.nodes[0].getbalance(), Decimal('19.99900000'))\n+\n+        # Sendmany 10 BTC\n+        txid = self.nodes[2].sendmany('from1', {address: 10}, 0, \"\", [])\n+        self.nodes[2].setgenerate(True, 1)\n+        self.sync_all()\n+        assert_equal(self.nodes[2].getbalance(), Decimal('69.99800000'))\n+        assert_equal(self.nodes[0].getbalance(), Decimal('29.99900000'))\n+\n+        # Sendmany 10 BTC with subtract fee from amount\n+        txid = self.nodes[2].sendmany('from1', {address: 10}, 0, \"\", [address])\n+        self.nodes[2].setgenerate(True, 1)\n+        self.sync_all()\n+        assert_equal(self.nodes[2].getbalance(), Decimal('59.99800000'))\n+        assert_equal(self.nodes[0].getbalance(), Decimal('39.99800000'))\n \n if __name__ == '__main__':\n     WalletTest ().main ()"
      },
      {
        "sha": "6cfd93a9a1891c6d19884b0096ffcb124d8c45ba",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=df5c246ba38c5b5bdd6192b0201d2fe8245451ca",
        "patch": "@@ -135,7 +135,7 @@ class CTxOut\n \n     uint256 GetHash() const;\n \n-    bool IsDust(CFeeRate minRelayTxFee) const\n+    CAmount GetDustThreshold(const CFeeRate &minRelayTxFee) const\n     {\n         // \"Dust\" is defined in terms of CTransaction::minRelayTxFee,\n         // which has units satoshis-per-kilobyte.\n@@ -146,7 +146,12 @@ class CTxOut\n         // so dust is a txout less than 546 satoshis \n         // with default minRelayTxFee.\n         size_t nSize = GetSerializeSize(SER_DISK,0)+148u;\n-        return (nValue < 3*minRelayTxFee.GetFee(nSize));\n+        return 3*minRelayTxFee.GetFee(nSize);\n+    }\n+\n+    bool IsDust(const CFeeRate &minRelayTxFee) const\n+    {\n+        return (nValue < GetDustThreshold(minRelayTxFee));\n     }\n \n     friend bool operator==(const CTxOut& a, const CTxOut& b)"
      },
      {
        "sha": "5042ff06a26f64fac76aede09909aca3ec1c1c1e",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 5,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=df5c246ba38c5b5bdd6192b0201d2fe8245451ca",
        "patch": "@@ -33,6 +33,7 @@\n using namespace std;\n QList<CAmount> CoinControlDialog::payAmounts;\n CCoinControl* CoinControlDialog::coinControl = new CCoinControl();\n+bool CoinControlDialog::fSubtractFeeFromAmount = false;\n \n CoinControlDialog::CoinControlDialog(QWidget *parent) :\n     QDialog(parent),\n@@ -541,6 +542,11 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         dPriority = dPriorityInputs / (nBytes - nBytesInputs + (nQuantityUncompressed * 29)); // 29 = 180 - 151 (uncompressed public keys are over the limit. max 151 bytes of the input are ignored for priority)\n         sPriorityLabel = CoinControlDialog::getPriorityLabel(dPriority, mempoolEstimatePriority);\n \n+        // in the subtract fee from amount case, we can tell if zero change already and subtract the bytes, so that fee calculation afterwards is accurate\n+        if (CoinControlDialog::fSubtractFeeFromAmount)\n+            if (nAmount - nPayAmount == 0)\n+                nBytes -= 34;\n+\n         // Fee\n         nPayFee = CWallet::GetMinimumFee(nBytes, nTxConfirmTarget, mempool);\n \n@@ -556,20 +562,27 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n \n         if (nPayAmount > 0)\n         {\n-            nChange = nAmount - nPayFee - nPayAmount;\n+            nChange = nAmount - nPayAmount;\n+            if (!CoinControlDialog::fSubtractFeeFromAmount)\n+                nChange -= nPayFee;\n \n             // Never create dust outputs; if we would, just add the dust to the fee.\n             if (nChange > 0 && nChange < CENT)\n             {\n                 CTxOut txout(nChange, (CScript)vector<unsigned char>(24, 0));\n                 if (txout.IsDust(::minRelayTxFee))\n                 {\n-                    nPayFee += nChange;\n-                    nChange = 0;\n+                    if (CoinControlDialog::fSubtractFeeFromAmount) // dust-change will be raised until no dust\n+                        nChange = txout.GetDustThreshold(::minRelayTxFee);\n+                    else\n+                    {\n+                        nPayFee += nChange;\n+                        nChange = 0;\n+                    }\n                 }\n             }\n \n-            if (nChange == 0)\n+            if (nChange == 0 && !CoinControlDialog::fSubtractFeeFromAmount)\n                 nBytes -= 34;\n         }\n \n@@ -612,7 +625,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     {\n         l3->setText(ASYMP_UTF8 + l3->text());\n         l4->setText(ASYMP_UTF8 + l4->text());\n-        if (nChange > 0)\n+        if (nChange > 0 && !CoinControlDialog::fSubtractFeeFromAmount)\n             l8->setText(ASYMP_UTF8 + l8->text());\n     }\n "
      },
      {
        "sha": "5ec382838f9069442773ec09a9d5571adf495214",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=df5c246ba38c5b5bdd6192b0201d2fe8245451ca",
        "patch": "@@ -43,6 +43,7 @@ class CoinControlDialog : public QDialog\n \n     static QList<CAmount> payAmounts;\n     static CCoinControl *coinControl;\n+    static bool fSubtractFeeFromAmount;\n \n private:\n     Ui::CoinControlDialog *ui;"
      },
      {
        "sha": "b362928438cee988fad5a10657916611a58fb870",
        "filename": "src/qt/forms/sendcoinsentry.ui",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/src/qt/forms/sendcoinsentry.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/src/qt/forms/sendcoinsentry.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsentry.ui?ref=df5c246ba38c5b5bdd6192b0201d2fe8245451ca",
        "patch": "@@ -157,7 +157,21 @@\n      </widget>\n     </item>\n     <item row=\"2\" column=\"1\">\n-     <widget class=\"BitcoinAmountField\" name=\"payAmount\"/>\n+     <layout class=\"QHBoxLayout\" name=\"horizontalLayoutAmount\" stretch=\"0,1\">\n+      <item>\n+       <widget class=\"BitcoinAmountField\" name=\"payAmount\"/>\n+      </item>\n+      <item>\n+       <widget class=\"QCheckBox\" name=\"checkboxSubtractFeeFromAmount\">\n+        <property name=\"toolTip\">\n+         <string>The fee will be deducted from the amount being sent. The recipient will receive less bitcoins than you enter in the amount field. If multiple recipients are selected, the fee is split equally.</string>\n+        </property>\n+        <property name=\"text\">\n+         <string>S&amp;ubtract fee from amount</string>\n+        </property>\n+       </widget>\n+      </item>\n+     </layout>\n     </item>\n     <item row=\"3\" column=\"0\">\n      <widget class=\"QLabel\" name=\"messageLabel\">"
      },
      {
        "sha": "d921fe2e1bc9a81546e80edb2095c8157ddcc039",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 31,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=df5c246ba38c5b5bdd6192b0201d2fe8245451ca",
        "patch": "@@ -220,9 +220,37 @@ void SendCoinsDialog::on_sendButton_clicked()\n         return;\n     }\n \n+    fNewRecipientAllowed = false;\n+    WalletModel::UnlockContext ctx(model->requestUnlock());\n+    if(!ctx.isValid())\n+    {\n+        // Unlock wallet was cancelled\n+        fNewRecipientAllowed = true;\n+        return;\n+    }\n+\n+    // prepare transaction for getting txFee earlier\n+    WalletModelTransaction currentTransaction(recipients);\n+    WalletModel::SendCoinsReturn prepareStatus;\n+    if (model->getOptionsModel()->getCoinControlFeatures()) // coin control enabled\n+        prepareStatus = model->prepareTransaction(currentTransaction, CoinControlDialog::coinControl);\n+    else\n+        prepareStatus = model->prepareTransaction(currentTransaction);\n+\n+    // process prepareStatus and on error generate message shown to user\n+    processSendCoinsReturn(prepareStatus,\n+        BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), currentTransaction.getTransactionFee()));\n+\n+    if(prepareStatus.status != WalletModel::OK) {\n+        fNewRecipientAllowed = true;\n+        return;\n+    }\n+\n+    CAmount txFee = currentTransaction.getTransactionFee();\n+\n     // Format confirmation message\n     QStringList formatted;\n-    foreach(const SendCoinsRecipient &rcp, recipients)\n+    foreach(const SendCoinsRecipient &rcp, currentTransaction.getRecipients())\n     {\n         // generate bold amount string\n         QString amount = \"<b>\" + BitcoinUnits::formatHtmlWithUnit(model->getOptionsModel()->getDisplayUnit(), rcp.amount);\n@@ -257,35 +285,6 @@ void SendCoinsDialog::on_sendButton_clicked()\n         formatted.append(recipientElement);\n     }\n \n-    fNewRecipientAllowed = false;\n-\n-\n-    WalletModel::UnlockContext ctx(model->requestUnlock());\n-    if(!ctx.isValid())\n-    {\n-        // Unlock wallet was cancelled\n-        fNewRecipientAllowed = true;\n-        return;\n-    }\n-\n-    // prepare transaction for getting txFee earlier\n-    WalletModelTransaction currentTransaction(recipients);\n-    WalletModel::SendCoinsReturn prepareStatus;\n-    if (model->getOptionsModel()->getCoinControlFeatures()) // coin control enabled\n-        prepareStatus = model->prepareTransaction(currentTransaction, CoinControlDialog::coinControl);\n-    else\n-        prepareStatus = model->prepareTransaction(currentTransaction);\n-\n-    // process prepareStatus and on error generate message shown to user\n-    processSendCoinsReturn(prepareStatus,\n-        BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), currentTransaction.getTransactionFee()));\n-\n-    if(prepareStatus.status != WalletModel::OK) {\n-        fNewRecipientAllowed = true;\n-        return;\n-    }\n-\n-    CAmount txFee = currentTransaction.getTransactionFee();\n     QString questionString = tr(\"Are you sure you want to send?\");\n     questionString.append(\"<br /><br />%1\");\n \n@@ -368,6 +367,7 @@ SendCoinsEntry *SendCoinsDialog::addEntry()\n     ui->entries->addWidget(entry);\n     connect(entry, SIGNAL(removeEntry(SendCoinsEntry*)), this, SLOT(removeEntry(SendCoinsEntry*)));\n     connect(entry, SIGNAL(payAmountChanged()), this, SLOT(coinControlUpdateLabels()));\n+    connect(entry, SIGNAL(subtractFeeFromAmountChanged()), this, SLOT(coinControlUpdateLabels()));\n \n     updateTabsAndLabels();\n \n@@ -783,11 +783,17 @@ void SendCoinsDialog::coinControlUpdateLabels()\n \n     // set pay amounts\n     CoinControlDialog::payAmounts.clear();\n+    CoinControlDialog::fSubtractFeeFromAmount = false;\n     for(int i = 0; i < ui->entries->count(); ++i)\n     {\n         SendCoinsEntry *entry = qobject_cast<SendCoinsEntry*>(ui->entries->itemAt(i)->widget());\n         if(entry)\n-            CoinControlDialog::payAmounts.append(entry->getValue().amount);\n+        {\n+            SendCoinsRecipient rcp = entry->getValue();\n+            CoinControlDialog::payAmounts.append(rcp.amount);\n+            if (rcp.fSubtractFeeFromAmount)\n+                CoinControlDialog::fSubtractFeeFromAmount = true;\n+        }\n     }\n \n     if (CoinControlDialog::coinControl->HasSelected())"
      },
      {
        "sha": "6ac650e74fc383b3d0a21f815b174cfc309074bd",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=df5c246ba38c5b5bdd6192b0201d2fe8245451ca",
        "patch": "@@ -44,6 +44,7 @@ SendCoinsEntry::SendCoinsEntry(QWidget *parent) :\n \n     // Connect signals\n     connect(ui->payAmount, SIGNAL(valueChanged()), this, SIGNAL(payAmountChanged()));\n+    connect(ui->checkboxSubtractFeeFromAmount, SIGNAL(toggled(bool)), this, SIGNAL(subtractFeeFromAmountChanged()));\n     connect(ui->deleteButton, SIGNAL(clicked()), this, SLOT(deleteClicked()));\n     connect(ui->deleteButton_is, SIGNAL(clicked()), this, SLOT(deleteClicked()));\n     connect(ui->deleteButton_s, SIGNAL(clicked()), this, SLOT(deleteClicked()));\n@@ -94,6 +95,7 @@ void SendCoinsEntry::clear()\n     ui->payTo->clear();\n     ui->addAsLabel->clear();\n     ui->payAmount->clear();\n+    ui->checkboxSubtractFeeFromAmount->setCheckState(Qt::Unchecked);\n     ui->messageTextLabel->clear();\n     ui->messageTextLabel->hide();\n     ui->messageLabel->hide();\n@@ -165,6 +167,7 @@ SendCoinsRecipient SendCoinsEntry::getValue()\n     recipient.label = ui->addAsLabel->text();\n     recipient.amount = ui->payAmount->value();\n     recipient.message = ui->messageTextLabel->text();\n+    recipient.fSubtractFeeFromAmount = (ui->checkboxSubtractFeeFromAmount->checkState() == Qt::Checked);\n \n     return recipient;\n }\n@@ -174,7 +177,8 @@ QWidget *SendCoinsEntry::setupTabChain(QWidget *prev)\n     QWidget::setTabOrder(prev, ui->payTo);\n     QWidget::setTabOrder(ui->payTo, ui->addAsLabel);\n     QWidget *w = ui->payAmount->setupTabChain(ui->addAsLabel);\n-    QWidget::setTabOrder(w, ui->addressBookButton);\n+    QWidget::setTabOrder(w, ui->checkboxSubtractFeeFromAmount);\n+    QWidget::setTabOrder(ui->checkboxSubtractFeeFromAmount, ui->addressBookButton);\n     QWidget::setTabOrder(ui->addressBookButton, ui->pasteButton);\n     QWidget::setTabOrder(ui->pasteButton, ui->deleteButton);\n     return ui->deleteButton;"
      },
      {
        "sha": "c2d1185bddb8e29ebfda6925001e2943934bd935",
        "filename": "src/qt/sendcoinsentry.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/src/qt/sendcoinsentry.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/src/qt/sendcoinsentry.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.h?ref=df5c246ba38c5b5bdd6192b0201d2fe8245451ca",
        "patch": "@@ -51,6 +51,7 @@ public slots:\n signals:\n     void removeEntry(SendCoinsEntry *entry);\n     void payAmountChanged();\n+    void subtractFeeFromAmountChanged();\n \n private slots:\n     void deleteClicked();"
      },
      {
        "sha": "1baa5eb9322e77972bcccca0c7a2ac9f0c4331cf",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 5,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=df5c246ba38c5b5bdd6192b0201d2fe8245451ca",
        "patch": "@@ -6,6 +6,7 @@\n \n #include \"addresstablemodel.h\"\n #include \"guiconstants.h\"\n+#include \"guiutil.h\"\n #include \"paymentserver.h\"\n #include \"recentrequeststablemodel.h\"\n #include \"transactiontablemodel.h\"\n@@ -192,8 +193,9 @@ bool WalletModel::validateAddress(const QString &address)\n WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransaction &transaction, const CCoinControl *coinControl)\n {\n     CAmount total = 0;\n+    bool fSubtractFeeFromAmount = false;\n     QList<SendCoinsRecipient> recipients = transaction.getRecipients();\n-    std::vector<std::pair<CScript, CAmount> > vecSend;\n+    std::vector<CRecipient> vecSend;\n \n     if(recipients.empty())\n     {\n@@ -206,6 +208,9 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n     // Pre-check input data for validity\n     foreach(const SendCoinsRecipient &rcp, recipients)\n     {\n+        if (rcp.fSubtractFeeFromAmount)\n+            fSubtractFeeFromAmount = true;\n+\n         if (rcp.paymentRequest.IsInitialized())\n         {   // PaymentRequest...\n             CAmount subtotal = 0;\n@@ -217,7 +222,9 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n                 subtotal += out.amount();\n                 const unsigned char* scriptStr = (const unsigned char*)out.script().data();\n                 CScript scriptPubKey(scriptStr, scriptStr+out.script().size());\n-                vecSend.push_back(std::pair<CScript, CAmount>(scriptPubKey, out.amount()));\n+                CAmount nAmount = out.amount();\n+                CRecipient recipient = {scriptPubKey, nAmount, rcp.fSubtractFeeFromAmount};\n+                vecSend.push_back(recipient);\n             }\n             if (subtotal <= 0)\n             {\n@@ -239,7 +246,8 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n             ++nAddresses;\n \n             CScript scriptPubKey = GetScriptForDestination(CBitcoinAddress(rcp.address.toStdString()).Get());\n-            vecSend.push_back(std::pair<CScript, CAmount>(scriptPubKey, rcp.amount));\n+            CRecipient recipient = {scriptPubKey, rcp.amount, rcp.fSubtractFeeFromAmount};\n+            vecSend.push_back(recipient);\n \n             total += rcp.amount;\n         }\n@@ -260,17 +268,21 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n         LOCK2(cs_main, wallet->cs_wallet);\n \n         transaction.newPossibleKeyChange(wallet);\n+\n         CAmount nFeeRequired = 0;\n+        int nChangePosRet = -1;\n         std::string strFailReason;\n \n         CWalletTx *newTx = transaction.getTransaction();\n         CReserveKey *keyChange = transaction.getPossibleKeyChange();\n-        bool fCreated = wallet->CreateTransaction(vecSend, *newTx, *keyChange, nFeeRequired, strFailReason, coinControl);\n+        bool fCreated = wallet->CreateTransaction(vecSend, *newTx, *keyChange, nFeeRequired, nChangePosRet, strFailReason, coinControl);\n         transaction.setTransactionFee(nFeeRequired);\n+        if (fSubtractFeeFromAmount && fCreated)\n+            transaction.reassignAmounts(nChangePosRet);\n \n         if(!fCreated)\n         {\n-            if((total + nFeeRequired) > nBalance)\n+            if(!fSubtractFeeFromAmount && (total + nFeeRequired) > nBalance)\n             {\n                 return SendCoinsReturn(AmountWithFeeExceedsBalance);\n             }"
      },
      {
        "sha": "de915165f941d9ec2b96ccb6c9ab32f87780961f",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=df5c246ba38c5b5bdd6192b0201d2fe8245451ca",
        "patch": "@@ -36,9 +36,9 @@ QT_END_NAMESPACE\n class SendCoinsRecipient\n {\n public:\n-    explicit SendCoinsRecipient() : amount(0), nVersion(SendCoinsRecipient::CURRENT_VERSION) { }\n+    explicit SendCoinsRecipient() : amount(0), fSubtractFeeFromAmount(false), nVersion(SendCoinsRecipient::CURRENT_VERSION) { }\n     explicit SendCoinsRecipient(const QString &addr, const QString &label, const CAmount& amount, const QString &message):\n-        address(addr), label(label), amount(amount), message(message), nVersion(SendCoinsRecipient::CURRENT_VERSION) {}\n+        address(addr), label(label), amount(amount), message(message), fSubtractFeeFromAmount(false), nVersion(SendCoinsRecipient::CURRENT_VERSION) {}\n \n     // If from an unauthenticated payment request, this is used for storing\n     // the addresses, e.g. address-A<br />address-B<br />address-C.\n@@ -56,6 +56,8 @@ class SendCoinsRecipient\n     // Empty if no authentication or invalid signature/cert/etc.\n     QString authenticatedMerchant;\n \n+    bool fSubtractFeeFromAmount; // memory only\n+\n     static const int CURRENT_VERSION = 1;\n     int nVersion;\n "
      },
      {
        "sha": "c97add6befbf6081efb2f4b02841cd5e987ee1ec",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=df5c246ba38c5b5bdd6192b0201d2fe8245451ca",
        "patch": "@@ -46,6 +46,38 @@ void WalletModelTransaction::setTransactionFee(const CAmount& newFee)\n     fee = newFee;\n }\n \n+void WalletModelTransaction::reassignAmounts(int nChangePosRet)\n+{\n+    int i = 0;\n+    for (QList<SendCoinsRecipient>::iterator it = recipients.begin(); it != recipients.end(); ++it)\n+    {\n+        SendCoinsRecipient& rcp = (*it);\n+\n+        if (rcp.paymentRequest.IsInitialized())\n+        {\n+            CAmount subtotal = 0;\n+            const payments::PaymentDetails& details = rcp.paymentRequest.getDetails();\n+            for (int j = 0; j < details.outputs_size(); j++)\n+            {\n+                const payments::Output& out = details.outputs(j);\n+                if (out.amount() <= 0) continue;\n+                if (i == nChangePosRet)\n+                    i++;\n+                subtotal += walletTransaction->vout[i].nValue;\n+                i++;\n+            }\n+            rcp.amount = subtotal;\n+        }\n+        else // normal recipient (no payment request)\n+        {\n+            if (i == nChangePosRet)\n+                i++;\n+            rcp.amount = walletTransaction->vout[i].nValue;\n+            i++;\n+        }\n+    }\n+}\n+\n CAmount WalletModelTransaction::getTotalTransactionAmount()\n {\n     CAmount totalTransactionAmount = 0;"
      },
      {
        "sha": "7765fea4afe0f719fe33a0ca184904a4d6b32d6c",
        "filename": "src/qt/walletmodeltransaction.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/src/qt/walletmodeltransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/src/qt/walletmodeltransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.h?ref=df5c246ba38c5b5bdd6192b0201d2fe8245451ca",
        "patch": "@@ -35,8 +35,10 @@ class WalletModelTransaction\n     void newPossibleKeyChange(CWallet *wallet);\n     CReserveKey *getPossibleKeyChange();\n \n+    void reassignAmounts(int nChangePosRet); // needed for the subtract-fee-from-amount feature\n+\n private:\n-    const QList<SendCoinsRecipient> recipients;\n+    QList<SendCoinsRecipient> recipients;\n     CWalletTx *walletTransaction;\n     CReserveKey *keyChange;\n     CAmount fee;"
      },
      {
        "sha": "a45ea9839beab179e862d382f35fcfbc751168cb",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=df5c246ba38c5b5bdd6192b0201d2fe8245451ca",
        "patch": "@@ -32,6 +32,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getnetworkhashps\", 0 },\n     { \"getnetworkhashps\", 1 },\n     { \"sendtoaddress\", 1 },\n+    { \"sendtoaddress\", 4 },\n     { \"settxfee\", 0 },\n     { \"getreceivedbyaddress\", 1 },\n     { \"getreceivedbyaccount\", 1 },\n@@ -59,6 +60,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"listsinceblock\", 2 },\n     { \"sendmany\", 1 },\n     { \"sendmany\", 2 },\n+    { \"sendmany\", 4 },\n     { \"addmultisigaddress\", 0 },\n     { \"addmultisigaddress\", 1 },\n     { \"createmultisig\", 0 },"
      },
      {
        "sha": "5502b0b261dfd5e115e04ff740c4898bb3a59420",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 15,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=df5c246ba38c5b5bdd6192b0201d2fe8245451ca",
        "patch": "@@ -317,7 +317,7 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n     return ret;\n }\n \n-static void SendMoney(const CTxDestination &address, CAmount nValue, CWalletTx& wtxNew)\n+static void SendMoney(const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew)\n {\n     CAmount curBalance = pwalletMain->GetBalance();\n \n@@ -335,21 +335,24 @@ static void SendMoney(const CTxDestination &address, CAmount nValue, CWalletTx&\n     CReserveKey reservekey(pwalletMain);\n     CAmount nFeeRequired;\n     std::string strError;\n-    if (!pwalletMain->CreateTransaction(scriptPubKey, nValue, wtxNew, reservekey, nFeeRequired, strError)) {\n-        if (nValue + nFeeRequired > curBalance)\n-            throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired)));\n-        else\n-            throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    vector<CRecipient> vecSend;\n+    int nChangePosRet = -1;\n+    CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n+    vecSend.push_back(recipient);\n+    if (!pwalletMain->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError)) {\n+        if (!fSubtractFeeFromAmount && nValue + nFeeRequired > pwalletMain->GetBalance())\n+            strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n+        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n     if (!pwalletMain->CommitTransaction(wtxNew, reservekey))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n }\n \n Value sendtoaddress(const Array& params, bool fHelp)\n {\n-    if (fHelp || params.size() < 2 || params.size() > 4)\n+    if (fHelp || params.size() < 2 || params.size() > 5)\n         throw runtime_error(\n-            \"sendtoaddress \\\"bitcoinaddress\\\" amount ( \\\"comment\\\" \\\"comment-to\\\" )\\n\"\n+            \"sendtoaddress \\\"bitcoinaddress\\\" amount ( \\\"comment\\\" \\\"comment-to\\\" subtractfeefromamount )\\n\"\n             \"\\nSend an amount to a given address. The amount is a real and is rounded to the nearest 0.00000001\\n\"\n             + HelpRequiringPassphrase() +\n             \"\\nArguments:\\n\"\n@@ -360,11 +363,14 @@ Value sendtoaddress(const Array& params, bool fHelp)\n             \"4. \\\"comment-to\\\"  (string, optional) A comment to store the name of the person or organization \\n\"\n             \"                             to which you're sending the transaction. This is not part of the \\n\"\n             \"                             transaction, just kept in your wallet.\\n\"\n+            \"5. subtractfeefromamount  (boolean, optional, default=false) The fee will be deducted from the amount being sent.\\n\"\n+            \"                             The recipient will receive less bitcoins than you enter in the amount field.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"transactionid\\\"  (string) The transaction id.\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.1\")\n             + HelpExampleCli(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.1 \\\"donation\\\" \\\"seans outpost\\\"\")\n+            + HelpExampleCli(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.1 \\\"\\\" \\\"\\\" true\")\n             + HelpExampleRpc(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\", 0.1, \\\"donation\\\", \\\"seans outpost\\\"\")\n         );\n \n@@ -384,9 +390,13 @@ Value sendtoaddress(const Array& params, bool fHelp)\n     if (params.size() > 3 && params[3].type() != null_type && !params[3].get_str().empty())\n         wtx.mapValue[\"to\"]      = params[3].get_str();\n \n+    bool fSubtractFeeFromAmount = false;\n+    if (params.size() > 4)\n+        fSubtractFeeFromAmount = params[4].get_bool();\n+\n     EnsureWalletIsUnlocked();\n \n-    SendMoney(address.Get(), nAmount, wtx);\n+    SendMoney(address.Get(), nAmount, fSubtractFeeFromAmount, wtx);\n \n     return wtx.GetHash().GetHex();\n }\n@@ -840,17 +850,17 @@ Value sendfrom(const Array& params, bool fHelp)\n     if (nAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n-    SendMoney(address.Get(), nAmount, wtx);\n+    SendMoney(address.Get(), nAmount, false, wtx);\n \n     return wtx.GetHash().GetHex();\n }\n \n \n Value sendmany(const Array& params, bool fHelp)\n {\n-    if (fHelp || params.size() < 2 || params.size() > 4)\n+    if (fHelp || params.size() < 2 || params.size() > 5)\n         throw runtime_error(\n-            \"sendmany \\\"fromaccount\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" )\\n\"\n+            \"sendmany \\\"fromaccount\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] )\\n\"\n             \"\\nSend multiple times. Amounts are double-precision floating point numbers.\"\n             + HelpRequiringPassphrase() + \"\\n\"\n             \"\\nArguments:\\n\"\n@@ -862,6 +872,14 @@ Value sendmany(const Array& params, bool fHelp)\n             \"    }\\n\"\n             \"3. minconf                 (numeric, optional, default=1) Only use the balance confirmed at least this many times.\\n\"\n             \"4. \\\"comment\\\"             (string, optional) A comment\\n\"\n+            \"5. subtractfeefromamount   (string, optional) A json array with addresses.\\n\"\n+            \"                           The fee will be equally deducted from the amount of each selected address.\\n\"\n+            \"                           Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+            \"                           If no addresses are specified here, the sender pays the fee.\\n\"\n+            \"    [\\n\"\n+            \"      \\\"address\\\"            (string) Subtract fee from this address\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"transactionid\\\"          (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n             \"                                    the number of addresses.\\n\"\n@@ -870,6 +888,8 @@ Value sendmany(const Array& params, bool fHelp)\n             + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\"\") +\n             \"\\nSend two amounts to two different addresses setting the confirmation and comment:\\n\"\n             + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\" 6 \\\"testing\\\"\") +\n+            \"\\nSend two amounts to two different addresses, subtract fee from amount:\\n\"\n+            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\" 1 \\\"\\\" \\\"[\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\",\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\"]\\\"\") +\n             \"\\nAs a json rpc call\\n\"\n             + HelpExampleRpc(\"sendmany\", \"\\\"\\\", \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\", 6, \\\"testing\\\"\")\n         );\n@@ -887,8 +907,12 @@ Value sendmany(const Array& params, bool fHelp)\n     if (params.size() > 3 && params[3].type() != null_type && !params[3].get_str().empty())\n         wtx.mapValue[\"comment\"] = params[3].get_str();\n \n+    Array subtractFeeFromAmount;\n+    if (params.size() > 4)\n+        subtractFeeFromAmount = params[4].get_array();\n+\n     set<CBitcoinAddress> setAddress;\n-    vector<pair<CScript, CAmount> > vecSend;\n+    vector<CRecipient> vecSend;\n \n     CAmount totalAmount = 0;\n     BOOST_FOREACH(const Pair& s, sendTo)\n@@ -905,7 +929,13 @@ Value sendmany(const Array& params, bool fHelp)\n         CAmount nAmount = AmountFromValue(s.value_);\n         totalAmount += nAmount;\n \n-        vecSend.push_back(make_pair(scriptPubKey, nAmount));\n+        bool fSubtractFeeFromAmount = false;\n+        BOOST_FOREACH(const Value& addr, subtractFeeFromAmount)\n+            if (addr.get_str() == s.name_)\n+                fSubtractFeeFromAmount = true;\n+\n+        CRecipient recipient = {scriptPubKey, nAmount, fSubtractFeeFromAmount};\n+        vecSend.push_back(recipient);\n     }\n \n     EnsureWalletIsUnlocked();\n@@ -918,8 +948,9 @@ Value sendmany(const Array& params, bool fHelp)\n     // Send\n     CReserveKey keyChange(pwalletMain);\n     CAmount nFeeRequired = 0;\n+    int nChangePosRet = -1;\n     string strFailReason;\n-    bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, strFailReason);\n+    bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, nChangePosRet, strFailReason);\n     if (!fCreated)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n     if (!pwalletMain->CommitTransaction(wtx, keyChange))"
      },
      {
        "sha": "9dfd34de9f4310adc78a75361317fafa7778f6d3",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 65,
        "deletions": 22,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=df5c246ba38c5b5bdd6192b0201d2fe8245451ca",
        "patch": "@@ -1549,21 +1549,22 @@ bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*\n             (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue, 0, 1, vCoins, setCoinsRet, nValueRet)));\n }\n \n-\n-\n-\n-bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n-                                CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl)\n+bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend,\n+                                CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, const CCoinControl* coinControl)\n {\n     CAmount nValue = 0;\n-    BOOST_FOREACH (const PAIRTYPE(CScript, CAmount)& s, vecSend)\n+    unsigned int nSubtractFeeFromAmount = 0;\n+    BOOST_FOREACH (const CRecipient& recipient, vecSend)\n     {\n-        if (nValue < 0)\n+        if (nValue < 0 || recipient.nAmount < 0)\n         {\n             strFailReason = _(\"Transaction amounts must be positive\");\n             return false;\n         }\n-        nValue += s.second;\n+        nValue += recipient.nAmount;\n+\n+        if (recipient.fSubtractFeeFromAmount)\n+            nSubtractFeeFromAmount++;\n     }\n     if (vecSend.empty() || nValue < 0)\n     {\n@@ -1606,16 +1607,40 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n                 txNew.vin.clear();\n                 txNew.vout.clear();\n                 wtxNew.fFromMe = true;\n+                nChangePosRet = -1;\n+                bool fFirst = true;\n \n-                CAmount nTotalValue = nValue + nFeeRet;\n+                CAmount nTotalValue = nValue;\n+                if (nSubtractFeeFromAmount == 0)\n+                    nTotalValue += nFeeRet;\n                 double dPriority = 0;\n                 // vouts to the payees\n-                BOOST_FOREACH (const PAIRTYPE(CScript, CAmount)& s, vecSend)\n+                BOOST_FOREACH (const CRecipient& recipient, vecSend)\n                 {\n-                    CTxOut txout(s.second, s.first);\n+                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                    if (recipient.fSubtractFeeFromAmount)\n+                    {\n+                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+\n+                        if (fFirst) // first receiver pays the remainder not divisible by output count\n+                        {\n+                            fFirst = false;\n+                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n+                        }\n+                    }\n+\n                     if (txout.IsDust(::minRelayTxFee))\n                     {\n-                        strFailReason = _(\"Transaction amount too small\");\n+                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n+                        {\n+                            if (txout.nValue < 0)\n+                                strFailReason = _(\"The transaction amount is too small to pay the fee\");\n+                            else\n+                                strFailReason = _(\"The transaction amount is too small to send after the fee has been deducted\");\n+                        }\n+                        else\n+                            strFailReason = _(\"Transaction amount too small\");\n                         return false;\n                     }\n                     txNew.vout.push_back(txout);\n@@ -1642,7 +1667,9 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n                     dPriority += (double)nCredit * age;\n                 }\n \n-                CAmount nChange = nValueIn - nValue - nFeeRet;\n+                CAmount nChange = nValueIn - nValue;\n+                if (nSubtractFeeFromAmount == 0)\n+                    nChange -= nFeeRet;\n \n                 if (nChange > 0)\n                 {\n@@ -1676,6 +1703,28 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n \n                     CTxOut newTxOut(nChange, scriptChange);\n \n+                    // We do not move dust-change to fees, because the sender would end up paying more than requested.\n+                    // This would be against the purpose of the all-inclusive feature.\n+                    // So instead we raise the change and deduct from the recipient.\n+                    if (nSubtractFeeFromAmount > 0 && newTxOut.IsDust(::minRelayTxFee))\n+                    {\n+                        CAmount nDust = newTxOut.GetDustThreshold(::minRelayTxFee) - newTxOut.nValue;\n+                        newTxOut.nValue += nDust; // raise change until no more dust\n+                        for (unsigned int i = 0; i < vecSend.size(); i++) // subtract from first recipient\n+                        {\n+                            if (vecSend[i].fSubtractFeeFromAmount)\n+                            {\n+                                txNew.vout[i].nValue -= nDust;\n+                                if (txNew.vout[i].IsDust(::minRelayTxFee))\n+                                {\n+                                    strFailReason = _(\"The transaction amount is too small to send after the fee has been deducted\");\n+                                    return false;\n+                                }\n+                                break;\n+                            }\n+                        }\n+                    }\n+\n                     // Never create dust outputs; if we would, just\n                     // add the dust to the fee.\n                     if (newTxOut.IsDust(::minRelayTxFee))\n@@ -1686,7 +1735,8 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n                     else\n                     {\n                         // Insert change txn at random position:\n-                        vector<CTxOut>::iterator position = txNew.vout.begin()+GetRandInt(txNew.vout.size()+1);\n+                        nChangePosRet = GetRandInt(txNew.vout.size()+1);\n+                        vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosRet;\n                         txNew.vout.insert(position, newTxOut);\n                     }\n                 }\n@@ -1755,15 +1805,8 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n             }\n         }\n     }\n-    return true;\n-}\n \n-bool CWallet::CreateTransaction(CScript scriptPubKey, const CAmount& nValue,\n-                                CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl)\n-{\n-    vector< pair<CScript, CAmount> > vecSend;\n-    vecSend.push_back(make_pair(scriptPubKey, nValue));\n-    return CreateTransaction(vecSend, wtxNew, reservekey, nFeeRet, strFailReason, coinControl);\n+    return true;\n }\n \n /**"
      },
      {
        "sha": "a5a2558f94bb5f2b61b287b44fd98cca6f8f8897",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5c246ba38c5b5bdd6192b0201d2fe8245451ca/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=df5c246ba38c5b5bdd6192b0201d2fe8245451ca",
        "patch": "@@ -103,6 +103,12 @@ class CAddressBookData\n     StringMap destdata;\n };\n \n+struct CRecipient\n+{\n+    CScript scriptPubKey;\n+    CAmount nAmount;\n+    bool fSubtractFeeFromAmount;\n+};\n \n typedef std::map<std::string, std::string> mapValue_t;\n \n@@ -611,10 +617,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetWatchOnlyBalance() const;\n     CAmount GetUnconfirmedWatchOnlyBalance() const;\n     CAmount GetImmatureWatchOnlyBalance() const;\n-    bool CreateTransaction(const std::vector<std::pair<CScript, CAmount> >& vecSend,\n-                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n-    bool CreateTransaction(CScript scriptPubKey, const CAmount& nValue,\n-                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n+    bool CreateTransaction(const std::vector<CRecipient>& vecSend,\n+                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n \n     static CFeeRate minTxFee;"
      }
    ]
  },
  {
    "sha": "f238add26ae1281481c15bdc252d2e4ef8f5a491",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjM4YWRkMjZhZTEyODE0ODFjMTViZGMyNTJkMmU0ZWY4ZjVhNDkx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-16T11:32:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-16T11:32:21Z"
      },
      "message": "Merge pull request #5847\n\n723664b startup script for centos, with documentation. (joshr)",
      "tree": {
        "sha": "6890cba6437a2ee6b6d491c6c4aaa911df6a8236",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6890cba6437a2ee6b6d491c6c4aaa911df6a8236"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f238add26ae1281481c15bdc252d2e4ef8f5a491",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVBr9FAAoJEHSBCwEjRsmmi1oIAMBWAACPs/IyRNvQ667NJPyC\n339RcXZnFVUAYZkBPeWGuSJma/sq7o07OhMXgxzqneuNemhUHWkwWf0jgdJdTC41\n7SMmIuqyOUpeoZQK0BbyMjIf36E4hh0HH+QnDAJ0nMcetMlInlDDBRK/H9TXIHsg\nTvcKtAtIKRwkOPdebNGuXHzvC/puGCnxitpSOdo9om3EYlq6r884esR+cgQvGs0J\nkrBL1+gTo1PxCsbF4OBwiY7rCPs+HF07PhVJvhtIARgtYUn5/A2+aVKCaHyqItOD\nf+YiS4cbRgDgfiN5ibtrk/U9X7cx2/2hYcdW/BHNKq1jGJ4BVNJ94MKuV17LI0E=\n=ngMi\n-----END PGP SIGNATURE-----",
        "payload": "tree 6890cba6437a2ee6b6d491c6c4aaa911df6a8236\nparent df5c246ba38c5b5bdd6192b0201d2fe8245451ca\nparent 723664b5dbc2829ed6988dd90af2d077dd9d555a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1426505527 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1426505541 +0100\n\nMerge pull request #5847\n\n723664b startup script for centos, with documentation. (joshr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f238add26ae1281481c15bdc252d2e4ef8f5a491",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f238add26ae1281481c15bdc252d2e4ef8f5a491",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f238add26ae1281481c15bdc252d2e4ef8f5a491/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df5c246ba38c5b5bdd6192b0201d2fe8245451ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df5c246ba38c5b5bdd6192b0201d2fe8245451ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df5c246ba38c5b5bdd6192b0201d2fe8245451ca"
      },
      {
        "sha": "723664b5dbc2829ed6988dd90af2d077dd9d555a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/723664b5dbc2829ed6988dd90af2d077dd9d555a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/723664b5dbc2829ed6988dd90af2d077dd9d555a"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 79,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0d19da30399b0a11be458948974e2b7ab45380a7",
        "filename": "contrib/init/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f238add26ae1281481c15bdc252d2e4ef8f5a491/contrib/init/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f238add26ae1281481c15bdc252d2e4ef8f5a491/contrib/init/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/README.md?ref=f238add26ae1281481c15bdc252d2e4ef8f5a491",
        "patch": "@@ -4,6 +4,7 @@ SystemD: bitcoind.service\n Upstart: bitcoind.conf\n OpenRC:  bitcoind.openrc\n          bitcoind.openrcconf\n+CentOS:  bitcoind.init\n \n have been made available to assist packagers in creating node packages here.\n "
      },
      {
        "sha": "db5061874b3a923278fa11d4f3117fca19da1bcc",
        "filename": "contrib/init/bitcoind.init",
        "status": "added",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f238add26ae1281481c15bdc252d2e4ef8f5a491/contrib/init/bitcoind.init",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f238add26ae1281481c15bdc252d2e4ef8f5a491/contrib/init/bitcoind.init",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/bitcoind.init?ref=f238add26ae1281481c15bdc252d2e4ef8f5a491",
        "patch": "@@ -0,0 +1,67 @@\n+#!/bin/bash\n+#\n+#  bitcoind The bitcoin core server.\n+#\n+#\n+# chkconfig: 345 80 20\n+# description: bitcoind\n+# processname: bitcoind\n+#\n+\n+# Source function library.\n+. /etc/init.d/functions\n+\n+# you can override defaults in /etc/sysconfig/bitcoind, see below\n+if [ -f /etc/sysconfig/bitcoind ]; then\n+        . /etc/sysconfig/bitcoind\n+fi\n+\n+RETVAL=0\n+\n+prog=bitcoind\n+# you can override the lockfile via BITCOIND_LOCKFILE in /etc/sysconfig/bitcoind\n+lockfile=${BITCOIND_LOCKFILE-/var/lock/subsys/bitcoind}\n+\n+# bitcoind defaults to /usr/bin/bitcoind, override with BITCOIND_BIN\n+bitcoind=${BITCOIND_BIN-/usr/bin/bitcoind}\n+\n+# bitcoind opts default to -disablewallet, override with BITCOIND_OPTS\n+bitcoind_opts=${BITCOIND_OPTS--disablewallet}\n+\n+start() {\n+    echo -n $\"Starting $prog: \"\n+    daemon $DAEMONOPTS $bitcoind $bitcoind_opts\n+    RETVAL=$?\n+    echo\n+    [ $RETVAL -eq 0 ] && touch $lockfile\n+    return $RETVAL\n+}\n+\n+stop() {\n+    echo -n $\"Stopping $prog: \"\n+    killproc $prog\n+    RETVAL=$?\n+    echo\n+    [ $RETVAL -eq 0 ] && rm -f $lockfile\n+    return $RETVAL\n+}\n+\n+case \"$1\" in\n+    start)\n+        start\n+        ;;\n+    stop)\n+        stop\n+        ;;\n+    status)\n+        status $prog\n+        ;;\n+    restart)\n+        stop\n+        start\n+        ;;\n+    *)\n+        echo \"Usage: service $prog {start|stop|status|restart}\"\n+        exit 1\n+        ;;\n+esac"
      },
      {
        "sha": "871bdc812344c235fa0c1e97d5f063cfe829f17b",
        "filename": "doc/init.md",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f238add26ae1281481c15bdc252d2e4ef8f5a491/doc/init.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f238add26ae1281481c15bdc252d2e4ef8f5a491/doc/init.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/init.md?ref=f238add26ae1281481c15bdc252d2e4ef8f5a491",
        "patch": "@@ -8,6 +8,7 @@ can be found in the contrib/init folder.\n     contrib/init/bitcoind.openrc:     OpenRC compatible SysV style init script\n     contrib/init/bitcoind.openrcconf: OpenRC conf.d file\n     contrib/init/bitcoind.conf:       Upstart service configuration file\n+    contrib/init/bitcoind.init:       CentOS compatible SysV style init script\n \n 1. Service User\n ---------------------------------\n@@ -49,6 +50,7 @@ Configuration file:  /etc/bitcoin/bitcoin.conf\n Data directory:      /var/lib/bitcoind\n PID file:            /var/run/bitcoind/bitcoind.pid (OpenRC and Upstart)\n                      /var/lib/bitcoind/bitcoind.pid (systemd)\n+Lock file:           /var/lock/subsys/bitcoind (CentOS)\n \n The configuration file, PID directory (if applicable) and data directory\n should all be owned by the bitcoin user and group.  It is advised for security\n@@ -81,7 +83,15 @@ Drop bitcoind.conf in /etc/init.  Test by running \"service bitcoind start\"\n it will automatically start on reboot.\n \n NOTE: This script is incompatible with CentOS 5 and Amazon Linux 2014 as they\n-use old versions of Upstart and do not supply the start-stop-daemon uitility.\n+use old versions of Upstart and do not supply the start-stop-daemon utility.\n+\n+4d) CentOS\n+\n+Copy bitcoind.init to /etc/init.d/bitcoind. Test by running \"service bitcoind start\".\n+\n+Using this script, you can adjust the path and flags to the bitcoind program by \n+setting the BITCOIND and FLAGS environment variables in the file \n+/etc/sysconfig/bitcoind. You can also use the DAEMONOPTS environment variable here.\n \n 5. Auto-respawn\n -----------------------------------"
      }
    ]
  },
  {
    "sha": "226f880498f82aee0d59974142dea3eeec2a12ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjZmODgwNDk4ZjgyYWVlMGQ1OTk3NDE0MmRlYTNlZWVjMmExMmVl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-16T12:54:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-16T12:55:35Z"
      },
      "message": "Merge pull request #5880\n\n8b60808 [QT] some mac specifiy cleanup (memory handling, unnecessary code) (Jonas Schnelli)\n89e70e9 [QT] fix OSX dock icon window reopening (Jonas Schnelli)",
      "tree": {
        "sha": "ff6de21e2297f16b54780a38e9d2236176865d1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff6de21e2297f16b54780a38e9d2236176865d1f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/226f880498f82aee0d59974142dea3eeec2a12ee",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVBtLHAAoJEHSBCwEjRsmmjiUH+wQ3PZc2Agnk4xQ7ClBZOnm+\niKJt7ZaeHKn8uF07jF0WUQUENBa2dj1Bu9JnDPQFilpaGK60AkMNuez6kFqwbyk7\nO9q0gDwUaBAWfYbMxR9jbQNcMY2KDv0l4v2x4PQ8hG3Lbqe6qNGWhRwHL013Z9Ev\nY3xTdNfsFrlhZYkINPXoL59Cx8Tb/Go0TE58BaX8EeKF3l88j9mC29wYbeC2XcM9\nHV3TP6OHjMVKr087+bgJ3xX3XYiPjqEDlJgyFpJ1sFM6AEO9teHGHlUoCLPoolqt\nLYeLEdOvdoRZw1r5KI3ZdeVJiMCqGq5G93WM1/Bu0soy8OSqc4Z2PvD7E6Xm7oc=\n=xZeV\n-----END PGP SIGNATURE-----",
        "payload": "tree ff6de21e2297f16b54780a38e9d2236176865d1f\nparent f238add26ae1281481c15bdc252d2e4ef8f5a491\nparent 8b60808c1eaddb402a699ba53d865932e08109ec\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1426510447 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1426510535 +0100\n\nMerge pull request #5880\n\n8b60808 [QT] some mac specifiy cleanup (memory handling, unnecessary code) (Jonas Schnelli)\n89e70e9 [QT] fix OSX dock icon window reopening (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/226f880498f82aee0d59974142dea3eeec2a12ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/226f880498f82aee0d59974142dea3eeec2a12ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/226f880498f82aee0d59974142dea3eeec2a12ee/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f238add26ae1281481c15bdc252d2e4ef8f5a491",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f238add26ae1281481c15bdc252d2e4ef8f5a491",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f238add26ae1281481c15bdc252d2e4ef8f5a491"
      },
      {
        "sha": "8b60808c1eaddb402a699ba53d865932e08109ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b60808c1eaddb402a699ba53d865932e08109ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b60808c1eaddb402a699ba53d865932e08109ec"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 31,
      "deletions": 41
    },
    "files": [
      {
        "sha": "58c005ae75ba4056c944ecf7da96ec25416b772c",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/226f880498f82aee0d59974142dea3eeec2a12ee/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/226f880498f82aee0d59974142dea3eeec2a12ee/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=226f880498f82aee0d59974142dea3eeec2a12ee",
        "patch": "@@ -237,7 +237,7 @@ BitcoinGUI::~BitcoinGUI()\n         trayIcon->hide();\n #ifdef Q_OS_MAC\n     delete appMenuBar;\n-    MacDockIconHandler::instance()->setMainWindow(NULL);\n+    MacDockIconHandler::cleanup();\n #endif\n \n     delete rpcConsole;"
      },
      {
        "sha": "15a6583ca44c45c26acf66236b8cacbf285f1931",
        "filename": "src/qt/macdockiconhandler.h",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/226f880498f82aee0d59974142dea3eeec2a12ee/src/qt/macdockiconhandler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/226f880498f82aee0d59974142dea3eeec2a12ee/src/qt/macdockiconhandler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/macdockiconhandler.h?ref=226f880498f82aee0d59974142dea3eeec2a12ee",
        "patch": "@@ -14,12 +14,6 @@ class QMenu;\n class QWidget;\n QT_END_NAMESPACE\n \n-#ifdef __OBJC__\n-@class DockIconClickEventHandler;\n-#else\n-class DockIconClickEventHandler;\n-#endif\n-\n /** Macintosh-specific dock icon handler.\n  */\n class MacDockIconHandler : public QObject\n@@ -33,7 +27,7 @@ class MacDockIconHandler : public QObject\n     void setIcon(const QIcon &icon);\n     void setMainWindow(QMainWindow *window);\n     static MacDockIconHandler *instance();\n-\n+    static void cleanup();\n     void handleDockIconClickEvent();\n \n signals:\n@@ -42,7 +36,6 @@ class MacDockIconHandler : public QObject\n private:\n     MacDockIconHandler();\n \n-    DockIconClickEventHandler *m_dockIconClickEventHandler;\n     QWidget *m_dummyWidget;\n     QMenu *m_dockMenu;\n     QMainWindow *mainWindow;"
      },
      {
        "sha": "58a0365d3dca8923b94203ab74912ea7e4544914",
        "filename": "src/qt/macdockiconhandler.mm",
        "status": "modified",
        "additions": 29,
        "deletions": 32,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/226f880498f82aee0d59974142dea3eeec2a12ee/src/qt/macdockiconhandler.mm",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/226f880498f82aee0d59974142dea3eeec2a12ee/src/qt/macdockiconhandler.mm",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/macdockiconhandler.mm?ref=226f880498f82aee0d59974142dea3eeec2a12ee",
        "patch": "@@ -11,52 +11,46 @@\n \n #undef slots\n #include <Cocoa/Cocoa.h>\n+#include <objc/objc.h>\n+#include <objc/message.h>\n \n #if QT_VERSION < 0x050000\n extern void qt_mac_set_dock_menu(QMenu *);\n #endif\n \n-@interface DockIconClickEventHandler : NSObject\n-{\n-    MacDockIconHandler* dockIconHandler;\n-}\n-\n-@end\n+static MacDockIconHandler *s_instance = NULL;\n \n-@implementation DockIconClickEventHandler\n-\n-- (id)initWithDockIconHandler:(MacDockIconHandler *)aDockIconHandler\n-{\n-    self = [super init];\n-    if (self) {\n-        dockIconHandler = aDockIconHandler;\n-\n-        [[NSAppleEventManager sharedAppleEventManager]\n-            setEventHandler:self\n-                andSelector:@selector(handleDockClickEvent:withReplyEvent:)\n-              forEventClass:kCoreEventClass\n-                 andEventID:kAEReopenApplication];\n-    }\n-    return self;\n+bool dockClickHandler(id self,SEL _cmd,...) {\n+    Q_UNUSED(self)\n+    Q_UNUSED(_cmd)\n+    \n+    s_instance->handleDockIconClickEvent();\n+    \n+    // Return NO (false) to suppress the default OS X actions\n+    return false;\n }\n \n-- (void)handleDockClickEvent:(NSAppleEventDescriptor*)event withReplyEvent:(NSAppleEventDescriptor*)replyEvent\n-{\n-    Q_UNUSED(event)\n-    Q_UNUSED(replyEvent)\n-\n-    if (dockIconHandler) {\n-        dockIconHandler->handleDockIconClickEvent();\n+void setupDockClickHandler() {\n+    Class cls = objc_getClass(\"NSApplication\");\n+    id appInst = objc_msgSend((id)cls, sel_registerName(\"sharedApplication\"));\n+    \n+    if (appInst != NULL) {\n+        id delegate = objc_msgSend(appInst, sel_registerName(\"delegate\"));\n+        Class delClass = (Class)objc_msgSend(delegate,  sel_registerName(\"class\"));\n+        SEL shouldHandle = sel_registerName(\"applicationShouldHandleReopen:hasVisibleWindows:\");\n+        if (class_getInstanceMethod(delClass, shouldHandle))\n+            class_replaceMethod(delClass, shouldHandle, (IMP)dockClickHandler, \"B@:\");\n+        else\n+            class_addMethod(delClass, shouldHandle, (IMP)dockClickHandler,\"B@:\");\n     }\n }\n \n-@end\n \n MacDockIconHandler::MacDockIconHandler() : QObject()\n {\n     NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];\n \n-    this->m_dockIconClickEventHandler = [[DockIconClickEventHandler alloc] initWithDockIconHandler:this];\n+    setupDockClickHandler();\n     this->m_dummyWidget = new QWidget();\n     this->m_dockMenu = new QMenu(this->m_dummyWidget);\n     this->setMainWindow(NULL);\n@@ -74,7 +68,6 @@ - (void)handleDockClickEvent:(NSAppleEventDescriptor*)event withReplyEvent:(NSAp\n \n MacDockIconHandler::~MacDockIconHandler()\n {\n-    [this->m_dockIconClickEventHandler release];\n     delete this->m_dummyWidget;\n     this->setMainWindow(NULL);\n }\n@@ -119,12 +112,16 @@ - (void)handleDockClickEvent:(NSAppleEventDescriptor*)event withReplyEvent:(NSAp\n \n MacDockIconHandler *MacDockIconHandler::instance()\n {\n-    static MacDockIconHandler *s_instance = NULL;\n     if (!s_instance)\n         s_instance = new MacDockIconHandler();\n     return s_instance;\n }\n \n+void MacDockIconHandler::cleanup()\n+{\n+    delete s_instance;\n+}\n+\n void MacDockIconHandler::handleDockIconClickEvent()\n {\n     if (this->mainWindow)"
      }
    ]
  },
  {
    "sha": "bb44d9e7546e6118cd91db5bbe471a3ce2ee7fcd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjQ0ZDllNzU0NmU2MTE4Y2Q5MWRiNWJiZTQ3MWEzY2UyZWU3ZmNk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-03-17T01:01:20Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-03-17T03:45:15Z"
      },
      "message": "depends: fix a static qt5 crash when using certain versions of libxcb\n\nSee here for background: https://bugreports.qt.io/browse/QTBUG-34748\n\nlibxcb temporarily had an abi breakage which caused crashes when qt was\ncompiled against a non-compatible version. Building qt with -qt-xcb should have\nshielded us from this issue, except that incompatible headers were used when\nbuilding qt's wrapper.\n\nMake sure those headers aren't picked up by qt's build.\n\nDetails:\n\nqt's build adds a wrapper around the xcb libs when -qt-xcb is used. This is\ndone to avoid having to link to a handful of different libs, which may not be\napi/abi stable. This build depends on include-order, so that its files are\nfound before the real libxcb headers.\n\nOur build (for other reasons related to qt's complicated build-system) injects\nour prefix into CXXFLAGS. Because libxcb is found in this path, that reverses\nthe include-order, negating the purpose of the wrapper.\n\nTo fix, libxcb's includes are simply moved to a subdir. pkg-config ensures that\nthey're still found properly when needed.\n\nTo make things even more interesting, this behavior in qt's .pro files is broken:\nINCLUDEPATH += $$QMAKE_CFLAGS_XCB\n\nThe INCLUDEPATH variable is processed by qmake which automatically prefixes each\nentry with \"-I\". The QMAKE_CFLAGS_XCB variable comes from pkg-config and\nalready contains -I, making the path look like \"-I-I/path/to/xcb/headers\".\n\nTo work around that, CFLAGS/CXXFLAGS are used here rather than INCLUDEPATH.",
      "tree": {
        "sha": "053574a48db2838d265bd7bf5fe61e14446343bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/053574a48db2838d265bd7bf5fe61e14446343bc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb44d9e7546e6118cd91db5bbe471a3ce2ee7fcd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb44d9e7546e6118cd91db5bbe471a3ce2ee7fcd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb44d9e7546e6118cd91db5bbe471a3ce2ee7fcd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb44d9e7546e6118cd91db5bbe471a3ce2ee7fcd/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "226f880498f82aee0d59974142dea3eeec2a12ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/226f880498f82aee0d59974142dea3eeec2a12ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/226f880498f82aee0d59974142dea3eeec2a12ee"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 35,
      "deletions": 20
    },
    "files": [
      {
        "sha": "28f2bd6f25343de809c9b2c568bd88b778bb26ec",
        "filename": "depends/packages/libxcb.mk",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb44d9e7546e6118cd91db5bbe471a3ce2ee7fcd/depends/packages/libxcb.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb44d9e7546e6118cd91db5bbe471a3ce2ee7fcd/depends/packages/libxcb.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libxcb.mk?ref=bb44d9e7546e6118cd91db5bbe471a3ce2ee7fcd",
        "patch": "@@ -13,8 +13,13 @@ define $(package)_preprocess_cmds\n   sed \"s/pthread-stubs//\" -i configure\n endef\n \n+# Don't install xcb headers to the default path in order to work around a qt\n+# build issue: https://bugreports.qt.io/browse/QTBUG-34748\n+# When using qt's internal libxcb, it may end up finding the real headers in\n+# depends staging. Use a non-default path to avoid that.\n+\n define $(package)_config_cmds\n-  $($(package)_autoconf)\n+  $($(package)_autoconf) --includedir=$(host_prefix)/include/xcb-shared\n endef\n \n define $(package)_build_cmds"
      },
      {
        "sha": "3bdbba32a455474b845fac17d218be163a7c7690",
        "filename": "depends/patches/qt/fix-xcb-include-order.patch",
        "status": "modified",
        "additions": 29,
        "deletions": 19,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb44d9e7546e6118cd91db5bbe471a3ce2ee7fcd/depends/patches/qt/fix-xcb-include-order.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb44d9e7546e6118cd91db5bbe471a3ce2ee7fcd/depends/patches/qt/fix-xcb-include-order.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix-xcb-include-order.patch?ref=bb44d9e7546e6118cd91db5bbe471a3ce2ee7fcd",
        "patch": "@@ -1,21 +1,31 @@\n---- old/qtbase/src/plugins/platforms/xcb/xcb-plugin.pro\t2014-07-30 18:17:27.384458441 -0400\n-+++ new/qtbase/src/plugins/platforms/xcb/xcb-plugin.pro\t2014-07-30 18:18:28.620459303 -0400\n-@@ -101,10 +101,6 @@\n-     }\n- }\n- \n--DEFINES += $$QMAKE_DEFINES_XCB\n--LIBS += $$QMAKE_LIBS_XCB\n+--- old/qtbase/src/plugins/platforms/xcb/xcb-plugin.pro 2015-03-17 02:06:42.705930685 +0000\n++++ new/qtbase/src/plugins/platforms/xcb/xcb-plugin.pro 2015-03-17 02:08:41.281926351 +0000\n+@@ -103,7 +103,6 @@\n+\n+ DEFINES += $$QMAKE_DEFINES_XCB\n+ LIBS += $$QMAKE_LIBS_XCB\n -QMAKE_CXXFLAGS += $$QMAKE_CFLAGS_XCB\n--\n+\n  CONFIG += qpa/genericunixfontdatabase\n- \n- contains(QT_CONFIG, dbus) {\n-@@ -141,3 +137,7 @@\n-         INCLUDEPATH += ../../../3rdparty/xkbcommon/xkbcommon/\n-     }\n- }\n-+\n-+DEFINES += $$QMAKE_DEFINES_XCB\n-+LIBS += $$QMAKE_LIBS_XCB\n-+INCLUDEPATH += $$QMAKE_CFLAGS_XCB\n+\n+@@ -118,7 +117,8 @@\n+ contains(QT_CONFIG, xcb-qt) {\n+     DEFINES += XCB_USE_RENDER\n+     XCB_DIR = ../../../3rdparty/xcb\n+-    INCLUDEPATH += $$XCB_DIR/include $$XCB_DIR/sysinclude\n++    QMAKE_CFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/sysinclude $$QMAKE_CFLAGS_XCB\n++    QMAKE_CXXFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/sysinclude $$QMAKE_CFLAGS_XCB\n+     LIBS += -lxcb -L$$OUT_PWD/xcb-static -lxcb-static\n+ } else {\n+     LIBS += -lxcb -lxcb-image -lxcb-icccm -lxcb-sync -lxcb-xfixes -lxcb-shm -lxcb-randr\n+--- old/qtbase/src/plugins/platforms/xcb/xcb-static/xcb-static.pro      2015-03-17 02:07:04.641929383 +0000\n++++ new/qtbase/src/plugins/platforms/xcb/xcb-static/xcb-static.pro      2015-03-17 02:10:15.485922059 +0000\n+@@ -8,7 +8,7 @@\n+\n+ XCB_DIR = ../../../../3rdparty/xcb\n+\n+-INCLUDEPATH += $$XCB_DIR/include $$XCB_DIR/include/xcb $$XCB_DIR/sysinclude\n++QMAKE_CFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/include/xcb -I$$XCB_DIR/sysinclude $$QMAKE_CFLAGS_XCB\n+\n+ # ignore compiler warnings in 3rdparty code\n+ QMAKE_CFLAGS_STATIC_LIB+=-w"
      }
    ]
  },
  {
    "sha": "5bd3a92da2ddfc831520685b4492569b4a5ed543",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YmQzYTkyZGEyZGRmYzgzMTUyMDY4NWI0NDkyNTY5YjRhNWVkNTQz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-17T07:00:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-17T07:00:59Z"
      },
      "message": "Merge pull request #5915\n\nbb44d9e depends: fix a static qt5 crash when using certain versions of libxcb (Cory Fields)",
      "tree": {
        "sha": "053574a48db2838d265bd7bf5fe61e14446343bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/053574a48db2838d265bd7bf5fe61e14446343bc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5bd3a92da2ddfc831520685b4492569b4a5ed543",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVB9ErAAoJEHSBCwEjRsmmQwEH+wdX5lqMQtT/06mIeoMai8Oy\nmrIB4iQpVVwE2bYsCBg7VCRqWrfxycC1QDn87yo0lSa2zuKDXUrd33KP99qTDzCE\n4mdRGlYbQwQ91oV7Ez6oD5KuUNFS+DyufgZFLyTN8GdRLZxA2cHscPrSXvR6sDIG\nKzgnX8qmkSaudQLsQcbP8xVxFLWRU/699ZAD7APMe0Pn0mwB0hJGtjVKfe+bBUz8\n6NHofl7/ZqUksPwky76sU3mWKU5bVeMdkdDWjtJKWIpzQFq7CroRPy5DXaTbGueF\neKjVd9Th3ArlqHOuFgPhxZsj7UZkC67dgF2wEMNwx8kndWx8FT3TxQUgR9lp91k=\n=D4rJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 053574a48db2838d265bd7bf5fe61e14446343bc\nparent 226f880498f82aee0d59974142dea3eeec2a12ee\nparent bb44d9e7546e6118cd91db5bbe471a3ce2ee7fcd\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1426575650 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1426575659 +0100\n\nMerge pull request #5915\n\nbb44d9e depends: fix a static qt5 crash when using certain versions of libxcb (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bd3a92da2ddfc831520685b4492569b4a5ed543",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5bd3a92da2ddfc831520685b4492569b4a5ed543",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bd3a92da2ddfc831520685b4492569b4a5ed543/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "226f880498f82aee0d59974142dea3eeec2a12ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/226f880498f82aee0d59974142dea3eeec2a12ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/226f880498f82aee0d59974142dea3eeec2a12ee"
      },
      {
        "sha": "bb44d9e7546e6118cd91db5bbe471a3ce2ee7fcd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb44d9e7546e6118cd91db5bbe471a3ce2ee7fcd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb44d9e7546e6118cd91db5bbe471a3ce2ee7fcd"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 35,
      "deletions": 20
    },
    "files": [
      {
        "sha": "28f2bd6f25343de809c9b2c568bd88b778bb26ec",
        "filename": "depends/packages/libxcb.mk",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bd3a92da2ddfc831520685b4492569b4a5ed543/depends/packages/libxcb.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bd3a92da2ddfc831520685b4492569b4a5ed543/depends/packages/libxcb.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libxcb.mk?ref=5bd3a92da2ddfc831520685b4492569b4a5ed543",
        "patch": "@@ -13,8 +13,13 @@ define $(package)_preprocess_cmds\n   sed \"s/pthread-stubs//\" -i configure\n endef\n \n+# Don't install xcb headers to the default path in order to work around a qt\n+# build issue: https://bugreports.qt.io/browse/QTBUG-34748\n+# When using qt's internal libxcb, it may end up finding the real headers in\n+# depends staging. Use a non-default path to avoid that.\n+\n define $(package)_config_cmds\n-  $($(package)_autoconf)\n+  $($(package)_autoconf) --includedir=$(host_prefix)/include/xcb-shared\n endef\n \n define $(package)_build_cmds"
      },
      {
        "sha": "3bdbba32a455474b845fac17d218be163a7c7690",
        "filename": "depends/patches/qt/fix-xcb-include-order.patch",
        "status": "modified",
        "additions": 29,
        "deletions": 19,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bd3a92da2ddfc831520685b4492569b4a5ed543/depends/patches/qt/fix-xcb-include-order.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bd3a92da2ddfc831520685b4492569b4a5ed543/depends/patches/qt/fix-xcb-include-order.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix-xcb-include-order.patch?ref=5bd3a92da2ddfc831520685b4492569b4a5ed543",
        "patch": "@@ -1,21 +1,31 @@\n---- old/qtbase/src/plugins/platforms/xcb/xcb-plugin.pro\t2014-07-30 18:17:27.384458441 -0400\n-+++ new/qtbase/src/plugins/platforms/xcb/xcb-plugin.pro\t2014-07-30 18:18:28.620459303 -0400\n-@@ -101,10 +101,6 @@\n-     }\n- }\n- \n--DEFINES += $$QMAKE_DEFINES_XCB\n--LIBS += $$QMAKE_LIBS_XCB\n+--- old/qtbase/src/plugins/platforms/xcb/xcb-plugin.pro 2015-03-17 02:06:42.705930685 +0000\n++++ new/qtbase/src/plugins/platforms/xcb/xcb-plugin.pro 2015-03-17 02:08:41.281926351 +0000\n+@@ -103,7 +103,6 @@\n+\n+ DEFINES += $$QMAKE_DEFINES_XCB\n+ LIBS += $$QMAKE_LIBS_XCB\n -QMAKE_CXXFLAGS += $$QMAKE_CFLAGS_XCB\n--\n+\n  CONFIG += qpa/genericunixfontdatabase\n- \n- contains(QT_CONFIG, dbus) {\n-@@ -141,3 +137,7 @@\n-         INCLUDEPATH += ../../../3rdparty/xkbcommon/xkbcommon/\n-     }\n- }\n-+\n-+DEFINES += $$QMAKE_DEFINES_XCB\n-+LIBS += $$QMAKE_LIBS_XCB\n-+INCLUDEPATH += $$QMAKE_CFLAGS_XCB\n+\n+@@ -118,7 +117,8 @@\n+ contains(QT_CONFIG, xcb-qt) {\n+     DEFINES += XCB_USE_RENDER\n+     XCB_DIR = ../../../3rdparty/xcb\n+-    INCLUDEPATH += $$XCB_DIR/include $$XCB_DIR/sysinclude\n++    QMAKE_CFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/sysinclude $$QMAKE_CFLAGS_XCB\n++    QMAKE_CXXFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/sysinclude $$QMAKE_CFLAGS_XCB\n+     LIBS += -lxcb -L$$OUT_PWD/xcb-static -lxcb-static\n+ } else {\n+     LIBS += -lxcb -lxcb-image -lxcb-icccm -lxcb-sync -lxcb-xfixes -lxcb-shm -lxcb-randr\n+--- old/qtbase/src/plugins/platforms/xcb/xcb-static/xcb-static.pro      2015-03-17 02:07:04.641929383 +0000\n++++ new/qtbase/src/plugins/platforms/xcb/xcb-static/xcb-static.pro      2015-03-17 02:10:15.485922059 +0000\n+@@ -8,7 +8,7 @@\n+\n+ XCB_DIR = ../../../../3rdparty/xcb\n+\n+-INCLUDEPATH += $$XCB_DIR/include $$XCB_DIR/include/xcb $$XCB_DIR/sysinclude\n++QMAKE_CFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/include/xcb -I$$XCB_DIR/sysinclude $$QMAKE_CFLAGS_XCB\n+\n+ # ignore compiler warnings in 3rdparty code\n+ QMAKE_CFLAGS_STATIC_LIB+=-w"
      }
    ]
  },
  {
    "sha": "9c2737901b5203f267d21d728019d64b46f1d9f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzI3Mzc5MDFiNTIwM2YyNjdkMjFkNzI4MDE5ZDY0YjQ2ZjFkOWYz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-05T12:01:22Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-17T10:08:52Z"
      },
      "message": "Reduce fingerprinting through timestamps in 'addr' messages.\n\nSuggested by Jonas Nick.",
      "tree": {
        "sha": "7340edff0fd0ab4d74f284701faf691bf5e1fcbb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7340edff0fd0ab4d74f284701faf691bf5e1fcbb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c2737901b5203f267d21d728019d64b46f1d9f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c2737901b5203f267d21d728019d64b46f1d9f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c2737901b5203f267d21d728019d64b46f1d9f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c2737901b5203f267d21d728019d64b46f1d9f3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d734d87b28ccbf2a4a4eb19a28285b5dea782105",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d734d87b28ccbf2a4a4eb19a28285b5dea782105",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d734d87b28ccbf2a4a4eb19a28285b5dea782105"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 18,
      "deletions": 6
    },
    "files": [
      {
        "sha": "4b7e4d51b97acb939d4a3ef466e109cd1f5a2596",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c2737901b5203f267d21d728019d64b46f1d9f3/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c2737901b5203f267d21d728019d64b46f1d9f3/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=9c2737901b5203f267d21d728019d64b46f1d9f3",
        "patch": "@@ -272,8 +272,9 @@ void CAddrMan::Good_(const CService& addr, int64_t nTime)\n     // update info\n     info.nLastSuccess = nTime;\n     info.nLastTry = nTime;\n-    info.nTime = nTime;\n     info.nAttempts = 0;\n+    // nTime is not updated here, to avoid leaking information about\n+    // currently-connected peers.\n \n     // if it is already in the tried set, don't do anything else\n     if (info.fInTried)"
      },
      {
        "sha": "4eeb913d09fdf04645341903cbb72b71d14aadf5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 5,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c2737901b5203f267d21d728019d64b46f1d9f3/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c2737901b5203f267d21d728019d64b46f1d9f3/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9c2737901b5203f267d21d728019d64b46f1d9f3",
        "patch": "@@ -238,6 +238,10 @@ struct CBlockReject {\n  * and we're no longer holding the node's locks.\n  */\n struct CNodeState {\n+    //! The peer's address\n+    CService address;\n+    //! Whether we have a fully established connection.\n+    bool fCurrentlyConnected;\n     //! Accumulated misbehaviour score for this peer.\n     int nMisbehavior;\n     //! Whether this peer should be disconnected and banned (unless whitelisted).\n@@ -262,6 +266,7 @@ struct CNodeState {\n     bool fPreferredDownload;\n \n     CNodeState() {\n+        fCurrentlyConnected = false;\n         nMisbehavior = 0;\n         fShouldBan = false;\n         pindexBestKnownBlock = NULL;\n@@ -305,6 +310,7 @@ void InitializeNode(NodeId nodeid, const CNode *pnode) {\n     LOCK(cs_main);\n     CNodeState &state = mapNodeState.insert(std::make_pair(nodeid, CNodeState())).first->second;\n     state.name = pnode->addrName;\n+    state.address = pnode->addr;\n }\n \n void FinalizeNode(NodeId nodeid) {\n@@ -314,6 +320,10 @@ void FinalizeNode(NodeId nodeid) {\n     if (state->fSyncStarted)\n         nSyncStarted--;\n \n+    if (state->nMisbehavior == 0 && state->fCurrentlyConnected) {\n+        AddressCurrentlyConnected(state->address);\n+    }\n+\n     BOOST_FOREACH(const QueuedBlock& entry, state->vBlocksInFlight)\n         mapBlocksInFlight.erase(entry.hash);\n     EraseOrphansFor(nodeid);\n@@ -3628,6 +3638,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     else if (strCommand == \"verack\")\n     {\n         pfrom->SetRecvVersion(min(pfrom->nVersion, PROTOCOL_VERSION));\n+\n+        // Mark this node as currently connected, so we update its timestamp later.\n+        if (pfrom->fNetworkNode) {\n+            LOCK(cs_main);\n+            State(pfrom->GetId())->fCurrentlyConnected = true;\n+        }\n     }\n \n \n@@ -4272,11 +4288,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     }\n \n \n-    // Update the last seen time for this node's address\n-    if (pfrom->fNetworkNode)\n-        if (strCommand == \"version\" || strCommand == \"addr\" || strCommand == \"inv\" || strCommand == \"getdata\" || strCommand == \"ping\")\n-            AddressCurrentlyConnected(pfrom->addr);\n-\n \n     return true;\n }"
      }
    ]
  },
  {
    "sha": "93a8c46807a8b9c98e536ccd21ecdb11b9b3cf52",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5M2E4YzQ2ODA3YThiOWM5OGU1MzZjY2QyMWVjZGIxMWI5YjNjZjUy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-17T15:23:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-17T15:38:06Z"
      },
      "message": "Merge pull request #5860\n\n9c27379 Reduce fingerprinting through timestamps in 'addr' messages. (Pieter Wuille)",
      "tree": {
        "sha": "0898a06bb3ca73ded1b6eb7e9d7afd8454795186",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0898a06bb3ca73ded1b6eb7e9d7afd8454795186"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93a8c46807a8b9c98e536ccd21ecdb11b9b3cf52",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVCEpeAAoJEHSBCwEjRsmmu1kIAJBJYjiSqHel/C3/E3EJcoCi\nqs8+UyanSLbGcIPcLsnpQubp7hJ7Zgps2eS0aB+QV1OL70IKiSz0K/5CeutlDuI/\nBbVrGCghahcC0ISyUoBEQ+2AzGr4k8zUa1uLKPiF4TtAZ3gf92pb+MCy+Ad0yNOM\n2On4J4M3mNO+HGXAuB7uB63RFHoFx6LRSN9XicdDr17TkF7JV9O62QE85U4uPzfZ\nxjP+wRT6yqO0SsIUfkVSbObsZ17fMr4pgj59SQe/VsN/jfg/p3ol21tFMDSC4CJS\n9GEq1we67onveJr4XeUmlfJoVllirFR462r4iAkIzHf2ler+xSy8LjsVPovJhbs=\n=LOje\n-----END PGP SIGNATURE-----",
        "payload": "tree 0898a06bb3ca73ded1b6eb7e9d7afd8454795186\nparent 5bd3a92da2ddfc831520685b4492569b4a5ed543\nparent 9c2737901b5203f267d21d728019d64b46f1d9f3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1426605780 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1426606686 +0100\n\nMerge pull request #5860\n\n9c27379 Reduce fingerprinting through timestamps in 'addr' messages. (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93a8c46807a8b9c98e536ccd21ecdb11b9b3cf52",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93a8c46807a8b9c98e536ccd21ecdb11b9b3cf52",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93a8c46807a8b9c98e536ccd21ecdb11b9b3cf52/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5bd3a92da2ddfc831520685b4492569b4a5ed543",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bd3a92da2ddfc831520685b4492569b4a5ed543",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5bd3a92da2ddfc831520685b4492569b4a5ed543"
      },
      {
        "sha": "9c2737901b5203f267d21d728019d64b46f1d9f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c2737901b5203f267d21d728019d64b46f1d9f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c2737901b5203f267d21d728019d64b46f1d9f3"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 18,
      "deletions": 6
    },
    "files": [
      {
        "sha": "4b7e4d51b97acb939d4a3ef466e109cd1f5a2596",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93a8c46807a8b9c98e536ccd21ecdb11b9b3cf52/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93a8c46807a8b9c98e536ccd21ecdb11b9b3cf52/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=93a8c46807a8b9c98e536ccd21ecdb11b9b3cf52",
        "patch": "@@ -272,8 +272,9 @@ void CAddrMan::Good_(const CService& addr, int64_t nTime)\n     // update info\n     info.nLastSuccess = nTime;\n     info.nLastTry = nTime;\n-    info.nTime = nTime;\n     info.nAttempts = 0;\n+    // nTime is not updated here, to avoid leaking information about\n+    // currently-connected peers.\n \n     // if it is already in the tried set, don't do anything else\n     if (info.fInTried)"
      },
      {
        "sha": "94cf213490a8c750c73db20f40d4ca5a234bf0d1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 5,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93a8c46807a8b9c98e536ccd21ecdb11b9b3cf52/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93a8c46807a8b9c98e536ccd21ecdb11b9b3cf52/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=93a8c46807a8b9c98e536ccd21ecdb11b9b3cf52",
        "patch": "@@ -238,6 +238,10 @@ struct CBlockReject {\n  * and we're no longer holding the node's locks.\n  */\n struct CNodeState {\n+    //! The peer's address\n+    CService address;\n+    //! Whether we have a fully established connection.\n+    bool fCurrentlyConnected;\n     //! Accumulated misbehaviour score for this peer.\n     int nMisbehavior;\n     //! Whether this peer should be disconnected and banned (unless whitelisted).\n@@ -262,6 +266,7 @@ struct CNodeState {\n     bool fPreferredDownload;\n \n     CNodeState() {\n+        fCurrentlyConnected = false;\n         nMisbehavior = 0;\n         fShouldBan = false;\n         pindexBestKnownBlock = NULL;\n@@ -305,6 +310,7 @@ void InitializeNode(NodeId nodeid, const CNode *pnode) {\n     LOCK(cs_main);\n     CNodeState &state = mapNodeState.insert(std::make_pair(nodeid, CNodeState())).first->second;\n     state.name = pnode->addrName;\n+    state.address = pnode->addr;\n }\n \n void FinalizeNode(NodeId nodeid) {\n@@ -314,6 +320,10 @@ void FinalizeNode(NodeId nodeid) {\n     if (state->fSyncStarted)\n         nSyncStarted--;\n \n+    if (state->nMisbehavior == 0 && state->fCurrentlyConnected) {\n+        AddressCurrentlyConnected(state->address);\n+    }\n+\n     BOOST_FOREACH(const QueuedBlock& entry, state->vBlocksInFlight)\n         mapBlocksInFlight.erase(entry.hash);\n     EraseOrphansFor(nodeid);\n@@ -3627,6 +3637,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     else if (strCommand == \"verack\")\n     {\n         pfrom->SetRecvVersion(min(pfrom->nVersion, PROTOCOL_VERSION));\n+\n+        // Mark this node as currently connected, so we update its timestamp later.\n+        if (pfrom->fNetworkNode) {\n+            LOCK(cs_main);\n+            State(pfrom->GetId())->fCurrentlyConnected = true;\n+        }\n     }\n \n \n@@ -4271,11 +4287,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     }\n \n \n-    // Update the last seen time for this node's address\n-    if (pfrom->fNetworkNode)\n-        if (strCommand == \"version\" || strCommand == \"addr\" || strCommand == \"inv\" || strCommand == \"getdata\" || strCommand == \"ping\")\n-            AddressCurrentlyConnected(pfrom->addr);\n-\n \n     return true;\n }"
      }
    ]
  },
  {
    "sha": "29fef0b9039be4a9595d4ecc44bc77a06321fc10",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOWZlZjBiOTAzOWJlNGE5NTk1ZDRlY2M0NGJjNzdhMDYzMjFmYzEw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-18T13:35:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-18T13:35:18Z"
      },
      "message": "Merge pull request #5360\n\n71acb86 print the caught error instead of raising an error (Heath)",
      "tree": {
        "sha": "dce92150584effd72d2a8ca71ce566c67baccf11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dce92150584effd72d2a8ca71ce566c67baccf11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29fef0b9039be4a9595d4ecc44bc77a06321fc10",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVCX8WAAoJEHSBCwEjRsmmG0oH/2UVyVMhswQN6hGqXgQTKfy8\nCn6mTfsg7YTy2fmcWzNm65RMjn8dEA705hQ2G8YIRs8/+DJzzwAAPjxIMKlyQpNd\neEXEiiDkfEIzbc3oCNmU/ybD+Sw3gOxbpDOZfNXeEQZXAMPUDvHoLFpASkvK9gJW\nl92t5erMlwDoyXisuBIKZLF8Q+MZL0TTpdxZVILvBatulj1tUQwyOg4E2DNZEOSx\nOWZQTVKKUMz6Wgau66pHnV9+86uEhGOCuG+IX/y9NNEEeRJ5hOfaZq2ZLb6JlobW\n9QsiIxDub/r4LIm6lmtbur8QnUWmegCpzElHb5oVS5Lg4J7QgsDzXjYJ3psqEmw=\n=ZXW+\n-----END PGP SIGNATURE-----",
        "payload": "tree dce92150584effd72d2a8ca71ce566c67baccf11\nparent 93a8c46807a8b9c98e536ccd21ecdb11b9b3cf52\nparent 71acb865402ab4423633c7e5f03b7ec4ef8c8e18\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1426685714 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1426685718 +0100\n\nMerge pull request #5360\n\n71acb86 print the caught error instead of raising an error (Heath)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29fef0b9039be4a9595d4ecc44bc77a06321fc10",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29fef0b9039be4a9595d4ecc44bc77a06321fc10",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29fef0b9039be4a9595d4ecc44bc77a06321fc10/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "93a8c46807a8b9c98e536ccd21ecdb11b9b3cf52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93a8c46807a8b9c98e536ccd21ecdb11b9b3cf52",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93a8c46807a8b9c98e536ccd21ecdb11b9b3cf52"
      },
      {
        "sha": "71acb865402ab4423633c7e5f03b7ec4ef8c8e18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71acb865402ab4423633c7e5f03b7ec4ef8c8e18",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71acb865402ab4423633c7e5f03b7ec4ef8c8e18"
      }
    ],
    "stats": {
      "total": 144,
      "additions": 71,
      "deletions": 73
    },
    "files": [
      {
        "sha": "c3ce9d793625fc0b1318a9baf77b7f428cbe2062",
        "filename": "contrib/bitrpc/bitrpc.py",
        "status": "modified",
        "additions": 71,
        "deletions": 73,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29fef0b9039be4a9595d4ecc44bc77a06321fc10/contrib/bitrpc/bitrpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29fef0b9039be4a9595d4ecc44bc77a06321fc10/contrib/bitrpc/bitrpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/bitrpc/bitrpc.py?ref=29fef0b9039be4a9595d4ecc44bc77a06321fc10",
        "patch": "@@ -20,9 +20,9 @@\n     try:\n         path = raw_input(\"Enter destination path/filename: \")\n         print access.backupwallet(path)\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n-        \n+    except Exception as inst:\n+        print inst\n+\n elif cmd == \"encryptwallet\":\n     try:\n         pwd = getpass.getpass(prompt=\"Enter passphrase: \")\n@@ -32,29 +32,29 @@\n             print \"\\n---Wallet encrypted. Server stopping, restart to run with encrypted wallet---\\n\"\n         else:\n             print \"\\n---Passphrases do not match---\\n\"\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"getaccount\":\n     try:\n         addr = raw_input(\"Enter a Bitcoin address: \")\n         print access.getaccount(addr)\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"getaccountaddress\":\n     try:\n         acct = raw_input(\"Enter an account name: \")\n         print access.getaccountaddress(acct)\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"getaddressesbyaccount\":\n     try:\n         acct = raw_input(\"Enter an account name: \")\n         print access.getaddressesbyaccount(acct)\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"getbalance\":\n     try:\n@@ -64,57 +64,57 @@\n             print access.getbalance(acct, mc)\n         except:\n             print access.getbalance()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"getblockbycount\":\n     try:\n         height = raw_input(\"Height: \")\n         print access.getblockbycount(height)\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"getblockcount\":\n     try:\n         print access.getblockcount()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"getblocknumber\":\n     try:\n         print access.getblocknumber()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"getconnectioncount\":\n     try:\n         print access.getconnectioncount()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"getdifficulty\":\n     try:\n         print access.getdifficulty()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"getgenerate\":\n     try:\n         print access.getgenerate()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"gethashespersec\":\n     try:\n         print access.gethashespersec()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"getinfo\":\n     try:\n         print access.getinfo()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"getnewaddress\":\n     try:\n@@ -123,8 +123,8 @@\n             print access.getnewaddress(acct)\n         except:\n             print access.getnewaddress()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"getreceivedbyaccount\":\n     try:\n@@ -134,8 +134,8 @@\n             print access.getreceivedbyaccount(acct, mc)\n         except:\n             print access.getreceivedbyaccount()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"getreceivedbyaddress\":\n     try:\n@@ -145,15 +145,15 @@\n             print access.getreceivedbyaddress(addr, mc)\n         except:\n             print access.getreceivedbyaddress()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"gettransaction\":\n     try:\n         txid = raw_input(\"Enter a transaction ID: \")\n         print access.gettransaction(txid)\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"getwork\":\n     try:\n@@ -162,8 +162,8 @@\n             print access.gettransaction(data)\n         except:\n             print access.gettransaction()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"help\":\n     try:\n@@ -172,8 +172,8 @@\n             print access.help(cmd)\n         except:\n             print access.help()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"listaccounts\":\n     try:\n@@ -182,8 +182,8 @@\n             print access.listaccounts(mc)\n         except:\n             print access.listaccounts()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"listreceivedbyaccount\":\n     try:\n@@ -193,8 +193,8 @@\n             print access.listreceivedbyaccount(mc, incemp)\n         except:\n             print access.listreceivedbyaccount()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"listreceivedbyaddress\":\n     try:\n@@ -204,8 +204,8 @@\n             print access.listreceivedbyaddress(mc, incemp)\n         except:\n             print access.listreceivedbyaddress()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"listtransactions\":\n     try:\n@@ -216,8 +216,8 @@\n             print access.listtransactions(acct, count, frm)\n         except:\n             print access.listtransactions()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"move\":\n     try:\n@@ -230,8 +230,8 @@\n             print access.move(frm, to, amt, mc, comment)\n         except:\n             print access.move(frm, to, amt)\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"sendfrom\":\n     try:\n@@ -245,8 +245,8 @@\n             print access.sendfrom(frm, to, amt, mc, comment, commentto)\n         except:\n             print access.sendfrom(frm, to, amt)\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"sendmany\":\n     try:\n@@ -258,8 +258,8 @@\n             print access.sendmany(frm,to,mc,comment)\n         except:\n             print access.sendmany(frm,to)\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"sendtoaddress\":\n     try:\n@@ -271,16 +271,16 @@\n             print access.sendtoaddress(to,amt,comment,commentto)\n         except:\n             print access.sendtoaddress(to,amt)\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"setaccount\":\n     try:\n         addr = raw_input(\"Address: \")\n         acct = raw_input(\"Account:\")\n         print access.setaccount(addr,acct)\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"setgenerate\":\n     try:\n@@ -290,36 +290,36 @@\n             print access.setgenerate(gen, cpus)\n         except:\n             print access.setgenerate(gen)\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"settxfee\":\n     try:\n         amt = raw_input(\"Amount:\")\n         print access.settxfee(amt)\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"stop\":\n     try:\n         print access.stop()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"validateaddress\":\n     try:\n         addr = raw_input(\"Address: \")\n         print access.validateaddress(addr)\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"walletpassphrase\":\n     try:\n         pwd = getpass.getpass(prompt=\"Enter wallet passphrase: \")\n         access.walletpassphrase(pwd, 60)\n         print \"\\n---Wallet unlocked---\\n\"\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+    except Exception as inst:\n+        print inst\n \n elif cmd == \"walletpassphrasechange\":\n     try:\n@@ -328,10 +328,8 @@\n         access.walletpassphrasechange(pwd, pwd2)\n         print\n         print \"\\n---Passphrase changed---\\n\"\n-    except:\n-        print\n-        print \"\\n---An error occurred---\\n\"\n-        print\n+    except Exception as inst:\n+        print inst\n \n else:\n     print \"Command not found or not supported\""
      }
    ]
  },
  {
    "sha": "c7abfa595dda5b74b0386532dc6a685ab1c7f009",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjN2FiZmE1OTVkZGE1Yjc0YjAzODY1MzJkYzZhNjg1YWIxYzdmMDA5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-20T11:04:23Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-20T11:05:05Z"
      },
      "message": "Merge pull request #5149\n\nadaa568 Add script to verify all merge commits are signed (Matt Corallo)",
      "tree": {
        "sha": "f5cc097784cc4b011a67844bfaf2817791a57006",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5cc097784cc4b011a67844bfaf2817791a57006"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7abfa595dda5b74b0386532dc6a685ab1c7f009",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVC/7hAAoJEHSBCwEjRsmm3OIIAMb2W9ktDXjLe6jtPlmuM2TO\nF/oNTz1lOpea7HLmw3EUMf1/2iuCPPetDiqwDAGh+2ibpj9Jg5uFDSyuDt3+gt8s\nxrvYPAn6XQsLzXfPOJeUEjc/WSkg/PXTP49E9TmI3/dhqKg5C3jH7LYx7zAGt0zW\nCCZH05vILkiTnjUhifo/NaqfYgzQVMg8FTATcONmoz9gnlXo49jKv2AEE2TNKkQ4\n4kFqHdAaxEQH18PgtDTDR+4gVvzcd1HL4VxBi6OX9Vu2566hpzIZzCg5aaPymg7o\nj2Lo6aRuWK+UfnEE5sZ1KWOMzYCCa4YXwsJtN4ChvwJTrNRXJTnOpu86P6x6e2U=\n=D5OS\n-----END PGP SIGNATURE-----",
        "payload": "tree f5cc097784cc4b011a67844bfaf2817791a57006\nparent 29fef0b9039be4a9595d4ecc44bc77a06321fc10\nparent adaa568722e59cde510c5fe1997c49cbb9d7db12\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1426849463 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1426849505 +0100\n\nMerge pull request #5149\n\nadaa568 Add script to verify all merge commits are signed (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7abfa595dda5b74b0386532dc6a685ab1c7f009",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7abfa595dda5b74b0386532dc6a685ab1c7f009",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7abfa595dda5b74b0386532dc6a685ab1c7f009/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29fef0b9039be4a9595d4ecc44bc77a06321fc10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29fef0b9039be4a9595d4ecc44bc77a06321fc10",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29fef0b9039be4a9595d4ecc44bc77a06321fc10"
      },
      {
        "sha": "adaa568722e59cde510c5fe1997c49cbb9d7db12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adaa568722e59cde510c5fe1997c49cbb9d7db12",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/adaa568722e59cde510c5fe1997c49cbb9d7db12"
      }
    ],
    "stats": {
      "total": 91,
      "additions": 91,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7d4b91e887f8e72fed16889c7d8a53c77d5cf5fc",
        "filename": "contrib/README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7abfa595dda5b74b0386532dc6a685ab1c7f009/contrib/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7abfa595dda5b74b0386532dc6a685ab1c7f009/contrib/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/README.md?ref=c7abfa595dda5b74b0386532dc6a685ab1c7f009",
        "patch": "@@ -16,6 +16,9 @@ Repository Tools\n Specific tools for developers working on this repository.\n Contains the script `github-merge.sh` for merging github pull requests securely and signing them using GPG.\n \n+### [Verify-Commits](/contrib/verify-commits) ###\n+Tool to verify that every merge commit was signed by a developer using the above `github-merge.sh` script.\n+\n ### [Linearize](/contrib/linearize) ###\n Construct a linear, no-fork, best version of the blockchain.\n "
      },
      {
        "sha": "6b5137e7b54e545f4ea2211009b1b3e65bebf304",
        "filename": "contrib/verify-commits/gpg.sh",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7abfa595dda5b74b0386532dc6a685ab1c7f009/contrib/verify-commits/gpg.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7abfa595dda5b74b0386532dc6a685ab1c7f009/contrib/verify-commits/gpg.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/gpg.sh?ref=c7abfa595dda5b74b0386532dc6a685ab1c7f009",
        "patch": "@@ -0,0 +1,15 @@\n+#!/bin/sh\n+INPUT=$(</dev/stdin)\n+VALID=false\n+IFS=$'\\n'\n+for LINE in $(echo \"$INPUT\" | gpg --trust-model always \"$@\" 2>/dev/null); do\n+\tcase \"$LINE\" in \"[GNUPG:] VALIDSIG\"*)\n+\t\twhile read KEY; do\n+\t\t\tcase \"$LINE\" in \"[GNUPG:] VALIDSIG $KEY \"*) VALID=true;; esac\n+\t\tdone < ./contrib/verify-commits/trusted-keys\n+\tesac\n+done\n+if ! $VALID; then\n+\texit 1\n+fi\n+echo \"$INPUT\" | gpg --trust-model always \"$@\" 2>/dev/null"
      },
      {
        "sha": "607c0cac45ef6e7ca1bc674e4a3085cfa6b7e1cc",
        "filename": "contrib/verify-commits/pre-push-hook.sh",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7abfa595dda5b74b0386532dc6a685ab1c7f009/contrib/verify-commits/pre-push-hook.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7abfa595dda5b74b0386532dc6a685ab1c7f009/contrib/verify-commits/pre-push-hook.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/pre-push-hook.sh?ref=c7abfa595dda5b74b0386532dc6a685ab1c7f009",
        "patch": "@@ -0,0 +1,16 @@\n+#!/bin/bash\n+if ! [[ \"$2\" =~ [git@]?[www.]?github.com[:|/]bitcoin/bitcoin[.git]? ]]; then\n+    exit 0\n+fi\n+\n+while read LINE; do\n+    set -- A $LINE\n+    if [ \"$4\" != \"refs/heads/master\" ]; then\n+        continue\n+    fi\n+    if ! ./contrib/verify-commits/verify-commits.sh $3 > /dev/null 2>&1; then\n+        echo \"ERROR: A commit is not signed, can't push\"\n+        ./contrib/verify-commits/verify-commits.sh\n+        exit 1\n+    fi\n+done < /dev/stdin"
      },
      {
        "sha": "eb13f8762e573a1ff2ac89377f2b15de057cf5c6",
        "filename": "contrib/verify-commits/trusted-git-root",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7abfa595dda5b74b0386532dc6a685ab1c7f009/contrib/verify-commits/trusted-git-root",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7abfa595dda5b74b0386532dc6a685ab1c7f009/contrib/verify-commits/trusted-git-root",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/trusted-git-root?ref=c7abfa595dda5b74b0386532dc6a685ab1c7f009",
        "patch": "@@ -0,0 +1 @@\n+053038e5ba116cb319fb85f3cb3e062cf1b3df15"
      },
      {
        "sha": "658ad0375badbfb88ee89322dd170b41666de9f1",
        "filename": "contrib/verify-commits/trusted-keys",
        "status": "added",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7abfa595dda5b74b0386532dc6a685ab1c7f009/contrib/verify-commits/trusted-keys",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7abfa595dda5b74b0386532dc6a685ab1c7f009/contrib/verify-commits/trusted-keys",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/trusted-keys?ref=c7abfa595dda5b74b0386532dc6a685ab1c7f009",
        "patch": "@@ -0,0 +1,5 @@\n+71A3B16735405025D447E8F274810B012346C9A6\n+1F4410F6A89268CE3197A84C57896D2FF8F0B657\n+01CDF4627A3B88AAE4A571C87588242FBE38D3A8\n+AF8BE07C7049F3A26B239D5325B3083201782B2F\n+81291FA67D2C379A006A053FEAB5AF94D9E9ABE7"
      },
      {
        "sha": "5841fa2077aa8a882cd12701a6882b12788f7bdf",
        "filename": "contrib/verify-commits/verify-commits.sh",
        "status": "added",
        "additions": 51,
        "deletions": 0,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7abfa595dda5b74b0386532dc6a685ab1c7f009/contrib/verify-commits/verify-commits.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7abfa595dda5b74b0386532dc6a685ab1c7f009/contrib/verify-commits/verify-commits.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/verify-commits.sh?ref=c7abfa595dda5b74b0386532dc6a685ab1c7f009",
        "patch": "@@ -0,0 +1,51 @@\n+#!/bin/sh\n+\n+DIR=$(dirname \"$0\")\n+\n+echo \"Please verify all commits in the following list are not evil:\"\n+git log \"$DIR\"\n+\n+VERIFIED_ROOT=$(cat \"${DIR}/trusted-git-root\")\n+\n+HAVE_FAILED=false\n+IS_SIGNED () {\n+\tif [ $1 = $VERIFIED_ROOT ]; then\n+\t\treturn 0;\n+\tfi\n+\tif ! git -c \"gpg.program=${DIR}/gpg.sh\" verify-commit $1 > /dev/null 2>&1; then\n+\t\treturn 1;\n+\tfi\n+\tlocal PARENTS=$(git show -s --format=format:%P $1)\n+\tfor PARENT in $PARENTS; do\n+\t\tif IS_SIGNED $PARENT > /dev/null; then\n+\t\t\treturn 0;\n+\t\tfi\n+\tdone\n+\tif ! \"$HAVE_FAILED\"; then\n+\t\techo \"No parent of $1 was signed with a trusted key!\" > /dev/stderr\n+\t\techo \"Parents are:\" > /dev/stderr\n+\t\tfor PARENT in $PARENTS; do\n+\t\t\tgit show -s $PARENT > /dev/stderr\n+\t\tdone\n+\t\tHAVE_FAILED=true\n+\tfi\n+\treturn 1;\n+}\n+\n+if [ x\"$1\" = \"x\" ]; then\n+\tTEST_COMMIT=\"HEAD\"\n+else\n+\tTEST_COMMIT=\"$1\"\n+fi\n+\n+IS_SIGNED \"$TEST_COMMIT\"\n+RES=$?\n+if [ \"$RES\" = 1 ]; then\n+\tif ! \"$HAVE_FAILED\"; then\n+\t\techo \"$TEST_COMMIT was not signed with a trusted key!\"\n+\tfi\n+else\n+\techo \"There is a valid path from $TEST_COMMIT to $VERIFIED_ROOT where all commits are signed!\"\n+fi\n+\n+exit $RES"
      }
    ]
  },
  {
    "sha": "d7d187e8a451ae946fa14cead7962edbe0046f12",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkN2QxODdlOGE0NTFhZTk0NmZhMTRjZWFkNzk2MmVkYmUwMDQ2ZjEy",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-22T20:02:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-20T11:23:44Z"
      },
      "message": "allocators: split allocators and pagelocker\n\nPagelocker is only needed for secure (usually wallet) operations, so don't make\nthe zero-after-free allocator depend on it.",
      "tree": {
        "sha": "caf6765dd0a9455891f14d2df42f164b56cfba13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/caf6765dd0a9455891f14d2df42f164b56cfba13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d7d187e8a451ae946fa14cead7962edbe0046f12",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7d187e8a451ae946fa14cead7962edbe0046f12",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d7d187e8a451ae946fa14cead7962edbe0046f12",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7d187e8a451ae946fa14cead7962edbe0046f12/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7abfa595dda5b74b0386532dc6a685ab1c7f009",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7abfa595dda5b74b0386532dc6a685ab1c7f009",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7abfa595dda5b74b0386532dc6a685ab1c7f009"
      }
    ],
    "stats": {
      "total": 231,
      "additions": 129,
      "deletions": 102
    },
    "files": [
      {
        "sha": "4cefc541d09d199999dc56a77fcb94338d76fe85",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7d187e8a451ae946fa14cead7962edbe0046f12/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7d187e8a451ae946fa14cead7962edbe0046f12/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=d7d187e8a451ae946fa14cead7962edbe0046f12",
        "patch": "@@ -72,7 +72,6 @@ endif\n BITCOIN_CORE_H = \\\n   addrman.h \\\n   alert.h \\\n-  allocators.h \\\n   amount.h \\\n   arith_uint256.h \\\n   base58.h \\\n@@ -123,7 +122,10 @@ BITCOIN_CORE_H = \\\n   script/standard.h \\\n   serialize.h \\\n   streams.h \\\n+  support/allocators/secure.h \\\n+  support/allocators/zeroafterfree.h \\\n   support/cleanse.h \\\n+  support/pagelocker.h \\\n   sync.h \\\n   threadsafety.h \\\n   timedata.h \\\n@@ -233,7 +235,6 @@ univalue_libbitcoin_univalue_a_SOURCES = \\\n # common: shared between bitcoind, and bitcoin-qt and non-server tools\n libbitcoin_common_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n libbitcoin_common_a_SOURCES = \\\n-  allocators.cpp \\\n   arith_uint256.cpp \\\n   amount.cpp \\\n   base58.cpp \\\n@@ -264,6 +265,7 @@ libbitcoin_common_a_SOURCES = \\\n # backward-compatibility objects and their sanity checks are linked.\n libbitcoin_util_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n libbitcoin_util_a_SOURCES = \\\n+  support/pagelocker.cpp \\\n   chainparamsbase.cpp \\\n   clientversion.cpp \\\n   compat/glibc_sanity.cpp \\"
      },
      {
        "sha": "8de90046a9512007528243d897ab0bbf5c95dfe3",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7d187e8a451ae946fa14cead7962edbe0046f12/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7d187e8a451ae946fa14cead7962edbe0046f12/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=d7d187e8a451ae946fa14cead7962edbe0046f12",
        "patch": "@@ -19,6 +19,7 @@\n #include \"pubkey.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\"\n+#include \"support/allocators/zeroafterfree.h\"\n \n #include <string>\n #include <vector>"
      },
      {
        "sha": "32746b00dfb0a2fd22f2e38f4bb0ba19ed608174",
        "filename": "src/crypter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7d187e8a451ae946fa14cead7962edbe0046f12/src/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7d187e8a451ae946fa14cead7962edbe0046f12/src/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.h?ref=d7d187e8a451ae946fa14cead7962edbe0046f12",
        "patch": "@@ -5,9 +5,9 @@\n #ifndef BITCOIN_CRYPTER_H\n #define BITCOIN_CRYPTER_H\n \n-#include \"allocators.h\"\n #include \"keystore.h\"\n #include \"serialize.h\"\n+#include \"support/allocators/secure.h\"\n \n class uint256;\n "
      },
      {
        "sha": "1f1d14288741b77a21d503fdc0f2ae2617c65f11",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7d187e8a451ae946fa14cead7962edbe0046f12/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7d187e8a451ae946fa14cead7962edbe0046f12/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=d7d187e8a451ae946fa14cead7962edbe0046f12",
        "patch": "@@ -6,8 +6,8 @@\n #ifndef BITCOIN_KEY_H\n #define BITCOIN_KEY_H\n \n-#include \"allocators.h\"\n #include \"serialize.h\"\n+#include \"support/allocators/secure.h\"\n #include \"uint256.h\"\n \n #include <stdexcept>"
      },
      {
        "sha": "229139e65cc46ebc954f5108824009eb44b3f334",
        "filename": "src/qt/askpassphrasedialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7d187e8a451ae946fa14cead7962edbe0046f12/src/qt/askpassphrasedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7d187e8a451ae946fa14cead7962edbe0046f12/src/qt/askpassphrasedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.cpp?ref=d7d187e8a451ae946fa14cead7962edbe0046f12",
        "patch": "@@ -8,7 +8,7 @@\n #include \"guiconstants.h\"\n #include \"walletmodel.h\"\n \n-#include \"allocators.h\"\n+#include \"support/allocators/secure.h\"\n \n #include <QKeyEvent>\n #include <QMessageBox>"
      },
      {
        "sha": "e263438880c62f7c3decfc6940ae040b91789dd8",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7d187e8a451ae946fa14cead7962edbe0046f12/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7d187e8a451ae946fa14cead7962edbe0046f12/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=d7d187e8a451ae946fa14cead7962edbe0046f12",
        "patch": "@@ -8,7 +8,7 @@\n #include \"paymentrequestplus.h\"\n #include \"walletmodeltransaction.h\"\n \n-#include \"allocators.h\" /* for SecureString */\n+#include \"support/allocators/secure.h\"\n \n #include <map>\n #include <vector>"
      },
      {
        "sha": "fa1e18defe2daea1896d96b0cbcf31e6430325ec",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7d187e8a451ae946fa14cead7962edbe0046f12/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7d187e8a451ae946fa14cead7962edbe0046f12/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=d7d187e8a451ae946fa14cead7962edbe0046f12",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_STREAMS_H\n #define BITCOIN_STREAMS_H\n \n-#include \"allocators.h\"\n+#include \"support/allocators/zeroafterfree.h\"\n #include \"serialize.h\"\n \n #include <algorithm>"
      },
      {
        "sha": "7a74d87bb494af5687942b3c33ef6213c38fb143",
        "filename": "src/support/allocators/secure.h",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7d187e8a451ae946fa14cead7962edbe0046f12/src/support/allocators/secure.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7d187e8a451ae946fa14cead7962edbe0046f12/src/support/allocators/secure.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/allocators/secure.h?ref=d7d187e8a451ae946fa14cead7962edbe0046f12",
        "patch": "@@ -0,0 +1,62 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ALLOCATORS_SECURE_H\n+#define BITCOIN_ALLOCATORS_SECURE_H\n+\n+#include \"support/pagelocker.h\"\n+\n+#include <string>\n+\n+//\n+// Allocator that locks its contents from being paged\n+// out of memory and clears its contents before deletion.\n+//\n+template <typename T>\n+struct secure_allocator : public std::allocator<T> {\n+    // MSVC8 default copy constructor is broken\n+    typedef std::allocator<T> base;\n+    typedef typename base::size_type size_type;\n+    typedef typename base::difference_type difference_type;\n+    typedef typename base::pointer pointer;\n+    typedef typename base::const_pointer const_pointer;\n+    typedef typename base::reference reference;\n+    typedef typename base::const_reference const_reference;\n+    typedef typename base::value_type value_type;\n+    secure_allocator() throw() {}\n+    secure_allocator(const secure_allocator& a) throw() : base(a) {}\n+    template <typename U>\n+    secure_allocator(const secure_allocator<U>& a) throw() : base(a)\n+    {\n+    }\n+    ~secure_allocator() throw() {}\n+    template <typename _Other>\n+    struct rebind {\n+        typedef secure_allocator<_Other> other;\n+    };\n+\n+    T* allocate(std::size_t n, const void* hint = 0)\n+    {\n+        T* p;\n+        p = std::allocator<T>::allocate(n, hint);\n+        if (p != NULL)\n+            LockedPageManager::Instance().LockRange(p, sizeof(T) * n);\n+        return p;\n+    }\n+\n+    void deallocate(T* p, std::size_t n)\n+    {\n+        if (p != NULL) {\n+            memory_cleanse(p, sizeof(T) * n);\n+            LockedPageManager::Instance().UnlockRange(p, sizeof(T) * n);\n+        }\n+        std::allocator<T>::deallocate(p, n);\n+    }\n+};\n+\n+// This is exactly like std::string, but with a custom allocator.\n+typedef std::basic_string<char, std::char_traits<char>, secure_allocator<char> > SecureString;\n+\n+#endif // BITCOIN_ALLOCATORS_SECURE_H"
      },
      {
        "sha": "b01fcd088bc30837828bec2c76bc92aa9209824f",
        "filename": "src/support/allocators/zeroafterfree.h",
        "status": "added",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7d187e8a451ae946fa14cead7962edbe0046f12/src/support/allocators/zeroafterfree.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7d187e8a451ae946fa14cead7962edbe0046f12/src/support/allocators/zeroafterfree.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/allocators/zeroafterfree.h?ref=d7d187e8a451ae946fa14cead7962edbe0046f12",
        "patch": "@@ -0,0 +1,48 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ALLOCATORS_ZEROAFTERFREE_H\n+#define BITCOIN_ALLOCATORS_ZEROAFTERFREE_H\n+\n+#include \"support/cleanse.h\"\n+\n+#include <memory>\n+#include <vector>\n+\n+template <typename T>\n+struct zero_after_free_allocator : public std::allocator<T> {\n+    // MSVC8 default copy constructor is broken\n+    typedef std::allocator<T> base;\n+    typedef typename base::size_type size_type;\n+    typedef typename base::difference_type difference_type;\n+    typedef typename base::pointer pointer;\n+    typedef typename base::const_pointer const_pointer;\n+    typedef typename base::reference reference;\n+    typedef typename base::const_reference const_reference;\n+    typedef typename base::value_type value_type;\n+    zero_after_free_allocator() throw() {}\n+    zero_after_free_allocator(const zero_after_free_allocator& a) throw() : base(a) {}\n+    template <typename U>\n+    zero_after_free_allocator(const zero_after_free_allocator<U>& a) throw() : base(a)\n+    {\n+    }\n+    ~zero_after_free_allocator() throw() {}\n+    template <typename _Other>\n+    struct rebind {\n+        typedef zero_after_free_allocator<_Other> other;\n+    };\n+\n+    void deallocate(T* p, std::size_t n)\n+    {\n+        if (p != NULL)\n+            memory_cleanse(p, sizeof(T) * n);\n+        std::allocator<T>::deallocate(p, n);\n+    }\n+};\n+\n+// Byte-vector that clears its contents before deletion.\n+typedef std::vector<char, zero_after_free_allocator<char> > CSerializeData;\n+\n+#endif // BITCOIN_ALLOCATORS_ZEROAFTERFREE_H"
      },
      {
        "sha": "440e0a5193a8cccb245efd3ea0dd3f6338de78d1",
        "filename": "src/support/pagelocker.cpp",
        "status": "renamed",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7d187e8a451ae946fa14cead7962edbe0046f12/src/support/pagelocker.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7d187e8a451ae946fa14cead7962edbe0046f12/src/support/pagelocker.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/pagelocker.cpp?ref=d7d187e8a451ae946fa14cead7962edbe0046f12",
        "patch": "@@ -2,7 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"allocators.h\"\n+#include \"support/pagelocker.h\"\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n \n #ifdef WIN32\n #ifdef _WIN32_WINNT",
        "previous_filename": "src/allocators.cpp"
      },
      {
        "sha": "964be1aec41b4fa4a70fae1985939f03091920e1",
        "filename": "src/support/pagelocker.h",
        "status": "renamed",
        "additions": 3,
        "deletions": 93,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7d187e8a451ae946fa14cead7962edbe0046f12/src/support/pagelocker.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7d187e8a451ae946fa14cead7962edbe0046f12/src/support/pagelocker.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/pagelocker.h?ref=d7d187e8a451ae946fa14cead7962edbe0046f12",
        "patch": "@@ -3,15 +3,12 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_ALLOCATORS_H\n-#define BITCOIN_ALLOCATORS_H\n+#ifndef BITCOIN_ALLOCATORS_PAGELOCKER_H\n+#define BITCOIN_ALLOCATORS_PAGELOCKER_H\n \n #include \"support/cleanse.h\"\n \n #include <map>\n-#include <string>\n-#include <string.h>\n-#include <vector>\n \n #include <boost/thread/mutex.hpp>\n #include <boost/thread/once.hpp>\n@@ -178,91 +175,4 @@ void UnlockObject(const T& t)\n     LockedPageManager::Instance().UnlockRange((void*)(&t), sizeof(T));\n }\n \n-//\n-// Allocator that locks its contents from being paged\n-// out of memory and clears its contents before deletion.\n-//\n-template <typename T>\n-struct secure_allocator : public std::allocator<T> {\n-    // MSVC8 default copy constructor is broken\n-    typedef std::allocator<T> base;\n-    typedef typename base::size_type size_type;\n-    typedef typename base::difference_type difference_type;\n-    typedef typename base::pointer pointer;\n-    typedef typename base::const_pointer const_pointer;\n-    typedef typename base::reference reference;\n-    typedef typename base::const_reference const_reference;\n-    typedef typename base::value_type value_type;\n-    secure_allocator() throw() {}\n-    secure_allocator(const secure_allocator& a) throw() : base(a) {}\n-    template <typename U>\n-    secure_allocator(const secure_allocator<U>& a) throw() : base(a)\n-    {\n-    }\n-    ~secure_allocator() throw() {}\n-    template <typename _Other>\n-    struct rebind {\n-        typedef secure_allocator<_Other> other;\n-    };\n-\n-    T* allocate(std::size_t n, const void* hint = 0)\n-    {\n-        T* p;\n-        p = std::allocator<T>::allocate(n, hint);\n-        if (p != NULL)\n-            LockedPageManager::Instance().LockRange(p, sizeof(T) * n);\n-        return p;\n-    }\n-\n-    void deallocate(T* p, std::size_t n)\n-    {\n-        if (p != NULL) {\n-            memory_cleanse(p, sizeof(T) * n);\n-            LockedPageManager::Instance().UnlockRange(p, sizeof(T) * n);\n-        }\n-        std::allocator<T>::deallocate(p, n);\n-    }\n-};\n-\n-\n-//\n-// Allocator that clears its contents before deletion.\n-//\n-template <typename T>\n-struct zero_after_free_allocator : public std::allocator<T> {\n-    // MSVC8 default copy constructor is broken\n-    typedef std::allocator<T> base;\n-    typedef typename base::size_type size_type;\n-    typedef typename base::difference_type difference_type;\n-    typedef typename base::pointer pointer;\n-    typedef typename base::const_pointer const_pointer;\n-    typedef typename base::reference reference;\n-    typedef typename base::const_reference const_reference;\n-    typedef typename base::value_type value_type;\n-    zero_after_free_allocator() throw() {}\n-    zero_after_free_allocator(const zero_after_free_allocator& a) throw() : base(a) {}\n-    template <typename U>\n-    zero_after_free_allocator(const zero_after_free_allocator<U>& a) throw() : base(a)\n-    {\n-    }\n-    ~zero_after_free_allocator() throw() {}\n-    template <typename _Other>\n-    struct rebind {\n-        typedef zero_after_free_allocator<_Other> other;\n-    };\n-\n-    void deallocate(T* p, std::size_t n)\n-    {\n-        if (p != NULL)\n-            memory_cleanse(p, sizeof(T) * n);\n-        std::allocator<T>::deallocate(p, n);\n-    }\n-};\n-\n-// This is exactly like std::string, but with a custom allocator.\n-typedef std::basic_string<char, std::char_traits<char>, secure_allocator<char> > SecureString;\n-\n-// Byte-vector that clears its contents before deletion.\n-typedef std::vector<char, zero_after_free_allocator<char> > CSerializeData;\n-\n-#endif // BITCOIN_ALLOCATORS_H\n+#endif // BITCOIN_ALLOCATORS_PAGELOCKER_H",
        "previous_filename": "src/allocators.h"
      },
      {
        "sha": "2108efece5137ae2ca5036467efaabdaa969406d",
        "filename": "src/test/allocator_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7d187e8a451ae946fa14cead7962edbe0046f12/src/test/allocator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7d187e8a451ae946fa14cead7962edbe0046f12/src/test/allocator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/allocator_tests.cpp?ref=d7d187e8a451ae946fa14cead7962edbe0046f12",
        "patch": "@@ -4,7 +4,7 @@\n \n #include \"util.h\"\n \n-#include \"allocators.h\"\n+#include \"support/allocators/secure.h\"\n #include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>"
      }
    ]
  },
  {
    "sha": "3811a5025ebc48fbbed30178d645872e3b543068",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODExYTUwMjVlYmM0OGZiYmVkMzAxNzhkNjQ1ODcyZTNiNTQzMDY4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-20T11:30:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-20T11:30:29Z"
      },
      "message": "Merge #5810: MOVEONLY-ISH: allocators: split allocators and pagelocker\n\nd7d187e allocators: split allocators and pagelocker (Cory Fields)",
      "tree": {
        "sha": "caf6765dd0a9455891f14d2df42f164b56cfba13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/caf6765dd0a9455891f14d2df42f164b56cfba13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3811a5025ebc48fbbed30178d645872e3b543068",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVDATVAAoJEHSBCwEjRsmm/ZEIAJb3w0Pgv2045DahzkSl9M2C\nZuunEAgECaatPonq3zwO32o02tzUSDpYyFk/UZ3EqeFjDVz6pbvcfQ09XuarFZbZ\nax5EDTNc31Bj22Frh4z6wAC1Q+Pa28Z3tcVBfuOp1SkcsND++x5JbNR3vtPqoJtq\npRZ1g8WgvjLX4p7Tprs/+WfJY/7WhNpURqM2As7KHZ/fA0KKqTn6Dagu0WC8DDYe\nsS7lPHzVfZavRu+etkLz+qA6wYE3tXz7Cq6PNaHSpQqfRbVsQWTOlxVdicZQfFOc\nTPBMadV1joE4IsqS/IXIFiy2hiQDMAWJTQxg8AwCGvaDQIFzqNrNDsrslkTRh2Y=\n=IF2u\n-----END PGP SIGNATURE-----",
        "payload": "tree caf6765dd0a9455891f14d2df42f164b56cfba13\nparent c7abfa595dda5b74b0386532dc6a685ab1c7f009\nparent d7d187e8a451ae946fa14cead7962edbe0046f12\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1426851027 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1426851029 +0100\n\nMerge #5810: MOVEONLY-ISH: allocators: split allocators and pagelocker\n\nd7d187e allocators: split allocators and pagelocker (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3811a5025ebc48fbbed30178d645872e3b543068",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3811a5025ebc48fbbed30178d645872e3b543068",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3811a5025ebc48fbbed30178d645872e3b543068/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7abfa595dda5b74b0386532dc6a685ab1c7f009",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7abfa595dda5b74b0386532dc6a685ab1c7f009",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7abfa595dda5b74b0386532dc6a685ab1c7f009"
      },
      {
        "sha": "d7d187e8a451ae946fa14cead7962edbe0046f12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7d187e8a451ae946fa14cead7962edbe0046f12",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d7d187e8a451ae946fa14cead7962edbe0046f12"
      }
    ],
    "stats": {
      "total": 231,
      "additions": 129,
      "deletions": 102
    },
    "files": [
      {
        "sha": "4cefc541d09d199999dc56a77fcb94338d76fe85",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3811a5025ebc48fbbed30178d645872e3b543068/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3811a5025ebc48fbbed30178d645872e3b543068/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=3811a5025ebc48fbbed30178d645872e3b543068",
        "patch": "@@ -72,7 +72,6 @@ endif\n BITCOIN_CORE_H = \\\n   addrman.h \\\n   alert.h \\\n-  allocators.h \\\n   amount.h \\\n   arith_uint256.h \\\n   base58.h \\\n@@ -123,7 +122,10 @@ BITCOIN_CORE_H = \\\n   script/standard.h \\\n   serialize.h \\\n   streams.h \\\n+  support/allocators/secure.h \\\n+  support/allocators/zeroafterfree.h \\\n   support/cleanse.h \\\n+  support/pagelocker.h \\\n   sync.h \\\n   threadsafety.h \\\n   timedata.h \\\n@@ -233,7 +235,6 @@ univalue_libbitcoin_univalue_a_SOURCES = \\\n # common: shared between bitcoind, and bitcoin-qt and non-server tools\n libbitcoin_common_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n libbitcoin_common_a_SOURCES = \\\n-  allocators.cpp \\\n   arith_uint256.cpp \\\n   amount.cpp \\\n   base58.cpp \\\n@@ -264,6 +265,7 @@ libbitcoin_common_a_SOURCES = \\\n # backward-compatibility objects and their sanity checks are linked.\n libbitcoin_util_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n libbitcoin_util_a_SOURCES = \\\n+  support/pagelocker.cpp \\\n   chainparamsbase.cpp \\\n   clientversion.cpp \\\n   compat/glibc_sanity.cpp \\"
      },
      {
        "sha": "8de90046a9512007528243d897ab0bbf5c95dfe3",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3811a5025ebc48fbbed30178d645872e3b543068/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3811a5025ebc48fbbed30178d645872e3b543068/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=3811a5025ebc48fbbed30178d645872e3b543068",
        "patch": "@@ -19,6 +19,7 @@\n #include \"pubkey.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\"\n+#include \"support/allocators/zeroafterfree.h\"\n \n #include <string>\n #include <vector>"
      },
      {
        "sha": "32746b00dfb0a2fd22f2e38f4bb0ba19ed608174",
        "filename": "src/crypter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3811a5025ebc48fbbed30178d645872e3b543068/src/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3811a5025ebc48fbbed30178d645872e3b543068/src/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.h?ref=3811a5025ebc48fbbed30178d645872e3b543068",
        "patch": "@@ -5,9 +5,9 @@\n #ifndef BITCOIN_CRYPTER_H\n #define BITCOIN_CRYPTER_H\n \n-#include \"allocators.h\"\n #include \"keystore.h\"\n #include \"serialize.h\"\n+#include \"support/allocators/secure.h\"\n \n class uint256;\n "
      },
      {
        "sha": "1f1d14288741b77a21d503fdc0f2ae2617c65f11",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3811a5025ebc48fbbed30178d645872e3b543068/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3811a5025ebc48fbbed30178d645872e3b543068/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=3811a5025ebc48fbbed30178d645872e3b543068",
        "patch": "@@ -6,8 +6,8 @@\n #ifndef BITCOIN_KEY_H\n #define BITCOIN_KEY_H\n \n-#include \"allocators.h\"\n #include \"serialize.h\"\n+#include \"support/allocators/secure.h\"\n #include \"uint256.h\"\n \n #include <stdexcept>"
      },
      {
        "sha": "229139e65cc46ebc954f5108824009eb44b3f334",
        "filename": "src/qt/askpassphrasedialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3811a5025ebc48fbbed30178d645872e3b543068/src/qt/askpassphrasedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3811a5025ebc48fbbed30178d645872e3b543068/src/qt/askpassphrasedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.cpp?ref=3811a5025ebc48fbbed30178d645872e3b543068",
        "patch": "@@ -8,7 +8,7 @@\n #include \"guiconstants.h\"\n #include \"walletmodel.h\"\n \n-#include \"allocators.h\"\n+#include \"support/allocators/secure.h\"\n \n #include <QKeyEvent>\n #include <QMessageBox>"
      },
      {
        "sha": "e263438880c62f7c3decfc6940ae040b91789dd8",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3811a5025ebc48fbbed30178d645872e3b543068/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3811a5025ebc48fbbed30178d645872e3b543068/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=3811a5025ebc48fbbed30178d645872e3b543068",
        "patch": "@@ -8,7 +8,7 @@\n #include \"paymentrequestplus.h\"\n #include \"walletmodeltransaction.h\"\n \n-#include \"allocators.h\" /* for SecureString */\n+#include \"support/allocators/secure.h\"\n \n #include <map>\n #include <vector>"
      },
      {
        "sha": "fa1e18defe2daea1896d96b0cbcf31e6430325ec",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3811a5025ebc48fbbed30178d645872e3b543068/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3811a5025ebc48fbbed30178d645872e3b543068/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=3811a5025ebc48fbbed30178d645872e3b543068",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_STREAMS_H\n #define BITCOIN_STREAMS_H\n \n-#include \"allocators.h\"\n+#include \"support/allocators/zeroafterfree.h\"\n #include \"serialize.h\"\n \n #include <algorithm>"
      },
      {
        "sha": "7a74d87bb494af5687942b3c33ef6213c38fb143",
        "filename": "src/support/allocators/secure.h",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3811a5025ebc48fbbed30178d645872e3b543068/src/support/allocators/secure.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3811a5025ebc48fbbed30178d645872e3b543068/src/support/allocators/secure.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/allocators/secure.h?ref=3811a5025ebc48fbbed30178d645872e3b543068",
        "patch": "@@ -0,0 +1,62 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ALLOCATORS_SECURE_H\n+#define BITCOIN_ALLOCATORS_SECURE_H\n+\n+#include \"support/pagelocker.h\"\n+\n+#include <string>\n+\n+//\n+// Allocator that locks its contents from being paged\n+// out of memory and clears its contents before deletion.\n+//\n+template <typename T>\n+struct secure_allocator : public std::allocator<T> {\n+    // MSVC8 default copy constructor is broken\n+    typedef std::allocator<T> base;\n+    typedef typename base::size_type size_type;\n+    typedef typename base::difference_type difference_type;\n+    typedef typename base::pointer pointer;\n+    typedef typename base::const_pointer const_pointer;\n+    typedef typename base::reference reference;\n+    typedef typename base::const_reference const_reference;\n+    typedef typename base::value_type value_type;\n+    secure_allocator() throw() {}\n+    secure_allocator(const secure_allocator& a) throw() : base(a) {}\n+    template <typename U>\n+    secure_allocator(const secure_allocator<U>& a) throw() : base(a)\n+    {\n+    }\n+    ~secure_allocator() throw() {}\n+    template <typename _Other>\n+    struct rebind {\n+        typedef secure_allocator<_Other> other;\n+    };\n+\n+    T* allocate(std::size_t n, const void* hint = 0)\n+    {\n+        T* p;\n+        p = std::allocator<T>::allocate(n, hint);\n+        if (p != NULL)\n+            LockedPageManager::Instance().LockRange(p, sizeof(T) * n);\n+        return p;\n+    }\n+\n+    void deallocate(T* p, std::size_t n)\n+    {\n+        if (p != NULL) {\n+            memory_cleanse(p, sizeof(T) * n);\n+            LockedPageManager::Instance().UnlockRange(p, sizeof(T) * n);\n+        }\n+        std::allocator<T>::deallocate(p, n);\n+    }\n+};\n+\n+// This is exactly like std::string, but with a custom allocator.\n+typedef std::basic_string<char, std::char_traits<char>, secure_allocator<char> > SecureString;\n+\n+#endif // BITCOIN_ALLOCATORS_SECURE_H"
      },
      {
        "sha": "b01fcd088bc30837828bec2c76bc92aa9209824f",
        "filename": "src/support/allocators/zeroafterfree.h",
        "status": "added",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3811a5025ebc48fbbed30178d645872e3b543068/src/support/allocators/zeroafterfree.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3811a5025ebc48fbbed30178d645872e3b543068/src/support/allocators/zeroafterfree.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/allocators/zeroafterfree.h?ref=3811a5025ebc48fbbed30178d645872e3b543068",
        "patch": "@@ -0,0 +1,48 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ALLOCATORS_ZEROAFTERFREE_H\n+#define BITCOIN_ALLOCATORS_ZEROAFTERFREE_H\n+\n+#include \"support/cleanse.h\"\n+\n+#include <memory>\n+#include <vector>\n+\n+template <typename T>\n+struct zero_after_free_allocator : public std::allocator<T> {\n+    // MSVC8 default copy constructor is broken\n+    typedef std::allocator<T> base;\n+    typedef typename base::size_type size_type;\n+    typedef typename base::difference_type difference_type;\n+    typedef typename base::pointer pointer;\n+    typedef typename base::const_pointer const_pointer;\n+    typedef typename base::reference reference;\n+    typedef typename base::const_reference const_reference;\n+    typedef typename base::value_type value_type;\n+    zero_after_free_allocator() throw() {}\n+    zero_after_free_allocator(const zero_after_free_allocator& a) throw() : base(a) {}\n+    template <typename U>\n+    zero_after_free_allocator(const zero_after_free_allocator<U>& a) throw() : base(a)\n+    {\n+    }\n+    ~zero_after_free_allocator() throw() {}\n+    template <typename _Other>\n+    struct rebind {\n+        typedef zero_after_free_allocator<_Other> other;\n+    };\n+\n+    void deallocate(T* p, std::size_t n)\n+    {\n+        if (p != NULL)\n+            memory_cleanse(p, sizeof(T) * n);\n+        std::allocator<T>::deallocate(p, n);\n+    }\n+};\n+\n+// Byte-vector that clears its contents before deletion.\n+typedef std::vector<char, zero_after_free_allocator<char> > CSerializeData;\n+\n+#endif // BITCOIN_ALLOCATORS_ZEROAFTERFREE_H"
      },
      {
        "sha": "440e0a5193a8cccb245efd3ea0dd3f6338de78d1",
        "filename": "src/support/pagelocker.cpp",
        "status": "renamed",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3811a5025ebc48fbbed30178d645872e3b543068/src/support/pagelocker.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3811a5025ebc48fbbed30178d645872e3b543068/src/support/pagelocker.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/pagelocker.cpp?ref=3811a5025ebc48fbbed30178d645872e3b543068",
        "patch": "@@ -2,7 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"allocators.h\"\n+#include \"support/pagelocker.h\"\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n \n #ifdef WIN32\n #ifdef _WIN32_WINNT",
        "previous_filename": "src/allocators.cpp"
      },
      {
        "sha": "964be1aec41b4fa4a70fae1985939f03091920e1",
        "filename": "src/support/pagelocker.h",
        "status": "renamed",
        "additions": 3,
        "deletions": 93,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3811a5025ebc48fbbed30178d645872e3b543068/src/support/pagelocker.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3811a5025ebc48fbbed30178d645872e3b543068/src/support/pagelocker.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/pagelocker.h?ref=3811a5025ebc48fbbed30178d645872e3b543068",
        "patch": "@@ -3,15 +3,12 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_ALLOCATORS_H\n-#define BITCOIN_ALLOCATORS_H\n+#ifndef BITCOIN_ALLOCATORS_PAGELOCKER_H\n+#define BITCOIN_ALLOCATORS_PAGELOCKER_H\n \n #include \"support/cleanse.h\"\n \n #include <map>\n-#include <string>\n-#include <string.h>\n-#include <vector>\n \n #include <boost/thread/mutex.hpp>\n #include <boost/thread/once.hpp>\n@@ -178,91 +175,4 @@ void UnlockObject(const T& t)\n     LockedPageManager::Instance().UnlockRange((void*)(&t), sizeof(T));\n }\n \n-//\n-// Allocator that locks its contents from being paged\n-// out of memory and clears its contents before deletion.\n-//\n-template <typename T>\n-struct secure_allocator : public std::allocator<T> {\n-    // MSVC8 default copy constructor is broken\n-    typedef std::allocator<T> base;\n-    typedef typename base::size_type size_type;\n-    typedef typename base::difference_type difference_type;\n-    typedef typename base::pointer pointer;\n-    typedef typename base::const_pointer const_pointer;\n-    typedef typename base::reference reference;\n-    typedef typename base::const_reference const_reference;\n-    typedef typename base::value_type value_type;\n-    secure_allocator() throw() {}\n-    secure_allocator(const secure_allocator& a) throw() : base(a) {}\n-    template <typename U>\n-    secure_allocator(const secure_allocator<U>& a) throw() : base(a)\n-    {\n-    }\n-    ~secure_allocator() throw() {}\n-    template <typename _Other>\n-    struct rebind {\n-        typedef secure_allocator<_Other> other;\n-    };\n-\n-    T* allocate(std::size_t n, const void* hint = 0)\n-    {\n-        T* p;\n-        p = std::allocator<T>::allocate(n, hint);\n-        if (p != NULL)\n-            LockedPageManager::Instance().LockRange(p, sizeof(T) * n);\n-        return p;\n-    }\n-\n-    void deallocate(T* p, std::size_t n)\n-    {\n-        if (p != NULL) {\n-            memory_cleanse(p, sizeof(T) * n);\n-            LockedPageManager::Instance().UnlockRange(p, sizeof(T) * n);\n-        }\n-        std::allocator<T>::deallocate(p, n);\n-    }\n-};\n-\n-\n-//\n-// Allocator that clears its contents before deletion.\n-//\n-template <typename T>\n-struct zero_after_free_allocator : public std::allocator<T> {\n-    // MSVC8 default copy constructor is broken\n-    typedef std::allocator<T> base;\n-    typedef typename base::size_type size_type;\n-    typedef typename base::difference_type difference_type;\n-    typedef typename base::pointer pointer;\n-    typedef typename base::const_pointer const_pointer;\n-    typedef typename base::reference reference;\n-    typedef typename base::const_reference const_reference;\n-    typedef typename base::value_type value_type;\n-    zero_after_free_allocator() throw() {}\n-    zero_after_free_allocator(const zero_after_free_allocator& a) throw() : base(a) {}\n-    template <typename U>\n-    zero_after_free_allocator(const zero_after_free_allocator<U>& a) throw() : base(a)\n-    {\n-    }\n-    ~zero_after_free_allocator() throw() {}\n-    template <typename _Other>\n-    struct rebind {\n-        typedef zero_after_free_allocator<_Other> other;\n-    };\n-\n-    void deallocate(T* p, std::size_t n)\n-    {\n-        if (p != NULL)\n-            memory_cleanse(p, sizeof(T) * n);\n-        std::allocator<T>::deallocate(p, n);\n-    }\n-};\n-\n-// This is exactly like std::string, but with a custom allocator.\n-typedef std::basic_string<char, std::char_traits<char>, secure_allocator<char> > SecureString;\n-\n-// Byte-vector that clears its contents before deletion.\n-typedef std::vector<char, zero_after_free_allocator<char> > CSerializeData;\n-\n-#endif // BITCOIN_ALLOCATORS_H\n+#endif // BITCOIN_ALLOCATORS_PAGELOCKER_H",
        "previous_filename": "src/allocators.h"
      },
      {
        "sha": "2108efece5137ae2ca5036467efaabdaa969406d",
        "filename": "src/test/allocator_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3811a5025ebc48fbbed30178d645872e3b543068/src/test/allocator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3811a5025ebc48fbbed30178d645872e3b543068/src/test/allocator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/allocator_tests.cpp?ref=3811a5025ebc48fbbed30178d645872e3b543068",
        "patch": "@@ -4,7 +4,7 @@\n \n #include \"util.h\"\n \n-#include \"allocators.h\"\n+#include \"support/allocators/secure.h\"\n #include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>"
      }
    ]
  },
  {
    "sha": "05f17d4eaa9e74836d5736d50e456420949f2732",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNWYxN2Q0ZWFhOWU3NDgzNmQ1NzM2ZDUwZTQ1NjQyMDk0OWYyNzMy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-20T15:05:37Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-20T15:08:35Z"
      },
      "message": "Merge pull request #5745\n\n50c72f2 [Move Only] Move wallet related things to src/wallet/ (Jonas Schnelli)",
      "tree": {
        "sha": "a0d1ff8a01ef42a7ed3bd84fc28a13741861d384",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0d1ff8a01ef42a7ed3bd84fc28a13741861d384"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05f17d4eaa9e74836d5736d50e456420949f2732",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVDDfzAAoJEHSBCwEjRsmmR9MH/0KKXF+cR9/7cgVvCMH/CFSK\nGZ6XN8AwbWgTqkKv4NCo0GbW6wVALMwL+3zGg6jy57/80VjE3LD5WUYPhCYIyT9i\naH8y0ihJAwWWEJYSOJVu8OZdjRP2W6jGK7sqYrktfXFLvvKe/JpHZYAfKFGynrz7\n4oDctTJguJ7UvMdgVprLEnUlVtjU1YEVHy7eLEDFefuMcqoNkZXhcczjyqwAPyn5\nsrhaFzjp+oZBHrX/u2TiJpG/C5NWBXpqIcRlZ4cpudQR+E6NgaNUwmnCTgj3HPTW\n/HphBc6Pdw3AMki7Z9vfJaWL2SmUvsymKCmfNz7j+IYuqm47cJnfM+SugK6sM9c=\n=CdNn\n-----END PGP SIGNATURE-----",
        "payload": "tree a0d1ff8a01ef42a7ed3bd84fc28a13741861d384\nparent 3811a5025ebc48fbbed30178d645872e3b543068\nparent 50c72f23ad5f7fcd13bf016f79cac6323c329caf\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1426863937 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1426864115 +0100\n\nMerge pull request #5745\n\n50c72f2 [Move Only] Move wallet related things to src/wallet/ (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05f17d4eaa9e74836d5736d50e456420949f2732",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/05f17d4eaa9e74836d5736d50e456420949f2732",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05f17d4eaa9e74836d5736d50e456420949f2732/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3811a5025ebc48fbbed30178d645872e3b543068",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3811a5025ebc48fbbed30178d645872e3b543068",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3811a5025ebc48fbbed30178d645872e3b543068"
      },
      {
        "sha": "50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50c72f23ad5f7fcd13bf016f79cac6323c329caf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/50c72f23ad5f7fcd13bf016f79cac6323c329caf"
      }
    ],
    "stats": {
      "total": 106,
      "additions": 53,
      "deletions": 53
    },
    "files": [
      {
        "sha": "d1a8efaa6ac3be2dc160005963b2a4dc21f397dc",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -89,7 +89,7 @@ BITCOIN_CORE_H = \\\n   compressor.h \\\n   core_io.h \\\n   crypter.h \\\n-  db.h \\\n+  wallet/db.h \\\n   eccryptoverify.h \\\n   ecwrapper.h \\\n   hash.h \\\n@@ -140,9 +140,9 @@ BITCOIN_CORE_H = \\\n   utilstrencodings.h \\\n   utiltime.h \\\n   version.h \\\n-  walletdb.h \\\n-  wallet.h \\\n-  wallet_ismine.h \\\n+  wallet/walletdb.h \\\n+  wallet/wallet.h \\\n+  wallet/wallet_ismine.h \\\n   compat/byteswap.h \\\n   compat/endian.h \\\n   compat/sanity.h\n@@ -198,13 +198,13 @@ libbitcoin_server_a_SOURCES = \\\n # when wallet enabled\n libbitcoin_wallet_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n libbitcoin_wallet_a_SOURCES = \\\n-  db.cpp \\\n+  wallet/db.cpp \\\n   crypter.cpp \\\n-  rpcdump.cpp \\\n-  rpcwallet.cpp \\\n-  wallet.cpp \\\n-  wallet_ismine.cpp \\\n-  walletdb.cpp \\\n+  wallet/rpcdump.cpp \\\n+  wallet/rpcwallet.cpp \\\n+  wallet/wallet.cpp \\\n+  wallet/wallet_ismine.cpp \\\n+  wallet/walletdb.cpp \\\n   $(BITCOIN_CORE_H)\n \n # crypto primitives library"
      },
      {
        "sha": "8dd0a28454fa8f832946ca927015a3c9193f754c",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -76,7 +76,7 @@ BITCOIN_TESTS =\\\n if ENABLE_WALLET\n BITCOIN_TESTS += \\\n   test/accounting_tests.cpp \\\n-  test/wallet_tests.cpp \\\n+  wallet/test/wallet_tests.cpp \\\n   test/rpc_wallet_tests.cpp\n endif\n "
      },
      {
        "sha": "a930a97a94f43161072dec6f1d54a2b8fc00ceed",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -24,9 +24,9 @@\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n #ifdef ENABLE_WALLET\n-#include \"db.h\"\n-#include \"wallet.h\"\n-#include \"walletdb.h\"\n+#include \"wallet/db.h\"\n+#include \"wallet/wallet.h\"\n+#include \"wallet/walletdb.h\"\n #endif\n \n #include <stdint.h>"
      },
      {
        "sha": "01212b19c4cdb118f757f8987826065a0969b80a",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -15,7 +15,7 @@\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n #ifdef ENABLE_WALLET\n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n #endif\n \n #include <boost/thread.hpp>"
      },
      {
        "sha": "9573fe43df8abec0c95abdf59a56b6cd556e1c93",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -8,7 +8,7 @@\n #include \"walletmodel.h\"\n \n #include \"base58.h\"\n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n \n #include <QFont>\n #include <QDebug>"
      },
      {
        "sha": "3ae780abfd8d6ad7e1074f7f20591ab73757b62f",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -30,7 +30,7 @@\n #include \"util.h\"\n \n #ifdef ENABLE_WALLET\n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n #endif\n \n #include <stdint.h>"
      },
      {
        "sha": "e4e9015c85d3b63a9d0c973daeb3a8bd5a2a59ca",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -15,7 +15,7 @@\n \n #include \"coincontrol.h\"\n #include \"main.h\"\n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n \n #include <boost/assign/list_of.hpp> // for 'map_list_of()'\n "
      },
      {
        "sha": "a9e4b339e485c3cced6588d315ba937213ae21c5",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -18,7 +18,7 @@\n #include \"txdb.h\" // for -dbcache defaults\n \n #ifdef ENABLE_WALLET\n-#include \"wallet.h\" // for CWallet::minTxFee\n+#include \"wallet/wallet.h\" // for CWallet::minTxFee\n #endif\n \n #include <boost/thread.hpp>"
      },
      {
        "sha": "a169ed6b55a5817d66fae647b57ef8d2534c18d3",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -18,8 +18,8 @@\n #include \"txdb.h\" // for -dbcache defaults\n \n #ifdef ENABLE_WALLET\n-#include \"wallet.h\"\n-#include \"walletdb.h\"\n+#include \"wallet/wallet.h\"\n+#include \"wallet/walletdb.h\"\n #endif\n \n #include <QNetworkProxy>"
      },
      {
        "sha": "40d6e16f519c5c06dbc433bc656c70bc43799db3",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -12,7 +12,7 @@\n #include \"chainparams.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n \n #include <cstdlib>\n "
      },
      {
        "sha": "28c8fb95f690d30b5b435b5c94ac1ceab4b0155a",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -18,7 +18,7 @@\n #include \"base58.h\"\n #include \"coincontrol.h\"\n #include \"ui_interface.h\"\n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n \n #include <QMessageBox>\n #include <QScrollBar>"
      },
      {
        "sha": "76da6904a98691621896c4ae599bc6f711070819",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -12,7 +12,7 @@\n \n #include \"base58.h\"\n #include \"init.h\"\n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n \n #include <string>\n #include <vector>"
      },
      {
        "sha": "414fe02ff9b03f3e0ea705a700c4192fac0717e5",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -12,7 +12,7 @@\n #include \"version.h\"\n \n #ifdef ENABLE_WALLET\n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n #endif\n \n #include <QApplication>"
      },
      {
        "sha": "9b235f9130244fbf26c56ba4eec95e063d8bf3d0",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -10,13 +10,13 @@\n #include \"transactionrecord.h\"\n \n #include \"base58.h\"\n-#include \"db.h\"\n+#include \"wallet/db.h\"\n #include \"main.h\"\n #include \"script/script.h\"\n #include \"timedata.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n \n #include <stdint.h>\n #include <string>"
      },
      {
        "sha": "19e3fc0dc28bfbeb459dcd5e7b9c8fcb3f6a4d39",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -6,7 +6,7 @@\n \n #include \"base58.h\"\n #include \"timedata.h\"\n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n \n #include <stdint.h>\n "
      },
      {
        "sha": "dff2676b10bab6e18fe4837eb471c693aa7edc3e",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -17,7 +17,7 @@\n #include \"sync.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n \n #include <QColor>\n #include <QDateTime>"
      },
      {
        "sha": "09ed8ce9fda0b86a81086485543be9e20926bdb8",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -12,13 +12,13 @@\n #include \"transactiontablemodel.h\"\n \n #include \"base58.h\"\n-#include \"db.h\"\n+#include \"wallet/db.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"sync.h\"\n #include \"ui_interface.h\"\n-#include \"wallet.h\"\n-#include \"walletdb.h\" // for BackupWallet\n+#include \"wallet/wallet.h\"\n+#include \"wallet/walletdb.h\" // for BackupWallet\n \n #include <stdint.h>\n "
      },
      {
        "sha": "206bb7c77494e9e52026136d3bcfc8f7d399296b",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -4,7 +4,7 @@\n \n #include \"walletmodeltransaction.h\"\n \n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n \n WalletModelTransaction::WalletModelTransaction(const QList<SendCoinsRecipient> &recipients) :\n     recipients(recipients),"
      },
      {
        "sha": "a07acea9aad67976430023978172888e9df1e973",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -14,8 +14,8 @@\n #include \"rpcserver.h\"\n #include \"util.h\"\n #ifdef ENABLE_WALLET\n-#include \"db.h\"\n-#include \"wallet.h\"\n+#include \"wallet/db.h\"\n+#include \"wallet/wallet.h\"\n #endif\n \n #include <stdint.h>"
      },
      {
        "sha": "938d79513f38688a0c6be24ac6d8532f74683a59",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -13,8 +13,8 @@\n #include \"timedata.h\"\n #include \"util.h\"\n #ifdef ENABLE_WALLET\n-#include \"wallet.h\"\n-#include \"walletdb.h\"\n+#include \"wallet/wallet.h\"\n+#include \"wallet/walletdb.h\"\n #endif\n \n #include <stdint.h>"
      },
      {
        "sha": "a79b4e33940873201f153ec7c8175a765a816884",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -16,7 +16,7 @@\n #include \"script/standard.h\"\n #include \"uint256.h\"\n #ifdef ENABLE_WALLET\n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n #endif\n \n #include <stdint.h>"
      },
      {
        "sha": "ba71725222edfde4d94160accc039a2c59af68ac",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -13,7 +13,7 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n #ifdef ENABLE_WALLET\n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n #endif\n \n #include <boost/algorithm/string.hpp>"
      },
      {
        "sha": "0c2ade48d629c895e8d9ad619b80c75cca1cc89b",
        "filename": "src/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/accounting_tests.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"wallet.h\"\n-#include \"walletdb.h\"\n+#include \"wallet/wallet.h\"\n+#include \"wallet/walletdb.h\"\n \n #include \"test/test_bitcoin.h\"\n "
      },
      {
        "sha": "6b189a6b55faab6f4f106d245da0f88e6628cea4",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -13,7 +13,7 @@\n #include \"test/test_bitcoin.h\"\n \n #ifdef ENABLE_WALLET\n-#include \"wallet_ismine.h\"\n+#include \"wallet/wallet_ismine.h\"\n #endif\n \n #include <boost/foreach.hpp>"
      },
      {
        "sha": "d97bea8bd2a9c5c516a58e37449d58daf3fa4567",
        "filename": "src/test/rpc_wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_wallet_tests.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -6,7 +6,7 @@\n #include \"rpcclient.h\"\n \n #include \"base58.h\"\n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n \n #include \"test/test_bitcoin.h\"\n "
      },
      {
        "sha": "c8cfe28729c51ad0100ed23a470d5222e94ff3ca",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -11,7 +11,7 @@\n #include \"test/test_bitcoin.h\"\n \n #ifdef ENABLE_WALLET\n-#include \"wallet_ismine.h\"\n+#include \"wallet/wallet_ismine.h\"\n #endif\n \n #include <vector>"
      },
      {
        "sha": "7d5207b11e6f51c16e4ad71f7d99a2a4ac376798",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -12,8 +12,8 @@\n #include \"ui_interface.h\"\n #include \"util.h\"\n #ifdef ENABLE_WALLET\n-#include \"db.h\"\n-#include \"wallet.h\"\n+#include \"wallet/db.h\"\n+#include \"wallet/wallet.h\"\n #endif\n \n #include <boost/filesystem.hpp>"
      },
      {
        "sha": "36946b7dcca255e08a00529f441a2787227386d2",
        "filename": "src/wallet/db.cpp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "previous_filename": "src/db.cpp"
      },
      {
        "sha": "71133f969914ae47559f15a5ecf07e30a1644526",
        "filename": "src/wallet/db.h",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "previous_filename": "src/db.h"
      },
      {
        "sha": "b9c92a06c5deb2e8696019a51d0d29fa69a41c95",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "previous_filename": "src/rpcdump.cpp"
      },
      {
        "sha": "5502b0b261dfd5e115e04ff740c4898bb3a59420",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "previous_filename": "src/rpcwallet.cpp"
      },
      {
        "sha": "a5bc52b8dc94e29606cf3bcfb4f875d77b253829",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "renamed",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n \n #include <set>\n #include <stdint.h>",
        "previous_filename": "src/test/wallet_tests.cpp"
      },
      {
        "sha": "dd3310926704cfb3be97fdea3740a8670448da2a",
        "filename": "src/wallet/wallet.cpp",
        "status": "renamed",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -3,7 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n \n #include \"base58.h\"\n #include \"checkpoints.h\"",
        "previous_filename": "src/wallet.cpp"
      },
      {
        "sha": "b2973250a440c5e408194ac0e3031257bdf4b8a0",
        "filename": "src/wallet/wallet.h",
        "status": "renamed",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -14,8 +14,8 @@\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"ui_interface.h\"\n-#include \"wallet_ismine.h\"\n-#include \"walletdb.h\"\n+#include \"wallet/wallet_ismine.h\"\n+#include \"wallet/walletdb.h\"\n \n #include <algorithm>\n #include <map>",
        "previous_filename": "src/wallet.h"
      },
      {
        "sha": "5482348e356abda372fb5b3b5a3e3e8f8fcf5796",
        "filename": "src/wallet/wallet_ismine.cpp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/wallet/wallet_ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/wallet/wallet_ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet_ismine.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "previous_filename": "src/wallet_ismine.cpp"
      },
      {
        "sha": "6293df8b10e596ed16453af32901e9aeaa97aee1",
        "filename": "src/wallet/wallet_ismine.h",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/wallet/wallet_ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/wallet/wallet_ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet_ismine.h?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "previous_filename": "src/wallet_ismine.h"
      },
      {
        "sha": "880026d187c3f325e1c6379fb8192ca2fe29d22c",
        "filename": "src/wallet/walletdb.cpp",
        "status": "renamed",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -3,15 +3,15 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"walletdb.h\"\n+#include \"wallet/walletdb.h\"\n \n #include \"base58.h\"\n #include \"protocol.h\"\n #include \"serialize.h\"\n #include \"sync.h\"\n #include \"util.h\"\n #include \"utiltime.h\"\n-#include \"wallet.h\"\n+#include \"wallet/wallet.h\"\n \n #include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>",
        "previous_filename": "src/walletdb.cpp"
      },
      {
        "sha": "6aa0fa40df09f090dc4febb38db8b37c42155e6a",
        "filename": "src/wallet/walletdb.h",
        "status": "renamed",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05f17d4eaa9e74836d5736d50e456420949f2732/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05f17d4eaa9e74836d5736d50e456420949f2732/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=05f17d4eaa9e74836d5736d50e456420949f2732",
        "patch": "@@ -7,7 +7,7 @@\n #define BITCOIN_WALLETDB_H\n \n #include \"amount.h\"\n-#include \"db.h\"\n+#include \"wallet/db.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n ",
        "previous_filename": "src/walletdb.h"
      }
    ]
  },
  {
    "sha": "2bb1c87700a80f0b20b4b2cbd68a0d82a18dbcc0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYmIxYzg3NzAwYTgwZjBiMjBiNGIyY2JkNjhhMGQ4MmExOGRiY2Mw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-02-04T20:19:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-20T15:23:39Z"
      },
      "message": "refactor: move bdb (bitdb) interaction from init.cpp to wallet.cpp\n\nthis will remove db.h from init.cpp",
      "tree": {
        "sha": "61bdf899e90c96abd096c3c0abd5fdbd54369eff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61bdf899e90c96abd096c3c0abd5fdbd54369eff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2bb1c87700a80f0b20b4b2cbd68a0d82a18dbcc0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bb1c87700a80f0b20b4b2cbd68a0d82a18dbcc0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2bb1c87700a80f0b20b4b2cbd68a0d82a18dbcc0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bb1c87700a80f0b20b4b2cbd68a0d82a18dbcc0/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "05f17d4eaa9e74836d5736d50e456420949f2732",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05f17d4eaa9e74836d5736d50e456420949f2732",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/05f17d4eaa9e74836d5736d50e456420949f2732"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 72,
      "deletions": 44
    },
    "files": [
      {
        "sha": "95ec45015f63096e4d651ac7a04fbc38fb6cae84",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 44,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2bb1c87700a80f0b20b4b2cbd68a0d82a18dbcc0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2bb1c87700a80f0b20b4b2cbd68a0d82a18dbcc0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2bb1c87700a80f0b20b4b2cbd68a0d82a18dbcc0",
        "patch": "@@ -24,7 +24,6 @@\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n #ifdef ENABLE_WALLET\n-#include \"wallet/db.h\"\n #include \"wallet/wallet.h\"\n #include \"wallet/walletdb.h\"\n #endif\n@@ -151,7 +150,7 @@ void Shutdown()\n     StopRPCThreads();\n #ifdef ENABLE_WALLET\n     if (pwalletMain)\n-        bitdb.Flush(false);\n+        pwalletMain->Flush(false);\n     GenerateBitcoins(false, NULL, 0);\n #endif\n     StopNode();\n@@ -184,7 +183,7 @@ void Shutdown()\n     }\n #ifdef ENABLE_WALLET\n     if (pwalletMain)\n-        bitdb.Flush(true);\n+        pwalletMain->Flush(true);\n #endif\n #ifndef WIN32\n     boost::filesystem::remove(GetPidFile());\n@@ -852,47 +851,17 @@ bool AppInit2(boost::thread_group& threadGroup)\n         LogPrintf(\"Using wallet %s\\n\", strWalletFile);\n         uiInterface.InitMessage(_(\"Verifying wallet...\"));\n \n-        if (!bitdb.Open(GetDataDir()))\n-        {\n-            // try moving the database env out of the way\n-            boost::filesystem::path pathDatabase = GetDataDir() / \"database\";\n-            boost::filesystem::path pathDatabaseBak = GetDataDir() / strprintf(\"database.%d.bak\", GetTime());\n-            try {\n-                boost::filesystem::rename(pathDatabase, pathDatabaseBak);\n-                LogPrintf(\"Moved old %s to %s. Retrying.\\n\", pathDatabase.string(), pathDatabaseBak.string());\n-            } catch (const boost::filesystem::filesystem_error&) {\n-                 // failure is ok (well, not really, but it's not worse than what we started with)\n-            }\n-\n-            // try again\n-            if (!bitdb.Open(GetDataDir())) {\n-                // if it still fails, it probably means we can't even create the database env\n-                string msg = strprintf(_(\"Error initializing wallet database environment %s!\"), strDataDir);\n-                return InitError(msg);\n-            }\n-        }\n-\n-        if (GetBoolArg(\"-salvagewallet\", false))\n-        {\n-            // Recover readable keypairs:\n-            if (!CWalletDB::Recover(bitdb, strWalletFile, true))\n-                return false;\n-        }\n-\n-        if (boost::filesystem::exists(GetDataDir() / strWalletFile))\n-        {\n-            CDBEnv::VerifyResult r = bitdb.Verify(strWalletFile, CWalletDB::Recover);\n-            if (r == CDBEnv::RECOVER_OK)\n-            {\n-                string msg = strprintf(_(\"Warning: wallet.dat corrupt, data salvaged!\"\n-                                         \" Original wallet.dat saved as wallet.{timestamp}.bak in %s; if\"\n-                                         \" your balance or transactions are incorrect you should\"\n-                                         \" restore from a backup.\"), strDataDir);\n-                InitWarning(msg);\n-            }\n-            if (r == CDBEnv::RECOVER_FAIL)\n-                return InitError(_(\"wallet.dat corrupt, salvage failed\"));\n-        }\n+        std::string warningString;\n+        std::string errorString;\n+        \n+        if (!CWallet::Verify(strWalletFile, warningString, errorString))\n+            return false;\n+        \n+        if (!warningString.empty())\n+            InitWarning(warningString);\n+        if (!errorString.empty())\n+            return InitError(warningString);\n+        \n     } // (!fDisableWallet)\n #endif // ENABLE_WALLET\n     // ********************************************************* Step 6: network initialization"
      },
      {
        "sha": "44b416d49653a60c472d70cf13106cae0c4867eb",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2bb1c87700a80f0b20b4b2cbd68a0d82a18dbcc0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2bb1c87700a80f0b20b4b2cbd68a0d82a18dbcc0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2bb1c87700a80f0b20b4b2cbd68a0d82a18dbcc0",
        "patch": "@@ -18,6 +18,7 @@\n #include <assert.h>\n \n #include <boost/algorithm/string/replace.hpp>\n+#include <boost/filesystem.hpp>\n #include <boost/thread.hpp>\n \n using namespace std;\n@@ -339,6 +340,58 @@ set<uint256> CWallet::GetConflicts(const uint256& txid) const\n     return result;\n }\n \n+void CWallet::Flush(bool shutdown)\n+{\n+    bitdb.Flush(shutdown);\n+}\n+\n+bool CWallet::Verify(const string walletFile, string& warningString, string& errorString)\n+{\n+    if (!bitdb.Open(GetDataDir()))\n+    {\n+        // try moving the database env out of the way\n+        boost::filesystem::path pathDatabase = GetDataDir() / \"database\";\n+        boost::filesystem::path pathDatabaseBak = GetDataDir() / strprintf(\"database.%d.bak\", GetTime());\n+        try {\n+            boost::filesystem::rename(pathDatabase, pathDatabaseBak);\n+            LogPrintf(\"Moved old %s to %s. Retrying.\\n\", pathDatabase.string(), pathDatabaseBak.string());\n+        } catch (const boost::filesystem::filesystem_error&) {\n+            // failure is ok (well, not really, but it's not worse than what we started with)\n+        }\n+        \n+        // try again\n+        if (!bitdb.Open(GetDataDir())) {\n+            // if it still fails, it probably means we can't even create the database env\n+            string msg = strprintf(_(\"Error initializing wallet database environment %s!\"), GetDataDir());\n+            errorString += msg;\n+            return true;\n+        }\n+    }\n+    \n+    if (GetBoolArg(\"-salvagewallet\", false))\n+    {\n+        // Recover readable keypairs:\n+        if (!CWalletDB::Recover(bitdb, walletFile, true))\n+            return false;\n+    }\n+    \n+    if (boost::filesystem::exists(GetDataDir() / walletFile))\n+    {\n+        CDBEnv::VerifyResult r = bitdb.Verify(walletFile, CWalletDB::Recover);\n+        if (r == CDBEnv::RECOVER_OK)\n+        {\n+            warningString += strprintf(_(\"Warning: wallet.dat corrupt, data salvaged!\"\n+                                     \" Original wallet.dat saved as wallet.{timestamp}.bak in %s; if\"\n+                                     \" your balance or transactions are incorrect you should\"\n+                                     \" restore from a backup.\"), GetDataDir());\n+        }\n+        if (r == CDBEnv::RECOVER_FAIL)\n+            errorString += _(\"wallet.dat corrupt, salvage failed\");\n+    }\n+    \n+    return true;\n+}\n+\n void CWallet::SyncMetaData(pair<TxSpends::iterator, TxSpends::iterator> range)\n {\n     // We want all the wallet transactions in range to have the same metadata as"
      },
      {
        "sha": "1a9feff9f371a95b539d614fdb004c5ab7fcdff8",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2bb1c87700a80f0b20b4b2cbd68a0d82a18dbcc0/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2bb1c87700a80f0b20b4b2cbd68a0d82a18dbcc0/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=2bb1c87700a80f0b20b4b2cbd68a0d82a18dbcc0",
        "patch": "@@ -743,6 +743,12 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     //! Get wallet transactions that conflict with given transaction (spend same outputs)\n     std::set<uint256> GetConflicts(const uint256& txid) const;\n \n+    //! Flush wallet (bitdb flush)\n+    void Flush(bool shutdown=false);\n+\n+    //! Verify the wallet database and perform salvage if required\n+    static bool Verify(const std::string walletFile, std::string& warningString, std::string& errorString);\n+    \n     /** \n      * Address book entry changed.\n      * @note called with lock cs_wallet held."
      }
    ]
  },
  {
    "sha": "f3948a30cd27928fdf9dffbbf90ea6430c869edf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMzk0OGEzMGNkMjc5MjhmZGY5ZGZmYmJmOTBlYTY0MzBjODY5ZWRm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-20T15:29:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-20T15:29:28Z"
      },
      "message": "Merge #5758: refactor: move BDB (bitdb / db.h) interaction from init.cpp to wallet.cpp\n\n2bb1c87 refactor: move bdb (bitdb) interaction from init.cpp to wallet.cpp (Jonas Schnelli)",
      "tree": {
        "sha": "61bdf899e90c96abd096c3c0abd5fdbd54369eff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61bdf899e90c96abd096c3c0abd5fdbd54369eff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3948a30cd27928fdf9dffbbf90ea6430c869edf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVDDzYAAoJEHSBCwEjRsmm52EH/3DRFdV4ttfrBKUe+Sn8iA1g\nAwRcrqCZz4LLlQzL4YNg6mWxRFMw1HrHzwFE3toAsMT+OcQJjuNrd8nziVhRYrTc\ntIgv8fRB0rS8BA5uivN7LZ/TZbHJnu/9fKtjjccxGNx7BB1Yx3lsxOB7PzTSHcG3\nJY6iFspIcQf1Joy/gcE7vop/Alacl/EoD111QC54Exh8OLd+58XvHQAN/eBHshxy\n4NMz7MxjeyhlJfdCsMXkgT9G4RUeUFrMPLqD7HJiVPeURq2cI49Lu2kqjb5SSUbz\n5LuJLhTE0WEMlyYi/3hFtqZyL+7Q61He+sfhWbysVpvNVwNyuUJVUMIq70l7q2E=\n=Yt9H\n-----END PGP SIGNATURE-----",
        "payload": "tree 61bdf899e90c96abd096c3c0abd5fdbd54369eff\nparent 05f17d4eaa9e74836d5736d50e456420949f2732\nparent 2bb1c87700a80f0b20b4b2cbd68a0d82a18dbcc0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1426865366 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1426865368 +0100\n\nMerge #5758: refactor: move BDB (bitdb / db.h) interaction from init.cpp to wallet.cpp\n\n2bb1c87 refactor: move bdb (bitdb) interaction from init.cpp to wallet.cpp (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3948a30cd27928fdf9dffbbf90ea6430c869edf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f3948a30cd27928fdf9dffbbf90ea6430c869edf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3948a30cd27928fdf9dffbbf90ea6430c869edf/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "05f17d4eaa9e74836d5736d50e456420949f2732",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05f17d4eaa9e74836d5736d50e456420949f2732",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/05f17d4eaa9e74836d5736d50e456420949f2732"
      },
      {
        "sha": "2bb1c87700a80f0b20b4b2cbd68a0d82a18dbcc0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bb1c87700a80f0b20b4b2cbd68a0d82a18dbcc0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2bb1c87700a80f0b20b4b2cbd68a0d82a18dbcc0"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 72,
      "deletions": 44
    },
    "files": [
      {
        "sha": "95ec45015f63096e4d651ac7a04fbc38fb6cae84",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 44,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3948a30cd27928fdf9dffbbf90ea6430c869edf/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3948a30cd27928fdf9dffbbf90ea6430c869edf/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f3948a30cd27928fdf9dffbbf90ea6430c869edf",
        "patch": "@@ -24,7 +24,6 @@\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n #ifdef ENABLE_WALLET\n-#include \"wallet/db.h\"\n #include \"wallet/wallet.h\"\n #include \"wallet/walletdb.h\"\n #endif\n@@ -151,7 +150,7 @@ void Shutdown()\n     StopRPCThreads();\n #ifdef ENABLE_WALLET\n     if (pwalletMain)\n-        bitdb.Flush(false);\n+        pwalletMain->Flush(false);\n     GenerateBitcoins(false, NULL, 0);\n #endif\n     StopNode();\n@@ -184,7 +183,7 @@ void Shutdown()\n     }\n #ifdef ENABLE_WALLET\n     if (pwalletMain)\n-        bitdb.Flush(true);\n+        pwalletMain->Flush(true);\n #endif\n #ifndef WIN32\n     boost::filesystem::remove(GetPidFile());\n@@ -852,47 +851,17 @@ bool AppInit2(boost::thread_group& threadGroup)\n         LogPrintf(\"Using wallet %s\\n\", strWalletFile);\n         uiInterface.InitMessage(_(\"Verifying wallet...\"));\n \n-        if (!bitdb.Open(GetDataDir()))\n-        {\n-            // try moving the database env out of the way\n-            boost::filesystem::path pathDatabase = GetDataDir() / \"database\";\n-            boost::filesystem::path pathDatabaseBak = GetDataDir() / strprintf(\"database.%d.bak\", GetTime());\n-            try {\n-                boost::filesystem::rename(pathDatabase, pathDatabaseBak);\n-                LogPrintf(\"Moved old %s to %s. Retrying.\\n\", pathDatabase.string(), pathDatabaseBak.string());\n-            } catch (const boost::filesystem::filesystem_error&) {\n-                 // failure is ok (well, not really, but it's not worse than what we started with)\n-            }\n-\n-            // try again\n-            if (!bitdb.Open(GetDataDir())) {\n-                // if it still fails, it probably means we can't even create the database env\n-                string msg = strprintf(_(\"Error initializing wallet database environment %s!\"), strDataDir);\n-                return InitError(msg);\n-            }\n-        }\n-\n-        if (GetBoolArg(\"-salvagewallet\", false))\n-        {\n-            // Recover readable keypairs:\n-            if (!CWalletDB::Recover(bitdb, strWalletFile, true))\n-                return false;\n-        }\n-\n-        if (boost::filesystem::exists(GetDataDir() / strWalletFile))\n-        {\n-            CDBEnv::VerifyResult r = bitdb.Verify(strWalletFile, CWalletDB::Recover);\n-            if (r == CDBEnv::RECOVER_OK)\n-            {\n-                string msg = strprintf(_(\"Warning: wallet.dat corrupt, data salvaged!\"\n-                                         \" Original wallet.dat saved as wallet.{timestamp}.bak in %s; if\"\n-                                         \" your balance or transactions are incorrect you should\"\n-                                         \" restore from a backup.\"), strDataDir);\n-                InitWarning(msg);\n-            }\n-            if (r == CDBEnv::RECOVER_FAIL)\n-                return InitError(_(\"wallet.dat corrupt, salvage failed\"));\n-        }\n+        std::string warningString;\n+        std::string errorString;\n+        \n+        if (!CWallet::Verify(strWalletFile, warningString, errorString))\n+            return false;\n+        \n+        if (!warningString.empty())\n+            InitWarning(warningString);\n+        if (!errorString.empty())\n+            return InitError(warningString);\n+        \n     } // (!fDisableWallet)\n #endif // ENABLE_WALLET\n     // ********************************************************* Step 6: network initialization"
      },
      {
        "sha": "44b416d49653a60c472d70cf13106cae0c4867eb",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3948a30cd27928fdf9dffbbf90ea6430c869edf/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3948a30cd27928fdf9dffbbf90ea6430c869edf/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f3948a30cd27928fdf9dffbbf90ea6430c869edf",
        "patch": "@@ -18,6 +18,7 @@\n #include <assert.h>\n \n #include <boost/algorithm/string/replace.hpp>\n+#include <boost/filesystem.hpp>\n #include <boost/thread.hpp>\n \n using namespace std;\n@@ -339,6 +340,58 @@ set<uint256> CWallet::GetConflicts(const uint256& txid) const\n     return result;\n }\n \n+void CWallet::Flush(bool shutdown)\n+{\n+    bitdb.Flush(shutdown);\n+}\n+\n+bool CWallet::Verify(const string walletFile, string& warningString, string& errorString)\n+{\n+    if (!bitdb.Open(GetDataDir()))\n+    {\n+        // try moving the database env out of the way\n+        boost::filesystem::path pathDatabase = GetDataDir() / \"database\";\n+        boost::filesystem::path pathDatabaseBak = GetDataDir() / strprintf(\"database.%d.bak\", GetTime());\n+        try {\n+            boost::filesystem::rename(pathDatabase, pathDatabaseBak);\n+            LogPrintf(\"Moved old %s to %s. Retrying.\\n\", pathDatabase.string(), pathDatabaseBak.string());\n+        } catch (const boost::filesystem::filesystem_error&) {\n+            // failure is ok (well, not really, but it's not worse than what we started with)\n+        }\n+        \n+        // try again\n+        if (!bitdb.Open(GetDataDir())) {\n+            // if it still fails, it probably means we can't even create the database env\n+            string msg = strprintf(_(\"Error initializing wallet database environment %s!\"), GetDataDir());\n+            errorString += msg;\n+            return true;\n+        }\n+    }\n+    \n+    if (GetBoolArg(\"-salvagewallet\", false))\n+    {\n+        // Recover readable keypairs:\n+        if (!CWalletDB::Recover(bitdb, walletFile, true))\n+            return false;\n+    }\n+    \n+    if (boost::filesystem::exists(GetDataDir() / walletFile))\n+    {\n+        CDBEnv::VerifyResult r = bitdb.Verify(walletFile, CWalletDB::Recover);\n+        if (r == CDBEnv::RECOVER_OK)\n+        {\n+            warningString += strprintf(_(\"Warning: wallet.dat corrupt, data salvaged!\"\n+                                     \" Original wallet.dat saved as wallet.{timestamp}.bak in %s; if\"\n+                                     \" your balance or transactions are incorrect you should\"\n+                                     \" restore from a backup.\"), GetDataDir());\n+        }\n+        if (r == CDBEnv::RECOVER_FAIL)\n+            errorString += _(\"wallet.dat corrupt, salvage failed\");\n+    }\n+    \n+    return true;\n+}\n+\n void CWallet::SyncMetaData(pair<TxSpends::iterator, TxSpends::iterator> range)\n {\n     // We want all the wallet transactions in range to have the same metadata as"
      },
      {
        "sha": "1a9feff9f371a95b539d614fdb004c5ab7fcdff8",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3948a30cd27928fdf9dffbbf90ea6430c869edf/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3948a30cd27928fdf9dffbbf90ea6430c869edf/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f3948a30cd27928fdf9dffbbf90ea6430c869edf",
        "patch": "@@ -743,6 +743,12 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     //! Get wallet transactions that conflict with given transaction (spend same outputs)\n     std::set<uint256> GetConflicts(const uint256& txid) const;\n \n+    //! Flush wallet (bitdb flush)\n+    void Flush(bool shutdown=false);\n+\n+    //! Verify the wallet database and perform salvage if required\n+    static bool Verify(const std::string walletFile, std::string& warningString, std::string& errorString);\n+    \n     /** \n      * Address book entry changed.\n      * @note called with lock cs_wallet held."
      }
    ]
  },
  {
    "sha": "18051c7fbd224e32d9a5fea96f1083210cea3a14",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxODA1MWM3ZmJkMjI0ZTMyZDlhNWZlYTk2ZjEwODMyMTBjZWEzYTE0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-04T18:06:20Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-21T14:06:18Z"
      },
      "message": "Abstract out Ctransaction-specific signing into TransactionSignatureCreator",
      "tree": {
        "sha": "d82cbc38c45adc46969bc18dabc4c8621afb6068",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d82cbc38c45adc46969bc18dabc4c8621afb6068"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18051c7fbd224e32d9a5fea96f1083210cea3a14",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18051c7fbd224e32d9a5fea96f1083210cea3a14",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/18051c7fbd224e32d9a5fea96f1083210cea3a14",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18051c7fbd224e32d9a5fea96f1083210cea3a14/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3948a30cd27928fdf9dffbbf90ea6430c869edf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3948a30cd27928fdf9dffbbf90ea6430c869edf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3948a30cd27928fdf9dffbbf90ea6430c869edf"
      }
    ],
    "stats": {
      "total": 130,
      "additions": 90,
      "deletions": 40
    },
    "files": [
      {
        "sha": "eab629cd9133022e4d4e01eebf372dc2b18216f7",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 36,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18051c7fbd224e32d9a5fea96f1083210cea3a14/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18051c7fbd224e32d9a5fea96f1083210cea3a14/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=18051c7fbd224e32d9a5fea96f1083210cea3a14",
        "patch": "@@ -17,43 +17,52 @@ using namespace std;\n \n typedef vector<unsigned char> valtype;\n \n-bool Sign1(const CKeyID& address, const CKeyStore& keystore, uint256 hash, int nHashType, CScript& scriptSigRet)\n+TransactionSignatureCreator::TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, int nHashTypeIn) : BaseSignatureCreator(keystoreIn), txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), checker(txTo, nIn) {}\n+\n+bool TransactionSignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode) const\n {\n     CKey key;\n-    if (!keystore.GetKey(address, key))\n+    if (!keystore->GetKey(address, key))\n         return false;\n \n-    vector<unsigned char> vchSig;\n+    uint256 hash = SignatureHash(scriptCode, *txTo, nIn, nHashType);\n     if (!key.Sign(hash, vchSig))\n         return false;\n     vchSig.push_back((unsigned char)nHashType);\n-    scriptSigRet << vchSig;\n+    return true;\n+}\n \n+static bool Sign1(const CKeyID& address, const BaseSignatureCreator& creator, const CScript& scriptCode, CScript& scriptSigRet)\n+{\n+    vector<unsigned char> vchSig;\n+    if (!creator.CreateSig(vchSig, address, scriptCode))\n+        return false;\n+    scriptSigRet << vchSig;\n     return true;\n }\n \n-bool SignN(const vector<valtype>& multisigdata, const CKeyStore& keystore, uint256 hash, int nHashType, CScript& scriptSigRet)\n+static bool SignN(const vector<valtype>& multisigdata, const BaseSignatureCreator& creator, const CScript& scriptCode, CScript& scriptSigRet)\n {\n     int nSigned = 0;\n     int nRequired = multisigdata.front()[0];\n     for (unsigned int i = 1; i < multisigdata.size()-1 && nSigned < nRequired; i++)\n     {\n         const valtype& pubkey = multisigdata[i];\n         CKeyID keyID = CPubKey(pubkey).GetID();\n-        if (Sign1(keyID, keystore, hash, nHashType, scriptSigRet))\n+        if (Sign1(keyID, creator, scriptCode, scriptSigRet))\n             ++nSigned;\n     }\n     return nSigned==nRequired;\n }\n \n /**\n- * Sign scriptPubKey with private keys stored in keystore, given transaction hash and hash type.\n+ * Sign scriptPubKey using signature made with creator.\n  * Signatures are returned in scriptSigRet (or returns false if scriptPubKey can't be signed),\n  * unless whichTypeRet is TX_SCRIPTHASH, in which case scriptSigRet is the redemption script.\n  * Returns false if scriptPubKey could not be completely satisfied.\n  */\n-bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash, int nHashType,\n-                  CScript& scriptSigRet, txnouttype& whichTypeRet)\n+static bool SignStep(const BaseSignatureCreator& creator, const CScript& scriptPubKey,\n+                     CScript& scriptSigRet, txnouttype& whichTypeRet)\n {\n     scriptSigRet.clear();\n \n@@ -69,61 +78,62 @@ bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash\n         return false;\n     case TX_PUBKEY:\n         keyID = CPubKey(vSolutions[0]).GetID();\n-        return Sign1(keyID, keystore, hash, nHashType, scriptSigRet);\n+        return Sign1(keyID, creator, scriptPubKey, scriptSigRet);\n     case TX_PUBKEYHASH:\n         keyID = CKeyID(uint160(vSolutions[0]));\n-        if (!Sign1(keyID, keystore, hash, nHashType, scriptSigRet))\n+        if (!Sign1(keyID, creator, scriptPubKey, scriptSigRet))\n             return false;\n         else\n         {\n             CPubKey vch;\n-            keystore.GetPubKey(keyID, vch);\n+            creator.KeyStore().GetPubKey(keyID, vch);\n             scriptSigRet << ToByteVector(vch);\n         }\n         return true;\n     case TX_SCRIPTHASH:\n-        return keystore.GetCScript(uint160(vSolutions[0]), scriptSigRet);\n+        return creator.KeyStore().GetCScript(uint160(vSolutions[0]), scriptSigRet);\n \n     case TX_MULTISIG:\n         scriptSigRet << OP_0; // workaround CHECKMULTISIG bug\n-        return (SignN(vSolutions, keystore, hash, nHashType, scriptSigRet));\n+        return (SignN(vSolutions, creator, scriptPubKey, scriptSigRet));\n     }\n     return false;\n }\n \n-bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n+bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPubKey, CScript& scriptSig)\n {\n-    assert(nIn < txTo.vin.size());\n-    CTxIn& txin = txTo.vin[nIn];\n-\n-    // Leave out the signature from the hash, since a signature can't sign itself.\n-    // The checksig op will also drop the signatures from its hash.\n-    uint256 hash = SignatureHash(fromPubKey, txTo, nIn, nHashType);\n-\n     txnouttype whichType;\n-    if (!Solver(keystore, fromPubKey, hash, nHashType, txin.scriptSig, whichType))\n+    if (!SignStep(creator, fromPubKey, scriptSig, whichType))\n         return false;\n \n     if (whichType == TX_SCRIPTHASH)\n     {\n         // Solver returns the subscript that need to be evaluated;\n         // the final scriptSig is the signatures from that\n         // and then the serialized subscript:\n-        CScript subscript = txin.scriptSig;\n-\n-        // Recompute txn hash using subscript in place of scriptPubKey:\n-        uint256 hash2 = SignatureHash(subscript, txTo, nIn, nHashType);\n+        CScript subscript = scriptSig;\n \n         txnouttype subType;\n         bool fSolved =\n-            Solver(keystore, subscript, hash2, nHashType, txin.scriptSig, subType) && subType != TX_SCRIPTHASH;\n+            SignStep(creator, subscript, scriptSig, subType) && subType != TX_SCRIPTHASH;\n         // Append serialized subscript whether or not it is completely signed:\n-        txin.scriptSig << static_cast<valtype>(subscript);\n+        scriptSig << static_cast<valtype>(subscript);\n         if (!fSolved) return false;\n     }\n \n     // Test solution\n-    return VerifyScript(txin.scriptSig, fromPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&txTo, nIn));\n+    return VerifyScript(scriptSig, fromPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, creator.Checker());\n+}\n+\n+bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n+{\n+    assert(nIn < txTo.vin.size());\n+    CTxIn& txin = txTo.vin[nIn];\n+\n+    CTransaction txToConst(txTo);\n+    TransactionSignatureCreator creator(&keystore, &txToConst, nIn, nHashType);\n+\n+    return ProduceSignature(creator, fromPubKey, txin.scriptSig);\n }\n \n bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n@@ -144,7 +154,7 @@ static CScript PushAll(const vector<valtype>& values)\n     return result;\n }\n \n-static CScript CombineMultisig(const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n+static CScript CombineMultisig(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n                                const vector<valtype>& vSolutions,\n                                const vector<valtype>& sigs1, const vector<valtype>& sigs2)\n {\n@@ -174,7 +184,7 @@ static CScript CombineMultisig(const CScript& scriptPubKey, const CTransaction&\n             if (sigs.count(pubkey))\n                 continue; // Already got a sig for this pubkey\n \n-            if (TransactionSignatureChecker(&txTo, nIn).CheckSig(sig, pubkey, scriptPubKey))\n+            if (checker.CheckSig(sig, pubkey, scriptPubKey))\n             {\n                 sigs[pubkey] = sig;\n                 break;\n@@ -199,7 +209,7 @@ static CScript CombineMultisig(const CScript& scriptPubKey, const CTransaction&\n     return result;\n }\n \n-static CScript CombineSignatures(const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n+static CScript CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n                                  const txnouttype txType, const vector<valtype>& vSolutions,\n                                  vector<valtype>& sigs1, vector<valtype>& sigs2)\n {\n@@ -233,19 +243,26 @@ static CScript CombineSignatures(const CScript& scriptPubKey, const CTransaction\n             Solver(pubKey2, txType2, vSolutions2);\n             sigs1.pop_back();\n             sigs2.pop_back();\n-            CScript result = CombineSignatures(pubKey2, txTo, nIn, txType2, vSolutions2, sigs1, sigs2);\n+            CScript result = CombineSignatures(pubKey2, checker, txType2, vSolutions2, sigs1, sigs2);\n             result << spk;\n             return result;\n         }\n     case TX_MULTISIG:\n-        return CombineMultisig(scriptPubKey, txTo, nIn, vSolutions, sigs1, sigs2);\n+        return CombineMultisig(scriptPubKey, checker, vSolutions, sigs1, sigs2);\n     }\n \n     return CScript();\n }\n \n CScript CombineSignatures(const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n                           const CScript& scriptSig1, const CScript& scriptSig2)\n+{\n+    TransactionSignatureChecker checker(&txTo, nIn);\n+    return CombineSignatures(scriptPubKey, checker, scriptSig1, scriptSig2);\n+}\n+\n+CScript CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n+                          const CScript& scriptSig1, const CScript& scriptSig2)\n {\n     txnouttype txType;\n     vector<vector<unsigned char> > vSolutions;\n@@ -256,5 +273,5 @@ CScript CombineSignatures(const CScript& scriptPubKey, const CTransaction& txTo,\n     vector<valtype> stack2;\n     EvalScript(stack2, scriptSig2, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker());\n \n-    return CombineSignatures(scriptPubKey, txTo, nIn, txType, vSolutions, stack1, stack2);\n+    return CombineSignatures(scriptPubKey, checker, txType, vSolutions, stack1, stack2);\n }"
      },
      {
        "sha": "0c4cf61e5e74f2a1fcbe6ac985412a857351244d",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 37,
        "deletions": 4,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18051c7fbd224e32d9a5fea96f1083210cea3a14/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18051c7fbd224e32d9a5fea96f1083210cea3a14/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=18051c7fbd224e32d9a5fea96f1083210cea3a14",
        "patch": "@@ -8,19 +8,52 @@\n \n #include \"script/interpreter.h\"\n \n+class CKeyID;\n class CKeyStore;\n class CScript;\n class CTransaction;\n \n struct CMutableTransaction;\n \n+/** Virtual base class for signature creators. */\n+class BaseSignatureCreator {\n+protected:\n+    const CKeyStore* keystore;\n+\n+public:\n+    BaseSignatureCreator(const CKeyStore* keystoreIn) : keystore(keystoreIn) {}\n+    const CKeyStore& KeyStore() const { return *keystore; };\n+    virtual ~BaseSignatureCreator() {}\n+    virtual const BaseSignatureChecker& Checker() const =0;\n+\n+    /** Create a singular (non-script) signature. */\n+    virtual bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode) const =0;\n+};\n+\n+/** A signature creator for transactions. */\n+class TransactionSignatureCreator : public BaseSignatureCreator {\n+    const CTransaction* txTo;\n+    unsigned int nIn;\n+    int nHashType;\n+    const TransactionSignatureChecker checker;\n+\n+public:\n+    TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, int nHashTypeIn=SIGHASH_ALL);\n+    const BaseSignatureChecker& Checker() const { return checker; }\n+    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode) const;\n+};\n+\n+/** Produce a script signature using a generic signature creator. */\n+bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& scriptPubKey, CScript& scriptSig);\n+\n+/** Produce a script signature for a transaction. */\n bool SignSignature(const CKeyStore& keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n bool SignSignature(const CKeyStore& keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n \n-/**\n- * Given two sets of signatures for scriptPubKey, possibly with OP_0 placeholders,\n- * combine them intelligently and return the result.\n- */\n+/** Combine two script signatures using a generic signature checker, intelligently, possibly with OP_0 placeholders. */\n+CScript CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker, const CScript& scriptSig1, const CScript& scriptSig2);\n+\n+/** Combine two script signatures on transactions. */\n CScript CombineSignatures(const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, const CScript& scriptSig1, const CScript& scriptSig2);\n \n #endif // BITCOIN_SCRIPT_SIGN_H"
      }
    ]
  },
  {
    "sha": "341e2385d543ba96ae4d4eac649e9312537e1405",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDFlMjM4NWQ1NDNiYTk2YWU0ZDRlYWM2NDllOTMxMjUzN2UxNDA1",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-03-21T17:40:51Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-03-21T17:40:51Z"
      },
      "message": "use constant references for strings in functions in wallet/*.*",
      "tree": {
        "sha": "0f4c3a1071c1c89e2c7ae63ab67f1e3fbd09f6db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f4c3a1071c1c89e2c7ae63ab67f1e3fbd09f6db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/341e2385d543ba96ae4d4eac649e9312537e1405",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/341e2385d543ba96ae4d4eac649e9312537e1405",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/341e2385d543ba96ae4d4eac649e9312537e1405",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/341e2385d543ba96ae4d4eac649e9312537e1405/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "f3948a30cd27928fdf9dffbbf90ea6430c869edf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3948a30cd27928fdf9dffbbf90ea6430c869edf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3948a30cd27928fdf9dffbbf90ea6430c869edf"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "53cfcf0961ac9d77135fe15453730f8642588f52",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/341e2385d543ba96ae4d4eac649e9312537e1405/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/341e2385d543ba96ae4d4eac649e9312537e1405/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=341e2385d543ba96ae4d4eac649e9312537e1405",
        "patch": "@@ -148,7 +148,7 @@ void CDBEnv::MakeMock()\n     fMockDb = true;\n }\n \n-CDBEnv::VerifyResult CDBEnv::Verify(std::string strFile, bool (*recoverFunc)(CDBEnv& dbenv, std::string strFile))\n+CDBEnv::VerifyResult CDBEnv::Verify(const std::string& strFile, bool (*recoverFunc)(CDBEnv& dbenv, const std::string& strFile))\n {\n     LOCK(cs_db);\n     assert(mapFileUseCount.count(strFile) == 0);\n@@ -165,7 +165,7 @@ CDBEnv::VerifyResult CDBEnv::Verify(std::string strFile, bool (*recoverFunc)(CDB\n     return (fRecovered ? RECOVER_OK : RECOVER_FAIL);\n }\n \n-bool CDBEnv::Salvage(std::string strFile, bool fAggressive, std::vector<CDBEnv::KeyValPair>& vResult)\n+bool CDBEnv::Salvage(const std::string& strFile, bool fAggressive, std::vector<CDBEnv::KeyValPair>& vResult)\n {\n     LOCK(cs_db);\n     assert(mapFileUseCount.count(strFile) == 0);"
      },
      {
        "sha": "0c2c139d89e7db892f05af37bd32eaf396a8290d",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/341e2385d543ba96ae4d4eac649e9312537e1405/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/341e2385d543ba96ae4d4eac649e9312537e1405/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=341e2385d543ba96ae4d4eac649e9312537e1405",
        "patch": "@@ -59,7 +59,7 @@ class CDBEnv\n     enum VerifyResult { VERIFY_OK,\n                         RECOVER_OK,\n                         RECOVER_FAIL };\n-    VerifyResult Verify(std::string strFile, bool (*recoverFunc)(CDBEnv& dbenv, std::string strFile));\n+    VerifyResult Verify(const std::string& strFile, bool (*recoverFunc)(CDBEnv& dbenv, const std::string& strFile));\n     /**\n      * Salvage data from a file that Verify says is bad.\n      * fAggressive sets the DB_AGGRESSIVE flag (see berkeley DB->verify() method documentation).\n@@ -68,7 +68,7 @@ class CDBEnv\n      * for huge databases.\n      */\n     typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;\n-    bool Salvage(std::string strFile, bool fAggressive, std::vector<KeyValPair>& vResult);\n+    bool Salvage(const std::string& strFile, bool fAggressive, std::vector<KeyValPair>& vResult);\n \n     bool Open(const boost::filesystem::path& path);\n     void Close();"
      },
      {
        "sha": "167639b53d7fdf33f7e0d831ea4af849f37c3174",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/341e2385d543ba96ae4d4eac649e9312537e1405/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/341e2385d543ba96ae4d4eac649e9312537e1405/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=341e2385d543ba96ae4d4eac649e9312537e1405",
        "patch": "@@ -345,7 +345,7 @@ void CWallet::Flush(bool shutdown)\n     bitdb.Flush(shutdown);\n }\n \n-bool CWallet::Verify(const string walletFile, string& warningString, string& errorString)\n+bool CWallet::Verify(const string& walletFile, string& warningString, string& errorString)\n {\n     if (!bitdb.Open(GetDataDir()))\n     {"
      },
      {
        "sha": "f00fb0caffc333b60847f03de0968901859d24a1",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/341e2385d543ba96ae4d4eac649e9312537e1405/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/341e2385d543ba96ae4d4eac649e9312537e1405/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=341e2385d543ba96ae4d4eac649e9312537e1405",
        "patch": "@@ -747,7 +747,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void Flush(bool shutdown=false);\n \n     //! Verify the wallet database and perform salvage if required\n-    static bool Verify(const std::string walletFile, std::string& warningString, std::string& errorString);\n+    static bool Verify(const std::string& walletFile, std::string& warningString, std::string& errorString);\n     \n     /** \n      * Address book entry changed."
      },
      {
        "sha": "d7f70e435ea80bf96c91bf90d273681c2e4186c4",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/341e2385d543ba96ae4d4eac649e9312537e1405/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/341e2385d543ba96ae4d4eac649e9312537e1405/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=341e2385d543ba96ae4d4eac649e9312537e1405",
        "patch": "@@ -891,7 +891,7 @@ bool BackupWallet(const CWallet& wallet, const string& strDest)\n //\n // Try to (very carefully!) recover wallet.dat if there is a problem.\n //\n-bool CWalletDB::Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys)\n+bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename, bool fOnlyKeys)\n {\n     // Recovery procedure:\n     // move wallet.dat to wallet.timestamp.bak\n@@ -968,7 +968,7 @@ bool CWalletDB::Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys)\n     return fSuccess;\n }\n \n-bool CWalletDB::Recover(CDBEnv& dbenv, std::string filename)\n+bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename)\n {\n     return CWalletDB::Recover(dbenv, filename, false);\n }"
      },
      {
        "sha": "a1c38b9d3d3987893af2bb2cb908e933e7e92c0d",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/341e2385d543ba96ae4d4eac649e9312537e1405/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/341e2385d543ba96ae4d4eac649e9312537e1405/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=341e2385d543ba96ae4d4eac649e9312537e1405",
        "patch": "@@ -127,8 +127,8 @@ class CWalletDB : public CDB\n     DBErrors LoadWallet(CWallet* pwallet);\n     DBErrors FindWalletTx(CWallet* pwallet, std::vector<uint256>& vTxHash, std::vector<CWalletTx>& vWtx);\n     DBErrors ZapWalletTx(CWallet* pwallet, std::vector<CWalletTx>& vWtx);\n-    static bool Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys);\n-    static bool Recover(CDBEnv& dbenv, std::string filename);\n+    static bool Recover(CDBEnv& dbenv, const std::string& filename, bool fOnlyKeys);\n+    static bool Recover(CDBEnv& dbenv, const std::string& filename);\n \n private:\n     CWalletDB(const CWalletDB&);"
      }
    ]
  },
  {
    "sha": "5983a4e50f2c3f53024d9a5cecab69f67c882cca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTgzYTRlNTBmMmMzZjUzMDI0ZDlhNWNlY2FiNjlmNjdjODgyY2Nh",
    "commit": {
      "author": {
        "name": "Mike Hearn",
        "email": "mike@plan99.net",
        "date": "2015-03-10T18:33:46Z"
      },
      "committer": {
        "name": "Mike Hearn",
        "email": "mike@plan99.net",
        "date": "2015-03-21T18:35:02Z"
      },
      "message": "Add a NODE_GETUTXO service bit and document NODE_NETWORK.\nStop translating the NODE_* names as they are technical and cannot be translated.",
      "tree": {
        "sha": "2441a8fe1c2c7263471d9509878a75471495b5fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2441a8fe1c2c7263471d9509878a75471495b5fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5983a4e50f2c3f53024d9a5cecab69f67c882cca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5983a4e50f2c3f53024d9a5cecab69f67c882cca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5983a4e50f2c3f53024d9a5cecab69f67c882cca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5983a4e50f2c3f53024d9a5cecab69f67c882cca/comments",
    "author": {
      "login": "mikehearn",
      "id": 971089,
      "node_id": "MDQ6VXNlcjk3MTA4OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/971089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikehearn",
      "html_url": "https://github.com/mikehearn",
      "followers_url": "https://api.github.com/users/mikehearn/followers",
      "following_url": "https://api.github.com/users/mikehearn/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikehearn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikehearn/subscriptions",
      "organizations_url": "https://api.github.com/users/mikehearn/orgs",
      "repos_url": "https://api.github.com/users/mikehearn/repos",
      "events_url": "https://api.github.com/users/mikehearn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikehearn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mikehearn",
      "id": 971089,
      "node_id": "MDQ6VXNlcjk3MTA4OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/971089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikehearn",
      "html_url": "https://github.com/mikehearn",
      "followers_url": "https://api.github.com/users/mikehearn/followers",
      "following_url": "https://api.github.com/users/mikehearn/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikehearn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikehearn/subscriptions",
      "organizations_url": "https://api.github.com/users/mikehearn/orgs",
      "repos_url": "https://api.github.com/users/mikehearn/repos",
      "events_url": "https://api.github.com/users/mikehearn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikehearn/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8cbe1f4f5870a165be729cabb9b55dcbf0f85e09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cbe1f4f5870a165be729cabb9b55dcbf0f85e09",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8cbe1f4f5870a165be729cabb9b55dcbf0f85e09"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 12,
      "deletions": 2
    },
    "files": [
      {
        "sha": "fd23eae1fc6e3635b5b58f5ff958d2825461f1e6",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5983a4e50f2c3f53024d9a5cecab69f67c882cca/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5983a4e50f2c3f53024d9a5cecab69f67c882cca/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=5983a4e50f2c3f53024d9a5cecab69f67c882cca",
        "patch": "@@ -67,7 +67,14 @@ class CMessageHeader\n \n /** nServices flags */\n enum {\n+    // NODE_NETWORK means that the node is capable of serving the block chain. It is currently\n+    // set by all Bitcoin Core nodes, and is unset by SPV clients or other peers that just want\n+    // network services but don't provide them.\n     NODE_NETWORK = (1 << 0),\n+    // NODE_GETUTXO means the node is capable of responding to the getutxo protocol request.\n+    // Bitcoin Core does not support this but a patch set called Bitcoin XT does.\n+    // See BIP 64 for details on how this is implemented.\n+    NODE_GETUTXO = (1 << 1),\n \n     // Bits 24-31 are reserved for temporary experiments. Just pick a bit that\n     // isn't getting used, or one not being used much, and notify the"
      },
      {
        "sha": "a5ee81db6c068d80e423687716b3c99f82b151e0",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5983a4e50f2c3f53024d9a5cecab69f67c882cca/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5983a4e50f2c3f53024d9a5cecab69f67c882cca/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=5983a4e50f2c3f53024d9a5cecab69f67c882cca",
        "patch": "@@ -878,10 +878,13 @@ QString formatServicesStr(quint64 mask)\n             switch (check)\n             {\n             case NODE_NETWORK:\n-                strList.append(QObject::tr(\"NETWORK\"));\n+                strList.append(\"NETWORK\");\n+                break;\n+            case NODE_GETUTXO:\n+                strList.append(\"GETUTXO\");\n                 break;\n             default:\n-                strList.append(QString(\"%1[%2]\").arg(QObject::tr(\"UNKNOWN\")).arg(check));\n+                strList.append(QString(\"%1[%2]\").arg(\"UNKNOWN\").arg(check));\n             }\n         }\n     }"
      }
    ]
  },
  {
    "sha": "a354a59f1f3d08be148a99fa53d8cf76e6b7a784",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzU0YTU5ZjFmM2QwOGJlMTQ4YTk5ZmE1M2Q4Y2Y3NmU2YjdhNzg0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-03-22T19:18:55Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-03-22T19:18:55Z"
      },
      "message": "wallet: move crypter to wallet",
      "tree": {
        "sha": "8b037df8567a130f7ebe92d7bf2ac6a60f727e68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b037df8567a130f7ebe92d7bf2ac6a60f727e68"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a354a59f1f3d08be148a99fa53d8cf76e6b7a784",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a354a59f1f3d08be148a99fa53d8cf76e6b7a784",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a354a59f1f3d08be148a99fa53d8cf76e6b7a784",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a354a59f1f3d08be148a99fa53d8cf76e6b7a784/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3948a30cd27928fdf9dffbbf90ea6430c869edf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3948a30cd27928fdf9dffbbf90ea6430c869edf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3948a30cd27928fdf9dffbbf90ea6430c869edf"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 3,
      "deletions": 4
    },
    "files": [
      {
        "sha": "2c607c632e7a78ae669e80d2cec89686a5d1e8fd",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a354a59f1f3d08be148a99fa53d8cf76e6b7a784/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a354a59f1f3d08be148a99fa53d8cf76e6b7a784/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=a354a59f1f3d08be148a99fa53d8cf76e6b7a784",
        "patch": "@@ -88,7 +88,6 @@ BITCOIN_CORE_H = \\\n   compat.h \\\n   compressor.h \\\n   core_io.h \\\n-  crypter.h \\\n   wallet/db.h \\\n   eccryptoverify.h \\\n   ecwrapper.h \\\n@@ -140,6 +139,7 @@ BITCOIN_CORE_H = \\\n   utilstrencodings.h \\\n   utiltime.h \\\n   version.h \\\n+  wallet/crypter.h \\\n   wallet/walletdb.h \\\n   wallet/wallet.h \\\n   wallet/wallet_ismine.h \\\n@@ -198,8 +198,8 @@ libbitcoin_server_a_SOURCES = \\\n # when wallet enabled\n libbitcoin_wallet_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n libbitcoin_wallet_a_SOURCES = \\\n+  wallet/crypter.cpp \\\n   wallet/db.cpp \\\n-  crypter.cpp \\\n   wallet/rpcdump.cpp \\\n   wallet/rpcwallet.cpp \\\n   wallet/wallet.cpp \\"
      },
      {
        "sha": "3bae24b7b946c5a029ba4581ee6f98418e45d866",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a354a59f1f3d08be148a99fa53d8cf76e6b7a784/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a354a59f1f3d08be148a99fa53d8cf76e6b7a784/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=a354a59f1f3d08be148a99fa53d8cf76e6b7a784",
        "patch": "@@ -5,7 +5,6 @@\n \n #include \"keystore.h\"\n \n-#include \"crypter.h\"\n #include \"key.h\"\n #include \"util.h\"\n "
      },
      {
        "sha": "c7f7e2167904ea1ee89704fe58e754cf10ed871c",
        "filename": "src/wallet/crypter.cpp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a354a59f1f3d08be148a99fa53d8cf76e6b7a784/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a354a59f1f3d08be148a99fa53d8cf76e6b7a784/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=a354a59f1f3d08be148a99fa53d8cf76e6b7a784",
        "previous_filename": "src/crypter.cpp"
      },
      {
        "sha": "32746b00dfb0a2fd22f2e38f4bb0ba19ed608174",
        "filename": "src/wallet/crypter.h",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a354a59f1f3d08be148a99fa53d8cf76e6b7a784/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a354a59f1f3d08be148a99fa53d8cf76e6b7a784/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=a354a59f1f3d08be148a99fa53d8cf76e6b7a784",
        "previous_filename": "src/crypter.h"
      },
      {
        "sha": "fbcb56685e54b3ce39a87c2aabfdb448667f2543",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a354a59f1f3d08be148a99fa53d8cf76e6b7a784/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a354a59f1f3d08be148a99fa53d8cf76e6b7a784/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=a354a59f1f3d08be148a99fa53d8cf76e6b7a784",
        "patch": "@@ -9,11 +9,11 @@\n #include \"amount.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n-#include \"crypter.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"ui_interface.h\"\n+#include \"wallet/crypter.h\"\n #include \"wallet/wallet_ismine.h\"\n #include \"wallet/walletdb.h\"\n "
      }
    ]
  },
  {
    "sha": "28cc24f961628dce6cd21970f0c1929dde80b18a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOGNjMjRmOTYxNjI4ZGNlNmNkMjE5NzBmMGMxOTI5ZGRlODBiMThh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-24T07:33:41Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-24T07:33:50Z"
      },
      "message": "Merge pull request #5877\n\n317e66c Initialization: set Boost path locale in main thread (dexX7)",
      "tree": {
        "sha": "41463cd4dfba0426c4fe561b8f0baa7a968bc3c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41463cd4dfba0426c4fe561b8f0baa7a968bc3c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28cc24f961628dce6cd21970f0c1929dde80b18a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVERNeAAoJEHSBCwEjRsmmFhcH/iN3PSyx39yfyAviukZIupaw\n66FRRMTAfbxKvjRTcEHExwWl7MNT1fCCpnjkeKax1lYf+chEg7DFdztgMMsUGoWT\nKmmNYNSE/DmFiUIwwlIAH1T5NCV6PmplpoOToykAkFGCWnGW1Az1fUZoFOzEcPUe\nAzoD1vccDvkqPgq/C3Tx3UtiTYfUeLWEVp3Ubt/YMBPH5/7/D5PBKxzmd5k1REFl\nzdUWrbbnBoBfxEPihB0tkYQQ7/SkWrRVGqg8xd0io+DIDU1/kpDjrcdyLwUWF6Ef\nP6kPPyW2HKX5oEohTPELyQRrvn3Ezvks1nygLL+0jxawylf2S0d+Yffx+5gd/JQ=\n=fjSl\n-----END PGP SIGNATURE-----",
        "payload": "tree 41463cd4dfba0426c4fe561b8f0baa7a968bc3c9\nparent f3948a30cd27928fdf9dffbbf90ea6430c869edf\nparent 317e66c741aef0fd272e50aa2e82ff192ca5f7e5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1427182421 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1427182430 +0100\n\nMerge pull request #5877\n\n317e66c Initialization: set Boost path locale in main thread (dexX7)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28cc24f961628dce6cd21970f0c1929dde80b18a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28cc24f961628dce6cd21970f0c1929dde80b18a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28cc24f961628dce6cd21970f0c1929dde80b18a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3948a30cd27928fdf9dffbbf90ea6430c869edf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3948a30cd27928fdf9dffbbf90ea6430c869edf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3948a30cd27928fdf9dffbbf90ea6430c869edf"
      },
      {
        "sha": "317e66c741aef0fd272e50aa2e82ff192ca5f7e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/317e66c741aef0fd272e50aa2e82ff192ca5f7e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/317e66c741aef0fd272e50aa2e82ff192ca5f7e5"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "4192e44ae1b240f5c154c9450cea00df952e152f",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28cc24f961628dce6cd21970f0c1929dde80b18a/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28cc24f961628dce6cd21970f0c1929dde80b18a/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=28cc24f961628dce6cd21970f0c1929dde80b18a",
        "patch": "@@ -723,18 +723,18 @@ void RenameThread(const char* name)\n \n void SetupEnvironment()\n {\n-#ifndef WIN32\n-    try\n-    {\n-#if BOOST_FILESYSTEM_VERSION == 3\n-            boost::filesystem::path::codecvt(); // Raises runtime error if current locale is invalid\n-#else // boost filesystem v2\n-            std::locale();                      // Raises runtime error if current locale is invalid\n-#endif\n+    // On most POSIX systems (e.g. Linux, but not BSD) the environment's locale\n+    // may be invalid, in which case the \"C\" locale is used as fallback.\n+#if !defined(WIN32) && !defined(MAC_OSX) && !defined(__FreeBSD__) && !defined(__OpenBSD__)\n+    try {\n+        std::locale(\"\"); // Raises a runtime error if current locale is invalid\n     } catch (const std::runtime_error&) {\n-        setenv(\"LC_ALL\", \"C\", 1); // Force C locale\n+        std::locale::global(std::locale(\"C\"));\n     }\n #endif\n+    // The path locale is lazy initialized and to avoid deinitialization errors \n+    // in multithreading environments, it is set explicitly by the main thread.\n+    boost::filesystem::path::imbue(std::locale());    \n }\n \n void SetThreadPriority(int nPriority)"
      }
    ]
  },
  {
    "sha": "46ba7a74a534dbe3b79007436626bc0e78915afa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmJhN2E3NGE1MzRkYmUzYjc5MDA3NDM2NjI2YmMwZTc4OTE1YWZh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-24T07:43:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-24T07:50:55Z"
      },
      "message": "Merge pull request #5938\n\na354a59 wallet: move crypter to wallet (Cory Fields)",
      "tree": {
        "sha": "2b23e5810cbeb5b4f366974e9f18237ad1515920",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b23e5810cbeb5b4f366974e9f18237ad1515920"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46ba7a74a534dbe3b79007436626bc0e78915afa",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVERdfAAoJEHSBCwEjRsmmqTEH/iXa09TAzw+se0MrsxzFWKo1\nH6AbVpecAFymD6BX/EIweZVSAqSI+v6f8gyvTIY0k418k9kYqD4YCFHCxf5lCRVq\nq2lskXr6Xe2cxqgbATVCqxQS1Kdlgl6boRpNsqZsd45x/YMfkXeHfgntosm/sQze\nQsaT0V5LTpCwaTXDzbmNEm1XLBdoODosES0nrdHhUv5Fr82chVYmppeZxLjMyNO/\nxrXiPrCibcjpNlDNcprNlWbTAhzX6CPpC/2mDYk4/KydJYnEB4fY8liLwNpLbmcC\nKank2N2WljyxbeWzkwzFTDXx1frI2M9VI/eu86dFJE6FhOsxlLsjUc7s5655oWY=\n=+UVg\n-----END PGP SIGNATURE-----",
        "payload": "tree 2b23e5810cbeb5b4f366974e9f18237ad1515920\nparent 28cc24f961628dce6cd21970f0c1929dde80b18a\nparent a354a59f1f3d08be148a99fa53d8cf76e6b7a784\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1427183000 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1427183455 +0100\n\nMerge pull request #5938\n\na354a59 wallet: move crypter to wallet (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46ba7a74a534dbe3b79007436626bc0e78915afa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46ba7a74a534dbe3b79007436626bc0e78915afa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46ba7a74a534dbe3b79007436626bc0e78915afa/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "28cc24f961628dce6cd21970f0c1929dde80b18a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28cc24f961628dce6cd21970f0c1929dde80b18a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28cc24f961628dce6cd21970f0c1929dde80b18a"
      },
      {
        "sha": "a354a59f1f3d08be148a99fa53d8cf76e6b7a784",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a354a59f1f3d08be148a99fa53d8cf76e6b7a784",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a354a59f1f3d08be148a99fa53d8cf76e6b7a784"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 3,
      "deletions": 4
    },
    "files": [
      {
        "sha": "2c607c632e7a78ae669e80d2cec89686a5d1e8fd",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46ba7a74a534dbe3b79007436626bc0e78915afa/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46ba7a74a534dbe3b79007436626bc0e78915afa/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=46ba7a74a534dbe3b79007436626bc0e78915afa",
        "patch": "@@ -88,7 +88,6 @@ BITCOIN_CORE_H = \\\n   compat.h \\\n   compressor.h \\\n   core_io.h \\\n-  crypter.h \\\n   wallet/db.h \\\n   eccryptoverify.h \\\n   ecwrapper.h \\\n@@ -140,6 +139,7 @@ BITCOIN_CORE_H = \\\n   utilstrencodings.h \\\n   utiltime.h \\\n   version.h \\\n+  wallet/crypter.h \\\n   wallet/walletdb.h \\\n   wallet/wallet.h \\\n   wallet/wallet_ismine.h \\\n@@ -198,8 +198,8 @@ libbitcoin_server_a_SOURCES = \\\n # when wallet enabled\n libbitcoin_wallet_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n libbitcoin_wallet_a_SOURCES = \\\n+  wallet/crypter.cpp \\\n   wallet/db.cpp \\\n-  crypter.cpp \\\n   wallet/rpcdump.cpp \\\n   wallet/rpcwallet.cpp \\\n   wallet/wallet.cpp \\"
      },
      {
        "sha": "3bae24b7b946c5a029ba4581ee6f98418e45d866",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46ba7a74a534dbe3b79007436626bc0e78915afa/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46ba7a74a534dbe3b79007436626bc0e78915afa/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=46ba7a74a534dbe3b79007436626bc0e78915afa",
        "patch": "@@ -5,7 +5,6 @@\n \n #include \"keystore.h\"\n \n-#include \"crypter.h\"\n #include \"key.h\"\n #include \"util.h\"\n "
      },
      {
        "sha": "c7f7e2167904ea1ee89704fe58e754cf10ed871c",
        "filename": "src/wallet/crypter.cpp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46ba7a74a534dbe3b79007436626bc0e78915afa/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46ba7a74a534dbe3b79007436626bc0e78915afa/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=46ba7a74a534dbe3b79007436626bc0e78915afa",
        "previous_filename": "src/crypter.cpp"
      },
      {
        "sha": "32746b00dfb0a2fd22f2e38f4bb0ba19ed608174",
        "filename": "src/wallet/crypter.h",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46ba7a74a534dbe3b79007436626bc0e78915afa/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46ba7a74a534dbe3b79007436626bc0e78915afa/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=46ba7a74a534dbe3b79007436626bc0e78915afa",
        "previous_filename": "src/crypter.h"
      },
      {
        "sha": "fbcb56685e54b3ce39a87c2aabfdb448667f2543",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46ba7a74a534dbe3b79007436626bc0e78915afa/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46ba7a74a534dbe3b79007436626bc0e78915afa/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=46ba7a74a534dbe3b79007436626bc0e78915afa",
        "patch": "@@ -9,11 +9,11 @@\n #include \"amount.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n-#include \"crypter.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"ui_interface.h\"\n+#include \"wallet/crypter.h\"\n #include \"wallet/wallet_ismine.h\"\n #include \"wallet/walletdb.h\"\n "
      }
    ]
  },
  {
    "sha": "45d6d0bce54dd387a1328c8433340dece2bf59c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWQ2ZDBiY2U1NGRkMzg3YTEzMjhjODQzMzM0MGRlY2UyYmY1OWM4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-24T12:31:55Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-24T12:33:31Z"
      },
      "message": "Merge pull request #5933\n\n341e238 use constant references for strings in functions in wallet/*.* (Philip Kaufmann)",
      "tree": {
        "sha": "08b22ddc4058133b77ca7a733191889d62190d6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08b22ddc4058133b77ca7a733191889d62190d6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45d6d0bce54dd387a1328c8433340dece2bf59c8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJVEVmbAAoJEFeJbS/48LZXhvQMAINXA0dfavVuzCGjDGEyhTEO\nPoXqUxmSApFRyaO1zPKSRg7mR+rx/6kb9PjFOrqY7hhVkIhIE2xxStHFAAjbYQ1Z\nXh1rWo66K5OSr08DX6dzlXj81qhACBkJDZML1dIZheBoSV3cYGlm5cRWuWJgIzeT\nLgTbg+4eV8x4X5Mq9F1YY5plQJFOJVY6RTviw01nkN+Lo7QdEVqumt1RiPDY1QUC\nXNrYEFe9lvK6EDpb0iZk62R+6Y8vtl7dX2pXrxEy941vM1Ja0/ZArS7X+mPGca2c\n2OPIAA0Q5FqdVq/sUxP8j3L5QOSR8ss4MEaxiVi1yS+I4RXKNGHcGyn4id8TVfz2\nM1InVExCY9MGrU3N/aIVhYk4TVeDTW5lhUjd0GPhi7c6iYpLLlqlBvM9uLsGaipa\nri+cfO/Ih0K/3eIuoytpys+ckYka0f1oh35Cll+Erord+yrVWvdS2zmPlylJofEO\nFiQON3V4F0w2bSJMluLPBKrrYpujYfKRXPM/4mDDvg==\n=y1pC\n-----END PGP SIGNATURE-----",
        "payload": "tree 08b22ddc4058133b77ca7a733191889d62190d6d\nparent 46ba7a74a534dbe3b79007436626bc0e78915afa\nparent 341e2385d543ba96ae4d4eac649e9312537e1405\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1427200315 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1427200411 -0700\n\nMerge pull request #5933\n\n341e238 use constant references for strings in functions in wallet/*.* (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45d6d0bce54dd387a1328c8433340dece2bf59c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45d6d0bce54dd387a1328c8433340dece2bf59c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45d6d0bce54dd387a1328c8433340dece2bf59c8/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46ba7a74a534dbe3b79007436626bc0e78915afa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46ba7a74a534dbe3b79007436626bc0e78915afa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46ba7a74a534dbe3b79007436626bc0e78915afa"
      },
      {
        "sha": "341e2385d543ba96ae4d4eac649e9312537e1405",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/341e2385d543ba96ae4d4eac649e9312537e1405",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/341e2385d543ba96ae4d4eac649e9312537e1405"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "53cfcf0961ac9d77135fe15453730f8642588f52",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45d6d0bce54dd387a1328c8433340dece2bf59c8/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45d6d0bce54dd387a1328c8433340dece2bf59c8/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=45d6d0bce54dd387a1328c8433340dece2bf59c8",
        "patch": "@@ -148,7 +148,7 @@ void CDBEnv::MakeMock()\n     fMockDb = true;\n }\n \n-CDBEnv::VerifyResult CDBEnv::Verify(std::string strFile, bool (*recoverFunc)(CDBEnv& dbenv, std::string strFile))\n+CDBEnv::VerifyResult CDBEnv::Verify(const std::string& strFile, bool (*recoverFunc)(CDBEnv& dbenv, const std::string& strFile))\n {\n     LOCK(cs_db);\n     assert(mapFileUseCount.count(strFile) == 0);\n@@ -165,7 +165,7 @@ CDBEnv::VerifyResult CDBEnv::Verify(std::string strFile, bool (*recoverFunc)(CDB\n     return (fRecovered ? RECOVER_OK : RECOVER_FAIL);\n }\n \n-bool CDBEnv::Salvage(std::string strFile, bool fAggressive, std::vector<CDBEnv::KeyValPair>& vResult)\n+bool CDBEnv::Salvage(const std::string& strFile, bool fAggressive, std::vector<CDBEnv::KeyValPair>& vResult)\n {\n     LOCK(cs_db);\n     assert(mapFileUseCount.count(strFile) == 0);"
      },
      {
        "sha": "0c2c139d89e7db892f05af37bd32eaf396a8290d",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45d6d0bce54dd387a1328c8433340dece2bf59c8/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45d6d0bce54dd387a1328c8433340dece2bf59c8/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=45d6d0bce54dd387a1328c8433340dece2bf59c8",
        "patch": "@@ -59,7 +59,7 @@ class CDBEnv\n     enum VerifyResult { VERIFY_OK,\n                         RECOVER_OK,\n                         RECOVER_FAIL };\n-    VerifyResult Verify(std::string strFile, bool (*recoverFunc)(CDBEnv& dbenv, std::string strFile));\n+    VerifyResult Verify(const std::string& strFile, bool (*recoverFunc)(CDBEnv& dbenv, const std::string& strFile));\n     /**\n      * Salvage data from a file that Verify says is bad.\n      * fAggressive sets the DB_AGGRESSIVE flag (see berkeley DB->verify() method documentation).\n@@ -68,7 +68,7 @@ class CDBEnv\n      * for huge databases.\n      */\n     typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;\n-    bool Salvage(std::string strFile, bool fAggressive, std::vector<KeyValPair>& vResult);\n+    bool Salvage(const std::string& strFile, bool fAggressive, std::vector<KeyValPair>& vResult);\n \n     bool Open(const boost::filesystem::path& path);\n     void Close();"
      },
      {
        "sha": "167639b53d7fdf33f7e0d831ea4af849f37c3174",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45d6d0bce54dd387a1328c8433340dece2bf59c8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45d6d0bce54dd387a1328c8433340dece2bf59c8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=45d6d0bce54dd387a1328c8433340dece2bf59c8",
        "patch": "@@ -345,7 +345,7 @@ void CWallet::Flush(bool shutdown)\n     bitdb.Flush(shutdown);\n }\n \n-bool CWallet::Verify(const string walletFile, string& warningString, string& errorString)\n+bool CWallet::Verify(const string& walletFile, string& warningString, string& errorString)\n {\n     if (!bitdb.Open(GetDataDir()))\n     {"
      },
      {
        "sha": "3f5f2859b670ef302893d6be07cf652dfa0d005c",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45d6d0bce54dd387a1328c8433340dece2bf59c8/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45d6d0bce54dd387a1328c8433340dece2bf59c8/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=45d6d0bce54dd387a1328c8433340dece2bf59c8",
        "patch": "@@ -747,7 +747,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void Flush(bool shutdown=false);\n \n     //! Verify the wallet database and perform salvage if required\n-    static bool Verify(const std::string walletFile, std::string& warningString, std::string& errorString);\n+    static bool Verify(const std::string& walletFile, std::string& warningString, std::string& errorString);\n     \n     /** \n      * Address book entry changed."
      },
      {
        "sha": "d7f70e435ea80bf96c91bf90d273681c2e4186c4",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45d6d0bce54dd387a1328c8433340dece2bf59c8/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45d6d0bce54dd387a1328c8433340dece2bf59c8/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=45d6d0bce54dd387a1328c8433340dece2bf59c8",
        "patch": "@@ -891,7 +891,7 @@ bool BackupWallet(const CWallet& wallet, const string& strDest)\n //\n // Try to (very carefully!) recover wallet.dat if there is a problem.\n //\n-bool CWalletDB::Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys)\n+bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename, bool fOnlyKeys)\n {\n     // Recovery procedure:\n     // move wallet.dat to wallet.timestamp.bak\n@@ -968,7 +968,7 @@ bool CWalletDB::Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys)\n     return fSuccess;\n }\n \n-bool CWalletDB::Recover(CDBEnv& dbenv, std::string filename)\n+bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename)\n {\n     return CWalletDB::Recover(dbenv, filename, false);\n }"
      },
      {
        "sha": "a1c38b9d3d3987893af2bb2cb908e933e7e92c0d",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45d6d0bce54dd387a1328c8433340dece2bf59c8/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45d6d0bce54dd387a1328c8433340dece2bf59c8/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=45d6d0bce54dd387a1328c8433340dece2bf59c8",
        "patch": "@@ -127,8 +127,8 @@ class CWalletDB : public CDB\n     DBErrors LoadWallet(CWallet* pwallet);\n     DBErrors FindWalletTx(CWallet* pwallet, std::vector<uint256>& vTxHash, std::vector<CWalletTx>& vWtx);\n     DBErrors ZapWalletTx(CWallet* pwallet, std::vector<CWalletTx>& vWtx);\n-    static bool Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys);\n-    static bool Recover(CDBEnv& dbenv, std::string filename);\n+    static bool Recover(CDBEnv& dbenv, const std::string& filename, bool fOnlyKeys);\n+    static bool Recover(CDBEnv& dbenv, const std::string& filename);\n \n private:\n     CWalletDB(const CWalletDB&);"
      }
    ]
  },
  {
    "sha": "03106221d49920527e7cdb979865c816c06ee305",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzEwNjIyMWQ0OTkyMDUyN2U3Y2RiOTc5ODY1YzgxNmMwNmVlMzA1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-24T12:41:20Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-24T12:41:25Z"
      },
      "message": "Merge pull request #5429\n\n5abe2cf Reorder travis builds for faster response (Pieter Wuille)",
      "tree": {
        "sha": "3aa96a5be0fc79d07e5305d4e6de77305fe44f30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3aa96a5be0fc79d07e5305d4e6de77305fe44f30"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03106221d49920527e7cdb979865c816c06ee305",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJVEVt1AAoJEFeJbS/48LZXHhML/2CNAX6f6tA3/denw5Wt1DZR\nDByYf4okeWGWFoRa78/zhvyHE82uRF0FfErm2D9rJDw89CZQXTnfLelXqNsCoASb\nN2RQ+JA4r+ndqHaOZc9jPIUjV9q8USXhVvqKHYRo9tBzse0FiVSBjD4yLe32Ic/b\nSeGtl4c2718MePERjdsf/n9AoMioTc4u9FiSnL+c8EKgIKbOXOimBnydqVDn4Nbw\nNNx+6u0WdqrBHBnsEnVk2eTNxwZNna02BbTCn4vcLjU+5HkUyv3bfVs9ZQcmyWUO\ndNFEmm1vUYvmyFTJy0OgiVenBTXFAZ9uH7VNkkdmxvvp0rHYmbWHXFwN+EHnSqQQ\noM9egVdL9/4esO9JravOF0LDw5+SJrN7suj0uG2eKF1ZvmFM0EvtMaVzH5tIb9SK\nsp37i6Kl5eYe5syoyTSlhnNzT46fAM577d2Cpp4m0/DasLFRnxIacjHJmrcF/mpP\nQl0e/NQ4DeMS3og5eXMMPLxxiAPeh69GjOW5/VtBNg==\n=9TbR\n-----END PGP SIGNATURE-----",
        "payload": "tree 3aa96a5be0fc79d07e5305d4e6de77305fe44f30\nparent 45d6d0bce54dd387a1328c8433340dece2bf59c8\nparent 5abe2cf1107689598b9f0754801e3b27108a85f2\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1427200880 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1427200885 -0700\n\nMerge pull request #5429\n\n5abe2cf Reorder travis builds for faster response (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03106221d49920527e7cdb979865c816c06ee305",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/03106221d49920527e7cdb979865c816c06ee305",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03106221d49920527e7cdb979865c816c06ee305/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45d6d0bce54dd387a1328c8433340dece2bf59c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45d6d0bce54dd387a1328c8433340dece2bf59c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45d6d0bce54dd387a1328c8433340dece2bf59c8"
      },
      {
        "sha": "5abe2cf1107689598b9f0754801e3b27108a85f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5abe2cf1107689598b9f0754801e3b27108a85f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5abe2cf1107689598b9f0754801e3b27108a85f2"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "44ea7b62d7f373d7aec5acd734192e6292624e37",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03106221d49920527e7cdb979865c816c06ee305/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03106221d49920527e7cdb979865c816c06ee305/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=03106221d49920527e7cdb979865c816c06ee305",
        "patch": "@@ -27,18 +27,18 @@ matrix:\n   include:\n     - compiler: \": ARM\"\n       env: HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n+    - compiler: \": Win32\"\n+      env: HOST=i686-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n+    - compiler: \": 32-bit + dash\"\n+      env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\" USE_SHELL=\"/bin/dash\"\n+    - compiler: \": Win64\"\n+      env: HOST=x86_64-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n     - compiler: \": bitcoind\"\n       env: HOST=x86_64-unknown-linux-gnu PACKAGES=\"bc\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CPPFLAGS=-DDEBUG_LOCKORDER\"\n     - compiler: \": No wallet\"\n       env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n-    - compiler: \": 32-bit + dash\"\n-      env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\" USE_SHELL=\"/bin/dash\"\n     - compiler: \": Cross-Mac\"\n       env: HOST=x86_64-apple-darwin11 PACKAGES=\"cmake libcap-dev libz-dev libbz2-dev\" BITCOIN_CONFIG=\"--enable-reduce-exports\" OSX_SDK=10.9 GOAL=\"deploy\"\n-    - compiler: \": Win64\"\n-      env: HOST=x86_64-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n-    - compiler: \": Win32\"\n-      env: HOST=i686-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n install:\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES; fi"
      }
    ]
  },
  {
    "sha": "2afd919f212e8499d5549e29ac9b8a2d825873d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYWZkOTE5ZjIxMmU4NDk5ZDU1NDllMjlhYzliOGEyZDgyNTg3M2Q5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-24T12:54:36Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-24T12:55:51Z"
      },
      "message": "Merge pull request #5208\n\n18051c7 Abstract out Ctransaction-specific signing into TransactionSignatureCreator (Pieter Wuille)",
      "tree": {
        "sha": "60f4f7129a97c951acf34828cf28d707b4233664",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/60f4f7129a97c951acf34828cf28d707b4233664"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2afd919f212e8499d5549e29ac9b8a2d825873d9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJVEV7XAAoJEFeJbS/48LZXALoL/RmCb9UUEiN8j/F1pUNdxuzG\ngXYTZpAflkLAjnCSucDy5qqAf8dw4bWj5Puxa2mNagdhGWbkwFZ8Y+n92BJqyrnZ\nrGMOlChke34dXU8BDzCw2i6r5aknfd7jc0LuPTIRi2YfvFPwnc0xJ6A70Jv0zbA6\nahNxY1g6OAY+t7u2TxGxC+ktvqdXcg66CqkxBeVQg+ftqLiMwZOzO+2/SxKGj7TZ\nDB9/GWzJ0zSPtgSQ5KEWryuthzj12dBzCy8LRfyn9WqIjIui6U1FyxI8WzbaY9mm\nncgmclwm1A/XfP8OVFB59+hEUdydOcTlBPn2Ff6NcCRIgDaec7Hr2S5swENrLT33\nE7gUSxvzSmx2eWkpCNq0XbmVIq517A1rVnrBJNfns1lHKjfSGwpnvHKpOuS3j8sY\nZJm0mxD/r4bS0CnHlQVUSaBw7TR7gwVUjIW3zYYBDjPfxlyWyco4WtupABwQnLjS\nOa1nkc21NffaAnpX3xv0ngVePh/zL0+d2x4KId3/0Q==\n=coDi\n-----END PGP SIGNATURE-----",
        "payload": "tree 60f4f7129a97c951acf34828cf28d707b4233664\nparent 03106221d49920527e7cdb979865c816c06ee305\nparent 18051c7fbd224e32d9a5fea96f1083210cea3a14\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1427201676 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1427201751 -0700\n\nMerge pull request #5208\n\n18051c7 Abstract out Ctransaction-specific signing into TransactionSignatureCreator (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2afd919f212e8499d5549e29ac9b8a2d825873d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2afd919f212e8499d5549e29ac9b8a2d825873d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2afd919f212e8499d5549e29ac9b8a2d825873d9/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03106221d49920527e7cdb979865c816c06ee305",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03106221d49920527e7cdb979865c816c06ee305",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03106221d49920527e7cdb979865c816c06ee305"
      },
      {
        "sha": "18051c7fbd224e32d9a5fea96f1083210cea3a14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18051c7fbd224e32d9a5fea96f1083210cea3a14",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/18051c7fbd224e32d9a5fea96f1083210cea3a14"
      }
    ],
    "stats": {
      "total": 130,
      "additions": 90,
      "deletions": 40
    },
    "files": [
      {
        "sha": "eab629cd9133022e4d4e01eebf372dc2b18216f7",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 36,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2afd919f212e8499d5549e29ac9b8a2d825873d9/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2afd919f212e8499d5549e29ac9b8a2d825873d9/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=2afd919f212e8499d5549e29ac9b8a2d825873d9",
        "patch": "@@ -17,43 +17,52 @@ using namespace std;\n \n typedef vector<unsigned char> valtype;\n \n-bool Sign1(const CKeyID& address, const CKeyStore& keystore, uint256 hash, int nHashType, CScript& scriptSigRet)\n+TransactionSignatureCreator::TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, int nHashTypeIn) : BaseSignatureCreator(keystoreIn), txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), checker(txTo, nIn) {}\n+\n+bool TransactionSignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode) const\n {\n     CKey key;\n-    if (!keystore.GetKey(address, key))\n+    if (!keystore->GetKey(address, key))\n         return false;\n \n-    vector<unsigned char> vchSig;\n+    uint256 hash = SignatureHash(scriptCode, *txTo, nIn, nHashType);\n     if (!key.Sign(hash, vchSig))\n         return false;\n     vchSig.push_back((unsigned char)nHashType);\n-    scriptSigRet << vchSig;\n+    return true;\n+}\n \n+static bool Sign1(const CKeyID& address, const BaseSignatureCreator& creator, const CScript& scriptCode, CScript& scriptSigRet)\n+{\n+    vector<unsigned char> vchSig;\n+    if (!creator.CreateSig(vchSig, address, scriptCode))\n+        return false;\n+    scriptSigRet << vchSig;\n     return true;\n }\n \n-bool SignN(const vector<valtype>& multisigdata, const CKeyStore& keystore, uint256 hash, int nHashType, CScript& scriptSigRet)\n+static bool SignN(const vector<valtype>& multisigdata, const BaseSignatureCreator& creator, const CScript& scriptCode, CScript& scriptSigRet)\n {\n     int nSigned = 0;\n     int nRequired = multisigdata.front()[0];\n     for (unsigned int i = 1; i < multisigdata.size()-1 && nSigned < nRequired; i++)\n     {\n         const valtype& pubkey = multisigdata[i];\n         CKeyID keyID = CPubKey(pubkey).GetID();\n-        if (Sign1(keyID, keystore, hash, nHashType, scriptSigRet))\n+        if (Sign1(keyID, creator, scriptCode, scriptSigRet))\n             ++nSigned;\n     }\n     return nSigned==nRequired;\n }\n \n /**\n- * Sign scriptPubKey with private keys stored in keystore, given transaction hash and hash type.\n+ * Sign scriptPubKey using signature made with creator.\n  * Signatures are returned in scriptSigRet (or returns false if scriptPubKey can't be signed),\n  * unless whichTypeRet is TX_SCRIPTHASH, in which case scriptSigRet is the redemption script.\n  * Returns false if scriptPubKey could not be completely satisfied.\n  */\n-bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash, int nHashType,\n-                  CScript& scriptSigRet, txnouttype& whichTypeRet)\n+static bool SignStep(const BaseSignatureCreator& creator, const CScript& scriptPubKey,\n+                     CScript& scriptSigRet, txnouttype& whichTypeRet)\n {\n     scriptSigRet.clear();\n \n@@ -69,61 +78,62 @@ bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash\n         return false;\n     case TX_PUBKEY:\n         keyID = CPubKey(vSolutions[0]).GetID();\n-        return Sign1(keyID, keystore, hash, nHashType, scriptSigRet);\n+        return Sign1(keyID, creator, scriptPubKey, scriptSigRet);\n     case TX_PUBKEYHASH:\n         keyID = CKeyID(uint160(vSolutions[0]));\n-        if (!Sign1(keyID, keystore, hash, nHashType, scriptSigRet))\n+        if (!Sign1(keyID, creator, scriptPubKey, scriptSigRet))\n             return false;\n         else\n         {\n             CPubKey vch;\n-            keystore.GetPubKey(keyID, vch);\n+            creator.KeyStore().GetPubKey(keyID, vch);\n             scriptSigRet << ToByteVector(vch);\n         }\n         return true;\n     case TX_SCRIPTHASH:\n-        return keystore.GetCScript(uint160(vSolutions[0]), scriptSigRet);\n+        return creator.KeyStore().GetCScript(uint160(vSolutions[0]), scriptSigRet);\n \n     case TX_MULTISIG:\n         scriptSigRet << OP_0; // workaround CHECKMULTISIG bug\n-        return (SignN(vSolutions, keystore, hash, nHashType, scriptSigRet));\n+        return (SignN(vSolutions, creator, scriptPubKey, scriptSigRet));\n     }\n     return false;\n }\n \n-bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n+bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPubKey, CScript& scriptSig)\n {\n-    assert(nIn < txTo.vin.size());\n-    CTxIn& txin = txTo.vin[nIn];\n-\n-    // Leave out the signature from the hash, since a signature can't sign itself.\n-    // The checksig op will also drop the signatures from its hash.\n-    uint256 hash = SignatureHash(fromPubKey, txTo, nIn, nHashType);\n-\n     txnouttype whichType;\n-    if (!Solver(keystore, fromPubKey, hash, nHashType, txin.scriptSig, whichType))\n+    if (!SignStep(creator, fromPubKey, scriptSig, whichType))\n         return false;\n \n     if (whichType == TX_SCRIPTHASH)\n     {\n         // Solver returns the subscript that need to be evaluated;\n         // the final scriptSig is the signatures from that\n         // and then the serialized subscript:\n-        CScript subscript = txin.scriptSig;\n-\n-        // Recompute txn hash using subscript in place of scriptPubKey:\n-        uint256 hash2 = SignatureHash(subscript, txTo, nIn, nHashType);\n+        CScript subscript = scriptSig;\n \n         txnouttype subType;\n         bool fSolved =\n-            Solver(keystore, subscript, hash2, nHashType, txin.scriptSig, subType) && subType != TX_SCRIPTHASH;\n+            SignStep(creator, subscript, scriptSig, subType) && subType != TX_SCRIPTHASH;\n         // Append serialized subscript whether or not it is completely signed:\n-        txin.scriptSig << static_cast<valtype>(subscript);\n+        scriptSig << static_cast<valtype>(subscript);\n         if (!fSolved) return false;\n     }\n \n     // Test solution\n-    return VerifyScript(txin.scriptSig, fromPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&txTo, nIn));\n+    return VerifyScript(scriptSig, fromPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, creator.Checker());\n+}\n+\n+bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n+{\n+    assert(nIn < txTo.vin.size());\n+    CTxIn& txin = txTo.vin[nIn];\n+\n+    CTransaction txToConst(txTo);\n+    TransactionSignatureCreator creator(&keystore, &txToConst, nIn, nHashType);\n+\n+    return ProduceSignature(creator, fromPubKey, txin.scriptSig);\n }\n \n bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n@@ -144,7 +154,7 @@ static CScript PushAll(const vector<valtype>& values)\n     return result;\n }\n \n-static CScript CombineMultisig(const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n+static CScript CombineMultisig(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n                                const vector<valtype>& vSolutions,\n                                const vector<valtype>& sigs1, const vector<valtype>& sigs2)\n {\n@@ -174,7 +184,7 @@ static CScript CombineMultisig(const CScript& scriptPubKey, const CTransaction&\n             if (sigs.count(pubkey))\n                 continue; // Already got a sig for this pubkey\n \n-            if (TransactionSignatureChecker(&txTo, nIn).CheckSig(sig, pubkey, scriptPubKey))\n+            if (checker.CheckSig(sig, pubkey, scriptPubKey))\n             {\n                 sigs[pubkey] = sig;\n                 break;\n@@ -199,7 +209,7 @@ static CScript CombineMultisig(const CScript& scriptPubKey, const CTransaction&\n     return result;\n }\n \n-static CScript CombineSignatures(const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n+static CScript CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n                                  const txnouttype txType, const vector<valtype>& vSolutions,\n                                  vector<valtype>& sigs1, vector<valtype>& sigs2)\n {\n@@ -233,19 +243,26 @@ static CScript CombineSignatures(const CScript& scriptPubKey, const CTransaction\n             Solver(pubKey2, txType2, vSolutions2);\n             sigs1.pop_back();\n             sigs2.pop_back();\n-            CScript result = CombineSignatures(pubKey2, txTo, nIn, txType2, vSolutions2, sigs1, sigs2);\n+            CScript result = CombineSignatures(pubKey2, checker, txType2, vSolutions2, sigs1, sigs2);\n             result << spk;\n             return result;\n         }\n     case TX_MULTISIG:\n-        return CombineMultisig(scriptPubKey, txTo, nIn, vSolutions, sigs1, sigs2);\n+        return CombineMultisig(scriptPubKey, checker, vSolutions, sigs1, sigs2);\n     }\n \n     return CScript();\n }\n \n CScript CombineSignatures(const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n                           const CScript& scriptSig1, const CScript& scriptSig2)\n+{\n+    TransactionSignatureChecker checker(&txTo, nIn);\n+    return CombineSignatures(scriptPubKey, checker, scriptSig1, scriptSig2);\n+}\n+\n+CScript CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n+                          const CScript& scriptSig1, const CScript& scriptSig2)\n {\n     txnouttype txType;\n     vector<vector<unsigned char> > vSolutions;\n@@ -256,5 +273,5 @@ CScript CombineSignatures(const CScript& scriptPubKey, const CTransaction& txTo,\n     vector<valtype> stack2;\n     EvalScript(stack2, scriptSig2, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker());\n \n-    return CombineSignatures(scriptPubKey, txTo, nIn, txType, vSolutions, stack1, stack2);\n+    return CombineSignatures(scriptPubKey, checker, txType, vSolutions, stack1, stack2);\n }"
      },
      {
        "sha": "0c4cf61e5e74f2a1fcbe6ac985412a857351244d",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 37,
        "deletions": 4,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2afd919f212e8499d5549e29ac9b8a2d825873d9/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2afd919f212e8499d5549e29ac9b8a2d825873d9/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=2afd919f212e8499d5549e29ac9b8a2d825873d9",
        "patch": "@@ -8,19 +8,52 @@\n \n #include \"script/interpreter.h\"\n \n+class CKeyID;\n class CKeyStore;\n class CScript;\n class CTransaction;\n \n struct CMutableTransaction;\n \n+/** Virtual base class for signature creators. */\n+class BaseSignatureCreator {\n+protected:\n+    const CKeyStore* keystore;\n+\n+public:\n+    BaseSignatureCreator(const CKeyStore* keystoreIn) : keystore(keystoreIn) {}\n+    const CKeyStore& KeyStore() const { return *keystore; };\n+    virtual ~BaseSignatureCreator() {}\n+    virtual const BaseSignatureChecker& Checker() const =0;\n+\n+    /** Create a singular (non-script) signature. */\n+    virtual bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode) const =0;\n+};\n+\n+/** A signature creator for transactions. */\n+class TransactionSignatureCreator : public BaseSignatureCreator {\n+    const CTransaction* txTo;\n+    unsigned int nIn;\n+    int nHashType;\n+    const TransactionSignatureChecker checker;\n+\n+public:\n+    TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, int nHashTypeIn=SIGHASH_ALL);\n+    const BaseSignatureChecker& Checker() const { return checker; }\n+    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode) const;\n+};\n+\n+/** Produce a script signature using a generic signature creator. */\n+bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& scriptPubKey, CScript& scriptSig);\n+\n+/** Produce a script signature for a transaction. */\n bool SignSignature(const CKeyStore& keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n bool SignSignature(const CKeyStore& keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n \n-/**\n- * Given two sets of signatures for scriptPubKey, possibly with OP_0 placeholders,\n- * combine them intelligently and return the result.\n- */\n+/** Combine two script signatures using a generic signature checker, intelligently, possibly with OP_0 placeholders. */\n+CScript CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker, const CScript& scriptSig1, const CScript& scriptSig2);\n+\n+/** Combine two script signatures on transactions. */\n CScript CombineSignatures(const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, const CScript& scriptSig1, const CScript& scriptSig2);\n \n #endif // BITCOIN_SCRIPT_SIGN_H"
      }
    ]
  },
  {
    "sha": "22cfe23196c5006d6dd79e1e1a24323148246bde",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMmNmZTIzMTk2YzUwMDZkNmRkNzllMWUxYTI0MzIzMTQ4MjQ2YmRl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-24T13:45:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-24T13:50:54Z"
      },
      "message": "Merge pull request #5890\n\ncd3d67c Fix InvalidateBlock to add chainActive.Tip to setBlockIndexCandidates (Alex Morcos)",
      "tree": {
        "sha": "337aab27a85380e1a17f7113da80e2b703cb0580",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/337aab27a85380e1a17f7113da80e2b703cb0580"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22cfe23196c5006d6dd79e1e1a24323148246bde",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVEWu+AAoJEHSBCwEjRsmmm98H+QHhur7VRgIoRpgt35hVrMb5\nXJEzcqlgKIjGjssmaUEGNwbGCcGN9J/ShD3y8t0ajVsQpEW07NAZBARKqIVAn9Np\n0L4ZfPDdfY30xiArYP5iEOaUSh+GwZrzJcqKVRvocVXPPdZy7X6+X8v6hp7GG9iM\n9/1pjHr0n1k4OdmbJAX2ZFrPj+A5WCqayfLf8dn1vLaqOyj16IbXAa4fealls8IM\nimdQkmzJ54TbZfw/7SUhgzUKtmspYUNxNJsw9sA17VfuotQlVnyOpCx/L54HLEir\nVmdGZXMUctJdLLW2wg76YXhaRmavoFpwnh0x1aTJCR+J3VTmMh7lF8wHkDATTl0=\n=iuE9\n-----END PGP SIGNATURE-----",
        "payload": "tree 337aab27a85380e1a17f7113da80e2b703cb0580\nparent 2afd919f212e8499d5549e29ac9b8a2d825873d9\nparent cd3d67cf3b0d573d2c387c2ec35e8b52129863d9\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1427204700 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1427205054 +0100\n\nMerge pull request #5890\n\ncd3d67c Fix InvalidateBlock to add chainActive.Tip to setBlockIndexCandidates (Alex Morcos)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22cfe23196c5006d6dd79e1e1a24323148246bde",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22cfe23196c5006d6dd79e1e1a24323148246bde",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22cfe23196c5006d6dd79e1e1a24323148246bde/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2afd919f212e8499d5549e29ac9b8a2d825873d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2afd919f212e8499d5549e29ac9b8a2d825873d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2afd919f212e8499d5549e29ac9b8a2d825873d9"
      },
      {
        "sha": "cd3d67cf3b0d573d2c387c2ec35e8b52129863d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd3d67cf3b0d573d2c387c2ec35e8b52129863d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd3d67cf3b0d573d2c387c2ec35e8b52129863d9"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 28,
      "deletions": 3
    },
    "files": [
      {
        "sha": "ccfcf00e30e286498700e8396b0351ddf6073752",
        "filename": "qa/rpc-tests/invalidateblock.py",
        "status": "modified",
        "additions": 27,
        "deletions": 2,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22cfe23196c5006d6dd79e1e1a24323148246bde/qa/rpc-tests/invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22cfe23196c5006d6dd79e1e1a24323148246bde/qa/rpc-tests/invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidateblock.py?ref=22cfe23196c5006d6dd79e1e1a24323148246bde",
        "patch": "@@ -16,15 +16,17 @@ class InvalidateTest(BitcoinTestFramework):\n         \n     def setup_chain(self):\n         print(\"Initializing test directory \"+self.options.tmpdir)\n-        initialize_chain_clean(self.options.tmpdir, 2)\n+        initialize_chain_clean(self.options.tmpdir, 3)\n                  \n     def setup_network(self):\n         self.nodes = []\n         self.is_network_split = False \n         self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\"]))\n         self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\"]))\n+        self.nodes.append(start_node(2, self.options.tmpdir, [\"-debug\"]))\n         \n     def run_test(self):\n+        print \"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\"\n         print \"Mine 4 blocks on Node 0\"\n         self.nodes[0].setgenerate(True, 4)\n         assert(self.nodes[0].getblockcount() == 4)\n@@ -36,7 +38,7 @@ def run_test(self):\n \n         print \"Connect nodes to force a reorg\"\n         connect_nodes_bi(self.nodes,0,1)\n-        sync_blocks(self.nodes)\n+        sync_blocks(self.nodes[0:2])\n         assert(self.nodes[0].getblockcount() == 6)\n         badhash = self.nodes[1].getblockhash(2)\n \n@@ -47,5 +49,28 @@ def run_test(self):\n         if (newheight != 4 or newhash != besthash):\n             raise AssertionError(\"Wrong tip for node0, hash %s, height %d\"%(newhash,newheight))\n \n+        print \"\\nMake sure we won't reorg to a lower work chain:\"\n+        connect_nodes_bi(self.nodes,1,2)\n+        print \"Sync node 2 to node 1 so both have 6 blocks\"\n+        sync_blocks(self.nodes[1:3])\n+        assert(self.nodes[2].getblockcount() == 6)\n+        print \"Invalidate block 5 on node 1 so its tip is now at 4\"\n+        self.nodes[1].invalidateblock(self.nodes[1].getblockhash(5))\n+        assert(self.nodes[1].getblockcount() == 4)\n+        print \"Invalidate block 3 on node 2, so its tip is now 2\"\n+        self.nodes[2].invalidateblock(self.nodes[2].getblockhash(3))\n+        assert(self.nodes[2].getblockcount() == 2)\n+        print \"..and then mine a block\"\n+        self.nodes[2].setgenerate(True, 1)\n+        print \"Verify all nodes are at the right height\"\n+        time.sleep(5)\n+        for i in xrange(3):\n+            print i,self.nodes[i].getblockcount()\n+        assert(self.nodes[2].getblockcount() == 3)\n+        assert(self.nodes[0].getblockcount() == 4)\n+        node1height = self.nodes[1].getblockcount()\n+        if node1height < 4:\n+            raise AssertionError(\"Node 1 reorged to a lower height: %d\"%node1height)\n+\n if __name__ == '__main__':\n     InvalidateTest().main()"
      },
      {
        "sha": "aa6f904574a0354194cc04b2d84ec1bcdb210f7a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22cfe23196c5006d6dd79e1e1a24323148246bde/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22cfe23196c5006d6dd79e1e1a24323148246bde/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=22cfe23196c5006d6dd79e1e1a24323148246bde",
        "patch": "@@ -2320,7 +2320,7 @@ bool InvalidateBlock(CValidationState& state, CBlockIndex *pindex) {\n     // add them again.\n     BlockMap::iterator it = mapBlockIndex.begin();\n     while (it != mapBlockIndex.end()) {\n-        if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->nChainTx && setBlockIndexCandidates.value_comp()(chainActive.Tip(), it->second)) {\n+        if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->nChainTx && !setBlockIndexCandidates.value_comp()(it->second, chainActive.Tip())) {\n             setBlockIndexCandidates.insert(it->second);\n         }\n         it++;"
      }
    ]
  },
  {
    "sha": "fc720207e0e513e531b1f266b966a2ffa57b936a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzcyMDIwN2UwZTUxM2U1MzFiMWYyNjZiOTY2YTJmZmE1N2I5MzZh",
    "commit": {
      "author": {
        "name": "Ruben de Vries",
        "email": "ruben@rubensayshi.com",
        "date": "2015-03-24T13:29:13Z"
      },
      "committer": {
        "name": "Ruben de Vries",
        "email": "ruben@rubensayshi.com",
        "date": "2015-03-24T13:53:16Z"
      },
      "message": "don't trickle for whitelisted nodes",
      "tree": {
        "sha": "5a052f2dfb5d07cec3c948ca57e3b5c9d8fc0312",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a052f2dfb5d07cec3c948ca57e3b5c9d8fc0312"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc720207e0e513e531b1f266b966a2ffa57b936a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc720207e0e513e531b1f266b966a2ffa57b936a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc720207e0e513e531b1f266b966a2ffa57b936a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc720207e0e513e531b1f266b966a2ffa57b936a/comments",
    "author": {
      "login": "rubensayshi",
      "id": 649160,
      "node_id": "MDQ6VXNlcjY0OTE2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649160?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rubensayshi",
      "html_url": "https://github.com/rubensayshi",
      "followers_url": "https://api.github.com/users/rubensayshi/followers",
      "following_url": "https://api.github.com/users/rubensayshi/following{/other_user}",
      "gists_url": "https://api.github.com/users/rubensayshi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rubensayshi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rubensayshi/subscriptions",
      "organizations_url": "https://api.github.com/users/rubensayshi/orgs",
      "repos_url": "https://api.github.com/users/rubensayshi/repos",
      "events_url": "https://api.github.com/users/rubensayshi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rubensayshi/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rubensayshi",
      "id": 649160,
      "node_id": "MDQ6VXNlcjY0OTE2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649160?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rubensayshi",
      "html_url": "https://github.com/rubensayshi",
      "followers_url": "https://api.github.com/users/rubensayshi/followers",
      "following_url": "https://api.github.com/users/rubensayshi/following{/other_user}",
      "gists_url": "https://api.github.com/users/rubensayshi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rubensayshi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rubensayshi/subscriptions",
      "organizations_url": "https://api.github.com/users/rubensayshi/orgs",
      "repos_url": "https://api.github.com/users/rubensayshi/repos",
      "events_url": "https://api.github.com/users/rubensayshi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rubensayshi/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2afd919f212e8499d5549e29ac9b8a2d825873d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2afd919f212e8499d5549e29ac9b8a2d825873d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2afd919f212e8499d5549e29ac9b8a2d825873d9"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 7,
      "deletions": 2
    },
    "files": [
      {
        "sha": "65693b44b7edeb438fa7914d1669f9ba08cc8085",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc720207e0e513e531b1f266b966a2ffa57b936a/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc720207e0e513e531b1f266b966a2ffa57b936a/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=fc720207e0e513e531b1f266b966a2ffa57b936a",
        "patch": "@@ -177,7 +177,12 @@ bool LoadBlockIndex();\n void UnloadBlockIndex();\n /** Process protocol messages received from a given node */\n bool ProcessMessages(CNode* pfrom);\n-/** Send queued protocol messages to be sent to a give node */\n+/**\n+ * Send queued protocol messages to be sent to a give node.\n+ *\n+ * @param[in]   pto             The node which we are sending messages to.\n+ * @param[in]   fSendTrickle    When true send the trickled data, otherwise trickle the data until true.\n+ */\n bool SendMessages(CNode* pto, bool fSendTrickle);\n /** Run an instance of the script checking thread */\n void ThreadScriptCheck();"
      },
      {
        "sha": "11c2cd07d9ffab91e33c39a8ac34fa3da6403b15",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc720207e0e513e531b1f266b966a2ffa57b936a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc720207e0e513e531b1f266b966a2ffa57b936a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=fc720207e0e513e531b1f266b966a2ffa57b936a",
        "patch": "@@ -1406,7 +1406,7 @@ void ThreadMessageHandler()\n             {\n                 TRY_LOCK(pnode->cs_vSend, lockSend);\n                 if (lockSend)\n-                    g_signals.SendMessages(pnode, pnode == pnodeTrickle);\n+                    g_signals.SendMessages(pnode, pnode == pnodeTrickle || pnode->fWhitelisted);\n             }\n             boost::this_thread::interruption_point();\n         }"
      }
    ]
  },
  {
    "sha": "26c16d9de9874ad2f5fe28377b838a19a558639d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNmMxNmQ5ZGU5ODc0YWQyZjVmZTI4Mzc3YjgzOGExOWE1NTg2Mzlk",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-05T00:11:44Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-24T16:21:41Z"
      },
      "message": "Includes: Refactor: Move CValidationInterface and CMainSignals out of main",
      "tree": {
        "sha": "b717b2b494657038684a4259d66b1904858b9b42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b717b2b494657038684a4259d66b1904858b9b42"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26c16d9de9874ad2f5fe28377b838a19a558639d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26c16d9de9874ad2f5fe28377b838a19a558639d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26c16d9de9874ad2f5fe28377b838a19a558639d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26c16d9de9874ad2f5fe28377b838a19a558639d/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22cfe23196c5006d6dd79e1e1a24323148246bde",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22cfe23196c5006d6dd79e1e1a24323148246bde",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22cfe23196c5006d6dd79e1e1a24323148246bde"
      }
    ],
    "stats": {
      "total": 219,
      "additions": 123,
      "deletions": 96
    },
    "files": [
      {
        "sha": "1b3e0d9d5b67e9c5c783d586463cdc264bbfc982",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26c16d9de9874ad2f5fe28377b838a19a558639d/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26c16d9de9874ad2f5fe28377b838a19a558639d/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=26c16d9de9874ad2f5fe28377b838a19a558639d",
        "patch": "@@ -138,6 +138,7 @@ BITCOIN_CORE_H = \\\n   utilmoneystr.h \\\n   utilstrencodings.h \\\n   utiltime.h \\\n+  validationinterface.h \\\n   version.h \\\n   wallet/crypter.h \\\n   wallet/walletdb.h \\\n@@ -191,6 +192,7 @@ libbitcoin_server_a_SOURCES = \\\n   timedata.cpp \\\n   txdb.cpp \\\n   txmempool.cpp \\\n+  validationinterface.cpp \\\n   $(JSON_H) \\\n   $(BITCOIN_CORE_H)\n "
      },
      {
        "sha": "0ffacc338e61f1525ce97b7e4cb4047b143881d9",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 69,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26c16d9de9874ad2f5fe28377b838a19a558639d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26c16d9de9874ad2f5fe28377b838a19a558639d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=26c16d9de9874ad2f5fe28377b838a19a558639d",
        "patch": "@@ -5,9 +5,9 @@\n \n #include \"main.h\"\n \n-#include \"arith_uint256.h\"\n #include \"addrman.h\"\n #include \"alert.h\"\n+#include \"arith_uint256.h\"\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"checkqueue.h\"\n@@ -21,6 +21,7 @@\n #include \"undo.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n+#include \"validationinterface.h\"\n \n #include <sstream>\n \n@@ -156,68 +157,6 @@ namespace {\n     set<int> setDirtyFileInfo;\n } // anon namespace\n \n-//////////////////////////////////////////////////////////////////////////////\n-//\n-// dispatching functions\n-//\n-\n-// These functions dispatch to one or all registered wallets\n-\n-namespace {\n-\n-struct CMainSignals {\n-    /** Notifies listeners of updated transaction data (transaction, and optionally the block it is found in. */\n-    boost::signals2::signal<void (const CTransaction &, const CBlock *)> SyncTransaction;\n-    /** Notifies listeners of an erased transaction (currently disabled, requires transaction replacement). */\n-    boost::signals2::signal<void (const uint256 &)> EraseTransaction;\n-    /** Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible). */\n-    boost::signals2::signal<void (const uint256 &)> UpdatedTransaction;\n-    /** Notifies listeners of a new active block chain. */\n-    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n-    /** Notifies listeners about an inventory item being seen on the network. */\n-    boost::signals2::signal<void (const uint256 &)> Inventory;\n-    /** Tells listeners to broadcast their data. */\n-    boost::signals2::signal<void ()> Broadcast;\n-    /** Notifies listeners of a block validation result */\n-    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n-} g_signals;\n-\n-} // anon namespace\n-\n-void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n-    g_signals.SyncTransaction.connect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2));\n-    g_signals.EraseTransaction.connect(boost::bind(&CValidationInterface::EraseFromWallet, pwalletIn, _1));\n-    g_signals.UpdatedTransaction.connect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n-    g_signals.SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n-    g_signals.Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n-    g_signals.Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn));\n-    g_signals.BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n-}\n-\n-void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n-    g_signals.BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n-    g_signals.Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn));\n-    g_signals.Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n-    g_signals.SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n-    g_signals.UpdatedTransaction.disconnect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n-    g_signals.EraseTransaction.disconnect(boost::bind(&CValidationInterface::EraseFromWallet, pwalletIn, _1));\n-    g_signals.SyncTransaction.disconnect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2));\n-}\n-\n-void UnregisterAllValidationInterfaces() {\n-    g_signals.BlockChecked.disconnect_all_slots();\n-    g_signals.Broadcast.disconnect_all_slots();\n-    g_signals.Inventory.disconnect_all_slots();\n-    g_signals.SetBestChain.disconnect_all_slots();\n-    g_signals.UpdatedTransaction.disconnect_all_slots();\n-    g_signals.EraseTransaction.disconnect_all_slots();\n-    g_signals.SyncTransaction.disconnect_all_slots();\n-}\n-\n-void SyncWithWallets(const CTransaction &tx, const CBlock *pblock) {\n-    g_signals.SyncTransaction(tx, pblock);\n-}\n-\n //////////////////////////////////////////////////////////////////////////////\n //\n // Registration of network node signals.\n@@ -1897,7 +1836,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     // Watch for changes to the previous coinbase transaction.\n     static uint256 hashPrevBestCoinBase;\n-    g_signals.UpdatedTransaction(hashPrevBestCoinBase);\n+    GetMainSignals().UpdatedTransaction(hashPrevBestCoinBase);\n     hashPrevBestCoinBase = block.vtx[0].GetHash();\n \n     int64_t nTime4 = GetTimeMicros(); nTimeCallbacks += nTime4 - nTime3;\n@@ -1956,7 +1895,7 @@ bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode) {\n             return state.Abort(\"Failed to write to coin database\");\n         // Update best block in wallet (so we can detect restored wallets).\n         if (mode != FLUSH_STATE_IF_NEEDED) {\n-            g_signals.SetBestChain(chainActive.GetLocator());\n+            GetMainSignals().SetBestChain(chainActive.GetLocator());\n         }\n         nLastWrite = GetTimeMicros();\n     }\n@@ -2080,7 +2019,7 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n         CCoinsViewCache view(pcoinsTip);\n         CInv inv(MSG_BLOCK, pindexNew->GetBlockHash());\n         bool rv = ConnectBlock(*pblock, state, pindexNew, view);\n-        g_signals.BlockChecked(*pblock, state);\n+        GetMainSignals().BlockChecked(*pblock, state);\n         if (!rv) {\n             if (state.IsInvalid())\n                 InvalidBlockFound(pindexNew, state);\n@@ -3471,7 +3410,7 @@ void static ProcessGetData(CNode* pfrom)\n             }\n \n             // Track requests for our stuff.\n-            g_signals.Inventory(inv.hash);\n+            GetMainSignals().Inventory(inv.hash);\n \n             if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK)\n                 break;\n@@ -3765,7 +3704,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             }\n \n             // Track requests for our stuff\n-            g_signals.Inventory(inv.hash);\n+            GetMainSignals().Inventory(inv.hash);\n \n             if (pfrom->nSendSize > (SendBufferSize() * 2)) {\n                 Misbehaving(pfrom->GetId(), 50);\n@@ -4536,7 +4475,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         // transactions become unconfirmed and spams other nodes.\n         if (!fReindex && !fImporting && !IsInitialBlockDownload())\n         {\n-            g_signals.Broadcast();\n+            GetMainSignals().Broadcast();\n         }\n \n         //"
      },
      {
        "sha": "b0bab6f7bf54bdafec8e6d6e5887e03769dba65f",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 25,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26c16d9de9874ad2f5fe28377b838a19a558639d/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26c16d9de9874ad2f5fe28377b838a19a558639d/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=26c16d9de9874ad2f5fe28377b838a19a558639d",
        "patch": "@@ -133,15 +133,6 @@ extern CBlockIndex *pindexBestHeader;\n /** Minimum disk space required - used in CheckDiskSpace() */\n static const uint64_t nMinDiskSpace = 52428800;\n \n-/** Register a wallet to receive updates from core */\n-void RegisterValidationInterface(CValidationInterface* pwalletIn);\n-/** Unregister a wallet from core */\n-void UnregisterValidationInterface(CValidationInterface* pwalletIn);\n-/** Unregister all wallets from core */\n-void UnregisterAllValidationInterfaces();\n-/** Push an updated transaction to all registered wallets */\n-void SyncWithWallets(const CTransaction& tx, const CBlock* pblock = NULL);\n-\n /** Register with a network node to receive its signals */\n void RegisterNodeSignals(CNodeSignals& nodeSignals);\n /** Unregister a network node */\n@@ -152,7 +143,7 @@ void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  * \n- * @param[out]  state   This may be set to an Error state if any error occurred processing it, including during validation/connection/etc of otherwise unrelated blocks during reorganisation; or it may be set to an Invalid state if pblock is itself invalid (but this is not guaranteed even when the block is checked). If you want to *possibly* get feedback on whether pblock is valid, you must also install a CValidationInterface - this will have its BlockChecked method called whenever *any* block completes validation.\n+ * @param[out]  state   This may be set to an Error state if any error occurred processing it, including during validation/connection/etc of otherwise unrelated blocks during reorganisation; or it may be set to an Invalid state if pblock is itself invalid (but this is not guaranteed even when the block is checked). If you want to *possibly* get feedback on whether pblock is valid, you must also install a CValidationInterface (see validationinterface.h) - this will have its BlockChecked method called whenever *any* block completes validation.\n  * @param[in]   pfrom   The node which we are receiving the block from; it is added to mapBlockSource and may be penalised if the block is invalid.\n  * @param[in]   pblock  The block we want to process.\n  * @param[out]  dbp     If pblock is stored to disk (or already there), this will be set to its location.\n@@ -512,19 +503,4 @@ extern CCoinsViewCache *pcoinsTip;\n /** Global variable that points to the active block tree (protected by cs_main) */\n extern CBlockTreeDB *pblocktree;\n \n-\n-class CValidationInterface {\n-protected:\n-    virtual void SyncTransaction(const CTransaction &tx, const CBlock *pblock) {};\n-    virtual void EraseFromWallet(const uint256 &hash) {};\n-    virtual void SetBestChain(const CBlockLocator &locator) {};\n-    virtual void UpdatedTransaction(const uint256 &hash) {};\n-    virtual void Inventory(const uint256 &hash) {};\n-    virtual void ResendWalletTransactions() {};\n-    virtual void BlockChecked(const CBlock&, const CValidationState&) {};\n-    friend void ::RegisterValidationInterface(CValidationInterface*);\n-    friend void ::UnregisterValidationInterface(CValidationInterface*);\n-    friend void ::UnregisterAllValidationInterfaces();\n-};\n-\n #endif // BITCOIN_MAIN_H"
      },
      {
        "sha": "ae4cd3c592a87a864ac59a9986ba3d1fcb54f2a6",
        "filename": "src/validationinterface.cpp",
        "status": "added",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26c16d9de9874ad2f5fe28377b838a19a558639d/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26c16d9de9874ad2f5fe28377b838a19a558639d/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=26c16d9de9874ad2f5fe28377b838a19a558639d",
        "patch": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"validationinterface.h\"\n+\n+static CMainSignals g_signals;\n+\n+CMainSignals& GetMainSignals()\n+{\n+    return g_signals;\n+}\n+\n+void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n+    g_signals.SyncTransaction.connect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2));\n+    g_signals.EraseTransaction.connect(boost::bind(&CValidationInterface::EraseFromWallet, pwalletIn, _1));\n+    g_signals.UpdatedTransaction.connect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n+    g_signals.SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n+    g_signals.Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n+    g_signals.Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn));\n+    g_signals.BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n+}\n+\n+void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n+    g_signals.BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n+    g_signals.Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn));\n+    g_signals.Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n+    g_signals.SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n+    g_signals.UpdatedTransaction.disconnect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n+    g_signals.EraseTransaction.disconnect(boost::bind(&CValidationInterface::EraseFromWallet, pwalletIn, _1));\n+    g_signals.SyncTransaction.disconnect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2));\n+}\n+\n+void UnregisterAllValidationInterfaces() {\n+    g_signals.BlockChecked.disconnect_all_slots();\n+    g_signals.Broadcast.disconnect_all_slots();\n+    g_signals.Inventory.disconnect_all_slots();\n+    g_signals.SetBestChain.disconnect_all_slots();\n+    g_signals.UpdatedTransaction.disconnect_all_slots();\n+    g_signals.EraseTransaction.disconnect_all_slots();\n+    g_signals.SyncTransaction.disconnect_all_slots();\n+}\n+\n+void SyncWithWallets(const CTransaction &tx, const CBlock *pblock) {\n+    g_signals.SyncTransaction(tx, pblock);\n+}"
      },
      {
        "sha": "b21b6e578259c38f3b0cb5da88b7a0a0dff949ba",
        "filename": "src/validationinterface.h",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26c16d9de9874ad2f5fe28377b838a19a558639d/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26c16d9de9874ad2f5fe28377b838a19a558639d/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=26c16d9de9874ad2f5fe28377b838a19a558639d",
        "patch": "@@ -0,0 +1,62 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_VALIDATIONINTERFACE_H\n+#define BITCOIN_VALIDATIONINTERFACE_H\n+\n+#include <boost/signals2/signal.hpp>\n+\n+class CBlock;\n+class CBlockLocator;\n+class CTransaction;\n+class CValidationInterface;\n+class CValidationState;\n+class uint256;\n+\n+// These functions dispatch to one or all registered wallets\n+\n+/** Register a wallet to receive updates from core */\n+void RegisterValidationInterface(CValidationInterface* pwalletIn);\n+/** Unregister a wallet from core */\n+void UnregisterValidationInterface(CValidationInterface* pwalletIn);\n+/** Unregister all wallets from core */\n+void UnregisterAllValidationInterfaces();\n+/** Push an updated transaction to all registered wallets */\n+void SyncWithWallets(const CTransaction& tx, const CBlock* pblock = NULL);\n+\n+class CValidationInterface {\n+protected:\n+    virtual void SyncTransaction(const CTransaction &tx, const CBlock *pblock) {};\n+    virtual void EraseFromWallet(const uint256 &hash) {};\n+    virtual void SetBestChain(const CBlockLocator &locator) {};\n+    virtual void UpdatedTransaction(const uint256 &hash) {};\n+    virtual void Inventory(const uint256 &hash) {};\n+    virtual void ResendWalletTransactions() {};\n+    virtual void BlockChecked(const CBlock&, const CValidationState&) {};\n+    friend void ::RegisterValidationInterface(CValidationInterface*);\n+    friend void ::UnregisterValidationInterface(CValidationInterface*);\n+    friend void ::UnregisterAllValidationInterfaces();\n+};\n+\n+struct CMainSignals {\n+    /** Notifies listeners of updated transaction data (transaction, and optionally the block it is found in. */\n+    boost::signals2::signal<void (const CTransaction &, const CBlock *)> SyncTransaction;\n+    /** Notifies listeners of an erased transaction (currently disabled, requires transaction replacement). */\n+    boost::signals2::signal<void (const uint256 &)> EraseTransaction;\n+    /** Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible). */\n+    boost::signals2::signal<void (const uint256 &)> UpdatedTransaction;\n+    /** Notifies listeners of a new active block chain. */\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    /** Notifies listeners about an inventory item being seen on the network. */\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    /** Tells listeners to broadcast their data. */\n+    boost::signals2::signal<void ()> Broadcast;\n+    /** Notifies listeners of a block validation result */\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+};\n+\n+CMainSignals& GetMainSignals();\n+\n+#endif // BITCOIN_VALIDATIONINTERFACE_H"
      },
      {
        "sha": "30104449784e7ba228bc22e05eaaa38c536197b9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26c16d9de9874ad2f5fe28377b838a19a558639d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26c16d9de9874ad2f5fe28377b838a19a558639d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=26c16d9de9874ad2f5fe28377b838a19a558639d",
        "patch": "@@ -7,12 +7,13 @@\n #define BITCOIN_WALLET_H\n \n #include \"amount.h\"\n-#include \"primitives/block.h\"\n-#include \"primitives/transaction.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n+#include \"primitives/block.h\"\n+#include \"primitives/transaction.h\"\n #include \"ui_interface.h\"\n+#include \"validationinterface.h\"\n #include \"wallet/crypter.h\"\n #include \"wallet/wallet_ismine.h\"\n #include \"wallet/walletdb.h\""
      }
    ]
  },
  {
    "sha": "eca0b1ea62b2625d9df8daecacde96edeb486d65",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplY2EwYjFlYTYyYjI2MjVkOWRmOGRhZWNhY2RlOTZlZGViNDg2ZDY1",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-04T22:19:29Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-24T16:21:45Z"
      },
      "message": "Includes: MOVEONLY: move more method definitions out of wallet.h",
      "tree": {
        "sha": "e19de635aa27077df3b0e665b95387bbcb4b710a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e19de635aa27077df3b0e665b95387bbcb4b710a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eca0b1ea62b2625d9df8daecacde96edeb486d65",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eca0b1ea62b2625d9df8daecacde96edeb486d65",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eca0b1ea62b2625d9df8daecacde96edeb486d65",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eca0b1ea62b2625d9df8daecacde96edeb486d65/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26c16d9de9874ad2f5fe28377b838a19a558639d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26c16d9de9874ad2f5fe28377b838a19a558639d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26c16d9de9874ad2f5fe28377b838a19a558639d"
      }
    ],
    "stats": {
      "total": 136,
      "additions": 76,
      "deletions": 60
    },
    "files": [
      {
        "sha": "cc03d5632e0fbba9bd6dc33fe9d413975473d46c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 68,
        "deletions": 0,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eca0b1ea62b2625d9df8daecacde96edeb486d65/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eca0b1ea62b2625d9df8daecacde96edeb486d65/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=eca0b1ea62b2625d9df8daecacde96edeb486d65",
        "patch": "@@ -817,6 +817,18 @@ CAmount CWallet::GetDebit(const CTxIn &txin, const isminefilter& filter) const\n     return 0;\n }\n \n+isminetype CWallet::IsMine(const CTxOut& txout) const\n+{\n+    return ::IsMine(*this, txout.scriptPubKey);\n+}\n+\n+CAmount CWallet::GetCredit(const CTxOut& txout, const isminefilter& filter) const\n+{\n+    if (!MoneyRange(txout.nValue))\n+        throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n+    return ((IsMine(txout) & filter) ? txout.nValue : 0);\n+}\n+\n bool CWallet::IsChange(const CTxOut& txout) const\n {\n     // TODO: fix handling of 'change' outputs. The assumption is that any\n@@ -839,6 +851,62 @@ bool CWallet::IsChange(const CTxOut& txout) const\n     return false;\n }\n \n+CAmount CWallet::GetChange(const CTxOut& txout) const\n+{\n+    if (!MoneyRange(txout.nValue))\n+        throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n+    return (IsChange(txout) ? txout.nValue : 0);\n+}\n+\n+bool CWallet::IsMine(const CTransaction& tx) const\n+{\n+    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+        if (IsMine(txout))\n+            return true;\n+    return false;\n+}\n+\n+bool CWallet::IsFromMe(const CTransaction& tx) const\n+{\n+    return (GetDebit(tx, ISMINE_ALL) > 0);\n+}\n+\n+CAmount CWallet::GetDebit(const CTransaction& tx, const isminefilter& filter) const\n+{\n+    CAmount nDebit = 0;\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    {\n+        nDebit += GetDebit(txin, filter);\n+        if (!MoneyRange(nDebit))\n+            throw std::runtime_error(\"CWallet::GetDebit(): value out of range\");\n+    }\n+    return nDebit;\n+}\n+\n+CAmount CWallet::GetCredit(const CTransaction& tx, const isminefilter& filter) const\n+{\n+    CAmount nCredit = 0;\n+    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    {\n+        nCredit += GetCredit(txout, filter);\n+        if (!MoneyRange(nCredit))\n+            throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n+    }\n+    return nCredit;\n+}\n+\n+CAmount CWallet::GetChange(const CTransaction& tx) const\n+{\n+    CAmount nChange = 0;\n+    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    {\n+        nChange += GetChange(txout);\n+        if (!MoneyRange(nChange))\n+            throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n+    }\n+    return nChange;\n+}\n+\n int64_t CWalletTx::GetTxTime() const\n {\n     int64_t n = nTimeSmart;"
      },
      {
        "sha": "9abc73f9ce1d2946b13ae6b99a21fc95450ae942",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 8,
        "deletions": 60,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eca0b1ea62b2625d9df8daecacde96edeb486d65/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eca0b1ea62b2625d9df8daecacde96edeb486d65/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=eca0b1ea62b2625d9df8daecacde96edeb486d65",
        "patch": "@@ -641,68 +641,16 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     isminetype IsMine(const CTxIn& txin) const;\n     CAmount GetDebit(const CTxIn& txin, const isminefilter& filter) const;\n-    isminetype IsMine(const CTxOut& txout) const\n-    {\n-        return ::IsMine(*this, txout.scriptPubKey);\n-    }\n-    CAmount GetCredit(const CTxOut& txout, const isminefilter& filter) const\n-    {\n-        if (!MoneyRange(txout.nValue))\n-            throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n-        return ((IsMine(txout) & filter) ? txout.nValue : 0);\n-    }\n+    isminetype IsMine(const CTxOut& txout) const;\n+    CAmount GetCredit(const CTxOut& txout, const isminefilter& filter) const;\n     bool IsChange(const CTxOut& txout) const;\n-    CAmount GetChange(const CTxOut& txout) const\n-    {\n-        if (!MoneyRange(txout.nValue))\n-            throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n-        return (IsChange(txout) ? txout.nValue : 0);\n-    }\n-    bool IsMine(const CTransaction& tx) const\n-    {\n-        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-            if (IsMine(txout))\n-                return true;\n-        return false;\n-    }\n+    CAmount GetChange(const CTxOut& txout) const;\n+    bool IsMine(const CTransaction& tx) const;\n     /** should probably be renamed to IsRelevantToMe */\n-    bool IsFromMe(const CTransaction& tx) const\n-    {\n-        return (GetDebit(tx, ISMINE_ALL) > 0);\n-    }\n-    CAmount GetDebit(const CTransaction& tx, const isminefilter& filter) const\n-    {\n-        CAmount nDebit = 0;\n-        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-        {\n-            nDebit += GetDebit(txin, filter);\n-            if (!MoneyRange(nDebit))\n-                throw std::runtime_error(\"CWallet::GetDebit(): value out of range\");\n-        }\n-        return nDebit;\n-    }\n-    CAmount GetCredit(const CTransaction& tx, const isminefilter& filter) const\n-    {\n-        CAmount nCredit = 0;\n-        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-        {\n-            nCredit += GetCredit(txout, filter);\n-            if (!MoneyRange(nCredit))\n-                throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n-        }\n-        return nCredit;\n-    }\n-    CAmount GetChange(const CTransaction& tx) const\n-    {\n-        CAmount nChange = 0;\n-        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-        {\n-            nChange += GetChange(txout);\n-            if (!MoneyRange(nChange))\n-                throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n-        }\n-        return nChange;\n-    }\n+    bool IsFromMe(const CTransaction& tx) const;\n+    CAmount GetDebit(const CTransaction& tx, const isminefilter& filter) const;\n+    CAmount GetCredit(const CTransaction& tx, const isminefilter& filter) const;\n+    CAmount GetChange(const CTransaction& tx) const;\n     void SetBestChain(const CBlockLocator& loc);\n \n     DBErrors LoadWallet(bool& fFirstRunRet);"
      }
    ]
  },
  {
    "sha": "8a893c949bf6b011c8ae1645888576bf236db79c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YTg5M2M5NDliZjZiMDExYzhhZTE2NDU4ODg1NzZiZjIzNmRiNzlj",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-05T00:21:11Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-24T16:23:32Z"
      },
      "message": "Includes: Do not include main.h from any other header",
      "tree": {
        "sha": "f8cc7e9b3268bea6b3333a9bc9f3a3f48eb87fbb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8cc7e9b3268bea6b3333a9bc9f3a3f48eb87fbb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a893c949bf6b011c8ae1645888576bf236db79c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a893c949bf6b011c8ae1645888576bf236db79c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8a893c949bf6b011c8ae1645888576bf236db79c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a893c949bf6b011c8ae1645888576bf236db79c/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eca0b1ea62b2625d9df8daecacde96edeb486d65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eca0b1ea62b2625d9df8daecacde96edeb486d65",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eca0b1ea62b2625d9df8daecacde96edeb486d65"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 22,
      "deletions": 4
    },
    "files": [
      {
        "sha": "8e20836c65459ffe4eb46ff58eefdaaa83a844d5",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a893c949bf6b011c8ae1645888576bf236db79c/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a893c949bf6b011c8ae1645888576bf236db79c/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=8a893c949bf6b011c8ae1645888576bf236db79c",
        "patch": "@@ -10,6 +10,8 @@\n #include \"base58.h\"\n #include \"wallet/wallet.h\"\n \n+#include <boost/foreach.hpp>\n+\n #include <QFont>\n #include <QDebug>\n "
      },
      {
        "sha": "ad489de343f6e0efdbd9ae8ac777581b046f7b60",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a893c949bf6b011c8ae1645888576bf236db79c/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a893c949bf6b011c8ae1645888576bf236db79c/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=8a893c949bf6b011c8ae1645888576bf236db79c",
        "patch": "@@ -10,6 +10,7 @@\n \n #include \"base58.h\"\n #include \"chainparams.h\"\n+#include \"main.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n #include \"wallet/wallet.h\""
      },
      {
        "sha": "774667d4ac69e362be7d4e6b7acf1eb61262619e",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a893c949bf6b011c8ae1645888576bf236db79c/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a893c949bf6b011c8ae1645888576bf236db79c/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=8a893c949bf6b011c8ae1645888576bf236db79c",
        "patch": "@@ -17,6 +17,7 @@\n \n #include \"base58.h\"\n #include \"coincontrol.h\"\n+#include \"main.h\"\n #include \"ui_interface.h\"\n #include \"wallet/wallet.h\"\n "
      },
      {
        "sha": "ce166f367213737e97a6dea36fc7d3d4b9a5d4b6",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a893c949bf6b011c8ae1645888576bf236db79c/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a893c949bf6b011c8ae1645888576bf236db79c/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=8a893c949bf6b011c8ae1645888576bf236db79c",
        "patch": "@@ -12,6 +12,7 @@\n \n #include \"base58.h\"\n #include \"init.h\"\n+#include \"main.h\" // For strMessageMagic\n #include \"wallet/wallet.h\"\n \n #include <string>"
      },
      {
        "sha": "9db5ad0fd46169f6be6c0558f47acda017d8e5ce",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a893c949bf6b011c8ae1645888576bf236db79c/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a893c949bf6b011c8ae1645888576bf236db79c/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=8a893c949bf6b011c8ae1645888576bf236db79c",
        "patch": "@@ -5,11 +5,14 @@\n #include \"transactionrecord.h\"\n \n #include \"base58.h\"\n+#include \"main.h\"\n #include \"timedata.h\"\n #include \"wallet/wallet.h\"\n \n #include <stdint.h>\n \n+#include <boost/foreach.hpp>\n+\n /* Return positive answer if transaction should be shown in list.\n  */\n bool TransactionRecord::showTransaction(const CWalletTx &wtx)"
      },
      {
        "sha": "4d5e92cbd40a6c97c483e46392c7ebf5d1d6dfff",
        "filename": "src/test/rpc_wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a893c949bf6b011c8ae1645888576bf236db79c/src/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a893c949bf6b011c8ae1645888576bf236db79c/src/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_wallet_tests.cpp?ref=8a893c949bf6b011c8ae1645888576bf236db79c",
        "patch": "@@ -6,6 +6,7 @@\n #include \"rpcclient.h\"\n \n #include \"base58.h\"\n+#include \"main.h\"\n #include \"wallet/wallet.h\"\n \n #include \"test/test_bitcoin.h\""
      },
      {
        "sha": "f32815028912c9fbcf2119168285952e99bd3101",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a893c949bf6b011c8ae1645888576bf236db79c/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a893c949bf6b011c8ae1645888576bf236db79c/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=8a893c949bf6b011c8ae1645888576bf236db79c",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"txdb.h\"\n \n+#include \"main.h\"\n #include \"pow.h\"\n #include \"uint256.h\"\n "
      },
      {
        "sha": "1ce93969d8414fb442ff428179dbd70580da7dbe",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a893c949bf6b011c8ae1645888576bf236db79c/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a893c949bf6b011c8ae1645888576bf236db79c/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=8a893c949bf6b011c8ae1645888576bf236db79c",
        "patch": "@@ -6,15 +6,17 @@\n #ifndef BITCOIN_TXDB_H\n #define BITCOIN_TXDB_H\n \n+#include \"coins.h\"\n #include \"leveldbwrapper.h\"\n-#include \"main.h\"\n \n #include <map>\n #include <string>\n #include <utility>\n #include <vector>\n \n-class CCoins;\n+class CBlockFileInfo;\n+class CBlockIndex;\n+class CDiskTxPos;\n class uint256;\n \n //! -dbcache default (MiB)"
      },
      {
        "sha": "9318c1b2b150daee7ef893d3998a13b9f17e905b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a893c949bf6b011c8ae1645888576bf236db79c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a893c949bf6b011c8ae1645888576bf236db79c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=8a893c949bf6b011c8ae1645888576bf236db79c",
        "patch": "@@ -6,10 +6,11 @@\n #include \"amount.h\"\n #include \"base58.h\"\n #include \"core_io.h\"\n-#include \"rpcserver.h\"\n #include \"init.h\"\n+#include \"main.h\"\n #include \"net.h\"\n #include \"netbase.h\"\n+#include \"rpcserver.h\"\n #include \"timedata.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\""
      },
      {
        "sha": "09bcda577ed932c5baf248a5b5787349b7191fc0",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a893c949bf6b011c8ae1645888576bf236db79c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a893c949bf6b011c8ae1645888576bf236db79c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8a893c949bf6b011c8ae1645888576bf236db79c",
        "patch": "@@ -8,6 +8,7 @@\n #include \"base58.h\"\n #include \"checkpoints.h\"\n #include \"coincontrol.h\"\n+#include \"main.h\"\n #include \"net.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\""
      },
      {
        "sha": "4a13f02195fa9b63a37e5304eb179a837217da98",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a893c949bf6b011c8ae1645888576bf236db79c/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a893c949bf6b011c8ae1645888576bf236db79c/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=8a893c949bf6b011c8ae1645888576bf236db79c",
        "patch": "@@ -9,10 +9,11 @@\n #include \"amount.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n-#include \"main.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n+#include \"tinyformat.h\"\n #include \"ui_interface.h\"\n+#include \"utilstrencodings.h\"\n #include \"validationinterface.h\"\n #include \"wallet/crypter.h\"\n #include \"wallet/wallet_ismine.h\"\n@@ -49,10 +50,12 @@ static const CAmount nHighTransactionMaxFeeWarning = 100 * nHighTransactionFeeWa\n static const unsigned int MAX_FREE_TRANSACTION_CREATE_SIZE = 1000;\n \n class CAccountingEntry;\n+class CBlockIndex;\n class CCoinControl;\n class COutput;\n class CReserveKey;\n class CScript;\n+class CTxMemPool;\n class CWalletTx;\n \n /** (client) version numbers for particular wallet features */"
      },
      {
        "sha": "de56a2d1afffb7f88b7e114c20f4e44727114782",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a893c949bf6b011c8ae1645888576bf236db79c/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a893c949bf6b011c8ae1645888576bf236db79c/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=8a893c949bf6b011c8ae1645888576bf236db79c",
        "patch": "@@ -6,6 +6,7 @@\n #include \"wallet/walletdb.h\"\n \n #include \"base58.h\"\n+#include \"main.h\"\n #include \"protocol.h\"\n #include \"serialize.h\"\n #include \"sync.h\""
      }
    ]
  },
  {
    "sha": "8d2fbfa49141172e1c63f5ab7b684a1f9e210571",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDJmYmZhNDkxNDExNzJlMWM2M2Y1YWI3YjY4NGExZjllMjEwNTcx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-24T17:06:54Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-24T17:12:56Z"
      },
      "message": "Merge pull request #5681\n\n8a893c9 Includes: Do not include main.h from any other header (Jorge Tim\u00f3n)\neca0b1e Includes: MOVEONLY: move more method definitions out of wallet.h (Jorge Tim\u00f3n)\n26c16d9 Includes: Refactor: Move CValidationInterface and CMainSignals out of main (Jorge Tim\u00f3n)",
      "tree": {
        "sha": "f8cc7e9b3268bea6b3333a9bc9f3a3f48eb87fbb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8cc7e9b3268bea6b3333a9bc9f3a3f48eb87fbb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d2fbfa49141172e1c63f5ab7b684a1f9e210571",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVEZsYAAoJEHSBCwEjRsmmE7MH/j/PtfDw327NWu+ScPzrWo98\nqejqpdxRcUSJTi1fTkb/OYAwRC1K2eXAuot1l4B/RQ0GeqJlS32K79AQETfaZKAN\nOWt17Ysjt6OL5MZivA0pqQlEdgxg8sMsxEdD7g0ai0jKylmLEku90L6g8Iz+IxvB\nr4sBJP0JsKnxXs5SFFv4Ar2cEaKuyA42gBU7IRQgW5O/j0dVd2WYfhsI8Njta4yS\nLKU8rz76rHq+n3VMDEkQUy97cg08f1nlQy6vcmYK0R1DeZjgjMNPZBT3T2leJ/3c\niODznjOPwaXT1j9l+jtZMl0tbMwhKN/GNM61jsrAWHGxV8oI45V9EyaHEFDTQH0=\n=MDUe\n-----END PGP SIGNATURE-----",
        "payload": "tree f8cc7e9b3268bea6b3333a9bc9f3a3f48eb87fbb\nparent 22cfe23196c5006d6dd79e1e1a24323148246bde\nparent 8a893c949bf6b011c8ae1645888576bf236db79c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1427216814 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1427217176 +0100\n\nMerge pull request #5681\n\n8a893c9 Includes: Do not include main.h from any other header (Jorge Tim\u00f3n)\neca0b1e Includes: MOVEONLY: move more method definitions out of wallet.h (Jorge Tim\u00f3n)\n26c16d9 Includes: Refactor: Move CValidationInterface and CMainSignals out of main (Jorge Tim\u00f3n)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d2fbfa49141172e1c63f5ab7b684a1f9e210571",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d2fbfa49141172e1c63f5ab7b684a1f9e210571",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22cfe23196c5006d6dd79e1e1a24323148246bde",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22cfe23196c5006d6dd79e1e1a24323148246bde",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22cfe23196c5006d6dd79e1e1a24323148246bde"
      },
      {
        "sha": "8a893c949bf6b011c8ae1645888576bf236db79c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a893c949bf6b011c8ae1645888576bf236db79c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a893c949bf6b011c8ae1645888576bf236db79c"
      }
    ],
    "stats": {
      "total": 381,
      "additions": 221,
      "deletions": 160
    },
    "files": [
      {
        "sha": "1b3e0d9d5b67e9c5c783d586463cdc264bbfc982",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=8d2fbfa49141172e1c63f5ab7b684a1f9e210571",
        "patch": "@@ -138,6 +138,7 @@ BITCOIN_CORE_H = \\\n   utilmoneystr.h \\\n   utilstrencodings.h \\\n   utiltime.h \\\n+  validationinterface.h \\\n   version.h \\\n   wallet/crypter.h \\\n   wallet/walletdb.h \\\n@@ -191,6 +192,7 @@ libbitcoin_server_a_SOURCES = \\\n   timedata.cpp \\\n   txdb.cpp \\\n   txmempool.cpp \\\n+  validationinterface.cpp \\\n   $(JSON_H) \\\n   $(BITCOIN_CORE_H)\n "
      },
      {
        "sha": "0ffacc338e61f1525ce97b7e4cb4047b143881d9",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 69,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8d2fbfa49141172e1c63f5ab7b684a1f9e210571",
        "patch": "@@ -5,9 +5,9 @@\n \n #include \"main.h\"\n \n-#include \"arith_uint256.h\"\n #include \"addrman.h\"\n #include \"alert.h\"\n+#include \"arith_uint256.h\"\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"checkqueue.h\"\n@@ -21,6 +21,7 @@\n #include \"undo.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n+#include \"validationinterface.h\"\n \n #include <sstream>\n \n@@ -156,68 +157,6 @@ namespace {\n     set<int> setDirtyFileInfo;\n } // anon namespace\n \n-//////////////////////////////////////////////////////////////////////////////\n-//\n-// dispatching functions\n-//\n-\n-// These functions dispatch to one or all registered wallets\n-\n-namespace {\n-\n-struct CMainSignals {\n-    /** Notifies listeners of updated transaction data (transaction, and optionally the block it is found in. */\n-    boost::signals2::signal<void (const CTransaction &, const CBlock *)> SyncTransaction;\n-    /** Notifies listeners of an erased transaction (currently disabled, requires transaction replacement). */\n-    boost::signals2::signal<void (const uint256 &)> EraseTransaction;\n-    /** Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible). */\n-    boost::signals2::signal<void (const uint256 &)> UpdatedTransaction;\n-    /** Notifies listeners of a new active block chain. */\n-    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n-    /** Notifies listeners about an inventory item being seen on the network. */\n-    boost::signals2::signal<void (const uint256 &)> Inventory;\n-    /** Tells listeners to broadcast their data. */\n-    boost::signals2::signal<void ()> Broadcast;\n-    /** Notifies listeners of a block validation result */\n-    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n-} g_signals;\n-\n-} // anon namespace\n-\n-void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n-    g_signals.SyncTransaction.connect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2));\n-    g_signals.EraseTransaction.connect(boost::bind(&CValidationInterface::EraseFromWallet, pwalletIn, _1));\n-    g_signals.UpdatedTransaction.connect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n-    g_signals.SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n-    g_signals.Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n-    g_signals.Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn));\n-    g_signals.BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n-}\n-\n-void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n-    g_signals.BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n-    g_signals.Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn));\n-    g_signals.Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n-    g_signals.SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n-    g_signals.UpdatedTransaction.disconnect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n-    g_signals.EraseTransaction.disconnect(boost::bind(&CValidationInterface::EraseFromWallet, pwalletIn, _1));\n-    g_signals.SyncTransaction.disconnect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2));\n-}\n-\n-void UnregisterAllValidationInterfaces() {\n-    g_signals.BlockChecked.disconnect_all_slots();\n-    g_signals.Broadcast.disconnect_all_slots();\n-    g_signals.Inventory.disconnect_all_slots();\n-    g_signals.SetBestChain.disconnect_all_slots();\n-    g_signals.UpdatedTransaction.disconnect_all_slots();\n-    g_signals.EraseTransaction.disconnect_all_slots();\n-    g_signals.SyncTransaction.disconnect_all_slots();\n-}\n-\n-void SyncWithWallets(const CTransaction &tx, const CBlock *pblock) {\n-    g_signals.SyncTransaction(tx, pblock);\n-}\n-\n //////////////////////////////////////////////////////////////////////////////\n //\n // Registration of network node signals.\n@@ -1897,7 +1836,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     // Watch for changes to the previous coinbase transaction.\n     static uint256 hashPrevBestCoinBase;\n-    g_signals.UpdatedTransaction(hashPrevBestCoinBase);\n+    GetMainSignals().UpdatedTransaction(hashPrevBestCoinBase);\n     hashPrevBestCoinBase = block.vtx[0].GetHash();\n \n     int64_t nTime4 = GetTimeMicros(); nTimeCallbacks += nTime4 - nTime3;\n@@ -1956,7 +1895,7 @@ bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode) {\n             return state.Abort(\"Failed to write to coin database\");\n         // Update best block in wallet (so we can detect restored wallets).\n         if (mode != FLUSH_STATE_IF_NEEDED) {\n-            g_signals.SetBestChain(chainActive.GetLocator());\n+            GetMainSignals().SetBestChain(chainActive.GetLocator());\n         }\n         nLastWrite = GetTimeMicros();\n     }\n@@ -2080,7 +2019,7 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n         CCoinsViewCache view(pcoinsTip);\n         CInv inv(MSG_BLOCK, pindexNew->GetBlockHash());\n         bool rv = ConnectBlock(*pblock, state, pindexNew, view);\n-        g_signals.BlockChecked(*pblock, state);\n+        GetMainSignals().BlockChecked(*pblock, state);\n         if (!rv) {\n             if (state.IsInvalid())\n                 InvalidBlockFound(pindexNew, state);\n@@ -3471,7 +3410,7 @@ void static ProcessGetData(CNode* pfrom)\n             }\n \n             // Track requests for our stuff.\n-            g_signals.Inventory(inv.hash);\n+            GetMainSignals().Inventory(inv.hash);\n \n             if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK)\n                 break;\n@@ -3765,7 +3704,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             }\n \n             // Track requests for our stuff\n-            g_signals.Inventory(inv.hash);\n+            GetMainSignals().Inventory(inv.hash);\n \n             if (pfrom->nSendSize > (SendBufferSize() * 2)) {\n                 Misbehaving(pfrom->GetId(), 50);\n@@ -4536,7 +4475,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         // transactions become unconfirmed and spams other nodes.\n         if (!fReindex && !fImporting && !IsInitialBlockDownload())\n         {\n-            g_signals.Broadcast();\n+            GetMainSignals().Broadcast();\n         }\n \n         //"
      },
      {
        "sha": "b0bab6f7bf54bdafec8e6d6e5887e03769dba65f",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 25,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=8d2fbfa49141172e1c63f5ab7b684a1f9e210571",
        "patch": "@@ -133,15 +133,6 @@ extern CBlockIndex *pindexBestHeader;\n /** Minimum disk space required - used in CheckDiskSpace() */\n static const uint64_t nMinDiskSpace = 52428800;\n \n-/** Register a wallet to receive updates from core */\n-void RegisterValidationInterface(CValidationInterface* pwalletIn);\n-/** Unregister a wallet from core */\n-void UnregisterValidationInterface(CValidationInterface* pwalletIn);\n-/** Unregister all wallets from core */\n-void UnregisterAllValidationInterfaces();\n-/** Push an updated transaction to all registered wallets */\n-void SyncWithWallets(const CTransaction& tx, const CBlock* pblock = NULL);\n-\n /** Register with a network node to receive its signals */\n void RegisterNodeSignals(CNodeSignals& nodeSignals);\n /** Unregister a network node */\n@@ -152,7 +143,7 @@ void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  * \n- * @param[out]  state   This may be set to an Error state if any error occurred processing it, including during validation/connection/etc of otherwise unrelated blocks during reorganisation; or it may be set to an Invalid state if pblock is itself invalid (but this is not guaranteed even when the block is checked). If you want to *possibly* get feedback on whether pblock is valid, you must also install a CValidationInterface - this will have its BlockChecked method called whenever *any* block completes validation.\n+ * @param[out]  state   This may be set to an Error state if any error occurred processing it, including during validation/connection/etc of otherwise unrelated blocks during reorganisation; or it may be set to an Invalid state if pblock is itself invalid (but this is not guaranteed even when the block is checked). If you want to *possibly* get feedback on whether pblock is valid, you must also install a CValidationInterface (see validationinterface.h) - this will have its BlockChecked method called whenever *any* block completes validation.\n  * @param[in]   pfrom   The node which we are receiving the block from; it is added to mapBlockSource and may be penalised if the block is invalid.\n  * @param[in]   pblock  The block we want to process.\n  * @param[out]  dbp     If pblock is stored to disk (or already there), this will be set to its location.\n@@ -512,19 +503,4 @@ extern CCoinsViewCache *pcoinsTip;\n /** Global variable that points to the active block tree (protected by cs_main) */\n extern CBlockTreeDB *pblocktree;\n \n-\n-class CValidationInterface {\n-protected:\n-    virtual void SyncTransaction(const CTransaction &tx, const CBlock *pblock) {};\n-    virtual void EraseFromWallet(const uint256 &hash) {};\n-    virtual void SetBestChain(const CBlockLocator &locator) {};\n-    virtual void UpdatedTransaction(const uint256 &hash) {};\n-    virtual void Inventory(const uint256 &hash) {};\n-    virtual void ResendWalletTransactions() {};\n-    virtual void BlockChecked(const CBlock&, const CValidationState&) {};\n-    friend void ::RegisterValidationInterface(CValidationInterface*);\n-    friend void ::UnregisterValidationInterface(CValidationInterface*);\n-    friend void ::UnregisterAllValidationInterfaces();\n-};\n-\n #endif // BITCOIN_MAIN_H"
      },
      {
        "sha": "8e20836c65459ffe4eb46ff58eefdaaa83a844d5",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=8d2fbfa49141172e1c63f5ab7b684a1f9e210571",
        "patch": "@@ -10,6 +10,8 @@\n #include \"base58.h\"\n #include \"wallet/wallet.h\"\n \n+#include <boost/foreach.hpp>\n+\n #include <QFont>\n #include <QDebug>\n "
      },
      {
        "sha": "ad489de343f6e0efdbd9ae8ac777581b046f7b60",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=8d2fbfa49141172e1c63f5ab7b684a1f9e210571",
        "patch": "@@ -10,6 +10,7 @@\n \n #include \"base58.h\"\n #include \"chainparams.h\"\n+#include \"main.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n #include \"wallet/wallet.h\""
      },
      {
        "sha": "774667d4ac69e362be7d4e6b7acf1eb61262619e",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=8d2fbfa49141172e1c63f5ab7b684a1f9e210571",
        "patch": "@@ -17,6 +17,7 @@\n \n #include \"base58.h\"\n #include \"coincontrol.h\"\n+#include \"main.h\"\n #include \"ui_interface.h\"\n #include \"wallet/wallet.h\"\n "
      },
      {
        "sha": "ce166f367213737e97a6dea36fc7d3d4b9a5d4b6",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=8d2fbfa49141172e1c63f5ab7b684a1f9e210571",
        "patch": "@@ -12,6 +12,7 @@\n \n #include \"base58.h\"\n #include \"init.h\"\n+#include \"main.h\" // For strMessageMagic\n #include \"wallet/wallet.h\"\n \n #include <string>"
      },
      {
        "sha": "9db5ad0fd46169f6be6c0558f47acda017d8e5ce",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=8d2fbfa49141172e1c63f5ab7b684a1f9e210571",
        "patch": "@@ -5,11 +5,14 @@\n #include \"transactionrecord.h\"\n \n #include \"base58.h\"\n+#include \"main.h\"\n #include \"timedata.h\"\n #include \"wallet/wallet.h\"\n \n #include <stdint.h>\n \n+#include <boost/foreach.hpp>\n+\n /* Return positive answer if transaction should be shown in list.\n  */\n bool TransactionRecord::showTransaction(const CWalletTx &wtx)"
      },
      {
        "sha": "4d5e92cbd40a6c97c483e46392c7ebf5d1d6dfff",
        "filename": "src/test/rpc_wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_wallet_tests.cpp?ref=8d2fbfa49141172e1c63f5ab7b684a1f9e210571",
        "patch": "@@ -6,6 +6,7 @@\n #include \"rpcclient.h\"\n \n #include \"base58.h\"\n+#include \"main.h\"\n #include \"wallet/wallet.h\"\n \n #include \"test/test_bitcoin.h\""
      },
      {
        "sha": "f32815028912c9fbcf2119168285952e99bd3101",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=8d2fbfa49141172e1c63f5ab7b684a1f9e210571",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"txdb.h\"\n \n+#include \"main.h\"\n #include \"pow.h\"\n #include \"uint256.h\"\n "
      },
      {
        "sha": "1ce93969d8414fb442ff428179dbd70580da7dbe",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=8d2fbfa49141172e1c63f5ab7b684a1f9e210571",
        "patch": "@@ -6,15 +6,17 @@\n #ifndef BITCOIN_TXDB_H\n #define BITCOIN_TXDB_H\n \n+#include \"coins.h\"\n #include \"leveldbwrapper.h\"\n-#include \"main.h\"\n \n #include <map>\n #include <string>\n #include <utility>\n #include <vector>\n \n-class CCoins;\n+class CBlockFileInfo;\n+class CBlockIndex;\n+class CDiskTxPos;\n class uint256;\n \n //! -dbcache default (MiB)"
      },
      {
        "sha": "ae4cd3c592a87a864ac59a9986ba3d1fcb54f2a6",
        "filename": "src/validationinterface.cpp",
        "status": "added",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=8d2fbfa49141172e1c63f5ab7b684a1f9e210571",
        "patch": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"validationinterface.h\"\n+\n+static CMainSignals g_signals;\n+\n+CMainSignals& GetMainSignals()\n+{\n+    return g_signals;\n+}\n+\n+void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n+    g_signals.SyncTransaction.connect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2));\n+    g_signals.EraseTransaction.connect(boost::bind(&CValidationInterface::EraseFromWallet, pwalletIn, _1));\n+    g_signals.UpdatedTransaction.connect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n+    g_signals.SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n+    g_signals.Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n+    g_signals.Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn));\n+    g_signals.BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n+}\n+\n+void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n+    g_signals.BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n+    g_signals.Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn));\n+    g_signals.Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n+    g_signals.SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n+    g_signals.UpdatedTransaction.disconnect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n+    g_signals.EraseTransaction.disconnect(boost::bind(&CValidationInterface::EraseFromWallet, pwalletIn, _1));\n+    g_signals.SyncTransaction.disconnect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2));\n+}\n+\n+void UnregisterAllValidationInterfaces() {\n+    g_signals.BlockChecked.disconnect_all_slots();\n+    g_signals.Broadcast.disconnect_all_slots();\n+    g_signals.Inventory.disconnect_all_slots();\n+    g_signals.SetBestChain.disconnect_all_slots();\n+    g_signals.UpdatedTransaction.disconnect_all_slots();\n+    g_signals.EraseTransaction.disconnect_all_slots();\n+    g_signals.SyncTransaction.disconnect_all_slots();\n+}\n+\n+void SyncWithWallets(const CTransaction &tx, const CBlock *pblock) {\n+    g_signals.SyncTransaction(tx, pblock);\n+}"
      },
      {
        "sha": "b21b6e578259c38f3b0cb5da88b7a0a0dff949ba",
        "filename": "src/validationinterface.h",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=8d2fbfa49141172e1c63f5ab7b684a1f9e210571",
        "patch": "@@ -0,0 +1,62 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_VALIDATIONINTERFACE_H\n+#define BITCOIN_VALIDATIONINTERFACE_H\n+\n+#include <boost/signals2/signal.hpp>\n+\n+class CBlock;\n+class CBlockLocator;\n+class CTransaction;\n+class CValidationInterface;\n+class CValidationState;\n+class uint256;\n+\n+// These functions dispatch to one or all registered wallets\n+\n+/** Register a wallet to receive updates from core */\n+void RegisterValidationInterface(CValidationInterface* pwalletIn);\n+/** Unregister a wallet from core */\n+void UnregisterValidationInterface(CValidationInterface* pwalletIn);\n+/** Unregister all wallets from core */\n+void UnregisterAllValidationInterfaces();\n+/** Push an updated transaction to all registered wallets */\n+void SyncWithWallets(const CTransaction& tx, const CBlock* pblock = NULL);\n+\n+class CValidationInterface {\n+protected:\n+    virtual void SyncTransaction(const CTransaction &tx, const CBlock *pblock) {};\n+    virtual void EraseFromWallet(const uint256 &hash) {};\n+    virtual void SetBestChain(const CBlockLocator &locator) {};\n+    virtual void UpdatedTransaction(const uint256 &hash) {};\n+    virtual void Inventory(const uint256 &hash) {};\n+    virtual void ResendWalletTransactions() {};\n+    virtual void BlockChecked(const CBlock&, const CValidationState&) {};\n+    friend void ::RegisterValidationInterface(CValidationInterface*);\n+    friend void ::UnregisterValidationInterface(CValidationInterface*);\n+    friend void ::UnregisterAllValidationInterfaces();\n+};\n+\n+struct CMainSignals {\n+    /** Notifies listeners of updated transaction data (transaction, and optionally the block it is found in. */\n+    boost::signals2::signal<void (const CTransaction &, const CBlock *)> SyncTransaction;\n+    /** Notifies listeners of an erased transaction (currently disabled, requires transaction replacement). */\n+    boost::signals2::signal<void (const uint256 &)> EraseTransaction;\n+    /** Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible). */\n+    boost::signals2::signal<void (const uint256 &)> UpdatedTransaction;\n+    /** Notifies listeners of a new active block chain. */\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    /** Notifies listeners about an inventory item being seen on the network. */\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    /** Tells listeners to broadcast their data. */\n+    boost::signals2::signal<void ()> Broadcast;\n+    /** Notifies listeners of a block validation result */\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+};\n+\n+CMainSignals& GetMainSignals();\n+\n+#endif // BITCOIN_VALIDATIONINTERFACE_H"
      },
      {
        "sha": "9318c1b2b150daee7ef893d3998a13b9f17e905b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=8d2fbfa49141172e1c63f5ab7b684a1f9e210571",
        "patch": "@@ -6,10 +6,11 @@\n #include \"amount.h\"\n #include \"base58.h\"\n #include \"core_io.h\"\n-#include \"rpcserver.h\"\n #include \"init.h\"\n+#include \"main.h\"\n #include \"net.h\"\n #include \"netbase.h\"\n+#include \"rpcserver.h\"\n #include \"timedata.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\""
      },
      {
        "sha": "09bcda577ed932c5baf248a5b5787349b7191fc0",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 69,
        "deletions": 0,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8d2fbfa49141172e1c63f5ab7b684a1f9e210571",
        "patch": "@@ -8,6 +8,7 @@\n #include \"base58.h\"\n #include \"checkpoints.h\"\n #include \"coincontrol.h\"\n+#include \"main.h\"\n #include \"net.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n@@ -817,6 +818,18 @@ CAmount CWallet::GetDebit(const CTxIn &txin, const isminefilter& filter) const\n     return 0;\n }\n \n+isminetype CWallet::IsMine(const CTxOut& txout) const\n+{\n+    return ::IsMine(*this, txout.scriptPubKey);\n+}\n+\n+CAmount CWallet::GetCredit(const CTxOut& txout, const isminefilter& filter) const\n+{\n+    if (!MoneyRange(txout.nValue))\n+        throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n+    return ((IsMine(txout) & filter) ? txout.nValue : 0);\n+}\n+\n bool CWallet::IsChange(const CTxOut& txout) const\n {\n     // TODO: fix handling of 'change' outputs. The assumption is that any\n@@ -839,6 +852,62 @@ bool CWallet::IsChange(const CTxOut& txout) const\n     return false;\n }\n \n+CAmount CWallet::GetChange(const CTxOut& txout) const\n+{\n+    if (!MoneyRange(txout.nValue))\n+        throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n+    return (IsChange(txout) ? txout.nValue : 0);\n+}\n+\n+bool CWallet::IsMine(const CTransaction& tx) const\n+{\n+    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+        if (IsMine(txout))\n+            return true;\n+    return false;\n+}\n+\n+bool CWallet::IsFromMe(const CTransaction& tx) const\n+{\n+    return (GetDebit(tx, ISMINE_ALL) > 0);\n+}\n+\n+CAmount CWallet::GetDebit(const CTransaction& tx, const isminefilter& filter) const\n+{\n+    CAmount nDebit = 0;\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    {\n+        nDebit += GetDebit(txin, filter);\n+        if (!MoneyRange(nDebit))\n+            throw std::runtime_error(\"CWallet::GetDebit(): value out of range\");\n+    }\n+    return nDebit;\n+}\n+\n+CAmount CWallet::GetCredit(const CTransaction& tx, const isminefilter& filter) const\n+{\n+    CAmount nCredit = 0;\n+    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    {\n+        nCredit += GetCredit(txout, filter);\n+        if (!MoneyRange(nCredit))\n+            throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n+    }\n+    return nCredit;\n+}\n+\n+CAmount CWallet::GetChange(const CTransaction& tx) const\n+{\n+    CAmount nChange = 0;\n+    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    {\n+        nChange += GetChange(txout);\n+        if (!MoneyRange(nChange))\n+            throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n+    }\n+    return nChange;\n+}\n+\n int64_t CWalletTx::GetTxTime() const\n {\n     int64_t n = nTimeSmart;"
      },
      {
        "sha": "4a13f02195fa9b63a37e5304eb179a837217da98",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 15,
        "deletions": 63,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=8d2fbfa49141172e1c63f5ab7b684a1f9e210571",
        "patch": "@@ -7,12 +7,14 @@\n #define BITCOIN_WALLET_H\n \n #include \"amount.h\"\n-#include \"primitives/block.h\"\n-#include \"primitives/transaction.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n-#include \"main.h\"\n+#include \"primitives/block.h\"\n+#include \"primitives/transaction.h\"\n+#include \"tinyformat.h\"\n #include \"ui_interface.h\"\n+#include \"utilstrencodings.h\"\n+#include \"validationinterface.h\"\n #include \"wallet/crypter.h\"\n #include \"wallet/wallet_ismine.h\"\n #include \"wallet/walletdb.h\"\n@@ -48,10 +50,12 @@ static const CAmount nHighTransactionMaxFeeWarning = 100 * nHighTransactionFeeWa\n static const unsigned int MAX_FREE_TRANSACTION_CREATE_SIZE = 1000;\n \n class CAccountingEntry;\n+class CBlockIndex;\n class CCoinControl;\n class COutput;\n class CReserveKey;\n class CScript;\n+class CTxMemPool;\n class CWalletTx;\n \n /** (client) version numbers for particular wallet features */\n@@ -640,68 +644,16 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     isminetype IsMine(const CTxIn& txin) const;\n     CAmount GetDebit(const CTxIn& txin, const isminefilter& filter) const;\n-    isminetype IsMine(const CTxOut& txout) const\n-    {\n-        return ::IsMine(*this, txout.scriptPubKey);\n-    }\n-    CAmount GetCredit(const CTxOut& txout, const isminefilter& filter) const\n-    {\n-        if (!MoneyRange(txout.nValue))\n-            throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n-        return ((IsMine(txout) & filter) ? txout.nValue : 0);\n-    }\n+    isminetype IsMine(const CTxOut& txout) const;\n+    CAmount GetCredit(const CTxOut& txout, const isminefilter& filter) const;\n     bool IsChange(const CTxOut& txout) const;\n-    CAmount GetChange(const CTxOut& txout) const\n-    {\n-        if (!MoneyRange(txout.nValue))\n-            throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n-        return (IsChange(txout) ? txout.nValue : 0);\n-    }\n-    bool IsMine(const CTransaction& tx) const\n-    {\n-        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-            if (IsMine(txout))\n-                return true;\n-        return false;\n-    }\n+    CAmount GetChange(const CTxOut& txout) const;\n+    bool IsMine(const CTransaction& tx) const;\n     /** should probably be renamed to IsRelevantToMe */\n-    bool IsFromMe(const CTransaction& tx) const\n-    {\n-        return (GetDebit(tx, ISMINE_ALL) > 0);\n-    }\n-    CAmount GetDebit(const CTransaction& tx, const isminefilter& filter) const\n-    {\n-        CAmount nDebit = 0;\n-        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-        {\n-            nDebit += GetDebit(txin, filter);\n-            if (!MoneyRange(nDebit))\n-                throw std::runtime_error(\"CWallet::GetDebit(): value out of range\");\n-        }\n-        return nDebit;\n-    }\n-    CAmount GetCredit(const CTransaction& tx, const isminefilter& filter) const\n-    {\n-        CAmount nCredit = 0;\n-        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-        {\n-            nCredit += GetCredit(txout, filter);\n-            if (!MoneyRange(nCredit))\n-                throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n-        }\n-        return nCredit;\n-    }\n-    CAmount GetChange(const CTransaction& tx) const\n-    {\n-        CAmount nChange = 0;\n-        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-        {\n-            nChange += GetChange(txout);\n-            if (!MoneyRange(nChange))\n-                throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n-        }\n-        return nChange;\n-    }\n+    bool IsFromMe(const CTransaction& tx) const;\n+    CAmount GetDebit(const CTransaction& tx, const isminefilter& filter) const;\n+    CAmount GetCredit(const CTransaction& tx, const isminefilter& filter) const;\n+    CAmount GetChange(const CTransaction& tx) const;\n     void SetBestChain(const CBlockLocator& loc);\n \n     DBErrors LoadWallet(bool& fFirstRunRet);"
      },
      {
        "sha": "de56a2d1afffb7f88b7e114c20f4e44727114782",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d2fbfa49141172e1c63f5ab7b684a1f9e210571/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=8d2fbfa49141172e1c63f5ab7b684a1f9e210571",
        "patch": "@@ -6,6 +6,7 @@\n #include \"wallet/walletdb.h\"\n \n #include \"base58.h\"\n+#include \"main.h\"\n #include \"protocol.h\"\n #include \"serialize.h\"\n #include \"sync.h\""
      }
    ]
  },
  {
    "sha": "cbb2cf5522983e4a952cfb25e577b1998a06c769",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYmIyY2Y1NTIyOTgzZTRhOTUyY2ZiMjVlNTc3YjE5OThhMDZjNzY5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-24T21:14:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-24T21:15:04Z"
      },
      "message": "Fix --disable-wallet build after merge of #5681",
      "tree": {
        "sha": "e1f71745bfee9aa34fb2756a1a45ec2c9f5c38c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e1f71745bfee9aa34fb2756a1a45ec2c9f5c38c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cbb2cf5522983e4a952cfb25e577b1998a06c769",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVEdPdAAoJEHSBCwEjRsmmQvoH/3iPB1EGAUqzGClVvKL8tKtt\nzslDfO0QCiRYFDLHwMxQ10beclg59cpxZsyn3RrWbAgEVd8VPHQLhPF3NGz5h7JV\nzZB2zmdGCqYZluDH/2b5UidGDOf30jIH7GZZ1kWNYZA9VFaSgunW7vCRJmd2+i3n\n++uffUotLe8M/S9eljriI1a7YFiv0pIA5YQtgUOIN6LXJRZfVPL0ajADYKAcMMCK\njbS00rnhz9WgaXaEy9Jz3toMIbiVI1LCLGUSi1Hj3Q6JKDrFIa+MONsrJg/tiHIC\nThxTELMRGZZLCGu2TV3iWArweF7tgYAh439wPRguzAokEwQi9FxHXqRMybb1vQ4=\n=OyNC\n-----END PGP SIGNATURE-----",
        "payload": "tree e1f71745bfee9aa34fb2756a1a45ec2c9f5c38c0\nparent 8d2fbfa49141172e1c63f5ab7b684a1f9e210571\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1427231684 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1427231704 +0100\n\nFix --disable-wallet build after merge of #5681\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbb2cf5522983e4a952cfb25e577b1998a06c769",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cbb2cf5522983e4a952cfb25e577b1998a06c769",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbb2cf5522983e4a952cfb25e577b1998a06c769/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d2fbfa49141172e1c63f5ab7b684a1f9e210571",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d2fbfa49141172e1c63f5ab7b684a1f9e210571",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d2fbfa49141172e1c63f5ab7b684a1f9e210571"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2a13af6690ac18054d7a4202a6098fa51dddf607",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbb2cf5522983e4a952cfb25e577b1998a06c769/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbb2cf5522983e4a952cfb25e577b1998a06c769/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=cbb2cf5522983e4a952cfb25e577b1998a06c769",
        "patch": "@@ -23,6 +23,7 @@\n #include \"ui_interface.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n+#include \"validationinterface.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet/wallet.h\"\n #include \"wallet/walletdb.h\""
      },
      {
        "sha": "17db221cb4ceb4313f22ae74cc530e0ac6b97bff",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbb2cf5522983e4a952cfb25e577b1998a06c769/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbb2cf5522983e4a952cfb25e577b1998a06c769/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=cbb2cf5522983e4a952cfb25e577b1998a06c769",
        "patch": "@@ -13,6 +13,7 @@\n #include \"pow.h\"\n #include \"rpcserver.h\"\n #include \"util.h\"\n+#include \"validationinterface.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet/db.h\"\n #include \"wallet/wallet.h\""
      }
    ]
  },
  {
    "sha": "bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDAwNjExMGZiNTFmMWZjMGNiYmVlZjNlZDZlYWFlNjZiMjk2ZDhj",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-11T10:58:11Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-25T19:39:26Z"
      },
      "message": "Consensus: Refactor: Introduce Consensus::Params class",
      "tree": {
        "sha": "303e9ec0bd25fc3c2d15fe33004dcb7459f50b13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/303e9ec0bd25fc3c2d15fe33004dcb7459f50b13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cbb2cf5522983e4a952cfb25e577b1998a06c769",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbb2cf5522983e4a952cfb25e577b1998a06c769",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cbb2cf5522983e4a952cfb25e577b1998a06c769"
      }
    ],
    "stats": {
      "total": 119,
      "additions": 70,
      "deletions": 49
    },
    "files": [
      {
        "sha": "37184b62863644ab8ffd6e4596897e2ee0421aa4",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c",
        "patch": "@@ -87,6 +87,7 @@ BITCOIN_CORE_H = \\\n   coins.h \\\n   compat.h \\\n   compressor.h \\\n+  consensus/params.h \\\n   core_io.h \\\n   wallet/db.h \\\n   eccryptoverify.h \\"
      },
      {
        "sha": "3e20d9f8f2e4a912acfb786404242f6d42687cfc",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 28,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c",
        "patch": "@@ -101,6 +101,14 @@ class CMainParams : public CChainParams {\n public:\n     CMainParams() {\n         strNetworkID = \"main\";\n+        consensus.nSubsidyHalvingInterval = 210000;\n+        consensus.nMajorityEnforceBlockUpgrade = 750;\n+        consensus.nMajorityRejectBlockOutdated = 950;\n+        consensus.nMajorityWindow = 1000;\n+        consensus.powLimit = ~arith_uint256(0) >> 32;\n+        consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n+        consensus.nPowTargetSpacing = 10 * 60;\n+        consensus.fPowAllowMinDifficultyBlocks = false;\n         /** \n          * The message start string is designed to be unlikely to occur in normal data.\n          * The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n@@ -112,14 +120,7 @@ class CMainParams : public CChainParams {\n         pchMessageStart[3] = 0xd9;\n         vAlertPubKey = ParseHex(\"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\");\n         nDefaultPort = 8333;\n-        bnProofOfWorkLimit = ~arith_uint256(0) >> 32;\n-        nSubsidyHalvingInterval = 210000;\n-        nEnforceBlockUpgradeMajority = 750;\n-        nRejectBlockOutdatedMajority = 950;\n-        nToCheckBlockUpgradeMajority = 1000;\n         nMinerThreads = 0;\n-        nTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n-        nTargetSpacing = 10 * 60;\n \n         /**\n          * Build the genesis block. Note that the output of the genesis coinbase cannot\n@@ -146,8 +147,8 @@ class CMainParams : public CChainParams {\n         genesis.nBits    = 0x1d00ffff;\n         genesis.nNonce   = 2083236893;\n \n-        hashGenesisBlock = genesis.GetHash();\n-        assert(hashGenesisBlock == uint256S(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"));\n+        consensus.hashGenesisBlock = genesis.GetHash();\n+        assert(consensus.hashGenesisBlock == uint256S(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"));\n         assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n \n         vSeeds.push_back(CDNSSeedData(\"bitcoin.sipa.be\", \"seed.bitcoin.sipa.be\"));\n@@ -167,7 +168,6 @@ class CMainParams : public CChainParams {\n         fRequireRPCPassword = true;\n         fMiningRequiresPeers = true;\n         fDefaultCheckMemPool = false;\n-        fAllowMinDifficultyBlocks = false;\n         fRequireStandard = true;\n         fMineBlocksOnDemand = false;\n         fTestnetToBeDeprecatedFieldRPC = false;\n@@ -187,24 +187,23 @@ class CTestNetParams : public CMainParams {\n public:\n     CTestNetParams() {\n         strNetworkID = \"test\";\n+        consensus.nMajorityEnforceBlockUpgrade = 51;\n+        consensus.nMajorityRejectBlockOutdated = 75;\n+        consensus.nMajorityWindow = 100;\n+        consensus.fPowAllowMinDifficultyBlocks = true;\n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n         pchMessageStart[2] = 0x09;\n         pchMessageStart[3] = 0x07;\n         vAlertPubKey = ParseHex(\"04302390343f91cc401d56d68b123028bf52e5fca1939df127f63c6467cdf9c8e2c14b61104cf817d0b780da337893ecc4aaff1309e536162dabbdb45200ca2b0a\");\n         nDefaultPort = 18333;\n-        nEnforceBlockUpgradeMajority = 51;\n-        nRejectBlockOutdatedMajority = 75;\n-        nToCheckBlockUpgradeMajority = 100;\n         nMinerThreads = 0;\n-        nTargetTimespan = 14 * 24 * 60 * 60; //! two weeks\n-        nTargetSpacing = 10 * 60;\n \n         //! Modify the testnet genesis block so the timestamp is valid for a later start.\n         genesis.nTime = 1296688602;\n         genesis.nNonce = 414098458;\n-        hashGenesisBlock = genesis.GetHash();\n-        assert(hashGenesisBlock == uint256S(\"0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\"));\n+        consensus.hashGenesisBlock = genesis.GetHash();\n+        assert(consensus.hashGenesisBlock == uint256S(\"0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\"));\n \n         vFixedSeeds.clear();\n         vSeeds.clear();\n@@ -224,7 +223,6 @@ class CTestNetParams : public CMainParams {\n         fRequireRPCPassword = true;\n         fMiningRequiresPeers = true;\n         fDefaultCheckMemPool = false;\n-        fAllowMinDifficultyBlocks = true;\n         fRequireStandard = false;\n         fMineBlocksOnDemand = false;\n         fTestnetToBeDeprecatedFieldRPC = true;\n@@ -243,32 +241,29 @@ class CRegTestParams : public CTestNetParams {\n public:\n     CRegTestParams() {\n         strNetworkID = \"regtest\";\n+        consensus.nSubsidyHalvingInterval = 150;\n+        consensus.nMajorityEnforceBlockUpgrade = 750;\n+        consensus.nMajorityRejectBlockOutdated = 950;\n+        consensus.nMajorityWindow = 1000;\n+        consensus.powLimit = ~arith_uint256(0) >> 1;\n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;\n         pchMessageStart[2] = 0xb5;\n         pchMessageStart[3] = 0xda;\n-        nSubsidyHalvingInterval = 150;\n-        nEnforceBlockUpgradeMajority = 750;\n-        nRejectBlockOutdatedMajority = 950;\n-        nToCheckBlockUpgradeMajority = 1000;\n         nMinerThreads = 1;\n-        nTargetTimespan = 14 * 24 * 60 * 60; //! two weeks\n-        nTargetSpacing = 10 * 60;\n-        bnProofOfWorkLimit = ~arith_uint256(0) >> 1;\n         genesis.nTime = 1296688602;\n         genesis.nBits = 0x207fffff;\n         genesis.nNonce = 2;\n-        hashGenesisBlock = genesis.GetHash();\n+        consensus.hashGenesisBlock = genesis.GetHash();\n         nDefaultPort = 18444;\n-        assert(hashGenesisBlock == uint256S(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n+        assert(consensus.hashGenesisBlock == uint256S(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n \n         vFixedSeeds.clear(); //! Regtest mode doesn't have any fixed seeds.\n         vSeeds.clear();  //! Regtest mode doesn't have any DNS seeds.\n \n         fRequireRPCPassword = false;\n         fMiningRequiresPeers = false;\n         fDefaultCheckMemPool = true;\n-        fAllowMinDifficultyBlocks = true;\n         fRequireStandard = false;\n         fMineBlocksOnDemand = true;\n         fTestnetToBeDeprecatedFieldRPC = false;"
      },
      {
        "sha": "aa2ec1e3012e0124ea787b55de185d6896b19eba",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 14,
        "deletions": 21,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c",
        "patch": "@@ -6,11 +6,12 @@\n #ifndef BITCOIN_CHAINPARAMS_H\n #define BITCOIN_CHAINPARAMS_H\n \n+#include \"arith_uint256.h\"\n #include \"chainparamsbase.h\"\n #include \"checkpoints.h\"\n+#include \"consensus/params.h\"\n #include \"primitives/block.h\"\n #include \"protocol.h\"\n-#include \"arith_uint256.h\"\n \n #include <vector>\n \n@@ -39,16 +40,16 @@ class CChainParams\n         MAX_BASE58_TYPES\n     };\n \n-    const uint256& HashGenesisBlock() const { return hashGenesisBlock; }\n+    const Consensus::Params& GetConsensus() const { return consensus; }\n+    const uint256& HashGenesisBlock() const { return consensus.hashGenesisBlock; }\n     const CMessageHeader::MessageStartChars& MessageStart() const { return pchMessageStart; }\n     const std::vector<unsigned char>& AlertKey() const { return vAlertPubKey; }\n     int GetDefaultPort() const { return nDefaultPort; }\n-    const arith_uint256& ProofOfWorkLimit() const { return bnProofOfWorkLimit; }\n-    int SubsidyHalvingInterval() const { return nSubsidyHalvingInterval; }\n-    /** Used to check majorities for block version upgrade */\n-    int EnforceBlockUpgradeMajority() const { return nEnforceBlockUpgradeMajority; }\n-    int RejectBlockOutdatedMajority() const { return nRejectBlockOutdatedMajority; }\n-    int ToCheckBlockUpgradeMajority() const { return nToCheckBlockUpgradeMajority; }\n+    const arith_uint256& ProofOfWorkLimit() const { return consensus.powLimit; }\n+    int SubsidyHalvingInterval() const { return consensus.nSubsidyHalvingInterval; }\n+    int EnforceBlockUpgradeMajority() const { return consensus.nMajorityEnforceBlockUpgrade; }\n+    int RejectBlockOutdatedMajority() const { return consensus.nMajorityRejectBlockOutdated; }\n+    int ToCheckBlockUpgradeMajority() const { return consensus.nMajorityWindow; }\n \n     /** Used if GenerateBitcoins is called with a negative number of threads */\n     int DefaultMinerThreads() const { return nMinerThreads; }\n@@ -59,12 +60,12 @@ class CChainParams\n     /** Default value for -checkmempool argument */\n     bool DefaultCheckMemPool() const { return fDefaultCheckMemPool; }\n     /** Allow mining of a min-difficulty block */\n-    bool AllowMinDifficultyBlocks() const { return fAllowMinDifficultyBlocks; }\n+    bool AllowMinDifficultyBlocks() const { return consensus.fPowAllowMinDifficultyBlocks; }\n     /** Make standard checks */\n     bool RequireStandard() const { return fRequireStandard; }\n-    int64_t TargetTimespan() const { return nTargetTimespan; }\n-    int64_t TargetSpacing() const { return nTargetSpacing; }\n-    int64_t DifficultyAdjustmentInterval() const { return nTargetTimespan / nTargetSpacing; }\n+    int64_t TargetTimespan() const { return consensus.nPowTargetTimespan; }\n+    int64_t TargetSpacing() const { return consensus.nPowTargetSpacing; }\n+    int64_t DifficultyAdjustmentInterval() const { return consensus.nPowTargetTimespan / consensus.nPowTargetSpacing; }\n     /** Make miner stop after a block is found. In RPC, don't return until nGenProcLimit blocks are generated */\n     bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }\n     /** In the future use NetworkIDString() for RPC fields */\n@@ -78,18 +79,11 @@ class CChainParams\n protected:\n     CChainParams() {}\n \n-    uint256 hashGenesisBlock;\n+    Consensus::Params consensus;\n     CMessageHeader::MessageStartChars pchMessageStart;\n     //! Raw pub key bytes for the broadcast alert signing key.\n     std::vector<unsigned char> vAlertPubKey;\n     int nDefaultPort;\n-    arith_uint256 bnProofOfWorkLimit;\n-    int nSubsidyHalvingInterval;\n-    int nEnforceBlockUpgradeMajority;\n-    int nRejectBlockOutdatedMajority;\n-    int nToCheckBlockUpgradeMajority;\n-    int64_t nTargetTimespan;\n-    int64_t nTargetSpacing;\n     int nMinerThreads;\n     std::vector<CDNSSeedData> vSeeds;\n     std::vector<unsigned char> base58Prefixes[MAX_BASE58_TYPES];\n@@ -99,7 +93,6 @@ class CChainParams\n     bool fRequireRPCPassword;\n     bool fMiningRequiresPeers;\n     bool fDefaultCheckMemPool;\n-    bool fAllowMinDifficultyBlocks;\n     bool fRequireStandard;\n     bool fMineBlocksOnDemand;\n     bool fTestnetToBeDeprecatedFieldRPC;"
      },
      {
        "sha": "c4cfa48c7e83647b2e0f603a11f74cfc89b1abfb",
        "filename": "src/consensus/params.h",
        "status": "added",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c",
        "patch": "@@ -0,0 +1,32 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CONSENSUS_CONSENSUS_PARAMS_H\n+#define BITCOIN_CONSENSUS_CONSENSUS_PARAMS_H\n+\n+#include \"arith_uint256.h\"\n+#include \"uint256.h\"\n+\n+namespace Consensus {\n+/**\n+ * Parameters that influence chain consensus.\n+ */\n+struct Params {\n+    uint256 hashGenesisBlock;\n+    int nSubsidyHalvingInterval;\n+    /** Used to check majorities for block version upgrade */\n+    int nMajorityEnforceBlockUpgrade;\n+    int nMajorityRejectBlockOutdated;\n+    int nMajorityWindow;\n+    /** Proof of work parameters */\n+    arith_uint256 powLimit;\n+    bool fPowAllowMinDifficultyBlocks;\n+    int64_t nPowTargetSpacing;\n+    int64_t nPowTargetTimespan;\n+    int64_t DifficultyAdjustmentInterval() const { return nPowTargetTimespan / nPowTargetSpacing; }\n+};\n+} // namespace Consensus\n+\n+#endif // BITCOIN_CONSENSUS_CONSENSUS_PARAMS_H"
      }
    ]
  },
  {
    "sha": "d698ef690f62c08676dcf9ddc0988e23aa81cbff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjk4ZWY2OTBmNjJjMDg2NzZkY2Y5ZGRjMDk4OGUyM2FhODFjYmZm",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-15T01:21:42Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-25T23:47:51Z"
      },
      "message": "Consensus: Refactor: Decouple pow.o from chainparams.o",
      "tree": {
        "sha": "d2c52a3b81167039a3991b0809c958862752a8de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d2c52a3b81167039a3991b0809c958862752a8de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d698ef690f62c08676dcf9ddc0988e23aa81cbff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d698ef690f62c08676dcf9ddc0988e23aa81cbff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d698ef690f62c08676dcf9ddc0988e23aa81cbff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d698ef690f62c08676dcf9ddc0988e23aa81cbff/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 42,
      "deletions": 35
    },
    "files": [
      {
        "sha": "1d78eedc1ae36baf0a144c3ed0e145f6d8e537af",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d698ef690f62c08676dcf9ddc0988e23aa81cbff",
        "patch": "@@ -1158,7 +1158,7 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos)\n     }\n \n     // Check the header\n-    if (!CheckProofOfWork(block.GetHash(), block.nBits))\n+    if (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus()))\n         return error(\"ReadBlockFromDisk: Errors in block header at %s\", pos.ToString());\n \n     return true;\n@@ -2462,7 +2462,7 @@ bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigne\n bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW)\n {\n     // Check proof of work matches claimed amount\n-    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits))\n+    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus()))\n         return state.DoS(50, error(\"CheckBlockHeader(): proof of work failed\"),\n                          REJECT_INVALID, \"high-hash\");\n \n@@ -2545,7 +2545,7 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n     int nHeight = pindexPrev->nHeight+1;\n \n     // Check proof of work\n-    if ((block.nBits != GetNextWorkRequired(pindexPrev, &block)))\n+    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, Params().GetConsensus()))\n         return state.DoS(100, error(\"%s: incorrect proof of work\", __func__),\n                          REJECT_INVALID, \"bad-diffbits\");\n "
      },
      {
        "sha": "09ffc4d28bad47e35c2b54502af60ce61c2c0226",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=d698ef690f62c08676dcf9ddc0988e23aa81cbff",
        "patch": "@@ -17,7 +17,6 @@\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n #include \"net.h\"\n-#include \"pow.h\"\n #include \"script/script.h\"\n #include \"script/sigcache.h\"\n #include \"script/standard.h\""
      },
      {
        "sha": "cf08b782296cfbcb39e9183ac361c0e3e645874b",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=d698ef690f62c08676dcf9ddc0988e23aa81cbff",
        "patch": "@@ -84,7 +84,7 @@ void UpdateTime(CBlockHeader* pblock, const CBlockIndex* pindexPrev)\n \n     // Updating time can change work required on testnet:\n     if (Params().AllowMinDifficultyBlocks())\n-        pblock->nBits = GetNextWorkRequired(pindexPrev, pblock);\n+        pblock->nBits = GetNextWorkRequired(pindexPrev, pblock, Params().GetConsensus());\n }\n \n CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n@@ -326,7 +326,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         // Fill in header\n         pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n         UpdateTime(pblock, pindexPrev);\n-        pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock);\n+        pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, Params().GetConsensus());\n         pblock->nNonce         = 0;\n         pblocktemplate->vTxSigOps[0] = GetLegacySigOpCount(pblock->vtx[0]);\n "
      },
      {
        "sha": "3c5a8d9d9635968cd1127be3235809b791c34d97",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 20,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=d698ef690f62c08676dcf9ddc0988e23aa81cbff",
        "patch": "@@ -7,34 +7,33 @@\n \n #include \"arith_uint256.h\"\n #include \"chain.h\"\n-#include \"chainparams.h\"\n #include \"primitives/block.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n \n-unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock)\n+unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n {\n-    unsigned int nProofOfWorkLimit = Params().ProofOfWorkLimit().GetCompact();\n+    unsigned int nProofOfWorkLimit = params.powLimit.GetCompact();\n \n     // Genesis block\n     if (pindexLast == NULL)\n         return nProofOfWorkLimit;\n \n     // Only change once per difficulty adjustment interval\n-    if ((pindexLast->nHeight+1) % Params().DifficultyAdjustmentInterval() != 0)\n+    if ((pindexLast->nHeight+1) % params.DifficultyAdjustmentInterval() != 0)\n     {\n-        if (Params().AllowMinDifficultyBlocks())\n+        if (params.fPowAllowMinDifficultyBlocks)\n         {\n             // Special difficulty rule for testnet:\n             // If the new block's timestamp is more than 2* 10 minutes\n             // then allow mining of a min-difficulty block.\n-            if (pblock->GetBlockTime() > pindexLast->GetBlockTime() + Params().TargetSpacing()*2)\n+            if (pblock->GetBlockTime() > pindexLast->GetBlockTime() + params.nPowTargetSpacing*2)\n                 return nProofOfWorkLimit;\n             else\n             {\n                 // Return the last non-special-min-difficulty-rules-block\n                 const CBlockIndex* pindex = pindexLast;\n-                while (pindex->pprev && pindex->nHeight % Params().DifficultyAdjustmentInterval() != 0 && pindex->nBits == nProofOfWorkLimit)\n+                while (pindex->pprev && pindex->nHeight % params.DifficultyAdjustmentInterval() != 0 && pindex->nBits == nProofOfWorkLimit)\n                     pindex = pindex->pprev;\n                 return pindex->nBits;\n             }\n@@ -44,44 +43,44 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n \n     // Go back by what we want to be 14 days worth of blocks\n     const CBlockIndex* pindexFirst = pindexLast;\n-    for (int i = 0; pindexFirst && i < Params().DifficultyAdjustmentInterval()-1; i++)\n+    for (int i = 0; pindexFirst && i < params.DifficultyAdjustmentInterval()-1; i++)\n         pindexFirst = pindexFirst->pprev;\n     assert(pindexFirst);\n \n-    return CalculateNextWorkRequired(pindexLast, pindexFirst->GetBlockTime());\n+    return CalculateNextWorkRequired(pindexLast, pindexFirst->GetBlockTime(), params);\n }\n \n-unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime)\n+unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)\n {\n     // Limit adjustment step\n     int64_t nActualTimespan = pindexLast->GetBlockTime() - nFirstBlockTime;\n     LogPrintf(\"  nActualTimespan = %d  before bounds\\n\", nActualTimespan);\n-    if (nActualTimespan < Params().TargetTimespan()/4)\n-        nActualTimespan = Params().TargetTimespan()/4;\n-    if (nActualTimespan > Params().TargetTimespan()*4)\n-        nActualTimespan = Params().TargetTimespan()*4;\n+    if (nActualTimespan < params.nPowTargetTimespan/4)\n+        nActualTimespan = params.nPowTargetTimespan/4;\n+    if (nActualTimespan > params.nPowTargetTimespan*4)\n+        nActualTimespan = params.nPowTargetTimespan*4;\n \n     // Retarget\n     arith_uint256 bnNew;\n     arith_uint256 bnOld;\n     bnNew.SetCompact(pindexLast->nBits);\n     bnOld = bnNew;\n     bnNew *= nActualTimespan;\n-    bnNew /= Params().TargetTimespan();\n+    bnNew /= params.nPowTargetTimespan;\n \n-    if (bnNew > Params().ProofOfWorkLimit())\n-        bnNew = Params().ProofOfWorkLimit();\n+    if (bnNew > params.powLimit)\n+        bnNew = params.powLimit;\n \n     /// debug print\n     LogPrintf(\"GetNextWorkRequired RETARGET\\n\");\n-    LogPrintf(\"Params().TargetTimespan() = %d    nActualTimespan = %d\\n\", Params().TargetTimespan(), nActualTimespan);\n+    LogPrintf(\"params.nPowTargetTimespan = %d    nActualTimespan = %d\\n\", params.nPowTargetTimespan, nActualTimespan);\n     LogPrintf(\"Before: %08x  %s\\n\", pindexLast->nBits, bnOld.ToString());\n     LogPrintf(\"After:  %08x  %s\\n\", bnNew.GetCompact(), bnNew.ToString());\n \n     return bnNew.GetCompact();\n }\n \n-bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n+bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params& params)\n {\n     bool fNegative;\n     bool fOverflow;\n@@ -90,7 +89,7 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n \n     // Check range\n-    if (fNegative || bnTarget == 0 || fOverflow || bnTarget > Params().ProofOfWorkLimit())\n+    if (fNegative || bnTarget == 0 || fOverflow || bnTarget > params.powLimit)\n         return error(\"CheckProofOfWork(): nBits below minimum work\");\n \n     // Check proof of work matches claimed amount"
      },
      {
        "sha": "a5d32db178e079ab0a6f2e11e6c7f11ac9a4f729",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=d698ef690f62c08676dcf9ddc0988e23aa81cbff",
        "patch": "@@ -6,18 +6,20 @@\n #ifndef BITCOIN_POW_H\n #define BITCOIN_POW_H\n \n+#include \"consensus/params.h\"\n+\n #include <stdint.h>\n \n class CBlockHeader;\n class CBlockIndex;\n class uint256;\n class arith_uint256;\n \n-unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock);\n-unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime);\n+unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params&);\n+unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);\n \n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n-bool CheckProofOfWork(uint256 hash, unsigned int nBits);\n+bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&);\n arith_uint256 GetBlockProof(const CBlockIndex& block);\n \n #endif // BITCOIN_POW_H"
      },
      {
        "sha": "fcba7e222d56145165baa4b022e13b3d3c5d9dfd",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=d698ef690f62c08676dcf9ddc0988e23aa81cbff",
        "patch": "@@ -181,7 +181,7 @@ Value setgenerate(const Array& params, bool fHelp)\n                 LOCK(cs_main);\n                 IncrementExtraNonce(pblock, chainActive.Tip(), nExtraNonce);\n             }\n-            while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits)) {\n+            while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus())) {\n                 // Yes, there is a chance every nonce could fail to satisfy the -regtest\n                 // target -- 1 in 2^(2^32). That ain't gonna happen.\n                 ++pblock->nNonce;"
      },
      {
        "sha": "4ce1591c353589cfc02f5e5c01251e29359ae301",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=d698ef690f62c08676dcf9ddc0988e23aa81cbff",
        "patch": "@@ -17,51 +17,56 @@ BOOST_FIXTURE_TEST_SUITE(pow_tests, BasicTestingSetup)\n BOOST_AUTO_TEST_CASE(get_next_work)\n {\n     SelectParams(CBaseChainParams::MAIN);\n+    const Consensus::Params& params = Params().GetConsensus();\n \n     int64_t nLastRetargetTime = 1261130161; // Block #30240\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 32255;\n     pindexLast.nTime = 1262152739;  // Block #32255\n     pindexLast.nBits = 0x1d00ffff;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1d00d86a);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1d00d86a);\n }\n \n /* Test the constraint on the upper bound for next work */\n BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)\n {\n     SelectParams(CBaseChainParams::MAIN);\n+    const Consensus::Params& params = Params().GetConsensus();\n \n     int64_t nLastRetargetTime = 1231006505; // Block #0\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 2015;\n     pindexLast.nTime = 1233061996;  // Block #2015\n     pindexLast.nBits = 0x1d00ffff;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1d00ffff);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1d00ffff);\n }\n \n /* Test the constraint on the lower bound for actual time taken */\n BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)\n {\n     SelectParams(CBaseChainParams::MAIN);\n+    const Consensus::Params& params = Params().GetConsensus();\n \n     int64_t nLastRetargetTime = 1279008237; // Block #66528\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 68543;\n     pindexLast.nTime = 1279297671;  // Block #68543\n     pindexLast.nBits = 0x1c05a3f4;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1c0168fd);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1c0168fd);\n }\n \n /* Test the constraint on the upper bound for actual time taken */\n BOOST_AUTO_TEST_CASE(get_next_work_upper_limit_actual)\n {\n     SelectParams(CBaseChainParams::MAIN);\n+    const Consensus::Params& params = Params().GetConsensus();\n+\n     int64_t nLastRetargetTime = 1263163443; // NOTE: Not an actual block time\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 46367;\n     pindexLast.nTime = 1269211443;  // Block #46367\n     pindexLast.nBits = 0x1c387f6f;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1d00e1fd);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1d00e1fd);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "df9ff8d8c98a14f7698dd784bb40ea98644406a6",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=d698ef690f62c08676dcf9ddc0988e23aa81cbff",
        "patch": "@@ -5,6 +5,8 @@\n \n #include \"txdb.h\"\n \n+#include \"chainparams.h\"\n+#include \"hash.h\"\n #include \"main.h\"\n #include \"pow.h\"\n #include \"uint256.h\"\n@@ -223,7 +225,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n                 pindexNew->nStatus        = diskindex.nStatus;\n                 pindexNew->nTx            = diskindex.nTx;\n \n-                if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits))\n+                if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits, Params().GetConsensus()))\n                     return error(\"LoadBlockIndex(): CheckProofOfWork failed: %s\", pindexNew->ToString());\n \n                 pcursor->Next();"
      }
    ]
  },
  {
    "sha": "687f10d9ec3548f13f929ca14cd813a0919639ec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODdmMTBkOWVjMzU0OGYxM2Y5MjljYTE0Y2Q4MTNhMDkxOTYzOWVj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-26T06:39:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-26T06:53:44Z"
      },
      "message": "Merge pull request #5812\n\nd698ef6 Consensus: Refactor: Decouple pow.o from chainparams.o (Jorge Tim\u00f3n)\nbd00611 Consensus: Refactor: Introduce Consensus::Params class (Jorge Tim\u00f3n)",
      "tree": {
        "sha": "d2c52a3b81167039a3991b0809c958862752a8de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d2c52a3b81167039a3991b0809c958862752a8de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/687f10d9ec3548f13f929ca14cd813a0919639ec",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVE6z4AAoJEHSBCwEjRsmmDiYIAIiDrO+MBcUtGOAQGkViggWk\nIujYaxx4SWmyK8uLWikTud1BhskiW424MsM2F5mhUfEhg/2t92PFoXCE5q+BUce2\nynrYjz/ST60zg9LVzrXkyjpbiLovP0HWc5d1jdO584UxNjVUTGz4RfZYQalnjrqM\nGAbZA47NRukYkcnY9/F7szLhG6EDb/FStuxZ65R+xGSyUnxOE3LketvsDBQm53CQ\nm8y1QG4Exa3D6ceEgGyzBBACNkwZ9J9VhdOOfFbAiNhBxSlpwQfUsrzJknGEhbA4\np3grpL1meXHe2+xj5j5zAHxJr03HXo/aMwbUVEXbGexs8ddFB4PJ5oP4VgNpIok=\n=jRtA\n-----END PGP SIGNATURE-----",
        "payload": "tree d2c52a3b81167039a3991b0809c958862752a8de\nparent cbb2cf5522983e4a952cfb25e577b1998a06c769\nparent d698ef690f62c08676dcf9ddc0988e23aa81cbff\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1427351940 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1427352824 +0100\n\nMerge pull request #5812\n\nd698ef6 Consensus: Refactor: Decouple pow.o from chainparams.o (Jorge Tim\u00f3n)\nbd00611 Consensus: Refactor: Introduce Consensus::Params class (Jorge Tim\u00f3n)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/687f10d9ec3548f13f929ca14cd813a0919639ec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/687f10d9ec3548f13f929ca14cd813a0919639ec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/687f10d9ec3548f13f929ca14cd813a0919639ec/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cbb2cf5522983e4a952cfb25e577b1998a06c769",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbb2cf5522983e4a952cfb25e577b1998a06c769",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cbb2cf5522983e4a952cfb25e577b1998a06c769"
      },
      {
        "sha": "d698ef690f62c08676dcf9ddc0988e23aa81cbff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d698ef690f62c08676dcf9ddc0988e23aa81cbff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d698ef690f62c08676dcf9ddc0988e23aa81cbff"
      }
    ],
    "stats": {
      "total": 196,
      "additions": 112,
      "deletions": 84
    },
    "files": [
      {
        "sha": "37184b62863644ab8ffd6e4596897e2ee0421aa4",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/687f10d9ec3548f13f929ca14cd813a0919639ec/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/687f10d9ec3548f13f929ca14cd813a0919639ec/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=687f10d9ec3548f13f929ca14cd813a0919639ec",
        "patch": "@@ -87,6 +87,7 @@ BITCOIN_CORE_H = \\\n   coins.h \\\n   compat.h \\\n   compressor.h \\\n+  consensus/params.h \\\n   core_io.h \\\n   wallet/db.h \\\n   eccryptoverify.h \\"
      },
      {
        "sha": "3e20d9f8f2e4a912acfb786404242f6d42687cfc",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 28,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/687f10d9ec3548f13f929ca14cd813a0919639ec/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/687f10d9ec3548f13f929ca14cd813a0919639ec/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=687f10d9ec3548f13f929ca14cd813a0919639ec",
        "patch": "@@ -101,6 +101,14 @@ class CMainParams : public CChainParams {\n public:\n     CMainParams() {\n         strNetworkID = \"main\";\n+        consensus.nSubsidyHalvingInterval = 210000;\n+        consensus.nMajorityEnforceBlockUpgrade = 750;\n+        consensus.nMajorityRejectBlockOutdated = 950;\n+        consensus.nMajorityWindow = 1000;\n+        consensus.powLimit = ~arith_uint256(0) >> 32;\n+        consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n+        consensus.nPowTargetSpacing = 10 * 60;\n+        consensus.fPowAllowMinDifficultyBlocks = false;\n         /** \n          * The message start string is designed to be unlikely to occur in normal data.\n          * The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n@@ -112,14 +120,7 @@ class CMainParams : public CChainParams {\n         pchMessageStart[3] = 0xd9;\n         vAlertPubKey = ParseHex(\"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\");\n         nDefaultPort = 8333;\n-        bnProofOfWorkLimit = ~arith_uint256(0) >> 32;\n-        nSubsidyHalvingInterval = 210000;\n-        nEnforceBlockUpgradeMajority = 750;\n-        nRejectBlockOutdatedMajority = 950;\n-        nToCheckBlockUpgradeMajority = 1000;\n         nMinerThreads = 0;\n-        nTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n-        nTargetSpacing = 10 * 60;\n \n         /**\n          * Build the genesis block. Note that the output of the genesis coinbase cannot\n@@ -146,8 +147,8 @@ class CMainParams : public CChainParams {\n         genesis.nBits    = 0x1d00ffff;\n         genesis.nNonce   = 2083236893;\n \n-        hashGenesisBlock = genesis.GetHash();\n-        assert(hashGenesisBlock == uint256S(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"));\n+        consensus.hashGenesisBlock = genesis.GetHash();\n+        assert(consensus.hashGenesisBlock == uint256S(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"));\n         assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n \n         vSeeds.push_back(CDNSSeedData(\"bitcoin.sipa.be\", \"seed.bitcoin.sipa.be\"));\n@@ -167,7 +168,6 @@ class CMainParams : public CChainParams {\n         fRequireRPCPassword = true;\n         fMiningRequiresPeers = true;\n         fDefaultCheckMemPool = false;\n-        fAllowMinDifficultyBlocks = false;\n         fRequireStandard = true;\n         fMineBlocksOnDemand = false;\n         fTestnetToBeDeprecatedFieldRPC = false;\n@@ -187,24 +187,23 @@ class CTestNetParams : public CMainParams {\n public:\n     CTestNetParams() {\n         strNetworkID = \"test\";\n+        consensus.nMajorityEnforceBlockUpgrade = 51;\n+        consensus.nMajorityRejectBlockOutdated = 75;\n+        consensus.nMajorityWindow = 100;\n+        consensus.fPowAllowMinDifficultyBlocks = true;\n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n         pchMessageStart[2] = 0x09;\n         pchMessageStart[3] = 0x07;\n         vAlertPubKey = ParseHex(\"04302390343f91cc401d56d68b123028bf52e5fca1939df127f63c6467cdf9c8e2c14b61104cf817d0b780da337893ecc4aaff1309e536162dabbdb45200ca2b0a\");\n         nDefaultPort = 18333;\n-        nEnforceBlockUpgradeMajority = 51;\n-        nRejectBlockOutdatedMajority = 75;\n-        nToCheckBlockUpgradeMajority = 100;\n         nMinerThreads = 0;\n-        nTargetTimespan = 14 * 24 * 60 * 60; //! two weeks\n-        nTargetSpacing = 10 * 60;\n \n         //! Modify the testnet genesis block so the timestamp is valid for a later start.\n         genesis.nTime = 1296688602;\n         genesis.nNonce = 414098458;\n-        hashGenesisBlock = genesis.GetHash();\n-        assert(hashGenesisBlock == uint256S(\"0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\"));\n+        consensus.hashGenesisBlock = genesis.GetHash();\n+        assert(consensus.hashGenesisBlock == uint256S(\"0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\"));\n \n         vFixedSeeds.clear();\n         vSeeds.clear();\n@@ -224,7 +223,6 @@ class CTestNetParams : public CMainParams {\n         fRequireRPCPassword = true;\n         fMiningRequiresPeers = true;\n         fDefaultCheckMemPool = false;\n-        fAllowMinDifficultyBlocks = true;\n         fRequireStandard = false;\n         fMineBlocksOnDemand = false;\n         fTestnetToBeDeprecatedFieldRPC = true;\n@@ -243,32 +241,29 @@ class CRegTestParams : public CTestNetParams {\n public:\n     CRegTestParams() {\n         strNetworkID = \"regtest\";\n+        consensus.nSubsidyHalvingInterval = 150;\n+        consensus.nMajorityEnforceBlockUpgrade = 750;\n+        consensus.nMajorityRejectBlockOutdated = 950;\n+        consensus.nMajorityWindow = 1000;\n+        consensus.powLimit = ~arith_uint256(0) >> 1;\n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;\n         pchMessageStart[2] = 0xb5;\n         pchMessageStart[3] = 0xda;\n-        nSubsidyHalvingInterval = 150;\n-        nEnforceBlockUpgradeMajority = 750;\n-        nRejectBlockOutdatedMajority = 950;\n-        nToCheckBlockUpgradeMajority = 1000;\n         nMinerThreads = 1;\n-        nTargetTimespan = 14 * 24 * 60 * 60; //! two weeks\n-        nTargetSpacing = 10 * 60;\n-        bnProofOfWorkLimit = ~arith_uint256(0) >> 1;\n         genesis.nTime = 1296688602;\n         genesis.nBits = 0x207fffff;\n         genesis.nNonce = 2;\n-        hashGenesisBlock = genesis.GetHash();\n+        consensus.hashGenesisBlock = genesis.GetHash();\n         nDefaultPort = 18444;\n-        assert(hashGenesisBlock == uint256S(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n+        assert(consensus.hashGenesisBlock == uint256S(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n \n         vFixedSeeds.clear(); //! Regtest mode doesn't have any fixed seeds.\n         vSeeds.clear();  //! Regtest mode doesn't have any DNS seeds.\n \n         fRequireRPCPassword = false;\n         fMiningRequiresPeers = false;\n         fDefaultCheckMemPool = true;\n-        fAllowMinDifficultyBlocks = true;\n         fRequireStandard = false;\n         fMineBlocksOnDemand = true;\n         fTestnetToBeDeprecatedFieldRPC = false;"
      },
      {
        "sha": "aa2ec1e3012e0124ea787b55de185d6896b19eba",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 14,
        "deletions": 21,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/687f10d9ec3548f13f929ca14cd813a0919639ec/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/687f10d9ec3548f13f929ca14cd813a0919639ec/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=687f10d9ec3548f13f929ca14cd813a0919639ec",
        "patch": "@@ -6,11 +6,12 @@\n #ifndef BITCOIN_CHAINPARAMS_H\n #define BITCOIN_CHAINPARAMS_H\n \n+#include \"arith_uint256.h\"\n #include \"chainparamsbase.h\"\n #include \"checkpoints.h\"\n+#include \"consensus/params.h\"\n #include \"primitives/block.h\"\n #include \"protocol.h\"\n-#include \"arith_uint256.h\"\n \n #include <vector>\n \n@@ -39,16 +40,16 @@ class CChainParams\n         MAX_BASE58_TYPES\n     };\n \n-    const uint256& HashGenesisBlock() const { return hashGenesisBlock; }\n+    const Consensus::Params& GetConsensus() const { return consensus; }\n+    const uint256& HashGenesisBlock() const { return consensus.hashGenesisBlock; }\n     const CMessageHeader::MessageStartChars& MessageStart() const { return pchMessageStart; }\n     const std::vector<unsigned char>& AlertKey() const { return vAlertPubKey; }\n     int GetDefaultPort() const { return nDefaultPort; }\n-    const arith_uint256& ProofOfWorkLimit() const { return bnProofOfWorkLimit; }\n-    int SubsidyHalvingInterval() const { return nSubsidyHalvingInterval; }\n-    /** Used to check majorities for block version upgrade */\n-    int EnforceBlockUpgradeMajority() const { return nEnforceBlockUpgradeMajority; }\n-    int RejectBlockOutdatedMajority() const { return nRejectBlockOutdatedMajority; }\n-    int ToCheckBlockUpgradeMajority() const { return nToCheckBlockUpgradeMajority; }\n+    const arith_uint256& ProofOfWorkLimit() const { return consensus.powLimit; }\n+    int SubsidyHalvingInterval() const { return consensus.nSubsidyHalvingInterval; }\n+    int EnforceBlockUpgradeMajority() const { return consensus.nMajorityEnforceBlockUpgrade; }\n+    int RejectBlockOutdatedMajority() const { return consensus.nMajorityRejectBlockOutdated; }\n+    int ToCheckBlockUpgradeMajority() const { return consensus.nMajorityWindow; }\n \n     /** Used if GenerateBitcoins is called with a negative number of threads */\n     int DefaultMinerThreads() const { return nMinerThreads; }\n@@ -59,12 +60,12 @@ class CChainParams\n     /** Default value for -checkmempool argument */\n     bool DefaultCheckMemPool() const { return fDefaultCheckMemPool; }\n     /** Allow mining of a min-difficulty block */\n-    bool AllowMinDifficultyBlocks() const { return fAllowMinDifficultyBlocks; }\n+    bool AllowMinDifficultyBlocks() const { return consensus.fPowAllowMinDifficultyBlocks; }\n     /** Make standard checks */\n     bool RequireStandard() const { return fRequireStandard; }\n-    int64_t TargetTimespan() const { return nTargetTimespan; }\n-    int64_t TargetSpacing() const { return nTargetSpacing; }\n-    int64_t DifficultyAdjustmentInterval() const { return nTargetTimespan / nTargetSpacing; }\n+    int64_t TargetTimespan() const { return consensus.nPowTargetTimespan; }\n+    int64_t TargetSpacing() const { return consensus.nPowTargetSpacing; }\n+    int64_t DifficultyAdjustmentInterval() const { return consensus.nPowTargetTimespan / consensus.nPowTargetSpacing; }\n     /** Make miner stop after a block is found. In RPC, don't return until nGenProcLimit blocks are generated */\n     bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }\n     /** In the future use NetworkIDString() for RPC fields */\n@@ -78,18 +79,11 @@ class CChainParams\n protected:\n     CChainParams() {}\n \n-    uint256 hashGenesisBlock;\n+    Consensus::Params consensus;\n     CMessageHeader::MessageStartChars pchMessageStart;\n     //! Raw pub key bytes for the broadcast alert signing key.\n     std::vector<unsigned char> vAlertPubKey;\n     int nDefaultPort;\n-    arith_uint256 bnProofOfWorkLimit;\n-    int nSubsidyHalvingInterval;\n-    int nEnforceBlockUpgradeMajority;\n-    int nRejectBlockOutdatedMajority;\n-    int nToCheckBlockUpgradeMajority;\n-    int64_t nTargetTimespan;\n-    int64_t nTargetSpacing;\n     int nMinerThreads;\n     std::vector<CDNSSeedData> vSeeds;\n     std::vector<unsigned char> base58Prefixes[MAX_BASE58_TYPES];\n@@ -99,7 +93,6 @@ class CChainParams\n     bool fRequireRPCPassword;\n     bool fMiningRequiresPeers;\n     bool fDefaultCheckMemPool;\n-    bool fAllowMinDifficultyBlocks;\n     bool fRequireStandard;\n     bool fMineBlocksOnDemand;\n     bool fTestnetToBeDeprecatedFieldRPC;"
      },
      {
        "sha": "c4cfa48c7e83647b2e0f603a11f74cfc89b1abfb",
        "filename": "src/consensus/params.h",
        "status": "added",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/687f10d9ec3548f13f929ca14cd813a0919639ec/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/687f10d9ec3548f13f929ca14cd813a0919639ec/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=687f10d9ec3548f13f929ca14cd813a0919639ec",
        "patch": "@@ -0,0 +1,32 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CONSENSUS_CONSENSUS_PARAMS_H\n+#define BITCOIN_CONSENSUS_CONSENSUS_PARAMS_H\n+\n+#include \"arith_uint256.h\"\n+#include \"uint256.h\"\n+\n+namespace Consensus {\n+/**\n+ * Parameters that influence chain consensus.\n+ */\n+struct Params {\n+    uint256 hashGenesisBlock;\n+    int nSubsidyHalvingInterval;\n+    /** Used to check majorities for block version upgrade */\n+    int nMajorityEnforceBlockUpgrade;\n+    int nMajorityRejectBlockOutdated;\n+    int nMajorityWindow;\n+    /** Proof of work parameters */\n+    arith_uint256 powLimit;\n+    bool fPowAllowMinDifficultyBlocks;\n+    int64_t nPowTargetSpacing;\n+    int64_t nPowTargetTimespan;\n+    int64_t DifficultyAdjustmentInterval() const { return nPowTargetTimespan / nPowTargetSpacing; }\n+};\n+} // namespace Consensus\n+\n+#endif // BITCOIN_CONSENSUS_CONSENSUS_PARAMS_H"
      },
      {
        "sha": "1d78eedc1ae36baf0a144c3ed0e145f6d8e537af",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/687f10d9ec3548f13f929ca14cd813a0919639ec/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/687f10d9ec3548f13f929ca14cd813a0919639ec/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=687f10d9ec3548f13f929ca14cd813a0919639ec",
        "patch": "@@ -1158,7 +1158,7 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos)\n     }\n \n     // Check the header\n-    if (!CheckProofOfWork(block.GetHash(), block.nBits))\n+    if (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus()))\n         return error(\"ReadBlockFromDisk: Errors in block header at %s\", pos.ToString());\n \n     return true;\n@@ -2462,7 +2462,7 @@ bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigne\n bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW)\n {\n     // Check proof of work matches claimed amount\n-    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits))\n+    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus()))\n         return state.DoS(50, error(\"CheckBlockHeader(): proof of work failed\"),\n                          REJECT_INVALID, \"high-hash\");\n \n@@ -2545,7 +2545,7 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n     int nHeight = pindexPrev->nHeight+1;\n \n     // Check proof of work\n-    if ((block.nBits != GetNextWorkRequired(pindexPrev, &block)))\n+    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, Params().GetConsensus()))\n         return state.DoS(100, error(\"%s: incorrect proof of work\", __func__),\n                          REJECT_INVALID, \"bad-diffbits\");\n "
      },
      {
        "sha": "09ffc4d28bad47e35c2b54502af60ce61c2c0226",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/687f10d9ec3548f13f929ca14cd813a0919639ec/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/687f10d9ec3548f13f929ca14cd813a0919639ec/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=687f10d9ec3548f13f929ca14cd813a0919639ec",
        "patch": "@@ -17,7 +17,6 @@\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n #include \"net.h\"\n-#include \"pow.h\"\n #include \"script/script.h\"\n #include \"script/sigcache.h\"\n #include \"script/standard.h\""
      },
      {
        "sha": "cf08b782296cfbcb39e9183ac361c0e3e645874b",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/687f10d9ec3548f13f929ca14cd813a0919639ec/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/687f10d9ec3548f13f929ca14cd813a0919639ec/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=687f10d9ec3548f13f929ca14cd813a0919639ec",
        "patch": "@@ -84,7 +84,7 @@ void UpdateTime(CBlockHeader* pblock, const CBlockIndex* pindexPrev)\n \n     // Updating time can change work required on testnet:\n     if (Params().AllowMinDifficultyBlocks())\n-        pblock->nBits = GetNextWorkRequired(pindexPrev, pblock);\n+        pblock->nBits = GetNextWorkRequired(pindexPrev, pblock, Params().GetConsensus());\n }\n \n CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n@@ -326,7 +326,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         // Fill in header\n         pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n         UpdateTime(pblock, pindexPrev);\n-        pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock);\n+        pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, Params().GetConsensus());\n         pblock->nNonce         = 0;\n         pblocktemplate->vTxSigOps[0] = GetLegacySigOpCount(pblock->vtx[0]);\n "
      },
      {
        "sha": "3c5a8d9d9635968cd1127be3235809b791c34d97",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 20,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/687f10d9ec3548f13f929ca14cd813a0919639ec/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/687f10d9ec3548f13f929ca14cd813a0919639ec/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=687f10d9ec3548f13f929ca14cd813a0919639ec",
        "patch": "@@ -7,34 +7,33 @@\n \n #include \"arith_uint256.h\"\n #include \"chain.h\"\n-#include \"chainparams.h\"\n #include \"primitives/block.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n \n-unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock)\n+unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n {\n-    unsigned int nProofOfWorkLimit = Params().ProofOfWorkLimit().GetCompact();\n+    unsigned int nProofOfWorkLimit = params.powLimit.GetCompact();\n \n     // Genesis block\n     if (pindexLast == NULL)\n         return nProofOfWorkLimit;\n \n     // Only change once per difficulty adjustment interval\n-    if ((pindexLast->nHeight+1) % Params().DifficultyAdjustmentInterval() != 0)\n+    if ((pindexLast->nHeight+1) % params.DifficultyAdjustmentInterval() != 0)\n     {\n-        if (Params().AllowMinDifficultyBlocks())\n+        if (params.fPowAllowMinDifficultyBlocks)\n         {\n             // Special difficulty rule for testnet:\n             // If the new block's timestamp is more than 2* 10 minutes\n             // then allow mining of a min-difficulty block.\n-            if (pblock->GetBlockTime() > pindexLast->GetBlockTime() + Params().TargetSpacing()*2)\n+            if (pblock->GetBlockTime() > pindexLast->GetBlockTime() + params.nPowTargetSpacing*2)\n                 return nProofOfWorkLimit;\n             else\n             {\n                 // Return the last non-special-min-difficulty-rules-block\n                 const CBlockIndex* pindex = pindexLast;\n-                while (pindex->pprev && pindex->nHeight % Params().DifficultyAdjustmentInterval() != 0 && pindex->nBits == nProofOfWorkLimit)\n+                while (pindex->pprev && pindex->nHeight % params.DifficultyAdjustmentInterval() != 0 && pindex->nBits == nProofOfWorkLimit)\n                     pindex = pindex->pprev;\n                 return pindex->nBits;\n             }\n@@ -44,44 +43,44 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n \n     // Go back by what we want to be 14 days worth of blocks\n     const CBlockIndex* pindexFirst = pindexLast;\n-    for (int i = 0; pindexFirst && i < Params().DifficultyAdjustmentInterval()-1; i++)\n+    for (int i = 0; pindexFirst && i < params.DifficultyAdjustmentInterval()-1; i++)\n         pindexFirst = pindexFirst->pprev;\n     assert(pindexFirst);\n \n-    return CalculateNextWorkRequired(pindexLast, pindexFirst->GetBlockTime());\n+    return CalculateNextWorkRequired(pindexLast, pindexFirst->GetBlockTime(), params);\n }\n \n-unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime)\n+unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)\n {\n     // Limit adjustment step\n     int64_t nActualTimespan = pindexLast->GetBlockTime() - nFirstBlockTime;\n     LogPrintf(\"  nActualTimespan = %d  before bounds\\n\", nActualTimespan);\n-    if (nActualTimespan < Params().TargetTimespan()/4)\n-        nActualTimespan = Params().TargetTimespan()/4;\n-    if (nActualTimespan > Params().TargetTimespan()*4)\n-        nActualTimespan = Params().TargetTimespan()*4;\n+    if (nActualTimespan < params.nPowTargetTimespan/4)\n+        nActualTimespan = params.nPowTargetTimespan/4;\n+    if (nActualTimespan > params.nPowTargetTimespan*4)\n+        nActualTimespan = params.nPowTargetTimespan*4;\n \n     // Retarget\n     arith_uint256 bnNew;\n     arith_uint256 bnOld;\n     bnNew.SetCompact(pindexLast->nBits);\n     bnOld = bnNew;\n     bnNew *= nActualTimespan;\n-    bnNew /= Params().TargetTimespan();\n+    bnNew /= params.nPowTargetTimespan;\n \n-    if (bnNew > Params().ProofOfWorkLimit())\n-        bnNew = Params().ProofOfWorkLimit();\n+    if (bnNew > params.powLimit)\n+        bnNew = params.powLimit;\n \n     /// debug print\n     LogPrintf(\"GetNextWorkRequired RETARGET\\n\");\n-    LogPrintf(\"Params().TargetTimespan() = %d    nActualTimespan = %d\\n\", Params().TargetTimespan(), nActualTimespan);\n+    LogPrintf(\"params.nPowTargetTimespan = %d    nActualTimespan = %d\\n\", params.nPowTargetTimespan, nActualTimespan);\n     LogPrintf(\"Before: %08x  %s\\n\", pindexLast->nBits, bnOld.ToString());\n     LogPrintf(\"After:  %08x  %s\\n\", bnNew.GetCompact(), bnNew.ToString());\n \n     return bnNew.GetCompact();\n }\n \n-bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n+bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params& params)\n {\n     bool fNegative;\n     bool fOverflow;\n@@ -90,7 +89,7 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n \n     // Check range\n-    if (fNegative || bnTarget == 0 || fOverflow || bnTarget > Params().ProofOfWorkLimit())\n+    if (fNegative || bnTarget == 0 || fOverflow || bnTarget > params.powLimit)\n         return error(\"CheckProofOfWork(): nBits below minimum work\");\n \n     // Check proof of work matches claimed amount"
      },
      {
        "sha": "a5d32db178e079ab0a6f2e11e6c7f11ac9a4f729",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/687f10d9ec3548f13f929ca14cd813a0919639ec/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/687f10d9ec3548f13f929ca14cd813a0919639ec/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=687f10d9ec3548f13f929ca14cd813a0919639ec",
        "patch": "@@ -6,18 +6,20 @@\n #ifndef BITCOIN_POW_H\n #define BITCOIN_POW_H\n \n+#include \"consensus/params.h\"\n+\n #include <stdint.h>\n \n class CBlockHeader;\n class CBlockIndex;\n class uint256;\n class arith_uint256;\n \n-unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock);\n-unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime);\n+unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params&);\n+unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);\n \n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n-bool CheckProofOfWork(uint256 hash, unsigned int nBits);\n+bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&);\n arith_uint256 GetBlockProof(const CBlockIndex& block);\n \n #endif // BITCOIN_POW_H"
      },
      {
        "sha": "fcba7e222d56145165baa4b022e13b3d3c5d9dfd",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/687f10d9ec3548f13f929ca14cd813a0919639ec/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/687f10d9ec3548f13f929ca14cd813a0919639ec/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=687f10d9ec3548f13f929ca14cd813a0919639ec",
        "patch": "@@ -181,7 +181,7 @@ Value setgenerate(const Array& params, bool fHelp)\n                 LOCK(cs_main);\n                 IncrementExtraNonce(pblock, chainActive.Tip(), nExtraNonce);\n             }\n-            while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits)) {\n+            while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus())) {\n                 // Yes, there is a chance every nonce could fail to satisfy the -regtest\n                 // target -- 1 in 2^(2^32). That ain't gonna happen.\n                 ++pblock->nNonce;"
      },
      {
        "sha": "4ce1591c353589cfc02f5e5c01251e29359ae301",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/687f10d9ec3548f13f929ca14cd813a0919639ec/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/687f10d9ec3548f13f929ca14cd813a0919639ec/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=687f10d9ec3548f13f929ca14cd813a0919639ec",
        "patch": "@@ -17,51 +17,56 @@ BOOST_FIXTURE_TEST_SUITE(pow_tests, BasicTestingSetup)\n BOOST_AUTO_TEST_CASE(get_next_work)\n {\n     SelectParams(CBaseChainParams::MAIN);\n+    const Consensus::Params& params = Params().GetConsensus();\n \n     int64_t nLastRetargetTime = 1261130161; // Block #30240\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 32255;\n     pindexLast.nTime = 1262152739;  // Block #32255\n     pindexLast.nBits = 0x1d00ffff;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1d00d86a);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1d00d86a);\n }\n \n /* Test the constraint on the upper bound for next work */\n BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)\n {\n     SelectParams(CBaseChainParams::MAIN);\n+    const Consensus::Params& params = Params().GetConsensus();\n \n     int64_t nLastRetargetTime = 1231006505; // Block #0\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 2015;\n     pindexLast.nTime = 1233061996;  // Block #2015\n     pindexLast.nBits = 0x1d00ffff;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1d00ffff);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1d00ffff);\n }\n \n /* Test the constraint on the lower bound for actual time taken */\n BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)\n {\n     SelectParams(CBaseChainParams::MAIN);\n+    const Consensus::Params& params = Params().GetConsensus();\n \n     int64_t nLastRetargetTime = 1279008237; // Block #66528\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 68543;\n     pindexLast.nTime = 1279297671;  // Block #68543\n     pindexLast.nBits = 0x1c05a3f4;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1c0168fd);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1c0168fd);\n }\n \n /* Test the constraint on the upper bound for actual time taken */\n BOOST_AUTO_TEST_CASE(get_next_work_upper_limit_actual)\n {\n     SelectParams(CBaseChainParams::MAIN);\n+    const Consensus::Params& params = Params().GetConsensus();\n+\n     int64_t nLastRetargetTime = 1263163443; // NOTE: Not an actual block time\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 46367;\n     pindexLast.nTime = 1269211443;  // Block #46367\n     pindexLast.nBits = 0x1c387f6f;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1d00e1fd);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1d00e1fd);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "df9ff8d8c98a14f7698dd784bb40ea98644406a6",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/687f10d9ec3548f13f929ca14cd813a0919639ec/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/687f10d9ec3548f13f929ca14cd813a0919639ec/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=687f10d9ec3548f13f929ca14cd813a0919639ec",
        "patch": "@@ -5,6 +5,8 @@\n \n #include \"txdb.h\"\n \n+#include \"chainparams.h\"\n+#include \"hash.h\"\n #include \"main.h\"\n #include \"pow.h\"\n #include \"uint256.h\"\n@@ -223,7 +225,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n                 pindexNew->nStatus        = diskindex.nStatus;\n                 pindexNew->nTx            = diskindex.nTx;\n \n-                if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits))\n+                if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits, Params().GetConsensus()))\n                     return error(\"LoadBlockIndex(): CheckProofOfWork failed: %s\", pindexNew->ToString());\n \n                 pcursor->Next();"
      }
    ]
  },
  {
    "sha": "6a1fbc4921ffc645e1ca86e96190da6c203c71d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTFmYmM0OTIxZmZjNjQ1ZTFjYTg2ZTk2MTkwZGE2YzIwM2M3MWQ3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-26T07:32:53Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-26T07:33:00Z"
      },
      "message": "Merge pull request #5942\n\nfc72020 don't trickle for whitelisted nodes (Ruben de Vries)",
      "tree": {
        "sha": "185fffb97cb298b8490ef4290e27815d36dc45c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/185fffb97cb298b8490ef4290e27815d36dc45c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a1fbc4921ffc645e1ca86e96190da6c203c71d7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVE7YsAAoJEHSBCwEjRsmmq58H/2i8zzqvFF6xHRLPSObaT7PW\nqnVXTo9dQgRjhZkzWISc3obLa5VdD1lQnAEI9VZXTyDDoLz6pxv6YkCNUKWUKiVI\nhdpluCradjtwJlbL6lGFIGM7P/CAi67sbz/R3GeX72mM6S1pvzNU/4UlgtHoqmdc\nxQSNJjiJZtO5xW+BsGPiwofxVKlw6yyEKrJ/mqa7djv0QpKzNZF6N5p83Fs3adSP\nzFWQmBqVYxC+UqwqrpOA8od0cetgsU5Tv/iIMfALnU5YQPH0TkNi8YtJ9P+Jrr0w\nUc/DTd7509NFmyVvBCqfrdSonhkkwAaTN/p1BpBxbDkMyBCNwOckkwz3xJ7EBY8=\n=WwcQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 185fffb97cb298b8490ef4290e27815d36dc45c6\nparent 687f10d9ec3548f13f929ca14cd813a0919639ec\nparent fc720207e0e513e531b1f266b966a2ffa57b936a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1427355173 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1427355180 +0100\n\nMerge pull request #5942\n\nfc72020 don't trickle for whitelisted nodes (Ruben de Vries)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a1fbc4921ffc645e1ca86e96190da6c203c71d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a1fbc4921ffc645e1ca86e96190da6c203c71d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a1fbc4921ffc645e1ca86e96190da6c203c71d7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "687f10d9ec3548f13f929ca14cd813a0919639ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/687f10d9ec3548f13f929ca14cd813a0919639ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/687f10d9ec3548f13f929ca14cd813a0919639ec"
      },
      {
        "sha": "fc720207e0e513e531b1f266b966a2ffa57b936a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc720207e0e513e531b1f266b966a2ffa57b936a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc720207e0e513e531b1f266b966a2ffa57b936a"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 7,
      "deletions": 2
    },
    "files": [
      {
        "sha": "ac73b242f1f2fd668fc66f48d7a50dcd006a68a2",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a1fbc4921ffc645e1ca86e96190da6c203c71d7/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a1fbc4921ffc645e1ca86e96190da6c203c71d7/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=6a1fbc4921ffc645e1ca86e96190da6c203c71d7",
        "patch": "@@ -167,7 +167,12 @@ bool LoadBlockIndex();\n void UnloadBlockIndex();\n /** Process protocol messages received from a given node */\n bool ProcessMessages(CNode* pfrom);\n-/** Send queued protocol messages to be sent to a give node */\n+/**\n+ * Send queued protocol messages to be sent to a give node.\n+ *\n+ * @param[in]   pto             The node which we are sending messages to.\n+ * @param[in]   fSendTrickle    When true send the trickled data, otherwise trickle the data until true.\n+ */\n bool SendMessages(CNode* pto, bool fSendTrickle);\n /** Run an instance of the script checking thread */\n void ThreadScriptCheck();"
      },
      {
        "sha": "11c2cd07d9ffab91e33c39a8ac34fa3da6403b15",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a1fbc4921ffc645e1ca86e96190da6c203c71d7/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a1fbc4921ffc645e1ca86e96190da6c203c71d7/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=6a1fbc4921ffc645e1ca86e96190da6c203c71d7",
        "patch": "@@ -1406,7 +1406,7 @@ void ThreadMessageHandler()\n             {\n                 TRY_LOCK(pnode->cs_vSend, lockSend);\n                 if (lockSend)\n-                    g_signals.SendMessages(pnode, pnode == pnodeTrickle);\n+                    g_signals.SendMessages(pnode, pnode == pnodeTrickle || pnode->fWhitelisted);\n             }\n             boost::this_thread::interruption_point();\n         }"
      }
    ]
  },
  {
    "sha": "8e4fd0cc315cad1e2925907ef7c62549a83730a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZTRmZDBjYzMxNWNhZDFlMjkyNTkwN2VmN2M2MjU0OWE4MzczMGE1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-26T08:15:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-26T08:26:57Z"
      },
      "message": "Merge pull request #5876\n\n5983a4e Add a NODE_GETUTXO service bit and document NODE_NETWORK. Stop translating the NODE_* names as they are technical and cannot be translated. (Mike Hearn)",
      "tree": {
        "sha": "509bc679fab04ad4d05ced6efef720c9b4ef583a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/509bc679fab04ad4d05ced6efef720c9b4ef583a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e4fd0cc315cad1e2925907ef7c62549a83730a5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVE8LRAAoJEHSBCwEjRsmm8ccIAKi/bu+ojYYpyTKZbpZ0+bkf\n1y+FAZZkS1wNbbbAWrssoHVRXPt/W/gDNrcs4mYLHYfivpXhGjOqZGQgR/yA1Vjy\n1XxbSE/ZC1n5lISENWaa7lpgk+cJYkXGOVjl/H2sLVVLGxxrYBt2w3eKZGVkoaqt\nwIJkVFeObeuA4XaiqrGIleDVhdFwEfgIsXvE0i95T12LcDz87KfwPSJqPLLd5An3\n+v7gsdl94YR3vV1sMmASDooMp4hmV6OZpH8Dim7V67dgx4mWpMlA09RrYuK+byIA\njVlb44DcyLWhy8TAtQ9AkE9WdBXME+bjk8IrwTvbPhNmAtFssAlyFsJdXWHz/BE=\n=rRiw\n-----END PGP SIGNATURE-----",
        "payload": "tree 509bc679fab04ad4d05ced6efef720c9b4ef583a\nparent 6a1fbc4921ffc645e1ca86e96190da6c203c71d7\nparent 5983a4e50f2c3f53024d9a5cecab69f67c882cca\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1427357736 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1427358417 +0100\n\nMerge pull request #5876\n\n5983a4e Add a NODE_GETUTXO service bit and document NODE_NETWORK. Stop translating the NODE_* names as they are technical and cannot be translated. (Mike Hearn)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e4fd0cc315cad1e2925907ef7c62549a83730a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8e4fd0cc315cad1e2925907ef7c62549a83730a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e4fd0cc315cad1e2925907ef7c62549a83730a5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a1fbc4921ffc645e1ca86e96190da6c203c71d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a1fbc4921ffc645e1ca86e96190da6c203c71d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a1fbc4921ffc645e1ca86e96190da6c203c71d7"
      },
      {
        "sha": "5983a4e50f2c3f53024d9a5cecab69f67c882cca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5983a4e50f2c3f53024d9a5cecab69f67c882cca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5983a4e50f2c3f53024d9a5cecab69f67c882cca"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 12,
      "deletions": 2
    },
    "files": [
      {
        "sha": "fd23eae1fc6e3635b5b58f5ff958d2825461f1e6",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e4fd0cc315cad1e2925907ef7c62549a83730a5/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e4fd0cc315cad1e2925907ef7c62549a83730a5/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=8e4fd0cc315cad1e2925907ef7c62549a83730a5",
        "patch": "@@ -67,7 +67,14 @@ class CMessageHeader\n \n /** nServices flags */\n enum {\n+    // NODE_NETWORK means that the node is capable of serving the block chain. It is currently\n+    // set by all Bitcoin Core nodes, and is unset by SPV clients or other peers that just want\n+    // network services but don't provide them.\n     NODE_NETWORK = (1 << 0),\n+    // NODE_GETUTXO means the node is capable of responding to the getutxo protocol request.\n+    // Bitcoin Core does not support this but a patch set called Bitcoin XT does.\n+    // See BIP 64 for details on how this is implemented.\n+    NODE_GETUTXO = (1 << 1),\n \n     // Bits 24-31 are reserved for temporary experiments. Just pick a bit that\n     // isn't getting used, or one not being used much, and notify the"
      },
      {
        "sha": "a5ee81db6c068d80e423687716b3c99f82b151e0",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e4fd0cc315cad1e2925907ef7c62549a83730a5/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e4fd0cc315cad1e2925907ef7c62549a83730a5/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=8e4fd0cc315cad1e2925907ef7c62549a83730a5",
        "patch": "@@ -878,10 +878,13 @@ QString formatServicesStr(quint64 mask)\n             switch (check)\n             {\n             case NODE_NETWORK:\n-                strList.append(QObject::tr(\"NETWORK\"));\n+                strList.append(\"NETWORK\");\n+                break;\n+            case NODE_GETUTXO:\n+                strList.append(\"GETUTXO\");\n                 break;\n             default:\n-                strList.append(QString(\"%1[%2]\").arg(QObject::tr(\"UNKNOWN\")).arg(check));\n+                strList.append(QString(\"%1[%2]\").arg(\"UNKNOWN\").arg(check));\n             }\n         }\n     }"
      }
    ]
  },
  {
    "sha": "223d8630b0bf1809d29660004255237ad9d15f86",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjNkODYzMGIwYmYxODA5ZDI5NjYwMDA0MjU1MjM3YWQ5ZDE1Zjg2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-27T21:03:36Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-27T21:03:36Z"
      },
      "message": "Update libsecp256k1.",
      "tree": {
        "sha": "2acc0f31189be834eb6996522ac61043d3ea6d51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2acc0f31189be834eb6996522ac61043d3ea6d51"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/223d8630b0bf1809d29660004255237ad9d15f86",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/223d8630b0bf1809d29660004255237ad9d15f86",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/223d8630b0bf1809d29660004255237ad9d15f86",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/223d8630b0bf1809d29660004255237ad9d15f86/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e4fd0cc315cad1e2925907ef7c62549a83730a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e4fd0cc315cad1e2925907ef7c62549a83730a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e4fd0cc315cad1e2925907ef7c62549a83730a5"
      },
      {
        "sha": "9d09322b41776a0d6ecde182f731eff77d0f052b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d09322b41776a0d6ecde182f731eff77d0f052b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d09322b41776a0d6ecde182f731eff77d0f052b"
      }
    ],
    "stats": {
      "total": 3990,
      "additions": 2525,
      "deletions": 1465
    },
    "files": [
      {
        "sha": "cc15338b7ef7c6e7a1acade834d35b6638e27363",
        "filename": "src/secp256k1/Makefile.am",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/Makefile.am?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -49,7 +49,7 @@ libsecp256k1_la_LIBADD = $(SECP_LIBS)\n \n noinst_PROGRAMS =\n if USE_BENCHMARK\n-noinst_PROGRAMS += bench_verify bench_recover bench_sign bench_inv\n+noinst_PROGRAMS += bench_verify bench_recover bench_sign bench_internal\n bench_verify_SOURCES = src/bench_verify.c\n bench_verify_LDADD = libsecp256k1.la $(SECP_LIBS)\n bench_verify_LDFLAGS = -static\n@@ -59,10 +59,10 @@ bench_recover_LDFLAGS = -static\n bench_sign_SOURCES = src/bench_sign.c\n bench_sign_LDADD = libsecp256k1.la $(SECP_LIBS)\n bench_sign_LDFLAGS = -static\n-bench_inv_SOURCES = src/bench_inv.c\n-bench_inv_LDADD = $(SECP_LIBS)\n-bench_inv_LDFLAGS = -static\n-bench_inv_CPPFLAGS = $(SECP_INCLUDES)\n+bench_internal_SOURCES = src/bench_internal.c\n+bench_internal_LDADD = $(SECP_LIBS)\n+bench_internal_LDFLAGS = -static\n+bench_internal_CPPFLAGS = $(SECP_INCLUDES)\n endif\n \n if USE_TESTS"
      },
      {
        "sha": "6095db42205be95ba7f1a8bfc9151e251548dc19",
        "filename": "src/secp256k1/README.md",
        "status": "modified",
        "additions": 13,
        "deletions": 7,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/README.md?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -5,25 +5,29 @@ libsecp256k1\n \n Optimized C library for EC operations on curve secp256k1.\n \n-This library is experimental, so use at your own risk.\n+This library is a work in progress and is being used to research best practices. Use at your own risk.\n \n Features:\n-* Low-level field and group operations on secp256k1.\n-* ECDSA signing/verification and key generation.\n+* secp256k1 ECDSA signing/verification and key generation.\n * Adding/multiplying private/public keys.\n * Serialization/parsing of private keys, public keys, signatures.\n+* Constant time, constant memory access signing and pubkey generation.\n+* Derandomized DSA (via RFC6979 or with a caller provided function.)\n * Very efficient implementation.\n \n Implementation details\n ----------------------\n \n * General\n-  * Avoid dynamic memory usage almost everywhere.\n+  * No runtime heap allocation.\n+  * Extensive testing infrastructure.\n+  * Structured to facilitate review and analysis.\n+  * Intended to be portable to any system with a C89 compiler and uint64_t support.\n+  * Expose only higher level interfaces to minimize the API surface and improve application security. (\"Be difficult to use insecurely.\")\n * Field operations\n   * Optimized implementation of arithmetic modulo the curve's field size (2^256 - 0x1000003D1).\n     * Using 5 52-bit limbs (including hand-optimized assembly for x86_64, by Diederik Huys).\n     * Using 10 26-bit limbs.\n-    * Using GMP.\n   * Field inverses and square roots using a sliding window over blocks of 1s (by Peter Dettman).\n * Scalar operations\n   * Optimized implementation without data-dependent branches of arithmetic modulo the curve's order.\n@@ -33,14 +37,15 @@ Implementation details\n   * Point addition formula specifically simplified for the curve equation (y^2 = x^3 + 7).\n   * Use addition between points in Jacobian and affine coordinates where possible.\n   * Use a unified addition/doubling formula where necessary to avoid data-dependent branches.\n+  * Point/x comparison without a field inversion by comparison in the Jacobian coordinate space.\n * Point multiplication for verification (a*P + b*G).\n   * Use wNAF notation for point multiplicands.\n   * Use a much larger window for multiples of G, using precomputed multiples.\n   * Use Shamir's trick to do the multiplication with the public key and the generator simultaneously.\n-  * Optionally use secp256k1's efficiently-computable endomorphism to split the multiplicands into 4 half-sized ones first.\n+  * Optionally (off by default) use secp256k1's efficiently-computable endomorphism to split the P multiplicand into 2 half-sized ones.\n * Point multiplication for signing\n   * Use a precomputed table of multiples of powers of 16 multiplied with the generator, so general multiplication becomes a series of additions.\n-  * Slice the precomputed table in memory per byte, so memory access to the table becomes uniform.\n+  * Access the table with branch-free conditional moves so memory access is uniform.\n   * No data-dependent branches\n   * The precomputed tables add and eventually subtract points for which no known scalar (private key) is known, preventing even an attacker with control over the private key used to control the data internally.\n \n@@ -52,4 +57,5 @@ libsecp256k1 is built using autotools:\n     $ ./autogen.sh\n     $ ./configure\n     $ make\n+    $ ./tests\n     $ sudo make install  # optional"
      },
      {
        "sha": "3dc1829516e4ec574c4dc17f0b692eb977e2b371",
        "filename": "src/secp256k1/configure.ac",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/configure.ac?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -5,7 +5,7 @@ AC_CONFIG_MACRO_DIR([build-aux/m4])\n AC_CANONICAL_HOST\n AH_TOP([#ifndef LIBSECP256K1_CONFIG_H])\n AH_TOP([#define LIBSECP256K1_CONFIG_H])\n-AH_BOTTOM([#endif //LIBSECP256K1_CONFIG_H])\n+AH_BOTTOM([#endif /*LIBSECP256K1_CONFIG_H*/])\n AM_INIT_AUTOMAKE([foreign subdir-objects])\n LT_INIT\n \n@@ -22,9 +22,9 @@ if test \"x$CFLAGS\" = \"x\"; then\n   CFLAGS=\"-O3 -g\"\n fi\n \n-AC_PROG_CC_C99\n-if test x\"$ac_cv_prog_cc_c99\" = x\"no\"; then\n-  AC_MSG_ERROR([c99 compiler support required])\n+AC_PROG_CC_C89\n+if test x\"$ac_cv_prog_cc_c89\" = x\"no\"; then\n+  AC_MSG_ERROR([c89 compiler support required])\n fi\n \n case $host in\n@@ -70,7 +70,7 @@ esac\n \n CFLAGS=\"$CFLAGS -W\"\n \n-warn_CFLAGS=\"-Wall -Wextra -Wcast-align -Wnested-externs -Wshadow -Wstrict-prototypes -Wno-unused-function\"\n+warn_CFLAGS=\"-std=c89 -pedantic -Wall -Wextra -Wcast-align -Wnested-externs -Wshadow -Wstrict-prototypes -Wno-unused-function -Wno-long-long -Wno-overlength-strings\"\n saved_CFLAGS=\"$CFLAGS\"\n CFLAGS=\"$CFLAGS $warn_CFLAGS\"\n AC_MSG_CHECKING([if ${CC} supports ${warn_CFLAGS}])\n@@ -305,6 +305,8 @@ if test x\"$use_endomorphism\" = x\"yes\"; then\n   AC_DEFINE(USE_ENDOMORPHISM, 1, [Define this symbol to use endomorphism optimization])\n fi\n \n+AC_C_BIGENDIAN()\n+\n AC_MSG_NOTICE([Using assembly optimizations: $set_asm])\n AC_MSG_NOTICE([Using field implementation: $set_field])\n AC_MSG_NOTICE([Using bignum implementation: $set_bignum])"
      },
      {
        "sha": "a6e39d13dbe652cac1abcda81fc74cff9495bd94",
        "filename": "src/secp256k1/include/secp256k1.h",
        "status": "modified",
        "additions": 39,
        "deletions": 7,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/include/secp256k1.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/include/secp256k1.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/include/secp256k1.h?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -78,7 +78,7 @@ SECP256K1_WARN_UNUSED_RESULT int secp256k1_ecdsa_verify(\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(4);\n \n /** A pointer to a function to deterministically generate a nonce.\n- * Returns: 1 if a nonce was succesfully generated. 0 will cause signing to fail.\n+ * Returns: 1 if a nonce was successfully generated. 0 will cause signing to fail.\n  * In:      msg32:     the 32-byte message hash being verified (will not be NULL)\n  *          key32:     pointer to a 32-byte secret key (will not be NULL)\n  *          attempt:   how many iterations we have tried to find a nonce.\n@@ -97,7 +97,10 @@ typedef int (*secp256k1_nonce_function_t)(\n   const void *data\n );\n \n-/** An implementation of RFC6979 (using HMAC-SHA256) as nonce generation function. */\n+/** An implementation of RFC6979 (using HMAC-SHA256) as nonce generation function.\n+ * If a data pointer is passed, it is assumed to be a pointer to 32 bytes of\n+ * extra entropy.\n+ */\n extern const secp256k1_nonce_function_t secp256k1_nonce_function_rfc6979;\n \n /** A default safe nonce generation function (currently equal to secp256k1_nonce_function_rfc6979). */\n@@ -106,15 +109,43 @@ extern const secp256k1_nonce_function_t secp256k1_nonce_function_default;\n \n /** Create an ECDSA signature.\n  *  Returns: 1: signature created\n- *           0: the nonce generation function failed\n+ *           0: the nonce generation function failed, the private key was invalid, or there is not\n+ *              enough space in the signature (as indicated by siglen).\n  *  In:      msg32:  the 32-byte message hash being signed (cannot be NULL)\n- *           seckey: pointer to a 32-byte secret key (cannot be NULL, assumed to be valid)\n+ *           seckey: pointer to a 32-byte secret key (cannot be NULL)\n  *           noncefp:pointer to a nonce generation function. If NULL, secp256k1_nonce_function_default is used\n  *           ndata:  pointer to arbitrary data used by the nonce generation function (can be NULL)\n  *  Out:     sig:    pointer to an array where the signature will be placed (cannot be NULL)\n  *  In/Out:  siglen: pointer to an int with the length of sig, which will be updated\n- *                   to contain the actual signature length (<=72).\n+ *                   to contain the actual signature length (<=72). If 0 is returned, this will be\n+ *                   set to zero.\n  * Requires starting using SECP256K1_START_SIGN.\n+ *\n+ * The sig always has an s value in the lower half of the range (From 0x1\n+ * to 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\n+ * inclusive), unlike many other implementations.\n+ * With ECDSA a third-party can can forge a second distinct signature\n+ * of the same message given a single initial signature without knowing\n+ * the key by setting s to its additive inverse mod-order, 'flipping' the\n+ * sign of the random point R which is not included in the signature.\n+ * Since the forgery is of the same message this isn't universally\n+ * problematic, but in systems where message malleability or uniqueness\n+ * of signatures is important this can cause issues.  This forgery can be\n+ * blocked by all verifiers forcing signers to use a canonical form. The\n+ * lower-S form reduces the size of signatures slightly on average when\n+ * variable length encodings (such as DER) are used and is cheap to\n+ * verify, making it a good choice. Security of always using lower-S is\n+ * assured because anyone can trivially modify a signature after the\n+ * fact to enforce this property.  Adjusting it inside the signing\n+ * function avoids the need to re-serialize or have curve specific\n+ * constants outside of the library.  By always using a canonical form\n+ * even in applications where it isn't needed it becomes possible to\n+ * impose a requirement later if a need is discovered.\n+ * No other forms of ECDSA malleability are known and none seem likely,\n+ * but there is no formal proof that ECDSA, even with this additional\n+ * restriction, is free of other malleability.  Commonly used serialization\n+ * schemes will also accept various non-unique encodings, so care should\n+ * be taken when this property is required for an application.\n  */\n int secp256k1_ecdsa_sign(\n   const unsigned char *msg32,\n@@ -127,12 +158,13 @@ int secp256k1_ecdsa_sign(\n \n /** Create a compact ECDSA signature (64 byte + recovery id).\n  *  Returns: 1: signature created\n- *           0: the nonce generation function failed\n+ *           0: the nonce generation function failed, or the secret key was invalid.\n  *  In:      msg32:  the 32-byte message hash being signed (cannot be NULL)\n- *           seckey: pointer to a 32-byte secret key (cannot be NULL, assumed to be valid)\n+ *           seckey: pointer to a 32-byte secret key (cannot be NULL)\n  *           noncefp:pointer to a nonce generation function. If NULL, secp256k1_nonce_function_default is used\n  *           ndata:  pointer to arbitrary data used by the nonce generation function (can be NULL)\n  *  Out:     sig:    pointer to a 64-byte array where the signature will be placed (cannot be NULL)\n+ *                   In case 0 is returned, the returned signature length will be zero.\n  *           recid:  pointer to an int, which will be updated to contain the recovery id (can be NULL)\n  * Requires starting using SECP256K1_START_SIGN.\n  */"
      },
      {
        "sha": "0559b3e85352c55858d830cb98fed25af4fe4e19",
        "filename": "src/secp256k1/src/bench.h",
        "status": "modified",
        "additions": 24,
        "deletions": 5,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/bench.h?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -17,21 +17,40 @@ static double gettimedouble(void) {\n     return tv.tv_usec * 0.000001 + tv.tv_sec;\n }\n \n-void run_benchmark(void (*benchmark)(void*), void (*setup)(void*), void (*teardown)(void*), void* data, int count, int iter) {\n+void print_number(double x) {\n+    double y = x;\n+    int c = 0;\n+    if (y < 0.0) y = -y;\n+    while (y < 100.0) {\n+        y *= 10.0;\n+        c++;\n+    }\n+    printf(\"%.*f\", c, x);\n+}\n+\n+void run_benchmark(char *name, void (*benchmark)(void*), void (*setup)(void*), void (*teardown)(void*), void* data, int count, int iter) {\n+    int i;\n     double min = HUGE_VAL;\n     double sum = 0.0;\n     double max = 0.0;\n-    for (int i = 0; i < count; i++) {\n+    for (i = 0; i < count; i++) {\n+        double begin, total;\n         if (setup) setup(data);\n-        double begin = gettimedouble();\n+        begin = gettimedouble();\n         benchmark(data);\n-        double total = gettimedouble() - begin;\n+        total = gettimedouble() - begin;\n         if (teardown) teardown(data);\n         if (total < min) min = total;\n         if (total > max) max = total;\n         sum += total;\n     }\n-    printf(\"min %.3fus / avg %.3fus / max %.3fus\\n\", min * 1000000.0 / iter, (sum / count) * 1000000.0 / iter, max * 1000000.0 / iter);\n+    printf(\"%s: min \", name);\n+    print_number(min * 1000000.0 / iter);\n+    printf(\"us / avg \");\n+    print_number((sum / count) * 1000000.0 / iter);\n+    printf(\"us / avg \");\n+    print_number(max * 1000000.0 / iter);\n+    printf(\"us\\n\");\n }\n \n #endif"
      },
      {
        "sha": "a960549b94ff0f57db967f556c4d339de5505659",
        "filename": "src/secp256k1/src/bench_internal.c",
        "status": "added",
        "additions": 318,
        "deletions": 0,
        "changes": 318,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/bench_internal.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/bench_internal.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/bench_internal.c?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -0,0 +1,318 @@\n+/**********************************************************************\n+ * Copyright (c) 2014-2015 Pieter Wuille                              *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+#include <stdio.h>\n+\n+#include \"include/secp256k1.h\"\n+\n+#include \"util.h\"\n+#include \"hash_impl.h\"\n+#include \"num_impl.h\"\n+#include \"field_impl.h\"\n+#include \"group_impl.h\"\n+#include \"scalar_impl.h\"\n+#include \"ecmult_impl.h\"\n+#include \"bench.h\"\n+\n+typedef struct {\n+    secp256k1_scalar_t scalar_x, scalar_y;\n+    secp256k1_fe_t fe_x, fe_y;\n+    secp256k1_ge_t ge_x, ge_y;\n+    secp256k1_gej_t gej_x, gej_y;\n+    unsigned char data[32];\n+    int wnaf[256];\n+} bench_inv_t;\n+\n+void bench_setup(void* arg) {\n+    bench_inv_t *data = (bench_inv_t*)arg;\n+\n+    static const unsigned char init_x[32] = {\n+        0x02, 0x03, 0x05, 0x07, 0x0b, 0x0d, 0x11, 0x13,\n+        0x17, 0x1d, 0x1f, 0x25, 0x29, 0x2b, 0x2f, 0x35,\n+        0x3b, 0x3d, 0x43, 0x47, 0x49, 0x4f, 0x53, 0x59,\n+        0x61, 0x65, 0x67, 0x6b, 0x6d, 0x71, 0x7f, 0x83\n+    };\n+\n+    static const unsigned char init_y[32] = {\n+        0x82, 0x83, 0x85, 0x87, 0x8b, 0x8d, 0x81, 0x83,\n+        0x97, 0xad, 0xaf, 0xb5, 0xb9, 0xbb, 0xbf, 0xc5,\n+        0xdb, 0xdd, 0xe3, 0xe7, 0xe9, 0xef, 0xf3, 0xf9,\n+        0x11, 0x15, 0x17, 0x1b, 0x1d, 0xb1, 0xbf, 0xd3\n+    };\n+\n+    secp256k1_scalar_set_b32(&data->scalar_x, init_x, NULL);\n+    secp256k1_scalar_set_b32(&data->scalar_y, init_y, NULL);\n+    secp256k1_fe_set_b32(&data->fe_x, init_x);\n+    secp256k1_fe_set_b32(&data->fe_y, init_y);\n+    CHECK(secp256k1_ge_set_xo_var(&data->ge_x, &data->fe_x, 0));\n+    CHECK(secp256k1_ge_set_xo_var(&data->ge_y, &data->fe_y, 1));\n+    secp256k1_gej_set_ge(&data->gej_x, &data->ge_x);\n+    secp256k1_gej_set_ge(&data->gej_y, &data->ge_y);\n+    memcpy(data->data, init_x, 32);\n+}\n+\n+void bench_scalar_add(void* arg) {\n+    int i;\n+    bench_inv_t *data = (bench_inv_t*)arg;\n+\n+    for (i = 0; i < 2000000; i++) {\n+        secp256k1_scalar_add(&data->scalar_x, &data->scalar_x, &data->scalar_y);\n+    }\n+}\n+\n+void bench_scalar_negate(void* arg) {\n+    int i;\n+    bench_inv_t *data = (bench_inv_t*)arg;\n+\n+    for (i = 0; i < 2000000; i++) {\n+        secp256k1_scalar_negate(&data->scalar_x, &data->scalar_x);\n+    }\n+}\n+\n+void bench_scalar_sqr(void* arg) {\n+    int i;\n+    bench_inv_t *data = (bench_inv_t*)arg;\n+\n+    for (i = 0; i < 200000; i++) {\n+        secp256k1_scalar_sqr(&data->scalar_x, &data->scalar_x);\n+    }\n+}\n+\n+void bench_scalar_mul(void* arg) {\n+    int i;\n+    bench_inv_t *data = (bench_inv_t*)arg;\n+\n+    for (i = 0; i < 200000; i++) {\n+        secp256k1_scalar_mul(&data->scalar_x, &data->scalar_x, &data->scalar_y);\n+    }\n+}\n+\n+#ifdef USE_ENDOMORPHISM\n+void bench_scalar_split(void* arg) {\n+    int i;\n+    bench_inv_t *data = (bench_inv_t*)arg;\n+\n+    for (i = 0; i < 20000; i++) {\n+        secp256k1_scalar_t l, r;\n+        secp256k1_scalar_split_lambda_var(&l, &r, &data->scalar_x);\n+        secp256k1_scalar_add(&data->scalar_x, &data->scalar_x, &data->scalar_y);\n+    }\n+}\n+#endif\n+\n+void bench_scalar_inverse(void* arg) {\n+    int i;\n+    bench_inv_t *data = (bench_inv_t*)arg;\n+\n+    for (i = 0; i < 2000; i++) {\n+        secp256k1_scalar_inverse(&data->scalar_x, &data->scalar_x);\n+        secp256k1_scalar_add(&data->scalar_x, &data->scalar_x, &data->scalar_y);\n+    }\n+}\n+\n+void bench_scalar_inverse_var(void* arg) {\n+    int i;\n+    bench_inv_t *data = (bench_inv_t*)arg;\n+\n+    for (i = 0; i < 2000; i++) {\n+        secp256k1_scalar_inverse_var(&data->scalar_x, &data->scalar_x);\n+        secp256k1_scalar_add(&data->scalar_x, &data->scalar_x, &data->scalar_y);\n+    }\n+}\n+\n+void bench_field_normalize(void* arg) {\n+    int i;\n+    bench_inv_t *data = (bench_inv_t*)arg;\n+\n+    for (i = 0; i < 2000000; i++) {\n+        secp256k1_fe_normalize(&data->fe_x);\n+    }\n+}\n+\n+void bench_field_normalize_weak(void* arg) {\n+    int i;\n+    bench_inv_t *data = (bench_inv_t*)arg;\n+\n+    for (i = 0; i < 2000000; i++) {\n+        secp256k1_fe_normalize_weak(&data->fe_x);\n+    }\n+}\n+\n+void bench_field_mul(void* arg) {\n+    int i;\n+    bench_inv_t *data = (bench_inv_t*)arg;\n+\n+    for (i = 0; i < 200000; i++) {\n+        secp256k1_fe_mul(&data->fe_x, &data->fe_x, &data->fe_y);\n+    }\n+}\n+\n+void bench_field_sqr(void* arg) {\n+    int i;\n+    bench_inv_t *data = (bench_inv_t*)arg;\n+\n+    for (i = 0; i < 200000; i++) {\n+        secp256k1_fe_sqr(&data->fe_x, &data->fe_x);\n+    }\n+}\n+\n+void bench_field_inverse(void* arg) {\n+    int i;\n+    bench_inv_t *data = (bench_inv_t*)arg;\n+\n+    for (i = 0; i < 20000; i++) {\n+        secp256k1_fe_inv(&data->fe_x, &data->fe_x);\n+        secp256k1_fe_add(&data->fe_x, &data->fe_y);\n+    }\n+}\n+\n+void bench_field_inverse_var(void* arg) {\n+    int i;\n+    bench_inv_t *data = (bench_inv_t*)arg;\n+\n+    for (i = 0; i < 20000; i++) {\n+        secp256k1_fe_inv_var(&data->fe_x, &data->fe_x);\n+        secp256k1_fe_add(&data->fe_x, &data->fe_y);\n+    }\n+}\n+\n+void bench_field_sqrt_var(void* arg) {\n+    int i;\n+    bench_inv_t *data = (bench_inv_t*)arg;\n+\n+    for (i = 0; i < 20000; i++) {\n+        secp256k1_fe_sqrt_var(&data->fe_x, &data->fe_x);\n+        secp256k1_fe_add(&data->fe_x, &data->fe_y);\n+    }\n+}\n+\n+void bench_group_double_var(void* arg) {\n+    int i;\n+    bench_inv_t *data = (bench_inv_t*)arg;\n+\n+    for (i = 0; i < 200000; i++) {\n+        secp256k1_gej_double_var(&data->gej_x, &data->gej_x);\n+    }\n+}\n+\n+void bench_group_add_var(void* arg) {\n+    int i;\n+    bench_inv_t *data = (bench_inv_t*)arg;\n+\n+    for (i = 0; i < 200000; i++) {\n+        secp256k1_gej_add_var(&data->gej_x, &data->gej_x, &data->gej_y);\n+    }\n+}\n+\n+void bench_group_add_affine(void* arg) {\n+    int i;\n+    bench_inv_t *data = (bench_inv_t*)arg;\n+\n+    for (i = 0; i < 200000; i++) {\n+        secp256k1_gej_add_ge(&data->gej_x, &data->gej_x, &data->ge_y);\n+    }\n+}\n+\n+void bench_group_add_affine_var(void* arg) {\n+    int i;\n+    bench_inv_t *data = (bench_inv_t*)arg;\n+\n+    for (i = 0; i < 200000; i++) {\n+        secp256k1_gej_add_ge_var(&data->gej_x, &data->gej_x, &data->ge_y);\n+    }\n+}\n+\n+void bench_ecmult_wnaf(void* arg) {\n+    int i;\n+    bench_inv_t *data = (bench_inv_t*)arg;\n+\n+    for (i = 0; i < 20000; i++) {\n+        secp256k1_ecmult_wnaf(data->wnaf, &data->scalar_x, WINDOW_A);\n+        secp256k1_scalar_add(&data->scalar_x, &data->scalar_x, &data->scalar_y);\n+    }\n+}\n+\n+\n+void bench_sha256(void* arg) {\n+    int i;\n+    bench_inv_t *data = (bench_inv_t*)arg;\n+    secp256k1_sha256_t sha;\n+\n+    for (i = 0; i < 20000; i++) {\n+        secp256k1_sha256_initialize(&sha);\n+        secp256k1_sha256_write(&sha, data->data, 32);\n+        secp256k1_sha256_finalize(&sha, data->data);\n+    }\n+}\n+\n+void bench_hmac_sha256(void* arg) {\n+    int i;\n+    bench_inv_t *data = (bench_inv_t*)arg;\n+    secp256k1_hmac_sha256_t hmac;\n+\n+    for (i = 0; i < 20000; i++) {\n+        secp256k1_hmac_sha256_initialize(&hmac, data->data, 32);\n+        secp256k1_hmac_sha256_write(&hmac, data->data, 32);\n+        secp256k1_hmac_sha256_finalize(&hmac, data->data);\n+    }\n+}\n+\n+void bench_rfc6979_hmac_sha256(void* arg) {\n+    int i;\n+    bench_inv_t *data = (bench_inv_t*)arg;\n+    secp256k1_rfc6979_hmac_sha256_t rng;\n+\n+    for (i = 0; i < 20000; i++) {\n+        secp256k1_rfc6979_hmac_sha256_initialize(&rng, data->data, 32, data->data, 32, NULL, 0);\n+        secp256k1_rfc6979_hmac_sha256_generate(&rng, data->data, 32);\n+    }\n+}\n+\n+\n+int have_flag(int argc, char** argv, char *flag) {\n+    char** argm = argv + argc;\n+    argv++;\n+    if (argv == argm) {\n+        return 1;\n+    }\n+    while (argv != NULL && argv != argm) {\n+        if (strcmp(*argv, flag) == 0) return 1;\n+        argv++;\n+    }\n+    return 0;\n+}\n+\n+int main(int argc, char **argv) {\n+    bench_inv_t data;\n+    if (have_flag(argc, argv, \"scalar\") || have_flag(argc, argv, \"add\")) run_benchmark(\"scalar_add\", bench_scalar_add, bench_setup, NULL, &data, 10, 2000000);\n+    if (have_flag(argc, argv, \"scalar\") || have_flag(argc, argv, \"negate\")) run_benchmark(\"scalar_negate\", bench_scalar_negate, bench_setup, NULL, &data, 10, 2000000);\n+    if (have_flag(argc, argv, \"scalar\") || have_flag(argc, argv, \"sqr\")) run_benchmark(\"scalar_sqr\", bench_scalar_sqr, bench_setup, NULL, &data, 10, 200000);\n+    if (have_flag(argc, argv, \"scalar\") || have_flag(argc, argv, \"mul\")) run_benchmark(\"scalar_mul\", bench_scalar_mul, bench_setup, NULL, &data, 10, 200000);\n+#ifdef USE_ENDOMORPHISM\n+    if (have_flag(argc, argv, \"scalar\") || have_flag(argc, argv, \"split\")) run_benchmark(\"scalar_split\", bench_scalar_split, bench_setup, NULL, &data, 10, 20000);\n+#endif\n+    if (have_flag(argc, argv, \"scalar\") || have_flag(argc, argv, \"inverse\")) run_benchmark(\"scalar_inverse\", bench_scalar_inverse, bench_setup, NULL, &data, 10, 2000);\n+    if (have_flag(argc, argv, \"scalar\") || have_flag(argc, argv, \"inverse\")) run_benchmark(\"scalar_inverse_var\", bench_scalar_inverse_var, bench_setup, NULL, &data, 10, 2000);\n+\n+    if (have_flag(argc, argv, \"field\") || have_flag(argc, argv, \"normalize\")) run_benchmark(\"field_normalize\", bench_field_normalize, bench_setup, NULL, &data, 10, 2000000);\n+    if (have_flag(argc, argv, \"field\") || have_flag(argc, argv, \"normalize\")) run_benchmark(\"field_normalize_weak\", bench_field_normalize_weak, bench_setup, NULL, &data, 10, 2000000);\n+    if (have_flag(argc, argv, \"field\") || have_flag(argc, argv, \"sqr\")) run_benchmark(\"field_sqr\", bench_field_sqr, bench_setup, NULL, &data, 10, 200000);\n+    if (have_flag(argc, argv, \"field\") || have_flag(argc, argv, \"mul\")) run_benchmark(\"field_mul\", bench_field_mul, bench_setup, NULL, &data, 10, 200000);\n+    if (have_flag(argc, argv, \"field\") || have_flag(argc, argv, \"inverse\")) run_benchmark(\"field_inverse\", bench_field_inverse, bench_setup, NULL, &data, 10, 20000);\n+    if (have_flag(argc, argv, \"field\") || have_flag(argc, argv, \"inverse\")) run_benchmark(\"field_inverse_var\", bench_field_inverse_var, bench_setup, NULL, &data, 10, 20000);\n+    if (have_flag(argc, argv, \"field\") || have_flag(argc, argv, \"sqrt\")) run_benchmark(\"field_sqrt_var\", bench_field_sqrt_var, bench_setup, NULL, &data, 10, 20000);\n+\n+    if (have_flag(argc, argv, \"group\") || have_flag(argc, argv, \"double\")) run_benchmark(\"group_double_var\", bench_group_double_var, bench_setup, NULL, &data, 10, 200000);\n+    if (have_flag(argc, argv, \"group\") || have_flag(argc, argv, \"add\")) run_benchmark(\"group_add_var\", bench_group_add_var, bench_setup, NULL, &data, 10, 200000);\n+    if (have_flag(argc, argv, \"group\") || have_flag(argc, argv, \"add\")) run_benchmark(\"group_add_affine\", bench_group_add_affine, bench_setup, NULL, &data, 10, 200000);\n+    if (have_flag(argc, argv, \"group\") || have_flag(argc, argv, \"add\")) run_benchmark(\"group_add_affine_var\", bench_group_add_affine_var, bench_setup, NULL, &data, 10, 200000);\n+\n+    if (have_flag(argc, argv, \"ecmult\") || have_flag(argc, argv, \"wnaf\")) run_benchmark(\"ecmult_wnaf\", bench_ecmult_wnaf, bench_setup, NULL, &data, 10, 20000);\n+\n+    if (have_flag(argc, argv, \"hash\") || have_flag(argc, argv, \"sha256\")) run_benchmark(\"hash_sha256\", bench_sha256, bench_setup, NULL, &data, 10, 20000);\n+    if (have_flag(argc, argv, \"hash\") || have_flag(argc, argv, \"hmac\")) run_benchmark(\"hash_hmac_sha256\", bench_hmac_sha256, bench_setup, NULL, &data, 10, 20000);\n+    if (have_flag(argc, argv, \"hash\") || have_flag(argc, argv, \"rng6979\")) run_benchmark(\"hash_rfc6979_hmac_sha256\", bench_rfc6979_hmac_sha256, bench_setup, NULL, &data, 10, 20000);\n+    return 0;\n+}"
      },
      {
        "sha": "3bdedea30e47119ade683786573e38a1642da2f1",
        "filename": "src/secp256k1/src/bench_inv.c",
        "status": "removed",
        "additions": 0,
        "deletions": 52,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e4fd0cc315cad1e2925907ef7c62549a83730a5/src/secp256k1/src/bench_inv.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e4fd0cc315cad1e2925907ef7c62549a83730a5/src/secp256k1/src/bench_inv.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/bench_inv.c?ref=8e4fd0cc315cad1e2925907ef7c62549a83730a5",
        "patch": "@@ -1,52 +0,0 @@\n-/**********************************************************************\n- * Copyright (c) 2014 Pieter Wuille                                   *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n-#include <stdio.h>\n-\n-#include \"include/secp256k1.h\"\n-\n-#include \"util.h\"\n-#include \"num_impl.h\"\n-#include \"field_impl.h\"\n-#include \"group_impl.h\"\n-#include \"scalar_impl.h\"\n-#include \"bench.h\"\n-\n-typedef struct {\n-    secp256k1_scalar_t base, x;\n-} bench_inv_t;\n-\n-void bench_inv_setup(void* arg) {\n-    bench_inv_t *data = (bench_inv_t*)arg;\n-\n-    static const unsigned char init[32] = {\n-        0x02, 0x03, 0x05, 0x07, 0x0b, 0x0d, 0x11, 0x13,\n-        0x17, 0x1d, 0x1f, 0x25, 0x29, 0x2b, 0x2f, 0x35,\n-        0x3b, 0x3d, 0x43, 0x47, 0x49, 0x4f, 0x53, 0x59,\n-        0x61, 0x65, 0x67, 0x6b, 0x6d, 0x71, 0x7f, 0x83\n-    };\n-\n-    secp256k1_scalar_set_b32(&data->base, init, NULL);\n-    secp256k1_scalar_set_b32(&data->x, init, NULL);\n-}\n-\n-void bench_inv(void* arg) {\n-    bench_inv_t *data = (bench_inv_t*)arg;\n-\n-    for (int i=0; i<20000; i++) {\n-        secp256k1_scalar_inverse(&data->x, &data->x);\n-        secp256k1_scalar_add(&data->x, &data->x, &data->base);\n-    }\n-}\n-\n-int main(void) {\n-    secp256k1_ge_start();\n-\n-    bench_inv_t data;\n-    run_benchmark(bench_inv, bench_inv_setup, NULL, &data, 10, 20000);\n-\n-    secp256k1_ge_stop();\n-    return 0;\n-}"
      },
      {
        "sha": "6991cc9d6c595765386fefcb99270ecf7b0a9935",
        "filename": "src/secp256k1/src/bench_recover.c",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/bench_recover.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/bench_recover.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/bench_recover.c?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -14,13 +14,15 @@ typedef struct {\n } bench_recover_t;\n \n void bench_recover(void* arg) {\n+    int i;\n     bench_recover_t *data = (bench_recover_t*)arg;\n-\n     unsigned char pubkey[33];\n-    for (int i=0; i<20000; i++) {\n+\n+    for (i = 0; i < 20000; i++) {\n+        int j;\n         int pubkeylen = 33;\n         CHECK(secp256k1_ecdsa_recover_compact(data->msg, data->sig, pubkey, &pubkeylen, 1, i % 2));\n-        for (int j = 0; j < 32; j++) {\n+        for (j = 0; j < 32; j++) {\n             data->sig[j + 32] = data->msg[j];    /* Move former message to S. */\n             data->msg[j] = data->sig[j];         /* Move former R to message. */\n             data->sig[j] = pubkey[j + 1];        /* Move recovered pubkey X coordinate to R (which must be a valid X coordinate). */\n@@ -29,17 +31,18 @@ void bench_recover(void* arg) {\n }\n \n void bench_recover_setup(void* arg) {\n+    int i;\n     bench_recover_t *data = (bench_recover_t*)arg;\n \n-    for (int i = 0; i < 32; i++) data->msg[i] = 1 + i;\n-    for (int i = 0; i < 64; i++) data->sig[i] = 65 + i;\n+    for (i = 0; i < 32; i++) data->msg[i] = 1 + i;\n+    for (i = 0; i < 64; i++) data->sig[i] = 65 + i;\n }\n \n int main(void) {\n+    bench_recover_t data;\n     secp256k1_start(SECP256K1_START_VERIFY);\n \n-    bench_recover_t data;\n-    run_benchmark(bench_recover, bench_recover_setup, NULL, &data, 10, 20000);\n+    run_benchmark(\"ecdsa_recover\", bench_recover, bench_recover_setup, NULL, &data, 10, 20000);\n \n     secp256k1_stop();\n     return 0;"
      },
      {
        "sha": "c5b6829a84639a647a136a404bfd77afd36a0f8f",
        "filename": "src/secp256k1/src/bench_sign.c",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/bench_sign.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/bench_sign.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/bench_sign.c?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -14,31 +14,34 @@ typedef struct {\n } bench_sign_t;\n \n static void bench_sign_setup(void* arg) {\n+    int i;\n     bench_sign_t *data = (bench_sign_t*)arg;\n \n-    for (int i = 0; i < 32; i++) data->msg[i] = i + 1;\n-    for (int i = 0; i < 32; i++) data->key[i] = i + 65;\n+    for (i = 0; i < 32; i++) data->msg[i] = i + 1;\n+    for (i = 0; i < 32; i++) data->key[i] = i + 65;\n }\n \n static void bench_sign(void* arg) {\n+    int i;\n     bench_sign_t *data = (bench_sign_t*)arg;\n \n     unsigned char sig[64];\n-    for (int i=0; i<20000; i++) {\n+    for (i = 0; i < 20000; i++) {\n+        int j;\n         int recid = 0;\n         CHECK(secp256k1_ecdsa_sign_compact(data->msg, sig, data->key, NULL, NULL, &recid));\n-        for (int j = 0; j < 32; j++) {\n+        for (j = 0; j < 32; j++) {\n             data->msg[j] = sig[j];             /* Move former R to message. */\n             data->key[j] = sig[j + 32];        /* Move former S to key.     */\n         }\n     }\n }\n \n int main(void) {\n+    bench_sign_t data;\n     secp256k1_start(SECP256K1_START_SIGN);\n \n-    bench_sign_t data;\n-    run_benchmark(bench_sign, bench_sign_setup, NULL, &data, 10, 20000);\n+    run_benchmark(\"ecdsa_sign\", bench_sign, bench_sign_setup, NULL, &data, 10, 20000);\n \n     secp256k1_stop();\n     return 0;"
      },
      {
        "sha": "c279305a0dba6e7560bc834e011f574a30c8ccd0",
        "filename": "src/secp256k1/src/bench_verify.c",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/bench_verify.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/bench_verify.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/bench_verify.c?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -21,9 +21,10 @@ typedef struct {\n } benchmark_verify_t;\n \n static void benchmark_verify(void* arg) {\n+    int i;\n     benchmark_verify_t* data = (benchmark_verify_t*)arg;\n \n-    for (int i=0; i<20000; i++) {\n+    for (i = 0; i < 20000; i++) {\n         data->sig[data->siglen - 1] ^= (i & 0xFF);\n         data->sig[data->siglen - 2] ^= ((i >> 8) & 0xFF);\n         data->sig[data->siglen - 3] ^= ((i >> 16) & 0xFF);\n@@ -35,18 +36,19 @@ static void benchmark_verify(void* arg) {\n }\n \n int main(void) {\n-    secp256k1_start(SECP256K1_START_VERIFY | SECP256K1_START_SIGN);\n-\n+    int i;\n     benchmark_verify_t data;\n \n-    for (int i = 0; i < 32; i++) data.msg[i] = 1 + i;\n-    for (int i = 0; i < 32; i++) data.key[i] = 33 + i;\n+    secp256k1_start(SECP256K1_START_VERIFY | SECP256K1_START_SIGN);\n+\n+    for (i = 0; i < 32; i++) data.msg[i] = 1 + i;\n+    for (i = 0; i < 32; i++) data.key[i] = 33 + i;\n     data.siglen = 72;\n     secp256k1_ecdsa_sign(data.msg, data.sig, &data.siglen, data.key, NULL, NULL);\n     data.pubkeylen = 33;\n     CHECK(secp256k1_ec_pubkey_create(data.pubkey, &data.pubkeylen, data.key, 1));\n \n-    run_benchmark(benchmark_verify, NULL, NULL, &data, 10, 20000);\n+    run_benchmark(\"ecdsa_verify\", benchmark_verify, NULL, NULL, &data, 10, 20000);\n \n     secp256k1_stop();\n     return 0;"
      },
      {
        "sha": "c195e7afcbf115e4efaceca526aabdd80a8c0c2d",
        "filename": "src/secp256k1/src/ecdsa.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/ecdsa.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/ecdsa.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecdsa.h?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -10,9 +10,6 @@\n #include \"scalar.h\"\n #include \"group.h\"\n \n-static void secp256k1_ecsda_start(void);\n-static void secp256k1_ecdsa_stop(void);\n-\n typedef struct {\n     secp256k1_scalar_t r, s;\n } secp256k1_ecdsa_sig_t;\n@@ -22,6 +19,5 @@ static int secp256k1_ecdsa_sig_serialize(unsigned char *sig, int *size, const se\n static int secp256k1_ecdsa_sig_verify(const secp256k1_ecdsa_sig_t *sig, const secp256k1_ge_t *pubkey, const secp256k1_scalar_t *message);\n static int secp256k1_ecdsa_sig_sign(secp256k1_ecdsa_sig_t *sig, const secp256k1_scalar_t *seckey, const secp256k1_scalar_t *message, const secp256k1_scalar_t *nonce, int *recid);\n static int secp256k1_ecdsa_sig_recover(const secp256k1_ecdsa_sig_t *sig, secp256k1_ge_t *pubkey, const secp256k1_scalar_t *message, int recid);\n-static void secp256k1_ecdsa_sig_set_rs(secp256k1_ecdsa_sig_t *sig, const secp256k1_scalar_t *r, const secp256k1_scalar_t *s);\n \n #endif"
      },
      {
        "sha": "1a77649390efcd8648e4950851cf5998d4f6d449",
        "filename": "src/secp256k1/src/ecdsa_impl.h",
        "status": "modified",
        "additions": 86,
        "deletions": 87,
        "changes": 173,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/ecdsa_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/ecdsa_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecdsa_impl.h?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -15,71 +15,69 @@\n #include \"ecmult_gen.h\"\n #include \"ecdsa.h\"\n \n-typedef struct {\n-    secp256k1_fe_t order_as_fe;\n-    secp256k1_fe_t p_minus_order;\n-} secp256k1_ecdsa_consts_t;\n-\n-static const secp256k1_ecdsa_consts_t *secp256k1_ecdsa_consts = NULL;\n-\n-static void secp256k1_ecdsa_start(void) {\n-    if (secp256k1_ecdsa_consts != NULL)\n-        return;\n-\n-    /* Allocate. */\n-    secp256k1_ecdsa_consts_t *ret = (secp256k1_ecdsa_consts_t*)checked_malloc(sizeof(secp256k1_ecdsa_consts_t));\n-\n-    static const unsigned char order[] = {\n-        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n-        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,\n-        0xBA,0xAE,0xDC,0xE6,0xAF,0x48,0xA0,0x3B,\n-        0xBF,0xD2,0x5E,0x8C,0xD0,0x36,0x41,0x41\n-    };\n-\n-    secp256k1_fe_set_b32(&ret->order_as_fe, order);\n-    secp256k1_fe_negate(&ret->p_minus_order, &ret->order_as_fe, 1);\n-    secp256k1_fe_normalize_var(&ret->p_minus_order);\n-\n-    /* Set the global pointer. */\n-    secp256k1_ecdsa_consts = ret;\n-}\n-\n-static void secp256k1_ecdsa_stop(void) {\n-    if (secp256k1_ecdsa_consts == NULL)\n-        return;\n-\n-    secp256k1_ecdsa_consts_t *c = (secp256k1_ecdsa_consts_t*)secp256k1_ecdsa_consts;\n-    secp256k1_ecdsa_consts = NULL;\n-    free(c);\n-}\n+/** Group order for secp256k1 defined as 'n' in \"Standards for Efficient Cryptography\" (SEC2) 2.7.1\n+ *  sage: for t in xrange(1023, -1, -1):\n+ *     ..   p = 2**256 - 2**32 - t\n+ *     ..   if p.is_prime():\n+ *     ..     print '%x'%p\n+ *     ..     break\n+ *   'fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'\n+ *  sage: a = 0\n+ *  sage: b = 7\n+ *  sage: F = FiniteField (p)\n+ *  sage: '%x' % (EllipticCurve ([F (a), F (b)]).order())\n+ *   'fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'\n+ */\n+static const secp256k1_fe_t secp256k1_ecdsa_const_order_as_fe = SECP256K1_FE_CONST(\n+    0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFEUL,\n+    0xBAAEDCE6UL, 0xAF48A03BUL, 0xBFD25E8CUL, 0xD0364141UL\n+);\n+\n+/** Difference between field and order, values 'p' and 'n' values defined in\n+ *  \"Standards for Efficient Cryptography\" (SEC2) 2.7.1.\n+ *  sage: p = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F\n+ *  sage: a = 0\n+ *  sage: b = 7\n+ *  sage: F = FiniteField (p)\n+ *  sage: '%x' % (p - EllipticCurve ([F (a), F (b)]).order())\n+ *   '14551231950b75fc4402da1722fc9baee'\n+ */\n+static const secp256k1_fe_t secp256k1_ecdsa_const_p_minus_order = SECP256K1_FE_CONST(\n+    0, 0, 0, 1, 0x45512319UL, 0x50B75FC4UL, 0x402DA172UL, 0x2FC9BAEEUL\n+);\n \n static int secp256k1_ecdsa_sig_parse(secp256k1_ecdsa_sig_t *r, const unsigned char *sig, int size) {\n+    unsigned char ra[32] = {0}, sa[32] = {0};\n+    const unsigned char *rp;\n+    const unsigned char *sp;\n+    int lenr;\n+    int lens;\n+    int overflow;\n     if (sig[0] != 0x30) return 0;\n-    int lenr = sig[3];\n+    lenr = sig[3];\n     if (5+lenr >= size) return 0;\n-    int lens = sig[lenr+5];\n+    lens = sig[lenr+5];\n     if (sig[1] != lenr+lens+4) return 0;\n     if (lenr+lens+6 > size) return 0;\n     if (sig[2] != 0x02) return 0;\n     if (lenr == 0) return 0;\n     if (sig[lenr+4] != 0x02) return 0;\n     if (lens == 0) return 0;\n-    const unsigned char *sp = sig + 6 + lenr;\n+    sp = sig + 6 + lenr;\n     while (lens > 0 && sp[0] == 0) {\n         lens--;\n         sp++;\n     }\n     if (lens > 32) return 0;\n-    const unsigned char *rp = sig + 4;\n+    rp = sig + 4;\n     while (lenr > 0 && rp[0] == 0) {\n         lenr--;\n         rp++;\n     }\n     if (lenr > 32) return 0;\n-    unsigned char ra[32] = {0}, sa[32] = {0};\n     memcpy(ra + 32 - lenr, rp, lenr);\n     memcpy(sa + 32 - lens, sp, lens);\n-    int overflow = 0;\n+    overflow = 0;\n     secp256k1_scalar_set_b32(&r->r, ra, &overflow);\n     if (overflow) return 0;\n     secp256k1_scalar_set_b32(&r->s, sa, &overflow);\n@@ -89,10 +87,10 @@ static int secp256k1_ecdsa_sig_parse(secp256k1_ecdsa_sig_t *r, const unsigned ch\n \n static int secp256k1_ecdsa_sig_serialize(unsigned char *sig, int *size, const secp256k1_ecdsa_sig_t *a) {\n     unsigned char r[33] = {0}, s[33] = {0};\n-    secp256k1_scalar_get_b32(&r[1], &a->r);\n-    secp256k1_scalar_get_b32(&s[1], &a->s);\n     unsigned char *rp = r, *sp = s;\n     int lenR = 33, lenS = 33;\n+    secp256k1_scalar_get_b32(&r[1], &a->r);\n+    secp256k1_scalar_get_b32(&s[1], &a->s);\n     while (lenR > 1 && rp[0] == 0 && rp[1] < 0x80) { lenR--; rp++; }\n     while (lenS > 1 && sp[0] == 0 && sp[1] < 0x80) { lenS--; sp++; }\n     if (*size < 6+lenS+lenR)\n@@ -110,93 +108,100 @@ static int secp256k1_ecdsa_sig_serialize(unsigned char *sig, int *size, const se\n }\n \n static int secp256k1_ecdsa_sig_verify(const secp256k1_ecdsa_sig_t *sig, const secp256k1_ge_t *pubkey, const secp256k1_scalar_t *message) {\n+    unsigned char c[32];\n+    secp256k1_scalar_t sn, u1, u2;\n+    secp256k1_fe_t xr;\n+    secp256k1_gej_t pubkeyj;\n+    secp256k1_gej_t pr;\n+\n     if (secp256k1_scalar_is_zero(&sig->r) || secp256k1_scalar_is_zero(&sig->s))\n         return 0;\n \n-    secp256k1_scalar_t sn, u1, u2;\n     secp256k1_scalar_inverse_var(&sn, &sig->s);\n     secp256k1_scalar_mul(&u1, &sn, message);\n     secp256k1_scalar_mul(&u2, &sn, &sig->r);\n-    secp256k1_gej_t pubkeyj; secp256k1_gej_set_ge(&pubkeyj, pubkey);\n-    secp256k1_gej_t pr; secp256k1_ecmult(&pr, &pubkeyj, &u2, &u1);\n+    secp256k1_gej_set_ge(&pubkeyj, pubkey);\n+    secp256k1_ecmult(&pr, &pubkeyj, &u2, &u1);\n     if (secp256k1_gej_is_infinity(&pr)) {\n         return 0;\n     }\n-    unsigned char c[32];\n     secp256k1_scalar_get_b32(c, &sig->r);\n-    secp256k1_fe_t xr;\n     secp256k1_fe_set_b32(&xr, c);\n \n-    // We now have the recomputed R point in pr, and its claimed x coordinate (modulo n)\n-    // in xr. Naively, we would extract the x coordinate from pr (requiring a inversion modulo p),\n-    // compute the remainder modulo n, and compare it to xr. However:\n-    //\n-    //       xr == X(pr) mod n\n-    //   <=> exists h. (xr + h * n < p && xr + h * n == X(pr))\n-    //   [Since 2 * n > p, h can only be 0 or 1]\n-    //   <=> (xr == X(pr)) || (xr + n < p && xr + n == X(pr))\n-    //   [In Jacobian coordinates, X(pr) is pr.x / pr.z^2 mod p]\n-    //   <=> (xr == pr.x / pr.z^2 mod p) || (xr + n < p && xr + n == pr.x / pr.z^2 mod p)\n-    //   [Multiplying both sides of the equations by pr.z^2 mod p]\n-    //   <=> (xr * pr.z^2 mod p == pr.x) || (xr + n < p && (xr + n) * pr.z^2 mod p == pr.x)\n-    //\n-    // Thus, we can avoid the inversion, but we have to check both cases separately.\n-    // secp256k1_gej_eq_x implements the (xr * pr.z^2 mod p == pr.x) test.\n+    /** We now have the recomputed R point in pr, and its claimed x coordinate (modulo n)\n+     *  in xr. Naively, we would extract the x coordinate from pr (requiring a inversion modulo p),\n+     *  compute the remainder modulo n, and compare it to xr. However:\n+     *\n+     *        xr == X(pr) mod n\n+     *    <=> exists h. (xr + h * n < p && xr + h * n == X(pr))\n+     *    [Since 2 * n > p, h can only be 0 or 1]\n+     *    <=> (xr == X(pr)) || (xr + n < p && xr + n == X(pr))\n+     *    [In Jacobian coordinates, X(pr) is pr.x / pr.z^2 mod p]\n+     *    <=> (xr == pr.x / pr.z^2 mod p) || (xr + n < p && xr + n == pr.x / pr.z^2 mod p)\n+     *    [Multiplying both sides of the equations by pr.z^2 mod p]\n+     *    <=> (xr * pr.z^2 mod p == pr.x) || (xr + n < p && (xr + n) * pr.z^2 mod p == pr.x)\n+     *\n+     *  Thus, we can avoid the inversion, but we have to check both cases separately.\n+     *  secp256k1_gej_eq_x implements the (xr * pr.z^2 mod p == pr.x) test.\n+     */\n     if (secp256k1_gej_eq_x_var(&xr, &pr)) {\n-        // xr.x == xr * xr.z^2 mod p, so the signature is valid.\n+        /* xr.x == xr * xr.z^2 mod p, so the signature is valid. */\n         return 1;\n     }\n-    if (secp256k1_fe_cmp_var(&xr, &secp256k1_ecdsa_consts->p_minus_order) >= 0) {\n-        // xr + p >= n, so we can skip testing the second case.\n+    if (secp256k1_fe_cmp_var(&xr, &secp256k1_ecdsa_const_p_minus_order) >= 0) {\n+        /* xr + p >= n, so we can skip testing the second case. */\n         return 0;\n     }\n-    secp256k1_fe_add(&xr, &secp256k1_ecdsa_consts->order_as_fe);\n+    secp256k1_fe_add(&xr, &secp256k1_ecdsa_const_order_as_fe);\n     if (secp256k1_gej_eq_x_var(&xr, &pr)) {\n-        // (xr + n) * pr.z^2 mod p == pr.x, so the signature is valid.\n+        /* (xr + n) * pr.z^2 mod p == pr.x, so the signature is valid. */\n         return 1;\n     }\n     return 0;\n }\n \n static int secp256k1_ecdsa_sig_recover(const secp256k1_ecdsa_sig_t *sig, secp256k1_ge_t *pubkey, const secp256k1_scalar_t *message, int recid) {\n+    unsigned char brx[32];\n+    secp256k1_fe_t fx;\n+    secp256k1_ge_t x;\n+    secp256k1_gej_t xj;\n+    secp256k1_scalar_t rn, u1, u2;\n+    secp256k1_gej_t qj;\n+\n     if (secp256k1_scalar_is_zero(&sig->r) || secp256k1_scalar_is_zero(&sig->s))\n         return 0;\n \n-    unsigned char brx[32];\n     secp256k1_scalar_get_b32(brx, &sig->r);\n-    secp256k1_fe_t fx;\n     VERIFY_CHECK(secp256k1_fe_set_b32(&fx, brx)); /* brx comes from a scalar, so is less than the order; certainly less than p */\n     if (recid & 2) {\n-        if (secp256k1_fe_cmp_var(&fx, &secp256k1_ecdsa_consts->p_minus_order) >= 0)\n+        if (secp256k1_fe_cmp_var(&fx, &secp256k1_ecdsa_const_p_minus_order) >= 0)\n             return 0;\n-        secp256k1_fe_add(&fx, &secp256k1_ecdsa_consts->order_as_fe);\n+        secp256k1_fe_add(&fx, &secp256k1_ecdsa_const_order_as_fe);\n     }\n-    secp256k1_ge_t x;\n     if (!secp256k1_ge_set_xo_var(&x, &fx, recid & 1))\n         return 0;\n-    secp256k1_gej_t xj;\n     secp256k1_gej_set_ge(&xj, &x);\n-    secp256k1_scalar_t rn, u1, u2;\n     secp256k1_scalar_inverse_var(&rn, &sig->r);\n     secp256k1_scalar_mul(&u1, &rn, message);\n     secp256k1_scalar_negate(&u1, &u1);\n     secp256k1_scalar_mul(&u2, &rn, &sig->s);\n-    secp256k1_gej_t qj;\n     secp256k1_ecmult(&qj, &xj, &u2, &u1);\n     secp256k1_ge_set_gej_var(pubkey, &qj);\n     return !secp256k1_gej_is_infinity(&qj);\n }\n \n static int secp256k1_ecdsa_sig_sign(secp256k1_ecdsa_sig_t *sig, const secp256k1_scalar_t *seckey, const secp256k1_scalar_t *message, const secp256k1_scalar_t *nonce, int *recid) {\n+    unsigned char b[32];\n     secp256k1_gej_t rp;\n-    secp256k1_ecmult_gen(&rp, nonce);\n     secp256k1_ge_t r;\n+    secp256k1_scalar_t n;\n+    int overflow = 0;\n+\n+    secp256k1_ecmult_gen(&rp, nonce);\n     secp256k1_ge_set_gej(&r, &rp);\n-    unsigned char b[32];\n     secp256k1_fe_normalize(&r.x);\n     secp256k1_fe_normalize(&r.y);\n     secp256k1_fe_get_b32(b, &r.x);\n-    int overflow = 0;\n     secp256k1_scalar_set_b32(&sig->r, b, &overflow);\n     if (secp256k1_scalar_is_zero(&sig->r)) {\n         /* P.x = order is on the curve, so technically sig->r could end up zero, which would be an invalid signature. */\n@@ -206,7 +211,6 @@ static int secp256k1_ecdsa_sig_sign(secp256k1_ecdsa_sig_t *sig, const secp256k1_\n     }\n     if (recid)\n         *recid = (overflow ? 2 : 0) | (secp256k1_fe_is_odd(&r.y) ? 1 : 0);\n-    secp256k1_scalar_t n;\n     secp256k1_scalar_mul(&n, &sig->r, seckey);\n     secp256k1_scalar_add(&n, &n, message);\n     secp256k1_scalar_inverse(&sig->s, nonce);\n@@ -224,9 +228,4 @@ static int secp256k1_ecdsa_sig_sign(secp256k1_ecdsa_sig_t *sig, const secp256k1_\n     return 1;\n }\n \n-static void secp256k1_ecdsa_sig_set_rs(secp256k1_ecdsa_sig_t *sig, const secp256k1_scalar_t *r, const secp256k1_scalar_t *s) {\n-    sig->r = *r;\n-    sig->s = *s;\n-}\n-\n #endif"
      },
      {
        "sha": "3e06d05b47cd51f4c6517c211f0e7936aa4579f7",
        "filename": "src/secp256k1/src/eckey_impl.h",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/eckey_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/eckey_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/eckey_impl.h?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -51,13 +51,16 @@ static int secp256k1_eckey_pubkey_serialize(secp256k1_ge_t *elem, unsigned char\n }\n \n static int secp256k1_eckey_privkey_parse(secp256k1_scalar_t *key, const unsigned char *privkey, int privkeylen) {\n+    unsigned char c[32] = {0};\n     const unsigned char *end = privkey + privkeylen;\n+    int lenb = 0;\n+    int len = 0;\n+    int overflow = 0;\n     /* sequence header */\n     if (end < privkey+1 || *privkey != 0x30)\n         return 0;\n     privkey++;\n     /* sequence length constructor */\n-    int lenb = 0;\n     if (end < privkey+1 || !(*privkey & 0x80))\n         return 0;\n     lenb = *privkey & ~0x80; privkey++;\n@@ -66,7 +69,6 @@ static int secp256k1_eckey_privkey_parse(secp256k1_scalar_t *key, const unsigned\n     if (end < privkey+lenb)\n         return 0;\n     /* sequence length */\n-    int len = 0;\n     len = privkey[lenb-1] | (lenb > 1 ? privkey[lenb-2] << 8 : 0);\n     privkey += lenb;\n     if (end < privkey+len)\n@@ -78,8 +80,6 @@ static int secp256k1_eckey_privkey_parse(secp256k1_scalar_t *key, const unsigned\n     /* sequence element 1: octet string, up to 32 bytes */\n     if (end < privkey+2 || privkey[0] != 0x04 || privkey[1] > 0x20 || end < privkey+2+privkey[1])\n         return 0;\n-    int overflow = 0;\n-    unsigned char c[32] = {0};\n     memcpy(c + 32 - privkey[1], privkey + 2, privkey[1]);\n     secp256k1_scalar_set_b32(key, c, &overflow);\n     memset(c, 0, 32);\n@@ -88,8 +88,9 @@ static int secp256k1_eckey_privkey_parse(secp256k1_scalar_t *key, const unsigned\n \n static int secp256k1_eckey_privkey_serialize(unsigned char *privkey, int *privkeylen, const secp256k1_scalar_t *key, int compressed) {\n     secp256k1_gej_t rp;\n-    secp256k1_ecmult_gen(&rp, key);\n     secp256k1_ge_t r;\n+    int pubkeylen = 0;\n+    secp256k1_ecmult_gen(&rp, key);\n     secp256k1_ge_set_gej(&r, &rp);\n     if (compressed) {\n         static const unsigned char begin[] = {\n@@ -110,7 +111,6 @@ static int secp256k1_eckey_privkey_serialize(unsigned char *privkey, int *privke\n         memcpy(ptr, begin, sizeof(begin)); ptr += sizeof(begin);\n         secp256k1_scalar_get_b32(ptr, key); ptr += 32;\n         memcpy(ptr, middle, sizeof(middle)); ptr += sizeof(middle);\n-        int pubkeylen = 0;\n         if (!secp256k1_eckey_pubkey_serialize(&r, ptr, &pubkeylen, 1)) {\n             return 0;\n         }\n@@ -137,7 +137,6 @@ static int secp256k1_eckey_privkey_serialize(unsigned char *privkey, int *privke\n         memcpy(ptr, begin, sizeof(begin)); ptr += sizeof(begin);\n         secp256k1_scalar_get_b32(ptr, key); ptr += 32;\n         memcpy(ptr, middle, sizeof(middle)); ptr += sizeof(middle);\n-        int pubkeylen = 0;\n         if (!secp256k1_eckey_pubkey_serialize(&r, ptr, &pubkeylen, 0)) {\n             return 0;\n         }\n@@ -156,8 +155,8 @@ static int secp256k1_eckey_privkey_tweak_add(secp256k1_scalar_t *key, const secp\n \n static int secp256k1_eckey_pubkey_tweak_add(secp256k1_ge_t *key, const secp256k1_scalar_t *tweak) {\n     secp256k1_gej_t pt;\n-    secp256k1_gej_set_ge(&pt, key);\n     secp256k1_scalar_t one;\n+    secp256k1_gej_set_ge(&pt, key);\n     secp256k1_scalar_set_int(&one, 1);\n     secp256k1_ecmult(&pt, &pt, &one, tweak);\n \n@@ -176,12 +175,12 @@ static int secp256k1_eckey_privkey_tweak_mul(secp256k1_scalar_t *key, const secp\n }\n \n static int secp256k1_eckey_pubkey_tweak_mul(secp256k1_ge_t *key, const secp256k1_scalar_t *tweak) {\n+    secp256k1_scalar_t zero;\n+    secp256k1_gej_t pt;\n     if (secp256k1_scalar_is_zero(tweak))\n         return 0;\n \n-    secp256k1_scalar_t zero;\n     secp256k1_scalar_set_int(&zero, 0);\n-    secp256k1_gej_t pt;\n     secp256k1_gej_set_ge(&pt, key);\n     secp256k1_ecmult(&pt, &pt, tweak, &zero);\n     secp256k1_ge_set_gej(key, &pt);"
      },
      {
        "sha": "849452c7a1b673d2d743cc0b83fa8734810d2693",
        "filename": "src/secp256k1/src/ecmult_gen_impl.h",
        "status": "modified",
        "additions": 31,
        "deletions": 26,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/ecmult_gen_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/ecmult_gen_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult_gen_impl.h?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -24,49 +24,53 @@ typedef struct {\n      * None of the resulting prec group elements have a known scalar, and neither do any of\n      * the intermediate sums while computing a*G.\n      */\n-    secp256k1_fe_t prec[64][16][2]; /* prec[j][i] = (16^j * i * G + U_i).{x,y} */\n+    secp256k1_ge_storage_t prec[64][16]; /* prec[j][i] = 16^j * i * G + U_i */\n } secp256k1_ecmult_gen_consts_t;\n \n static const secp256k1_ecmult_gen_consts_t *secp256k1_ecmult_gen_consts = NULL;\n \n static void secp256k1_ecmult_gen_start(void) {\n+    secp256k1_ge_t prec[1024];\n+    secp256k1_gej_t gj;\n+    secp256k1_gej_t nums_gej;\n+    secp256k1_ecmult_gen_consts_t *ret;\n+    int i, j;\n     if (secp256k1_ecmult_gen_consts != NULL)\n         return;\n \n     /* Allocate the precomputation table. */\n-    secp256k1_ecmult_gen_consts_t *ret = (secp256k1_ecmult_gen_consts_t*)checked_malloc(sizeof(secp256k1_ecmult_gen_consts_t));\n+    ret = (secp256k1_ecmult_gen_consts_t*)checked_malloc(sizeof(secp256k1_ecmult_gen_consts_t));\n \n     /* get the generator */\n-    const secp256k1_ge_t *g = &secp256k1_ge_consts->g;\n-    secp256k1_gej_t gj; secp256k1_gej_set_ge(&gj, g);\n+    secp256k1_gej_set_ge(&gj, &secp256k1_ge_const_g);\n \n     /* Construct a group element with no known corresponding scalar (nothing up my sleeve). */\n-    secp256k1_gej_t nums_gej;\n     {\n-        static const unsigned char nums_b32[32] = \"The scalar for this x is unknown\";\n+        static const unsigned char nums_b32[33] = \"The scalar for this x is unknown\";\n         secp256k1_fe_t nums_x;\n-        VERIFY_CHECK(secp256k1_fe_set_b32(&nums_x, nums_b32));\n         secp256k1_ge_t nums_ge;\n+        VERIFY_CHECK(secp256k1_fe_set_b32(&nums_x, nums_b32));\n         VERIFY_CHECK(secp256k1_ge_set_xo_var(&nums_ge, &nums_x, 0));\n         secp256k1_gej_set_ge(&nums_gej, &nums_ge);\n         /* Add G to make the bits in x uniformly distributed. */\n-        secp256k1_gej_add_ge_var(&nums_gej, &nums_gej, g);\n+        secp256k1_gej_add_ge_var(&nums_gej, &nums_gej, &secp256k1_ge_const_g);\n     }\n \n     /* compute prec. */\n-    secp256k1_ge_t prec[1024];\n     {\n         secp256k1_gej_t precj[1024]; /* Jacobian versions of prec. */\n-        secp256k1_gej_t gbase; gbase = gj; /* 16^j * G */\n-        secp256k1_gej_t numsbase; numsbase = nums_gej; /* 2^j * nums. */\n-        for (int j=0; j<64; j++) {\n+        secp256k1_gej_t gbase;\n+        secp256k1_gej_t numsbase;\n+        gbase = gj; /* 16^j * G */\n+        numsbase = nums_gej; /* 2^j * nums. */\n+        for (j = 0; j < 64; j++) {\n             /* Set precj[j*16 .. j*16+15] to (numsbase, numsbase + gbase, ..., numsbase + 15*gbase). */\n             precj[j*16] = numsbase;\n-            for (int i=1; i<16; i++) {\n+            for (i = 1; i < 16; i++) {\n                 secp256k1_gej_add_var(&precj[j*16 + i], &precj[j*16 + i - 1], &gbase);\n             }\n             /* Multiply gbase by 16. */\n-            for (int i=0; i<4; i++) {\n+            for (i = 0; i < 4; i++) {\n                 secp256k1_gej_double_var(&gbase, &gbase);\n             }\n             /* Multiply numbase by 2. */\n@@ -79,11 +83,9 @@ static void secp256k1_ecmult_gen_start(void) {\n         }\n         secp256k1_ge_set_all_gej_var(1024, prec, precj);\n     }\n-    for (int j=0; j<64; j++) {\n-        for (int i=0; i<16; i++) {\n-            VERIFY_CHECK(!secp256k1_ge_is_infinity(&prec[j*16 + i]));\n-            ret->prec[j][i][0] = prec[j*16 + i].x;\n-            ret->prec[j][i][1] = prec[j*16 + i].y;\n+    for (j = 0; j < 64; j++) {\n+        for (i = 0; i < 16; i++) {\n+            secp256k1_ge_to_storage(&ret->prec[j][i], &prec[j*16 + i]);\n         }\n     }\n \n@@ -92,26 +94,29 @@ static void secp256k1_ecmult_gen_start(void) {\n }\n \n static void secp256k1_ecmult_gen_stop(void) {\n+    secp256k1_ecmult_gen_consts_t *c;\n     if (secp256k1_ecmult_gen_consts == NULL)\n         return;\n \n-    secp256k1_ecmult_gen_consts_t *c = (secp256k1_ecmult_gen_consts_t*)secp256k1_ecmult_gen_consts;\n+    c = (secp256k1_ecmult_gen_consts_t*)secp256k1_ecmult_gen_consts;\n     secp256k1_ecmult_gen_consts = NULL;\n     free(c);\n }\n \n static void secp256k1_ecmult_gen(secp256k1_gej_t *r, const secp256k1_scalar_t *gn) {\n     const secp256k1_ecmult_gen_consts_t *c = secp256k1_ecmult_gen_consts;\n-    secp256k1_gej_set_infinity(r);\n     secp256k1_ge_t add;\n-    add.infinity = 0;\n+    secp256k1_ge_storage_t adds;\n     int bits;\n-    for (int j=0; j<64; j++) {\n+    int i, j;\n+    secp256k1_gej_set_infinity(r);\n+    add.infinity = 0;\n+    for (j = 0; j < 64; j++) {\n         bits = secp256k1_scalar_get_bits(gn, j * 4, 4);\n-        for (int i=0; i<16; i++) {\n-            secp256k1_fe_cmov(&add.x, &c->prec[j][i][0], i == bits);\n-            secp256k1_fe_cmov(&add.y, &c->prec[j][i][1], i == bits);\n+        for (i = 0; i < 16; i++) {\n+            secp256k1_ge_storage_cmov(&adds, &c->prec[j][i], i == bits);\n         }\n+        secp256k1_ge_from_storage(&add, &adds);\n         secp256k1_gej_add_ge(r, r, &add);\n     }\n     bits = 0;"
      },
      {
        "sha": "ece0b0a4598527047bd7af4b5608420c85423f54",
        "filename": "src/secp256k1/src/ecmult_impl.h",
        "status": "modified",
        "additions": 92,
        "deletions": 52,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/ecmult_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/ecmult_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult_impl.h?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -37,85 +37,107 @@\n  *  G is constant, so it only needs to be done once in advance.\n  */\n static void secp256k1_ecmult_table_precomp_gej_var(secp256k1_gej_t *pre, const secp256k1_gej_t *a, int w) {\n+    secp256k1_gej_t d;\n+    int i;\n     pre[0] = *a;\n-    secp256k1_gej_t d; secp256k1_gej_double_var(&d, &pre[0]);\n-    for (int i=1; i<(1 << (w-2)); i++)\n+    secp256k1_gej_double_var(&d, &pre[0]);\n+    for (i = 1; i < (1 << (w-2)); i++)\n         secp256k1_gej_add_var(&pre[i], &d, &pre[i-1]);\n }\n \n-static void secp256k1_ecmult_table_precomp_ge_var(secp256k1_ge_t *pre, const secp256k1_gej_t *a, int w) {\n+static void secp256k1_ecmult_table_precomp_ge_storage_var(secp256k1_ge_storage_t *pre, const secp256k1_gej_t *a, int w) {\n+    secp256k1_gej_t d;\n+    int i;\n     const int table_size = 1 << (w-2);\n     secp256k1_gej_t *prej = checked_malloc(sizeof(secp256k1_gej_t) * table_size);\n+    secp256k1_ge_t *prea = checked_malloc(sizeof(secp256k1_ge_t) * table_size);\n     prej[0] = *a;\n-    secp256k1_gej_t d; secp256k1_gej_double_var(&d, a);\n-    for (int i=1; i<table_size; i++) {\n+    secp256k1_gej_double_var(&d, a);\n+    for (i = 1; i < table_size; i++) {\n         secp256k1_gej_add_var(&prej[i], &d, &prej[i-1]);\n     }\n-    secp256k1_ge_set_all_gej_var(table_size, pre, prej);\n+    secp256k1_ge_set_all_gej_var(table_size, prea, prej);\n+    for (i = 0; i < table_size; i++) {\n+        secp256k1_ge_to_storage(&pre[i], &prea[i]);\n+    }\n     free(prej);\n+    free(prea);\n }\n \n /** The number of entries a table with precomputed multiples needs to have. */\n #define ECMULT_TABLE_SIZE(w) (1 << ((w)-2))\n \n /** The following two macro retrieves a particular odd multiple from a table\n  *  of precomputed multiples. */\n-#define ECMULT_TABLE_GET(r,pre,n,w,neg) do { \\\n+#define ECMULT_TABLE_GET_GEJ(r,pre,n,w) do { \\\n     VERIFY_CHECK(((n) & 1) == 1); \\\n     VERIFY_CHECK((n) >= -((1 << ((w)-1)) - 1)); \\\n     VERIFY_CHECK((n) <=  ((1 << ((w)-1)) - 1)); \\\n     if ((n) > 0) \\\n         *(r) = (pre)[((n)-1)/2]; \\\n     else \\\n-        (neg)((r), &(pre)[(-(n)-1)/2]); \\\n+        secp256k1_gej_neg((r), &(pre)[(-(n)-1)/2]); \\\n+} while(0)\n+#define ECMULT_TABLE_GET_GE_STORAGE(r,pre,n,w) do { \\\n+    VERIFY_CHECK(((n) & 1) == 1); \\\n+    VERIFY_CHECK((n) >= -((1 << ((w)-1)) - 1)); \\\n+    VERIFY_CHECK((n) <=  ((1 << ((w)-1)) - 1)); \\\n+    if ((n) > 0) \\\n+        secp256k1_ge_from_storage((r), &(pre)[((n)-1)/2]); \\\n+    else {\\\n+        secp256k1_ge_from_storage((r), &(pre)[(-(n)-1)/2]); \\\n+        secp256k1_ge_neg((r), (r)); \\\n+    } \\\n } while(0)\n-\n-#define ECMULT_TABLE_GET_GEJ(r,pre,n,w) ECMULT_TABLE_GET((r),(pre),(n),(w),secp256k1_gej_neg)\n-#define ECMULT_TABLE_GET_GE(r,pre,n,w)  ECMULT_TABLE_GET((r),(pre),(n),(w),secp256k1_ge_neg)\n \n typedef struct {\n     /* For accelerating the computation of a*P + b*G: */\n-    secp256k1_ge_t pre_g[ECMULT_TABLE_SIZE(WINDOW_G)];    /* odd multiples of the generator */\n+    secp256k1_ge_storage_t pre_g[ECMULT_TABLE_SIZE(WINDOW_G)];    /* odd multiples of the generator */\n #ifdef USE_ENDOMORPHISM\n-    secp256k1_ge_t pre_g_128[ECMULT_TABLE_SIZE(WINDOW_G)]; /* odd multiples of 2^128*generator */\n+    secp256k1_ge_storage_t pre_g_128[ECMULT_TABLE_SIZE(WINDOW_G)]; /* odd multiples of 2^128*generator */\n #endif\n } secp256k1_ecmult_consts_t;\n \n static const secp256k1_ecmult_consts_t *secp256k1_ecmult_consts = NULL;\n \n static void secp256k1_ecmult_start(void) {\n+    secp256k1_gej_t gj;\n+    secp256k1_ecmult_consts_t *ret;\n     if (secp256k1_ecmult_consts != NULL)\n         return;\n \n     /* Allocate the precomputation table. */\n-    secp256k1_ecmult_consts_t *ret = (secp256k1_ecmult_consts_t*)checked_malloc(sizeof(secp256k1_ecmult_consts_t));\n+    ret = (secp256k1_ecmult_consts_t*)checked_malloc(sizeof(secp256k1_ecmult_consts_t));\n \n     /* get the generator */\n-    const secp256k1_ge_t *g = &secp256k1_ge_consts->g;\n-    secp256k1_gej_t gj; secp256k1_gej_set_ge(&gj, g);\n+    secp256k1_gej_set_ge(&gj, &secp256k1_ge_const_g);\n \n-#ifdef USE_ENDOMORPHISM\n-    /* calculate 2^128*generator */\n-    secp256k1_gej_t g_128j = gj;\n-    for (int i=0; i<128; i++)\n-        secp256k1_gej_double_var(&g_128j, &g_128j);\n-#endif\n \n     /* precompute the tables with odd multiples */\n-    secp256k1_ecmult_table_precomp_ge_var(ret->pre_g, &gj, WINDOW_G);\n+    secp256k1_ecmult_table_precomp_ge_storage_var(ret->pre_g, &gj, WINDOW_G);\n+\n #ifdef USE_ENDOMORPHISM\n-    secp256k1_ecmult_table_precomp_ge_var(ret->pre_g_128, &g_128j, WINDOW_G);\n+    {\n+        secp256k1_gej_t g_128j;\n+        int i;\n+        /* calculate 2^128*generator */\n+        g_128j = gj;\n+        for (i = 0; i < 128; i++)\n+            secp256k1_gej_double_var(&g_128j, &g_128j);\n+        secp256k1_ecmult_table_precomp_ge_storage_var(ret->pre_g_128, &g_128j, WINDOW_G);\n+    }\n #endif\n \n     /* Set the global pointer to the precomputation table. */\n     secp256k1_ecmult_consts = ret;\n }\n \n static void secp256k1_ecmult_stop(void) {\n+    secp256k1_ecmult_consts_t *c;\n     if (secp256k1_ecmult_consts == NULL)\n         return;\n \n-    secp256k1_ecmult_consts_t *c = (secp256k1_ecmult_consts_t*)secp256k1_ecmult_consts;\n+    c = (secp256k1_ecmult_consts_t*)secp256k1_ecmult_consts;\n     secp256k1_ecmult_consts = NULL;\n     free(c);\n }\n@@ -129,28 +151,30 @@ static void secp256k1_ecmult_stop(void) {\n  */\n static int secp256k1_ecmult_wnaf(int *wnaf, const secp256k1_scalar_t *a, int w) {\n     secp256k1_scalar_t s = *a;\n-\n+    int set_bits = 0;\n+    int bit = 0;\n     int sign = 1;\n+\n     if (secp256k1_scalar_get_bits(&s, 255, 1)) {\n         secp256k1_scalar_negate(&s, &s);\n         sign = -1;\n     }\n \n-    int set_bits = 0;\n-    int bit = 0;\n     while (bit < 256) {\n+        int now;\n+        int word;\n         if (secp256k1_scalar_get_bits(&s, bit, 1) == 0) {\n             bit++;\n             continue;\n         }\n         while (set_bits < bit) {\n             wnaf[set_bits++] = 0;\n         }\n-        int now = w;\n+        now = w;\n         if (bit + now > 256) {\n             now = 256 - bit;\n         }\n-        int word = secp256k1_scalar_get_bits_var(&s, bit, now);\n+        word = secp256k1_scalar_get_bits_var(&s, bit, now);\n         if (word & (1 << (w-1))) {\n             secp256k1_scalar_add_bit(&s, bit + w);\n             wnaf[set_bits++] = sign * (word - (1 << w));\n@@ -163,58 +187,74 @@ static int secp256k1_ecmult_wnaf(int *wnaf, const secp256k1_scalar_t *a, int w)\n }\n \n static void secp256k1_ecmult(secp256k1_gej_t *r, const secp256k1_gej_t *a, const secp256k1_scalar_t *na, const secp256k1_scalar_t *ng) {\n+    secp256k1_gej_t tmpj;\n+    secp256k1_gej_t pre_a[ECMULT_TABLE_SIZE(WINDOW_A)];\n+    secp256k1_ge_t tmpa;\n     const secp256k1_ecmult_consts_t *c = secp256k1_ecmult_consts;\n-\n #ifdef USE_ENDOMORPHISM\n+    secp256k1_gej_t pre_a_lam[ECMULT_TABLE_SIZE(WINDOW_A)];\n     secp256k1_scalar_t na_1, na_lam;\n+    /* Splitted G factors. */\n+    secp256k1_scalar_t ng_1, ng_128;\n+    int wnaf_na_1[130];\n+    int wnaf_na_lam[130];\n+    int bits_na_1;\n+    int bits_na_lam;\n+    int wnaf_ng_1[129];\n+    int bits_ng_1;\n+    int wnaf_ng_128[129];\n+    int bits_ng_128;\n+#else\n+    int wnaf_na[256];\n+    int bits_na;\n+    int wnaf_ng[257];\n+    int bits_ng;\n+#endif\n+    int i;\n+    int bits;\n+\n+#ifdef USE_ENDOMORPHISM\n     /* split na into na_1 and na_lam (where na = na_1 + na_lam*lambda, and na_1 and na_lam are ~128 bit) */\n     secp256k1_scalar_split_lambda_var(&na_1, &na_lam, na);\n \n     /* build wnaf representation for na_1 and na_lam. */\n-    int wnaf_na_1[130];   int bits_na_1   = secp256k1_ecmult_wnaf(wnaf_na_1,   &na_1,   WINDOW_A);\n-    int wnaf_na_lam[130]; int bits_na_lam = secp256k1_ecmult_wnaf(wnaf_na_lam, &na_lam, WINDOW_A);\n+    bits_na_1   = secp256k1_ecmult_wnaf(wnaf_na_1,   &na_1,   WINDOW_A);\n+    bits_na_lam = secp256k1_ecmult_wnaf(wnaf_na_lam, &na_lam, WINDOW_A);\n     VERIFY_CHECK(bits_na_1 <= 130);\n     VERIFY_CHECK(bits_na_lam <= 130);\n-    int bits = bits_na_1;\n+    bits = bits_na_1;\n     if (bits_na_lam > bits) bits = bits_na_lam;\n #else\n     /* build wnaf representation for na. */\n-    int wnaf_na[256];     int bits_na     = secp256k1_ecmult_wnaf(wnaf_na,     na,      WINDOW_A);\n-    int bits = bits_na;\n+    bits_na     = secp256k1_ecmult_wnaf(wnaf_na,     na,      WINDOW_A);\n+    bits = bits_na;\n #endif\n \n     /* calculate odd multiples of a */\n-    secp256k1_gej_t pre_a[ECMULT_TABLE_SIZE(WINDOW_A)];\n     secp256k1_ecmult_table_precomp_gej_var(pre_a, a, WINDOW_A);\n \n #ifdef USE_ENDOMORPHISM\n-    secp256k1_gej_t pre_a_lam[ECMULT_TABLE_SIZE(WINDOW_A)];\n-    for (int i=0; i<ECMULT_TABLE_SIZE(WINDOW_A); i++)\n+    for (i = 0; i < ECMULT_TABLE_SIZE(WINDOW_A); i++)\n         secp256k1_gej_mul_lambda(&pre_a_lam[i], &pre_a[i]);\n \n-    /* Splitted G factors. */\n-    secp256k1_scalar_t ng_1, ng_128;\n-\n     /* split ng into ng_1 and ng_128 (where gn = gn_1 + gn_128*2^128, and gn_1 and gn_128 are ~128 bit) */\n     secp256k1_scalar_split_128(&ng_1, &ng_128, ng);\n \n     /* Build wnaf representation for ng_1 and ng_128 */\n-    int wnaf_ng_1[129];   int bits_ng_1   = secp256k1_ecmult_wnaf(wnaf_ng_1,   &ng_1,   WINDOW_G);\n-    int wnaf_ng_128[129]; int bits_ng_128 = secp256k1_ecmult_wnaf(wnaf_ng_128, &ng_128, WINDOW_G);\n+    bits_ng_1   = secp256k1_ecmult_wnaf(wnaf_ng_1,   &ng_1,   WINDOW_G);\n+    bits_ng_128 = secp256k1_ecmult_wnaf(wnaf_ng_128, &ng_128, WINDOW_G);\n     if (bits_ng_1 > bits) bits = bits_ng_1;\n     if (bits_ng_128 > bits) bits = bits_ng_128;\n #else\n-    int wnaf_ng[257];     int bits_ng     = secp256k1_ecmult_wnaf(wnaf_ng,     ng,      WINDOW_G);\n+    bits_ng     = secp256k1_ecmult_wnaf(wnaf_ng,     ng,      WINDOW_G);\n     if (bits_ng > bits) bits = bits_ng;\n #endif\n \n     secp256k1_gej_set_infinity(r);\n-    secp256k1_gej_t tmpj;\n-    secp256k1_ge_t tmpa;\n \n-    for (int i=bits-1; i>=0; i--) {\n-        secp256k1_gej_double_var(r, r);\n+    for (i = bits-1; i >= 0; i--) {\n         int n;\n+        secp256k1_gej_double_var(r, r);\n #ifdef USE_ENDOMORPHISM\n         if (i < bits_na_1 && (n = wnaf_na_1[i])) {\n             ECMULT_TABLE_GET_GEJ(&tmpj, pre_a, n, WINDOW_A);\n@@ -225,11 +265,11 @@ static void secp256k1_ecmult(secp256k1_gej_t *r, const secp256k1_gej_t *a, const\n             secp256k1_gej_add_var(r, r, &tmpj);\n         }\n         if (i < bits_ng_1 && (n = wnaf_ng_1[i])) {\n-            ECMULT_TABLE_GET_GE(&tmpa, c->pre_g, n, WINDOW_G);\n+            ECMULT_TABLE_GET_GE_STORAGE(&tmpa, c->pre_g, n, WINDOW_G);\n             secp256k1_gej_add_ge_var(r, r, &tmpa);\n         }\n         if (i < bits_ng_128 && (n = wnaf_ng_128[i])) {\n-            ECMULT_TABLE_GET_GE(&tmpa, c->pre_g_128, n, WINDOW_G);\n+            ECMULT_TABLE_GET_GE_STORAGE(&tmpa, c->pre_g_128, n, WINDOW_G);\n             secp256k1_gej_add_ge_var(r, r, &tmpa);\n         }\n #else\n@@ -238,7 +278,7 @@ static void secp256k1_ecmult(secp256k1_gej_t *r, const secp256k1_gej_t *a, const\n             secp256k1_gej_add_var(r, r, &tmpj);\n         }\n         if (i < bits_ng && (n = wnaf_ng[i])) {\n-            ECMULT_TABLE_GET_GE(&tmpa, c->pre_g, n, WINDOW_G);\n+            ECMULT_TABLE_GET_GE_STORAGE(&tmpa, c->pre_g, n, WINDOW_G);\n             secp256k1_gej_add_ge_var(r, r, &tmpa);\n         }\n #endif"
      },
      {
        "sha": "9e6d7d3c0421314faee7b6dbbad225b44c8410eb",
        "filename": "src/secp256k1/src/field.h",
        "status": "modified",
        "additions": 6,
        "deletions": 21,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/field.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/field.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field.h?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -30,21 +30,6 @@\n #error \"Please select field implementation\"\n #endif\n \n-typedef struct {\n-#ifndef USE_NUM_NONE\n-    secp256k1_num_t p;\n-#endif\n-    secp256k1_fe_t order;\n-} secp256k1_fe_consts_t;\n-\n-static const secp256k1_fe_consts_t *secp256k1_fe_consts = NULL;\n-\n-/** Initialize field element precomputation data. */\n-static void secp256k1_fe_start(void);\n-\n-/** Unload field element precomputation data. */\n-static void secp256k1_fe_stop(void);\n-\n /** Normalize a field element. */\n static void secp256k1_fe_normalize(secp256k1_fe_t *r);\n \n@@ -117,15 +102,15 @@ static void secp256k1_fe_inv_var(secp256k1_fe_t *r, const secp256k1_fe_t *a);\n /** Calculate the (modular) inverses of a batch of field elements. Requires the inputs' magnitudes to be\n  *  at most 8. The output magnitudes are 1 (but not guaranteed to be normalized). The inputs and\n  *  outputs must not overlap in memory. */\n-static void secp256k1_fe_inv_all_var(size_t len, secp256k1_fe_t r[len], const secp256k1_fe_t a[len]);\n+static void secp256k1_fe_inv_all_var(size_t len, secp256k1_fe_t *r, const secp256k1_fe_t *a);\n \n-/** Convert a field element to a hexadecimal string. */\n-static void secp256k1_fe_get_hex(char *r, int *rlen, const secp256k1_fe_t *a);\n+/** Convert a field element to the storage type. */\n+static void secp256k1_fe_to_storage(secp256k1_fe_storage_t *r, const secp256k1_fe_t*);\n \n-/** Convert a hexadecimal string to a field element. */\n-static int secp256k1_fe_set_hex(secp256k1_fe_t *r, const char *a, int alen);\n+/** Convert a field element back from the storage type. */\n+static void secp256k1_fe_from_storage(secp256k1_fe_t *r, const secp256k1_fe_storage_t*);\n \n /** If flag is true, set *r equal to *a; otherwise leave it. Constant-time. */\n-static void secp256k1_fe_cmov(secp256k1_fe_t *r, const secp256k1_fe_t *a, int flag);\n+static void secp256k1_fe_storage_cmov(secp256k1_fe_storage_t *r, const secp256k1_fe_storage_t *a, int flag);\n \n #endif"
      },
      {
        "sha": "44bce6525df9f154ea6a394f8ea56acb10cde44d",
        "filename": "src/secp256k1/src/field_10x26.h",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/field_10x26.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/field_10x26.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_10x26.h?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -18,4 +18,30 @@ typedef struct {\n #endif\n } secp256k1_fe_t;\n \n+/* Unpacks a constant into a overlapping multi-limbed FE element. */\n+#define SECP256K1_FE_CONST_INNER(d7, d6, d5, d4, d3, d2, d1, d0) { \\\n+    (d0) & 0x3FFFFFFUL, \\\n+    ((d0) >> 26) | ((d1) & 0xFFFFFUL) << 6, \\\n+    ((d1) >> 20) | ((d2) & 0x3FFFUL) << 12, \\\n+    ((d2) >> 14) | ((d3) & 0xFFUL) << 18, \\\n+    ((d3) >> 8) | ((d4) & 0x3) << 24, \\\n+    ((d4) >> 2) & 0x3FFFFFFUL, \\\n+    ((d4) >> 28) | ((d5) & 0x3FFFFFUL) << 4, \\\n+    ((d5) >> 22) | ((d6) & 0xFFFF) << 10, \\\n+    ((d6) >> 16) | ((d7) & 0x3FF) << 16, \\\n+    ((d7) >> 10) \\\n+}\n+\n+#ifdef VERIFY\n+#define SECP256K1_FE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {SECP256K1_FE_CONST_INNER((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)), 1, 1}\n+#else\n+#define SECP256K1_FE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {SECP256K1_FE_CONST_INNER((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0))}\n+#endif\n+\n+typedef struct {\n+    uint32_t n[8];\n+} secp256k1_fe_storage_t;\n+\n+#define SECP256K1_FE_STORAGE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {{ (d0), (d1), (d2), (d3), (d4), (d5), (d6), (d7) }}\n+\n #endif"
      },
      {
        "sha": "0afbb18a4af240ac430fd3d2efed6992acd3190a",
        "filename": "src/secp256k1/src/field_10x26_impl.h",
        "status": "modified",
        "additions": 115,
        "deletions": 70,
        "changes": 185,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/field_10x26_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/field_10x26_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_10x26_impl.h?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -13,9 +13,6 @@\n #include \"num.h\"\n #include \"field.h\"\n \n-static void secp256k1_fe_inner_start(void) {}\n-static void secp256k1_fe_inner_stop(void) {}\n-\n #ifdef VERIFY\n static void secp256k1_fe_verify(const secp256k1_fe_t *a) {\n     const uint32_t *d = a->n;\n@@ -54,8 +51,8 @@ static void secp256k1_fe_normalize(secp256k1_fe_t *r) {\n              t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8], t9 = r->n[9];\n \n     /* Reduce t9 at the start so there will be at most a single carry from the first pass */\n-    uint32_t x = t9 >> 22; t9 &= 0x03FFFFFUL;\n     uint32_t m;\n+    uint32_t x = t9 >> 22; t9 &= 0x03FFFFFUL;\n \n     /* The first pass ensures the magnitude is 1, ... */\n     t0 += x * 0x3D1UL; t1 += (x << 6);\n@@ -140,8 +137,8 @@ static void secp256k1_fe_normalize_var(secp256k1_fe_t *r) {\n              t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8], t9 = r->n[9];\n \n     /* Reduce t9 at the start so there will be at most a single carry from the first pass */\n-    uint32_t x = t9 >> 22; t9 &= 0x03FFFFFUL;\n     uint32_t m;\n+    uint32_t x = t9 >> 22; t9 &= 0x03FFFFFUL;\n \n     /* The first pass ensures the magnitude is 1, ... */\n     t0 += x * 0x3D1UL; t1 += (x << 6);\n@@ -195,12 +192,12 @@ static int secp256k1_fe_normalizes_to_zero(secp256k1_fe_t *r) {\n     uint32_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],\n              t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8], t9 = r->n[9];\n \n-    /* Reduce t9 at the start so there will be at most a single carry from the first pass */\n-    uint32_t x = t9 >> 22; t9 &= 0x03FFFFFUL;\n-\n     /* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */\n     uint32_t z0, z1;\n \n+    /* Reduce t9 at the start so there will be at most a single carry from the first pass */\n+    uint32_t x = t9 >> 22; t9 &= 0x03FFFFFUL;\n+\n     /* The first pass ensures the magnitude is 1, ... */\n     t0 += x * 0x3D1UL; t1 += (x << 6);\n     t1 += (t0 >> 26); t0 &= 0x3FFFFFFUL; z0  = t0; z1  = t0 ^ 0x3D0UL;\n@@ -221,23 +218,36 @@ static int secp256k1_fe_normalizes_to_zero(secp256k1_fe_t *r) {\n }\n \n static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe_t *r) {\n-    uint32_t t0 = r->n[0], t9 = r->n[9];\n+    uint32_t t0, t1, t2, t3, t4, t5, t6, t7, t8, t9;\n+    uint32_t z0, z1;\n+    uint32_t x;\n+\n+    t0 = r->n[0];\n+    t9 = r->n[9];\n \n     /* Reduce t9 at the start so there will be at most a single carry from the first pass */\n-    uint32_t x = t9 >> 22;\n+    x = t9 >> 22;\n \n     /* The first pass ensures the magnitude is 1, ... */\n     t0 += x * 0x3D1UL;\n \n     /* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */\n-    uint32_t z0 = t0 & 0x3FFFFFFUL, z1 = z0 ^ 0x3D0UL;\n+    z0 = t0 & 0x3FFFFFFUL;\n+    z1 = z0 ^ 0x3D0UL;\n \n     /* Fast return path should catch the majority of cases */\n     if ((z0 != 0UL) & (z1 != 0x3FFFFFFUL))\n         return 0;\n \n-    uint32_t t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],\n-             t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8];\n+    t1 = r->n[1];\n+    t2 = r->n[2];\n+    t3 = r->n[3];\n+    t4 = r->n[4];\n+    t5 = r->n[5];\n+    t6 = r->n[6];\n+    t7 = r->n[7];\n+    t8 = r->n[8];\n+\n     t9 &= 0x03FFFFFUL;\n     t1 += (x << 6);\n \n@@ -269,11 +279,11 @@ SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe_t *r, int a) {\n }\n \n SECP256K1_INLINE static int secp256k1_fe_is_zero(const secp256k1_fe_t *a) {\n+    const uint32_t *t = a->n;\n #ifdef VERIFY\n     VERIFY_CHECK(a->normalized);\n     secp256k1_fe_verify(a);\n #endif\n-    const uint32_t *t = a->n;\n     return (t[0] | t[1] | t[2] | t[3] | t[4] | t[5] | t[6] | t[7] | t[8] | t[9]) == 0;\n }\n \n@@ -286,34 +296,38 @@ SECP256K1_INLINE static int secp256k1_fe_is_odd(const secp256k1_fe_t *a) {\n }\n \n SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe_t *a) {\n+    int i;\n #ifdef VERIFY\n     a->magnitude = 0;\n     a->normalized = 1;\n #endif\n-    for (int i=0; i<10; i++) {\n+    for (i=0; i<10; i++) {\n         a->n[i] = 0;\n     }\n }\n \n static int secp256k1_fe_cmp_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n+    int i;\n #ifdef VERIFY\n     VERIFY_CHECK(a->normalized);\n     VERIFY_CHECK(b->normalized);\n     secp256k1_fe_verify(a);\n     secp256k1_fe_verify(b);\n #endif\n-    for (int i = 9; i >= 0; i--) {\n+    for (i = 9; i >= 0; i--) {\n         if (a->n[i] > b->n[i]) return 1;\n         if (a->n[i] < b->n[i]) return -1;\n     }\n     return 0;\n }\n \n static int secp256k1_fe_set_b32(secp256k1_fe_t *r, const unsigned char *a) {\n+    int i;\n     r->n[0] = r->n[1] = r->n[2] = r->n[3] = r->n[4] = 0;\n     r->n[5] = r->n[6] = r->n[7] = r->n[8] = r->n[9] = 0;\n-    for (int i=0; i<32; i++) {\n-        for (int j=0; j<4; j++) {\n+    for (i=0; i<32; i++) {\n+        int j;\n+        for (j=0; j<4; j++) {\n             int limb = (8*i+2*j)/26;\n             int shift = (8*i+2*j)%26;\n             r->n[limb] |= (uint32_t)((a[31-i] >> (2*j)) & 0x3) << shift;\n@@ -332,13 +346,15 @@ static int secp256k1_fe_set_b32(secp256k1_fe_t *r, const unsigned char *a) {\n \n /** Convert a field element to a 32-byte big endian value. Requires the input to be normalized */\n static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe_t *a) {\n+    int i;\n #ifdef VERIFY\n     VERIFY_CHECK(a->normalized);\n     secp256k1_fe_verify(a);\n #endif\n-    for (int i=0; i<32; i++) {\n+    for (i=0; i<32; i++) {\n+        int j;\n         int c = 0;\n-        for (int j=0; j<4; j++) {\n+        for (j=0; j<4; j++) {\n             int limb = (8*i+2*j)/26;\n             int shift = (8*i+2*j)%26;\n             c |= ((a->n[limb] >> shift) & 0x3) << (2 * j);\n@@ -415,6 +431,11 @@ SECP256K1_INLINE static void secp256k1_fe_add(secp256k1_fe_t *r, const secp256k1\n #endif\n \n SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint32_t *r, const uint32_t *a, const uint32_t * SECP256K1_RESTRICT b) {\n+    uint64_t c, d;\n+    uint64_t u0, u1, u2, u3, u4, u5, u6, u7, u8;\n+    uint32_t t9, t1, t0, t2, t3, t4, t5, t6, t7;\n+    const uint32_t M = 0x3FFFFFFUL, R0 = 0x3D10UL, R1 = 0x400UL;\n+\n     VERIFY_BITS(a[0], 30);\n     VERIFY_BITS(a[1], 30);\n     VERIFY_BITS(a[2], 30);\n@@ -436,14 +457,11 @@ SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint32_t *r, const uint32_t\n     VERIFY_BITS(b[8], 30);\n     VERIFY_BITS(b[9], 26);\n \n-    const uint32_t M = 0x3FFFFFFUL, R0 = 0x3D10UL, R1 = 0x400UL;\n     /** [... a b c] is a shorthand for ... + a<<52 + b<<26 + c<<0 mod n.\n      *  px is a shorthand for sum(a[i]*b[x-i], i=0..x).\n      *  Note that [x 0 0 0 0 0 0 0 0 0 0] = [x*R1 x*R0].\n      */\n \n-    uint64_t c, d;\n-\n     d  = (uint64_t)a[0] * b[9]\n        + (uint64_t)a[1] * b[8]\n        + (uint64_t)a[2] * b[7]\n@@ -456,7 +474,7 @@ SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint32_t *r, const uint32_t\n        + (uint64_t)a[9] * b[0];\n     /* VERIFY_BITS(d, 64); */\n     /* [d 0 0 0 0 0 0 0 0 0] = [p9 0 0 0 0 0 0 0 0 0] */\n-    uint32_t t9 = d & M; d >>= 26;\n+    t9 = d & M; d >>= 26;\n     VERIFY_BITS(t9, 26);\n     VERIFY_BITS(d, 38);\n     /* [d t9 0 0 0 0 0 0 0 0 0] = [p9 0 0 0 0 0 0 0 0 0] */\n@@ -475,12 +493,12 @@ SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint32_t *r, const uint32_t\n        + (uint64_t)a[9] * b[1];\n     VERIFY_BITS(d, 63);\n     /* [d t9 0 0 0 0 0 0 0 0 c] = [p10 p9 0 0 0 0 0 0 0 0 p0] */\n-    uint64_t u0 = d & M; d >>= 26; c += u0 * R0;\n+    u0 = d & M; d >>= 26; c += u0 * R0;\n     VERIFY_BITS(u0, 26);\n     VERIFY_BITS(d, 37);\n     VERIFY_BITS(c, 61);\n     /* [d u0 t9 0 0 0 0 0 0 0 0 c-u0*R0] = [p10 p9 0 0 0 0 0 0 0 0 p0] */\n-    uint32_t t0 = c & M; c >>= 26; c += u0 * R1;\n+    t0 = c & M; c >>= 26; c += u0 * R1;\n     VERIFY_BITS(t0, 26);\n     VERIFY_BITS(c, 37);\n     /* [d u0 t9 0 0 0 0 0 0 0 c-u0*R1 t0-u0*R0] = [p10 p9 0 0 0 0 0 0 0 0 p0] */\n@@ -500,12 +518,12 @@ SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint32_t *r, const uint32_t\n        + (uint64_t)a[9] * b[2];\n     VERIFY_BITS(d, 63);\n     /* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */\n-    uint64_t u1 = d & M; d >>= 26; c += u1 * R0;\n+    u1 = d & M; d >>= 26; c += u1 * R0;\n     VERIFY_BITS(u1, 26);\n     VERIFY_BITS(d, 37);\n     VERIFY_BITS(c, 63);\n     /* [d u1 0 t9 0 0 0 0 0 0 0 c-u1*R0 t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */\n-    uint32_t t1 = c & M; c >>= 26; c += u1 * R1;\n+    t1 = c & M; c >>= 26; c += u1 * R1;\n     VERIFY_BITS(t1, 26);\n     VERIFY_BITS(c, 38);\n     /* [d u1 0 t9 0 0 0 0 0 0 c-u1*R1 t1-u1*R0 t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */\n@@ -525,12 +543,12 @@ SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint32_t *r, const uint32_t\n        + (uint64_t)a[9] * b[3];\n     VERIFY_BITS(d, 63);\n     /* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */\n-    uint64_t u2 = d & M; d >>= 26; c += u2 * R0;\n+    u2 = d & M; d >>= 26; c += u2 * R0;\n     VERIFY_BITS(u2, 26);\n     VERIFY_BITS(d, 37);\n     VERIFY_BITS(c, 63);\n     /* [d u2 0 0 t9 0 0 0 0 0 0 c-u2*R0 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */\n-    uint32_t t2 = c & M; c >>= 26; c += u2 * R1;\n+    t2 = c & M; c >>= 26; c += u2 * R1;\n     VERIFY_BITS(t2, 26);\n     VERIFY_BITS(c, 38);\n     /* [d u2 0 0 t9 0 0 0 0 0 c-u2*R1 t2-u2*R0 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */\n@@ -550,12 +568,12 @@ SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint32_t *r, const uint32_t\n        + (uint64_t)a[9] * b[4];\n     VERIFY_BITS(d, 63);\n     /* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */\n-    uint64_t u3 = d & M; d >>= 26; c += u3 * R0;\n+    u3 = d & M; d >>= 26; c += u3 * R0;\n     VERIFY_BITS(u3, 26);\n     VERIFY_BITS(d, 37);\n     /* VERIFY_BITS(c, 64); */\n     /* [d u3 0 0 0 t9 0 0 0 0 0 c-u3*R0 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */\n-    uint32_t t3 = c & M; c >>= 26; c += u3 * R1;\n+    t3 = c & M; c >>= 26; c += u3 * R1;\n     VERIFY_BITS(t3, 26);\n     VERIFY_BITS(c, 39);\n     /* [d u3 0 0 0 t9 0 0 0 0 c-u3*R1 t3-u3*R0 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */\n@@ -575,12 +593,12 @@ SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint32_t *r, const uint32_t\n        + (uint64_t)a[9] * b[5];\n     VERIFY_BITS(d, 62);\n     /* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */\n-    uint64_t u4 = d & M; d >>= 26; c += u4 * R0;\n+    u4 = d & M; d >>= 26; c += u4 * R0;\n     VERIFY_BITS(u4, 26);\n     VERIFY_BITS(d, 36);\n     /* VERIFY_BITS(c, 64); */\n     /* [d u4 0 0 0 0 t9 0 0 0 0 c-u4*R0 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */\n-    uint32_t t4 = c & M; c >>= 26; c += u4 * R1;\n+    t4 = c & M; c >>= 26; c += u4 * R1;\n     VERIFY_BITS(t4, 26);\n     VERIFY_BITS(c, 39);\n     /* [d u4 0 0 0 0 t9 0 0 0 c-u4*R1 t4-u4*R0 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */\n@@ -600,12 +618,12 @@ SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint32_t *r, const uint32_t\n        + (uint64_t)a[9] * b[6];\n     VERIFY_BITS(d, 62);\n     /* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */\n-    uint64_t u5 = d & M; d >>= 26; c += u5 * R0;\n+    u5 = d & M; d >>= 26; c += u5 * R0;\n     VERIFY_BITS(u5, 26);\n     VERIFY_BITS(d, 36);\n     /* VERIFY_BITS(c, 64); */\n     /* [d u5 0 0 0 0 0 t9 0 0 0 c-u5*R0 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */\n-    uint32_t t5 = c & M; c >>= 26; c += u5 * R1;\n+    t5 = c & M; c >>= 26; c += u5 * R1;\n     VERIFY_BITS(t5, 26);\n     VERIFY_BITS(c, 39);\n     /* [d u5 0 0 0 0 0 t9 0 0 c-u5*R1 t5-u5*R0 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */\n@@ -625,12 +643,12 @@ SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint32_t *r, const uint32_t\n        + (uint64_t)a[9] * b[7];\n     VERIFY_BITS(d, 61);\n     /* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */\n-    uint64_t u6 = d & M; d >>= 26; c += u6 * R0;\n+    u6 = d & M; d >>= 26; c += u6 * R0;\n     VERIFY_BITS(u6, 26);\n     VERIFY_BITS(d, 35);\n     /* VERIFY_BITS(c, 64); */\n     /* [d u6 0 0 0 0 0 0 t9 0 0 c-u6*R0 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */\n-    uint32_t t6 = c & M; c >>= 26; c += u6 * R1;\n+    t6 = c & M; c >>= 26; c += u6 * R1;\n     VERIFY_BITS(t6, 26);\n     VERIFY_BITS(c, 39);\n     /* [d u6 0 0 0 0 0 0 t9 0 c-u6*R1 t6-u6*R0 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */\n@@ -651,13 +669,13 @@ SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint32_t *r, const uint32_t\n        + (uint64_t)a[9] * b[8];\n     VERIFY_BITS(d, 58);\n     /* [d 0 0 0 0 0 0 0 t9 0 c t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    uint64_t u7 = d & M; d >>= 26; c += u7 * R0;\n+    u7 = d & M; d >>= 26; c += u7 * R0;\n     VERIFY_BITS(u7, 26);\n     VERIFY_BITS(d, 32);\n     /* VERIFY_BITS(c, 64); */\n     VERIFY_CHECK(c <= 0x800001703FFFC2F7ULL);\n     /* [d u7 0 0 0 0 0 0 0 t9 0 c-u7*R0 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    uint32_t t7 = c & M; c >>= 26; c += u7 * R1;\n+    t7 = c & M; c >>= 26; c += u7 * R1;\n     VERIFY_BITS(t7, 26);\n     VERIFY_BITS(c, 38);\n     /* [d u7 0 0 0 0 0 0 0 t9 c-u7*R1 t7-u7*R0 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */\n@@ -678,7 +696,7 @@ SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint32_t *r, const uint32_t\n     d += (uint64_t)a[9] * b[9];\n     VERIFY_BITS(d, 57);\n     /* [d 0 0 0 0 0 0 0 0 t9 c t7 t6 t5 t4 t3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    uint64_t u8 = d & M; d >>= 26; c += u8 * R0;\n+    u8 = d & M; d >>= 26; c += u8 * R0;\n     VERIFY_BITS(u8, 26);\n     VERIFY_BITS(d, 31);\n     /* VERIFY_BITS(c, 64); */\n@@ -742,6 +760,11 @@ SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint32_t *r, const uint32_t\n }\n \n SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint32_t *r, const uint32_t *a) {\n+    uint64_t c, d;\n+    uint64_t u0, u1, u2, u3, u4, u5, u6, u7, u8;\n+    uint32_t t9, t0, t1, t2, t3, t4, t5, t6, t7;\n+    const uint32_t M = 0x3FFFFFFUL, R0 = 0x3D10UL, R1 = 0x400UL;\n+\n     VERIFY_BITS(a[0], 30);\n     VERIFY_BITS(a[1], 30);\n     VERIFY_BITS(a[2], 30);\n@@ -753,22 +776,19 @@ SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint32_t *r, const uint32_t\n     VERIFY_BITS(a[8], 30);\n     VERIFY_BITS(a[9], 26);\n \n-    const uint32_t M = 0x3FFFFFFUL, R0 = 0x3D10UL, R1 = 0x400UL;\n     /** [... a b c] is a shorthand for ... + a<<52 + b<<26 + c<<0 mod n.\n      *  px is a shorthand for sum(a[i]*a[x-i], i=0..x).\n      *  Note that [x 0 0 0 0 0 0 0 0 0 0] = [x*R1 x*R0].\n      */\n \n-    uint64_t c, d;\n-\n     d  = (uint64_t)(a[0]*2) * a[9]\n        + (uint64_t)(a[1]*2) * a[8]\n        + (uint64_t)(a[2]*2) * a[7]\n        + (uint64_t)(a[3]*2) * a[6]\n        + (uint64_t)(a[4]*2) * a[5];\n     /* VERIFY_BITS(d, 64); */\n     /* [d 0 0 0 0 0 0 0 0 0] = [p9 0 0 0 0 0 0 0 0 0] */\n-    uint32_t t9 = d & M; d >>= 26;\n+    t9 = d & M; d >>= 26;\n     VERIFY_BITS(t9, 26);\n     VERIFY_BITS(d, 38);\n     /* [d t9 0 0 0 0 0 0 0 0 0] = [p9 0 0 0 0 0 0 0 0 0] */\n@@ -783,12 +803,12 @@ SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint32_t *r, const uint32_t\n        + (uint64_t)a[5] * a[5];\n     VERIFY_BITS(d, 63);\n     /* [d t9 0 0 0 0 0 0 0 0 c] = [p10 p9 0 0 0 0 0 0 0 0 p0] */\n-    uint64_t u0 = d & M; d >>= 26; c += u0 * R0;\n+    u0 = d & M; d >>= 26; c += u0 * R0;\n     VERIFY_BITS(u0, 26);\n     VERIFY_BITS(d, 37);\n     VERIFY_BITS(c, 61);\n     /* [d u0 t9 0 0 0 0 0 0 0 0 c-u0*R0] = [p10 p9 0 0 0 0 0 0 0 0 p0] */\n-    uint32_t t0 = c & M; c >>= 26; c += u0 * R1;\n+    t0 = c & M; c >>= 26; c += u0 * R1;\n     VERIFY_BITS(t0, 26);\n     VERIFY_BITS(c, 37);\n     /* [d u0 t9 0 0 0 0 0 0 0 c-u0*R1 t0-u0*R0] = [p10 p9 0 0 0 0 0 0 0 0 p0] */\n@@ -803,12 +823,12 @@ SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint32_t *r, const uint32_t\n        + (uint64_t)(a[5]*2) * a[6];\n     VERIFY_BITS(d, 63);\n     /* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */\n-    uint64_t u1 = d & M; d >>= 26; c += u1 * R0;\n+    u1 = d & M; d >>= 26; c += u1 * R0;\n     VERIFY_BITS(u1, 26);\n     VERIFY_BITS(d, 37);\n     VERIFY_BITS(c, 63);\n     /* [d u1 0 t9 0 0 0 0 0 0 0 c-u1*R0 t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */\n-    uint32_t t1 = c & M; c >>= 26; c += u1 * R1;\n+    t1 = c & M; c >>= 26; c += u1 * R1;\n     VERIFY_BITS(t1, 26);\n     VERIFY_BITS(c, 38);\n     /* [d u1 0 t9 0 0 0 0 0 0 c-u1*R1 t1-u1*R0 t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */\n@@ -824,12 +844,12 @@ SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint32_t *r, const uint32_t\n        + (uint64_t)a[6] * a[6];\n     VERIFY_BITS(d, 63);\n     /* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */\n-    uint64_t u2 = d & M; d >>= 26; c += u2 * R0;\n+    u2 = d & M; d >>= 26; c += u2 * R0;\n     VERIFY_BITS(u2, 26);\n     VERIFY_BITS(d, 37);\n     VERIFY_BITS(c, 63);\n     /* [d u2 0 0 t9 0 0 0 0 0 0 c-u2*R0 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */\n-    uint32_t t2 = c & M; c >>= 26; c += u2 * R1;\n+    t2 = c & M; c >>= 26; c += u2 * R1;\n     VERIFY_BITS(t2, 26);\n     VERIFY_BITS(c, 38);\n     /* [d u2 0 0 t9 0 0 0 0 0 c-u2*R1 t2-u2*R0 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */\n@@ -844,12 +864,12 @@ SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint32_t *r, const uint32_t\n        + (uint64_t)(a[6]*2) * a[7];\n     VERIFY_BITS(d, 63);\n     /* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */\n-    uint64_t u3 = d & M; d >>= 26; c += u3 * R0;\n+    u3 = d & M; d >>= 26; c += u3 * R0;\n     VERIFY_BITS(u3, 26);\n     VERIFY_BITS(d, 37);\n     /* VERIFY_BITS(c, 64); */\n     /* [d u3 0 0 0 t9 0 0 0 0 0 c-u3*R0 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */\n-    uint32_t t3 = c & M; c >>= 26; c += u3 * R1;\n+    t3 = c & M; c >>= 26; c += u3 * R1;\n     VERIFY_BITS(t3, 26);\n     VERIFY_BITS(c, 39);\n     /* [d u3 0 0 0 t9 0 0 0 0 c-u3*R1 t3-u3*R0 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */\n@@ -865,12 +885,12 @@ SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint32_t *r, const uint32_t\n        + (uint64_t)a[7] * a[7];\n     VERIFY_BITS(d, 62);\n     /* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */\n-    uint64_t u4 = d & M; d >>= 26; c += u4 * R0;\n+    u4 = d & M; d >>= 26; c += u4 * R0;\n     VERIFY_BITS(u4, 26);\n     VERIFY_BITS(d, 36);\n     /* VERIFY_BITS(c, 64); */\n     /* [d u4 0 0 0 0 t9 0 0 0 0 c-u4*R0 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */\n-    uint32_t t4 = c & M; c >>= 26; c += u4 * R1;\n+    t4 = c & M; c >>= 26; c += u4 * R1;\n     VERIFY_BITS(t4, 26);\n     VERIFY_BITS(c, 39);\n     /* [d u4 0 0 0 0 t9 0 0 0 c-u4*R1 t4-u4*R0 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */\n@@ -885,12 +905,12 @@ SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint32_t *r, const uint32_t\n        + (uint64_t)(a[7]*2) * a[8];\n     VERIFY_BITS(d, 62);\n     /* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */\n-    uint64_t u5 = d & M; d >>= 26; c += u5 * R0;\n+    u5 = d & M; d >>= 26; c += u5 * R0;\n     VERIFY_BITS(u5, 26);\n     VERIFY_BITS(d, 36);\n     /* VERIFY_BITS(c, 64); */\n     /* [d u5 0 0 0 0 0 t9 0 0 0 c-u5*R0 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */\n-    uint32_t t5 = c & M; c >>= 26; c += u5 * R1;\n+    t5 = c & M; c >>= 26; c += u5 * R1;\n     VERIFY_BITS(t5, 26);\n     VERIFY_BITS(c, 39);\n     /* [d u5 0 0 0 0 0 t9 0 0 c-u5*R1 t5-u5*R0 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */\n@@ -906,12 +926,12 @@ SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint32_t *r, const uint32_t\n        + (uint64_t)a[8] * a[8];\n     VERIFY_BITS(d, 61);\n     /* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */\n-    uint64_t u6 = d & M; d >>= 26; c += u6 * R0;\n+    u6 = d & M; d >>= 26; c += u6 * R0;\n     VERIFY_BITS(u6, 26);\n     VERIFY_BITS(d, 35);\n     /* VERIFY_BITS(c, 64); */\n     /* [d u6 0 0 0 0 0 0 t9 0 0 c-u6*R0 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */\n-    uint32_t t6 = c & M; c >>= 26; c += u6 * R1;\n+    t6 = c & M; c >>= 26; c += u6 * R1;\n     VERIFY_BITS(t6, 26);\n     VERIFY_BITS(c, 39);\n     /* [d u6 0 0 0 0 0 0 t9 0 c-u6*R1 t6-u6*R0 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */\n@@ -927,13 +947,13 @@ SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint32_t *r, const uint32_t\n     d += (uint64_t)(a[8]*2) * a[9];\n     VERIFY_BITS(d, 58);\n     /* [d 0 0 0 0 0 0 0 t9 0 c t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    uint64_t u7 = d & M; d >>= 26; c += u7 * R0;\n+    u7 = d & M; d >>= 26; c += u7 * R0;\n     VERIFY_BITS(u7, 26);\n     VERIFY_BITS(d, 32);\n     /* VERIFY_BITS(c, 64); */\n     VERIFY_CHECK(c <= 0x800001703FFFC2F7ULL);\n     /* [d u7 0 0 0 0 0 0 0 t9 0 c-u7*R0 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    uint32_t t7 = c & M; c >>= 26; c += u7 * R1;\n+    t7 = c & M; c >>= 26; c += u7 * R1;\n     VERIFY_BITS(t7, 26);\n     VERIFY_BITS(c, 38);\n     /* [d u7 0 0 0 0 0 0 0 t9 c-u7*R1 t7-u7*R0 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */\n@@ -950,7 +970,7 @@ SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint32_t *r, const uint32_t\n     d += (uint64_t)a[9] * a[9];\n     VERIFY_BITS(d, 57);\n     /* [d 0 0 0 0 0 0 0 0 t9 c t7 t6 t5 t4 t3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n-    uint64_t u8 = d & M; d >>= 26; c += u8 * R0;\n+    u8 = d & M; d >>= 26; c += u8 * R0;\n     VERIFY_BITS(u8, 26);\n     VERIFY_BITS(d, 31);\n     /* VERIFY_BITS(c, 64); */\n@@ -1043,8 +1063,10 @@ static void secp256k1_fe_sqr(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n #endif\n }\n \n-static void secp256k1_fe_cmov(secp256k1_fe_t *r, const secp256k1_fe_t *a, int flag) {\n-    uint32_t mask0 = flag + ~((uint32_t)0), mask1 = ~mask0;\n+static SECP256K1_INLINE void secp256k1_fe_storage_cmov(secp256k1_fe_storage_t *r, const secp256k1_fe_storage_t *a, int flag) {\n+    uint32_t mask0, mask1;\n+    mask0 = flag + ~((uint32_t)0);\n+    mask1 = ~mask0;\n     r->n[0] = (r->n[0] & mask0) | (a->n[0] & mask1);\n     r->n[1] = (r->n[1] & mask0) | (a->n[1] & mask1);\n     r->n[2] = (r->n[2] & mask0) | (a->n[2] & mask1);\n@@ -1053,13 +1075,36 @@ static void secp256k1_fe_cmov(secp256k1_fe_t *r, const secp256k1_fe_t *a, int fl\n     r->n[5] = (r->n[5] & mask0) | (a->n[5] & mask1);\n     r->n[6] = (r->n[6] & mask0) | (a->n[6] & mask1);\n     r->n[7] = (r->n[7] & mask0) | (a->n[7] & mask1);\n-    r->n[8] = (r->n[8] & mask0) | (a->n[8] & mask1);\n-    r->n[9] = (r->n[9] & mask0) | (a->n[9] & mask1);\n+}\n+\n+static void secp256k1_fe_to_storage(secp256k1_fe_storage_t *r, const secp256k1_fe_t *a) {\n #ifdef VERIFY\n-    if (flag) {\n-        r->magnitude = a->magnitude;\n-        r->normalized = a->normalized;\n-    }\n+    VERIFY_CHECK(a->normalized);\n+#endif\n+    r->n[0] = a->n[0] | a->n[1] << 26;\n+    r->n[1] = a->n[1] >> 6 | a->n[2] << 20;\n+    r->n[2] = a->n[2] >> 12 | a->n[3] << 14;\n+    r->n[3] = a->n[3] >> 18 | a->n[4] << 8;\n+    r->n[4] = a->n[4] >> 24 | a->n[5] << 2 | a->n[6] << 28;\n+    r->n[5] = a->n[6] >> 4 | a->n[7] << 22;\n+    r->n[6] = a->n[7] >> 10 | a->n[8] << 16;\n+    r->n[7] = a->n[8] >> 16 | a->n[9] << 10;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe_t *r, const secp256k1_fe_storage_t *a) {\n+    r->n[0] = a->n[0] & 0x3FFFFFFUL;\n+    r->n[1] = a->n[0] >> 26 | ((a->n[1] << 6) & 0x3FFFFFFUL);\n+    r->n[2] = a->n[1] >> 20 | ((a->n[2] << 12) & 0x3FFFFFFUL);\n+    r->n[3] = a->n[2] >> 14 | ((a->n[3] << 18) & 0x3FFFFFFUL);\n+    r->n[4] = a->n[3] >> 8 | ((a->n[4] << 24) & 0x3FFFFFFUL);\n+    r->n[5] = (a->n[4] >> 2) & 0x3FFFFFFUL;\n+    r->n[6] = a->n[4] >> 28 | ((a->n[5] << 4) & 0x3FFFFFFUL);\n+    r->n[7] = a->n[5] >> 22 | ((a->n[6] << 10) & 0x3FFFFFFUL);\n+    r->n[8] = a->n[6] >> 16 | ((a->n[7] << 16) & 0x3FFFFFFUL);\n+    r->n[9] = a->n[7] >> 10;\n+#ifdef VERIFY\n+    r->magnitude = 1;\n+    r->normalized = 1;\n #endif\n }\n "
      },
      {
        "sha": "4513d36f49f3fde2aec60861afe0ed534815b746",
        "filename": "src/secp256k1/src/field_5x52.h",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/field_5x52.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/field_5x52.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_5x52.h?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -18,4 +18,30 @@ typedef struct {\n #endif\n } secp256k1_fe_t;\n \n+/* Unpacks a constant into a overlapping multi-limbed FE element. */\n+#define SECP256K1_FE_CONST_INNER(d7, d6, d5, d4, d3, d2, d1, d0) { \\\n+    (d0) | ((uint64_t)(d1) & 0xFFFFFUL) << 32, \\\n+    ((d1) >> 20) | ((uint64_t)(d2)) << 12 | ((uint64_t)(d3) & 0xFFUL) << 44, \\\n+    ((d3) >> 8) | ((uint64_t)(d4) & 0xFFFFFFFUL) << 24, \\\n+    ((d4) >> 28) | ((uint64_t)(d5)) << 4 | ((uint64_t)(d6) & 0xFFFFUL) << 36, \\\n+    ((d6) >> 16) | ((uint64_t)(d7)) << 16 \\\n+}\n+\n+#ifdef VERIFY\n+#define SECP256K1_FE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {SECP256K1_FE_CONST_INNER((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)), 1, 1}\n+#else\n+#define SECP256K1_FE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {SECP256K1_FE_CONST_INNER((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0))}\n+#endif\n+\n+typedef struct {\n+    uint64_t n[4];\n+} secp256k1_fe_storage_t;\n+\n+#define SECP256K1_FE_STORAGE_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {{ \\\n+    (d0) | ((uint64_t)(d1)) << 32, \\\n+    (d2) | ((uint64_t)(d3)) << 32, \\\n+    (d4) | ((uint64_t)(d5)) << 32, \\\n+    (d6) | ((uint64_t)(d7)) << 32 \\\n+}}\n+\n #endif"
      },
      {
        "sha": "2f9c8704a8425eb4044438f3c4d3627169943634",
        "filename": "src/secp256k1/src/field_5x52_impl.h",
        "status": "modified",
        "additions": 56,
        "deletions": 26,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/field_5x52_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/field_5x52_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_5x52_impl.h?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -30,13 +30,11 @@\n  *  output.\n  */\n \n-static void secp256k1_fe_inner_start(void) {}\n-static void secp256k1_fe_inner_stop(void) {}\n-\n #ifdef VERIFY\n static void secp256k1_fe_verify(const secp256k1_fe_t *a) {\n     const uint64_t *d = a->n;\n     int m = a->normalized ? 1 : 2 * a->magnitude, r = 1;\n+   /* secp256k1 'p' value defined in \"Standards for Efficient Cryptography\" (SEC2) 2.7.1. */\n     r &= (d[0] <= 0xFFFFFFFFFFFFFULL * m);\n     r &= (d[1] <= 0xFFFFFFFFFFFFFULL * m);\n     r &= (d[2] <= 0xFFFFFFFFFFFFFULL * m);\n@@ -62,8 +60,8 @@ static void secp256k1_fe_normalize(secp256k1_fe_t *r) {\n     uint64_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4];\n \n     /* Reduce t4 at the start so there will be at most a single carry from the first pass */\n-    uint64_t x = t4 >> 48; t4 &= 0x0FFFFFFFFFFFFULL;\n     uint64_t m;\n+    uint64_t x = t4 >> 48; t4 &= 0x0FFFFFFFFFFFFULL;\n \n     /* The first pass ensures the magnitude is 1, ... */\n     t0 += x * 0x1000003D1ULL;\n@@ -129,8 +127,8 @@ static void secp256k1_fe_normalize_var(secp256k1_fe_t *r) {\n     uint64_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4];\n \n     /* Reduce t4 at the start so there will be at most a single carry from the first pass */\n-    uint64_t x = t4 >> 48; t4 &= 0x0FFFFFFFFFFFFULL;\n     uint64_t m;\n+    uint64_t x = t4 >> 48; t4 &= 0x0FFFFFFFFFFFFULL;\n \n     /* The first pass ensures the magnitude is 1, ... */\n     t0 += x * 0x1000003D1ULL;\n@@ -172,12 +170,12 @@ static void secp256k1_fe_normalize_var(secp256k1_fe_t *r) {\n static int secp256k1_fe_normalizes_to_zero(secp256k1_fe_t *r) {\n     uint64_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4];\n \n-    /* Reduce t4 at the start so there will be at most a single carry from the first pass */\n-    uint64_t x = t4 >> 48; t4 &= 0x0FFFFFFFFFFFFULL;\n-\n     /* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */\n     uint64_t z0, z1;\n \n+    /* Reduce t4 at the start so there will be at most a single carry from the first pass */\n+    uint64_t x = t4 >> 48; t4 &= 0x0FFFFFFFFFFFFULL;\n+\n     /* The first pass ensures the magnitude is 1, ... */\n     t0 += x * 0x1000003D1ULL;\n     t1 += (t0 >> 52); t0 &= 0xFFFFFFFFFFFFFULL; z0  = t0; z1  = t0 ^ 0x1000003D0ULL;\n@@ -193,22 +191,31 @@ static int secp256k1_fe_normalizes_to_zero(secp256k1_fe_t *r) {\n }\n \n static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe_t *r) {\n-    uint64_t t0 = r->n[0], t4 = r->n[4];\n+    uint64_t t0, t1, t2, t3, t4;\n+    uint64_t z0, z1;\n+    uint64_t x;\n+\n+    t0 = r->n[0];\n+    t4 = r->n[4];\n \n     /* Reduce t4 at the start so there will be at most a single carry from the first pass */\n-    uint64_t x = t4 >> 48;\n+    x = t4 >> 48;\n \n     /* The first pass ensures the magnitude is 1, ... */\n     t0 += x * 0x1000003D1ULL;\n \n     /* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */\n-    uint64_t z0 = t0 & 0xFFFFFFFFFFFFFULL, z1 = z0 ^ 0x1000003D0ULL;\n+    z0 = t0 & 0xFFFFFFFFFFFFFULL;\n+    z1 = z0 ^ 0x1000003D0ULL;\n \n     /* Fast return path should catch the majority of cases */\n     if ((z0 != 0ULL) & (z1 != 0xFFFFFFFFFFFFFULL))\n         return 0;\n \n-    uint64_t t1 = r->n[1], t2 = r->n[2], t3 = r->n[3];\n+    t1 = r->n[1];\n+    t2 = r->n[2];\n+    t3 = r->n[3];\n+\n     t4 &= 0x0FFFFFFFFFFFFULL;\n \n     t1 += (t0 >> 52); t0  = z0;\n@@ -234,11 +241,11 @@ SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe_t *r, int a) {\n }\n \n SECP256K1_INLINE static int secp256k1_fe_is_zero(const secp256k1_fe_t *a) {\n+    const uint64_t *t = a->n;\n #ifdef VERIFY\n     VERIFY_CHECK(a->normalized);\n     secp256k1_fe_verify(a);\n #endif\n-    const uint64_t *t = a->n;\n     return (t[0] | t[1] | t[2] | t[3] | t[4]) == 0;\n }\n \n@@ -251,33 +258,37 @@ SECP256K1_INLINE static int secp256k1_fe_is_odd(const secp256k1_fe_t *a) {\n }\n \n SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe_t *a) {\n+    int i;\n #ifdef VERIFY\n     a->magnitude = 0;\n     a->normalized = 1;\n #endif\n-    for (int i=0; i<5; i++) {\n+    for (i=0; i<5; i++) {\n         a->n[i] = 0;\n     }\n }\n \n static int secp256k1_fe_cmp_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n+    int i;\n #ifdef VERIFY\n     VERIFY_CHECK(a->normalized);\n     VERIFY_CHECK(b->normalized);\n     secp256k1_fe_verify(a);\n     secp256k1_fe_verify(b);\n #endif\n-    for (int i = 4; i >= 0; i--) {\n+    for (i = 4; i >= 0; i--) {\n         if (a->n[i] > b->n[i]) return 1;\n         if (a->n[i] < b->n[i]) return -1;\n     }\n     return 0;\n }\n \n static int secp256k1_fe_set_b32(secp256k1_fe_t *r, const unsigned char *a) {\n+    int i;\n     r->n[0] = r->n[1] = r->n[2] = r->n[3] = r->n[4] = 0;\n-    for (int i=0; i<32; i++) {\n-        for (int j=0; j<2; j++) {\n+    for (i=0; i<32; i++) {\n+        int j;\n+        for (j=0; j<2; j++) {\n             int limb = (8*i+4*j)/52;\n             int shift = (8*i+4*j)%52;\n             r->n[limb] |= (uint64_t)((a[31-i] >> (4*j)) & 0xF) << shift;\n@@ -296,13 +307,15 @@ static int secp256k1_fe_set_b32(secp256k1_fe_t *r, const unsigned char *a) {\n \n /** Convert a field element to a 32-byte big endian value. Requires the input to be normalized */\n static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe_t *a) {\n+    int i;\n #ifdef VERIFY\n     VERIFY_CHECK(a->normalized);\n     secp256k1_fe_verify(a);\n #endif\n-    for (int i=0; i<32; i++) {\n+    for (i=0; i<32; i++) {\n+        int j;\n         int c = 0;\n-        for (int j=0; j<2; j++) {\n+        for (j=0; j<2; j++) {\n             int limb = (8*i+4*j)/52;\n             int shift = (8*i+4*j)%52;\n             c |= ((a->n[limb] >> shift) & 0xF) << (4 * j);\n@@ -386,18 +399,35 @@ static void secp256k1_fe_sqr(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n #endif\n }\n \n-static void secp256k1_fe_cmov(secp256k1_fe_t *r, const secp256k1_fe_t *a, int flag) {\n-    uint64_t mask0 = flag + ~((uint64_t)0), mask1 = ~mask0;\n+static SECP256K1_INLINE void secp256k1_fe_storage_cmov(secp256k1_fe_storage_t *r, const secp256k1_fe_storage_t *a, int flag) {\n+    uint64_t mask0, mask1;\n+    mask0 = flag + ~((uint64_t)0);\n+    mask1 = ~mask0;\n     r->n[0] = (r->n[0] & mask0) | (a->n[0] & mask1);\n     r->n[1] = (r->n[1] & mask0) | (a->n[1] & mask1);\n     r->n[2] = (r->n[2] & mask0) | (a->n[2] & mask1);\n     r->n[3] = (r->n[3] & mask0) | (a->n[3] & mask1);\n-    r->n[4] = (r->n[4] & mask0) | (a->n[4] & mask1);\n+}\n+\n+static void secp256k1_fe_to_storage(secp256k1_fe_storage_t *r, const secp256k1_fe_t *a) {\n #ifdef VERIFY\n-    if (flag) {\n-        r->magnitude = a->magnitude;\n-        r->normalized = a->normalized;\n-    }\n+    VERIFY_CHECK(a->normalized);\n+#endif\n+    r->n[0] = a->n[0] | a->n[1] << 52;\n+    r->n[1] = a->n[1] >> 12 | a->n[2] << 40;\n+    r->n[2] = a->n[2] >> 24 | a->n[3] << 28;\n+    r->n[3] = a->n[3] >> 36 | a->n[4] << 16;\n+}\n+\n+static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe_t *r, const secp256k1_fe_storage_t *a) {\n+    r->n[0] = a->n[0] & 0xFFFFFFFFFFFFFULL;\n+    r->n[1] = a->n[0] >> 52 | ((a->n[1] << 12) & 0xFFFFFFFFFFFFFULL);\n+    r->n[2] = a->n[1] >> 40 | ((a->n[2] << 24) & 0xFFFFFFFFFFFFFULL);\n+    r->n[3] = a->n[2] >> 28 | ((a->n[3] << 36) & 0xFFFFFFFFFFFFFULL);\n+    r->n[4] = a->n[3] >> 16;\n+#ifdef VERIFY\n+    r->magnitude = 1;\n+    r->normalized = 1;\n #endif\n }\n "
      },
      {
        "sha": "9280bb5ea221645b4a7fc2459ee1053f433abe3a",
        "filename": "src/secp256k1/src/field_5x52_int128_impl.h",
        "status": "modified",
        "additions": 60,
        "deletions": 60,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/field_5x52_int128_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/field_5x52_int128_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_5x52_int128_impl.h?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -16,6 +16,11 @@\n #endif\n \n SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t *a, const uint64_t * SECP256K1_RESTRICT b) {\n+    uint128_t c, d;\n+    uint64_t t3, t4, tx, u0;\n+    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n+\n     VERIFY_BITS(a[0], 56);\n     VERIFY_BITS(a[1], 56);\n     VERIFY_BITS(a[2], 56);\n@@ -28,85 +33,80 @@ SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t\n     VERIFY_BITS(b[4], 52);\n     VERIFY_CHECK(r != b);\n \n-    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n     /*  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.\n      *  px is a shorthand for sum(a[i]*b[x-i], i=0..x).\n      *  Note that [x 0 0 0 0 0] = [x*R].\n      */\n \n-    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n-\n-    __int128 c, d;\n-\n-    d  = (__int128)a0 * b[3]\n-       + (__int128)a1 * b[2]\n-       + (__int128)a2 * b[1]\n-       + (__int128)a3 * b[0];\n+    d  = (uint128_t)a0 * b[3]\n+       + (uint128_t)a1 * b[2]\n+       + (uint128_t)a2 * b[1]\n+       + (uint128_t)a3 * b[0];\n     VERIFY_BITS(d, 114);\n     /* [d 0 0 0] = [p3 0 0 0] */\n-    c  = (__int128)a4 * b[4];\n+    c  = (uint128_t)a4 * b[4];\n     VERIFY_BITS(c, 112);\n     /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n     d += (c & M) * R; c >>= 52;\n     VERIFY_BITS(d, 115);\n     VERIFY_BITS(c, 60);\n     /* [c 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    uint64_t t3 = d & M; d >>= 52;\n+    t3 = d & M; d >>= 52;\n     VERIFY_BITS(t3, 52);\n     VERIFY_BITS(d, 63);\n     /* [c 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n \n-    d += (__int128)a0 * b[4]\n-       + (__int128)a1 * b[3]\n-       + (__int128)a2 * b[2]\n-       + (__int128)a3 * b[1]\n-       + (__int128)a4 * b[0];\n+    d += (uint128_t)a0 * b[4]\n+       + (uint128_t)a1 * b[3]\n+       + (uint128_t)a2 * b[2]\n+       + (uint128_t)a3 * b[1]\n+       + (uint128_t)a4 * b[0];\n     VERIFY_BITS(d, 115);\n     /* [c 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n     d += c * R;\n     VERIFY_BITS(d, 116);\n     /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    uint64_t t4 = d & M; d >>= 52;\n+    t4 = d & M; d >>= 52;\n     VERIFY_BITS(t4, 52);\n     VERIFY_BITS(d, 64);\n     /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    uint64_t tx = (t4 >> 48); t4 &= (M >> 4);\n+    tx = (t4 >> 48); t4 &= (M >> 4);\n     VERIFY_BITS(tx, 4);\n     VERIFY_BITS(t4, 48);\n     /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n \n-    c  = (__int128)a0 * b[0];\n+    c  = (uint128_t)a0 * b[0];\n     VERIFY_BITS(c, 112);\n     /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */\n-    d += (__int128)a1 * b[4]\n-       + (__int128)a2 * b[3]\n-       + (__int128)a3 * b[2]\n-       + (__int128)a4 * b[1];\n+    d += (uint128_t)a1 * b[4]\n+       + (uint128_t)a2 * b[3]\n+       + (uint128_t)a3 * b[2]\n+       + (uint128_t)a4 * b[1];\n     VERIFY_BITS(d, 115);\n     /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    uint64_t u0 = d & M; d >>= 52;\n+    u0 = d & M; d >>= 52;\n     VERIFY_BITS(u0, 52);\n     VERIFY_BITS(d, 63);\n     /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n     /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n     u0 = (u0 << 4) | tx;\n     VERIFY_BITS(u0, 56);\n     /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    c += (__int128)u0 * (R >> 4);\n+    c += (uint128_t)u0 * (R >> 4);\n     VERIFY_BITS(c, 115);\n     /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n     r[0] = c & M; c >>= 52;\n     VERIFY_BITS(r[0], 52);\n     VERIFY_BITS(c, 61);\n     /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */\n \n-    c += (__int128)a0 * b[1]\n-       + (__int128)a1 * b[0];\n+    c += (uint128_t)a0 * b[1]\n+       + (uint128_t)a1 * b[0];\n     VERIFY_BITS(c, 114);\n     /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */\n-    d += (__int128)a2 * b[4]\n-       + (__int128)a3 * b[3]\n-       + (__int128)a4 * b[2];\n+    d += (uint128_t)a2 * b[4]\n+       + (uint128_t)a3 * b[3]\n+       + (uint128_t)a4 * b[2];\n     VERIFY_BITS(d, 114);\n     /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n     c += (d & M) * R; d >>= 52;\n@@ -118,13 +118,13 @@ SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t\n     VERIFY_BITS(c, 63);\n     /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n \n-    c += (__int128)a0 * b[2]\n-       + (__int128)a1 * b[1]\n-       + (__int128)a2 * b[0];\n+    c += (uint128_t)a0 * b[2]\n+       + (uint128_t)a1 * b[1]\n+       + (uint128_t)a2 * b[0];\n     VERIFY_BITS(c, 114);\n     /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */\n-    d += (__int128)a3 * b[4]\n-       + (__int128)a4 * b[3];\n+    d += (uint128_t)a3 * b[4]\n+       + (uint128_t)a4 * b[3];\n     VERIFY_BITS(d, 114);\n     /* [d 0 0 t4 t3 c t1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n     c += (d & M) * R; d >>= 52;\n@@ -153,72 +153,72 @@ SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t\n }\n \n SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t *a) {\n+    uint128_t c, d;\n+    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n+    int64_t t3, t4, tx, u0;\n+    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n+\n     VERIFY_BITS(a[0], 56);\n     VERIFY_BITS(a[1], 56);\n     VERIFY_BITS(a[2], 56);\n     VERIFY_BITS(a[3], 56);\n     VERIFY_BITS(a[4], 52);\n \n-    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;\n     /**  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.\n      *  px is a shorthand for sum(a[i]*a[x-i], i=0..x).\n      *  Note that [x 0 0 0 0 0] = [x*R].\n      */\n \n-    __int128 c, d;\n-\n-    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];\n-\n-    d  = (__int128)(a0*2) * a3\n-       + (__int128)(a1*2) * a2;\n+    d  = (uint128_t)(a0*2) * a3\n+       + (uint128_t)(a1*2) * a2;\n     VERIFY_BITS(d, 114);\n     /* [d 0 0 0] = [p3 0 0 0] */\n-    c  = (__int128)a4 * a4;\n+    c  = (uint128_t)a4 * a4;\n     VERIFY_BITS(c, 112);\n     /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n     d += (c & M) * R; c >>= 52;\n     VERIFY_BITS(d, 115);\n     VERIFY_BITS(c, 60);\n     /* [c 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n-    uint64_t t3 = d & M; d >>= 52;\n+    t3 = d & M; d >>= 52;\n     VERIFY_BITS(t3, 52);\n     VERIFY_BITS(d, 63);\n     /* [c 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */\n \n     a4 *= 2;\n-    d += (__int128)a0 * a4\n-       + (__int128)(a1*2) * a3\n-       + (__int128)a2 * a2;\n+    d += (uint128_t)a0 * a4\n+       + (uint128_t)(a1*2) * a3\n+       + (uint128_t)a2 * a2;\n     VERIFY_BITS(d, 115);\n     /* [c 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n     d += c * R;\n     VERIFY_BITS(d, 116);\n     /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    uint64_t t4 = d & M; d >>= 52;\n+    t4 = d & M; d >>= 52;\n     VERIFY_BITS(t4, 52);\n     VERIFY_BITS(d, 64);\n     /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n-    uint64_t tx = (t4 >> 48); t4 &= (M >> 4);\n+    tx = (t4 >> 48); t4 &= (M >> 4);\n     VERIFY_BITS(tx, 4);\n     VERIFY_BITS(t4, 48);\n     /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */\n \n-    c  = (__int128)a0 * a0;\n+    c  = (uint128_t)a0 * a0;\n     VERIFY_BITS(c, 112);\n     /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */\n-    d += (__int128)a1 * a4\n-       + (__int128)(a2*2) * a3;\n+    d += (uint128_t)a1 * a4\n+       + (uint128_t)(a2*2) * a3;\n     VERIFY_BITS(d, 114);\n     /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    uint64_t u0 = d & M; d >>= 52;\n+    u0 = d & M; d >>= 52;\n     VERIFY_BITS(u0, 52);\n     VERIFY_BITS(d, 62);\n     /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n     /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n     u0 = (u0 << 4) | tx;\n     VERIFY_BITS(u0, 56);\n     /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n-    c += (__int128)u0 * (R >> 4);\n+    c += (uint128_t)u0 * (R >> 4);\n     VERIFY_BITS(c, 113);\n     /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */\n     r[0] = c & M; c >>= 52;\n@@ -227,11 +227,11 @@ SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t\n     /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */\n \n     a0 *= 2;\n-    c += (__int128)a0 * a1;\n+    c += (uint128_t)a0 * a1;\n     VERIFY_BITS(c, 114);\n     /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */\n-    d += (__int128)a2 * a4\n-       + (__int128)a3 * a3;\n+    d += (uint128_t)a2 * a4\n+       + (uint128_t)a3 * a3;\n     VERIFY_BITS(d, 114);\n     /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n     c += (d & M) * R; d >>= 52;\n@@ -243,11 +243,11 @@ SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t\n     VERIFY_BITS(c, 63);\n     /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */\n \n-    c += (__int128)a0 * a2\n-       + (__int128)a1 * a1;\n+    c += (uint128_t)a0 * a2\n+       + (uint128_t)a1 * a1;\n     VERIFY_BITS(c, 114);\n     /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */\n-    d += (__int128)a3 * a4;\n+    d += (uint128_t)a3 * a4;\n     VERIFY_BITS(d, 114);\n     /* [d 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */\n     c += (d & M) * R; d >>= 52;"
      },
      {
        "sha": "047914cf28e9facef6033ac801582bca03e72240",
        "filename": "src/secp256k1/src/field_impl.h",
        "status": "modified",
        "additions": 63,
        "deletions": 124,
        "changes": 187,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/field_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/field_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_impl.h?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -21,49 +21,6 @@\n #error \"Please select field implementation\"\n #endif\n \n-static void secp256k1_fe_get_hex(char *r, int *rlen, const secp256k1_fe_t *a) {\n-    if (*rlen < 65) {\n-        *rlen = 65;\n-        return;\n-    }\n-    *rlen = 65;\n-    unsigned char tmp[32];\n-    secp256k1_fe_t b = *a;\n-    secp256k1_fe_normalize(&b);\n-    secp256k1_fe_get_b32(tmp, &b);\n-    for (int i=0; i<32; i++) {\n-        static const char *c = \"0123456789ABCDEF\";\n-        r[2*i]   = c[(tmp[i] >> 4) & 0xF];\n-        r[2*i+1] = c[(tmp[i]) & 0xF];\n-    }\n-    r[64] = 0x00;\n-}\n-\n-static int secp256k1_fe_set_hex(secp256k1_fe_t *r, const char *a, int alen) {\n-    unsigned char tmp[32] = {};\n-    static const int cvt[256] = {0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0,\n-                                 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0,\n-                                 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0,\n-                                 0, 1, 2, 3, 4, 5, 6,7,8,9,0,0,0,0,0,0,\n-                                 0,10,11,12,13,14,15,0,0,0,0,0,0,0,0,0,\n-                                 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0,\n-                                 0,10,11,12,13,14,15,0,0,0,0,0,0,0,0,0,\n-                                 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0,\n-                                 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0,\n-                                 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0,\n-                                 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0,\n-                                 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0,\n-                                 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0,\n-                                 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0,\n-                                 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0,\n-                                 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0};\n-    for (int i=0; i<32; i++) {\n-        if (alen > i*2)\n-            tmp[32 - alen/2 + i] = (cvt[(unsigned char)a[2*i]] << 4) + cvt[(unsigned char)a[2*i+1]];\n-    }\n-    return secp256k1_fe_set_b32(r, tmp);\n-}\n-\n SECP256K1_INLINE static int secp256k1_fe_equal_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n     secp256k1_fe_t na;\n     secp256k1_fe_negate(&na, a, 1);\n@@ -72,62 +29,62 @@ SECP256K1_INLINE static int secp256k1_fe_equal_var(const secp256k1_fe_t *a, cons\n }\n \n static int secp256k1_fe_sqrt_var(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n+    secp256k1_fe_t x2, x3, x6, x9, x11, x22, x44, x88, x176, x220, x223, t1;\n+    int j;\n \n     /** The binary representation of (p + 1)/4 has 3 blocks of 1s, with lengths in\n      *  { 2, 22, 223 }. Use an addition chain to calculate 2^n - 1 for each block:\n      *  1, [2], 3, 6, 9, 11, [22], 44, 88, 176, 220, [223]\n      */\n \n-    secp256k1_fe_t x2;\n     secp256k1_fe_sqr(&x2, a);\n     secp256k1_fe_mul(&x2, &x2, a);\n \n-    secp256k1_fe_t x3;\n     secp256k1_fe_sqr(&x3, &x2);\n     secp256k1_fe_mul(&x3, &x3, a);\n \n-    secp256k1_fe_t x6 = x3;\n-    for (int j=0; j<3; j++) secp256k1_fe_sqr(&x6, &x6);\n+    x6 = x3;\n+    for (j=0; j<3; j++) secp256k1_fe_sqr(&x6, &x6);\n     secp256k1_fe_mul(&x6, &x6, &x3);\n \n-    secp256k1_fe_t x9 = x6;\n-    for (int j=0; j<3; j++) secp256k1_fe_sqr(&x9, &x9);\n+    x9 = x6;\n+    for (j=0; j<3; j++) secp256k1_fe_sqr(&x9, &x9);\n     secp256k1_fe_mul(&x9, &x9, &x3);\n \n-    secp256k1_fe_t x11 = x9;\n-    for (int j=0; j<2; j++) secp256k1_fe_sqr(&x11, &x11);\n+    x11 = x9;\n+    for (j=0; j<2; j++) secp256k1_fe_sqr(&x11, &x11);\n     secp256k1_fe_mul(&x11, &x11, &x2);\n \n-    secp256k1_fe_t x22 = x11;\n-    for (int j=0; j<11; j++) secp256k1_fe_sqr(&x22, &x22);\n+    x22 = x11;\n+    for (j=0; j<11; j++) secp256k1_fe_sqr(&x22, &x22);\n     secp256k1_fe_mul(&x22, &x22, &x11);\n \n-    secp256k1_fe_t x44 = x22;\n-    for (int j=0; j<22; j++) secp256k1_fe_sqr(&x44, &x44);\n+    x44 = x22;\n+    for (j=0; j<22; j++) secp256k1_fe_sqr(&x44, &x44);\n     secp256k1_fe_mul(&x44, &x44, &x22);\n \n-    secp256k1_fe_t x88 = x44;\n-    for (int j=0; j<44; j++) secp256k1_fe_sqr(&x88, &x88);\n+    x88 = x44;\n+    for (j=0; j<44; j++) secp256k1_fe_sqr(&x88, &x88);\n     secp256k1_fe_mul(&x88, &x88, &x44);\n \n-    secp256k1_fe_t x176 = x88;\n-    for (int j=0; j<88; j++) secp256k1_fe_sqr(&x176, &x176);\n+    x176 = x88;\n+    for (j=0; j<88; j++) secp256k1_fe_sqr(&x176, &x176);\n     secp256k1_fe_mul(&x176, &x176, &x88);\n \n-    secp256k1_fe_t x220 = x176;\n-    for (int j=0; j<44; j++) secp256k1_fe_sqr(&x220, &x220);\n+    x220 = x176;\n+    for (j=0; j<44; j++) secp256k1_fe_sqr(&x220, &x220);\n     secp256k1_fe_mul(&x220, &x220, &x44);\n \n-    secp256k1_fe_t x223 = x220;\n-    for (int j=0; j<3; j++) secp256k1_fe_sqr(&x223, &x223);\n+    x223 = x220;\n+    for (j=0; j<3; j++) secp256k1_fe_sqr(&x223, &x223);\n     secp256k1_fe_mul(&x223, &x223, &x3);\n \n     /* The final result is then assembled using a sliding window over the blocks. */\n \n-    secp256k1_fe_t t1 = x223;\n-    for (int j=0; j<23; j++) secp256k1_fe_sqr(&t1, &t1);\n+    t1 = x223;\n+    for (j=0; j<23; j++) secp256k1_fe_sqr(&t1, &t1);\n     secp256k1_fe_mul(&t1, &t1, &x22);\n-    for (int j=0; j<6; j++) secp256k1_fe_sqr(&t1, &t1);\n+    for (j=0; j<6; j++) secp256k1_fe_sqr(&t1, &t1);\n     secp256k1_fe_mul(&t1, &t1, &x2);\n     secp256k1_fe_sqr(&t1, &t1);\n     secp256k1_fe_sqr(r, &t1);\n@@ -139,101 +96,111 @@ static int secp256k1_fe_sqrt_var(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n }\n \n static void secp256k1_fe_inv(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n+    secp256k1_fe_t x2, x3, x6, x9, x11, x22, x44, x88, x176, x220, x223, t1;\n+    int j;\n \n     /** The binary representation of (p - 2) has 5 blocks of 1s, with lengths in\n      *  { 1, 2, 22, 223 }. Use an addition chain to calculate 2^n - 1 for each block:\n      *  [1], [2], 3, 6, 9, 11, [22], 44, 88, 176, 220, [223]\n      */\n \n-    secp256k1_fe_t x2;\n     secp256k1_fe_sqr(&x2, a);\n     secp256k1_fe_mul(&x2, &x2, a);\n \n-    secp256k1_fe_t x3;\n     secp256k1_fe_sqr(&x3, &x2);\n     secp256k1_fe_mul(&x3, &x3, a);\n \n-    secp256k1_fe_t x6 = x3;\n-    for (int j=0; j<3; j++) secp256k1_fe_sqr(&x6, &x6);\n+    x6 = x3;\n+    for (j=0; j<3; j++) secp256k1_fe_sqr(&x6, &x6);\n     secp256k1_fe_mul(&x6, &x6, &x3);\n \n-    secp256k1_fe_t x9 = x6;\n-    for (int j=0; j<3; j++) secp256k1_fe_sqr(&x9, &x9);\n+    x9 = x6;\n+    for (j=0; j<3; j++) secp256k1_fe_sqr(&x9, &x9);\n     secp256k1_fe_mul(&x9, &x9, &x3);\n \n-    secp256k1_fe_t x11 = x9;\n-    for (int j=0; j<2; j++) secp256k1_fe_sqr(&x11, &x11);\n+    x11 = x9;\n+    for (j=0; j<2; j++) secp256k1_fe_sqr(&x11, &x11);\n     secp256k1_fe_mul(&x11, &x11, &x2);\n \n-    secp256k1_fe_t x22 = x11;\n-    for (int j=0; j<11; j++) secp256k1_fe_sqr(&x22, &x22);\n+    x22 = x11;\n+    for (j=0; j<11; j++) secp256k1_fe_sqr(&x22, &x22);\n     secp256k1_fe_mul(&x22, &x22, &x11);\n \n-    secp256k1_fe_t x44 = x22;\n-    for (int j=0; j<22; j++) secp256k1_fe_sqr(&x44, &x44);\n+    x44 = x22;\n+    for (j=0; j<22; j++) secp256k1_fe_sqr(&x44, &x44);\n     secp256k1_fe_mul(&x44, &x44, &x22);\n \n-    secp256k1_fe_t x88 = x44;\n-    for (int j=0; j<44; j++) secp256k1_fe_sqr(&x88, &x88);\n+    x88 = x44;\n+    for (j=0; j<44; j++) secp256k1_fe_sqr(&x88, &x88);\n     secp256k1_fe_mul(&x88, &x88, &x44);\n \n-    secp256k1_fe_t x176 = x88;\n-    for (int j=0; j<88; j++) secp256k1_fe_sqr(&x176, &x176);\n+    x176 = x88;\n+    for (j=0; j<88; j++) secp256k1_fe_sqr(&x176, &x176);\n     secp256k1_fe_mul(&x176, &x176, &x88);\n \n-    secp256k1_fe_t x220 = x176;\n-    for (int j=0; j<44; j++) secp256k1_fe_sqr(&x220, &x220);\n+    x220 = x176;\n+    for (j=0; j<44; j++) secp256k1_fe_sqr(&x220, &x220);\n     secp256k1_fe_mul(&x220, &x220, &x44);\n \n-    secp256k1_fe_t x223 = x220;\n-    for (int j=0; j<3; j++) secp256k1_fe_sqr(&x223, &x223);\n+    x223 = x220;\n+    for (j=0; j<3; j++) secp256k1_fe_sqr(&x223, &x223);\n     secp256k1_fe_mul(&x223, &x223, &x3);\n \n     /* The final result is then assembled using a sliding window over the blocks. */\n \n-    secp256k1_fe_t t1 = x223;\n-    for (int j=0; j<23; j++) secp256k1_fe_sqr(&t1, &t1);\n+    t1 = x223;\n+    for (j=0; j<23; j++) secp256k1_fe_sqr(&t1, &t1);\n     secp256k1_fe_mul(&t1, &t1, &x22);\n-    for (int j=0; j<5; j++) secp256k1_fe_sqr(&t1, &t1);\n+    for (j=0; j<5; j++) secp256k1_fe_sqr(&t1, &t1);\n     secp256k1_fe_mul(&t1, &t1, a);\n-    for (int j=0; j<3; j++) secp256k1_fe_sqr(&t1, &t1);\n+    for (j=0; j<3; j++) secp256k1_fe_sqr(&t1, &t1);\n     secp256k1_fe_mul(&t1, &t1, &x2);\n-    for (int j=0; j<2; j++) secp256k1_fe_sqr(&t1, &t1);\n+    for (j=0; j<2; j++) secp256k1_fe_sqr(&t1, &t1);\n     secp256k1_fe_mul(r, a, &t1);\n }\n \n static void secp256k1_fe_inv_var(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n #if defined(USE_FIELD_INV_BUILTIN)\n     secp256k1_fe_inv(r, a);\n #elif defined(USE_FIELD_INV_NUM)\n+    secp256k1_num_t n, m;\n+    /* secp256k1 field prime, value p defined in \"Standards for Efficient Cryptography\" (SEC2) 2.7.1. */\n+    static const unsigned char prime[32] = {\n+        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n+        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n+        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n+        0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFC,0x2F\n+    };\n     unsigned char b[32];\n     secp256k1_fe_t c = *a;\n     secp256k1_fe_normalize_var(&c);\n     secp256k1_fe_get_b32(b, &c);\n-    secp256k1_num_t n;\n     secp256k1_num_set_bin(&n, b, 32);\n-    secp256k1_num_mod_inverse(&n, &n, &secp256k1_fe_consts->p);\n+    secp256k1_num_set_bin(&m, prime, 32);\n+    secp256k1_num_mod_inverse(&n, &n, &m);\n     secp256k1_num_get_bin(b, 32, &n);\n     VERIFY_CHECK(secp256k1_fe_set_b32(r, b));\n #else\n #error \"Please select field inverse implementation\"\n #endif\n }\n \n-static void secp256k1_fe_inv_all_var(size_t len, secp256k1_fe_t r[len], const secp256k1_fe_t a[len]) {\n+static void secp256k1_fe_inv_all_var(size_t len, secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n+    secp256k1_fe_t u;\n+    size_t i;\n     if (len < 1)\n         return;\n \n     VERIFY_CHECK((r + len <= a) || (a + len <= r));\n \n     r[0] = a[0];\n \n-    size_t i = 0;\n+    i = 0;\n     while (++i < len) {\n         secp256k1_fe_mul(&r[i], &r[i - 1], &a[i]);\n     }\n \n-    secp256k1_fe_t u; secp256k1_fe_inv_var(&u, &r[--i]);\n+    secp256k1_fe_inv_var(&u, &r[--i]);\n \n     while (i > 0) {\n         int j = i--;\n@@ -244,32 +211,4 @@ static void secp256k1_fe_inv_all_var(size_t len, secp256k1_fe_t r[len], const se\n     r[0] = u;\n }\n \n-static void secp256k1_fe_start(void) {\n-#ifndef USE_NUM_NONE\n-    static const unsigned char secp256k1_fe_consts_p[] = {\n-        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n-        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n-        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n-        0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFC,0x2F\n-    };\n-#endif\n-    if (secp256k1_fe_consts == NULL) {\n-        secp256k1_fe_inner_start();\n-        secp256k1_fe_consts_t *ret = (secp256k1_fe_consts_t*)checked_malloc(sizeof(secp256k1_fe_consts_t));\n-#ifndef USE_NUM_NONE\n-        secp256k1_num_set_bin(&ret->p, secp256k1_fe_consts_p, sizeof(secp256k1_fe_consts_p));\n-#endif\n-        secp256k1_fe_consts = ret;\n-    }\n-}\n-\n-static void secp256k1_fe_stop(void) {\n-    if (secp256k1_fe_consts != NULL) {\n-        secp256k1_fe_consts_t *c = (secp256k1_fe_consts_t*)secp256k1_fe_consts;\n-        free((void*)c);\n-        secp256k1_fe_consts = NULL;\n-        secp256k1_fe_inner_stop();\n-    }\n-}\n-\n #endif"
      },
      {
        "sha": "d1e58349096847ab32988313fda39703d685105d",
        "filename": "src/secp256k1/src/group.h",
        "status": "modified",
        "additions": 20,
        "deletions": 22,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/group.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/group.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/group.h?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -17,6 +17,9 @@ typedef struct {\n     int infinity; /* whether this represents the point at infinity */\n } secp256k1_ge_t;\n \n+#define SECP256K1_GE_CONST(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {SECP256K1_FE_CONST((a),(b),(c),(d),(e),(f),(g),(h)), SECP256K1_FE_CONST((i),(j),(k),(l),(m),(n),(o),(p)), 0}\n+#define SECP256K1_GE_CONST_INFINITY {SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 0), SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 0), 1}\n+\n /** A group element of the secp256k1 curve, in jacobian coordinates. */\n typedef struct {\n     secp256k1_fe_t x; /* actual X: x/z^2 */\n@@ -25,23 +28,15 @@ typedef struct {\n     int infinity; /* whether this represents the point at infinity */\n } secp256k1_gej_t;\n \n-/** Global constants related to the group */\n-typedef struct {\n-    secp256k1_ge_t g; /* the generator point */\n-\n-#ifdef USE_ENDOMORPHISM\n-    /* constants related to secp256k1's efficiently computable endomorphism */\n-    secp256k1_fe_t beta;\n-#endif\n-} secp256k1_ge_consts_t;\n-\n-static const secp256k1_ge_consts_t *secp256k1_ge_consts = NULL;\n+#define SECP256K1_GEJ_CONST(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {SECP256K1_FE_CONST((a),(b),(c),(d),(e),(f),(g),(h)), SECP256K1_FE_CONST((i),(j),(k),(l),(m),(n),(o),(p)), SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 1), 0}\n+#define SECP256K1_GEJ_CONST_INFINITY {SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 0), SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 0), SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 0), 1}\n \n-/** Initialize the group module. */\n-static void secp256k1_ge_start(void);\n+typedef struct {\n+    secp256k1_fe_storage_t x;\n+    secp256k1_fe_storage_t y;\n+} secp256k1_ge_storage_t;\n \n-/** De-initialize the group module. */\n-static void secp256k1_ge_stop(void);\n+#define SECP256K1_GE_STORAGE_CONST(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {SECP256K1_FE_STORAGE_CONST((a),(b),(c),(d),(e),(f),(g),(h)), SECP256K1_FE_STORAGE_CONST((i),(j),(k),(l),(m),(n),(o),(p))}\n \n /** Set a group element equal to the point at infinity */\n static void secp256k1_ge_set_infinity(secp256k1_ge_t *r);\n@@ -61,14 +56,11 @@ static int secp256k1_ge_is_valid_var(const secp256k1_ge_t *a);\n \n static void secp256k1_ge_neg(secp256k1_ge_t *r, const secp256k1_ge_t *a);\n \n-/** Get a hex representation of a point. *rlen will be overwritten with the real length. */\n-static void secp256k1_ge_get_hex(char *r, int *rlen, const secp256k1_ge_t *a);\n-\n /** Set a group element equal to another which is given in jacobian coordinates */\n static void secp256k1_ge_set_gej(secp256k1_ge_t *r, secp256k1_gej_t *a);\n \n /** Set a batch of group elements equal to the inputs given in jacobian coordinates */\n-static void secp256k1_ge_set_all_gej_var(size_t len, secp256k1_ge_t r[len], const secp256k1_gej_t a[len]);\n+static void secp256k1_ge_set_all_gej_var(size_t len, secp256k1_ge_t *r, const secp256k1_gej_t *a);\n \n \n /** Set a group element (jacobian) equal to the point at infinity. */\n@@ -103,9 +95,6 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n     guarantee, and b is allowed to be infinity. */\n static void secp256k1_gej_add_ge_var(secp256k1_gej_t *r, const secp256k1_gej_t *a, const secp256k1_ge_t *b);\n \n-/** Get a hex representation of a point. *rlen will be overwritten with the real length. */\n-static void secp256k1_gej_get_hex(char *r, int *rlen, const secp256k1_gej_t *a);\n-\n #ifdef USE_ENDOMORPHISM\n /** Set r to be equal to lambda times a, where lambda is chosen in a way such that this is very fast. */\n static void secp256k1_gej_mul_lambda(secp256k1_gej_t *r, const secp256k1_gej_t *a);\n@@ -117,4 +106,13 @@ static void secp256k1_gej_clear(secp256k1_gej_t *r);\n /** Clear a secp256k1_ge_t to prevent leaking sensitive information. */\n static void secp256k1_ge_clear(secp256k1_ge_t *r);\n \n+/** Convert a group element to the storage type. */\n+static void secp256k1_ge_to_storage(secp256k1_ge_storage_t *r, const secp256k1_ge_t*);\n+\n+/** Convert a group element back from the storage type. */\n+static void secp256k1_ge_from_storage(secp256k1_ge_t *r, const secp256k1_ge_storage_t*);\n+\n+/** If flag is true, set *r equal to *a; otherwise leave it. Constant-time. */\n+static void secp256k1_ge_storage_cmov(secp256k1_ge_storage_t *r, const secp256k1_ge_storage_t *a, int flag);\n+\n #endif"
      },
      {
        "sha": "8d8c359c5a46daa7d0f4b8dbdc2c177284335d5e",
        "filename": "src/secp256k1/src/group_impl.h",
        "status": "modified",
        "additions": 116,
        "deletions": 134,
        "changes": 250,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/group_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/group_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/group_impl.h?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -13,6 +13,16 @@\n #include \"field.h\"\n #include \"group.h\"\n \n+/** Generator for secp256k1, value 'g' defined in\n+ *  \"Standards for Efficient Cryptography\" (SEC2) 2.7.1.\n+ */\n+static const secp256k1_ge_t secp256k1_ge_const_g = SECP256K1_GE_CONST(\n+    0x79BE667EUL, 0xF9DCBBACUL, 0x55A06295UL, 0xCE870B07UL,\n+    0x029BFCDBUL, 0x2DCE28D9UL, 0x59F2815BUL, 0x16F81798UL,\n+    0x483ADA77UL, 0x26A3C465UL, 0x5DA4FBFCUL, 0x0E1108A8UL,\n+    0xFD17B448UL, 0xA6855419UL, 0x9C47D08FUL, 0xFB10D4B8UL\n+);\n+\n static void secp256k1_ge_set_infinity(secp256k1_ge_t *r) {\n     r->infinity = 1;\n }\n@@ -33,32 +43,12 @@ static void secp256k1_ge_neg(secp256k1_ge_t *r, const secp256k1_ge_t *a) {\n     secp256k1_fe_negate(&r->y, &r->y, 1);\n }\n \n-static void secp256k1_ge_get_hex(char *r, int *rlen, const secp256k1_ge_t *a) {\n-    char cx[65]; int lx=65;\n-    char cy[65]; int ly=65;\n-    secp256k1_fe_get_hex(cx, &lx, &a->x);\n-    secp256k1_fe_get_hex(cy, &ly, &a->y);\n-    lx = strlen(cx);\n-    ly = strlen(cy);\n-    int len = lx + ly + 3 + 1;\n-    if (*rlen < len) {\n-        *rlen = len;\n-        return;\n-    }\n-    *rlen = len;\n-    r[0] = '(';\n-    memcpy(r+1, cx, lx);\n-    r[1+lx] = ',';\n-    memcpy(r+2+lx, cy, ly);\n-    r[2+lx+ly] = ')';\n-    r[3+lx+ly] = 0;\n-}\n-\n static void secp256k1_ge_set_gej(secp256k1_ge_t *r, secp256k1_gej_t *a) {\n+    secp256k1_fe_t z2, z3;\n     r->infinity = a->infinity;\n     secp256k1_fe_inv(&a->z, &a->z);\n-    secp256k1_fe_t z2; secp256k1_fe_sqr(&z2, &a->z);\n-    secp256k1_fe_t z3; secp256k1_fe_mul(&z3, &a->z, &z2);\n+    secp256k1_fe_sqr(&z2, &a->z);\n+    secp256k1_fe_mul(&z3, &a->z, &z2);\n     secp256k1_fe_mul(&a->x, &a->x, &z2);\n     secp256k1_fe_mul(&a->y, &a->y, &z3);\n     secp256k1_fe_set_int(&a->z, 1);\n@@ -67,40 +57,45 @@ static void secp256k1_ge_set_gej(secp256k1_ge_t *r, secp256k1_gej_t *a) {\n }\n \n static void secp256k1_ge_set_gej_var(secp256k1_ge_t *r, secp256k1_gej_t *a) {\n+    secp256k1_fe_t z2, z3;\n     r->infinity = a->infinity;\n     if (a->infinity) {\n         return;\n     }\n     secp256k1_fe_inv_var(&a->z, &a->z);\n-    secp256k1_fe_t z2; secp256k1_fe_sqr(&z2, &a->z);\n-    secp256k1_fe_t z3; secp256k1_fe_mul(&z3, &a->z, &z2);\n+    secp256k1_fe_sqr(&z2, &a->z);\n+    secp256k1_fe_mul(&z3, &a->z, &z2);\n     secp256k1_fe_mul(&a->x, &a->x, &z2);\n     secp256k1_fe_mul(&a->y, &a->y, &z3);\n     secp256k1_fe_set_int(&a->z, 1);\n     r->x = a->x;\n     r->y = a->y;\n }\n \n-static void secp256k1_ge_set_all_gej_var(size_t len, secp256k1_ge_t r[len], const secp256k1_gej_t a[len]) {\n+static void secp256k1_ge_set_all_gej_var(size_t len, secp256k1_ge_t *r, const secp256k1_gej_t *a) {\n+    secp256k1_fe_t *az;\n+    secp256k1_fe_t *azi;\n+    size_t i;\n     size_t count = 0;\n-    secp256k1_fe_t *az = checked_malloc(sizeof(secp256k1_fe_t) * len);\n-    for (size_t i=0; i<len; i++) {\n+    az = checked_malloc(sizeof(secp256k1_fe_t) * len);\n+    for (i = 0; i < len; i++) {\n         if (!a[i].infinity) {\n             az[count++] = a[i].z;\n         }\n     }\n \n-    secp256k1_fe_t *azi = checked_malloc(sizeof(secp256k1_fe_t) * count);\n+    azi = checked_malloc(sizeof(secp256k1_fe_t) * count);\n     secp256k1_fe_inv_all_var(count, azi, az);\n     free(az);\n \n     count = 0;\n-    for (size_t i=0; i<len; i++) {\n+    for (i = 0; i < len; i++) {\n         r[i].infinity = a[i].infinity;\n         if (!a[i].infinity) {\n+            secp256k1_fe_t zi2, zi3;\n             secp256k1_fe_t *zi = &azi[count++];\n-            secp256k1_fe_t zi2; secp256k1_fe_sqr(&zi2, zi);\n-            secp256k1_fe_t zi3; secp256k1_fe_mul(&zi3, &zi2, zi);\n+            secp256k1_fe_sqr(&zi2, zi);\n+            secp256k1_fe_mul(&zi3, &zi2, zi);\n             secp256k1_fe_mul(&r[i].x, &a[i].x, &zi2);\n             secp256k1_fe_mul(&r[i].y, &a[i].y, &zi3);\n         }\n@@ -136,11 +131,12 @@ static void secp256k1_ge_clear(secp256k1_ge_t *r) {\n }\n \n static int secp256k1_ge_set_xo_var(secp256k1_ge_t *r, const secp256k1_fe_t *x, int odd) {\n+    secp256k1_fe_t x2, x3, c;\n     r->x = *x;\n-    secp256k1_fe_t x2; secp256k1_fe_sqr(&x2, x);\n-    secp256k1_fe_t x3; secp256k1_fe_mul(&x3, x, &x2);\n+    secp256k1_fe_sqr(&x2, x);\n+    secp256k1_fe_mul(&x3, x, &x2);\n     r->infinity = 0;\n-    secp256k1_fe_t c; secp256k1_fe_set_int(&c, 7);\n+    secp256k1_fe_set_int(&c, 7);\n     secp256k1_fe_add(&c, &x3);\n     if (!secp256k1_fe_sqrt_var(&r->y, &c))\n         return 0;\n@@ -158,9 +154,10 @@ static void secp256k1_gej_set_ge(secp256k1_gej_t *r, const secp256k1_ge_t *a) {\n }\n \n static int secp256k1_gej_eq_x_var(const secp256k1_fe_t *x, const secp256k1_gej_t *a) {\n+    secp256k1_fe_t r, r2;\n     VERIFY_CHECK(!a->infinity);\n-    secp256k1_fe_t r; secp256k1_fe_sqr(&r, &a->z); secp256k1_fe_mul(&r, &r, x);\n-    secp256k1_fe_t r2 = a->x; secp256k1_fe_normalize_weak(&r2);\n+    secp256k1_fe_sqr(&r, &a->z); secp256k1_fe_mul(&r, &r, x);\n+    r2 = a->x; secp256k1_fe_normalize_weak(&r2);\n     return secp256k1_fe_equal_var(&r, &r2);\n }\n \n@@ -178,45 +175,49 @@ static int secp256k1_gej_is_infinity(const secp256k1_gej_t *a) {\n }\n \n static int secp256k1_gej_is_valid_var(const secp256k1_gej_t *a) {\n+    secp256k1_fe_t y2, x3, z2, z6;\n     if (a->infinity)\n         return 0;\n     /** y^2 = x^3 + 7\n      *  (Y/Z^3)^2 = (X/Z^2)^3 + 7\n      *  Y^2 / Z^6 = X^3 / Z^6 + 7\n      *  Y^2 = X^3 + 7*Z^6\n      */\n-    secp256k1_fe_t y2; secp256k1_fe_sqr(&y2, &a->y);\n-    secp256k1_fe_t x3; secp256k1_fe_sqr(&x3, &a->x); secp256k1_fe_mul(&x3, &x3, &a->x);\n-    secp256k1_fe_t z2; secp256k1_fe_sqr(&z2, &a->z);\n-    secp256k1_fe_t z6; secp256k1_fe_sqr(&z6, &z2); secp256k1_fe_mul(&z6, &z6, &z2);\n+    secp256k1_fe_sqr(&y2, &a->y);\n+    secp256k1_fe_sqr(&x3, &a->x); secp256k1_fe_mul(&x3, &x3, &a->x);\n+    secp256k1_fe_sqr(&z2, &a->z);\n+    secp256k1_fe_sqr(&z6, &z2); secp256k1_fe_mul(&z6, &z6, &z2);\n     secp256k1_fe_mul_int(&z6, 7);\n     secp256k1_fe_add(&x3, &z6);\n     secp256k1_fe_normalize_weak(&x3);\n     return secp256k1_fe_equal_var(&y2, &x3);\n }\n \n static int secp256k1_ge_is_valid_var(const secp256k1_ge_t *a) {\n+    secp256k1_fe_t y2, x3, c;\n     if (a->infinity)\n         return 0;\n     /* y^2 = x^3 + 7 */\n-    secp256k1_fe_t y2; secp256k1_fe_sqr(&y2, &a->y);\n-    secp256k1_fe_t x3; secp256k1_fe_sqr(&x3, &a->x); secp256k1_fe_mul(&x3, &x3, &a->x);\n-    secp256k1_fe_t c; secp256k1_fe_set_int(&c, 7);\n+    secp256k1_fe_sqr(&y2, &a->y);\n+    secp256k1_fe_sqr(&x3, &a->x); secp256k1_fe_mul(&x3, &x3, &a->x);\n+    secp256k1_fe_set_int(&c, 7);\n     secp256k1_fe_add(&x3, &c);\n     secp256k1_fe_normalize_weak(&x3);\n     return secp256k1_fe_equal_var(&y2, &x3);\n }\n \n static void secp256k1_gej_double_var(secp256k1_gej_t *r, const secp256k1_gej_t *a) {\n-    // For secp256k1, 2Q is infinity if and only if Q is infinity. This is because if 2Q = infinity,\n-    // Q must equal -Q, or that Q.y == -(Q.y), or Q.y is 0. For a point on y^2 = x^3 + 7 to have\n-    // y=0, x^3 must be -7 mod p. However, -7 has no cube root mod p.\n+    /* Operations: 3 mul, 4 sqr, 0 normalize, 12 mul_int/add/negate */\n+    secp256k1_fe_t t1,t2,t3,t4;\n+    /** For secp256k1, 2Q is infinity if and only if Q is infinity. This is because if 2Q = infinity,\n+     *  Q must equal -Q, or that Q.y == -(Q.y), or Q.y is 0. For a point on y^2 = x^3 + 7 to have\n+     *  y=0, x^3 must be -7 mod p. However, -7 has no cube root mod p.\n+     */\n     r->infinity = a->infinity;\n     if (r->infinity) {\n         return;\n     }\n \n-    secp256k1_fe_t t1,t2,t3,t4;\n     secp256k1_fe_mul(&r->z, &a->z, &a->y);\n     secp256k1_fe_mul_int(&r->z, 2);       /* Z' = 2*Y*Z (2) */\n     secp256k1_fe_sqr(&t1, &a->x);\n@@ -240,6 +241,8 @@ static void secp256k1_gej_double_var(secp256k1_gej_t *r, const secp256k1_gej_t *\n }\n \n static void secp256k1_gej_add_var(secp256k1_gej_t *r, const secp256k1_gej_t *a, const secp256k1_gej_t *b) {\n+    /* Operations: 12 mul, 4 sqr, 2 normalize, 12 mul_int/add/negate */\n+    secp256k1_fe_t z22, z12, u1, u2, s1, s2, h, i, i2, h2, h3, t;\n     if (a->infinity) {\n         *r = *b;\n         return;\n@@ -249,14 +252,14 @@ static void secp256k1_gej_add_var(secp256k1_gej_t *r, const secp256k1_gej_t *a,\n         return;\n     }\n     r->infinity = 0;\n-    secp256k1_fe_t z22; secp256k1_fe_sqr(&z22, &b->z);\n-    secp256k1_fe_t z12; secp256k1_fe_sqr(&z12, &a->z);\n-    secp256k1_fe_t u1; secp256k1_fe_mul(&u1, &a->x, &z22);\n-    secp256k1_fe_t u2; secp256k1_fe_mul(&u2, &b->x, &z12);\n-    secp256k1_fe_t s1; secp256k1_fe_mul(&s1, &a->y, &z22); secp256k1_fe_mul(&s1, &s1, &b->z);\n-    secp256k1_fe_t s2; secp256k1_fe_mul(&s2, &b->y, &z12); secp256k1_fe_mul(&s2, &s2, &a->z);\n-    secp256k1_fe_t h; secp256k1_fe_negate(&h, &u1, 1); secp256k1_fe_add(&h, &u2);\n-    secp256k1_fe_t i; secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);\n+    secp256k1_fe_sqr(&z22, &b->z);\n+    secp256k1_fe_sqr(&z12, &a->z);\n+    secp256k1_fe_mul(&u1, &a->x, &z22);\n+    secp256k1_fe_mul(&u2, &b->x, &z12);\n+    secp256k1_fe_mul(&s1, &a->y, &z22); secp256k1_fe_mul(&s1, &s1, &b->z);\n+    secp256k1_fe_mul(&s2, &b->y, &z12); secp256k1_fe_mul(&s2, &s2, &a->z);\n+    secp256k1_fe_negate(&h, &u1, 1); secp256k1_fe_add(&h, &u2);\n+    secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);\n     if (secp256k1_fe_normalizes_to_zero_var(&h)) {\n         if (secp256k1_fe_normalizes_to_zero_var(&i)) {\n             secp256k1_gej_double_var(r, a);\n@@ -265,18 +268,20 @@ static void secp256k1_gej_add_var(secp256k1_gej_t *r, const secp256k1_gej_t *a,\n         }\n         return;\n     }\n-    secp256k1_fe_t i2; secp256k1_fe_sqr(&i2, &i);\n-    secp256k1_fe_t h2; secp256k1_fe_sqr(&h2, &h);\n-    secp256k1_fe_t h3; secp256k1_fe_mul(&h3, &h, &h2);\n+    secp256k1_fe_sqr(&i2, &i);\n+    secp256k1_fe_sqr(&h2, &h);\n+    secp256k1_fe_mul(&h3, &h, &h2);\n     secp256k1_fe_mul(&r->z, &a->z, &b->z); secp256k1_fe_mul(&r->z, &r->z, &h);\n-    secp256k1_fe_t t; secp256k1_fe_mul(&t, &u1, &h2);\n+    secp256k1_fe_mul(&t, &u1, &h2);\n     r->x = t; secp256k1_fe_mul_int(&r->x, 2); secp256k1_fe_add(&r->x, &h3); secp256k1_fe_negate(&r->x, &r->x, 3); secp256k1_fe_add(&r->x, &i2);\n     secp256k1_fe_negate(&r->y, &r->x, 5); secp256k1_fe_add(&r->y, &t); secp256k1_fe_mul(&r->y, &r->y, &i);\n     secp256k1_fe_mul(&h3, &h3, &s1); secp256k1_fe_negate(&h3, &h3, 1);\n     secp256k1_fe_add(&r->y, &h3);\n }\n \n static void secp256k1_gej_add_ge_var(secp256k1_gej_t *r, const secp256k1_gej_t *a, const secp256k1_ge_t *b) {\n+    /* 8 mul, 3 sqr, 4 normalize, 12 mul_int/add/negate */\n+    secp256k1_fe_t z12, u1, u2, s1, s2, h, i, i2, h2, h3, t;\n     if (a->infinity) {\n         r->infinity = b->infinity;\n         r->x = b->x;\n@@ -289,13 +294,13 @@ static void secp256k1_gej_add_ge_var(secp256k1_gej_t *r, const secp256k1_gej_t *\n         return;\n     }\n     r->infinity = 0;\n-    secp256k1_fe_t z12; secp256k1_fe_sqr(&z12, &a->z);\n-    secp256k1_fe_t u1 = a->x; secp256k1_fe_normalize_weak(&u1);\n-    secp256k1_fe_t u2; secp256k1_fe_mul(&u2, &b->x, &z12);\n-    secp256k1_fe_t s1 = a->y; secp256k1_fe_normalize_weak(&s1);\n-    secp256k1_fe_t s2; secp256k1_fe_mul(&s2, &b->y, &z12); secp256k1_fe_mul(&s2, &s2, &a->z);\n-    secp256k1_fe_t h; secp256k1_fe_negate(&h, &u1, 1); secp256k1_fe_add(&h, &u2);\n-    secp256k1_fe_t i; secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);\n+    secp256k1_fe_sqr(&z12, &a->z);\n+    u1 = a->x; secp256k1_fe_normalize_weak(&u1);\n+    secp256k1_fe_mul(&u2, &b->x, &z12);\n+    s1 = a->y; secp256k1_fe_normalize_weak(&s1);\n+    secp256k1_fe_mul(&s2, &b->y, &z12); secp256k1_fe_mul(&s2, &s2, &a->z);\n+    secp256k1_fe_negate(&h, &u1, 1); secp256k1_fe_add(&h, &u2);\n+    secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);\n     if (secp256k1_fe_normalizes_to_zero_var(&h)) {\n         if (secp256k1_fe_normalizes_to_zero_var(&i)) {\n             secp256k1_gej_double_var(r, a);\n@@ -304,18 +309,21 @@ static void secp256k1_gej_add_ge_var(secp256k1_gej_t *r, const secp256k1_gej_t *\n         }\n         return;\n     }\n-    secp256k1_fe_t i2; secp256k1_fe_sqr(&i2, &i);\n-    secp256k1_fe_t h2; secp256k1_fe_sqr(&h2, &h);\n-    secp256k1_fe_t h3; secp256k1_fe_mul(&h3, &h, &h2);\n+    secp256k1_fe_sqr(&i2, &i);\n+    secp256k1_fe_sqr(&h2, &h);\n+    secp256k1_fe_mul(&h3, &h, &h2);\n     r->z = a->z; secp256k1_fe_mul(&r->z, &r->z, &h);\n-    secp256k1_fe_t t; secp256k1_fe_mul(&t, &u1, &h2);\n+    secp256k1_fe_mul(&t, &u1, &h2);\n     r->x = t; secp256k1_fe_mul_int(&r->x, 2); secp256k1_fe_add(&r->x, &h3); secp256k1_fe_negate(&r->x, &r->x, 3); secp256k1_fe_add(&r->x, &i2);\n     secp256k1_fe_negate(&r->y, &r->x, 5); secp256k1_fe_add(&r->y, &t); secp256k1_fe_mul(&r->y, &r->y, &i);\n     secp256k1_fe_mul(&h3, &h3, &s1); secp256k1_fe_negate(&h3, &h3, 1);\n     secp256k1_fe_add(&r->y, &h3);\n }\n \n static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, const secp256k1_ge_t *b) {\n+    /* Operations: 7 mul, 5 sqr, 5 normalize, 19 mul_int/add/negate */\n+    secp256k1_fe_t zz, u1, u2, s1, s2, z, t, m, n, q, rr;\n+    int infinity;\n     VERIFY_CHECK(!b->infinity);\n     VERIFY_CHECK(a->infinity == 0 || a->infinity == 1);\n \n@@ -341,24 +349,24 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n      *  (Note that the paper uses xi = Xi / Zi and yi = Yi / Zi instead.)\n      */\n \n-    secp256k1_fe_t zz; secp256k1_fe_sqr(&zz, &a->z);                /* z = Z1^2 */\n-    secp256k1_fe_t u1 = a->x; secp256k1_fe_normalize_weak(&u1);     /* u1 = U1 = X1*Z2^2 (1) */\n-    secp256k1_fe_t u2; secp256k1_fe_mul(&u2, &b->x, &zz);           /* u2 = U2 = X2*Z1^2 (1) */\n-    secp256k1_fe_t s1 = a->y; secp256k1_fe_normalize_weak(&s1);     /* s1 = S1 = Y1*Z2^3 (1) */\n-    secp256k1_fe_t s2; secp256k1_fe_mul(&s2, &b->y, &zz);           /* s2 = Y2*Z2^2 (1) */\n-    secp256k1_fe_mul(&s2, &s2, &a->z);                              /* s2 = S2 = Y2*Z1^3 (1) */\n-    secp256k1_fe_t z = a->z;                                        /* z = Z = Z1*Z2 (8) */\n-    secp256k1_fe_t t = u1; secp256k1_fe_add(&t, &u2);               /* t = T = U1+U2 (2) */\n-    secp256k1_fe_t m = s1; secp256k1_fe_add(&m, &s2);               /* m = M = S1+S2 (2) */\n-    secp256k1_fe_t n; secp256k1_fe_sqr(&n, &m);                     /* n = M^2 (1) */\n-    secp256k1_fe_t q; secp256k1_fe_mul(&q, &n, &t);                 /* q = Q = T*M^2 (1) */\n-    secp256k1_fe_sqr(&n, &n);                                       /* n = M^4 (1) */\n-    secp256k1_fe_t rr; secp256k1_fe_sqr(&rr, &t);                   /* rr = T^2 (1) */\n+    secp256k1_fe_sqr(&zz, &a->z);                       /* z = Z1^2 */\n+    u1 = a->x; secp256k1_fe_normalize_weak(&u1);        /* u1 = U1 = X1*Z2^2 (1) */\n+    secp256k1_fe_mul(&u2, &b->x, &zz);                  /* u2 = U2 = X2*Z1^2 (1) */\n+    s1 = a->y; secp256k1_fe_normalize_weak(&s1);        /* s1 = S1 = Y1*Z2^3 (1) */\n+    secp256k1_fe_mul(&s2, &b->y, &zz);                  /* s2 = Y2*Z2^2 (1) */\n+    secp256k1_fe_mul(&s2, &s2, &a->z);                  /* s2 = S2 = Y2*Z1^3 (1) */\n+    z = a->z;                                           /* z = Z = Z1*Z2 (8) */\n+    t = u1; secp256k1_fe_add(&t, &u2);                  /* t = T = U1+U2 (2) */\n+    m = s1; secp256k1_fe_add(&m, &s2);                  /* m = M = S1+S2 (2) */\n+    secp256k1_fe_sqr(&n, &m);                           /* n = M^2 (1) */\n+    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*M^2 (1) */\n+    secp256k1_fe_sqr(&n, &n);                           /* n = M^4 (1) */\n+    secp256k1_fe_sqr(&rr, &t);                          /* rr = T^2 (1) */\n     secp256k1_fe_mul(&t, &u1, &u2); secp256k1_fe_negate(&t, &t, 1); /* t = -U1*U2 (2) */\n     secp256k1_fe_add(&rr, &t);                                      /* rr = R = T^2-U1*U2 (3) */\n     secp256k1_fe_sqr(&t, &rr);                                      /* t = R^2 (1) */\n     secp256k1_fe_mul(&r->z, &m, &z);                                /* r->z = M*Z (1) */\n-    int infinity = secp256k1_fe_normalizes_to_zero(&r->z) * (1 - a->infinity);\n+    infinity = secp256k1_fe_normalizes_to_zero(&r->z) * (1 - a->infinity);\n     secp256k1_fe_mul_int(&r->z, 2 * (1 - a->infinity)); /* r->z = Z3 = 2*M*Z (2) */\n     r->x = t;                                           /* r->x = R^2 (1) */\n     secp256k1_fe_negate(&q, &q, 1);                     /* q = -Q (2) */\n@@ -386,63 +394,37 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n     r->infinity = infinity;\n }\n \n+static void secp256k1_ge_to_storage(secp256k1_ge_storage_t *r, const secp256k1_ge_t *a) {\n+    secp256k1_fe_t x, y;\n+    VERIFY_CHECK(!a->infinity);\n+    x = a->x;\n+    secp256k1_fe_normalize(&x);\n+    y = a->y;\n+    secp256k1_fe_normalize(&y);\n+    secp256k1_fe_to_storage(&r->x, &x);\n+    secp256k1_fe_to_storage(&r->y, &y);\n+}\n \n+static void secp256k1_ge_from_storage(secp256k1_ge_t *r, const secp256k1_ge_storage_t *a) {\n+    secp256k1_fe_from_storage(&r->x, &a->x);\n+    secp256k1_fe_from_storage(&r->y, &a->y);\n+    r->infinity = 0;\n+}\n \n-static void secp256k1_gej_get_hex(char *r, int *rlen, const secp256k1_gej_t *a) {\n-    secp256k1_gej_t c = *a;\n-    secp256k1_ge_t t; secp256k1_ge_set_gej(&t, &c);\n-    secp256k1_ge_get_hex(r, rlen, &t);\n+static SECP256K1_INLINE void secp256k1_ge_storage_cmov(secp256k1_ge_storage_t *r, const secp256k1_ge_storage_t *a, int flag) {\n+    secp256k1_fe_storage_cmov(&r->x, &a->x, flag);\n+    secp256k1_fe_storage_cmov(&r->y, &a->y, flag);\n }\n \n #ifdef USE_ENDOMORPHISM\n static void secp256k1_gej_mul_lambda(secp256k1_gej_t *r, const secp256k1_gej_t *a) {\n-    const secp256k1_fe_t *beta = &secp256k1_ge_consts->beta;\n+    static const secp256k1_fe_t beta = SECP256K1_FE_CONST(\n+        0x7ae96a2bul, 0x657c0710ul, 0x6e64479eul, 0xac3434e9ul,\n+        0x9cf04975ul, 0x12f58995ul, 0xc1396c28ul, 0x719501eeul\n+    );\n     *r = *a;\n-    secp256k1_fe_mul(&r->x, &r->x, beta);\n+    secp256k1_fe_mul(&r->x, &r->x, &beta);\n }\n #endif\n \n-static void secp256k1_ge_start(void) {\n-    static const unsigned char secp256k1_ge_consts_g_x[] = {\n-        0x79,0xBE,0x66,0x7E,0xF9,0xDC,0xBB,0xAC,\n-        0x55,0xA0,0x62,0x95,0xCE,0x87,0x0B,0x07,\n-        0x02,0x9B,0xFC,0xDB,0x2D,0xCE,0x28,0xD9,\n-        0x59,0xF2,0x81,0x5B,0x16,0xF8,0x17,0x98\n-    };\n-    static const unsigned char secp256k1_ge_consts_g_y[] = {\n-        0x48,0x3A,0xDA,0x77,0x26,0xA3,0xC4,0x65,\n-        0x5D,0xA4,0xFB,0xFC,0x0E,0x11,0x08,0xA8,\n-        0xFD,0x17,0xB4,0x48,0xA6,0x85,0x54,0x19,\n-        0x9C,0x47,0xD0,0x8F,0xFB,0x10,0xD4,0xB8\n-    };\n-#ifdef USE_ENDOMORPHISM\n-    /* properties of secp256k1's efficiently computable endomorphism */\n-    static const unsigned char secp256k1_ge_consts_beta[] = {\n-        0x7a,0xe9,0x6a,0x2b,0x65,0x7c,0x07,0x10,\n-        0x6e,0x64,0x47,0x9e,0xac,0x34,0x34,0xe9,\n-        0x9c,0xf0,0x49,0x75,0x12,0xf5,0x89,0x95,\n-        0xc1,0x39,0x6c,0x28,0x71,0x95,0x01,0xee\n-    };\n-#endif\n-    if (secp256k1_ge_consts == NULL) {\n-        secp256k1_ge_consts_t *ret = (secp256k1_ge_consts_t*)checked_malloc(sizeof(secp256k1_ge_consts_t));\n-#ifdef USE_ENDOMORPHISM\n-        VERIFY_CHECK(secp256k1_fe_set_b32(&ret->beta, secp256k1_ge_consts_beta));\n-#endif\n-        secp256k1_fe_t g_x, g_y;\n-        VERIFY_CHECK(secp256k1_fe_set_b32(&g_x, secp256k1_ge_consts_g_x));\n-        VERIFY_CHECK(secp256k1_fe_set_b32(&g_y, secp256k1_ge_consts_g_y));\n-        secp256k1_ge_set_xy(&ret->g, &g_x, &g_y);\n-        secp256k1_ge_consts = ret;\n-    }\n-}\n-\n-static void secp256k1_ge_stop(void) {\n-    if (secp256k1_ge_consts != NULL) {\n-        secp256k1_ge_consts_t *c = (secp256k1_ge_consts_t*)secp256k1_ge_consts;\n-        free((void*)c);\n-        secp256k1_ge_consts = NULL;\n-    }\n-}\n-\n #endif"
      },
      {
        "sha": "843423d7f70ab6958ba5ef22d28fb92823d5e2eb",
        "filename": "src/secp256k1/src/hash.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/hash.h?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -12,7 +12,7 @@\n \n typedef struct {\n     uint32_t s[32];\n-    unsigned char buf[64];\n+    uint32_t buf[16]; /* In big endian */\n     size_t bytes;\n } secp256k1_sha256_t;\n \n@@ -34,7 +34,7 @@ typedef struct {\n     int retry;\n } secp256k1_rfc6979_hmac_sha256_t;\n \n-static void secp256k1_rfc6979_hmac_sha256_initialize(secp256k1_rfc6979_hmac_sha256_t *rng, const unsigned char *key, size_t keylen, const unsigned char *msg, size_t msglen);\n+static void secp256k1_rfc6979_hmac_sha256_initialize(secp256k1_rfc6979_hmac_sha256_t *rng, const unsigned char *key, size_t keylen, const unsigned char *msg, size_t msglen, const unsigned char *rnd, size_t rndlen);\n static void secp256k1_rfc6979_hmac_sha256_generate(secp256k1_rfc6979_hmac_sha256_t *rng, unsigned char *out, size_t outlen);\n static void secp256k1_rfc6979_hmac_sha256_finalize(secp256k1_rfc6979_hmac_sha256_t *rng);\n "
      },
      {
        "sha": "60fdbf771844ce1d2f7fa398e575763001980482",
        "filename": "src/secp256k1/src/hash_impl.h",
        "status": "modified",
        "additions": 56,
        "deletions": 61,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/hash_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/hash_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/hash_impl.h?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -11,6 +11,7 @@\n \n #include <stdlib.h>\n #include <stdint.h>\n+#include <string.h>\n \n #define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))\n #define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))\n@@ -26,8 +27,11 @@\n     (h) = t1 + t2; \\\n } while(0)\n \n-#define ReadBE32(p) (((uint32_t)((p)[0])) << 24 | ((uint32_t)((p)[1])) << 16 | ((uint32_t)((p)[2])) << 8 | ((uint32_t)((p)[3])))\n-#define WriteBE32(p, v) do { (p)[0] = (v) >> 24; (p)[1] = (v) >> 16; (p)[2] = (v) >> 8; (p)[3] = (v); } while(0)\n+#ifdef WORDS_BIGENDIAN\n+#define BE32(x) (x)\n+#else\n+#define BE32(p) ((((p) & 0xFF) << 24) | (((p) & 0xFF00) << 8) | (((p) & 0xFF0000) >> 8) | (((p) & 0xFF000000) >> 24))\n+#endif\n \n static void secp256k1_sha256_initialize(secp256k1_sha256_t *hash) {\n     hash->s[0] = 0x6a09e667ul;\n@@ -41,27 +45,27 @@ static void secp256k1_sha256_initialize(secp256k1_sha256_t *hash) {\n     hash->bytes = 0;\n }\n \n-/** Perform one SHA-256 transformation, processing a 64-byte chunk. */\n-static void secp256k1_sha256_transform(uint32_t* s, const unsigned char* chunk) {\n+/** Perform one SHA-256 transformation, processing 16 big endian 32-bit words. */\n+static void secp256k1_sha256_transform(uint32_t* s, const uint32_t* chunk) {\n     uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n     uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n \n-    Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = ReadBE32(chunk + 0));\n-    Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = ReadBE32(chunk + 4));\n-    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = ReadBE32(chunk + 8));\n-    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = ReadBE32(chunk + 12));\n-    Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = ReadBE32(chunk + 16));\n-    Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = ReadBE32(chunk + 20));\n-    Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = ReadBE32(chunk + 24));\n-    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = ReadBE32(chunk + 28));\n-    Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = ReadBE32(chunk + 32));\n-    Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = ReadBE32(chunk + 36));\n-    Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = ReadBE32(chunk + 40));\n-    Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = ReadBE32(chunk + 44));\n-    Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = ReadBE32(chunk + 48));\n-    Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = ReadBE32(chunk + 52));\n-    Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = ReadBE32(chunk + 56));\n-    Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = ReadBE32(chunk + 60));\n+    Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = BE32(chunk[0]));\n+    Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = BE32(chunk[1]));\n+    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = BE32(chunk[2]));\n+    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = BE32(chunk[3]));\n+    Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = BE32(chunk[4]));\n+    Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = BE32(chunk[5]));\n+    Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = BE32(chunk[6]));\n+    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = BE32(chunk[7]));\n+    Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = BE32(chunk[8]));\n+    Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = BE32(chunk[9]));\n+    Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = BE32(chunk[10]));\n+    Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = BE32(chunk[11]));\n+    Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = BE32(chunk[12]));\n+    Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = BE32(chunk[13]));\n+    Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = BE32(chunk[14]));\n+    Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = BE32(chunk[15]));\n \n     Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));\n     Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));\n@@ -125,55 +129,40 @@ static void secp256k1_sha256_transform(uint32_t* s, const unsigned char* chunk)\n }\n \n static void secp256k1_sha256_write(secp256k1_sha256_t *hash, const unsigned char *data, size_t len) {\n-    const unsigned char* end = data + len;\n-    size_t bufsize = hash->bytes % 64;\n-    if (bufsize && bufsize + len >= 64) {\n-        // Fill the buffer, and process it.\n-        memcpy(hash->buf + bufsize, data, 64 - bufsize);\n-        hash->bytes += 64 - bufsize;\n+    size_t bufsize = hash->bytes & 0x3F;\n+    hash->bytes += len;\n+    while (bufsize + len >= 64) {\n+        /* Fill the buffer, and process it. */\n+        memcpy(((unsigned char*)hash->buf) + bufsize, data, 64 - bufsize);\n         data += 64 - bufsize;\n+        len -= 64 - bufsize;\n         secp256k1_sha256_transform(hash->s, hash->buf);\n         bufsize = 0;\n     }\n-    while (end >= data + 64) {\n-        // Process full chunks directly from the source.\n-        secp256k1_sha256_transform(hash->s, data);\n-        hash->bytes += 64;\n-        data += 64;\n-    }\n-    if (end > data) {\n-        // Fill the buffer with what remains.\n-        memcpy(hash->buf + bufsize, data, end - data);\n-        hash->bytes += end - data;\n+    if (len) {\n+        /* Fill the buffer with what remains. */\n+        memcpy(((unsigned char*)hash->buf) + bufsize, data, len);\n     }\n }\n \n static void secp256k1_sha256_finalize(secp256k1_sha256_t *hash, unsigned char *out32) {\n     static const unsigned char pad[64] = {0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n-    unsigned char sizedesc[8];\n-    WriteBE32(sizedesc, hash->bytes >> 29);\n-    WriteBE32(sizedesc + 4, hash->bytes << 3);\n+    uint32_t sizedesc[2];\n+    uint32_t out[8];\n+    int i = 0;\n+    sizedesc[0] = BE32(hash->bytes >> 29);\n+    sizedesc[1] = BE32(hash->bytes << 3);\n     secp256k1_sha256_write(hash, pad, 1 + ((119 - (hash->bytes % 64)) % 64));\n-    secp256k1_sha256_write(hash, sizedesc, 8);\n-    WriteBE32(out32, hash->s[0]);\n-    hash->s[0] = 0;\n-    WriteBE32(out32 + 4, hash->s[1]);\n-    hash->s[1] = 0;\n-    WriteBE32(out32 + 8, hash->s[2]);\n-    hash->s[2] = 0;\n-    WriteBE32(out32 + 12, hash->s[3]);\n-    hash->s[3] = 0;\n-    WriteBE32(out32 + 16, hash->s[4]);\n-    hash->s[4] = 0;\n-    WriteBE32(out32 + 20, hash->s[5]);\n-    hash->s[5] = 0;\n-    WriteBE32(out32 + 24, hash->s[6]);\n-    hash->s[6] = 0;\n-    WriteBE32(out32 + 28, hash->s[7]);\n-    hash->s[7] = 0;\n+    secp256k1_sha256_write(hash, (const unsigned char*)sizedesc, 8);\n+    for (i = 0; i < 8; i++) {\n+        out[i] = BE32(hash->s[i]);\n+        hash->s[i] = 0;\n+    }\n+    memcpy(out32, (const unsigned char*)out, 32);\n }\n \n static void secp256k1_hmac_sha256_initialize(secp256k1_hmac_sha256_t *hash, const unsigned char *key, size_t keylen) {\n+    int n;\n     unsigned char rkey[64];\n     if (keylen <= 64) {\n         memcpy(rkey, key, keylen);\n@@ -187,12 +176,12 @@ static void secp256k1_hmac_sha256_initialize(secp256k1_hmac_sha256_t *hash, cons\n     }\n \n     secp256k1_sha256_initialize(&hash->outer);\n-    for (int n = 0; n < 64; n++)\n+    for (n = 0; n < 64; n++)\n         rkey[n] ^= 0x5c;\n     secp256k1_sha256_write(&hash->outer, rkey, 64);\n \n     secp256k1_sha256_initialize(&hash->inner);\n-    for (int n = 0; n < 64; n++)\n+    for (n = 0; n < 64; n++)\n         rkey[n] ^= 0x5c ^ 0x36;\n     secp256k1_sha256_write(&hash->inner, rkey, 64);\n     memset(rkey, 0, 64);\n@@ -211,19 +200,22 @@ static void secp256k1_hmac_sha256_finalize(secp256k1_hmac_sha256_t *hash, unsign\n }\n \n \n-static void secp256k1_rfc6979_hmac_sha256_initialize(secp256k1_rfc6979_hmac_sha256_t *rng, const unsigned char *key, size_t keylen, const unsigned char *msg, size_t msglen) {\n+static void secp256k1_rfc6979_hmac_sha256_initialize(secp256k1_rfc6979_hmac_sha256_t *rng, const unsigned char *key, size_t keylen, const unsigned char *msg, size_t msglen, const unsigned char *rnd, size_t rndlen) {\n+    secp256k1_hmac_sha256_t hmac;\n     static const unsigned char zero[1] = {0x00};\n     static const unsigned char one[1] = {0x01};\n \n     memset(rng->v, 0x01, 32);\n     memset(rng->k, 0x00, 32);\n \n-    secp256k1_hmac_sha256_t hmac;\n     secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n     secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n     secp256k1_hmac_sha256_write(&hmac, zero, 1);\n     secp256k1_hmac_sha256_write(&hmac, key, keylen);\n     secp256k1_hmac_sha256_write(&hmac, msg, msglen);\n+    if (rnd && rndlen) {\n+        secp256k1_hmac_sha256_write(&hmac, rnd, rndlen);\n+    }\n     secp256k1_hmac_sha256_finalize(&hmac, rng->k);\n     secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n     secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n@@ -234,6 +226,9 @@ static void secp256k1_rfc6979_hmac_sha256_initialize(secp256k1_rfc6979_hmac_sha2\n     secp256k1_hmac_sha256_write(&hmac, one, 1);\n     secp256k1_hmac_sha256_write(&hmac, key, keylen);\n     secp256k1_hmac_sha256_write(&hmac, msg, msglen);\n+    if (rnd && rndlen) {\n+        secp256k1_hmac_sha256_write(&hmac, rnd, rndlen);\n+    }\n     secp256k1_hmac_sha256_finalize(&hmac, rng->k);\n     secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n     secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n@@ -256,10 +251,10 @@ static void secp256k1_rfc6979_hmac_sha256_generate(secp256k1_rfc6979_hmac_sha256\n \n     while (outlen > 0) {\n         secp256k1_hmac_sha256_t hmac;\n+        int now = outlen;\n         secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n         secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n         secp256k1_hmac_sha256_finalize(&hmac, rng->v);\n-        int now = outlen;\n         if (now > 32) {\n             now = 32;\n         }"
      },
      {
        "sha": "3e4b92d3291faf097b890408d576c5fe54671da5",
        "filename": "src/secp256k1/src/num_gmp_impl.h",
        "status": "modified",
        "additions": 17,
        "deletions": 12,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/num_gmp_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/num_gmp_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/num_gmp_impl.h?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -29,10 +29,10 @@ static void secp256k1_num_copy(secp256k1_num_t *r, const secp256k1_num_t *a) {\n static void secp256k1_num_get_bin(unsigned char *r, unsigned int rlen, const secp256k1_num_t *a) {\n     unsigned char tmp[65];\n     int len = 0;\n+    int shift = 0;\n     if (a->limbs>1 || a->data[0] != 0) {\n         len = mpn_get_str(tmp, 256, (mp_limb_t*)a->data, a->limbs);\n     }\n-    int shift = 0;\n     while (shift < len && tmp[shift] == 0) shift++;\n     VERIFY_CHECK(len-shift <= (int)rlen);\n     memset(r, 0, rlen - len + shift);\n@@ -43,9 +43,10 @@ static void secp256k1_num_get_bin(unsigned char *r, unsigned int rlen, const sec\n }\n \n static void secp256k1_num_set_bin(secp256k1_num_t *r, const unsigned char *a, unsigned int alen) {\n+    int len;\n     VERIFY_CHECK(alen > 0);\n     VERIFY_CHECK(alen <= 64);\n-    int len = mpn_set_str(r->data, a, alen, 256);\n+    len = mpn_set_str(r->data, a, alen, 256);\n     if (len == 0) {\n         r->data[0] = 0;\n         len = 1;\n@@ -91,6 +92,12 @@ static void secp256k1_num_mod(secp256k1_num_t *r, const secp256k1_num_t *m) {\n }\n \n static void secp256k1_num_mod_inverse(secp256k1_num_t *r, const secp256k1_num_t *a, const secp256k1_num_t *m) {\n+    int i;\n+    mp_limb_t g[NUM_LIMBS+1];\n+    mp_limb_t u[NUM_LIMBS+1];\n+    mp_limb_t v[NUM_LIMBS+1];\n+    mp_size_t sn;\n+    mp_size_t gn;\n     secp256k1_num_sanity(a);\n     secp256k1_num_sanity(m);\n \n@@ -106,15 +113,12 @@ static void secp256k1_num_mod_inverse(secp256k1_num_t *r, const secp256k1_num_t\n      */\n     VERIFY_CHECK(m->limbs <= NUM_LIMBS);\n     VERIFY_CHECK(m->data[m->limbs-1] != 0);\n-    mp_limb_t g[NUM_LIMBS+1];\n-    mp_limb_t u[NUM_LIMBS+1];\n-    mp_limb_t v[NUM_LIMBS+1];\n-    for (int i=0; i < m->limbs; i++) {\n+    for (i = 0; i < m->limbs; i++) {\n         u[i] = (i < a->limbs) ? a->data[i] : 0;\n         v[i] = m->data[i];\n     }\n-    mp_size_t sn = NUM_LIMBS+1;\n-    mp_size_t gn = mpn_gcdext(g, r->data, &sn, u, m->limbs, v, m->limbs);\n+    sn = NUM_LIMBS+1;\n+    gn = mpn_gcdext(g, r->data, &sn, u, m->limbs, v, m->limbs);\n     VERIFY_CHECK(gn == 1);\n     VERIFY_CHECK(g[0] == 1);\n     r->neg = a->neg ^ m->neg;\n@@ -183,10 +187,10 @@ static void secp256k1_num_sub(secp256k1_num_t *r, const secp256k1_num_t *a, cons\n }\n \n static void secp256k1_num_mul(secp256k1_num_t *r, const secp256k1_num_t *a, const secp256k1_num_t *b) {\n+    mp_limb_t tmp[2*NUM_LIMBS+1];\n     secp256k1_num_sanity(a);\n     secp256k1_num_sanity(b);\n \n-    mp_limb_t tmp[2*NUM_LIMBS+1];\n     VERIFY_CHECK(a->limbs + b->limbs <= 2*NUM_LIMBS+1);\n     if ((a->limbs==1 && a->data[0]==0) || (b->limbs==1 && b->data[0]==0)) {\n         r->limbs = 1;\n@@ -207,13 +211,14 @@ static void secp256k1_num_mul(secp256k1_num_t *r, const secp256k1_num_t *a, cons\n }\n \n static void secp256k1_num_shift(secp256k1_num_t *r, int bits) {\n+    int i;\n     if (bits % GMP_NUMB_BITS) {\n-        // Shift within limbs.\n+        /* Shift within limbs. */\n         mpn_rshift(r->data, r->data, r->limbs, bits % GMP_NUMB_BITS);\n     }\n     if (bits >= GMP_NUMB_BITS) {\n-        // Shift full limbs.\n-        for (int i = 0; i < r->limbs; i++) {\n+        /* Shift full limbs. */\n+        for (i = 0; i < r->limbs; i++) {\n             int index = i + (bits / GMP_NUMB_BITS);\n             if (index < r->limbs && index < 2*NUM_LIMBS) {\n                 r->data[i] = r->data[index];"
      },
      {
        "sha": "f5d09f8d474af52153d16108656176285c953e28",
        "filename": "src/secp256k1/src/scalar.h",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/scalar.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/scalar.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar.h?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -21,9 +21,6 @@\n #error \"Please select scalar implementation\"\n #endif\n \n-static void secp256k1_scalar_start(void);\n-static void secp256k1_scalar_stop(void);\n-\n /** Clear a scalar to prevent the leak of sensitive data. */\n static void secp256k1_scalar_clear(secp256k1_scalar_t *r);\n \n@@ -83,9 +80,9 @@ static void secp256k1_scalar_order_get_num(secp256k1_num_t *r);\n /** Compare two scalars. */\n static int secp256k1_scalar_eq(const secp256k1_scalar_t *a, const secp256k1_scalar_t *b);\n \n-static void secp256k1_scalar_split_128(secp256k1_scalar_t *r1, secp256k1_scalar_t *r2, const secp256k1_scalar_t *a);\n-\n #ifdef USE_ENDOMORPHISM\n+/** Find r1 and r2 such that r1+r2*2^128 = a. */\n+static void secp256k1_scalar_split_128(secp256k1_scalar_t *r1, secp256k1_scalar_t *r2, const secp256k1_scalar_t *a);\n /** Find r1 and r2 such that r1+r2*lambda = a, and r1 and r2 are maximum 128 bits long (see secp256k1_gej_mul_lambda). */\n static void secp256k1_scalar_split_lambda_var(secp256k1_scalar_t *r1, secp256k1_scalar_t *r2, const secp256k1_scalar_t *a);\n #endif"
      },
      {
        "sha": "82899aa7b047ae8a5f4ce7d9bc2054b3045160d3",
        "filename": "src/secp256k1/src/scalar_4x64.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/scalar_4x64.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/scalar_4x64.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_4x64.h?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -14,4 +14,6 @@ typedef struct {\n     uint64_t d[4];\n } secp256k1_scalar_t;\n \n+#define SECP256K1_SCALAR_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {{((uint64_t)(d1)) << 32 | (d0), ((uint64_t)(d3)) << 32 | (d2), ((uint64_t)(d5)) << 32 | (d4), ((uint64_t)(d7)) << 32 | (d6)}}\n+\n #endif"
      },
      {
        "sha": "ff365292f86f0f2237e4948f0b11c52fac1881d9",
        "filename": "src/secp256k1/src/scalar_4x64_impl.h",
        "status": "modified",
        "additions": 520,
        "deletions": 31,
        "changes": 551,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/scalar_4x64_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/scalar_4x64_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_4x64_impl.h?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -7,8 +7,6 @@\n #ifndef _SECP256K1_SCALAR_REPR_IMPL_H_\n #define _SECP256K1_SCALAR_REPR_IMPL_H_\n \n-typedef unsigned __int128 uint128_t;\n-\n /* Limbs of the secp256k1 order. */\n #define SECP256K1_N_0 ((uint64_t)0xBFD25E8CD0364141ULL)\n #define SECP256K1_N_1 ((uint64_t)0xBAAEDCE6AF48A03BULL)\n@@ -69,8 +67,9 @@ SECP256K1_INLINE static int secp256k1_scalar_check_overflow(const secp256k1_scal\n }\n \n SECP256K1_INLINE static int secp256k1_scalar_reduce(secp256k1_scalar_t *r, unsigned int overflow) {\n+    uint128_t t;\n     VERIFY_CHECK(overflow <= 1);\n-    uint128_t t = (uint128_t)r->d[0] + overflow * SECP256K1_N_C_0;\n+    t = (uint128_t)r->d[0] + overflow * SECP256K1_N_C_0;\n     r->d[0] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n     t += (uint128_t)r->d[1] + overflow * SECP256K1_N_C_1;\n     r->d[1] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n@@ -82,6 +81,7 @@ SECP256K1_INLINE static int secp256k1_scalar_reduce(secp256k1_scalar_t *r, unsig\n }\n \n static int secp256k1_scalar_add(secp256k1_scalar_t *r, const secp256k1_scalar_t *a, const secp256k1_scalar_t *b) {\n+    int overflow;\n     uint128_t t = (uint128_t)a->d[0] + b->d[0];\n     r->d[0] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n     t += (uint128_t)a->d[1] + b->d[1];\n@@ -90,15 +90,16 @@ static int secp256k1_scalar_add(secp256k1_scalar_t *r, const secp256k1_scalar_t\n     r->d[2] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n     t += (uint128_t)a->d[3] + b->d[3];\n     r->d[3] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n-    int overflow = t + secp256k1_scalar_check_overflow(r);\n+    overflow = t + secp256k1_scalar_check_overflow(r);\n     VERIFY_CHECK(overflow == 0 || overflow == 1);\n     secp256k1_scalar_reduce(r, overflow);\n     return overflow;\n }\n \n static void secp256k1_scalar_add_bit(secp256k1_scalar_t *r, unsigned int bit) {\n+    uint128_t t;\n     VERIFY_CHECK(bit < 256);\n-    uint128_t t = (uint128_t)r->d[0] + (((uint64_t)((bit >> 6) == 0)) << (bit & 0x3F));\n+    t = (uint128_t)r->d[0] + (((uint64_t)((bit >> 6) == 0)) << (bit & 0x3F));\n     r->d[0] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n     t += (uint128_t)r->d[1] + (((uint64_t)((bit >> 6) == 1)) << (bit & 0x3F));\n     r->d[1] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;\n@@ -113,11 +114,12 @@ static void secp256k1_scalar_add_bit(secp256k1_scalar_t *r, unsigned int bit) {\n }\n \n static void secp256k1_scalar_set_b32(secp256k1_scalar_t *r, const unsigned char *b32, int *overflow) {\n+    int over;\n     r->d[0] = (uint64_t)b32[31] | (uint64_t)b32[30] << 8 | (uint64_t)b32[29] << 16 | (uint64_t)b32[28] << 24 | (uint64_t)b32[27] << 32 | (uint64_t)b32[26] << 40 | (uint64_t)b32[25] << 48 | (uint64_t)b32[24] << 56;\n     r->d[1] = (uint64_t)b32[23] | (uint64_t)b32[22] << 8 | (uint64_t)b32[21] << 16 | (uint64_t)b32[20] << 24 | (uint64_t)b32[19] << 32 | (uint64_t)b32[18] << 40 | (uint64_t)b32[17] << 48 | (uint64_t)b32[16] << 56;\n     r->d[2] = (uint64_t)b32[15] | (uint64_t)b32[14] << 8 | (uint64_t)b32[13] << 16 | (uint64_t)b32[12] << 24 | (uint64_t)b32[11] << 32 | (uint64_t)b32[10] << 40 | (uint64_t)b32[9] << 48 | (uint64_t)b32[8] << 56;\n     r->d[3] = (uint64_t)b32[7] | (uint64_t)b32[6] << 8 | (uint64_t)b32[5] << 16 | (uint64_t)b32[4] << 24 | (uint64_t)b32[3] << 32 | (uint64_t)b32[2] << 40 | (uint64_t)b32[1] << 48 | (uint64_t)b32[0] << 56;\n-    int over = secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+    over = secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n     if (overflow) {\n         *overflow = over;\n     }\n@@ -195,16 +197,16 @@ static int secp256k1_scalar_is_high(const secp256k1_scalar_t *a) {\n \n /** Add 2*a*b to the number defined by (c0,c1,c2). c2 must never overflow. */\n #define muladd2(a,b) { \\\n-    uint64_t tl, th; \\\n+    uint64_t tl, th, th2, tl2; \\\n     { \\\n         uint128_t t = (uint128_t)a * b; \\\n         th = t >> 64;               /* at most 0xFFFFFFFFFFFFFFFE */ \\\n         tl = t; \\\n     } \\\n-    uint64_t th2 = th + th;         /* at most 0xFFFFFFFFFFFFFFFE (in case th was 0x7FFFFFFFFFFFFFFF) */ \\\n+    th2 = th + th;                  /* at most 0xFFFFFFFFFFFFFFFE (in case th was 0x7FFFFFFFFFFFFFFF) */ \\\n     c2 += (th2 < th) ? 1 : 0;       /* never overflows by contract (verified the next line) */ \\\n     VERIFY_CHECK((th2 >= th) || (c2 != 0)); \\\n-    uint64_t tl2 = tl + tl;         /* at most 0xFFFFFFFFFFFFFFFE (in case the lowest 63 bits of tl were 0x7FFFFFFFFFFFFFFF) */ \\\n+    tl2 = tl + tl;                  /* at most 0xFFFFFFFFFFFFFFFE (in case the lowest 63 bits of tl were 0x7FFFFFFFFFFFFFFF) */ \\\n     th2 += (tl2 < tl) ? 1 : 0;      /* at most 0xFFFFFFFFFFFFFFFF */ \\\n     c0 += tl2;                      /* overflow is handled on the next line */ \\\n     th2 += (c0 < tl2) ? 1 : 0;      /* second overflow is handled on the next line */ \\\n@@ -217,8 +219,9 @@ static int secp256k1_scalar_is_high(const secp256k1_scalar_t *a) {\n \n /** Add a to the number defined by (c0,c1,c2). c2 must never overflow. */\n #define sumadd(a) { \\\n+    unsigned int over; \\\n     c0 += (a);                  /* overflow is handled on the next line */ \\\n-    unsigned int over = (c0 < (a)) ? 1 : 0; \\\n+    over = (c0 < (a)) ? 1 : 0; \\\n     c1 += over;                 /* overflow is handled on the next line */ \\\n     c2 += (c1 < over) ? 1 : 0;  /* never overflows by contract */ \\\n }\n@@ -248,76 +251,448 @@ static int secp256k1_scalar_is_high(const secp256k1_scalar_t *a) {\n }\n \n static void secp256k1_scalar_reduce_512(secp256k1_scalar_t *r, const uint64_t *l) {\n-    uint64_t n0 = l[4], n1 = l[5], n2 = l[6], n3 = l[7];\n+#ifdef USE_ASM_X86_64\n+    /* Reduce 512 bits into 385. */\n+    uint64_t m0, m1, m2, m3, m4, m5, m6;\n+    uint64_t p0, p1, p2, p3, p4;\n+    uint64_t c;\n+\n+    __asm__ __volatile__(\n+    /* Preload. */\n+    \"movq 32(%%rsi), %%r11\\n\"\n+    \"movq 40(%%rsi), %%r12\\n\"\n+    \"movq 48(%%rsi), %%r13\\n\"\n+    \"movq 56(%%rsi), %%r14\\n\"\n+    /* Initialize r8,r9,r10 */\n+    \"movq 0(%%rsi), %%r8\\n\"\n+    \"movq $0, %%r9\\n\"\n+    \"movq $0, %%r10\\n\"\n+    /* (r8,r9) += n0 * c0 */\n+    \"movq %8, %%rax\\n\"\n+    \"mulq %%r11\\n\"\n+    \"addq %%rax, %%r8\\n\"\n+    \"adcq %%rdx, %%r9\\n\"\n+    /* extract m0 */\n+    \"movq %%r8, %q0\\n\"\n+    \"movq $0, %%r8\\n\"\n+    /* (r9,r10) += l1 */\n+    \"addq 8(%%rsi), %%r9\\n\"\n+    \"adcq $0, %%r10\\n\"\n+    /* (r9,r10,r8) += n1 * c0 */\n+    \"movq %8, %%rax\\n\"\n+    \"mulq %%r12\\n\"\n+    \"addq %%rax, %%r9\\n\"\n+    \"adcq %%rdx, %%r10\\n\"\n+    \"adcq $0, %%r8\\n\"\n+    /* (r9,r10,r8) += n0 * c1 */\n+    \"movq %9, %%rax\\n\"\n+    \"mulq %%r11\\n\"\n+    \"addq %%rax, %%r9\\n\"\n+    \"adcq %%rdx, %%r10\\n\"\n+    \"adcq $0, %%r8\\n\"\n+    /* extract m1 */\n+    \"movq %%r9, %q1\\n\"\n+    \"movq $0, %%r9\\n\"\n+    /* (r10,r8,r9) += l2 */\n+    \"addq 16(%%rsi), %%r10\\n\"\n+    \"adcq $0, %%r8\\n\"\n+    \"adcq $0, %%r9\\n\"\n+    /* (r10,r8,r9) += n2 * c0 */\n+    \"movq %8, %%rax\\n\"\n+    \"mulq %%r13\\n\"\n+    \"addq %%rax, %%r10\\n\"\n+    \"adcq %%rdx, %%r8\\n\"\n+    \"adcq $0, %%r9\\n\"\n+    /* (r10,r8,r9) += n1 * c1 */\n+    \"movq %9, %%rax\\n\"\n+    \"mulq %%r12\\n\"\n+    \"addq %%rax, %%r10\\n\"\n+    \"adcq %%rdx, %%r8\\n\"\n+    \"adcq $0, %%r9\\n\"\n+    /* (r10,r8,r9) += n0 */\n+    \"addq %%r11, %%r10\\n\"\n+    \"adcq $0, %%r8\\n\"\n+    \"adcq $0, %%r9\\n\"\n+    /* extract m2 */\n+    \"movq %%r10, %q2\\n\"\n+    \"movq $0, %%r10\\n\"\n+    /* (r8,r9,r10) += l3 */\n+    \"addq 24(%%rsi), %%r8\\n\"\n+    \"adcq $0, %%r9\\n\"\n+    \"adcq $0, %%r10\\n\"\n+    /* (r8,r9,r10) += n3 * c0 */\n+    \"movq %8, %%rax\\n\"\n+    \"mulq %%r14\\n\"\n+    \"addq %%rax, %%r8\\n\"\n+    \"adcq %%rdx, %%r9\\n\"\n+    \"adcq $0, %%r10\\n\"\n+    /* (r8,r9,r10) += n2 * c1 */\n+    \"movq %9, %%rax\\n\"\n+    \"mulq %%r13\\n\"\n+    \"addq %%rax, %%r8\\n\"\n+    \"adcq %%rdx, %%r9\\n\"\n+    \"adcq $0, %%r10\\n\"\n+    /* (r8,r9,r10) += n1 */\n+    \"addq %%r12, %%r8\\n\"\n+    \"adcq $0, %%r9\\n\"\n+    \"adcq $0, %%r10\\n\"\n+    /* extract m3 */\n+    \"movq %%r8, %q3\\n\"\n+    \"movq $0, %%r8\\n\"\n+    /* (r9,r10,r8) += n3 * c1 */\n+    \"movq %9, %%rax\\n\"\n+    \"mulq %%r14\\n\"\n+    \"addq %%rax, %%r9\\n\"\n+    \"adcq %%rdx, %%r10\\n\"\n+    \"adcq $0, %%r8\\n\"\n+    /* (r9,r10,r8) += n2 */\n+    \"addq %%r13, %%r9\\n\"\n+    \"adcq $0, %%r10\\n\"\n+    \"adcq $0, %%r8\\n\"\n+    /* extract m4 */\n+    \"movq %%r9, %q4\\n\"\n+    /* (r10,r8) += n3 */\n+    \"addq %%r14, %%r10\\n\"\n+    \"adcq $0, %%r8\\n\"\n+    /* extract m5 */\n+    \"movq %%r10, %q5\\n\"\n+    /* extract m6 */\n+    \"movq %%r8, %q6\\n\"\n+    : \"=g\"(m0), \"=g\"(m1), \"=g\"(m2), \"=g\"(m3), \"=g\"(m4), \"=g\"(m5), \"=g\"(m6)\n+    : \"S\"(l), \"n\"(SECP256K1_N_C_0), \"n\"(SECP256K1_N_C_1)\n+    : \"rax\", \"rdx\", \"r8\", \"r9\", \"r10\", \"r11\", \"r12\", \"r13\", \"r14\", \"cc\");\n \n-    /* 160 bit accumulator. */\n-    uint64_t c0, c1;\n-    uint32_t c2;\n+    /* Reduce 385 bits into 258. */\n+    __asm__ __volatile__(\n+    /* Preload */\n+    \"movq %q9, %%r11\\n\"\n+    \"movq %q10, %%r12\\n\"\n+    \"movq %q11, %%r13\\n\"\n+    /* Initialize (r8,r9,r10) */\n+    \"movq %q5, %%r8\\n\"\n+    \"movq $0, %%r9\\n\"\n+    \"movq $0, %%r10\\n\"\n+    /* (r8,r9) += m4 * c0 */\n+    \"movq %12, %%rax\\n\"\n+    \"mulq %%r11\\n\"\n+    \"addq %%rax, %%r8\\n\"\n+    \"adcq %%rdx, %%r9\\n\"\n+    /* extract p0 */\n+    \"movq %%r8, %q0\\n\"\n+    \"movq $0, %%r8\\n\"\n+    /* (r9,r10) += m1 */\n+    \"addq %q6, %%r9\\n\"\n+    \"adcq $0, %%r10\\n\"\n+    /* (r9,r10,r8) += m5 * c0 */\n+    \"movq %12, %%rax\\n\"\n+    \"mulq %%r12\\n\"\n+    \"addq %%rax, %%r9\\n\"\n+    \"adcq %%rdx, %%r10\\n\"\n+    \"adcq $0, %%r8\\n\"\n+    /* (r9,r10,r8) += m4 * c1 */\n+    \"movq %13, %%rax\\n\"\n+    \"mulq %%r11\\n\"\n+    \"addq %%rax, %%r9\\n\"\n+    \"adcq %%rdx, %%r10\\n\"\n+    \"adcq $0, %%r8\\n\"\n+    /* extract p1 */\n+    \"movq %%r9, %q1\\n\"\n+    \"movq $0, %%r9\\n\"\n+    /* (r10,r8,r9) += m2 */\n+    \"addq %q7, %%r10\\n\"\n+    \"adcq $0, %%r8\\n\"\n+    \"adcq $0, %%r9\\n\"\n+    /* (r10,r8,r9) += m6 * c0 */\n+    \"movq %12, %%rax\\n\"\n+    \"mulq %%r13\\n\"\n+    \"addq %%rax, %%r10\\n\"\n+    \"adcq %%rdx, %%r8\\n\"\n+    \"adcq $0, %%r9\\n\"\n+    /* (r10,r8,r9) += m5 * c1 */\n+    \"movq %13, %%rax\\n\"\n+    \"mulq %%r12\\n\"\n+    \"addq %%rax, %%r10\\n\"\n+    \"adcq %%rdx, %%r8\\n\"\n+    \"adcq $0, %%r9\\n\"\n+    /* (r10,r8,r9) += m4 */\n+    \"addq %%r11, %%r10\\n\"\n+    \"adcq $0, %%r8\\n\"\n+    \"adcq $0, %%r9\\n\"\n+    /* extract p2 */\n+    \"movq %%r10, %q2\\n\"\n+    /* (r8,r9) += m3 */\n+    \"addq %q8, %%r8\\n\"\n+    \"adcq $0, %%r9\\n\"\n+    /* (r8,r9) += m6 * c1 */\n+    \"movq %13, %%rax\\n\"\n+    \"mulq %%r13\\n\"\n+    \"addq %%rax, %%r8\\n\"\n+    \"adcq %%rdx, %%r9\\n\"\n+    /* (r8,r9) += m5 */\n+    \"addq %%r12, %%r8\\n\"\n+    \"adcq $0, %%r9\\n\"\n+    /* extract p3 */\n+    \"movq %%r8, %q3\\n\"\n+    /* (r9) += m6 */\n+    \"addq %%r13, %%r9\\n\"\n+    /* extract p4 */\n+    \"movq %%r9, %q4\\n\"\n+    : \"=&g\"(p0), \"=&g\"(p1), \"=&g\"(p2), \"=g\"(p3), \"=g\"(p4)\n+    : \"g\"(m0), \"g\"(m1), \"g\"(m2), \"g\"(m3), \"g\"(m4), \"g\"(m5), \"g\"(m6), \"n\"(SECP256K1_N_C_0), \"n\"(SECP256K1_N_C_1)\n+    : \"rax\", \"rdx\", \"r8\", \"r9\", \"r10\", \"r11\", \"r12\", \"r13\", \"cc\");\n+\n+    /* Reduce 258 bits into 256. */\n+    __asm__ __volatile__(\n+    /* Preload */\n+    \"movq %q5, %%r10\\n\"\n+    /* (rax,rdx) = p4 * c0 */\n+    \"movq %7, %%rax\\n\"\n+    \"mulq %%r10\\n\"\n+    /* (rax,rdx) += p0 */\n+    \"addq %q1, %%rax\\n\"\n+    \"adcq $0, %%rdx\\n\"\n+    /* extract r0 */\n+    \"movq %%rax, 0(%q6)\\n\"\n+    /* Move to (r8,r9) */\n+    \"movq %%rdx, %%r8\\n\"\n+    \"movq $0, %%r9\\n\"\n+    /* (r8,r9) += p1 */\n+    \"addq %q2, %%r8\\n\"\n+    \"adcq $0, %%r9\\n\"\n+    /* (r8,r9) += p4 * c1 */\n+    \"movq %8, %%rax\\n\"\n+    \"mulq %%r10\\n\"\n+    \"addq %%rax, %%r8\\n\"\n+    \"adcq %%rdx, %%r9\\n\"\n+    /* Extract r1 */\n+    \"movq %%r8, 8(%q6)\\n\"\n+    \"movq $0, %%r8\\n\"\n+    /* (r9,r8) += p4 */\n+    \"addq %%r10, %%r9\\n\"\n+    \"adcq $0, %%r8\\n\"\n+    /* (r9,r8) += p2 */\n+    \"addq %q3, %%r9\\n\"\n+    \"adcq $0, %%r8\\n\"\n+    /* Extract r2 */\n+    \"movq %%r9, 16(%q6)\\n\"\n+    \"movq $0, %%r9\\n\"\n+    /* (r8,r9) += p3 */\n+    \"addq %q4, %%r8\\n\"\n+    \"adcq $0, %%r9\\n\"\n+    /* Extract r3 */\n+    \"movq %%r8, 24(%q6)\\n\"\n+    /* Extract c */\n+    \"movq %%r9, %q0\\n\"\n+    : \"=g\"(c)\n+    : \"g\"(p0), \"g\"(p1), \"g\"(p2), \"g\"(p3), \"g\"(p4), \"D\"(r), \"n\"(SECP256K1_N_C_0), \"n\"(SECP256K1_N_C_1)\n+    : \"rax\", \"rdx\", \"r8\", \"r9\", \"r10\", \"cc\", \"memory\");\n+#else\n+    uint128_t c;\n+    uint64_t c0, c1, c2;\n+    uint64_t n0 = l[4], n1 = l[5], n2 = l[6], n3 = l[7];\n+    uint64_t m0, m1, m2, m3, m4, m5;\n+    uint32_t m6;\n+    uint64_t p0, p1, p2, p3;\n+    uint32_t p4;\n \n     /* Reduce 512 bits into 385. */\n     /* m[0..6] = l[0..3] + n[0..3] * SECP256K1_N_C. */\n     c0 = l[0]; c1 = 0; c2 = 0;\n     muladd_fast(n0, SECP256K1_N_C_0);\n-    uint64_t m0; extract_fast(m0);\n+    extract_fast(m0);\n     sumadd_fast(l[1]);\n     muladd(n1, SECP256K1_N_C_0);\n     muladd(n0, SECP256K1_N_C_1);\n-    uint64_t m1; extract(m1);\n+    extract(m1);\n     sumadd(l[2]);\n     muladd(n2, SECP256K1_N_C_0);\n     muladd(n1, SECP256K1_N_C_1);\n     sumadd(n0);\n-    uint64_t m2; extract(m2);\n+    extract(m2);\n     sumadd(l[3]);\n     muladd(n3, SECP256K1_N_C_0);\n     muladd(n2, SECP256K1_N_C_1);\n     sumadd(n1);\n-    uint64_t m3; extract(m3);\n+    extract(m3);\n     muladd(n3, SECP256K1_N_C_1);\n     sumadd(n2);\n-    uint64_t m4; extract(m4);\n+    extract(m4);\n     sumadd_fast(n3);\n-    uint64_t m5; extract_fast(m5);\n+    extract_fast(m5);\n     VERIFY_CHECK(c0 <= 1);\n-    uint32_t m6 = c0;\n+    m6 = c0;\n \n     /* Reduce 385 bits into 258. */\n     /* p[0..4] = m[0..3] + m[4..6] * SECP256K1_N_C. */\n     c0 = m0; c1 = 0; c2 = 0;\n     muladd_fast(m4, SECP256K1_N_C_0);\n-    uint64_t p0; extract_fast(p0);\n+    extract_fast(p0);\n     sumadd_fast(m1);\n     muladd(m5, SECP256K1_N_C_0);\n     muladd(m4, SECP256K1_N_C_1);\n-    uint64_t p1; extract(p1);\n+    extract(p1);\n     sumadd(m2);\n     muladd(m6, SECP256K1_N_C_0);\n     muladd(m5, SECP256K1_N_C_1);\n     sumadd(m4);\n-    uint64_t p2; extract(p2);\n+    extract(p2);\n     sumadd_fast(m3);\n     muladd_fast(m6, SECP256K1_N_C_1);\n     sumadd_fast(m5);\n-    uint64_t p3; extract_fast(p3);\n-    uint32_t p4 = c0 + m6;\n+    extract_fast(p3);\n+    p4 = c0 + m6;\n     VERIFY_CHECK(p4 <= 2);\n \n     /* Reduce 258 bits into 256. */\n     /* r[0..3] = p[0..3] + p[4] * SECP256K1_N_C. */\n-    uint128_t c = p0 + (uint128_t)SECP256K1_N_C_0 * p4;\n+    c = p0 + (uint128_t)SECP256K1_N_C_0 * p4;\n     r->d[0] = c & 0xFFFFFFFFFFFFFFFFULL; c >>= 64;\n     c += p1 + (uint128_t)SECP256K1_N_C_1 * p4;\n     r->d[1] = c & 0xFFFFFFFFFFFFFFFFULL; c >>= 64;\n     c += p2 + (uint128_t)p4;\n     r->d[2] = c & 0xFFFFFFFFFFFFFFFFULL; c >>= 64;\n     c += p3;\n     r->d[3] = c & 0xFFFFFFFFFFFFFFFFULL; c >>= 64;\n+#endif\n \n     /* Final reduction of r. */\n     secp256k1_scalar_reduce(r, c + secp256k1_scalar_check_overflow(r));\n }\n \n static void secp256k1_scalar_mul_512(uint64_t l[8], const secp256k1_scalar_t *a, const secp256k1_scalar_t *b) {\n+#ifdef USE_ASM_X86_64\n+    const uint64_t *pb = b->d;\n+    __asm__ __volatile__(\n+    /* Preload */\n+    \"movq 0(%%rdi), %%r15\\n\"\n+    \"movq 8(%%rdi), %%rbx\\n\"\n+    \"movq 16(%%rdi), %%rcx\\n\"\n+    \"movq 0(%%rdx), %%r11\\n\"\n+    \"movq 8(%%rdx), %%r12\\n\"\n+    \"movq 16(%%rdx), %%r13\\n\"\n+    \"movq 24(%%rdx), %%r14\\n\"\n+    /* (rax,rdx) = a0 * b0 */\n+    \"movq %%r15, %%rax\\n\"\n+    \"mulq %%r11\\n\"\n+    /* Extract l0 */\n+    \"movq %%rax, 0(%%rsi)\\n\"\n+    /* (r8,r9,r10) = (rdx) */\n+    \"movq %%rdx, %%r8\\n\"\n+    \"xorq %%r9, %%r9\\n\"\n+    \"xorq %%r10, %%r10\\n\"\n+    /* (r8,r9,r10) += a0 * b1 */\n+    \"movq %%r15, %%rax\\n\"\n+    \"mulq %%r12\\n\"\n+    \"addq %%rax, %%r8\\n\"\n+    \"adcq %%rdx, %%r9\\n\"\n+    \"adcq $0, %%r10\\n\"\n+    /* (r8,r9,r10) += a1 * b0 */\n+    \"movq %%rbx, %%rax\\n\"\n+    \"mulq %%r11\\n\"\n+    \"addq %%rax, %%r8\\n\"\n+    \"adcq %%rdx, %%r9\\n\"\n+    \"adcq $0, %%r10\\n\"\n+    /* Extract l1 */\n+    \"movq %%r8, 8(%%rsi)\\n\"\n+    \"xorq %%r8, %%r8\\n\"\n+    /* (r9,r10,r8) += a0 * b2 */\n+    \"movq %%r15, %%rax\\n\"\n+    \"mulq %%r13\\n\"\n+    \"addq %%rax, %%r9\\n\"\n+    \"adcq %%rdx, %%r10\\n\"\n+    \"adcq $0, %%r8\\n\"\n+    /* (r9,r10,r8) += a1 * b1 */\n+    \"movq %%rbx, %%rax\\n\"\n+    \"mulq %%r12\\n\"\n+    \"addq %%rax, %%r9\\n\"\n+    \"adcq %%rdx, %%r10\\n\"\n+    \"adcq $0, %%r8\\n\"\n+    /* (r9,r10,r8) += a2 * b0 */\n+    \"movq %%rcx, %%rax\\n\"\n+    \"mulq %%r11\\n\"\n+    \"addq %%rax, %%r9\\n\"\n+    \"adcq %%rdx, %%r10\\n\"\n+    \"adcq $0, %%r8\\n\"\n+    /* Extract l2 */\n+    \"movq %%r9, 16(%%rsi)\\n\"\n+    \"xorq %%r9, %%r9\\n\"\n+    /* (r10,r8,r9) += a0 * b3 */\n+    \"movq %%r15, %%rax\\n\"\n+    \"mulq %%r14\\n\"\n+    \"addq %%rax, %%r10\\n\"\n+    \"adcq %%rdx, %%r8\\n\"\n+    \"adcq $0, %%r9\\n\"\n+    /* Preload a3 */\n+    \"movq 24(%%rdi), %%r15\\n\"\n+    /* (r10,r8,r9) += a1 * b2 */\n+    \"movq %%rbx, %%rax\\n\"\n+    \"mulq %%r13\\n\"\n+    \"addq %%rax, %%r10\\n\"\n+    \"adcq %%rdx, %%r8\\n\"\n+    \"adcq $0, %%r9\\n\"\n+    /* (r10,r8,r9) += a2 * b1 */\n+    \"movq %%rcx, %%rax\\n\"\n+    \"mulq %%r12\\n\"\n+    \"addq %%rax, %%r10\\n\"\n+    \"adcq %%rdx, %%r8\\n\"\n+    \"adcq $0, %%r9\\n\"\n+    /* (r10,r8,r9) += a3 * b0 */\n+    \"movq %%r15, %%rax\\n\"\n+    \"mulq %%r11\\n\"\n+    \"addq %%rax, %%r10\\n\"\n+    \"adcq %%rdx, %%r8\\n\"\n+    \"adcq $0, %%r9\\n\"\n+    /* Extract l3 */\n+    \"movq %%r10, 24(%%rsi)\\n\"\n+    \"xorq %%r10, %%r10\\n\"\n+    /* (r8,r9,r10) += a1 * b3 */\n+    \"movq %%rbx, %%rax\\n\"\n+    \"mulq %%r14\\n\"\n+    \"addq %%rax, %%r8\\n\"\n+    \"adcq %%rdx, %%r9\\n\"\n+    \"adcq $0, %%r10\\n\"\n+    /* (r8,r9,r10) += a2 * b2 */\n+    \"movq %%rcx, %%rax\\n\"\n+    \"mulq %%r13\\n\"\n+    \"addq %%rax, %%r8\\n\"\n+    \"adcq %%rdx, %%r9\\n\"\n+    \"adcq $0, %%r10\\n\"\n+    /* (r8,r9,r10) += a3 * b1 */\n+    \"movq %%r15, %%rax\\n\"\n+    \"mulq %%r12\\n\"\n+    \"addq %%rax, %%r8\\n\"\n+    \"adcq %%rdx, %%r9\\n\"\n+    \"adcq $0, %%r10\\n\"\n+    /* Extract l4 */\n+    \"movq %%r8, 32(%%rsi)\\n\"\n+    \"xorq %%r8, %%r8\\n\"\n+    /* (r9,r10,r8) += a2 * b3 */\n+    \"movq %%rcx, %%rax\\n\"\n+    \"mulq %%r14\\n\"\n+    \"addq %%rax, %%r9\\n\"\n+    \"adcq %%rdx, %%r10\\n\"\n+    \"adcq $0, %%r8\\n\"\n+    /* (r9,r10,r8) += a3 * b2 */\n+    \"movq %%r15, %%rax\\n\"\n+    \"mulq %%r13\\n\"\n+    \"addq %%rax, %%r9\\n\"\n+    \"adcq %%rdx, %%r10\\n\"\n+    \"adcq $0, %%r8\\n\"\n+    /* Extract l5 */\n+    \"movq %%r9, 40(%%rsi)\\n\"\n+    /* (r10,r8) += a3 * b3 */\n+    \"movq %%r15, %%rax\\n\"\n+    \"mulq %%r14\\n\"\n+    \"addq %%rax, %%r10\\n\"\n+    \"adcq %%rdx, %%r8\\n\"\n+    /* Extract l6 */\n+    \"movq %%r10, 48(%%rsi)\\n\"\n+    /* Extract l7 */\n+    \"movq %%r8, 56(%%rsi)\\n\"\n+    : \"+d\"(pb)\n+    : \"S\"(l), \"D\"(a->d)\n+    : \"rax\", \"rbx\", \"rcx\", \"r8\", \"r9\", \"r10\", \"r11\", \"r12\", \"r13\", \"r14\", \"r15\", \"cc\", \"memory\");\n+#else\n     /* 160 bit accumulator. */\n     uint64_t c0 = 0, c1 = 0;\n     uint32_t c2 = 0;\n@@ -348,9 +723,119 @@ static void secp256k1_scalar_mul_512(uint64_t l[8], const secp256k1_scalar_t *a,\n     extract_fast(l[6]);\n     VERIFY_CHECK(c1 <= 0);\n     l[7] = c0;\n+#endif\n }\n \n static void secp256k1_scalar_sqr_512(uint64_t l[8], const secp256k1_scalar_t *a) {\n+#ifdef USE_ASM_X86_64\n+    __asm__ __volatile__(\n+    /* Preload */\n+    \"movq 0(%%rdi), %%r11\\n\"\n+    \"movq 8(%%rdi), %%r12\\n\"\n+    \"movq 16(%%rdi), %%r13\\n\"\n+    \"movq 24(%%rdi), %%r14\\n\"\n+    /* (rax,rdx) = a0 * a0 */\n+    \"movq %%r11, %%rax\\n\"\n+    \"mulq %%r11\\n\"\n+    /* Extract l0 */\n+    \"movq %%rax, 0(%%rsi)\\n\"\n+    /* (r8,r9,r10) = (rdx,0) */\n+    \"movq %%rdx, %%r8\\n\"\n+    \"xorq %%r9, %%r9\\n\"\n+    \"xorq %%r10, %%r10\\n\"\n+    /* (r8,r9,r10) += 2 * a0 * a1 */\n+    \"movq %%r11, %%rax\\n\"\n+    \"mulq %%r12\\n\"\n+    \"addq %%rax, %%r8\\n\"\n+    \"adcq %%rdx, %%r9\\n\"\n+    \"adcq $0, %%r10\\n\"\n+    \"addq %%rax, %%r8\\n\"\n+    \"adcq %%rdx, %%r9\\n\"\n+    \"adcq $0, %%r10\\n\"\n+    /* Extract l1 */\n+    \"movq %%r8, 8(%%rsi)\\n\"\n+    \"xorq %%r8, %%r8\\n\"\n+    /* (r9,r10,r8) += 2 * a0 * a2 */\n+    \"movq %%r11, %%rax\\n\"\n+    \"mulq %%r13\\n\"\n+    \"addq %%rax, %%r9\\n\"\n+    \"adcq %%rdx, %%r10\\n\"\n+    \"adcq $0, %%r8\\n\"\n+    \"addq %%rax, %%r9\\n\"\n+    \"adcq %%rdx, %%r10\\n\"\n+    \"adcq $0, %%r8\\n\"\n+    /* (r9,r10,r8) += a1 * a1 */\n+    \"movq %%r12, %%rax\\n\"\n+    \"mulq %%r12\\n\"\n+    \"addq %%rax, %%r9\\n\"\n+    \"adcq %%rdx, %%r10\\n\"\n+    \"adcq $0, %%r8\\n\"\n+    /* Extract l2 */\n+    \"movq %%r9, 16(%%rsi)\\n\"\n+    \"xorq %%r9, %%r9\\n\"\n+    /* (r10,r8,r9) += 2 * a0 * a3 */\n+    \"movq %%r11, %%rax\\n\"\n+    \"mulq %%r14\\n\"\n+    \"addq %%rax, %%r10\\n\"\n+    \"adcq %%rdx, %%r8\\n\"\n+    \"adcq $0, %%r9\\n\"\n+    \"addq %%rax, %%r10\\n\"\n+    \"adcq %%rdx, %%r8\\n\"\n+    \"adcq $0, %%r9\\n\"\n+    /* (r10,r8,r9) += 2 * a1 * a2 */\n+    \"movq %%r12, %%rax\\n\"\n+    \"mulq %%r13\\n\"\n+    \"addq %%rax, %%r10\\n\"\n+    \"adcq %%rdx, %%r8\\n\"\n+    \"adcq $0, %%r9\\n\"\n+    \"addq %%rax, %%r10\\n\"\n+    \"adcq %%rdx, %%r8\\n\"\n+    \"adcq $0, %%r9\\n\"\n+    /* Extract l3 */\n+    \"movq %%r10, 24(%%rsi)\\n\"\n+    \"xorq %%r10, %%r10\\n\"\n+    /* (r8,r9,r10) += 2 * a1 * a3 */\n+    \"movq %%r12, %%rax\\n\"\n+    \"mulq %%r14\\n\"\n+    \"addq %%rax, %%r8\\n\"\n+    \"adcq %%rdx, %%r9\\n\"\n+    \"adcq $0, %%r10\\n\"\n+    \"addq %%rax, %%r8\\n\"\n+    \"adcq %%rdx, %%r9\\n\"\n+    \"adcq $0, %%r10\\n\"\n+    /* (r8,r9,r10) += a2 * a2 */\n+    \"movq %%r13, %%rax\\n\"\n+    \"mulq %%r13\\n\"\n+    \"addq %%rax, %%r8\\n\"\n+    \"adcq %%rdx, %%r9\\n\"\n+    \"adcq $0, %%r10\\n\"\n+    /* Extract l4 */\n+    \"movq %%r8, 32(%%rsi)\\n\"\n+    \"xorq %%r8, %%r8\\n\"\n+    /* (r9,r10,r8) += 2 * a2 * a3 */\n+    \"movq %%r13, %%rax\\n\"\n+    \"mulq %%r14\\n\"\n+    \"addq %%rax, %%r9\\n\"\n+    \"adcq %%rdx, %%r10\\n\"\n+    \"adcq $0, %%r8\\n\"\n+    \"addq %%rax, %%r9\\n\"\n+    \"adcq %%rdx, %%r10\\n\"\n+    \"adcq $0, %%r8\\n\"\n+    /* Extract l5 */\n+    \"movq %%r9, 40(%%rsi)\\n\"\n+    /* (r10,r8) += a3 * a3 */\n+    \"movq %%r14, %%rax\\n\"\n+    \"mulq %%r14\\n\"\n+    \"addq %%rax, %%r10\\n\"\n+    \"adcq %%rdx, %%r8\\n\"\n+    /* Extract l6 */\n+    \"movq %%r10, 48(%%rsi)\\n\"\n+    /* Extract l7 */\n+    \"movq %%r8, 56(%%rsi)\\n\"\n+    :\n+    : \"S\"(l), \"D\"(a->d)\n+    : \"rax\", \"rdx\", \"r8\", \"r9\", \"r10\", \"r11\", \"r12\", \"r13\", \"r14\", \"cc\", \"memory\");\n+#else\n     /* 160 bit accumulator. */\n     uint64_t c0 = 0, c1 = 0;\n     uint32_t c2 = 0;\n@@ -375,6 +860,7 @@ static void secp256k1_scalar_sqr_512(uint64_t l[8], const secp256k1_scalar_t *a)\n     extract_fast(l[6]);\n     VERIFY_CHECK(c1 == 0);\n     l[7] = c0;\n+#endif\n }\n \n #undef sumadd\n@@ -413,12 +899,15 @@ SECP256K1_INLINE static int secp256k1_scalar_eq(const secp256k1_scalar_t *a, con\n }\n \n SECP256K1_INLINE static void secp256k1_scalar_mul_shift_var(secp256k1_scalar_t *r, const secp256k1_scalar_t *a, const secp256k1_scalar_t *b, unsigned int shift) {\n-    VERIFY_CHECK(shift >= 256);\n     uint64_t l[8];\n+    unsigned int shiftlimbs;\n+    unsigned int shiftlow;\n+    unsigned int shifthigh;\n+    VERIFY_CHECK(shift >= 256);\n     secp256k1_scalar_mul_512(l, a, b);\n-    unsigned int shiftlimbs = shift >> 6;\n-    unsigned int shiftlow = shift & 0x3F;\n-    unsigned int shifthigh = 64 - shiftlow;\n+    shiftlimbs = shift >> 6;\n+    shiftlow = shift & 0x3F;\n+    shifthigh = 64 - shiftlow;\n     r->d[0] = shift < 512 ? (l[0 + shiftlimbs] >> shiftlow | (shift < 448 && shiftlow ? (l[1 + shiftlimbs] << shifthigh) : 0)) : 0;\n     r->d[1] = shift < 448 ? (l[1 + shiftlimbs] >> shiftlow | (shift < 384 && shiftlow ? (l[2 + shiftlimbs] << shifthigh) : 0)) : 0;\n     r->d[2] = shift < 384 ? (l[2 + shiftlimbs] >> shiftlow | (shift < 320 && shiftlow ? (l[3 + shiftlimbs] << shifthigh) : 0)) : 0;"
      },
      {
        "sha": "f17017e24e202557990c94bb809233efcfb018c2",
        "filename": "src/secp256k1/src/scalar_8x32.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/scalar_8x32.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/scalar_8x32.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_8x32.h?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -14,4 +14,6 @@ typedef struct {\n     uint32_t d[8];\n } secp256k1_scalar_t;\n \n+#define SECP256K1_SCALAR_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {{(d0), (d1), (d2), (d3), (d4), (d5), (d6), (d7)}}\n+\n #endif"
      },
      {
        "sha": "22b31d41125daeb942d2db22f80089856b611af1",
        "filename": "src/secp256k1/src/scalar_8x32_impl.h",
        "status": "modified",
        "additions": 50,
        "deletions": 37,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/scalar_8x32_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/scalar_8x32_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_8x32_impl.h?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -91,8 +91,9 @@ SECP256K1_INLINE static int secp256k1_scalar_check_overflow(const secp256k1_scal\n }\n \n SECP256K1_INLINE static int secp256k1_scalar_reduce(secp256k1_scalar_t *r, uint32_t overflow) {\n+    uint64_t t;\n     VERIFY_CHECK(overflow <= 1);\n-    uint64_t t = (uint64_t)r->d[0] + overflow * SECP256K1_N_C_0;\n+    t = (uint64_t)r->d[0] + overflow * SECP256K1_N_C_0;\n     r->d[0] = t & 0xFFFFFFFFUL; t >>= 32;\n     t += (uint64_t)r->d[1] + overflow * SECP256K1_N_C_1;\n     r->d[1] = t & 0xFFFFFFFFUL; t >>= 32;\n@@ -112,6 +113,7 @@ SECP256K1_INLINE static int secp256k1_scalar_reduce(secp256k1_scalar_t *r, uint3\n }\n \n static int secp256k1_scalar_add(secp256k1_scalar_t *r, const secp256k1_scalar_t *a, const secp256k1_scalar_t *b) {\n+    int overflow;\n     uint64_t t = (uint64_t)a->d[0] + b->d[0];\n     r->d[0] = t & 0xFFFFFFFFULL; t >>= 32;\n     t += (uint64_t)a->d[1] + b->d[1];\n@@ -128,15 +130,16 @@ static int secp256k1_scalar_add(secp256k1_scalar_t *r, const secp256k1_scalar_t\n     r->d[6] = t & 0xFFFFFFFFULL; t >>= 32;\n     t += (uint64_t)a->d[7] + b->d[7];\n     r->d[7] = t & 0xFFFFFFFFULL; t >>= 32;\n-    int overflow = t + secp256k1_scalar_check_overflow(r);\n+    overflow = t + secp256k1_scalar_check_overflow(r);\n     VERIFY_CHECK(overflow == 0 || overflow == 1);\n     secp256k1_scalar_reduce(r, overflow);\n     return overflow;\n }\n \n static void secp256k1_scalar_add_bit(secp256k1_scalar_t *r, unsigned int bit) {\n+    uint64_t t;\n     VERIFY_CHECK(bit < 256);\n-    uint64_t t = (uint64_t)r->d[0] + (((uint32_t)((bit >> 5) == 0)) << (bit & 0x1F));\n+    t = (uint64_t)r->d[0] + (((uint32_t)((bit >> 5) == 0)) << (bit & 0x1F));\n     r->d[0] = t & 0xFFFFFFFFULL; t >>= 32;\n     t += (uint64_t)r->d[1] + (((uint32_t)((bit >> 5) == 1)) << (bit & 0x1F));\n     r->d[1] = t & 0xFFFFFFFFULL; t >>= 32;\n@@ -159,6 +162,7 @@ static void secp256k1_scalar_add_bit(secp256k1_scalar_t *r, unsigned int bit) {\n }\n \n static void secp256k1_scalar_set_b32(secp256k1_scalar_t *r, const unsigned char *b32, int *overflow) {\n+    int over;\n     r->d[0] = (uint32_t)b32[31] | (uint32_t)b32[30] << 8 | (uint32_t)b32[29] << 16 | (uint32_t)b32[28] << 24;\n     r->d[1] = (uint32_t)b32[27] | (uint32_t)b32[26] << 8 | (uint32_t)b32[25] << 16 | (uint32_t)b32[24] << 24;\n     r->d[2] = (uint32_t)b32[23] | (uint32_t)b32[22] << 8 | (uint32_t)b32[21] << 16 | (uint32_t)b32[20] << 24;\n@@ -167,7 +171,7 @@ static void secp256k1_scalar_set_b32(secp256k1_scalar_t *r, const unsigned char\n     r->d[5] = (uint32_t)b32[11] | (uint32_t)b32[10] << 8 | (uint32_t)b32[9] << 16 | (uint32_t)b32[8] << 24;\n     r->d[6] = (uint32_t)b32[7] | (uint32_t)b32[6] << 8 | (uint32_t)b32[5] << 16 | (uint32_t)b32[4] << 24;\n     r->d[7] = (uint32_t)b32[3] | (uint32_t)b32[2] << 8 | (uint32_t)b32[1] << 16 | (uint32_t)b32[0] << 24;\n-    int over = secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n+    over = secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));\n     if (overflow) {\n         *overflow = over;\n     }\n@@ -263,16 +267,16 @@ static int secp256k1_scalar_is_high(const secp256k1_scalar_t *a) {\n \n /** Add 2*a*b to the number defined by (c0,c1,c2). c2 must never overflow. */\n #define muladd2(a,b) { \\\n-    uint32_t tl, th; \\\n+    uint32_t tl, th, th2, tl2; \\\n     { \\\n         uint64_t t = (uint64_t)a * b; \\\n         th = t >> 32;               /* at most 0xFFFFFFFE */ \\\n         tl = t; \\\n     } \\\n-    uint32_t th2 = th + th;         /* at most 0xFFFFFFFE (in case th was 0x7FFFFFFF) */ \\\n+    th2 = th + th;                  /* at most 0xFFFFFFFE (in case th was 0x7FFFFFFF) */ \\\n     c2 += (th2 < th) ? 1 : 0;       /* never overflows by contract (verified the next line) */ \\\n     VERIFY_CHECK((th2 >= th) || (c2 != 0)); \\\n-    uint32_t tl2 = tl + tl;         /* at most 0xFFFFFFFE (in case the lowest 63 bits of tl were 0x7FFFFFFF) */ \\\n+    tl2 = tl + tl;                  /* at most 0xFFFFFFFE (in case the lowest 63 bits of tl were 0x7FFFFFFF) */ \\\n     th2 += (tl2 < tl) ? 1 : 0;      /* at most 0xFFFFFFFF */ \\\n     c0 += tl2;                      /* overflow is handled on the next line */ \\\n     th2 += (c0 < tl2) ? 1 : 0;      /* second overflow is handled on the next line */ \\\n@@ -285,8 +289,9 @@ static int secp256k1_scalar_is_high(const secp256k1_scalar_t *a) {\n \n /** Add a to the number defined by (c0,c1,c2). c2 must never overflow. */\n #define sumadd(a) { \\\n+    unsigned int over; \\\n     c0 += (a);                  /* overflow is handled on the next line */ \\\n-    unsigned int over = (c0 < (a)) ? 1 : 0; \\\n+    over = (c0 < (a)) ? 1 : 0; \\\n     c1 += over;                 /* overflow is handled on the next line */ \\\n     c2 += (c1 < over) ? 1 : 0;  /* never overflows by contract */ \\\n }\n@@ -316,7 +321,10 @@ static int secp256k1_scalar_is_high(const secp256k1_scalar_t *a) {\n }\n \n static void secp256k1_scalar_reduce_512(secp256k1_scalar_t *r, const uint32_t *l) {\n+    uint64_t c;\n     uint32_t n0 = l[8], n1 = l[9], n2 = l[10], n3 = l[11], n4 = l[12], n5 = l[13], n6 = l[14], n7 = l[15];\n+    uint32_t m0, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12;\n+    uint32_t p0, p1, p2, p3, p4, p5, p6, p7, p8;\n \n     /* 96 bit accumulator. */\n     uint32_t c0, c1, c2;\n@@ -325,115 +333,115 @@ static void secp256k1_scalar_reduce_512(secp256k1_scalar_t *r, const uint32_t *l\n     /* m[0..12] = l[0..7] + n[0..7] * SECP256K1_N_C. */\n     c0 = l[0]; c1 = 0; c2 = 0;\n     muladd_fast(n0, SECP256K1_N_C_0);\n-    uint32_t m0; extract_fast(m0);\n+    extract_fast(m0);\n     sumadd_fast(l[1]);\n     muladd(n1, SECP256K1_N_C_0);\n     muladd(n0, SECP256K1_N_C_1);\n-    uint32_t m1; extract(m1);\n+    extract(m1);\n     sumadd(l[2]);\n     muladd(n2, SECP256K1_N_C_0);\n     muladd(n1, SECP256K1_N_C_1);\n     muladd(n0, SECP256K1_N_C_2);\n-    uint32_t m2; extract(m2);\n+    extract(m2);\n     sumadd(l[3]);\n     muladd(n3, SECP256K1_N_C_0);\n     muladd(n2, SECP256K1_N_C_1);\n     muladd(n1, SECP256K1_N_C_2);\n     muladd(n0, SECP256K1_N_C_3);\n-    uint32_t m3; extract(m3);\n+    extract(m3);\n     sumadd(l[4]);\n     muladd(n4, SECP256K1_N_C_0);\n     muladd(n3, SECP256K1_N_C_1);\n     muladd(n2, SECP256K1_N_C_2);\n     muladd(n1, SECP256K1_N_C_3);\n     sumadd(n0);\n-    uint32_t m4; extract(m4);\n+    extract(m4);\n     sumadd(l[5]);\n     muladd(n5, SECP256K1_N_C_0);\n     muladd(n4, SECP256K1_N_C_1);\n     muladd(n3, SECP256K1_N_C_2);\n     muladd(n2, SECP256K1_N_C_3);\n     sumadd(n1);\n-    uint32_t m5; extract(m5);\n+    extract(m5);\n     sumadd(l[6]);\n     muladd(n6, SECP256K1_N_C_0);\n     muladd(n5, SECP256K1_N_C_1);\n     muladd(n4, SECP256K1_N_C_2);\n     muladd(n3, SECP256K1_N_C_3);\n     sumadd(n2);\n-    uint32_t m6; extract(m6);\n+    extract(m6);\n     sumadd(l[7]);\n     muladd(n7, SECP256K1_N_C_0);\n     muladd(n6, SECP256K1_N_C_1);\n     muladd(n5, SECP256K1_N_C_2);\n     muladd(n4, SECP256K1_N_C_3);\n     sumadd(n3);\n-    uint32_t m7; extract(m7);\n+    extract(m7);\n     muladd(n7, SECP256K1_N_C_1);\n     muladd(n6, SECP256K1_N_C_2);\n     muladd(n5, SECP256K1_N_C_3);\n     sumadd(n4);\n-    uint32_t m8; extract(m8);\n+    extract(m8);\n     muladd(n7, SECP256K1_N_C_2);\n     muladd(n6, SECP256K1_N_C_3);\n     sumadd(n5);\n-    uint32_t m9; extract(m9);\n+    extract(m9);\n     muladd(n7, SECP256K1_N_C_3);\n     sumadd(n6);\n-    uint32_t m10; extract(m10);\n+    extract(m10);\n     sumadd_fast(n7);\n-    uint32_t m11; extract_fast(m11);\n+    extract_fast(m11);\n     VERIFY_CHECK(c0 <= 1);\n-    uint32_t m12 = c0;\n+    m12 = c0;\n \n     /* Reduce 385 bits into 258. */\n     /* p[0..8] = m[0..7] + m[8..12] * SECP256K1_N_C. */\n     c0 = m0; c1 = 0; c2 = 0;\n     muladd_fast(m8, SECP256K1_N_C_0);\n-    uint32_t p0; extract_fast(p0);\n+    extract_fast(p0);\n     sumadd_fast(m1);\n     muladd(m9, SECP256K1_N_C_0);\n     muladd(m8, SECP256K1_N_C_1);\n-    uint32_t p1; extract(p1);\n+    extract(p1);\n     sumadd(m2);\n     muladd(m10, SECP256K1_N_C_0);\n     muladd(m9, SECP256K1_N_C_1);\n     muladd(m8, SECP256K1_N_C_2);\n-    uint32_t p2; extract(p2);\n+    extract(p2);\n     sumadd(m3);\n     muladd(m11, SECP256K1_N_C_0);\n     muladd(m10, SECP256K1_N_C_1);\n     muladd(m9, SECP256K1_N_C_2);\n     muladd(m8, SECP256K1_N_C_3);\n-    uint32_t p3; extract(p3);\n+    extract(p3);\n     sumadd(m4);\n     muladd(m12, SECP256K1_N_C_0);\n     muladd(m11, SECP256K1_N_C_1);\n     muladd(m10, SECP256K1_N_C_2);\n     muladd(m9, SECP256K1_N_C_3);\n     sumadd(m8);\n-    uint32_t p4; extract(p4);\n+    extract(p4);\n     sumadd(m5);\n     muladd(m12, SECP256K1_N_C_1);\n     muladd(m11, SECP256K1_N_C_2);\n     muladd(m10, SECP256K1_N_C_3);\n     sumadd(m9);\n-    uint32_t p5; extract(p5);\n+    extract(p5);\n     sumadd(m6);\n     muladd(m12, SECP256K1_N_C_2);\n     muladd(m11, SECP256K1_N_C_3);\n     sumadd(m10);\n-    uint32_t p6; extract(p6);\n+    extract(p6);\n     sumadd_fast(m7);\n     muladd_fast(m12, SECP256K1_N_C_3);\n     sumadd_fast(m11);\n-    uint32_t p7; extract_fast(p7);\n-    uint32_t p8 = c0 + m12;\n+    extract_fast(p7);\n+    p8 = c0 + m12;\n     VERIFY_CHECK(p8 <= 2);\n \n     /* Reduce 258 bits into 256. */\n     /* r[0..7] = p[0..7] + p[8] * SECP256K1_N_C. */\n-    uint64_t c = p0 + (uint64_t)SECP256K1_N_C_0 * p8;\n+    c = p0 + (uint64_t)SECP256K1_N_C_0 * p8;\n     r->d[0] = c & 0xFFFFFFFFUL; c >>= 32;\n     c += p1 + (uint64_t)SECP256K1_N_C_1 * p8;\n     r->d[1] = c & 0xFFFFFFFFUL; c >>= 32;\n@@ -454,7 +462,7 @@ static void secp256k1_scalar_reduce_512(secp256k1_scalar_t *r, const uint32_t *l\n     secp256k1_scalar_reduce(r, c + secp256k1_scalar_check_overflow(r));\n }\n \n-static void secp256k1_scalar_mul_512(uint32_t l[16], const secp256k1_scalar_t *a, const secp256k1_scalar_t *b) {\n+static void secp256k1_scalar_mul_512(uint32_t *l, const secp256k1_scalar_t *a, const secp256k1_scalar_t *b) {\n     /* 96 bit accumulator. */\n     uint32_t c0 = 0, c1 = 0, c2 = 0;\n \n@@ -542,7 +550,7 @@ static void secp256k1_scalar_mul_512(uint32_t l[16], const secp256k1_scalar_t *a\n     l[15] = c0;\n }\n \n-static void secp256k1_scalar_sqr_512(uint32_t l[16], const secp256k1_scalar_t *a) {\n+static void secp256k1_scalar_sqr_512(uint32_t *l, const secp256k1_scalar_t *a) {\n     /* 96 bit accumulator. */\n     uint32_t c0 = 0, c1 = 0, c2 = 0;\n \n@@ -622,6 +630,7 @@ static void secp256k1_scalar_sqr(secp256k1_scalar_t *r, const secp256k1_scalar_t\n     secp256k1_scalar_reduce_512(r, l);\n }\n \n+#ifdef USE_ENDOMORPHISM\n static void secp256k1_scalar_split_128(secp256k1_scalar_t *r1, secp256k1_scalar_t *r2, const secp256k1_scalar_t *a) {\n     r1->d[0] = a->d[0];\n     r1->d[1] = a->d[1];\n@@ -640,18 +649,22 @@ static void secp256k1_scalar_split_128(secp256k1_scalar_t *r1, secp256k1_scalar_\n     r2->d[6] = 0;\n     r2->d[7] = 0;\n }\n+#endif\n \n SECP256K1_INLINE static int secp256k1_scalar_eq(const secp256k1_scalar_t *a, const secp256k1_scalar_t *b) {\n     return ((a->d[0] ^ b->d[0]) | (a->d[1] ^ b->d[1]) | (a->d[2] ^ b->d[2]) | (a->d[3] ^ b->d[3]) | (a->d[4] ^ b->d[4]) | (a->d[5] ^ b->d[5]) | (a->d[6] ^ b->d[6]) | (a->d[7] ^ b->d[7])) == 0;\n }\n \n SECP256K1_INLINE static void secp256k1_scalar_mul_shift_var(secp256k1_scalar_t *r, const secp256k1_scalar_t *a, const secp256k1_scalar_t *b, unsigned int shift) {\n-    VERIFY_CHECK(shift >= 256);\n     uint32_t l[16];\n+    unsigned int shiftlimbs;\n+    unsigned int shiftlow;\n+    unsigned int shifthigh;\n+    VERIFY_CHECK(shift >= 256);\n     secp256k1_scalar_mul_512(l, a, b);\n-    unsigned int shiftlimbs = shift >> 5;\n-    unsigned int shiftlow = shift & 0x1F;\n-    unsigned int shifthigh = 32 - shiftlow;\n+    shiftlimbs = shift >> 5;\n+    shiftlow = shift & 0x1F;\n+    shifthigh = 32 - shiftlow;\n     r->d[0] = shift < 512 ? (l[0 + shiftlimbs] >> shiftlow | (shift < 480 && shiftlow ? (l[1 + shiftlimbs] << shifthigh) : 0)) : 0;\n     r->d[1] = shift < 480 ? (l[1 + shiftlimbs] >> shiftlow | (shift < 448 && shiftlow ? (l[2 + shiftlimbs] << shifthigh) : 0)) : 0;\n     r->d[2] = shift < 448 ? (l[2 + shiftlimbs] >> shiftlow | (shift < 416 && shiftlow ? (l[3 + shiftlimbs] << shifthigh) : 0)) : 0;"
      },
      {
        "sha": "3acbe264ae9bdf5727dce2cb51444b87e5b3d3c2",
        "filename": "src/secp256k1/src/scalar_impl.h",
        "status": "modified",
        "additions": 116,
        "deletions": 163,
        "changes": 279,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/scalar_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/scalar_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_impl.h?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -24,134 +24,28 @@\n #error \"Please select scalar implementation\"\n #endif\n \n-typedef struct {\n-#ifndef USE_NUM_NONE\n-    secp256k1_num_t order;\n-#endif\n-#ifdef USE_ENDOMORPHISM\n-    secp256k1_scalar_t minus_lambda, minus_b1, minus_b2, g1, g2;\n-#endif\n-} secp256k1_scalar_consts_t;\n-\n-static const secp256k1_scalar_consts_t *secp256k1_scalar_consts = NULL;\n-\n-static void secp256k1_scalar_start(void) {\n-    if (secp256k1_scalar_consts != NULL)\n-        return;\n-\n-    /* Allocate. */\n-    secp256k1_scalar_consts_t *ret = (secp256k1_scalar_consts_t*)checked_malloc(sizeof(secp256k1_scalar_consts_t));\n-\n-#ifndef USE_NUM_NONE\n-    static const unsigned char secp256k1_scalar_consts_order[] = {\n-        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n-        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,\n-        0xBA,0xAE,0xDC,0xE6,0xAF,0x48,0xA0,0x3B,\n-        0xBF,0xD2,0x5E,0x8C,0xD0,0x36,0x41,0x41\n-    };\n-    secp256k1_num_set_bin(&ret->order, secp256k1_scalar_consts_order, sizeof(secp256k1_scalar_consts_order));\n-#endif\n-#ifdef USE_ENDOMORPHISM\n-    /**\n-     * Lambda is a scalar which has the property for secp256k1 that point multiplication by\n-     * it is efficiently computable (see secp256k1_gej_mul_lambda). */\n-    static const unsigned char secp256k1_scalar_consts_lambda[32] = {\n-         0x53,0x63,0xad,0x4c,0xc0,0x5c,0x30,0xe0,\n-         0xa5,0x26,0x1c,0x02,0x88,0x12,0x64,0x5a,\n-         0x12,0x2e,0x22,0xea,0x20,0x81,0x66,0x78,\n-         0xdf,0x02,0x96,0x7c,0x1b,0x23,0xbd,0x72\n-    };\n-    /**\n-     * \"Guide to Elliptic Curve Cryptography\" (Hankerson, Menezes, Vanstone) gives an algorithm\n-     * (algorithm 3.74) to find k1 and k2 given k, such that k1 + k2 * lambda == k mod n, and k1\n-     * and k2 have a small size.\n-     * It relies on constants a1, b1, a2, b2. These constants for the value of lambda above are:\n-     *\n-     * - a1 =      {0x30,0x86,0xd2,0x21,0xa7,0xd4,0x6b,0xcd,0xe8,0x6c,0x90,0xe4,0x92,0x84,0xeb,0x15}\n-     * - b1 =     -{0xe4,0x43,0x7e,0xd6,0x01,0x0e,0x88,0x28,0x6f,0x54,0x7f,0xa9,0x0a,0xbf,0xe4,0xc3}\n-     * - a2 = {0x01,0x14,0xca,0x50,0xf7,0xa8,0xe2,0xf3,0xf6,0x57,0xc1,0x10,0x8d,0x9d,0x44,0xcf,0xd8}\n-     * - b2 =      {0x30,0x86,0xd2,0x21,0xa7,0xd4,0x6b,0xcd,0xe8,0x6c,0x90,0xe4,0x92,0x84,0xeb,0x15}\n-     *\n-     * The algorithm then computes c1 = round(b1 * k / n) and c2 = round(b2 * k / n), and gives\n-     * k1 = k - (c1*a1 + c2*a2) and k2 = -(c1*b1 + c2*b2). Instead, we use modular arithmetic, and\n-     * compute k1 as k - k2 * lambda, avoiding the need for constants a1 and a2.\n-     *\n-     * g1, g2 are precomputed constants used to replace division with a rounded multiplication\n-     * when decomposing the scalar for an endomorphism-based point multiplication.\n-     *\n-     * The possibility of using precomputed estimates is mentioned in \"Guide to Elliptic Curve\n-     * Cryptography\" (Hankerson, Menezes, Vanstone) in section 3.5.\n-     *\n-     * The derivation is described in the paper \"Efficient Software Implementation of Public-Key\n-     * Cryptography on Sensor Networks Using the MSP430X Microcontroller\" (Gouvea, Oliveira, Lopez),\n-     * Section 4.3 (here we use a somewhat higher-precision estimate):\n-     * d = a1*b2 - b1*a2\n-     * g1 = round((2^272)*b2/d)\n-     * g2 = round((2^272)*b1/d)\n-     *\n-     * (Note that 'd' is also equal to the curve order here because [a1,b1] and [a2,b2] are found\n-     * as outputs of the Extended Euclidean Algorithm on inputs 'order' and 'lambda').\n-     */\n-    static const unsigned char secp256k1_scalar_consts_minus_b1[32] = {\n-        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n-        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n-        0xe4,0x43,0x7e,0xd6,0x01,0x0e,0x88,0x28,\n-        0x6f,0x54,0x7f,0xa9,0x0a,0xbf,0xe4,0xc3\n-    };\n-    static const unsigned char secp256k1_scalar_consts_b2[32] = {\n-        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n-        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n-        0x30,0x86,0xd2,0x21,0xa7,0xd4,0x6b,0xcd,\n-        0xe8,0x6c,0x90,0xe4,0x92,0x84,0xeb,0x15\n-    };\n-    static const unsigned char secp256k1_scalar_consts_g1[32] = {\n-        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n-        0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x86,\n-        0xd2,0x21,0xa7,0xd4,0x6b,0xcd,0xe8,0x6c,\n-        0x90,0xe4,0x92,0x84,0xeb,0x15,0x3d,0xab\n-    };\n-    static const unsigned char secp256k1_scalar_consts_g2[32] = {\n-        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n-        0x00,0x00,0x00,0x00,0x00,0x00,0xe4,0x43,\n-        0x7e,0xd6,0x01,0x0e,0x88,0x28,0x6f,0x54,\n-        0x7f,0xa9,0x0a,0xbf,0xe4,0xc4,0x22,0x12\n-    };\n-\n-    secp256k1_scalar_set_b32(&ret->minus_lambda, secp256k1_scalar_consts_lambda, NULL);\n-    secp256k1_scalar_negate(&ret->minus_lambda, &ret->minus_lambda);\n-    secp256k1_scalar_set_b32(&ret->minus_b1, secp256k1_scalar_consts_minus_b1, NULL);\n-    secp256k1_scalar_set_b32(&ret->minus_b2, secp256k1_scalar_consts_b2, NULL);\n-    secp256k1_scalar_negate(&ret->minus_b2, &ret->minus_b2);\n-    secp256k1_scalar_set_b32(&ret->g1, secp256k1_scalar_consts_g1, NULL);\n-    secp256k1_scalar_set_b32(&ret->g2, secp256k1_scalar_consts_g2, NULL);\n-#endif\n-\n-    /* Set the global pointer. */\n-    secp256k1_scalar_consts = ret;\n-}\n-\n-static void secp256k1_scalar_stop(void) {\n-    if (secp256k1_scalar_consts == NULL)\n-        return;\n-\n-    secp256k1_scalar_consts_t *c = (secp256k1_scalar_consts_t*)secp256k1_scalar_consts;\n-    secp256k1_scalar_consts = NULL;\n-    free(c);\n-}\n-\n #ifndef USE_NUM_NONE\n static void secp256k1_scalar_get_num(secp256k1_num_t *r, const secp256k1_scalar_t *a) {\n     unsigned char c[32];\n     secp256k1_scalar_get_b32(c, a);\n     secp256k1_num_set_bin(r, c, 32);\n }\n \n+/** secp256k1 curve order, see secp256k1_ecdsa_const_order_as_fe in ecdsa_impl.h */\n static void secp256k1_scalar_order_get_num(secp256k1_num_t *r) {\n-    *r = secp256k1_scalar_consts->order;\n+    static const unsigned char order[32] = {\n+        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n+        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,\n+        0xBA,0xAE,0xDC,0xE6,0xAF,0x48,0xA0,0x3B,\n+        0xBF,0xD2,0x5E,0x8C,0xD0,0x36,0x41,0x41\n+    };\n+    secp256k1_num_set_bin(r, order, 32);\n }\n #endif\n \n static void secp256k1_scalar_inverse(secp256k1_scalar_t *r, const secp256k1_scalar_t *x) {\n+    secp256k1_scalar_t *t;\n+    int i;\n     /* First compute x ^ (2^N - 1) for some values of N. */\n     secp256k1_scalar_t x2, x3, x4, x6, x7, x8, x15, x30, x60, x120, x127;\n \n@@ -175,129 +69,129 @@ static void secp256k1_scalar_inverse(secp256k1_scalar_t *r, const secp256k1_scal\n     secp256k1_scalar_mul(&x8, &x8,  x);\n \n     secp256k1_scalar_sqr(&x15, &x8);\n-    for (int i=0; i<6; i++)\n+    for (i = 0; i < 6; i++)\n         secp256k1_scalar_sqr(&x15, &x15);\n     secp256k1_scalar_mul(&x15, &x15, &x7);\n \n     secp256k1_scalar_sqr(&x30, &x15);\n-    for (int i=0; i<14; i++)\n+    for (i = 0; i < 14; i++)\n         secp256k1_scalar_sqr(&x30, &x30);\n     secp256k1_scalar_mul(&x30, &x30, &x15);\n \n     secp256k1_scalar_sqr(&x60, &x30);\n-    for (int i=0; i<29; i++)\n+    for (i = 0; i < 29; i++)\n         secp256k1_scalar_sqr(&x60, &x60);\n     secp256k1_scalar_mul(&x60, &x60, &x30);\n \n     secp256k1_scalar_sqr(&x120, &x60);\n-    for (int i=0; i<59; i++)\n+    for (i = 0; i < 59; i++)\n         secp256k1_scalar_sqr(&x120, &x120);\n     secp256k1_scalar_mul(&x120, &x120, &x60);\n \n     secp256k1_scalar_sqr(&x127, &x120);\n-    for (int i=0; i<6; i++)\n+    for (i = 0; i < 6; i++)\n         secp256k1_scalar_sqr(&x127, &x127);\n     secp256k1_scalar_mul(&x127, &x127, &x7);\n \n     /* Then accumulate the final result (t starts at x127). */\n-    secp256k1_scalar_t *t = &x127;\n-    for (int i=0; i<2; i++) /* 0 */\n+    t = &x127;\n+    for (i = 0; i < 2; i++) /* 0 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, x); /* 1 */\n-    for (int i=0; i<4; i++) /* 0 */\n+    for (i = 0; i < 4; i++) /* 0 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, &x3); /* 111 */\n-    for (int i=0; i<2; i++) /* 0 */\n+    for (i = 0; i < 2; i++) /* 0 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, x); /* 1 */\n-    for (int i=0; i<2; i++) /* 0 */\n+    for (i = 0; i < 2; i++) /* 0 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, x); /* 1 */\n-    for (int i=0; i<2; i++) /* 0 */\n+    for (i = 0; i < 2; i++) /* 0 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, x); /* 1 */\n-    for (int i=0; i<4; i++) /* 0 */\n+    for (i = 0; i < 4; i++) /* 0 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, &x3); /* 111 */\n-    for (int i=0; i<3; i++) /* 0 */\n+    for (i = 0; i < 3; i++) /* 0 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, &x2); /* 11 */\n-    for (int i=0; i<4; i++) /* 0 */\n+    for (i = 0; i < 4; i++) /* 0 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, &x3); /* 111 */\n-    for (int i=0; i<5; i++) /* 00 */\n+    for (i = 0; i < 5; i++) /* 00 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, &x3); /* 111 */\n-    for (int i=0; i<4; i++) /* 00 */\n+    for (i = 0; i < 4; i++) /* 00 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, &x2); /* 11 */\n-    for (int i=0; i<2; i++) /* 0 */\n+    for (i = 0; i < 2; i++) /* 0 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, x); /* 1 */\n-    for (int i=0; i<2; i++) /* 0 */\n+    for (i = 0; i < 2; i++) /* 0 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, x); /* 1 */\n-    for (int i=0; i<5; i++) /* 0 */\n+    for (i = 0; i < 5; i++) /* 0 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, &x4); /* 1111 */\n-    for (int i=0; i<2; i++) /* 0 */\n+    for (i = 0; i < 2; i++) /* 0 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, x); /* 1 */\n-    for (int i=0; i<3; i++) /* 00 */\n+    for (i = 0; i < 3; i++) /* 00 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, x); /* 1 */\n-    for (int i=0; i<4; i++) /* 000 */\n+    for (i = 0; i < 4; i++) /* 000 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, x); /* 1 */\n-    for (int i=0; i<2; i++) /* 0 */\n+    for (i = 0; i < 2; i++) /* 0 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, x); /* 1 */\n-    for (int i=0; i<10; i++) /* 0000000 */\n+    for (i = 0; i < 10; i++) /* 0000000 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, &x3); /* 111 */\n-    for (int i=0; i<4; i++) /* 0 */\n+    for (i = 0; i < 4; i++) /* 0 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, &x3); /* 111 */\n-    for (int i=0; i<9; i++) /* 0 */\n+    for (i = 0; i < 9; i++) /* 0 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, &x8); /* 11111111 */\n-    for (int i=0; i<2; i++) /* 0 */\n+    for (i = 0; i < 2; i++) /* 0 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, x); /* 1 */\n-    for (int i=0; i<3; i++) /* 00 */\n+    for (i = 0; i < 3; i++) /* 00 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, x); /* 1 */\n-    for (int i=0; i<3; i++) /* 00 */\n+    for (i = 0; i < 3; i++) /* 00 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, x); /* 1 */\n-    for (int i=0; i<5; i++) /* 0 */\n+    for (i = 0; i < 5; i++) /* 0 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, &x4); /* 1111 */\n-    for (int i=0; i<2; i++) /* 0 */\n+    for (i = 0; i < 2; i++) /* 0 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, x); /* 1 */\n-    for (int i=0; i<5; i++) /* 000 */\n+    for (i = 0; i < 5; i++) /* 000 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, &x2); /* 11 */\n-    for (int i=0; i<4; i++) /* 00 */\n+    for (i = 0; i < 4; i++) /* 00 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, &x2); /* 11 */\n-    for (int i=0; i<2; i++) /* 0 */\n+    for (i = 0; i < 2; i++) /* 0 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, x); /* 1 */\n-    for (int i=0; i<8; i++) /* 000000 */\n+    for (i = 0; i < 8; i++) /* 000000 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, &x2); /* 11 */\n-    for (int i=0; i<3; i++) /* 0 */\n+    for (i = 0; i < 3; i++) /* 0 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, &x2); /* 11 */\n-    for (int i=0; i<3; i++) /* 00 */\n+    for (i = 0; i < 3; i++) /* 00 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, x); /* 1 */\n-    for (int i=0; i<6; i++) /* 00000 */\n+    for (i = 0; i < 6; i++) /* 00000 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(t, t, x); /* 1 */\n-    for (int i=0; i<8; i++) /* 00 */\n+    for (i = 0; i < 8; i++) /* 00 */\n         secp256k1_scalar_sqr(t, t);\n     secp256k1_scalar_mul(r, t, &x6); /* 111111 */\n }\n@@ -307,10 +201,11 @@ static void secp256k1_scalar_inverse_var(secp256k1_scalar_t *r, const secp256k1_\n     secp256k1_scalar_inverse(r, x);\n #elif defined(USE_SCALAR_INV_NUM)\n     unsigned char b[32];\n+    secp256k1_num_t n, m;\n     secp256k1_scalar_get_b32(b, x);\n-    secp256k1_num_t n;\n     secp256k1_num_set_bin(&n, b, 32);\n-    secp256k1_num_mod_inverse(&n, &n, &secp256k1_scalar_consts->order);\n+    secp256k1_scalar_order_get_num(&m);\n+    secp256k1_num_mod_inverse(&n, &n, &m);\n     secp256k1_num_get_bin(b, 32, &n);\n     secp256k1_scalar_set_b32(r, b, NULL);\n #else\n@@ -319,16 +214,74 @@ static void secp256k1_scalar_inverse_var(secp256k1_scalar_t *r, const secp256k1_\n }\n \n #ifdef USE_ENDOMORPHISM\n+/**\n+ * The Secp256k1 curve has an endomorphism, where lambda * (x, y) = (beta * x, y), where\n+ * lambda is {0x53,0x63,0xad,0x4c,0xc0,0x5c,0x30,0xe0,0xa5,0x26,0x1c,0x02,0x88,0x12,0x64,0x5a,\n+ *            0x12,0x2e,0x22,0xea,0x20,0x81,0x66,0x78,0xdf,0x02,0x96,0x7c,0x1b,0x23,0xbd,0x72}\n+ *\n+ * \"Guide to Elliptic Curve Cryptography\" (Hankerson, Menezes, Vanstone) gives an algorithm\n+ * (algorithm 3.74) to find k1 and k2 given k, such that k1 + k2 * lambda == k mod n, and k1\n+ * and k2 have a small size.\n+ * It relies on constants a1, b1, a2, b2. These constants for the value of lambda above are:\n+ *\n+ * - a1 =      {0x30,0x86,0xd2,0x21,0xa7,0xd4,0x6b,0xcd,0xe8,0x6c,0x90,0xe4,0x92,0x84,0xeb,0x15}\n+ * - b1 =     -{0xe4,0x43,0x7e,0xd6,0x01,0x0e,0x88,0x28,0x6f,0x54,0x7f,0xa9,0x0a,0xbf,0xe4,0xc3}\n+ * - a2 = {0x01,0x14,0xca,0x50,0xf7,0xa8,0xe2,0xf3,0xf6,0x57,0xc1,0x10,0x8d,0x9d,0x44,0xcf,0xd8}\n+ * - b2 =      {0x30,0x86,0xd2,0x21,0xa7,0xd4,0x6b,0xcd,0xe8,0x6c,0x90,0xe4,0x92,0x84,0xeb,0x15}\n+ *\n+ * The algorithm then computes c1 = round(b1 * k / n) and c2 = round(b2 * k / n), and gives\n+ * k1 = k - (c1*a1 + c2*a2) and k2 = -(c1*b1 + c2*b2). Instead, we use modular arithmetic, and\n+ * compute k1 as k - k2 * lambda, avoiding the need for constants a1 and a2.\n+ *\n+ * g1, g2 are precomputed constants used to replace division with a rounded multiplication\n+ * when decomposing the scalar for an endomorphism-based point multiplication.\n+ *\n+ * The possibility of using precomputed estimates is mentioned in \"Guide to Elliptic Curve\n+ * Cryptography\" (Hankerson, Menezes, Vanstone) in section 3.5.\n+ *\n+ * The derivation is described in the paper \"Efficient Software Implementation of Public-Key\n+ * Cryptography on Sensor Networks Using the MSP430X Microcontroller\" (Gouvea, Oliveira, Lopez),\n+ * Section 4.3 (here we use a somewhat higher-precision estimate):\n+ * d = a1*b2 - b1*a2\n+ * g1 = round((2^272)*b2/d)\n+ * g2 = round((2^272)*b1/d)\n+ *\n+ * (Note that 'd' is also equal to the curve order here because [a1,b1] and [a2,b2] are found\n+ * as outputs of the Extended Euclidean Algorithm on inputs 'order' and 'lambda').\n+ *\n+ * The function below splits a in r1 and r2, such that r1 + lambda * r2 == a (mod order).\n+ */\n+\n static void secp256k1_scalar_split_lambda_var(secp256k1_scalar_t *r1, secp256k1_scalar_t *r2, const secp256k1_scalar_t *a) {\n+    secp256k1_scalar_t c1, c2;\n+    static const secp256k1_scalar_t minus_lambda = SECP256K1_SCALAR_CONST(\n+        0xAC9C52B3UL, 0x3FA3CF1FUL, 0x5AD9E3FDUL, 0x77ED9BA4UL,\n+        0xA880B9FCUL, 0x8EC739C2UL, 0xE0CFC810UL, 0xB51283CFUL\n+    );\n+    static const secp256k1_scalar_t minus_b1 = SECP256K1_SCALAR_CONST(\n+        0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+        0xE4437ED6UL, 0x010E8828UL, 0x6F547FA9UL, 0x0ABFE4C3UL\n+    );\n+    static const secp256k1_scalar_t minus_b2 = SECP256K1_SCALAR_CONST(\n+        0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFEUL,\n+        0x8A280AC5UL, 0x0774346DUL, 0xD765CDA8UL, 0x3DB1562CUL\n+    );\n+    static const secp256k1_scalar_t g1 = SECP256K1_SCALAR_CONST(\n+        0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00003086UL,\n+        0xD221A7D4UL, 0x6BCDE86CUL, 0x90E49284UL, 0xEB153DABUL\n+    );\n+    static const secp256k1_scalar_t g2 = SECP256K1_SCALAR_CONST(\n+        0x00000000UL, 0x00000000UL, 0x00000000UL, 0x0000E443UL,\n+        0x7ED6010EUL, 0x88286F54UL, 0x7FA90ABFUL, 0xE4C42212UL\n+    );\n     VERIFY_CHECK(r1 != a);\n     VERIFY_CHECK(r2 != a);\n-    secp256k1_scalar_t c1, c2;\n-    secp256k1_scalar_mul_shift_var(&c1, a, &secp256k1_scalar_consts->g1, 272);\n-    secp256k1_scalar_mul_shift_var(&c2, a, &secp256k1_scalar_consts->g2, 272);\n-    secp256k1_scalar_mul(&c1, &c1, &secp256k1_scalar_consts->minus_b1);\n-    secp256k1_scalar_mul(&c2, &c2, &secp256k1_scalar_consts->minus_b2);\n+    secp256k1_scalar_mul_shift_var(&c1, a, &g1, 272);\n+    secp256k1_scalar_mul_shift_var(&c2, a, &g2, 272);\n+    secp256k1_scalar_mul(&c1, &c1, &minus_b1);\n+    secp256k1_scalar_mul(&c2, &c2, &minus_b2);\n     secp256k1_scalar_add(r2, &c1, &c2);\n-    secp256k1_scalar_mul(r1, r2, &secp256k1_scalar_consts->minus_lambda);\n+    secp256k1_scalar_mul(r1, r2, &minus_lambda);\n     secp256k1_scalar_add(r1, r1, a);\n }\n #endif"
      },
      {
        "sha": "8c4eca4b6291992959bffb5f4dc1e3d59f30281b",
        "filename": "src/secp256k1/src/secp256k1.c",
        "status": "modified",
        "additions": 165,
        "deletions": 146,
        "changes": 311,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/secp256k1.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/secp256k1.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/secp256k1.c?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -20,10 +20,6 @@\n #include \"hash_impl.h\"\n \n void secp256k1_start(unsigned int flags) {\n-    secp256k1_fe_start();\n-    secp256k1_ge_start();\n-    secp256k1_scalar_start();\n-    secp256k1_ecdsa_start();\n     if (flags & SECP256K1_START_SIGN) {\n         secp256k1_ecmult_gen_start();\n     }\n@@ -35,46 +31,43 @@ void secp256k1_start(unsigned int flags) {\n void secp256k1_stop(void) {\n     secp256k1_ecmult_stop();\n     secp256k1_ecmult_gen_stop();\n-    secp256k1_ecdsa_stop();\n-    secp256k1_scalar_stop();\n-    secp256k1_ge_stop();\n-    secp256k1_fe_stop();\n }\n \n int secp256k1_ecdsa_verify(const unsigned char *msg32, const unsigned char *sig, int siglen, const unsigned char *pubkey, int pubkeylen) {\n+    secp256k1_ge_t q;\n+    secp256k1_ecdsa_sig_t s;\n+    secp256k1_scalar_t m;\n+    int ret = -3;\n     DEBUG_CHECK(secp256k1_ecmult_consts != NULL);\n     DEBUG_CHECK(msg32 != NULL);\n     DEBUG_CHECK(sig != NULL);\n     DEBUG_CHECK(pubkey != NULL);\n \n-    int ret = -3;\n-    secp256k1_scalar_t m;\n-    secp256k1_ecdsa_sig_t s;\n-    secp256k1_ge_t q;\n     secp256k1_scalar_set_b32(&m, msg32, NULL);\n \n-    if (!secp256k1_eckey_pubkey_parse(&q, pubkey, pubkeylen)) {\n+    if (secp256k1_eckey_pubkey_parse(&q, pubkey, pubkeylen)) {\n+        if (secp256k1_ecdsa_sig_parse(&s, sig, siglen)) {\n+            if (secp256k1_ecdsa_sig_verify(&s, &q, &m)) {\n+                /* success is 1, all other values are fail */\n+                ret = 1;\n+            } else {\n+                ret = 0;\n+            }\n+        } else {\n+            ret = -2;\n+        }\n+    } else {\n         ret = -1;\n-        goto end;\n-    }\n-    if (!secp256k1_ecdsa_sig_parse(&s, sig, siglen)) {\n-        ret = -2;\n-        goto end;\n     }\n-    if (!secp256k1_ecdsa_sig_verify(&s, &q, &m)) {\n-        ret = 0;\n-        goto end;\n-    }\n-    ret = 1;\n-end:\n+\n     return ret;\n }\n \n static int nonce_function_rfc6979(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, unsigned int counter, const void *data) {\n-   (void)data;\n    secp256k1_rfc6979_hmac_sha256_t rng;\n-   secp256k1_rfc6979_hmac_sha256_initialize(&rng, key32, 32, msg32, 32);\n-   for (unsigned int i = 0; i <= counter; i++) {\n+   unsigned int i;\n+   secp256k1_rfc6979_hmac_sha256_initialize(&rng, key32, 32, msg32, 32, data, data != NULL ? 32 : 0);\n+   for (i = 0; i <= counter; i++) {\n        secp256k1_rfc6979_hmac_sha256_generate(&rng, nonce32, 32);\n    }\n    secp256k1_rfc6979_hmac_sha256_finalize(&rng);\n@@ -85,6 +78,11 @@ const secp256k1_nonce_function_t secp256k1_nonce_function_rfc6979 = nonce_functi\n const secp256k1_nonce_function_t secp256k1_nonce_function_default = nonce_function_rfc6979;\n \n int secp256k1_ecdsa_sign(const unsigned char *msg32, unsigned char *signature, int *signaturelen, const unsigned char *seckey, secp256k1_nonce_function_t noncefp, const void* noncedata) {\n+    secp256k1_ecdsa_sig_t sig;\n+    secp256k1_scalar_t sec, non, msg;\n+    int ret = 0;\n+    int overflow = 0;\n+    unsigned int count = 0;\n     DEBUG_CHECK(secp256k1_ecmult_gen_consts != NULL);\n     DEBUG_CHECK(msg32 != NULL);\n     DEBUG_CHECK(signature != NULL);\n@@ -94,38 +92,44 @@ int secp256k1_ecdsa_sign(const unsigned char *msg32, unsigned char *signature, i\n         noncefp = secp256k1_nonce_function_default;\n     }\n \n-    secp256k1_scalar_t sec, non, msg;\n-    secp256k1_scalar_set_b32(&sec, seckey, NULL);\n-    secp256k1_scalar_set_b32(&msg, msg32, NULL);\n-    int overflow = 0;\n-    int ret = 0;\n-    unsigned int count = 0;\n-    secp256k1_ecdsa_sig_t sig;\n-    while (1) {\n-        unsigned char nonce32[32];\n-        ret = noncefp(nonce32, msg32, seckey, count, noncedata);\n-        if (!ret) {\n-            break;\n-        }\n-        secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n-        memset(nonce32, 0, 32);\n-        if (!secp256k1_scalar_is_zero(&non) && !overflow) {\n-            if (secp256k1_ecdsa_sig_sign(&sig, &sec, &msg, &non, NULL)) {\n+    secp256k1_scalar_set_b32(&sec, seckey, &overflow);\n+    /* Fail if the secret key is invalid. */\n+    if (!overflow && !secp256k1_scalar_is_zero(&sec)) {\n+        secp256k1_scalar_set_b32(&msg, msg32, NULL);\n+        while (1) {\n+            unsigned char nonce32[32];\n+            ret = noncefp(nonce32, msg32, seckey, count, noncedata);\n+            if (!ret) {\n                 break;\n             }\n+            secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n+            memset(nonce32, 0, 32);\n+            if (!secp256k1_scalar_is_zero(&non) && !overflow) {\n+                if (secp256k1_ecdsa_sig_sign(&sig, &sec, &msg, &non, NULL)) {\n+                    break;\n+                }\n+            }\n+            count++;\n+        }\n+        if (ret) {\n+            ret = secp256k1_ecdsa_sig_serialize(signature, signaturelen, &sig);\n         }\n-        count++;\n+        secp256k1_scalar_clear(&msg);\n+        secp256k1_scalar_clear(&non);\n+        secp256k1_scalar_clear(&sec);\n     }\n-    if (ret) {\n-        ret = secp256k1_ecdsa_sig_serialize(signature, signaturelen, &sig);\n+    if (!ret) {\n+        *signaturelen = 0;\n     }\n-    secp256k1_scalar_clear(&msg);\n-    secp256k1_scalar_clear(&non);\n-    secp256k1_scalar_clear(&sec);\n     return ret;\n }\n \n int secp256k1_ecdsa_sign_compact(const unsigned char *msg32, unsigned char *sig64, const unsigned char *seckey, secp256k1_nonce_function_t noncefp, const void* noncedata, int *recid) {\n+    secp256k1_ecdsa_sig_t sig;\n+    secp256k1_scalar_t sec, non, msg;\n+    int ret = 0;\n+    int overflow = 0;\n+    unsigned int count = 0;\n     DEBUG_CHECK(secp256k1_ecmult_gen_consts != NULL);\n     DEBUG_CHECK(msg32 != NULL);\n     DEBUG_CHECK(sig64 != NULL);\n@@ -134,122 +138,133 @@ int secp256k1_ecdsa_sign_compact(const unsigned char *msg32, unsigned char *sig6\n         noncefp = secp256k1_nonce_function_default;\n     }\n \n-    secp256k1_scalar_t sec, non, msg;\n-    secp256k1_scalar_set_b32(&sec, seckey, NULL);\n-    secp256k1_scalar_set_b32(&msg, msg32, NULL);\n-    int overflow = 0;\n-    int ret = 0;\n-    unsigned int count = 0;\n-    secp256k1_ecdsa_sig_t sig;\n-    while (1) {\n-        unsigned char nonce32[32];\n-        ret = noncefp(nonce32, msg32, seckey, count, noncedata);\n-        if (!ret) {\n-            break;\n-        }\n-        secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n-        memset(nonce32, 0, 32);\n-        if (!secp256k1_scalar_is_zero(&non) && !overflow) {\n-            if (secp256k1_ecdsa_sig_sign(&sig, &sec, &msg, &non, recid)) {\n+    secp256k1_scalar_set_b32(&sec, seckey, &overflow);\n+    /* Fail if the secret key is invalid. */\n+    if (!overflow && !secp256k1_scalar_is_zero(&sec)) {\n+        secp256k1_scalar_set_b32(&msg, msg32, NULL);\n+        while (1) {\n+            unsigned char nonce32[32];\n+            ret = noncefp(nonce32, msg32, seckey, count, noncedata);\n+            if (!ret) {\n                 break;\n             }\n+            secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n+            memset(nonce32, 0, 32);\n+            if (!secp256k1_scalar_is_zero(&non) && !overflow) {\n+                if (secp256k1_ecdsa_sig_sign(&sig, &sec, &msg, &non, recid)) {\n+                    break;\n+                }\n+            }\n+            count++;\n+        }\n+        if (ret) {\n+            secp256k1_scalar_get_b32(sig64, &sig.r);\n+            secp256k1_scalar_get_b32(sig64 + 32, &sig.s);\n         }\n-        count++;\n+        secp256k1_scalar_clear(&msg);\n+        secp256k1_scalar_clear(&non);\n+        secp256k1_scalar_clear(&sec);\n     }\n-    if (ret) {\n-        secp256k1_scalar_get_b32(sig64, &sig.r);\n-        secp256k1_scalar_get_b32(sig64 + 32, &sig.s);\n+    if (!ret) {\n+        memset(sig64, 0, 64);\n     }\n-    secp256k1_scalar_clear(&msg);\n-    secp256k1_scalar_clear(&non);\n-    secp256k1_scalar_clear(&sec);\n     return ret;\n }\n \n int secp256k1_ecdsa_recover_compact(const unsigned char *msg32, const unsigned char *sig64, unsigned char *pubkey, int *pubkeylen, int compressed, int recid) {\n+    secp256k1_ge_t q;\n+    secp256k1_ecdsa_sig_t sig;\n+    secp256k1_scalar_t m;\n+    int ret = 0;\n+    int overflow = 0;\n     DEBUG_CHECK(secp256k1_ecmult_consts != NULL);\n     DEBUG_CHECK(msg32 != NULL);\n     DEBUG_CHECK(sig64 != NULL);\n     DEBUG_CHECK(pubkey != NULL);\n     DEBUG_CHECK(pubkeylen != NULL);\n     DEBUG_CHECK(recid >= 0 && recid <= 3);\n \n-    int ret = 0;\n-    secp256k1_scalar_t m;\n-    secp256k1_ecdsa_sig_t sig;\n-    int overflow = 0;\n     secp256k1_scalar_set_b32(&sig.r, sig64, &overflow);\n-    if (overflow) {\n-        return 0;\n-    }\n-    secp256k1_scalar_set_b32(&sig.s, sig64 + 32, &overflow);\n-    if (overflow) {\n-        return 0;\n-    }\n-    secp256k1_scalar_set_b32(&m, msg32, NULL);\n+    if (!overflow) {\n+        secp256k1_scalar_set_b32(&sig.s, sig64 + 32, &overflow);\n+        if (!overflow) {\n+            secp256k1_scalar_set_b32(&m, msg32, NULL);\n \n-    secp256k1_ge_t q;\n-    if (secp256k1_ecdsa_sig_recover(&sig, &q, &m, recid)) {\n-        ret = secp256k1_eckey_pubkey_serialize(&q, pubkey, pubkeylen, compressed);\n+            if (secp256k1_ecdsa_sig_recover(&sig, &q, &m, recid)) {\n+                ret = secp256k1_eckey_pubkey_serialize(&q, pubkey, pubkeylen, compressed);\n+            }\n+        }\n     }\n     return ret;\n }\n \n int secp256k1_ec_seckey_verify(const unsigned char *seckey) {\n-    DEBUG_CHECK(seckey != NULL);\n-\n     secp256k1_scalar_t sec;\n+    int ret;\n     int overflow;\n+    DEBUG_CHECK(seckey != NULL);\n+\n     secp256k1_scalar_set_b32(&sec, seckey, &overflow);\n-    int ret = !secp256k1_scalar_is_zero(&sec) && !overflow;\n+    ret = !secp256k1_scalar_is_zero(&sec) && !overflow;\n     secp256k1_scalar_clear(&sec);\n     return ret;\n }\n \n int secp256k1_ec_pubkey_verify(const unsigned char *pubkey, int pubkeylen) {\n+    secp256k1_ge_t q;\n     DEBUG_CHECK(pubkey != NULL);\n \n-    secp256k1_ge_t q;\n     return secp256k1_eckey_pubkey_parse(&q, pubkey, pubkeylen);\n }\n \n int secp256k1_ec_pubkey_create(unsigned char *pubkey, int *pubkeylen, const unsigned char *seckey, int compressed) {\n+    secp256k1_gej_t pj;\n+    secp256k1_ge_t p;\n+    secp256k1_scalar_t sec;\n+    int overflow;\n+    int ret = 0;\n     DEBUG_CHECK(secp256k1_ecmult_gen_consts != NULL);\n     DEBUG_CHECK(pubkey != NULL);\n     DEBUG_CHECK(pubkeylen != NULL);\n     DEBUG_CHECK(seckey != NULL);\n \n-    secp256k1_scalar_t sec;\n-    secp256k1_scalar_set_b32(&sec, seckey, NULL);\n-    secp256k1_gej_t pj;\n-    secp256k1_ecmult_gen(&pj, &sec);\n-    secp256k1_scalar_clear(&sec);\n-    secp256k1_ge_t p;\n-    secp256k1_ge_set_gej(&p, &pj);\n-    return secp256k1_eckey_pubkey_serialize(&p, pubkey, pubkeylen, compressed);\n+    secp256k1_scalar_set_b32(&sec, seckey, &overflow);\n+    if (!overflow) {\n+        secp256k1_ecmult_gen(&pj, &sec);\n+        secp256k1_scalar_clear(&sec);\n+        secp256k1_ge_set_gej(&p, &pj);\n+        ret = secp256k1_eckey_pubkey_serialize(&p, pubkey, pubkeylen, compressed);\n+    }\n+    if (!ret) {\n+        *pubkeylen = 0;\n+    }\n+    return ret;\n }\n \n int secp256k1_ec_pubkey_decompress(unsigned char *pubkey, int *pubkeylen) {\n+    secp256k1_ge_t p;\n+    int ret = 0;\n     DEBUG_CHECK(pubkey != NULL);\n     DEBUG_CHECK(pubkeylen != NULL);\n \n-    secp256k1_ge_t p;\n-    if (!secp256k1_eckey_pubkey_parse(&p, pubkey, *pubkeylen))\n-        return 0;\n-    return secp256k1_eckey_pubkey_serialize(&p, pubkey, pubkeylen, 0);\n+    if (secp256k1_eckey_pubkey_parse(&p, pubkey, *pubkeylen)) {\n+        ret = secp256k1_eckey_pubkey_serialize(&p, pubkey, pubkeylen, 0);\n+    }\n+    return ret;\n }\n \n int secp256k1_ec_privkey_tweak_add(unsigned char *seckey, const unsigned char *tweak) {\n+    secp256k1_scalar_t term;\n+    secp256k1_scalar_t sec;\n+    int ret = 0;\n+    int overflow = 0;\n     DEBUG_CHECK(seckey != NULL);\n     DEBUG_CHECK(tweak != NULL);\n \n-    secp256k1_scalar_t term;\n-    int overflow = 0;\n     secp256k1_scalar_set_b32(&term, tweak, &overflow);\n-    secp256k1_scalar_t sec;\n     secp256k1_scalar_set_b32(&sec, seckey, NULL);\n \n-    int ret = secp256k1_eckey_privkey_tweak_add(&sec, &term) && !overflow;\n+    ret = secp256k1_eckey_privkey_tweak_add(&sec, &term) && !overflow;\n     if (ret) {\n         secp256k1_scalar_get_b32(seckey, &sec);\n     }\n@@ -260,40 +275,41 @@ int secp256k1_ec_privkey_tweak_add(unsigned char *seckey, const unsigned char *t\n }\n \n int secp256k1_ec_pubkey_tweak_add(unsigned char *pubkey, int pubkeylen, const unsigned char *tweak) {\n+    secp256k1_ge_t p;\n+    secp256k1_scalar_t term;\n+    int ret = 0;\n+    int overflow = 0;\n     DEBUG_CHECK(secp256k1_ecmult_consts != NULL);\n     DEBUG_CHECK(pubkey != NULL);\n     DEBUG_CHECK(tweak != NULL);\n \n-    secp256k1_scalar_t term;\n-    int overflow = 0;\n     secp256k1_scalar_set_b32(&term, tweak, &overflow);\n-    if (overflow) {\n-        return 0;\n-    }\n-    secp256k1_ge_t p;\n-    int ret = secp256k1_eckey_pubkey_parse(&p, pubkey, pubkeylen);\n-    if (ret) {\n-        ret = secp256k1_eckey_pubkey_tweak_add(&p, &term);\n-    }\n-    if (ret) {\n-        int oldlen = pubkeylen;\n-        ret = secp256k1_eckey_pubkey_serialize(&p, pubkey, &pubkeylen, oldlen <= 33);\n-        VERIFY_CHECK(pubkeylen == oldlen);\n+    if (!overflow) {\n+        ret = secp256k1_eckey_pubkey_parse(&p, pubkey, pubkeylen);\n+        if (ret) {\n+            ret = secp256k1_eckey_pubkey_tweak_add(&p, &term);\n+        }\n+        if (ret) {\n+            int oldlen = pubkeylen;\n+            ret = secp256k1_eckey_pubkey_serialize(&p, pubkey, &pubkeylen, oldlen <= 33);\n+            VERIFY_CHECK(pubkeylen == oldlen);\n+        }\n     }\n \n     return ret;\n }\n \n int secp256k1_ec_privkey_tweak_mul(unsigned char *seckey, const unsigned char *tweak) {\n+    secp256k1_scalar_t factor;\n+    secp256k1_scalar_t sec;\n+    int ret = 0;\n+    int overflow = 0;\n     DEBUG_CHECK(seckey != NULL);\n     DEBUG_CHECK(tweak != NULL);\n \n-    secp256k1_scalar_t factor;\n-    int overflow = 0;\n     secp256k1_scalar_set_b32(&factor, tweak, &overflow);\n-    secp256k1_scalar_t sec;\n     secp256k1_scalar_set_b32(&sec, seckey, NULL);\n-    int ret = secp256k1_eckey_privkey_tweak_mul(&sec, &factor) && !overflow;\n+    ret = secp256k1_eckey_privkey_tweak_mul(&sec, &factor) && !overflow;\n     if (ret) {\n         secp256k1_scalar_get_b32(seckey, &sec);\n     }\n@@ -304,50 +320,53 @@ int secp256k1_ec_privkey_tweak_mul(unsigned char *seckey, const unsigned char *t\n }\n \n int secp256k1_ec_pubkey_tweak_mul(unsigned char *pubkey, int pubkeylen, const unsigned char *tweak) {\n+    secp256k1_ge_t p;\n+    secp256k1_scalar_t factor;\n+    int ret = 0;\n+    int overflow = 0;\n     DEBUG_CHECK(secp256k1_ecmult_consts != NULL);\n     DEBUG_CHECK(pubkey != NULL);\n     DEBUG_CHECK(tweak != NULL);\n \n-    secp256k1_scalar_t factor;\n-    int overflow = 0;\n     secp256k1_scalar_set_b32(&factor, tweak, &overflow);\n-    if (overflow) {\n-        return 0;\n-    }\n-    secp256k1_ge_t p;\n-    int ret = secp256k1_eckey_pubkey_parse(&p, pubkey, pubkeylen);\n-    if (ret) {\n-        ret = secp256k1_eckey_pubkey_tweak_mul(&p, &factor);\n-    }\n-    if (ret) {\n-        int oldlen = pubkeylen;\n-        ret = secp256k1_eckey_pubkey_serialize(&p, pubkey, &pubkeylen, oldlen <= 33);\n-        VERIFY_CHECK(pubkeylen == oldlen);\n+    if (!overflow) {\n+        ret = secp256k1_eckey_pubkey_parse(&p, pubkey, pubkeylen);\n+        if (ret) {\n+            ret = secp256k1_eckey_pubkey_tweak_mul(&p, &factor);\n+        }\n+        if (ret) {\n+            int oldlen = pubkeylen;\n+            ret = secp256k1_eckey_pubkey_serialize(&p, pubkey, &pubkeylen, oldlen <= 33);\n+            VERIFY_CHECK(pubkeylen == oldlen);\n+        }\n     }\n \n     return ret;\n }\n \n int secp256k1_ec_privkey_export(const unsigned char *seckey, unsigned char *privkey, int *privkeylen, int compressed) {\n+    secp256k1_scalar_t key;\n+    int ret = 0;\n     DEBUG_CHECK(seckey != NULL);\n     DEBUG_CHECK(privkey != NULL);\n     DEBUG_CHECK(privkeylen != NULL);\n \n-    secp256k1_scalar_t key;\n     secp256k1_scalar_set_b32(&key, seckey, NULL);\n-    int ret = secp256k1_eckey_privkey_serialize(privkey, privkeylen, &key, compressed);\n+    ret = secp256k1_eckey_privkey_serialize(privkey, privkeylen, &key, compressed);\n     secp256k1_scalar_clear(&key);\n     return ret;\n }\n \n int secp256k1_ec_privkey_import(unsigned char *seckey, const unsigned char *privkey, int privkeylen) {\n+    secp256k1_scalar_t key;\n+    int ret = 0;\n     DEBUG_CHECK(seckey != NULL);\n     DEBUG_CHECK(privkey != NULL);\n \n-    secp256k1_scalar_t key;\n-    int ret = secp256k1_eckey_privkey_parse(&key, privkey, privkeylen);\n-    if (ret)\n+    ret = secp256k1_eckey_privkey_parse(&key, privkey, privkeylen);\n+    if (ret) {\n         secp256k1_scalar_get_b32(seckey, &key);\n+    }\n     secp256k1_scalar_clear(&key);\n     return ret;\n }"
      },
      {
        "sha": "041bb92c47aa52b5f4d94357bcf0d1f0115a7d3c",
        "filename": "src/secp256k1/src/testrand.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/testrand.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/testrand.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/testrand.h?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -11,8 +11,10 @@\n #include \"libsecp256k1-config.h\"\n #endif\n \n-/** Seed the pseudorandom number generator. */\n-SECP256K1_INLINE static void secp256k1_rand_seed(uint64_t v);\n+/* A non-cryptographic RNG used only for test infrastructure. */\n+\n+/** Seed the pseudorandom number generator for testing. */\n+SECP256K1_INLINE static void secp256k1_rand_seed(const unsigned char *seed16);\n \n /** Generate a pseudorandom 32-bit number. */\n static uint32_t secp256k1_rand32(void);"
      },
      {
        "sha": "21c69f1c51eb45b277290f611521e489a20ee9ff",
        "filename": "src/secp256k1/src/testrand_impl.h",
        "status": "modified",
        "additions": 24,
        "deletions": 24,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/testrand_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/testrand_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/testrand_impl.h?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -11,44 +11,44 @@\n #include <string.h>\n \n #include \"testrand.h\"\n+#include \"hash.h\"\n \n-static uint32_t secp256k1_Rz = 11, secp256k1_Rw = 11;\n+static secp256k1_rfc6979_hmac_sha256_t secp256k1_test_rng;\n+static uint32_t secp256k1_test_rng_precomputed[8];\n+static int secp256k1_test_rng_precomputed_used = 8;\n \n-SECP256K1_INLINE static void secp256k1_rand_seed(uint64_t v) {\n-    secp256k1_Rz = v >> 32;\n-    secp256k1_Rw = v;\n-\n-    if (secp256k1_Rz == 0 || secp256k1_Rz == 0x9068ffffU) {\n-        secp256k1_Rz = 111;\n-    }\n-    if (secp256k1_Rw == 0 || secp256k1_Rw == 0x464fffffU) {\n-        secp256k1_Rw = 111;\n-    }\n+SECP256K1_INLINE static void secp256k1_rand_seed(const unsigned char *seed16) {\n+    secp256k1_rfc6979_hmac_sha256_initialize(&secp256k1_test_rng, (const unsigned char*)\"TestRNG\", 7, seed16, 16, NULL, 0);\n }\n \n SECP256K1_INLINE static uint32_t secp256k1_rand32(void) {\n-    secp256k1_Rz = 36969 * (secp256k1_Rz & 0xFFFF) + (secp256k1_Rz >> 16);\n-    secp256k1_Rw = 18000 * (secp256k1_Rw & 0xFFFF) + (secp256k1_Rw >> 16);\n-    return (secp256k1_Rw << 16) + (secp256k1_Rw >> 16) + secp256k1_Rz;\n+    if (secp256k1_test_rng_precomputed_used == 8) {\n+        secp256k1_rfc6979_hmac_sha256_generate(&secp256k1_test_rng, (unsigned char*)(&secp256k1_test_rng_precomputed[0]), sizeof(secp256k1_test_rng_precomputed));\n+        secp256k1_test_rng_precomputed_used = 0;\n+    }\n+    return secp256k1_test_rng_precomputed[secp256k1_test_rng_precomputed_used++];\n }\n \n static void secp256k1_rand256(unsigned char *b32) {\n-    for (int i=0; i<8; i++) {\n-        uint32_t r = secp256k1_rand32();\n-        b32[i*4 + 0] = (r >>  0) & 0xFF;\n-        b32[i*4 + 1] = (r >>  8) & 0xFF;\n-        b32[i*4 + 2] = (r >> 16) & 0xFF;\n-        b32[i*4 + 3] = (r >> 24) & 0xFF;\n-    }\n+    secp256k1_rfc6979_hmac_sha256_generate(&secp256k1_test_rng, b32, 32);\n }\n \n static void secp256k1_rand256_test(unsigned char *b32) {\n     int bits=0;\n+    uint64_t ent = 0;\n+    int entleft = 0;\n     memset(b32, 0, 32);\n     while (bits < 256) {\n-        uint32_t ent = secp256k1_rand32();\n-        int now = 1 + ((ent % 64)*((ent >> 6) % 32)+16)/31;\n-        uint32_t val = 1 & (ent >> 11);\n+        int now;\n+        uint32_t val;\n+        if (entleft < 12) {\n+            ent |= ((uint64_t)secp256k1_rand32()) << entleft;\n+            entleft += 32;\n+        }\n+        now = 1 + ((ent % 64)*((ent >> 6) % 32)+16)/31;\n+        val = 1 & (ent >> 11);\n+        ent >>= 12;\n+        entleft -= 12;\n         while (now > 0 && bits < 256) {\n             b32[bits / 8] |= val << (bits % 8);\n             now--;"
      },
      {
        "sha": "f7f1acac6463f99d11509be6a905f5d2bc984b42",
        "filename": "src/secp256k1/src/tests.c",
        "status": "modified",
        "additions": 407,
        "deletions": 244,
        "changes": 651,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/tests.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/tests.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/tests.c?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -36,12 +36,12 @@ void random_field_element_test(secp256k1_fe_t *fe) {\n }\n \n void random_field_element_magnitude(secp256k1_fe_t *fe) {\n+    secp256k1_fe_t zero;\n     int n = secp256k1_rand32() % 9;\n     secp256k1_fe_normalize(fe);\n     if (n == 0) {\n         return;\n     }\n-    secp256k1_fe_t zero;\n     secp256k1_fe_clear(&zero);\n     secp256k1_fe_negate(&zero, &zero, 0);\n     secp256k1_fe_mul_int(&zero, n - 1);\n@@ -61,14 +61,15 @@ void random_group_element_test(secp256k1_ge_t *ge) {\n }\n \n void random_group_element_jacobian_test(secp256k1_gej_t *gej, const secp256k1_ge_t *ge) {\n+    secp256k1_fe_t z2, z3;\n     do {\n         random_field_element_test(&gej->z);\n         if (!secp256k1_fe_is_zero(&gej->z)) {\n             break;\n         }\n     } while(1);\n-    secp256k1_fe_t z2; secp256k1_fe_sqr(&z2, &gej->z);\n-    secp256k1_fe_t z3; secp256k1_fe_mul(&z3, &z2, &gej->z);\n+    secp256k1_fe_sqr(&z2, &gej->z);\n+    secp256k1_fe_mul(&z3, &z2, &gej->z);\n     secp256k1_fe_mul(&gej->x, &ge->x, &z2);\n     secp256k1_fe_mul(&gej->y, &ge->y, &z3);\n     gej->infinity = ge->infinity;\n@@ -77,8 +78,8 @@ void random_group_element_jacobian_test(secp256k1_gej_t *gej, const secp256k1_ge\n void random_scalar_order_test(secp256k1_scalar_t *num) {\n     do {\n         unsigned char b32[32];\n-        secp256k1_rand256_test(b32);\n         int overflow = 0;\n+        secp256k1_rand256_test(b32);\n         secp256k1_scalar_set_b32(num, b32, &overflow);\n         if (overflow || secp256k1_scalar_is_zero(num))\n             continue;\n@@ -89,8 +90,8 @@ void random_scalar_order_test(secp256k1_scalar_t *num) {\n void random_scalar_order(secp256k1_scalar_t *num) {\n     do {\n         unsigned char b32[32];\n-        secp256k1_rand256(b32);\n         int overflow = 0;\n+        secp256k1_rand256(b32);\n         secp256k1_scalar_set_b32(num, b32, &overflow);\n         if (overflow || secp256k1_scalar_is_zero(num))\n             continue;\n@@ -117,16 +118,17 @@ void run_sha256_tests(void) {\n         {0xf0, 0x8a, 0x78, 0xcb, 0xba, 0xee, 0x08, 0x2b, 0x05, 0x2a, 0xe0, 0x70, 0x8f, 0x32, 0xfa, 0x1e, 0x50, 0xc5, 0xc4, 0x21, 0xaa, 0x77, 0x2b, 0xa5, 0xdb, 0xb4, 0x06, 0xa2, 0xea, 0x6b, 0xe3, 0x42},\n         {0xab, 0x64, 0xef, 0xf7, 0xe8, 0x8e, 0x2e, 0x46, 0x16, 0x5e, 0x29, 0xf2, 0xbc, 0xe4, 0x18, 0x26, 0xbd, 0x4c, 0x7b, 0x35, 0x52, 0xf6, 0xb3, 0x82, 0xa9, 0xe7, 0xd3, 0xaf, 0x47, 0xc2, 0x45, 0xf8}\n     };\n-    for (int i = 0; i < 8; i++) {\n+    int i;\n+    for (i = 0; i < 8; i++) {\n+        unsigned char out[32];\n         secp256k1_sha256_t hasher;\n         secp256k1_sha256_initialize(&hasher);\n         secp256k1_sha256_write(&hasher, (const unsigned char*)(inputs[i]), strlen(inputs[i]));\n-        unsigned char out[32];\n         secp256k1_sha256_finalize(&hasher, out);\n         CHECK(memcmp(out, outputs[i], 32) == 0);\n         if (strlen(inputs[i]) > 0) {\n-            secp256k1_sha256_initialize(&hasher);\n             int split = secp256k1_rand32() % strlen(inputs[i]);\n+            secp256k1_sha256_initialize(&hasher);\n             secp256k1_sha256_write(&hasher, (const unsigned char*)(inputs[i]), split);\n             secp256k1_sha256_write(&hasher, (const unsigned char*)(inputs[i] + split), strlen(inputs[i]) - split);\n             secp256k1_sha256_finalize(&hasher, out);\n@@ -160,16 +162,17 @@ void run_hmac_sha256_tests(void) {\n         {0x60, 0xe4, 0x31, 0x59, 0x1e, 0xe0, 0xb6, 0x7f, 0x0d, 0x8a, 0x26, 0xaa, 0xcb, 0xf5, 0xb7, 0x7f, 0x8e, 0x0b, 0xc6, 0x21, 0x37, 0x28, 0xc5, 0x14, 0x05, 0x46, 0x04, 0x0f, 0x0e, 0xe3, 0x7f, 0x54},\n         {0x9b, 0x09, 0xff, 0xa7, 0x1b, 0x94, 0x2f, 0xcb, 0x27, 0x63, 0x5f, 0xbc, 0xd5, 0xb0, 0xe9, 0x44, 0xbf, 0xdc, 0x63, 0x64, 0x4f, 0x07, 0x13, 0x93, 0x8a, 0x7f, 0x51, 0x53, 0x5c, 0x3a, 0x35, 0xe2}\n     };\n-    for (int i = 0; i < 6; i++) {\n+    int i;\n+    for (i = 0; i < 6; i++) {\n         secp256k1_hmac_sha256_t hasher;\n+        unsigned char out[32];\n         secp256k1_hmac_sha256_initialize(&hasher, (const unsigned char*)(keys[i]), strlen(keys[i]));\n         secp256k1_hmac_sha256_write(&hasher, (const unsigned char*)(inputs[i]), strlen(inputs[i]));\n-        unsigned char out[32];\n         secp256k1_hmac_sha256_finalize(&hasher, out);\n         CHECK(memcmp(out, outputs[i], 32) == 0);\n         if (strlen(inputs[i]) > 0) {\n-            secp256k1_hmac_sha256_initialize(&hasher, (const unsigned char*)(keys[i]), strlen(keys[i]));\n             int split = secp256k1_rand32() % strlen(inputs[i]);\n+            secp256k1_hmac_sha256_initialize(&hasher, (const unsigned char*)(keys[i]), strlen(keys[i]));\n             secp256k1_hmac_sha256_write(&hasher, (const unsigned char*)(inputs[i]), split);\n             secp256k1_hmac_sha256_write(&hasher, (const unsigned char*)(inputs[i] + split), strlen(inputs[i]) - split);\n             secp256k1_hmac_sha256_finalize(&hasher, out);\n@@ -197,16 +200,25 @@ void run_rfc6979_hmac_sha256_tests(void) {\n \n     secp256k1_rfc6979_hmac_sha256_t rng;\n     unsigned char out[32];\n+    unsigned char zero[1] = {0};\n+    int i;\n \n-    secp256k1_rfc6979_hmac_sha256_initialize(&rng, key1, 32, msg1, 32);\n-    for (int i = 0; i < 3; i++) {\n+    secp256k1_rfc6979_hmac_sha256_initialize(&rng, key1, 32, msg1, 32, NULL, 1);\n+    for (i = 0; i < 3; i++) {\n         secp256k1_rfc6979_hmac_sha256_generate(&rng, out, 32);\n         CHECK(memcmp(out, out1[i], 32) == 0);\n     }\n     secp256k1_rfc6979_hmac_sha256_finalize(&rng);\n \n-    secp256k1_rfc6979_hmac_sha256_initialize(&rng, key2, 32, msg2, 32);\n-    for (int i = 0; i < 3; i++) {\n+    secp256k1_rfc6979_hmac_sha256_initialize(&rng, key1, 32, msg1, 32, zero, 1);\n+    for (i = 0; i < 3; i++) {\n+        secp256k1_rfc6979_hmac_sha256_generate(&rng, out, 32);\n+        CHECK(memcmp(out, out1[i], 32) != 0);\n+    }\n+    secp256k1_rfc6979_hmac_sha256_finalize(&rng);\n+\n+    secp256k1_rfc6979_hmac_sha256_initialize(&rng, key2, 32, msg2, 32, zero, 0);\n+    for (i = 0; i < 3; i++) {\n         secp256k1_rfc6979_hmac_sha256_generate(&rng, out, 32);\n         CHECK(memcmp(out, out2[i], 32) == 0);\n     }\n@@ -254,9 +266,10 @@ void test_num_negate(void) {\n }\n \n void test_num_add_sub(void) {\n-    int r = secp256k1_rand32();\n     secp256k1_num_t n1;\n     secp256k1_num_t n2;\n+    secp256k1_num_t n1p2, n2p1, n1m2, n2m1;\n+    int r = secp256k1_rand32();\n     random_num_order_test(&n1); /* n1 = R1 */\n     if (r & 1) {\n         random_num_negate(&n1);\n@@ -265,7 +278,6 @@ void test_num_add_sub(void) {\n     if (r & 2) {\n         random_num_negate(&n2);\n     }\n-    secp256k1_num_t n1p2, n2p1, n1m2, n2m1;\n     secp256k1_num_add(&n1p2, &n1, &n2); /* n1p2 = R1 + R2 */\n     secp256k1_num_add(&n2p1, &n2, &n1); /* n2p1 = R2 + R1 */\n     secp256k1_num_sub(&n1m2, &n1, &n2); /* n1m2 = R1 - R2 */\n@@ -283,7 +295,8 @@ void test_num_add_sub(void) {\n }\n \n void run_num_smalltests(void) {\n-    for (int i=0; i<100*count; i++) {\n+    int i;\n+    for (i = 0; i < 100*count; i++) {\n         test_num_negate();\n         test_num_add_sub();\n     }\n@@ -293,41 +306,45 @@ void run_num_smalltests(void) {\n /***** SCALAR TESTS *****/\n \n void scalar_test(void) {\n+    secp256k1_scalar_t s;\n+    secp256k1_scalar_t s1;\n+    secp256k1_scalar_t s2;\n+#ifndef USE_NUM_NONE\n+    secp256k1_num_t snum, s1num, s2num;\n+    secp256k1_num_t order, half_order;\n+#endif\n     unsigned char c[32];\n \n     /* Set 's' to a random scalar, with value 'snum'. */\n-    secp256k1_scalar_t s;\n     random_scalar_order_test(&s);\n \n     /* Set 's1' to a random scalar, with value 's1num'. */\n-    secp256k1_scalar_t s1;\n     random_scalar_order_test(&s1);\n \n     /* Set 's2' to a random scalar, with value 'snum2', and byte array representation 'c'. */\n-    secp256k1_scalar_t s2;\n     random_scalar_order_test(&s2);\n     secp256k1_scalar_get_b32(c, &s2);\n \n #ifndef USE_NUM_NONE\n-    secp256k1_num_t snum, s1num, s2num;\n     secp256k1_scalar_get_num(&snum, &s);\n     secp256k1_scalar_get_num(&s1num, &s1);\n     secp256k1_scalar_get_num(&s2num, &s2);\n \n-    secp256k1_num_t order;\n     secp256k1_scalar_order_get_num(&order);\n-    secp256k1_num_t half_order = order;\n+    half_order = order;\n     secp256k1_num_shift(&half_order, 1);\n #endif\n \n     {\n+        int i;\n         /* Test that fetching groups of 4 bits from a scalar and recursing n(i)=16*n(i-1)+p(i) reconstructs it. */\n         secp256k1_scalar_t n;\n         secp256k1_scalar_set_int(&n, 0);\n-        for (int i = 0; i < 256; i += 4) {\n+        for (i = 0; i < 256; i += 4) {\n             secp256k1_scalar_t t;\n+            int j;\n             secp256k1_scalar_set_int(&t, secp256k1_scalar_get_bits(&s, 256 - 4 - i, 4));\n-            for (int j = 0; j < 4; j++) {\n+            for (j = 0; j < 4; j++) {\n                 secp256k1_scalar_add(&n, &n, &n);\n             }\n             secp256k1_scalar_add(&n, &n, &t);\n@@ -338,16 +355,17 @@ void scalar_test(void) {\n     {\n         /* Test that fetching groups of randomly-sized bits from a scalar and recursing n(i)=b*n(i-1)+p(i) reconstructs it. */\n         secp256k1_scalar_t n;\n-        secp256k1_scalar_set_int(&n, 0);\n         int i = 0;\n+        secp256k1_scalar_set_int(&n, 0);\n         while (i < 256) {\n+            secp256k1_scalar_t t;\n+            int j;\n             int now = (secp256k1_rand32() % 15) + 1;\n             if (now + i > 256) {\n                 now = 256 - i;\n             }\n-            secp256k1_scalar_t t;\n             secp256k1_scalar_set_int(&t, secp256k1_scalar_get_bits_var(&s, 256 - now - i, now));\n-            for (int j = 0; j < now; j++) {\n+            for (j = 0; j < now; j++) {\n                 secp256k1_scalar_add(&n, &n, &n);\n             }\n             secp256k1_scalar_add(&n, &n, &t);\n@@ -360,23 +378,23 @@ void scalar_test(void) {\n     {\n         /* Test that adding the scalars together is equal to adding their numbers together modulo the order. */\n         secp256k1_num_t rnum;\n+        secp256k1_num_t r2num;\n+        secp256k1_scalar_t r;\n         secp256k1_num_add(&rnum, &snum, &s2num);\n         secp256k1_num_mod(&rnum, &order);\n-        secp256k1_scalar_t r;\n         secp256k1_scalar_add(&r, &s, &s2);\n-        secp256k1_num_t r2num;\n         secp256k1_scalar_get_num(&r2num, &r);\n         CHECK(secp256k1_num_eq(&rnum, &r2num));\n     }\n \n     {\n         /* Test that multipying the scalars is equal to multiplying their numbers modulo the order. */\n+        secp256k1_scalar_t r;\n+        secp256k1_num_t r2num;\n         secp256k1_num_t rnum;\n         secp256k1_num_mul(&rnum, &snum, &s2num);\n         secp256k1_num_mod(&rnum, &order);\n-        secp256k1_scalar_t r;\n         secp256k1_scalar_mul(&r, &s, &s2);\n-        secp256k1_num_t r2num;\n         secp256k1_scalar_get_num(&r2num, &r);\n         CHECK(secp256k1_num_eq(&rnum, &r2num));\n         /* The result can only be zero if at least one of the factors was zero. */\n@@ -387,20 +405,20 @@ void scalar_test(void) {\n     }\n \n     {\n+        secp256k1_scalar_t neg;\n+        secp256k1_num_t negnum;\n+        secp256k1_num_t negnum2;\n         /* Check that comparison with zero matches comparison with zero on the number. */\n         CHECK(secp256k1_num_is_zero(&snum) == secp256k1_scalar_is_zero(&s));\n         /* Check that comparison with the half order is equal to testing for high scalar. */\n         CHECK(secp256k1_scalar_is_high(&s) == (secp256k1_num_cmp(&snum, &half_order) > 0));\n-        secp256k1_scalar_t neg;\n         secp256k1_scalar_negate(&neg, &s);\n-        secp256k1_num_t negnum;\n         secp256k1_num_sub(&negnum, &order, &snum);\n         secp256k1_num_mod(&negnum, &order);\n         /* Check that comparison with the half order is equal to testing for high scalar after negation. */\n         CHECK(secp256k1_scalar_is_high(&neg) == (secp256k1_num_cmp(&negnum, &half_order) > 0));\n         /* Negating should change the high property, unless the value was already zero. */\n         CHECK((secp256k1_scalar_is_high(&s) == secp256k1_scalar_is_high(&neg)) == secp256k1_scalar_is_zero(&s));\n-        secp256k1_num_t negnum2;\n         secp256k1_scalar_get_num(&negnum2, &neg);\n         /* Negating a scalar should be equal to (order - n) mod order on the number. */\n         CHECK(secp256k1_num_eq(&negnum, &negnum2));\n@@ -415,17 +433,17 @@ void scalar_test(void) {\n     {\n         /* Test secp256k1_scalar_mul_shift_var. */\n         secp256k1_scalar_t r;\n+        secp256k1_num_t one;\n+        secp256k1_num_t rnum;\n+        secp256k1_num_t rnum2;\n+        unsigned char cone[1] = {0x01};\n         unsigned int shift = 256 + (secp256k1_rand32() % 257);\n         secp256k1_scalar_mul_shift_var(&r, &s1, &s2, shift);\n-        secp256k1_num_t rnum;\n         secp256k1_num_mul(&rnum, &s1num, &s2num);\n         secp256k1_num_shift(&rnum, shift - 1);\n-        secp256k1_num_t one;\n-        unsigned char cone[1] = {0x01};\n         secp256k1_num_set_bin(&one, cone, 1);\n         secp256k1_num_add(&rnum, &rnum, &one);\n         secp256k1_num_shift(&rnum, 1);\n-        secp256k1_num_t rnum2;\n         secp256k1_scalar_get_num(&rnum2, &r);\n         CHECK(secp256k1_num_eq(&rnum, &rnum2));\n     }\n@@ -435,11 +453,13 @@ void scalar_test(void) {\n         /* Test that scalar inverses are equal to the inverse of their number modulo the order. */\n         if (!secp256k1_scalar_is_zero(&s)) {\n             secp256k1_scalar_t inv;\n-            secp256k1_scalar_inverse(&inv, &s);\n #ifndef USE_NUM_NONE\n             secp256k1_num_t invnum;\n-            secp256k1_num_mod_inverse(&invnum, &snum, &order);\n             secp256k1_num_t invnum2;\n+#endif\n+            secp256k1_scalar_inverse(&inv, &s);\n+#ifndef USE_NUM_NONE\n+            secp256k1_num_mod_inverse(&invnum, &snum, &order);\n             secp256k1_scalar_get_num(&invnum2, &inv);\n             CHECK(secp256k1_num_eq(&invnum, &invnum2));\n #endif\n@@ -461,15 +481,18 @@ void scalar_test(void) {\n     }\n \n     {\n+        secp256k1_scalar_t r1, r2;\n+        secp256k1_scalar_t b;\n+        int i;\n         /* Test add_bit. */\n         int bit = secp256k1_rand32() % 256;\n-        secp256k1_scalar_t b;\n         secp256k1_scalar_set_int(&b, 1);\n         CHECK(secp256k1_scalar_is_one(&b));\n-        for (int i = 0; i < bit; i++) {\n+        for (i = 0; i < bit; i++) {\n             secp256k1_scalar_add(&b, &b, &b);\n         }\n-        secp256k1_scalar_t r1 = s1, r2 = s1;\n+        r1 = s1;\n+        r2 = s1;\n         if (!secp256k1_scalar_add(&r1, &r1, &b)) {\n             /* No overflow happened. */\n             secp256k1_scalar_add_bit(&r2, bit);\n@@ -551,7 +574,8 @@ void scalar_test(void) {\n }\n \n void run_scalar_tests(void) {\n-    for (int i = 0; i < 128 * count; i++) {\n+    int i;\n+    for (i = 0; i < 128 * count; i++) {\n         scalar_test();\n     }\n \n@@ -571,11 +595,11 @@ void run_scalar_tests(void) {\n     {\n         /* A scalar with value of the curve order should be 0. */\n         secp256k1_num_t order;\n-        secp256k1_scalar_order_get_num(&order);\n-        unsigned char bin[32];\n-        secp256k1_num_get_bin(bin, 32, &order);\n         secp256k1_scalar_t zero;\n+        unsigned char bin[32];\n         int overflow = 0;\n+        secp256k1_scalar_order_get_num(&order);\n+        secp256k1_num_get_bin(bin, 32, &order);\n         secp256k1_scalar_set_b32(&zero, bin, &overflow);\n         CHECK(overflow == 1);\n         CHECK(secp256k1_scalar_is_zero(&zero));\n@@ -608,39 +632,67 @@ void random_fe_non_zero(secp256k1_fe_t *nz) {\n }\n \n void random_fe_non_square(secp256k1_fe_t *ns) {\n-    random_fe_non_zero(ns);\n     secp256k1_fe_t r;\n+    random_fe_non_zero(ns);\n     if (secp256k1_fe_sqrt_var(&r, ns)) {\n         secp256k1_fe_negate(ns, ns, 1);\n     }\n }\n \n int check_fe_equal(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n-    secp256k1_fe_t an = *a; secp256k1_fe_normalize_weak(&an);\n-    secp256k1_fe_t bn = *b; secp256k1_fe_normalize_var(&bn);\n+    secp256k1_fe_t an = *a;\n+    secp256k1_fe_t bn = *b;\n+    secp256k1_fe_normalize_weak(&an);\n+    secp256k1_fe_normalize_var(&bn);\n     return secp256k1_fe_equal_var(&an, &bn);\n }\n \n int check_fe_inverse(const secp256k1_fe_t *a, const secp256k1_fe_t *ai) {\n-    secp256k1_fe_t x; secp256k1_fe_mul(&x, a, ai);\n-    secp256k1_fe_t one; secp256k1_fe_set_int(&one, 1);\n+    secp256k1_fe_t x;\n+    secp256k1_fe_t one = SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 1);\n+    secp256k1_fe_mul(&x, a, ai);\n     return check_fe_equal(&x, &one);\n }\n \n-void run_field_misc(void) {\n-    const unsigned char f32_5[32] = {\n-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,\n+void run_field_convert(void) {\n+    static const unsigned char b32[32] = {\n+        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n+        0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,\n+        0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29,\n+        0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x40\n     };\n+    static const secp256k1_fe_storage_t fes = SECP256K1_FE_STORAGE_CONST(\n+        0x00010203UL, 0x04050607UL, 0x11121314UL, 0x15161718UL,\n+        0x22232425UL, 0x26272829UL, 0x33343536UL, 0x37383940UL\n+    );\n+    static const secp256k1_fe_t fe = SECP256K1_FE_CONST(\n+        0x00010203UL, 0x04050607UL, 0x11121314UL, 0x15161718UL,\n+        0x22232425UL, 0x26272829UL, 0x33343536UL, 0x37383940UL\n+    );\n+    secp256k1_fe_t fe2;\n+    unsigned char b322[32];\n+    secp256k1_fe_storage_t fes2;\n+    /* Check conversions to fe. */\n+    CHECK(secp256k1_fe_set_b32(&fe2, b32));\n+    CHECK(secp256k1_fe_equal_var(&fe, &fe2));\n+    secp256k1_fe_from_storage(&fe2, &fes);\n+    CHECK(secp256k1_fe_equal_var(&fe, &fe2));\n+    /* Check conversion from fe. */\n+    secp256k1_fe_get_b32(b322, &fe);\n+    CHECK(memcmp(b322, b32, 32) == 0);\n+    secp256k1_fe_to_storage(&fes2, &fe);\n+    CHECK(memcmp(&fes2, &fes, sizeof(fes)) == 0);\n+}\n+\n+void run_field_misc(void) {\n     secp256k1_fe_t x;\n     secp256k1_fe_t y;\n     secp256k1_fe_t z;\n     secp256k1_fe_t q;\n-    secp256k1_fe_t fe5;\n-    CHECK(secp256k1_fe_set_b32(&fe5, f32_5));\n-    for (int i=0; i<5*count; i++) {\n+    secp256k1_fe_t fe5 = SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 5);\n+    int i;\n+    for (i = 0; i < 5*count; i++) {\n+        secp256k1_fe_storage_t xs, ys, zs;\n         random_fe(&x);\n         random_fe_non_zero(&y);\n         /* Test the fe equality and comparison operations. */\n@@ -649,12 +701,17 @@ void run_field_misc(void) {\n         z = x;\n         secp256k1_fe_add(&z,&y);\n         secp256k1_fe_normalize(&z);\n-        /* Test the conditional move. */\n-        secp256k1_fe_cmov(&z, &x, 0);\n-        CHECK(secp256k1_fe_equal_var(&x, &z) == 0);\n-        CHECK(secp256k1_fe_cmp_var(&x, &z) != 0);\n-        secp256k1_fe_cmov(&y, &x, 1);\n-        CHECK(secp256k1_fe_equal_var(&x, &y));\n+        /* Test storage conversion and conditional moves. */\n+        secp256k1_fe_to_storage(&xs, &x);\n+        secp256k1_fe_to_storage(&ys, &y);\n+        secp256k1_fe_to_storage(&zs, &z);\n+        secp256k1_fe_storage_cmov(&zs, &xs, 0);\n+        CHECK(memcmp(&xs, &zs, sizeof(xs)) != 0);\n+        secp256k1_fe_storage_cmov(&ys, &xs, 1);\n+        CHECK(memcmp(&xs, &ys, sizeof(xs)) == 0);\n+        secp256k1_fe_from_storage(&x, &xs);\n+        secp256k1_fe_from_storage(&y, &ys);\n+        secp256k1_fe_from_storage(&z, &zs);\n         /* Test that mul_int, mul, and add agree. */\n         secp256k1_fe_add(&y, &x);\n         secp256k1_fe_add(&y, &x);\n@@ -678,7 +735,8 @@ void run_field_misc(void) {\n \n void run_field_inv(void) {\n     secp256k1_fe_t x, xi, xii;\n-    for (int i=0; i<10*count; i++) {\n+    int i;\n+    for (i = 0; i < 10*count; i++) {\n         random_fe_non_zero(&x);\n         secp256k1_fe_inv(&xi, &x);\n         CHECK(check_fe_inverse(&x, &xi));\n@@ -689,7 +747,8 @@ void run_field_inv(void) {\n \n void run_field_inv_var(void) {\n     secp256k1_fe_t x, xi, xii;\n-    for (int i=0; i<10*count; i++) {\n+    int i;\n+    for (i = 0; i < 10*count; i++) {\n         random_fe_non_zero(&x);\n         secp256k1_fe_inv_var(&xi, &x);\n         CHECK(check_fe_inverse(&x, &xi));\n@@ -700,17 +759,19 @@ void run_field_inv_var(void) {\n \n void run_field_inv_all_var(void) {\n     secp256k1_fe_t x[16], xi[16], xii[16];\n+    int i;\n     /* Check it's safe to call for 0 elements */\n     secp256k1_fe_inv_all_var(0, xi, x);\n-    for (int i=0; i<count; i++) {\n+    for (i = 0; i < count; i++) {\n+        size_t j;\n         size_t len = (secp256k1_rand32() & 15) + 1;\n-        for (size_t j=0; j<len; j++)\n+        for (j = 0; j < len; j++)\n             random_fe_non_zero(&x[j]);\n         secp256k1_fe_inv_all_var(len, xi, x);\n-        for (size_t j=0; j<len; j++)\n+        for (j = 0; j < len; j++)\n             CHECK(check_fe_inverse(&x[j], &xi[j]));\n         secp256k1_fe_inv_all_var(len, xii, xi);\n-        for (size_t j=0; j<len; j++)\n+        for (j = 0; j < len; j++)\n             CHECK(check_fe_equal(&x[j], &xii[j]));\n     }\n }\n@@ -719,10 +780,11 @@ void run_sqr(void) {\n     secp256k1_fe_t x, s;\n \n     {\n+        int i;\n         secp256k1_fe_set_int(&x, 1);\n         secp256k1_fe_negate(&x, &x, 1);\n \n-        for (int i=1; i<=512; ++i) {\n+        for (i = 1; i <= 512; ++i) {\n             secp256k1_fe_mul_int(&x, 2);\n             secp256k1_fe_normalize(&x);\n             secp256k1_fe_sqr(&s, &x);\n@@ -746,14 +808,15 @@ void test_sqrt(const secp256k1_fe_t *a, const secp256k1_fe_t *k) {\n \n void run_sqrt(void) {\n     secp256k1_fe_t ns, x, s, t;\n+    int i;\n \n     /* Check sqrt(0) is 0 */\n     secp256k1_fe_set_int(&x, 0);\n     secp256k1_fe_sqr(&s, &x);\n     test_sqrt(&s, &x);\n \n     /* Check sqrt of small squares (and their negatives) */\n-    for (int i=1; i<=100; i++) {\n+    for (i = 1; i <= 100; i++) {\n         secp256k1_fe_set_int(&x, i);\n         secp256k1_fe_sqr(&s, &x);\n         test_sqrt(&s, &x);\n@@ -762,9 +825,10 @@ void run_sqrt(void) {\n     }\n \n     /* Consistency checks for large random values */\n-    for (int i=0; i<10; i++) {\n+    for (i = 0; i < 10; i++) {\n+        int j;\n         random_fe_non_square(&ns);\n-        for (int j=0; j<count; j++) {\n+        for (j = 0; j < count; j++) {\n             random_fe(&x);\n             secp256k1_fe_sqr(&s, &x);\n             test_sqrt(&s, &x);\n@@ -787,13 +851,13 @@ void ge_equals_ge(const secp256k1_ge_t *a, const secp256k1_ge_t *b) {\n }\n \n void ge_equals_gej(const secp256k1_ge_t *a, const secp256k1_gej_t *b) {\n+    secp256k1_fe_t z2s;\n+    secp256k1_fe_t u1, u2, s1, s2;\n     CHECK(a->infinity == b->infinity);\n     if (a->infinity)\n         return;\n     /* Check a.x * b.z^2 == b.x && a.y * b.z^3 == b.y, to avoid inverses. */\n-    secp256k1_fe_t z2s;\n     secp256k1_fe_sqr(&z2s, &b->z);\n-    secp256k1_fe_t u1, u2, s1, s2;\n     secp256k1_fe_mul(&u1, &a->x, &z2s);\n     u2 = b->x; secp256k1_fe_normalize_weak(&u2);\n     secp256k1_fe_mul(&s1, &a->y, &z2s); secp256k1_fe_mul(&s1, &s1, &b->z);\n@@ -803,6 +867,7 @@ void ge_equals_gej(const secp256k1_ge_t *a, const secp256k1_gej_t *b) {\n }\n \n void test_ge(void) {\n+    int i, i1;\n     int runs = 4;\n     /* Points: (infinity, p1, p1, -p1, -p1, p2, p2, -p2, -p2, p3, p3, -p3, -p3, p4, p4, -p4, -p4).\n      * The second in each pair of identical points uses a random Z coordinate in the Jacobian form.\n@@ -814,7 +879,8 @@ void test_ge(void) {\n     secp256k1_gej_set_infinity(&gej[0]);\n     secp256k1_ge_clear(&ge[0]);\n     secp256k1_ge_set_gej_var(&ge[0], &gej[0]);\n-    for (int i = 0; i < runs; i++) {\n+    for (i = 0; i < runs; i++) {\n+        int j;\n         secp256k1_ge_t g;\n         random_group_element_test(&g);\n         ge[1 + 4 * i] = g;\n@@ -825,7 +891,7 @@ void test_ge(void) {\n         random_group_element_jacobian_test(&gej[2 + 4 * i], &ge[2 + 4 * i]);\n         secp256k1_gej_set_ge(&gej[3 + 4 * i], &ge[3 + 4 * i]);\n         random_group_element_jacobian_test(&gej[4 + 4 * i], &ge[4 + 4 * i]);\n-        for (int j = 0; j < 4; j++) {\n+        for (j = 0; j < 4; j++) {\n             random_field_element_magnitude(&ge[1 + j + 4 * i].x);\n             random_field_element_magnitude(&ge[1 + j + 4 * i].y);\n             random_field_element_magnitude(&gej[1 + j + 4 * i].x);\n@@ -834,8 +900,9 @@ void test_ge(void) {\n         }\n     }\n \n-    for (int i1 = 0; i1 < 1 + 4 * runs; i1++) {\n-        for (int i2 = 0; i2 < 1 + 4 * runs; i2++) {\n+    for (i1 = 0; i1 < 1 + 4 * runs; i1++) {\n+        int i2;\n+        for (i2 = 0; i2 < 1 + 4 * runs; i2++) {\n             /* Compute reference result using gej + gej (var). */\n             secp256k1_gej_t refj, resj;\n             secp256k1_ge_t ref;\n@@ -883,21 +950,20 @@ void test_ge(void) {\n \n     /* Test adding all points together in random order equals infinity. */\n     {\n+        secp256k1_gej_t sum = SECP256K1_GEJ_CONST_INFINITY;\n         secp256k1_gej_t *gej_shuffled = malloc((4 * runs + 1) * sizeof(secp256k1_gej_t));\n-        for (int i = 0; i < 4 * runs + 1; i++) {\n+        for (i = 0; i < 4 * runs + 1; i++) {\n             gej_shuffled[i] = gej[i];\n         }\n-        for (int i = 0; i < 4 * runs + 1; i++) {\n+        for (i = 0; i < 4 * runs + 1; i++) {\n             int swap = i + secp256k1_rand32() % (4 * runs + 1 - i);\n             if (swap != i) {\n                 secp256k1_gej_t t = gej_shuffled[i];\n                 gej_shuffled[i] = gej_shuffled[swap];\n                 gej_shuffled[swap] = t;\n             }\n         }\n-        secp256k1_gej_t sum;\n-        secp256k1_gej_set_infinity(&sum);\n-        for (int i = 0; i < 4 * runs + 1; i++) {\n+        for (i = 0; i < 4 * runs + 1; i++) {\n             secp256k1_gej_add_var(&sum, &sum, &gej_shuffled[i]);\n         }\n         CHECK(secp256k1_gej_is_infinity(&sum));\n@@ -908,7 +974,7 @@ void test_ge(void) {\n     {\n         secp256k1_ge_t *ge_set_all = malloc((4 * runs + 1) * sizeof(secp256k1_ge_t));\n         secp256k1_ge_set_all_gej_var(4 * runs + 1, ge_set_all, gej);\n-        for (int i = 0; i < 4 * runs + 1; i++) {\n+        for (i = 0; i < 4 * runs + 1; i++) {\n             ge_equals_gej(&ge_set_all[i], &gej[i]);\n         }\n         free(ge_set_all);\n@@ -919,7 +985,8 @@ void test_ge(void) {\n }\n \n void run_ge(void) {\n-    for (int i = 0; i < count * 32; i++) {\n+    int i;\n+    for (i = 0; i < count * 32; i++) {\n         test_ge();\n     }\n }\n@@ -928,41 +995,35 @@ void run_ge(void) {\n \n void run_ecmult_chain(void) {\n     /* random starting point A (on the curve) */\n-    secp256k1_fe_t ax; VERIFY_CHECK(secp256k1_fe_set_hex(&ax, \"8b30bbe9ae2a990696b22f670709dff3727fd8bc04d3362c6c7bf458e2846004\", 64));\n-    secp256k1_fe_t ay; VERIFY_CHECK(secp256k1_fe_set_hex(&ay, \"a357ae915c4a65281309edf20504740f0eb3343990216b4f81063cb65f2f7e0f\", 64));\n-    secp256k1_gej_t a; secp256k1_gej_set_xy(&a, &ax, &ay);\n+    secp256k1_gej_t a = SECP256K1_GEJ_CONST(\n+        0x8b30bbe9, 0xae2a9906, 0x96b22f67, 0x0709dff3,\n+        0x727fd8bc, 0x04d3362c, 0x6c7bf458, 0xe2846004,\n+        0xa357ae91, 0x5c4a6528, 0x1309edf2, 0x0504740f,\n+        0x0eb33439, 0x90216b4f, 0x81063cb6, 0x5f2f7e0f\n+    );\n     /* two random initial factors xn and gn */\n-    static const unsigned char xni[32] = {\n-        0x84, 0xcc, 0x54, 0x52, 0xf7, 0xfd, 0xe1, 0xed,\n-        0xb4, 0xd3, 0x8a, 0x8c, 0xe9, 0xb1, 0xb8, 0x4c,\n-        0xce, 0xf3, 0x1f, 0x14, 0x6e, 0x56, 0x9b, 0xe9,\n-        0x70, 0x5d, 0x35, 0x7a, 0x42, 0x98, 0x54, 0x07\n-    };\n-    secp256k1_scalar_t xn;\n-    secp256k1_scalar_set_b32(&xn, xni, NULL);\n-    static const unsigned char gni[32] = {\n-        0xa1, 0xe5, 0x8d, 0x22, 0x55, 0x3d, 0xcd, 0x42,\n-        0xb2, 0x39, 0x80, 0x62, 0x5d, 0x4c, 0x57, 0xa9,\n-        0x6e, 0x93, 0x23, 0xd4, 0x2b, 0x31, 0x52, 0xe5,\n-        0xca, 0x2c, 0x39, 0x90, 0xed, 0xc7, 0xc9, 0xde\n-    };\n-    secp256k1_scalar_t gn;\n-    secp256k1_scalar_set_b32(&gn, gni, NULL);\n+    secp256k1_scalar_t xn = SECP256K1_SCALAR_CONST(\n+        0x84cc5452, 0xf7fde1ed, 0xb4d38a8c, 0xe9b1b84c,\n+        0xcef31f14, 0x6e569be9, 0x705d357a, 0x42985407\n+    );\n+    secp256k1_scalar_t gn = SECP256K1_SCALAR_CONST(\n+        0xa1e58d22, 0x553dcd42, 0xb2398062, 0x5d4c57a9,\n+        0x6e9323d4, 0x2b3152e5, 0xca2c3990, 0xedc7c9de\n+    );\n     /* two small multipliers to be applied to xn and gn in every iteration: */\n-    static const unsigned char xfi[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0x13,0x37};\n-    secp256k1_scalar_t xf;\n-    secp256k1_scalar_set_b32(&xf, xfi, NULL);\n-    static const unsigned char gfi[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0x71,0x13};\n-    secp256k1_scalar_t gf;\n-    secp256k1_scalar_set_b32(&gf, gfi, NULL);\n+    static const secp256k1_scalar_t xf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 0x1337);\n+    static const secp256k1_scalar_t gf = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 0x7113);\n     /* accumulators with the resulting coefficients to A and G */\n-    secp256k1_scalar_t ae;\n-    secp256k1_scalar_set_int(&ae, 1);\n-    secp256k1_scalar_t ge;\n-    secp256k1_scalar_set_int(&ge, 0);\n-    /* the point being computed */\n+    secp256k1_scalar_t ae = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 1);\n+    secp256k1_scalar_t ge = SECP256K1_SCALAR_CONST(0, 0, 0, 0, 0, 0, 0, 0);\n+    /* actual points */\n     secp256k1_gej_t x = a;\n-    for (int i=0; i<200*count; i++) {\n+    secp256k1_gej_t x2;\n+    int i;\n+\n+    /* the point being computed */\n+    x = a;\n+    for (i = 0; i < 200*count; i++) {\n         /* in each iteration, compute X = xn*X + gn*G; */\n         secp256k1_ecmult(&x, &x, &xn, &gn);\n         /* also compute ae and ge: the actual accumulated factors for A and G */\n@@ -976,78 +1037,84 @@ void run_ecmult_chain(void) {\n \n         /* verify */\n         if (i == 19999) {\n-            char res[132]; int resl = 132;\n-            secp256k1_gej_get_hex(res, &resl, &x);\n-            CHECK(strcmp(res, \"(D6E96687F9B10D092A6F35439D86CEBEA4535D0D409F53586440BD74B933E830,B95CBCA2C77DA786539BE8FD53354D2D3B4F566AE658045407ED6015EE1B2A88)\") == 0);\n+            /* expected result after 19999 iterations */\n+            secp256k1_gej_t rp = SECP256K1_GEJ_CONST(\n+                0xD6E96687, 0xF9B10D09, 0x2A6F3543, 0x9D86CEBE,\n+                0xA4535D0D, 0x409F5358, 0x6440BD74, 0xB933E830,\n+                0xB95CBCA2, 0xC77DA786, 0x539BE8FD, 0x53354D2D,\n+                0x3B4F566A, 0xE6580454, 0x07ED6015, 0xEE1B2A88\n+            );\n+\n+            secp256k1_gej_neg(&rp, &rp);\n+            secp256k1_gej_add_var(&rp, &rp, &x);\n+            CHECK(secp256k1_gej_is_infinity(&rp));\n         }\n     }\n     /* redo the computation, but directly with the resulting ae and ge coefficients: */\n-    secp256k1_gej_t x2; secp256k1_ecmult(&x2, &a, &ae, &ge);\n-    char res[132]; int resl = 132;\n-    char res2[132]; int resl2 = 132;\n-    secp256k1_gej_get_hex(res, &resl, &x);\n-    secp256k1_gej_get_hex(res2, &resl2, &x2);\n-    CHECK(strcmp(res, res2) == 0);\n-    CHECK(strlen(res) == 131);\n+    secp256k1_ecmult(&x2, &a, &ae, &ge);\n+    secp256k1_gej_neg(&x2, &x2);\n+    secp256k1_gej_add_var(&x2, &x2, &x);\n+    CHECK(secp256k1_gej_is_infinity(&x2));\n }\n \n void test_point_times_order(const secp256k1_gej_t *point) {\n-    unsigned char pub[65];\n     /* X * (point + G) + (order-X) * (pointer + G) = 0 */\n     secp256k1_scalar_t x;\n-    random_scalar_order_test(&x);\n     secp256k1_scalar_t nx;\n-    secp256k1_scalar_negate(&nx, &x);\n     secp256k1_gej_t res1, res2;\n+    secp256k1_ge_t res3;\n+    unsigned char pub[65];\n+    int psize = 65;\n+    random_scalar_order_test(&x);\n+    secp256k1_scalar_negate(&nx, &x);\n     secp256k1_ecmult(&res1, point, &x, &x); /* calc res1 = x * point + x * G; */\n     secp256k1_ecmult(&res2, point, &nx, &nx); /* calc res2 = (order - x) * point + (order - x) * G; */\n     secp256k1_gej_add_var(&res1, &res1, &res2);\n     CHECK(secp256k1_gej_is_infinity(&res1));\n     CHECK(secp256k1_gej_is_valid_var(&res1) == 0);\n-    secp256k1_ge_t res3;\n     secp256k1_ge_set_gej(&res3, &res1);\n     CHECK(secp256k1_ge_is_infinity(&res3));\n     CHECK(secp256k1_ge_is_valid_var(&res3) == 0);\n-    int psize = 65;\n     CHECK(secp256k1_eckey_pubkey_serialize(&res3, pub, &psize, 0) == 0);\n     psize = 65;\n     CHECK(secp256k1_eckey_pubkey_serialize(&res3, pub, &psize, 1) == 0);\n }\n \n void run_point_times_order(void) {\n-    secp256k1_fe_t x; VERIFY_CHECK(secp256k1_fe_set_hex(&x, \"02\", 2));\n-    for (int i=0; i<500; i++) {\n+    int i;\n+    secp256k1_fe_t x = SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 2);\n+    static const secp256k1_fe_t xr = SECP256K1_FE_CONST(\n+        0x7603CB59, 0xB0EF6C63, 0xFE608479, 0x2A0C378C,\n+        0xDB3233A8, 0x0F8A9A09, 0xA877DEAD, 0x31B38C45\n+    );\n+    for (i = 0; i < 500; i++) {\n         secp256k1_ge_t p;\n         if (secp256k1_ge_set_xo_var(&p, &x, 1)) {\n-            CHECK(secp256k1_ge_is_valid_var(&p));\n             secp256k1_gej_t j;\n+            CHECK(secp256k1_ge_is_valid_var(&p));\n             secp256k1_gej_set_ge(&j, &p);\n             CHECK(secp256k1_gej_is_valid_var(&j));\n             test_point_times_order(&j);\n         }\n         secp256k1_fe_sqr(&x, &x);\n     }\n-    char c[65];\n-    int cl = 1;\n-    c[1] = 123;\n-    secp256k1_fe_get_hex(c, &cl, &x); /* Check that fe_get_hex handles a too short input. */\n-    CHECK(c[1] == 123);\n-    cl = 65;\n-    secp256k1_fe_get_hex(c, &cl, &x);\n-    CHECK(strcmp(c, \"7603CB59B0EF6C63FE6084792A0C378CDB3233A80F8A9A09A877DEAD31B38C45\") == 0);\n+    secp256k1_fe_normalize_var(&x);\n+    CHECK(secp256k1_fe_equal_var(&x, &xr));\n }\n \n void test_wnaf(const secp256k1_scalar_t *number, int w) {\n     secp256k1_scalar_t x, two, t;\n+    int wnaf[256];\n+    int zeroes = -1;\n+    int i;\n+    int bits;\n     secp256k1_scalar_set_int(&x, 0);\n     secp256k1_scalar_set_int(&two, 2);\n-    int wnaf[256];\n-    int bits = secp256k1_ecmult_wnaf(wnaf, number, w);\n+    bits = secp256k1_ecmult_wnaf(wnaf, number, w);\n     CHECK(bits <= 256);\n-    int zeroes = -1;\n-    for (int i=bits-1; i>=0; i--) {\n-        secp256k1_scalar_mul(&x, &x, &two);\n+    for (i = bits-1; i >= 0; i--) {\n         int v = wnaf[i];\n+        secp256k1_scalar_mul(&x, &x, &two);\n         if (v) {\n             CHECK(zeroes == -1 || zeroes >= w-1); /* check that distance between non-zero elements is at least w-1 */\n             zeroes=0;\n@@ -1070,8 +1137,9 @@ void test_wnaf(const secp256k1_scalar_t *number, int w) {\n }\n \n void run_wnaf(void) {\n+    int i;\n     secp256k1_scalar_t n;\n-    for (int i=0; i<count; i++) {\n+    for (i = 0; i < count; i++) {\n         random_scalar_order(&n);\n         if (i % 1)\n             secp256k1_scalar_negate(&n, &n);\n@@ -1087,26 +1155,29 @@ void random_sign(secp256k1_ecdsa_sig_t *sig, const secp256k1_scalar_t *key, cons\n }\n \n void test_ecdsa_sign_verify(void) {\n+    secp256k1_gej_t pubj;\n+    secp256k1_ge_t pub;\n+    secp256k1_scalar_t one;\n+    secp256k1_scalar_t msg, key;\n+    secp256k1_ecdsa_sig_t sig;\n     int recid;\n     int getrec;\n-    secp256k1_scalar_t msg, key;\n     random_scalar_order_test(&msg);\n     random_scalar_order_test(&key);\n-    secp256k1_gej_t pubj; secp256k1_ecmult_gen(&pubj, &key);\n-    secp256k1_ge_t pub; secp256k1_ge_set_gej(&pub, &pubj);\n-    secp256k1_ecdsa_sig_t sig;\n+    secp256k1_ecmult_gen(&pubj, &key);\n+    secp256k1_ge_set_gej(&pub, &pubj);\n     getrec = secp256k1_rand32()&1;\n     random_sign(&sig, &key, &msg, getrec?&recid:NULL);\n     if (getrec) CHECK(recid >= 0 && recid < 4);\n     CHECK(secp256k1_ecdsa_sig_verify(&sig, &pub, &msg));\n-    secp256k1_scalar_t one;\n     secp256k1_scalar_set_int(&one, 1);\n     secp256k1_scalar_add(&msg, &msg, &one);\n     CHECK(!secp256k1_ecdsa_sig_verify(&sig, &pub, &msg));\n }\n \n void run_ecdsa_sign_verify(void) {\n-    for (int i=0; i<10*count; i++) {\n+    int i;\n+    for (i = 0; i < 10*count; i++) {\n         test_ecdsa_sign_verify();\n     }\n }\n@@ -1149,9 +1220,32 @@ static int nonce_function_test_retry(unsigned char *nonce32, const unsigned char\n    return nonce_function_rfc6979(nonce32, msg32, key32, counter - 5, data);\n }\n \n+int is_empty_compact_signature(const unsigned char *sig64) {\n+    static const unsigned char res[64] = {0};\n+    return memcmp(sig64, res, 64) == 0;\n+}\n+\n void test_ecdsa_end_to_end(void) {\n+    unsigned char extra[32] = {0x00};\n     unsigned char privkey[32];\n     unsigned char message[32];\n+    unsigned char privkey2[32];\n+    unsigned char csignature[64];\n+    unsigned char signature[72];\n+    unsigned char signature2[72];\n+    unsigned char signature3[72];\n+    unsigned char signature4[72];\n+    unsigned char pubkey[65];\n+    unsigned char recpubkey[65];\n+    unsigned char seckey[300];\n+    int signaturelen = 72;\n+    int signaturelen2 = 72;\n+    int signaturelen3 = 72;\n+    int signaturelen4 = 72;\n+    int recid = 0;\n+    int recpubkeylen = 0;\n+    int pubkeylen = 65;\n+    int seckeylen = 300;\n \n     /* Generate a random key and message. */\n     {\n@@ -1164,60 +1258,80 @@ void test_ecdsa_end_to_end(void) {\n \n     /* Construct and verify corresponding public key. */\n     CHECK(secp256k1_ec_seckey_verify(privkey) == 1);\n-    unsigned char pubkey[65]; int pubkeylen = 65;\n     CHECK(secp256k1_ec_pubkey_create(pubkey, &pubkeylen, privkey, (secp256k1_rand32() & 3) != 0) == 1);\n     if (secp256k1_rand32() & 1) {\n         CHECK(secp256k1_ec_pubkey_decompress(pubkey, &pubkeylen));\n     }\n     CHECK(secp256k1_ec_pubkey_verify(pubkey, pubkeylen));\n \n     /* Verify private key import and export. */\n-    unsigned char seckey[300]; int seckeylen = 300;\n     CHECK(secp256k1_ec_privkey_export(privkey, seckey, &seckeylen, secp256k1_rand32() % 2) == 1);\n-    unsigned char privkey2[32];\n     CHECK(secp256k1_ec_privkey_import(privkey2, seckey, seckeylen) == 1);\n     CHECK(memcmp(privkey, privkey2, 32) == 0);\n \n     /* Optionally tweak the keys using addition. */\n     if (secp256k1_rand32() % 3 == 0) {\n+        int ret1;\n+        int ret2;\n         unsigned char rnd[32];\n+        unsigned char pubkey2[65];\n+        int pubkeylen2 = 65;\n         secp256k1_rand256_test(rnd);\n-        int ret1 = secp256k1_ec_privkey_tweak_add(privkey, rnd);\n-        int ret2 = secp256k1_ec_pubkey_tweak_add(pubkey, pubkeylen, rnd);\n+        ret1 = secp256k1_ec_privkey_tweak_add(privkey, rnd);\n+        ret2 = secp256k1_ec_pubkey_tweak_add(pubkey, pubkeylen, rnd);\n         CHECK(ret1 == ret2);\n         if (ret1 == 0) return;\n-        unsigned char pubkey2[65]; int pubkeylen2 = 65;\n         CHECK(secp256k1_ec_pubkey_create(pubkey2, &pubkeylen2, privkey, pubkeylen == 33) == 1);\n         CHECK(memcmp(pubkey, pubkey2, pubkeylen) == 0);\n     }\n \n     /* Optionally tweak the keys using multiplication. */\n     if (secp256k1_rand32() % 3 == 0) {\n+        int ret1;\n+        int ret2;\n         unsigned char rnd[32];\n+        unsigned char pubkey2[65];\n+        int pubkeylen2 = 65;\n         secp256k1_rand256_test(rnd);\n-        int ret1 = secp256k1_ec_privkey_tweak_mul(privkey, rnd);\n-        int ret2 = secp256k1_ec_pubkey_tweak_mul(pubkey, pubkeylen, rnd);\n+        ret1 = secp256k1_ec_privkey_tweak_mul(privkey, rnd);\n+        ret2 = secp256k1_ec_pubkey_tweak_mul(pubkey, pubkeylen, rnd);\n         CHECK(ret1 == ret2);\n         if (ret1 == 0) return;\n-        unsigned char pubkey2[65]; int pubkeylen2 = 65;\n         CHECK(secp256k1_ec_pubkey_create(pubkey2, &pubkeylen2, privkey, pubkeylen == 33) == 1);\n         CHECK(memcmp(pubkey, pubkey2, pubkeylen) == 0);\n     }\n \n     /* Sign. */\n-    unsigned char signature[72]; int signaturelen = 72;\n     CHECK(secp256k1_ecdsa_sign(message, signature, &signaturelen, privkey, NULL, NULL) == 1);\n+    CHECK(signaturelen > 0);\n+    CHECK(secp256k1_ecdsa_sign(message, signature2, &signaturelen2, privkey, NULL, extra) == 1);\n+    CHECK(signaturelen2 > 0);\n+    extra[31] = 1;\n+    CHECK(secp256k1_ecdsa_sign(message, signature3, &signaturelen3, privkey, NULL, extra) == 1);\n+    CHECK(signaturelen3 > 0);\n+    extra[31] = 0;\n+    extra[0] = 1;\n+    CHECK(secp256k1_ecdsa_sign(message, signature4, &signaturelen4, privkey, NULL, extra) == 1);\n+    CHECK(signaturelen3 > 0);\n+    CHECK((signaturelen != signaturelen2) || (memcmp(signature, signature2, signaturelen) != 0));\n+    CHECK((signaturelen != signaturelen3) || (memcmp(signature, signature3, signaturelen) != 0));\n+    CHECK((signaturelen3 != signaturelen2) || (memcmp(signature3, signature2, signaturelen3) != 0));\n+    CHECK((signaturelen4 != signaturelen3) || (memcmp(signature4, signature3, signaturelen4) != 0));\n+    CHECK((signaturelen4 != signaturelen2) || (memcmp(signature4, signature2, signaturelen4) != 0));\n+    CHECK((signaturelen4 != signaturelen) || (memcmp(signature4, signature, signaturelen4) != 0));\n     /* Verify. */\n     CHECK(secp256k1_ecdsa_verify(message, signature, signaturelen, pubkey, pubkeylen) == 1);\n+    CHECK(secp256k1_ecdsa_verify(message, signature2, signaturelen2, pubkey, pubkeylen) == 1);\n+    CHECK(secp256k1_ecdsa_verify(message, signature3, signaturelen3, pubkey, pubkeylen) == 1);\n+    CHECK(secp256k1_ecdsa_verify(message, signature4, signaturelen4, pubkey, pubkeylen) == 1);\n     /* Destroy signature and verify again. */\n     signature[signaturelen - 1 - secp256k1_rand32() % 20] += 1 + (secp256k1_rand32() % 255);\n     CHECK(secp256k1_ecdsa_verify(message, signature, signaturelen, pubkey, pubkeylen) != 1);\n \n     /* Compact sign. */\n-    unsigned char csignature[64]; int recid = 0;\n     CHECK(secp256k1_ecdsa_sign_compact(message, csignature, privkey, NULL, NULL, &recid) == 1);\n+    CHECK(!is_empty_compact_signature(csignature));\n     /* Recover. */\n-    unsigned char recpubkey[65]; int recpubkeylen = 0;\n     CHECK(secp256k1_ecdsa_recover_compact(message, csignature, recpubkey, &recpubkeylen, pubkeylen == 33, recid) == 1);\n     CHECK(recpubkeylen == pubkeylen);\n     CHECK(memcmp(pubkey, recpubkey, pubkeylen) == 0);\n@@ -1230,6 +1344,8 @@ void test_ecdsa_end_to_end(void) {\n }\n \n void test_random_pubkeys(void) {\n+    secp256k1_ge_t elem;\n+    secp256k1_ge_t elem2;\n     unsigned char in[65];\n     /* Generate some randomly sized pubkeys. */\n     uint32_t r = secp256k1_rand32();\n@@ -1247,8 +1363,6 @@ void test_random_pubkeys(void) {\n     r>>=11;\n     if (len > 1) secp256k1_rand256(&in[1]);\n     if (len > 33) secp256k1_rand256(&in[33]);\n-    secp256k1_ge_t elem;\n-    secp256k1_ge_t elem2;\n     if (secp256k1_eckey_pubkey_parse(&elem, in, len)) {\n         unsigned char out[65];\n         unsigned char firstb;\n@@ -1282,13 +1396,15 @@ void test_random_pubkeys(void) {\n }\n \n void run_random_pubkeys(void) {\n-    for (int i=0; i<10*count; i++) {\n+    int i;\n+    for (i = 0; i < 10*count; i++) {\n         test_random_pubkeys();\n     }\n }\n \n void run_ecdsa_end_to_end(void) {\n-    for (int i=0; i<64*count; i++) {\n+    int i;\n+    for (i = 0; i < 64*count; i++) {\n         test_ecdsa_end_to_end();\n     }\n }\n@@ -1314,12 +1430,8 @@ void test_ecdsa_edge_cases(void) {\n         0x6E, 0x1B, 0xE8, 0xEC, 0xC7, 0xDD, 0x95, 0x57\n     };\n     unsigned char pubkey[65];\n+    int t;\n     int pubkeylen = 65;\n-    CHECK(!secp256k1_ecdsa_recover_compact(msg32, sig64, pubkey, &pubkeylen, 0, 0));\n-    CHECK(secp256k1_ecdsa_recover_compact(msg32, sig64, pubkey, &pubkeylen, 0, 1));\n-    CHECK(!secp256k1_ecdsa_recover_compact(msg32, sig64, pubkey, &pubkeylen, 0, 2));\n-    CHECK(!secp256k1_ecdsa_recover_compact(msg32, sig64, pubkey, &pubkeylen, 0, 3));\n-\n     /* signature (r,s) = (4,4), which can be recovered with all 4 recids. */\n     const unsigned char sigb64[64] = {\n         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n@@ -1333,7 +1445,16 @@ void test_ecdsa_edge_cases(void) {\n     };\n     unsigned char pubkeyb[33];\n     int pubkeyblen = 33;\n-    for (int recid = 0; recid < 4; recid++) {\n+    int recid;\n+\n+    CHECK(!secp256k1_ecdsa_recover_compact(msg32, sig64, pubkey, &pubkeylen, 0, 0));\n+    CHECK(secp256k1_ecdsa_recover_compact(msg32, sig64, pubkey, &pubkeylen, 0, 1));\n+    CHECK(!secp256k1_ecdsa_recover_compact(msg32, sig64, pubkey, &pubkeylen, 0, 2));\n+    CHECK(!secp256k1_ecdsa_recover_compact(msg32, sig64, pubkey, &pubkeylen, 0, 3));\n+\n+    for (recid = 0; recid < 4; recid++) {\n+        int i;\n+        int recid2;\n         /* (4,4) encoded in DER. */\n         unsigned char sigbder[8] = {0x30, 0x06, 0x02, 0x01, 0x04, 0x02, 0x01, 0x04};\n         unsigned char sigcder_zr[7] = {0x30, 0x05, 0x02, 0x00, 0x02, 0x01, 0x01};\n@@ -1376,7 +1497,7 @@ void test_ecdsa_edge_cases(void) {\n         };\n         CHECK(secp256k1_ecdsa_recover_compact(msg32, sigb64, pubkeyb, &pubkeyblen, 1, recid));\n         CHECK(secp256k1_ecdsa_verify(msg32, sigbder, sizeof(sigbder), pubkeyb, pubkeyblen) == 1);\n-        for (int recid2 = 0; recid2 < 4; recid2++) {\n+        for (recid2 = 0; recid2 < 4; recid2++) {\n             unsigned char pubkey2b[33];\n             int pubkey2blen = 33;\n             CHECK(secp256k1_ecdsa_recover_compact(msg32, sigb64, pubkey2b, &pubkey2blen, 1, recid2));\n@@ -1402,10 +1523,11 @@ void test_ecdsa_edge_cases(void) {\n         sigbder[7]--;\n         CHECK(secp256k1_ecdsa_verify(msg32, sigbder, 6, pubkeyb, pubkeyblen) == -2);\n         CHECK(secp256k1_ecdsa_verify(msg32, sigbder, sizeof(sigbder)-1, pubkeyb, pubkeyblen) == -2);\n-        for(int i = 0; i<8; i++) {\n+        for(i = 0; i < 8; i++) {\n+            int c;\n             unsigned char orig = sigbder[i];\n             /*Try every single-byte change.*/\n-            for (int c=0; c<256; c++) {\n+            for (c = 0; c < 256; c++) {\n                 if (c == orig ) continue;\n                 sigbder[i] = c;\n                 CHECK(secp256k1_ecdsa_verify(msg32, sigbder, sizeof(sigbder), pubkeyb, pubkeyblen) ==\n@@ -1417,16 +1539,17 @@ void test_ecdsa_edge_cases(void) {\n \n     /* Test the case where ECDSA recomputes a point that is infinity. */\n     {\n+        secp256k1_gej_t keyj;\n+        secp256k1_ge_t key;\n+        secp256k1_scalar_t msg;\n         secp256k1_ecdsa_sig_t sig;\n         secp256k1_scalar_set_int(&sig.s, 1);\n         secp256k1_scalar_negate(&sig.s, &sig.s);\n         secp256k1_scalar_inverse(&sig.s, &sig.s);\n         secp256k1_scalar_set_int(&sig.r, 1);\n-        secp256k1_gej_t keyj;\n         secp256k1_ecmult_gen(&keyj, &sig.r);\n-        secp256k1_ge_t key;\n         secp256k1_ge_set_gej(&key, &keyj);\n-        secp256k1_scalar_t msg = sig.s;\n+        msg = sig.s;\n         CHECK(secp256k1_ecdsa_sig_verify(&sig, &key, &msg) == 0);\n     }\n \n@@ -1489,69 +1612,97 @@ void test_ecdsa_edge_cases(void) {\n         unsigned char sig[72];\n         int siglen = 72;\n         CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, precomputed_nonce_function, nonce) == 0);\n+        CHECK(siglen == 0);\n         CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, precomputed_nonce_function, nonce2) == 0);\n+        CHECK(siglen == 0);\n         msg[31] = 0xaa;\n         siglen = 72;\n         CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, precomputed_nonce_function, nonce) == 1);\n+        CHECK(siglen > 0);\n         CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, precomputed_nonce_function, nonce2) == 1);\n+        CHECK(siglen > 0);\n         siglen = 10;\n         CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, precomputed_nonce_function, nonce) != 1);\n+        CHECK(siglen == 0);\n     }\n \n     /* Nonce function corner cases. */\n-    {\n+    for (t = 0; t < 2; t++) {\n+        static const unsigned char zero[32] = {0x00};\n+        int i;\n         unsigned char key[32];\n         unsigned char msg[32];\n         unsigned char sig[72];\n-        memset(key, 0, 32);\n+        unsigned char sig2[72];\n+        secp256k1_ecdsa_sig_t s[512];\n+        int siglen = 72;\n+        int siglen2 = 72;\n+        int recid2;\n+        const unsigned char *extra;\n+        extra = t == 0 ? NULL : zero;\n         memset(msg, 0, 32);\n-        key[31] = 1;\n         msg[31] = 1;\n-        int siglen = 72;\n-        int recid;\n+        /* High key results in signature failure. */\n+        memset(key, 0xFF, 32);\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, NULL, extra) == 0);\n+        CHECK(siglen == 0);\n+        /* Zero key results in signature failure. */\n+        memset(key, 0, 32);\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, NULL, extra) == 0);\n+        CHECK(siglen == 0);\n         /* Nonce function failure results in signature failure. */\n-        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, nonce_function_test_fail, NULL) == 0);\n-        CHECK(secp256k1_ecdsa_sign_compact(msg, sig, key, nonce_function_test_fail, NULL, &recid) == 0);\n+        key[31] = 1;\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, nonce_function_test_fail, extra) == 0);\n+        CHECK(siglen == 0);\n+        CHECK(secp256k1_ecdsa_sign_compact(msg, sig, key, nonce_function_test_fail, extra, &recid) == 0);\n+        CHECK(is_empty_compact_signature(sig));\n         /* The retry loop successfully makes its way to the first good value. */\n-        unsigned char sig2[72];\n-        int siglen2 = 72;\n         siglen = 72;\n-        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, nonce_function_test_retry, NULL) == 1);\n-        CHECK(secp256k1_ecdsa_sign(msg, sig2, &siglen2, key, nonce_function_rfc6979, NULL) == 1);\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, nonce_function_test_retry, extra) == 1);\n+        CHECK(siglen > 0);\n+        CHECK(secp256k1_ecdsa_sign(msg, sig2, &siglen2, key, nonce_function_rfc6979, extra) == 1);\n+        CHECK(siglen > 0);\n         CHECK((siglen == siglen2) && (memcmp(sig, sig2, siglen) == 0));\n-        int recid2;\n-        CHECK(secp256k1_ecdsa_sign_compact(msg, sig, key, nonce_function_test_retry, NULL, &recid) == 1);\n-        CHECK(secp256k1_ecdsa_sign_compact(msg, sig2, key, nonce_function_rfc6979, NULL, &recid2) == 1);\n+        CHECK(secp256k1_ecdsa_sign_compact(msg, sig, key, nonce_function_test_retry, extra, &recid) == 1);\n+        CHECK(!is_empty_compact_signature(sig));\n+        CHECK(secp256k1_ecdsa_sign_compact(msg, sig2, key, nonce_function_rfc6979, extra, &recid2) == 1);\n+        CHECK(!is_empty_compact_signature(sig2));\n         CHECK((recid == recid2) && (memcmp(sig, sig2, 64) == 0));\n         /* The default nonce function is determinstic. */\n         siglen = 72;\n         siglen2 = 72;\n-        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, NULL, NULL) == 1);\n-        CHECK(secp256k1_ecdsa_sign(msg, sig2, &siglen2, key, NULL, NULL) == 1);\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, NULL, extra) == 1);\n+        CHECK(siglen > 0);\n+        CHECK(secp256k1_ecdsa_sign(msg, sig2, &siglen2, key, NULL, extra) == 1);\n+        CHECK(siglen2 > 0);\n         CHECK((siglen == siglen2) && (memcmp(sig, sig2, siglen) == 0));\n-        CHECK(secp256k1_ecdsa_sign_compact(msg, sig, key, NULL, NULL, &recid) == 1);\n-        CHECK(secp256k1_ecdsa_sign_compact(msg, sig2, key, NULL, NULL, &recid2) == 1);\n+        CHECK(secp256k1_ecdsa_sign_compact(msg, sig, key, NULL, extra, &recid) == 1);\n+        CHECK(!is_empty_compact_signature(sig));\n+        CHECK(secp256k1_ecdsa_sign_compact(msg, sig2, key, NULL, extra, &recid2) == 1);\n+        CHECK(!is_empty_compact_signature(sig));\n         CHECK((recid == recid2) && (memcmp(sig, sig2, 64) == 0));\n         /* The default nonce function changes output with different messages. */\n-        secp256k1_ecdsa_sig_t s[512];\n-        for(int i=0; i<256; i++) {\n+        for(i = 0; i < 256; i++) {\n+            int j;\n             siglen2 = 72;\n             msg[0] = i;\n-            CHECK(secp256k1_ecdsa_sign(msg, sig2, &siglen2, key, NULL, NULL) == 1);\n+            CHECK(secp256k1_ecdsa_sign(msg, sig2, &siglen2, key, NULL, extra) == 1);\n+            CHECK(!is_empty_compact_signature(sig));\n             CHECK(secp256k1_ecdsa_sig_parse(&s[i], sig2, siglen2));\n-            for (int j=0; j<i; j++) {\n+            for (j = 0; j < i; j++) {\n                 CHECK(!secp256k1_scalar_eq(&s[i].r, &s[j].r));\n             }\n         }\n         msg[0] = 0;\n         msg[31] = 2;\n         /* The default nonce function changes output with different keys. */\n-        for(int i=256; i<512; i++) {\n+        for(i = 256; i < 512; i++) {\n+            int j;\n             siglen2 = 72;\n             key[0] = i - 256;\n-            CHECK(secp256k1_ecdsa_sign(msg, sig2, &siglen2, key, NULL, NULL) == 1);\n+            CHECK(secp256k1_ecdsa_sign(msg, sig2, &siglen2, key, NULL, extra) == 1);\n             CHECK(secp256k1_ecdsa_sig_parse(&s[i], sig2, siglen2));\n-            for (int j=0; j<i; j++) {\n+            for (j = 0; j < i; j++) {\n                 CHECK(!secp256k1_scalar_eq(&s[i].r, &s[j].r));\n             }\n         }\n@@ -1581,8 +1732,8 @@ void run_ecdsa_edge_cases(void) {\n EC_KEY *get_openssl_key(const secp256k1_scalar_t *key) {\n     unsigned char privkey[300];\n     int privkeylen;\n-    int compr = secp256k1_rand32() & 1;\n     const unsigned char* pbegin = privkey;\n+    int compr = secp256k1_rand32() & 1;\n     EC_KEY *ec_key = EC_KEY_new_by_curve_name(NID_secp256k1);\n     CHECK(secp256k1_eckey_privkey_serialize(privkey, &privkeylen, key, compr));\n     CHECK(d2i_ECPrivateKey(&ec_key, &pbegin, privkeylen));\n@@ -1591,78 +1742,94 @@ EC_KEY *get_openssl_key(const secp256k1_scalar_t *key) {\n }\n \n void test_ecdsa_openssl(void) {\n+    secp256k1_gej_t qj;\n+    secp256k1_ge_t q;\n+    secp256k1_ecdsa_sig_t sig;\n+    secp256k1_scalar_t one;\n+    secp256k1_scalar_t msg2;\n     secp256k1_scalar_t key, msg;\n+    EC_KEY *ec_key;\n+    unsigned int sigsize = 80;\n+    int secp_sigsize = 80;\n     unsigned char message[32];\n+    unsigned char signature[80];\n     secp256k1_rand256_test(message);\n     secp256k1_scalar_set_b32(&msg, message, NULL);\n     random_scalar_order_test(&key);\n-    secp256k1_gej_t qj;\n     secp256k1_ecmult_gen(&qj, &key);\n-    secp256k1_ge_t q;\n     secp256k1_ge_set_gej(&q, &qj);\n-    EC_KEY *ec_key = get_openssl_key(&key);\n+    ec_key = get_openssl_key(&key);\n     CHECK(ec_key);\n-    unsigned char signature[80];\n-    unsigned int sigsize = 80;\n     CHECK(ECDSA_sign(0, message, sizeof(message), signature, &sigsize, ec_key));\n-    secp256k1_ecdsa_sig_t sig;\n     CHECK(secp256k1_ecdsa_sig_parse(&sig, signature, sigsize));\n     CHECK(secp256k1_ecdsa_sig_verify(&sig, &q, &msg));\n-    secp256k1_scalar_t one;\n     secp256k1_scalar_set_int(&one, 1);\n-    secp256k1_scalar_t msg2;\n     secp256k1_scalar_add(&msg2, &msg, &one);\n     CHECK(!secp256k1_ecdsa_sig_verify(&sig, &q, &msg2));\n \n     random_sign(&sig, &key, &msg, NULL);\n-    int secp_sigsize = 80;\n     CHECK(secp256k1_ecdsa_sig_serialize(signature, &secp_sigsize, &sig));\n     CHECK(ECDSA_verify(0, message, sizeof(message), signature, secp_sigsize, ec_key) == 1);\n \n     EC_KEY_free(ec_key);\n }\n \n void run_ecdsa_openssl(void) {\n-    for (int i=0; i<10*count; i++) {\n+    int i;\n+    for (i = 0; i < 10*count; i++) {\n         test_ecdsa_openssl();\n     }\n }\n #endif\n \n int main(int argc, char **argv) {\n+    unsigned char seed16[16] = {0};\n+    unsigned char run32[32] = {0};\n     /* find iteration count */\n     if (argc > 1) {\n         count = strtol(argv[1], NULL, 0);\n     }\n \n     /* find random seed */\n-    uint64_t seed;\n     if (argc > 2) {\n-        seed = strtoull(argv[2], NULL, 0);\n+        int pos = 0;\n+        const char* ch = argv[2];\n+        while (pos < 16 && ch[0] != 0 && ch[1] != 0) {\n+            unsigned short sh;\n+            if (sscanf(ch, \"%2hx\", &sh)) {\n+                seed16[pos] = sh;\n+            } else {\n+                break;\n+            }\n+            ch += 2;\n+            pos++;\n+        }\n     } else {\n         FILE *frand = fopen(\"/dev/urandom\", \"r\");\n-        if (!frand || !fread(&seed, sizeof(seed), 1, frand)) {\n-            seed = time(NULL) * 1337;\n+        if (!frand || !fread(&seed16, sizeof(seed16), 1, frand)) {\n+            uint64_t t = time(NULL) * (uint64_t)1337;\n+            seed16[0] ^= t;\n+            seed16[1] ^= t >> 8;\n+            seed16[2] ^= t >> 16;\n+            seed16[3] ^= t >> 24;\n+            seed16[4] ^= t >> 32;\n+            seed16[5] ^= t >> 40;\n+            seed16[6] ^= t >> 48;\n+            seed16[7] ^= t >> 56;\n         }\n         fclose(frand);\n     }\n-    secp256k1_rand_seed(seed);\n+    secp256k1_rand_seed(seed16);\n \n     printf(\"test count = %i\\n\", count);\n-    printf(\"random seed = %llu\\n\", (unsigned long long)seed);\n+    printf(\"random seed = %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\\n\", seed16[0], seed16[1], seed16[2], seed16[3], seed16[4], seed16[5], seed16[6], seed16[7], seed16[8], seed16[9], seed16[10], seed16[11], seed16[12], seed16[13], seed16[14], seed16[15]);\n \n     /* initialize */\n     secp256k1_start(SECP256K1_START_SIGN | SECP256K1_START_VERIFY);\n \n     /* initializing a second time shouldn't cause any harm or memory leaks. */\n     secp256k1_start(SECP256K1_START_SIGN | SECP256K1_START_VERIFY);\n \n-    /* Likewise, re-running the internal init functions should be harmless. */\n-    secp256k1_fe_start();\n-    secp256k1_ge_start();\n-    secp256k1_scalar_start();\n-    secp256k1_ecdsa_start();\n-\n     run_sha256_tests();\n     run_hmac_sha256_tests();\n     run_rfc6979_hmac_sha256_tests();\n@@ -1680,6 +1847,7 @@ int main(int argc, char **argv) {\n     run_field_inv_var();\n     run_field_inv_all_var();\n     run_field_misc();\n+    run_field_convert();\n     run_sqr();\n     run_sqrt();\n \n@@ -1700,18 +1868,13 @@ int main(int argc, char **argv) {\n     run_ecdsa_openssl();\n #endif\n \n-    printf(\"random run = %llu\\n\", (unsigned long long)secp256k1_rand32() + ((unsigned long long)secp256k1_rand32() << 32));\n+    secp256k1_rand256(run32);\n+    printf(\"random run = %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\\n\", run32[0], run32[1], run32[2], run32[3], run32[4], run32[5], run32[6], run32[7], run32[8], run32[9], run32[10], run32[11], run32[12], run32[13], run32[14], run32[15]);\n \n     /* shutdown */\n     secp256k1_stop();\n \n     /* shutting down twice shouldn't cause any double frees. */\n     secp256k1_stop();\n-\n-    /* Same for the internal shutdown functions. */\n-    secp256k1_fe_stop();\n-    secp256k1_ge_stop();\n-    secp256k1_scalar_stop();\n-    secp256k1_ecdsa_stop();\n     return 0;\n }"
      },
      {
        "sha": "ae98639f7ca31ae4621b497017fb6d9b32b81dba",
        "filename": "src/secp256k1/src/util.h",
        "status": "modified",
        "additions": 19,
        "deletions": 2,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223d8630b0bf1809d29660004255237ad9d15f86/src/secp256k1/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/util.h?ref=223d8630b0bf1809d29660004255237ad9d15f86",
        "patch": "@@ -27,7 +27,7 @@\n } while(0)\n #endif\n \n-#ifndef HAVE_BUILTIN_EXPECT\n+#ifdef HAVE_BUILTIN_EXPECT\n #define EXPECT(x,c) __builtin_expect((x),(c))\n #else\n #define EXPECT(x,c) (x)\n@@ -61,7 +61,7 @@\n #define VERIFY_CHECK(cond) do { (void)(cond); } while(0)\n #endif\n \n-static inline void *checked_malloc(size_t size) {\n+static SECP256K1_INLINE void *checked_malloc(size_t size) {\n     void *ret = malloc(size);\n     CHECK(ret != NULL);\n     return ret;\n@@ -84,4 +84,21 @@ static inline void *checked_malloc(size_t size) {\n # endif\n #endif\n \n+#if defined(_WIN32)\n+# define I64FORMAT \"I64d\"\n+# define I64uFORMAT \"I64u\"\n+#else\n+# define I64FORMAT \"lld\"\n+# define I64uFORMAT \"llu\"\n+#endif\n+\n+#if defined(HAVE___INT128)\n+# if defined(__GNUC__)\n+#  define SECP256K1_GNUC_EXT __extension__\n+# else\n+#  define SECP256K1_GNUC_EXT\n+# endif\n+SECP256K1_GNUC_EXT typedef unsigned __int128 uint128_t;\n+#endif\n+\n #endif"
      }
    ]
  },
  {
    "sha": "437ada3e55df8ae6f801cb2aa2e79ec5bb5f1971",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzdhZGEzZTU1ZGY4YWU2ZjgwMWNiMmFhMmU3OWVjNWJiNWYxOTcx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-27T22:31:44Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-27T22:31:47Z"
      },
      "message": "Switch test case signing to RFC6979 extra entropy\n\nInstead of manually tweaking the deterministic nonce post-generation,\npass the test case number in as extra entropy to RFC6979.",
      "tree": {
        "sha": "51fe5e19a064fc7637de9145c9004823fcb110d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/51fe5e19a064fc7637de9145c9004823fcb110d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/437ada3e55df8ae6f801cb2aa2e79ec5bb5f1971",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/437ada3e55df8ae6f801cb2aa2e79ec5bb5f1971",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/437ada3e55df8ae6f801cb2aa2e79ec5bb5f1971",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/437ada3e55df8ae6f801cb2aa2e79ec5bb5f1971/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "223d8630b0bf1809d29660004255237ad9d15f86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/223d8630b0bf1809d29660004255237ad9d15f86",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/223d8630b0bf1809d29660004255237ad9d15f86"
      }
    ],
    "stats": {
      "total": 109,
      "additions": 49,
      "deletions": 60
    },
    "files": [
      {
        "sha": "e146e47d0dfb9070d75d5d791b2e6fe1abb8512b",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 14,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/437ada3e55df8ae6f801cb2aa2e79ec5bb5f1971/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/437ada3e55df8ae6f801cb2aa2e79ec5bb5f1971/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=437ada3e55df8ae6f801cb2aa2e79ec5bb5f1971",
        "patch": "@@ -5,6 +5,7 @@\n #include \"key.h\"\n \n #include \"arith_uint256.h\"\n+#include \"crypto/common.h\"\n #include \"crypto/hmac_sha512.h\"\n #include \"eccryptoverify.h\"\n #include \"pubkey.h\"\n@@ -73,25 +74,14 @@ CPubKey CKey::GetPubKey() const {\n     return result;\n }\n \n-extern \"C\"\n-{\n-static int secp256k1_nonce_function_test_case(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, unsigned int attempt, const void *data)\n-{\n-    const uint32_t *test_case = static_cast<const uint32_t*>(data);\n-    uint256 nonce;\n-    secp256k1_nonce_function_rfc6979(nonce.begin(), msg32, key32, attempt, NULL);\n-    nonce = ArithToUint256(UintToArith256(nonce) + *test_case);\n-    memcpy(nonce32, nonce.begin(), 32);\n-    return 1;\n-}\n-}\n-\n bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_t test_case) const {\n     if (!fValid)\n         return false;\n     vchSig.resize(72);\n     int nSigLen = 72;\n-    int ret = secp256k1_ecdsa_sign(hash.begin(), (unsigned char*)&vchSig[0], &nSigLen, begin(), test_case == 0 ? secp256k1_nonce_function_rfc6979 : secp256k1_nonce_function_test_case, test_case == 0 ? NULL : &test_case);\n+    unsigned char extra_entropy[32] = {0};\n+    WriteLE32(extra_entropy, test_case);\n+    int ret = secp256k1_ecdsa_sign(hash.begin(), (unsigned char*)&vchSig[0], &nSigLen, begin(), secp256k1_nonce_function_rfc6979, test_case ? extra_entropy : NULL);\n     assert(ret);\n     vchSig.resize(nSigLen);\n     return true;"
      },
      {
        "sha": "104a8f5c72035071dd92252c5e834a359ac5aa28",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/437ada3e55df8ae6f801cb2aa2e79ec5bb5f1971/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/437ada3e55df8ae6f801cb2aa2e79ec5bb5f1971/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=437ada3e55df8ae6f801cb2aa2e79ec5bb5f1971",
        "patch": "@@ -124,8 +124,7 @@ class CKey\n \n     /**\n      * Create a DER-serialized signature.\n-     * The test_case parameter tweaks the deterministic nonce, and is only for\n-     * testing. It should be zero for normal use.\n+     * The test_case parameter tweaks the deterministic nonce.\n      */\n     bool Sign(const uint256& hash, std::vector<unsigned char>& vchSig, uint32_t test_case = 0) const;\n "
      },
      {
        "sha": "271bc70f7352fe284ff0cfffb70a78aee17c9d4e",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/437ada3e55df8ae6f801cb2aa2e79ec5bb5f1971/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/437ada3e55df8ae6f801cb2aa2e79ec5bb5f1971/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=437ada3e55df8ae6f801cb2aa2e79ec5bb5f1971",
        "patch": "@@ -522,13 +522,13 @@\n \n [\"Automatically generated test cases\"],\n [\n-    \"0x47 0x3044022053205076a7bb12d2db3162a2d97d8197631f829b065948b7019b15482af819a902204328dcc02c994ca086b1226d0d5f1674d23cfae0d846143df812b81cab3391e801\",\n+    \"0x47 0x304402200a5c6163f07b8c3b013c4d1d6dba25e780b39658d79ba37af7057a3b7f15ffa102201fd9b4eaa9943f734928b99a83592c2e7bf342ea2680f6a2bb705167966b742001\",\n     \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n     \"\",\n     \"P2PK, bad sig\"\n ],\n [\n-    \"0x47 0x30440220151ea78fa148b59f399b23731b634645ebc142f299ee9838d46fb78cf7e0bc0102200d62327dcd54ac6bcfb1516b035b1bf8eaea438c52c62d3450d1f3a8f030e0de01 0x21 0x03363d90d446b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640\",\n+    \"0x47 0x3044022034bb0494b50b8ef130e2185bb220265b9284ef5b4b8a8da4d8415df489c83b5102206259a26d9cc0a125ac26af6153b17c02956855ebe1467412f066e402f5f05d1201 0x21 0x03363d90d446b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640\",\n     \"DUP HASH160 0x14 0xc0834c0c158f53be706d234c38fd52de7eece656 EQUALVERIFY CHECKSIG\",\n     \"\",\n     \"P2PKH, bad pubkey\"\n@@ -540,19 +540,19 @@\n     \"P2PK anyonecanpay marked with normal hashtype\"\n ],\n [\n-    \"0x47 0x304402202166fcd5e607de452d3c6f15e059505cf21654346592f9650ba906b9e8be88fa022005d976d28eb8de477102feba28807b3ad361e7fa24796d259c9d61452f7c318c01 0x23 0x210279be667ef9dcbbac54a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac\",\n+    \"0x47 0x3044022003fef42ed6c7be8917441218f525a60e2431be978e28b7aca4d7a532cc413ae8022067a1f82c74e8d69291b90d148778405c6257bbcfc2353cc38a3e1f22bf44254601 0x23 0x210279be667ef9dcbbac54a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac\",\n     \"HASH160 0x14 0x23b0ad3477f2178bc0b3eed26e4e6316f4e83aa1 EQUAL\",\n     \"P2SH\",\n     \"P2SH(P2PK), bad redeemscript\"\n ],\n [\n-    \"0x47 0x3044022064cc90ca89ad721384b231653b945579359a24b928ef8539b331172628c9cc6102203e238869ab5dac3fc293db53c12e7dd3079e86cfde9024b689efc7227e4d671001 0x19 0x76a9147cf9c846cd4882efec4bf07e44ebdad495c94f4b88ac\",\n+    \"0x47 0x304402204e2eb034be7b089534ac9e798cf6a2c79f38bcb34d1b179efd6f2de0841735db022071461beb056b5a7be1819da6a3e3ce3662831ecc298419ca101eb6887b5dd6a401 0x19 0x76a9147cf9c846cd4882efec4bf07e44ebdad495c94f4b88ac\",\n     \"HASH160 0x14 0x2df519943d5acc0ef5222091f9dfe3543f489a82 EQUAL\",\n     \"P2SH\",\n     \"P2SH(P2PKH), bad sig\"\n ],\n [\n-    \"0 0x47 0x3044022051254b9fb476a52d85530792b578f86fea70ec1ffb4393e661bcccb23d8d63d3022076505f94a403c86097841944e044c70c2045ce90e36de51f7e9d3828db98a07501 0x47 0x304402206d32e6d6b131ef2fe77b6a9b90b120d74e3e238e79dcffb10523a6ec94f93d65022067ae8772632ddf4c389258c6b70ed0ff94f20ee8f60207aa192a52a2469cddd901 0\",\n+    \"0 0x47 0x3044022051254b9fb476a52d85530792b578f86fea70ec1ffb4393e661bcccb23d8d63d3022076505f94a403c86097841944e044c70c2045ce90e36de51f7e9d3828db98a07501 0x47 0x304402200a358f750934b3feb822f1966bfcd8bbec9eeaa3a8ca941e11ee5960e181fa01022050bf6b5a8e7750f70354ae041cb68a7bade67ec6c3ab19eb359638974410626e01 0\",\n     \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\",\n     \"\",\n     \"3-of-3, 2 sigs\"\n@@ -564,13 +564,13 @@\n     \"P2SH(2-of-3), 1 sig\"\n ],\n [\n-    \"0x47 0x30440220001d6702bfa4f49c3a2542af9b1c2844a2eaac55f86f310f42d26a5dd17d6a8002202cdadbe608c00b50dd951c6ba0877d5b07a970f3e265c18697bc413a0a86f69901\",\n+    \"0x47 0x304402200060558477337b9022e70534f1fea71a318caf836812465a2509931c5e7c4987022078ec32bd50ac9e03a349ba953dfd9fe1c8d2dd8bdb1d38ddca844d3d5c78c11801\",\n     \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n     \"DERSIG\",\n     \"P2PK with too much R padding\"\n ],\n [\n-    \"0x48 0x304502207d2b258e959605e2ea50b46fea1325b7391ffb0c14a5b58ef8ad3851da3644380221007e75136df5f2e38216c4338b31c97e8307102edb97d611e06914e1f8fba68ead01\",\n+    \"0x48 0x304502202de8c03fc525285c9c535631019a5f2af7c6454fa9eb392a3756a4917c420edd02210046130bf2baf7cfc065067c8b9e33a066d9c15edcea9feb0ca2d233e3597925b401\",\n     \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n     \"DERSIG\",\n     \"P2PK with too much S padding\"\n@@ -582,19 +582,19 @@\n     \"P2PK with too little R padding\"\n ],\n [\n-    \"0x47 0x30440220003040725f724b0e2142fc44ac71f6e13161f6410aeb6dee477952ede3b6a6ca022041ff4940ee3d88116ad281d7cc556e1f2c9427d82290bd7974a25addbcd5bede01\",\n+    \"0x47 0x30440220005ece1335e7f757a1a1f476a7fb5bd90964e8a022489f890614a04acfb734c002206c12b8294a6513c7710e8c82d3c23d75cdbfe83200eb7efb495701958501a5d601\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG NOT\",\n     \"DERSIG\",\n     \"P2PK NOT with bad sig with too much R padding\"\n ],\n [\n-    \"0x47 0x30440220003040725f724a0e2142fc44ac71f6e13161f6410aeb6dee477952ede3b6a6ca022041ff4940ee3d88116ad281d7cc556e1f2c9427d82290bd7974a25addbcd5bede01\",\n+    \"0x47 0x30440220005ece1335e7f657a1a1f476a7fb5bd90964e8a022489f890614a04acfb734c002206c12b8294a6513c7710e8c82d3c23d75cdbfe83200eb7efb495701958501a5d601\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG NOT\",\n     \"\",\n     \"P2PK NOT with too much R padding but no DERSIG\"\n ],\n [\n-    \"0x47 0x30440220003040725f724a0e2142fc44ac71f6e13161f6410aeb6dee477952ede3b6a6ca022041ff4940ee3d88116ad281d7cc556e1f2c9427d82290bd7974a25addbcd5bede01\",\n+    \"0x47 0x30440220005ece1335e7f657a1a1f476a7fb5bd90964e8a022489f890614a04acfb734c002206c12b8294a6513c7710e8c82d3c23d75cdbfe83200eb7efb495701958501a5d601\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG NOT\",\n     \"DERSIG\",\n     \"P2PK NOT with too much R padding\"\n@@ -648,19 +648,19 @@\n     \"BIP66 example 6, with DERSIG\"\n ],\n [\n-    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0x47 0x304402200b3d0b0375bb15c14620afa4aa10ae90a0d6a046ce217bc20fe0bc1ced68c1b802204b550acab90ae6d3478057c9ad24f9df743815b799b6449dd7e7f6d3bc6e274c01\",\n+    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0x47 0x3044022027c2714269ca5aeecc4d70edc88ba5ee0e3da4986e9216028f489ab4f1b8efce022022bd545b4951215267e4c5ceabd4c5350331b2e4a0b6494c56f361fa5a57a1a201\",\n     \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n     \"DERSIG\",\n     \"BIP66 example 7, with DERSIG\"\n ],\n [\n-    \"0 0x47 0x30440220f00a77260d34ec2f0c59621dc710f58169d0ca06df1a88cd4b1f1b97bd46991b02201ee220c7e04f26aed03f94aa97fb09ca5627163bf4ba07e6979972ec737db22601 0x47 0x3044022079ea80afd538d9ada421b5101febeb6bc874e01dde5bca108c1d0479aec339a4022004576db8f66130d1df686ccf00935703689d69cf539438da1edab208b0d63c4801\",\n+    \"0 0x47 0x30440220b119d67d389315308d1745f734a51ff3ec72e06081e84e236fdf9dc2f5d2a64802204b04e3bc38674c4422ea317231d642b56dc09d214a1ecbbf16ecca01ed996e2201 0x47 0x3044022079ea80afd538d9ada421b5101febeb6bc874e01dde5bca108c1d0479aec339a4022004576db8f66130d1df686ccf00935703689d69cf539438da1edab208b0d63c4801\",\n     \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n     \"\",\n     \"BIP66 example 8, without DERSIG\"\n ],\n [\n-    \"0 0x47 0x30440220f00a77260d34ec2f0c59621dc710f58169d0ca06df1a88cd4b1f1b97bd46991b02201ee220c7e04f26aed03f94aa97fb09ca5627163bf4ba07e6979972ec737db22601 0x47 0x3044022079ea80afd538d9ada421b5101febeb6bc874e01dde5bca108c1d0479aec339a4022004576db8f66130d1df686ccf00935703689d69cf539438da1edab208b0d63c4801\",\n+    \"0 0x47 0x30440220b119d67d389315308d1745f734a51ff3ec72e06081e84e236fdf9dc2f5d2a64802204b04e3bc38674c4422ea317231d642b56dc09d214a1ecbbf16ecca01ed996e2201 0x47 0x3044022079ea80afd538d9ada421b5101febeb6bc874e01dde5bca108c1d0479aec339a4022004576db8f66130d1df686ccf00935703689d69cf539438da1edab208b0d63c4801\",\n     \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n     \"DERSIG\",\n     \"BIP66 example 8, with DERSIG\"\n@@ -678,7 +678,7 @@\n     \"BIP66 example 9, with DERSIG\"\n ],\n [\n-    \"0 0 0x47 0x30440220afa76a8f60622f813b05711f051c6c3407e32d1b1b70b0576c1f01b54e4c05c702200d58e9df044fd1845cabfbeef6e624ba0401daf7d7e084736f9ff601c3783bf501\",\n+    \"0 0 0x47 0x30440220da6f441dc3b4b2c84cfa8db0cd5b34ed92c9e01686de5a800d40498b70c0dcac02207c2cf91b0c32b860c4cd4994be36cfb84caf8bb7c3a8e4d96a31b2022c5299c501\",\n     \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n     \"DERSIG\",\n     \"BIP66 example 10, with DERSIG\"\n@@ -708,37 +708,37 @@\n     \"P2PK with high S\"\n ],\n [\n-    \"0x47 0x30440220745d63eb70d45652128b450aa5ca7d9b513439963f261cb1c40a60f0785e7ee402204877785b38945ca9dbec78e1c1d4dd12148cc25c868bd27480023b49ae0f310501\",\n+    \"0x47 0x3044022057292e2d4dfe775becdd0a9e6547997c728cdf35390f6a017da56d654d374e4902206b643be2fc53763b4e284845bfea2c597d2dc7759941dce937636c9d341b71ed01\",\n     \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n     \"STRICTENC\",\n     \"P2PK with hybrid pubkey\"\n ],\n [\n-    \"0x47 0x30440220606f6f9f6cebc94ebfb6a4bff0b682bd99f05511295545ce9b275e98be3c946102206871d6a76f4e1b43d9763cfc5647844e4811682b1cab0325f060f44ddf44002201\",\n+    \"0x47 0x30440220035d554e3153c14950c9993f41c496607a8e24093db0595be7bf875cf64fcf1f02204731c8c4e5daf15e706cec19cdd8f2c5b1d05490e11dab8465ed426569b6e92101\",\n     \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG NOT\",\n     \"\",\n     \"P2PK NOT with hybrid pubkey but no STRICTENC\"\n ],\n [\n-    \"0x47 0x30440220606f6f9f6cebc94ebfb6a4bff0b682bd99f05511295545ce9b275e98be3c946102206871d6a76f4e1b43d9763cfc5647844e4811682b1cab0325f060f44ddf44002201\",\n+    \"0x47 0x30440220035d554e3153c14950c9993f41c496607a8e24093db0595be7bf875cf64fcf1f02204731c8c4e5daf15e706cec19cdd8f2c5b1d05490e11dab8465ed426569b6e92101\",\n     \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG NOT\",\n     \"STRICTENC\",\n     \"P2PK NOT with hybrid pubkey\"\n ],\n [\n-    \"0x47 0x30440220606f6f9f6cebc84ebfb6a4bff0b682bd99f05511295545ce9b275e98be3c946102206871d6a76f4e1b43d9763cfc5647844e4811682b1cab0325f060f44ddf44002201\",\n+    \"0x47 0x30440220035d554e3153c04950c9993f41c496607a8e24093db0595be7bf875cf64fcf1f02204731c8c4e5daf15e706cec19cdd8f2c5b1d05490e11dab8465ed426569b6e92101\",\n     \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG NOT\",\n     \"STRICTENC\",\n     \"P2PK NOT with invalid hybrid pubkey\"\n ],\n [\n-    \"0 0x47 0x304402203cdcf66792fe97e3955655ede5dad004950e58b369831ffa7743132c507b272c022031fbcfb4a72b3e00217abf2f5557585f1f9891f12827d2f0a2ae2978e7f9f11001\",\n+    \"0 0x47 0x3044022079c7824d6c868e0e1a273484e28c2654a27d043c8a27f49f52cb72efed0759090220452bbbf7089574fa082095a4fc1b3a16bafcf97a3a34d745fafc922cce66b27201\",\n     \"1 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 2 CHECKMULTISIG\",\n     \"STRICTENC\",\n     \"1-of-2 with the first 1 hybrid pubkey\"\n ],\n [\n-    \"0x47 0x304402201c215cb13e4954e60ce4f6de74941904c771f998de7b1d9627e82a1949fde517022031c2197455f3dbecbb78321201308d7b039424e38d480772d7cd4eb465a083f405\",\n+    \"0x47 0x304402206177d513ec2cda444c021a1f4f656fc4c72ba108ae063e157eb86dc3575784940220666fc66702815d0e5413bb9b1df22aed44f5f1efb8b99d41dd5dc9a5be6d205205\",\n     \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\",\n     \"STRICTENC\",\n     \"P2PK with undefined hashtype\"\n@@ -750,7 +750,7 @@\n     \"P2PK NOT with invalid sig and undefined hashtype\"\n ],\n [\n-    \"1 0x47 0x3044022051254b9fb476a52d85530792b578f86fea70ec1ffb4393e661bcccb23d8d63d3022076505f94a403c86097841944e044c70c2045ce90e36de51f7e9d3828db98a07501 0x47 0x304402206d32e6d6b131ef2fe77b6a9b90b120d74e3e238e79dcffb10523a6ec94f93d65022067ae8772632ddf4c389258c6b70ed0ff94f20ee8f60207aa192a52a2469cddd901 0x47 0x304402200955d031fff71d8653221e85e36c3c85533d2312fc3045314b19650b7ae2f81002202a6bb8505e36201909d0921f01abff390ae6b7ff97bbf959f98aedeb0a56730901\",\n+    \"1 0x47 0x3044022051254b9fb476a52d85530792b578f86fea70ec1ffb4393e661bcccb23d8d63d3022076505f94a403c86097841944e044c70c2045ce90e36de51f7e9d3828db98a07501 0x47 0x304402200a358f750934b3feb822f1966bfcd8bbec9eeaa3a8ca941e11ee5960e181fa01022050bf6b5a8e7750f70354ae041cb68a7bade67ec6c3ab19eb359638974410626e01 0x47 0x304402200955d031fff71d8653221e85e36c3c85533d2312fc3045314b19650b7ae2f81002202a6bb8505e36201909d0921f01abff390ae6b7ff97bbf959f98aedeb0a56730901\",\n     \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\",\n     \"NULLDUMMY\",\n     \"3-of-3 with nonzero dummy\"\n@@ -762,7 +762,7 @@\n     \"3-of-3 NOT with invalid sig with nonzero dummy\"\n ],\n [\n-    \"0 0x47 0x304402206cb053202e1501e6faa24e6e309bf46a2f9255aa9484ff4a26efb7434f78a58a0220132b10419c3b99601f154bf86cf12259aacd8c6f363a73dacb1d0b941680bb4c01 DUP\",\n+    \"0 0x47 0x304402200abeb4bd07f84222f474aed558cfbdfc0b4e96cde3c2935ba7098b1ff0bd74c302204a04c1ca67b2a20abee210cf9a21023edccbbf8024b988812634233115c6b73901 DUP\",\n     \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 2 CHECKMULTISIG\",\n     \"SIGPUSHONLY\",\n     \"2-of-2 with two identical keys and sigs pushed using OP_DUP\"\n@@ -780,7 +780,7 @@\n     \"P2SH(P2PK) with non-push scriptSig\"\n ],\n [\n-    \"11 0x47 0x3044022053205076a7bb13d2db3162a2d97d8197631f829b065948b7019b15482af819a902204328dcc02c994ca086b1226d0d5f1674d23cfae0d846143df812b81cab3391e801\",\n+    \"11 0x47 0x304402200a5c6163f07b8d3b013c4d1d6dba25e780b39658d79ba37af7057a3b7f15ffa102201fd9b4eaa9943f734928b99a83592c2e7bf342ea2680f6a2bb705167966b742001\",\n     \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n     \"CLEANSTACK,P2SH\",\n     \"P2PK with unnecessary input\""
      },
      {
        "sha": "064dde8464d56b6a6c0c7769a4b3bc7dbf737a00",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/437ada3e55df8ae6f801cb2aa2e79ec5bb5f1971/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/437ada3e55df8ae6f801cb2aa2e79ec5bb5f1971/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=437ada3e55df8ae6f801cb2aa2e79ec5bb5f1971",
        "patch": "@@ -700,7 +700,7 @@\n \n [\"Automatically generated test cases\"],\n [\n-    \"0x47 0x3044022053205076a7bb13d2db3162a2d97d8197631f829b065948b7019b15482af819a902204328dcc02c994ca086b1226d0d5f1674d23cfae0d846143df812b81cab3391e801\",\n+    \"0x47 0x304402200a5c6163f07b8d3b013c4d1d6dba25e780b39658d79ba37af7057a3b7f15ffa102201fd9b4eaa9943f734928b99a83592c2e7bf342ea2680f6a2bb705167966b742001\",\n     \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n     \"\",\n     \"P2PK\"\n@@ -718,37 +718,37 @@\n     \"P2PK anyonecanpay\"\n ],\n [\n-    \"0x47 0x304402202166fcd5e607de452d3c6f15e059505cf21654346592f9650ba906b9e8be88fa022005d976d28eb8de477102feba28807b3ad361e7fa24796d259c9d61452f7c318c01 0x23 0x210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac\",\n+    \"0x47 0x3044022003fef42ed6c7be8917441218f525a60e2431be978e28b7aca4d7a532cc413ae8022067a1f82c74e8d69291b90d148778405c6257bbcfc2353cc38a3e1f22bf44254601 0x23 0x210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac\",\n     \"HASH160 0x14 0x23b0ad3477f2178bc0b3eed26e4e6316f4e83aa1 EQUAL\",\n     \"P2SH\",\n     \"P2SH(P2PK)\"\n ],\n [\n-    \"0x47 0x3044022064cc90ca89ad721384b231653b945579359a24b928ef8539b331172628c9cc6102203e238869ab5dac3fc293db53c12e7dd3079e86cfde9024b689efc7227e4d671001 0x19 0x76a9147cf9c846cd4882efec4bf07e44ebdad495c94f4b88ac\",\n+    \"0x47 0x304402204e2eb034be7b089534ac9e798cf6a2c79f38bcb34d1b179efd6f2de0841735db022071461beb056b5a7be1819da6a3e3ce3662831ecc298419ca101eb6887b5dd6a401 0x19 0x76a9147cf9c846cd4882efec4bf07e44ebdad495c94f4b88ac\",\n     \"HASH160 0x14 0x2df519943d5acc0ef5222091f9dfe3543f489a82 EQUAL\",\n     \"\",\n     \"P2SH(P2PKH), bad sig but no VERIFY_P2SH\"\n ],\n [\n-    \"0 0x47 0x3044022051254b9fb476a52d85530792b578f86fea70ec1ffb4393e661bcccb23d8d63d3022076505f94a403c86097841944e044c70c2045ce90e36de51f7e9d3828db98a07501 0x47 0x304402206d32e6d6b131ef2fe77b6a9b90b120d74e3e238e79dcffb10523a6ec94f93d65022067ae8772632ddf4c389258c6b70ed0ff94f20ee8f60207aa192a52a2469cddd901 0x47 0x304402200955d031fff71d8653221e85e36c3c85533d2312fc3045314b19650b7ae2f81002202a6bb8505e36201909d0921f01abff390ae6b7ff97bbf959f98aedeb0a56730901\",\n+    \"0 0x47 0x3044022051254b9fb476a52d85530792b578f86fea70ec1ffb4393e661bcccb23d8d63d3022076505f94a403c86097841944e044c70c2045ce90e36de51f7e9d3828db98a07501 0x47 0x304402200a358f750934b3feb822f1966bfcd8bbec9eeaa3a8ca941e11ee5960e181fa01022050bf6b5a8e7750f70354ae041cb68a7bade67ec6c3ab19eb359638974410626e01 0x47 0x304402200955d031fff71d8653221e85e36c3c85533d2312fc3045314b19650b7ae2f81002202a6bb8505e36201909d0921f01abff390ae6b7ff97bbf959f98aedeb0a56730901\",\n     \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\",\n     \"\",\n     \"3-of-3\"\n ],\n [\n-    \"0 0x47 0x304402205b7d2c2f177ae76cfbbf14d589c113b0b35db753d305d5562dd0b61cbf366cfb02202e56f93c4f08a27f986cd424ffc48a462c3202c4902104d4d0ff98ed28f4bf8001 0x47 0x304402204511cf05e85c2be07c6c176c5338a08ed3cb34212667f39613340881169986c002207cc48b27aa3691a20706a5773ec9923cadd20fedffd00c24457d85f83f0b51fe01 0x4c69 0x52210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179821038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f515082103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff464053ae\",\n+    \"0 0x47 0x304402205b7d2c2f177ae76cfbbf14d589c113b0b35db753d305d5562dd0b61cbf366cfb02202e56f93c4f08a27f986cd424ffc48a462c3202c4902104d4d0ff98ed28f4bf8001 0x47 0x30440220563e5b3b1fc11662a84bc5ea2a32cc3819703254060ba30d639a1aaf2d5068ad0220601c1f47ddc76d93284dd9ed68f7c9974c4a0ea7cbe8a247d6bc3878567a5fca01 0x4c69 0x52210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179821038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f515082103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff464053ae\",\n     \"HASH160 0x14 0xc9e4a896d149702d0d1695434feddd52e24ad78d EQUAL\",\n     \"P2SH\",\n     \"P2SH(2-of-3)\"\n ],\n [\n-    \"0x47 0x30440220001d6702bfa4f49c3a2542af9b1c2844a2eaac55f86f310f42d26a5dd17d6a8002202cdadbe608c00b50dd951c6ba0877d5b07a970f3e265c18697bc413a0a86f69901\",\n+    \"0x47 0x304402200060558477337b9022e70534f1fea71a318caf836812465a2509931c5e7c4987022078ec32bd50ac9e03a349ba953dfd9fe1c8d2dd8bdb1d38ddca844d3d5c78c11801\",\n     \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n     \"\",\n     \"P2PK with too much R padding but no DERSIG\"\n ],\n [\n-    \"0x48 0x304502207d2b258e959605e2ea50b46fea1325b7391ffb0c14a5b58ef8ad3851da3644380221007e75136df5f2e38216c4338b31c97e8307102edb97d611e06914e1f8fba68ead01\",\n+    \"0x48 0x304502202de8c03fc525285c9c535631019a5f2af7c6454fa9eb392a3756a4917c420edd02210046130bf2baf7cfc065067c8b9e33a066d9c15edcea9feb0ca2d233e3597925b401\",\n     \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n     \"\",\n     \"P2PK with too much S padding but no DERSIG\"\n@@ -760,7 +760,7 @@\n     \"P2PK with too little R padding but no DERSIG\"\n ],\n [\n-    \"0x47 0x30440220003040725f724b0e2142fc44ac71f6e13161f6410aeb6dee477952ede3b6a6ca022041ff4940ee3d88116ad281d7cc556e1f2c9427d82290bd7974a25addbcd5bede01\",\n+    \"0x47 0x30440220005ece1335e7f757a1a1f476a7fb5bd90964e8a022489f890614a04acfb734c002206c12b8294a6513c7710e8c82d3c23d75cdbfe83200eb7efb495701958501a5d601\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG NOT\",\n     \"\",\n     \"P2PK NOT with bad sig with too much R padding but no DERSIG\"\n@@ -790,25 +790,25 @@\n     \"BIP66 example 6, without DERSIG\"\n ],\n [\n-    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0x47 0x304402200b3d0b0375bb15c14620afa4aa10ae90a0d6a046ce217bc20fe0bc1ced68c1b802204b550acab90ae6d3478057c9ad24f9df743815b799b6449dd7e7f6d3bc6e274c01\",\n+    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0x47 0x3044022027c2714269ca5aeecc4d70edc88ba5ee0e3da4986e9216028f489ab4f1b8efce022022bd545b4951215267e4c5ceabd4c5350331b2e4a0b6494c56f361fa5a57a1a201\",\n     \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n     \"\",\n     \"BIP66 example 7, without DERSIG\"\n ],\n [\n-    \"0 0 0x47 0x30440220afa76a8f60622f813b05711f051c6c3407e32d1b1b70b0576c1f01b54e4c05c702200d58e9df044fd1845cabfbeef6e624ba0401daf7d7e084736f9ff601c3783bf501\",\n+    \"0 0 0x47 0x30440220da6f441dc3b4b2c84cfa8db0cd5b34ed92c9e01686de5a800d40498b70c0dcac02207c2cf91b0c32b860c4cd4994be36cfb84caf8bb7c3a8e4d96a31b2022c5299c501\",\n     \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n     \"\",\n     \"BIP66 example 10, without DERSIG\"\n ],\n [\n-    \"0 0x47 0x30440220f00a77260d34ec2f0c59621dc710f58169d0ca06df1a88cd4b1f1b97bd46991b02201ee220c7e04f26aed03f94aa97fb09ca5627163bf4ba07e6979972ec737db22601 0\",\n+    \"0 0x47 0x30440220b119d67d389315308d1745f734a51ff3ec72e06081e84e236fdf9dc2f5d2a64802204b04e3bc38674c4422ea317231d642b56dc09d214a1ecbbf16ecca01ed996e2201 0\",\n     \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n     \"\",\n     \"BIP66 example 12, without DERSIG\"\n ],\n [\n-    \"0 0x47 0x30440220f00a77260d34ec2f0c59621dc710f58169d0ca06df1a88cd4b1f1b97bd46991b02201ee220c7e04f26aed03f94aa97fb09ca5627163bf4ba07e6979972ec737db22601 0\",\n+    \"0 0x47 0x30440220b119d67d389315308d1745f734a51ff3ec72e06081e84e236fdf9dc2f5d2a64802204b04e3bc38674c4422ea317231d642b56dc09d214a1ecbbf16ecca01ed996e2201 0\",\n     \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n     \"DERSIG\",\n     \"BIP66 example 12, with DERSIG\"\n@@ -826,31 +826,31 @@\n     \"P2PK with high S but no LOW_S\"\n ],\n [\n-    \"0x47 0x30440220745d63eb70d45652128b450aa5ca7d9b513439963f261cb1c40a60f0785e7ee402204877785b38945ca9dbec78e1c1d4dd12148cc25c868bd27480023b49ae0f310501\",\n+    \"0x47 0x3044022057292e2d4dfe775becdd0a9e6547997c728cdf35390f6a017da56d654d374e4902206b643be2fc53763b4e284845bfea2c597d2dc7759941dce937636c9d341b71ed01\",\n     \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n     \"\",\n     \"P2PK with hybrid pubkey but no STRICTENC\"\n ],\n [\n-    \"0x47 0x30440220606f6f9f6cebc84ebfb6a4bff0b682bd99f05511295545ce9b275e98be3c946102206871d6a76f4e1b43d9763cfc5647844e4811682b1cab0325f060f44ddf44002201\",\n+    \"0x47 0x30440220035d554e3153c04950c9993f41c496607a8e24093db0595be7bf875cf64fcf1f02204731c8c4e5daf15e706cec19cdd8f2c5b1d05490e11dab8465ed426569b6e92101\",\n     \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG NOT\",\n     \"\",\n     \"P2PK NOT with invalid hybrid pubkey but no STRICTENC\"\n ],\n [\n-    \"0 0x47 0x304402203a5ee39032637c431af0a3ac42e32e0627390bd44f6f98c9c04e6d714635ad0202207b42fcd889c3ae8a1b515608f38535f1f9be815176ee8d1b65a27c767cf37aed01\",\n+    \"0 0x47 0x304402202e79441ad1baf5a07fb86bae3753184f6717d9692680947ea8b6e8b777c69af1022079a262e13d868bb5a0964fefe3ba26942e1b0669af1afb55ef3344bc9d4fc4c401\",\n     \"1 0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 2 CHECKMULTISIG\",\n     \"\",\n     \"1-of-2 with the second 1 hybrid pubkey and no STRICTENC\"\n ],\n [\n-    \"0 0x47 0x304402203a5ee39032637c431af0a3ac42e32e0627390bd44f6f98c9c04e6d714635ad0202207b42fcd889c3ae8a1b515608f38535f1f9be815176ee8d1b65a27c767cf37aed01\",\n+    \"0 0x47 0x304402202e79441ad1baf5a07fb86bae3753184f6717d9692680947ea8b6e8b777c69af1022079a262e13d868bb5a0964fefe3ba26942e1b0669af1afb55ef3344bc9d4fc4c401\",\n     \"1 0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 2 CHECKMULTISIG\",\n     \"STRICTENC\",\n     \"1-of-2 with the second 1 hybrid pubkey\"\n ],\n [\n-    \"0x47 0x304402201c215cb13e4954e60ce4f6de74941904c771f998de7b1d9627e82a1949fde517022031c2197455f3dbecbb78321201308d7b039424e38d480772d7cd4eb465a083f405\",\n+    \"0x47 0x304402206177d513ec2cda444c021a1f4f656fc4c72ba108ae063e157eb86dc3575784940220666fc66702815d0e5413bb9b1df22aed44f5f1efb8b99d41dd5dc9a5be6d205205\",\n     \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\",\n     \"\",\n     \"P2PK with undefined hashtype but no STRICTENC\"\n@@ -862,7 +862,7 @@\n     \"P2PK NOT with invalid sig and undefined hashtype but no STRICTENC\"\n ],\n [\n-    \"1 0x47 0x3044022051254b9fb476a52d85530792b578f86fea70ec1ffb4393e661bcccb23d8d63d3022076505f94a403c86097841944e044c70c2045ce90e36de51f7e9d3828db98a07501 0x47 0x304402206d32e6d6b131ef2fe77b6a9b90b120d74e3e238e79dcffb10523a6ec94f93d65022067ae8772632ddf4c389258c6b70ed0ff94f20ee8f60207aa192a52a2469cddd901 0x47 0x304402200955d031fff71d8653221e85e36c3c85533d2312fc3045314b19650b7ae2f81002202a6bb8505e36201909d0921f01abff390ae6b7ff97bbf959f98aedeb0a56730901\",\n+    \"1 0x47 0x3044022051254b9fb476a52d85530792b578f86fea70ec1ffb4393e661bcccb23d8d63d3022076505f94a403c86097841944e044c70c2045ce90e36de51f7e9d3828db98a07501 0x47 0x304402200a358f750934b3feb822f1966bfcd8bbec9eeaa3a8ca941e11ee5960e181fa01022050bf6b5a8e7750f70354ae041cb68a7bade67ec6c3ab19eb359638974410626e01 0x47 0x304402200955d031fff71d8653221e85e36c3c85533d2312fc3045314b19650b7ae2f81002202a6bb8505e36201909d0921f01abff390ae6b7ff97bbf959f98aedeb0a56730901\",\n     \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\",\n     \"\",\n     \"3-of-3 with nonzero dummy but no NULLDUMMY\"\n@@ -874,19 +874,19 @@\n     \"3-of-3 NOT with invalid sig and nonzero dummy but no NULLDUMMY\"\n ],\n [\n-    \"0 0x47 0x304402206cb053202e1501e6faa24e6e309bf46a2f9255aa9484ff4a26efb7434f78a58a0220132b10419c3b99601f154bf86cf12259aacd8c6f363a73dacb1d0b941680bb4c01 DUP\",\n+    \"0 0x47 0x304402200abeb4bd07f84222f474aed558cfbdfc0b4e96cde3c2935ba7098b1ff0bd74c302204a04c1ca67b2a20abee210cf9a21023edccbbf8024b988812634233115c6b73901 DUP\",\n     \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 2 CHECKMULTISIG\",\n     \"\",\n     \"2-of-2 with two identical keys and sigs pushed using OP_DUP but no SIGPUSHONLY\"\n ],\n [\n-    \"0 0x47 0x304402206cb053202e1501e6faa24e6e309bf46a2f9255aa9484ff4a26efb7434f78a58a0220132b10419c3b99601f154bf86cf12259aacd8c6f363a73dacb1d0b941680bb4c01 0x47 0x304402206cb053202e1501e6faa24e6e309bf46a2f9255aa9484ff4a26efb7434f78a58a0220132b10419c3b99601f154bf86cf12259aacd8c6f363a73dacb1d0b941680bb4c01\",\n+    \"0 0x47 0x304402200abeb4bd07f84222f474aed558cfbdfc0b4e96cde3c2935ba7098b1ff0bd74c302204a04c1ca67b2a20abee210cf9a21023edccbbf8024b988812634233115c6b73901 0x47 0x304402200abeb4bd07f84222f474aed558cfbdfc0b4e96cde3c2935ba7098b1ff0bd74c302204a04c1ca67b2a20abee210cf9a21023edccbbf8024b988812634233115c6b73901\",\n     \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 2 CHECKMULTISIG\",\n     \"SIGPUSHONLY\",\n     \"2-of-2 with two identical keys and sigs pushed\"\n ],\n [\n-    \"11 0x47 0x3044022053205076a7bb13d2db3162a2d97d8197631f829b065948b7019b15482af819a902204328dcc02c994ca086b1226d0d5f1674d23cfae0d846143df812b81cab3391e801\",\n+    \"11 0x47 0x304402200a5c6163f07b8d3b013c4d1d6dba25e780b39658d79ba37af7057a3b7f15ffa102201fd9b4eaa9943f734928b99a83592c2e7bf342ea2680f6a2bb705167966b742001\",\n     \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n     \"P2SH\",\n     \"P2PK with unnecessary input but no CLEANSTACK\""
      }
    ]
  }
]