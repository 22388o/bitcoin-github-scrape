hebasto,2020-01-08 15:28:12,Does it adds new warning messages on master?,https://github.com/bitcoin/bitcoin/pull/17895#issuecomment-572120820,572120820,
practicalswift,2020-01-08 23:04:54,"@hebasto Good question! Yes, it warns about two variables where Clang's control flow analysis _cannot prove_ that the variables were not written to prior to use.\n\nGiven the severeness of the bugs that this diagnostic can help prevent I think that this slight increase in warning volume is a cost worth taking :)\n\nThe two warnings emitted:\n\n```\nrandom.cpp:136:12: warning: variable 'r1' ",https://github.com/bitcoin/bitcoin/pull/17895#issuecomment-572300658,572300658,
MarcoFalke,2020-01-09 17:49:09,I think there are also some new warnings in qt?,https://github.com/bitcoin/bitcoin/pull/17895#issuecomment-572675452,572675452,
practicalswift,2020-01-10 13:38:42,@MarcoFalke I don't see any Qt warnings of type `-Wconditional-uninitialized`: what commands should I run to reproduce? :),https://github.com/bitcoin/bitcoin/pull/17895#issuecomment-573038624,573038624,
Empact,2020-01-10 23:56:55,"I'm up for doing cleanup work in the dependencies, e.g. https://github.com/google/leveldb/pull/774",https://github.com/bitcoin/bitcoin/pull/17895#issuecomment-573251024,573251024,
DrahtBot,2020-02-07 10:47:56,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18088 (build: ensure we aren't using GNU extensions by fanquake)\n\nIf you consider this pull request important, please a",https://github.com/bitcoin/bitcoin/pull/17895#issuecomment-583336984,583336984,
practicalswift,2020-02-18 12:57:06,Commenters + @Sjors @fanquake @laanwj who have all expressed interest in enabling compiler warnings: would you mind reviewing this PR to make it move forward towards either merge or close? :),https://github.com/bitcoin/bitcoin/pull/17895#issuecomment-587447083,587447083,
Sjors,2020-02-18 20:34:50,"Concept ACK\n\nI get the same two warnings on macOS 10.15.3 (without depends).\n1. I can live with the leveldb warning since there's work in progress to kill it\n2. In #17627 we had a long discussion about intentionally uninitialized variables in the RNG code. Although this is a different variable, I assume we also don't want to initialise it. Keeping the warning around until the end of time s",https://github.com/bitcoin/bitcoin/pull/17895#issuecomment-587802843,587802843,
practicalswift,2020-03-03 19:54:28,"@hebasto @Sjors \n\n> A source code comment `// intentionally uninitialized, see #17627 and #17895` could help, but isn't there a macro to suppress it?\n\nRegarding â€¦\n\n```\nrandom.cpp:136:12: warning: variable 'r1' may be uninitialized when used here [-Wconditional-uninitialized]\n    return r1;\n           ^~\nrandom.cpp:131:16: note: initialize the variable 'r1' to silence this warni",https://github.com/bitcoin/bitcoin/pull/17895#issuecomment-594137877,594137877,
practicalswift,2020-03-15 20:09:02,"Concept ACK:ers @Sjors, @fanquake and others: would you mind reviewing the change as well? Would love to see this merged to reduce the risk of more uninitialised reads reaching `master` :)",https://github.com/bitcoin/bitcoin/pull/17895#issuecomment-599258047,599258047,
MarcoFalke,2020-04-24 13:00:37,"Concept ACK, but it seems the only effect of this for now is to enable several ""false"" positives",https://github.com/bitcoin/bitcoin/pull/17895#issuecomment-618993933,618993933,
practicalswift,2020-04-24 13:27:27,"@MarcoFalke The effect is hopefully that if someone introduces an uninitialized read they will notice immediately thanks to the warning, but you're right that the `random.cpp` case and the two `leveldb/ ` cases will warn too :)\n\nIt is a trade-off I guess: benefit of reducing the risk of introducing new uninitialized reads vs cost of the spurious `random.cpp` warning (+ `leveldb`). Personally I",https://github.com/bitcoin/bitcoin/pull/17895#issuecomment-619009212,619009212,
MarcoFalke,2020-04-24 13:44:08,"I think as long as there are false positives, we should run the check once on every released version to prevent any mishaps. Not sure about forcing the false positives into every developer's eye on every compile.",https://github.com/bitcoin/bitcoin/pull/17895#issuecomment-619019298,619019298,
vasild,2020-04-24 14:09:11,"Concept ACK\n\nHowever I cannot sleep well when warnings have been printed on my screen. Once you allow one warning, this opens the door to others and eventually it becomes very difficult to close the door (clean all of them). It is easier to just never open the door (don't allow any warnings in the first place). For example, in this particular case if a warning is printed, then it is not possib",https://github.com/bitcoin/bitcoin/pull/17895#issuecomment-619033296,619033296,
practicalswift,2020-04-24 14:37:03,@MarcoFalke I see your point. Would you ACK with @vasild's suggested `random.cpp` patch applied?,https://github.com/bitcoin/bitcoin/pull/17895#issuecomment-619049966,619049966,
practicalswift,2020-04-27 14:54:02,"Given the four concept ACKs: what is the best way to move forward on this PR?\n\nEmpirically I seems like we need all help we can get with regards to avoiding uninitialized reads :)",https://github.com/bitcoin/bitcoin/pull/17895#issuecomment-620037776,620037776,
vasild,2020-04-27 15:26:28,"Would the one-line change in `src/leveldb/db/version_set.cc` cause any trouble with the next ""import"" of LevelDB, if that line is not changed upstream?\n\nI guess `git-substree(1)` is used for that and it should handle it transparently?\n\nIf the line is changed upstream and a conflict arises, then either 1) upstream accepted the fix we sent and the conflict should be resolved by ""take theirs""",https://github.com/bitcoin/bitcoin/pull/17895#issuecomment-620056744,620056744,
practicalswift,2020-04-27 15:28:17,@vasild I think our policy is to not make any local changes to leveldb :),https://github.com/bitcoin/bitcoin/pull/17895#issuecomment-620057981,620057981,
vasild,2020-04-27 15:54:38,"What about removing `-Wconditional-uninitialized` from flags when compiling LevelDB? I.e. change `src/Makefile.leveldb.include` like this:\n\n```diff\n-leveldb_libleveldb_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+leveldb_libleveldb_a_CXXFLAGS = $(AM_CXXFLAGS:-Wconditional-uninitialized=) $(PIE_FLAGS)\n```\n\n(untested, [GNU make doc](https://www.gnu.org/software/make/manual/html_node/Subst",https://github.com/bitcoin/bitcoin/pull/17895#issuecomment-620074243,620074243,
practicalswift,2020-04-29 14:31:20,"@vasild That sounds like a way forward! Feel free to tackle this issue. I'd be glad to review!\n\nI'm closing this PR as ""up for grabs"" :)",https://github.com/bitcoin/bitcoin/pull/17895#issuecomment-621249559,621249559,
vasild,2020-05-01 16:11:41,A followup of this: https://github.com/bitcoin/bitcoin/pull/18843,https://github.com/bitcoin/bitcoin/pull/17895#issuecomment-622451816,622451816,
