[
  {
    "sha": "f48211b700d171f7bcee7d3088269fdaaf1b5c13",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDgyMTFiNzAwZDE3MWY3YmNlZTdkMzA4ODI2OWZkYWFmMWI1YzEz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-08-15T10:20:13Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-22T02:22:43Z"
      },
      "message": "Bypass removeRecursive in removeForReorg",
      "tree": {
        "sha": "9063fad1acb61c2cd89df5682ea4763f374c6db9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9063fad1acb61c2cd89df5682ea4763f374c6db9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f48211b700d171f7bcee7d3088269fdaaf1b5c13",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f48211b700d171f7bcee7d3088269fdaaf1b5c13",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f48211b700d171f7bcee7d3088269fdaaf1b5c13",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f48211b700d171f7bcee7d3088269fdaaf1b5c13/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f08222e882b18c1f279308636e03beceece2dbf1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f08222e882b18c1f279308636e03beceece2dbf1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f08222e882b18c1f279308636e03beceece2dbf1"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "9816c9dcbbf7c493a9dcc22eaeb965b398aa0789",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f48211b700d171f7bcee7d3088269fdaaf1b5c13/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f48211b700d171f7bcee7d3088269fdaaf1b5c13/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=f48211b700d171f7bcee7d3088269fdaaf1b5c13",
        "patch": "@@ -541,24 +541,24 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n {\n     // Remove transactions spending a coinbase which are now immature and no-longer-final transactions\n     LOCK(cs);\n-    list<CTransaction> transactionsToRemove;\n+    setEntries txToRemove;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         const CTransaction& tx = it->GetTx();\n         LockPoints lp = it->GetLockPoints();\n         bool validLP =  TestLockPointValidity(&lp);\n         if (!CheckFinalTx(tx, flags) || !CheckSequenceLocks(tx, flags, &lp, validLP)) {\n             // Note if CheckSequenceLocks fails the LockPoints may still be invalid\n             // So it's critical that we remove the tx and not depend on the LockPoints.\n-            transactionsToRemove.push_back(tx);\n+            txToRemove.insert(it);\n         } else if (it->GetSpendsCoinbase()) {\n             BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n                 indexed_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n                 if (it2 != mapTx.end())\n                     continue;\n                 const CCoins *coins = pcoins->AccessCoins(txin.prevout.hash);\n-\t\tif (nCheckFrequency != 0) assert(coins);\n+                if (nCheckFrequency != 0) assert(coins);\n                 if (!coins || (coins->IsCoinBase() && ((signed long)nMemPoolHeight) - coins->nHeight < COINBASE_MATURITY)) {\n-                    transactionsToRemove.push_back(tx);\n+                    txToRemove.insert(it);\n                     break;\n                 }\n             }\n@@ -567,10 +567,11 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n             mapTx.modify(it, update_lock_points(lp));\n         }\n     }\n-    BOOST_FOREACH(const CTransaction& tx, transactionsToRemove) {\n-        list<CTransaction> removed;\n-        removeRecursive(tx, removed);\n+    setEntries setAllRemoves;\n+    for (txiter it : txToRemove) {\n+        CalculateDescendants(it, setAllRemoves);\n     }\n+    RemoveStaged(setAllRemoves, false);\n }\n \n void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed)"
      }
    ]
  },
  {
    "sha": "51f278329d43398428d60f5986f8d29a2041d28d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MWYyNzgzMjlkNDMzOTg0MjhkNjBmNTk4NmY4ZDI5YTIwNDFkMjhk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-08-15T11:10:57Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-22T02:22:43Z"
      },
      "message": "Make removed and conflicted arguments optional to remove",
      "tree": {
        "sha": "bed01adf0a9ef92f90711dc08ca05934c582da6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bed01adf0a9ef92f90711dc08ca05934c582da6f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51f278329d43398428d60f5986f8d29a2041d28d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51f278329d43398428d60f5986f8d29a2041d28d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/51f278329d43398428d60f5986f8d29a2041d28d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51f278329d43398428d60f5986f8d29a2041d28d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f48211b700d171f7bcee7d3088269fdaaf1b5c13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f48211b700d171f7bcee7d3088269fdaaf1b5c13",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f48211b700d171f7bcee7d3088269fdaaf1b5c13"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 31,
      "deletions": 35
    },
    "files": [
      {
        "sha": "a60e47504ff21cf86dcaa01963dfbc1ac4415fdc",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51f278329d43398428d60f5986f8d29a2041d28d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51f278329d43398428d60f5986f8d29a2041d28d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=51f278329d43398428d60f5986f8d29a2041d28d",
        "patch": "@@ -2768,10 +2768,9 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n         std::vector<uint256> vHashUpdate;\n         BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n             // ignore validation errors in resurrected transactions\n-            list<CTransaction> removed;\n             CValidationState stateDummy;\n             if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL, true)) {\n-                mempool.removeRecursive(tx, removed);\n+                mempool.removeRecursive(tx);\n             } else if (mempool.exists(tx.GetHash())) {\n                 vHashUpdate.push_back(tx.GetHash());\n             }\n@@ -2840,7 +2839,7 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n     int64_t nTime5 = GetTimeMicros(); nTimeChainState += nTime5 - nTime4;\n     LogPrint(\"bench\", \"  - Writing chainstate: %.2fms [%.2fs]\\n\", (nTime5 - nTime4) * 0.001, nTimeChainState * 0.000001);\n     // Remove conflicting transactions from the mempool.;\n-    mempool.removeForBlock(pblock->vtx, pindexNew->nHeight, txConflicted, !IsInitialBlockDownload());\n+    mempool.removeForBlock(pblock->vtx, pindexNew->nHeight, &txConflicted, !IsInitialBlockDownload());\n     // Update chainActive & related variables.\n     UpdateTip(pindexNew, chainparams);\n "
      },
      {
        "sha": "f3f1befbc0912cd502a4a47c6fcd690f17ad075a",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51f278329d43398428d60f5986f8d29a2041d28d/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51f278329d43398428d60f5986f8d29a2041d28d/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=51f278329d43398428d60f5986f8d29a2041d28d",
        "patch": "@@ -81,7 +81,7 @@ BOOST_AUTO_TEST_CASE(SimpleRoundTripTest)\n         BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[2].GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 1);\n \n         std::list<CTransaction> removed;\n-        pool.removeRecursive(block.vtx[2], removed);\n+        pool.removeRecursive(block.vtx[2], &removed);\n         BOOST_CHECK_EQUAL(removed.size(), 1);\n \n         CBlock block2;"
      },
      {
        "sha": "003daa203f2ed304632ba847615ee0ab42904007",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 15,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51f278329d43398428d60f5986f8d29a2041d28d/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51f278329d43398428d60f5986f8d29a2041d28d/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=51f278329d43398428d60f5986f8d29a2041d28d",
        "patch": "@@ -58,12 +58,12 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n     std::list<CTransaction> removed;\n \n     // Nothing in pool, remove should do nothing:\n-    testPool.removeRecursive(txParent, removed);\n+    testPool.removeRecursive(txParent, &removed);\n     BOOST_CHECK_EQUAL(removed.size(), 0);\n \n     // Just the parent:\n     testPool.addUnchecked(txParent.GetHash(), entry.FromTx(txParent));\n-    testPool.removeRecursive(txParent, removed);\n+    testPool.removeRecursive(txParent, &removed);\n     BOOST_CHECK_EQUAL(removed.size(), 1);\n     removed.clear();\n     \n@@ -75,16 +75,16 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n         testPool.addUnchecked(txGrandChild[i].GetHash(), entry.FromTx(txGrandChild[i]));\n     }\n     // Remove Child[0], GrandChild[0] should be removed:\n-    testPool.removeRecursive(txChild[0], removed);\n+    testPool.removeRecursive(txChild[0], &removed);\n     BOOST_CHECK_EQUAL(removed.size(), 2);\n     removed.clear();\n     // ... make sure grandchild and child are gone:\n-    testPool.removeRecursive(txGrandChild[0], removed);\n+    testPool.removeRecursive(txGrandChild[0], &removed);\n     BOOST_CHECK_EQUAL(removed.size(), 0);\n-    testPool.removeRecursive(txChild[0], removed);\n+    testPool.removeRecursive(txChild[0], &removed);\n     BOOST_CHECK_EQUAL(removed.size(), 0);\n     // Remove parent, all children/grandchildren should go:\n-    testPool.removeRecursive(txParent, removed);\n+    testPool.removeRecursive(txParent, &removed);\n     BOOST_CHECK_EQUAL(removed.size(), 5);\n     BOOST_CHECK_EQUAL(testPool.size(), 0);\n     removed.clear();\n@@ -97,7 +97,7 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n     }\n     // Now remove the parent, as might happen if a block-re-org occurs but the parent cannot be\n     // put into the mempool (maybe because it is non-standard):\n-    testPool.removeRecursive(txParent, removed);\n+    testPool.removeRecursive(txParent, &removed);\n     BOOST_CHECK_EQUAL(removed.size(), 6);\n     BOOST_CHECK_EQUAL(testPool.size(), 0);\n     removed.clear();\n@@ -281,12 +281,11 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     BOOST_CHECK_EQUAL(pool.size(), 10);\n \n     // Now try removing tx10 and verify the sort order returns to normal\n-    std::list<CTransaction> removed;\n-    pool.removeRecursive(pool.mapTx.find(tx10.GetHash())->GetTx(), removed);\n+    pool.removeRecursive(pool.mapTx.find(tx10.GetHash())->GetTx());\n     CheckSort<descendant_score>(pool, snapshotOrder);\n \n-    pool.removeRecursive(pool.mapTx.find(tx9.GetHash())->GetTx(), removed);\n-    pool.removeRecursive(pool.mapTx.find(tx8.GetHash())->GetTx(), removed);\n+    pool.removeRecursive(pool.mapTx.find(tx9.GetHash())->GetTx());\n+    pool.removeRecursive(pool.mapTx.find(tx8.GetHash())->GetTx());\n     /* Now check the sort on the mining score index.\n      * Final order should be:\n      *\n@@ -413,8 +412,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n     /* after tx6 is mined, tx7 should move up in the sort */\n     std::vector<CTransaction> vtx;\n     vtx.push_back(tx6);\n-    std::list<CTransaction> dummy;\n-    pool.removeForBlock(vtx, 1, dummy, false);\n+    pool.removeForBlock(vtx, 1, NULL, false);\n \n     sortedOrder.erase(sortedOrder.begin()+1);\n     sortedOrder.pop_back();\n@@ -549,12 +547,11 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     pool.addUnchecked(tx7.GetHash(), entry.Fee(9000LL).FromTx(tx7, &pool));\n \n     std::vector<CTransaction> vtx;\n-    std::list<CTransaction> conflicts;\n     SetMockTime(42);\n     SetMockTime(42 + CTxMemPool::ROLLING_FEE_HALFLIFE);\n     BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n     // ... we should keep the same min fee until we get a block\n-    pool.removeForBlock(vtx, 1, conflicts);\n+    pool.removeForBlock(vtx, 1);\n     SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE);\n     BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/2);\n     // ... then feerate should drop 1/2 each halflife"
      },
      {
        "sha": "a94979fd77d0734d633b02a0c6b91046b3cc62de",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51f278329d43398428d60f5986f8d29a2041d28d/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51f278329d43398428d60f5986f8d29a2041d28d/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=51f278329d43398428d60f5986f8d29a2041d28d",
        "patch": "@@ -137,8 +137,7 @@ void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey,\n     // Test that packages above the min relay fee do get included, even if one\n     // of the transactions is below the min relay fee\n     // Remove the low fee transaction and replace with a higher fee transaction\n-    std::list<CTransaction> dummy;\n-    mempool.removeRecursive(tx, dummy);\n+    mempool.removeRecursive(tx);\n     tx.vout[0].nValue -= 2; // Now we should be just over the min relay fee\n     hashLowFeeTx = tx.GetHash();\n     mempool.addUnchecked(hashLowFeeTx, entry.Fee(feeToUse+2).FromTx(tx));"
      },
      {
        "sha": "f57c24270c112f2589c16e47cfb03a4d0d493375",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51f278329d43398428d60f5986f8d29a2041d28d/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51f278329d43398428d60f5986f8d29a2041d28d/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=51f278329d43398428d60f5986f8d29a2041d28d",
        "patch": "@@ -46,7 +46,6 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     for (unsigned int i = 0; i < 128; i++)\n         garbage.push_back('X');\n     CMutableTransaction tx;\n-    std::list<CTransaction> dummyConflicted;\n     tx.vin.resize(1);\n     tx.vin[0].scriptSig = garbage;\n     tx.vout.resize(1);\n@@ -81,7 +80,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n                 txHashes[9-h].pop_back();\n             }\n         }\n-        mpool.removeForBlock(block, ++blocknum, dummyConflicted);\n+        mpool.removeForBlock(block, ++blocknum);\n         block.clear();\n         if (blocknum == 30) {\n             // At this point we should need to combine 5 buckets to get enough data points\n@@ -125,7 +124,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     // Mine 50 more blocks with no transactions happening, estimates shouldn't change\n     // We haven't decayed the moving average enough so we still have enough data points in every bucket\n     while (blocknum < 250)\n-        mpool.removeForBlock(block, ++blocknum, dummyConflicted);\n+        mpool.removeForBlock(block, ++blocknum);\n \n     for (int i = 1; i < 10;i++) {\n         BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() < origFeeEst[i-1] + deltaFee);\n@@ -146,7 +145,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n                 txHashes[j].push_back(hash);\n             }\n         }\n-        mpool.removeForBlock(block, ++blocknum, dummyConflicted);\n+        mpool.removeForBlock(block, ++blocknum);\n     }\n \n     int answerFound;\n@@ -167,7 +166,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n             txHashes[j].pop_back();\n         }\n     }\n-    mpool.removeForBlock(block, 265, dummyConflicted);\n+    mpool.removeForBlock(block, 265);\n     block.clear();\n     for (int i = 1; i < 10;i++) {\n         BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n@@ -187,7 +186,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n                     block.push_back(*ptx);\n             }\n         }\n-        mpool.removeForBlock(block, ++blocknum, dummyConflicted);\n+        mpool.removeForBlock(block, ++blocknum);\n         block.clear();\n     }\n     for (int i = 1; i < 10; i++) {"
      },
      {
        "sha": "193542ee5e619cee2da07a9e39ff5b335fe04833",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51f278329d43398428d60f5986f8d29a2041d28d/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51f278329d43398428d60f5986f8d29a2041d28d/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=51f278329d43398428d60f5986f8d29a2041d28d",
        "patch": "@@ -503,7 +503,7 @@ void CTxMemPool::CalculateDescendants(txiter entryit, setEntries &setDescendants\n     }\n }\n \n-void CTxMemPool::removeRecursive(const CTransaction &origTx, std::list<CTransaction>& removed)\n+void CTxMemPool::removeRecursive(const CTransaction &origTx, std::list<CTransaction>* removed)\n {\n     // Remove transaction from memory pool\n     {\n@@ -530,8 +530,10 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, std::list<CTransact\n         BOOST_FOREACH(txiter it, txToRemove) {\n             CalculateDescendants(it, setAllRemoves);\n         }\n-        BOOST_FOREACH(txiter it, setAllRemoves) {\n-            removed.push_back(it->GetTx());\n+        if (removed) {\n+            BOOST_FOREACH(txiter it, setAllRemoves) {\n+                removed->push_back(it->GetTx());\n+            }\n         }\n         RemoveStaged(setAllRemoves, false);\n     }\n@@ -574,7 +576,7 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n     RemoveStaged(setAllRemoves, false);\n }\n \n-void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed)\n+void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>* removed)\n {\n     // Remove transactions which depend on inputs of tx, recursively\n     LOCK(cs);\n@@ -595,7 +597,7 @@ void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>\n  * Called when a block is connected. Removes from mempool and updates the miner fee estimator.\n  */\n void CTxMemPool::removeForBlock(const std::vector<CTransaction>& vtx, unsigned int nBlockHeight,\n-                                std::list<CTransaction>& conflicts, bool fCurrentEstimate)\n+                                std::list<CTransaction>* conflicts, bool fCurrentEstimate)\n {\n     LOCK(cs);\n     std::vector<CTxMemPoolEntry> entries;"
      },
      {
        "sha": "297f5b8e5a261889a6ae5280f794a05a8f8e281a",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51f278329d43398428d60f5986f8d29a2041d28d/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51f278329d43398428d60f5986f8d29a2041d28d/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=51f278329d43398428d60f5986f8d29a2041d28d",
        "patch": "@@ -521,11 +521,11 @@ class CTxMemPool\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, bool fCurrentEstimate = true);\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool fCurrentEstimate = true);\n \n-    void removeRecursive(const CTransaction &tx, std::list<CTransaction>& removed);\n+    void removeRecursive(const CTransaction &tx, std::list<CTransaction>* removed = NULL);\n     void removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags);\n-    void removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed);\n+    void removeConflicts(const CTransaction &tx, std::list<CTransaction>* removed = NULL);\n     void removeForBlock(const std::vector<CTransaction>& vtx, unsigned int nBlockHeight,\n-                        std::list<CTransaction>& conflicts, bool fCurrentEstimate = true);\n+                        std::list<CTransaction>* conflicts = NULL, bool fCurrentEstimate = true);\n     void clear();\n     void _clear(); //lock free\n     bool CompareDepthAndScore(const uint256& hasha, const uint256& hashb);"
      }
    ]
  },
  {
    "sha": "4100499db4e886d7a9ad2dcf4007ce44fb2c1a62",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTAwNDk5ZGI0ZTg4NmQ3YTlhZDJkY2Y0MDA3Y2U0NGZiMmMxYTYy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-08-15T10:57:10Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-22T02:22:43Z"
      },
      "message": "Return shared_ptr<CTransaction> from mempool removes",
      "tree": {
        "sha": "0d0ee0c1cf38fa43e84f5689ff5905e580f0e02a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d0ee0c1cf38fa43e84f5689ff5905e580f0e02a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51f278329d43398428d60f5986f8d29a2041d28d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51f278329d43398428d60f5986f8d29a2041d28d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51f278329d43398428d60f5986f8d29a2041d28d"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 15,
      "deletions": 15
    },
    "files": [
      {
        "sha": "0e97b1ea1470b7cda7c0c99211c79cb680650104",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4100499db4e886d7a9ad2dcf4007ce44fb2c1a62",
        "patch": "@@ -2803,7 +2803,7 @@ static int64_t nTimePostConnect = 0;\n  * Connect a new block to chainActive. pblock is either NULL or a pointer to a CBlock\n  * corresponding to pindexNew, to bypass loading it again from disk.\n  */\n-bool static ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const CBlock* pblock, std::list<CTransaction> &txConflicted, std::vector<std::tuple<CTransaction,CBlockIndex*,int>> &txChanged)\n+bool static ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const CBlock* pblock, std::vector<std::shared_ptr<const CTransaction>> &txConflicted, std::vector<std::tuple<CTransaction,CBlockIndex*,int>> &txChanged)\n {\n     assert(pindexNew->pprev == chainActive.Tip());\n     // Read block from disk.\n@@ -2926,7 +2926,7 @@ static void PruneBlockIndexCandidates() {\n  * Try to make some progress towards making pindexMostWork the active block.\n  * pblock is either NULL or a pointer to a CBlock corresponding to pindexMostWork.\n  */\n-static bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const CBlock* pblock, bool& fInvalidFound, std::list<CTransaction>& txConflicted, std::vector<std::tuple<CTransaction,CBlockIndex*,int>>& txChanged)\n+static bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const CBlock* pblock, bool& fInvalidFound, std::vector<std::shared_ptr<const CTransaction>>& txConflicted, std::vector<std::tuple<CTransaction,CBlockIndex*,int>>& txChanged)\n {\n     AssertLockHeld(cs_main);\n     const CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -3037,7 +3037,7 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n             break;\n \n         const CBlockIndex *pindexFork;\n-        std::list<CTransaction> txConflicted;\n+        std::vector<std::shared_ptr<const CTransaction>> txConflicted;\n         bool fInitialDownload;\n         {\n             LOCK(cs_main);\n@@ -3068,9 +3068,9 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n \n         // throw all transactions though the signal-interface\n         // while _not_ holding the cs_main lock\n-        BOOST_FOREACH(const CTransaction &tx, txConflicted)\n+        for(std::shared_ptr<const CTransaction> tx : txConflicted)\n         {\n-            GetMainSignals().SyncTransaction(tx, pindexNewTip, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n+            GetMainSignals().SyncTransaction(*tx, pindexNewTip, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n         }\n         // ... and about transactions that got confirmed:\n         for(unsigned int i = 0; i < txChanged.size(); i++)"
      },
      {
        "sha": "b0d9184816ee9770465f1b9e561e37b42dd933fd",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=4100499db4e886d7a9ad2dcf4007ce44fb2c1a62",
        "patch": "@@ -80,7 +80,7 @@ BOOST_AUTO_TEST_CASE(SimpleRoundTripTest)\n \n         BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[2].GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 1);\n \n-        std::list<CTransaction> removed;\n+        std::vector<std::shared_ptr<const CTransaction>> removed;\n         pool.removeRecursive(block.vtx[2], &removed);\n         BOOST_CHECK_EQUAL(removed.size(), 1);\n "
      },
      {
        "sha": "555d36faacc87211433a42de0629ecc515f50099",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=4100499db4e886d7a9ad2dcf4007ce44fb2c1a62",
        "patch": "@@ -55,7 +55,7 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n \n \n     CTxMemPool testPool(CFeeRate(0));\n-    std::list<CTransaction> removed;\n+    std::vector<std::shared_ptr<const CTransaction>> removed;\n \n     // Nothing in pool, remove should do nothing:\n     testPool.removeRecursive(txParent, &removed);\n@@ -547,6 +547,7 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     pool.addUnchecked(tx7.GetHash(), entry.Fee(9000LL).FromTx(tx7, &pool));\n \n     std::vector<CTransaction> vtx;\n+    std::vector<std::shared_ptr<const CTransaction>> conflicts;\n     SetMockTime(42);\n     SetMockTime(42 + CTxMemPool::ROLLING_FEE_HALFLIFE);\n     BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);"
      },
      {
        "sha": "e5d28ac2eaa8b74f71e24fc7609de90622a19346",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=4100499db4e886d7a9ad2dcf4007ce44fb2c1a62",
        "patch": "@@ -503,7 +503,7 @@ void CTxMemPool::CalculateDescendants(txiter entryit, setEntries &setDescendants\n     }\n }\n \n-void CTxMemPool::removeRecursive(const CTransaction &origTx, std::list<CTransaction>* removed)\n+void CTxMemPool::removeRecursive(const CTransaction &origTx, std::vector<std::shared_ptr<const CTransaction>>* removed)\n {\n     // Remove transaction from memory pool\n     {\n@@ -532,7 +532,7 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, std::list<CTransact\n         }\n         if (removed) {\n             BOOST_FOREACH(txiter it, setAllRemoves) {\n-                removed->push_back(it->GetTx());\n+                removed->emplace_back(it->GetSharedTx());\n             }\n         }\n         RemoveStaged(setAllRemoves, false);\n@@ -576,7 +576,7 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n     RemoveStaged(setAllRemoves, false);\n }\n \n-void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>* removed)\n+void CTxMemPool::removeConflicts(const CTransaction &tx, std::vector<std::shared_ptr<const CTransaction>>* removed)\n {\n     // Remove transactions which depend on inputs of tx, recursively\n     LOCK(cs);\n@@ -597,7 +597,7 @@ void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>\n  * Called when a block is connected. Removes from mempool and updates the miner fee estimator.\n  */\n void CTxMemPool::removeForBlock(const std::vector<CTransaction>& vtx, unsigned int nBlockHeight,\n-                                std::list<CTransaction>* conflicts, bool fCurrentEstimate)\n+                                std::vector<std::shared_ptr<const CTransaction>>* conflicts, bool fCurrentEstimate)\n {\n     LOCK(cs);\n     std::vector<CTxMemPoolEntry> entries;"
      },
      {
        "sha": "1a7e054e376a97ef842fc387768b50a9d4baa373",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=4100499db4e886d7a9ad2dcf4007ce44fb2c1a62",
        "patch": "@@ -6,7 +6,6 @@\n #ifndef BITCOIN_TXMEMPOOL_H\n #define BITCOIN_TXMEMPOOL_H\n \n-#include <list>\n #include <memory>\n #include <set>\n \n@@ -521,11 +520,11 @@ class CTxMemPool\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, bool fCurrentEstimate = true);\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool fCurrentEstimate = true);\n \n-    void removeRecursive(const CTransaction &tx, std::list<CTransaction>* removed = NULL);\n+    void removeRecursive(const CTransaction &tx, std::vector<std::shared_ptr<const CTransaction>>* removed = NULL);\n     void removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags);\n-    void removeConflicts(const CTransaction &tx, std::list<CTransaction>* removed = NULL);\n+    void removeConflicts(const CTransaction &tx, std::vector<std::shared_ptr<const CTransaction>>* removed = NULL);\n     void removeForBlock(const std::vector<CTransaction>& vtx, unsigned int nBlockHeight,\n-                        std::list<CTransaction>* conflicts = NULL, bool fCurrentEstimate = true);\n+                        std::vector<std::shared_ptr<const CTransaction>>* conflicts = NULL, bool fCurrentEstimate = true);\n     void clear();\n     void _clear(); //lock free\n     bool CompareDepthAndScore(const uint256& hasha, const uint256& hashb);"
      }
    ]
  },
  {
    "sha": "0334430b396acd1b1c248ad98c6fdbd50c4c4309",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzM0NDMwYjM5NmFjZDFiMWMyNDhhZDk4YzZmZGJkNTBjNGM0MzA5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-08-27T23:26:41Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-22T02:22:43Z"
      },
      "message": "Add some missing includes",
      "tree": {
        "sha": "49b905340fd7b3be52ab8deae49d1fe98a64be2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/49b905340fd7b3be52ab8deae49d1fe98a64be2b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0334430b396acd1b1c248ad98c6fdbd50c4c4309",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0334430b396acd1b1c248ad98c6fdbd50c4c4309",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0334430b396acd1b1c248ad98c6fdbd50c4c4309",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0334430b396acd1b1c248ad98c6fdbd50c4c4309/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4100499db4e886d7a9ad2dcf4007ce44fb2c1a62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bb2638c3b7808e43972c0fd6a7fed1b7aa43d6a4",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0334430b396acd1b1c248ad98c6fdbd50c4c4309/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0334430b396acd1b1c248ad98c6fdbd50c4c4309/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=0334430b396acd1b1c248ad98c6fdbd50c4c4309",
        "patch": "@@ -8,6 +8,10 @@\n \n #include <memory>\n #include <set>\n+#include <map>\n+#include <vector>\n+#include <utility>\n+#include <string>\n \n #include \"amount.h\"\n #include \"coins.h\""
      }
    ]
  }
]