[
  {
    "sha": "ffb4c210bc0b78bd8cbccdb7ccb80dde918a01b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZmI0YzIxMGJjMGI3OGJkOGNiY2NkYjdjY2I4MGRkZTkxOGEwMWIw",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2014-07-19T13:39:50Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2014-08-26T09:26:58Z"
      },
      "message": "Mark LevelDB \"Read\" and \"Exists\" functions as const.\n\nMark the \"Read\" and \"Exists\" functions in CLevelDBWrapper as \"const\".\nThey do not change anything in the DB, by definition.",
      "tree": {
        "sha": "7c70b8fccf7555b43ca3dceda55fe1caaed25c5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c70b8fccf7555b43ca3dceda55fe1caaed25c5c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ffb4c210bc0b78bd8cbccdb7ccb80dde918a01b0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffb4c210bc0b78bd8cbccdb7ccb80dde918a01b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ffb4c210bc0b78bd8cbccdb7ccb80dde918a01b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffb4c210bc0b78bd8cbccdb7ccb80dde918a01b0/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d763fc9e148f753cff19daea23866f139ad0a7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d763fc9e148f753cff19daea23866f139ad0a7f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d763fc9e148f753cff19daea23866f139ad0a7f"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "452df92839efd5099f1786ec321b57b229afa19e",
        "filename": "src/leveldbwrapper.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffb4c210bc0b78bd8cbccdb7ccb80dde918a01b0/src/leveldbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffb4c210bc0b78bd8cbccdb7ccb80dde918a01b0/src/leveldbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.h?ref=ffb4c210bc0b78bd8cbccdb7ccb80dde918a01b0",
        "patch": "@@ -82,7 +82,7 @@ class CLevelDBWrapper\n     CLevelDBWrapper(const boost::filesystem::path &path, size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n     ~CLevelDBWrapper();\n \n-    template<typename K, typename V> bool Read(const K& key, V& value) throw(leveldb_error) {\n+    template<typename K, typename V> bool Read(const K& key, V& value) const throw(leveldb_error) {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(ssKey.GetSerializeSize(key));\n         ssKey << key;\n@@ -111,7 +111,7 @@ class CLevelDBWrapper\n         return WriteBatch(batch, fSync);\n     }\n \n-    template<typename K> bool Exists(const K& key) throw(leveldb_error) {\n+    template<typename K> bool Exists(const K& key) const throw(leveldb_error) {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(ssKey.GetSerializeSize(key));\n         ssKey << key;"
      }
    ]
  },
  {
    "sha": "a3dc587a62f5d12aea1ff8139198bf0441535c5f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphM2RjNTg3YTYyZjVkMTJhZWExZmY4MTM5MTk4YmYwNDQxNTM1YzVm",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2014-07-19T14:42:48Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2014-08-26T09:29:18Z"
      },
      "message": "Make appropriate getter-routines \"const\" in CCoinsView.\n\nMark the \"Get\"/\"Have\" routines in CCoinsView and subclasses as \"const\".",
      "tree": {
        "sha": "4759437af72c07a075c6819bb5c2435d7350f0d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4759437af72c07a075c6819bb5c2435d7350f0d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3dc587a62f5d12aea1ff8139198bf0441535c5f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3dc587a62f5d12aea1ff8139198bf0441535c5f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a3dc587a62f5d12aea1ff8139198bf0441535c5f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3dc587a62f5d12aea1ff8139198bf0441535c5f/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ffb4c210bc0b78bd8cbccdb7ccb80dde918a01b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffb4c210bc0b78bd8cbccdb7ccb80dde918a01b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ffb4c210bc0b78bd8cbccdb7ccb80dde918a01b0"
      }
    ],
    "stats": {
      "total": 114,
      "additions": 66,
      "deletions": 48
    },
    "files": [
      {
        "sha": "7bfb84ef3e7facde9ffe33fcb397c2beb24f2986",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 17,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3dc587a62f5d12aea1ff8139198bf0441535c5f/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3dc587a62f5d12aea1ff8139198bf0441535c5f/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=a3dc587a62f5d12aea1ff8139198bf0441535c5f",
        "patch": "@@ -52,30 +52,30 @@ bool CCoins::Spend(int nPos) {\n }\n \n \n-bool CCoinsView::GetCoins(const uint256 &txid, CCoins &coins) { return false; }\n+bool CCoinsView::GetCoins(const uint256 &txid, CCoins &coins) const { return false; }\n bool CCoinsView::SetCoins(const uint256 &txid, const CCoins &coins) { return false; }\n-bool CCoinsView::HaveCoins(const uint256 &txid) { return false; }\n-uint256 CCoinsView::GetBestBlock() { return uint256(0); }\n+bool CCoinsView::HaveCoins(const uint256 &txid) const { return false; }\n+uint256 CCoinsView::GetBestBlock() const { return uint256(0); }\n bool CCoinsView::SetBestBlock(const uint256 &hashBlock) { return false; }\n bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return false; }\n-bool CCoinsView::GetStats(CCoinsStats &stats) { return false; }\n+bool CCoinsView::GetStats(CCoinsStats &stats) const { return false; }\n \n \n CCoinsViewBacked::CCoinsViewBacked(CCoinsView &viewIn) : base(&viewIn) { }\n-bool CCoinsViewBacked::GetCoins(const uint256 &txid, CCoins &coins) { return base->GetCoins(txid, coins); }\n+bool CCoinsViewBacked::GetCoins(const uint256 &txid, CCoins &coins) const { return base->GetCoins(txid, coins); }\n bool CCoinsViewBacked::SetCoins(const uint256 &txid, const CCoins &coins) { return base->SetCoins(txid, coins); }\n-bool CCoinsViewBacked::HaveCoins(const uint256 &txid) { return base->HaveCoins(txid); }\n-uint256 CCoinsViewBacked::GetBestBlock() { return base->GetBestBlock(); }\n+bool CCoinsViewBacked::HaveCoins(const uint256 &txid) const { return base->HaveCoins(txid); }\n+uint256 CCoinsViewBacked::GetBestBlock() const { return base->GetBestBlock(); }\n bool CCoinsViewBacked::SetBestBlock(const uint256 &hashBlock) { return base->SetBestBlock(hashBlock); }\n void CCoinsViewBacked::SetBackend(CCoinsView &viewIn) { base = &viewIn; }\n bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return base->BatchWrite(mapCoins, hashBlock); }\n-bool CCoinsViewBacked::GetStats(CCoinsStats &stats) { return base->GetStats(stats); }\n+bool CCoinsViewBacked::GetStats(CCoinsStats &stats) const { return base->GetStats(stats); }\n \n CCoinsKeyHasher::CCoinsKeyHasher() : salt(GetRandHash()) {}\n \n CCoinsViewCache::CCoinsViewCache(CCoinsView &baseIn, bool fDummy) : CCoinsViewBacked(baseIn), hashBlock(0) { }\n \n-bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) {\n+bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) const {\n     if (cacheCoins.count(txid)) {\n         coins = cacheCoins[txid];\n         return true;\n@@ -99,27 +99,37 @@ CCoinsMap::iterator CCoinsViewCache::FetchCoins(const uint256 &txid) {\n     return ret;\n }\n \n+CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const {\n+    /* Avoid redundant implementation with the const-cast.  */\n+    return const_cast<CCoinsViewCache*>(this)->FetchCoins(txid);\n+}\n+\n CCoins &CCoinsViewCache::GetCoins(const uint256 &txid) {\n     CCoinsMap::iterator it = FetchCoins(txid);\n     assert(it != cacheCoins.end());\n     return it->second;\n }\n \n+const CCoins &CCoinsViewCache::GetCoins(const uint256 &txid) const {\n+    /* Avoid redundant implementation with the const-cast.  */\n+    return const_cast<CCoinsViewCache*>(this)->GetCoins(txid);\n+}\n+\n bool CCoinsViewCache::SetCoins(const uint256 &txid, const CCoins &coins) {\n     cacheCoins[txid] = coins;\n     return true;\n }\n \n-bool CCoinsViewCache::HaveCoins(const uint256 &txid) {\n-    CCoinsMap::iterator it = FetchCoins(txid);\n+bool CCoinsViewCache::HaveCoins(const uint256 &txid) const {\n+    CCoinsMap::const_iterator it = FetchCoins(txid);\n     // We're using vtx.empty() instead of IsPruned here for performance reasons,\n     // as we only care about the case where an transaction was replaced entirely\n     // in a reorganization (which wipes vout entirely, as opposed to spending\n     // which just cleans individual outputs).\n     return (it != cacheCoins.end() && !it->second.vout.empty());\n }\n \n-uint256 CCoinsViewCache::GetBestBlock() {\n+uint256 CCoinsViewCache::GetBestBlock() const {\n     if (hashBlock == uint256(0))\n         hashBlock = base->GetBestBlock();\n     return hashBlock;\n@@ -146,18 +156,18 @@ bool CCoinsViewCache::Flush() {\n     return fOk;\n }\n \n-unsigned int CCoinsViewCache::GetCacheSize() {\n+unsigned int CCoinsViewCache::GetCacheSize() const {\n     return cacheCoins.size();\n }\n \n-const CTxOut &CCoinsViewCache::GetOutputFor(const CTxIn& input)\n+const CTxOut &CCoinsViewCache::GetOutputFor(const CTxIn& input) const\n {\n     const CCoins &coins = GetCoins(input.prevout.hash);\n     assert(coins.IsAvailable(input.prevout.n));\n     return coins.vout[input.prevout.n];\n }\n \n-int64_t CCoinsViewCache::GetValueIn(const CTransaction& tx)\n+int64_t CCoinsViewCache::GetValueIn(const CTransaction& tx) const\n {\n     if (tx.IsCoinBase())\n         return 0;\n@@ -169,7 +179,7 @@ int64_t CCoinsViewCache::GetValueIn(const CTransaction& tx)\n     return nResult;\n }\n \n-bool CCoinsViewCache::HaveInputs(const CTransaction& tx)\n+bool CCoinsViewCache::HaveInputs(const CTransaction& tx) const\n {\n     if (!tx.IsCoinBase()) {\n         // first check whether information about the prevout hash is available\n@@ -190,7 +200,7 @@ bool CCoinsViewCache::HaveInputs(const CTransaction& tx)\n     return true;\n }\n \n-double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight)\n+double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight) const\n {\n     if (tx.IsCoinBase())\n         return 0.0;"
      },
      {
        "sha": "08913531d81e7d738db3fe29d256d87a304b3750",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 23,
        "deletions": 18,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3dc587a62f5d12aea1ff8139198bf0441535c5f/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3dc587a62f5d12aea1ff8139198bf0441535c5f/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=a3dc587a62f5d12aea1ff8139198bf0441535c5f",
        "patch": "@@ -276,17 +276,17 @@ class CCoinsView\n {\n public:\n     // Retrieve the CCoins (unspent transaction outputs) for a given txid\n-    virtual bool GetCoins(const uint256 &txid, CCoins &coins);\n+    virtual bool GetCoins(const uint256 &txid, CCoins &coins) const;\n \n     // Modify the CCoins for a given txid\n     virtual bool SetCoins(const uint256 &txid, const CCoins &coins);\n \n     // Just check whether we have data for a given txid.\n     // This may (but cannot always) return true for fully spent transactions\n-    virtual bool HaveCoins(const uint256 &txid);\n+    virtual bool HaveCoins(const uint256 &txid) const;\n \n     // Retrieve the block hash whose state this CCoinsView currently represents\n-    virtual uint256 GetBestBlock();\n+    virtual uint256 GetBestBlock() const;\n \n     // Modify the currently active block hash\n     virtual bool SetBestBlock(const uint256 &hashBlock);\n@@ -296,7 +296,7 @@ class CCoinsView\n     virtual bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n \n     // Calculate statistics about the unspent transaction output set\n-    virtual bool GetStats(CCoinsStats &stats);\n+    virtual bool GetStats(CCoinsStats &stats) const;\n \n     // As we use CCoinsViews polymorphically, have a virtual destructor\n     virtual ~CCoinsView() {}\n@@ -311,47 +311,51 @@ class CCoinsViewBacked : public CCoinsView\n \n public:\n     CCoinsViewBacked(CCoinsView &viewIn);\n-    bool GetCoins(const uint256 &txid, CCoins &coins);\n+    bool GetCoins(const uint256 &txid, CCoins &coins) const;\n     bool SetCoins(const uint256 &txid, const CCoins &coins);\n-    bool HaveCoins(const uint256 &txid);\n-    uint256 GetBestBlock();\n+    bool HaveCoins(const uint256 &txid) const;\n+    uint256 GetBestBlock() const;\n     bool SetBestBlock(const uint256 &hashBlock);\n     void SetBackend(CCoinsView &viewIn);\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n-    bool GetStats(CCoinsStats &stats);\n+    bool GetStats(CCoinsStats &stats) const;\n };\n \n \n /** CCoinsView that adds a memory cache for transactions to another CCoinsView */\n class CCoinsViewCache : public CCoinsViewBacked\n {\n protected:\n-    uint256 hashBlock;\n-    CCoinsMap cacheCoins;\n+\n+    /* Make mutable so that we can \"fill the cache\" even from Get-methods\n+       declared as \"const\".  */\n+    mutable uint256 hashBlock;\n+    mutable CCoinsMap cacheCoins;\n \n public:\n     CCoinsViewCache(CCoinsView &baseIn, bool fDummy = false);\n \n     // Standard CCoinsView methods\n-    bool GetCoins(const uint256 &txid, CCoins &coins);\n+    bool GetCoins(const uint256 &txid, CCoins &coins) const;\n     bool SetCoins(const uint256 &txid, const CCoins &coins);\n-    bool HaveCoins(const uint256 &txid);\n-    uint256 GetBestBlock();\n+    bool HaveCoins(const uint256 &txid) const;\n+    uint256 GetBestBlock() const;\n     bool SetBestBlock(const uint256 &hashBlock);\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n \n     // Return a modifiable reference to a CCoins. Check HaveCoins first.\n     // Many methods explicitly require a CCoinsViewCache because of this method, to reduce\n     // copying.\n     CCoins &GetCoins(const uint256 &txid);\n+    const CCoins &GetCoins(const uint256 &txid) const;\n \n     // Push the modifications applied to this cache to its base.\n     // Failure to call this method before destruction will cause the changes to be forgotten.\n     // If false is returned, the state of this cache (and its backing view) will be undefined.\n     bool Flush();\n \n     // Calculate the size of the cache (in number of transactions)\n-    unsigned int GetCacheSize();\n+    unsigned int GetCacheSize() const;\n \n     /** Amount of bitcoins coming in to a transaction\n         Note that lightweight clients may not know anything besides the hash of previous transactions,\n@@ -360,18 +364,19 @@ class CCoinsViewCache : public CCoinsViewBacked\n         @param[in] tx\ttransaction for which we are checking input total\n         @return\tSum of value of all inputs (scriptSigs)\n      */\n-    int64_t GetValueIn(const CTransaction& tx);\n+    int64_t GetValueIn(const CTransaction& tx) const;\n \n     // Check whether all prevouts of the transaction are present in the UTXO set represented by this view\n-    bool HaveInputs(const CTransaction& tx);\n+    bool HaveInputs(const CTransaction& tx) const;\n \n     // Return priority of tx at height nHeight\n-    double GetPriority(const CTransaction &tx, int nHeight);\n+    double GetPriority(const CTransaction &tx, int nHeight) const;\n \n-    const CTxOut &GetOutputFor(const CTxIn& input);\n+    const CTxOut &GetOutputFor(const CTxIn& input) const;\n \n private:\n     CCoinsMap::iterator FetchCoins(const uint256 &txid);\n+    CCoinsMap::const_iterator FetchCoins(const uint256 &txid) const;\n };\n \n #endif"
      },
      {
        "sha": "2349514deff6ffd4f4e6900c96fdff8381c0a0b5",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3dc587a62f5d12aea1ff8139198bf0441535c5f/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3dc587a62f5d12aea1ff8139198bf0441535c5f/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=a3dc587a62f5d12aea1ff8139198bf0441535c5f",
        "patch": "@@ -27,7 +27,7 @@ void static BatchWriteHashBestChain(CLevelDBBatch &batch, const uint256 &hash) {\n CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() / \"chainstate\", nCacheSize, fMemory, fWipe) {\n }\n \n-bool CCoinsViewDB::GetCoins(const uint256 &txid, CCoins &coins) {\n+bool CCoinsViewDB::GetCoins(const uint256 &txid, CCoins &coins) const {\n     return db.Read(make_pair('c', txid), coins);\n }\n \n@@ -37,11 +37,11 @@ bool CCoinsViewDB::SetCoins(const uint256 &txid, const CCoins &coins) {\n     return db.WriteBatch(batch);\n }\n \n-bool CCoinsViewDB::HaveCoins(const uint256 &txid) {\n+bool CCoinsViewDB::HaveCoins(const uint256 &txid) const {\n     return db.Exists(make_pair('c', txid));\n }\n \n-uint256 CCoinsViewDB::GetBestBlock() {\n+uint256 CCoinsViewDB::GetBestBlock() const {\n     uint256 hashBestChain;\n     if (!db.Read('B', hashBestChain))\n         return uint256(0);\n@@ -105,8 +105,11 @@ bool CBlockTreeDB::ReadLastBlockFile(int &nFile) {\n     return Read('l', nFile);\n }\n \n-bool CCoinsViewDB::GetStats(CCoinsStats &stats) {\n-    boost::scoped_ptr<leveldb::Iterator> pcursor(db.NewIterator());\n+bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n+    /* It seems that there are no \"const iterators\" for LevelDB.  Since we\n+       only need read operations on it, use a const-cast to get around\n+       that restriction.  */\n+    leveldb::Iterator *pcursor = const_cast<CLevelDBWrapper*>(&db)->NewIterator();\n     pcursor->SeekToFirst();\n \n     CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);"
      },
      {
        "sha": "f0b6b9e1dde6fbfb74b9e076ecf0a393068a26ac",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3dc587a62f5d12aea1ff8139198bf0441535c5f/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3dc587a62f5d12aea1ff8139198bf0441535c5f/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=a3dc587a62f5d12aea1ff8139198bf0441535c5f",
        "patch": "@@ -32,13 +32,13 @@ class CCoinsViewDB : public CCoinsView\n public:\n     CCoinsViewDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n \n-    bool GetCoins(const uint256 &txid, CCoins &coins);\n+    bool GetCoins(const uint256 &txid, CCoins &coins) const;\n     bool SetCoins(const uint256 &txid, const CCoins &coins);\n-    bool HaveCoins(const uint256 &txid);\n-    uint256 GetBestBlock();\n+    bool HaveCoins(const uint256 &txid) const;\n+    uint256 GetBestBlock() const;\n     bool SetBestBlock(const uint256 &hashBlock);\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n-    bool GetStats(CCoinsStats &stats);\n+    bool GetStats(CCoinsStats &stats) const;\n };\n \n /** Access to the block database (blocks/index/) */"
      },
      {
        "sha": "3845a35b37f95f21525ba4bf47ff27b4ffe38ac1",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3dc587a62f5d12aea1ff8139198bf0441535c5f/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3dc587a62f5d12aea1ff8139198bf0441535c5f/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=a3dc587a62f5d12aea1ff8139198bf0441535c5f",
        "patch": "@@ -625,7 +625,7 @@ void CTxMemPool::ClearPrioritisation(const uint256 hash)\n \n CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView &baseIn, CTxMemPool &mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n \n-bool CCoinsViewMemPool::GetCoins(const uint256 &txid, CCoins &coins) {\n+bool CCoinsViewMemPool::GetCoins(const uint256 &txid, CCoins &coins) const {\n     // If an entry in the mempool exists, always return that one, as it's guaranteed to never\n     // conflict with the underlying cache, and it cannot have pruned entries (as it contains full)\n     // transactions. First checking the underlying cache risks returning a pruned entry instead.\n@@ -637,7 +637,7 @@ bool CCoinsViewMemPool::GetCoins(const uint256 &txid, CCoins &coins) {\n     return (base->GetCoins(txid, coins) && !coins.IsPruned());\n }\n \n-bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) {\n+bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n     return mempool.exists(txid) || base->HaveCoins(txid);\n }\n "
      },
      {
        "sha": "074c355077e6a62b2bbd668c0a789cc762366ef1",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3dc587a62f5d12aea1ff8139198bf0441535c5f/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3dc587a62f5d12aea1ff8139198bf0441535c5f/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=a3dc587a62f5d12aea1ff8139198bf0441535c5f",
        "patch": "@@ -143,8 +143,8 @@ class CCoinsViewMemPool : public CCoinsViewBacked\n \n public:\n     CCoinsViewMemPool(CCoinsView &baseIn, CTxMemPool &mempoolIn);\n-    bool GetCoins(const uint256 &txid, CCoins &coins);\n-    bool HaveCoins(const uint256 &txid);\n+    bool GetCoins(const uint256 &txid, CCoins &coins) const;\n+    bool HaveCoins(const uint256 &txid) const;\n };\n \n #endif /* BITCOIN_TXMEMPOOL_H */"
      }
    ]
  },
  {
    "sha": "d0867acb0e07ac63f03dcc555387f24322e8799e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDg2N2FjYjBlMDdhYzYzZjAzZGNjNTU1Mzg3ZjI0MzIyZTg3OTll",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2014-07-19T15:14:23Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2014-08-26T09:29:18Z"
      },
      "message": "Use const CCoinsView's at some places.\n\nAt some places where it is possible (e. g., CheckInputs), use a const\nversion of CCoinsView instead of a non-const one.",
      "tree": {
        "sha": "0e8013882018d752e12b86de7f854cfb30143d19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e8013882018d752e12b86de7f854cfb30143d19"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0867acb0e07ac63f03dcc555387f24322e8799e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0867acb0e07ac63f03dcc555387f24322e8799e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d0867acb0e07ac63f03dcc555387f24322e8799e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0867acb0e07ac63f03dcc555387f24322e8799e/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a3dc587a62f5d12aea1ff8139198bf0441535c5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3dc587a62f5d12aea1ff8139198bf0441535c5f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a3dc587a62f5d12aea1ff8139198bf0441535c5f"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "1c9b3f861be0b01a300e7f6b6b060263f0292850",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0867acb0e07ac63f03dcc555387f24322e8799e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0867acb0e07ac63f03dcc555387f24322e8799e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d0867acb0e07ac63f03dcc555387f24322e8799e",
        "patch": "@@ -644,7 +644,7 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n // 2. P2SH scripts with a crazy number of expensive\n //    CHECKSIG/CHECKMULTISIG operations\n //\n-bool AreInputsStandard(const CTransaction& tx, CCoinsViewCache& mapInputs)\n+bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n {\n     if (tx.IsCoinBase())\n         return true; // Coinbases don't use vin normally\n@@ -717,7 +717,7 @@ unsigned int GetLegacySigOpCount(const CTransaction& tx)\n     return nSigOps;\n }\n \n-unsigned int GetP2SHSigOpCount(const CTransaction& tx, CCoinsViewCache& inputs)\n+unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& inputs)\n {\n     if (tx.IsCoinBase())\n         return 0;\n@@ -1470,7 +1470,7 @@ bool VerifySignature(const CCoins& txFrom, const CTransaction& txTo, unsigned in\n     return CScriptCheck(txFrom, txTo, nIn, flags, nHashType)();\n }\n \n-bool CheckInputs(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, std::vector<CScriptCheck> *pvChecks)\n+bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, std::vector<CScriptCheck> *pvChecks)\n {\n     if (!tx.IsCoinBase())\n     {"
      },
      {
        "sha": "f93b78d8e50130eb17cc40f09760ebd936a1cbad",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0867acb0e07ac63f03dcc555387f24322e8799e/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0867acb0e07ac63f03dcc555387f24322e8799e/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=d0867acb0e07ac63f03dcc555387f24322e8799e",
        "patch": "@@ -265,7 +265,7 @@ int64_t GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowF\n     @param[in] mapInputs    Map of previous transactions that have outputs we're spending\n     @return True if all inputs (scriptSigs) use only standard transaction forms\n */\n-bool AreInputsStandard(const CTransaction& tx, CCoinsViewCache& mapInputs);\n+bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n \n /** Count ECDSA signature operations the old-fashioned (pre-0.6) way\n     @return number of sigops this transaction's outputs will produce when spent\n@@ -279,13 +279,13 @@ unsigned int GetLegacySigOpCount(const CTransaction& tx);\n     @return maximum number of sigops required to validate this transaction's inputs\n     @see CTransaction::FetchInputs\n  */\n-unsigned int GetP2SHSigOpCount(const CTransaction& tx, CCoinsViewCache& mapInputs);\n+unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n \n \n // Check whether all inputs of this transaction are valid (no double spends, scripts & sigs, amounts)\n // This does not modify the UTXO set. If pvChecks is not NULL, script checks are pushed onto it\n // instead of being performed inline.\n-bool CheckInputs(const CTransaction& tx, CValidationState &state, CCoinsViewCache &view, bool fScriptChecks = true,\n+bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &view, bool fScriptChecks = true,\n                  unsigned int flags = STANDARD_SCRIPT_VERIFY_FLAGS,\n                  std::vector<CScriptCheck> *pvChecks = NULL);\n "
      },
      {
        "sha": "f75e2212d55a03364e46b2dcaa68b7892f6c099e",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0867acb0e07ac63f03dcc555387f24322e8799e/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0867acb0e07ac63f03dcc555387f24322e8799e/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=d0867acb0e07ac63f03dcc555387f24322e8799e",
        "patch": "@@ -484,7 +484,7 @@ void CTxMemPool::clear()\n     ++nTransactionsUpdated;\n }\n \n-void CTxMemPool::check(CCoinsViewCache *pcoins) const\n+void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n {\n     if (!fSanityCheck)\n         return;\n@@ -505,7 +505,7 @@ void CTxMemPool::check(CCoinsViewCache *pcoins) const\n                 const CTransaction& tx2 = it2->second.GetTx();\n                 assert(tx2.vout.size() > txin.prevout.n && !tx2.vout[txin.prevout.n].IsNull());\n             } else {\n-                CCoins &coins = pcoins->GetCoins(txin.prevout.hash);\n+                const CCoins &coins = pcoins->GetCoins(txin.prevout.hash);\n                 assert(coins.IsAvailable(txin.prevout.n));\n             }\n             // Check whether its inputs are marked in mapNextTx."
      },
      {
        "sha": "d95c4d970b2bd91231b0414bb8d3b05762e81ac3",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0867acb0e07ac63f03dcc555387f24322e8799e/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0867acb0e07ac63f03dcc555387f24322e8799e/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=d0867acb0e07ac63f03dcc555387f24322e8799e",
        "patch": "@@ -85,7 +85,7 @@ class CTxMemPool\n      * all inputs are in the mapNextTx array). If sanity-checking is turned off,\n      * check does nothing.\n      */\n-    void check(CCoinsViewCache *pcoins) const;\n+    void check(const CCoinsViewCache *pcoins) const;\n     void setSanityCheck(bool _fSanityCheck) { fSanityCheck = _fSanityCheck; }\n \n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry);"
      }
    ]
  }
]