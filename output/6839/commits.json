[
  {
    "sha": "44605105e519c863d1bcde31cabd02949b51d48f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDYwNTEwNWU1MTljODYzZDFiY2RlMzFjYWJkMDI5NDliNTFkNDhm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-16T10:09:15Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-24T15:27:21Z"
      },
      "message": "clang-format: Recently added files",
      "tree": {
        "sha": "a845c215bc8c0e05a6e96d63a4a5c2f2b3704aec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a845c215bc8c0e05a6e96d63a4a5c2f2b3704aec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/44605105e519c863d1bcde31cabd02949b51d48f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44605105e519c863d1bcde31cabd02949b51d48f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/44605105e519c863d1bcde31cabd02949b51d48f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44605105e519c863d1bcde31cabd02949b51d48f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46f74379b86be982b121bcb8c3cfe07fa80bffd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46f74379b86be982b121bcb8c3cfe07fa80bffd0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46f74379b86be982b121bcb8c3cfe07fa80bffd0"
      }
    ],
    "stats": {
      "total": 457,
      "additions": 215,
      "deletions": 242
    },
    "files": [
      {
        "sha": "01d577364862c7d69a877fe2f95c09c4efb54563",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 15,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44605105e519c863d1bcde31cabd02949b51d48f/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44605105e519c863d1bcde31cabd02949b51d48f/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=44605105e519c863d1bcde31cabd02949b51d48f",
        "patch": "@@ -9,7 +9,8 @@ using namespace benchmark;\n \n std::map<std::string, BenchFunction> BenchRunner::benchmarks;\n \n-static double gettimedouble(void) {\n+static double gettimedouble(void)\n+{\n     struct timeval tv;\n     gettimeofday(&tv, NULL);\n     return tv.tv_usec * 0.000001 + tv.tv_sec;\n@@ -20,14 +21,21 @@ BenchRunner::BenchRunner(std::string name, BenchFunction func)\n     benchmarks.insert(std::make_pair(name, func));\n }\n \n-void\n-BenchRunner::RunAll(double elapsedTimeForOne)\n+void BenchRunner::RunAll(double elapsedTimeForOne)\n {\n-    std::cout << \"Benchmark\" << \",\" << \"count\" << \",\" << \"min\" << \",\" << \"max\" << \",\" << \"average\" << \"\\n\";\n+    std::cout << \"Benchmark\"\n+              << \",\"\n+              << \"count\"\n+              << \",\"\n+              << \"min\"\n+              << \",\"\n+              << \"max\"\n+              << \",\"\n+              << \"average\"\n+              << \"\\n\";\n \n-    for (std::map<std::string,BenchFunction>::iterator it = benchmarks.begin();\n+    for (std::map<std::string, BenchFunction>::iterator it = benchmarks.begin();\n          it != benchmarks.end(); ++it) {\n-\n         State state(it->first, elapsedTimeForOne);\n         BenchFunction& func = it->second;\n         func(state);\n@@ -39,29 +47,32 @@ bool State::KeepRunning()\n     double now;\n     if (count == 0) {\n         beginTime = now = gettimedouble();\n-    }\n-    else {\n+    } else {\n         // timeCheckCount is used to avoid calling gettime most of the time,\n         // so benchmarks that run very quickly get consistent results.\n-        if ((count+1)%timeCheckCount != 0) {\n+        if ((count + 1) % timeCheckCount != 0) {\n             ++count;\n             return true; // keep going\n         }\n         now = gettimedouble();\n-        double elapsedOne = (now - lastTime)/timeCheckCount;\n-        if (elapsedOne < minTime) minTime = elapsedOne;\n-        if (elapsedOne > maxTime) maxTime = elapsedOne;\n-        if (elapsedOne*timeCheckCount < maxElapsed/16) timeCheckCount *= 2;\n+        double elapsedOne = (now - lastTime) / timeCheckCount;\n+        if (elapsedOne < minTime)\n+            minTime = elapsedOne;\n+        if (elapsedOne > maxTime)\n+            maxTime = elapsedOne;\n+        if (elapsedOne * timeCheckCount < maxElapsed / 16)\n+            timeCheckCount *= 2;\n     }\n     lastTime = now;\n     ++count;\n \n-    if (now - beginTime < maxElapsed) return true; // Keep going\n+    if (now - beginTime < maxElapsed)\n+        return true; // Keep going\n \n     --count;\n \n     // Output results\n-    double average = (now-beginTime)/count;\n+    double average = (now - beginTime) / count;\n     std::cout << name << \",\" << count << \",\" << minTime << \",\" << maxTime << \",\" << average << \"\\n\";\n \n     return false;"
      },
      {
        "sha": "d9c15f0a169a65dd7d1770a2484d3997619cae7b",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 27,
        "deletions": 24,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44605105e519c863d1bcde31cabd02949b51d48f/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44605105e519c863d1bcde31cabd02949b51d48f/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=44605105e519c863d1bcde31cabd02949b51d48f",
        "patch": "@@ -33,35 +33,38 @@ BENCHMARK(CODE_TO_TIME);\n #include <map>\n #include <string>\n \n-namespace benchmark {\n+namespace benchmark\n+{\n+class State\n+{\n+    std::string name;\n+    double maxElapsed;\n+    double beginTime;\n+    double lastTime, minTime, maxTime;\n+    int64_t count;\n+    int64_t timeCheckCount;\n \n-    class State {\n-        std::string name;\n-        double maxElapsed;\n-        double beginTime;\n-        double lastTime, minTime, maxTime;\n-        int64_t count;\n-        int64_t timeCheckCount;\n-    public:\n-        State(std::string _name, double _maxElapsed) : name(_name), maxElapsed(_maxElapsed), count(0) {\n-            minTime = std::numeric_limits<double>::max();\n-            maxTime = std::numeric_limits<double>::min();\n-            timeCheckCount = 1;\n-        }\n-        bool KeepRunning();\n-    };\n+public:\n+    State(std::string _name, double _maxElapsed) : name(_name), maxElapsed(_maxElapsed), count(0)\n+    {\n+        minTime = std::numeric_limits<double>::max();\n+        maxTime = std::numeric_limits<double>::min();\n+        timeCheckCount = 1;\n+    }\n+    bool KeepRunning();\n+};\n \n-    typedef boost::function<void(State&)> BenchFunction;\n+typedef boost::function<void(State&)> BenchFunction;\n \n-    class BenchRunner\n-    {\n-        static std::map<std::string, BenchFunction> benchmarks;\n+class BenchRunner\n+{\n+    static std::map<std::string, BenchFunction> benchmarks;\n \n-    public:\n-        BenchRunner(std::string name, BenchFunction func);\n+public:\n+    BenchRunner(std::string name, BenchFunction func);\n \n-        static void RunAll(double elapsedTimeForOne=1.0);\n-    };\n+    static void RunAll(double elapsedTimeForOne = 1.0);\n+};\n }\n \n // BENCHMARK(foo) expands to:  benchmark::BenchRunner bench_11foo(\"foo\", foo);"
      },
      {
        "sha": "e6774d9e274dcc12f5405386a15ff98b6f57c88f",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44605105e519c863d1bcde31cabd02949b51d48f/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44605105e519c863d1bcde31cabd02949b51d48f/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=44605105e519c863d1bcde31cabd02949b51d48f",
        "patch": "@@ -8,8 +8,7 @@\n #include \"main.h\"\n #include \"util.h\"\n \n-int\n-main(int argc, char** argv)\n+int main(int argc, char** argv)\n {\n     ECC_Start();\n     SetupEnvironment();"
      },
      {
        "sha": "ef3d6e831b0c9c2ad0499282f85775bcdf44bc96",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44605105e519c863d1bcde31cabd02949b51d48f/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44605105e519c863d1bcde31cabd02949b51d48f/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=44605105e519c863d1bcde31cabd02949b51d48f",
        "patch": "@@ -19,14 +19,14 @@\n class HTTPRPCTimer : public RPCTimerBase\n {\n public:\n-    HTTPRPCTimer(struct event_base* eventBase, boost::function<void(void)>& func, int64_t millis) :\n-        ev(eventBase, false, func)\n+    HTTPRPCTimer(struct event_base* eventBase, boost::function<void(void)>& func, int64_t millis) : ev(eventBase, false, func)\n     {\n         struct timeval tv;\n-        tv.tv_sec = millis/1000;\n-        tv.tv_usec = (millis%1000)*1000;\n+        tv.tv_sec = millis / 1000;\n+        tv.tv_usec = (millis % 1000) * 1000;\n         ev.trigger(&tv);\n     }\n+\n private:\n     HTTPEvent ev;\n };\n@@ -45,6 +45,7 @@ class HTTPRPCTimerInterface : public RPCTimerInterface\n     {\n         return new HTTPRPCTimer(base, func, millis);\n     }\n+\n private:\n     struct event_base* base;\n };\n@@ -84,7 +85,7 @@ static bool RPCAuthorized(const std::string& strAuth)\n     return TimingResistantEqual(strUserPass, strRPCUserColonPass);\n }\n \n-static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n+static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string&)\n {\n     // JSONRPC handles only POST\n     if (req->GetRequestMethod() != HTTPRequest::POST) {\n@@ -127,7 +128,7 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n             // Send reply\n             strReply = JSONRPCReply(result, NullUniValue, jreq.id);\n \n-        // array of requests\n+            // array of requests\n         } else if (valRequest.isArray())\n             strReply = JSONRPCExecBatch(valRequest.get_array());\n         else\n@@ -147,8 +148,7 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n \n static bool InitRPCAuthentication()\n {\n-    if (mapArgs[\"-rpcpassword\"] == \"\")\n-    {\n+    if (mapArgs[\"-rpcpassword\"] == \"\") {\n         LogPrintf(\"No rpcpassword set - using random cookie authentication\\n\");\n         if (!GenerateAuthCookie(&strRPCUserColonPass)) {\n             uiInterface.ThreadSafeMessageBox("
      },
      {
        "sha": "712b68feea799c44b9903d9607bab7ab5c683419",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 21,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44605105e519c863d1bcde31cabd02949b51d48f/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44605105e519c863d1bcde31cabd02949b51d48f/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=44605105e519c863d1bcde31cabd02949b51d48f",
        "patch": "@@ -45,8 +45,7 @@ static const size_t MAX_HEADERS_SIZE = 8192;\n class HTTPWorkItem : public HTTPClosure\n {\n public:\n-    HTTPWorkItem(HTTPRequest* req, const std::string &path, const HTTPRequestHandler& func):\n-        req(req), path(path), func(func)\n+    HTTPWorkItem(HTTPRequest* req, const std::string& path, const HTTPRequestHandler& func) : req(req), path(path), func(func)\n     {\n     }\n     void operator()()\n@@ -81,8 +80,8 @@ class WorkQueue\n     class ThreadCounter\n     {\n     public:\n-        WorkQueue &wq;\n-        ThreadCounter(WorkQueue &w): wq(w)\n+        WorkQueue& wq;\n+        ThreadCounter(WorkQueue& w) : wq(w)\n         {\n             boost::lock_guard<boost::mutex> lock(wq.cs);\n             wq.numThreads += 1;\n@@ -164,11 +163,9 @@ class WorkQueue\n     }\n };\n \n-struct HTTPPathHandler\n-{\n+struct HTTPPathHandler {\n     HTTPPathHandler() {}\n-    HTTPPathHandler(std::string prefix, bool exactMatch, HTTPRequestHandler handler):\n-        prefix(prefix), exactMatch(exactMatch), handler(handler)\n+    HTTPPathHandler(std::string prefix, bool exactMatch, HTTPRequestHandler handler) : prefix(prefix), exactMatch(exactMatch), handler(handler)\n     {\n     }\n     std::string prefix;\n@@ -189,7 +186,7 @@ static WorkQueue<HTTPClosure>* workQueue = 0;\n //! Handlers for (sub)paths\n std::vector<HTTPPathHandler> pathHandlers;\n //! Bound listening sockets\n-std::vector<evhttp_bound_socket *> boundSockets;\n+std::vector<evhttp_bound_socket*> boundSockets;\n \n /** Check if a network address is allowed to access the HTTP server */\n static bool ClientAllowed(const CNetAddr& netaddr)\n@@ -345,7 +342,7 @@ static bool HTTPBindAddresses(struct evhttp* http)\n     // Bind addresses\n     for (std::vector<std::pair<std::string, uint16_t> >::iterator i = endpoints.begin(); i != endpoints.end(); ++i) {\n         LogPrint(\"http\", \"Binding RPC on address %s port %i\\n\", i->first, i->second);\n-        evhttp_bound_socket *bind_handle = evhttp_bind_socket_with_handle(http, i->first.empty() ? NULL : i->first.c_str(), i->second);\n+        evhttp_bound_socket* bind_handle = evhttp_bind_socket_with_handle(http, i->first.empty() ? NULL : i->first.c_str(), i->second);\n         if (bind_handle) {\n             boundSockets.push_back(bind_handle);\n         } else {\n@@ -363,7 +360,7 @@ static void HTTPWorkQueueRun(WorkQueue<HTTPClosure>* queue)\n }\n \n /** libevent event log callback */\n-static void libevent_log_cb(int severity, const char *msg)\n+static void libevent_log_cb(int severity, const char* msg)\n {\n     if (severity >= EVENT_LOG_WARN) // Log warn messages and higher without debug category\n         LogPrintf(\"libevent: %s\\n\", msg);\n@@ -455,7 +452,7 @@ void InterruptHTTPServer()\n     LogPrint(\"http\", \"Interrupting HTTP server\\n\");\n     if (eventHTTP) {\n         // Unlisten sockets\n-        BOOST_FOREACH (evhttp_bound_socket *socket, boundSockets) {\n+        BOOST_FOREACH (evhttp_bound_socket* socket, boundSockets) {\n             evhttp_del_accept_socket(eventHTTP, socket);\n         }\n         // Reject requests on current connections\n@@ -498,14 +495,13 @@ struct event_base* EventBase()\n static void httpevent_callback_fn(evutil_socket_t, short, void* data)\n {\n     // Static handler: simply call inner handler\n-    HTTPEvent *self = ((HTTPEvent*)data);\n+    HTTPEvent* self = ((HTTPEvent*)data);\n     self->handler();\n     if (self->deleteWhenTriggered)\n         delete self;\n }\n \n-HTTPEvent::HTTPEvent(struct event_base* base, bool deleteWhenTriggered, const boost::function<void(void)>& handler):\n-    deleteWhenTriggered(deleteWhenTriggered), handler(handler)\n+HTTPEvent::HTTPEvent(struct event_base* base, bool deleteWhenTriggered, const boost::function<void(void)>& handler) : deleteWhenTriggered(deleteWhenTriggered), handler(handler)\n {\n     ev = event_new(base, -1, 0, httpevent_callback_fn, this);\n     assert(ev);\n@@ -586,7 +582,7 @@ void HTTPRequest::WriteReply(int nStatus, const std::string& strReply)\n     assert(evb);\n     evbuffer_add(evb, strReply.data(), strReply.size());\n     HTTPEvent* ev = new HTTPEvent(eventBase, true,\n-        boost::bind(evhttp_send_reply, req, nStatus, (const char*)NULL, (struct evbuffer *)NULL));\n+                                  boost::bind(evhttp_send_reply, req, nStatus, (const char*)NULL, (struct evbuffer*)NULL));\n     ev->trigger(0);\n     replySent = true;\n     req = 0; // transferred back to main thread\n@@ -632,23 +628,21 @@ HTTPRequest::RequestMethod HTTPRequest::GetRequestMethod()\n     }\n }\n \n-void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler)\n+void RegisterHTTPHandler(const std::string& prefix, bool exactMatch, const HTTPRequestHandler& handler)\n {\n     LogPrint(\"http\", \"Registering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n     pathHandlers.push_back(HTTPPathHandler(prefix, exactMatch, handler));\n }\n \n-void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n+void UnregisterHTTPHandler(const std::string& prefix, bool exactMatch)\n {\n     std::vector<HTTPPathHandler>::iterator i = pathHandlers.begin();\n     std::vector<HTTPPathHandler>::iterator iend = pathHandlers.end();\n     for (; i != iend; ++i)\n         if (i->prefix == prefix && i->exactMatch == exactMatch)\n             break;\n-    if (i != iend)\n-    {\n+    if (i != iend) {\n         LogPrint(\"http\", \"Unregistering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n         pathHandlers.erase(i);\n     }\n }\n-"
      },
      {
        "sha": "5cbce03dd9b489414196f728924ea4448bf41af6",
        "filename": "src/httpserver.h",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44605105e519c863d1bcde31cabd02949b51d48f/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44605105e519c863d1bcde31cabd02949b51d48f/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=44605105e519c863d1bcde31cabd02949b51d48f",
        "patch": "@@ -11,9 +11,9 @@\n #include <boost/scoped_ptr.hpp>\n #include <boost/function.hpp>\n \n-static const int DEFAULT_HTTP_THREADS=4;\n-static const int DEFAULT_HTTP_WORKQUEUE=16;\n-static const int DEFAULT_HTTP_SERVER_TIMEOUT=30;\n+static const int DEFAULT_HTTP_THREADS = 4;\n+static const int DEFAULT_HTTP_WORKQUEUE = 16;\n+static const int DEFAULT_HTTP_SERVER_TIMEOUT = 30;\n \n struct evhttp_request;\n struct event_base;\n@@ -35,14 +35,14 @@ void InterruptHTTPServer();\n void StopHTTPServer();\n \n /** Handler for requests to a certain HTTP path */\n-typedef boost::function<void(HTTPRequest* req, const std::string &)> HTTPRequestHandler;\n+typedef boost::function<void(HTTPRequest* req, const std::string&)> HTTPRequestHandler;\n /** Register handler for prefix.\n  * If multiple handlers match a prefix, the first-registered one will\n  * be invoked.\n  */\n-void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler);\n+void RegisterHTTPHandler(const std::string& prefix, bool exactMatch, const HTTPRequestHandler& handler);\n /** Unregister handler for prefix */\n-void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch);\n+void UnregisterHTTPHandler(const std::string& prefix, bool exactMatch);\n \n /** Return evhttp event base. This can be used by submodules to\n  * queue timers or custom events.\n@@ -142,6 +142,7 @@ class HTTPEvent\n \n     bool deleteWhenTriggered;\n     boost::function<void(void)> handler;\n+\n private:\n     struct event* ev;\n };"
      },
      {
        "sha": "b26f7f87d9190c07621ecaecf9f9a0a307638347",
        "filename": "src/qt/bantablemodel.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 24,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44605105e519c863d1bcde31cabd02949b51d48f/src/qt/bantablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44605105e519c863d1bcde31cabd02949b51d48f/src/qt/bantablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bantablemodel.cpp?ref=44605105e519c863d1bcde31cabd02949b51d48f",
        "patch": "@@ -22,8 +22,7 @@ bool BannedNodeLessThan::operator()(const CCombinedBan& left, const CCombinedBan\n     if (order == Qt::DescendingOrder)\n         std::swap(pLeft, pRight);\n \n-    switch(column)\n-    {\n+    switch (column) {\n     case BanTableModel::Address:\n         return pLeft->subnet.ToString().compare(pRight->subnet.ToString()) < 0;\n     case BanTableModel::Bantime:\n@@ -54,8 +53,7 @@ class BanTablePriv\n #if QT_VERSION >= 0x040700\n         cachedBanlist.reserve(banMap.size());\n #endif\n-        for (banmap_t::iterator it = banMap.begin(); it != banMap.end(); it++)\n-        {\n+        for (banmap_t::iterator it = banMap.begin(); it != banMap.end(); it++) {\n             CCombinedBan banEntry;\n             banEntry.subnet = (*it).first;\n             banEntry.banEntry = (*it).second;\n@@ -72,7 +70,7 @@ class BanTablePriv\n         return cachedBanlist.size();\n     }\n \n-    CCombinedBan *index(int idx)\n+    CCombinedBan* index(int idx)\n     {\n         if (idx >= 0 && idx < cachedBanlist.size())\n             return &cachedBanlist[idx];\n@@ -81,9 +79,8 @@ class BanTablePriv\n     }\n };\n \n-BanTableModel::BanTableModel(ClientModel *parent) :\n-    QAbstractTableModel(parent),\n-    clientModel(parent)\n+BanTableModel::BanTableModel(ClientModel* parent) : QAbstractTableModel(parent),\n+                                                    clientModel(parent)\n {\n     columns << tr(\"IP/Netmask\") << tr(\"Banned Until\");\n     priv = new BanTablePriv();\n@@ -94,28 +91,28 @@ BanTableModel::BanTableModel(ClientModel *parent) :\n     refresh();\n }\n \n-int BanTableModel::rowCount(const QModelIndex &parent) const\n+int BanTableModel::rowCount(const QModelIndex& parent) const\n {\n     Q_UNUSED(parent);\n     return priv->size();\n }\n \n-int BanTableModel::columnCount(const QModelIndex &parent) const\n+int BanTableModel::columnCount(const QModelIndex& parent) const\n {\n     Q_UNUSED(parent);\n-    return columns.length();;\n+    return columns.length();\n+    ;\n }\n \n-QVariant BanTableModel::data(const QModelIndex &index, int role) const\n+QVariant BanTableModel::data(const QModelIndex& index, int role) const\n {\n-    if(!index.isValid())\n+    if (!index.isValid())\n         return QVariant();\n \n-    CCombinedBan *rec = static_cast<CCombinedBan*>(index.internalPointer());\n+    CCombinedBan* rec = static_cast<CCombinedBan*>(index.internalPointer());\n \n     if (role == Qt::DisplayRole) {\n-        switch(index.column())\n-        {\n+        switch (index.column()) {\n         case Address:\n             return QString::fromStdString(rec->subnet.ToString());\n         case Bantime:\n@@ -130,29 +127,27 @@ QVariant BanTableModel::data(const QModelIndex &index, int role) const\n \n QVariant BanTableModel::headerData(int section, Qt::Orientation orientation, int role) const\n {\n-    if(orientation == Qt::Horizontal)\n-    {\n-        if(role == Qt::DisplayRole && section < columns.size())\n-        {\n+    if (orientation == Qt::Horizontal) {\n+        if (role == Qt::DisplayRole && section < columns.size()) {\n             return columns[section];\n         }\n     }\n     return QVariant();\n }\n \n-Qt::ItemFlags BanTableModel::flags(const QModelIndex &index) const\n+Qt::ItemFlags BanTableModel::flags(const QModelIndex& index) const\n {\n-    if(!index.isValid())\n+    if (!index.isValid())\n         return 0;\n \n     Qt::ItemFlags retval = Qt::ItemIsSelectable | Qt::ItemIsEnabled;\n     return retval;\n }\n \n-QModelIndex BanTableModel::index(int row, int column, const QModelIndex &parent) const\n+QModelIndex BanTableModel::index(int row, int column, const QModelIndex& parent) const\n {\n     Q_UNUSED(parent);\n-    CCombinedBan *data = priv->index(row);\n+    CCombinedBan* data = priv->index(row);\n \n     if (data)\n         return createIndex(row, column, data);"
      },
      {
        "sha": "2c11adc39cbd7b3dda3000499f845652e956b8c3",
        "filename": "src/qt/bantablemodel.h",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44605105e519c863d1bcde31cabd02949b51d48f/src/qt/bantablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44605105e519c863d1bcde31cabd02949b51d48f/src/qt/bantablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bantablemodel.h?ref=44605105e519c863d1bcde31cabd02949b51d48f",
        "patch": "@@ -21,8 +21,7 @@ struct CCombinedBan {\n class BannedNodeLessThan\n {\n public:\n-    BannedNodeLessThan(int nColumn, Qt::SortOrder fOrder) :\n-        column(nColumn), order(fOrder) {}\n+    BannedNodeLessThan(int nColumn, Qt::SortOrder fOrder) : column(nColumn), order(fOrder) {}\n     bool operator()(const CCombinedBan& left, const CCombinedBan& right) const;\n \n private:\n@@ -39,7 +38,7 @@ class BanTableModel : public QAbstractTableModel\n     Q_OBJECT\n \n public:\n-    explicit BanTableModel(ClientModel *parent = 0);\n+    explicit BanTableModel(ClientModel* parent = 0);\n     void startAutoRefresh();\n     void stopAutoRefresh();\n \n@@ -50,12 +49,12 @@ class BanTableModel : public QAbstractTableModel\n \n     /** @name Methods overridden from QAbstractTableModel\n         @{*/\n-    int rowCount(const QModelIndex &parent) const;\n-    int columnCount(const QModelIndex &parent) const;\n-    QVariant data(const QModelIndex &index, int role) const;\n+    int rowCount(const QModelIndex& parent) const;\n+    int columnCount(const QModelIndex& parent) const;\n+    QVariant data(const QModelIndex& index, int role) const;\n     QVariant headerData(int section, Qt::Orientation orientation, int role) const;\n-    QModelIndex index(int row, int column, const QModelIndex &parent) const;\n-    Qt::ItemFlags flags(const QModelIndex &index) const;\n+    QModelIndex index(int row, int column, const QModelIndex& parent) const;\n+    Qt::ItemFlags flags(const QModelIndex& index) const;\n     void sort(int column, Qt::SortOrder order);\n     bool shouldShow();\n     /*@}*/\n@@ -64,9 +63,9 @@ public Q_SLOTS:\n     void refresh();\n \n private:\n-    ClientModel *clientModel;\n+    ClientModel* clientModel;\n     QStringList columns;\n-    BanTablePriv *priv;\n+    BanTablePriv* priv;\n };\n \n #endif // BITCOIN_QT_BANTABLEMODEL_H"
      },
      {
        "sha": "091de9b3877a42d550c71fad8d9d23bf84eda600",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44605105e519c863d1bcde31cabd02949b51d48f/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44605105e519c863d1bcde31cabd02949b51d48f/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=44605105e519c863d1bcde31cabd02949b51d48f",
        "patch": "@@ -10,7 +10,9 @@\n \n using namespace std;\n \n-class CAddrManTest : public CAddrMan{};\n+class CAddrManTest : public CAddrMan\n+{\n+};\n \n BOOST_FIXTURE_TEST_SUITE(addrman_tests, BasicTestingSetup)\n \n@@ -35,7 +37,7 @@ BOOST_AUTO_TEST_CASE(addrman_simple)\n     CAddrInfo addr_ret1 = addrman.Select();\n     BOOST_CHECK(addr_ret1.ToString() == \"250.1.1.1:8333\");\n \n-    // Test 3: Does IP address deduplication work correctly. \n+    // Test 3: Does IP address deduplication work correctly.\n     //  Expected dup IP should not be added.\n     CService addr1_dup = CService(\"250.1.1.1:8333\");\n     addrman.Add(CAddress(addr1_dup), source);\n@@ -48,7 +50,7 @@ BOOST_AUTO_TEST_CASE(addrman_simple)\n     addrman.Add(CAddress(addr2), source);\n     BOOST_CHECK(addrman.size() == 2);\n \n-    // Test 6: AddrMan::Clear() should empty the new table. \n+    // Test 6: AddrMan::Clear() should empty the new table.\n     addrman.Clear();\n     BOOST_CHECK(addrman.size() == 0);\n     CAddrInfo addr_null2 = addrman.Select();\n@@ -127,8 +129,8 @@ BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n \n     BOOST_CHECK(addrman.size() == 0);\n \n-    for (unsigned int i = 1; i < 4; i++){\n-        CService addr = CService(\"250.1.1.\"+boost::to_string(i));\n+    for (unsigned int i = 1; i < 4; i++) {\n+        CService addr = CService(\"250.1.1.\" + boost::to_string(i));\n         addrman.Add(CAddress(addr), source);\n \n         //Test 11: No collision in new table yet.\n@@ -156,8 +158,8 @@ BOOST_AUTO_TEST_CASE(addrman_tried_collisions)\n \n     BOOST_CHECK(addrman.size() == 0);\n \n-    for (unsigned int i = 1; i < 75; i++){\n-        CService addr = CService(\"250.1.1.\"+boost::to_string(i));\n+    for (unsigned int i = 1; i < 75; i++) {\n+        CService addr = CService(\"250.1.1.\" + boost::to_string(i));\n         addrman.Add(CAddress(addr), source);\n         addrman.Good(CAddress(addr));\n "
      },
      {
        "sha": "7471cb9cf31b1d171faa399eb43933e243de601f",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 11,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44605105e519c863d1bcde31cabd02949b51d48f/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44605105e519c863d1bcde31cabd02949b51d48f/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=44605105e519c863d1bcde31cabd02949b51d48f",
        "patch": "@@ -10,23 +10,24 @@\n #include <boost/assign/std/vector.hpp> // for 'operator+=()'\n #include <boost/assert.hpp>\n #include <boost/test/unit_test.hpp>\n-                    \n+\n using namespace std;\n using namespace boost::assign; // bring 'operator+=()' into scope\n using namespace boost::filesystem;\n-         \n+\n // Test if a string consists entirely of null characters\n-bool is_null_key(const vector<unsigned char>& key) {\n+bool is_null_key(const vector<unsigned char>& key)\n+{\n     bool isnull = true;\n \n     for (unsigned int i = 0; i < key.size(); i++)\n         isnull &= (key[i] == '\\x00');\n \n     return isnull;\n }\n- \n+\n BOOST_FIXTURE_TEST_SUITE(dbwrapper_tests, BasicTestingSetup)\n-                       \n+\n BOOST_AUTO_TEST_CASE(dbwrapper)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n@@ -149,24 +150,24 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n     // Now, set up another wrapper that wants to obfuscate the same directory\n     CDBWrapper odbw(ph, (1 << 10), false, false, true);\n \n-    // Check that the key/val we wrote with unobfuscated wrapper exists and \n+    // Check that the key/val we wrote with unobfuscated wrapper exists and\n     // is readable.\n     uint256 res2;\n     BOOST_CHECK(odbw.Read(key, res2));\n     BOOST_CHECK_EQUAL(res2.ToString(), in.ToString());\n \n-    BOOST_CHECK(!odbw.IsEmpty()); // There should be existing data\n+    BOOST_CHECK(!odbw.IsEmpty());                     // There should be existing data\n     BOOST_CHECK(is_null_key(odbw.GetObfuscateKey())); // The key should be an empty string\n \n     uint256 in2 = GetRandHash();\n     uint256 res3;\n- \n+\n     // Check that we can write successfully\n     BOOST_CHECK(odbw.Write(key, in2));\n     BOOST_CHECK(odbw.Read(key, res3));\n     BOOST_CHECK_EQUAL(res3.ToString(), in2.ToString());\n }\n-                        \n+\n // Ensure that we start obfuscating during a reindex.\n BOOST_AUTO_TEST_CASE(existing_data_reindex)\n {\n@@ -197,11 +198,11 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n \n     uint256 in2 = GetRandHash();\n     uint256 res3;\n- \n+\n     // Check that we can write successfully\n     BOOST_CHECK(odbw.Write(key, in2));\n     BOOST_CHECK(odbw.Read(key, res3));\n     BOOST_CHECK_EQUAL(res3.ToString(), in2.ToString());\n }\n- \n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "9372027f35567d3db67ea5338c9ea5e102362bb1",
        "filename": "src/test/streams_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44605105e519c863d1bcde31cabd02949b51d48f/src/test/streams_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44605105e519c863d1bcde31cabd02949b51d48f/src/test/streams_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/streams_tests.cpp?ref=44605105e519c863d1bcde31cabd02949b51d48f",
        "patch": "@@ -9,7 +9,7 @@\n #include <boost/assign/std/vector.hpp> // for 'operator+=()'\n #include <boost/assert.hpp>\n #include <boost/test/unit_test.hpp>\n-                    \n+\n using namespace std;\n using namespace boost::assign; // bring 'operator+=()' into scope\n \n@@ -23,16 +23,16 @@ BOOST_AUTO_TEST_CASE(streams_serializedata_xor)\n     CDataStream ds(in, 0, 0);\n \n     // Degenerate case\n-    \n-    key += '\\x00','\\x00';\n+\n+    key += '\\x00', '\\x00';\n     ds.Xor(key);\n     BOOST_CHECK_EQUAL(\n-            std::string(expected_xor.begin(), expected_xor.end()), \n-            std::string(ds.begin(), ds.end()));\n+        std::string(expected_xor.begin(), expected_xor.end()),\n+        std::string(ds.begin(), ds.end()));\n+\n+    in += '\\x0f', '\\xf0';\n+    expected_xor += '\\xf0', '\\x0f';\n \n-    in += '\\x0f','\\xf0';\n-    expected_xor += '\\xf0','\\x0f';\n-    \n     // Single character key\n \n     ds.clear();\n@@ -42,26 +42,26 @@ BOOST_AUTO_TEST_CASE(streams_serializedata_xor)\n     key += '\\xff';\n     ds.Xor(key);\n     BOOST_CHECK_EQUAL(\n-            std::string(expected_xor.begin(), expected_xor.end()), \n-            std::string(ds.begin(), ds.end())); \n-    \n+        std::string(expected_xor.begin(), expected_xor.end()),\n+        std::string(ds.begin(), ds.end()));\n+\n     // Multi character key\n \n     in.clear();\n     expected_xor.clear();\n-    in += '\\xf0','\\x0f';\n-    expected_xor += '\\x0f','\\x00';\n-                        \n+    in += '\\xf0', '\\x0f';\n+    expected_xor += '\\x0f', '\\x00';\n+\n     ds.clear();\n     ds.insert(ds.begin(), in.begin(), in.end());\n \n     key.clear();\n-    key += '\\xff','\\x0f';\n+    key += '\\xff', '\\x0f';\n \n     ds.Xor(key);\n     BOOST_CHECK_EQUAL(\n-            std::string(expected_xor.begin(), expected_xor.end()), \n-            std::string(ds.begin(), ds.end()));  \n-}         \n+        std::string(expected_xor.begin(), expected_xor.end()),\n+        std::string(ds.begin(), ds.end()));\n+}\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "d36f965164270ddf5146d40230eb38f5e1f342ac",
        "filename": "src/zmq/zmqabstractnotifier.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44605105e519c863d1bcde31cabd02949b51d48f/src/zmq/zmqabstractnotifier.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44605105e519c863d1bcde31cabd02949b51d48f/src/zmq/zmqabstractnotifier.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqabstractnotifier.cpp?ref=44605105e519c863d1bcde31cabd02949b51d48f",
        "patch": "@@ -11,12 +11,12 @@ CZMQAbstractNotifier::~CZMQAbstractNotifier()\n     assert(!psocket);\n }\n \n-bool CZMQAbstractNotifier::NotifyBlock(const CBlockIndex * /*CBlockIndex*/)\n+bool CZMQAbstractNotifier::NotifyBlock(const CBlockIndex* /*CBlockIndex*/)\n {\n     return true;\n }\n \n-bool CZMQAbstractNotifier::NotifyTransaction(const CTransaction &/*transaction*/)\n+bool CZMQAbstractNotifier::NotifyTransaction(const CTransaction& /*transaction*/)\n {\n     return true;\n }"
      },
      {
        "sha": "aeb2ad511d53efb3cf9def74662e868d5abdc0c0",
        "filename": "src/zmq/zmqabstractnotifier.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44605105e519c863d1bcde31cabd02949b51d48f/src/zmq/zmqabstractnotifier.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44605105e519c863d1bcde31cabd02949b51d48f/src/zmq/zmqabstractnotifier.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqabstractnotifier.h?ref=44605105e519c863d1bcde31cabd02949b51d48f",
        "patch": "@@ -15,7 +15,7 @@ typedef CZMQAbstractNotifier* (*CZMQNotifierFactory)();\n class CZMQAbstractNotifier\n {\n public:\n-    CZMQAbstractNotifier() : psocket(0) { }\n+    CZMQAbstractNotifier() : psocket(0) {}\n     virtual ~CZMQAbstractNotifier();\n \n     template <typename T>\n@@ -25,18 +25,18 @@ class CZMQAbstractNotifier\n     }\n \n     std::string GetType() const { return type; }\n-    void SetType(const std::string &t) { type = t; }\n+    void SetType(const std::string& t) { type = t; }\n     std::string GetAddress() const { return address; }\n-    void SetAddress(const std::string &a) { address = a; }\n+    void SetAddress(const std::string& a) { address = a; }\n \n-    virtual bool Initialize(void *pcontext) = 0;\n+    virtual bool Initialize(void* pcontext) = 0;\n     virtual void Shutdown() = 0;\n \n-    virtual bool NotifyBlock(const CBlockIndex *pindex);\n-    virtual bool NotifyTransaction(const CTransaction &transaction);\n+    virtual bool NotifyBlock(const CBlockIndex* pindex);\n+    virtual bool NotifyTransaction(const CTransaction& transaction);\n \n protected:\n-    void *psocket;\n+    void* psocket;\n     std::string type;\n     std::string address;\n };"
      },
      {
        "sha": "add78394e918d425fb4df8b9ad59d93e4b43861a",
        "filename": "src/zmq/zmqconfig.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44605105e519c863d1bcde31cabd02949b51d48f/src/zmq/zmqconfig.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44605105e519c863d1bcde31cabd02949b51d48f/src/zmq/zmqconfig.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqconfig.h?ref=44605105e519c863d1bcde31cabd02949b51d48f",
        "patch": "@@ -19,6 +19,6 @@\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n \n-void zmqError(const char *str);\n+void zmqError(const char* str);\n \n #endif // BITCOIN_ZMQ_ZMQCONFIG_H"
      },
      {
        "sha": "21ac34559c3710ac692ac8c192a79c8e6cae2439",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 47,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44605105e519c863d1bcde31cabd02949b51d48f/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44605105e519c863d1bcde31cabd02949b51d48f/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=44605105e519c863d1bcde31cabd02949b51d48f",
        "patch": "@@ -10,7 +10,7 @@\n #include \"streams.h\"\n #include \"util.h\"\n \n-void zmqError(const char *str)\n+void zmqError(const char* str)\n {\n     LogPrint(\"zmq\", \"Error: %s, errno=%s\\n\", str, zmq_strerror(errno));\n }\n@@ -24,13 +24,12 @@ CZMQNotificationInterface::~CZMQNotificationInterface()\n     // ensure Shutdown if Initialize is called\n     assert(!pcontext);\n \n-    for (std::list<CZMQAbstractNotifier*>::iterator i=notifiers.begin(); i!=notifiers.end(); ++i)\n-    {\n+    for (std::list<CZMQAbstractNotifier*>::iterator i = notifiers.begin(); i != notifiers.end(); ++i) {\n         delete *i;\n     }\n }\n \n-CZMQNotificationInterface* CZMQNotificationInterface::CreateWithArguments(const std::map<std::string, std::string> &args)\n+CZMQNotificationInterface* CZMQNotificationInterface::CreateWithArguments(const std::map<std::string, std::string>& args)\n {\n     CZMQNotificationInterface* notificationInterface = NULL;\n     std::map<std::string, CZMQNotifierFactory> factories;\n@@ -41,22 +40,19 @@ CZMQNotificationInterface* CZMQNotificationInterface::CreateWithArguments(const\n     factories[\"pubrawblock\"] = CZMQAbstractNotifier::Create<CZMQPublishRawBlockNotifier>;\n     factories[\"pubrawtx\"] = CZMQAbstractNotifier::Create<CZMQPublishRawTransactionNotifier>;\n \n-    for (std::map<std::string, CZMQNotifierFactory>::const_iterator i=factories.begin(); i!=factories.end(); ++i)\n-    {\n+    for (std::map<std::string, CZMQNotifierFactory>::const_iterator i = factories.begin(); i != factories.end(); ++i) {\n         std::map<std::string, std::string>::const_iterator j = args.find(\"-zmq\" + i->first);\n-        if (j!=args.end())\n-        {\n+        if (j != args.end()) {\n             CZMQNotifierFactory factory = i->second;\n             std::string address = j->second;\n-            CZMQAbstractNotifier *notifier = factory();\n+            CZMQAbstractNotifier* notifier = factory();\n             notifier->SetType(i->first);\n             notifier->SetAddress(address);\n             notifiers.push_back(notifier);\n         }\n     }\n \n-    if (!notifiers.empty())\n-    {\n+    if (!notifiers.empty()) {\n         notificationInterface = new CZMQNotificationInterface();\n         notificationInterface->notifiers = notifiers;\n     }\n@@ -72,29 +68,23 @@ bool CZMQNotificationInterface::Initialize()\n \n     pcontext = zmq_init(1);\n \n-    if (!pcontext)\n-    {\n+    if (!pcontext) {\n         zmqError(\"Unable to initialize context\");\n         return false;\n     }\n \n-    std::list<CZMQAbstractNotifier*>::iterator i=notifiers.begin();\n-    for (; i!=notifiers.end(); ++i)\n-    {\n-        CZMQAbstractNotifier *notifier = *i;\n-        if (notifier->Initialize(pcontext))\n-        {\n+    std::list<CZMQAbstractNotifier*>::iterator i = notifiers.begin();\n+    for (; i != notifiers.end(); ++i) {\n+        CZMQAbstractNotifier* notifier = *i;\n+        if (notifier->Initialize(pcontext)) {\n             LogPrint(\"zmq\", \"  Notifier %s ready (address = %s)\\n\", notifier->GetType(), notifier->GetAddress());\n-        }\n-        else\n-        {\n+        } else {\n             LogPrint(\"zmq\", \"  Notifier %s failed (address = %s)\\n\", notifier->GetType(), notifier->GetAddress());\n             break;\n         }\n     }\n \n-    if (i!=notifiers.end())\n-    {\n+    if (i != notifiers.end()) {\n         Shutdown();\n         return false;\n     }\n@@ -106,11 +96,9 @@ bool CZMQNotificationInterface::Initialize()\n void CZMQNotificationInterface::Shutdown()\n {\n     LogPrint(\"zmq\", \"Shutdown notification interface\\n\");\n-    if (pcontext)\n-    {\n-        for (std::list<CZMQAbstractNotifier*>::iterator i=notifiers.begin(); i!=notifiers.end(); ++i)\n-        {\n-            CZMQAbstractNotifier *notifier = *i;\n+    if (pcontext) {\n+        for (std::list<CZMQAbstractNotifier*>::iterator i = notifiers.begin(); i != notifiers.end(); ++i) {\n+            CZMQAbstractNotifier* notifier = *i;\n             LogPrint(\"zmq\", \"   Shutdown notifier %s at %s\\n\", notifier->GetType(), notifier->GetAddress());\n             notifier->Shutdown();\n         }\n@@ -120,34 +108,26 @@ void CZMQNotificationInterface::Shutdown()\n     }\n }\n \n-void CZMQNotificationInterface::UpdatedBlockTip(const CBlockIndex *pindex)\n+void CZMQNotificationInterface::UpdatedBlockTip(const CBlockIndex* pindex)\n {\n-    for (std::list<CZMQAbstractNotifier*>::iterator i = notifiers.begin(); i!=notifiers.end(); )\n-    {\n-        CZMQAbstractNotifier *notifier = *i;\n-        if (notifier->NotifyBlock(pindex))\n-        {\n+    for (std::list<CZMQAbstractNotifier*>::iterator i = notifiers.begin(); i != notifiers.end();) {\n+        CZMQAbstractNotifier* notifier = *i;\n+        if (notifier->NotifyBlock(pindex)) {\n             i++;\n-        }\n-        else\n-        {\n+        } else {\n             notifier->Shutdown();\n             i = notifiers.erase(i);\n         }\n     }\n }\n \n-void CZMQNotificationInterface::SyncTransaction(const CTransaction &tx, const CBlock *pblock)\n+void CZMQNotificationInterface::SyncTransaction(const CTransaction& tx, const CBlock* pblock)\n {\n-    for (std::list<CZMQAbstractNotifier*>::iterator i = notifiers.begin(); i!=notifiers.end(); )\n-    {\n-        CZMQAbstractNotifier *notifier = *i;\n-        if (notifier->NotifyTransaction(tx))\n-        {\n+    for (std::list<CZMQAbstractNotifier*>::iterator i = notifiers.begin(); i != notifiers.end();) {\n+        CZMQAbstractNotifier* notifier = *i;\n+        if (notifier->NotifyTransaction(tx)) {\n             i++;\n-        }\n-        else\n-        {\n+        } else {\n             notifier->Shutdown();\n             i = notifiers.erase(i);\n         }"
      },
      {
        "sha": "7ed3b5d2c1be80a00469e9b050ed4e824c1b0900",
        "filename": "src/zmq/zmqnotificationinterface.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44605105e519c863d1bcde31cabd02949b51d48f/src/zmq/zmqnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44605105e519c863d1bcde31cabd02949b51d48f/src/zmq/zmqnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.h?ref=44605105e519c863d1bcde31cabd02949b51d48f",
        "patch": "@@ -17,19 +17,19 @@ class CZMQNotificationInterface : public CValidationInterface\n public:\n     virtual ~CZMQNotificationInterface();\n \n-    static CZMQNotificationInterface* CreateWithArguments(const std::map<std::string, std::string> &args);\n+    static CZMQNotificationInterface* CreateWithArguments(const std::map<std::string, std::string>& args);\n \n     bool Initialize();\n     void Shutdown();\n \n protected: // CValidationInterface\n-    void SyncTransaction(const CTransaction &tx, const CBlock *pblock);\n-    void UpdatedBlockTip(const CBlockIndex *pindex);\n+    void SyncTransaction(const CTransaction& tx, const CBlock* pblock);\n+    void UpdatedBlockTip(const CBlockIndex* pindex);\n \n private:\n     CZMQNotificationInterface();\n \n-    void *pcontext;\n+    void* pcontext;\n     std::list<CZMQAbstractNotifier*> notifiers;\n };\n "
      },
      {
        "sha": "984903c8c173d21fb9210e1d3494cdcc9fabbf07",
        "filename": "src/zmq/zmqpublishnotifier.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 30,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44605105e519c863d1bcde31cabd02949b51d48f/src/zmq/zmqpublishnotifier.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44605105e519c863d1bcde31cabd02949b51d48f/src/zmq/zmqpublishnotifier.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqpublishnotifier.cpp?ref=44605105e519c863d1bcde31cabd02949b51d48f",
        "patch": "@@ -9,30 +9,27 @@\n static std::multimap<std::string, CZMQAbstractPublishNotifier*> mapPublishNotifiers;\n \n // Internal function to send multipart message\n-static int zmq_send_multipart(void *sock, const void* data, size_t size, ...)\n+static int zmq_send_multipart(void* sock, const void* data, size_t size, ...)\n {\n     va_list args;\n     va_start(args, size);\n \n-    while (1)\n-    {\n+    while (1) {\n         zmq_msg_t msg;\n \n         int rc = zmq_msg_init_size(&msg, size);\n-        if (rc != 0)\n-        {\n+        if (rc != 0) {\n             zmqError(\"Unable to initialize ZMQ msg\");\n             return -1;\n         }\n \n-        void *buf = zmq_msg_data(&msg);\n+        void* buf = zmq_msg_data(&msg);\n         memcpy(buf, data, size);\n \n         data = va_arg(args, const void*);\n \n         rc = zmq_msg_send(&msg, sock, data ? ZMQ_SNDMORE : 0);\n-        if (rc == -1)\n-        {\n+        if (rc == -1) {\n             zmqError(\"Unable to send ZMQ msg\");\n             zmq_msg_close(&msg);\n             return -1;\n@@ -48,35 +45,30 @@ static int zmq_send_multipart(void *sock, const void* data, size_t size, ...)\n     return 0;\n }\n \n-bool CZMQAbstractPublishNotifier::Initialize(void *pcontext)\n+bool CZMQAbstractPublishNotifier::Initialize(void* pcontext)\n {\n     assert(!psocket);\n \n     // check if address is being used by other publish notifier\n     std::multimap<std::string, CZMQAbstractPublishNotifier*>::iterator i = mapPublishNotifiers.find(address);\n \n-    if (i==mapPublishNotifiers.end())\n-    {\n+    if (i == mapPublishNotifiers.end()) {\n         psocket = zmq_socket(pcontext, ZMQ_PUB);\n-        if (!psocket)\n-        {\n+        if (!psocket) {\n             zmqError(\"Failed to create socket\");\n             return false;\n         }\n \n         int rc = zmq_bind(psocket, address.c_str());\n-        if (rc!=0)\n-        {\n+        if (rc != 0) {\n             zmqError(\"Failed to bind address\");\n             return false;\n         }\n \n         // register this notifier for the address, so it can be reused for other publish notifier\n         mapPublishNotifiers.insert(std::make_pair(address, this));\n         return true;\n-    }\n-    else\n-    {\n+    } else {\n         LogPrint(\"zmq\", \"  Reuse socket for address %s\\n\", address);\n \n         psocket = i->second->psocket;\n@@ -96,17 +88,14 @@ void CZMQAbstractPublishNotifier::Shutdown()\n     typedef std::multimap<std::string, CZMQAbstractPublishNotifier*>::iterator iterator;\n     std::pair<iterator, iterator> iterpair = mapPublishNotifiers.equal_range(address);\n \n-    for (iterator it = iterpair.first; it != iterpair.second; ++it)\n-    {\n-        if (it->second==this)\n-        {\n+    for (iterator it = iterpair.first; it != iterpair.second; ++it) {\n+        if (it->second == this) {\n             mapPublishNotifiers.erase(it);\n             break;\n         }\n     }\n \n-    if (count == 1)\n-    {\n+    if (count == 1) {\n         LogPrint(\"zmq\", \"Close socket at address %s\\n\", address);\n         int linger = 0;\n         zmq_setsockopt(psocket, ZMQ_LINGER, &linger, sizeof(linger));\n@@ -116,7 +105,7 @@ void CZMQAbstractPublishNotifier::Shutdown()\n     psocket = 0;\n }\n \n-bool CZMQPublishHashBlockNotifier::NotifyBlock(const CBlockIndex *pindex)\n+bool CZMQPublishHashBlockNotifier::NotifyBlock(const CBlockIndex* pindex)\n {\n     uint256 hash = pindex->GetBlockHash();\n     LogPrint(\"zmq\", \"Publish hash block %s\\n\", hash.GetHex());\n@@ -127,7 +116,7 @@ bool CZMQPublishHashBlockNotifier::NotifyBlock(const CBlockIndex *pindex)\n     return rc == 0;\n }\n \n-bool CZMQPublishHashTransactionNotifier::NotifyTransaction(const CTransaction &transaction)\n+bool CZMQPublishHashTransactionNotifier::NotifyTransaction(const CTransaction& transaction)\n {\n     uint256 hash = transaction.GetHash();\n     LogPrint(\"zmq\", \"Publish hash transaction %s\\n\", hash.GetHex());\n@@ -138,16 +127,15 @@ bool CZMQPublishHashTransactionNotifier::NotifyTransaction(const CTransaction &t\n     return rc == 0;\n }\n \n-bool CZMQPublishRawBlockNotifier::NotifyBlock(const CBlockIndex *pindex)\n+bool CZMQPublishRawBlockNotifier::NotifyBlock(const CBlockIndex* pindex)\n {\n     LogPrint(\"zmq\", \"Publish raw block %s\\n\", pindex->GetBlockHash().GetHex());\n \n     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n     {\n         LOCK(cs_main);\n         CBlock block;\n-        if(!ReadBlockFromDisk(block, pindex))\n-        {\n+        if (!ReadBlockFromDisk(block, pindex)) {\n             zmqError(\"Can't read block from disk\");\n             return false;\n         }\n@@ -159,7 +147,7 @@ bool CZMQPublishRawBlockNotifier::NotifyBlock(const CBlockIndex *pindex)\n     return rc == 0;\n }\n \n-bool CZMQPublishRawTransactionNotifier::NotifyTransaction(const CTransaction &transaction)\n+bool CZMQPublishRawTransactionNotifier::NotifyTransaction(const CTransaction& transaction)\n {\n     uint256 hash = transaction.GetHash();\n     LogPrint(\"zmq\", \"Publish raw transaction %s\\n\", hash.GetHex());"
      },
      {
        "sha": "bff23a016f679d8aadf7d6102c8bc9d21d9da8d2",
        "filename": "src/zmq/zmqpublishnotifier.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44605105e519c863d1bcde31cabd02949b51d48f/src/zmq/zmqpublishnotifier.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44605105e519c863d1bcde31cabd02949b51d48f/src/zmq/zmqpublishnotifier.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqpublishnotifier.h?ref=44605105e519c863d1bcde31cabd02949b51d48f",
        "patch": "@@ -12,32 +12,32 @@ class CBlockIndex;\n class CZMQAbstractPublishNotifier : public CZMQAbstractNotifier\n {\n public:\n-    bool Initialize(void *pcontext);\n+    bool Initialize(void* pcontext);\n     void Shutdown();\n };\n \n class CZMQPublishHashBlockNotifier : public CZMQAbstractPublishNotifier\n {\n public:\n-    bool NotifyBlock(const CBlockIndex *pindex);\n+    bool NotifyBlock(const CBlockIndex* pindex);\n };\n \n class CZMQPublishHashTransactionNotifier : public CZMQAbstractPublishNotifier\n {\n public:\n-    bool NotifyTransaction(const CTransaction &transaction);\n+    bool NotifyTransaction(const CTransaction& transaction);\n };\n \n class CZMQPublishRawBlockNotifier : public CZMQAbstractPublishNotifier\n {\n public:\n-    bool NotifyBlock(const CBlockIndex *pindex);\n+    bool NotifyBlock(const CBlockIndex* pindex);\n };\n \n class CZMQPublishRawTransactionNotifier : public CZMQAbstractPublishNotifier\n {\n public:\n-    bool NotifyTransaction(const CTransaction &transaction);\n+    bool NotifyTransaction(const CTransaction& transaction);\n };\n \n #endif // BITCOIN_ZMQ_ZMQPUBLISHNOTIFIER_H"
      }
    ]
  },
  {
    "sha": "d2da9395c946bfe2d87694f2e0a2992fbd963349",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMmRhOTM5NWM5NDZiZmUyZDg3Njk0ZjJlMGEyOTkyZmJkOTYzMzQ5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-18T14:31:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-24T15:27:25Z"
      },
      "message": "clang-format: Update and run on recent new files\n\nSet AlignAfterOpenBracket: false",
      "tree": {
        "sha": "e04ab237c3767519479989a03c32f675487f5c44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e04ab237c3767519479989a03c32f675487f5c44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2da9395c946bfe2d87694f2e0a2992fbd963349",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2da9395c946bfe2d87694f2e0a2992fbd963349",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d2da9395c946bfe2d87694f2e0a2992fbd963349",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2da9395c946bfe2d87694f2e0a2992fbd963349/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "44605105e519c863d1bcde31cabd02949b51d48f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44605105e519c863d1bcde31cabd02949b51d48f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44605105e519c863d1bcde31cabd02949b51d48f"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "129f062ef8b72712d62c0981ae1e6bcff82e7f98",
        "filename": "src/.clang-format",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2da9395c946bfe2d87694f2e0a2992fbd963349/src/.clang-format",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2da9395c946bfe2d87694f2e0a2992fbd963349/src/.clang-format",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/.clang-format?ref=d2da9395c946bfe2d87694f2e0a2992fbd963349",
        "patch": "@@ -1,4 +1,6 @@\n+Language:        Cpp\n AccessModifierOffset: -4\n+AlignAfterOpenBracket: false\n AlignEscapedNewlinesLeft: true\n AlignTrailingComments: true\n AllowAllParametersOfDeclarationOnNextLine: false\n@@ -26,7 +28,6 @@ IndentCaseLabels: false\n IndentFunctionDeclarationAfterType: false\n IndentWidth:     4\n KeepEmptyLinesAtTheStartOfBlocks: false\n-Language:        Cpp\n MaxEmptyLinesToKeep: 2\n NamespaceIndentation: None\n ObjCSpaceAfterProperty: false"
      },
      {
        "sha": "39bf8c2b68dd721aed0dab7c0e7219199ce72e35",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2da9395c946bfe2d87694f2e0a2992fbd963349/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2da9395c946bfe2d87694f2e0a2992fbd963349/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=d2da9395c946bfe2d87694f2e0a2992fbd963349",
        "patch": "@@ -252,7 +252,7 @@ static void http_request_cb(struct evhttp_request* req, void* arg)\n     std::auto_ptr<HTTPRequest> hreq(new HTTPRequest(req));\n \n     LogPrint(\"http\", \"Received a %s request for %s from %s\\n\",\n-             RequestMethodString(hreq->GetRequestMethod()), hreq->GetURI(), hreq->GetPeer().ToString());\n+        RequestMethodString(hreq->GetRequestMethod()), hreq->GetURI(), hreq->GetPeer().ToString());\n \n     // Early address-based allow check\n     if (!ClientAllowed(hreq->GetPeer())) {\n@@ -582,7 +582,7 @@ void HTTPRequest::WriteReply(int nStatus, const std::string& strReply)\n     assert(evb);\n     evbuffer_add(evb, strReply.data(), strReply.size());\n     HTTPEvent* ev = new HTTPEvent(eventBase, true,\n-                                  boost::bind(evhttp_send_reply, req, nStatus, (const char*)NULL, (struct evbuffer*)NULL));\n+        boost::bind(evhttp_send_reply, req, nStatus, (const char*)NULL, (struct evbuffer*)NULL));\n     ev->trigger(0);\n     replySent = true;\n     req = 0; // transferred back to main thread"
      }
    ]
  }
]