[
  {
    "sha": "4f872b24501f40bd410227b5413bda2f2569af24",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Zjg3MmIyNDUwMWY0MGJkNDEwMjI3YjU0MTNiZGEyZjI1NjlhZjI0",
    "commit": {
      "author": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2018-03-22T02:22:52Z"
      },
      "committer": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2018-03-28T05:11:11Z"
      },
      "message": "Add additional tests for GetBoolArg()\n\nThis is meant to be an intermediate commit to prove that the next does not\nintroduce any changes in the semantics of boolean option parsing.",
      "tree": {
        "sha": "188390ca279693c4c9bfb6050641e923cf73e5d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/188390ca279693c4c9bfb6050641e923cf73e5d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f872b24501f40bd410227b5413bda2f2569af24",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEr5FzGLjELREnIWJdFX78rLxkhCIFAlq7I+8ACgkQFX78rLxk\nhCJ4aA//f4ZjYfuNFo2CA2WjZhLid42ZTMIFPG60iGX6IjPXsHBjxqE8gv/gy/hJ\n1QMnWhAvlh74W39SMfu9Sq+Ml7tqWuhmNzqcHU0HT/lWzAIgIThGWuw9DnuJLm7y\nhtxFpyQV+6QHOkxLGI4JCLfMnBsljsAODZa0ZzSl/l2u8GBR3OYBz7uHVwO4bOCs\n5BpDh7cLf/lvhSb8d7ZeunRDxuZ3mvN8n4zdVwvvmYz6Ut6g9z6XWwuHE5hWS0rZ\nE6p20ifi46onC+HOYKoU9m2SSNrDriRw5PP5JLGVchYJT2htTnI94+dwLmTsEtC0\nMRoUTXYeregrtx3r7LcgqfZuNMGEcC5jbeTWlG9rQOjnVEL2Ux8YILWo9SOg/vp2\n1qbhHmlLMIfdrzLN0PFccENk8wQA2o1juTwWhCqQYChxSP1jJT+0RZlnRE0gd/BA\ndfo/m55BdMTPx4gkMgAf9iAW28zD1ZlMOd6Mv6TbijyiYV5RZtmw6RDBrN1OfDKN\nzVs5goUl4PWuw+emoKtl157a9Ngr8itiKGIHqg8wn2vyiqPk6VcdU9fs3T3H3X0G\nxS1P+oaCNf7wWak0hbkIDAQLrvOHKyTw4Ao0jSSn28VDYBGERXH6LyqhXnFrSgE1\nqsQsBVg9KCLZ9xfKH2la6ae5ypUBleLTkkNZLCcZ1HBEXjGFPrs=\n=l1RK\n-----END PGP SIGNATURE-----",
        "payload": "tree 188390ca279693c4c9bfb6050641e923cf73e5d1\nparent ac898b689c660df8a79cc64997dda66d36eb59dd\nauthor Evan Klitzke <evan@eklitzke.org> 1521685372 -0700\ncommitter Evan Klitzke <evan@eklitzke.org> 1522213871 -0700\n\nAdd additional tests for GetBoolArg()\n\nThis is meant to be an intermediate commit to prove that the next does not\nintroduce any changes in the semantics of boolean option parsing.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f872b24501f40bd410227b5413bda2f2569af24",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4f872b24501f40bd410227b5413bda2f2569af24",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f872b24501f40bd410227b5413bda2f2569af24/comments",
    "author": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ac898b689c660df8a79cc64997dda66d36eb59dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac898b689c660df8a79cc64997dda66d36eb59dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac898b689c660df8a79cc64997dda66d36eb59dd"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 26,
      "deletions": 0
    },
    "files": [
      {
        "sha": "094bc66ac22c3f0d7b0fdc26602ec177444bb876",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f872b24501f40bd410227b5413bda2f2569af24/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f872b24501f40bd410227b5413bda2f2569af24/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=4f872b24501f40bd410227b5413bda2f2569af24",
        "patch": "@@ -223,6 +223,32 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     BOOST_CHECK(testArgs.GetArgs(\"-ccc\").size() == 2);\n }\n \n+BOOST_AUTO_TEST_CASE(util_GetBoolArg)\n+{\n+    TestArgsManager testArgs;\n+    const char *argv_test[] = {\n+        \"ignored\", \"-a\", \"-nob\", \"-c=0\", \"-d=1\", \"-e=false\", \"-f=true\"};\n+    testArgs.ParseParameters(7, (char**)argv_test);\n+\n+    // Each letter should be set.\n+    for (char opt : \"abcdef\")\n+        BOOST_CHECK(testArgs.IsArgSet({'-', opt}) || !opt);\n+\n+    // Nothing else should be in the map\n+    BOOST_CHECK(testArgs.GetMapArgs().size() == 6 &&\n+                testArgs.GetMapMultiArgs().size() == 6);\n+\n+    // The -no prefix should get stripped on the way in.\n+    BOOST_CHECK(!testArgs.IsArgSet(\"-nob\"));\n+\n+    // Check expected values.\n+    BOOST_CHECK(testArgs.GetBoolArg(\"-a\", false) == true);\n+    BOOST_CHECK(testArgs.GetBoolArg(\"-b\", true) == false);\n+    BOOST_CHECK(testArgs.GetBoolArg(\"-c\", true) == false);\n+    BOOST_CHECK(testArgs.GetBoolArg(\"-d\", false) == true);\n+    BOOST_CHECK(testArgs.GetBoolArg(\"-e\", true) == false);\n+    BOOST_CHECK(testArgs.GetBoolArg(\"-f\", true) == false);\n+}\n BOOST_AUTO_TEST_CASE(util_GetArg)\n {\n     TestArgsManager testArgs;"
      }
    ]
  },
  {
    "sha": "f7683cba7b070b722a2e0641f4d1516112392ed6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzY4M2NiYTdiMDcwYjcyMmEyZTA2NDFmNGQxNTE2MTEyMzkyZWQ2",
    "commit": {
      "author": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2018-03-22T02:24:17Z"
      },
      "committer": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2018-03-28T05:12:02Z"
      },
      "message": "Track negated arguments in the argument paser.\n\nThis commit adds tracking for negated arguments. This change will be used in a\nfuture commit that allows disabling the debug.log file using -nodebuglogfile.",
      "tree": {
        "sha": "6352a758ef05dc2dc28de2f8f23fa94c656baeee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6352a758ef05dc2dc28de2f8f23fa94c656baeee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f7683cba7b070b722a2e0641f4d1516112392ed6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEr5FzGLjELREnIWJdFX78rLxkhCIFAlq7JCIACgkQFX78rLxk\nhCKxHg//eqyh1i9o2H84wC5vvqZ8gMZcBaq9SlrsLYaVnDBRDAthraTvXd9/IIxx\nGfPhu29y0r/nYXkbCzEQV/RBVgP8cEDloCKh966cDibPEF9mdFJCpeGmRIJaaVoz\nTi4BDJS+M5exAyMYGQn+o9o/6H5l+Aaw+n46Y/qz9eZs9TGw2vtQ5tTCjOaOa+2D\nmzKMEnWhZ1FizFElX2CbD/wbJ7cbow4szqzfSrrSM8TfGYf0Pic21SQSpdTD0kMU\nqW+PLZWyXQq4iRvxltqp8PD7hG/gGXQCyIR4NPa9ZUB1ijjvWlyQfz41mF6V559E\n7ChfkfEEgbm/gOp6smm7ruK07RKEgUqlL1e4HrdBmm/16leQvELs/mI1LwY/4L5a\nTDWwa7LKVa/tV2DGIl6xzdWkd/tZrlzZGsXZ/ybu13PP8oulgjDymLKEWchhoSEQ\ngwupCkZ4+FFw0u7jjaOLGme3C6Y2jHL+Jfs+8chHGLKbfhYpTl4lxeph0NyJEEmW\nI5XmtP+d2/BPtkDRpYJzxTh+eg4+7YyQdgv1zzJr47AEY4O+cZx+pC9nk+rhUTda\nUhjdj7TAo3luXvzx6r7zqPdYqLHTtbUg0xonFPV+Skxr7K4mzyBFLuCBh4q2t/nw\nufwkg34GSQpaNVUUTfdJhmBAA+YHXP0IpzoEFqVPBXQaTmiUjNM=\n=ue3i\n-----END PGP SIGNATURE-----",
        "payload": "tree 6352a758ef05dc2dc28de2f8f23fa94c656baeee\nparent 4f872b24501f40bd410227b5413bda2f2569af24\nauthor Evan Klitzke <evan@eklitzke.org> 1521685457 -0700\ncommitter Evan Klitzke <evan@eklitzke.org> 1522213922 -0700\n\nTrack negated arguments in the argument paser.\n\nThis commit adds tracking for negated arguments. This change will be used in a\nfuture commit that allows disabling the debug.log file using -nodebuglogfile.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7683cba7b070b722a2e0641f4d1516112392ed6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f7683cba7b070b722a2e0641f4d1516112392ed6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7683cba7b070b722a2e0641f4d1516112392ed6/comments",
    "author": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4f872b24501f40bd410227b5413bda2f2569af24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f872b24501f40bd410227b5413bda2f2569af24",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4f872b24501f40bd410227b5413bda2f2569af24"
      }
    ],
    "stats": {
      "total": 152,
      "additions": 111,
      "deletions": 41
    },
    "files": [
      {
        "sha": "053ec92ca526b78a59658406709f5380fe0a5090",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 10,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7683cba7b070b722a2e0641f4d1516112392ed6/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7683cba7b070b722a2e0641f4d1516112392ed6/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=f7683cba7b070b722a2e0641f4d1516112392ed6",
        "patch": "@@ -185,17 +185,11 @@ BOOST_AUTO_TEST_CASE(util_FormatISO8601Time)\n     BOOST_CHECK_EQUAL(FormatISO8601Time(1317425777), \"23:36:17Z\");\n }\n \n-class TestArgsManager : public ArgsManager\n+struct TestArgsManager : public ArgsManager\n {\n-public:\n-    std::map<std::string, std::string>& GetMapArgs()\n-    {\n-        return mapArgs;\n-    };\n-    const std::map<std::string, std::vector<std::string> >& GetMapMultiArgs()\n-    {\n-        return mapMultiArgs;\n-    };\n+    std::map<std::string, std::string>& GetMapArgs() { return mapArgs; }\n+    const std::map<std::string, std::vector<std::string> >& GetMapMultiArgs() { return mapMultiArgs; }\n+    const std::unordered_set<std::string>& GetNegatedArgs() { return m_negated_args; }\n };\n \n BOOST_AUTO_TEST_CASE(util_ParseParameters)\n@@ -241,6 +235,11 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArg)\n     // The -no prefix should get stripped on the way in.\n     BOOST_CHECK(!testArgs.IsArgSet(\"-nob\"));\n \n+    // The -b option is flagged as negated, and nothing else is\n+    BOOST_CHECK(testArgs.IsArgNegated(\"-b\"));\n+    BOOST_CHECK(testArgs.GetNegatedArgs().size() == 1);\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-a\"));\n+\n     // Check expected values.\n     BOOST_CHECK(testArgs.GetBoolArg(\"-a\", false) == true);\n     BOOST_CHECK(testArgs.GetBoolArg(\"-b\", true) == false);\n@@ -249,6 +248,23 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArg)\n     BOOST_CHECK(testArgs.GetBoolArg(\"-e\", true) == false);\n     BOOST_CHECK(testArgs.GetBoolArg(\"-f\", true) == false);\n }\n+\n+BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n+{\n+    // Test some awful edge cases that hopefully no user will ever exercise.\n+    TestArgsManager testArgs;\n+    const char *argv_test[] = {\"ignored\", \"-nofoo\", \"-foo\", \"-nobar=0\"};\n+    testArgs.ParseParameters(4, (char**)argv_test);\n+\n+    // This was passed twice, second one overrides the negative setting.\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n+    BOOST_CHECK(testArgs.GetBoolArg(\"-foo\", false) == true);\n+\n+    // A double negative is a positive.\n+    BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n+    BOOST_CHECK(testArgs.GetBoolArg(\"-bar\", false) == true);\n+}\n+\n BOOST_AUTO_TEST_CASE(util_GetArg)\n {\n     TestArgsManager testArgs;"
      },
      {
        "sha": "490897899bdb34c3735f307b0fa836a4583006ab",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 68,
        "deletions": 31,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7683cba7b070b722a2e0641f4d1516112392ed6/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7683cba7b070b722a2e0641f4d1516112392ed6/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=f7683cba7b070b722a2e0641f4d1516112392ed6",
        "patch": "@@ -70,8 +70,6 @@\n #include <malloc.h>\n #endif\n \n-#include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n-#include <boost/algorithm/string/predicate.hpp> // for startswith() and endswith()\n #include <boost/interprocess/sync/file_lock.hpp>\n #include <boost/program_options/detail/config_file.hpp>\n #include <boost/thread.hpp>\n@@ -432,21 +430,54 @@ bool DirIsWritable(const fs::path& directory)\n     return true;\n }\n \n-/** Interpret string as boolean, for argument parsing */\n+/**\n+ * Interpret a string argument as a boolean.\n+ *\n+ * The definition of atoi() requires that non-numeric string values like \"foo\",\n+ * return 0. This means that if a user unintentionally supplies a non-integer\n+ * argument here, the return value is always false. This means that -foo=false\n+ * does what the user probably expects, but -foo=true is well defined but does\n+ * not do what they probably expected.\n+ *\n+ * The return value of atoi() is undefined when given input not representable as\n+ * an int. On most systems this means string value between \"-2147483648\" and\n+ * \"2147483647\" are well defined (this method will return true). Setting\n+ * -txindex=2147483648 on most systems, however, is probably undefined.\n+ *\n+ * For a more extensive discussion of this topic (and a wide range of opinions\n+ * on the Right Way to change this code), see PR12713.\n+ */\n static bool InterpretBool(const std::string& strValue)\n {\n     if (strValue.empty())\n         return true;\n     return (atoi(strValue) != 0);\n }\n \n-/** Turn -noX into -X=0 */\n-static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n+/**\n+ * Interpret -nofoo as if the user supplied -foo=0.\n+ *\n+ * This method also tracks when the -no form was supplied, and treats \"-foo\" as\n+ * a negated option when this happens. This can be later checked using the\n+ * IsArgNegated() method. One use case for this is to have a way to disable\n+ * options that are not normally boolean (e.g. using -nodebuglogfile to request\n+ * that debug log output is not sent to any file at all).\n+ */\n+void ArgsManager::InterpretNegatedOption(std::string& key, std::string& val)\n {\n-    if (strKey.length()>3 && strKey[0]=='-' && strKey[1]=='n' && strKey[2]=='o')\n-    {\n-        strKey = \"-\" + strKey.substr(3);\n-        strValue = InterpretBool(strValue) ? \"0\" : \"1\";\n+    if (key.substr(0, 3) == \"-no\") {\n+        bool bool_val = InterpretBool(val);\n+        if (!bool_val ) {\n+            // Double negatives like -nofoo=0 are supported (but discouraged)\n+            LogPrintf(\"Warning: parsed potentially confusing double-negative %s=%s\\n\", key, val);\n+        }\n+        key.erase(1, 2);\n+        m_negated_args.insert(key);\n+        val = bool_val ? \"0\" : \"1\";\n+    } else {\n+        // In an invocation like \"bitcoind -nofoo -foo\" we want to unmark -foo\n+        // as negated when we see the second option.\n+        m_negated_args.erase(key);\n     }\n }\n \n@@ -455,34 +486,34 @@ void ArgsManager::ParseParameters(int argc, const char* const argv[])\n     LOCK(cs_args);\n     mapArgs.clear();\n     mapMultiArgs.clear();\n-\n-    for (int i = 1; i < argc; i++)\n-    {\n-        std::string str(argv[i]);\n-        std::string strValue;\n-        size_t is_index = str.find('=');\n-        if (is_index != std::string::npos)\n-        {\n-            strValue = str.substr(is_index+1);\n-            str = str.substr(0, is_index);\n+    m_negated_args.clear();\n+\n+    for (int i = 1; i < argc; i++) {\n+        std::string key(argv[i]);\n+        std::string val;\n+        size_t is_index = key.find('=');\n+        if (is_index != std::string::npos) {\n+            val = key.substr(is_index + 1);\n+            key.erase(is_index);\n         }\n #ifdef WIN32\n-        boost::to_lower(str);\n-        if (boost::algorithm::starts_with(str, \"/\"))\n-            str = \"-\" + str.substr(1);\n+        std::transform(key.begin(), key.end(), key.begin(), ::tolower);\n+        if (key[0] == '/')\n+            key[0] = '-';\n #endif\n \n-        if (str[0] != '-')\n+        if (key[0] != '-')\n             break;\n \n-        // Interpret --foo as -foo.\n-        // If both --foo and -foo are set, the last takes effect.\n-        if (str.length() > 1 && str[1] == '-')\n-            str = str.substr(1);\n-        InterpretNegativeSetting(str, strValue);\n+        // Transform --foo to -foo\n+        if (key.length() > 1 && key[1] == '-')\n+            key.erase(0, 1);\n+\n+        // Transform -nofoo to -foo=0\n+        InterpretNegatedOption(key, val);\n \n-        mapArgs[str] = strValue;\n-        mapMultiArgs[str].push_back(strValue);\n+        mapArgs[key] = val;\n+        mapMultiArgs[key].push_back(val);\n     }\n }\n \n@@ -500,6 +531,12 @@ bool ArgsManager::IsArgSet(const std::string& strArg) const\n     return mapArgs.count(strArg);\n }\n \n+bool ArgsManager::IsArgNegated(const std::string& strArg) const\n+{\n+    LOCK(cs_args);\n+    return m_negated_args.find(strArg) != m_negated_args.end();\n+}\n+\n std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const\n {\n     LOCK(cs_args);\n@@ -711,7 +748,7 @@ void ArgsManager::ReadConfigFile(const std::string& confPath)\n             // Don't overwrite existing settings so command line settings override bitcoin.conf\n             std::string strKey = std::string(\"-\") + it->string_key;\n             std::string strValue = it->value[0];\n-            InterpretNegativeSetting(strKey, strValue);\n+            InterpretNegatedOption(strKey, strValue);\n             if (mapArgs.count(strKey) == 0)\n                 mapArgs[strKey] = strValue;\n             mapMultiArgs[strKey].push_back(strValue);"
      },
      {
        "sha": "4c473c935491ffe476e36d38c8a4d19a091b7ddd",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7683cba7b070b722a2e0641f4d1516112392ed6/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7683cba7b070b722a2e0641f4d1516112392ed6/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=f7683cba7b070b722a2e0641f4d1516112392ed6",
        "patch": "@@ -25,6 +25,7 @@\n #include <map>\n #include <stdint.h>\n #include <string>\n+#include <unordered_set>\n #include <vector>\n \n #include <boost/signals2/signal.hpp>\n@@ -224,6 +225,8 @@ class ArgsManager\n     mutable CCriticalSection cs_args;\n     std::map<std::string, std::string> mapArgs;\n     std::map<std::string, std::vector<std::string>> mapMultiArgs;\n+    std::unordered_set<std::string> m_negated_args;\n+\n public:\n     void ParseParameters(int argc, const char*const argv[]);\n     void ReadConfigFile(const std::string& confPath);\n@@ -244,6 +247,15 @@ class ArgsManager\n      */\n     bool IsArgSet(const std::string& strArg) const;\n \n+    /**\n+     * Return true if the argument was originally passed as a negated option,\n+     * i.e. -nofoo.\n+     *\n+     * @param strArg Argument to get (e.g. \"-foo\")\n+     * @return true if the argument was passed negated\n+     */\n+    bool IsArgNegated(const std::string& strArg) const;\n+\n     /**\n      * Return string argument or default value\n      *\n@@ -292,6 +304,11 @@ class ArgsManager\n     // Forces an arg setting. Called by SoftSetArg() if the arg hasn't already\n     // been set. Also called directly in testing.\n     void ForceSetArg(const std::string& strArg, const std::string& strValue);\n+\n+private:\n+\n+    // Munge -nofoo into -foo=0 and track the value as negated.\n+    void InterpretNegatedOption(std::string &key, std::string &val);\n };\n \n extern ArgsManager gArgs;"
      }
    ]
  }
]