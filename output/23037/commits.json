[
  {
    "sha": "ebe49b5b7cda0f9e8dc4bb4795da0ca44a97aa1d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYmU0OWI1YjdjZGEwZjllOGRjNGJiNDc5NWRhMGNhNDRhOTdhYTFk",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-09-19T18:01:45Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-09-19T19:23:24Z"
      },
      "message": "test: fix confusing off-by-one nValue in feature_coinstatsindex.py\n\nDue to evil floating-point arithmetic, the creation of one of the\ntransaction outputs in feature_coinstatsindex.py leads to it's nValue\nbeing off by one satoshi: the Python expression `int(21.99 * COIN)`\ndoesn't yield 2199000000 as expected, but 2198999999.\n\nThis makes the test more confusing than necessary (w.r.t. the expected\n`gettxoutsetinfo` values), and could also cause problems if the value\nis ever changed. Fix by using a `Decimal` type for specifying the\nvalue in BTC, rather than using a bare floating-point.",
      "tree": {
        "sha": "673a6aa0d937072664ba88c7a462343bd11c60cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/673a6aa0d937072664ba88c7a462343bd11c60cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ebe49b5b7cda0f9e8dc4bb4795da0ca44a97aa1d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebe49b5b7cda0f9e8dc4bb4795da0ca44a97aa1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ebe49b5b7cda0f9e8dc4bb4795da0ca44a97aa1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebe49b5b7cda0f9e8dc4bb4795da0ca44a97aa1d/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "de2af19dc8e8c848afbc4b43b9b4092fe263364f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de2af19dc8e8c848afbc4b43b9b4092fe263364f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de2af19dc8e8c848afbc4b43b9b4092fe263364f"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "c592d7bd69e7cb890bea178473229799031a3a5c",
        "filename": "test/functional/feature_coinstatsindex.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebe49b5b7cda0f9e8dc4bb4795da0ca44a97aa1d/test/functional/feature_coinstatsindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebe49b5b7cda0f9e8dc4bb4795da0ca44a97aa1d/test/functional/feature_coinstatsindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_coinstatsindex.py?ref=ebe49b5b7cda0f9e8dc4bb4795da0ca44a97aa1d",
        "patch": "@@ -164,7 +164,7 @@ def _test_coin_stats_index(self):\n         # Generate and send another tx with an OP_RETURN output (which is unspendable)\n         tx2 = CTransaction()\n         tx2.vin.append(CTxIn(COutPoint(int(tx1_txid, 16), n), b''))\n-        tx2.vout.append(CTxOut(int(20.99 * COIN), CScript([OP_RETURN] + [OP_FALSE]*30)))\n+        tx2.vout.append(CTxOut(int(Decimal('20.99') * COIN), CScript([OP_RETURN] + [OP_FALSE]*30)))\n         tx2_hex = self.nodes[0].signrawtransactionwithwallet(tx2.serialize().hex())['hex']\n         self.nodes[0].sendrawtransaction(tx2_hex)\n \n@@ -175,16 +175,16 @@ def _test_coin_stats_index(self):\n         for hash_option in index_hash_options:\n             # Check all amounts were registered correctly\n             res6 = index_node.gettxoutsetinfo(hash_option, 108)\n-            assert_equal(res6['total_unspendable_amount'], Decimal('70.98999999'))\n+            assert_equal(res6['total_unspendable_amount'], Decimal('70.99000000'))\n             assert_equal(res6['block_info'], {\n-                'unspendable': Decimal('20.98999999'),\n+                'unspendable': Decimal('20.99000000'),\n                 'prevout_spent': 111,\n                 'new_outputs_ex_coinbase': Decimal('89.99993620'),\n-                'coinbase': Decimal('50.01006381'),\n+                'coinbase': Decimal('50.01006380'),\n                 'unspendables': {\n                     'genesis_block': 0,\n                     'bip30': 0,\n-                    'scripts': Decimal('20.98999999'),\n+                    'scripts': Decimal('20.99000000'),\n                     'unclaimed_rewards': 0\n                 }\n             })\n@@ -206,7 +206,7 @@ def _test_coin_stats_index(self):\n \n         for hash_option in index_hash_options:\n             res7 = index_node.gettxoutsetinfo(hash_option, 109)\n-            assert_equal(res7['total_unspendable_amount'], Decimal('80.98999999'))\n+            assert_equal(res7['total_unspendable_amount'], Decimal('80.99000000'))\n             assert_equal(res7['block_info'], {\n                 'unspendable': 10,\n                 'prevout_spent': 0,"
      }
    ]
  }
]