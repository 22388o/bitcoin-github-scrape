jonasschnelli,2016-07-12T12:07:42Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/8330#issuecomment-232028225,232028225,
sipa,2016-07-12T14:43:49Z,"No, I'm not. I haven't actually tried. But I assume the int before the bitfield is 4-aligned, which would make the end of the bitfield byte be at a multiple of 4 plus 1?\n",https://github.com/bitcoin/bitcoin/pull/8330#issuecomment-232069662,232069662,
gmaxwell,2016-12-05T03:26:19Z,"Needs rebase.  Concept ACK, on the placeholder bitfield, perhaps better to make that a comment? ",https://github.com/bitcoin/bitcoin/pull/8330#issuecomment-264760127,264760127,
JeremyRubin,2017-01-10T22:54:56Z,rebased and addressed feedback,https://github.com/bitcoin/bitcoin/pull/8330#issuecomment-271724459,271724459,
JeremyRubin,2017-03-27T16:11:05Z,Rebased! (removing priority conflicted with this),https://github.com/bitcoin/bitcoin/pull/8330#issuecomment-289502441,289502441,
sipa,2017-07-12T19:25:47Z,"This reduces CTransaction from 96 bytes to 88 bytes for me (great), but increases CTxMemPoolEntry from 160 bytes to 168 bytes (not so great). NACK as long as that is the case.",https://github.com/bitcoin/bitcoin/pull/8330#issuecomment-314871611,314871611,
JeremyRubin,2017-07-13T00:24:15Z,"@sipa I rewrote this PR to repack the CTransaction versions via a minimal patch.\n\nI'm not sure what was going on with the CTxMemPoolEntry version, I just think it became stale. At the time I wrote the patch initially they were 192 bytes, so 160 bytes/entry is a good improvement anyways (perhaps from removing priority).\n",https://github.com/bitcoin/bitcoin/pull/8330#issuecomment-314934517,314934517,
sipa,2017-07-13T01:07:22Z,"utACK 37495e0d8d4bd98ae04364eae2f4ecb7084a9234. Verified with `printf(""%i\n"", sizeof(CTransaction))` before and after that this indeed reduces the size of the type.",https://github.com/bitcoin/bitcoin/pull/8330#issuecomment-314940587,314940587,
TheBlueMatt,2017-07-14T15:30:23Z,utACK 37495e0d8d4bd98ae04364eae2f4ecb7084a9234,https://github.com/bitcoin/bitcoin/pull/8330#issuecomment-315389796,315389796,
JeremyRubin,2017-07-31T00:46:18Z,"PR text updates done. Original text preserved below.\n\n\n\n\n\n> These commits revise the layout of a few key classes to eliminate padding, eliminating useless memory overhead.\n> \n> CTxMemPoolEntry is decreased to 184 bytes from 192. CTransaction is decreased to 112 bytes from 120.\n> \n> Furthermore, it is clarified in CTxMempoolEntry where the extra space is (2 bytes) for future ove",https://github.com/bitcoin/bitcoin/pull/8330#issuecomment-318942041,318942041,
JeremyRubin,2017-09-06T17:51:18Z,@laanwj merge?,https://github.com/bitcoin/bitcoin/pull/8330#issuecomment-327562462,327562462,
jonasschnelli,2016-07-12T12:01:42Z,nit: we mostly have newlines between classes.\n,https://github.com/bitcoin/bitcoin/pull/8330#discussion_r70424542,70424542,src/primitives/transaction.h
jonasschnelli,2016-07-12T12:06:55Z,What's the purpose of `UNUSED_BITS`?\n\nMaybe a uint32_t bitmap would be the better choice here?\n,https://github.com/bitcoin/bitcoin/pull/8330#discussion_r70425130,70425130,src/txmempool.h
JeremyRubin,2016-07-12T13:45:21Z,"There's no purpose, just to demarcate that these bits are available for future programmers. A uint32_t would be 4 bytes whereas this struct should be 1 byte.\n",https://github.com/bitcoin/bitcoin/pull/8330#discussion_r70440326,70440326,src/txmempool.h
jonasschnelli,2016-07-12T14:01:31Z,Sorry.. overlooked that you are using a c++ bitfield. But I guess the struct will still consume 4 bytes.\n,https://github.com/bitcoin/bitcoin/pull/8330#discussion_r70443768,70443768,src/txmempool.h
sipa,2016-07-12T14:04:39Z,"Bitfields are standard C.\n\nThe size of the struct will be 1 byte.\n\nHowever, the alignment of the entire CTxMempool object will still be 4, so\nthere will be 3 padding bytes at the end of CTxMempool, I think?\n",https://github.com/bitcoin/bitcoin/pull/8330#discussion_r70444416,70444416,src/txmempool.h
JeremyRubin,2016-07-12T14:40:19Z,"@sipa are you sure of the alignment? On my system it is 8 bytes, which leaves no padding for the CTxMemPoolEntry. Perhaps you're on OSX where size_t is 4 bytes not 8 (I didn't look at OSX).\n",https://github.com/bitcoin/bitcoin/pull/8330#discussion_r70451635,70451635,src/txmempool.h
sipa,2016-08-25T12:40:59Z,"@jeremyrubin size_t is the size of a pointer, which is 32 bits on 32 bits architectures and 64 bits on 64 bits architectures. You're right that the overall alignment is 8 bytes (on my architecture at least).\n\nIt seems the flags field becomes 4 bytes anyway, so there is no padding afterwards.\n",https://github.com/bitcoin/bitcoin/pull/8330#discussion_r76234526,76234526,src/txmempool.h
ryanofsky,2017-03-27T22:00:10Z,"In commit ""Re-pack the CTxMempoolEntry to be closer to optimally packed"":\n\nThis isn't used, guessing bad rebase.",https://github.com/bitcoin/bitcoin/pull/8330#discussion_r108291077,108291077,src/txmempool.h
ryanofsky,2017-03-27T22:01:53Z,"In commit ""Re-pack the CTxMempoolEntry to be closer to optimally packed"":\n\nAlso unused.",https://github.com/bitcoin/bitcoin/pull/8330#discussion_r108291426,108291426,src/txmempool.h
ryanofsky,2017-03-27T22:09:28Z,"In commit ""Reorder C{,Mutable}Transaction for better packing"":\n\nSeems like you could remove ComputeHash now, it doesn't appear to be called anywhere else.",https://github.com/bitcoin/bitcoin/pull/8330#discussion_r108292729,108292729,src/primitives/transaction.cpp
ryanofsky,2017-03-27T22:13:10Z,Kind of a lonely bitfield now with just one bool. But maybe it will have some more flags later.,https://github.com/bitcoin/bitcoin/pull/8330#discussion_r108293353,108293353,src/txmempool.h
JeremyRubin,2017-03-28T05:35:32Z,"yeah, hopefully inspires whoever adds a flag in the future...",https://github.com/bitcoin/bitcoin/pull/8330#discussion_r108337261,108337261,src/txmempool.h
JeremyRubin,2017-03-28T05:35:50Z,"yeah... hmm :/\n\nWill fix.",https://github.com/bitcoin/bitcoin/pull/8330#discussion_r108337294,108337294,src/txmempool.h
ryanofsky,2017-03-28T12:38:07Z,"In commit ""Re-pack the CTxMempoolEntry to be closer to optimally packed""\n\nUnusual indentation here, maybe reformat.",https://github.com/bitcoin/bitcoin/pull/8330#discussion_r108408136,108408136,src/txmempool.cpp
TheBlueMatt,2017-07-11T18:04:47Z,"Ehh, why not just have the single bool spendsCoinbase : 1 here instead of making a struct for it?",https://github.com/bitcoin/bitcoin/pull/8330#discussion_r126765194,126765194,src/txmempool.h
JeremyRubin,2017-07-12T18:17:30Z,"It's somewhat vestigial; iirc when I originally wrote this patch last year there was another bool that got removed in a later PR.\n\nThe only real remaining reason is to make the code ""self documenting"" so that when/if someone later adds another flag to mempool (or even adds the flag back), they are encouraged to dtrt rather than adding more memory bloat.",https://github.com/bitcoin/bitcoin/pull/8330#discussion_r127031922,127031922,src/txmempool.h
TheBlueMatt,2017-07-12T18:52:42Z,"Is there harm in having\nbool spendsCoinbase : 1;\nbool newFlags : 1;\ninstead of encapsulating the booleans in a flags struct?",https://github.com/bitcoin/bitcoin/pull/8330#discussion_r127040914,127040914,src/txmempool.h
JeremyRubin,2017-07-12T23:40:20Z,"Is that valid c++? If so, o_0",https://github.com/bitcoin/bitcoin/pull/8330#discussion_r127098952,127098952,src/txmempool.h
sipa,2017-07-12T23:42:28Z,In what way is that different from what you're doing now?,https://github.com/bitcoin/bitcoin/pull/8330#discussion_r127099213,127099213,src/txmempool.h
