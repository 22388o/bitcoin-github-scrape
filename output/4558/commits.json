[
  {
    "sha": "67cc8f25c267ea7cde765f566fa10bc248c15ea2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2N2NjOGYyNWMyNjdlYTdjZGU3NjVmNTY2ZmExMGJjMjQ4YzE1ZWEy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-17T12:07:53Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-21T05:46:33Z"
      },
      "message": "Revert \"Remove signal DoubleSpendDetected, use function\"\n\nThis reverts commit 0da6b3fd187da3aa810aaa584d8bd197ad4fa2b9.",
      "tree": {
        "sha": "909f5b241512b21409a9f70e13b4a6edd31c78d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/909f5b241512b21409a9f70e13b4a6edd31c78d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67cc8f25c267ea7cde765f566fa10bc248c15ea2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67cc8f25c267ea7cde765f566fa10bc248c15ea2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67cc8f25c267ea7cde765f566fa10bc248c15ea2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67cc8f25c267ea7cde765f566fa10bc248c15ea2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0de61e7585e14cb552e985934fc5ddfeb6e8bd67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0de61e7585e14cb552e985934fc5ddfeb6e8bd67",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0de61e7585e14cb552e985934fc5ddfeb6e8bd67"
      }
    ],
    "stats": {
      "total": 109,
      "additions": 59,
      "deletions": 50
    },
    "files": [
      {
        "sha": "323192ab79627192915182cc0ae74a59568d0f65",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67cc8f25c267ea7cde765f566fa10bc248c15ea2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67cc8f25c267ea7cde765f566fa10bc248c15ea2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=67cc8f25c267ea7cde765f566fa10bc248c15ea2",
        "patch": "@@ -1229,7 +1229,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     LogPrintf(\"mapAddressBook.size() = %u\\n\",  pwalletMain ? pwalletMain->mapAddressBook.size() : 0);\n #endif\n \n-    InitRespendFilter();\n+    RegisterInternalSignals();\n     StartNode(threadGroup);\n     if (fServer)\n         StartRPCThreads();"
      },
      {
        "sha": "7ff1bdb2e7896fcabce8ab72d9978a0f02b5e46e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 47,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67cc8f25c267ea7cde765f566fa10bc248c15ea2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67cc8f25c267ea7cde765f566fa10bc248c15ea2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=67cc8f25c267ea7cde765f566fa10bc248c15ea2",
        "patch": "@@ -126,14 +126,9 @@ namespace {\n \n } // anon namespace\n \n-// Bloom filter to limit respend relays to one\n+// Forward reference functions defined here:\n static const unsigned int MAX_DOUBLESPEND_BLOOM = 1000;\n-static CBloomFilter doubleSpendFilter;\n-void InitRespendFilter() {\n-    seed_insecure_rand();\n-    doubleSpendFilter = CBloomFilter(MAX_DOUBLESPEND_BLOOM, 0.01, insecure_rand(), BLOOM_UPDATE_NONE);\n-}\n-\n+static bool RelayableRespend(const COutPoint& outPoint, const CTransaction& doubleSpend, bool fInBlock, CBloomFilter& filter);\n \n //////////////////////////////////////////////////////////////////////////////\n //\n@@ -157,10 +152,24 @@ struct CMainSignals {\n     boost::signals2::signal<void (const uint256 &)> Inventory;\n     // Tells listeners to broadcast their data.\n     boost::signals2::signal<void ()> Broadcast;\n+    // Notifies listeners of detection of a double-spent transaction. Arguments are outpoint that is\n+    // double-spent, first transaction seen, double-spend transaction, and whether the second double-spend\n+    // transaction was first seen in a block.\n+    // Note: only notifies if the previous transaction is in the memory pool; if previous transction was in a block,\n+    // then the double-spend simply fails when we try to lookup the inputs in the current UTXO set.\n+    boost::signals2::signal<bool (const COutPoint&, const CTransaction&, bool)> DetectedDoubleSpend;\n } g_signals;\n \n } // anon namespace\n \n+void RegisterInternalSignals() {\n+    static CBloomFilter doubleSpendFilter;\n+    seed_insecure_rand();\n+    doubleSpendFilter = CBloomFilter(MAX_DOUBLESPEND_BLOOM, 0.01, insecure_rand(), BLOOM_UPDATE_NONE);\n+\n+    g_signals.DetectedDoubleSpend.connect(boost::bind(RelayableRespend, _1, _2, _3, doubleSpendFilter));\n+}\n+\n \n void RegisterWallet(CWalletInterface* pwalletIn) {\n     g_signals.SyncTransaction.connect(boost::bind(&CWalletInterface::SyncTransaction, pwalletIn, _1, _2));\n@@ -897,45 +906,6 @@ bool RateLimitExceeded(double& dCount, int64_t& nLastTime, int64_t nLimit, unsig\n     return false;\n }\n \n-static bool RelayableRespend(const COutPoint& outPoint, const CTransaction& doubleSpend, bool fInBlock, CBloomFilter& filter)\n-{\n-    // Relaying double-spend attempts to our peers lets them detect when\n-    // somebody might be trying to cheat them. However, blindly relaying\n-    // every double-spend across the entire network gives attackers\n-    // a denial-of-service attack: just generate a stream of double-spends\n-    // re-spending the same (limited) set of outpoints owned by the attacker.\n-    // So, we use a bloom filter and only relay (at most) the first double\n-    // spend for each outpoint. False-positives (\"we have already relayed\")\n-    // are OK, because if the peer doesn't hear about the double-spend\n-    // from us they are very likely to hear about it from another peer, since\n-    // each peer uses a different, randomized bloom filter.\n-\n-    if (fInBlock || filter.contains(outPoint)) return false;\n-\n-    // Apply an independent rate limit to double-spend relays\n-    static double dRespendCount;\n-    static int64_t nLastRespendTime;\n-    static int64_t nRespendLimit = GetArg(\"-limitrespendrelay\", 100);\n-    unsigned int nSize = ::GetSerializeSize(doubleSpend, SER_NETWORK, PROTOCOL_VERSION);\n-\n-    if (RateLimitExceeded(dRespendCount, nLastRespendTime, nRespendLimit, nSize))\n-    {\n-        LogPrint(\"mempool\", \"Double-spend relay rejected by rate limiter\\n\");\n-        return false;\n-    }\n-\n-    LogPrint(\"mempool\", \"Rate limit dRespendCount: %g => %g\\n\", dRespendCount, dRespendCount+nSize);\n-\n-    // Clear the filter on average every MAX_DOUBLE_SPEND_BLOOM\n-    // insertions\n-    if (insecure_rand()%MAX_DOUBLESPEND_BLOOM == 0)\n-        filter.clear();\n-\n-    filter.insert(outPoint);\n-\n-    return true;\n-}\n-\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                         bool* pfMissingInputs, bool fRejectInsaneFee)\n {\n@@ -973,7 +943,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // Does tx conflict with a member of the pool, and is it not equivalent to that member?\n         if (pool.mapNextTx.count(outpoint) && !tx.IsEquivalentTo(*pool.mapNextTx[outpoint].ptx))\n         {\n-            relayableRespend = RelayableRespend(outpoint, tx, false, doubleSpendFilter);\n+            relayableRespend = g_signals.DetectedDoubleSpend(outpoint, tx, false);\n             if (!relayableRespend)\n                 return false;\n         }\n@@ -1085,6 +1055,45 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     return !relayableRespend;\n }\n \n+static bool RelayableRespend(const COutPoint& outPoint, const CTransaction& doubleSpend, bool fInBlock, CBloomFilter& filter)\n+{\n+    // Relaying double-spend attempts to our peers lets them detect when\n+    // somebody might be trying to cheat them. However, blindly relaying\n+    // every double-spend across the entire network gives attackers\n+    // a denial-of-service attack: just generate a stream of double-spends\n+    // re-spending the same (limited) set of outpoints owned by the attacker.\n+    // So, we use a bloom filter and only relay (at most) the first double\n+    // spend for each outpoint. False-positives (\"we have already relayed\")\n+    // are OK, because if the peer doesn't hear about the double-spend\n+    // from us they are very likely to hear about it from another peer, since\n+    // each peer uses a different, randomized bloom filter.\n+\n+    if (fInBlock || filter.contains(outPoint)) return false;\n+\n+    // Apply an independent rate limit to double-spend relays\n+    static double dRespendCount;\n+    static int64_t nLastRespendTime;\n+    static int64_t nRespendLimit = GetArg(\"-limitrespendrelay\", 100);\n+    unsigned int nSize = ::GetSerializeSize(doubleSpend, SER_NETWORK, PROTOCOL_VERSION);\n+\n+    if (RateLimitExceeded(dRespendCount, nLastRespendTime, nRespendLimit, nSize))\n+    {\n+        LogPrint(\"mempool\", \"Double-spend relay rejected by rate limiter\\n\");\n+        return false;\n+    }\n+\n+    LogPrint(\"mempool\", \"Rate limit dRespendCount: %g => %g\\n\", dRespendCount, dRespendCount+nSize);\n+\n+    // Clear the filter on average every MAX_DOUBLE_SPEND_BLOOM\n+    // insertions\n+    if (insecure_rand()%MAX_DOUBLESPEND_BLOOM == 0)\n+        filter.clear();\n+\n+    filter.insert(outPoint);\n+\n+    return true;\n+}\n+\n \n int CMerkleTx::GetDepthInMainChainINTERNAL(CBlockIndex* &pindexRet) const\n {"
      },
      {
        "sha": "33afa06fa829e4ae13e6074e57482cb2c9c2a0b6",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67cc8f25c267ea7cde765f566fa10bc248c15ea2/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67cc8f25c267ea7cde765f566fa10bc248c15ea2/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=67cc8f25c267ea7cde765f566fa10bc248c15ea2",
        "patch": "@@ -112,8 +112,8 @@ struct CNodeStateStats;\n \n struct CBlockTemplate;\n \n-/** Initialize respend bloom filter **/\n-void InitRespendFilter();\n+/** Set up internal signal handlers **/\n+void RegisterInternalSignals();\n \n /** Register a wallet to receive updates from core */\n void RegisterWallet(CWalletInterface* pwalletIn);"
      }
    ]
  },
  {
    "sha": "cd057bfd415815dd4fa219ef213640635d4b6d37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDA1N2JmZDQxNTgxNWRkNGZhMjE5ZWYyMTM2NDA2MzVkNGI2ZDM3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-17T12:08:01Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-21T05:46:33Z"
      },
      "message": "Revert \"Check signatures before respend relay\"\n\nThis reverts commit 88dd3598d22197a22565e524cecdc08107cf76ac.",
      "tree": {
        "sha": "0a6f5ee3764bc21386e5cc6e9854d7fafcb6d1b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a6f5ee3764bc21386e5cc6e9854d7fafcb6d1b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd057bfd415815dd4fa219ef213640635d4b6d37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd057bfd415815dd4fa219ef213640635d4b6d37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd057bfd415815dd4fa219ef213640635d4b6d37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd057bfd415815dd4fa219ef213640635d4b6d37/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67cc8f25c267ea7cde765f566fa10bc248c15ea2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67cc8f25c267ea7cde765f566fa10bc248c15ea2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67cc8f25c267ea7cde765f566fa10bc248c15ea2"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 15,
      "deletions": 22
    },
    "files": [
      {
        "sha": "f3819b14973a2ca1487b5d8008543c03e4a15683",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 22,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd057bfd415815dd4fa219ef213640635d4b6d37/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd057bfd415815dd4fa219ef213640635d4b6d37/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=cd057bfd415815dd4fa219ef213640635d4b6d37",
        "patch": "@@ -128,7 +128,7 @@ namespace {\n \n // Forward reference functions defined here:\n static const unsigned int MAX_DOUBLESPEND_BLOOM = 1000;\n-static bool RelayableRespend(const COutPoint& outPoint, const CTransaction& doubleSpend, bool fInBlock, CBloomFilter& filter);\n+static void RelayDoubleSpend(const COutPoint& outPoint, const CTransaction& doubleSpend, bool fInBlock, CBloomFilter& filter);\n \n //////////////////////////////////////////////////////////////////////////////\n //\n@@ -157,7 +157,7 @@ struct CMainSignals {\n     // transaction was first seen in a block.\n     // Note: only notifies if the previous transaction is in the memory pool; if previous transction was in a block,\n     // then the double-spend simply fails when we try to lookup the inputs in the current UTXO set.\n-    boost::signals2::signal<bool (const COutPoint&, const CTransaction&, bool)> DetectedDoubleSpend;\n+    boost::signals2::signal<void (const COutPoint&, const CTransaction&, bool)> DetectedDoubleSpend;\n } g_signals;\n \n } // anon namespace\n@@ -167,7 +167,7 @@ void RegisterInternalSignals() {\n     seed_insecure_rand();\n     doubleSpendFilter = CBloomFilter(MAX_DOUBLESPEND_BLOOM, 0.01, insecure_rand(), BLOOM_UPDATE_NONE);\n \n-    g_signals.DetectedDoubleSpend.connect(boost::bind(RelayableRespend, _1, _2, _3, doubleSpendFilter));\n+    g_signals.DetectedDoubleSpend.connect(boost::bind(RelayDoubleSpend, _1, _2, _3, doubleSpendFilter));\n }\n \n \n@@ -934,7 +934,6 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         return false;\n \n     // Check for conflicts with in-memory transactions\n-    bool relayableRespend = false;\n     {\n     LOCK(pool.cs); // protect pool.mapNextTx\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n@@ -943,9 +942,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // Does tx conflict with a member of the pool, and is it not equivalent to that member?\n         if (pool.mapNextTx.count(outpoint) && !tx.IsEquivalentTo(*pool.mapNextTx[outpoint].ptx))\n         {\n-            relayableRespend = g_signals.DetectedDoubleSpend(outpoint, tx, false);\n-            if (!relayableRespend)\n-                return false;\n+            g_signals.DetectedDoubleSpend(outpoint, tx, false);\n+            return false;\n         }\n     }\n     }\n@@ -1038,24 +1036,16 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         {\n             return error(\"AcceptToMemoryPool: : ConnectInputs failed %s\", hash.ToString());\n         }\n-\n-        if (relayableRespend)\n-        {\n-            RelayTransaction(tx);\n-        }\n-        else\n-        {\n-            // Store transaction in memory\n-            pool.addUnchecked(hash, entry);\n-        }\n+        // Store transaction in memory\n+        pool.addUnchecked(hash, entry);\n     }\n \n     g_signals.SyncTransaction(tx, NULL);\n \n-    return !relayableRespend;\n+    return true;\n }\n \n-static bool RelayableRespend(const COutPoint& outPoint, const CTransaction& doubleSpend, bool fInBlock, CBloomFilter& filter)\n+static void RelayDoubleSpend(const COutPoint& outPoint, const CTransaction& doubleSpend, bool fInBlock, CBloomFilter& filter)\n {\n     // Relaying double-spend attempts to our peers lets them detect when\n     // somebody might be trying to cheat them. However, blindly relaying\n@@ -1068,7 +1058,7 @@ static bool RelayableRespend(const COutPoint& outPoint, const CTransaction& doub\n     // from us they are very likely to hear about it from another peer, since\n     // each peer uses a different, randomized bloom filter.\n \n-    if (fInBlock || filter.contains(outPoint)) return false;\n+    if (fInBlock || filter.contains(outPoint)) return;\n \n     // Apply an independent rate limit to double-spend relays\n     static double dRespendCount;\n@@ -1079,7 +1069,7 @@ static bool RelayableRespend(const COutPoint& outPoint, const CTransaction& doub\n     if (RateLimitExceeded(dRespendCount, nLastRespendTime, nRespendLimit, nSize))\n     {\n         LogPrint(\"mempool\", \"Double-spend relay rejected by rate limiter\\n\");\n-        return false;\n+        return;\n     }\n \n     LogPrint(\"mempool\", \"Rate limit dRespendCount: %g => %g\\n\", dRespendCount, dRespendCount+nSize);\n@@ -1091,7 +1081,10 @@ static bool RelayableRespend(const COutPoint& outPoint, const CTransaction& doub\n \n     filter.insert(outPoint);\n \n-    return true;\n+    RelayTransaction(doubleSpend);\n+\n+    // Share conflict with wallet\n+    g_signals.SyncTransaction(doubleSpend, NULL);\n }\n \n "
      }
    ]
  },
  {
    "sha": "ad26dc9c314406034cef7684d4c9f9ec31d6347e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDI2ZGM5YzMxNDQwNjAzNGNlZjc2ODRkNGM5ZjllYzMxZDYzNDdl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-17T12:08:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-21T05:46:33Z"
      },
      "message": "Revert \"Formatting, spelling, comment fixes.\"\n\nThis reverts commit 7a19efe04069d9a1e251cdc94b25184f76d9d901.",
      "tree": {
        "sha": "4d0d630b572f44025b1674cb02f44953f44c05e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d0d630b572f44025b1674cb02f44953f44c05e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad26dc9c314406034cef7684d4c9f9ec31d6347e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad26dc9c314406034cef7684d4c9f9ec31d6347e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad26dc9c314406034cef7684d4c9f9ec31d6347e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad26dc9c314406034cef7684d4c9f9ec31d6347e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd057bfd415815dd4fa219ef213640635d4b6d37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd057bfd415815dd4fa219ef213640635d4b6d37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd057bfd415815dd4fa219ef213640635d4b6d37"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 18,
      "deletions": 23
    },
    "files": [
      {
        "sha": "31df2883cc2f7975d039b2c25c4aaecfc88a1f07",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad26dc9c314406034cef7684d4c9f9ec31d6347e/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad26dc9c314406034cef7684d4c9f9ec31d6347e/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=ad26dc9c314406034cef7684d4c9f9ec31d6347e",
        "patch": "@@ -83,5 +83,5 @@ Warning\n  - Using other relay rules, a double-spender can craft his crime to\n    resist broadcast\n  - Miners can choose which conflicting spend to confirm, and some\n-   miners may not confirm the first acceptable spend they see\n+   miners may not confirmg the first acceptable spend they see\n "
      },
      {
        "sha": "d69c2d902729da841f40af8c0dd04f8862e88d13",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad26dc9c314406034cef7684d4c9f9ec31d6347e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad26dc9c314406034cef7684d4c9f9ec31d6347e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ad26dc9c314406034cef7684d4c9f9ec31d6347e",
        "patch": "@@ -898,6 +898,7 @@ bool RateLimitExceeded(double& dCount, int64_t& nLastTime, int64_t nLimit, unsig\n \n     LOCK(csLimiter);\n \n+    // Use an exponentially decaying ~10-minute window:\n     dCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n     nLastTime = nNow;\n     if (dCount >= nLimit*10*1000)\n@@ -1018,7 +1019,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             static int64_t nLastFreeTime;\n             static int64_t nFreeLimit = GetArg(\"-limitfreerelay\", 15);\n \n-            if (RateLimitExceeded(dFreeCount, nLastFreeTime, nFreeLimit, nSize))\n+\t\tif (RateLimitExceeded(dFreeCount, nLastFreeTime, nFreeLimit, nSize))\n                 return state.DoS(0, error(\"AcceptToMemoryPool : free transaction rejected by rate limiter\"),\n                                  REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n \n@@ -1045,7 +1046,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     return true;\n }\n \n-static void RelayDoubleSpend(const COutPoint& outPoint, const CTransaction& doubleSpend, bool fInBlock, CBloomFilter& filter)\n+static void\n+RelayDoubleSpend(const COutPoint& outPoint, const CTransaction& doubleSpend, bool fInBlock, CBloomFilter& filter)\n {\n     // Relaying double-spend attempts to our peers lets them detect when\n     // somebody might be trying to cheat them. However, blindly relaying"
      },
      {
        "sha": "e6ff4ca080f04097b463ec1c86c3e611ab446ea5",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 3,
        "deletions": 10,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad26dc9c314406034cef7684d4c9f9ec31d6347e/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad26dc9c314406034cef7684d4c9f9ec31d6347e/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=ad26dc9c314406034cef7684d4c9f9ec31d6347e",
        "patch": "@@ -19,17 +19,10 @@ class TransactionStatus\n {\n public:\n     TransactionStatus():\n-        countsForBalance(false),\n-        sortKey(\"\"),\n-        matures_in(0),\n-        status(Offline),\n-        hasConflicting(false),\n-        depth(0),\n-        open_for(0),\n-        cur_num_blocks(-1),\n+        countsForBalance(false), sortKey(\"\"),\n+        matures_in(0), status(Offline), hasConflicting(false), depth(0), open_for(0), cur_num_blocks(-1),\n         cur_num_conflicts(-1)\n-    {\n-    }\n+    { }\n \n     enum Status {\n         Confirmed,          /**< Have 6 or more confirmations (normal tx) or fully mature (mined tx) **/"
      },
      {
        "sha": "6156a2ecd2339f1b00c6a236afc9bc3d74f6358d",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad26dc9c314406034cef7684d4c9f9ec31d6347e/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad26dc9c314406034cef7684d4c9f9ec31d6347e/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=ad26dc9c314406034cef7684d4c9f9ec31d6347e",
        "patch": "@@ -546,9 +546,9 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n     case Qt::TextAlignmentRole:\n         return column_alignments[index.column()];\n     case Qt::BackgroundColorRole:\n-        if (rec->status.hasConflicting)\n+\tif (rec->status.hasConflicting)\n             return COLOR_HASCONFLICTING_BG;\n-        break;\n+\tbreak;\n     case Qt::ForegroundRole:\n         if (rec->status.hasConflicting)\n             return COLOR_HASCONFLICTING;"
      },
      {
        "sha": "3cbf35436c58bd9222f4d6bc5a93426c28b56dea",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad26dc9c314406034cef7684d4c9f9ec31d6347e/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad26dc9c314406034cef7684d4c9f9ec31d6347e/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=ad26dc9c314406034cef7684d4c9f9ec31d6347e",
        "patch": "@@ -164,13 +164,13 @@ void WalletModel::checkBalanceChanged()\n \n void WalletModel::updateTransaction(const QString &hash, int status)\n {\n-    if (status == CT_GOT_CONFLICT)\n-    {\n-        emit message(tr(\"Conflict Received\"),\n-                     tr(\"WARNING: Transaction may never be confirmed. Its input was seen being spent by another transaction on the network. Wait for confirmation!\"),\n-                     CClientUIInterface::MSG_WARNING);\n-        return;\n-    }\n+\tif (status == CT_GOT_CONFLICT)\n+\t{\n+\t    emit message(tr(\"Conflict Received\"),\n+\t\t         tr(\"WARNING: Transaction may never be confirmed. Its input was seen being spent by another transaction on the network. Wait for confirmation!\"),\n+\t\t\t\tCClientUIInterface::MSG_WARNING);\n+\t\treturn;\n+\t}\n \n     if(transactionTableModel)\n         transactionTableModel->updateTransaction(hash, status);"
      },
      {
        "sha": "f0ab70afb971f5a67e58107758efe72395085211",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad26dc9c314406034cef7684d4c9f9ec31d6347e/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad26dc9c314406034cef7684d4c9f9ec31d6347e/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=ad26dc9c314406034cef7684d4c9f9ec31d6347e",
        "patch": "@@ -657,7 +657,7 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pbl\n \n         bool fIsConflicting = IsConflicting(tx);\n         if (fIsConflicting)\n-            nConflictsReceived++;\n+\t\tnConflictsReceived++;\n \n         if (fExisted || IsMine(tx) || IsFromMe(tx) || fIsConflicting)\n         {"
      }
    ]
  },
  {
    "sha": "680f7252f0ca3d68ef286ae074acf480e75896fe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODBmNzI1MmYwY2EzZDY4ZWYyODZhZTA3NGFjZjQ4MGU3NTg5NmZl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-17T12:08:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-21T05:46:33Z"
      },
      "message": "Revert \"Add release notes entry\"\n\nThis reverts commit 9fa53dd3bdc6f62b16a7c2b970449c8c35f4c41b.",
      "tree": {
        "sha": "ae482c31e1784b6f90cbca28d06d7c37f544fd95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae482c31e1784b6f90cbca28d06d7c37f544fd95"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/680f7252f0ca3d68ef286ae074acf480e75896fe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/680f7252f0ca3d68ef286ae074acf480e75896fe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/680f7252f0ca3d68ef286ae074acf480e75896fe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/680f7252f0ca3d68ef286ae074acf480e75896fe/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad26dc9c314406034cef7684d4c9f9ec31d6347e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad26dc9c314406034cef7684d4c9f9ec31d6347e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad26dc9c314406034cef7684d4c9f9ec31d6347e"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 0,
      "deletions": 46
    },
    "files": [
      {
        "sha": "967a39a0e7faadaa76566c5d02093cbcaa4d39de",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 0,
        "deletions": 46,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/680f7252f0ca3d68ef286ae074acf480e75896fe/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/680f7252f0ca3d68ef286ae074acf480e75896fe/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=680f7252f0ca3d68ef286ae074acf480e75896fe",
        "patch": "@@ -39,49 +39,3 @@ estimate.\n Statistics used to estimate fees and priorities are saved in the\n data directory in the 'fee_estimates.dat' file just before\n program shutdown, and are read in at startup.\n-\n-Double-Spend Relay and Alerts\n-=============================\n-VERY IMPORTANT: *It has never been safe, and remains unsafe, to rely*\n-*on unconfirmed transactions.*\n-\n-Relay\n------\n-When an attempt is seen on the network to spend the same unspent funds\n-more than once, it is no longer ignored.  Instead, it is broadcast, to\n-serve as an alert.  This broadcast is subject to protections against\n-denial-of-service attacks.\n-\n-Wallets and other bitcoin services should alert their users to\n-double-spends that affect them.  Merchants and other users may have\n-enough time to withhold goods or services when payment becomes\n-uncertain, until confirmation.\n-\n-Bitcoin Core Wallet Alerts\n---------------------------\n-The Bitcoin Core wallet now makes respend attempts visible in several\n-ways.\n-\n-If you are online, and a respend affecting one of your wallet\n-transactions is seen, a notification is immediately issued to the\n-command registered with `-respendnotify=<cmd>`.  Additionally, if\n-using the GUI:\n- - An alert box is immediately displayed.\n- - The affected wallet transaction is highlighted in red until it is\n-   confirmed (and it may never be confirmed).\n-\n-A `respendsobserved` array is added to `gettransaction`, `listtransactions`,\n-and `listsinceblock` RPC results.\n-\n-Warning\n--------\n-*If you rely on an unconfirmed transaction, these change do VERY*\n-*LITTLE to protect you from a malicious double-spend, because:*\n-\n- - You may learn about the respend too late to avoid doing whatever\n-   you were being paid for\n- - Using other relay rules, a double-spender can craft his crime to\n-   resist broadcast\n- - Miners can choose which conflicting spend to confirm, and some\n-   miners may not confirmg the first acceptable spend they see\n-"
      }
    ]
  },
  {
    "sha": "39d3f2cb40a539fff1daba3d76a6c59e932d0f0a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOWQzZjJjYjQwYTUzOWZmZjFkYWJhM2Q3NmE2YzU5ZTkzMmQwZjBh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-17T12:08:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-21T05:46:33Z"
      },
      "message": "Revert \"Add -respendnotify option and new RPC data\"\n\nThis reverts commit 9004798e62e987ddf50030b17fa1881b63dd5e45.",
      "tree": {
        "sha": "5cb73f064b26bc9a303cc3aef8a66993d0969be1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5cb73f064b26bc9a303cc3aef8a66993d0969be1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/39d3f2cb40a539fff1daba3d76a6c59e932d0f0a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39d3f2cb40a539fff1daba3d76a6c59e932d0f0a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/39d3f2cb40a539fff1daba3d76a6c59e932d0f0a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39d3f2cb40a539fff1daba3d76a6c59e932d0f0a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "680f7252f0ca3d68ef286ae074acf480e75896fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/680f7252f0ca3d68ef286ae074acf480e75896fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/680f7252f0ca3d68ef286ae074acf480e75896fe"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 0,
      "deletions": 33
    },
    "files": [
      {
        "sha": "cd478b1875cb85d43ac3141526c6936a917cc31b",
        "filename": "contrib/debian/manpages/bitcoin-qt.1",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39d3f2cb40a539fff1daba3d76a6c59e932d0f0a/contrib/debian/manpages/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39d3f2cb40a539fff1daba3d76a6c59e932d0f0a/contrib/debian/manpages/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/manpages/bitcoin-qt.1?ref=39d3f2cb40a539fff1daba3d76a6c59e932d0f0a",
        "patch": "@@ -139,9 +139,6 @@ Execute command when the best block changes (%s in cmd is replaced by block hash\n \\fB\\-walletnotify=\\fR<cmd>\n Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\n .TP\n-\\fB\\-respendnotify=\\fR<cmd>\n-Execute command when a network tx respends wallet tx input (%s=respend TxID, %t=wallet TxID)\n-.TP\n \\fB\\-alertnotify=\\fR<cmd>\n Execute command when a relevant alert is received (%s in cmd is replaced by message)\n .TP"
      },
      {
        "sha": "5b83fe900ecdbacc60abbda3c5133415e99fc014",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39d3f2cb40a539fff1daba3d76a6c59e932d0f0a/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39d3f2cb40a539fff1daba3d76a6c59e932d0f0a/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=39d3f2cb40a539fff1daba3d76a6c59e932d0f0a",
        "patch": "@@ -58,10 +58,6 @@ void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n     BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts())\n         conflicts.push_back(conflict.GetHex());\n     entry.push_back(Pair(\"walletconflicts\", conflicts));\n-    Array respends;\n-    BOOST_FOREACH(const uint256& respend, wtx.GetConflicts(false))\n-        respends.push_back(respend.GetHex());\n-    entry.push_back(Pair(\"respendsobserved\", respends));\n     entry.push_back(Pair(\"time\", wtx.GetTxTime()));\n     entry.push_back(Pair(\"timereceived\", (int64_t)wtx.nTimeReceived));\n     BOOST_FOREACH(const PAIRTYPE(string,string)& item, wtx.mapValue)\n@@ -1252,12 +1248,6 @@ Value listtransactions(const Array& params, bool fHelp)\n             \"    \\\"blockindex\\\": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive'\\n\"\n             \"                                          category of transactions.\\n\"\n             \"    \\\"txid\\\": \\\"transactionid\\\", (string) The transaction id. Available for 'send' and 'receive' category of transactions.\\n\"\n-            \"    \\\"walletconflicts\\\" : [\\n\"\n-            \"        \\\"conflictid\\\",  (string) Ids of transactions, including equivalent clones, that re-spend a txid input.\\n\"\n-            \"    ],\\n\"\n-            \"    \\\"respendsobserved\\\" : [\\n\"\n-            \"        \\\"respendid\\\",  (string) Ids of transactions, NOT equivalent clones, that re-spend a txid input. \\\"Double-spends.\\\"\\n\"\n-            \"    ],\\n\"\n             \"    \\\"time\\\": xxx,              (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).\\n\"\n             \"    \\\"timereceived\\\": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT). Available \\n\"\n             \"                                          for 'send' and 'receive' category of transactions.\\n\"\n@@ -1434,12 +1424,6 @@ Value listsinceblock(const Array& params, bool fHelp)\n             \"    \\\"blockindex\\\": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive' category of transactions.\\n\"\n             \"    \\\"blocktime\\\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).\\n\"\n             \"    \\\"txid\\\": \\\"transactionid\\\",  (string) The transaction id. Available for 'send' and 'receive' category of transactions.\\n\"\n-            \"    \\\"walletconflicts\\\" : [\\n\"\n-            \"        \\\"conflictid\\\",  (string) Ids of transactions, including equivalent clones, that re-spend a txid input.\\n\"\n-            \"    ],\\n\"\n-            \"    \\\"respendsobserved\\\" : [\\n\"\n-            \"        \\\"respendid\\\",  (string) Ids of transactions, NOT equivalent clones, that re-spend a txid input. \\\"Double-spends.\\\"\\n\"\n-            \"    ],\\n\"\n             \"    \\\"time\\\": xxx,              (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT).\\n\"\n             \"    \\\"timereceived\\\": xxx,      (numeric) The time received in seconds since epoch (Jan 1 1970 GMT). Available for 'send' and 'receive' category of transactions.\\n\"\n             \"    \\\"comment\\\": \\\"...\\\",       (string) If a comment is associated with the transaction.\\n\"\n@@ -1518,12 +1502,6 @@ Value gettransaction(const Array& params, bool fHelp)\n             \"  \\\"blockindex\\\" : xx,       (numeric) The block index\\n\"\n             \"  \\\"blocktime\\\" : ttt,       (numeric) The time in seconds since epoch (1 Jan 1970 GMT)\\n\"\n             \"  \\\"txid\\\" : \\\"transactionid\\\",   (string) The transaction id.\\n\"\n-            \"  \\\"walletconflicts\\\" : [\\n\"\n-            \"      \\\"conflictid\\\",  (string) Ids of transactions, including equivalent clones, that re-spend a txid input.\\n\"\n-            \"  ],\\n\"\n-            \"  \\\"respendsobserved\\\" : [\\n\"\n-            \"      \\\"respendid\\\",  (string) Ids of transactions, NOT equivalent clones, that re-spend a txid input. \\\"Double-spends.\\\"\\n\"\n-            \"  ],\\n\"\n             \"  \\\"time\\\" : ttt,            (numeric) The transaction time in seconds since epoch (1 Jan 1970 GMT)\\n\"\n             \"  \\\"timereceived\\\" : ttt,    (numeric) The time received in seconds since epoch (1 Jan 1970 GMT)\\n\"\n             \"  \\\"details\\\" : [\\n\""
      },
      {
        "sha": "1fb4dba3086be905f0e6d450f74ae811e04c11e5",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39d3f2cb40a539fff1daba3d76a6c59e932d0f0a/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39d3f2cb40a539fff1daba3d76a6c59e932d0f0a/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=39d3f2cb40a539fff1daba3d76a6c59e932d0f0a",
        "patch": "@@ -620,14 +620,6 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n                 if (IsFromMe(txConflict) || IsMine(txConflict))\n                 {\n                     NotifyTransactionChanged(this, conflictHash, CT_GOT_CONFLICT);  //Throws dialog\n-                    // external respend notify\n-                    std::string strCmd = GetArg(\"-respendnotify\", \"\");\n-                    if (!strCmd.empty())\n-                    {\n-                        boost::replace_all(strCmd, \"%s\", wtxIn.GetHash().GetHex());\n-                        boost::replace_all(strCmd, \"%t\", conflictHash.GetHex());\n-                        boost::thread t(runCommand, strCmd); // thread runs free\n-                    }\n                 }\n             }\n         }"
      }
    ]
  },
  {
    "sha": "3015e0bca6bc2cb8beb747873fdf7b80e74d679f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDE1ZTBiY2E2YmMyY2I4YmViNzQ3ODczZmRmN2I4MGU3NGQ2Nzlm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-17T12:09:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-21T05:46:33Z"
      },
      "message": "Revert \"UI to alert of respend attempt affecting wallet.\"\n\nThis reverts commit ada5a067c75f19a724cc054286ecf2254e5dbe8f.\n\nConflicts:\n\tsrc/qt/guiconstants.h\n\tsrc/wallet.h",
      "tree": {
        "sha": "a66ed0fe4911a3bc3244f629f8871b286b6f0a35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a66ed0fe4911a3bc3244f629f8871b286b6f0a35"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3015e0bca6bc2cb8beb747873fdf7b80e74d679f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3015e0bca6bc2cb8beb747873fdf7b80e74d679f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3015e0bca6bc2cb8beb747873fdf7b80e74d679f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3015e0bca6bc2cb8beb747873fdf7b80e74d679f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "39d3f2cb40a539fff1daba3d76a6c59e932d0f0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39d3f2cb40a539fff1daba3d76a6c59e932d0f0a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/39d3f2cb40a539fff1daba3d76a6c59e932d0f0a"
      }
    ],
    "stats": {
      "total": 108,
      "additions": 21,
      "deletions": 87
    },
    "files": [
      {
        "sha": "5ae4bc833de81101498043908d407f04cf4c38ad",
        "filename": "src/qt/guiconstants.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3015e0bca6bc2cb8beb747873fdf7b80e74d679f/src/qt/guiconstants.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3015e0bca6bc2cb8beb747873fdf7b80e74d679f/src/qt/guiconstants.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiconstants.h?ref=3015e0bca6bc2cb8beb747873fdf7b80e74d679f",
        "patch": "@@ -23,10 +23,6 @@ static const int STATUSBAR_ICONSIZE = 16;\n #define COLOR_NEGATIVE QColor(255, 0, 0)\n /* Transaction list -- bare address (without label) */\n #define COLOR_BAREADDRESS QColor(140, 140, 140)\n-/* Transaction list -- has conflicting transactions */\n-#define COLOR_HASCONFLICTING QColor(255, 255, 255)\n-/* Transaction list -- has conflicting transactions - background */\n-#define COLOR_HASCONFLICTING_BG QColor(192, 0, 0)\n \n /* Tooltips longer than this (in characters) are converted into rich text,\n    so that they can be word-wrapped."
      },
      {
        "sha": "f9546fddb5edbbb385760c5b2cb1665e9087b6c1",
        "filename": "src/qt/transactionfilterproxy.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3015e0bca6bc2cb8beb747873fdf7b80e74d679f/src/qt/transactionfilterproxy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3015e0bca6bc2cb8beb747873fdf7b80e74d679f/src/qt/transactionfilterproxy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.cpp?ref=3015e0bca6bc2cb8beb747873fdf7b80e74d679f",
        "patch": "@@ -24,7 +24,7 @@ TransactionFilterProxy::TransactionFilterProxy(QObject *parent) :\n     typeFilter(ALL_TYPES),\n     minAmount(0),\n     limitRows(-1),\n-    showInactive(false)\n+    showInactive(true)\n {\n }\n \n@@ -39,7 +39,7 @@ bool TransactionFilterProxy::filterAcceptsRow(int sourceRow, const QModelIndex &\n     qint64 amount = llabs(index.data(TransactionTableModel::AmountRole).toLongLong());\n     int status = index.data(TransactionTableModel::StatusRole).toInt();\n \n-    if(!showInactive && status == TransactionStatus::Conflicted && type == TransactionRecord::Other)\n+    if(!showInactive && status == TransactionStatus::Conflicted)\n         return false;\n     if(!(TYPE(type) & typeFilter))\n         return false;"
      },
      {
        "sha": "d7bd25e08b4c831b6b4cd7078751c4e3d40c59b9",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3015e0bca6bc2cb8beb747873fdf7b80e74d679f/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3015e0bca6bc2cb8beb747873fdf7b80e74d679f/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=3015e0bca6bc2cb8beb747873fdf7b80e74d679f",
        "patch": "@@ -184,8 +184,6 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n     status.depth = wtx.GetDepthInMainChain();\n     status.cur_num_blocks = chainActive.Height();\n \n-    status.hasConflicting = false;\n-\n     if (!IsFinalTx(wtx, chainActive.Height() + 1))\n     {\n         if (wtx.nLockTime < LOCKTIME_THRESHOLD)\n@@ -229,7 +227,6 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n         if (status.depth < 0)\n         {\n             status.status = TransactionStatus::Conflicted;\n-            status.hasConflicting = !(wtx.GetConflicts(false).empty());\n         }\n         else if (GetAdjustedTime() - wtx.nTimeReceived > 2 * 60 && wtx.GetRequestCount() == 0)\n         {\n@@ -238,7 +235,6 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n         else if (status.depth == 0)\n         {\n             status.status = TransactionStatus::Unconfirmed;\n-            status.hasConflicting = !(wtx.GetConflicts(false).empty());\n         }\n         else if (status.depth < RecommendedNumConfirmations)\n         {\n@@ -249,13 +245,13 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n             status.status = TransactionStatus::Confirmed;\n         }\n     }\n+\n }\n \n-bool TransactionRecord::statusUpdateNeeded(int64_t nConflictsReceived)\n+bool TransactionRecord::statusUpdateNeeded()\n {\n     AssertLockHeld(cs_main);\n-    return (status.cur_num_blocks != chainActive.Height() ||\n-            status.cur_num_conflicts != nConflictsReceived);\n+    return status.cur_num_blocks != chainActive.Height();\n }\n \n QString TransactionRecord::getTxID() const"
      },
      {
        "sha": "626b7654c62267c8c1c070c727b5c8778ae7730e",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 2,
        "deletions": 11,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3015e0bca6bc2cb8beb747873fdf7b80e74d679f/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3015e0bca6bc2cb8beb747873fdf7b80e74d679f/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=3015e0bca6bc2cb8beb747873fdf7b80e74d679f",
        "patch": "@@ -20,8 +20,7 @@ class TransactionStatus\n public:\n     TransactionStatus():\n         countsForBalance(false), sortKey(\"\"),\n-        matures_in(0), status(Offline), hasConflicting(false), depth(0), open_for(0), cur_num_blocks(-1),\n-        cur_num_conflicts(-1)\n+        matures_in(0), status(Offline), depth(0), open_for(0), cur_num_blocks(-1)\n     { }\n \n     enum Status {\n@@ -52,10 +51,6 @@ class TransactionStatus\n     /** @name Reported status\n        @{*/\n     Status status;\n-\n-    // Has conflicting transactions spending same prevout\n-    bool hasConflicting;\n-\n     qint64 depth;\n     qint64 open_for; /**< Timestamp if status==OpenUntilDate, otherwise number\n                       of additional blocks that need to be mined before\n@@ -64,10 +59,6 @@ class TransactionStatus\n \n     /** Current number of blocks (to know whether cached status is still valid) */\n     int cur_num_blocks;\n-\n-    /** Number of conflicts received into wallet as of last status update */\n-    int64_t cur_num_conflicts;\n-\n };\n \n /** UI model for a transaction. A core transaction can be represented by multiple UI transactions if it has\n@@ -145,7 +136,7 @@ class TransactionRecord\n \n     /** Return whether a status update is needed.\n      */\n-    bool statusUpdateNeeded(int64_t nConflictsReceived);\n+    bool statusUpdateNeeded();\n };\n \n #endif // TRANSACTIONRECORD_H"
      },
      {
        "sha": "4825713b69b2649085bef109535f7c01f59ac7a7",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 13,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3015e0bca6bc2cb8beb747873fdf7b80e74d679f/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3015e0bca6bc2cb8beb747873fdf7b80e74d679f/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=3015e0bca6bc2cb8beb747873fdf7b80e74d679f",
        "patch": "@@ -167,7 +167,8 @@ class TransactionTablePriv\n                 parent->endRemoveRows();\n                 break;\n             case CT_UPDATED:\n-                emit parent->dataChanged(parent->index(lowerIndex, parent->Status), parent->index(upperIndex-1, parent->Amount));\n+                // Miscellaneous updates -- nothing to do, status update will take care of this, and is only computed for\n+                // visible transactions.\n                 break;\n             }\n         }\n@@ -188,21 +189,20 @@ class TransactionTablePriv\n             // stuck if the core is holding the locks for a longer time - for\n             // example, during a wallet rescan.\n             //\n-            // If a status update is needed (blocks or conflicts came in since last check),\n-            // update the status of this transaction from the wallet. Otherwise,\n+            // If a status update is needed (blocks came in since last check),\n+            //  update the status of this transaction from the wallet. Otherwise,\n             // simply re-use the cached status.\n             TRY_LOCK(cs_main, lockMain);\n             if(lockMain)\n             {\n                 TRY_LOCK(wallet->cs_wallet, lockWallet);\n-                if(lockWallet && rec->statusUpdateNeeded(wallet->nConflictsReceived))\n+                if(lockWallet && rec->statusUpdateNeeded())\n                 {\n                     std::map<uint256, CWalletTx>::iterator mi = wallet->mapWallet.find(rec->hash);\n \n                     if(mi != wallet->mapWallet.end())\n                     {\n                         rec->updateStatus(mi->second);\n-                        rec->status.cur_num_conflicts = wallet->nConflictsReceived;\n                     }\n                 }\n             }\n@@ -368,8 +368,6 @@ QString TransactionTableModel::formatTxType(const TransactionRecord *wtx) const\n         return tr(\"Payment to yourself\");\n     case TransactionRecord::Generated:\n         return tr(\"Mined\");\n-    case TransactionRecord::Other:\n-        return tr(\"Other\");\n     default:\n         return QString();\n     }\n@@ -545,13 +543,7 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n         return formatTooltip(rec);\n     case Qt::TextAlignmentRole:\n         return column_alignments[index.column()];\n-    case Qt::BackgroundColorRole:\n-\tif (rec->status.hasConflicting)\n-            return COLOR_HASCONFLICTING_BG;\n-\tbreak;\n     case Qt::ForegroundRole:\n-        if (rec->status.hasConflicting)\n-            return COLOR_HASCONFLICTING;\n         // Non-confirmed (but not immature) as transactions are grey\n         if(!rec->status.countsForBalance && rec->status.status != TransactionStatus::Immature)\n         {"
      },
      {
        "sha": "0ad123f39d4dcad2af4fcf410db706404cbbd1a3",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3015e0bca6bc2cb8beb747873fdf7b80e74d679f/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3015e0bca6bc2cb8beb747873fdf7b80e74d679f/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=3015e0bca6bc2cb8beb747873fdf7b80e74d679f",
        "patch": "@@ -164,14 +164,6 @@ void WalletModel::checkBalanceChanged()\n \n void WalletModel::updateTransaction(const QString &hash, int status)\n {\n-\tif (status == CT_GOT_CONFLICT)\n-\t{\n-\t    emit message(tr(\"Conflict Received\"),\n-\t\t         tr(\"WARNING: Transaction may never be confirmed. Its input was seen being spent by another transaction on the network. Wait for confirmation!\"),\n-\t\t\t\tCClientUIInterface::MSG_WARNING);\n-\t\treturn;\n-\t}\n-\n     if(transactionTableModel)\n         transactionTableModel->updateTransaction(hash, status);\n "
      },
      {
        "sha": "b3df2b5a8591ba1d1b05df5363f610bb2e7a635e",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3015e0bca6bc2cb8beb747873fdf7b80e74d679f/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3015e0bca6bc2cb8beb747873fdf7b80e74d679f/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=3015e0bca6bc2cb8beb747873fdf7b80e74d679f",
        "patch": "@@ -21,8 +21,7 @@ enum ChangeType\n {\n     CT_NEW,\n     CT_UPDATED,\n-    CT_DELETED,\n-    CT_GOT_CONFLICT\n+    CT_DELETED\n };\n \n /** Signals for UI communication. */"
      },
      {
        "sha": "7c04743c0f0b5f98593407c14c60b6788492227a",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 27,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3015e0bca6bc2cb8beb747873fdf7b80e74d679f/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3015e0bca6bc2cb8beb747873fdf7b80e74d679f/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=3015e0bca6bc2cb8beb747873fdf7b80e74d679f",
        "patch": "@@ -274,7 +274,7 @@ bool CWallet::SetMaxVersion(int nVersion)\n     return true;\n }\n \n-set<uint256> CWallet::GetConflicts(const uint256& txid, bool includeEquivalent) const\n+set<uint256> CWallet::GetConflicts(const uint256& txid) const\n {\n     set<uint256> result;\n     AssertLockHeld(cs_wallet);\n@@ -292,8 +292,7 @@ set<uint256> CWallet::GetConflicts(const uint256& txid, bool includeEquivalent)\n             continue;  // No conflict if zero or one spends\n         range = mapTxSpends.equal_range(txin.prevout);\n         for (TxSpends::const_iterator it = range.first; it != range.second; ++it)\n-            if (includeEquivalent || !wtx.IsEquivalentTo(mapWallet.at(it->second)))\n-                result.insert(it->second);\n+            result.insert(it->second);\n     }\n     return result;\n }\n@@ -322,7 +321,6 @@ void CWallet::SyncMetaData(pair<TxSpends::iterator, TxSpends::iterator> range)\n         const uint256& hash = it->second;\n         CWalletTx* copyTo = &mapWallet[hash];\n         if (copyFrom == copyTo) continue;\n-        if (!copyFrom->IsEquivalentTo(*copyTo)) continue;\n         copyTo->mapValue = copyFrom->mapValue;\n         copyTo->vOrderForm = copyFrom->vOrderForm;\n         // fTimeReceivedIsTxTime not copied on purpose\n@@ -610,20 +608,6 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n         // Notify UI of new or updated transaction\n         NotifyTransactionChanged(this, hash, fInsertedNew ? CT_NEW : CT_UPDATED);\n \n-        // Notifications for existing transactions that now have conflicts with this one\n-        if (fInsertedNew)\n-        {\n-            BOOST_FOREACH(const uint256& conflictHash, wtxIn.GetConflicts(false))\n-            {\n-                CWalletTx& txConflict = mapWallet[conflictHash];\n-                NotifyTransactionChanged(this, conflictHash, CT_UPDATED); //Updates UI table\n-                if (IsFromMe(txConflict) || IsMine(txConflict))\n-                {\n-                    NotifyTransactionChanged(this, conflictHash, CT_GOT_CONFLICT);  //Throws dialog\n-                }\n-            }\n-        }\n-\n         // notify an external script when a wallet transaction comes in or is updated\n         std::string strCmd = GetArg(\"-walletnotify\", \"\");\n \n@@ -646,12 +630,7 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pbl\n         AssertLockHeld(cs_wallet);\n         bool fExisted = mapWallet.count(tx.GetHash());\n         if (fExisted && !fUpdate) return false;\n-\n-        bool fIsConflicting = IsConflicting(tx);\n-        if (fIsConflicting)\n-\t\tnConflictsReceived++;\n-\n-        if (fExisted || IsMine(tx) || IsFromMe(tx) || fIsConflicting)\n+        if (fExisted || IsMine(tx) || IsFromMe(tx))\n         {\n             CWalletTx wtx(this,tx);\n             // Get merkle branch if transaction was found in a block\n@@ -940,7 +919,7 @@ void CWallet::ReacceptWalletTransactions()\n \n         int nDepth = wtx.GetDepthInMainChain();\n \n-        if (!wtx.IsCoinBase() && nDepth < 0 && (IsMine(wtx) || IsFromMe(wtx)))\n+        if (!wtx.IsCoinBase() && nDepth < 0)\n         {\n             // Try to add to memory pool\n             LOCK(mempool.cs);\n@@ -960,13 +939,13 @@ void CWalletTx::RelayWalletTransaction()\n     }\n }\n \n-set<uint256> CWalletTx::GetConflicts(bool includeEquivalent) const\n+set<uint256> CWalletTx::GetConflicts() const\n {\n     set<uint256> result;\n     if (pwallet != NULL)\n     {\n         uint256 myHash = GetHash();\n-        result = pwallet->GetConflicts(myHash, includeEquivalent);\n+        result = pwallet->GetConflicts(myHash);\n         result.erase(myHash);\n     }\n     return result;"
      },
      {
        "sha": "73fcfa24e081868dd55621a5f2b113abf2e48c52",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 13,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3015e0bca6bc2cb8beb747873fdf7b80e74d679f/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3015e0bca6bc2cb8beb747873fdf7b80e74d679f/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=3015e0bca6bc2cb8beb747873fdf7b80e74d679f",
        "patch": "@@ -144,9 +144,6 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     MasterKeyMap mapMasterKeys;\n     unsigned int nMasterKeyMaxID;\n \n-    // Increment to cause UI refresh, similar to new block\n-    int64_t nConflictsReceived;\n-\n     CWallet()\n     {\n         SetNull();\n@@ -169,7 +166,6 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n         nNextResend = 0;\n         nLastResend = 0;\n         nTimeFirstKey = 0;\n-        nConflictsReceived = 0;\n     }\n \n     std::map<uint256, CWalletTx> mapWallet;\n@@ -322,13 +318,6 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     {\n         return (GetDebit(tx, ISMINE_ALL) > 0);\n     }\n-    bool IsConflicting(const CTransaction& tx) const\n-    {\n-  \t    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-    \t    if (mapTxSpends.count(txin.prevout))\n-    \t        return true;\n-   \t    return false;\n-    }\n     int64_t GetDebit(const CTransaction& tx, const isminefilter& filter) const\n     {\n         int64_t nDebit = 0;\n@@ -401,7 +390,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     int GetVersion() { LOCK(cs_wallet); return nWalletVersion; }\n \n     // Get wallet transactions that conflict with given transaction (spend same outputs)\n-    std::set<uint256> GetConflicts(const uint256& txid, bool includeEquivalent) const;\n+    std::set<uint256> GetConflicts(const uint256& txid) const;\n \n     /** Address book entry changed.\n      * @note called with lock cs_wallet held.\n@@ -812,7 +801,7 @@ class CWalletTx : public CMerkleTx\n \n     void RelayWalletTransaction();\n \n-    std::set<uint256> GetConflicts(bool includeEquivalent=true) const;\n+    std::set<uint256> GetConflicts() const;\n };\n \n "
      }
    ]
  },
  {
    "sha": "98e84aae7ad1e4e18d2292f1ddeeb517432b4c42",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OGU4NGFhZTdhZDFlNGUxOGQyMjkyZjFkZGVlYjUxNzQzMmI0YzQy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-17T12:09:55Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-21T05:46:34Z"
      },
      "message": "Revert \"Relay double-spends, subject to anti-DOS\"\n\nThis reverts commit d640a3ceab4f4372c2a0f738c1286cfde4b41b50.",
      "tree": {
        "sha": "46c8cb4086d1a873b77e03d59e1b56f712b7ae2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46c8cb4086d1a873b77e03d59e1b56f712b7ae2a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/98e84aae7ad1e4e18d2292f1ddeeb517432b4c42",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98e84aae7ad1e4e18d2292f1ddeeb517432b4c42",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/98e84aae7ad1e4e18d2292f1ddeeb517432b4c42",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98e84aae7ad1e4e18d2292f1ddeeb517432b4c42/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3015e0bca6bc2cb8beb747873fdf7b80e74d679f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3015e0bca6bc2cb8beb747873fdf7b80e74d679f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3015e0bca6bc2cb8beb747873fdf7b80e74d679f"
      }
    ],
    "stats": {
      "total": 124,
      "additions": 15,
      "deletions": 109
    },
    "files": [
      {
        "sha": "149b3532a18f23561dee2a3b7d363554611fba44",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98e84aae7ad1e4e18d2292f1ddeeb517432b4c42/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98e84aae7ad1e4e18d2292f1ddeeb517432b4c42/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=98e84aae7ad1e4e18d2292f1ddeeb517432b4c42",
        "patch": "@@ -124,22 +124,6 @@ CTransaction& CTransaction::operator=(const CTransaction &tx) {\n     return *this;\n }\n \n-bool CTransaction::IsEquivalentTo(const CTransaction& tx) const\n-{\n-    if (nVersion   != tx.nVersion   ||\n-        nLockTime  != tx.nLockTime  ||\n-        vin.size() != tx.vin.size() ||\n-        vout       != tx.vout)\n-        return false;\n-    for (unsigned int i = 0; i < vin.size(); i++)\n-    {\n-        if (vin[i].nSequence != tx.vin[i].nSequence ||\n-            vin[i].prevout   != tx.vin[i].prevout)\n-            return false;\n-    }\n-    return true;\n-}\n-\n int64_t CTransaction::GetValueOut() const\n {\n     int64_t nValueOut = 0;"
      },
      {
        "sha": "fb64e6c08e47f8824628b2286d9fe72bd29face8",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98e84aae7ad1e4e18d2292f1ddeeb517432b4c42/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98e84aae7ad1e4e18d2292f1ddeeb517432b4c42/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=98e84aae7ad1e4e18d2292f1ddeeb517432b4c42",
        "patch": "@@ -255,9 +255,6 @@ class CTransaction\n         return hash;\n     }\n \n-    // True if only scriptSigs are different\n-    bool IsEquivalentTo(const CTransaction& tx) const;\n-\n     // Return sum of txouts.\n     int64_t GetValueOut() const;\n     // GetValueIn() is a method on CCoinsViewCache, because"
      },
      {
        "sha": "3488a8bedf807a893f997dfaa646265746747770",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98e84aae7ad1e4e18d2292f1ddeeb517432b4c42/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98e84aae7ad1e4e18d2292f1ddeeb517432b4c42/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=98e84aae7ad1e4e18d2292f1ddeeb517432b4c42",
        "patch": "@@ -1229,7 +1229,6 @@ bool AppInit2(boost::thread_group& threadGroup)\n     LogPrintf(\"mapAddressBook.size() = %u\\n\",  pwalletMain ? pwalletMain->mapAddressBook.size() : 0);\n #endif\n \n-    RegisterInternalSignals();\n     StartNode(threadGroup);\n     if (fServer)\n         StartRPCThreads();"
      },
      {
        "sha": "84178b16e266fa2a1d847401441c5d7ec9aaa87b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 86,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98e84aae7ad1e4e18d2292f1ddeeb517432b4c42/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98e84aae7ad1e4e18d2292f1ddeeb517432b4c42/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=98e84aae7ad1e4e18d2292f1ddeeb517432b4c42",
        "patch": "@@ -7,7 +7,6 @@\n \n #include \"addrman.h\"\n #include \"alert.h\"\n-#include \"bloom.h\"\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"checkqueue.h\"\n@@ -126,10 +125,6 @@ namespace {\n \n } // anon namespace\n \n-// Forward reference functions defined here:\n-static const unsigned int MAX_DOUBLESPEND_BLOOM = 1000;\n-static void RelayDoubleSpend(const COutPoint& outPoint, const CTransaction& doubleSpend, bool fInBlock, CBloomFilter& filter);\n-\n //////////////////////////////////////////////////////////////////////////////\n //\n // dispatching functions\n@@ -152,25 +147,10 @@ struct CMainSignals {\n     boost::signals2::signal<void (const uint256 &)> Inventory;\n     // Tells listeners to broadcast their data.\n     boost::signals2::signal<void ()> Broadcast;\n-    // Notifies listeners of detection of a double-spent transaction. Arguments are outpoint that is\n-    // double-spent, first transaction seen, double-spend transaction, and whether the second double-spend\n-    // transaction was first seen in a block.\n-    // Note: only notifies if the previous transaction is in the memory pool; if previous transction was in a block,\n-    // then the double-spend simply fails when we try to lookup the inputs in the current UTXO set.\n-    boost::signals2::signal<void (const COutPoint&, const CTransaction&, bool)> DetectedDoubleSpend;\n } g_signals;\n \n } // anon namespace\n \n-void RegisterInternalSignals() {\n-    static CBloomFilter doubleSpendFilter;\n-    seed_insecure_rand();\n-    doubleSpendFilter = CBloomFilter(MAX_DOUBLESPEND_BLOOM, 0.01, insecure_rand(), BLOOM_UPDATE_NONE);\n-\n-    g_signals.DetectedDoubleSpend.connect(boost::bind(RelayDoubleSpend, _1, _2, _3, doubleSpendFilter));\n-}\n-\n-\n void RegisterWallet(CWalletInterface* pwalletIn) {\n     g_signals.SyncTransaction.connect(boost::bind(&CWalletInterface::SyncTransaction, pwalletIn, _1, _2));\n     g_signals.EraseTransaction.connect(boost::bind(&CWalletInterface::EraseFromWallet, pwalletIn, _1));\n@@ -890,22 +870,6 @@ int64_t GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowF\n     return nMinFee;\n }\n \n-// Exponentially limit the rate of nSize flow to nLimit.  nLimit unit is thousands-per-minute.\n-bool RateLimitExceeded(double& dCount, int64_t& nLastTime, int64_t nLimit, unsigned int nSize)\n-{\n-    static CCriticalSection csLimiter;\n-    int64_t nNow = GetTime();\n-\n-    LOCK(csLimiter);\n-\n-    // Use an exponentially decaying ~10-minute window:\n-    dCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n-    nLastTime = nNow;\n-    if (dCount >= nLimit*10*1000)\n-        return true;\n-    dCount += nSize;\n-    return false;\n-}\n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                         bool* pfMissingInputs, bool fRejectInsaneFee)\n@@ -940,10 +904,9 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n     {\n         COutPoint outpoint = tx.vin[i].prevout;\n-        // Does tx conflict with a member of the pool, and is it not equivalent to that member?\n-        if (pool.mapNextTx.count(outpoint) && !tx.IsEquivalentTo(*pool.mapNextTx[outpoint].ptx))\n+        if (pool.mapNextTx.count(outpoint))\n         {\n-            g_signals.DetectedDoubleSpend(outpoint, tx, false);\n+            // Disable replacement feature for now\n             return false;\n         }\n     }\n@@ -1015,15 +978,23 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // be annoying or make others' transactions take longer to confirm.\n         if (fLimitFree && nFees < ::minRelayTxFee.GetFee(nSize))\n         {\n+            static CCriticalSection csFreeLimiter;\n             static double dFreeCount;\n-            static int64_t nLastFreeTime;\n-            static int64_t nFreeLimit = GetArg(\"-limitfreerelay\", 15);\n+            static int64_t nLastTime;\n+            int64_t nNow = GetTime();\n+\n+            LOCK(csFreeLimiter);\n \n-\t\tif (RateLimitExceeded(dFreeCount, nLastFreeTime, nFreeLimit, nSize))\n+            // Use an exponentially decaying ~10-minute window:\n+            dFreeCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n+            nLastTime = nNow;\n+            // -limitfreerelay unit is thousand-bytes-per-minute\n+            // At default rate it would take over a month to fill 1GB\n+            if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n                 return state.DoS(0, error(\"AcceptToMemoryPool : free transaction rejected by rate limiter\"),\n                                  REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n-\n             LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n+            dFreeCount += nSize;\n         }\n \n         if (fRejectInsaneFee && nFees > ::minRelayTxFee.GetFee(nSize) * 10000)\n@@ -1046,49 +1017,6 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     return true;\n }\n \n-static void\n-RelayDoubleSpend(const COutPoint& outPoint, const CTransaction& doubleSpend, bool fInBlock, CBloomFilter& filter)\n-{\n-    // Relaying double-spend attempts to our peers lets them detect when\n-    // somebody might be trying to cheat them. However, blindly relaying\n-    // every double-spend across the entire network gives attackers\n-    // a denial-of-service attack: just generate a stream of double-spends\n-    // re-spending the same (limited) set of outpoints owned by the attacker.\n-    // So, we use a bloom filter and only relay (at most) the first double\n-    // spend for each outpoint. False-positives (\"we have already relayed\")\n-    // are OK, because if the peer doesn't hear about the double-spend\n-    // from us they are very likely to hear about it from another peer, since\n-    // each peer uses a different, randomized bloom filter.\n-\n-    if (fInBlock || filter.contains(outPoint)) return;\n-\n-    // Apply an independent rate limit to double-spend relays\n-    static double dRespendCount;\n-    static int64_t nLastRespendTime;\n-    static int64_t nRespendLimit = GetArg(\"-limitrespendrelay\", 100);\n-    unsigned int nSize = ::GetSerializeSize(doubleSpend, SER_NETWORK, PROTOCOL_VERSION);\n-\n-    if (RateLimitExceeded(dRespendCount, nLastRespendTime, nRespendLimit, nSize))\n-    {\n-        LogPrint(\"mempool\", \"Double-spend relay rejected by rate limiter\\n\");\n-        return;\n-    }\n-\n-    LogPrint(\"mempool\", \"Rate limit dRespendCount: %g => %g\\n\", dRespendCount, dRespendCount+nSize);\n-\n-    // Clear the filter on average every MAX_DOUBLE_SPEND_BLOOM\n-    // insertions\n-    if (insecure_rand()%MAX_DOUBLESPEND_BLOOM == 0)\n-        filter.clear();\n-\n-    filter.insert(outPoint);\n-\n-    RelayTransaction(doubleSpend);\n-\n-    // Share conflict with wallet\n-    g_signals.SyncTransaction(doubleSpend, NULL);\n-}\n-\n \n int CMerkleTx::GetDepthInMainChainINTERNAL(CBlockIndex* &pindexRet) const\n {"
      },
      {
        "sha": "5f231fa45b380343d325b8659868523743917284",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98e84aae7ad1e4e18d2292f1ddeeb517432b4c42/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98e84aae7ad1e4e18d2292f1ddeeb517432b4c42/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=98e84aae7ad1e4e18d2292f1ddeeb517432b4c42",
        "patch": "@@ -112,9 +112,6 @@ struct CNodeStateStats;\n \n struct CBlockTemplate;\n \n-/** Set up internal signal handlers **/\n-void RegisterInternalSignals();\n-\n /** Register a wallet to receive updates from core */\n void RegisterWallet(CWalletInterface* pwalletIn);\n /** Unregister a wallet from core */"
      },
      {
        "sha": "ebb1369e31e75fa4c0ca4c3cf70e4b2ce6bf84e9",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98e84aae7ad1e4e18d2292f1ddeeb517432b4c42/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98e84aae7ad1e4e18d2292f1ddeeb517432b4c42/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=98e84aae7ad1e4e18d2292f1ddeeb517432b4c42",
        "patch": "@@ -420,6 +420,7 @@ void CTxMemPool::remove(const CTransaction &tx, std::list<CTransaction>& removed\n void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed)\n {\n     // Remove transactions which depend on inputs of tx, recursively\n+    list<CTransaction> result;\n     LOCK(cs);\n     BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n         std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(txin.prevout);"
      }
    ]
  },
  {
    "sha": "8f3f94a470cdc7195efdbafd45ea03e6c707d9c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjNmOTRhNDcwY2RjNzE5NWVmZGJhZmQ0NWVhMDNlNmM3MDdkOWM4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-17T12:10:02Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-21T05:46:34Z"
      },
      "message": "Revert \"CBloomFilter::clear() method\"\n\nThis reverts commit 8fbf03995df9a2003be603be1a930bc3373d56e0.",
      "tree": {
        "sha": "848534bd7e65b1c81e2893e9957c1254090582c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/848534bd7e65b1c81e2893e9957c1254090582c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f3f94a470cdc7195efdbafd45ea03e6c707d9c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f3f94a470cdc7195efdbafd45ea03e6c707d9c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f3f94a470cdc7195efdbafd45ea03e6c707d9c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f3f94a470cdc7195efdbafd45ea03e6c707d9c8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "98e84aae7ad1e4e18d2292f1ddeeb517432b4c42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98e84aae7ad1e4e18d2292f1ddeeb517432b4c42",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/98e84aae7ad1e4e18d2292f1ddeeb517432b4c42"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 0,
      "deletions": 13
    },
    "files": [
      {
        "sha": "26e366179cad0b8ff2d2023289a6f4aac1af9242",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f3f94a470cdc7195efdbafd45ea03e6c707d9c8/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f3f94a470cdc7195efdbafd45ea03e6c707d9c8/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=8f3f94a470cdc7195efdbafd45ea03e6c707d9c8",
        "patch": "@@ -94,13 +94,6 @@ bool CBloomFilter::contains(const uint256& hash) const\n     return contains(data);\n }\n \n-void CBloomFilter::clear()\n-{\n-    vData.assign(vData.size(),0);\n-    isFull = false;\n-    isEmpty = true;\n-}\n-\n bool CBloomFilter::IsWithinSizeConstraints() const\n {\n     return vData.size() <= MAX_BLOOM_FILTER_SIZE && nHashFuncs <= MAX_HASH_FUNCS;"
      },
      {
        "sha": "956bead87f872e0d155fd785d37e22d91261f2ea",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f3f94a470cdc7195efdbafd45ea03e6c707d9c8/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f3f94a470cdc7195efdbafd45ea03e6c707d9c8/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=8f3f94a470cdc7195efdbafd45ea03e6c707d9c8",
        "patch": "@@ -78,8 +78,6 @@ class CBloomFilter\n     bool contains(const COutPoint& outpoint) const;\n     bool contains(const uint256& hash) const;\n \n-    void clear();\n-\n     // True if the size is <= MAX_BLOOM_FILTER_SIZE and the number of hash functions is <= MAX_HASH_FUNCS\n     // (catch a filter which was just deserialized which was too big)\n     bool IsWithinSizeConstraints() const;"
      },
      {
        "sha": "69de3b5bb192d5a44c58ba1312b6c2c4ca58e88d",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f3f94a470cdc7195efdbafd45ea03e6c707d9c8/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f3f94a470cdc7195efdbafd45ea03e6c707d9c8/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=8f3f94a470cdc7195efdbafd45ea03e6c707d9c8",
        "patch": "@@ -45,10 +45,6 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize)\n         expected[i] = (char)vch[i];\n \n     BOOST_CHECK_EQUAL_COLLECTIONS(stream.begin(), stream.end(), expected.begin(), expected.end());\n-\n-    BOOST_CHECK_MESSAGE( filter.contains(ParseHex(\"99108ad8ed9bb6274d3980bab5a85c048f0950c8\")), \"BloomFilter doesn't contain just-inserted object!\");\n-    filter.clear();\n-    BOOST_CHECK_MESSAGE( !filter.contains(ParseHex(\"99108ad8ed9bb6274d3980bab5a85c048f0950c8\")), \"BloomFilter should be empty!\");\n }\n \n BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize_with_tweak)"
      }
    ]
  }
]