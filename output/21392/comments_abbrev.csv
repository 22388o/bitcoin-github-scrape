ajtowns,2021-03-08 22:56:22,"Maybe consider rebasing on #21380 ; it adds fuzz testing and removes the need for the `MinActivationHeight()` virtual functions, and should make the ""per-deployment-threshold"" part a bit simpler.",https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-793147434,793147434,
achow101,2021-03-09 01:47:11,"> Maybe consider rebasing on #21380 ; it adds fuzz testing and removes the need for the `MinActivationHeight()` virtual functions, and should make the ""per-deployment-threshold"" part a bit simpler.\n\nDone. It did indeed make this simpler. The fuzzer also caught one minor issue.",https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-793254716,793254716,
DrahtBot,2021-03-09 04:23:02,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21401 (Refactor versionbits deployments to avoid potential uninitialized variables by achow101)\n* #21391 ([Bundle 5/n] P",https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-793365182,793365182,
Sjors,2021-03-09 15:53:31,"Here you go, a BIP 8 delayed activation functional test for your cherry-picking: https://github.com/Sjors/bitcoin/commits/2021/03/bip8-speedy-trial-test",https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-794078821,794078821,
achow101,2021-03-09 17:48:03,"> Here you go, a BIP 8 delayed activation functional test for your cherry-picking: https://github.com/Sjors/bitcoin/commits/2021/03/bip8-speedy-trial-test\n\nCherry picked.",https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-794224457,794224457,
Sjors,2021-03-09 20:09:37,"Linter complains `'time' imported but unused`; my bad, I needed that import during an intermediate struggle (when generating coins on node 1, node 2 refused to sync).",https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-794391494,794391494,
achow101,2021-03-09 20:30:05,Fixed the linter,https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-794414561,794414561,
kristapsk,2021-03-12 10:06:40,"There are some compiler warnings for me (GCC 9.3.0).\n```\ntest/fuzz/versionbits.cpp: In function ‘void versionbits_fuzz_target(FuzzBufferType)’:\ntest/fuzz/versionbits.cpp:150:37: warning: ‘*((void*)& last_stats +16)’ may be used uninitialized in this function [-Wmaybe-uninitialized]\n  150 |                     if (last_stats->possible) {\n      |                         ~~~~~~~~~~~~^~~~~~~",https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-797382764,797382764,
achow101,2021-03-12 17:55:31,"> There are some compiler warnings for me (GCC 9.3.0).\n\nI believe these are caused by the changes from #21380.\n",https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-797656298,797656298,
ajtowns,2021-03-13 04:54:05,"Hmm, I'm not seeing those warnings, and I think all those statements are protected by an `if (last_stats)` which should ensure it's initialised.",https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-797866949,797866949,
achow101,2021-03-13 05:49:27,I see this warnings with gcc 10.2.0,https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-797872796,797872796,
ajtowns,2021-03-14 00:59:17,"Apparently I wasn't seeing those warnings because my fuzz things were being compiled with `-O0`... Seems to be a gcc bug not handling optional very well to me ([80635](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=80635) maybe?) but it's easy enough to not use an optional here, so I've added a patch to do that.",https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-798810300,798810300,
michaelfolkson,2021-03-15 12:25:50,"Concept ACK, Approach ACK. \n\nThere appears to be considerable community [support](https://gist.github.com/michaelfolkson/92899f27f1ab30aa2ebee82314f8fe7f) for the Speedy Trial proposal and I think this PR is best positioned today to be merged in the near future given that it cherry picks commits from other authors (Luke, AJ, Sjors). \n\nThis bitcoin-dev mailing list [post](https://lists.linu",https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-799378366,799378366,
DrahtBot,2021-03-15 16:48:59,<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\n🕵️ @harding @sipa have been requested to review this pull request as specified in the REVIEWERS file.,https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-799573801,799573801,
amitiuttarwar,2021-03-16 20:24:28,"Now that #21380 has been revamped to only add a fuzz test (no refactors), probably makes sense to update this PR to match?\n\nAlso, can you update the OP description to match the commits? OP refers to 5 commits but the branch has 14 😛",https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-800579275,800579275,
achow101,2021-03-16 21:10:29,"> Now that #21380 has been revamped to only add a fuzz test (no refactors), probably makes sense to update this PR to match?\n\nI have kept the refactoring commits and dropped the fuzzer commits, as the refactors were the reason this PR was based on #21380.\n\n> Also, can you update the OP description to match the commits? OP refers to 5 commits but the branch has 14 stuck_out_tongue\n\nUpda",https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-800606952,800606952,
Sjors,2021-03-17 16:21:02,"It's probably a good idea to extract 524b41ffdb67ebaf1538a39b88344e7d4118b4b8 to 414640fbaf8cf00e8e37451764a77cdec3fdd730 into a seperate PR, and perhaps also incorporate @luke-jr's #21399. That covers all the refactoring and generic-making. This PR, the BIP 9 variant #21377, a BIP 8 (lot=false) and a BIP 9 activation can all build on that.",https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-801220786,801220786,
achow101,2021-03-17 18:52:10,I've dropped the refactoring and will include it in another PR.,https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-801328699,801328699,
achow101,2021-03-19 20:27:14,"Rebased for hidden merge conflict with the fuzzer. As such, the versionbits fuzzer is updated for heights and min activation height.",https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-803104973,803104973,
achow101,2021-03-24 06:32:08,Had to rebase due to fuzzer changes,https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-805540245,805540245,
benthecarman,2021-03-24 06:38:03,reACK 2f457ca73ce33557ecff0d45c37c33957b1b0764,https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-805542966,805542966,
devrandom,2021-03-24 15:13:47,"Tested as follows:\n\n- made unit tests fail by manually breaking the unit test `versionbits_test` in various ways\n- made unit tests fail by introducing off-by-one errors in all the relevant spots in `versionbits.cpp`\n- ensure no failure if cache is disabled by removing cache store statements in `versionbits.cpp`\n- manually tested with a single local regtest node\n- manually tested a reor",https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-805910099,805910099,
sipa,2021-03-25 02:30:39,"Code review ACK for all but the unit and functional tests (which I've only casually looked over). I inferred the finite state machine diagram based on the fuzz test code (making a few suggestions), and compared that with the implemented logic.",https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-806315887,806315887,
Sjors,2021-03-25 14:12:16,re-ACK 2e55bcedb8d73e49620a5731196bf7e23bb53ccc,https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-806826159,806826159,
michaelfolkson,2021-03-25 20:46:20,"ACK 2e55bcedb8d73e49620a5731196bf7e23bb53ccc\n\nIdeally a choice on a Speedy Trial PR would have been made by now so I could focus review and testing on one PR and one approach. Spreading review over two competing PRs is doing none of us any favors. I would have liked to have spent more time testing this PR before ACKing it but I think the biggest danger at this point is spreading review too thi",https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-807455957,807455957,
harding,2021-03-26 03:16:36,"As of commit 2e55bcedb8d73e49620a5731196bf7e23bb53ccc, lightly tested the likely outcomes of ST and confirmed that `getblockchainfo` returned the expected values whether activation was achieved or not, before and after the minimum_activation_period.  I did not check close enough to detect off-by-one errors or other small details.\n\nTested creating a regtest chain with this branch and `-vbparams",https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-807905868,807905868,
devrandom,2021-03-26 14:28:33,"ACK https://github.com/bitcoin/bitcoin/pull/21392/commits/2e55bcedb8d73e49620a5731196bf7e23bb53ccc\n\nIn addition to the testing in https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-805910099 I also checked that the fuzzer detects various off-by-one errors I manually introduced into the implementation.\n",https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-808263580,808263580,
benthecarman,2021-03-26 15:55:54,reACK 2e55bcedb8d73e49620a5731196bf7e23bb53ccc,https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-808329160,808329160,
ajtowns,2021-03-28 04:56:27,"I think I'm an approach NACK, or at least approach -1, on using heights for activation at this point: they're [incompatible with activating on testnet](https://github.com/bitcoin/bips/pull/1081#pullrequestreview-621934640) due to hash rate inconsistency, and they're incompatible with activation on signet due to custom signets being able to have completely random heights, since anyone can start a n",https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-808844563,808844563,
michaelfolkson,2021-03-28 11:55:15,"For the sake of respecting other reviewers' time, Taproot is already active on the default Signet for testing and experimentation with Taproot transactions. Activating Taproot on testnet seems like a very low priority, certainly a lower priority than ensuring the optimal code is merged for mainnet activation. \n\nIf you want a summary of the arguments for a consistent use of block height versus ",https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-808886402,808886402,
michaelfolkson,2021-03-28 12:35:09,"Also [this](https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-802336038) shows preferences for a consistent use of block height.\n\n> I don't have a strong view but it appears that @achow101 in #21392 and just by reading the comments in this PR @luke-jr @benthecarman @JeremyRubin @Sjors @roconnor-blockstream @harding all have a preference for a fully height based approach over any use o",https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-808891024,808891024,
benthecarman,2021-03-28 12:48:22,"> I think I'm an approach NACK, or at least approach -1, on using heights for activation at this point: they're incompatible with activating on testnet due to hash rate inconsistency, and they're incompatible with activation on signet due to custom signets being able to have completely random heights, since anyone can start a new one at any time\n\nI don't think test networks should be relevant ",https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-808892479,808892479,
sipa,2021-03-30 02:07:57,"I believe this is the intended state machine:\n\n![states](https://user-images.githubusercontent.com/548488/112922812-fe08a780-90c1-11eb-99e2-291522811faf.png)\n\nTo generate:\n\n```sh\n$ dot -Tpng >states.png\ndigraph versionbits {\n    defined [shape=box,label=""DEFINED""];\n    started [shape=box,label=""STARTED""];\n    failed [shape=box,label=""FAILED""];\n    locked [shape=box,label=""L",https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-809850058,809850058,
Rspigler,2021-04-02 19:56:30,"Should `STARTED` -> `LOCKED_IN` be defined as ""sig >=  thresh &  height  <= end"" ?",https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-812686881,812686881,
achow101,2021-04-06 23:47:39,Closing this for now as #21377 (with some changes) is agreeable to most people.,https://github.com/bitcoin/bitcoin/pull/21392#issuecomment-814503706,814503706,
benthecarman,2021-03-08 22:39:29,nit: unneeded,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r589800403,589800403,src/validation.h
benthecarman,2021-03-08 22:44:02,I think it'd be worth adding the ability to set the `min_activation_height` for testing as well,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r589804330,589804330,src/chainparamsbase.cpp
ajtowns,2021-03-08 22:52:02,"As it stands, `-vbparams` is only used to disable taproot activation to check soft-fork status, so this would only be useful if it came with an actual test.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r589808255,589808255,src/chainparamsbase.cpp
achow101,2021-03-08 22:56:35,Removed,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r589810331,589810331,src/validation.h
JeremyRubin,2021-03-09 01:54:18,Should this be set to NEVER_ACTIVE?,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r589881249,589881249,src/consensus/params.h
JeremyRubin,2021-03-09 02:07:55,"there's not really a great way to rewrite this, but can we comment why it is +1",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r589886135,589886135,src/versionbits.cpp
JeremyRubin,2021-03-09 02:08:53,how it is doc'd below is great,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r589886501,589886501,src/versionbits.cpp
JeremyRubin,2021-03-09 02:09:51,ibid -- a temporary makes this clearer,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r589886850,589886850,src/versionbits.cpp
achow101,2021-03-09 02:21:54,"The potential for uninitialized members here is concerning to me, so I am working on a followup to deal with those. That may be rolled into this PR.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r589891206,589891206,src/consensus/params.h
achow101,2021-03-09 02:22:00,Done,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r589891266,589891266,src/versionbits.cpp
achow101,2021-03-09 02:22:04,Done,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r589891296,589891296,src/versionbits.cpp
Sjors,2021-03-09 12:37:42,"""The with UASF"" -> ""The UASF fallback with forced signalling (LOT=true) has not been implemented. The current implementation is the equivalent of LOT=false""",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r590330775,590330775,doc/bips.md
Sjors,2021-03-09 12:49:15,"This is a breaking RPC change, so needs a release note.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r590339596,590339596,src/rpc/blockchain.cpp
Sjors,2021-03-09 12:56:59,"7e47c280b7b5597e4a259f4d4b50d661fccd061a : I would be in favor of such a test, but I suggest introducing the `@min_activation_height` param in a later commit, rather than in this refactor. ",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r590345168,590345168,src/chainparamsbase.cpp
Sjors,2021-03-09 12:59:29,Comment needs update.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r590347074,590347074,src/rpc/blockchain.cpp
Sjors,2021-03-09 13:03:44,"While you're at it, the comment about which node is active is the wrong way around.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r590349951,590349951,test/functional/feature_taproot.py
achow101,2021-03-09 17:37:03,"No? Node 0 has taproot inactive and setting the vbparams in this way (startheight=1, timeoutheight=1) ensures that it cannot activate on regtest.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r590580067,590580067,test/functional/feature_taproot.py
achow101,2021-03-09 17:47:39,Done,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r590587972,590587972,doc/bips.md
achow101,2021-03-09 17:47:46,Done,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r590588073,590588073,src/rpc/blockchain.cpp
achow101,2021-03-09 17:47:51,Done,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r590588126,590588126,src/rpc/blockchain.cpp
luke-jr,2021-03-09 19:54:07,I don't think this affects anything other than the docs?,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r590674111,590674111,doc/release-notes-21392.md
Sjors,2021-03-09 20:14:55,"~No~ yes, taproot is always active on regtest: https://github.com/bitcoin/bitcoin/blob/968bc1e07b4a8a359876f5b8035fb4c369d04bad/src/chainparams.cpp#L418\n\nThis had me massively confused ~too~, but you can tell from `testmempoolaccept` if you manually craft a (broken) taproot transaction: https://github.com/BitMEXResearch/forkmonitor/blob/master/spec/models/chaintip_spec.rb#L377 (`mempool_broken",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r590687298,590687298,test/functional/feature_taproot.py
Sjors,2021-03-09 20:18:03,"Ah crap, was reading the brackets wrong. Nvm. This is why I like to indent stuff :-)",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r590689363,590689363,test/functional/feature_taproot.py
Sjors,2021-03-10 13:47:31,Why are you dropping all tests for `DEFINED -> FAILED` and `DEFINED -> STARTED -> FAILED`?,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r591524815,591524815,src/test/versionbits_tests.cpp
Sjors,2021-03-10 13:52:11,Why the switch from mainnet to regtest here?,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r591529768,591529768,src/test/versionbits_tests.cpp
achow101,2021-03-10 17:38:16,"This change is from #19573. I believe it is dropped because BIP 8 specifies that the timeoutheight falls on a retarget block greater than the startheight, so this scenario is supposed to be impossible to occur. With BIP 9, it was possible because there was no guarantee of the number of blocks between the start time and timeout time, but with height, the number of blocks is guaranteed.\n\n`DEFINE",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r591731487,591731487,src/test/versionbits_tests.cpp
achow101,2021-03-10 17:43:09,"I believe this change was done so that custom activation parameters could be used. Specifically, since mainnet start and timeout heights are in the hundreds of thousands of blocks, the test would just be wasting time building up a chain to reach that those heights. With regtest, it can use a way lower height so the test runs in a timely fashion.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r591734947,591734947,src/test/versionbits_tests.cpp
Sjors,2021-03-11 10:13:58,I guess the better question is: why did it use mainnet in the past?,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r592231394,592231394,src/test/versionbits_tests.cpp
achow101,2021-03-11 18:10:05,I guess it was convenient and doesn't really matter when the time can be faked?,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r592588076,592588076,src/test/versionbits_tests.cpp
ajtowns,2021-03-12 02:46:19,"I figured the theory was ""if you're going to test anything, test what's going to happen on mainnet"". Since there's no proof of work in the versionbits unit test, it might be reasonable to test with real heights -- it's just building a skiplist with half a million entries to get to the start height, and going from there?",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r592872804,592872804,src/test/versionbits_tests.cpp
luke-jr,2021-03-14 01:07:16,"We had discussed delaying the member/variable renames until after the actual logic changes for better backport/merge/review, and I thought that was a good idea. Are you planning to take that out of the PR? Been waiting to review pending on that...",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r593823167,593823167,src/chainparams.cpp
achow101,2021-03-14 01:22:20,`getblockchaininfo` has a `bip9` field that is changed to `bip8`. This only effects signet and regtest though since those are the only ones that have taproot show up in `getblockchaininfo`.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r593824356,593824356,doc/release-notes-21392.md
achow101,2021-03-14 01:23:07,"Oh yeah, forgot to do that. I've removed the rename commit that I added in this PR, but #21380 also has a rename commit and it's up to @ajtowns to remove that if desired.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r593824410,593824410,src/chainparams.cpp
luke-jr,2021-03-14 04:08:12,Missing the new `min_activation_height`,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r593838402,593838402,src/chainparams.cpp
luke-jr,2021-03-14 04:08:51,I'm not sure it's a good idea to use underscores here when everything else uses `startheight`,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r593838439,593838439,src/chainparams.cpp
luke-jr,2021-03-14 04:09:44,`{0}` here can avoid needing to initialise it everywhere it isn't used (and reduce the risk of ever forgetting to do so),https://github.com/bitcoin/bitcoin/pull/21392#discussion_r593838512,593838512,src/consensus/params.h
luke-jr,2021-03-14 04:10:31,`height_active_min` might be more consistent with the other variables.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r593838593,593838593,src/versionbits.cpp
luke-jr,2021-03-14 04:11:06,nit: space,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r593838630,593838630,src/test/versionbits_tests.cpp
luke-jr,2021-03-14 04:18:42,"`-vbparams` has been extended to accept min activation height, but the doc here isn't updated with it.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r593839228,593839228,src/chainparamsbase.cpp
luke-jr,2021-03-14 04:21:33,nit: extra space,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r593839452,593839452,src/versionbits.cpp
michaelfolkson,2021-03-14 11:47:49,nit: s/retarteting/retargeting,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r593887517,593887517,test/functional/feature_bip8.py
luke-jr,2021-03-14 16:01:28,"(and below) f''should be avoided to make backport to 0.21 nicer\n\n",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r593922180,593922180,test/functional/feature_bip8.py
achow101,2021-03-14 17:53:15,Done,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r593937167,593937167,src/chainparams.cpp
achow101,2021-03-14 17:53:21,Done,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r593937173,593937173,src/chainparams.cpp
achow101,2021-03-14 17:53:25,Done,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r593937178,593937178,src/consensus/params.h
achow101,2021-03-14 17:53:28,Done,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r593937199,593937199,src/versionbits.cpp
achow101,2021-03-14 17:53:32,Done,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r593937219,593937219,src/test/versionbits_tests.cpp
achow101,2021-03-14 17:53:36,Done,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r593937221,593937221,src/chainparamsbase.cpp
achow101,2021-03-14 17:53:47,Fixed,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r593937243,593937243,src/versionbits.cpp
achow101,2021-03-14 17:53:51,Fixed,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r593937250,593937250,test/functional/feature_bip8.py
achow101,2021-03-14 17:54:00,Done,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r593937260,593937260,test/functional/feature_bip8.py
ajtowns,2021-03-18 20:07:41,"Oh, no -- the reason was that it is possible to test ""TESTDUMMY"" activation on mainnet with MTP because you can fake the block time to be prior to the the genesis block's timestamp; but you can't do that with height because you obviously can't have a block height prior to NEVER_ACTIVE ie -2.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r597207019,597207019,src/test/versionbits_tests.cpp
ajtowns,2021-03-18 20:13:59,Comment is wrong,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r597210855,597210855,src/test/versionbits_tests.cpp
achow101,2021-03-18 20:16:31,Fixed.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r597212362,597212362,src/test/versionbits_tests.cpp
ajtowns,2021-03-18 20:18:33,Missing `[:]` around min_activation_height,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r597213684,597213684,src/chainparamsbase.cpp
ajtowns,2021-03-18 20:47:34,"This loop structure is repeated a bunch; might be clearer as:\n\n```python\n    def test_height(self, height, *status, mine=None):\n        if height > self.height:\n            assert mine is not None\n            self.log.info(f""Test status at height {height}..."")\n            self.nodes[mine].generate(height - self.height)\n            self.sync_blocks()\n        elif height < self.hei",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r597231273,597231273,test/functional/feature_bip8.py
ajtowns,2021-03-18 20:50:09,Note `@1:@1` gets interpreted equivalently to `@144:@144` and transitions from DEFINED to FAILED for the block at height 144.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r597232746,597232746,test/functional/feature_bip8.py
ajtowns,2021-03-18 20:51:39,This doesn't match the BIP 8 spec which specifies that DEFINED always transitions to STARTED and never skips directly to FAILED.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r597233603,597233603,src/versionbits.cpp
ajtowns,2021-03-18 20:56:57,"Could consider checking that `startheight` and `timeoutheight` (and `min_activation_height`) are either on retarget boundaries or match `-1, max int` or `-2, -2`. (Values not on retarget boundaries will be rounded up implicitly by the versionbits logic)",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r597236740,597236740,src/chainparams.cpp
achow101,2021-03-18 21:37:01,"This condition was actually caught by the fuzzer (back when this PR included it).\n\nThe scenario is that the timeoutheight is less than one period after the startheight. Without this, such a deployment would transition to the STARTED state, and then potentially to LOCKED_IN. But all of that after the timeoutheight has been passed. That doesn't make any sense and doesn't fit within what we are e",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r597258950,597258950,src/versionbits.cpp
achow101,2021-03-18 23:34:08,Done,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r597310511,597310511,src/chainparamsbase.cpp
achow101,2021-03-18 23:34:16,Done,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r597310560,597310560,test/functional/feature_bip8.py
achow101,2021-03-18 23:34:55,"Since this is for a node that has testdummy inactive, I've just changed this to `@-2:@-2`.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r597310780,597310780,test/functional/feature_bip8.py
achow101,2021-03-18 23:35:48,"After discussing this with @luke-jr, I've removed this transition. Since there should never be a deployment that has the timeoutheight less than one period after the startheight, I've also added a sanity check to the unit tests for this case.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r597311140,597311140,src/versionbits.cpp
achow101,2021-03-18 23:35:58,Perhaps for a followup.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r597311188,597311188,src/chainparams.cpp
ajtowns,2021-03-19 00:02:25,"I don't think that works? ""never active"" means the fork won't show up in getblockchaininfo (to avoid testdummy appearing on mainnet).",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r597320691,597320691,test/functional/feature_bip8.py
achow101,2021-03-19 00:08:57,"I work around that by allowing a status of `None` to indicate that it shouldn't show up in `getblockchaininfo`. The purpose of this node is to generate non-signaling blocks anyways, so the status of testdummy for it doesn't matter that much.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r597322885,597322885,test/functional/feature_bip8.py
ajtowns,2021-03-19 00:23:19,"Yes, the ""always reach STARTED"" issue was why there's a separate NEVER_ACTIVE setting, I think.\n\nBIP8 does specify ""timeoutheight must be at least 4096 blocks (2 retarget intervals) after startheight"", so you could treat timeoutheight being reached from DEFINED as an extension to the spec and define it any way you like, similar to the always/never active cases. (The old bip8 code in #19573 did",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r597327563,597327563,src/versionbits.cpp
achow101,2021-03-19 18:35:06,I've decided to add checking for these parameters.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r597897743,597897743,src/chainparams.cpp
ajtowns,2021-03-20 04:40:39,"If `height < checker.m_begin` and `m_begin + period <= m_end` then `height < checker.m_end` is guaranteed. Suggest dropping the `m_end` test here, which then allows removing the `assert(m_begin + period <= m_end)` above, which then allows extending the range for both startheight and timeoutheight to `[0, period*(max_periods-2)]`.  (Really the limit for timeouteight is `period*(max_periods-1)`)",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r598061975,598061975,src/test/fuzz/versionbits.cpp
ajtowns,2021-03-20 04:42:22,Changing this assertion to `assert(always_active_test || height >= checker.m_min_activation)` allows having m_min_activation be fuzzed unconditionally (ie for always/never active tests as well).,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r598062098,598062098,src/test/fuzz/versionbits.cpp
ajtowns,2021-03-20 04:43:42,I'm a bit surprised NEVER_ACTIVE is always DEFINED instead of always FAILED (it was this way in #19573 as well). I don't think it makes any observable difference though.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r598062187,598062187,src/test/fuzz/versionbits.cpp
achow101,2021-03-20 05:32:16,"I don't quite follow as to why the range for both startheight and timeoutheight should be ` [0, period*(max_periods-2)]`. I had set the range currently used in order to avoid the issue discussed in https://github.com/bitcoin/bitcoin/pull/21392#discussion_r597258950.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r598066616,598066616,src/test/fuzz/versionbits.cpp
achow101,2021-03-20 05:32:52,"This was surprising to me as well. Since this commit was pulled from #19573, I just left it as it came from there.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r598066653,598066653,src/test/fuzz/versionbits.cpp
achow101,2021-03-20 05:38:22,Done,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r598067201,598067201,src/test/fuzz/versionbits.cpp
ajtowns,2021-03-20 05:55:56,"For bip9/mtp versionbits the cache lookup loop will say ""oh, we haven't reach start time yet, must still be DEFINED"" which is inconsistent with the ""DEFINED"" check afterwards that says ""if we reached timeout and start time at the same time, we go to FAILED instead of STARTED"". If the fuzzer tracked the mtp for the previous period, you could capture that logic too, but that seemed a bit messy.\n\",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r598068726,598068726,src/test/fuzz/versionbits.cpp
ajtowns,2021-03-20 06:24:23,"I think you should be able to make this:\n\n```c++\n    case ThresholdState::FAILED:\n        assert(height >= checker.m_begin);\n        assert(height >= checker.m_end);\n        assert(exp_state == ThresholdState::FAILED || exp_state == ThresholdState::STARTED);\n```",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r598071087,598071087,src/test/fuzz/versionbits.cpp
Sjors,2021-03-20 13:21:02,"59833ff7118510de7bd2e89d55e074dc23cef8ef : the second condition seems unnecessary, maybe just `assert` it?",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r598111231,598111231,src/versionbits.cpp
Sjors,2021-03-20 13:25:47,59833ff7118510de7bd2e89d55e074dc23cef8ef: doc should explain the special values `-1` and `-2`,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r598111704,598111704,src/chainparamsbase.cpp
Sjors,2021-03-20 13:30:09,"59833ff7118510de7bd2e89d55e074dc23cef8ef: maybe use the exact terminology. I also find indentation less confusing:\n\n```python\nself.extra_args = [\n    [""-par=1"", ""-vbparams=taproot:@-2:@-2""], # Node 0 has Taproot NEVER_ACTIVE\n    [""-par=1""] # Node 1 has Taproot ALWAYS_ACTIVE\n]\n```\n",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r598112205,598112205,test/functional/feature_taproot.py
Sjors,2021-03-20 13:34:23,It also impacts mainnet for anyone automatically parsing `getblockchaininfo` for current softfork deployments.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r598112562,598112562,doc/release-notes-21392.md
achow101,2021-03-20 17:35:09,I think it is fine to leave as is.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r598138306,598138306,src/versionbits.cpp
achow101,2021-03-20 17:35:17,Done,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r598138314,598138314,src/test/fuzz/versionbits.cpp
achow101,2021-03-20 17:35:22,Done,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r598138342,598138342,src/test/fuzz/versionbits.cpp
achow101,2021-03-20 17:35:36,Added documentation for the always active and never active cases.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r598138396,598138396,src/chainparamsbase.cpp
achow101,2021-03-20 17:35:40,Done,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r598138411,598138411,test/functional/feature_taproot.py
luke-jr,2021-03-20 18:31:49,Do we really need that level of detail in debug-only options?,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r598144381,598144381,src/chainparamsbase.cpp
Sjors,2021-03-20 18:42:44,I could imagine some confusion if some sets `height_start` to `NEVER_ACTIVE` but then sets `height_timeout` to some real date. But hopefully this code gets enough review nobody would actually do that.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r598145429,598145429,src/versionbits.cpp
Sjors,2021-03-20 18:43:11,It's confused me more than zero times.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r598145462,598145462,src/chainparamsbase.cpp
achow101,2021-03-20 19:08:47,I've added an additional check to the sanity check unit test that the `NEVER_ACTIVE` and `ALWAYS_ACTIVE` parameters are set correctly.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r598148207,598148207,src/versionbits.cpp
luke-jr,2021-03-22 18:44:43,"This isn't true, and specifying NO_TIMEOUT is kinda annoying...?",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r598985924,598985924,src/chainparams.cpp
achow101,2021-03-22 23:54:05,Removed it.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r599151274,599151274,src/chainparams.cpp
luke-jr,2021-03-23 22:30:51,Second var is wrong,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600001664,600001664,src/chainparams.cpp
achow101,2021-03-24 00:13:53,Fixed. Also added tests for `-vbparams`.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600049584,600049584,src/chainparams.cpp
sipa,2021-03-24 01:31:46,"In commit ""Migrate versionbits to use height instead of MTP""\n\nYou already tested the case start==ALWAYS_ACTIVE && timeout==NO_TIMEOUT above. Would it make sense to enforce timeout==NO_TIMEOUT whenever start==ALWAYS_ACTIVE instead?",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600087336,600087336,src/chainparams.cpp
sipa,2021-03-24 01:54:41,"In commit ""Migrate versionbits to use height instead of MTP""\n\n`timeoutheight` isn't chosen to be `>= startheight`?",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600098079,600098079,src/test/fuzz/versionbits.cpp
sipa,2021-03-24 02:21:39,"In commit ""Migrate versionbits to use height instead of MTP"", but more general perhaps.\n\nThere seems to be some overlap here with `sanity_check_params`. Would it make sense to have them merged, and perhaps make it always performed (also for mainnet/testnet, at startup)?",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600111302,600111302,src/chainparams.cpp
achow101,2021-03-24 02:49:25,"afaict, the fuzzer is flexible enough to deal with that case. See also: https://github.com/bitcoin/bitcoin/pull/21392#discussion_r598061975",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600121543,600121543,src/test/fuzz/versionbits.cpp
luke-jr,2021-03-24 02:54:54,"That was originally required, but unnecessary and since NO_TIMEOUT is a maxint, seems annoying to require for no reason.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600123560,600123560,src/chainparams.cpp
luke-jr,2021-03-24 02:55:28,Seems best left for a refactor later IMO.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600123747,600123747,src/chainparams.cpp
achow101,2021-03-24 03:25:36,"Oops. The requirement was intentionally removed, but I didn't notice I had that earlier check. I've removed this line and dropped `NO_TIMEOUT` from the earlier check.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600133553,600133553,src/chainparams.cpp
achow101,2021-03-24 03:26:48,"I think it is reasonable to have the sanity check always performed at startup, but that can be left for a later PR.\n\nHowever I have removed the overlap with `sanity_check_params` and have that instead call `CheckVBitsHeights` (now part of `CChainParams`) in the test for the height sanity checks.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600133910,600133910,src/chainparams.cpp
benthecarman,2021-03-24 04:53:22,Why have `startheight` and `timeoutheight` as `int`s but as a `int64_t` for `m_min_activation_height`. For the vbparams you had them all as `int64_t`,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600170128,600170128,src/consensus/params.h
benthecarman,2021-03-24 04:54:54,not a huge deal but this variable should be renamed eventually,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600171667,600171667,src/rpc/blockchain.cpp
achow101,2021-03-24 05:53:31,"It should be `int` here, fixed.\n\nFor vbparams, the string to int parser returns an int64_t, so that's what I use there.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600192616,600192616,src/consensus/params.h
benthecarman,2021-03-24 05:58:37,"By starting here, are we then ignoring if the latest block is signaling?\n\ncontext:\n```\n// We track state by previous-block, so the height we should be comparing is +1\nconst int64_t height = pindexPrev->nHeight + 1;\n```",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600194376,600194376,src/versionbits.cpp
benthecarman,2021-03-24 05:59:56,"Also for my sanity, is the reason the height check is moved from the beginning to the end of this case because we are using `pindexPrev->nHeight + 1`",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600194837,600194837,src/versionbits.cpp
achow101,2021-03-24 06:05:56,"Yes. Determining whether the threshold is reached is done at the beginning of each signaling period, and determines the state for the entire signaling period. This is checking for whether the threshold is reached in the previous signaling period to determine whether the current signaling period (starting at block `height`) is locked_in. The current block (at `height`) is not part of the previous s",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600196720,600196720,src/versionbits.cpp
ajtowns,2021-03-24 06:07:11,"Consider a block B just after a retarget period boundary, ie `B->nHeight % 2016 == 0`, and `pindexPrev = B->pprev`. `pindexPrev` was in state `STARTED`. What state should `B` be in? It depends on the signalling of the prior 2016 blocks -- so we test `pindexPrev->nVersion`, `pindexPrev->pprev->nVersion`, etc. If enough signal, we switch to `LOCKED_IN`. If they don't, we check `B->nHeight` (which is",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600197165,600197165,src/versionbits.cpp
achow101,2021-03-24 06:10:00,"> Also for my sanity, is the reason the height check is moved from the beginning to the end of this case because we are using `pindexPrev->nHeight + 1`\n\nNo. The height check is moved because BIP 8 specifies that the threshold being reached takes precedence over the timeoutheight being reached. This is because determining whether the threshold is reached would be done at `timeoutheight`. So if ",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600198282,600198282,src/versionbits.cpp
MarcoFalke,2021-03-24 12:35:34,Any reason to not enforce NO_TIMEOUT here?,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600435983,600435983,src/chainparams.cpp
MarcoFalke,2021-03-24 12:41:47,"I know this is just regtest, but an integral type of size 64-bit will be truncated if assigned to an integral type of size 32-bit ",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600440384,600440384,src/chainparams.cpp
MarcoFalke,2021-03-24 12:43:53,Why is this changed?,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600441865,600441865,src/test/fuzz/versionbits.cpp
luke-jr,2021-03-24 15:34:57,"Not well-defined, not very friendly (it's  a max int value), and ignored anyway. (third time addressing this)",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600599585,600599585,src/chainparams.cpp
luke-jr,2021-03-24 15:35:49,Maybe have CheckVBitsHeights check this,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600600405,600600405,src/chainparams.cpp
achow101,2021-03-24 16:37:06,Change these to `int` and changed the parsing to use `ParseInt32` instead. Also added a test for out of range values.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600659716,600659716,src/chainparams.cpp
achow101,2021-03-24 16:37:22,"Bad rebase conflict resolution, reverted.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600659966,600659966,src/test/fuzz/versionbits.cpp
ariard,2021-03-24 22:35:12,nit: `min_activation_height`,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600918273,600918273,src/chainparams.h
ariard,2021-03-24 22:41:41,"""Threshold for lockin. Must be a minimum of block per retarget period""",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600921169,600921169,src/consensus/params.h
sipa,2021-03-24 23:05:30,"In commit ""Migrate versionbits to use height instead of MTP""\n\nNit: feels a bit strange to have this in CChainParams. Maybe put it in versionbits.{h,cpp}?",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600931062,600931062,src/chainparams.h
ariard,2021-03-25 00:06:06,"Do you have test coverage for threshold taking precedence over reaching timeout ? This diff doesn't break `feature_bip8.py`\n\n```\n@@ -77,10 +78,11 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n                     }\n                     pindexCount = pindexCount->pprev;\n                 }\n+                if (height >= height_timeout) {\n+       ",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600953665,600953665,src/versionbits.cpp
ariard,2021-03-25 00:13:19,"I think you should document ""For all blocks after the LOCKED_IN retarget period, if min activation height has been reached"" ?",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600956176,600956176,src/versionbits.h
ariard,2021-03-25 00:20:58,"Maybe display ""min_activation_height"" if relevant (!= 0) ?",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600958804,600958804,src/rpc/blockchain.cpp
sipa,2021-03-25 00:22:34,"In commit ""Migrate versionbits to use height instead of MTP"":\n\nYou could incorporate the later `if (never_active_test) assert(state == ThresholdState::DEFINED);` here as `assert(!never_active_test);`.\n\n(I found this by drawing the finite state machine based on these tests, and noticed this line was missing before noticing it's done explicitly later)",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600959256,600959256,src/test/fuzz/versionbits.cpp
ariard,2021-03-25 00:24:49,"According to BIP 8, ""timeoutheight must be at least 4096 blocks (2 retarget intervals) after startheight"" ?",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600959896,600959896,src/chainparams.cpp
sipa,2021-03-25 00:25:02,"In commit ""Migrate versionbits to use height instead of MTP"":\n\nI believe you should do `assert(exp_state == ThresholdState::FAILED || (exp_state == ThresholdState::STARTED && blocks_sig < threshold));` here instead. As stated, nothing prevents the FSM implementation from going from STARTED->FAILED when the threshold is reached in the last period.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600959952,600959952,src/test/fuzz/versionbits.cpp
ariard,2021-03-25 00:26:29,"I think BIP 8 implies that if min_activation_height is set, it must be superior to start_height. Though not explicit ""minimum_activation_height should be set to several retarget periods in the future if the startheight is to be very soon after software with parameters is expected to be released.""",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600960472,600960472,src/chainparams.cpp
achow101,2021-03-25 00:43:52,"The minimum activation height can be any value, it does not need to be greater than the start_height. If it is less than or equal to the start height, it just means that the locked_in period does not become extended. We use `0` to mean ""no minimum activation height"", but any height less than or equal to the start_height achieves the same effect, and in fact, all are handled the same way.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600966055,600966055,src/chainparams.cpp
achow101,2021-03-25 01:32:50,Fixed,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600981350,600981350,src/chainparams.h
achow101,2021-03-25 01:32:58,Expanded this comment.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600981393,600981393,src/consensus/params.h
achow101,2021-03-25 01:34:55,"A unit test fails, although not because it explicitly tests this behavior. I've added such a test to feature_bip8.py.\n\nHowever this particular diff wouldn't fail because it still moves to `LOCKED_IN` when the threshold is reached. You need to use `else if` in order for the `height >= height_timeout` check to take precedence.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600981966,600981966,src/versionbits.cpp
achow101,2021-03-25 01:35:04,Done,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600981999,600981999,src/versionbits.h
achow101,2021-03-25 01:35:28,Changed to output it always.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600982186,600982186,src/rpc/blockchain.cpp
achow101,2021-03-25 01:35:37,Done.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600982212,600982212,src/chainparams.cpp
achow101,2021-03-25 01:36:44,"Moving it to `versionbits.{h,cpp}` requires adding `versionbits.cpp` to `libbitcoin_common` and this introduces a bunch of other build system issues that I don't want to figure out. I've moved the function out of `CChainParams` though so that it could be moved elsewhere in the future as a move-only.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600982551,600982551,src/chainparams.h
achow101,2021-03-25 01:37:20,"Added the new assert, but I did not remove the later assert as it seems like it is still useful to have that there.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600982730,600982730,src/test/fuzz/versionbits.cpp
achow101,2021-03-25 01:37:37,Done,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r600982858,600982858,src/test/fuzz/versionbits.cpp
luke-jr,2021-03-25 19:37:55,Why? Just one period should be enough...,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r601787443,601787443,src/chainparams.cpp
JeremyRubin,2021-03-25 21:16:16,I think this variable name changed.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r601844921,601844921,src/consensus/params.h
achow101,2021-03-25 21:26:25,Will fix if I retouch.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r601850371,601850371,src/consensus/params.h
luke-jr,2021-03-25 22:35:32,"Probably should either hide this when 0, or use starttime+2*period",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r601882419,601882419,src/rpc/blockchain.cpp
achow101,2021-03-25 22:50:11,"Enforces this sentence in BIP 8:\n\n> timeoutheight must be at least 4096 blocks (2 retarget intervals) after startheight. ",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r601888435,601888435,src/chainparams.cpp
achow101,2021-03-25 22:50:29,I think it's fine to always display.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r601888570,601888570,src/rpc/blockchain.cpp
ajtowns,2021-03-26 00:00:54,That's needed for lot=true/MUST_SIGNAL to work consistently with lot=false. Could also be solved by adding a transition directly from DEFINED to MUST_SIGNAL (skipping STARTED) I think.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r601913537,601913537,src/chainparams.cpp
luke-jr,2021-03-26 03:05:29,"Nah, probably not worth changing. One period is probably crazy anyway. And if we ever do need it, we can add the extra logic for it at that time.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r601986590,601986590,src/chainparams.cpp
MarcoFalke,2021-03-26 08:41:35,"Any reason to use gArgs in the previous line, then m_node.args here? Might be better to just use a local symbol to avoid potentially polluting other tests",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602103259,602103259,src/test/versionbits_tests.cpp
MarcoFalke,2021-03-26 08:42:48,`ForceSetArg` isn't possible on mainnet? (This discussion thread can be closed?),https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602103976,602103976,src/test/versionbits_tests.cpp
MarcoFalke,2021-03-26 08:44:37,"Any reason to not enforce `startheight >= nMinerConfirmationWindow`? Otherwise it is possible to violate the ""2 period rule"" by setting `@0:@288`.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602104995,602104995,src/chainparams.cpp
MarcoFalke,2021-03-26 08:51:28,Then it could be ignored for NEVER as well or what is the reason to treat ALWAYS different from NEVER?,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602109184,602109184,src/chainparams.cpp
MarcoFalke,2021-03-26 09:01:53,Any reason to not assert this transition can't happen?,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602115708,602115708,src/versionbits.cpp
achow101,2021-03-26 16:32:05,"In `GetStateFor`, we are checking that both `startheight` and `timeoutheight` are `NEVER_ACTIVE` in order to return the correct state for never active. It only checks `startheight` is `ALWAYS_ACTIVE` when determining always active. This behavior came from #19573 and I didn't change it. Perhaps @luke-jr or @ajtowns could explain why that is.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602434108,602434108,src/chainparams.cpp
achow101,2021-03-26 16:33:24,I think that's being checked by the test cases.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602434973,602434973,src/versionbits.cpp
achow101,2021-03-26 16:33:33,If I need to retouch,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602435063,602435063,src/test/versionbits_tests.cpp
achow101,2021-03-26 16:33:37,If I need to retouch,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602435134,602435134,src/chainparams.cpp
luke-jr,2021-03-26 17:11:21,"It's simply a non-change from the original BIP9 code.\n\nI don't see a reason to change it here.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602460624,602460624,src/chainparams.cpp
MarcoFalke,2021-03-26 17:49:47,"ALWAYS and NEVER are not specified in any BIP, they are special magic values in our code only (introduced in this pull request). Treating them in the same fashion will be less code, and less code complexity.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602485622,602485622,src/chainparams.cpp
luke-jr,2021-03-26 20:25:04,NO_TIMEOUT is not introduced in this PR. Feel free to refactor in a followup... or achow can do it here if you care so strongly. I don't see that it matters either way.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602567588,602567588,src/chainparams.cpp
achow101,2021-03-26 20:27:31,I think we can leave this for a followup.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602568868,602568868,src/chainparams.cpp
sipa,2021-03-27 01:21:47,"@MarcoFalke I think that the rationale is that NO_TIMEOUT *isn't* a special value (unlike `ALWAYS_ACTIVE` and `NEVER_ACTIVE`), it's just a timestamp very far in the future.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602649296,602649296,src/chainparams.cpp
sipa,2021-03-27 01:22:41,@benthecarman To what?,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602649377,602649377,src/rpc/blockchain.cpp
sipa,2021-03-27 02:15:26,"The fuzz test has all transitions of the state machine implemented (in a ""come from"" form rather than a ""go to"" form). I don't think it's possible to make incorrect transitions that it won't detect.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602655239,602655239,src/versionbits.cpp
benthecarman,2021-03-27 02:16:27,`bip8` or `vbits` since this is no longer a BIP 9 implementation ,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602655356,602655356,src/rpc/blockchain.cpp
sipa,2021-03-27 02:18:27,"Oh, sure, I thought you were talking about ""startheight"". This commit only touches observable names, not internal ones.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602655615,602655615,src/rpc/blockchain.cpp
achow101,2021-03-27 03:35:23,The mass rename is planned for a followup so that this PR is easier to backport.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602662943,602662943,src/rpc/blockchain.cpp
jnewbery,2021-03-28 19:46:59,"Why are you widening height from an `int` (32 bit) to a `int64_t`, and then comparing with `int`s below?",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602923391,602923391,src/versionbits.cpp
jnewbery,2021-03-28 20:00:02,Use docstrings for test description to separate from copyright notice,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602924924,602924924,test/functional/feature_bip8.py
jnewbery,2021-03-28 20:00:20,Separate std library imports from local imports,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602924979,602924979,test/functional/feature_bip8.py
jnewbery,2021-03-28 20:00:59,"f-strings are generally preferred in new tests:\n\n```suggestion\n            [f'-vbparams=testdummy:@144:@{144 * 3}'], # Node 1 has regular activation window\n```",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602925055,602925055,test/functional/feature_bip8.py
jnewbery,2021-03-28 20:02:54,There's a lot of repetition here. You could factor this out into a function.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602925256,602925256,test/functional/feature_bip8.py
jnewbery,2021-03-28 20:13:41,unused,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602926473,602926473,test/functional/feature_bip8.py
jnewbery,2021-03-28 20:14:50,unused,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602926581,602926581,test/functional/feature_bip8.py
jnewbery,2021-03-28 20:40:31,"The warning message emitted when this threshold is reached is ""Warning: unknown new rules activated"", whereas now the threshold being reached really means ""Warning: unknown new rules may be activated soon"" (since 75% doesn't actually indicate that any vbits deployment will activate).\n\nI think it might make sense to remove the `m_vbits_min_threshold` parameter from chain params and set the thre",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602929655,602929655,src/validation.cpp
achow101,2021-03-28 21:28:54,These use this format so that it is easier to backport. 0.21 is using a version python that doesn't support f-strings.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602935148,602935148,test/functional/feature_bip8.py
achow101,2021-03-28 21:30:17,Will fix if I need to retouch.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602935314,602935314,src/versionbits.cpp
achow101,2021-03-28 21:30:40,If I need to retouch,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602935396,602935396,test/functional/feature_bip8.py
achow101,2021-03-28 21:30:44,If I need to retouch,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602935400,602935400,test/functional/feature_bip8.py
achow101,2021-03-28 21:32:00,It's about as repetitive if this were a function IMO.,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602935505,602935505,test/functional/feature_bip8.py
achow101,2021-03-28 21:32:07,If I need to retouch,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602935514,602935514,test/functional/feature_bip8.py
achow101,2021-03-28 21:32:10,If I need to retouch,https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602935529,602935529,test/functional/feature_bip8.py
achow101,2021-03-28 21:32:51,"Perhaps for a followup, or if I retouch.",https://github.com/bitcoin/bitcoin/pull/21392#discussion_r602935581,602935581,src/validation.cpp
