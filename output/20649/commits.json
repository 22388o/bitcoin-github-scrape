[
  {
    "sha": "faaa4f2b6af4ce249fc4809a030240afa45b1a33",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWFhNGYyYjZhZjRjZTI0OWZjNDgwOWEwMzAyNDBhZmE0NWIxYTMz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-02T09:25:05Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-02T09:24:45Z"
      },
      "message": "refactor: Remove nMyStartingHeight from CNode/Connman",
      "tree": {
        "sha": "3a2963ed2a2e2e3f5b34638f7913bc4e00010a1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a2963ed2a2e2e3f5b34638f7913bc4e00010a1e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faaa4f2b6af4ce249fc4809a030240afa45b1a33",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhbXwv/Qav7CLXjw39IqqVP06raDSGFcr1u3GLlOQEvkIcnXTHgZsvVa/YM/NX6\nfiETiM0UWWS8R+zQr/bxOjWUzKjCf88eXa72L+04PV33TW6Aat5bVXf8wwEsbsQR\nXPjhl8iAzCet0w4fwBXUm6TvLRi2wTRuon+d5nqvb7VgwRd5FBsmrT5C20dt71SQ\noLN4qZs4T56P699SJ4KbMMfiZv5qs29TXJsHSN92R+vD170ExG1y5y0UV1gQBVJc\n6xqlWn5rsgzwLeMl1oIu9wgQVaqbEqAmDPeJpv5wQ8l0/qpzEfw/o37hN4btW5h9\nlQxyN/vc3N3aw2AKbsMM6IDfRCZpnv+uafnMNDSyl9RS+Xjf4ekZnhsWCIfSrT5X\nQ6K86NtZt4r/jhXYa84V4LCxv6bK69Vs/uYRmk7b+8mfMjKrHfmrgVts3TzqZtmw\nSMXdZrfs/bP+zBocfntIkAmSHswARuPr2wNE+6VxVf29dDZwIgU2vJPfN+/2uY4R\nKnQjYsTZ\n=d39F\n-----END PGP SIGNATURE-----",
        "payload": "tree 3a2963ed2a2e2e3f5b34638f7913bc4e00010a1e\nparent ae8f79713543d3db24a886cc27340b1570c2657d\nauthor MarcoFalke <falke.marco@gmail.com> 1609579505 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1609579485 +0100\n\nrefactor: Remove nMyStartingHeight from CNode/Connman\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faaa4f2b6af4ce249fc4809a030240afa45b1a33",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faaa4f2b6af4ce249fc4809a030240afa45b1a33",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faaa4f2b6af4ce249fc4809a030240afa45b1a33/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae8f79713543d3db24a886cc27340b1570c2657d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae8f79713543d3db24a886cc27340b1570c2657d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae8f79713543d3db24a886cc27340b1570c2657d"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 33,
      "deletions": 55
    },
    "files": [
      {
        "sha": "42e9925f98c9fccd8db5d49500c7df27bf4b00b9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaa4f2b6af4ce249fc4809a030240afa45b1a33/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaa4f2b6af4ce249fc4809a030240afa45b1a33/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=faaa4f2b6af4ce249fc4809a030240afa45b1a33",
        "patch": "@@ -1894,6 +1894,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n         }\n     }\n     LogPrintf(\"nBestHeight = %d\\n\", chain_active_height);\n+    if (node.peerman) node.peerman->SetBestHeight(chain_active_height);\n \n     Discover();\n \n@@ -1909,7 +1910,6 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     connOptions.m_max_outbound_block_relay = std::min(MAX_BLOCK_RELAY_ONLY_CONNECTIONS, connOptions.nMaxConnections-connOptions.m_max_outbound_full_relay);\n     connOptions.nMaxAddnode = MAX_ADDNODE_CONNECTIONS;\n     connOptions.nMaxFeeler = MAX_FEELER_CONNECTIONS;\n-    connOptions.nBestHeight = chain_active_height;\n     connOptions.uiInterface = &uiInterface;\n     connOptions.m_banman = node.banman.get();\n     connOptions.m_msgproc = node.peerman.get();"
      },
      {
        "sha": "3938a233f0bd96d7dd542cdd7b5c61f1968cc311",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 14,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaa4f2b6af4ce249fc4809a030240afa45b1a33/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaa4f2b6af4ce249fc4809a030240afa45b1a33/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=faaa4f2b6af4ce249fc4809a030240afa45b1a33",
        "patch": "@@ -481,7 +481,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n     NodeId id = GetNewNodeId();\n     uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n     CAddress addr_bind = GetBindAddress(hSocket);\n-    CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", conn_type);\n+    CNode* pnode = new CNode(id, nLocalServices, hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", conn_type);\n     pnode->AddRef();\n \n     // We're making a new connection, harvest entropy from the time (and our peer count)\n@@ -1116,7 +1116,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     }\n \n     const bool inbound_onion = std::find(m_onion_binds.begin(), m_onion_binds.end(), addr_bind) != m_onion_binds.end();\n-    CNode* pnode = new CNode(id, nodeServices, GetBestHeight(), hSocket, addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", ConnectionType::INBOUND, inbound_onion);\n+    CNode* pnode = new CNode(id, nodeServices, hSocket, addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", ConnectionType::INBOUND, inbound_onion);\n     pnode->AddRef();\n     pnode->m_permissionFlags = permissionFlags;\n     pnode->m_prefer_evict = discouraged;\n@@ -2923,19 +2923,9 @@ ServiceFlags CConnman::GetLocalServices() const\n     return nLocalServices;\n }\n \n-void CConnman::SetBestHeight(int height)\n-{\n-    nBestHeight.store(height, std::memory_order_release);\n-}\n-\n-int CConnman::GetBestHeight() const\n-{\n-    return nBestHeight.load(std::memory_order_acquire);\n-}\n-\n unsigned int CConnman::GetReceiveFloodSize() const { return nReceiveFloodSize; }\n \n-CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress& addrBindIn, const std::string& addrNameIn, ConnectionType conn_type_in, bool inbound_onion)\n+CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress& addrBindIn, const std::string& addrNameIn, ConnectionType conn_type_in, bool inbound_onion)\n     : nTimeConnected(GetSystemTimeInSeconds()),\n       addr(addrIn),\n       addrBind(addrBindIn),\n@@ -2944,7 +2934,6 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n       nLocalHostNonce(nLocalHostNonceIn),\n       m_conn_type(conn_type_in),\n       nLocalServices(nLocalServicesIn),\n-      nMyStartingHeight(nMyStartingHeightIn),\n       m_inbound_onion(inbound_onion)\n {\n     if (inbound_onion) assert(conn_type_in == ConnectionType::INBOUND);"
      },
      {
        "sha": "3c51a53c47455a870ccde68963ffe26c92faf79b",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 12,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaa4f2b6af4ce249fc4809a030240afa45b1a33/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaa4f2b6af4ce249fc4809a030240afa45b1a33/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=faaa4f2b6af4ce249fc4809a030240afa45b1a33",
        "patch": "@@ -200,7 +200,6 @@ class CConnman\n         int m_max_outbound_block_relay = 0;\n         int nMaxAddnode = 0;\n         int nMaxFeeler = 0;\n-        int nBestHeight = 0;\n         CClientUIInterface* uiInterface = nullptr;\n         NetEventsInterface* m_msgproc = nullptr;\n         BanMan* m_banman = nullptr;\n@@ -228,7 +227,6 @@ class CConnman\n         nMaxAddnode = connOptions.nMaxAddnode;\n         nMaxFeeler = connOptions.nMaxFeeler;\n         m_max_outbound = m_max_outbound_full_relay + m_max_outbound_block_relay + nMaxFeeler;\n-        nBestHeight = connOptions.nBestHeight;\n         clientInterface = connOptions.uiInterface;\n         m_banman = connOptions.m_banman;\n         m_msgproc = connOptions.m_msgproc;\n@@ -382,9 +380,6 @@ class CConnman\n     uint64_t GetTotalBytesRecv();\n     uint64_t GetTotalBytesSent();\n \n-    void SetBestHeight(int height);\n-    int GetBestHeight() const;\n-\n     /** Get a unique deterministic randomizer. */\n     CSipHasher GetDeterministicRandomizer(uint64_t id) const;\n \n@@ -559,7 +554,6 @@ class CConnman\n     int nMaxFeeler;\n     int m_max_outbound;\n     bool m_use_addrman_outgoing;\n-    std::atomic<int> nBestHeight;\n     CClientUIInterface* clientInterface;\n     NetEventsInterface* m_msgproc;\n     /** Pointer to this node's banman. May be nullptr - check existence before dereferencing. */\n@@ -1056,7 +1050,7 @@ class CNode\n     // Whether a ping is requested.\n     std::atomic<bool> fPingQueued{false};\n \n-    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn, ConnectionType conn_type_in, bool inbound_onion = false);\n+    CNode(NodeId id, ServiceFlags nLocalServicesIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress& addrBindIn, const std::string& addrNameIn, ConnectionType conn_type_in, bool inbound_onion = false);\n     ~CNode();\n     CNode(const CNode&) = delete;\n     CNode& operator=(const CNode&) = delete;\n@@ -1084,7 +1078,6 @@ class CNode\n     //! service advertisements.\n     const ServiceFlags nLocalServices;\n \n-    const int nMyStartingHeight;\n     NetPermissionFlags m_permissionFlags{ PF_NONE };\n     std::list<CNetMessage> vRecvMsg;  // Used only by SocketHandler thread\n \n@@ -1108,10 +1101,6 @@ class CNode\n         return nLocalHostNonce;\n     }\n \n-    int GetMyStartingHeight() const {\n-        return nMyStartingHeight;\n-    }\n-\n     int GetRefCount() const\n     {\n         assert(nRefCount >= 0);"
      },
      {
        "sha": "dc9b051dddf9330ee4aa39dfa83eafea7031ba19",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaa4f2b6af4ce249fc4809a030240afa45b1a33/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaa4f2b6af4ce249fc4809a030240afa45b1a33/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=faaa4f2b6af4ce249fc4809a030240afa45b1a33",
        "patch": "@@ -690,7 +690,7 @@ void PeerManager::PushNodeVersion(CNode& pnode, int64_t nTime)\n     // peer.\n     ServiceFlags nLocalNodeServices = pnode.GetLocalServices();\n     uint64_t nonce = pnode.GetLocalNonce();\n-    int nNodeStartingHeight = pnode.GetMyStartingHeight();\n+    const int nNodeStartingHeight{m_best_height};\n     NodeId nodeid = pnode.GetId();\n     CAddress addr = pnode.addr;\n \n@@ -1294,8 +1294,9 @@ void PeerManager::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_\n  * Update our best height and announce any block hashes which weren't previously\n  * in ::ChainActive() to our peers.\n  */\n-void PeerManager::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n-    m_connman.SetBestHeight(pindexNew->nHeight);\n+void PeerManager::UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+{\n+    m_best_height = pindexNew->nHeight;\n     SetServiceFlagsIBDCache(!fInitialDownload);\n \n     // Don't relay inventory during initial block download."
      },
      {
        "sha": "4f2a779f68e56fa54e2e96150d3f8c183713ef4d",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaa4f2b6af4ce249fc4809a030240afa45b1a33/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaa4f2b6af4ce249fc4809a030240afa45b1a33/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=faaa4f2b6af4ce249fc4809a030240afa45b1a33",
        "patch": "@@ -160,8 +160,11 @@ class PeerManager final : public CValidationInterface, public NetEventsInterface\n     /** Get statistics from node state */\n     bool GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats);\n \n+    /** Set the best height */\n+    void SetBestHeight(int height) { m_best_height = height; };\n+\n     /** Whether this node ignores txs received over p2p. */\n-    bool IgnoresIncomingTxs() {return m_ignore_incoming_txs;};\n+    bool IgnoresIncomingTxs() { return m_ignore_incoming_txs; };\n \n private:\n     /** Get a shared pointer to the Peer object.\n@@ -224,9 +227,12 @@ class PeerManager final : public CValidationInterface, public NetEventsInterface\n     CTxMemPool& m_mempool;\n     TxRequestTracker m_txrequest GUARDED_BY(::cs_main);\n \n+    /** The height of the best chain */\n+    std::atomic<int> m_best_height{-1};\n+\n     int64_t m_stale_tip_check_time; //!< Next time to check for stale tip\n \n-    //* Whether this node is running in blocks only mode */\n+    /** Whether this node is running in blocks only mode */\n     const bool m_ignore_incoming_txs;\n \n     /** Whether we've completed initial sync yet, for determining when to turn"
      },
      {
        "sha": "d926f8d76790a628b338832957608f7ca9232036",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaa4f2b6af4ce249fc4809a030240afa45b1a33/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaa4f2b6af4ce249fc4809a030240afa45b1a33/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=faaa4f2b6af4ce249fc4809a030240afa45b1a33",
        "patch": "@@ -85,7 +85,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n \n     // Mock an outbound peer\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, ServiceFlags(NODE_NETWORK | NODE_WITNESS), 0, INVALID_SOCKET, addr1, 0, 0, CAddress(), \"\", ConnectionType::OUTBOUND_FULL_RELAY);\n+    CNode dummyNode1(id++, ServiceFlags(NODE_NETWORK | NODE_WITNESS), INVALID_SOCKET, addr1, 0, 0, CAddress(), \"\", ConnectionType::OUTBOUND_FULL_RELAY);\n     dummyNode1.SetCommonVersion(PROTOCOL_VERSION);\n \n     peerLogic->InitializeNode(&dummyNode1);\n@@ -136,7 +136,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n static void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerManager &peerLogic, CConnmanTest* connman)\n {\n     CAddress addr(ip(g_insecure_rand_ctx.randbits(32)), NODE_NONE);\n-    vNodes.emplace_back(new CNode(id++, ServiceFlags(NODE_NETWORK | NODE_WITNESS), 0, INVALID_SOCKET, addr, 0, 0, CAddress(), \"\", ConnectionType::OUTBOUND_FULL_RELAY));\n+    vNodes.emplace_back(new CNode(id++, ServiceFlags(NODE_NETWORK | NODE_WITNESS), INVALID_SOCKET, addr, 0, 0, CAddress(), \"\", ConnectionType::OUTBOUND_FULL_RELAY));\n     CNode &node = *vNodes.back();\n     node.SetCommonVersion(PROTOCOL_VERSION);\n \n@@ -229,7 +229,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n \n     banman->ClearBanned();\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 0, 0, CAddress(), \"\", ConnectionType::INBOUND);\n+    CNode dummyNode1(id++, NODE_NETWORK, INVALID_SOCKET, addr1, 0, 0, CAddress(), \"\", ConnectionType::INBOUND);\n     dummyNode1.SetCommonVersion(PROTOCOL_VERSION);\n     peerLogic->InitializeNode(&dummyNode1);\n     dummyNode1.fSuccessfullyConnected = true;\n@@ -242,7 +242,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     BOOST_CHECK(!banman->IsDiscouraged(ip(0xa0b0c001|0x0000ff00))); // Different IP, not discouraged\n \n     CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n-    CNode dummyNode2(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr2, 1, 1, CAddress(), \"\", ConnectionType::INBOUND);\n+    CNode dummyNode2(id++, NODE_NETWORK, INVALID_SOCKET, addr2, 1, 1, CAddress(), \"\", ConnectionType::INBOUND);\n     dummyNode2.SetCommonVersion(PROTOCOL_VERSION);\n     peerLogic->InitializeNode(&dummyNode2);\n     dummyNode2.fSuccessfullyConnected = true;\n@@ -279,7 +279,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     SetMockTime(nStartTime); // Overrides future calls to GetTime()\n \n     CAddress addr(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr, 4, 4, CAddress(), \"\", ConnectionType::INBOUND);\n+    CNode dummyNode(id++, NODE_NETWORK, INVALID_SOCKET, addr, 4, 4, CAddress(), \"\", ConnectionType::INBOUND);\n     dummyNode.SetCommonVersion(PROTOCOL_VERSION);\n     peerLogic->InitializeNode(&dummyNode);\n     dummyNode.fSuccessfullyConnected = true;"
      },
      {
        "sha": "7621751077081a693622589fe9f8cfeb3e04e77a",
        "filename": "src/test/fuzz/connman.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaa4f2b6af4ce249fc4809a030240afa45b1a33/src/test/fuzz/connman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaa4f2b6af4ce249fc4809a030240afa45b1a33/src/test/fuzz/connman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/connman.cpp?ref=faaa4f2b6af4ce249fc4809a030240afa45b1a33",
        "patch": "@@ -32,7 +32,7 @@ FUZZ_TARGET_INIT(connman, initialize_connman)\n     CSubNet random_subnet;\n     std::string random_string;\n     while (fuzzed_data_provider.ConsumeBool()) {\n-        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 28)) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 27)) {\n         case 0:\n             random_address = ConsumeAddress(fuzzed_data_provider);\n             break;\n@@ -125,21 +125,17 @@ FUZZ_TARGET_INIT(connman, initialize_connman)\n             break;\n         }\n         case 25:\n-            connman.SetBestHeight(fuzzed_data_provider.ConsumeIntegral<int>());\n-            break;\n-        case 26:\n             connman.SetNetworkActive(fuzzed_data_provider.ConsumeBool());\n             break;\n-        case 27:\n+        case 26:\n             connman.SetServices(random_service, static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()));\n             break;\n-        case 28:\n+        case 27:\n             connman.SetTryNewOutboundPeer(fuzzed_data_provider.ConsumeBool());\n             break;\n         }\n     }\n     (void)connman.GetAddedNodeInfo();\n-    (void)connman.GetBestHeight();\n     (void)connman.GetExtraFullOutboundCount();\n     (void)connman.GetLocalServices();\n     (void)connman.GetMaxOutboundTarget();"
      },
      {
        "sha": "ec02cf94e9b4fa15bc3963ab7af7e9c8e3559226",
        "filename": "src/test/fuzz/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaa4f2b6af4ce249fc4809a030240afa45b1a33/src/test/fuzz/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaa4f2b6af4ce249fc4809a030240afa45b1a33/src/test/fuzz/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/net.cpp?ref=faaa4f2b6af4ce249fc4809a030240afa45b1a33",
        "patch": "@@ -117,7 +117,6 @@ FUZZ_TARGET_INIT(net, initialize_net)\n     (void)node.GetId();\n     (void)node.GetLocalNonce();\n     (void)node.GetLocalServices();\n-    (void)node.GetMyStartingHeight();\n     const int ref_count = node.GetRefCount();\n     assert(ref_count >= 0);\n     (void)node.GetCommonVersion();"
      },
      {
        "sha": "97e2b04a7d06dae76f22f131b229b0bbf7944a87",
        "filename": "src/test/fuzz/process_message.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaa4f2b6af4ce249fc4809a030240afa45b1a33/src/test/fuzz/process_message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaa4f2b6af4ce249fc4809a030240afa45b1a33/src/test/fuzz/process_message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_message.cpp?ref=faaa4f2b6af4ce249fc4809a030240afa45b1a33",
        "patch": "@@ -64,7 +64,7 @@ void fuzz_target(const std::vector<uint8_t>& buffer, const std::string& LIMIT_TO\n     const bool jump_out_of_ibd{fuzzed_data_provider.ConsumeBool()};\n     if (jump_out_of_ibd) chainstate.JumpOutOfIbd();\n     CDataStream random_bytes_data_stream{fuzzed_data_provider.ConsumeRemainingBytes<unsigned char>(), SER_NETWORK, PROTOCOL_VERSION};\n-    CNode& p2p_node = *MakeUnique<CNode>(0, ServiceFlags(NODE_NETWORK | NODE_WITNESS | NODE_BLOOM), 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, ConnectionType::OUTBOUND_FULL_RELAY).release();\n+    CNode& p2p_node = *MakeUnique<CNode>(0, ServiceFlags(NODE_NETWORK | NODE_WITNESS | NODE_BLOOM), INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, ConnectionType::OUTBOUND_FULL_RELAY).release();\n     p2p_node.fSuccessfullyConnected = true;\n     p2p_node.nVersion = PROTOCOL_VERSION;\n     p2p_node.SetCommonVersion(PROTOCOL_VERSION);"
      },
      {
        "sha": "0ff95ea1ae99e1b75c5629baa9da1c43f2fc8f98",
        "filename": "src/test/fuzz/process_messages.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaa4f2b6af4ce249fc4809a030240afa45b1a33/src/test/fuzz/process_messages.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaa4f2b6af4ce249fc4809a030240afa45b1a33/src/test/fuzz/process_messages.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_messages.cpp?ref=faaa4f2b6af4ce249fc4809a030240afa45b1a33",
        "patch": "@@ -49,7 +49,7 @@ FUZZ_TARGET_INIT(process_messages, initialize_process_messages)\n     for (int i = 0; i < num_peers_to_add; ++i) {\n         const ServiceFlags service_flags = ServiceFlags(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n         const ConnectionType conn_type = fuzzed_data_provider.PickValueInArray({ConnectionType::INBOUND, ConnectionType::OUTBOUND_FULL_RELAY, ConnectionType::MANUAL, ConnectionType::FEELER, ConnectionType::BLOCK_RELAY, ConnectionType::ADDR_FETCH});\n-        peers.push_back(MakeUnique<CNode>(i, service_flags, 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, conn_type).release());\n+        peers.push_back(MakeUnique<CNode>(i, service_flags, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, conn_type).release());\n         CNode& p2p_node = *peers.back();\n \n         p2p_node.fSuccessfullyConnected = true;"
      },
      {
        "sha": "ff79dfe5f3c93ea034f34a6b2889e28874c4e379",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaa4f2b6af4ce249fc4809a030240afa45b1a33/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaa4f2b6af4ce249fc4809a030240afa45b1a33/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=faaa4f2b6af4ce249fc4809a030240afa45b1a33",
        "patch": "@@ -290,7 +290,6 @@ inline CNode ConsumeNode(FuzzedDataProvider& fuzzed_data_provider) noexcept\n {\n     const NodeId node_id = fuzzed_data_provider.ConsumeIntegral<NodeId>();\n     const ServiceFlags local_services = static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n-    const int my_starting_height = fuzzed_data_provider.ConsumeIntegral<int>();\n     const SOCKET socket = INVALID_SOCKET;\n     const CAddress address = ConsumeAddress(fuzzed_data_provider);\n     const uint64_t keyed_net_group = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n@@ -299,7 +298,7 @@ inline CNode ConsumeNode(FuzzedDataProvider& fuzzed_data_provider) noexcept\n     const std::string addr_name = fuzzed_data_provider.ConsumeRandomLengthString(64);\n     const ConnectionType conn_type = fuzzed_data_provider.PickValueInArray({ConnectionType::INBOUND, ConnectionType::OUTBOUND_FULL_RELAY, ConnectionType::MANUAL, ConnectionType::FEELER, ConnectionType::BLOCK_RELAY, ConnectionType::ADDR_FETCH});\n     const bool inbound_onion{conn_type == ConnectionType::INBOUND ? fuzzed_data_provider.ConsumeBool() : false};\n-    return {node_id, local_services, my_starting_height, socket, address, keyed_net_group, local_host_nonce, addr_bind, addr_name, conn_type, inbound_onion};\n+    return {node_id, local_services, socket, address, keyed_net_group, local_host_nonce, addr_bind, addr_name, conn_type, inbound_onion};\n }\n \n inline void InitializeFuzzingContext(const std::string& chain_name = CBaseChainParams::REGTEST)"
      },
      {
        "sha": "a1b41e17ed6532e8366142e25d5db7163eee14c8",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaa4f2b6af4ce249fc4809a030240afa45b1a33/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaa4f2b6af4ce249fc4809a030240afa45b1a33/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=faaa4f2b6af4ce249fc4809a030240afa45b1a33",
        "patch": "@@ -181,7 +181,6 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n {\n     SOCKET hSocket = INVALID_SOCKET;\n     NodeId id = 0;\n-    int height = 0;\n \n     in_addr ipv4Addr;\n     ipv4Addr.s_addr = 0xa0b0c001;\n@@ -190,7 +189,7 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     std::string pszDest;\n \n     std::unique_ptr<CNode> pnode1 = MakeUnique<CNode>(\n-        id++, NODE_NETWORK, height, hSocket, addr,\n+        id++, NODE_NETWORK, hSocket, addr,\n         /* nKeyedNetGroupIn = */ 0,\n         /* nLocalHostNonceIn = */ 0,\n         CAddress(), pszDest, ConnectionType::OUTBOUND_FULL_RELAY);\n@@ -204,7 +203,7 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     BOOST_CHECK_EQUAL(pnode1->ConnectedThroughNetwork(), Network::NET_IPV4);\n \n     std::unique_ptr<CNode> pnode2 = MakeUnique<CNode>(\n-        id++, NODE_NETWORK, height, hSocket, addr,\n+        id++, NODE_NETWORK, hSocket, addr,\n         /* nKeyedNetGroupIn = */ 1,\n         /* nLocalHostNonceIn = */ 1,\n         CAddress(), pszDest, ConnectionType::INBOUND,\n@@ -219,7 +218,7 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     BOOST_CHECK_EQUAL(pnode2->ConnectedThroughNetwork(), Network::NET_IPV4);\n \n     std::unique_ptr<CNode> pnode3 = MakeUnique<CNode>(\n-        id++, NODE_NETWORK, height, hSocket, addr,\n+        id++, NODE_NETWORK, hSocket, addr,\n         /* nKeyedNetGroupIn = */ 0,\n         /* nLocalHostNonceIn = */ 0,\n         CAddress(), pszDest, ConnectionType::OUTBOUND_FULL_RELAY,\n@@ -234,7 +233,7 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     BOOST_CHECK_EQUAL(pnode3->ConnectedThroughNetwork(), Network::NET_IPV4);\n \n     std::unique_ptr<CNode> pnode4 = MakeUnique<CNode>(\n-        id++, NODE_NETWORK, height, hSocket, addr,\n+        id++, NODE_NETWORK, hSocket, addr,\n         /* nKeyedNetGroupIn = */ 1,\n         /* nLocalHostNonceIn = */ 1,\n         CAddress(), pszDest, ConnectionType::INBOUND,\n@@ -680,7 +679,7 @@ BOOST_AUTO_TEST_CASE(ipv4_peer_with_ipv6_addrMe_test)\n     in_addr ipv4AddrPeer;\n     ipv4AddrPeer.s_addr = 0xa0b0c001;\n     CAddress addr = CAddress(CService(ipv4AddrPeer, 7777), NODE_NETWORK);\n-    std::unique_ptr<CNode> pnode = MakeUnique<CNode>(0, NODE_NETWORK, 0, INVALID_SOCKET, addr, 0, 0, CAddress{}, std::string{}, ConnectionType::OUTBOUND_FULL_RELAY);\n+    std::unique_ptr<CNode> pnode = MakeUnique<CNode>(0, NODE_NETWORK, INVALID_SOCKET, addr, 0, 0, CAddress{}, std::string{}, ConnectionType::OUTBOUND_FULL_RELAY);\n     pnode->fSuccessfullyConnected.store(true);\n \n     // the peer claims to be reaching us via IPv6"
      }
    ]
  }
]