[
  {
    "sha": "ba206d2c63a8d3cbd4a8dd47e9ef126af1bb3bb9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTIwNmQyYzYzYThkM2NiZDRhOGRkNDdlOWVmMTI2YWYxYmIzYmI5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-24T15:36:07Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-09-11T19:51:25Z"
      },
      "message": "Deprecate confusing blockmaxsize, fix getmininginfo output\n\n* This removes block-size-limiting code in favor of GBT clients\n  doing the limiting themselves (if at all).\n* -blockmaxsize is deprecated and only used to calculate an implied\n  blockmaxweight, addressing confusion from multiple users.\n* getmininginfo's currentblocksize return value was returning\n  garbage values, and has been removed, also removing a\n  GetSerializeSize call in some block generation inner loops and\n  potentially addressing some performance edge cases.",
      "tree": {
        "sha": "ae365cb374d581224b5fee69629e4f235f0d71f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae365cb374d581224b5fee69629e4f235f0d71f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba206d2c63a8d3cbd4a8dd47e9ef126af1bb3bb9",
      "comment_count": 2,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba206d2c63a8d3cbd4a8dd47e9ef126af1bb3bb9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba206d2c63a8d3cbd4a8dd47e9ef126af1bb3bb9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba206d2c63a8d3cbd4a8dd47e9ef126af1bb3bb9/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31e72b284ef54c4c221015c8d700946c6143fb7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31e72b284ef54c4c221015c8d700946c6143fb7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31e72b284ef54c4c221015c8d700946c6143fb7a"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 13,
      "deletions": 46
    },
    "files": [
      {
        "sha": "3166098cace6fb57781ecc0044d2a6fc61af4832",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba206d2c63a8d3cbd4a8dd47e9ef126af1bb3bb9/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba206d2c63a8d3cbd4a8dd47e9ef126af1bb3bb9/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ba206d2c63a8d3cbd4a8dd47e9ef126af1bb3bb9",
        "patch": "@@ -484,7 +484,7 @@ std::string HelpMessage(HelpMessageMode mode)\n \n     strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n     strUsage += HelpMessageOpt(\"-blockmaxweight=<n>\", strprintf(_(\"Set maximum BIP141 block weight (default: %d)\"), DEFAULT_BLOCK_MAX_WEIGHT));\n-    strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE));\n+    strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", _(\"Set maximum BIP141 block weight to this * 4. Deprecated, use blockmaxweight\"));\n     strUsage += HelpMessageOpt(\"-blockmintxfee=<amt>\", strprintf(_(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\"), CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-blockversion=<n>\", \"Override block version to test forking scenarios\");\n@@ -785,6 +785,15 @@ void InitParameterInteraction()\n         if (gArgs.SoftSetBoolArg(\"-whitelistrelay\", true))\n             LogPrintf(\"%s: parameter interaction: -whitelistforcerelay=1 -> setting -whitelistrelay=1\\n\", __func__);\n     }\n+\n+    if (gArgs.IsArgSet(\"-blockmaxsize\")) {\n+        unsigned int max_size = gArgs.GetArg(\"-blockmaxsize\", 0);\n+        if (gArgs.SoftSetArg(\"blockmaxweight\", strprintf(\"%d\", max_size * WITNESS_SCALE_FACTOR))) {\n+            LogPrintf(\"%s: parameter interaction: -blockmaxsize=%d -> setting -blockmaxweight=%d (-blockmaxsize is deprecated!)\\n\", __func__, max_size, max_size * WITNESS_SCALE_FACTOR);\n+        } else {\n+            LogPrintf(\"%s: Ignoring blockmaxsize setting which is overridden by blockmaxweight\", __func__);\n+        }\n+    }\n }\n \n static std::string ResolveErrMsg(const char * const optname, const std::string& strBind)"
      },
      {
        "sha": "a9989f4b1723614836e4cb8fd970dd019fe88ed8",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 36,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba206d2c63a8d3cbd4a8dd47e9ef126af1bb3bb9/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba206d2c63a8d3cbd4a8dd47e9ef126af1bb3bb9/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=ba206d2c63a8d3cbd4a8dd47e9ef126af1bb3bb9",
        "patch": "@@ -43,7 +43,6 @@\n // its ancestors.\n \n uint64_t nLastBlockTx = 0;\n-uint64_t nLastBlockSize = 0;\n uint64_t nLastBlockWeight = 0;\n \n int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n@@ -64,18 +63,13 @@ int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParam\n BlockAssembler::Options::Options() {\n     blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);\n     nBlockMaxWeight = DEFAULT_BLOCK_MAX_WEIGHT;\n-    nBlockMaxSize = DEFAULT_BLOCK_MAX_SIZE;\n }\n \n BlockAssembler::BlockAssembler(const CChainParams& params, const Options& options) : chainparams(params)\n {\n     blockMinFeeRate = options.blockMinFeeRate;\n     // Limit weight to between 4K and MAX_BLOCK_WEIGHT-4K for sanity:\n     nBlockMaxWeight = std::max<size_t>(4000, std::min<size_t>(MAX_BLOCK_WEIGHT - 4000, options.nBlockMaxWeight));\n-    // Limit size to between 1K and MAX_BLOCK_SERIALIZED_SIZE-1K for sanity:\n-    nBlockMaxSize = std::max<size_t>(1000, std::min<size_t>(MAX_BLOCK_SERIALIZED_SIZE - 1000, options.nBlockMaxSize));\n-    // Whether we need to account for byte usage (in addition to weight usage)\n-    fNeedSizeAccounting = (nBlockMaxSize < MAX_BLOCK_SERIALIZED_SIZE - 1000);\n }\n \n static BlockAssembler::Options DefaultOptions(const CChainParams& params)\n@@ -85,20 +79,7 @@ static BlockAssembler::Options DefaultOptions(const CChainParams& params)\n     // If only one is given, only restrict the specified resource.\n     // If both are given, restrict both.\n     BlockAssembler::Options options;\n-    options.nBlockMaxWeight = DEFAULT_BLOCK_MAX_WEIGHT;\n-    options.nBlockMaxSize = DEFAULT_BLOCK_MAX_SIZE;\n-    bool fWeightSet = false;\n-    if (gArgs.IsArgSet(\"-blockmaxweight\")) {\n-        options.nBlockMaxWeight = gArgs.GetArg(\"-blockmaxweight\", DEFAULT_BLOCK_MAX_WEIGHT);\n-        options.nBlockMaxSize = MAX_BLOCK_SERIALIZED_SIZE;\n-        fWeightSet = true;\n-    }\n-    if (gArgs.IsArgSet(\"-blockmaxsize\")) {\n-        options.nBlockMaxSize = gArgs.GetArg(\"-blockmaxsize\", DEFAULT_BLOCK_MAX_SIZE);\n-        if (!fWeightSet) {\n-            options.nBlockMaxWeight = options.nBlockMaxSize * WITNESS_SCALE_FACTOR;\n-        }\n-    }\n+    options.nBlockMaxWeight = gArgs.GetArg(\"-blockmaxweight\", DEFAULT_BLOCK_MAX_WEIGHT);\n     if (gArgs.IsArgSet(\"-blockmintxfee\")) {\n         CAmount n = 0;\n         ParseMoney(gArgs.GetArg(\"-blockmintxfee\", \"\"), n);\n@@ -116,7 +97,6 @@ void BlockAssembler::resetBlock()\n     inBlock.clear();\n \n     // Reserve space for coinbase tx\n-    nBlockSize = 1000;\n     nBlockWeight = 4000;\n     nBlockSigOpsCost = 400;\n     fIncludeWitness = false;\n@@ -176,7 +156,6 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     int64_t nTime1 = GetTimeMicros();\n \n     nLastBlockTx = nBlockTx;\n-    nLastBlockSize = nBlockSize;\n     nLastBlockWeight = nBlockWeight;\n \n     // Create coinbase transaction.\n@@ -191,8 +170,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     pblocktemplate->vchCoinbaseCommitment = GenerateCoinbaseCommitment(*pblock, pindexPrev, chainparams.GetConsensus());\n     pblocktemplate->vTxFees[0] = -nFees;\n \n-    uint64_t nSerializeSize = GetSerializeSize(*pblock, SER_NETWORK, PROTOCOL_VERSION);\n-    LogPrintf(\"CreateNewBlock(): total size: %u block weight: %u txs: %u fees: %ld sigops %d\\n\", nSerializeSize, GetBlockWeight(*pblock), nBlockTx, nFees, nBlockSigOpsCost);\n+    LogPrintf(\"CreateNewBlock(): block weight: %u txs: %u fees: %ld sigops %d\\n\", GetBlockWeight(*pblock), nBlockTx, nFees, nBlockSigOpsCost);\n \n     // Fill in header\n     pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n@@ -239,22 +217,13 @@ bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost\n // - transaction finality (locktime)\n // - premature witness (in case segwit transactions are added to mempool before\n //   segwit activation)\n-// - serialized size (in case -blockmaxsize is in use)\n bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package)\n {\n-    uint64_t nPotentialBlockSize = nBlockSize; // only used with fNeedSizeAccounting\n     for (const CTxMemPool::txiter it : package) {\n         if (!IsFinalTx(it->GetTx(), nHeight, nLockTimeCutoff))\n             return false;\n         if (!fIncludeWitness && it->GetTx().HasWitness())\n             return false;\n-        if (fNeedSizeAccounting) {\n-            uint64_t nTxSize = ::GetSerializeSize(it->GetTx(), SER_NETWORK, PROTOCOL_VERSION);\n-            if (nPotentialBlockSize + nTxSize >= nBlockMaxSize) {\n-                return false;\n-            }\n-            nPotentialBlockSize += nTxSize;\n-        }\n     }\n     return true;\n }\n@@ -264,9 +233,6 @@ void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n     pblock->vtx.emplace_back(iter->GetSharedTx());\n     pblocktemplate->vTxFees.push_back(iter->GetFee());\n     pblocktemplate->vTxSigOpsCost.push_back(iter->GetSigOpCost());\n-    if (fNeedSizeAccounting) {\n-        nBlockSize += ::GetSerializeSize(iter->GetTx(), SER_NETWORK, PROTOCOL_VERSION);\n-    }\n     nBlockWeight += iter->GetTxWeight();\n     ++nBlockTx;\n     nBlockSigOpsCost += iter->GetSigOpCost();"
      },
      {
        "sha": "683f4fe08568f253ba5c8bae22e56bcc645085b4",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba206d2c63a8d3cbd4a8dd47e9ef126af1bb3bb9/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba206d2c63a8d3cbd4a8dd47e9ef126af1bb3bb9/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=ba206d2c63a8d3cbd4a8dd47e9ef126af1bb3bb9",
        "patch": "@@ -139,13 +139,11 @@ class BlockAssembler\n \n     // Configuration parameters for the block size\n     bool fIncludeWitness;\n-    unsigned int nBlockMaxWeight, nBlockMaxSize;\n-    bool fNeedSizeAccounting;\n+    unsigned int nBlockMaxWeight;\n     CFeeRate blockMinFeeRate;\n \n     // Information on the current status of the block\n     uint64_t nBlockWeight;\n-    uint64_t nBlockSize;\n     uint64_t nBlockTx;\n     uint64_t nBlockSigOpsCost;\n     CAmount nFees;"
      },
      {
        "sha": "702471383426b77adf735d6b15de7299d6c2984b",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba206d2c63a8d3cbd4a8dd47e9ef126af1bb3bb9/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba206d2c63a8d3cbd4a8dd47e9ef126af1bb3bb9/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=ba206d2c63a8d3cbd4a8dd47e9ef126af1bb3bb9",
        "patch": "@@ -16,8 +16,6 @@\n class CCoinsViewCache;\n class CTxOut;\n \n-/** Default for -blockmaxsize, which controls the maximum size of block the mining code will create **/\n-static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n /** Default for -blockmaxweight, which controls the range of block weights the mining code will create **/\n static const unsigned int DEFAULT_BLOCK_MAX_WEIGHT = 3000000;\n /** Default for -blockmintxfee, which sets the minimum feerate for a transaction in blocks created by mining code **/"
      },
      {
        "sha": "c54dc740704fd3a1c4b034db49dbfb58e1aaa226",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba206d2c63a8d3cbd4a8dd47e9ef126af1bb3bb9/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba206d2c63a8d3cbd4a8dd47e9ef126af1bb3bb9/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=ba206d2c63a8d3cbd4a8dd47e9ef126af1bb3bb9",
        "patch": "@@ -196,7 +196,6 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"blocks\\\": nnn,             (numeric) The current block\\n\"\n-            \"  \\\"currentblocksize\\\": nnn,   (numeric) The last block size\\n\"\n             \"  \\\"currentblockweight\\\": nnn, (numeric) The last block weight\\n\"\n             \"  \\\"currentblocktx\\\": nnn,     (numeric) The last block transaction\\n\"\n             \"  \\\"difficulty\\\": xxx.xxxxx    (numeric) The current difficulty\\n\"\n@@ -215,7 +214,6 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n \n     UniValue obj(UniValue::VOBJ);\n     obj.push_back(Pair(\"blocks\",           (int)chainActive.Height()));\n-    obj.push_back(Pair(\"currentblocksize\", (uint64_t)nLastBlockSize));\n     obj.push_back(Pair(\"currentblockweight\", (uint64_t)nLastBlockWeight));\n     obj.push_back(Pair(\"currentblocktx\",   (uint64_t)nLastBlockTx));\n     obj.push_back(Pair(\"difficulty\",       (double)GetDifficulty()));"
      },
      {
        "sha": "aa4d7abb4eda35fd2a5adfebfaa39d3a9f4582a8",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba206d2c63a8d3cbd4a8dd47e9ef126af1bb3bb9/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba206d2c63a8d3cbd4a8dd47e9ef126af1bb3bb9/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=ba206d2c63a8d3cbd4a8dd47e9ef126af1bb3bb9",
        "patch": "@@ -161,7 +161,6 @@ extern CTxMemPool mempool;\n typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n extern BlockMap mapBlockIndex;\n extern uint64_t nLastBlockTx;\n-extern uint64_t nLastBlockSize;\n extern uint64_t nLastBlockWeight;\n extern const std::string strMessageMagic;\n extern CWaitableCriticalSection csBestBlock;"
      },
      {
        "sha": "c8fb1062b78b8b13525736adddde9482d01f5c3a",
        "filename": "test/functional/mining.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba206d2c63a8d3cbd4a8dd47e9ef126af1bb3bb9/test/functional/mining.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba206d2c63a8d3cbd4a8dd47e9ef126af1bb3bb9/test/functional/mining.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining.py?ref=ba206d2c63a8d3cbd4a8dd47e9ef126af1bb3bb9",
        "patch": "@@ -38,7 +38,6 @@ def run_test(self):\n         mining_info = node.getmininginfo()\n         assert_equal(mining_info['blocks'], 200)\n         assert_equal(mining_info['chain'], 'regtest')\n-        assert_equal(mining_info['currentblocksize'], 0)\n         assert_equal(mining_info['currentblocktx'], 0)\n         assert_equal(mining_info['currentblockweight'], 0)\n         assert_equal(mining_info['difficulty'], Decimal('4.656542373906925E-10'))"
      }
    ]
  },
  {
    "sha": "3dc263c9b9068ee9793b6c7a0023eff16d70fb8f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZGMyNjNjOWI5MDY4ZWU5NzkzYjZjN2EwMDIzZWZmMTZkNzBmYjhm",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-25T16:06:13Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-09-11T19:51:26Z"
      },
      "message": "Use a sensible default for blockmaxweight\n\nNo sensible user will ever keep the default settings here, so not\nhaving sensible defaults only serves to screw users who are\npaying less attention, which makes for terrible defaults.",
      "tree": {
        "sha": "9769887c9049fc7a72dc47e1a88951b41110c93b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9769887c9049fc7a72dc47e1a88951b41110c93b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3dc263c9b9068ee9793b6c7a0023eff16d70fb8f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dc263c9b9068ee9793b6c7a0023eff16d70fb8f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3dc263c9b9068ee9793b6c7a0023eff16d70fb8f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dc263c9b9068ee9793b6c7a0023eff16d70fb8f/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ba206d2c63a8d3cbd4a8dd47e9ef126af1bb3bb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba206d2c63a8d3cbd4a8dd47e9ef126af1bb3bb9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba206d2c63a8d3cbd4a8dd47e9ef126af1bb3bb9"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ef71dd73bcd574ba64005b0e259722a041afd7f8",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dc263c9b9068ee9793b6c7a0023eff16d70fb8f/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dc263c9b9068ee9793b6c7a0023eff16d70fb8f/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=3dc263c9b9068ee9793b6c7a0023eff16d70fb8f",
        "patch": "@@ -17,7 +17,7 @@ class CCoinsViewCache;\n class CTxOut;\n \n /** Default for -blockmaxweight, which controls the range of block weights the mining code will create **/\n-static const unsigned int DEFAULT_BLOCK_MAX_WEIGHT = 3000000;\n+static const unsigned int DEFAULT_BLOCK_MAX_WEIGHT = MAX_BLOCK_WEIGHT - 4000;\n /** Default for -blockmintxfee, which sets the minimum feerate for a transaction in blocks created by mining code **/\n static const unsigned int DEFAULT_BLOCK_MIN_TX_FEE = 1000;\n /** The maximum weight for transactions we're willing to relay/mine */"
      }
    ]
  },
  {
    "sha": "6f703e9bf11c5f2fcb0fca0e4243fce6b4b9d35a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjcwM2U5YmYxMWM1ZjJmY2IwZmNhMGU0MjQzZmNlNmI0YjlkMzVh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-25T15:27:03Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-09-11T19:51:26Z"
      },
      "message": "Add release notes describing blockmaxweight deprecation",
      "tree": {
        "sha": "82377afbd73398d04f836dd42fcdea3858277bcd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/82377afbd73398d04f836dd42fcdea3858277bcd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f703e9bf11c5f2fcb0fca0e4243fce6b4b9d35a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f703e9bf11c5f2fcb0fca0e4243fce6b4b9d35a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f703e9bf11c5f2fcb0fca0e4243fce6b4b9d35a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f703e9bf11c5f2fcb0fca0e4243fce6b4b9d35a/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3dc263c9b9068ee9793b6c7a0023eff16d70fb8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dc263c9b9068ee9793b6c7a0023eff16d70fb8f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3dc263c9b9068ee9793b6c7a0023eff16d70fb8f"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 16,
      "deletions": 0
    },
    "files": [
      {
        "sha": "46fbae0423940fff9f39243ade0945408e1dade6",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f703e9bf11c5f2fcb0fca0e4243fce6b4b9d35a/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f703e9bf11c5f2fcb0fca0e4243fce6b4b9d35a/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=6f703e9bf11c5f2fcb0fca0e4243fce6b4b9d35a",
        "patch": "@@ -56,6 +56,22 @@ frequently tested on them.\n Notable changes\n ===============\n \n+Miner block size limiting deprecated\n+------------------------------------\n+\n+Though blockmaxweight has been preferred for limiting the size of blocks returned by\n+getblocktemplate since 0.13.0, blockmaxsize remained as an option for those who wished\n+to limit their block size directly. Using this option resulted in a few UI issues as\n+well as non-optimal fee selection and ever-so-slightly worse performance, and has thus\n+now been deprecated. Further, the blockmaxsize option is now used only to calculate an\n+implied blockmaxweight, instead of limiting block size directly. Any miners who wish\n+to limit their blocks by size, instead of by weight, will have to do so manually by\n+removing transactions from their block template directly.\n+\n+Low-level RPC changes\n+----------------------\n+- The \"currentblocksize\" value in getmininginfo has been removed.\n+\n Credits\n =======\n "
      }
    ]
  }
]