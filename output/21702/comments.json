[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/820676054",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-820676054",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
    "id": 820676054,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMDY3NjA1NA==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-15T19:24:17Z",
    "updated_at": "2021-11-23T00:41:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23546](https://github.com/bitcoin/bitcoin/pull/23546) (scripted-diff: Use clang-tidy syntax for C++ named arguments (tests only) by MarcoFalke)\n* [#23512](https://github.com/bitcoin/bitcoin/pull/23512) (policy: Treat taproot as always active by MarcoFalke)\n* [#23508](https://github.com/bitcoin/bitcoin/pull/23508) (Add getdeploymentinfo RPC by ajtowns)\n* [#23505](https://github.com/bitcoin/bitcoin/pull/23505) (Bury taproot deployment by MarcoFalke)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.<!--2502f1a698b3751726fa55edcda76cd3-->\n\n### Coverage\n\n| Coverage  | Change ([pull 21702](https://drahtbot.space/host_reports/DrahtBot/reports/coverage/bitcoin/bitcoin/21702/total.coverage/index.html), a4b9a55240a0ab0c58f75e99398e56ceed8a3d35) | Reference ([master](https://drahtbot.space/host_reports/DrahtBot/reports/coverage/bitcoin/bitcoin/e2c4ac7cfb58e741/total.coverage/index.html), e2c4ac7cfb58e741)   |\n|-----------|-------------------------|--------------------|\n| Lines     | +0.0319 %            | 83.9750 %        |\n| Functions | +0.0211 %            | 75.8508 %        |\n| Branches  | +0.0242 %            | 52.5419 %        |\n\n<sup>Updated at: 2021-07-15T07:47:36.255429.</sup>\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/820676054/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/825207430",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-825207430",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
    "id": 825207430,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNTIwNzQzMA==",
    "user": {
      "login": "michaelfolkson",
      "id": 16323900,
      "node_id": "MDQ6VXNlcjE2MzIzOTAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/16323900?u=e2201a78ad660e42fd175003d02ad749b855e0a9&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelfolkson",
      "html_url": "https://github.com/michaelfolkson",
      "followers_url": "https://api.github.com/users/michaelfolkson/followers",
      "following_url": "https://api.github.com/users/michaelfolkson/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
      "repos_url": "https://api.github.com/users/michaelfolkson/repos",
      "events_url": "https://api.github.com/users/michaelfolkson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-22T21:49:59Z",
    "updated_at": "2021-04-22T21:49:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think CTV is interesting and will likely be a candidate for a future soft fork whether that be a standalone CTV soft fork or a soft fork with a bundle of features. But at least for me I feel it is premature to even look at this with Taproot not yet activated and zero discussion (mere speculation) on the form of the next soft fork after Taproot has (hopefully) activated. I guess there is no harm in opening this but personally I feel it is *extremely* early. I look forward to those discussions on the next soft fork and digging into this at some point in the future though.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/825207430/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/825312007",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-825312007",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
    "id": 825312007,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNTMxMjAwNw==",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?u=8cdd8653982252593843d7369ecfebe432b89768&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-23T01:06:32Z",
    "updated_at": "2021-04-23T01:06:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "You're free to review or not review any PR you like whenever you like. No one is \"in charge\" of the roadmap for Bitcoin development. All changes -- soft forks or not -- proceed when they have rough consensus and the code is ready.\r\n\r\nThis PR is for code review of BIP-119 OP_CTV's implementation. If you wish to discuss Bitcoin Project management please take it to an appropriate venue such as the mailing list.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/825312007/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/825557354",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-825557354",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
    "id": 825557354,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNTU1NzM1NA==",
    "user": {
      "login": "michaelfolkson",
      "id": 16323900,
      "node_id": "MDQ6VXNlcjE2MzIzOTAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/16323900?u=e2201a78ad660e42fd175003d02ad749b855e0a9&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelfolkson",
      "html_url": "https://github.com/michaelfolkson",
      "followers_url": "https://api.github.com/users/michaelfolkson/followers",
      "following_url": "https://api.github.com/users/michaelfolkson/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
      "repos_url": "https://api.github.com/users/michaelfolkson/repos",
      "events_url": "https://api.github.com/users/michaelfolkson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-23T10:17:05Z",
    "updated_at": "2021-04-23T10:17:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "@JeremyRubin:\r\n\r\n> All changes -- soft forks or not -- proceed when they have rough consensus and the code is ready.\r\n\r\nOn this we are definitely in strong disagreement. A soft fork (or hard fork) requires overwhelming consensus not only in this repo but in the wider community. Taproot reached that bar (there was one NACK from a long term contributor due to quantum concerns I believe in this repo and overwhelming community support) and I expect the next soft fork, whatever it contains, to also reach that bar. To the extent that it appears you disagree with that worries me immensely. But indeed when Taproot has (hopefully) activated I will continue on the mailing list.\r\n\r\nThis has a hard Concept NACK from me until then. All long term contributors to this repository should have the chance to review this and there should be overwhelming consensus within this repo and in the wider community that this should be included in the next soft fork as is. In my opinion we are a long, long way away from that. And this is from someone who finds CTV extremely interesting and is looking forward (once Taproot has activated) to examining in greater detail the use cases of it (ie CTV and ANYPREVOUT's use in vaults).\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/825557354/reactions",
      "total_count": 7,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 5,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/825618060",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-825618060",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
    "id": 825618060,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNTYxODA2MA==",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?u=8cdd8653982252593843d7369ecfebe432b89768&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-23T12:17:17Z",
    "updated_at": "2021-04-23T12:17:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Please, again, take the metaphysics to the mailing list. This is a PR for people who *want to* review BIP-119 CTV.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/825618060/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/825818936",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-825818936",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
    "id": 825818936,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNTgxODkzNg==",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?u=8cdd8653982252593843d7369ecfebe432b89768&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-23T17:48:51Z",
    "updated_at": "2021-04-23T17:48:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "Apologies for the line noise -- I hit an issue with GH tracking the tip of my branch and had to use https://github.com/isaacs/github/issues/361#issuecomment-114300645 workaround.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/825818936/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/831141697",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-831141697",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
    "id": 831141697,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMTE0MTY5Nw==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-03T09:32:08Z",
    "updated_at": "2021-05-03T09:32:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\n\ud83d\udd75\ufe0f @sipa has been requested to review this pull request as specified in the REVIEWERS file.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/831141697/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/832378018",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-832378018",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
    "id": 832378018,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMjM3ODAxOA==",
    "user": {
      "login": "RobinLinus",
      "id": 12780394,
      "node_id": "MDQ6VXNlcjEyNzgwMzk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/12780394?u=3b98227d81c6b425a0c2610c66359396f1335661&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RobinLinus",
      "html_url": "https://github.com/RobinLinus",
      "followers_url": "https://api.github.com/users/RobinLinus/followers",
      "following_url": "https://api.github.com/users/RobinLinus/following{/other_user}",
      "gists_url": "https://api.github.com/users/RobinLinus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RobinLinus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RobinLinus/subscriptions",
      "organizations_url": "https://api.github.com/users/RobinLinus/orgs",
      "repos_url": "https://api.github.com/users/RobinLinus/repos",
      "events_url": "https://api.github.com/users/RobinLinus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RobinLinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-05T02:52:23Z",
    "updated_at": "2021-05-05T02:55:42Z",
    "author_association": "NONE",
    "body": "concept ACK. Covenants would open up lots of exciting new use cases.\r\nWhat are the next steps? \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/832378018/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/833874616",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-833874616",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
    "id": 833874616,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMzg3NDYxNg==",
    "user": {
      "login": "benthecarman",
      "id": 15256660,
      "node_id": "MDQ6VXNlcjE1MjU2NjYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/15256660?u=eab48576b7831944b8ce7f04fcdff4154a853d50&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benthecarman",
      "html_url": "https://github.com/benthecarman",
      "followers_url": "https://api.github.com/users/benthecarman/followers",
      "following_url": "https://api.github.com/users/benthecarman/following{/other_user}",
      "gists_url": "https://api.github.com/users/benthecarman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
      "organizations_url": "https://api.github.com/users/benthecarman/orgs",
      "repos_url": "https://api.github.com/users/benthecarman/repos",
      "events_url": "https://api.github.com/users/benthecarman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benthecarman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-06T21:19:28Z",
    "updated_at": "2021-05-06T21:19:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "CR-ACK 491804c589c5f3e68dc17516377930e18986cb19\r\n\r\nbesides the nit on spacing\r\n\r\nStill need to look through tests",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/833874616/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/849289433",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-849289433",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
    "id": 849289433,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTI4OTQzMw==",
    "user": {
      "login": "rxgrant",
      "id": 6995442,
      "node_id": "MDQ6VXNlcjY5OTU0NDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6995442?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rxgrant",
      "html_url": "https://github.com/rxgrant",
      "followers_url": "https://api.github.com/users/rxgrant/followers",
      "following_url": "https://api.github.com/users/rxgrant/following{/other_user}",
      "gists_url": "https://api.github.com/users/rxgrant/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rxgrant/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rxgrant/subscriptions",
      "organizations_url": "https://api.github.com/users/rxgrant/orgs",
      "repos_url": "https://api.github.com/users/rxgrant/repos",
      "events_url": "https://api.github.com/users/rxgrant/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rxgrant/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-27T03:24:54Z",
    "updated_at": "2021-05-27T03:30:12Z",
    "author_association": "NONE",
    "body": "@RobinLinus \r\n> What are the next steps?\r\n\r\nI think the taproot process is an exemplar to build off of, for all future upgrades.\r\n\r\nDocumentation, review workshops, tutorial media, and gradually building press exposure all attract devs who want to understand and review it well.  Without review workshops, it's too easy to fall into a bad habit of gauging consensus by noticing bellwether reviewers.  Tutorial media make it easier to see the consequences of new technology and get excited enough to put effort in.\r\n\r\nThere are several things that we want to know from reviewers of new features:\r\n\r\n  - How can this concept hurt those in Bitcoin who do not upgrade at all?\r\n\r\n  - How can this concept hurt those in Bitcoin who validate blocks with the feature, but who do not use it for their transactions?\r\n\r\n  - Does this look like clean and correct code?\r\n\r\n  - Do the tests prove that the code is correct?\r\n\r\n  - Do people who willingly experiment with this have clear boundaries to keep their other funds safe if the feature has a bug?\r\n\r\n  - How is this feature important to keep Bitcoin relevant?\r\n\r\n  - Why can't this need be completely served in other layers?  (eg. L2/L3)\r\n\r\n  - Are there other approaches to solve this need in Bitcoin's consensus layer?\r\n\r\n  - What makes this pull request the simplest and safest way to do this feature in Bitcoin's consensus layer?\r\n\r\nFor all upgrades, I'd eventually like to see a semi-standardized table of consequences for ecosystem participants, similar to the hazmat fire diamond.\r\n\r\n  https://en.wikipedia.org/wiki/NFPA_704\r\n\r\nFor OP_CTV, best-practice reviews might work through a toy problem on either regtest or the mainnet (using the available signing servers).\r\n\r\nHere are my answers on the questions above, as they relate to this pull request:\r\n\r\n  - How can this concept hurt those in Bitcoin who do not upgrade at all?\r\n\r\n      If the code has bugs, it could introduce a security flaw.  However it does not even introduce a new address type, so it is very safe.\r\n\r\n  - How can this concept hurt those in Bitcoin who validate blocks with the feature, but who do not use it for their transactions?\r\n\r\n      Again, if the code has bugs, it could introduce a security flaw.\r\n\r\n  - Does this look like clean and correct code?\r\n\r\n      I'd like to test the code more before giving my answer here.  It looks like clean code.\r\n\r\n  - Do the tests prove that the code is correct?\r\n\r\n      The external compiler with the Sapio language is generating a very wide variety of tests.  I think this offers high confidence.\r\n\r\n  - Do people who willingly experiment with this have clear boundaries to keep their other funds safe if the feature has a bug?\r\n\r\n      Two answers here: yes and no.\r\n\r\n      Yes, in that it's easy to not lock UTXOs into OP_CTV trees.\r\n\r\n      No, in that someone could pay your address in an OP_CTV tree of transactions, without your consent.  Your software might not be able to recognize longer chains of CPFP dependencies, or might consider unconfirmed transactions below a confirmed root as weaker than they really are, depending on the branching structure of the OP_CTV tree.  I would consider both of these failures as small disruptions, since the transactions are a few confirmations away from appearing normal in any wallet, but we should test whether any wallets don't show them at all until the leaf transactions are confirmed.\r\n\r\n  - How is this feature important to keep Bitcoin relevant?\r\n\r\n      It enables a broad class of smart contracts, including: unchangeable efficient batching of exchange payouts; better custody control using vaults; and even decentralization improvements to mining pool payouts.\r\n\r\n  - Why can't this need be completely served in other layers?  (eg. L2/L3)\r\n\r\n      Using the L2 Lightning Network as a solution require a counterparty who is willing to enter into an HTLC.  Using the L2 Liquid Network requires trusting the federated sidechain.  \"L3\" solutions such as RGB require a counterparty who is consensually running the same client version, to define the asset tip.\r\n\r\n      OP_CTV works with script that you can apply to create your own addresses, adding no additional counterparty risk over Bitcoin's proof-of-work model.  This makes it the only way to do batched payouts and advanced custody vaults for L1 on-chain UTXOs, without requiring fancy trust-pushing tricks like deleting keys or using external signing oracles.\r\n\r\n  - Are there other approaches to solve this need in Bitcoin's consensus layer?\r\n\r\n      Simplicity is one, but there is no current plan to use it on Bitcoin's consensus layer.\r\n\r\n  - What makes this pull request the simplest and safest way to do this feature in Bitcoin's consensus layer?\r\n\r\n      It has remained remarkably stable throughout the entire Taproot rollout, which indicates it's a mature concept.  It is only a few lines of consensus code.  The testing infrastructure (which includes a compiler outside of bitcoind) already includes very different styles of contracts.\r\n\r\n(edit: wrapping)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/849289433/reactions",
      "total_count": 6,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/849976995",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-849976995",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
    "id": 849976995,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTk3Njk5NQ==",
    "user": {
      "login": "RobinLinus",
      "id": 12780394,
      "node_id": "MDQ6VXNlcjEyNzgwMzk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/12780394?u=3b98227d81c6b425a0c2610c66359396f1335661&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RobinLinus",
      "html_url": "https://github.com/RobinLinus",
      "followers_url": "https://api.github.com/users/RobinLinus/followers",
      "following_url": "https://api.github.com/users/RobinLinus/following{/other_user}",
      "gists_url": "https://api.github.com/users/RobinLinus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RobinLinus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RobinLinus/subscriptions",
      "organizations_url": "https://api.github.com/users/RobinLinus/orgs",
      "repos_url": "https://api.github.com/users/RobinLinus/repos",
      "events_url": "https://api.github.com/users/RobinLinus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RobinLinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-27T22:15:59Z",
    "updated_at": "2021-05-28T17:16:53Z",
    "author_association": "NONE",
    "body": "> * How can this concept hurt those in Bitcoin who do not upgrade at all?\r\n\r\nIs it relevant to mention here that it's possible to activate `OP_CTV` with a softfork because it could overwrite some `OP_NOOP`?\r\n \r\n> * How is this feature important to keep Bitcoin relevant?\r\n>   It enables a broad class of smart contracts, including: unchangeable efficient batching of exchange payouts; better custody control using vaults; and even decentralization improvements to mining pool payouts.\r\n\r\nMaybe it's worth mentioning that it enables permissionless sidechain consensus mechanisms such as [Spacechains](https://bitcoin.stackexchange.com/questions/100537/what-is-spacechain) and [Stakechains](https://coins.github.io/research/coins.pdf).\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/849976995/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/851036640",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-851036640",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
    "id": 851036640,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MTAzNjY0MA==",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?u=8cdd8653982252593843d7369ecfebe432b89768&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-30T17:51:05Z",
    "updated_at": "2021-05-30T17:51:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "I really don't have the answers for what the pipeline of accepting soft forks to Bitcoin should look like. I think these sorts of conversations are better suited for the mailing list or for an IRC chat room (although given recent IRC system disruptions IDK how logging is functioning), and GitHub is better suited to discuss the technical merits of the code.\r\n\r\n\r\nthat said, short of a perfect venue for this discussion, and to respond to some of the above:\r\n\r\nIt seems to me that there's a bit of an Abilene Paradox where people (whether CTV, anyprevout, sigagg, or something else) all don't know what the process could/should be or what would be ok and we settle on something that (most everyone?) doesn't want, which is arbitrary delay because it seems that's what other people want. It's not that _delay_ is not appropriate at all, but the arbitrariness that is confusing. A further complaint I've seen raised is around the notion of \"nextness\". That \"CTV should be next\", \"anyprevout next\", \"sigagg next\", etc, implying that Bitcoin is inherently a serial development process. I think that it's natural to have multiple development fronts that can proceed independently (to the extent they are independent) and do things as they are \"ready\" rather than some sort of order enforced by \"<T> has to be next\". We should have our fingers in more pies when it comes to securing the future of the bitcoin network. \r\n\r\nI'll reiterate: I don't have the answers on what the pipeline should look like, so I can only do a best effort job at being a sherpa through the review process for changes I think convey a large benefit to Bitcoin users. If anyone feels that I've misjudged or made an error in advocacy, I'm happy to accept the criticism and improve.\r\n\r\n\r\n--------\r\n\r\n\r\nThe main action item I'm seeing from @rxgrant is some easy to understand risk/reward section for upgrades (I think that's a great idea!) and to get some more reviewers to try solving some problems with CTV/Sapio. I think that's doable. I'm working on more resources for builders, but [the sapio book](https://learn.sapio-lang.org) is a decent place to start if you're motivated.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/851036640/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/851085931",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-851085931",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
    "id": 851085931,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MTA4NTkzMQ==",
    "user": {
      "login": "rxgrant",
      "id": 6995442,
      "node_id": "MDQ6VXNlcjY5OTU0NDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6995442?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rxgrant",
      "html_url": "https://github.com/rxgrant",
      "followers_url": "https://api.github.com/users/rxgrant/followers",
      "following_url": "https://api.github.com/users/rxgrant/following{/other_user}",
      "gists_url": "https://api.github.com/users/rxgrant/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rxgrant/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rxgrant/subscriptions",
      "organizations_url": "https://api.github.com/users/rxgrant/orgs",
      "repos_url": "https://api.github.com/users/rxgrant/repos",
      "events_url": "https://api.github.com/users/rxgrant/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rxgrant/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-31T00:11:40Z",
    "updated_at": "2021-05-31T00:11:40Z",
    "author_association": "NONE",
    "body": "> * Are there other approaches to solve this need in Bitcoin's consensus layer?\r\n\r\nAnswers here should also reference SIGHASH_ANYPREVOUTANYSCRIPT and OP_CAT [as discussed in bip119](https://github.com/bitcoin/bips/blob/master/bip-0119.mediawiki#feature-redundancy).  SIGHASH_ANYPREVOUT helps LN state updates require less stored state, and OP_CTV does complex contracts in fewer bytes (including settling comlpex LN HTLCs using many UTXOs in fewer bytes onchain), so both of them are good ideas.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/851085931/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864718834",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-864718834",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
    "id": 864718834,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2NDcxODgzNA==",
    "user": {
      "login": "Rspigler",
      "id": 24482484,
      "node_id": "MDQ6VXNlcjI0NDgyNDg0",
      "avatar_url": "https://avatars.githubusercontent.com/u/24482484?u=7354800fee53a3db4ba3c6aa40de4ea8c3bf58f0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Rspigler",
      "html_url": "https://github.com/Rspigler",
      "followers_url": "https://api.github.com/users/Rspigler/followers",
      "following_url": "https://api.github.com/users/Rspigler/following{/other_user}",
      "gists_url": "https://api.github.com/users/Rspigler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Rspigler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
      "organizations_url": "https://api.github.com/users/Rspigler/orgs",
      "repos_url": "https://api.github.com/users/Rspigler/repos",
      "events_url": "https://api.github.com/users/Rspigler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Rspigler/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-21T04:30:52Z",
    "updated_at": "2021-06-21T04:35:22Z",
    "author_association": "NONE",
    "body": "Strong Concept ACK\r\n\r\nEdit:  I should note that the implementation details are above my paygrade, and I am ACK'ing the use-case improvements, with the condition that it passes review and gains consensus",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864718834/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/868948722",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-868948722",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
    "id": 868948722,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2ODk0ODcyMg==",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?u=8cdd8653982252593843d7369ecfebe432b89768&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-26T05:03:18Z",
    "updated_at": "2021-06-26T05:03:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased to fix conflicts, whitespace issues fixed, and squashed the fixups to the tests.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/868948722/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/875324670",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-875324670",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
    "id": 875324670,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NTMyNDY3MA==",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?u=8cdd8653982252593843d7369ecfebe432b89768&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-07T06:30:06Z",
    "updated_at": "2021-07-07T06:30:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "rebased!\r\n\r\n@ajtowns might you be able to check commit 0141eb4d7d8c35088287353b92813575ce9b79a7 since I had some non obvious rebasing to do following https://github.com/bitcoin/bitcoin/pull/19438",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/875324670/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/878580116",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-878580116",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
    "id": 878580116,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3ODU4MDExNg==",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?u=8cdd8653982252593843d7369ecfebe432b89768&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-12T20:40:18Z",
    "updated_at": "2021-07-12T20:40:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Concept NACK. Bad for security. (I wont respond to this similar to [bitcoin-core/gui#320 (comment)](https://github.com/bitcoin-core/gui/pull/320#issuecomment-845826760))\r\n> \r\n> Can delete the comment because its not from Chaincode Labs devs.\r\n> \r\n> Disclaimer: I have other issues with how Core repo works however it doesn't influences my reasoning here. I have no incentive to NACK here. I don't make money off other chains or author of this BIP makes more than us.\r\n\r\n@prayank23 please refer to the Contributing guide -- https://github.com/bitcoin/bitcoin/blob/933c6466c2bda3a06d3c5da0de0d8f05111c9f4c/CONTRIBUTING.md\r\n\r\n> A NACK needs to include a rationale why the change is not worthwhile. NACKs without accompanying reasoning may be disregarded.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/878580116/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 2,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/878586404",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-878586404",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
    "id": 878586404,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3ODU4NjQwNA==",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?u=8cdd8653982252593843d7369ecfebe432b89768&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-12T20:51:34Z",
    "updated_at": "2021-07-12T20:51:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "That's all fine and dandy, but your comment isn't\r\n\r\n1. Technically relevant.\r\n2. Coherent (I don't understand what you are insinuating or claiming or how it relates to BIP-119)\r\n\r\nIf you want to discuss further please use an appropriate venue (e.g., twitter, mailing list).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/878586404/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/892603144",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-892603144",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
    "id": 892603144,
    "node_id": "IC_kwDOABII5841NAsI",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-04T12:06:48Z",
    "updated_at": "2021-08-04T12:06:48Z",
    "author_association": "MEMBER",
    "body": "Concept ACK, will try to review soon.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/892603144/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/892638399",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-892638399",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
    "id": 892638399,
    "node_id": "IC_kwDOABII5841NJS_",
    "user": {
      "login": "michaelfolkson",
      "id": 16323900,
      "node_id": "MDQ6VXNlcjE2MzIzOTAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/16323900?u=e2201a78ad660e42fd175003d02ad749b855e0a9&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelfolkson",
      "html_url": "https://github.com/michaelfolkson",
      "followers_url": "https://api.github.com/users/michaelfolkson/followers",
      "following_url": "https://api.github.com/users/michaelfolkson/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
      "repos_url": "https://api.github.com/users/michaelfolkson/repos",
      "events_url": "https://api.github.com/users/michaelfolkson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-04T13:02:22Z",
    "updated_at": "2021-08-04T13:02:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Edit: I should note that the implementation details are above my paygrade, and I am ACK'ing the use-case improvements, with the condition that it passes review and gains consensus\r\n\r\n@Rspigler: The implementation details **are** the most critical thing with this proposed consensus change. Everyone will ACK more use cases, that is the easy part. The hard part is reviewers (ideally more than a handful of people) coming to a view on whether the opcode's current design is optimal as once it goes live there are no do overs. I get the inferiority complex (and I often share it :) ) but as reviewers we do need to try to do better. \r\n\r\nFor example, a good starting point seems to be understanding how the design of this opcode has evolved over the years and the current trade-offs of its design (real world implementation of its declared use cases probably answers this best). I like StackExchange but a Q&A anywhere with detailed technical answers would be good. I'd be happy to transfer answers to StackExchange.\r\n\r\ne.g. https://bitcoin.stackexchange.com/questions/107891/how-has-the-design-of-the-opcode-op-checktemplateverify-evolved-over-its-various\r\n\r\nI'll repeat my view that the discussion on the form of the next soft fork (what is in it and when) seems to have barely started (for good reason imo with Taproot not yet activated and tonnes of work to do to leverage the benefits of Taproot) but I agree that can be left to the mailing list and this PR can focus on opcode design and code.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/892638399/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/892897355",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-892897355",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
    "id": 892897355,
    "node_id": "IC_kwDOABII5841OIhL",
    "user": {
      "login": "Rspigler",
      "id": 24482484,
      "node_id": "MDQ6VXNlcjI0NDgyNDg0",
      "avatar_url": "https://avatars.githubusercontent.com/u/24482484?u=7354800fee53a3db4ba3c6aa40de4ea8c3bf58f0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Rspigler",
      "html_url": "https://github.com/Rspigler",
      "followers_url": "https://api.github.com/users/Rspigler/followers",
      "following_url": "https://api.github.com/users/Rspigler/following{/other_user}",
      "gists_url": "https://api.github.com/users/Rspigler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Rspigler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
      "organizations_url": "https://api.github.com/users/Rspigler/orgs",
      "repos_url": "https://api.github.com/users/Rspigler/repos",
      "events_url": "https://api.github.com/users/Rspigler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Rspigler/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-04T19:00:23Z",
    "updated_at": "2021-08-04T19:00:23Z",
    "author_association": "NONE",
    "body": "I agree (that the implementation details are the most critical).  I disagree that everyone will ACK more use cases - there are actually a few soft fork ideas in the works right now that are controversial.  I did plenty of research before Concept ACKing this, and I feel confident in my Concept ACK, but that's all I can do, and I can't review the code.\r\n\r\nThat being said, I agree strongly that implementation details are critical, and so is consensus; hence my conditional:\r\n\r\n> I am ACK'ing the use-case improvements, with the condition that it passes review and gains consensus\r\n\r\nI agree that there is still plenty of discussion to be had",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/892897355/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/918060312",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-918060312",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
    "id": 918060312,
    "node_id": "IC_kwDOABII5842uH0Y",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-13T10:31:51Z",
    "updated_at": "2021-09-13T10:31:51Z",
    "author_association": "MEMBER",
    "body": "Concept ACK, debug build/tests clean/green, the code looks pretty good on first overlook, and the last push (`git diff 4a457d4 118ff53`) fixed the CI integer sanitizer failure.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/918060312/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/938082090",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-938082090",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
    "id": 938082090,
    "node_id": "IC_kwDOABII58436f8q",
    "user": {
      "login": "jaybny",
      "id": 777326,
      "node_id": "MDQ6VXNlcjc3NzMyNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/777326?u=65fa1917e1e95961e97a0a7669b6457f72de00e5&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaybny",
      "html_url": "https://github.com/jaybny",
      "followers_url": "https://api.github.com/users/jaybny/followers",
      "following_url": "https://api.github.com/users/jaybny/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaybny/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaybny/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaybny/subscriptions",
      "organizations_url": "https://api.github.com/users/jaybny/orgs",
      "repos_url": "https://api.github.com/users/jaybny/repos",
      "events_url": "https://api.github.com/users/jaybny/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaybny/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-07T19:15:48Z",
    "updated_at": "2021-10-12T20:33:37Z",
    "author_association": "NONE",
    "body": "Concept ACK  based on this being part of a bigger [picture](https://rubin.io/blog/2021/07/02/covenants/) , and as a solid stand alone. will review details and code shortly. \r\n\r\nACK: reviewed implementation code, and deployment code, as a sanity check against objective and text of bip119. reviewed test code, compiled fork, ran tests, tested with regtest.   ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/938082090/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940033339",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-940033339",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
    "id": 940033339,
    "node_id": "IC_kwDOABII5844B8U7",
    "user": {
      "login": "michaelfolkson",
      "id": 16323900,
      "node_id": "MDQ6VXNlcjE2MzIzOTAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/16323900?u=e2201a78ad660e42fd175003d02ad749b855e0a9&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelfolkson",
      "html_url": "https://github.com/michaelfolkson",
      "followers_url": "https://api.github.com/users/michaelfolkson/followers",
      "following_url": "https://api.github.com/users/michaelfolkson/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
      "repos_url": "https://api.github.com/users/michaelfolkson/repos",
      "events_url": "https://api.github.com/users/michaelfolkson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-11T13:28:26Z",
    "updated_at": "2021-10-11T13:28:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "Posted [this](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-October/019535.html) to the mailing list with my thoughts on how soft fork PRs should be treated and broader considerations before merging.\r\n\r\nI am a long term Concept ACK on enabling covenant functionality for the vault use case when there is community consensus that it should be enabled. My personal view currently is I don't yet feel comfortable that that functionality should definitely be enabled by OP_CTV at the expense of or in addition to alternative proposals although OP_CTV is clearly a strong candidate. Until there is community consensus that this should definitely be included in the next soft fork I'd rather this PR was marked as draft let alone marked as high priority. But I understand that this PR is a high priority for the PR author.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940033339/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/963667962",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-963667962",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
    "id": 963667962,
    "node_id": "IC_kwDOABII5845cGf6",
    "user": {
      "login": "ProofOfKeags",
      "id": 4033651,
      "node_id": "MDQ6VXNlcjQwMzM2NTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4033651?u=3399b69d2fca24305eedee6273103a2d3e5be279&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ProofOfKeags",
      "html_url": "https://github.com/ProofOfKeags",
      "followers_url": "https://api.github.com/users/ProofOfKeags/followers",
      "following_url": "https://api.github.com/users/ProofOfKeags/following{/other_user}",
      "gists_url": "https://api.github.com/users/ProofOfKeags/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ProofOfKeags/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ProofOfKeags/subscriptions",
      "organizations_url": "https://api.github.com/users/ProofOfKeags/orgs",
      "repos_url": "https://api.github.com/users/ProofOfKeags/repos",
      "events_url": "https://api.github.com/users/ProofOfKeags/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ProofOfKeags/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-08T23:26:07Z",
    "updated_at": "2021-11-08T23:26:07Z",
    "author_association": "NONE",
    "body": "Concept ACK.\r\n\r\nThis represents the least controversial change that could give us useful covenents in Bitcoin. The properties of non-recursion and strict enumerability should be enough to gain larger support and still give us the ability to create useful output constraints. While I generally favor something more general than what is presented here, they are not mutually exclusive and any risks incurred by users of OP_CTV are fairly easy to understand which should make it easier to come to consensus on. Further, this will broadly demonstrate the utility of covenants and will help illuminate the desirable properties in a more general solution.\r\n\r\nI have not yet reviewed the specific code implementing it.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/963667962/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/976141608",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-976141608",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
    "id": 976141608,
    "node_id": "IC_kwDOABII5846Lr0o",
    "user": {
      "login": "jaybny",
      "id": 777326,
      "node_id": "MDQ6VXNlcjc3NzMyNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/777326?u=65fa1917e1e95961e97a0a7669b6457f72de00e5&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaybny",
      "html_url": "https://github.com/jaybny",
      "followers_url": "https://api.github.com/users/jaybny/followers",
      "following_url": "https://api.github.com/users/jaybny/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaybny/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaybny/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaybny/subscriptions",
      "organizations_url": "https://api.github.com/users/jaybny/orgs",
      "repos_url": "https://api.github.com/users/jaybny/repos",
      "events_url": "https://api.github.com/users/jaybny/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaybny/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-23T03:41:26Z",
    "updated_at": "2021-11-23T03:41:26Z",
    "author_association": "NONE",
    "body": "as an aside. importance of merging this bip, is that it shows that Bitcoin accepts solid scientific enhancements from legitimate programmers , even when other devs may have different ideas and paths for the same utility \r\n++",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/976141608/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/978915382",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-978915382",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
    "id": 978915382,
    "node_id": "IC_kwDOABII5846WRA2",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-25T07:43:27Z",
    "updated_at": "2021-11-25T07:43:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--cf906140f33d8803c4a75a2196329ecb-->\n\ud83d\udc19 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/978915382/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616625177",
    "pull_request_review_id": 639871313,
    "id": 616625177,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjYyNTE3Nw==",
    "diff_hunk": "@@ -1433,6 +1513,9 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n     // Determine which precomputation-impacting features this transaction uses.\n     bool uses_bip143_segwit = false;\n     bool uses_bip341_taproot = false;\n+    // TODO: Improve this heuristic\n+    bool uses_bip119_ctv = true;",
    "path": "src/script/interpreter.cpp",
    "position": 117,
    "original_position": 111,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
    "user": {
      "login": "pyskell",
      "id": 9665963,
      "node_id": "MDQ6VXNlcjk2NjU5NjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9665963?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pyskell",
      "html_url": "https://github.com/pyskell",
      "followers_url": "https://api.github.com/users/pyskell/followers",
      "following_url": "https://api.github.com/users/pyskell/following{/other_user}",
      "gists_url": "https://api.github.com/users/pyskell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pyskell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pyskell/subscriptions",
      "organizations_url": "https://api.github.com/users/pyskell/orgs",
      "repos_url": "https://api.github.com/users/pyskell/repos",
      "events_url": "https://api.github.com/users/pyskell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pyskell/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "As the TODO says, should be improved",
    "created_at": "2021-04-20T12:15:07Z",
    "updated_at": "2021-04-23T17:47:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616625177",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616625177"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616625177"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616625177/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1520,
    "original_line": 1513,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616625350",
    "pull_request_review_id": 639871498,
    "id": 616625350,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjYyNTM1MA==",
    "diff_hunk": "@@ -1804,6 +1905,30 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckStandardTemplateHash(const std::vector<unsigned char>& hash) const\n+{\n+    // Should already be checked before calling...\n+    assert(hash.size() == 32);\n+    if (txdata && txdata->m_bip119_ctv_ready) {\n+        // if nIn == 0, then we've already cached this and can directly check\n+        if (nIn == 0) {\n+            return std::equal(txdata->m_standard_template_single_hash.begin(), txdata->m_standard_template_single_hash.end(), hash.data());\n+        } else {\n+            // otherwise we still have *most* of the hash cached,\n+            // so just re-compute the correct one and compare\n+            assert(txTo != nullptr);",
    "path": "src/script/interpreter.cpp",
    "position": 175,
    "original_position": 179,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
    "user": {
      "login": "pyskell",
      "id": 9665963,
      "node_id": "MDQ6VXNlcjk2NjU5NjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9665963?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pyskell",
      "html_url": "https://github.com/pyskell",
      "followers_url": "https://api.github.com/users/pyskell/followers",
      "following_url": "https://api.github.com/users/pyskell/following{/other_user}",
      "gists_url": "https://api.github.com/users/pyskell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pyskell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pyskell/subscriptions",
      "organizations_url": "https://api.github.com/users/pyskell/orgs",
      "repos_url": "https://api.github.com/users/pyskell/repos",
      "events_url": "https://api.github.com/users/pyskell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pyskell/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Can this assert just be moved to the start of the function?",
    "created_at": "2021-04-20T12:15:19Z",
    "updated_at": "2021-04-23T17:47:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616625350",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616625350"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616625350"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616625350/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1922,
    "original_line": 1915,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616627150",
    "pull_request_review_id": 639873700,
    "id": 616627150,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjYyNzE1MA==",
    "diff_hunk": "@@ -198,6 +198,13 @@ unsigned int CScript::GetSigOpCount(const CScript& scriptSig) const\n     return subscript.GetSigOpCount(true);\n }\n \n+bool CScript::IsPayToBasicStandardTemplate() const",
    "path": "src/script/script.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
    "user": {
      "login": "pyskell",
      "id": 9665963,
      "node_id": "MDQ6VXNlcjk2NjU5NjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9665963?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pyskell",
      "html_url": "https://github.com/pyskell",
      "followers_url": "https://api.github.com/users/pyskell/followers",
      "following_url": "https://api.github.com/users/pyskell/following{/other_user}",
      "gists_url": "https://api.github.com/users/pyskell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pyskell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pyskell/subscriptions",
      "organizations_url": "https://api.github.com/users/pyskell/orgs",
      "repos_url": "https://api.github.com/users/pyskell/repos",
      "events_url": "https://api.github.com/users/pyskell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pyskell/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Minor bike shedding but \"Basic Standard\" and \"Standard Template\" are somewhat confusing terms. Are there non-standard templates?",
    "created_at": "2021-04-20T12:17:36Z",
    "updated_at": "2021-04-23T17:47:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616627150",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616627150"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616627150"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616627150/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 201,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616853690",
    "pull_request_review_id": 640183576,
    "id": 616853690,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjg1MzY5MA==",
    "diff_hunk": "@@ -1433,6 +1513,9 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n     // Determine which precomputation-impacting features this transaction uses.\n     bool uses_bip143_segwit = false;\n     bool uses_bip341_taproot = false;\n+    // TODO: Improve this heuristic\n+    bool uses_bip119_ctv = true;",
    "path": "src/script/interpreter.cpp",
    "position": 117,
    "original_position": 111,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "yes; this became a TODO post taproot because we started doing much more aggressive/expensive heuristics, scanning to see if it's a taproot spend. We used to just IIRC always compute all caches.\r\n\r\n\r\nIt's not clear to me the performance benefit of scanning v.s. always computing the hashes @sipa. 50% of transactions are SegWit these days (https://charts.woobull.com/bitcoin-segwit-adoption/), and CTV only does extra non O(1) hashing in the event that it's a transaction that uses non segwit inputs.\r\n\r\nIt'd be also possible to just *never* cache CTV, if the extra work seems not worth it. Or to only cache for single input txns, only cache for txns with a bare script standard CTV, only cache for segwit or has bare CTV, etc. It's kinda hard to say what the optimal caching policy is and it's bikesheddable + non consensus, so I chose to just leave it for now as the extra work is not terrible, and more advanced policies open up the potential for quadratic hashing bugs (e.g., txn has a scriptSig on every input except the CTV one and the CTV one is <H> CTV CTV... and we don't cache).",
    "created_at": "2021-04-20T16:34:06Z",
    "updated_at": "2021-04-23T17:47:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616853690",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616853690"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616853690"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616853690/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1520,
    "original_line": 1513,
    "side": "RIGHT",
    "in_reply_to_id": 616625177
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616858194",
    "pull_request_review_id": 640192946,
    "id": 616858194,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjg1ODE5NA==",
    "diff_hunk": "@@ -1804,6 +1905,30 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckStandardTemplateHash(const std::vector<unsigned char>& hash) const\n+{\n+    // Should already be checked before calling...\n+    assert(hash.size() == 32);\n+    if (txdata && txdata->m_bip119_ctv_ready) {\n+        // if nIn == 0, then we've already cached this and can directly check\n+        if (nIn == 0) {\n+            return std::equal(txdata->m_standard_template_single_hash.begin(), txdata->m_standard_template_single_hash.end(), hash.data());\n+        } else {\n+            // otherwise we still have *most* of the hash cached,\n+            // so just re-compute the correct one and compare\n+            assert(txTo != nullptr);",
    "path": "src/script/interpreter.cpp",
    "position": 175,
    "original_position": 179,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "These asserts can technically just be deleted looking at the surrounded code, txTo will already be able to deref nullptr from many other functions.\r\n\r\nI put them close to where the deref's actually occur as I think that's best practice, but yes they could go at the start.\r\n\r\nI'd actually be more excited about changing the representation internally to a reference as follow up work so we get rid of all these unchecked derefs...",
    "created_at": "2021-04-20T16:40:07Z",
    "updated_at": "2021-04-23T17:47:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616858194",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616858194"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616858194"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616858194/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1922,
    "original_line": 1915,
    "side": "RIGHT",
    "in_reply_to_id": 616625350
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616863828",
    "pull_request_review_id": 640201332,
    "id": 616863828,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjg2MzgyOA==",
    "diff_hunk": "@@ -198,6 +198,13 @@ unsigned int CScript::GetSigOpCount(const CScript& scriptSig) const\n     return subscript.GetSigOpCount(true);\n }\n \n+bool CScript::IsPayToBasicStandardTemplate() const",
    "path": "src/script/script.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes... Perhaps \"standard\" and \"basic\" should be flipped terminology wise, but as is:\r\n\r\n- Standard is the 32 byte argument form interpreted as the StandardTemplateHash defined in this PR\r\n- Basic is the ScriptType that is just a script with a single <h:32> CTV. \r\n\r\nCTV as a NOP is extensible in the future to support different templates via having a different length arg + whatever rules around that you want.\r\n\r\nBasicStandardTemplate is just for enabling relaying of a single special cased barescript type (for congestion control uses). TBH it *could* be dropped from this PR and handled separately, although it makes testing more painful.",
    "created_at": "2021-04-20T16:45:13Z",
    "updated_at": "2021-04-23T17:47:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616863828",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616863828"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616863828"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616863828/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 201,
    "side": "RIGHT",
    "in_reply_to_id": 616627150
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617174074",
    "pull_request_review_id": 640596808,
    "id": 617174074,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNzE3NDA3NA==",
    "diff_hunk": "@@ -1433,6 +1513,9 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n     // Determine which precomputation-impacting features this transaction uses.\n     bool uses_bip143_segwit = false;\n     bool uses_bip341_taproot = false;\n+    // TODO: Improve this heuristic\n+    bool uses_bip119_ctv = true;",
    "path": "src/script/interpreter.cpp",
    "position": 117,
    "original_position": 111,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "One last thing on caching: CTV was designed so that if you're expecting to operate the same CTV at diff input indexes, you can cache the sha256 midstate because index is the final field. However, I think that it's relatively rare you'd want CTV scripts at indexes other than 0.",
    "created_at": "2021-04-21T03:24:15Z",
    "updated_at": "2021-04-23T17:47:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r617174074",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617174074"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r617174074"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617174074/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1520,
    "original_line": 1513,
    "side": "RIGHT",
    "in_reply_to_id": 616625177
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618645483",
    "pull_request_review_id": 642545443,
    "id": 618645483,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODY0NTQ4Mw==",
    "diff_hunk": "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return CScript(bytes([0, 0x14]) + random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: amount})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-whitelist=127.0.0.1', '-par=1']]  # Use only one script thread to get the exact reject reason for testing",
    "path": "test/functional/feature_checktemplateverify.py",
    "position": null,
    "original_position": 74,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "please enumerate the exact permission flags needed. Whitelist is deprecated",
    "created_at": "2021-04-22T18:31:04Z",
    "updated_at": "2021-04-23T17:47:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618645483",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618645483"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618645483"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618645483/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 74,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618646394",
    "pull_request_review_id": 642546676,
    "id": 618646394,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODY0NjM5NA==",
    "diff_hunk": "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return CScript(bytes([0, 0x14]) + random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: amount})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-whitelist=127.0.0.1', '-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        self.nodes[0].submitblock(block)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - SegWit OP_CTV\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 110\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        self.coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.nodes[0].generate(BLOCKS)]\n+\n+        self.log.info(\"Creating setup transactions\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount = (sum(out.nValue for out in outputs)+200*500) /100e6",
    "path": "test/functional/feature_checktemplateverify.py",
    "position": null,
    "original_position": 126,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I know this is just the tests, but it would be nice to not use floating point",
    "created_at": "2021-04-22T18:32:28Z",
    "updated_at": "2021-04-23T17:47:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618646394",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618646394"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618646394"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618646394/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 126,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618651655",
    "pull_request_review_id": 642546676,
    "id": 618651655,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODY1MTY1NQ==",
    "diff_hunk": "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return CScript(bytes([0, 0x14]) + random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: amount})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-whitelist=127.0.0.1', '-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        self.nodes[0].submitblock(block)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - SegWit OP_CTV\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 110\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        self.coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.nodes[0].generate(BLOCKS)]\n+\n+        self.log.info(\"Creating setup transactions\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount = (sum(out.nValue for out in outputs)+200*500) /100e6",
    "path": "test/functional/feature_checktemplateverify.py",
    "position": null,
    "original_position": 126,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "100e6 refers to the COIN constant?",
    "created_at": "2021-04-22T18:40:42Z",
    "updated_at": "2021-04-23T17:47:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618651655",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618651655"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618651655"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618651655/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 126,
    "side": "RIGHT",
    "in_reply_to_id": 618646394
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618666993",
    "pull_request_review_id": 642573083,
    "id": 618666993,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODY2Njk5Mw==",
    "diff_hunk": "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return CScript(bytes([0, 0x14]) + random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: amount})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-whitelist=127.0.0.1', '-par=1']]  # Use only one script thread to get the exact reject reason for testing",
    "path": "test/functional/feature_checktemplateverify.py",
    "position": null,
    "original_position": 74,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "What's the replacement -- tbh don't know if this is even needed anymore?",
    "created_at": "2021-04-22T19:04:37Z",
    "updated_at": "2021-04-23T17:47:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618666993",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618666993"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618666993"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618666993/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 74,
    "side": "RIGHT",
    "in_reply_to_id": 618645483
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618668363",
    "pull_request_review_id": 642574885,
    "id": 618668363,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODY2ODM2Mw==",
    "diff_hunk": "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return CScript(bytes([0, 0x14]) + random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: amount})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-whitelist=127.0.0.1', '-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        self.nodes[0].submitblock(block)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - SegWit OP_CTV\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 110\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        self.coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.nodes[0].generate(BLOCKS)]\n+\n+        self.log.info(\"Creating setup transactions\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount = (sum(out.nValue for out in outputs)+200*500) /100e6",
    "path": "test/functional/feature_checktemplateverify.py",
    "position": null,
    "original_position": 126,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "yeah I think it kinda has to be floating point because the RPCs use BTC and we have sats... if I used a non float I would truncate?\r\n\r\nBut I can refactor it to be COIN? Or maybe preserve the values as sats for longer and only convert to BTC in one place?",
    "created_at": "2021-04-22T19:06:56Z",
    "updated_at": "2021-04-23T17:47:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618668363",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618668363"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618668363"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618668363/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 126,
    "side": "RIGHT",
    "in_reply_to_id": 618646394
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618675048",
    "pull_request_review_id": 642583770,
    "id": 618675048,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODY3NTA0OA==",
    "diff_hunk": "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return CScript(bytes([0, 0x14]) + random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: amount})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-whitelist=127.0.0.1', '-par=1']]  # Use only one script thread to get the exact reject reason for testing",
    "path": "test/functional/feature_checktemplateverify.py",
    "position": null,
    "original_position": 74,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "For example `-whitelist=noban@ip`",
    "created_at": "2021-04-22T19:17:45Z",
    "updated_at": "2021-04-23T17:47:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618675048",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618675048"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618675048"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618675048/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 74,
    "side": "RIGHT",
    "in_reply_to_id": 618645483
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618675290",
    "pull_request_review_id": 642584071,
    "id": 618675290,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODY3NTI5MA==",
    "diff_hunk": "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return CScript(bytes([0, 0x14]) + random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: amount})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-whitelist=127.0.0.1', '-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        self.nodes[0].submitblock(block)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - SegWit OP_CTV\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 110\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        self.coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.nodes[0].generate(BLOCKS)]\n+\n+        self.log.info(\"Creating setup transactions\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount = (sum(out.nValue for out in outputs)+200*500) /100e6",
    "path": "test/functional/feature_checktemplateverify.py",
    "position": null,
    "original_position": 126,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "There is decimal.Decimal",
    "created_at": "2021-04-22T19:18:09Z",
    "updated_at": "2021-04-23T17:47:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618675290",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618675290"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618675290"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618675290/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 126,
    "side": "RIGHT",
    "in_reply_to_id": 618646394
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618888207",
    "pull_request_review_id": 642869537,
    "id": 618888207,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODg4ODIwNw==",
    "diff_hunk": "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return CScript(bytes([0, 0x14]) + random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: amount})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-whitelist=127.0.0.1', '-par=1']]  # Use only one script thread to get the exact reject reason for testing",
    "path": "test/functional/feature_checktemplateverify.py",
    "position": null,
    "original_position": 74,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I removed it and it still runs fine... presumably this is helpful during testing if we're trying to connect some sort of malicious peer, but I think I don't need it here.",
    "created_at": "2021-04-23T02:02:09Z",
    "updated_at": "2021-04-23T17:47:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618888207",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618888207"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618888207"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618888207/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 74,
    "side": "RIGHT",
    "in_reply_to_id": 618645483
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627765572",
    "pull_request_review_id": 653897195,
    "id": 627765572,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzc2NTU3Mg==",
    "diff_hunk": "@@ -1585,8 +1683,11 @@ bool SignatureHashSchnorr(uint256& hash_out, const ScriptExecutionData& execdata\n \n     hash_out = ss.GetSHA256();\n     return true;\n+\n }\n \n+\n+",
    "path": "src/script/interpreter.cpp",
    "position": null,
    "original_position": 159,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "39b0a505d5c0ba97439a82026ae6a0449f31896a",
    "user": {
      "login": "benthecarman",
      "id": 15256660,
      "node_id": "MDQ6VXNlcjE1MjU2NjYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benthecarman",
      "html_url": "https://github.com/benthecarman",
      "followers_url": "https://api.github.com/users/benthecarman/followers",
      "following_url": "https://api.github.com/users/benthecarman/following{/other_user}",
      "gists_url": "https://api.github.com/users/benthecarman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
      "organizations_url": "https://api.github.com/users/benthecarman/orgs",
      "repos_url": "https://api.github.com/users/benthecarman/repos",
      "events_url": "https://api.github.com/users/benthecarman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benthecarman/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: unneeded spacing",
    "created_at": "2021-05-06T21:07:55Z",
    "updated_at": "2021-05-06T21:07:56Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r627765572",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627765572"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r627765572"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627765572/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 1685,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 1690,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628407410",
    "pull_request_review_id": 654731943,
    "id": 628407410,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODQwNzQxMA==",
    "diff_hunk": "@@ -198,6 +198,13 @@ unsigned int CScript::GetSigOpCount(const CScript& scriptSig) const\n     return subscript.GetSigOpCount(true);\n }\n \n+bool CScript::IsPayToBasicStandardTemplate() const",
    "path": "src/script/script.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "discussion of this moved here https://github.com/bitcoin/bips/pull/1118",
    "created_at": "2021-05-07T17:59:26Z",
    "updated_at": "2021-05-07T17:59:26Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r628407410",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628407410"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r628407410"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628407410/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 201,
    "side": "RIGHT",
    "in_reply_to_id": 616627150
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634008499",
    "pull_request_review_id": 661595892,
    "id": 634008499,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDAwODQ5OQ==",
    "diff_hunk": "@@ -1416,9 +1453,52 @@ uint256 GetSpentScriptsSHA256(const std::vector<CTxOut>& outputs_spent)\n     return ss.GetSHA256();\n }\n \n+/* Not Exported, just convenience */\n+template<typename TxType>\n+uint256 GetStandardTemplateHashWithScript(const TxType& tx, const uint256& outputs_hash, const uint256& sequences_hash,\n+                                const uint256& scriptSig_hash, const uint32_t input_index) {\n+    auto h =  CHashWriter(SER_GETHASH, 0)",
    "path": "src/script/interpreter.cpp",
    "position": null,
    "original_position": 61,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "39b0a505d5c0ba97439a82026ae6a0449f31896a",
    "user": {
      "login": "benthecarman",
      "id": 15256660,
      "node_id": "MDQ6VXNlcjE1MjU2NjYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benthecarman",
      "html_url": "https://github.com/benthecarman",
      "followers_url": "https://api.github.com/users/benthecarman/followers",
      "following_url": "https://api.github.com/users/benthecarman/following{/other_user}",
      "gists_url": "https://api.github.com/users/benthecarman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
      "organizations_url": "https://api.github.com/users/benthecarman/orgs",
      "repos_url": "https://api.github.com/users/benthecarman/repos",
      "events_url": "https://api.github.com/users/benthecarman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benthecarman/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "piconit: 2 spaces after the `=` here",
    "created_at": "2021-05-18T03:12:24Z",
    "updated_at": "2021-05-18T03:26:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634008499",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634008499"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634008499"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634008499/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1460,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634008538",
    "pull_request_review_id": 661595892,
    "id": 634008538,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDAwODUzOA==",
    "diff_hunk": "@@ -1416,9 +1453,52 @@ uint256 GetSpentScriptsSHA256(const std::vector<CTxOut>& outputs_spent)\n     return ss.GetSHA256();\n }\n \n+/* Not Exported, just convenience */\n+template<typename TxType>\n+uint256 GetStandardTemplateHashWithScript(const TxType& tx, const uint256& outputs_hash, const uint256& sequences_hash,\n+                                const uint256& scriptSig_hash, const uint32_t input_index) {\n+    auto h =  CHashWriter(SER_GETHASH, 0)\n+        << tx.nVersion\n+        << tx.nLockTime\n+        << scriptSig_hash\n+        << uint32_t(tx.vin.size())\n+        << sequences_hash\n+        << uint32_t(tx.vout.size())\n+        << outputs_hash\n+        << input_index;\n+    return h.GetSHA256();\n+}\n+\n+template<typename TxType>\n+uint256 GetStandardTemplateHashEmptyScript(const TxType& tx, const uint256& outputs_hash, const uint256& sequences_hash,\n+                                const uint32_t input_index) {\n+    auto h =  CHashWriter(SER_GETHASH, 0)",
    "path": "src/script/interpreter.cpp",
    "position": null,
    "original_position": 76,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "39b0a505d5c0ba97439a82026ae6a0449f31896a",
    "user": {
      "login": "benthecarman",
      "id": 15256660,
      "node_id": "MDQ6VXNlcjE1MjU2NjYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benthecarman",
      "html_url": "https://github.com/benthecarman",
      "followers_url": "https://api.github.com/users/benthecarman/followers",
      "following_url": "https://api.github.com/users/benthecarman/following{/other_user}",
      "gists_url": "https://api.github.com/users/benthecarman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
      "organizations_url": "https://api.github.com/users/benthecarman/orgs",
      "repos_url": "https://api.github.com/users/benthecarman/repos",
      "events_url": "https://api.github.com/users/benthecarman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benthecarman/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "same here",
    "created_at": "2021-05-18T03:12:31Z",
    "updated_at": "2021-05-18T03:26:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634008538",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634008538"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634008538"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634008538/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1475,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634011655",
    "pull_request_review_id": 661595892,
    "id": 634011655,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDAxMTY1NQ==",
    "diff_hunk": "@@ -1452,11 +1535,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.\n         m_prevouts_single_hash = GetPrevoutsSHA256(txTo);\n         m_sequences_single_hash = GetSequencesSHA256(txTo);\n         m_outputs_single_hash = GetOutputsSHA256(txTo);\n+\n+        bool skip_scriptSigs = std::find_if(txTo.vin.begin(), txTo.vin.end(),\n+                [](const CTxIn& c) { return c.scriptSig != CScript(); }) == txTo.vin.end();\n+        if (skip_scriptSigs) {\n+            // 0 hash used to signal if we should skip scriptSigs\n+            // when re-computing for different indexes.\n+            m_scriptSigs_single_hash = uint256{};\n+            // TODO: Cache midstate?\n+            m_standard_template_single_hash = GetStandardTemplateHashEmptyScript(txTo, m_outputs_single_hash, m_sequences_single_hash, 0);\n+        } else {\n+            m_scriptSigs_single_hash = GetScriptSigsSHA256(txTo);\n+            m_standard_template_single_hash = GetStandardTemplateHashWithScript(txTo, m_outputs_single_hash, m_sequences_single_hash, m_scriptSigs_single_hash, 0);",
    "path": "src/script/interpreter.cpp",
    "position": null,
    "original_position": 137,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "39b0a505d5c0ba97439a82026ae6a0449f31896a",
    "user": {
      "login": "benthecarman",
      "id": 15256660,
      "node_id": "MDQ6VXNlcjE1MjU2NjYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benthecarman",
      "html_url": "https://github.com/benthecarman",
      "followers_url": "https://api.github.com/users/benthecarman/followers",
      "following_url": "https://api.github.com/users/benthecarman/following{/other_user}",
      "gists_url": "https://api.github.com/users/benthecarman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
      "organizations_url": "https://api.github.com/users/benthecarman/orgs",
      "repos_url": "https://api.github.com/users/benthecarman/repos",
      "events_url": "https://api.github.com/users/benthecarman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benthecarman/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Would it be safer to set `input_index` here to `uint32_t`'s max value? That way if there is less of a chance that we miss in a test the handling of a changing `input_index` since most likely the tested `input_index` will be `0`",
    "created_at": "2021-05-18T03:23:32Z",
    "updated_at": "2021-05-18T03:26:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634011655",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634011655"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634011655"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634011655/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 1551,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 1548,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634012540",
    "pull_request_review_id": 661600561,
    "id": 634012540,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDAxMjU0MA==",
    "diff_hunk": "@@ -1452,11 +1535,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.\n         m_prevouts_single_hash = GetPrevoutsSHA256(txTo);\n         m_sequences_single_hash = GetSequencesSHA256(txTo);\n         m_outputs_single_hash = GetOutputsSHA256(txTo);\n+\n+        bool skip_scriptSigs = std::find_if(txTo.vin.begin(), txTo.vin.end(),\n+                [](const CTxIn& c) { return c.scriptSig != CScript(); }) == txTo.vin.end();\n+        if (skip_scriptSigs) {\n+            // 0 hash used to signal if we should skip scriptSigs\n+            // when re-computing for different indexes.\n+            m_scriptSigs_single_hash = uint256{};\n+            // TODO: Cache midstate?\n+            m_standard_template_single_hash = GetStandardTemplateHashEmptyScript(txTo, m_outputs_single_hash, m_sequences_single_hash, 0);\n+        } else {\n+            m_scriptSigs_single_hash = GetScriptSigsSHA256(txTo);\n+            m_standard_template_single_hash = GetStandardTemplateHashWithScript(txTo, m_outputs_single_hash, m_sequences_single_hash, m_scriptSigs_single_hash, 0);",
    "path": "src/script/interpreter.cpp",
    "position": null,
    "original_position": 137,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "39b0a505d5c0ba97439a82026ae6a0449f31896a",
    "user": {
      "login": "benthecarman",
      "id": 15256660,
      "node_id": "MDQ6VXNlcjE1MjU2NjYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benthecarman",
      "html_url": "https://github.com/benthecarman",
      "followers_url": "https://api.github.com/users/benthecarman/followers",
      "following_url": "https://api.github.com/users/benthecarman/following{/other_user}",
      "gists_url": "https://api.github.com/users/benthecarman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
      "organizations_url": "https://api.github.com/users/benthecarman/orgs",
      "repos_url": "https://api.github.com/users/benthecarman/repos",
      "events_url": "https://api.github.com/users/benthecarman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benthecarman/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "We do lose the effiency of always having the `0`th input cached however",
    "created_at": "2021-05-18T03:27:09Z",
    "updated_at": "2021-05-18T03:27:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634012540",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634012540"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634012540"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634012540/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 1551,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 1548,
    "side": "RIGHT",
    "in_reply_to_id": 634011655
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634412955",
    "pull_request_review_id": 662126257,
    "id": 634412955,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDQxMjk1NQ==",
    "diff_hunk": "@@ -1452,11 +1535,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.\n         m_prevouts_single_hash = GetPrevoutsSHA256(txTo);\n         m_sequences_single_hash = GetSequencesSHA256(txTo);\n         m_outputs_single_hash = GetOutputsSHA256(txTo);\n+\n+        bool skip_scriptSigs = std::find_if(txTo.vin.begin(), txTo.vin.end(),\n+                [](const CTxIn& c) { return c.scriptSig != CScript(); }) == txTo.vin.end();\n+        if (skip_scriptSigs) {\n+            // 0 hash used to signal if we should skip scriptSigs\n+            // when re-computing for different indexes.\n+            m_scriptSigs_single_hash = uint256{};\n+            // TODO: Cache midstate?\n+            m_standard_template_single_hash = GetStandardTemplateHashEmptyScript(txTo, m_outputs_single_hash, m_sequences_single_hash, 0);\n+        } else {\n+            m_scriptSigs_single_hash = GetScriptSigsSHA256(txTo);\n+            m_standard_template_single_hash = GetStandardTemplateHashWithScript(txTo, m_outputs_single_hash, m_sequences_single_hash, m_scriptSigs_single_hash, 0);",
    "path": "src/script/interpreter.cpp",
    "position": null,
    "original_position": 137,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "39b0a505d5c0ba97439a82026ae6a0449f31896a",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "yeah the whole point is caching the most common case -- we could also cache the midstate without index and just finalize with an index in consensus.",
    "created_at": "2021-05-18T14:00:50Z",
    "updated_at": "2021-05-18T14:00:50Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634412955",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634412955"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634412955"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634412955/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 1551,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 1548,
    "side": "RIGHT",
    "in_reply_to_id": 634011655
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/642149506",
    "pull_request_review_id": 671880403,
    "id": 642149506,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjE0OTUwNg==",
    "diff_hunk": "@@ -91,6 +91,13 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1628640000; // August 11th, 2021\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height = 709632; // Approximately November 12th, 2021\n \n+        // Deployment of CTV (BIP 119)\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].bit = 5;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].nStartTime =Consensus::BIP9Deployment::NEVER_ACTIVE;",
    "path": "src/chainparams.cpp",
    "position": null,
    "original_position": 6,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "39b0a505d5c0ba97439a82026ae6a0449f31896a",
    "user": {
      "login": "rxgrant",
      "id": 6995442,
      "node_id": "MDQ6VXNlcjY5OTU0NDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6995442?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rxgrant",
      "html_url": "https://github.com/rxgrant",
      "followers_url": "https://api.github.com/users/rxgrant/followers",
      "following_url": "https://api.github.com/users/rxgrant/following{/other_user}",
      "gists_url": "https://api.github.com/users/rxgrant/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rxgrant/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rxgrant/subscriptions",
      "organizations_url": "https://api.github.com/users/rxgrant/orgs",
      "repos_url": "https://api.github.com/users/rxgrant/repos",
      "events_url": "https://api.github.com/users/rxgrant/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rxgrant/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].nStartTime = Consensus::BIP9Deployment::NEVER_ACTIVE;\r\n```",
    "created_at": "2021-05-31T00:18:05Z",
    "updated_at": "2021-05-31T00:18:06Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r642149506",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/642149506"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r642149506"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/642149506/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 96,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/642149551",
    "pull_request_review_id": 671880450,
    "id": 642149551,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjE0OTU1MQ==",
    "diff_hunk": "@@ -210,6 +217,12 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1628640000; // August 11th, 2021\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height = 0; // No activation delay\n \n+        // Deployment of CTV (BIP 119)\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].bit = 5;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].nStartTime =Consensus::BIP9Deployment::NEVER_ACTIVE;",
    "path": "src/chainparams.cpp",
    "position": null,
    "original_position": 20,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "39b0a505d5c0ba97439a82026ae6a0449f31896a",
    "user": {
      "login": "rxgrant",
      "id": 6995442,
      "node_id": "MDQ6VXNlcjY5OTU0NDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6995442?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rxgrant",
      "html_url": "https://github.com/rxgrant",
      "followers_url": "https://api.github.com/users/rxgrant/followers",
      "following_url": "https://api.github.com/users/rxgrant/following{/other_user}",
      "gists_url": "https://api.github.com/users/rxgrant/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rxgrant/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rxgrant/subscriptions",
      "organizations_url": "https://api.github.com/users/rxgrant/orgs",
      "repos_url": "https://api.github.com/users/rxgrant/repos",
      "events_url": "https://api.github.com/users/rxgrant/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rxgrant/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].nStartTime = Consensus::BIP9Deployment::NEVER_ACTIVE;\r\n```",
    "created_at": "2021-05-31T00:18:27Z",
    "updated_at": "2021-05-31T00:18:27Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r642149551",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/642149551"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r642149551"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/642149551/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 222,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/642149582",
    "pull_request_review_id": 671880487,
    "id": 642149582,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjE0OTU4Mg==",
    "diff_hunk": "@@ -347,6 +360,12 @@ class SigNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height = 0; // No activation delay\n \n+        // Deployment of CTV (BIP 119)\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].bit = 5;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].nStartTime =Consensus::BIP9Deployment::NEVER_ACTIVE;",
    "path": "src/chainparams.cpp",
    "position": null,
    "original_position": 33,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "39b0a505d5c0ba97439a82026ae6a0449f31896a",
    "user": {
      "login": "rxgrant",
      "id": 6995442,
      "node_id": "MDQ6VXNlcjY5OTU0NDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6995442?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rxgrant",
      "html_url": "https://github.com/rxgrant",
      "followers_url": "https://api.github.com/users/rxgrant/followers",
      "following_url": "https://api.github.com/users/rxgrant/following{/other_user}",
      "gists_url": "https://api.github.com/users/rxgrant/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rxgrant/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rxgrant/subscriptions",
      "organizations_url": "https://api.github.com/users/rxgrant/orgs",
      "repos_url": "https://api.github.com/users/rxgrant/repos",
      "events_url": "https://api.github.com/users/rxgrant/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rxgrant/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].nStartTime = Consensus::BIP9Deployment::NEVER_ACTIVE;\r\n```",
    "created_at": "2021-05-31T00:18:45Z",
    "updated_at": "2021-05-31T00:18:45Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r642149582",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/642149582"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r642149582"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/642149582/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 365,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/642149616",
    "pull_request_review_id": 671880521,
    "id": 642149616,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjE0OTYxNg==",
    "diff_hunk": "@@ -415,6 +434,12 @@ class CRegTestParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height = 0; // No activation delay\n \n+        // Deployment of CTV (BIP 119)\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].bit = 5;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].nStartTime =Consensus::BIP9Deployment::ALWAYS_ACTIVE;",
    "path": "src/chainparams.cpp",
    "position": null,
    "original_position": 46,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "39b0a505d5c0ba97439a82026ae6a0449f31896a",
    "user": {
      "login": "rxgrant",
      "id": 6995442,
      "node_id": "MDQ6VXNlcjY5OTU0NDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6995442?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rxgrant",
      "html_url": "https://github.com/rxgrant",
      "followers_url": "https://api.github.com/users/rxgrant/followers",
      "following_url": "https://api.github.com/users/rxgrant/following{/other_user}",
      "gists_url": "https://api.github.com/users/rxgrant/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rxgrant/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rxgrant/subscriptions",
      "organizations_url": "https://api.github.com/users/rxgrant/orgs",
      "repos_url": "https://api.github.com/users/rxgrant/repos",
      "events_url": "https://api.github.com/users/rxgrant/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rxgrant/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].nStartTime = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\r\n```",
    "created_at": "2021-05-31T00:19:00Z",
    "updated_at": "2021-05-31T00:19:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r642149616",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/642149616"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r642149616"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/642149616/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 439,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668206692",
    "pull_request_review_id": 704479139,
    "id": 668206692,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODIwNjY5Mg==",
    "diff_hunk": "@@ -616,7 +616,32 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     break;\n                 }\n \n-                case OP_NOP1: case OP_NOP4: case OP_NOP5:\n+                case OP_CHECKTEMPLATEVERIFY:\n+                {\n+                    // if flags not enabled; treat as a NOP4\n+                    if (!(flags & SCRIPT_VERIFY_STANDARD_TEMPLATE)) break;\n+\n+                    if (stack.size() < 1)\n+                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);",
    "path": "src/script/interpreter.cpp",
    "position": 15,
    "original_position": 11,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "b04c35c8506160e95a965382956fa5b68d139b29",
    "user": {
      "login": "benthecarman",
      "id": 15256660,
      "node_id": "MDQ6VXNlcjE1MjU2NjYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benthecarman",
      "html_url": "https://github.com/benthecarman",
      "followers_url": "https://api.github.com/users/benthecarman/followers",
      "following_url": "https://api.github.com/users/benthecarman/following{/other_user}",
      "gists_url": "https://api.github.com/users/benthecarman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
      "organizations_url": "https://api.github.com/users/benthecarman/orgs",
      "repos_url": "https://api.github.com/users/benthecarman/repos",
      "events_url": "https://api.github.com/users/benthecarman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benthecarman/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If I comment out these 2 lines `feature_checktemplateverify.py` still passes",
    "created_at": "2021-07-12T19:43:55Z",
    "updated_at": "2021-07-12T19:53:50Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668206692",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668206692"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668206692"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668206692/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 628,
    "original_start_line": 624,
    "start_side": "RIGHT",
    "line": 629,
    "original_line": 629,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668207732",
    "pull_request_review_id": 704479139,
    "id": 668207732,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODIwNzczMg==",
    "diff_hunk": "@@ -616,7 +616,32 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     break;\n                 }\n \n-                case OP_NOP1: case OP_NOP4: case OP_NOP5:\n+                case OP_CHECKTEMPLATEVERIFY:\n+                {\n+                    // if flags not enabled; treat as a NOP4\n+                    if (!(flags & SCRIPT_VERIFY_STANDARD_TEMPLATE)) break;\n+\n+                    if (stack.size() < 1)\n+                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+\n+                    // If the argument was not 32 bytes, treat as OP_NOP4:\n+                    switch (stack.back().size()) {\n+                        case 32:\n+                            if (!checker.CheckStandardTemplateHash(stack.back())) {\n+                                return set_error(serror, SCRIPT_ERR_TEMPLATE_MISMATCH);\n+                            }\n+                            break;\n+                        default:\n+                            // future upgrade can add semantics for this opcode with different length args\n+                            // so discourage use when applicable\n+                            if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n+                                return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\n+                            }",
    "path": "src/script/interpreter.cpp",
    "position": 29,
    "original_position": 25,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "b04c35c8506160e95a965382956fa5b68d139b29",
    "user": {
      "login": "benthecarman",
      "id": 15256660,
      "node_id": "MDQ6VXNlcjE1MjU2NjYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benthecarman",
      "html_url": "https://github.com/benthecarman",
      "followers_url": "https://api.github.com/users/benthecarman/followers",
      "following_url": "https://api.github.com/users/benthecarman/following{/other_user}",
      "gists_url": "https://api.github.com/users/benthecarman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
      "organizations_url": "https://api.github.com/users/benthecarman/orgs",
      "repos_url": "https://api.github.com/users/benthecarman/repos",
      "events_url": "https://api.github.com/users/benthecarman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benthecarman/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "replacing this with a `break` has `feature_checktemplateverify.py` still passing",
    "created_at": "2021-07-12T19:45:49Z",
    "updated_at": "2021-07-12T19:53:50Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668207732",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668207732"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668207732"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668207732/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 639,
    "original_start_line": 635,
    "start_side": "RIGHT",
    "line": 643,
    "original_line": 643,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668209161",
    "pull_request_review_id": 704479139,
    "id": 668209161,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODIwOTE2MQ==",
    "diff_hunk": "@@ -1430,6 +1510,8 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         m_spent_outputs_ready = true;\n     }\n \n+    // TODO: Improve this heuristic\n+    bool uses_bip119_ctv = true;",
    "path": "src/script/interpreter.cpp",
    "position": 117,
    "original_position": 111,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "b04c35c8506160e95a965382956fa5b68d139b29",
    "user": {
      "login": "benthecarman",
      "id": 15256660,
      "node_id": "MDQ6VXNlcjE1MjU2NjYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benthecarman",
      "html_url": "https://github.com/benthecarman",
      "followers_url": "https://api.github.com/users/benthecarman/followers",
      "following_url": "https://api.github.com/users/benthecarman/following{/other_user}",
      "gists_url": "https://api.github.com/users/benthecarman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
      "organizations_url": "https://api.github.com/users/benthecarman/orgs",
      "repos_url": "https://api.github.com/users/benthecarman/repos",
      "events_url": "https://api.github.com/users/benthecarman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benthecarman/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "setting this to `false` still has `feature_checktemplateverify.py` passing",
    "created_at": "2021-07-12T19:47:56Z",
    "updated_at": "2021-07-12T19:53:50Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668209161",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668209161"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668209161"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668209161/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1520,
    "original_line": 1513,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668211185",
    "pull_request_review_id": 704479139,
    "id": 668211185,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODIxMTE4NQ==",
    "diff_hunk": "@@ -1452,11 +1534,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.\n         m_prevouts_single_hash = GetPrevoutsSHA256(txTo);\n         m_sequences_single_hash = GetSequencesSHA256(txTo);\n         m_outputs_single_hash = GetOutputsSHA256(txTo);\n+\n+        bool skip_scriptSigs = std::find_if(txTo.vin.begin(), txTo.vin.end(),\n+                [](const CTxIn& c) { return c.scriptSig != CScript(); }) == txTo.vin.end();\n+        if (skip_scriptSigs) {\n+            // 0 hash used to signal if we should skip scriptSigs\n+            // when re-computing for different indexes.\n+            m_scriptSigs_single_hash = uint256{};\n+            // TODO: Cache midstate?\n+            m_standard_template_single_hash = GetStandardTemplateHashEmptyScript(txTo, m_outputs_single_hash, m_sequences_single_hash, 0);\n+        } else {\n+            m_scriptSigs_single_hash = GetScriptSigsSHA256(txTo);\n+            m_standard_template_single_hash = GetStandardTemplateHashWithScript(txTo, m_outputs_single_hash, m_sequences_single_hash, m_scriptSigs_single_hash, 0);",
    "path": "src/script/interpreter.cpp",
    "position": null,
    "original_position": 136,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "b04c35c8506160e95a965382956fa5b68d139b29",
    "user": {
      "login": "benthecarman",
      "id": 15256660,
      "node_id": "MDQ6VXNlcjE1MjU2NjYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benthecarman",
      "html_url": "https://github.com/benthecarman",
      "followers_url": "https://api.github.com/users/benthecarman/followers",
      "following_url": "https://api.github.com/users/benthecarman/following{/other_user}",
      "gists_url": "https://api.github.com/users/benthecarman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
      "organizations_url": "https://api.github.com/users/benthecarman/orgs",
      "repos_url": "https://api.github.com/users/benthecarman/repos",
      "events_url": "https://api.github.com/users/benthecarman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benthecarman/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "changing the `input_index` param to `100` in either of these causes the tests to fail which seems concerncing to me as this is just a cache",
    "created_at": "2021-07-12T19:51:19Z",
    "updated_at": "2021-07-12T19:55:59Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668211185",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668211185"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668211185"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668211185/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 1550,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 1548,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668211774",
    "pull_request_review_id": 704479139,
    "id": 668211774,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODIxMTc3NA==",
    "diff_hunk": "@@ -1452,11 +1534,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.\n         m_prevouts_single_hash = GetPrevoutsSHA256(txTo);\n         m_sequences_single_hash = GetSequencesSHA256(txTo);\n         m_outputs_single_hash = GetOutputsSHA256(txTo);\n+\n+        bool skip_scriptSigs = std::find_if(txTo.vin.begin(), txTo.vin.end(),\n+                [](const CTxIn& c) { return c.scriptSig != CScript(); }) == txTo.vin.end();\n+        if (skip_scriptSigs) {\n+            // 0 hash used to signal if we should skip scriptSigs\n+            // when re-computing for different indexes.\n+            m_scriptSigs_single_hash = uint256{};\n+            // TODO: Cache midstate?\n+            m_standard_template_single_hash = GetStandardTemplateHashEmptyScript(txTo, m_outputs_single_hash, m_sequences_single_hash, 0);\n+        } else {\n+            m_scriptSigs_single_hash = GetScriptSigsSHA256(txTo);\n+            m_standard_template_single_hash = GetStandardTemplateHashWithScript(txTo, m_outputs_single_hash, m_sequences_single_hash, m_scriptSigs_single_hash, 0);\n+        }\n+        m_bip119_ctv_ready = true;",
    "path": "src/script/interpreter.cpp",
    "position": 144,
    "original_position": 138,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "b04c35c8506160e95a965382956fa5b68d139b29",
    "user": {
      "login": "benthecarman",
      "id": 15256660,
      "node_id": "MDQ6VXNlcjE1MjU2NjYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benthecarman",
      "html_url": "https://github.com/benthecarman",
      "followers_url": "https://api.github.com/users/benthecarman/followers",
      "following_url": "https://api.github.com/users/benthecarman/following{/other_user}",
      "gists_url": "https://api.github.com/users/benthecarman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
      "organizations_url": "https://api.github.com/users/benthecarman/orgs",
      "repos_url": "https://api.github.com/users/benthecarman/repos",
      "events_url": "https://api.github.com/users/benthecarman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benthecarman/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "changing this to false has `feature_checktemplateverify` still pass",
    "created_at": "2021-07-12T19:52:16Z",
    "updated_at": "2021-07-12T19:53:50Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668211774",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668211774"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668211774"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668211774/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1561,
    "original_line": 1554,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668230043",
    "pull_request_review_id": 704509649,
    "id": 668230043,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODIzMDA0Mw==",
    "diff_hunk": "@@ -1452,11 +1534,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.\n         m_prevouts_single_hash = GetPrevoutsSHA256(txTo);\n         m_sequences_single_hash = GetSequencesSHA256(txTo);\n         m_outputs_single_hash = GetOutputsSHA256(txTo);\n+\n+        bool skip_scriptSigs = std::find_if(txTo.vin.begin(), txTo.vin.end(),\n+                [](const CTxIn& c) { return c.scriptSig != CScript(); }) == txTo.vin.end();\n+        if (skip_scriptSigs) {\n+            // 0 hash used to signal if we should skip scriptSigs\n+            // when re-computing for different indexes.\n+            m_scriptSigs_single_hash = uint256{};\n+            // TODO: Cache midstate?\n+            m_standard_template_single_hash = GetStandardTemplateHashEmptyScript(txTo, m_outputs_single_hash, m_sequences_single_hash, 0);\n+        } else {\n+            m_scriptSigs_single_hash = GetScriptSigsSHA256(txTo);\n+            m_standard_template_single_hash = GetStandardTemplateHashWithScript(txTo, m_outputs_single_hash, m_sequences_single_hash, m_scriptSigs_single_hash, 0);\n+        }\n+        m_bip119_ctv_ready = true;",
    "path": "src/script/interpreter.cpp",
    "position": 144,
    "original_position": 138,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "b04c35c8506160e95a965382956fa5b68d139b29",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yep, that's normal.\r\n\r\nIf the cache is disabled (which making ready = false does), then the cache isn't used.",
    "created_at": "2021-07-12T20:22:54Z",
    "updated_at": "2021-07-12T20:22:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668230043",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668230043"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668230043"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668230043/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1561,
    "original_line": 1554,
    "side": "RIGHT",
    "in_reply_to_id": 668211774
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668231716",
    "pull_request_review_id": 704511886,
    "id": 668231716,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODIzMTcxNg==",
    "diff_hunk": "@@ -1452,11 +1534,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.\n         m_prevouts_single_hash = GetPrevoutsSHA256(txTo);\n         m_sequences_single_hash = GetSequencesSHA256(txTo);\n         m_outputs_single_hash = GetOutputsSHA256(txTo);\n+\n+        bool skip_scriptSigs = std::find_if(txTo.vin.begin(), txTo.vin.end(),\n+                [](const CTxIn& c) { return c.scriptSig != CScript(); }) == txTo.vin.end();\n+        if (skip_scriptSigs) {\n+            // 0 hash used to signal if we should skip scriptSigs\n+            // when re-computing for different indexes.\n+            m_scriptSigs_single_hash = uint256{};\n+            // TODO: Cache midstate?\n+            m_standard_template_single_hash = GetStandardTemplateHashEmptyScript(txTo, m_outputs_single_hash, m_sequences_single_hash, 0);\n+        } else {\n+            m_scriptSigs_single_hash = GetScriptSigsSHA256(txTo);\n+            m_standard_template_single_hash = GetStandardTemplateHashWithScript(txTo, m_outputs_single_hash, m_sequences_single_hash, m_scriptSigs_single_hash, 0);",
    "path": "src/script/interpreter.cpp",
    "position": null,
    "original_position": 136,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "b04c35c8506160e95a965382956fa5b68d139b29",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "That's to be expected -- the cached precompute expects input_index == 0, https://github.com/bitcoin/bitcoin/blob/b04c35c8506160e95a965382956fa5b68d139b29/src/script/interpreter.cpp#L1910, so if you change what is cached to input_index == 100 the checker will use the wrong value.",
    "created_at": "2021-07-12T20:25:43Z",
    "updated_at": "2021-07-12T20:25:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668231716",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668231716"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668231716"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668231716/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 1550,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 1548,
    "side": "RIGHT",
    "in_reply_to_id": 668211185
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668233412",
    "pull_request_review_id": 704514102,
    "id": 668233412,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODIzMzQxMg==",
    "diff_hunk": "@@ -1430,6 +1510,8 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         m_spent_outputs_ready = true;\n     }\n \n+    // TODO: Improve this heuristic\n+    bool uses_bip119_ctv = true;",
    "path": "src/script/interpreter.cpp",
    "position": 117,
    "original_position": 111,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "b04c35c8506160e95a965382956fa5b68d139b29",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is to be expected, if uses_bip119_ctv is false, then the checker will just compute the values without the cache (unless taproot/143 flags passed -- i suppose we could tighten when the cache gets made). If it is true, then the cache is always available. The cache being present or not shouldn't break anything!",
    "created_at": "2021-07-12T20:28:28Z",
    "updated_at": "2021-07-12T20:28:28Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668233412",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668233412"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668233412"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668233412/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1520,
    "original_line": 1513,
    "side": "RIGHT",
    "in_reply_to_id": 668209161
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668234024",
    "pull_request_review_id": 704514915,
    "id": 668234024,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODIzNDAyNA==",
    "diff_hunk": "@@ -616,7 +616,32 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     break;\n                 }\n \n-                case OP_NOP1: case OP_NOP4: case OP_NOP5:\n+                case OP_CHECKTEMPLATEVERIFY:\n+                {\n+                    // if flags not enabled; treat as a NOP4\n+                    if (!(flags & SCRIPT_VERIFY_STANDARD_TEMPLATE)) break;\n+\n+                    if (stack.size() < 1)\n+                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+\n+                    // If the argument was not 32 bytes, treat as OP_NOP4:\n+                    switch (stack.back().size()) {\n+                        case 32:\n+                            if (!checker.CheckStandardTemplateHash(stack.back())) {\n+                                return set_error(serror, SCRIPT_ERR_TEMPLATE_MISMATCH);\n+                            }\n+                            break;\n+                        default:\n+                            // future upgrade can add semantics for this opcode with different length args\n+                            // so discourage use when applicable\n+                            if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n+                                return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\n+                            }",
    "path": "src/script/interpreter.cpp",
    "position": 29,
    "original_position": 25,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "b04c35c8506160e95a965382956fa5b68d139b29",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "good catch, I should pass in some non-32 byte values to check that the txns are rejected.",
    "created_at": "2021-07-12T20:29:29Z",
    "updated_at": "2021-07-12T20:29:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668234024",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668234024"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668234024"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668234024/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 639,
    "original_start_line": 635,
    "start_side": "RIGHT",
    "line": 643,
    "original_line": 643,
    "side": "RIGHT",
    "in_reply_to_id": 668207732
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668234352",
    "pull_request_review_id": 704515354,
    "id": 668234352,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODIzNDM1Mg==",
    "diff_hunk": "@@ -616,7 +616,32 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     break;\n                 }\n \n-                case OP_NOP1: case OP_NOP4: case OP_NOP5:\n+                case OP_CHECKTEMPLATEVERIFY:\n+                {\n+                    // if flags not enabled; treat as a NOP4\n+                    if (!(flags & SCRIPT_VERIFY_STANDARD_TEMPLATE)) break;\n+\n+                    if (stack.size() < 1)\n+                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);",
    "path": "src/script/interpreter.cpp",
    "position": 15,
    "original_position": 11,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "b04c35c8506160e95a965382956fa5b68d139b29",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "good catch, I should test empty stack.",
    "created_at": "2021-07-12T20:30:01Z",
    "updated_at": "2021-07-12T20:30:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668234352",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668234352"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668234352"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668234352/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 628,
    "original_start_line": 624,
    "start_side": "RIGHT",
    "line": 629,
    "original_line": 629,
    "side": "RIGHT",
    "in_reply_to_id": 668206692
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668454386",
    "pull_request_review_id": 704778269,
    "id": 668454386,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODQ1NDM4Ng==",
    "diff_hunk": "@@ -616,7 +616,32 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     break;\n                 }\n \n-                case OP_NOP1: case OP_NOP4: case OP_NOP5:\n+                case OP_CHECKTEMPLATEVERIFY:\n+                {\n+                    // if flags not enabled; treat as a NOP4\n+                    if (!(flags & SCRIPT_VERIFY_STANDARD_TEMPLATE)) break;\n+\n+                    if (stack.size() < 1)\n+                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+\n+                    // If the argument was not 32 bytes, treat as OP_NOP4:\n+                    switch (stack.back().size()) {\n+                        case 32:\n+                            if (!checker.CheckStandardTemplateHash(stack.back())) {\n+                                return set_error(serror, SCRIPT_ERR_TEMPLATE_MISMATCH);\n+                            }\n+                            break;\n+                        default:\n+                            // future upgrade can add semantics for this opcode with different length args\n+                            // so discourage use when applicable\n+                            if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n+                                return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\n+                            }",
    "path": "src/script/interpreter.cpp",
    "position": 29,
    "original_position": 25,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "b04c35c8506160e95a965382956fa5b68d139b29",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Now covered :)",
    "created_at": "2021-07-13T06:08:53Z",
    "updated_at": "2021-07-13T06:08:53Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668454386",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668454386"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668454386"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668454386/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 639,
    "original_start_line": 635,
    "start_side": "RIGHT",
    "line": 643,
    "original_line": 643,
    "side": "RIGHT",
    "in_reply_to_id": 668207732
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668454528",
    "pull_request_review_id": 704778413,
    "id": 668454528,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODQ1NDUyOA==",
    "diff_hunk": "@@ -616,7 +616,32 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     break;\n                 }\n \n-                case OP_NOP1: case OP_NOP4: case OP_NOP5:\n+                case OP_CHECKTEMPLATEVERIFY:\n+                {\n+                    // if flags not enabled; treat as a NOP4\n+                    if (!(flags & SCRIPT_VERIFY_STANDARD_TEMPLATE)) break;\n+\n+                    if (stack.size() < 1)\n+                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);",
    "path": "src/script/interpreter.cpp",
    "position": 15,
    "original_position": 11,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "b04c35c8506160e95a965382956fa5b68d139b29",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "now covered :)",
    "created_at": "2021-07-13T06:09:06Z",
    "updated_at": "2021-07-13T06:09:06Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668454528",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668454528"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668454528"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668454528/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 628,
    "original_start_line": 624,
    "start_side": "RIGHT",
    "line": 629,
    "original_line": 629,
    "side": "RIGHT",
    "in_reply_to_id": 668206692
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668551097",
    "pull_request_review_id": 704905550,
    "id": 668551097,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1MTA5Nw==",
    "diff_hunk": "@@ -1803,6 +1901,30 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckStandardTemplateHash(const std::vector<unsigned char>& hash) const\n+{\n+    // Should already be checked before calling...\n+    assert(hash.size() == 32);\n+    if (txdata && txdata->m_bip119_ctv_ready) {\n+        // if nIn == 0, then we've already cached this and can directly check\n+        if (nIn == 0) {\n+            return std::equal(txdata->m_standard_template_single_hash.begin(), txdata->m_standard_template_single_hash.end(), hash.data());\n+        } else {\n+            // otherwise we still have *most* of the hash cached,\n+            // so just re-compute the correct one and compare\n+            assert(txTo != nullptr);\n+            uint256 hash_tmpl = txdata->m_scriptSigs_single_hash.IsNull() ?\n+                GetStandardTemplateHashEmptyScript(*txTo, txdata->m_outputs_single_hash, txdata->m_sequences_single_hash, nIn) :\n+                GetStandardTemplateHashWithScript(*txTo, txdata->m_outputs_single_hash, txdata->m_sequences_single_hash,\n+                        txdata->m_scriptSigs_single_hash, nIn);\n+            return std::equal(hash_tmpl.begin(), hash_tmpl.end(), hash.data());\n+        }\n+    }\n+    assert(txTo != nullptr);",
    "path": "src/script/interpreter.cpp",
    "position": null,
    "original_position": 177,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "9ec56bb91139747f19c56f5f640d558c831ba152",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is untested code: https://drahtbot.space/host_reports/DrahtBot/reports/coverage/bitcoin/bitcoin/21702/total.coverage/src/script/interpreter.cpp.gcov.html#1924",
    "created_at": "2021-07-13T08:38:17Z",
    "updated_at": "2021-07-13T08:39:53Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668551097",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668551097"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668551097"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668551097/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1924,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668855118",
    "pull_request_review_id": 705313250,
    "id": 668855118,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODg1NTExOA==",
    "diff_hunk": "@@ -1803,6 +1901,30 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckStandardTemplateHash(const std::vector<unsigned char>& hash) const\n+{\n+    // Should already be checked before calling...\n+    assert(hash.size() == 32);\n+    if (txdata && txdata->m_bip119_ctv_ready) {\n+        // if nIn == 0, then we've already cached this and can directly check\n+        if (nIn == 0) {\n+            return std::equal(txdata->m_standard_template_single_hash.begin(), txdata->m_standard_template_single_hash.end(), hash.data());\n+        } else {\n+            // otherwise we still have *most* of the hash cached,\n+            // so just re-compute the correct one and compare\n+            assert(txTo != nullptr);\n+            uint256 hash_tmpl = txdata->m_scriptSigs_single_hash.IsNull() ?\n+                GetStandardTemplateHashEmptyScript(*txTo, txdata->m_outputs_single_hash, txdata->m_sequences_single_hash, nIn) :\n+                GetStandardTemplateHashWithScript(*txTo, txdata->m_outputs_single_hash, txdata->m_sequences_single_hash,\n+                        txdata->m_scriptSigs_single_hash, nIn);\n+            return std::equal(hash_tmpl.begin(), hash_tmpl.end(), hash.data());\n+        }\n+    }\n+    assert(txTo != nullptr);",
    "path": "src/script/interpreter.cpp",
    "position": null,
    "original_position": 177,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "9ec56bb91139747f19c56f5f640d558c831ba152",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good point -- trying to think about how to trigger no precomputed data available, other than from unit tests. Are their code paths where we do not precompute?",
    "created_at": "2021-07-13T15:05:53Z",
    "updated_at": "2021-07-13T15:05:53Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668855118",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668855118"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668855118"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668855118/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1924,
    "side": "RIGHT",
    "in_reply_to_id": 668551097
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668855427",
    "pull_request_review_id": 705313657,
    "id": 668855427,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODg1NTQyNw==",
    "diff_hunk": "@@ -1803,6 +1901,30 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckStandardTemplateHash(const std::vector<unsigned char>& hash) const\n+{\n+    // Should already be checked before calling...\n+    assert(hash.size() == 32);\n+    if (txdata && txdata->m_bip119_ctv_ready) {\n+        // if nIn == 0, then we've already cached this and can directly check\n+        if (nIn == 0) {\n+            return std::equal(txdata->m_standard_template_single_hash.begin(), txdata->m_standard_template_single_hash.end(), hash.data());\n+        } else {\n+            // otherwise we still have *most* of the hash cached,\n+            // so just re-compute the correct one and compare\n+            assert(txTo != nullptr);\n+            uint256 hash_tmpl = txdata->m_scriptSigs_single_hash.IsNull() ?\n+                GetStandardTemplateHashEmptyScript(*txTo, txdata->m_outputs_single_hash, txdata->m_sequences_single_hash, nIn) :\n+                GetStandardTemplateHashWithScript(*txTo, txdata->m_outputs_single_hash, txdata->m_sequences_single_hash,\n+                        txdata->m_scriptSigs_single_hash, nIn);\n+            return std::equal(hash_tmpl.begin(), hash_tmpl.end(), hash.data());\n+        }\n+    }\n+    assert(txTo != nullptr);",
    "path": "src/script/interpreter.cpp",
    "position": null,
    "original_position": 177,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "9ec56bb91139747f19c56f5f640d558c831ba152",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "(e.g., unit tests I can just call the function, but i'd love to test it on a full code path)",
    "created_at": "2021-07-13T15:06:12Z",
    "updated_at": "2021-07-13T15:06:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668855427",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668855427"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668855427"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668855427/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1924,
    "side": "RIGHT",
    "in_reply_to_id": 668551097
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668875430",
    "pull_request_review_id": 705339572,
    "id": 668875430,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODg3NTQzMA==",
    "diff_hunk": "@@ -1803,6 +1901,30 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckStandardTemplateHash(const std::vector<unsigned char>& hash) const\n+{\n+    // Should already be checked before calling...\n+    assert(hash.size() == 32);\n+    if (txdata && txdata->m_bip119_ctv_ready) {\n+        // if nIn == 0, then we've already cached this and can directly check\n+        if (nIn == 0) {\n+            return std::equal(txdata->m_standard_template_single_hash.begin(), txdata->m_standard_template_single_hash.end(), hash.data());\n+        } else {\n+            // otherwise we still have *most* of the hash cached,\n+            // so just re-compute the correct one and compare\n+            assert(txTo != nullptr);\n+            uint256 hash_tmpl = txdata->m_scriptSigs_single_hash.IsNull() ?\n+                GetStandardTemplateHashEmptyScript(*txTo, txdata->m_outputs_single_hash, txdata->m_sequences_single_hash, nIn) :\n+                GetStandardTemplateHashWithScript(*txTo, txdata->m_outputs_single_hash, txdata->m_sequences_single_hash,\n+                        txdata->m_scriptSigs_single_hash, nIn);\n+            return std::equal(hash_tmpl.begin(), hash_tmpl.end(), hash.data());\n+        }\n+    }\n+    assert(txTo != nullptr);",
    "path": "src/script/interpreter.cpp",
    "position": null,
    "original_position": 177,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "9ec56bb91139747f19c56f5f640d558c831ba152",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Not sure if there is a code path that can hit this in production. Have you seen https://github.com/bitcoin/bitcoin/pull/21330/files ?",
    "created_at": "2021-07-13T15:27:36Z",
    "updated_at": "2021-07-13T15:27:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668875430",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668875430"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668875430"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668875430/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1924,
    "side": "RIGHT",
    "in_reply_to_id": 668551097
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668931820",
    "pull_request_review_id": 705413589,
    "id": 668931820,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODkzMTgyMA==",
    "diff_hunk": "@@ -1803,6 +1901,30 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckStandardTemplateHash(const std::vector<unsigned char>& hash) const\n+{\n+    // Should already be checked before calling...\n+    assert(hash.size() == 32);\n+    if (txdata && txdata->m_bip119_ctv_ready) {\n+        // if nIn == 0, then we've already cached this and can directly check\n+        if (nIn == 0) {\n+            return std::equal(txdata->m_standard_template_single_hash.begin(), txdata->m_standard_template_single_hash.end(), hash.data());\n+        } else {\n+            // otherwise we still have *most* of the hash cached,\n+            // so just re-compute the correct one and compare\n+            assert(txTo != nullptr);\n+            uint256 hash_tmpl = txdata->m_scriptSigs_single_hash.IsNull() ?\n+                GetStandardTemplateHashEmptyScript(*txTo, txdata->m_outputs_single_hash, txdata->m_sequences_single_hash, nIn) :\n+                GetStandardTemplateHashWithScript(*txTo, txdata->m_outputs_single_hash, txdata->m_sequences_single_hash,\n+                        txdata->m_scriptSigs_single_hash, nIn);\n+            return std::equal(hash_tmpl.begin(), hash_tmpl.end(), hash.data());\n+        }\n+    }\n+    assert(txTo != nullptr);",
    "path": "src/script/interpreter.cpp",
    "position": null,
    "original_position": 177,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "9ec56bb91139747f19c56f5f640d558c831ba152",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yeah I noticed that, it's great. According to the PR, `Validation code passes ASSERT_FAIL (as at validation time all data should always be passed, and anything else is a serious bug in the code), while signing code uses FAIL.`.\r\n\r\nHowever, for CTV were we ever to relax the heuristic (which is right now, for every transaction), we would want to be able to handle the case where the data is not available. But since that code isn't written (and likely won't be) it's fine to have that case being a missing data.  I'll do it as a separate commit in case there's a relaxed heuristic in the future.",
    "created_at": "2021-07-13T16:35:34Z",
    "updated_at": "2021-07-13T16:35:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668931820",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668931820"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668931820"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668931820/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1924,
    "side": "RIGHT",
    "in_reply_to_id": 668551097
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/670097613",
    "pull_request_review_id": 706883326,
    "id": 670097613,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MDA5NzYxMw==",
    "diff_hunk": "@@ -1803,6 +1901,30 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckStandardTemplateHash(const std::vector<unsigned char>& hash) const\n+{\n+    // Should already be checked before calling...\n+    assert(hash.size() == 32);\n+    if (txdata && txdata->m_bip119_ctv_ready) {\n+        // if nIn == 0, then we've already cached this and can directly check\n+        if (nIn == 0) {\n+            return std::equal(txdata->m_standard_template_single_hash.begin(), txdata->m_standard_template_single_hash.end(), hash.data());\n+        } else {\n+            // otherwise we still have *most* of the hash cached,\n+            // so just re-compute the correct one and compare\n+            assert(txTo != nullptr);\n+            uint256 hash_tmpl = txdata->m_scriptSigs_single_hash.IsNull() ?\n+                GetStandardTemplateHashEmptyScript(*txTo, txdata->m_outputs_single_hash, txdata->m_sequences_single_hash, nIn) :\n+                GetStandardTemplateHashWithScript(*txTo, txdata->m_outputs_single_hash, txdata->m_sequences_single_hash,\n+                        txdata->m_scriptSigs_single_hash, nIn);\n+            return std::equal(hash_tmpl.begin(), hash_tmpl.end(), hash.data());\n+        }\n+    }\n+    assert(txTo != nullptr);",
    "path": "src/script/interpreter.cpp",
    "position": null,
    "original_position": 177,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "9ec56bb91139747f19c56f5f640d558c831ba152",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "btw I'm not sure if the patch that i made actually improve coverage much, given that I think the missingdata branch is still never hit...",
    "created_at": "2021-07-15T02:59:53Z",
    "updated_at": "2021-07-15T02:59:53Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r670097613",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/670097613"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r670097613"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/670097613/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1924,
    "side": "RIGHT",
    "in_reply_to_id": 668551097
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684142697",
    "pull_request_review_id": 724235217,
    "id": 684142697,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDE0MjY5Nw==",
    "diff_hunk": "@@ -91,6 +91,13 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1628640000; // August 11th, 2021\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height = 709632; // Approximately November 12th, 2021\n \n+        // Deployment of CTV (BIP 119)",
    "path": "src/chainparams.cpp",
    "position": 4,
    "original_position": 4,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "b560a59b1db7ca8fcdca2ea7722cf7cdbb004320",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "in b560a59b1db7ca8fcdca2ea7722cf7cdbb004320 \"OP_CHECKTEMPLATEVERIFY Deployment parameters\"\r\n\r\nIf you're going to add deployment parameters, you'll also want to update `getblockchaininfo()` RPC's `softforks` result.\r\n",
    "created_at": "2021-08-06T10:51:55Z",
    "updated_at": "2021-08-06T14:11:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684142697",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684142697"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684142697"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684142697/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 94,
    "original_line": 94,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684145628",
    "pull_request_review_id": 724235217,
    "id": 684145628,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDE0NTYyOA==",
    "diff_hunk": "@@ -160,9 +160,14 @@ struct PrecomputedTransactionData\n     uint256 m_outputs_single_hash;\n     uint256 m_spent_amounts_single_hash;\n     uint256 m_spent_scripts_single_hash;\n+    uint256 m_scriptSigs_single_hash;\n+    uint256 m_standard_template_single_hash;\n     //! Whether the 5 fields above are initialized.\n     bool m_bip341_taproot_ready = false;\n ",
    "path": "src/script/interpreter.h",
    "position": null,
    "original_position": 8,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "4c68aab5ee52f58709fe9043e640d13f89596db0",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You may want to move this down so as not to invalidate the comment on `m_bip341_taproot_ready`\r\n```suggestion\r\n    //! Whether the 5 fields above are initialized.\r\n    bool m_bip341_taproot_ready = false;\r\n    uint256 m_scriptSigs_single_hash;\r\n    uint256 m_standard_template_single_hash;\r\n```",
    "created_at": "2021-08-06T10:57:30Z",
    "updated_at": "2021-08-06T14:11:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684145628",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684145628"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684145628"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684145628/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 163,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 179,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684149776",
    "pull_request_review_id": 724235217,
    "id": 684149776,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDE0OTc3Ng==",
    "diff_hunk": "@@ -0,0 +1,484 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_HASH160, OP_EQUAL, hash160, taproot_construct\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def p2sh_helper(script):\n+    return CScript(bytes([OP_HASH160, 0x14]) + hash160(script) + bytes([OP_EQUAL]))\n+def random_p2sh():\n+    return p2sh_helper(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: Decimal(amount_sats) / COIN})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()",
    "path": "test/functional/feature_checktemplateverify.py",
    "position": null,
    "original_position": 83,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "92c34e2fa753d1c0a6076446f62ab77c8d08c75a",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This test shouldn't depend on the wallet. Perhaps look into using `MiniWallet`? I'm sure `create_transaction_to_script()` could be modified to not require `signrawtransactionwithwallet`",
    "created_at": "2021-08-06T11:05:36Z",
    "updated_at": "2021-08-06T14:11:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684149776",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684149776"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684149776"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684149776/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 82,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 83,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684193839",
    "pull_request_review_id": 724235217,
    "id": 684193839,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDE5MzgzOQ==",
    "diff_hunk": "@@ -0,0 +1,484 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_HASH160, OP_EQUAL, hash160, taproot_construct\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def p2sh_helper(script):\n+    return CScript(bytes([OP_HASH160, 0x14]) + hash160(script) + bytes([OP_EQUAL]))\n+def random_p2sh():\n+    return p2sh_helper(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: Decimal(amount_sats) / COIN})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        self.log.debug(self.height)\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height+1))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        reason = self.nodes[0].submitblock(block)\n+        if reason:\n+            self.log.debug(\"Reject Reason: [%s]\", reason)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - Taproot OP_CTV\n+        #   - SegWit OP_CTV\n+        #   - SegWit OP_CTV wrong size on stack\n+        #     - fails policy\n+        #     - passes consensus\n+        #   - SegWit OP_CTV no argument in stack from program\n+        #     - fails policy and consensus with empty stack\n+        #     - passes consensus and policy when argument is the correct hash\n+        #     - passes consensus when argument is non 32 bytes\n+        #     - fails policy when argument is non 32 bytes\n+        #   - P2SH OP_CTV (impossible to spend w/o hash cycle!)\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 115\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        # Drop the last 100 as they're unspendable!\n+        coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.nodes[0].generate(BLOCKS)][:-100]\n+        get_coinbase = lambda: coinbase_txids.pop()\n+\n+        self.log.info(\"Creating setup transactions\")\n+\n+        self.log.info(\"Creating script for 10 random outputs\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount_sats = (sum(out.nValue for out in outputs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a Taproot script\")\n+        tapkey = ECKey()\n+        b = bytes(b\"Deterministic Privkey\")\n+        while not tapkey.is_valid:\n+            b = sha256(b)\n+            tapkey.set(b, False)\n+        xonly, negated = compute_xonly_pubkey(tapkey.get_bytes())\n+        taproot = taproot_construct(xonly, [(\"only-path\", script, 0xc0)])\n+        taproot_ctv_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                taproot.scriptPubKey, amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a segwit script\")\n+        segwit_ctv_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([0, sha256(script)]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an non-32 byte stack segwit script\")\n+        segwit_ctv_funding_tx_wrongsize_stack = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([0, sha256(CScript([OP_TRUE, OP_CHECKTEMPLATEVERIFY]))]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an empty stack segwit script\")\n+        segwit_ctv_funding_tx_empty_stack = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([0, sha256(CScript([OP_CHECKTEMPLATEVERIFY]))]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a p2sh script (impossible to spend)\")\n+        p2sh_ctv_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                p2sh_helper(script), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating script for tree size depth 4\")\n+        # Small Tree for test speed, can be set to a large value like 16 (i.e., 65K txns)\n+        TREE_SIZE = 4\n+        congestion_tree_txo = random_secure_tree(TREE_SIZE)\n+\n+        self.log.info(\"Creating funding txn for tree size depth 4\")\n+        bare_ctv_tree_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                congestion_tree_txo[0][0].scriptPubKey, amount_sats=congestion_tree_txo[0][0].nValue)\n+\n+        self.log.info(\"Creating script for spend at position 2\")\n+        outputs_position_2, script_position_2 = random_real_outputs_and_script(10, 1, 2)\n+        # Add some fee satoshis\n+        amount_position_2 = (sum(out.nValue for out in outputs_position_2)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 2\")\n+        bare_ctv_position_2 = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                script_position_2, amount_sats=amount_position_2)\n+\n+        self.log.info(\"Creating script for spend at position 1 with 2 non-null scriptsigs\")\n+        outputs_specific_scriptSigs, script_specific_scriptSigs = random_real_outputs_and_script(10, 0, 2,\n+                [CTxIn(scriptSig=CScript([OP_TRUE])), CTxIn(scriptSig=CScript([OP_FALSE]))])\n+        # Add some fee satoshis\n+        amount_specific_scriptSigs = (sum(out.nValue for out in outputs_specific_scriptSigs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 1 with 2 non-null scriptsigs\")\n+        bare_ctv_specific_scriptSigs = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                script_specific_scriptSigs, amount_sats=amount_specific_scriptSigs)\n+\n+        self.log.info(\"Creating script for spend at position 2 with 2 non-null scriptsigs\")\n+        outputs_specific_scriptSigs_position_2, script_specific_scriptSigs_position_2 = \\\n+                random_real_outputs_and_script(10, 1, 2, [CTxIn(scriptSig=CScript([OP_TRUE])), CTxIn(scriptSig=CScript([OP_FALSE]))])\n+        # Add some fee satoshis\n+        amount_specific_scriptSigs_position_2 = (sum(out.nValue for out in outputs_specific_scriptSigs_position_2)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 2 with 2 non-null scriptsigs\")\n+        bare_ctv_specific_scriptSigs_position_2 = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                script_specific_scriptSigs_position_2, amount_sats=amount_specific_scriptSigs_position_2)\n+\n+        self.log.info(\"Creating funding txns for some anyone can sepnd outputs\")\n+        anyone_can_spend_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([OP_TRUE]), amount_sats=amount_sats)\n+        bare_anyone_can_spend_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([OP_TRUE]), amount_sats=amount_sats)\n+\n+\n+        funding_txs = [  taproot_ctv_funding_tx\n+                       , segwit_ctv_funding_tx\n+                       , segwit_ctv_funding_tx_wrongsize_stack\n+                       , segwit_ctv_funding_tx_empty_stack\n+                       , p2sh_ctv_funding_tx\n+                       , anyone_can_spend_funding_tx\n+                       , bare_ctv_tree_funding_tx\n+                       , bare_ctv_position_2\n+                       , bare_anyone_can_spend_funding_tx\n+                       , bare_ctv_specific_scriptSigs\n+                       , bare_ctv_specific_scriptSigs_position_2]\n+\n+        self.log.info(\"Obtaining TXIDs\")\n+        taproot_ctv_outpoint,\\\n+        segwit_ctv_outpoint,\\\n+        segwit_ctv_wrongsize_stack_outpoint,\\\n+        segwit_ctv_empty_stack_outpoint,\\\n+        p2sh_ctv_outpoint,\\\n+        anyone_can_spend_outpoint,\\\n+        bare_ctv_tree_outpoint,\\\n+        bare_ctv_position_2,\\\n+        bare_anyone_can_spend_outpoint,\\\n+        bare_ctv_specific_scriptSigs_outpoint,\\\n+        bare_ctv_specific_scriptSigs_position_2_outpoint\\\n+        = [COutPoint(int(tx.rehash(),16), 0) for tx in funding_txs]\n+\n+        self.log.info(\"Funding all outputs\")\n+        self.add_block(funding_txs)\n+\n+        self.log.info(\"Testing Taproot OP_CHECKTEMPLATEVERIFY spend\")\n+        # Test sendrawtransaction\n+        taproot_check_template_verify_tx = CTransaction()\n+        taproot_check_template_verify_tx.nVersion = 2\n+        taproot_check_template_verify_tx.vin = [CTxIn(taproot_ctv_outpoint)]\n+        taproot_check_template_verify_tx.vout = outputs\n+        taproot_check_template_verify_tx.wit.vtxinwit +=  [CTxInWitness()]\n+        taproot_check_template_verify_tx.wit.vtxinwit[0].scriptWitness.stack = [script, bytes([0xc0 + taproot.negflag])+taproot.internal_pubkey]\n+        assert_equal(self.nodes[0].sendrawtransaction(taproot_check_template_verify_tx.serialize().hex(), 0), taproot_check_template_verify_tx.rehash())\n+        self.log.info(\"Taproot OP_CHECKTEMPLATEVERIFY spend accepted by sendrawtransaction\")\n+\n+        # Now we verify that a block with this transaction is also valid\n+        blockhash = self.add_block([taproot_check_template_verify_tx])\n+        self.log.info(\"Taproot OP_CHECKTEMPLATEVERIFY spend accepted in a block\")\n+\n+        self.log.info(\"Rolling back the block\")\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        self.log.info(\"Testing Segwit OP_CHECKTEMPLATEVERIFY spend\")\n+        # Test sendrawtransaction\n+        check_template_verify_tx = CTransaction()\n+        check_template_verify_tx.nVersion = 2\n+        check_template_verify_tx.vin = [CTxIn(segwit_ctv_outpoint)]\n+        check_template_verify_tx.vout = outputs\n+\n+        check_template_verify_tx.wit.vtxinwit +=  [CTxInWitness()]\n+        check_template_verify_tx.wit.vtxinwit[0].scriptWitness.stack = [script]\n+        assert_equal(self.nodes[0].sendrawtransaction(check_template_verify_tx.serialize().hex(), 0), check_template_verify_tx.rehash())\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY spend accepted by sendrawtransaction\")\n+\n+        # Now we verify that a block with this transaction is also valid\n+        blockhash = self.add_block([check_template_verify_tx])\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY spend accepted in a block\")\n+\n+        self.log.info(\"Rolling back the block\")\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        # Show any modification will break the validity\n+        self.log.info(\"Modifying Segwit OP_CHECKTEMPLATEVERIFY spend, block should fail\")\n+        check_template_verify_tx_mutated_amount = check_template_verify_tx\n+        check_template_verify_tx_mutated_amount.vout[0].nValue += 1\n+        check_template_verify_tx_mutated_amount.rehash()\n+        self.fail_block([check_template_verify_tx_mutated_amount])\n+        self.log.info(\"Modified Segwit OP_CHECKTEMPLATEVERIFY spend failed to confirm\")\n+\n+        # Now show that only one input allowed\n+        self.log.info(\"Testing that multiple inputs are disallowed when specified\")\n+        check_template_verify_two_inputs = check_template_verify_tx\n+        check_template_verify_two_inputs.vin += [CTxIn(anyone_can_spend_outpoint)]\n+        check_template_verify_two_inputs.rehash()\n+        self.fail_block([check_template_verify_two_inputs])\n+\n+        self.log.info(\"Testing that the second input specified was actually spendable by itself\")\n+\n+        # Second UTXO was actually spendable\n+        spendtx = CTransaction()\n+        spendtx.nVersion = 2\n+        spendtx.vin = [CTxIn(anyone_can_spend_outpoint)]\n+        spendtx.vout += [CTxOut(int(amount_sats - 1000), random_p2sh())]\n+        spendtx.rehash()\n+        blockhash = self.add_block([spendtx])\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        self.log.info(\"Testing Segwit OP_CHECKTEMPLATEVERIFY spend with a wrong size argument\")\n+        # Test sendrawtransaction\n+        check_template_verify_tx_wrongsize_stack = CTransaction()\n+        check_template_verify_tx_wrongsize_stack.nVersion = 2\n+        check_template_verify_tx_wrongsize_stack.vin = [CTxIn(segwit_ctv_wrongsize_stack_outpoint)]\n+        check_template_verify_tx_wrongsize_stack.vout = outputs\n+\n+        check_template_verify_tx_wrongsize_stack.wit.vtxinwit +=  [CTxInWitness()]\n+        check_template_verify_tx_wrongsize_stack.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE, OP_CHECKTEMPLATEVERIFY])]\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(check_template_verify_tx_wrongsize_stack.serialize().hex(), 0)\n+            raise Exception(\"Expected to fail sendrawtransaction\")\n+        except JSONRPCException as e:\n+            assert_equal(str(e), DISCOURAGED_ERROR + \" (-26)\")\n+            self.log.info(\"OP_CHECKTEMPLATEVERIFY with wrong size stack rejected by sendrawtransaction as discouraged\")\n+\n+        # Now we verify that a block with this transaction is valid\n+        blockhash = self.add_block([check_template_verify_tx_wrongsize_stack])\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY with wrong size stack spend accepted in a block (soft fork upgradable)\")\n+\n+\n+        self.log.info(\"Testing Segwit OP_CHECKTEMPLATEVERIFY spend with an empty stack argument\")\n+        # Test sendrawtransaction\n+        check_template_verify_tx_empty_stack = CTransaction()\n+        check_template_verify_tx_empty_stack.nVersion = 2\n+        check_template_verify_tx_empty_stack.vin = [CTxIn(segwit_ctv_empty_stack_outpoint)]\n+        check_template_verify_tx_empty_stack.vout = outputs\n+\n+        check_template_verify_tx_empty_stack.wit.vtxinwit +=  [CTxInWitness()]\n+        check_template_verify_tx_empty_stack.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_CHECKTEMPLATEVERIFY])]\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(check_template_verify_tx_empty_stack.serialize().hex(), 0)\n+            raise Exception(\"Expected to fail sendrawtransaction\")\n+        except JSONRPCException as e:\n+            assert_equal(str(e), STACK_TOO_SHORT_ERROR + \" (-26)\")",
    "path": "test/functional/feature_checktemplateverify.py",
    "position": null,
    "original_position": 352,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "04af84316aa43a8fdc58b36811c07ee796ce0e39",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Note on all the `try` / `except`s in 92c34e2fa753d1c0a6076446f62ab77c8d08c75a tests:\r\nWe have utils for asserting RPC errors - this is cleaner and will print the log on a failure:\r\n```suggestion\r\n        assert_raises_rpc_error(-26, STACK_TOO_SHORT_ERROR, self.nodes[0].sendrawtransaction, check_template_verify_tx_empty_stack.serialize().hex())\r\n```",
    "created_at": "2021-08-06T12:24:59Z",
    "updated_at": "2021-08-06T14:11:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684193839",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684193839"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684193839"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684193839/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 348,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 352,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684200855",
    "pull_request_review_id": 724235217,
    "id": 684200855,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDIwMDg1NQ==",
    "diff_hunk": "@@ -0,0 +1,484 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_HASH160, OP_EQUAL, hash160, taproot_construct\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def p2sh_helper(script):\n+    return CScript(bytes([OP_HASH160, 0x14]) + hash160(script) + bytes([OP_EQUAL]))\n+def random_p2sh():\n+    return p2sh_helper(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: Decimal(amount_sats) / COIN})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()",
    "path": "test/functional/feature_checktemplateverify.py",
    "position": null,
    "original_position": 83,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "92c34e2fa753d1c0a6076446f62ab77c8d08c75a",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Also, since you're doing some random script creation and anyonecanspends - you might find some helpful helpers in script_util.py ",
    "created_at": "2021-08-06T12:36:50Z",
    "updated_at": "2021-08-06T14:11:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684200855",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684200855"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684200855"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684200855/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 82,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 83,
    "side": "RIGHT",
    "in_reply_to_id": 684149776
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684221416",
    "pull_request_review_id": 724235217,
    "id": 684221416,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDIyMTQxNg==",
    "diff_hunk": "@@ -0,0 +1,484 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_HASH160, OP_EQUAL, hash160, taproot_construct\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def p2sh_helper(script):\n+    return CScript(bytes([OP_HASH160, 0x14]) + hash160(script) + bytes([OP_EQUAL]))\n+def random_p2sh():\n+    return p2sh_helper(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: Decimal(amount_sats) / COIN})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        self.log.debug(self.height)\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height+1))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        reason = self.nodes[0].submitblock(block)\n+        if reason:\n+            self.log.debug(\"Reject Reason: [%s]\", reason)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - Taproot OP_CTV\n+        #   - SegWit OP_CTV\n+        #   - SegWit OP_CTV wrong size on stack\n+        #     - fails policy\n+        #     - passes consensus\n+        #   - SegWit OP_CTV no argument in stack from program\n+        #     - fails policy and consensus with empty stack\n+        #     - passes consensus and policy when argument is the correct hash\n+        #     - passes consensus when argument is non 32 bytes\n+        #     - fails policy when argument is non 32 bytes\n+        #   - P2SH OP_CTV (impossible to spend w/o hash cycle!)\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 115\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        # Drop the last 100 as they're unspendable!\n+        coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.nodes[0].generate(BLOCKS)][:-100]\n+        get_coinbase = lambda: coinbase_txids.pop()\n+\n+        self.log.info(\"Creating setup transactions\")\n+\n+        self.log.info(\"Creating script for 10 random outputs\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount_sats = (sum(out.nValue for out in outputs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a Taproot script\")\n+        tapkey = ECKey()\n+        b = bytes(b\"Deterministic Privkey\")\n+        while not tapkey.is_valid:\n+            b = sha256(b)\n+            tapkey.set(b, False)\n+        xonly, negated = compute_xonly_pubkey(tapkey.get_bytes())\n+        taproot = taproot_construct(xonly, [(\"only-path\", script, 0xc0)])\n+        taproot_ctv_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                taproot.scriptPubKey, amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a segwit script\")\n+        segwit_ctv_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([0, sha256(script)]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an non-32 byte stack segwit script\")\n+        segwit_ctv_funding_tx_wrongsize_stack = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([0, sha256(CScript([OP_TRUE, OP_CHECKTEMPLATEVERIFY]))]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an empty stack segwit script\")\n+        segwit_ctv_funding_tx_empty_stack = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([0, sha256(CScript([OP_CHECKTEMPLATEVERIFY]))]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a p2sh script (impossible to spend)\")\n+        p2sh_ctv_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                p2sh_helper(script), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating script for tree size depth 4\")\n+        # Small Tree for test speed, can be set to a large value like 16 (i.e., 65K txns)\n+        TREE_SIZE = 4\n+        congestion_tree_txo = random_secure_tree(TREE_SIZE)\n+\n+        self.log.info(\"Creating funding txn for tree size depth 4\")\n+        bare_ctv_tree_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                congestion_tree_txo[0][0].scriptPubKey, amount_sats=congestion_tree_txo[0][0].nValue)\n+\n+        self.log.info(\"Creating script for spend at position 2\")\n+        outputs_position_2, script_position_2 = random_real_outputs_and_script(10, 1, 2)\n+        # Add some fee satoshis\n+        amount_position_2 = (sum(out.nValue for out in outputs_position_2)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 2\")\n+        bare_ctv_position_2 = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                script_position_2, amount_sats=amount_position_2)\n+\n+        self.log.info(\"Creating script for spend at position 1 with 2 non-null scriptsigs\")\n+        outputs_specific_scriptSigs, script_specific_scriptSigs = random_real_outputs_and_script(10, 0, 2,\n+                [CTxIn(scriptSig=CScript([OP_TRUE])), CTxIn(scriptSig=CScript([OP_FALSE]))])\n+        # Add some fee satoshis\n+        amount_specific_scriptSigs = (sum(out.nValue for out in outputs_specific_scriptSigs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 1 with 2 non-null scriptsigs\")\n+        bare_ctv_specific_scriptSigs = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                script_specific_scriptSigs, amount_sats=amount_specific_scriptSigs)\n+\n+        self.log.info(\"Creating script for spend at position 2 with 2 non-null scriptsigs\")\n+        outputs_specific_scriptSigs_position_2, script_specific_scriptSigs_position_2 = \\\n+                random_real_outputs_and_script(10, 1, 2, [CTxIn(scriptSig=CScript([OP_TRUE])), CTxIn(scriptSig=CScript([OP_FALSE]))])\n+        # Add some fee satoshis\n+        amount_specific_scriptSigs_position_2 = (sum(out.nValue for out in outputs_specific_scriptSigs_position_2)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 2 with 2 non-null scriptsigs\")\n+        bare_ctv_specific_scriptSigs_position_2 = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                script_specific_scriptSigs_position_2, amount_sats=amount_specific_scriptSigs_position_2)\n+\n+        self.log.info(\"Creating funding txns for some anyone can sepnd outputs\")\n+        anyone_can_spend_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([OP_TRUE]), amount_sats=amount_sats)\n+        bare_anyone_can_spend_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([OP_TRUE]), amount_sats=amount_sats)\n+\n+\n+        funding_txs = [  taproot_ctv_funding_tx\n+                       , segwit_ctv_funding_tx\n+                       , segwit_ctv_funding_tx_wrongsize_stack\n+                       , segwit_ctv_funding_tx_empty_stack\n+                       , p2sh_ctv_funding_tx\n+                       , anyone_can_spend_funding_tx\n+                       , bare_ctv_tree_funding_tx\n+                       , bare_ctv_position_2\n+                       , bare_anyone_can_spend_funding_tx\n+                       , bare_ctv_specific_scriptSigs\n+                       , bare_ctv_specific_scriptSigs_position_2]\n+\n+        self.log.info(\"Obtaining TXIDs\")\n+        taproot_ctv_outpoint,\\\n+        segwit_ctv_outpoint,\\\n+        segwit_ctv_wrongsize_stack_outpoint,\\\n+        segwit_ctv_empty_stack_outpoint,\\\n+        p2sh_ctv_outpoint,\\\n+        anyone_can_spend_outpoint,\\\n+        bare_ctv_tree_outpoint,\\\n+        bare_ctv_position_2,\\\n+        bare_anyone_can_spend_outpoint,\\\n+        bare_ctv_specific_scriptSigs_outpoint,\\\n+        bare_ctv_specific_scriptSigs_position_2_outpoint\\\n+        = [COutPoint(int(tx.rehash(),16), 0) for tx in funding_txs]\n+\n+        self.log.info(\"Funding all outputs\")\n+        self.add_block(funding_txs)\n+\n+        self.log.info(\"Testing Taproot OP_CHECKTEMPLATEVERIFY spend\")\n+        # Test sendrawtransaction\n+        taproot_check_template_verify_tx = CTransaction()\n+        taproot_check_template_verify_tx.nVersion = 2\n+        taproot_check_template_verify_tx.vin = [CTxIn(taproot_ctv_outpoint)]\n+        taproot_check_template_verify_tx.vout = outputs\n+        taproot_check_template_verify_tx.wit.vtxinwit +=  [CTxInWitness()]\n+        taproot_check_template_verify_tx.wit.vtxinwit[0].scriptWitness.stack = [script, bytes([0xc0 + taproot.negflag])+taproot.internal_pubkey]\n+        assert_equal(self.nodes[0].sendrawtransaction(taproot_check_template_verify_tx.serialize().hex(), 0), taproot_check_template_verify_tx.rehash())\n+        self.log.info(\"Taproot OP_CHECKTEMPLATEVERIFY spend accepted by sendrawtransaction\")\n+\n+        # Now we verify that a block with this transaction is also valid\n+        blockhash = self.add_block([taproot_check_template_verify_tx])\n+        self.log.info(\"Taproot OP_CHECKTEMPLATEVERIFY spend accepted in a block\")\n+\n+        self.log.info(\"Rolling back the block\")\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        self.log.info(\"Testing Segwit OP_CHECKTEMPLATEVERIFY spend\")\n+        # Test sendrawtransaction\n+        check_template_verify_tx = CTransaction()\n+        check_template_verify_tx.nVersion = 2\n+        check_template_verify_tx.vin = [CTxIn(segwit_ctv_outpoint)]\n+        check_template_verify_tx.vout = outputs\n+\n+        check_template_verify_tx.wit.vtxinwit +=  [CTxInWitness()]\n+        check_template_verify_tx.wit.vtxinwit[0].scriptWitness.stack = [script]\n+        assert_equal(self.nodes[0].sendrawtransaction(check_template_verify_tx.serialize().hex(), 0), check_template_verify_tx.rehash())\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY spend accepted by sendrawtransaction\")\n+\n+        # Now we verify that a block with this transaction is also valid\n+        blockhash = self.add_block([check_template_verify_tx])\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY spend accepted in a block\")\n+\n+        self.log.info(\"Rolling back the block\")\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        # Show any modification will break the validity\n+        self.log.info(\"Modifying Segwit OP_CHECKTEMPLATEVERIFY spend, block should fail\")\n+        check_template_verify_tx_mutated_amount = check_template_verify_tx\n+        check_template_verify_tx_mutated_amount.vout[0].nValue += 1\n+        check_template_verify_tx_mutated_amount.rehash()\n+        self.fail_block([check_template_verify_tx_mutated_amount])\n+        self.log.info(\"Modified Segwit OP_CHECKTEMPLATEVERIFY spend failed to confirm\")\n+\n+        # Now show that only one input allowed\n+        self.log.info(\"Testing that multiple inputs are disallowed when specified\")\n+        check_template_verify_two_inputs = check_template_verify_tx\n+        check_template_verify_two_inputs.vin += [CTxIn(anyone_can_spend_outpoint)]\n+        check_template_verify_two_inputs.rehash()\n+        self.fail_block([check_template_verify_two_inputs])\n+\n+        self.log.info(\"Testing that the second input specified was actually spendable by itself\")\n+\n+        # Second UTXO was actually spendable\n+        spendtx = CTransaction()\n+        spendtx.nVersion = 2\n+        spendtx.vin = [CTxIn(anyone_can_spend_outpoint)]\n+        spendtx.vout += [CTxOut(int(amount_sats - 1000), random_p2sh())]\n+        spendtx.rehash()\n+        blockhash = self.add_block([spendtx])\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        self.log.info(\"Testing Segwit OP_CHECKTEMPLATEVERIFY spend with a wrong size argument\")\n+        # Test sendrawtransaction\n+        check_template_verify_tx_wrongsize_stack = CTransaction()\n+        check_template_verify_tx_wrongsize_stack.nVersion = 2\n+        check_template_verify_tx_wrongsize_stack.vin = [CTxIn(segwit_ctv_wrongsize_stack_outpoint)]\n+        check_template_verify_tx_wrongsize_stack.vout = outputs\n+\n+        check_template_verify_tx_wrongsize_stack.wit.vtxinwit +=  [CTxInWitness()]\n+        check_template_verify_tx_wrongsize_stack.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE, OP_CHECKTEMPLATEVERIFY])]\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(check_template_verify_tx_wrongsize_stack.serialize().hex(), 0)\n+            raise Exception(\"Expected to fail sendrawtransaction\")\n+        except JSONRPCException as e:\n+            assert_equal(str(e), DISCOURAGED_ERROR + \" (-26)\")\n+            self.log.info(\"OP_CHECKTEMPLATEVERIFY with wrong size stack rejected by sendrawtransaction as discouraged\")\n+\n+        # Now we verify that a block with this transaction is valid\n+        blockhash = self.add_block([check_template_verify_tx_wrongsize_stack])\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY with wrong size stack spend accepted in a block (soft fork upgradable)\")\n+\n+\n+        self.log.info(\"Testing Segwit OP_CHECKTEMPLATEVERIFY spend with an empty stack argument\")\n+        # Test sendrawtransaction\n+        check_template_verify_tx_empty_stack = CTransaction()\n+        check_template_verify_tx_empty_stack.nVersion = 2\n+        check_template_verify_tx_empty_stack.vin = [CTxIn(segwit_ctv_empty_stack_outpoint)]\n+        check_template_verify_tx_empty_stack.vout = outputs\n+\n+        check_template_verify_tx_empty_stack.wit.vtxinwit +=  [CTxInWitness()]\n+        check_template_verify_tx_empty_stack.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_CHECKTEMPLATEVERIFY])]\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(check_template_verify_tx_empty_stack.serialize().hex(), 0)\n+            raise Exception(\"Expected to fail sendrawtransaction\")\n+        except JSONRPCException as e:\n+            assert_equal(str(e), STACK_TOO_SHORT_ERROR + \" (-26)\")\n+            self.log.info(\"OP_CHECKTEMPLATEVERIFY with wrong size stack rejected by sendrawtransaction as discouraged\")\n+\n+        # Now we verify that a block with this transaction is invalid\n+        self.fail_block([check_template_verify_tx_empty_stack], STACK_TOO_SHORT_ERROR)\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY with wrong size stack spend rejected from block\")\n+\n+\n+        # Show that putting some element on the stack makes it succeed for consensus but fail policy\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY with CTV argument in the program should fail policy pass consensus if witness stack is not 32 bytes\")\n+        check_template_verify_tx_empty_stack.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE]), CScript([OP_CHECKTEMPLATEVERIFY])]\n+        try:\n+            self.nodes[0].sendrawtransaction(check_template_verify_tx_empty_stack.serialize().hex(), 0)\n+            raise Exception(\"Expected to fail sendrawtransaction\")\n+        except JSONRPCException as e:\n+            assert_equal(str(e), DISCOURAGED_ERROR + \" (-26)\")\n+            self.log.info(\"OP_CHECKTEMPLATEVERIFY with wrong size argument on the witness stack rejected by sendrawtransaction as discouraged\")\n+\n+        # Now we verify that a block with this transaction is valid\n+        blockhash = self.add_block([check_template_verify_tx_empty_stack])\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY with empty stack spend accepted in a block with something on the witness stack\")\n+        self.log.info(\"Rolling back the block\")\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        # Put the correct hash on\n+        self.log.info(\"Testing OP_CHECKTEMPLATEVERIFY spend with template hash from the witness stack\")\n+        h = check_template_verify_tx_empty_stack.get_standard_template_hash(0)\n+        check_template_verify_tx_empty_stack.wit.vtxinwit[0].scriptWitness.stack = [h, CScript([OP_CHECKTEMPLATEVERIFY])]\n+        assert_equal(self.nodes[0].sendrawtransaction(check_template_verify_tx_empty_stack.serialize().hex(), 0), check_template_verify_tx_empty_stack.rehash())\n+        self.log.info(\"Witness stack defined OP_CHECKTEMPLATEVERIFY spend accepted by sendrawtransaction\")\n+        # Now we verify that a block with this transaction is also valid\n+        blockhash = self.add_block([check_template_verify_tx_empty_stack])\n+        self.log.info(\"Witness stack defined OP_CHECKTEMPLATEVERIFY spend accepted in a block\")\n+        self.log.info(\"Rolling back the block\")\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        self.log.info(\"Testing that other 32 byte arguments passed from the witness stack fail\")\n+        h = h[::-1]\n+        check_template_verify_tx_empty_stack.wit.vtxinwit[0].scriptWitness.stack = [h, CScript([OP_CHECKTEMPLATEVERIFY])]\n+        self.fail_block([check_template_verify_tx_empty_stack])\n+\n+        # Test sendrawtransaction with P2SH\n+        # Mathematically, this test cannot succeed since P2SH requires that the\n+        # P2SH script is in the scriptsig (which contains H), and H much\n+        # contain a commitment to the scriptsig.\n+        #\n+        # Note that this relies on RIPEMD160 being hard to find a cycle in.\n+        # This *could* break one day (P2SH is no longer recommended), but\n+        # there's no capability that would be gained by doing so (such as a\n+        # recursive covenant), it'd just be a \"party trick\" (and you could\n+        # also possibly steal all exisiting P2SH addressses).\n+        p2sh_check_template_verify_tx = CTransaction()\n+        p2sh_check_template_verify_tx.nVersion = 2\n+        p2sh_check_template_verify_tx.vin = [CTxIn(p2sh_ctv_outpoint, CScript([script]))]\n+        p2sh_check_template_verify_tx.vout = outputs\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(p2sh_check_template_verify_tx.serialize().hex(), 0)",
    "path": "test/functional/feature_checktemplateverify.py",
    "position": null,
    "original_position": 411,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "04af84316aa43a8fdc58b36811c07ee796ce0e39",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Note on all the `sendrawtransaction`s in 92c34e2fa753d1c0a6076446f62ab77c8d08c75a tests:\r\n\r\nTrying to efforts to isolate the OP_CTV logic as much as possible, setting `maxfeerate=0` is an unnecessary override. You're adding fees anyway (I tried removing them and it doesn't seem to make a difference).",
    "created_at": "2021-08-06T13:08:22Z",
    "updated_at": "2021-08-06T14:11:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684221416",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684221416"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684221416"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684221416/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 411,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684223877",
    "pull_request_review_id": 724235217,
    "id": 684223877,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDIyMzg3Nw==",
    "diff_hunk": "@@ -1402,6 +1427,18 @@ uint256 GetSpentAmountsSHA256(const std::vector<CTxOut>& outputs_spent)\n     CHashWriter ss(SER_GETHASH, 0);\n     for (const auto& txout : outputs_spent) {\n         ss << txout.nValue;\n+\n+    }\n+    return ss.GetSHA256();\n+}\n+\n+/** Compute the (single) SHA256 of the concatenation of all scriptSigs in a tx. */\n+template <class T>\n+uint256 GetScriptSigsSHA256(const T& txTo)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& in : txTo.vin) {\n+        ss << in.scriptSig;\n     }\n     return ss.GetSHA256();\n }",
    "path": "src/script/interpreter.cpp",
    "position": 56,
    "original_position": 52,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "04af84316aa43a8fdc58b36811c07ee796ce0e39",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In 1d93783f712592d14a6fd792d0ab60f9a0f8e3ce  _Add StandardTemplateHash definition:_\r\n\r\nI expected to see some unit tests for this? e.g. in sighash_tests.cpp?",
    "created_at": "2021-08-06T13:12:02Z",
    "updated_at": "2021-08-06T14:11:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684223877",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684223877"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684223877"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684223877/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 1440,
    "original_start_line": 1436,
    "start_side": "RIGHT",
    "line": 1448,
    "original_line": 1448,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684235896",
    "pull_request_review_id": 724235217,
    "id": 684235896,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDIzNTg5Ng==",
    "diff_hunk": "@@ -63,6 +63,7 @@ static std::map<std::string, unsigned int> mapFlagNames = {\n     {std::string(\"DISCOURAGE_UPGRADABLE_PUBKEYTYPE\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE},\n     {std::string(\"DISCOURAGE_OP_SUCCESS\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS},\n     {std::string(\"DISCOURAGE_UPGRADABLE_TAPROOT_VERSION\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION},\n+    {std::string(\"CHECKTEMPLATEVERIFY\"), (unsigned int) SCRIPT_VERIFY_STANDARD_TEMPLATE},",
    "path": "src/test/transaction_tests.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "04af84316aa43a8fdc58b36811c07ee796ce0e39",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In 614d76f0d61c7ec85d223eb83b40b78ff07c5b23  _Add OP_CHECKTEMPLATEVERIFY Opcode as OP_NOP4_:\r\n\r\nSimilar reasoning, \"CHECKTEMPLATEVERIFY\" should correspond to `SCRIPT_VERIFY_CHECKTEMPLATEVERIFY`\r\n\r\nWill you be adding OP_CTV tests here (transaction_tests, tx_invalid.json, tx_valid.json) btw?",
    "created_at": "2021-08-06T13:29:23Z",
    "updated_at": "2021-08-06T14:11:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684235896",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684235896"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684235896"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684235896/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 66,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684262675",
    "pull_request_review_id": 724235217,
    "id": 684262675,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDI2MjY3NQ==",
    "diff_hunk": "@@ -875,7 +875,6 @@\n \n [\"Ensure 100% coverage of discouraged NOPS\"],\n [\"1\", \"NOP1\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"NOP4\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],",
    "path": "src/test/data/script_tests.json",
    "position": 31,
    "original_position": 4,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "04af84316aa43a8fdc58b36811c07ee796ce0e39",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "614d76f0d61c7ec85d223eb83b40b78ff07c5b23 fails script_tests because NOP4 is still discouraged at that point, so you may want to squash it with 04af84316aa43a8fdc58b36811c07ee796ce0e39",
    "created_at": "2021-08-06T14:05:28Z",
    "updated_at": "2021-08-06T14:11:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684262675",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684262675"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684262675"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684262675/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 878,
    "original_line": 878,
    "side": "LEFT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684679500",
    "pull_request_review_id": 724846771,
    "id": 684679500,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY3OTUwMA==",
    "diff_hunk": "@@ -875,7 +875,6 @@\n \n [\"Ensure 100% coverage of discouraged NOPS\"],\n [\"1\", \"NOP1\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"NOP4\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],",
    "path": "src/test/data/script_tests.json",
    "position": 31,
    "original_position": 4,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "04af84316aa43a8fdc58b36811c07ee796ce0e39",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "prefer squash or put before?",
    "created_at": "2021-08-07T21:27:06Z",
    "updated_at": "2021-08-07T21:27:06Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684679500",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684679500"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684679500"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684679500/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 878,
    "original_line": 878,
    "side": "LEFT",
    "in_reply_to_id": 684262675
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684679591",
    "pull_request_review_id": 724846816,
    "id": 684679591,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY3OTU5MQ==",
    "diff_hunk": "@@ -0,0 +1,484 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_HASH160, OP_EQUAL, hash160, taproot_construct\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def p2sh_helper(script):\n+    return CScript(bytes([OP_HASH160, 0x14]) + hash160(script) + bytes([OP_EQUAL]))\n+def random_p2sh():\n+    return p2sh_helper(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: Decimal(amount_sats) / COIN})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        self.log.debug(self.height)\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height+1))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        reason = self.nodes[0].submitblock(block)\n+        if reason:\n+            self.log.debug(\"Reject Reason: [%s]\", reason)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - Taproot OP_CTV\n+        #   - SegWit OP_CTV\n+        #   - SegWit OP_CTV wrong size on stack\n+        #     - fails policy\n+        #     - passes consensus\n+        #   - SegWit OP_CTV no argument in stack from program\n+        #     - fails policy and consensus with empty stack\n+        #     - passes consensus and policy when argument is the correct hash\n+        #     - passes consensus when argument is non 32 bytes\n+        #     - fails policy when argument is non 32 bytes\n+        #   - P2SH OP_CTV (impossible to spend w/o hash cycle!)\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 115\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        # Drop the last 100 as they're unspendable!\n+        coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.nodes[0].generate(BLOCKS)][:-100]\n+        get_coinbase = lambda: coinbase_txids.pop()\n+\n+        self.log.info(\"Creating setup transactions\")\n+\n+        self.log.info(\"Creating script for 10 random outputs\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount_sats = (sum(out.nValue for out in outputs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a Taproot script\")\n+        tapkey = ECKey()\n+        b = bytes(b\"Deterministic Privkey\")\n+        while not tapkey.is_valid:\n+            b = sha256(b)\n+            tapkey.set(b, False)\n+        xonly, negated = compute_xonly_pubkey(tapkey.get_bytes())\n+        taproot = taproot_construct(xonly, [(\"only-path\", script, 0xc0)])\n+        taproot_ctv_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                taproot.scriptPubKey, amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a segwit script\")\n+        segwit_ctv_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([0, sha256(script)]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an non-32 byte stack segwit script\")\n+        segwit_ctv_funding_tx_wrongsize_stack = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([0, sha256(CScript([OP_TRUE, OP_CHECKTEMPLATEVERIFY]))]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an empty stack segwit script\")\n+        segwit_ctv_funding_tx_empty_stack = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([0, sha256(CScript([OP_CHECKTEMPLATEVERIFY]))]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a p2sh script (impossible to spend)\")\n+        p2sh_ctv_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                p2sh_helper(script), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating script for tree size depth 4\")\n+        # Small Tree for test speed, can be set to a large value like 16 (i.e., 65K txns)\n+        TREE_SIZE = 4\n+        congestion_tree_txo = random_secure_tree(TREE_SIZE)\n+\n+        self.log.info(\"Creating funding txn for tree size depth 4\")\n+        bare_ctv_tree_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                congestion_tree_txo[0][0].scriptPubKey, amount_sats=congestion_tree_txo[0][0].nValue)\n+\n+        self.log.info(\"Creating script for spend at position 2\")\n+        outputs_position_2, script_position_2 = random_real_outputs_and_script(10, 1, 2)\n+        # Add some fee satoshis\n+        amount_position_2 = (sum(out.nValue for out in outputs_position_2)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 2\")\n+        bare_ctv_position_2 = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                script_position_2, amount_sats=amount_position_2)\n+\n+        self.log.info(\"Creating script for spend at position 1 with 2 non-null scriptsigs\")\n+        outputs_specific_scriptSigs, script_specific_scriptSigs = random_real_outputs_and_script(10, 0, 2,\n+                [CTxIn(scriptSig=CScript([OP_TRUE])), CTxIn(scriptSig=CScript([OP_FALSE]))])\n+        # Add some fee satoshis\n+        amount_specific_scriptSigs = (sum(out.nValue for out in outputs_specific_scriptSigs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 1 with 2 non-null scriptsigs\")\n+        bare_ctv_specific_scriptSigs = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                script_specific_scriptSigs, amount_sats=amount_specific_scriptSigs)\n+\n+        self.log.info(\"Creating script for spend at position 2 with 2 non-null scriptsigs\")\n+        outputs_specific_scriptSigs_position_2, script_specific_scriptSigs_position_2 = \\\n+                random_real_outputs_and_script(10, 1, 2, [CTxIn(scriptSig=CScript([OP_TRUE])), CTxIn(scriptSig=CScript([OP_FALSE]))])\n+        # Add some fee satoshis\n+        amount_specific_scriptSigs_position_2 = (sum(out.nValue for out in outputs_specific_scriptSigs_position_2)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 2 with 2 non-null scriptsigs\")\n+        bare_ctv_specific_scriptSigs_position_2 = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                script_specific_scriptSigs_position_2, amount_sats=amount_specific_scriptSigs_position_2)\n+\n+        self.log.info(\"Creating funding txns for some anyone can sepnd outputs\")\n+        anyone_can_spend_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([OP_TRUE]), amount_sats=amount_sats)\n+        bare_anyone_can_spend_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([OP_TRUE]), amount_sats=amount_sats)\n+\n+\n+        funding_txs = [  taproot_ctv_funding_tx\n+                       , segwit_ctv_funding_tx\n+                       , segwit_ctv_funding_tx_wrongsize_stack\n+                       , segwit_ctv_funding_tx_empty_stack\n+                       , p2sh_ctv_funding_tx\n+                       , anyone_can_spend_funding_tx\n+                       , bare_ctv_tree_funding_tx\n+                       , bare_ctv_position_2\n+                       , bare_anyone_can_spend_funding_tx\n+                       , bare_ctv_specific_scriptSigs\n+                       , bare_ctv_specific_scriptSigs_position_2]\n+\n+        self.log.info(\"Obtaining TXIDs\")\n+        taproot_ctv_outpoint,\\\n+        segwit_ctv_outpoint,\\\n+        segwit_ctv_wrongsize_stack_outpoint,\\\n+        segwit_ctv_empty_stack_outpoint,\\\n+        p2sh_ctv_outpoint,\\\n+        anyone_can_spend_outpoint,\\\n+        bare_ctv_tree_outpoint,\\\n+        bare_ctv_position_2,\\\n+        bare_anyone_can_spend_outpoint,\\\n+        bare_ctv_specific_scriptSigs_outpoint,\\\n+        bare_ctv_specific_scriptSigs_position_2_outpoint\\\n+        = [COutPoint(int(tx.rehash(),16), 0) for tx in funding_txs]\n+\n+        self.log.info(\"Funding all outputs\")\n+        self.add_block(funding_txs)\n+\n+        self.log.info(\"Testing Taproot OP_CHECKTEMPLATEVERIFY spend\")\n+        # Test sendrawtransaction\n+        taproot_check_template_verify_tx = CTransaction()\n+        taproot_check_template_verify_tx.nVersion = 2\n+        taproot_check_template_verify_tx.vin = [CTxIn(taproot_ctv_outpoint)]\n+        taproot_check_template_verify_tx.vout = outputs\n+        taproot_check_template_verify_tx.wit.vtxinwit +=  [CTxInWitness()]\n+        taproot_check_template_verify_tx.wit.vtxinwit[0].scriptWitness.stack = [script, bytes([0xc0 + taproot.negflag])+taproot.internal_pubkey]\n+        assert_equal(self.nodes[0].sendrawtransaction(taproot_check_template_verify_tx.serialize().hex(), 0), taproot_check_template_verify_tx.rehash())\n+        self.log.info(\"Taproot OP_CHECKTEMPLATEVERIFY spend accepted by sendrawtransaction\")\n+\n+        # Now we verify that a block with this transaction is also valid\n+        blockhash = self.add_block([taproot_check_template_verify_tx])\n+        self.log.info(\"Taproot OP_CHECKTEMPLATEVERIFY spend accepted in a block\")\n+\n+        self.log.info(\"Rolling back the block\")\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        self.log.info(\"Testing Segwit OP_CHECKTEMPLATEVERIFY spend\")\n+        # Test sendrawtransaction\n+        check_template_verify_tx = CTransaction()\n+        check_template_verify_tx.nVersion = 2\n+        check_template_verify_tx.vin = [CTxIn(segwit_ctv_outpoint)]\n+        check_template_verify_tx.vout = outputs\n+\n+        check_template_verify_tx.wit.vtxinwit +=  [CTxInWitness()]\n+        check_template_verify_tx.wit.vtxinwit[0].scriptWitness.stack = [script]\n+        assert_equal(self.nodes[0].sendrawtransaction(check_template_verify_tx.serialize().hex(), 0), check_template_verify_tx.rehash())\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY spend accepted by sendrawtransaction\")\n+\n+        # Now we verify that a block with this transaction is also valid\n+        blockhash = self.add_block([check_template_verify_tx])\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY spend accepted in a block\")\n+\n+        self.log.info(\"Rolling back the block\")\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        # Show any modification will break the validity\n+        self.log.info(\"Modifying Segwit OP_CHECKTEMPLATEVERIFY spend, block should fail\")\n+        check_template_verify_tx_mutated_amount = check_template_verify_tx\n+        check_template_verify_tx_mutated_amount.vout[0].nValue += 1\n+        check_template_verify_tx_mutated_amount.rehash()\n+        self.fail_block([check_template_verify_tx_mutated_amount])\n+        self.log.info(\"Modified Segwit OP_CHECKTEMPLATEVERIFY spend failed to confirm\")\n+\n+        # Now show that only one input allowed\n+        self.log.info(\"Testing that multiple inputs are disallowed when specified\")\n+        check_template_verify_two_inputs = check_template_verify_tx\n+        check_template_verify_two_inputs.vin += [CTxIn(anyone_can_spend_outpoint)]\n+        check_template_verify_two_inputs.rehash()\n+        self.fail_block([check_template_verify_two_inputs])\n+\n+        self.log.info(\"Testing that the second input specified was actually spendable by itself\")\n+\n+        # Second UTXO was actually spendable\n+        spendtx = CTransaction()\n+        spendtx.nVersion = 2\n+        spendtx.vin = [CTxIn(anyone_can_spend_outpoint)]\n+        spendtx.vout += [CTxOut(int(amount_sats - 1000), random_p2sh())]\n+        spendtx.rehash()\n+        blockhash = self.add_block([spendtx])\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        self.log.info(\"Testing Segwit OP_CHECKTEMPLATEVERIFY spend with a wrong size argument\")\n+        # Test sendrawtransaction\n+        check_template_verify_tx_wrongsize_stack = CTransaction()\n+        check_template_verify_tx_wrongsize_stack.nVersion = 2\n+        check_template_verify_tx_wrongsize_stack.vin = [CTxIn(segwit_ctv_wrongsize_stack_outpoint)]\n+        check_template_verify_tx_wrongsize_stack.vout = outputs\n+\n+        check_template_verify_tx_wrongsize_stack.wit.vtxinwit +=  [CTxInWitness()]\n+        check_template_verify_tx_wrongsize_stack.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE, OP_CHECKTEMPLATEVERIFY])]\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(check_template_verify_tx_wrongsize_stack.serialize().hex(), 0)\n+            raise Exception(\"Expected to fail sendrawtransaction\")\n+        except JSONRPCException as e:\n+            assert_equal(str(e), DISCOURAGED_ERROR + \" (-26)\")\n+            self.log.info(\"OP_CHECKTEMPLATEVERIFY with wrong size stack rejected by sendrawtransaction as discouraged\")\n+\n+        # Now we verify that a block with this transaction is valid\n+        blockhash = self.add_block([check_template_verify_tx_wrongsize_stack])\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY with wrong size stack spend accepted in a block (soft fork upgradable)\")\n+\n+\n+        self.log.info(\"Testing Segwit OP_CHECKTEMPLATEVERIFY spend with an empty stack argument\")\n+        # Test sendrawtransaction\n+        check_template_verify_tx_empty_stack = CTransaction()\n+        check_template_verify_tx_empty_stack.nVersion = 2\n+        check_template_verify_tx_empty_stack.vin = [CTxIn(segwit_ctv_empty_stack_outpoint)]\n+        check_template_verify_tx_empty_stack.vout = outputs\n+\n+        check_template_verify_tx_empty_stack.wit.vtxinwit +=  [CTxInWitness()]\n+        check_template_verify_tx_empty_stack.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_CHECKTEMPLATEVERIFY])]\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(check_template_verify_tx_empty_stack.serialize().hex(), 0)\n+            raise Exception(\"Expected to fail sendrawtransaction\")\n+        except JSONRPCException as e:\n+            assert_equal(str(e), STACK_TOO_SHORT_ERROR + \" (-26)\")\n+            self.log.info(\"OP_CHECKTEMPLATEVERIFY with wrong size stack rejected by sendrawtransaction as discouraged\")\n+\n+        # Now we verify that a block with this transaction is invalid\n+        self.fail_block([check_template_verify_tx_empty_stack], STACK_TOO_SHORT_ERROR)\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY with wrong size stack spend rejected from block\")\n+\n+\n+        # Show that putting some element on the stack makes it succeed for consensus but fail policy\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY with CTV argument in the program should fail policy pass consensus if witness stack is not 32 bytes\")\n+        check_template_verify_tx_empty_stack.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE]), CScript([OP_CHECKTEMPLATEVERIFY])]\n+        try:\n+            self.nodes[0].sendrawtransaction(check_template_verify_tx_empty_stack.serialize().hex(), 0)\n+            raise Exception(\"Expected to fail sendrawtransaction\")\n+        except JSONRPCException as e:\n+            assert_equal(str(e), DISCOURAGED_ERROR + \" (-26)\")\n+            self.log.info(\"OP_CHECKTEMPLATEVERIFY with wrong size argument on the witness stack rejected by sendrawtransaction as discouraged\")\n+\n+        # Now we verify that a block with this transaction is valid\n+        blockhash = self.add_block([check_template_verify_tx_empty_stack])\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY with empty stack spend accepted in a block with something on the witness stack\")\n+        self.log.info(\"Rolling back the block\")\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        # Put the correct hash on\n+        self.log.info(\"Testing OP_CHECKTEMPLATEVERIFY spend with template hash from the witness stack\")\n+        h = check_template_verify_tx_empty_stack.get_standard_template_hash(0)\n+        check_template_verify_tx_empty_stack.wit.vtxinwit[0].scriptWitness.stack = [h, CScript([OP_CHECKTEMPLATEVERIFY])]\n+        assert_equal(self.nodes[0].sendrawtransaction(check_template_verify_tx_empty_stack.serialize().hex(), 0), check_template_verify_tx_empty_stack.rehash())\n+        self.log.info(\"Witness stack defined OP_CHECKTEMPLATEVERIFY spend accepted by sendrawtransaction\")\n+        # Now we verify that a block with this transaction is also valid\n+        blockhash = self.add_block([check_template_verify_tx_empty_stack])\n+        self.log.info(\"Witness stack defined OP_CHECKTEMPLATEVERIFY spend accepted in a block\")\n+        self.log.info(\"Rolling back the block\")\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        self.log.info(\"Testing that other 32 byte arguments passed from the witness stack fail\")\n+        h = h[::-1]\n+        check_template_verify_tx_empty_stack.wit.vtxinwit[0].scriptWitness.stack = [h, CScript([OP_CHECKTEMPLATEVERIFY])]\n+        self.fail_block([check_template_verify_tx_empty_stack])\n+\n+        # Test sendrawtransaction with P2SH\n+        # Mathematically, this test cannot succeed since P2SH requires that the\n+        # P2SH script is in the scriptsig (which contains H), and H much\n+        # contain a commitment to the scriptsig.\n+        #\n+        # Note that this relies on RIPEMD160 being hard to find a cycle in.\n+        # This *could* break one day (P2SH is no longer recommended), but\n+        # there's no capability that would be gained by doing so (such as a\n+        # recursive covenant), it'd just be a \"party trick\" (and you could\n+        # also possibly steal all exisiting P2SH addressses).\n+        p2sh_check_template_verify_tx = CTransaction()\n+        p2sh_check_template_verify_tx.nVersion = 2\n+        p2sh_check_template_verify_tx.vin = [CTxIn(p2sh_ctv_outpoint, CScript([script]))]\n+        p2sh_check_template_verify_tx.vout = outputs\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(p2sh_check_template_verify_tx.serialize().hex(), 0)",
    "path": "test/functional/feature_checktemplateverify.py",
    "position": null,
    "original_position": 411,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "04af84316aa43a8fdc58b36811c07ee796ce0e39",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "will remove ",
    "created_at": "2021-08-07T21:28:00Z",
    "updated_at": "2021-08-07T21:28:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684679591",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684679591"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684679591"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684679591/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 411,
    "side": "RIGHT",
    "in_reply_to_id": 684221416
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684679651",
    "pull_request_review_id": 724846834,
    "id": 684679651,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY3OTY1MQ==",
    "diff_hunk": "@@ -0,0 +1,484 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_HASH160, OP_EQUAL, hash160, taproot_construct\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def p2sh_helper(script):\n+    return CScript(bytes([OP_HASH160, 0x14]) + hash160(script) + bytes([OP_EQUAL]))\n+def random_p2sh():\n+    return p2sh_helper(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: Decimal(amount_sats) / COIN})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        self.log.debug(self.height)\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height+1))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        reason = self.nodes[0].submitblock(block)\n+        if reason:\n+            self.log.debug(\"Reject Reason: [%s]\", reason)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - Taproot OP_CTV\n+        #   - SegWit OP_CTV\n+        #   - SegWit OP_CTV wrong size on stack\n+        #     - fails policy\n+        #     - passes consensus\n+        #   - SegWit OP_CTV no argument in stack from program\n+        #     - fails policy and consensus with empty stack\n+        #     - passes consensus and policy when argument is the correct hash\n+        #     - passes consensus when argument is non 32 bytes\n+        #     - fails policy when argument is non 32 bytes\n+        #   - P2SH OP_CTV (impossible to spend w/o hash cycle!)\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 115\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        # Drop the last 100 as they're unspendable!\n+        coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.nodes[0].generate(BLOCKS)][:-100]\n+        get_coinbase = lambda: coinbase_txids.pop()\n+\n+        self.log.info(\"Creating setup transactions\")\n+\n+        self.log.info(\"Creating script for 10 random outputs\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount_sats = (sum(out.nValue for out in outputs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a Taproot script\")\n+        tapkey = ECKey()\n+        b = bytes(b\"Deterministic Privkey\")\n+        while not tapkey.is_valid:\n+            b = sha256(b)\n+            tapkey.set(b, False)\n+        xonly, negated = compute_xonly_pubkey(tapkey.get_bytes())\n+        taproot = taproot_construct(xonly, [(\"only-path\", script, 0xc0)])\n+        taproot_ctv_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                taproot.scriptPubKey, amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a segwit script\")\n+        segwit_ctv_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([0, sha256(script)]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an non-32 byte stack segwit script\")\n+        segwit_ctv_funding_tx_wrongsize_stack = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([0, sha256(CScript([OP_TRUE, OP_CHECKTEMPLATEVERIFY]))]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an empty stack segwit script\")\n+        segwit_ctv_funding_tx_empty_stack = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([0, sha256(CScript([OP_CHECKTEMPLATEVERIFY]))]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a p2sh script (impossible to spend)\")\n+        p2sh_ctv_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                p2sh_helper(script), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating script for tree size depth 4\")\n+        # Small Tree for test speed, can be set to a large value like 16 (i.e., 65K txns)\n+        TREE_SIZE = 4\n+        congestion_tree_txo = random_secure_tree(TREE_SIZE)\n+\n+        self.log.info(\"Creating funding txn for tree size depth 4\")\n+        bare_ctv_tree_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                congestion_tree_txo[0][0].scriptPubKey, amount_sats=congestion_tree_txo[0][0].nValue)\n+\n+        self.log.info(\"Creating script for spend at position 2\")\n+        outputs_position_2, script_position_2 = random_real_outputs_and_script(10, 1, 2)\n+        # Add some fee satoshis\n+        amount_position_2 = (sum(out.nValue for out in outputs_position_2)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 2\")\n+        bare_ctv_position_2 = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                script_position_2, amount_sats=amount_position_2)\n+\n+        self.log.info(\"Creating script for spend at position 1 with 2 non-null scriptsigs\")\n+        outputs_specific_scriptSigs, script_specific_scriptSigs = random_real_outputs_and_script(10, 0, 2,\n+                [CTxIn(scriptSig=CScript([OP_TRUE])), CTxIn(scriptSig=CScript([OP_FALSE]))])\n+        # Add some fee satoshis\n+        amount_specific_scriptSigs = (sum(out.nValue for out in outputs_specific_scriptSigs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 1 with 2 non-null scriptsigs\")\n+        bare_ctv_specific_scriptSigs = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                script_specific_scriptSigs, amount_sats=amount_specific_scriptSigs)\n+\n+        self.log.info(\"Creating script for spend at position 2 with 2 non-null scriptsigs\")\n+        outputs_specific_scriptSigs_position_2, script_specific_scriptSigs_position_2 = \\\n+                random_real_outputs_and_script(10, 1, 2, [CTxIn(scriptSig=CScript([OP_TRUE])), CTxIn(scriptSig=CScript([OP_FALSE]))])\n+        # Add some fee satoshis\n+        amount_specific_scriptSigs_position_2 = (sum(out.nValue for out in outputs_specific_scriptSigs_position_2)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 2 with 2 non-null scriptsigs\")\n+        bare_ctv_specific_scriptSigs_position_2 = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                script_specific_scriptSigs_position_2, amount_sats=amount_specific_scriptSigs_position_2)\n+\n+        self.log.info(\"Creating funding txns for some anyone can sepnd outputs\")\n+        anyone_can_spend_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([OP_TRUE]), amount_sats=amount_sats)\n+        bare_anyone_can_spend_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([OP_TRUE]), amount_sats=amount_sats)\n+\n+\n+        funding_txs = [  taproot_ctv_funding_tx\n+                       , segwit_ctv_funding_tx\n+                       , segwit_ctv_funding_tx_wrongsize_stack\n+                       , segwit_ctv_funding_tx_empty_stack\n+                       , p2sh_ctv_funding_tx\n+                       , anyone_can_spend_funding_tx\n+                       , bare_ctv_tree_funding_tx\n+                       , bare_ctv_position_2\n+                       , bare_anyone_can_spend_funding_tx\n+                       , bare_ctv_specific_scriptSigs\n+                       , bare_ctv_specific_scriptSigs_position_2]\n+\n+        self.log.info(\"Obtaining TXIDs\")\n+        taproot_ctv_outpoint,\\\n+        segwit_ctv_outpoint,\\\n+        segwit_ctv_wrongsize_stack_outpoint,\\\n+        segwit_ctv_empty_stack_outpoint,\\\n+        p2sh_ctv_outpoint,\\\n+        anyone_can_spend_outpoint,\\\n+        bare_ctv_tree_outpoint,\\\n+        bare_ctv_position_2,\\\n+        bare_anyone_can_spend_outpoint,\\\n+        bare_ctv_specific_scriptSigs_outpoint,\\\n+        bare_ctv_specific_scriptSigs_position_2_outpoint\\\n+        = [COutPoint(int(tx.rehash(),16), 0) for tx in funding_txs]\n+\n+        self.log.info(\"Funding all outputs\")\n+        self.add_block(funding_txs)\n+\n+        self.log.info(\"Testing Taproot OP_CHECKTEMPLATEVERIFY spend\")\n+        # Test sendrawtransaction\n+        taproot_check_template_verify_tx = CTransaction()\n+        taproot_check_template_verify_tx.nVersion = 2\n+        taproot_check_template_verify_tx.vin = [CTxIn(taproot_ctv_outpoint)]\n+        taproot_check_template_verify_tx.vout = outputs\n+        taproot_check_template_verify_tx.wit.vtxinwit +=  [CTxInWitness()]\n+        taproot_check_template_verify_tx.wit.vtxinwit[0].scriptWitness.stack = [script, bytes([0xc0 + taproot.negflag])+taproot.internal_pubkey]\n+        assert_equal(self.nodes[0].sendrawtransaction(taproot_check_template_verify_tx.serialize().hex(), 0), taproot_check_template_verify_tx.rehash())\n+        self.log.info(\"Taproot OP_CHECKTEMPLATEVERIFY spend accepted by sendrawtransaction\")\n+\n+        # Now we verify that a block with this transaction is also valid\n+        blockhash = self.add_block([taproot_check_template_verify_tx])\n+        self.log.info(\"Taproot OP_CHECKTEMPLATEVERIFY spend accepted in a block\")\n+\n+        self.log.info(\"Rolling back the block\")\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        self.log.info(\"Testing Segwit OP_CHECKTEMPLATEVERIFY spend\")\n+        # Test sendrawtransaction\n+        check_template_verify_tx = CTransaction()\n+        check_template_verify_tx.nVersion = 2\n+        check_template_verify_tx.vin = [CTxIn(segwit_ctv_outpoint)]\n+        check_template_verify_tx.vout = outputs\n+\n+        check_template_verify_tx.wit.vtxinwit +=  [CTxInWitness()]\n+        check_template_verify_tx.wit.vtxinwit[0].scriptWitness.stack = [script]\n+        assert_equal(self.nodes[0].sendrawtransaction(check_template_verify_tx.serialize().hex(), 0), check_template_verify_tx.rehash())\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY spend accepted by sendrawtransaction\")\n+\n+        # Now we verify that a block with this transaction is also valid\n+        blockhash = self.add_block([check_template_verify_tx])\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY spend accepted in a block\")\n+\n+        self.log.info(\"Rolling back the block\")\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        # Show any modification will break the validity\n+        self.log.info(\"Modifying Segwit OP_CHECKTEMPLATEVERIFY spend, block should fail\")\n+        check_template_verify_tx_mutated_amount = check_template_verify_tx\n+        check_template_verify_tx_mutated_amount.vout[0].nValue += 1\n+        check_template_verify_tx_mutated_amount.rehash()\n+        self.fail_block([check_template_verify_tx_mutated_amount])\n+        self.log.info(\"Modified Segwit OP_CHECKTEMPLATEVERIFY spend failed to confirm\")\n+\n+        # Now show that only one input allowed\n+        self.log.info(\"Testing that multiple inputs are disallowed when specified\")\n+        check_template_verify_two_inputs = check_template_verify_tx\n+        check_template_verify_two_inputs.vin += [CTxIn(anyone_can_spend_outpoint)]\n+        check_template_verify_two_inputs.rehash()\n+        self.fail_block([check_template_verify_two_inputs])\n+\n+        self.log.info(\"Testing that the second input specified was actually spendable by itself\")\n+\n+        # Second UTXO was actually spendable\n+        spendtx = CTransaction()\n+        spendtx.nVersion = 2\n+        spendtx.vin = [CTxIn(anyone_can_spend_outpoint)]\n+        spendtx.vout += [CTxOut(int(amount_sats - 1000), random_p2sh())]\n+        spendtx.rehash()\n+        blockhash = self.add_block([spendtx])\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        self.log.info(\"Testing Segwit OP_CHECKTEMPLATEVERIFY spend with a wrong size argument\")\n+        # Test sendrawtransaction\n+        check_template_verify_tx_wrongsize_stack = CTransaction()\n+        check_template_verify_tx_wrongsize_stack.nVersion = 2\n+        check_template_verify_tx_wrongsize_stack.vin = [CTxIn(segwit_ctv_wrongsize_stack_outpoint)]\n+        check_template_verify_tx_wrongsize_stack.vout = outputs\n+\n+        check_template_verify_tx_wrongsize_stack.wit.vtxinwit +=  [CTxInWitness()]\n+        check_template_verify_tx_wrongsize_stack.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE, OP_CHECKTEMPLATEVERIFY])]\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(check_template_verify_tx_wrongsize_stack.serialize().hex(), 0)\n+            raise Exception(\"Expected to fail sendrawtransaction\")\n+        except JSONRPCException as e:\n+            assert_equal(str(e), DISCOURAGED_ERROR + \" (-26)\")\n+            self.log.info(\"OP_CHECKTEMPLATEVERIFY with wrong size stack rejected by sendrawtransaction as discouraged\")\n+\n+        # Now we verify that a block with this transaction is valid\n+        blockhash = self.add_block([check_template_verify_tx_wrongsize_stack])\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY with wrong size stack spend accepted in a block (soft fork upgradable)\")\n+\n+\n+        self.log.info(\"Testing Segwit OP_CHECKTEMPLATEVERIFY spend with an empty stack argument\")\n+        # Test sendrawtransaction\n+        check_template_verify_tx_empty_stack = CTransaction()\n+        check_template_verify_tx_empty_stack.nVersion = 2\n+        check_template_verify_tx_empty_stack.vin = [CTxIn(segwit_ctv_empty_stack_outpoint)]\n+        check_template_verify_tx_empty_stack.vout = outputs\n+\n+        check_template_verify_tx_empty_stack.wit.vtxinwit +=  [CTxInWitness()]\n+        check_template_verify_tx_empty_stack.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_CHECKTEMPLATEVERIFY])]\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(check_template_verify_tx_empty_stack.serialize().hex(), 0)\n+            raise Exception(\"Expected to fail sendrawtransaction\")\n+        except JSONRPCException as e:\n+            assert_equal(str(e), STACK_TOO_SHORT_ERROR + \" (-26)\")",
    "path": "test/functional/feature_checktemplateverify.py",
    "position": null,
    "original_position": 352,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "04af84316aa43a8fdc58b36811c07ee796ce0e39",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "hah i guess new since i wrote the tests 2 years ago?",
    "created_at": "2021-08-07T21:28:32Z",
    "updated_at": "2021-08-07T21:28:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684679651",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684679651"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684679651"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684679651/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 348,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 352,
    "side": "RIGHT",
    "in_reply_to_id": 684193839
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684679696",
    "pull_request_review_id": 724846853,
    "id": 684679696,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY3OTY5Ng==",
    "diff_hunk": "@@ -0,0 +1,484 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_HASH160, OP_EQUAL, hash160, taproot_construct\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def p2sh_helper(script):\n+    return CScript(bytes([OP_HASH160, 0x14]) + hash160(script) + bytes([OP_EQUAL]))\n+def random_p2sh():\n+    return p2sh_helper(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: Decimal(amount_sats) / COIN})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()",
    "path": "test/functional/feature_checktemplateverify.py",
    "position": null,
    "original_position": 83,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "92c34e2fa753d1c0a6076446f62ab77c8d08c75a",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "will check; wrote tests ~2 years ago so might be some new stuff to use",
    "created_at": "2021-08-07T21:28:59Z",
    "updated_at": "2021-08-07T21:28:59Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684679696",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684679696"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684679696"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684679696/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 82,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 83,
    "side": "RIGHT",
    "in_reply_to_id": 684149776
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684679774",
    "pull_request_review_id": 724846881,
    "id": 684679774,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY3OTc3NA==",
    "diff_hunk": "@@ -160,9 +160,14 @@ struct PrecomputedTransactionData\n     uint256 m_outputs_single_hash;\n     uint256 m_spent_amounts_single_hash;\n     uint256 m_spent_scripts_single_hash;\n+    uint256 m_scriptSigs_single_hash;\n+    uint256 m_standard_template_single_hash;\n     //! Whether the 5 fields above are initialized.\n     bool m_bip341_taproot_ready = false;\n ",
    "path": "src/script/interpreter.h",
    "position": null,
    "original_position": 8,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "4c68aab5ee52f58709fe9043e640d13f89596db0",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nack this wastes memory with packing, will update comment though",
    "created_at": "2021-08-07T21:29:47Z",
    "updated_at": "2021-08-07T21:29:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684679774",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684679774"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684679774"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684679774/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 163,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 179,
    "side": "RIGHT",
    "in_reply_to_id": 684145628
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684679794",
    "pull_request_review_id": 724846898,
    "id": 684679794,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY3OTc5NA==",
    "diff_hunk": "@@ -91,6 +91,13 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1628640000; // August 11th, 2021\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height = 709632; // Approximately November 12th, 2021\n \n+        // Deployment of CTV (BIP 119)",
    "path": "src/chainparams.cpp",
    "position": 4,
    "original_position": 4,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "b560a59b1db7ca8fcdca2ea7722cf7cdbb004320",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "will do -- that might also be a new thing.",
    "created_at": "2021-08-07T21:30:17Z",
    "updated_at": "2021-08-07T21:30:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684679794",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684679794"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684679794"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684679794/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 94,
    "original_line": 94,
    "side": "RIGHT",
    "in_reply_to_id": 684142697
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684938546",
    "pull_request_review_id": 725049507,
    "id": 684938546,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDkzODU0Ng==",
    "diff_hunk": "@@ -160,9 +160,14 @@ struct PrecomputedTransactionData\n     uint256 m_outputs_single_hash;\n     uint256 m_spent_amounts_single_hash;\n     uint256 m_spent_scripts_single_hash;\n+    uint256 m_scriptSigs_single_hash;\n+    uint256 m_standard_template_single_hash;\n     //! Whether the 5 fields above are initialized.\n     bool m_bip341_taproot_ready = false;\n ",
    "path": "src/script/interpreter.h",
    "position": null,
    "original_position": 8,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "4c68aab5ee52f58709fe9043e640d13f89596db0",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "yeah that works too. could also just move the comment up",
    "created_at": "2021-08-09T06:20:51Z",
    "updated_at": "2021-08-09T06:21:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684938546",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684938546"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684938546"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684938546/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 163,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 179,
    "side": "RIGHT",
    "in_reply_to_id": 684145628
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684939143",
    "pull_request_review_id": 725049850,
    "id": 684939143,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDkzOTE0Mw==",
    "diff_hunk": "@@ -0,0 +1,484 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_HASH160, OP_EQUAL, hash160, taproot_construct\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def p2sh_helper(script):\n+    return CScript(bytes([OP_HASH160, 0x14]) + hash160(script) + bytes([OP_EQUAL]))\n+def random_p2sh():\n+    return p2sh_helper(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: Decimal(amount_sats) / COIN})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()",
    "path": "test/functional/feature_checktemplateverify.py",
    "position": null,
    "original_position": 83,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "92c34e2fa753d1c0a6076446f62ab77c8d08c75a",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "yeah there's definitely lots of new stuff to use :)",
    "created_at": "2021-08-09T06:21:36Z",
    "updated_at": "2021-08-09T06:21:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684939143",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684939143"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684939143"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684939143/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 82,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 83,
    "side": "RIGHT",
    "in_reply_to_id": 684149776
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684939224",
    "pull_request_review_id": 725049968,
    "id": 684939224,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDkzOTIyNA==",
    "diff_hunk": "@@ -875,7 +875,6 @@\n \n [\"Ensure 100% coverage of discouraged NOPS\"],\n [\"1\", \"NOP1\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"NOP4\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],",
    "path": "src/test/data/script_tests.json",
    "position": 31,
    "original_position": 4,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "04af84316aa43a8fdc58b36811c07ee796ce0e39",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "squash",
    "created_at": "2021-08-09T06:21:53Z",
    "updated_at": "2021-08-09T06:21:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684939224",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684939224"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684939224"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684939224/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 878,
    "original_line": 878,
    "side": "LEFT",
    "in_reply_to_id": 684262675
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/700700061",
    "pull_request_review_id": 744554694,
    "id": 700700061,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMDcwMDA2MQ==",
    "diff_hunk": "@@ -160,9 +160,14 @@ struct PrecomputedTransactionData\n     uint256 m_outputs_single_hash;\n     uint256 m_spent_amounts_single_hash;\n     uint256 m_spent_scripts_single_hash;\n+    uint256 m_scriptSigs_single_hash;\n+    uint256 m_standard_template_single_hash;\n     //! Whether the 5 fields above are initialized.\n     bool m_bip341_taproot_ready = false;\n ",
    "path": "src/script/interpreter.h",
    "position": null,
    "original_position": 8,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "4c68aab5ee52f58709fe9043e640d13f89596db0",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "i'm adding a new commit which fully packs, reorders, and improves the docs here.",
    "created_at": "2021-09-02T02:37:17Z",
    "updated_at": "2021-09-02T02:37:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r700700061",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/700700061"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r700700061"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/700700061/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 163,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 179,
    "side": "RIGHT",
    "in_reply_to_id": 684145628
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701305405",
    "pull_request_review_id": 745363630,
    "id": 701305405,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTMwNTQwNQ==",
    "diff_hunk": "@@ -616,7 +616,32 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     break;\n                 }\n \n-                case OP_NOP1: case OP_NOP4: case OP_NOP5:\n+                case OP_CHECKTEMPLATEVERIFY:\n+                {\n+                    // if flags not enabled; treat as a NOP4\n+                    if (!(flags & SCRIPT_VERIFY_STANDARD_TEMPLATE)) break;",
    "path": "src/script/interpreter.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "04af84316aa43a8fdc58b36811c07ee796ce0e39",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If the flag is not  enabled, we currently do not treat it as a NOP4 (e.g., discouraged). Will patch this shortly.",
    "created_at": "2021-09-02T17:56:03Z",
    "updated_at": "2021-09-02T17:56:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r701305405",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701305405"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r701305405"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701305405/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 622,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701308676",
    "pull_request_review_id": 745367912,
    "id": 701308676,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTMwODY3Ng==",
    "diff_hunk": "@@ -616,7 +616,32 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     break;\n                 }\n \n-                case OP_NOP1: case OP_NOP4: case OP_NOP5:\n+                case OP_CHECKTEMPLATEVERIFY:\n+                {\n+                    // if flags not enabled; treat as a NOP4\n+                    if (!(flags & SCRIPT_VERIFY_STANDARD_TEMPLATE)) break;",
    "path": "src/script/interpreter.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "04af84316aa43a8fdc58b36811c07ee796ce0e39",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "referencing https://github.com/bitcoin/bitcoin/pull/6124/files it looks like it would be proper to discourage historically.",
    "created_at": "2021-09-02T18:00:42Z",
    "updated_at": "2021-09-02T18:00:42Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r701308676",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701308676"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r701308676"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701308676/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 622,
    "side": "RIGHT",
    "in_reply_to_id": 701305405
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701806626",
    "pull_request_review_id": 745991773,
    "id": 701806626,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTgwNjYyNg==",
    "diff_hunk": "@@ -616,7 +616,36 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     break;\n                 }\n \n-                case OP_NOP1: case OP_NOP4: case OP_NOP5:\n+                case OP_CHECKTEMPLATEVERIFY:\n+                {\n+                    // if flags not enabled; treat as a NOP4\n+                    if (!(flags & SCRIPT_VERIFY_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH)) {\n+                        if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)",
    "path": "src/script/interpreter.cpp",
    "position": 9,
    "original_position": 9,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "7b225f4b844fd69f298818a59ff8a4fd83ecd959",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oh, I think I see what's causing your error in #22865. You don't need to fail on `SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS` now that you've repurposed this NOP.",
    "created_at": "2021-09-03T11:10:46Z",
    "updated_at": "2021-09-03T11:11:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r701806626",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701806626"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r701806626"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701806626/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 622,
    "original_start_line": 622,
    "start_side": "RIGHT",
    "line": 623,
    "original_line": 623,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/702007973",
    "pull_request_review_id": 746263548,
    "id": 702007973,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMjAwNzk3Mw==",
    "diff_hunk": "@@ -616,7 +616,36 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     break;\n                 }\n \n-                case OP_NOP1: case OP_NOP4: case OP_NOP5:\n+                case OP_CHECKTEMPLATEVERIFY:\n+                {\n+                    // if flags not enabled; treat as a NOP4\n+                    if (!(flags & SCRIPT_VERIFY_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH)) {\n+                        if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)",
    "path": "src/script/interpreter.cpp",
    "position": 9,
    "original_position": 9,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "7b225f4b844fd69f298818a59ff8a4fd83ecd959",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is actually a new line I added -- it's required for correctness if this is to be merged/released before setting release params. https://github.com/bitcoin/bitcoin/pull/21702#discussion_r701305405\r\n\r\nHowever, it is not the reason there is a problem. It is also a problem later on where !=32 byte arguments are upgradable too.",
    "created_at": "2021-09-03T15:56:23Z",
    "updated_at": "2021-09-03T15:56:23Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r702007973",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/702007973"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r702007973"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/702007973/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 622,
    "original_start_line": 622,
    "start_side": "RIGHT",
    "line": 623,
    "original_line": 623,
    "side": "RIGHT",
    "in_reply_to_id": 701806626
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706412690",
    "pull_request_review_id": 751720247,
    "id": 706412690,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNjQxMjY5MA==",
    "diff_hunk": "@@ -616,7 +616,36 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     break;\n                 }\n \n-                case OP_NOP1: case OP_NOP4: case OP_NOP5:\n+                case OP_CHECKTEMPLATEVERIFY:\n+                {\n+                    // if flags not enabled; treat as a NOP4\n+                    if (!(flags & SCRIPT_VERIFY_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH)) {\n+                        if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)",
    "path": "src/script/interpreter.cpp",
    "position": 9,
    "original_position": 9,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "7b225f4b844fd69f298818a59ff8a4fd83ecd959",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "resolving as per https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-914679373.\r\n\r\nthis approach, although mildly (temporarily) problematic, yields safer results until CTV is active.",
    "created_at": "2021-09-10T19:13:16Z",
    "updated_at": "2021-09-10T19:13:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r706412690",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706412690"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r706412690"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706412690/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 622,
    "original_start_line": 622,
    "start_side": "RIGHT",
    "line": 623,
    "original_line": 623,
    "side": "RIGHT",
    "in_reply_to_id": 701806626
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706731741",
    "pull_request_review_id": 752062678,
    "id": 706731741,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNjczMTc0MQ==",
    "diff_hunk": "@@ -63,6 +63,7 @@ static std::map<std::string, unsigned int> mapFlagNames = {\n     {std::string(\"DISCOURAGE_UPGRADABLE_PUBKEYTYPE\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE},\n     {std::string(\"DISCOURAGE_OP_SUCCESS\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS},\n     {std::string(\"DISCOURAGE_UPGRADABLE_TAPROOT_VERSION\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION},\n+    {std::string(\"CHECKTEMPLATEVERIFY\"), (unsigned int) SCRIPT_VERIFY_STANDARD_TEMPLATE},",
    "path": "src/test/transaction_tests.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "04af84316aa43a8fdc58b36811c07ee796ce0e39",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "added tx_invalid.json, tx_valid.json based on the python tests. @Christewart too since he asked for this a while back.",
    "created_at": "2021-09-12T02:38:48Z",
    "updated_at": "2021-09-12T02:38:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r706731741",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706731741"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r706731741"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706731741/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 66,
    "side": "RIGHT",
    "in_reply_to_id": 684235896
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706767672",
    "pull_request_review_id": 752095713,
    "id": 706767672,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNjc2NzY3Mg==",
    "diff_hunk": "@@ -1402,6 +1427,18 @@ uint256 GetSpentAmountsSHA256(const std::vector<CTxOut>& outputs_spent)\n     CHashWriter ss(SER_GETHASH, 0);\n     for (const auto& txout : outputs_spent) {\n         ss << txout.nValue;\n+\n+    }\n+    return ss.GetSHA256();\n+}\n+\n+/** Compute the (single) SHA256 of the concatenation of all scriptSigs in a tx. */\n+template <class T>\n+uint256 GetScriptSigsSHA256(const T& txTo)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& in : txTo.vin) {\n+        ss << in.scriptSig;\n     }\n     return ss.GetSHA256();\n }",
    "path": "src/script/interpreter.cpp",
    "position": 56,
    "original_position": 52,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "04af84316aa43a8fdc58b36811c07ee796ce0e39",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2021-09-12T06:04:08Z",
    "updated_at": "2021-09-12T06:04:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r706767672",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706767672"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r706767672"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706767672/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 1440,
    "original_start_line": 1436,
    "start_side": "RIGHT",
    "line": 1448,
    "original_line": 1448,
    "side": "RIGHT",
    "in_reply_to_id": 684223877
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726097280",
    "pull_request_review_id": 776207147,
    "id": 726097280,
    "node_id": "PRRC_kwDOABII584rR12A",
    "diff_hunk": "@@ -91,6 +91,13 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1628640000; // August 11th, 2021\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height = 709632; // Approximately November 12th, 2021\n \n+        // Deployment of CTV (BIP 119)\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].bit = 5;",
    "path": "src/chainparams.cpp",
    "position": 5,
    "original_position": 5,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "user": {
      "login": "jaybny",
      "id": 777326,
      "node_id": "MDQ6VXNlcjc3NzMyNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/777326?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaybny",
      "html_url": "https://github.com/jaybny",
      "followers_url": "https://api.github.com/users/jaybny/followers",
      "following_url": "https://api.github.com/users/jaybny/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaybny/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaybny/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaybny/subscriptions",
      "organizations_url": "https://api.github.com/users/jaybny/orgs",
      "repos_url": "https://api.github.com/users/jaybny/repos",
      "events_url": "https://api.github.com/users/jaybny/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaybny/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "is there a reason why we use bit 5 and not 3?  ",
    "created_at": "2021-10-11T13:01:53Z",
    "updated_at": "2021-10-11T13:01:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r726097280",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726097280"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r726097280"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726097280/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 95,
    "original_line": 95,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726391808",
    "pull_request_review_id": 776514212,
    "id": 726391808,
    "node_id": "PRRC_kwDOABII584rS9wA",
    "diff_hunk": "@@ -91,6 +91,13 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1628640000; // August 11th, 2021\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height = 709632; // Approximately November 12th, 2021\n \n+        // Deployment of CTV (BIP 119)\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].bit = 5;",
    "path": "src/chainparams.cpp",
    "position": 5,
    "original_position": 5,
    "commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "original_commit_id": "118ff53bab10120943d987b4d3fb404c76922765",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "no reason, i just picked a bit that i didn't think would conflict with anything else.",
    "created_at": "2021-10-11T17:17:07Z",
    "updated_at": "2021-10-11T17:17:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r726391808",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726391808"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r726391808"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726391808/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 95,
    "original_line": 95,
    "side": "RIGHT",
    "in_reply_to_id": 726097280
  }
]