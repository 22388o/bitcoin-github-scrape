DrahtBot,2021-04-15 19:24:17,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23546](https://github.com/bitcoin/bitcoin/pull/23546) (scripted-diff: Use clang-tidy syntax for C++ named arguments (tes",https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-820676054,820676054,
michaelfolkson,2021-04-22 21:49:59,I think CTV is interesting and will likely be a candidate for a future soft fork whether that be a standalone CTV soft fork or a soft fork with a bundle of features. But at least for me I feel it is premature to even look at this with Taproot not yet activated and zero discussion (mere speculation) on the form of the next soft fork after Taproot has (hopefully) activated. I guess there is no harm ,https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-825207430,825207430,
JeremyRubin,2021-04-23 01:06:32,"You're free to review or not review any PR you like whenever you like. No one is ""in charge"" of the roadmap for Bitcoin development. All changes -- soft forks or not -- proceed when they have rough consensus and the code is ready.\n\nThis PR is for code review of BIP-119 OP_CTV's implementation. If you wish to discuss Bitcoin Project management please take it to an appropriate venue such as the ",https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-825312007,825312007,
michaelfolkson,2021-04-23 10:17:05,"@JeremyRubin:\n\n> All changes -- soft forks or not -- proceed when they have rough consensus and the code is ready.\n\nOn this we are definitely in strong disagreement. A soft fork (or hard fork) requires overwhelming consensus not only in this repo but in the wider community. Taproot reached that bar (there was one NACK from a long term contributor due to quantum concerns I believe in this r",https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-825557354,825557354,
JeremyRubin,2021-04-23 12:17:17,"Please, again, take the metaphysics to the mailing list. This is a PR for people who *want to* review BIP-119 CTV.",https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-825618060,825618060,
JeremyRubin,2021-04-23 17:48:51,Apologies for the line noise -- I hit an issue with GH tracking the tip of my branch and had to use https://github.com/isaacs/github/issues/361#issuecomment-114300645 workaround.,https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-825818936,825818936,
DrahtBot,2021-05-03 09:32:08,<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\n🕵️ @sipa has been requested to review this pull request as specified in the REVIEWERS file.,https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-831141697,831141697,
RobinLinus,2021-05-05 02:52:23,"concept ACK. Covenants would open up lots of exciting new use cases.\nWhat are the next steps? \n\n",https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-832378018,832378018,
benthecarman,2021-05-06 21:19:28,"CR-ACK 491804c589c5f3e68dc17516377930e18986cb19\n\nbesides the nit on spacing\n\nStill need to look through tests",https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-833874616,833874616,
rxgrant,2021-05-27 03:24:54,"@RobinLinus \n> What are the next steps?\n\nI think the taproot process is an exemplar to build off of, for all future upgrades.\n\nDocumentation, review workshops, tutorial media, and gradually building press exposure all attract devs who want to understand and review it well.  Without review workshops, it's too easy to fall into a bad habit of gauging consensus by noticing bellwether review",https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-849289433,849289433,
RobinLinus,2021-05-27 22:15:59,"> * How can this concept hurt those in Bitcoin who do not upgrade at all?\n\nIs it relevant to mention here that it's possible to activate `OP_CTV` with a softfork because it could overwrite some `OP_NOOP`?\n \n> * How is this feature important to keep Bitcoin relevant?\n>   It enables a broad class of smart contracts, including: unchangeable efficient batching of exchange payouts; better cus",https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-849976995,849976995,
JeremyRubin,2021-05-30 17:51:05,"I really don't have the answers for what the pipeline of accepting soft forks to Bitcoin should look like. I think these sorts of conversations are better suited for the mailing list or for an IRC chat room (although given recent IRC system disruptions IDK how logging is functioning), and GitHub is better suited to discuss the technical merits of the code.\n\n\nthat said, short of a perfect ven",https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-851036640,851036640,
rxgrant,2021-05-31 00:11:40,"> * Are there other approaches to solve this need in Bitcoin's consensus layer?\n\nAnswers here should also reference SIGHASH_ANYPREVOUTANYSCRIPT and OP_CAT [as discussed in bip119](https://github.com/bitcoin/bips/blob/master/bip-0119.mediawiki#feature-redundancy).  SIGHASH_ANYPREVOUT helps LN state updates require less stored state, and OP_CTV does complex contracts in fewer bytes (including se",https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-851085931,851085931,
Rspigler,2021-06-21 04:30:52,"Strong Concept ACK\n\nEdit:  I should note that the implementation details are above my paygrade, and I am ACK'ing the use-case improvements, with the condition that it passes review and gains consensus",https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-864718834,864718834,
JeremyRubin,2021-06-26 05:03:18,"Rebased to fix conflicts, whitespace issues fixed, and squashed the fixups to the tests.",https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-868948722,868948722,
JeremyRubin,2021-07-07 06:30:06,"rebased!\n\n@ajtowns might you be able to check commit 0141eb4d7d8c35088287353b92813575ce9b79a7 since I had some non obvious rebasing to do following https://github.com/bitcoin/bitcoin/pull/19438",https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-875324670,875324670,
JeremyRubin,2021-07-12 20:40:18,"> Concept NACK. Bad for security. (I wont respond to this similar to [bitcoin-core/gui#320 (comment)](https://github.com/bitcoin-core/gui/pull/320#issuecomment-845826760))\n> \n> Can delete the comment because its not from Chaincode Labs devs.\n> \n> Disclaimer: I have other issues with how Core repo works however it doesn't influences my reasoning here. I have no incentive to NACK here. I don",https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-878580116,878580116,
JeremyRubin,2021-07-12 20:51:34,"That's all fine and dandy, but your comment isn't\n\n1. Technically relevant.\n2. Coherent (I don't understand what you are insinuating or claiming or how it relates to BIP-119)\n\nIf you want to discuss further please use an appropriate venue (e.g., twitter, mailing list).",https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-878586404,878586404,
jonatack,2021-08-04 12:06:48,"Concept ACK, will try to review soon.",https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-892603144,892603144,
michaelfolkson,2021-08-04 13:02:22,"> Edit: I should note that the implementation details are above my paygrade, and I am ACK'ing the use-case improvements, with the condition that it passes review and gains consensus\n\n@Rspigler: The implementation details **are** the most critical thing with this proposed consensus change. Everyone will ACK more use cases, that is the easy part. The hard part is reviewers (ideally more than a h",https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-892638399,892638399,
Rspigler,2021-08-04 19:00:23,"I agree (that the implementation details are the most critical).  I disagree that everyone will ACK more use cases - there are actually a few soft fork ideas in the works right now that are controversial.  I did plenty of research before Concept ACKing this, and I feel confident in my Concept ACK, but that's all I can do, and I can't review the code.\n\nThat being said, I agree strongly that imp",https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-892897355,892897355,
jonatack,2021-09-13 10:31:51,"Concept ACK, debug build/tests clean/green, the code looks pretty good on first overlook, and the last push (`git diff 4a457d4 118ff53`) fixed the CI integer sanitizer failure.",https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-918060312,918060312,
jaybny,2021-10-07 19:15:48,"Concept ACK  based on this being part of a bigger [picture](https://rubin.io/blog/2021/07/02/covenants/) , and as a solid stand alone. will review details and code shortly. \n\nACK: reviewed implementation code, and deployment code, as a sanity check against objective and text of bip119. reviewed test code, compiled fork, ran tests, tested with regtest.   ",https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-938082090,938082090,
michaelfolkson,2021-10-11 13:28:26,"Posted [this](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-October/019535.html) to the mailing list with my thoughts on how soft fork PRs should be treated and broader considerations before merging.\n\nI am a long term Concept ACK on enabling covenant functionality for the vault use case when there is community consensus that it should be enabled. My personal view currently is I ",https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-940033339,940033339,
ProofOfKeags,2021-11-08 23:26:07,"Concept ACK.\n\nThis represents the least controversial change that could give us useful covenents in Bitcoin. The properties of non-recursion and strict enumerability should be enough to gain larger support and still give us the ability to create useful output constraints. While I generally favor something more general than what is presented here, they are not mutually exclusive and any risks i",https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-963667962,963667962,
jaybny,2021-11-23 03:41:26,"as an aside. importance of merging this bip, is that it shows that Bitcoin accepts solid scientific enhancements from legitimate programmers , even when other devs may have different ideas and paths for the same utility \n++",https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-976141608,976141608,
DrahtBot,2021-11-25 07:43:27,"<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-978915382,978915382,
pyskell,2021-04-20 12:15:07,"As the TODO says, should be improved",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616625177,616625177,src/script/interpreter.cpp
pyskell,2021-04-20 12:15:19,Can this assert just be moved to the start of the function?,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616625350,616625350,src/script/interpreter.cpp
pyskell,2021-04-20 12:17:36,"Minor bike shedding but ""Basic Standard"" and ""Standard Template"" are somewhat confusing terms. Are there non-standard templates?",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616627150,616627150,src/script/script.cpp
JeremyRubin,2021-04-20 16:34:06,"yes; this became a TODO post taproot because we started doing much more aggressive/expensive heuristics, scanning to see if it's a taproot spend. We used to just IIRC always compute all caches.\n\n\nIt's not clear to me the performance benefit of scanning v.s. always computing the hashes @sipa. 50% of transactions are SegWit these days (https://charts.woobull.com/bitcoin-segwit-adoption/), and ",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616853690,616853690,src/script/interpreter.cpp
JeremyRubin,2021-04-20 16:40:07,"These asserts can technically just be deleted looking at the surrounded code, txTo will already be able to deref nullptr from many other functions.\n\nI put them close to where the deref's actually occur as I think that's best practice, but yes they could go at the start.\n\nI'd actually be more excited about changing the representation internally to a reference as follow up work so we get rid",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616858194,616858194,src/script/interpreter.cpp
JeremyRubin,2021-04-20 16:45:13,"Yes... Perhaps ""standard"" and ""basic"" should be flipped terminology wise, but as is:\n\n- Standard is the 32 byte argument form interpreted as the StandardTemplateHash defined in this PR\n- Basic is the ScriptType that is just a script with a single <h:32> CTV. \n\nCTV as a NOP is extensible in the future to support different templates via having a different length arg + whatever rules around",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616863828,616863828,src/script/script.cpp
JeremyRubin,2021-04-21 03:24:15,"One last thing on caching: CTV was designed so that if you're expecting to operate the same CTV at diff input indexes, you can cache the sha256 midstate because index is the final field. However, I think that it's relatively rare you'd want CTV scripts at indexes other than 0.",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r617174074,617174074,src/script/interpreter.cpp
MarcoFalke,2021-04-22 18:31:04,please enumerate the exact permission flags needed. Whitelist is deprecated,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618645483,618645483,test/functional/feature_checktemplateverify.py
MarcoFalke,2021-04-22 18:32:28,"I know this is just the tests, but it would be nice to not use floating point",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618646394,618646394,test/functional/feature_checktemplateverify.py
MarcoFalke,2021-04-22 18:40:42,100e6 refers to the COIN constant?,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618651655,618651655,test/functional/feature_checktemplateverify.py
JeremyRubin,2021-04-22 19:04:37,What's the replacement -- tbh don't know if this is even needed anymore?,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618666993,618666993,test/functional/feature_checktemplateverify.py
JeremyRubin,2021-04-22 19:06:56,"yeah I think it kinda has to be floating point because the RPCs use BTC and we have sats... if I used a non float I would truncate?\n\nBut I can refactor it to be COIN? Or maybe preserve the values as sats for longer and only convert to BTC in one place?",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618668363,618668363,test/functional/feature_checktemplateverify.py
MarcoFalke,2021-04-22 19:17:45,For example `-whitelist=noban@ip`,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618675048,618675048,test/functional/feature_checktemplateverify.py
MarcoFalke,2021-04-22 19:18:09,There is decimal.Decimal,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618675290,618675290,test/functional/feature_checktemplateverify.py
JeremyRubin,2021-04-23 02:02:09,"I removed it and it still runs fine... presumably this is helpful during testing if we're trying to connect some sort of malicious peer, but I think I don't need it here.",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618888207,618888207,test/functional/feature_checktemplateverify.py
benthecarman,2021-05-06 21:07:55,nit: unneeded spacing,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r627765572,627765572,src/script/interpreter.cpp
JeremyRubin,2021-05-07 17:59:26,discussion of this moved here https://github.com/bitcoin/bips/pull/1118,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r628407410,628407410,src/script/script.cpp
benthecarman,2021-05-18 03:12:24,piconit: 2 spaces after the `=` here,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634008499,634008499,src/script/interpreter.cpp
benthecarman,2021-05-18 03:12:31,same here,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634008538,634008538,src/script/interpreter.cpp
benthecarman,2021-05-18 03:23:32,Would it be safer to set `input_index` here to `uint32_t`'s max value? That way if there is less of a chance that we miss in a test the handling of a changing `input_index` since most likely the tested `input_index` will be `0`,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634011655,634011655,src/script/interpreter.cpp
benthecarman,2021-05-18 03:27:09,We do lose the effiency of always having the `0`th input cached however,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634012540,634012540,src/script/interpreter.cpp
JeremyRubin,2021-05-18 14:00:50,yeah the whole point is caching the most common case -- we could also cache the midstate without index and just finalize with an index in consensus.,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634412955,634412955,src/script/interpreter.cpp
rxgrant,2021-05-31 00:18:05,"```suggestion\n        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].nStartTime = Consensus::BIP9Deployment::NEVER_ACTIVE;\n```",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r642149506,642149506,src/chainparams.cpp
rxgrant,2021-05-31 00:18:27,"```suggestion\n        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].nStartTime = Consensus::BIP9Deployment::NEVER_ACTIVE;\n```",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r642149551,642149551,src/chainparams.cpp
rxgrant,2021-05-31 00:18:45,"```suggestion\n        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].nStartTime = Consensus::BIP9Deployment::NEVER_ACTIVE;\n```",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r642149582,642149582,src/chainparams.cpp
rxgrant,2021-05-31 00:19:00,"```suggestion\n        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].nStartTime = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n```",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r642149616,642149616,src/chainparams.cpp
benthecarman,2021-07-12 19:43:55,If I comment out these 2 lines `feature_checktemplateverify.py` still passes,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668206692,668206692,src/script/interpreter.cpp
benthecarman,2021-07-12 19:45:49,replacing this with a `break` has `feature_checktemplateverify.py` still passing,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668207732,668207732,src/script/interpreter.cpp
benthecarman,2021-07-12 19:47:56,setting this to `false` still has `feature_checktemplateverify.py` passing,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668209161,668209161,src/script/interpreter.cpp
benthecarman,2021-07-12 19:51:19,changing the `input_index` param to `100` in either of these causes the tests to fail which seems concerncing to me as this is just a cache,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668211185,668211185,src/script/interpreter.cpp
benthecarman,2021-07-12 19:52:16,changing this to false has `feature_checktemplateverify` still pass,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668211774,668211774,src/script/interpreter.cpp
JeremyRubin,2021-07-12 20:22:54,"Yep, that's normal.\n\nIf the cache is disabled (which making ready = false does), then the cache isn't used.",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668230043,668230043,src/script/interpreter.cpp
JeremyRubin,2021-07-12 20:25:43,"That's to be expected -- the cached precompute expects input_index == 0, https://github.com/bitcoin/bitcoin/blob/b04c35c8506160e95a965382956fa5b68d139b29/src/script/interpreter.cpp#L1910, so if you change what is cached to input_index == 100 the checker will use the wrong value.",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668231716,668231716,src/script/interpreter.cpp
JeremyRubin,2021-07-12 20:28:28,"This is to be expected, if uses_bip119_ctv is false, then the checker will just compute the values without the cache (unless taproot/143 flags passed -- i suppose we could tighten when the cache gets made). If it is true, then the cache is always available. The cache being present or not shouldn't break anything!",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668233412,668233412,src/script/interpreter.cpp
JeremyRubin,2021-07-12 20:29:29,"good catch, I should pass in some non-32 byte values to check that the txns are rejected.",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668234024,668234024,src/script/interpreter.cpp
JeremyRubin,2021-07-12 20:30:01,"good catch, I should test empty stack.",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668234352,668234352,src/script/interpreter.cpp
JeremyRubin,2021-07-13 06:08:53,Now covered :),https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668454386,668454386,src/script/interpreter.cpp
JeremyRubin,2021-07-13 06:09:06,now covered :),https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668454528,668454528,src/script/interpreter.cpp
MarcoFalke,2021-07-13 08:38:17,This is untested code: https://drahtbot.space/host_reports/DrahtBot/reports/coverage/bitcoin/bitcoin/21702/total.coverage/src/script/interpreter.cpp.gcov.html#1924,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668551097,668551097,src/script/interpreter.cpp
JeremyRubin,2021-07-13 15:05:53,"Good point -- trying to think about how to trigger no precomputed data available, other than from unit tests. Are their code paths where we do not precompute?",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668855118,668855118,src/script/interpreter.cpp
JeremyRubin,2021-07-13 15:06:12,"(e.g., unit tests I can just call the function, but i'd love to test it on a full code path)",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668855427,668855427,src/script/interpreter.cpp
MarcoFalke,2021-07-13 15:27:36,Not sure if there is a code path that can hit this in production. Have you seen https://github.com/bitcoin/bitcoin/pull/21330/files ?,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668875430,668875430,src/script/interpreter.cpp
JeremyRubin,2021-07-13 16:35:34,"Yeah I noticed that, it's great. According to the PR, `Validation code passes ASSERT_FAIL (as at validation time all data should always be passed, and anything else is a serious bug in the code), while signing code uses FAIL.`.\n\nHowever, for CTV were we ever to relax the heuristic (which is right now, for every transaction), we would want to be able to handle the case where the data is not ava",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668931820,668931820,src/script/interpreter.cpp
JeremyRubin,2021-07-15 02:59:53,"btw I'm not sure if the patch that i made actually improve coverage much, given that I think the missingdata branch is still never hit...",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r670097613,670097613,src/script/interpreter.cpp
glozow,2021-08-06 10:51:55,"in b560a59b1db7ca8fcdca2ea7722cf7cdbb004320 ""OP_CHECKTEMPLATEVERIFY Deployment parameters""\n\nIf you're going to add deployment parameters, you'll also want to update `getblockchaininfo()` RPC's `softforks` result.\n",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684142697,684142697,src/chainparams.cpp
glozow,2021-08-06 10:57:30,"You may want to move this down so as not to invalidate the comment on `m_bip341_taproot_ready`\n```suggestion\n    //! Whether the 5 fields above are initialized.\n    bool m_bip341_taproot_ready = false;\n    uint256 m_scriptSigs_single_hash;\n    uint256 m_standard_template_single_hash;\n```",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684145628,684145628,src/script/interpreter.h
glozow,2021-08-06 11:05:36,This test shouldn't depend on the wallet. Perhaps look into using `MiniWallet`? I'm sure `create_transaction_to_script()` could be modified to not require `signrawtransactionwithwallet`,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684149776,684149776,test/functional/feature_checktemplateverify.py
glozow,2021-08-06 12:24:59,"Note on all the `try` / `except`s in 92c34e2fa753d1c0a6076446f62ab77c8d08c75a tests:\nWe have utils for asserting RPC errors - this is cleaner and will print the log on a failure:\n```suggestion\n        assert_raises_rpc_error(-26, STACK_TOO_SHORT_ERROR, self.nodes[0].sendrawtransaction, check_template_verify_tx_empty_stack.serialize().hex())\n```",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684193839,684193839,test/functional/feature_checktemplateverify.py
glozow,2021-08-06 12:36:50,"Also, since you're doing some random script creation and anyonecanspends - you might find some helpful helpers in script_util.py ",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684200855,684200855,test/functional/feature_checktemplateverify.py
glozow,2021-08-06 13:08:22,"Note on all the `sendrawtransaction`s in 92c34e2fa753d1c0a6076446f62ab77c8d08c75a tests:\n\nTrying to efforts to isolate the OP_CTV logic as much as possible, setting `maxfeerate=0` is an unnecessary override. You're adding fees anyway (I tried removing them and it doesn't seem to make a difference).",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684221416,684221416,test/functional/feature_checktemplateverify.py
glozow,2021-08-06 13:12:02,"In 1d93783f712592d14a6fd792d0ab60f9a0f8e3ce  _Add StandardTemplateHash definition:_\n\nI expected to see some unit tests for this? e.g. in sighash_tests.cpp?",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684223877,684223877,src/script/interpreter.cpp
glozow,2021-08-06 13:29:23,"In 614d76f0d61c7ec85d223eb83b40b78ff07c5b23  _Add OP_CHECKTEMPLATEVERIFY Opcode as OP_NOP4_:\n\nSimilar reasoning, ""CHECKTEMPLATEVERIFY"" should correspond to `SCRIPT_VERIFY_CHECKTEMPLATEVERIFY`\n\nWill you be adding OP_CTV tests here (transaction_tests, tx_invalid.json, tx_valid.json) btw?",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684235896,684235896,src/test/transaction_tests.cpp
glozow,2021-08-06 14:05:28,"614d76f0d61c7ec85d223eb83b40b78ff07c5b23 fails script_tests because NOP4 is still discouraged at that point, so you may want to squash it with 04af84316aa43a8fdc58b36811c07ee796ce0e39",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684262675,684262675,src/test/data/script_tests.json
JeremyRubin,2021-08-07 21:27:06,prefer squash or put before?,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684679500,684679500,src/test/data/script_tests.json
JeremyRubin,2021-08-07 21:28:00,will remove ,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684679591,684679591,test/functional/feature_checktemplateverify.py
JeremyRubin,2021-08-07 21:28:32,hah i guess new since i wrote the tests 2 years ago?,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684679651,684679651,test/functional/feature_checktemplateverify.py
JeremyRubin,2021-08-07 21:28:59,will check; wrote tests ~2 years ago so might be some new stuff to use,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684679696,684679696,test/functional/feature_checktemplateverify.py
JeremyRubin,2021-08-07 21:29:47,"nack this wastes memory with packing, will update comment though",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684679774,684679774,src/script/interpreter.h
JeremyRubin,2021-08-07 21:30:17,will do -- that might also be a new thing.,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684679794,684679794,src/chainparams.cpp
glozow,2021-08-09 06:20:51,yeah that works too. could also just move the comment up,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684938546,684938546,src/script/interpreter.h
glozow,2021-08-09 06:21:36,yeah there's definitely lots of new stuff to use :),https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684939143,684939143,test/functional/feature_checktemplateverify.py
glozow,2021-08-09 06:21:53,squash,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684939224,684939224,src/test/data/script_tests.json
JeremyRubin,2021-09-02 02:37:17,"i'm adding a new commit which fully packs, reorders, and improves the docs here.",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r700700061,700700061,src/script/interpreter.h
JeremyRubin,2021-09-02 17:56:03,"If the flag is not  enabled, we currently do not treat it as a NOP4 (e.g., discouraged). Will patch this shortly.",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r701305405,701305405,src/script/interpreter.cpp
JeremyRubin,2021-09-02 18:00:42,referencing https://github.com/bitcoin/bitcoin/pull/6124/files it looks like it would be proper to discourage historically.,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r701308676,701308676,src/script/interpreter.cpp
glozow,2021-09-03 11:10:46,"Oh, I think I see what's causing your error in #22865. You don't need to fail on `SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS` now that you've repurposed this NOP.",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r701806626,701806626,src/script/interpreter.cpp
JeremyRubin,2021-09-03 15:56:23,"This is actually a new line I added -- it's required for correctness if this is to be merged/released before setting release params. https://github.com/bitcoin/bitcoin/pull/21702#discussion_r701305405\n\nHowever, it is not the reason there is a problem. It is also a problem later on where !=32 byte arguments are upgradable too.",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r702007973,702007973,src/script/interpreter.cpp
JeremyRubin,2021-09-10 19:13:16,"resolving as per https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-914679373.\n\nthis approach, although mildly (temporarily) problematic, yields safer results until CTV is active.",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r706412690,706412690,src/script/interpreter.cpp
JeremyRubin,2021-09-12 02:38:48,"added tx_invalid.json, tx_valid.json based on the python tests. @Christewart too since he asked for this a while back.",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r706731741,706731741,src/test/transaction_tests.cpp
JeremyRubin,2021-09-12 06:04:08,done,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r706767672,706767672,src/script/interpreter.cpp
jaybny,2021-10-11 13:01:53,is there a reason why we use bit 5 and not 3?  ,https://github.com/bitcoin/bitcoin/pull/21702#discussion_r726097280,726097280,src/chainparams.cpp
JeremyRubin,2021-10-11 17:17:07,"no reason, i just picked a bit that i didn't think would conflict with anything else.",https://github.com/bitcoin/bitcoin/pull/21702#discussion_r726391808,726391808,src/chainparams.cpp
