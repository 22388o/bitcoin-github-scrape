[
  {
    "sha": "544b117caa857786099adf779214a5390dddfa7f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDRiMTE3Y2FhODU3Nzg2MDk5YWRmNzc5MjE0YTUzOTBkZGRmYTdm",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2019-10-16T21:36:34Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-02T23:42:01Z"
      },
      "message": "Add StandardTemplateHash definition",
      "tree": {
        "sha": "6dc66ce31d30910afa40c4d8d84bf01aaa7eb275",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6dc66ce31d30910afa40c4d8d84bf01aaa7eb275"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/544b117caa857786099adf779214a5390dddfa7f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/544b117caa857786099adf779214a5390dddfa7f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/544b117caa857786099adf779214a5390dddfa7f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/544b117caa857786099adf779214a5390dddfa7f/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77e77e8544c7df5981da9795cda5f1aaa99f73af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77e77e8544c7df5981da9795cda5f1aaa99f73af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77e77e8544c7df5981da9795cda5f1aaa99f73af"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 64,
      "deletions": 0
    },
    "files": [
      {
        "sha": "caa2d9dea855a0d715a14cc7610778783e8a5ba9",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 0,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/544b117caa857786099adf779214a5390dddfa7f/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/544b117caa857786099adf779214a5390dddfa7f/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=544b117caa857786099adf779214a5390dddfa7f",
        "patch": "@@ -1402,6 +1402,18 @@ uint256 GetSpentAmountsSHA256(const std::vector<CTxOut>& outputs_spent)\n     CHashWriter ss(SER_GETHASH, 0);\n     for (const auto& txout : outputs_spent) {\n         ss << txout.nValue;\n+\n+    }\n+    return ss.GetSHA256();\n+}\n+\n+/** Compute the (single) SHA256 of the concatenation of all scriptSigs in a tx. */\n+template <class T>\n+uint256 GetScriptSigsSHA256(const T& txTo)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& in : txTo.vin) {\n+        ss << in.scriptSig;\n     }\n     return ss.GetSHA256();\n }\n@@ -1416,9 +1428,52 @@ uint256 GetSpentScriptsSHA256(const std::vector<CTxOut>& outputs_spent)\n     return ss.GetSHA256();\n }\n \n+/* Not Exported, just convenience */\n+template<typename TxType>\n+uint256 GetDefaultCheckTemplateVerifyHashWithScript(const TxType& tx, const uint256& outputs_hash, const uint256& sequences_hash,\n+                                const uint256& scriptSig_hash, const uint32_t input_index) {\n+    auto h = CHashWriter(SER_GETHASH, 0)\n+        << tx.nVersion\n+        << tx.nLockTime\n+        << scriptSig_hash\n+        << uint32_t(tx.vin.size())\n+        << sequences_hash\n+        << uint32_t(tx.vout.size())\n+        << outputs_hash\n+        << input_index;\n+    return h.GetSHA256();\n+}\n+\n+template<typename TxType>\n+uint256 GetDefaultCheckTemplateVerifyHashEmptyScript(const TxType& tx, const uint256& outputs_hash, const uint256& sequences_hash,\n+                                const uint32_t input_index) {\n+    auto h = CHashWriter(SER_GETHASH, 0)\n+        << tx.nVersion\n+        << tx.nLockTime\n+        << uint32_t(tx.vin.size())\n+        << sequences_hash\n+        << uint32_t(tx.vout.size())\n+        << outputs_hash\n+        << input_index;\n+    return h.GetSHA256();\n+}\n \n } // namespace\n \n+template<typename TxType>\n+uint256 GetDefaultCheckTemplateVerifyHash(const TxType& tx, uint32_t input_index) {\n+    return GetDefaultCheckTemplateVerifyHash(tx, GetOutputsSHA256(tx), GetSequencesSHA256(tx), input_index);\n+}\n+\n+template<typename TxType>\n+uint256 GetDefaultCheckTemplateVerifyHash(const TxType& tx, const uint256& outputs_hash, const uint256& sequences_hash,\n+                                const uint32_t input_index) {\n+    bool skip_scriptSigs = std::find_if(tx.vin.begin(), tx.vin.end(),\n+            [](const CTxIn& c) { return c.scriptSig != CScript(); }) == tx.vin.end();\n+    return skip_scriptSigs ? GetDefaultCheckTemplateVerifyHashEmptyScript(tx, outputs_hash, sequences_hash, input_index) :\n+        GetDefaultCheckTemplateVerifyHashWithScript(tx, outputs_hash, sequences_hash, GetScriptSigsSHA256(tx), input_index);\n+}\n+\n template <class T>\n void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent_outputs, bool force)\n {\n@@ -1584,8 +1639,10 @@ bool SignatureHashSchnorr(uint256& hash_out, const ScriptExecutionData& execdata\n \n     hash_out = ss.GetSHA256();\n     return true;\n+\n }\n \n+\n template <class T>\n uint256 SignatureHash(const CScript& scriptCode, const T& txTo, unsigned int nIn, int nHashType, const CAmount& amount, SigVersion sigversion, const PrecomputedTransactionData* cache)\n {"
      },
      {
        "sha": "a030de6e4937c73f4fdccbb2e4cecc20995c7b8a",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/544b117caa857786099adf779214a5390dddfa7f/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/544b117caa857786099adf779214a5390dddfa7f/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=544b117caa857786099adf779214a5390dddfa7f",
        "patch": "@@ -184,6 +184,13 @@ struct PrecomputedTransactionData\n     explicit PrecomputedTransactionData(const T& tx);\n };\n \n+/* Standard Template Hash Declarations */\n+template<typename TxType>\n+uint256 GetDefaultCheckTemplateVerifyHash(const TxType& tx, uint32_t input_index);\n+template<typename TxType>\n+uint256 GetDefaultCheckTemplateVerifyHash(const TxType& tx, const uint256& outputs_hash, const uint256& sequences_hash,\n+                                const uint32_t input_index);\n+\n enum class SigVersion\n {\n     BASE = 0,        //!< Bare scripts and BIP16 P2SH-wrapped redeemscripts"
      }
    ]
  },
  {
    "sha": "304fba6cc3ffbaec6868fb0787994836e9630c2c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDRmYmE2Y2MzZmZiYWVjNjg2OGZiMDc4Nzk5NDgzNmU5NjMwYzJj",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2019-10-16T21:37:18Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-02T23:42:01Z"
      },
      "message": "Add SignatureChecker method for checking DefaultCheckTemplateVerifyHash.",
      "tree": {
        "sha": "c2f7a88720b2cd31b6aec2245ce488ca7368e1b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c2f7a88720b2cd31b6aec2245ce488ca7368e1b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/304fba6cc3ffbaec6868fb0787994836e9630c2c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/304fba6cc3ffbaec6868fb0787994836e9630c2c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/304fba6cc3ffbaec6868fb0787994836e9630c2c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/304fba6cc3ffbaec6868fb0787994836e9630c2c/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "544b117caa857786099adf779214a5390dddfa7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/544b117caa857786099adf779214a5390dddfa7f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/544b117caa857786099adf779214a5390dddfa7f"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 15,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3d1ba10beaea10dcfd1bfba0b086be397005de80",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/304fba6cc3ffbaec6868fb0787994836e9630c2c/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/304fba6cc3ffbaec6868fb0787994836e9630c2c/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=304fba6cc3ffbaec6868fb0787994836e9630c2c",
        "patch": "@@ -1860,6 +1860,15 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckDefaultCheckTemplateVerifyHash(const std::vector<unsigned char>& hash) const\n+{\n+    // Should already be checked before calling...\n+    assert(hash.size() == 32);\n+    assert(txTo != nullptr);\n+    uint256 hash_tmpl = GetDefaultCheckTemplateVerifyHash(*txTo, nIn);\n+    return std::equal(hash_tmpl.begin(), hash_tmpl.end(), hash.data());\n+}\n // explicit instantiation\n template class GenericTransactionSignatureChecker<CTransaction>;\n template class GenericTransactionSignatureChecker<CMutableTransaction>;"
      },
      {
        "sha": "3f1bce7966a75c3b49e1fec110b5c0dd682265c6",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/304fba6cc3ffbaec6868fb0787994836e9630c2c/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/304fba6cc3ffbaec6868fb0787994836e9630c2c/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=304fba6cc3ffbaec6868fb0787994836e9630c2c",
        "patch": "@@ -265,6 +265,11 @@ class BaseSignatureChecker\n          return false;\n     }\n \n+    virtual bool CheckDefaultCheckTemplateVerifyHash(const std::vector<unsigned char>& hash) const\n+    {\n+        return false;\n+    }\n+\n     virtual ~BaseSignatureChecker() {}\n };\n \n@@ -301,6 +306,7 @@ class GenericTransactionSignatureChecker : public BaseSignatureChecker\n     bool CheckSchnorrSignature(Span<const unsigned char> sig, Span<const unsigned char> pubkey, SigVersion sigversion, const ScriptExecutionData& execdata, ScriptError* serror = nullptr) const override;\n     bool CheckLockTime(const CScriptNum& nLockTime) const override;\n     bool CheckSequence(const CScriptNum& nSequence) const override;\n+    bool CheckDefaultCheckTemplateVerifyHash(const std::vector<unsigned char>& hash) const override;\n };\n \n using TransactionSignatureChecker = GenericTransactionSignatureChecker<CTransaction>;"
      }
    ]
  },
  {
    "sha": "804b628a1388d87cec76b6217b5bd63ff2e2b63b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDRiNjI4YTEzODhkODdjZWM3NmI2MjE3YjViZDYzZmYyZTJiNjNi",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2019-10-16T21:48:23Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-02T23:42:01Z"
      },
      "message": "Add OP_CHECKTEMPLATEVERIFY Opcode as OP_NOP4\n\n[TESTS] modify script_tests.json to enable OP_NOP4 as OP_CHECKTEMPLATEVERIFY",
      "tree": {
        "sha": "0d443b5e2e7572bfc0b9d230f526eda7f768d758",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d443b5e2e7572bfc0b9d230f526eda7f768d758"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/804b628a1388d87cec76b6217b5bd63ff2e2b63b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/804b628a1388d87cec76b6217b5bd63ff2e2b63b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/804b628a1388d87cec76b6217b5bd63ff2e2b63b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/804b628a1388d87cec76b6217b5bd63ff2e2b63b/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "304fba6cc3ffbaec6868fb0787994836e9630c2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/304fba6cc3ffbaec6868fb0787994836e9630c2c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/304fba6cc3ffbaec6868fb0787994836e9630c2c"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 40,
      "deletions": 3
    },
    "files": [
      {
        "sha": "90a04648843927e9e88888fbd8e0e8c6871b20b6",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 1,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/804b628a1388d87cec76b6217b5bd63ff2e2b63b/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/804b628a1388d87cec76b6217b5bd63ff2e2b63b/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=804b628a1388d87cec76b6217b5bd63ff2e2b63b",
        "patch": "@@ -616,7 +616,36 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     break;\n                 }\n \n-                case OP_NOP1: case OP_NOP4: case OP_NOP5:\n+                case OP_CHECKTEMPLATEVERIFY:\n+                {\n+                    // if flags not enabled; treat as a NOP4\n+                    if (!(flags & SCRIPT_VERIFY_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH)) {\n+                        if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\n+                            return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\n+                        break;\n+                    }\n+\n+                    if (stack.size() < 1)\n+                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+\n+                    // If the argument was not 32 bytes, treat as OP_NOP4:\n+                    switch (stack.back().size()) {\n+                        case 32:\n+                            if (!checker.CheckDefaultCheckTemplateVerifyHash(stack.back())) {\n+                                return set_error(serror, SCRIPT_ERR_TEMPLATE_MISMATCH);\n+                            }\n+                            break;\n+                        default:\n+                            // future upgrade can add semantics for this opcode with different length args\n+                            // so discourage use when applicable\n+                            if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n+                                return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\n+                            }\n+                    }\n+                }\n+                break;\n+\n+                case OP_NOP1: case OP_NOP5:\n                 case OP_NOP6: case OP_NOP7: case OP_NOP8: case OP_NOP9: case OP_NOP10:\n                 {\n                     if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)"
      },
      {
        "sha": "3a5ade8c140aaca6a94ec4bf6f3b0436627cf928",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/804b628a1388d87cec76b6217b5bd63ff2e2b63b/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/804b628a1388d87cec76b6217b5bd63ff2e2b63b/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=804b628a1388d87cec76b6217b5bd63ff2e2b63b",
        "patch": "@@ -140,6 +140,10 @@ enum : uint32_t {\n     // Making unknown public key versions (in BIP 342 scripts) non-standard\n     SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE = (1U << 20),\n \n+    // support OP_CHECKTEMPLATEVERIFY for standard template\n+    //\n+    SCRIPT_VERIFY_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH = (1U << 21),\n+\n     // Constants to point to the highest flag in use. Add new flags above this line.\n     //\n     SCRIPT_VERIFY_END_MARKER"
      },
      {
        "sha": "ea119e9541b5e2afa55f3ae181bfdd5816ac5c4f",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/804b628a1388d87cec76b6217b5bd63ff2e2b63b/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/804b628a1388d87cec76b6217b5bd63ff2e2b63b/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=804b628a1388d87cec76b6217b5bd63ff2e2b63b",
        "patch": "@@ -190,7 +190,8 @@ enum opcodetype\n     OP_NOP2 = OP_CHECKLOCKTIMEVERIFY,\n     OP_CHECKSEQUENCEVERIFY = 0xb2,\n     OP_NOP3 = OP_CHECKSEQUENCEVERIFY,\n-    OP_NOP4 = 0xb3,\n+    OP_CHECKTEMPLATEVERIFY = 0xb3,\n+    OP_NOP4 = OP_CHECKTEMPLATEVERIFY,\n     OP_NOP5 = 0xb4,\n     OP_NOP6 = 0xb5,\n     OP_NOP7 = 0xb6,"
      },
      {
        "sha": "f33994d0b3b437db350c63e848bbd39a8a64af75",
        "filename": "src/script/script_error.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/804b628a1388d87cec76b6217b5bd63ff2e2b63b/src/script/script_error.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/804b628a1388d87cec76b6217b5bd63ff2e2b63b/src/script/script_error.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.cpp?ref=804b628a1388d87cec76b6217b5bd63ff2e2b63b",
        "patch": "@@ -25,6 +25,8 @@ std::string ScriptErrorString(const ScriptError serror)\n             return \"Script failed an OP_CHECKSIGVERIFY operation\";\n         case SCRIPT_ERR_NUMEQUALVERIFY:\n             return \"Script failed an OP_NUMEQUALVERIFY operation\";\n+        case SCRIPT_ERR_TEMPLATE_MISMATCH:\n+            return \"Script failed an OP_CHECKTEMPLATEVERIFY operation\";\n         case SCRIPT_ERR_SCRIPT_SIZE:\n             return \"Script is too big\";\n         case SCRIPT_ERR_PUSH_SIZE:"
      },
      {
        "sha": "74d7041533d24e0084d7f6a35405a054bb43466a",
        "filename": "src/script/script_error.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/804b628a1388d87cec76b6217b5bd63ff2e2b63b/src/script/script_error.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/804b628a1388d87cec76b6217b5bd63ff2e2b63b/src/script/script_error.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.h?ref=804b628a1388d87cec76b6217b5bd63ff2e2b63b",
        "patch": "@@ -29,6 +29,7 @@ typedef enum ScriptError_t\n     SCRIPT_ERR_CHECKMULTISIGVERIFY,\n     SCRIPT_ERR_CHECKSIGVERIFY,\n     SCRIPT_ERR_NUMEQUALVERIFY,\n+    SCRIPT_ERR_TEMPLATE_MISMATCH,\n \n     /* Logical/Format/Canonical errors */\n     SCRIPT_ERR_BAD_OPCODE,"
      },
      {
        "sha": "e3c55e7002c6a60f5b94112ddd3656c06de2220d",
        "filename": "src/test/data/script_tests.json",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/804b628a1388d87cec76b6217b5bd63ff2e2b63b/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/804b628a1388d87cec76b6217b5bd63ff2e2b63b/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=804b628a1388d87cec76b6217b5bd63ff2e2b63b",
        "patch": "@@ -875,7 +875,6 @@\n \n [\"Ensure 100% coverage of discouraged NOPS\"],\n [\"1\", \"NOP1\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"NOP4\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n [\"1\", \"NOP5\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n [\"1\", \"NOP6\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n [\"1\", \"NOP7\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],"
      },
      {
        "sha": "df2071d2be6732c16059081cc0d71a15e04c08f3",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/804b628a1388d87cec76b6217b5bd63ff2e2b63b/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/804b628a1388d87cec76b6217b5bd63ff2e2b63b/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=804b628a1388d87cec76b6217b5bd63ff2e2b63b",
        "patch": "@@ -63,6 +63,7 @@ static std::map<std::string, unsigned int> mapFlagNames = {\n     {std::string(\"DISCOURAGE_UPGRADABLE_PUBKEYTYPE\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE},\n     {std::string(\"DISCOURAGE_OP_SUCCESS\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS},\n     {std::string(\"DISCOURAGE_UPGRADABLE_TAPROOT_VERSION\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION},\n+    {std::string(\"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH\"), (unsigned int) SCRIPT_VERIFY_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH},\n };\n \n unsigned int ParseScriptFlags(std::string strFlags)"
      }
    ]
  },
  {
    "sha": "bfb111a80b2734ad5834b08cad011aca3c565aff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZmIxMTFhODBiMjczNGFkNTgzNGIwOGNhZDAxMWFjYTNjNTY1YWZm",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-02T23:35:28Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-03T01:05:20Z"
      },
      "message": "Change printing of NOP4 to CheckTemplateVerify (separate commit for ease of bisecting should downstream software expect to parse NOP4 this now fails)",
      "tree": {
        "sha": "ab7691cea5f6469cb0e3f7f5760dce248c1a8cc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab7691cea5f6469cb0e3f7f5760dce248c1a8cc8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bfb111a80b2734ad5834b08cad011aca3c565aff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfb111a80b2734ad5834b08cad011aca3c565aff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bfb111a80b2734ad5834b08cad011aca3c565aff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfb111a80b2734ad5834b08cad011aca3c565aff/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "804b628a1388d87cec76b6217b5bd63ff2e2b63b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/804b628a1388d87cec76b6217b5bd63ff2e2b63b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/804b628a1388d87cec76b6217b5bd63ff2e2b63b"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "6a4cd4889fad70561d6dfd5a46715c430fcc758c",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfb111a80b2734ad5834b08cad011aca3c565aff/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfb111a80b2734ad5834b08cad011aca3c565aff/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=bfb111a80b2734ad5834b08cad011aca3c565aff",
        "patch": "@@ -132,7 +132,7 @@ std::string GetOpName(opcodetype opcode)\n     case OP_NOP1                   : return \"OP_NOP1\";\n     case OP_CHECKLOCKTIMEVERIFY    : return \"OP_CHECKLOCKTIMEVERIFY\";\n     case OP_CHECKSEQUENCEVERIFY    : return \"OP_CHECKSEQUENCEVERIFY\";\n-    case OP_NOP4                   : return \"OP_NOP4\";\n+    case OP_CHECKTEMPLATEVERIFY    : return \"OP_CHECKTEMPLATEVERIFY\";\n     case OP_NOP5                   : return \"OP_NOP5\";\n     case OP_NOP6                   : return \"OP_NOP6\";\n     case OP_NOP7                   : return \"OP_NOP7\";"
      },
      {
        "sha": "92930e678b6d2d51595c808530ade750cbea5607",
        "filename": "src/test/data/script_tests.json",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfb111a80b2734ad5834b08cad011aca3c565aff/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfb111a80b2734ad5834b08cad011aca3c565aff/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=bfb111a80b2734ad5834b08cad011aca3c565aff",
        "patch": "@@ -244,8 +244,8 @@\n [\"'abcdefghijklmnopqrstuvwxyz'\", \"HASH256 0x4c 0x20 0xca139bc10c2f660da42666f72e89a225936fc60f193c161124a672050c434671 EQUAL\", \"P2SH,STRICTENC\", \"OK\"],\n \n \n-[\"1\",\"NOP1 CHECKLOCKTIMEVERIFY CHECKSEQUENCEVERIFY NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10 1 EQUAL\", \"P2SH,STRICTENC\", \"OK\"],\n-[\"'NOP_1_to_10' NOP1 CHECKLOCKTIMEVERIFY CHECKSEQUENCEVERIFY NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10\",\"'NOP_1_to_10' EQUAL\", \"P2SH,STRICTENC\", \"OK\"],\n+[\"1\",\"NOP1 CHECKLOCKTIMEVERIFY CHECKSEQUENCEVERIFY CHECKTEMPLATEVERIFY NOP5 NOP6 NOP7 NOP8 NOP9 NOP10 1 EQUAL\", \"P2SH,STRICTENC\", \"OK\"],\n+[\"'NOP_1_to_10' NOP1 CHECKLOCKTIMEVERIFY CHECKSEQUENCEVERIFY CHECKTEMPLATEVERIFY NOP5 NOP6 NOP7 NOP8 NOP9 NOP10\",\"'NOP_1_to_10' EQUAL\", \"P2SH,STRICTENC\", \"OK\"],\n \n [\"1\", \"NOP\", \"P2SH,STRICTENC,DISCOURAGE_UPGRADABLE_NOPS\", \"OK\", \"Discourage NOPx flag allows OP_NOP\"],\n \n@@ -456,7 +456,7 @@\n [\"NOP\", \"NOP1 1\", \"P2SH,STRICTENC\", \"OK\"],\n [\"NOP\", \"CHECKLOCKTIMEVERIFY 1\", \"P2SH,STRICTENC\", \"OK\"],\n [\"NOP\", \"CHECKSEQUENCEVERIFY 1\", \"P2SH,STRICTENC\", \"OK\"],\n-[\"NOP\", \"NOP4 1\", \"P2SH,STRICTENC\", \"OK\"],\n+[\"NOP\", \"CHECKTEMPLATEVERIFY 1\", \"P2SH,STRICTENC\", \"OK\"],\n [\"NOP\", \"NOP5 1\", \"P2SH,STRICTENC\", \"OK\"],\n [\"NOP\", \"NOP6 1\", \"P2SH,STRICTENC\", \"OK\"],\n [\"NOP\", \"NOP7 1\", \"P2SH,STRICTENC\", \"OK\"],\n@@ -870,8 +870,8 @@\n [\"2 2 LSHIFT\", \"8 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n [\"2 1 RSHIFT\", \"1 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n \n-[\"1\", \"NOP1 CHECKLOCKTIMEVERIFY CHECKSEQUENCEVERIFY NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10 2 EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"'NOP_1_to_10' NOP1 CHECKLOCKTIMEVERIFY CHECKSEQUENCEVERIFY NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10\",\"'NOP_1_to_11' EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"1\", \"NOP1 CHECKLOCKTIMEVERIFY CHECKSEQUENCEVERIFY CHECKTEMPLATEVERIFY NOP5 NOP6 NOP7 NOP8 NOP9 NOP10 2 EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"'NOP_1_to_10' NOP1 CHECKLOCKTIMEVERIFY CHECKSEQUENCEVERIFY CHECKTEMPLATEVERIFY NOP5 NOP6 NOP7 NOP8 NOP9 NOP10\",\"'NOP_1_to_11' EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n \n [\"Ensure 100% coverage of discouraged NOPS\"],\n [\"1\", \"NOP1\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],"
      }
    ]
  },
  {
    "sha": "1e81b2d2584d318ad18eca824e68b0c1569d6d16",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTgxYjJkMjU4NGQzMThhZDE4ZWNhODI0ZTY4YjBjMTU2OWQ2ZDE2",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2019-10-16T21:56:24Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-03T01:05:20Z"
      },
      "message": "Precompute the DefaultCheckTemplateVerifyHash",
      "tree": {
        "sha": "973d52ec1a9520316667f58fa85b15fab39dbd49",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/973d52ec1a9520316667f58fa85b15fab39dbd49"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e81b2d2584d318ad18eca824e68b0c1569d6d16",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e81b2d2584d318ad18eca824e68b0c1569d6d16",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e81b2d2584d318ad18eca824e68b0c1569d6d16",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e81b2d2584d318ad18eca824e68b0c1569d6d16/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bfb111a80b2734ad5834b08cad011aca3c565aff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfb111a80b2734ad5834b08cad011aca3c565aff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bfb111a80b2734ad5834b08cad011aca3c565aff"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 37,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b24c84a65cf1ab53bc58d91e7a9a1b54cac46671",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 1,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e81b2d2584d318ad18eca824e68b0c1569d6d16/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e81b2d2584d318ad18eca824e68b0c1569d6d16/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=1e81b2d2584d318ad18eca824e68b0c1569d6d16",
        "patch": "@@ -1514,6 +1514,8 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         m_spent_outputs_ready = true;\n     }\n \n+    // TODO: Improve this heuristic\n+    bool uses_bip119_ctv = true;\n     // Determine which precomputation-impacting features this transaction uses.\n     bool uses_bip143_segwit = force;\n     bool uses_bip341_taproot = force;\n@@ -1536,11 +1538,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.\n         m_prevouts_single_hash = GetPrevoutsSHA256(txTo);\n         m_sequences_single_hash = GetSequencesSHA256(txTo);\n         m_outputs_single_hash = GetOutputsSHA256(txTo);\n+\n+        bool skip_scriptSigs = std::find_if(txTo.vin.begin(), txTo.vin.end(),\n+                [](const CTxIn& c) { return c.scriptSig != CScript(); }) == txTo.vin.end();\n+        if (skip_scriptSigs) {\n+            // 0 hash used to signal if we should skip scriptSigs\n+            // when re-computing for different indexes.\n+            m_scriptSigs_single_hash = uint256{};\n+            // TODO: Cache midstate?\n+            m_standard_template_single_hash = GetDefaultCheckTemplateVerifyHashEmptyScript(txTo, m_outputs_single_hash, m_sequences_single_hash, 0);\n+        } else {\n+            m_scriptSigs_single_hash = GetScriptSigsSHA256(txTo);\n+            m_standard_template_single_hash = GetDefaultCheckTemplateVerifyHashWithScript(txTo, m_outputs_single_hash, m_sequences_single_hash, m_scriptSigs_single_hash, 0);\n+        }\n+        m_bip119_ctv_ready = true;\n     }\n     if (uses_bip143_segwit) {\n         hashPrevouts = SHA256Uint256(m_prevouts_single_hash);\n@@ -1894,6 +1910,21 @@ bool GenericTransactionSignatureChecker<T>::CheckDefaultCheckTemplateVerifyHash(\n {\n     // Should already be checked before calling...\n     assert(hash.size() == 32);\n+    if (txdata && txdata->m_bip119_ctv_ready) {\n+        // if nIn == 0, then we've already cached this and can directly check\n+        if (nIn == 0) {\n+            return std::equal(txdata->m_standard_template_single_hash.begin(), txdata->m_standard_template_single_hash.end(), hash.data());\n+        } else {\n+            // otherwise we still have *most* of the hash cached,\n+            // so just re-compute the correct one and compare\n+            assert(txTo != nullptr);\n+            uint256 hash_tmpl = txdata->m_scriptSigs_single_hash.IsNull() ?\n+                GetDefaultCheckTemplateVerifyHashEmptyScript(*txTo, txdata->m_outputs_single_hash, txdata->m_sequences_single_hash, nIn) :\n+                GetDefaultCheckTemplateVerifyHashWithScript(*txTo, txdata->m_outputs_single_hash, txdata->m_sequences_single_hash,\n+                        txdata->m_scriptSigs_single_hash, nIn);\n+            return std::equal(hash_tmpl.begin(), hash_tmpl.end(), hash.data());\n+        }\n+    }\n     assert(txTo != nullptr);\n     uint256 hash_tmpl = GetDefaultCheckTemplateVerifyHash(*txTo, nIn);\n     return std::equal(hash_tmpl.begin(), hash_tmpl.end(), hash.data());"
      },
      {
        "sha": "ec004b150bc7557806fbac12b8f8209b406d25b2",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e81b2d2584d318ad18eca824e68b0c1569d6d16/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e81b2d2584d318ad18eca824e68b0c1569d6d16/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=1e81b2d2584d318ad18eca824e68b0c1569d6d16",
        "patch": "@@ -160,9 +160,14 @@ struct PrecomputedTransactionData\n     uint256 m_outputs_single_hash;\n     uint256 m_spent_amounts_single_hash;\n     uint256 m_spent_scripts_single_hash;\n+    uint256 m_scriptSigs_single_hash;\n+    uint256 m_standard_template_single_hash;\n     //! Whether the 5 fields above are initialized.\n     bool m_bip341_taproot_ready = false;\n \n+    //! Whether the bip119 fields above are initialized.\n+    bool m_bip119_ctv_ready = false;\n+\n     // BIP143 precomputed data (double-SHA256).\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n     //! Whether the 3 fields above are initialized."
      }
    ]
  },
  {
    "sha": "d54d26a8a17a9918e05486703ffdf72225ef62eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTRkMjZhOGExN2E5OTE4ZTA1NDg2NzAzZmZkZjcyMjI1ZWY2MmVi",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-02T02:33:57Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-03T01:05:20Z"
      },
      "message": "Document and pack the fields in the PrecomputedData",
      "tree": {
        "sha": "d699166fb5487da9d80daffa7e57e2890e2ac1c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d699166fb5487da9d80daffa7e57e2890e2ac1c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d54d26a8a17a9918e05486703ffdf72225ef62eb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d54d26a8a17a9918e05486703ffdf72225ef62eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d54d26a8a17a9918e05486703ffdf72225ef62eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d54d26a8a17a9918e05486703ffdf72225ef62eb/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e81b2d2584d318ad18eca824e68b0c1569d6d16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e81b2d2584d318ad18eca824e68b0c1569d6d16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e81b2d2584d318ad18eca824e68b0c1569d6d16"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 14,
      "deletions": 5
    },
    "files": [
      {
        "sha": "881f5d6a432e320b870566304517df0139a70f01",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 14,
        "deletions": 5,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d54d26a8a17a9918e05486703ffdf72225ef62eb/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d54d26a8a17a9918e05486703ffdf72225ef62eb/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=d54d26a8a17a9918e05486703ffdf72225ef62eb",
        "patch": "@@ -153,27 +153,36 @@ bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned i\n \n struct PrecomputedTransactionData\n {\n+    // Order of fields is packed below (uint256 is 32 bytes, vector is 24 bytes\n+    // (3 ptrs), ready flags (1 byte each).\n+\n     // BIP341 precomputed data.\n     // These are single-SHA256, see https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki#cite_note-15.\n     uint256 m_prevouts_single_hash;\n     uint256 m_sequences_single_hash;\n     uint256 m_outputs_single_hash;\n     uint256 m_spent_amounts_single_hash;\n     uint256 m_spent_scripts_single_hash;\n+\n+    // BIP119 precomputed data (single SHA256).\n     uint256 m_scriptSigs_single_hash;\n     uint256 m_standard_template_single_hash;\n-    //! Whether the 5 fields above are initialized.\n+\n+    // BIP143 precomputed data (double-SHA256).\n+    uint256 hashPrevouts, hashSequence, hashOutputs;\n+\n+    // BIP341 cached outputs.\n+    std::vector<CTxOut> m_spent_outputs;\n+\n+    //! Whether the bip341 fields above are initialized.\n     bool m_bip341_taproot_ready = false;\n \n     //! Whether the bip119 fields above are initialized.\n     bool m_bip119_ctv_ready = false;\n \n-    // BIP143 precomputed data (double-SHA256).\n-    uint256 hashPrevouts, hashSequence, hashOutputs;\n-    //! Whether the 3 fields above are initialized.\n+    //! Whether the bip143 fields above are initialized.\n     bool m_bip143_segwit_ready = false;\n \n-    std::vector<CTxOut> m_spent_outputs;\n     //! Whether m_spent_outputs is initialized.\n     bool m_spent_outputs_ready = false;\n "
      }
    ]
  },
  {
    "sha": "c89ba925f1936e0f7da9354329c670f3e6478e6c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODliYTkyNWYxOTM2ZTBmN2RhOTM1NDMyOWM2NzBmM2U2NDc4ZTZj",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-07-13T16:34:06Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-03T01:05:20Z"
      },
      "message": "Use HandleMissingData for unexpected missing precomputed data",
      "tree": {
        "sha": "d16cf0b1f42463a92bdc15e9aeebda18a235a22e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d16cf0b1f42463a92bdc15e9aeebda18a235a22e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c89ba925f1936e0f7da9354329c670f3e6478e6c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c89ba925f1936e0f7da9354329c670f3e6478e6c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c89ba925f1936e0f7da9354329c670f3e6478e6c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c89ba925f1936e0f7da9354329c670f3e6478e6c/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d54d26a8a17a9918e05486703ffdf72225ef62eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d54d26a8a17a9918e05486703ffdf72225ef62eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d54d26a8a17a9918e05486703ffdf72225ef62eb"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 4,
      "deletions": 12
    },
    "files": [
      {
        "sha": "ef41a0287e50318278ca53ede467f4e15b699b25",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 10,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c89ba925f1936e0f7da9354329c670f3e6478e6c/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c89ba925f1936e0f7da9354329c670f3e6478e6c/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=c89ba925f1936e0f7da9354329c670f3e6478e6c",
        "patch": "@@ -1490,13 +1490,8 @@ uint256 GetDefaultCheckTemplateVerifyHashEmptyScript(const TxType& tx, const uin\n } // namespace\n \n template<typename TxType>\n-uint256 GetDefaultCheckTemplateVerifyHash(const TxType& tx, uint32_t input_index) {\n-    return GetDefaultCheckTemplateVerifyHash(tx, GetOutputsSHA256(tx), GetSequencesSHA256(tx), input_index);\n-}\n-\n-template<typename TxType>\n-uint256 GetDefaultCheckTemplateVerifyHash(const TxType& tx, const uint256& outputs_hash, const uint256& sequences_hash,\n-                                const uint32_t input_index) {\n+uint256 GetDefaultCheckTemplateVerifyHash(const TxType& tx, const uint256& outputs_hash,\n+                                          const uint256& sequences_hash, const uint32_t input_index) {\n     bool skip_scriptSigs = std::find_if(tx.vin.begin(), tx.vin.end(),\n             [](const CTxIn& c) { return c.scriptSig != CScript(); }) == tx.vin.end();\n     return skip_scriptSigs ? GetDefaultCheckTemplateVerifyHashEmptyScript(tx, outputs_hash, sequences_hash, input_index) :\n@@ -1924,10 +1919,9 @@ bool GenericTransactionSignatureChecker<T>::CheckDefaultCheckTemplateVerifyHash(\n                         txdata->m_scriptSigs_single_hash, nIn);\n             return std::equal(hash_tmpl.begin(), hash_tmpl.end(), hash.data());\n         }\n+    } else {\n+        return HandleMissingData(m_mdb);\n     }\n-    assert(txTo != nullptr);\n-    uint256 hash_tmpl = GetDefaultCheckTemplateVerifyHash(*txTo, nIn);\n-    return std::equal(hash_tmpl.begin(), hash_tmpl.end(), hash.data());\n }\n // explicit instantiation\n template class GenericTransactionSignatureChecker<CTransaction>;"
      },
      {
        "sha": "3b23aee703100211525a39c4377e696a55d69426",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c89ba925f1936e0f7da9354329c670f3e6478e6c/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c89ba925f1936e0f7da9354329c670f3e6478e6c/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=c89ba925f1936e0f7da9354329c670f3e6478e6c",
        "patch": "@@ -204,8 +204,6 @@ struct PrecomputedTransactionData\n \n /* Standard Template Hash Declarations */\n template<typename TxType>\n-uint256 GetDefaultCheckTemplateVerifyHash(const TxType& tx, uint32_t input_index);\n-template<typename TxType>\n uint256 GetDefaultCheckTemplateVerifyHash(const TxType& tx, const uint256& outputs_hash, const uint256& sequences_hash,\n                                 const uint32_t input_index);\n "
      }
    ]
  },
  {
    "sha": "29a13c672e4e80b95caa6ac5290094d4f136a66d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOWExM2M2NzJlNGU4MGI5NWNhYTZhYzUyOTAwOTRkNGYxMzZhNjZk",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2019-10-16T22:04:09Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-03T01:05:20Z"
      },
      "message": "Make Bare OP_CHECKTEMPLATEVERIFY basic transactions standard",
      "tree": {
        "sha": "99701342d196ea07cf1f39bbb2e31d6ee146d6e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/99701342d196ea07cf1f39bbb2e31d6ee146d6e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29a13c672e4e80b95caa6ac5290094d4f136a66d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29a13c672e4e80b95caa6ac5290094d4f136a66d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29a13c672e4e80b95caa6ac5290094d4f136a66d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29a13c672e4e80b95caa6ac5290094d4f136a66d/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c89ba925f1936e0f7da9354329c670f3e6478e6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c89ba925f1936e0f7da9354329c670f3e6478e6c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c89ba925f1936e0f7da9354329c670f3e6478e6c"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 27,
      "deletions": 1
    },
    "files": [
      {
        "sha": "af3ce9cb7b7e4c758255014eaaf3978a5f22012b",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29a13c672e4e80b95caa6ac5290094d4f136a66d/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29a13c672e4e80b95caa6ac5290094d4f136a66d/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=29a13c672e4e80b95caa6ac5290094d4f136a66d",
        "patch": "@@ -187,6 +187,8 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs,\n         } else if (whichType == TxoutType::WITNESS_V1_TAPROOT) {\n             // Don't allow Taproot spends unless Taproot is active.\n             if (!taproot_active) return false;\n+        } else if (whichType == TxoutType::TX_BARE_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH) {\n+            if (tx.vin[i].scriptSig.size() != 0) return false;\n         }\n     }\n "
      },
      {
        "sha": "dfbdec100fa0c985085aa5d4f95613c59bc7dd22",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29a13c672e4e80b95caa6ac5290094d4f136a66d/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29a13c672e4e80b95caa6ac5290094d4f136a66d/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=29a13c672e4e80b95caa6ac5290094d4f136a66d",
        "patch": "@@ -76,7 +76,8 @@ static constexpr unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VE\n                                                              SCRIPT_VERIFY_TAPROOT |\n                                                              SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION |\n                                                              SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS |\n-                                                             SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE;\n+                                                             SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE |\n+                                                             SCRIPT_VERIFY_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH;\n \n /** For convenience, standard but not mandatory verify flags. */\n static constexpr unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;"
      },
      {
        "sha": "78b62688850d198cc4478a95ff1b2b3daf495cd8",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29a13c672e4e80b95caa6ac5290094d4f136a66d/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29a13c672e4e80b95caa6ac5290094d4f136a66d/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=29a13c672e4e80b95caa6ac5290094d4f136a66d",
        "patch": "@@ -198,6 +198,13 @@ unsigned int CScript::GetSigOpCount(const CScript& scriptSig) const\n     return subscript.GetSigOpCount(true);\n }\n \n+bool CScript::IsPayToBareDefaultCheckTemplateVerifyHash() const\n+{\n+    // Extra-fast test for pay-to-bare-default-check-template-verify-hash CScripts:\n+    return (this->size() == 34 &&\n+            (*this)[0] == 0x20 &&\n+            (*this)[33] == OP_CHECKTEMPLATEVERIFY);\n+}\n bool CScript::IsPayToScriptHash() const\n {\n     // Extra-fast test for pay-to-script-hash CScripts:"
      },
      {
        "sha": "9423a8cfb36748babe0d5193c228fe6b983d69d7",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29a13c672e4e80b95caa6ac5290094d4f136a66d/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29a13c672e4e80b95caa6ac5290094d4f136a66d/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=29a13c672e4e80b95caa6ac5290094d4f136a66d",
        "patch": "@@ -525,6 +525,7 @@ class CScript : public CScriptBase\n      */\n     unsigned int GetSigOpCount(const CScript& scriptSig) const;\n \n+    bool IsPayToBareDefaultCheckTemplateVerifyHash() const;\n     bool IsPayToScriptHash() const;\n     bool IsPayToWitnessScriptHash() const;\n     bool IsWitnessProgram(int& version, std::vector<unsigned char>& program) const;"
      },
      {
        "sha": "edd228799e20d9802afb558411b8d558f5afd5ca",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29a13c672e4e80b95caa6ac5290094d4f136a66d/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29a13c672e4e80b95caa6ac5290094d4f136a66d/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=29a13c672e4e80b95caa6ac5290094d4f136a66d",
        "patch": "@@ -242,6 +242,7 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n     case TxoutType::NONSTANDARD:\n     case TxoutType::NULL_DATA:\n     case TxoutType::WITNESS_UNKNOWN:\n+    case TxoutType::TX_BARE_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH:\n         return false;\n     case TxoutType::PUBKEY:\n         if (!CreateSig(creator, sigdata, provider, sig, CPubKey(vSolutions[0]), scriptPubKey, sigversion)) return false;"
      },
      {
        "sha": "3e176078b6b847081e73f8faad377b54d7353f55",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29a13c672e4e80b95caa6ac5290094d4f136a66d/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29a13c672e4e80b95caa6ac5290094d4f136a66d/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=29a13c672e4e80b95caa6ac5290094d4f136a66d",
        "patch": "@@ -58,6 +58,7 @@ std::string GetTxnOutputType(TxoutType t)\n     case TxoutType::WITNESS_V0_KEYHASH: return \"witness_v0_keyhash\";\n     case TxoutType::WITNESS_V0_SCRIPTHASH: return \"witness_v0_scripthash\";\n     case TxoutType::WITNESS_V1_TAPROOT: return \"witness_v1_taproot\";\n+    case TxoutType::TX_BARE_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH: return \"bare_default_ctv_hash\";\n     case TxoutType::WITNESS_UNKNOWN: return \"witness_unknown\";\n     } // no default case, so the compiler can warn about missing cases\n     assert(false);\n@@ -154,6 +155,10 @@ TxoutType Solver(const CScript& scriptPubKey, std::vector<std::vector<unsigned c\n         return TxoutType::SCRIPTHASH;\n     }\n \n+    if (scriptPubKey.IsPayToBareDefaultCheckTemplateVerifyHash()) {\n+        return TxoutType::TX_BARE_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH;\n+    }\n+\n     int witnessversion;\n     std::vector<unsigned char> witnessprogram;\n     if (scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram)) {\n@@ -260,6 +265,7 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n     }\n     case TxoutType::MULTISIG:\n     case TxoutType::NULL_DATA:\n+    case TxoutType::TX_BARE_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH:\n     case TxoutType::NONSTANDARD:\n         return false;\n     } // no default case, so the compiler can warn about missing cases"
      },
      {
        "sha": "9bf4ab6d5d49e5ca79f3735f190cbcd9415b4cdb",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29a13c672e4e80b95caa6ac5290094d4f136a66d/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29a13c672e4e80b95caa6ac5290094d4f136a66d/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=29a13c672e4e80b95caa6ac5290094d4f136a66d",
        "patch": "@@ -67,6 +67,7 @@ enum class TxoutType {\n     WITNESS_V0_SCRIPTHASH,\n     WITNESS_V0_KEYHASH,\n     WITNESS_V1_TAPROOT,\n+    TX_BARE_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH,\n     WITNESS_UNKNOWN, //!< Only for Witness versions not already defined above\n };\n "
      },
      {
        "sha": "838c1a09c26497f45b2904ac6a977c77548634c1",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29a13c672e4e80b95caa6ac5290094d4f136a66d/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29a13c672e4e80b95caa6ac5290094d4f136a66d/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=29a13c672e4e80b95caa6ac5290094d4f136a66d",
        "patch": "@@ -936,6 +936,8 @@ static std::string RecurseImportData(const CScript& script, ImportData& import_d\n     case TxoutType::WITNESS_UNKNOWN:\n     case TxoutType::WITNESS_V1_TAPROOT:\n         return \"unrecognized script\";\n+    case TxoutType::TX_BARE_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH:\n+        return \"bare default CheckTemplateVerify hash\";\n     } // no default case, so the compiler can warn about missing cases\n     CHECK_NONFATAL(false);\n }"
      },
      {
        "sha": "2d25a4cd17d75a6091a7cde46aa0f25bb629ea7b",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29a13c672e4e80b95caa6ac5290094d4f136a66d/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29a13c672e4e80b95caa6ac5290094d4f136a66d/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=29a13c672e4e80b95caa6ac5290094d4f136a66d",
        "patch": "@@ -201,6 +201,11 @@ IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& s\n         }\n         break;\n     }\n+    case TxoutType::TX_BARE_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH:\n+    {\n+        ret = IsMineResult::NO;\n+        break;\n+    }\n     } // no default case, so the compiler can warn about missing cases\n \n     if (ret == IsMineResult::NO && keystore.HaveWatchOnly(scriptPubKey)) {"
      }
    ]
  },
  {
    "sha": "ea581c528f033588c293e4186cdb92ddf7b94823",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTU4MWM1MjhmMDMzNTg4YzI5M2U0MTg2Y2RiOTJkZGY3Yjk0ODIz",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2019-10-16T22:07:50Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-03T05:31:04Z"
      },
      "message": "OP_CHECKTEMPLATEVERIFY Deployment parameters",
      "tree": {
        "sha": "bfb124d6e2f9bd1f9b6540dddebaab9e313c9a19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bfb124d6e2f9bd1f9b6540dddebaab9e313c9a19"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea581c528f033588c293e4186cdb92ddf7b94823",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea581c528f033588c293e4186cdb92ddf7b94823",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea581c528f033588c293e4186cdb92ddf7b94823",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea581c528f033588c293e4186cdb92ddf7b94823/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29a13c672e4e80b95caa6ac5290094d4f136a66d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29a13c672e4e80b95caa6ac5290094d4f136a66d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29a13c672e4e80b95caa6ac5290094d4f136a66d"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 48,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a5bc90ac08f543d0dd9d2efd47db5a8f3ed14e06",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea581c528f033588c293e4186cdb92ddf7b94823/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea581c528f033588c293e4186cdb92ddf7b94823/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=ea581c528f033588c293e4186cdb92ddf7b94823",
        "patch": "@@ -91,6 +91,13 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1628640000; // August 11th, 2021\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height = 709632; // Approximately November 12th, 2021\n \n+        // Deployment of CTV (BIP 119)\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].bit = 5;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].nStartTime = Consensus::BIP9Deployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].min_activation_height = 0;\n+\n+\n         consensus.nMinimumChainWork = uint256S(\"0x00000000000000000000000000000000000000001fa4663bbbe19f82de910280\");\n         consensus.defaultAssumeValid = uint256S(\"0x00000000000000000008a89e854d57e5667df88f1cdef6fde2fbca1de5b639ad\"); // 691719\n \n@@ -210,6 +217,12 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1628640000; // August 11th, 2021\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height = 0; // No activation delay\n \n+        // Deployment of CTV (BIP 119)\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].bit = 5;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].nStartTime = Consensus::BIP9Deployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].min_activation_height = 0;\n+\n         consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000000005180c3bd8290da33a1a\");\n         consensus.defaultAssumeValid = uint256S(\"0x0000000000004ae2f3896ca8ecd41c460a35bf6184e145d91558cece1c688a76\"); // 2010000\n \n@@ -347,6 +360,12 @@ class SigNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height = 0; // No activation delay\n \n+        // Deployment of CTV (BIP 119)\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].bit = 5;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].nStartTime = Consensus::BIP9Deployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].min_activation_height = 0;\n+\n         // message start is defined as the first 4 bytes of the sha256d of the block script\n         CHashWriter h(SER_DISK, 0);\n         h << consensus.signet_challenge;\n@@ -415,6 +434,12 @@ class CRegTestParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height = 0; // No activation delay\n \n+        // Deployment of CTV (BIP 119)\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].bit = 5;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].nStartTime = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].min_activation_height = 0;\n+\n         consensus.nMinimumChainWork = uint256{};\n         consensus.defaultAssumeValid = uint256{};\n "
      },
      {
        "sha": "a32e04bb42e99021b5d973531d12915ce5468ef0",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea581c528f033588c293e4186cdb92ddf7b94823/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea581c528f033588c293e4186cdb92ddf7b94823/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=ea581c528f033588c293e4186cdb92ddf7b94823",
        "patch": "@@ -28,6 +28,7 @@ constexpr bool ValidDeployment(BuriedDeployment dep) { return dep <= DEPLOYMENT_\n enum DeploymentPos : uint16_t {\n     DEPLOYMENT_TESTDUMMY,\n     DEPLOYMENT_TAPROOT, // Deployment of Schnorr/Taproot (BIPs 340-342)\n+    DEPLOYMENT_CHECKTEMPLATEVERIFY, // Deployment of CTV (BIP 119)\n     // NOTE: Also add new deployments to VersionBitsDeploymentInfo in deploymentinfo.cpp\n     MAX_VERSION_BITS_DEPLOYMENTS\n };"
      },
      {
        "sha": "2d4cd76bfa48f49f90415e75ad0089b3e11d633e",
        "filename": "src/deploymentinfo.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea581c528f033588c293e4186cdb92ddf7b94823/src/deploymentinfo.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea581c528f033588c293e4186cdb92ddf7b94823/src/deploymentinfo.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentinfo.cpp?ref=ea581c528f033588c293e4186cdb92ddf7b94823",
        "patch": "@@ -15,6 +15,10 @@ const struct VBDeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_B\n         /*.name =*/ \"taproot\",\n         /*.gbt_force =*/ true,\n     },\n+    {\n+        /*.name =*/ \"checktemplateverify\",\n+        /*.gbt_force =*/ true,\n+    },\n };\n \n std::string DeploymentName(Consensus::BuriedDeployment dep)"
      },
      {
        "sha": "899a0491ea931e978f5c577c64da595610b63b06",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea581c528f033588c293e4186cdb92ddf7b94823/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea581c528f033588c293e4186cdb92ddf7b94823/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=ea581c528f033588c293e4186cdb92ddf7b94823",
        "patch": "@@ -1519,6 +1519,7 @@ RPCHelpMan getblockchaininfo()\n     SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_SEGWIT);\n     SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n     SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_TAPROOT);\n+    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY);\n     obj.pushKV(\"softforks\", softforks);\n \n     obj.pushKV(\"warnings\", GetWarnings(false).original);"
      },
      {
        "sha": "ee097b9d92724f6aee9821f24712cbdd372eefba",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea581c528f033588c293e4186cdb92ddf7b94823/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea581c528f033588c293e4186cdb92ddf7b94823/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ea581c528f033588c293e4186cdb92ddf7b94823",
        "patch": "@@ -1633,6 +1633,11 @@ static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consens\n         flags |= SCRIPT_VERIFY_NULLDUMMY;\n     }\n \n+    // Enforce CheckTemplateVerify (BIP119)\n+    if (DeploymentActiveAt(*pindex, consensusparams, Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY)) {\n+        flags |= SCRIPT_VERIFY_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH;\n+    }\n+\n     return flags;\n }\n "
      },
      {
        "sha": "63445fc2c94f9aa2f6a1459cc44c7462554b09ed",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea581c528f033588c293e4186cdb92ddf7b94823/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea581c528f033588c293e4186cdb92ddf7b94823/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=ea581c528f033588c293e4186cdb92ddf7b94823",
        "patch": "@@ -177,6 +177,18 @@ def _test_getblockchaininfo(self):\n                 },\n                 'height': 0,\n                 'active': True\n+            },\n+            'checktemplateverify': {\n+                'type': 'bip9',\n+                'bip9': {\n+                    'status': 'active',\n+                    'start_time': -1,\n+                    'timeout': 9223372036854775807,\n+                    'since': 0,\n+                    'min_activation_height': 0\n+                    },\n+                'height': 0,\n+                'active': True\n             }\n         })\n "
      }
    ]
  },
  {
    "sha": "26da2cd2270cd3eefda1d1fd3e842d037d81a460",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNmRhMmNkMjI3MGNkM2VlZmRhMWQxZmQzZTg0MmQwMzdkODFhNDYw",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2019-10-16T22:23:50Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-12T02:36:49Z"
      },
      "message": "[TESTS] Add OP_CHECKTEMPLATEVERIFY functional tests",
      "tree": {
        "sha": "e53fd3c0c707ae9b4e15b38d0ff7fce146c2101f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e53fd3c0c707ae9b4e15b38d0ff7fce146c2101f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26da2cd2270cd3eefda1d1fd3e842d037d81a460",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26da2cd2270cd3eefda1d1fd3e842d037d81a460",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26da2cd2270cd3eefda1d1fd3e842d037d81a460",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26da2cd2270cd3eefda1d1fd3e842d037d81a460/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea581c528f033588c293e4186cdb92ddf7b94823",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea581c528f033588c293e4186cdb92ddf7b94823",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea581c528f033588c293e4186cdb92ddf7b94823"
      }
    ],
    "stats": {
      "total": 486,
      "additions": 484,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d05ad4662e910c9eba8e9d6b69284577ef46e22b",
        "filename": "test/functional/feature_checktemplateverify.py",
        "status": "added",
        "additions": 468,
        "deletions": 0,
        "changes": 468,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26da2cd2270cd3eefda1d1fd3e842d037d81a460/test/functional/feature_checktemplateverify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26da2cd2270cd3eefda1d1fd3e842d037d81a460/test/functional/feature_checktemplateverify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_checktemplateverify.py?ref=26da2cd2270cd3eefda1d1fd3e842d037d81a460",
        "patch": "@@ -0,0 +1,468 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_DEPTH, OP_ENDIF, OP_IF, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_DROP, taproot_construct\n+from test_framework.script_util import script_to_p2sh_script\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return script_to_p2sh_script(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript([template_hash_for_outputs(outputs, nIn, nVin, vin_override), OP_CHECKTEMPLATEVERIFY])\n+    return outputs, script\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, wallet, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    output = wallet.get_utxo(txid=txid)\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": output[\"txid\"], \"vout\": output[\"vout\"]}], outputs={random_address: Decimal(amount_sats) / COIN})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    wallet.sign_tx(tx)\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        self.log.debug(self.height)\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height+1))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        reason = self.nodes[0].submitblock(block)\n+        if reason:\n+            self.log.debug(\"Reject Reason: [%s]\", reason)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - Taproot OP_CTV\n+        #   - SegWit OP_CTV\n+        #   - SegWit OP_CTV wrong size on stack\n+        #     - fails policy\n+        #     - passes consensus\n+        #   - SegWit OP_CTV no argument in stack from program\n+        #     - fails policy and consensus with empty stack\n+        #     - passes consensus and policy when argument is the correct hash\n+        #     - passes consensus when argument is non 32 bytes\n+        #     - fails policy when argument is non 32 bytes\n+        #   - P2SH OP_CTV (impossible to spend w/o hash cycle!)\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+        wallet = MiniWallet(self.nodes[0], mode=MiniWalletMode.RAW_P2PK)\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 115\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        # Drop the last 100 as they're unspendable!\n+        coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in wallet.generate(BLOCKS)[:-100]]\n+        get_coinbase = lambda: coinbase_txids.pop()\n+\n+        self.log.info(\"Creating setup transactions\")\n+\n+        self.log.info(\"Creating script for 10 random outputs\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount_sats = (sum(out.nValue for out in outputs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a Taproot script\")\n+        tapkey = ECKey()\n+        b = bytes(b\"Deterministic Privkey\")\n+        while not tapkey.is_valid:\n+            b = sha256(b)\n+            tapkey.set(b, False)\n+        xonly, negated = compute_xonly_pubkey(tapkey.get_bytes())\n+        taproot = taproot_construct(xonly, [(\"only-path\", script, 0xc0)])\n+        taproot_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                taproot.scriptPubKey, amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a segwit script\")\n+        segwit_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([0, sha256(script)]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an non-32 byte stack segwit script\")\n+        segwit_ctv_funding_tx_wrongsize_stack = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([0, sha256(CScript([OP_TRUE, OP_CHECKTEMPLATEVERIFY]))]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an empty stack segwit script\")\n+        # allows either calling with empty witness stack or with a 32 byte hash (cleanstack rule)\n+        empty_stack_script = CScript([OP_CHECKTEMPLATEVERIFY, OP_DEPTH, OP_IF, OP_DROP, OP_ENDIF, OP_TRUE])\n+        segwit_ctv_funding_tx_empty_stack = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([0, sha256(empty_stack_script)]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a p2sh script (impossible to spend)\")\n+        p2sh_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                script_to_p2sh_script(script), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating script for tree size depth 4\")\n+        # Small Tree for test speed, can be set to a large value like 16 (i.e., 65K txns)\n+        TREE_SIZE = 4\n+        congestion_tree_txo = random_secure_tree(TREE_SIZE)\n+\n+        self.log.info(\"Creating funding txn for tree size depth 4\")\n+        bare_ctv_tree_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                congestion_tree_txo[0][0].scriptPubKey, amount_sats=congestion_tree_txo[0][0].nValue)\n+\n+        self.log.info(\"Creating script for spend at position 2\")\n+        outputs_position_2, script_position_2 = random_real_outputs_and_script(10, 1, 2)\n+        # Add some fee satoshis\n+        amount_position_2 = (sum(out.nValue for out in outputs_position_2)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 2\")\n+        bare_ctv_position_2_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                script_position_2, amount_sats=amount_position_2)\n+\n+        self.log.info(\"Creating script for spend at position 1 with 2 non-null scriptsigs\")\n+        outputs_specific_scriptSigs, script_specific_scriptSigs = random_real_outputs_and_script(10, 0, 2,\n+                [CTxIn(scriptSig=CScript([OP_TRUE])), CTxIn(scriptSig=CScript([OP_FALSE]))])\n+        # Add some fee satoshis\n+        amount_specific_scriptSigs = (sum(out.nValue for out in outputs_specific_scriptSigs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 1 with 2 non-null scriptsigs\")\n+        bare_ctv_specific_scriptSigs_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                script_specific_scriptSigs, amount_sats=amount_specific_scriptSigs)\n+\n+        self.log.info(\"Creating script for spend at position 2 with 2 non-null scriptsigs\")\n+        outputs_specific_scriptSigs_position_2, script_specific_scriptSigs_position_2 = \\\n+                random_real_outputs_and_script(10, 1, 2, [CTxIn(scriptSig=CScript([OP_TRUE])), CTxIn(scriptSig=CScript([OP_FALSE]))])\n+        # Add some fee satoshis\n+        amount_specific_scriptSigs_position_2 = (sum(out.nValue for out in outputs_specific_scriptSigs_position_2)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 2 with 2 non-null scriptsigs\")\n+        bare_ctv_specific_scriptSigs_position_2_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                script_specific_scriptSigs_position_2, amount_sats=amount_specific_scriptSigs_position_2)\n+\n+        self.log.info(\"Creating funding txns for some anyone can sepnd outputs\")\n+        anyone_can_spend_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([OP_TRUE]), amount_sats=amount_sats)\n+        bare_anyone_can_spend_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([OP_TRUE]), amount_sats=amount_sats)\n+\n+\n+        funding_txs = [  taproot_ctv_funding_tx\n+                       , segwit_ctv_funding_tx\n+                       , segwit_ctv_funding_tx_wrongsize_stack\n+                       , segwit_ctv_funding_tx_empty_stack\n+                       , p2sh_ctv_funding_tx\n+                       , anyone_can_spend_funding_tx\n+                       , bare_ctv_tree_funding_tx\n+                       , bare_ctv_position_2_funding_tx\n+                       , bare_anyone_can_spend_funding_tx\n+                       , bare_ctv_specific_scriptSigs_funding_tx\n+                       , bare_ctv_specific_scriptSigs_position_2_funding_tx]\n+\n+        self.log.info(\"Obtaining TXIDs\")\n+        taproot_ctv_outpoint,\\\n+        segwit_ctv_outpoint,\\\n+        segwit_ctv_wrongsize_stack_outpoint,\\\n+        segwit_ctv_empty_stack_outpoint,\\\n+        p2sh_ctv_outpoint,\\\n+        anyone_can_spend_outpoint,\\\n+        bare_ctv_tree_outpoint,\\\n+        bare_ctv_position_2,\\\n+        bare_anyone_can_spend_outpoint,\\\n+        bare_ctv_specific_scriptSigs_outpoint,\\\n+        bare_ctv_specific_scriptSigs_position_2_outpoint\\\n+        = [COutPoint(int(tx.rehash(),16), 0) for tx in funding_txs]\n+\n+        self.log.info(\"Funding all outputs\")\n+        self.add_block(funding_txs)\n+\n+        self.log.info(\"Testing Taproot OP_CHECKTEMPLATEVERIFY spend\")\n+        # Test sendrawtransaction\n+        taproot_check_template_verify_tx = CTransaction()\n+        taproot_check_template_verify_tx.nVersion = 2\n+        taproot_check_template_verify_tx.vin = [CTxIn(taproot_ctv_outpoint)]\n+        taproot_check_template_verify_tx.vout = outputs\n+        taproot_check_template_verify_tx.wit.vtxinwit +=  [CTxInWitness()]\n+        taproot_check_template_verify_tx.wit.vtxinwit[0].scriptWitness.stack = [script, bytes([0xc0 + taproot.negflag])+taproot.internal_pubkey]\n+        assert_equal(self.nodes[0].sendrawtransaction(taproot_check_template_verify_tx.serialize().hex()), taproot_check_template_verify_tx.rehash())\n+        self.log.info(\"Taproot OP_CHECKTEMPLATEVERIFY spend accepted by sendrawtransaction\")\n+\n+        # Now we verify that a block with this transaction is also valid\n+        blockhash = self.add_block([taproot_check_template_verify_tx])\n+        self.log.info(\"Taproot OP_CHECKTEMPLATEVERIFY spend accepted in a block\")\n+\n+        self.log.info(\"Rolling back the block\")\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        self.log.info(\"Testing Segwit OP_CHECKTEMPLATEVERIFY spend\")\n+        # Test sendrawtransaction\n+        check_template_verify_tx = CTransaction()\n+        check_template_verify_tx.nVersion = 2\n+        check_template_verify_tx.vin = [CTxIn(segwit_ctv_outpoint)]\n+        check_template_verify_tx.vout = outputs\n+\n+        check_template_verify_tx.wit.vtxinwit +=  [CTxInWitness()]\n+        check_template_verify_tx.wit.vtxinwit[0].scriptWitness.stack = [script]\n+        assert_equal(self.nodes[0].sendrawtransaction(check_template_verify_tx.serialize().hex()), check_template_verify_tx.rehash())\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY spend accepted by sendrawtransaction\")\n+\n+        # Now we verify that a block with this transaction is also valid\n+        blockhash = self.add_block([check_template_verify_tx])\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY spend accepted in a block\")\n+\n+        self.log.info(\"Rolling back the block\")\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        # Show any modification will break the validity\n+        self.log.info(\"Modifying Segwit OP_CHECKTEMPLATEVERIFY spend, block should fail\")\n+        check_template_verify_tx_mutated_amount = check_template_verify_tx\n+        check_template_verify_tx_mutated_amount.vout[0].nValue += 1\n+        check_template_verify_tx_mutated_amount.rehash()\n+        self.fail_block([check_template_verify_tx_mutated_amount])\n+        self.log.info(\"Modified Segwit OP_CHECKTEMPLATEVERIFY spend failed to confirm\")\n+\n+        # Now show that only one input allowed\n+        self.log.info(\"Testing that multiple inputs are disallowed when specified\")\n+        check_template_verify_two_inputs = check_template_verify_tx\n+        check_template_verify_two_inputs.vin += [CTxIn(anyone_can_spend_outpoint)]\n+        check_template_verify_two_inputs.rehash()\n+        self.fail_block([check_template_verify_two_inputs])\n+\n+        self.log.info(\"Testing that the second input specified was actually spendable by itself\")\n+\n+        # Second UTXO was actually spendable\n+        spendtx = CTransaction()\n+        spendtx.nVersion = 2\n+        spendtx.vin = [CTxIn(anyone_can_spend_outpoint)]\n+        spendtx.vout += [CTxOut(int(amount_sats - 1000), random_p2sh())]\n+        spendtx.rehash()\n+        blockhash = self.add_block([spendtx])\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        self.log.info(\"Testing Segwit OP_CHECKTEMPLATEVERIFY spend with a wrong size argument\")\n+        # Test sendrawtransaction\n+        check_template_verify_tx_wrongsize_stack = CTransaction()\n+        check_template_verify_tx_wrongsize_stack.nVersion = 2\n+        check_template_verify_tx_wrongsize_stack.vin = [CTxIn(segwit_ctv_wrongsize_stack_outpoint)]\n+        check_template_verify_tx_wrongsize_stack.vout = outputs\n+\n+        check_template_verify_tx_wrongsize_stack.wit.vtxinwit +=  [CTxInWitness()]\n+        check_template_verify_tx_wrongsize_stack.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE, OP_CHECKTEMPLATEVERIFY])]\n+\n+        assert_raises_rpc_error(-26, DISCOURAGED_ERROR,\n+            self.nodes[0].sendrawtransaction, check_template_verify_tx_wrongsize_stack.serialize().hex())\n+        self.log.info(\"OP_CHECKTEMPLATEVERIFY with wrong size stack rejected by sendrawtransaction as discouraged\")\n+\n+        # Now we verify that a block with this transaction is valid\n+        blockhash = self.add_block([check_template_verify_tx_wrongsize_stack])\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY with wrong size stack spend accepted in a block (soft fork upgradable)\")\n+\n+\n+        self.log.info(\"Testing Segwit OP_CHECKTEMPLATEVERIFY spend with an empty stack argument\")\n+        # Test sendrawtransaction\n+        check_template_verify_tx_empty_stack = CTransaction()\n+        check_template_verify_tx_empty_stack.nVersion = 2\n+        check_template_verify_tx_empty_stack.vin = [CTxIn(segwit_ctv_empty_stack_outpoint)]\n+        check_template_verify_tx_empty_stack.vout = outputs\n+\n+        check_template_verify_tx_empty_stack.wit.vtxinwit +=  [CTxInWitness()]\n+        check_template_verify_tx_empty_stack.wit.vtxinwit[0].scriptWitness.stack = [empty_stack_script]\n+\n+        assert_raises_rpc_error(-26, STACK_TOO_SHORT_ERROR,\n+            self.nodes[0].sendrawtransaction, check_template_verify_tx_empty_stack.serialize().hex())\n+\n+        self.log.info(\"OP_CHECKTEMPLATEVERIFY with wrong size stack rejected by sendrawtransaction as discouraged\")\n+\n+        # Now we verify that a block with this transaction is invalid\n+        self.fail_block([check_template_verify_tx_empty_stack], STACK_TOO_SHORT_ERROR)\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY with wrong size stack spend rejected from block\")\n+\n+\n+        # Show that putting some element on the stack makes it succeed for consensus but fail policy\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY with CTV argument in the program should fail policy pass consensus if witness stack is not 32 bytes\")\n+        check_template_verify_tx_empty_stack.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE]), empty_stack_script]\n+        assert_raises_rpc_error(-26, DISCOURAGED_ERROR,\n+            self.nodes[0].sendrawtransaction, check_template_verify_tx_empty_stack.serialize().hex())\n+        self.log.info(\"OP_CHECKTEMPLATEVERIFY with wrong size argument on the witness stack rejected by sendrawtransaction as discouraged\")\n+\n+        # Now we verify that a block with this transaction is valid\n+        blockhash = self.add_block([check_template_verify_tx_empty_stack])\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY with empty stack spend accepted in a block with something on the witness stack\")\n+        self.log.info(\"Rolling back the block\")\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        # Put the correct hash on\n+        self.log.info(\"Testing OP_CHECKTEMPLATEVERIFY spend with template hash from the witness stack\")\n+        h = check_template_verify_tx_empty_stack.get_standard_template_hash(0)\n+        check_template_verify_tx_empty_stack.wit.vtxinwit[0].scriptWitness.stack = [h, empty_stack_script]\n+        assert_equal(self.nodes[0].sendrawtransaction(check_template_verify_tx_empty_stack.serialize().hex()), check_template_verify_tx_empty_stack.rehash())\n+        self.log.info(\"Witness stack defined OP_CHECKTEMPLATEVERIFY spend accepted by sendrawtransaction\")\n+        # Now we verify that a block with this transaction is also valid\n+        blockhash = self.add_block([check_template_verify_tx_empty_stack])\n+        self.log.info(\"Witness stack defined OP_CHECKTEMPLATEVERIFY spend accepted in a block\")\n+        self.log.info(\"Rolling back the block\")\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        self.log.info(\"Testing that other 32 byte arguments passed from the witness stack fail\")\n+        h = h[::-1]\n+        check_template_verify_tx_empty_stack.wit.vtxinwit[0].scriptWitness.stack = [h, empty_stack_script]\n+        self.fail_block([check_template_verify_tx_empty_stack])\n+\n+        # Test sendrawtransaction with P2SH\n+        # Mathematically, this test cannot succeed since P2SH requires that the\n+        # P2SH script is in the scriptsig (which contains H), and H much\n+        # contain a commitment to the scriptsig.\n+        #\n+        # Note that this relies on RIPEMD160 being hard to find a cycle in.\n+        # This *could* break one day (P2SH is no longer recommended), but\n+        # there's no capability that would be gained by doing so (such as a\n+        # recursive covenant), it'd just be a \"party trick\" (and you could\n+        # also possibly steal all existing P2SH addresses).\n+        p2sh_check_template_verify_tx = CTransaction()\n+        p2sh_check_template_verify_tx.nVersion = 2\n+        p2sh_check_template_verify_tx.vin = [CTxIn(p2sh_ctv_outpoint, CScript([script]))]\n+        p2sh_check_template_verify_tx.vout = outputs\n+\n+        assert_raises_rpc_error(-26, CHECKTEMPLATEVERIFY_ERROR,\n+            self.nodes[0].sendrawtransaction, p2sh_check_template_verify_tx.serialize().hex())\n+        self.log.info(\"P2SH OP_CHECKTEMPLATEVERIFY spend rejected by sendrawtransaction\")\n+\n+        # Now we verify that a block with this transaction is also invalid\n+        self.fail_block([p2sh_check_template_verify_tx])\n+        self.log.info(\"P2SH OP_CHECKTEMPLATEVERIFY spend rejected in a block\")\n+\n+\n+        self.log.info(\"Testing a congestion control tree using bare OP_CHECKTEMPLATEVERIFY\")\n+        # Expand Congestion Control Tree to one specific input\n+        out = bare_ctv_tree_outpoint\n+        txs = []\n+        for level in congestion_tree_txo[1:]:\n+            spendtx = CTransaction()\n+            spendtx.nVersion = 2\n+            spendtx.vin += [CTxIn(out)]\n+            spendtx.vout += level[:2]\n+            out = COutPoint(int(spendtx.rehash(),16), 0)\n+            txs.append(spendtx)\n+        self.add_block(txs)\n+\n+\n+        self.log.info(\"Testing bare OP_CHECKTEMPLATEVERIFY with CTV at position 2\")\n+        check_template_verify_tx_pos_2 = CTransaction()\n+        check_template_verify_tx_pos_2.nVersion = 2\n+        check_template_verify_tx_pos_2.vin = [CTxIn(bare_ctv_position_2)]\n+        check_template_verify_tx_pos_2.vout = outputs_position_2\n+        self.log.info(\"Testing that the transaction fails because we have too few inputs\")\n+        self.fail_block([check_template_verify_tx_pos_2])\n+        check_template_verify_tx_pos_2.vin += [CTxIn(bare_anyone_can_spend_outpoint)]\n+        check_template_verify_tx_pos_2.rehash()\n+        self.log.info(\"Testing that the transaction fails because the inputs are in the wrong order\")\n+        self.fail_block([check_template_verify_tx_pos_2])\n+        self.log.info(\"Testing that the transaction succeeds when the inputs are in the correct order\")\n+        check_template_verify_tx_pos_2.vin.reverse()\n+        check_template_verify_tx_pos_2.rehash()\n+        blockhash = self.add_block([check_template_verify_tx_pos_2])\n+        self.nodes[0].invalidateblock(blockhash)\n+        check_template_verify_tx_pos_2.vin[0].scriptSig = CScript([OP_TRUE])\n+        check_template_verify_tx_pos_2.rehash()\n+        self.log.info(\"Testing that the transaction fails because the scriptSig on the other input has been modified\")\n+        self.fail_block([check_template_verify_tx_pos_2])\n+\n+\n+        self.log.info(\"Testing bare OP_CHECKTEMPLATEVERIFY with CTV at position 1 with specific scriptSigs\")\n+        check_template_verify_tx_specific_scriptSigs = CTransaction()\n+        check_template_verify_tx_specific_scriptSigs.nVersion = 2\n+        check_template_verify_tx_specific_scriptSigs.vin = [CTxIn(bare_ctv_specific_scriptSigs_outpoint, CScript([OP_TRUE])), CTxIn(bare_anyone_can_spend_outpoint, CScript([OP_TRUE]))]\n+        check_template_verify_tx_specific_scriptSigs.vout = outputs_specific_scriptSigs\n+        check_template_verify_tx_specific_scriptSigs.rehash()\n+        self.log.info(\"Testing bare OP_CHECKTEMPLATEVERIFY rejects incorrect scriptSigs\")\n+        self.fail_block([check_template_verify_tx_specific_scriptSigs])\n+\n+        self.log.info(\"Testing bare OP_CHECKTEMPLATEVERIFY accepts correct scriptSigs\")\n+        check_template_verify_tx_specific_scriptSigs.vin[1].scriptSig = CScript([OP_FALSE])\n+        check_template_verify_tx_specific_scriptSigs.rehash()\n+        blockhash = self.add_block([check_template_verify_tx_specific_scriptSigs])\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        self.log.info(\"Testing bare OP_CHECKTEMPLATEVERIFY with CTV at position 2 with specific scriptSigs\")\n+        # This is only really to test that uncached values work correctly with scriptSig set\n+        check_template_verify_tx_specific_scriptSigs_position_2 = CTransaction()\n+        check_template_verify_tx_specific_scriptSigs_position_2.nVersion = 2\n+        check_template_verify_tx_specific_scriptSigs_position_2.vin = [CTxIn(bare_anyone_can_spend_outpoint, CScript([OP_TRUE])),\n+            CTxIn(bare_ctv_specific_scriptSigs_position_2_outpoint, CScript([OP_FALSE]))]\n+        check_template_verify_tx_specific_scriptSigs_position_2.vout = outputs_specific_scriptSigs_position_2\n+        check_template_verify_tx_specific_scriptSigs_position_2.rehash()\n+        self.add_block([check_template_verify_tx_specific_scriptSigs_position_2])\n+\n+if __name__ == '__main__':\n+    CheckTemplateVerifyTest().main()"
      },
      {
        "sha": "4bb17000ada5989084eee1954b49562db3fa4dc0",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26da2cd2270cd3eefda1d1fd3e842d037d81a460/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26da2cd2270cd3eefda1d1fd3e842d037d81a460/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=26da2cd2270cd3eefda1d1fd3e842d037d81a460",
        "patch": "@@ -552,6 +552,19 @@ def serialize_without_witness(self):\n         r += struct.pack(\"<I\", self.nLockTime)\n         return r\n \n+    def get_standard_template_hash(self, nIn):\n+        r = b\"\"\n+        r += struct.pack(\"<i\", self.nVersion)\n+        r += struct.pack(\"<I\", self.nLockTime)\n+        if any(inp.scriptSig for inp in self.vin):\n+            r += sha256(b\"\".join(ser_string(inp.scriptSig) for inp in self.vin))\n+        r += struct.pack(\"<I\", len(self.vin))\n+        r += sha256(b\"\".join(struct.pack(\"<I\", inp.nSequence) for inp in self.vin))\n+        r += struct.pack(\"<I\", len(self.vout))\n+        r += sha256(b\"\".join(out.serialize() for out in self.vout))\n+        r += struct.pack(\"<I\", nIn)\n+        return sha256(r)\n+\n     # Only serialize with witness when explicitly called for\n     def serialize_with_witness(self):\n         flags = 0"
      },
      {
        "sha": "4219c45df201d39b29360637814c77efb3f42322",
        "filename": "test/functional/test_framework/script.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26da2cd2270cd3eefda1d1fd3e842d037d81a460/test/functional/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26da2cd2270cd3eefda1d1fd3e842d037d81a460/test/functional/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script.py?ref=26da2cd2270cd3eefda1d1fd3e842d037d81a460",
        "patch": "@@ -240,7 +240,7 @@ def __new__(cls, n):\n OP_NOP1 = CScriptOp(0xb0)\n OP_CHECKLOCKTIMEVERIFY = CScriptOp(0xb1)\n OP_CHECKSEQUENCEVERIFY = CScriptOp(0xb2)\n-OP_NOP4 = CScriptOp(0xb3)\n+OP_CHECKTEMPLATEVERIFY = CScriptOp(0xb3)\n OP_NOP5 = CScriptOp(0xb4)\n OP_NOP6 = CScriptOp(0xb5)\n OP_NOP7 = CScriptOp(0xb6)\n@@ -358,7 +358,7 @@ def __new__(cls, n):\n     OP_NOP1: 'OP_NOP1',\n     OP_CHECKLOCKTIMEVERIFY: 'OP_CHECKLOCKTIMEVERIFY',\n     OP_CHECKSEQUENCEVERIFY: 'OP_CHECKSEQUENCEVERIFY',\n-    OP_NOP4: 'OP_NOP4',\n+    OP_CHECKTEMPLATEVERIFY : 'OP_CHECKTEMPLATEVERIFY',\n     OP_NOP5: 'OP_NOP5',\n     OP_NOP6: 'OP_NOP6',\n     OP_NOP7: 'OP_NOP7',"
      },
      {
        "sha": "14ed2711acd568b2b87d6146e3da6063303e3dec",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26da2cd2270cd3eefda1d1fd3e842d037d81a460/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26da2cd2270cd3eefda1d1fd3e842d037d81a460/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=26da2cd2270cd3eefda1d1fd3e842d037d81a460",
        "patch": "@@ -233,6 +233,7 @@\n     'wallet_balance.py --descriptors',\n     'feature_nulldummy.py --legacy-wallet',\n     'feature_nulldummy.py --descriptors',\n+    'feature_checktemplateverify.py',\n     'mempool_accept.py',\n     'mempool_expiry.py',\n     'wallet_import_rescan.py --legacy-wallet',"
      }
    ]
  },
  {
    "sha": "84621eed8bc73a43a6d80f268d51f9e197ab8f9c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDYyMWVlZDhiYzczYTQzYTZkODBmMjY4ZDUxZjllMTk3YWI4Zjlj",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-02T23:29:10Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-12T02:36:49Z"
      },
      "message": "[TESTS] Update Transaction Tests to permit setting a flag as always on and disabling the exhaustive failure test",
      "tree": {
        "sha": "59dc2bee76f206dba1abfc881bf2efb25cd147d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/59dc2bee76f206dba1abfc881bf2efb25cd147d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84621eed8bc73a43a6d80f268d51f9e197ab8f9c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84621eed8bc73a43a6d80f268d51f9e197ab8f9c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/84621eed8bc73a43a6d80f268d51f9e197ab8f9c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84621eed8bc73a43a6d80f268d51f9e197ab8f9c/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26da2cd2270cd3eefda1d1fd3e842d037d81a460",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26da2cd2270cd3eefda1d1fd3e842d037d81a460",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26da2cd2270cd3eefda1d1fd3e842d037d81a460"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 19,
      "deletions": 8
    },
    "files": [
      {
        "sha": "a012a6b44bbfc92d36db91accbbf35f1570aee9d",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84621eed8bc73a43a6d80f268d51f9e197ab8f9c/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84621eed8bc73a43a6d80f268d51f9e197ab8f9c/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=84621eed8bc73a43a6d80f268d51f9e197ab8f9c",
        "patch": "@@ -2,7 +2,7 @@\n [\"The following are deserialized transactions which are valid.\"],\n [\"They are in the form\"],\n [\"[[[prevout hash, prevout index, prevout scriptPubKey, amount?], [input 2], ...],\"],\n-[\"serializedTransaction, excluded verifyFlags]\"],\n+[\"serializedTransaction, excluded verifyFlags, always included verifyFlags?, skip excluded one by one?]\"],\n [\"Objects that are only a single string (like this one) are ignored\"],\n \n [\"The following is 23b397edccd3740a74adb603c9756370fafcde9bcc4483eb271ecad09a94dd63\"],"
      },
      {
        "sha": "717e3027692b072334a4e7c525560e9621480068",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 7,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84621eed8bc73a43a6d80f268d51f9e197ab8f9c/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84621eed8bc73a43a6d80f268d51f9e197ab8f9c/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=84621eed8bc73a43a6d80f268d51f9e197ab8f9c",
        "patch": "@@ -198,11 +198,19 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n         std::string strTest = test.write();\n         if (test[0].isArray())\n         {\n-            if (test.size() != 3 || !test[1].isStr() || !test[2].isStr())\n+            const size_t size = test.size();\n+            const bool default_args = size == 3;\n+            const bool has_skip_exclude_one = size == 5;\n+            const bool has_extra_flags = size == 4;\n+            const bool size_correct = default_args || has_extra_flags || has_skip_exclude_one;\n+            const bool extra_flags_correct = !has_extra_flags || test[3].isStr();\n+            const bool skip_exclude_one_correct = !has_skip_exclude_one  || test[4].isBool();\n+            if (!size_correct || !test[1].isStr() || !test[2].isStr() || !extra_flags_correct || !skip_exclude_one_correct)\n             {\n                 BOOST_ERROR(\"Bad test: \" << strTest);\n                 continue;\n             }\n+            const bool skip_exclude_one = has_skip_exclude_one? test[4].get_bool() : false;\n \n             std::map<COutPoint, CScript> mapprevOutScriptPubKeys;\n             std::map<COutPoint, int64_t> mapprevOutValues;\n@@ -243,33 +251,36 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n \n             PrecomputedTransactionData txdata(tx);\n             unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n+            unsigned int extra_verify_flags = has_extra_flags? ParseScriptFlags(test[3].get_str()) : 0;\n \n             // Check that the test gives a valid combination of flags (otherwise VerifyScript will throw). Don't edit the flags.\n             if (~verify_flags != FillFlags(~verify_flags)) {\n                 BOOST_ERROR(\"Bad test flags: \" << strTest);\n             }\n \n-            BOOST_CHECK_MESSAGE(CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, ~verify_flags, txdata, strTest, /* expect_valid */ true),\n+            BOOST_CHECK_MESSAGE(CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, extra_verify_flags|~verify_flags, txdata, strTest, /* expect_valid */ true),\n                                 \"Tx unexpectedly failed: \" << strTest);\n \n             // Backwards compatibility of script verification flags: Removing any flag(s) should not invalidate a valid transaction\n             for (const auto& [name, flag] : mapFlagNames) {\n                 // Removing individual flags\n-                unsigned int flags = TrimFlags(~(verify_flags | flag));\n+                unsigned int flags = TrimFlags(extra_verify_flags | ~(verify_flags | flag));\n                 if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /* expect_valid */ true)) {\n                     BOOST_ERROR(\"Tx unexpectedly failed with flag \" << name << \" unset: \" << strTest);\n                 }\n                 // Removing random combinations of flags\n-                flags = TrimFlags(~(verify_flags | (unsigned int)InsecureRandBits(mapFlagNames.size())));\n+                flags = TrimFlags(extra_verify_flags | ~(verify_flags | (unsigned int)InsecureRandBits(mapFlagNames.size())));\n                 if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /* expect_valid */ true)) {\n                     BOOST_ERROR(\"Tx unexpectedly failed with random flags \" << ToString(flags) << \": \" << strTest);\n                 }\n             }\n \n             // Check that flags are maximal: transaction should fail if any unset flags are set.\n-            for (auto flags_excluding_one : ExcludeIndividualFlags(verify_flags)) {\n-                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, ~flags_excluding_one, txdata, strTest, /* expect_valid */ false)) {\n-                    BOOST_ERROR(\"Too many flags unset: \" << strTest);\n+            if (!skip_exclude_one) {\n+                for (auto flags_excluding_one : ExcludeIndividualFlags(verify_flags)) {\n+                    if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, ~flags_excluding_one, txdata, strTest, /* expect_valid */ false)) {\n+                        BOOST_ERROR(\"Too many flags unset: \" << strTest);\n+                    }\n                 }\n             }\n         }"
      }
    ]
  },
  {
    "sha": "ee5f1a24299e2c7c3330be3487e15b2fd6c5e767",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTVmMWEyNDI5OWUyYzdjMzMzMGJlMzQ4N2UxNWIyZmQ2YzVlNzY3",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-02T23:31:26Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-12T02:36:49Z"
      },
      "message": "[TESTS] add tx_valid.json tests for BIP-119 CheckTemplateVerify",
      "tree": {
        "sha": "5f78cce2a67884b9eb51990878400a2b955ef8a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f78cce2a67884b9eb51990878400a2b955ef8a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee5f1a24299e2c7c3330be3487e15b2fd6c5e767",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee5f1a24299e2c7c3330be3487e15b2fd6c5e767",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee5f1a24299e2c7c3330be3487e15b2fd6c5e767",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee5f1a24299e2c7c3330be3487e15b2fd6c5e767/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "84621eed8bc73a43a6d80f268d51f9e197ab8f9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84621eed8bc73a43a6d80f268d51f9e197ab8f9c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84621eed8bc73a43a6d80f268d51f9e197ab8f9c"
      }
    ],
    "stats": {
      "total": 152,
      "additions": 152,
      "deletions": 0
    },
    "files": [
      {
        "sha": "087e3520741a9604763a2e3846ad0a57807ad5cc",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 152,
        "deletions": 0,
        "changes": 152,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee5f1a24299e2c7c3330be3487e15b2fd6c5e767/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee5f1a24299e2c7c3330be3487e15b2fd6c5e767/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=ee5f1a24299e2c7c3330be3487e15b2fd6c5e767",
        "patch": "@@ -516,5 +516,157 @@\n [[[\"1111111111111111111111111111111111111111111111111111111111111111\", 0, \"0x00 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6\", 5000000]],\n \"0100000000010111111111111111111111111111111111111111111111111111111111111111110000000000ffffffff0130244c0000000000fd02014cdc1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111175210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac02483045022100c1a4a6581996a7fdfea77d58d537955a5655c1d619b6f3ab6874f28bb2e19708022056402db6fede03caae045a3be616a1a2d0919a475ed4be828dc9ff21f24063aa01210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179800000000\", \"NONE\"],\n \n+[\"Check that CTV is Processed with a Taproot Spend\"],\n+[[[\"f90521604b56c392ffa17a01bcae5914b8cf7728cc6cec00d90838818cc5465f\", 0, \"1 0x20 0x24f5fe807bcee7774dc515f0b7ee8d6ae39eefd1b590264c52ff867e22c49419\", 155000]],\n+\"020000000001015f46c58c813808d900ec6ccc2877cfb81459aebc017aa1ff92c3564b602105f90000000000000000000ae80300000000000017a914ce0036ae7d49f06967dd92cc1ffff4a878c457f987d00700000000000017a91406e00c3b362e65e03507a2858d7b6499b668669887b80b00000000000017a9142ee42c65592c59b69bfefbd03781140c67e5232487a00f00000000000017a9146b3df16a1e6651d582ca6598900cb4f2d6c9dfb887881300000000000017a914877d55932d4f38b476d4db27e4efbe159ff0a07187701700000000000017a91441e9dc892e861d252d513d594ba833cd6bc8917087581b00000000000017a914b93075800c693dcc78b0553bf9d1cf879d76a02487401f00000000000017a914e9f0ea3a2cae0ad01114e2ec3502ef08bbc50af487282300000000000017a9149a645b5293bdf8be72cb9d1460bce7d64445cfad87102700000000000017a91451e5d6b2ee24ae128234c92245df3624620ea7d3870222209eb65498bfcd4eb90e61c2c5e323a9c16c8bfd8d53ba649915bcdb572099c12fb321c0b7e0105780185688d998a8f8438aa07637a5799755688ec80175cb26c0406e0200000000\",\n+\"NONE\", \"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH\"],\n+[\"Check that CTV upgradability works (taproot)\"],\n+[[[\"f90521604b56c392ffa17a01bcae5914b8cf7728cc6cec00d90838818cc5465f\", 0, \"1 0x20 0x24f5fe807bcee7774dc515f0b7ee8d6ae39eefd1b590264c52ff867e22c49419\", 155000]],\n+\"020000000001015f46c58c813808d900ec6ccc2877cfb81459aebc017aa1ff92c3564b602105f90000000000000000000ae80300000000000017a914ce0036ae7d49f06967dd92cc1ffff4a878c457f987d00700000000000017a91406e00c3b362e65e03507a2858d7b6499b668669887b80b00000000000017a9142ee42c65592c59b69bfefbd03781140c67e5232487a00f00000000000017a9146b3df16a1e6651d582ca6598900cb4f2d6c9dfb887881300000000000017a914877d55932d4f38b476d4db27e4efbe159ff0a07187701700000000000017a91441e9dc892e861d252d513d594ba833cd6bc8917087581b00000000000017a914b93075800c693dcc78b0553bf9d1cf879d76a02487401f00000000000017a914e9f0ea3a2cae0ad01114e2ec3502ef08bbc50af487282300000000000017a9149a645b5293bdf8be72cb9d1460bce7d64445cfad87102700000000000017a91451e5d6b2ee24ae128234c92245df3624620ea7d3870222209eb65498bfcd4eb90e61c2c5e323a9c16c8bfd8d53ba649915bcdb572099c12fb321c0b7e0105780185688d998a8f8438aa07637a5799755688ec80175cb26c0406e0200000000\",\n+\"DISCOURAGE_UPGRADABLE_NOPS\", \"NONE\", true],\n+\n+[\"Segwit v0 CTV Spend\"],\n+[[[\"c16621d89637274011a8fb02ac487d283367f33d36de8c1ec8e323e55cb149cb\",\n+   0,\n+   \"0x00 0x20 0xf47ad51491d952cb1fad0d3f208dde482561d2170ebbbbc08e2e0292eeb4ec3d\",\n+   155000]],\n+ \"02000000000101cb49b15ce523e3c81e8cde363df36733287d48ac02fba81140273796d82166c10000000000000000000ae80300000000000017a91496e75de842d245fe846f1866f535d3d549af1eee87d00700000000000017a91443078220afb62f1dd0f13b58103c2cdea3ec31eb87b80b00000000000017a914c2aabf119c1825b1de66bc34e0792e37c198b5a987a00f00000000000017a9146e9e99a0b342e90e9360e26aa1a2b12ac7d1701e87881300000000000017a9149fc2952de5c6268759a4addd6f1336585de5a6b687701700000000000017a914f0bb53b2734e0f4027b25084630f4c7cb793f0d087581b00000000000017a914151a578ea0bbe3a24bf8335c4ee162643be28b4787401f00000000000017a9148f7ffde60fa425fa919ab9de3c7731fa4268151787282300000000000017a91454c45d77bccc359d07a2b17b4abfc78e8c3237b787102700000000000017a914e43197dbd28424b86c7c8823180e2b15192a96d1870122207427029cbb0a48361ba1b83e4fff21918618477be3d217d83b2ff846815305f6b300000000\",\n+ \"NONE\", \"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH\"],\n+[\"Check that CTV upgradability works (Segwit v0)\"],\n+[[[\"c16621d89637274011a8fb02ac487d283367f33d36de8c1ec8e323e55cb149cb\",\n+   0,\n+   \"0x00 0x20 0xf47ad51491d952cb1fad0d3f208dde482561d2170ebbbbc08e2e0292eeb4ec3d\",\n+   155000]],\n+ \"02000000000101cb49b15ce523e3c81e8cde363df36733287d48ac02fba81140273796d82166c10000000000000000000ae80300000000000017a91496e75de842d245fe846f1866f535d3d549af1eee87d00700000000000017a91443078220afb62f1dd0f13b58103c2cdea3ec31eb87b80b00000000000017a914c2aabf119c1825b1de66bc34e0792e37c198b5a987a00f00000000000017a9146e9e99a0b342e90e9360e26aa1a2b12ac7d1701e87881300000000000017a9149fc2952de5c6268759a4addd6f1336585de5a6b687701700000000000017a914f0bb53b2734e0f4027b25084630f4c7cb793f0d087581b00000000000017a914151a578ea0bbe3a24bf8335c4ee162643be28b4787401f00000000000017a9148f7ffde60fa425fa919ab9de3c7731fa4268151787282300000000000017a91454c45d77bccc359d07a2b17b4abfc78e8c3237b787102700000000000017a914e43197dbd28424b86c7c8823180e2b15192a96d1870122207427029cbb0a48361ba1b83e4fff21918618477be3d217d83b2ff846815305f6b300000000\",\n+\"DISCOURAGE_UPGRADABLE_NOPS\", \"NONE\", true],\n+\n+ [\"CTV reserves different sized args for future upgrades\"],\n+[[[\"e8e9805801b7fb44814531de0dd498b955651b9c25a85a043d73f18970622647\",\n+   0,\n+   \"0x00 0x20 0x65f15821061635e6807f06701bf0a12d8e89dcff88df5968bd0822c9dbb52f1c\",\n+   155000]],\n+ \"020000000001014726627089f1733d045aa8259c1b6555b998d40dde31458144fbb7015880e9e80000000000000000000ae90300000000000017a91496e75de842d245fe846f1866f535d3d549af1eee87d00700000000000017a91443078220afb62f1dd0f13b58103c2cdea3ec31eb87b80b00000000000017a914c2aabf119c1825b1de66bc34e0792e37c198b5a987a00f00000000000017a9146e9e99a0b342e90e9360e26aa1a2b12ac7d1701e87881300000000000017a9149fc2952de5c6268759a4addd6f1336585de5a6b687701700000000000017a914f0bb53b2734e0f4027b25084630f4c7cb793f0d087581b00000000000017a914151a578ea0bbe3a24bf8335c4ee162643be28b4787401f00000000000017a9148f7ffde60fa425fa919ab9de3c7731fa4268151787282300000000000017a91454c45d77bccc359d07a2b17b4abfc78e8c3237b787102700000000000017a914e43197dbd28424b86c7c8823180e2b15192a96d18702015101b300000000\",\n+ \"DISCOURAGE_UPGRADABLE_NOPS\"],\n+\n+ [\"CheckTemplateVerify Argument from Witness Stack\"],\n+[[[\"e8e9805801b7fb44814531de0dd498b955651b9c25a85a043d73f18970622647\",\n+   0,\n+   \"0x00 0x20 0x65f15821061635e6807f06701bf0a12d8e89dcff88df5968bd0822c9dbb52f1c\",\n+   155000]],\n+ \"020000000001014726627089f1733d045aa8259c1b6555b998d40dde31458144fbb7015880e9e80000000000000000000ae90300000000000017a91496e75de842d245fe846f1866f535d3d549af1eee87d00700000000000017a91443078220afb62f1dd0f13b58103c2cdea3ec31eb87b80b00000000000017a914c2aabf119c1825b1de66bc34e0792e37c198b5a987a00f00000000000017a9146e9e99a0b342e90e9360e26aa1a2b12ac7d1701e87881300000000000017a9149fc2952de5c6268759a4addd6f1336585de5a6b687701700000000000017a914f0bb53b2734e0f4027b25084630f4c7cb793f0d087581b00000000000017a914151a578ea0bbe3a24bf8335c4ee162643be28b4787401f00000000000017a9148f7ffde60fa425fa919ab9de3c7731fa4268151787282300000000000017a91454c45d77bccc359d07a2b17b4abfc78e8c3237b787102700000000000017a914e43197dbd28424b86c7c8823180e2b15192a96d18702204d5783a61241bdef19c3480e094cc933c91d2bde995c8c50407099184b501f4301b300000000\",\n+ \"NONE\", \"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH\"],\n+ [\"CheckTemplateVerify Argument from Witness Stack\"],\n+[[[\"e8e9805801b7fb44814531de0dd498b955651b9c25a85a043d73f18970622647\",\n+   0,\n+   \"0x00 0x20 0x65f15821061635e6807f06701bf0a12d8e89dcff88df5968bd0822c9dbb52f1c\",\n+   155000]],\n+ \"020000000001014726627089f1733d045aa8259c1b6555b998d40dde31458144fbb7015880e9e80000000000000000000ae90300000000000017a91496e75de842d245fe846f1866f535d3d549af1eee87d00700000000000017a91443078220afb62f1dd0f13b58103c2cdea3ec31eb87b80b00000000000017a914c2aabf119c1825b1de66bc34e0792e37c198b5a987a00f00000000000017a9146e9e99a0b342e90e9360e26aa1a2b12ac7d1701e87881300000000000017a9149fc2952de5c6268759a4addd6f1336585de5a6b687701700000000000017a914f0bb53b2734e0f4027b25084630f4c7cb793f0d087581b00000000000017a914151a578ea0bbe3a24bf8335c4ee162643be28b4787401f00000000000017a9148f7ffde60fa425fa919ab9de3c7731fa4268151787282300000000000017a91454c45d77bccc359d07a2b17b4abfc78e8c3237b787102700000000000017a914e43197dbd28424b86c7c8823180e2b15192a96d18702204d5783a61241bdef19c3480e094cc933c91d2bde995c8c50407099184b501f4301b300000000\",\n+ \"DISCOURAGE_UPGRADABLE_NOPS\", \"NONE\", true],\n+\n+ [\"BEGIN CTV congestion control tree level with 4 levels:\"],\n+ [\"CTV congestion control tree level 0\"],\n+[[[\"d0246d069143263bca9a2b176fcf64bd8e4975c7670ed33659b4b8f88d3e7446\",\n+   0,\n+   \"0x20 0x10618b50aa1120e9e940bbea8b6d081019e38fbb9b956b0ab4f61631d05727ca OP_CHECKTEMPLATEVERIFY\",\n+   16600]],\n+ \"020000000146743e8df8b8b45936d30e67c775498ebd64cf6f172b9aca3b264391066d24d000000000000000000002781e0000000000002220bceb923d731eddf09705690d6ee697d1b3d57279ad96910cfb66a8d43a638800b3781e00000000000022201210e50077518896fd1661bffc2c1e88ad6e204ec4e8755407b42a97347c1e1bb300000000\",\n+ \"DISCOURAGE_UPGRADABLE_NOPS\", \"NONE\", true],\n+[\"CTV congestion control tree level 1\"],\n+[[[\"b69f866d47ebb75eeecfbc3b9b641f926f11035b64ff27a5a5e88b9c065bddf5\",\n+   0,\n+   \"0x20 0xbceb923d731eddf09705690d6ee697d1b3d57279ad96910cfb66a8d43a638800 OP_CHECKTEMPLATEVERIFY\",\n+   7800]],\n+ \"0200000001f5dd5b069c8be8a5a527ff645b03116f921f649b3bbccfee5eb7eb476d869fb600000000000000000002480d00000000000022204c683607ca7950380df10647b223f656cd73d1f7ad67b30caf60d78337f913b2b3480d0000000000002220805bddd8b95a3cf3729b62703de37a1533b11634de76aa4a18605b640f1f3208b300000000\",\n+ \"DISCOURAGE_UPGRADABLE_NOPS\", \"NONE\", true],\n+[\"CTV congestion control tree level 2\"],\n+[[[\"7d331a33880504fa94478c9687f3f41322ec76f81edad8e72491cbb81eea4754\",\n+   0,\n+   \"0x20 0x4c683607ca7950380df10647b223f656cd73d1f7ad67b30caf60d78337f913b2 OP_CHECKTEMPLATEVERIFY\",\n+   3400]],\n+ \"02000000015447ea1eb8cb9124e7d8da1ef876ec2213f4f387968c4794fa040588331a337d00000000000000000002b004000000000000222084ac6e0fdbe91b09d1bf68158643ad68e0b3e64373738fb35711de0835011079b3b0040000000000002220241af26179a8e861cca473244723978127c16531f71fbcc33563c4f099651f8fb300000000\",\n+ \"DISCOURAGE_UPGRADABLE_NOPS\", \"NONE\", true],\n+[\"CTV congestion control tree level 3\"],\n+[[[\"e630b2357e02d1611a0615ce3964c408823ce3269974bd94e57ddea96900da70\",\n+   0,\n+   \"0x20 0x84ac6e0fdbe91b09d1bf68158643ad68e0b3e64373738fb35711de0835011079 OP_CHECKTEMPLATEVERIFY\",\n+   1200]],\n+ \"020000000170da0069a9de7de594bd749926e33c8208c46439ce15061a61d1027e35b230e60000000000000000000264000000000000001600141ca3bdf6bd2b1fc27420316a0d13f81fcdb85cb0640000000000000016001489d611c79700d6b4ae73d853ed49b86621d5802100000000\",\n+ \"DISCOURAGE_UPGRADABLE_NOPS\", \"NONE\", true],\n+ [\"END\"],\n+\n+ [\"BEGIN CTV congestion control tree level with 4 levels:\"],\n+ [\"CTV congestion control tree level 0\"],\n+[[[\"d0246d069143263bca9a2b176fcf64bd8e4975c7670ed33659b4b8f88d3e7446\",\n+   0,\n+   \"0x20 0x10618b50aa1120e9e940bbea8b6d081019e38fbb9b956b0ab4f61631d05727ca OP_CHECKTEMPLATEVERIFY\",\n+   16600]],\n+ \"020000000146743e8df8b8b45936d30e67c775498ebd64cf6f172b9aca3b264391066d24d000000000000000000002781e0000000000002220bceb923d731eddf09705690d6ee697d1b3d57279ad96910cfb66a8d43a638800b3781e00000000000022201210e50077518896fd1661bffc2c1e88ad6e204ec4e8755407b42a97347c1e1bb300000000\",\n+ \"NONE\", \"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH\"],\n+[\"CTV congestion control tree level 1\"],\n+[[[\"b69f866d47ebb75eeecfbc3b9b641f926f11035b64ff27a5a5e88b9c065bddf5\",\n+   0,\n+   \"0x20 0xbceb923d731eddf09705690d6ee697d1b3d57279ad96910cfb66a8d43a638800 OP_CHECKTEMPLATEVERIFY\",\n+   7800]],\n+ \"0200000001f5dd5b069c8be8a5a527ff645b03116f921f649b3bbccfee5eb7eb476d869fb600000000000000000002480d00000000000022204c683607ca7950380df10647b223f656cd73d1f7ad67b30caf60d78337f913b2b3480d0000000000002220805bddd8b95a3cf3729b62703de37a1533b11634de76aa4a18605b640f1f3208b300000000\",\n+ \"NONE\", \"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH\"],\n+[\"CTV congestion control tree level 2\"],\n+[[[\"7d331a33880504fa94478c9687f3f41322ec76f81edad8e72491cbb81eea4754\",\n+   0,\n+   \"0x20 0x4c683607ca7950380df10647b223f656cd73d1f7ad67b30caf60d78337f913b2 OP_CHECKTEMPLATEVERIFY\",\n+   3400]],\n+ \"02000000015447ea1eb8cb9124e7d8da1ef876ec2213f4f387968c4794fa040588331a337d00000000000000000002b004000000000000222084ac6e0fdbe91b09d1bf68158643ad68e0b3e64373738fb35711de0835011079b3b0040000000000002220241af26179a8e861cca473244723978127c16531f71fbcc33563c4f099651f8fb300000000\",\n+ \"NONE\", \"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH\"],\n+[\"CTV congestion control tree level 3\"],\n+[[[\"e630b2357e02d1611a0615ce3964c408823ce3269974bd94e57ddea96900da70\",\n+   0,\n+   \"0x20 0x84ac6e0fdbe91b09d1bf68158643ad68e0b3e64373738fb35711de0835011079 OP_CHECKTEMPLATEVERIFY\",\n+   1200]],\n+ \"020000000170da0069a9de7de594bd749926e33c8208c46439ce15061a61d1027e35b230e60000000000000000000264000000000000001600141ca3bdf6bd2b1fc27420316a0d13f81fcdb85cb0640000000000000016001489d611c79700d6b4ae73d853ed49b86621d5802100000000\",\n+ \"NONE\", \"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH\"],\n+ [\"END\"],\n+\n+ [\"Test CTV with a specific scriptsig\"],\n+[[[\"32858fe9a6348d4ee5fcfce78f6dbca0b54dff169ff4cc41439adca4e5d30746\",\n+   0,\n+   \"1\",\n+   155000],\n+  [\"357722dce671e5aa52abd617002baa8d5d970cef43feca3bf2d4c8b1e5d53d11\",\n+   0,\n+   \"0x20 0x08a5903863a0562c0b5608521a8a77ca02e669eb01f3981eede6bf6f2f38c2c2 OP_CHECKTEMPLATEVERIFY\",\n+   155000]],\n+ \"0200000002113dd5e5b1c8d4f23bcafe43ef0c975d8daa2b0017d6ab52aae571e6dc227735000000000151000000004607d3e5a4dc9a4341ccf49f16ff4db5a0bc6d8fe7fcfce54e8d34a6e98f8532000000000100000000000ae80300000000000017a9146422bb825e07ab99ab915223ac67f195a4fb761987d00700000000000017a914cc9fa001f8c9ff9dfdecf0ec1356d37c808aec2d87b80b00000000000017a914092f42f35fd05eaf816a090ad8f1adec8394132d87a00f00000000000017a9147cfd2a76093289ebabf860d3071b92756dbde1b787881300000000000017a914c3d81e1a59c256bff75c535878e1701943a9e48987701700000000000017a914029ddf1319c05ff38cd974ba99fdcf1cb4b88b9687581b00000000000017a9148c95279a9fd452ad7b1cb7a35fd08e7ff55946af87401f00000000000017a9149216fef0f965b2f1890a420aa725cb86ba47a9c087282300000000000017a9141424c24d8cd907a36310db639ec7d194c62d620087102700000000000017a9145b278b155e6dd103b4bf5ba78e4a95c16926c9bd8700000000\",\n+ \"DISCOURAGE_UPGRADABLE_NOPS,CLEANSTACK\", \"NONE\", true],\n+[[[\"32858fe9a6348d4ee5fcfce78f6dbca0b54dff169ff4cc41439adca4e5d30746\",\n+   0,\n+   \"1\",\n+   155000],\n+  [\"357722dce671e5aa52abd617002baa8d5d970cef43feca3bf2d4c8b1e5d53d11\",\n+   0,\n+   \"0x20 0x08a5903863a0562c0b5608521a8a77ca02e669eb01f3981eede6bf6f2f38c2c2 OP_CHECKTEMPLATEVERIFY\",\n+   155000]],\n+ \"0200000002113dd5e5b1c8d4f23bcafe43ef0c975d8daa2b0017d6ab52aae571e6dc227735000000000151000000004607d3e5a4dc9a4341ccf49f16ff4db5a0bc6d8fe7fcfce54e8d34a6e98f8532000000000100000000000ae80300000000000017a9146422bb825e07ab99ab915223ac67f195a4fb761987d00700000000000017a914cc9fa001f8c9ff9dfdecf0ec1356d37c808aec2d87b80b00000000000017a914092f42f35fd05eaf816a090ad8f1adec8394132d87a00f00000000000017a9147cfd2a76093289ebabf860d3071b92756dbde1b787881300000000000017a914c3d81e1a59c256bff75c535878e1701943a9e48987701700000000000017a914029ddf1319c05ff38cd974ba99fdcf1cb4b88b9687581b00000000000017a9148c95279a9fd452ad7b1cb7a35fd08e7ff55946af87401f00000000000017a9149216fef0f965b2f1890a420aa725cb86ba47a9c087282300000000000017a9141424c24d8cd907a36310db639ec7d194c62d620087102700000000000017a9145b278b155e6dd103b4bf5ba78e4a95c16926c9bd8700000000\",\n+ \"CLEANSTACK\", \"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH\"],\n+ [\"Test CTV with a specific scriptsig at different index\"],\n+ [[[\"e2f2baee9c59389b34e39742ce05debf64aaa7a00fbdab88614f4d3c133186d5\",\n+  0,\n+  \"1\",\n+  155000],\n+ [\"c88e4b769a9211d2bca7516dbeacf250585dc825e41e34a65607a444b97fb782\",\n+  0,\n+  \"0x20 0xcc06acb181a8e9893c53c92fcfcb56fc004a360964af02cfd15b9f3321385f86 OP_CHECKTEMPLATEVERIFY\",\n+  155000]],\n+\"0200000002d58631133c4d4f6188abbd0fa0a7aa64bfde05ce4297e3349b38599ceebaf2e20000000001510000000082b77fb944a40756a6341ee425c85d5850f2acbe6d51a7bcd211929a764b8ec8000000000100000000000ae80300000000000017a914d63e77972529f4db5b32efaa4e06f66ae0b5dc0987d00700000000000017a91488b6705f8c9568c52b55ed712c257f84f64a49f587b80b00000000000017a9142be57e9a179f8d9ff8f33a788d4b54512ea9e36087a00f00000000000017a91429261b4f65796f618908de9f51669014e2e2e04f87881300000000000017a914e3a1e1d24cbba3ca9369248082988bad3ceafcfb87701700000000000017a91403801b0a9591f3b5a00a5ea60fb34dc12b4a691187581b00000000000017a91465248bc2c732db2d88db0b0d677c1514b101025b87401f00000000000017a91420021e3dc4e80c7192c1a3cd04026d22d0f8d38287282300000000000017a914df27596dbff2028791bd7692846e65d16d8fed0d87102700000000000017a9142ed128e911cab04d3277d3635f79d5e3d7e6f4c48700000000\",\n+\"DISCOURAGE_UPGRADABLE_NOPS,CLEANSTACK\", \"NONE\", true],\n+ [[[\"e2f2baee9c59389b34e39742ce05debf64aaa7a00fbdab88614f4d3c133186d5\",\n+  0,\n+  \"1\",\n+  155000],\n+ [\"c88e4b769a9211d2bca7516dbeacf250585dc825e41e34a65607a444b97fb782\",\n+  0,\n+  \"0x20 0xcc06acb181a8e9893c53c92fcfcb56fc004a360964af02cfd15b9f3321385f86 OP_CHECKTEMPLATEVERIFY\",\n+  155000]],\n+\"0200000002d58631133c4d4f6188abbd0fa0a7aa64bfde05ce4297e3349b38599ceebaf2e20000000001510000000082b77fb944a40756a6341ee425c85d5850f2acbe6d51a7bcd211929a764b8ec8000000000100000000000ae80300000000000017a914d63e77972529f4db5b32efaa4e06f66ae0b5dc0987d00700000000000017a91488b6705f8c9568c52b55ed712c257f84f64a49f587b80b00000000000017a9142be57e9a179f8d9ff8f33a788d4b54512ea9e36087a00f00000000000017a91429261b4f65796f618908de9f51669014e2e2e04f87881300000000000017a914e3a1e1d24cbba3ca9369248082988bad3ceafcfb87701700000000000017a91403801b0a9591f3b5a00a5ea60fb34dc12b4a691187581b00000000000017a91465248bc2c732db2d88db0b0d677c1514b101025b87401f00000000000017a91420021e3dc4e80c7192c1a3cd04026d22d0f8d38287282300000000000017a914df27596dbff2028791bd7692846e65d16d8fed0d87102700000000000017a9142ed128e911cab04d3277d3635f79d5e3d7e6f4c48700000000\",\n+ \"CLEANSTACK\", \"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      }
    ]
  },
  {
    "sha": "206a9392ea82c341a99a1814b519cf9fcf112927",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDZhOTM5MmVhODJjMzQxYTk5YTE4MTRiNTE5Y2Y5ZmNmMTEyOTI3",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-11T22:38:19Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-12T02:37:06Z"
      },
      "message": "[TESTS] Allow tx_invalid.json tests to include flag rules for if_unset: [A,B,C] then_unset: [D]",
      "tree": {
        "sha": "48f51b776436689ed6609bea93d8f2a8825a84b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/48f51b776436689ed6609bea93d8f2a8825a84b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/206a9392ea82c341a99a1814b519cf9fcf112927",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/206a9392ea82c341a99a1814b519cf9fcf112927",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/206a9392ea82c341a99a1814b519cf9fcf112927",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/206a9392ea82c341a99a1814b519cf9fcf112927/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee5f1a24299e2c7c3330be3487e15b2fd6c5e767",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee5f1a24299e2c7c3330be3487e15b2fd6c5e767",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee5f1a24299e2c7c3330be3487e15b2fd6c5e767"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 51,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4f535ec570bfdcb9a409ba28c63f988382e26314",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/206a9392ea82c341a99a1814b519cf9fcf112927/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/206a9392ea82c341a99a1814b519cf9fcf112927/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=206a9392ea82c341a99a1814b519cf9fcf112927",
        "patch": "@@ -2,7 +2,7 @@\n [\"The following are deserialized transactions which are invalid.\"],\n [\"They are in the form\"],\n [\"[[[prevout hash, prevout index, prevout scriptPubKey, amount?], [input 2], ...],\"],\n-[\"serializedTransaction, verifyFlags]\"],\n+[\"serializedTransaction, verifyFlags, [{\\\"if_unset\\\": [\\\"flag A\\\", ...], \\\"then_unset\\\": [\\\"flag X\\\", ...]}]?]\"],\n [\"Use BADTX for verifyFlags if it is expected to fail CheckTransaction()\"],\n [\"Objects that are only a single string (like this one) are ignored\"],\n "
      },
      {
        "sha": "106349cefd29ab4bcd3796f4ed5e946d16b42c76",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 2,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/206a9392ea82c341a99a1814b519cf9fcf112927/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/206a9392ea82c341a99a1814b519cf9fcf112927/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=206a9392ea82c341a99a1814b519cf9fcf112927",
        "patch": "@@ -297,11 +297,41 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n         std::string strTest = test.write();\n         if (test[0].isArray())\n         {\n-            if (test.size() != 3 || !test[1].isStr() || !test[2].isStr())\n+            const bool mandatory_fields_present = test.size() >= 3 && test[1].isStr() && test[2].isStr();\n+            const bool one_by_one_fills = test.size() >= 4 ? test[3].isArray() : true;\n+            const bool max_arg_count = test.size() <= 4;\n+            if (!mandatory_fields_present || !max_arg_count || !one_by_one_fills)\n             {\n                 BOOST_ERROR(\"Bad test: \" << strTest);\n                 continue;\n             }\n+            std::vector<std::pair<unsigned int, unsigned int>> excluded_flag_settings;\n+            if (test.size() >= 4) {\n+                try {\n+                    const UniValue& fills = test[3].get_array();\n+                    for (unsigned int i = 0; i < fills.size(); ++i) {\n+                        const UniValue& fill = fills[i].get_obj();\n+                        const UniValue if_unset = fill[\"if_unset\"].get_array();\n+                        const UniValue then_unset = fill[\"then_unset\"].get_array();\n+                        excluded_flag_settings.push_back(std::make_pair(0, 0));\n+                        unsigned int& if_set_flags = excluded_flag_settings.back().first;\n+                        unsigned int& then_set_flags = excluded_flag_settings.back().second;\n+                        for (unsigned int j = 0; j < if_unset.size(); ++j) {\n+                            const auto& flag = mapFlagNames.find(if_unset[j].get_str());\n+                            if (flag == mapFlagNames.end()) BOOST_ERROR(\"Unknown Flag: \" << if_unset[j].get_str());\n+                            if_set_flags |= flag->second;\n+                        }\n+                        for (unsigned int j = 0; j < then_unset.size(); ++j) {\n+                            const auto& flag = mapFlagNames.find(then_unset[j].get_str());\n+                            if (flag == mapFlagNames.end()) BOOST_ERROR(\"Unknown Flag: \" << then_unset[j].get_str());\n+                            then_set_flags |= flag->second;\n+                        }\n+\n+                    }\n+                } catch (std::runtime_error e) {\n+                    BOOST_ERROR(\"Improperly Formatted One-By-One Fill Settings \" << strTest);\n+                }\n+            }\n \n             std::map<COutPoint, CScript> mapprevOutScriptPubKeys;\n             std::map<COutPoint, int64_t> mapprevOutValues;\n@@ -369,9 +399,27 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n             }\n \n             // Check that flags are minimal: transaction should succeed if any set flags are unset.\n+            // unset flags according to if_unset/then_unset rules and de-duplicate entries.\n+            std::set<unsigned int> flags_excluded;\n             for (auto flags_excluding_one : ExcludeIndividualFlags(verify_flags)) {\n+                // re-apply rules until result is stable\n+                unsigned int pre;\n+                do {\n+                    pre = flags_excluding_one;\n+                    for (const auto& fill_if : excluded_flag_settings) {\n+                        // check if all flags in the entry are unset\n+                        if ((fill_if.first & flags_excluding_one) == 0) {\n+                            flags_excluding_one &= ~fill_if.second;\n+                            // re-evaluate all prior rules early if changed\n+                            if (pre != flags_excluding_one) break;\n+                        }\n+                    }\n+                } while (pre != flags_excluding_one);\n+                flags_excluded.insert(flags_excluding_one);\n+            }\n+            for (auto flags_excluding_one : flags_excluded) {\n                 if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags_excluding_one, txdata, strTest, /* expect_valid */ true)) {\n-                    BOOST_ERROR(\"Too many flags set: \" << strTest);\n+                    BOOST_ERROR(\"Too many flags set: \" << FormatScriptFlags(flags_excluding_one) << \"\\n\" << strTest);\n                 }\n             }\n         }"
      }
    ]
  },
  {
    "sha": "0bfbc12381540441f7dcd310df5b270ef6cef150",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYmZiYzEyMzgxNTQwNDQxZjdkY2QzMTBkZjViMjcwZWY2Y2VmMTUw",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-12T02:26:24Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-12T02:37:06Z"
      },
      "message": "[TESTS] Add tx_invalid.json examples for BIP-119 CheckTemplateVerify",
      "tree": {
        "sha": "0489c1a7ec332e8230360d1868f8225fdadde6ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0489c1a7ec332e8230360d1868f8225fdadde6ab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0bfbc12381540441f7dcd310df5b270ef6cef150",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bfbc12381540441f7dcd310df5b270ef6cef150",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0bfbc12381540441f7dcd310df5b270ef6cef150",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bfbc12381540441f7dcd310df5b270ef6cef150/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "206a9392ea82c341a99a1814b519cf9fcf112927",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/206a9392ea82c341a99a1814b519cf9fcf112927",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/206a9392ea82c341a99a1814b519cf9fcf112927"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 116,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c634f1781f16a2f68d2b749612c69a87fe9f7d7f",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 116,
        "deletions": 0,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bfbc12381540441f7dcd310df5b270ef6cef150/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bfbc12381540441f7dcd310df5b270ef6cef150/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=0bfbc12381540441f7dcd310df5b270ef6cef150",
        "patch": "@@ -393,5 +393,121 @@\n   [\"ceafe58e0f6e7d67c0409fbbf673c84c166e3c5d3c24af58f7175b18df3bb3db\", 1, \"2 0x48 0x3045022015bd0139bcccf990a6af6ec5c1c52ed8222e03a0d51c334df139968525d2fcd20221009f9efe325476eb64c3958e4713e9eefe49bf1d820ed58d2112721b134e2a1a5303 0x21 0x0378d430274f8c5ec1321338151e9f27f4c676a008bdf8638d07c0b6be9ab35c71 0x21 0x0378d430274f8c5ec1321338151e9f27f4c676a008bdf8638d07c0b6be9ab35c71 3 CHECKMULTISIG\"]],\n   \"0100000002dbb33bdf185b17f758af243c5d3c6e164cc873f6bb9f40c0677d6e0f8ee5afce000000006b4830450221009627444320dc5ef8d7f68f35010b4c050a6ed0d96b67a84db99fda9c9de58b1e02203e4b4aaa019e012e65d69b487fdf8719df72f488fa91506a80c49a33929f1fd50121022b78b756e2258af13779c1a1f37ea6800259716ca4b7f0b87610e0bf3ab52a01ffffffffdbb33bdf185b17f758af243c5d3c6e164cc873f6bb9f40c0677d6e0f8ee5afce010000009300483045022015bd0139bcccf990a6af6ec5c1c52ed8222e03a0d51c334df139968525d2fcd20221009f9efe325476eb64c3958e4713e9eefe49bf1d820ed58d2112721b134e2a1a5303483045022015bd0139bcccf990a6af6ec5c1c52ed8222e03a0d51c334df139968525d2fcd20221009f9efe325476eb64c3958e4713e9eefe49bf1d820ed58d2112721b134e2a1a5303ffffffff01a0860100000000001976a9149bc0bbdd3024da4d0c38ed1aecf5c68dd1d3fa1288ac00000000\", \"CONST_SCRIPTCODE\"],\n \n+[\"CheckTemplateVerify (CTV) Tests\"],\n+[\"Modified Segwit OP_CTV Spend Failed if Amount Mutated\"],\n+[[[\"10bf165531fbdfac386f018d92d72dce3ad73af1f183f6fac2c7a2a1050aa51b\",\n+  0,\n+  \"0x00 0x20 0x9e650578b4f13cde08d16211f3635239e22ba3e108ba7f5fa4bd6c12f8c8219a\",\n+  155000]],\n+\"020000000001011ba50a05a1a2c7c2faf683f1f13ad73ace2dd7928d016f38acdffb315516bf100000000000000000000ae90300000000000017a9142b697af70a75926b158a2ea0aab8054eb18490ac87d00700000000000017a9143177919dae74db1c4cd3e6e69861091c6aee9eb287b80b00000000000017a91417d751e7c17c8264e90e4831fed9c47804b2bbc887a00f00000000000017a914a46167b1fbca936b56dda9710a0c16a53fd32fe687881300000000000017a914b4a5ddbdda32760d1c61dd131007fd7e67d650e187701700000000000017a91480909aab0729614b1162d86563cbfb0c71d5bc9e87581b00000000000017a914997c99e26f67463a1f9770003f90603360408bed87401f00000000000017a9149fef27cd2e724889aa522ac6b5eb35de7582727487282300000000000017a914c7c616d8323c7046de863e2301ec0c7884626e9687102700000000000017a914b590ca292351b64cbf725bad01c3ba6da808ab0b870122200a2891d90df11c7714549c76b80b29c86d544110d958a6dabcfcd5cda1612427b300000000\",\n+\"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH,WITNESS,P2SH\"],\n+\n+[\"Modified Segwit OP_CTV Spend Failed if # inputs Mutated\"],\n+[[[\"7438c73c9a554540dce173b485e888683e9ae5beae3ae94142e77ae2cc024e3c\",\n+   0,\n+   \"0x00 0x20 0xc19287614d027e87b85ace418cb0fc2d89241392370f0f7cf2ebb06b861c85f0\",\n+   155000],\n+  [\"24040d2cd61f2ecb67e9fe5634c1d90e59b6b16028ff03003cf20f398ce27e44\",\n+   0,\n+   \"1\",\n+   155000]],\n+ \"020000000001023c4e02cce27ae74241e93aaebee59a3e6888e885b473e1dc4045559a3cc73874000000000000000000447ee28c390ff23c0003ff2860b1b6590ed9c13456fee967cb2e1fd62c0d04240000000000000000000ae90300000000000017a91406651b0a47731127630ccc27d07fb9afc041846987d00700000000000017a914c758d7ce652d5ed562253ed00e9afc34ea1f76bf87b80b00000000000017a914fe8740b477b23838679c7eaa6e452e66c58a72bc87a00f00000000000017a914cc07d98fc32e2ff65f62076f2824d63bd5a1628787881300000000000017a914acfb84e8356788c7a8312194d1833e5d5677d58e87701700000000000017a91409aad9fbb6609e4486fa5b04afbbde40659388f787581b00000000000017a914ffd3dc8f12ebb700dd45a6a58914347533b6728587401f00000000000017a914781456255e72a09dfab2211dc151165c62ab7af987282300000000000017a914ee01dfa11feb2bc68b22d6909052647c8c001ec787102700000000000017a9145dd4e76cb2cef90e09f181c55fdc42717f3d948787012220cf100c0bb5dc85c104d87c31e7b57a4a7791cc2091dc87ddaac40c91edda7f6bb30000000000\",\n+ \"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH,WITNESS,P2SH\"],\n+[\"Wrong Size CTV Argument is Discouraged\"],\n+[[[\"13e313be0d1eab290bcf2b58f4ad76c3f4fd46b2ac4273c607cdc7f5a4170794\",\n+   0,\n+   \"0x00 0x20 0xaeba7cb39e708a34dd186698a80cc34e70bb92921a01f853ac691bb572b52d62\",\n+   155000]],\n+ \"02000000000101940717a4f5c7cd07c67342acb246fdf4c376adf4582bcf0b29ab1e0dbe13e3130000000000000000000ae90300000000000017a914f0ccedba146f6390e5961b2a0a39cfba046c312987d00700000000000017a91458d4792223eebb552801d6690b5985513fbddaca87b80b00000000000017a914774b6fe872b65890c610ec6edda928703fe8503e87a00f00000000000017a9148ad37662e56b5f2e472e4bdc205f0dcde8708fd787881300000000000017a9149e8680d850f172186f4e16cee442f0d0121fd46e87701700000000000017a9141394792d48889f70878ce2ee3b151de33d4b774987581b00000000000017a9142444dbb85cf5dfa3e94d2a970a4d4bb795495df687401f00000000000017a914b0437ba6b526e697e695d4f8a53482d26547b64f87282300000000000017a91408ceb5466bc28db2122f954ca59d4a4a08fc133b87102700000000000017a91486f51c990634abc769d6d9d01608ff99f93b050387010251b300000000\",\n+\"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH,WITNESS,P2SH,DISCOURAGE_UPGRADABLE_NOPS\", [\n+  {\n+    \"if_unset\":[\"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH\"],\n+    \"then_unset\":[\"DISCOURAGE_UPGRADABLE_NOPS\"]\n+  }\n+]],\n+\n+[\"Empty Stack is Rejected for CTV\"],\n+[[[\"e658e5b94eba5931faf2379a61a75a05b153648690527d35f7143bed462a6ebc\",\n+   0,\n+   \"0x00 0x20 0x6c9cc4747e7d287ac1abf8c65152a78d369213583e306b7d3163e12c561abaa2\",\n+   155000]],\n+ \"02000000000101bc6e2a46ed3b14f7357d5290866453b1055aa7619a37f2fa3159ba4eb9e558e60000000000000000000ae90300000000000017a914b038d0ca030a6d6bc4a06bda13ae1413ce96f37e87d00700000000000017a914fa5716162fb8f5f3cafdce1c1f5533e182c83f4d87b80b00000000000017a91417d10dea89621354333f4dfcbdafe18ec6a794da87a00f00000000000017a9142abb09f63aaecdfbe0e92fedc0afedf19194360187881300000000000017a914aab8b0219014272348de62cbc195e20151b7735787701700000000000017a914a507b83449359c82a195fc9bab99fa1b7c8289eb87581b00000000000017a91401ea6e7336fb9d5e5f36994eecade840ba938d0687401f00000000000017a914e5a474adbd25d66bb70c9b0b6a27f3eebf70b3f587282300000000000017a914d4ae33b227632cf0434f054782558baf9aa6e42d87102700000000000017a9147e4cca8f6c63cb7a56dd3c6edd2acbd031813de9870106b3746375685100000000\",\n+ \"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH,WITNESS,P2SH\",\n+ [{\"if_unset\": [\"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH\"],\n+   \"then_unset\": [\"DISCOURAGE_UPGRADABLE_NOPS\"]}]],\n+\n+[\"Wrong Size Stack Argument is Discouraged for CTV\"],\n+[[[\"e658e5b94eba5931faf2379a61a75a05b153648690527d35f7143bed462a6ebc\",\n+  0,\n+  \"0x00 0x20 0x6c9cc4747e7d287ac1abf8c65152a78d369213583e306b7d3163e12c561abaa2\",\n+  155000]],\n+\"02000000000101bc6e2a46ed3b14f7357d5290866453b1055aa7619a37f2fa3159ba4eb9e558e60000000000000000000ae90300000000000017a914b038d0ca030a6d6bc4a06bda13ae1413ce96f37e87d00700000000000017a914fa5716162fb8f5f3cafdce1c1f5533e182c83f4d87b80b00000000000017a91417d10dea89621354333f4dfcbdafe18ec6a794da87a00f00000000000017a9142abb09f63aaecdfbe0e92fedc0afedf19194360187881300000000000017a914aab8b0219014272348de62cbc195e20151b7735787701700000000000017a914a507b83449359c82a195fc9bab99fa1b7c8289eb87581b00000000000017a91401ea6e7336fb9d5e5f36994eecade840ba938d0687401f00000000000017a914e5a474adbd25d66bb70c9b0b6a27f3eebf70b3f587282300000000000017a914d4ae33b227632cf0434f054782558baf9aa6e42d87102700000000000017a9147e4cca8f6c63cb7a56dd3c6edd2acbd031813de98702015106b3746375685100000000\",\n+\"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH,WITNESS,P2SH,DISCOURAGE_UPGRADABLE_NOPS\",\n+[{\"if_unset\": [\"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH\"],\n+  \"then_unset\": [\"DISCOURAGE_UPGRADABLE_NOPS\"]}]],\n+\n+[\"Wrong TX Hash passed via the stack fails CTV\"],\n+[[[\"1303ae3fc607b6eb3a4da63d3d7f4722b595db87890943618e11c3905662cae4\",\n+    0,\n+    \"0x00 0x20 0x6c9cc4747e7d287ac1abf8c65152a78d369213583e306b7d3163e12c561abaa2\",\n+    155000]],\n+  \"02000000000101e4ca625690c3118e6143098987db95b522477f3d3da64d3aebb607c63fae03130000000000000000000ae90300000000000017a9145850541d205b7b1feb1bc10112f9d739fa9a7dc287d00700000000000017a914d76b85e77e20777d5ec9d7d9998ae0c062d4669087b80b00000000000017a914c79f4a39b0580e4ec90e1b4989fc6124e4135cc187a00f00000000000017a91469635f1f4c06d66591282a02303b1435ee888d9487881300000000000017a91410d3b9b2aaffae25b6098169e2dc69928849215387701700000000000017a91456e4a3e5a3a49b9a66240288e79a8a5e8e31d05587581b00000000000017a9143936403d1a70b32c1e0e6920f9cd99cbc8a8345787401f00000000000017a9146ec4fa5a4e329f9d92ea29b65fa48c6ec1470ffa87282300000000000017a914f66743d56210c98bce8a44742b2ecfa9b7f48fdb87102700000000000017a914555c65f1c355993b46003311931eb08cf457209b870220a2638b51a692e6a8b39e87c431edde4fc1ada3dedaf9665875ac8353af44c50706b3746375685100000000\",\n+  \"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH,WITNESS,P2SH\",\n+  [{\"if_unset\": [\"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH\"],\n+    \"then_unset\": [\"DISCOURAGE_UPGRADABLE_NOPS\"]}]],\n+\n+[\"Embedded CTV Impossible with Bare P2SH due to hash cycle\"],\n+[[[\"6a869fd9a0395f35e412ad3eb7fffa61a59263b1ad16aeb5fcc30e032bc3a8bf\",\n+   0,\n+   \"OP_HASH160 0x14 0x40aec8967698985eb369afd3ad3dc571110e6a10 OP_EQUAL\",\n+   155000]],\n+ \"0200000001bfa8c32b030ec3fcb5ae16adb16392a561faffb73ead12e4355f39a0d99f866a000000002322203b8d241649e612058fd2f1b4decbe9141284f0e4dd297d95b0da01a5d8791e4bb3000000000ae90300000000000017a914b04d55bbfedf606a08795fb0c2655bb3212f2bde87d00700000000000017a914d079c2cfad655234e68159422727eefa78811b4787b80b00000000000017a9145ea3edd87eb790af8051da692f4d59e5be6ffd4b87a00f00000000000017a914e17e2c4f4fcae1ef0d5ef96c740565426009ca2187881300000000000017a9144769d9f3b6fdf14f1223d9e7f11be7873bcbcde387701700000000000017a914064529bab7b89253159c9043ef128f37f78add7a87581b00000000000017a9147bae64476db031d744b442ddee9af3e60ef1e4ea87401f00000000000017a914dd2d96d0ba673c0b9d5950223c334f19f2b6f4a487282300000000000017a9148abaaa7b977855f96afacea4c79e3caf5e7482c487102700000000000017a9140dab14b1ee04aea522639ee27d29a5f6a57758c18700000000\",\n+ \"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH,P2SH\",\n+ [{\"if_unset\": [\"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH\"],\n+   \"then_unset\": [\"DISCOURAGE_UPGRADABLE_NOPS\"]}]],\n+\n+[\"CTV at pos 2 with >1 Input Fails if too few inputs\"],\n+[[[\"eeda9ea077b04abec103ffbba6bcf41cd67cdfdabe5ccc6ed766b9cd4ed4808a\",\n+  0,\n+  \"0x20 0x3e123dbe62352fa40471c195aebd3cdec43cca8728520c8a2d5737009fa05b0b OP_CHECKTEMPLATEVERIFY\",\n+  155000]],\n+\"02000000018a80d44ecdb966d76ecc5cbedadf7cd61cf4bca6bbff03c1be4ab077a09edaee0000000000000000000ae80300000000000017a9144dd991d2f69eed133bb9d16e298703c830e1fb2387d00700000000000017a9147a50ac55b0af704dfffc797c507db803488ad44787b80b00000000000017a914caab97b53be0b75526e011bc49b0101365f611b887a00f00000000000017a91448c947e1b16103782a7dcba1dd5896936fbc7d2587881300000000000017a914ff075d852727e7e32ff5e11b13d254cb553fb73287701700000000000017a914761069764474d5ef5d0e068e88e4ebe2edd2336087581b00000000000017a914cd76c979ed6421f5d39380b5eb3d0dc7f56e864b87401f00000000000017a91417e7563571166469e14275be7ef00d91927eee0387282300000000000017a9140f9ddd36a76392fec584f05b34d33282fbd4921287102700000000000017a91417603536acce13cf7496387f8169a7f832f08f4c8700000000\",\n+\"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH\",\n+[{\"if_unset\": [\"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH\"],\n+  \"then_unset\": [\"DISCOURAGE_UPGRADABLE_NOPS\"]}]],\n+\n+[\"CTV at pos 2 with >1 Input Fails if inputs in wrong order\"],\n+[[[\"eeda9ea077b04abec103ffbba6bcf41cd67cdfdabe5ccc6ed766b9cd4ed4808a\",\n+  0,\n+  \"0x20 0x3e123dbe62352fa40471c195aebd3cdec43cca8728520c8a2d5737009fa05b0b OP_CHECKTEMPLATEVERIFY\",\n+  155000],\n+  [\"b6d623f1e5eaaaa83a21739f60ac173818ce6b9e13ca18ddda74e9dbe6124c0b\", 0, \"1\", 155000]],\n+\"02000000028a80d44ecdb966d76ecc5cbedadf7cd61cf4bca6bbff03c1be4ab077a09edaee0000000000000000000b4c12e6dbe974dadd18ca139e6bce183817ac609f73213aa8aaeae5f123d6b60000000000000000000ae80300000000000017a9144dd991d2f69eed133bb9d16e298703c830e1fb2387d00700000000000017a9147a50ac55b0af704dfffc797c507db803488ad44787b80b00000000000017a914caab97b53be0b75526e011bc49b0101365f611b887a00f00000000000017a91448c947e1b16103782a7dcba1dd5896936fbc7d2587881300000000000017a914ff075d852727e7e32ff5e11b13d254cb553fb73287701700000000000017a914761069764474d5ef5d0e068e88e4ebe2edd2336087581b00000000000017a914cd76c979ed6421f5d39380b5eb3d0dc7f56e864b87401f00000000000017a91417e7563571166469e14275be7ef00d91927eee0387282300000000000017a9140f9ddd36a76392fec584f05b34d33282fbd4921287102700000000000017a91417603536acce13cf7496387f8169a7f832f08f4c8700000000\",\n+\"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH\",\n+[{\"if_unset\": [\"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH\"],\n+  \"then_unset\": [\"DISCOURAGE_UPGRADABLE_NOPS\"]}]],\n+\n+[\"CTV at pos 2 with >1 Input Fails if scriptSig of other input modified\"],\n+[[[\"eeda9ea077b04abec103ffbba6bcf41cd67cdfdabe5ccc6ed766b9cd4ed4808a\",\n+  0,\n+  \"0x20 0x3e123dbe62352fa40471c195aebd3cdec43cca8728520c8a2d5737009fa05b0b OP_CHECKTEMPLATEVERIFY\",\n+  155000],\n+  [\"b6d623f1e5eaaaa83a21739f60ac173818ce6b9e13ca18ddda74e9dbe6124c0b\", 0, \"1\", 155000]],\n+\"02000000020b4c12e6dbe974dadd18ca139e6bce183817ac609f73213aa8aaeae5f123d6b6000000000151000000008a80d44ecdb966d76ecc5cbedadf7cd61cf4bca6bbff03c1be4ab077a09edaee0000000000000000000ae80300000000000017a9144dd991d2f69eed133bb9d16e298703c830e1fb2387d00700000000000017a9147a50ac55b0af704dfffc797c507db803488ad44787b80b00000000000017a914caab97b53be0b75526e011bc49b0101365f611b887a00f00000000000017a91448c947e1b16103782a7dcba1dd5896936fbc7d2587881300000000000017a914ff075d852727e7e32ff5e11b13d254cb553fb73287701700000000000017a914761069764474d5ef5d0e068e88e4ebe2edd2336087581b00000000000017a914cd76c979ed6421f5d39380b5eb3d0dc7f56e864b87401f00000000000017a91417e7563571166469e14275be7ef00d91927eee0387282300000000000017a9140f9ddd36a76392fec584f05b34d33282fbd4921287102700000000000017a91417603536acce13cf7496387f8169a7f832f08f4c8700000000\",\n+\"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH\",\n+[{\"if_unset\": [\"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH\"],\n+  \"then_unset\": [\"DISCOURAGE_UPGRADABLE_NOPS\"]}]],\n+\n+[\"CTV at pos 1 with specific scriptsigs fails with incorrect scriptSig\"],\n+[[[\"a2522fa96033c5736f3142ff616426cd03a3d0f077f609e22c5a33a96e04e597\",\n+  0,\n+  \"0x20 0x4870387ef3dc7b392294140a323ec7b38dc138710f0931ce27f386a57128ea63 OP_CHECKTEMPLATEVERIFY\",\n+  155000],\n+  [\"b6d623f1e5eaaaa83a21739f60ac173818ce6b9e13ca18ddda74e9dbe6124c0b\", 0, \"1\", 155000]],\n+\"020000000297e5046ea9335a2ce209f677f0d0a303cd266461ff42316f73c53360a92f52a2000000000151000000000b4c12e6dbe974dadd18ca139e6bce183817ac609f73213aa8aaeae5f123d6b6000000000151000000000ae80300000000000017a9143f163a8747557345ce2e6fe00c1894f2f281795e87d00700000000000017a9144cf13dfda93a7413b7e646611735656e5457657087b80b00000000000017a914868998b49df649c37a88d48c9d4a5b37290e507287a00f00000000000017a914034f9914a77571a6396482e9881745c92c3037c687881300000000000017a914a8238003e1732e2baf4334a8546d72be99af9bae87701700000000000017a91491dbac5d67d5941115a03fc7eaec09f31a5b4dfc87581b00000000000017a914e0c0f19fec3b2993b9c116c798b5429d4515596687401f00000000000017a914d6b40d98d94530f1a1eb57614680813c81a95ccd87282300000000000017a914fb0bfb072bb79611a4323981828108a3cf54b0a687102700000000000017a9149e2d11f06ba667e981b802af10be8dabd08eafff8700000000\",\n+\"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH\",\n+[{\"if_unset\": [\"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH\"],\n+  \"then_unset\": [\"DISCOURAGE_UPGRADABLE_NOPS\"]}]],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      }
    ]
  },
  {
    "sha": "118ff53bab10120943d987b4d3fb404c76922765",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMThmZjUzYmFiMTAxMjA5NDNkOTg3YjRkM2ZiNDA0Yzc2OTIyNzY1",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-12T06:03:11Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-12T20:20:02Z"
      },
      "message": "[TESTS] Add CTV Hash Computation Unit Test & Mutation Tester",
      "tree": {
        "sha": "6eed3fd15c8aeb33adad76b390ced2da224dcd7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6eed3fd15c8aeb33adad76b390ced2da224dcd7e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/118ff53bab10120943d987b4d3fb404c76922765",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/118ff53bab10120943d987b4d3fb404c76922765",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/118ff53bab10120943d987b4d3fb404c76922765",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/118ff53bab10120943d987b4d3fb404c76922765/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0bfbc12381540441f7dcd310df5b270ef6cef150",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bfbc12381540441f7dcd310df5b270ef6cef150",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0bfbc12381540441f7dcd310df5b270ef6cef150"
      }
    ],
    "stats": {
      "total": 2424,
      "additions": 2424,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fa3dece9ef3b415737972e09278dbeef271e3918",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/118ff53bab10120943d987b4d3fb404c76922765/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/118ff53bab10120943d987b4d3fb404c76922765/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=118ff53bab10120943d987b4d3fb404c76922765",
        "patch": "@@ -18,6 +18,7 @@ JSON_TEST_FILES = \\\n   test/data/script_tests.json \\\n   test/data/base58_encode_decode.json \\\n   test/data/blockfilters.json \\\n+  test/data/ctvhash.json \\\n   test/data/key_io_valid.json \\\n   test/data/key_io_invalid.json \\\n   test/data/script_tests.json \\\n@@ -85,6 +86,7 @@ BITCOIN_TESTS =\\\n   test/compilerbug_tests.cpp \\\n   test/compress_tests.cpp \\\n   test/crypto_tests.cpp \\\n+  test/ctvhash_tests.cpp \\\n   test/cuckoocache_tests.cpp \\\n   test/denialofservice_tests.cpp \\\n   test/descriptor_tests.cpp \\"
      },
      {
        "sha": "0f13bbc9f90746970d2a50fe8bddfdc34841c70e",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/118ff53bab10120943d987b4d3fb404c76922765/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/118ff53bab10120943d987b4d3fb404c76922765/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=118ff53bab10120943d987b4d3fb404c76922765",
        "patch": "@@ -1498,6 +1498,13 @@ uint256 GetDefaultCheckTemplateVerifyHash(const TxType& tx, const uint256& outpu\n         GetDefaultCheckTemplateVerifyHashWithScript(tx, outputs_hash, sequences_hash, GetScriptSigsSHA256(tx), input_index);\n }\n \n+template\n+uint256 GetDefaultCheckTemplateVerifyHash(const CTransaction& tx, const uint256& outputs_hash, const uint256& sequences_hash,\n+                                const uint32_t input_index);\n+template\n+uint256 GetDefaultCheckTemplateVerifyHash(const CMutableTransaction& tx, const uint256& outputs_hash, const uint256& sequences_hash,\n+                                const uint32_t input_index);\n+\n template <class T>\n void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent_outputs, bool force)\n {"
      },
      {
        "sha": "46f5ffd65e73778e2eacd30ab462fa8844b96d69",
        "filename": "src/test/ctvhash_tests.cpp",
        "status": "added",
        "additions": 211,
        "deletions": 0,
        "changes": 211,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/118ff53bab10120943d987b4d3fb404c76922765/src/test/ctvhash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/118ff53bab10120943d987b4d3fb404c76922765/src/test/ctvhash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/ctvhash_tests.cpp?ref=118ff53bab10120943d987b4d3fb404c76922765",
        "patch": "@@ -0,0 +1,211 @@\n+// Copyright (c) 2013-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/tx_check.h>\n+#include <consensus/validation.h>\n+#include <hash.h>\n+#include <script/interpreter.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <test/data/ctvhash.json.h>\n+#include <test/util/setup_common.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <version.h>\n+\n+#include <iostream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <univalue.h>\n+\n+UniValue read_json(const std::string& jsondata);\n+\n+BOOST_FIXTURE_TEST_SUITE(ctvhash_tests, BasicTestingSetup)\n+\n+// Goal: check that CTV Hash Functions generate correct hash\n+BOOST_AUTO_TEST_CASE(ctvhash_from_data)\n+{\n+    UniValue tests = read_json(std::string(json_tests::ctvhash, json_tests::ctvhash + sizeof(json_tests::ctvhash)));\n+\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        UniValue test = tests[idx];\n+        std::string strTest = test.write();\n+        // comment\n+        if (test.isStr())\n+            continue;\n+        else if (test.isObject()) {\n+            std::string raw_tx;\n+            std::vector<uint256> hash;\n+            std::vector<uint32_t> spend_index;\n+            try {\n+                auto& hash_arr = test[\"result\"].get_array();\n+                for (size_t i = 0; i < hash_arr.size(); ++i) {\n+                    hash.emplace_back();\n+                    hash.back().SetHex(hash_arr[i].get_str());\n+                    // reverse because python's sha256().digest().hex() is\n+                    // backwards\n+                    std::reverse(hash.back().begin(), hash.back().end());\n+                }\n+            } catch (...) {\n+                BOOST_ERROR(\"Bad test: Results could not be deserialized\" << strTest);\n+                break;\n+            }\n+            try {\n+                auto& spend_index_arr = test[\"spend_index\"].get_array();\n+                for (size_t i = 0; i < spend_index_arr.size(); ++i) {\n+                    spend_index.emplace_back(static_cast<uint32_t>(spend_index_arr[i].get_int64()));\n+                }\n+            } catch (...) {\n+                BOOST_ERROR(\"Bad test: spend_index could not be deserialized\" << strTest);\n+                break;\n+            }\n+            if (spend_index.size() != hash.size()) {\n+                BOOST_ERROR(\"Bad test: Spend Indexes not same length as Result Hashes: \" << strTest);\n+                break;\n+            }\n+            CMutableTransaction tx;\n+            try {\n+                raw_tx = test[\"hex_tx\"].get_str();\n+                // deserialize test data\n+                CDataStream stream(ParseHex(raw_tx), SER_NETWORK, PROTOCOL_VERSION);\n+                tx = CMutableTransaction(deserialize, stream);\n+            } catch (...) {\n+                BOOST_ERROR(\"Bad test, couldn't deserialize hex_tx: \" << strTest);\n+                continue;\n+            }\n+            PrecomputedTransactionData data{tx};\n+            for (size_t i = 0; i < hash.size(); ++i) {\n+                uint256 sh = GetDefaultCheckTemplateVerifyHash(tx, data.m_outputs_single_hash, data.m_sequences_single_hash, spend_index[i]);\n+                if (sh != hash[i]) {\n+                    BOOST_ERROR(\"Expected: \" << sh << \" Got: \" << hash[i] << \" For:\\n\"\n+                                             << strTest);\n+                }\n+            }\n+            // Change all of the outpoints and there should be no difference.\n+            FastRandomContext fr;\n+\n+            for (auto i = 0; i < 200; ++i) {\n+                CMutableTransaction txc = tx;\n+                bool hash_will_change = false;\n+                // do n mutations, 50% of being 1, 50% chance of being 2-11\n+                const uint64_t n_mutations = fr.randbool()? (fr.randrange(10)+2) : 1;\n+                for (uint64_t j = 0; j < n_mutations; ++j) {\n+                    // on the first 50 passes, modify in ways that will not change hash\n+                    const int mutate_field = i < 50 ? fr.randrange(2) : fr.randrange(10);\n+                    switch (mutate_field) {\n+                    case 0: {\n+                        // no need to rejection sample on 256 bits\n+                        auto which = fr.randrange(tx.vin.size());\n+                        tx.vin[which].prevout.hash = fr.rand256();\n+                        tx.vin[which].prevout.n = fr.rand32();\n+                        break;\n+                    }\n+                    case 1: {\n+                        auto which = fr.randrange(tx.vin.size());\n+                        tx.vin[which].scriptWitness.stack.push_back(fr.randbytes(500));\n+                        break;\n+                    }\n+                    case 2: {\n+                        // Mutate a scriptSig\n+                        txc.vin[0].scriptSig.push_back('x');\n+                        hash_will_change = true;\n+                        break;\n+                    }\n+                    case 3: {\n+                        // Mutate a sequence\n+                        do {\n+                            txc.vin.back().nSequence = fr.rand32();\n+                        } while (txc.vin.back().nSequence == tx.vin.back().nSequence);\n+                        hash_will_change = true;\n+                        break;\n+                    }\n+                    case 4: {\n+                        // Mutate nVersion\n+                        do {\n+                            txc.nVersion = static_cast<int32_t>(fr.rand32());\n+                        } while (txc.nVersion == tx.nVersion);\n+                        hash_will_change = true;\n+                        break;\n+                    }\n+                    case 5: {\n+                        // Mutate output amount\n+                        auto which = fr.randrange(tx.vout.size());\n+                        txc.vout[which].nValue += 1;\n+                        hash_will_change = true;\n+                        break;\n+                    }\n+                    case 6: {\n+                        // Mutate output script\n+                        auto which = fr.randrange(tx.vout.size());\n+                        txc.vout[which].scriptPubKey.push_back('x');\n+                        hash_will_change = true;\n+                        break;\n+                    }\n+                    case 7: {\n+                        // Mutate nLockTime\n+                        do {\n+                            txc.nLockTime = fr.rand32();\n+                        } while (txc.nLockTime == tx.nLockTime);\n+                        hash_will_change = true;\n+                        break;\n+                    }\n+                    case 8: {\n+                        break;\n+                        // don't add and remove for a mutation otherwise it may end up valid\n+                        if (i % 2) {\n+                            txc.vout.emplace_back();\n+                            hash_will_change = true;\n+                        } else if (txc.vout.size()!=1) {\n+                            txc.vout.pop_back();\n+                            hash_will_change = true;\n+                        }\n+                        break;\n+                    }\n+                    case 9: {\n+                        break;\n+                        // don't add and remove for a mutation otherwise it may end up valid\n+                        if (i % 2) {\n+                            txc.vin.emplace_back();\n+                            hash_will_change = true;\n+                        } else if (txc.vin.size()!=1) {\n+                            txc.vin.pop_back();\n+                            hash_will_change = true;\n+                        }\n+                        break;\n+                    }\n+                    default:\n+                        assert(0);\n+                    }\n+                }\n+                PrecomputedTransactionData data_txc{txc};\n+                // iterate twice, one time with the correct spend indexes, one time with incorrect.\n+                for (auto use_random_index = 0; use_random_index < 2; ++use_random_index) {\n+                    hash_will_change |= use_random_index != 0;\n+                    for (size_t i = 0; i < hash.size(); ++i) {\n+                        uint32_t index{spend_index[i]};\n+                        while (use_random_index && index == spend_index[i]) {\n+                            index = fr.rand32();\n+                        }\n+                        uint256 sh = GetDefaultCheckTemplateVerifyHash(txc, data_txc.m_outputs_single_hash, data_txc.m_sequences_single_hash, index);\n+                        const bool hash_equals = sh == hash[i];\n+                        if (hash_will_change && hash_equals) {\n+                            BOOST_ERROR(\"Expected: NOT \" << hash[i] << \" Got: \" << sh << \" For:\\n\"\n+                                                         << strTest);\n+                        } else if (!hash_will_change && !hash_equals) {\n+                            BOOST_ERROR(\"Expected: \" << hash[i] << \" Got: \" << sh << \" For:\\n\"\n+                                                     << strTest);\n+                        }\n+                    }\n+                }\n+            }\n+\n+\n+        } else {\n+            BOOST_ERROR(\"Bad test: \" << strTest);\n+            continue;\n+        }\n+    }\n+}\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "9cbc6b8f0893e51456bb84926cc0c31f2ddfa52a",
        "filename": "src/test/data/ctvhash.json",
        "status": "added",
        "additions": 2204,
        "deletions": 0,
        "changes": 2204,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/118ff53bab10120943d987b4d3fb404c76922765/src/test/data/ctvhash.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/118ff53bab10120943d987b4d3fb404c76922765/src/test/data/ctvhash.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/ctvhash.json?ref=118ff53bab10120943d987b4d3fb404c76922765"
      }
    ]
  }
]