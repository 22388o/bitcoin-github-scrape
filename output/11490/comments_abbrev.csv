sipa,2017-10-13T01:55:09Z,"I've spent some time verifying the logic, and it looks very good.\n\nI briefly misunderstood it to mean that if a peer makes _progress_ during the 20 minute window, it would be extended. That would have been a problem (an incompatible chain that has less work but does grow continuously), but it's not what happens (it requires reaching the same amount of work as we had at the beginning of the win",https://github.com/bitcoin/bitcoin/pull/11490#issuecomment-336328641,336328641,
sdaftuar,2017-10-13T13:16:01Z,"Thanks for the review.  I've pushed up a couple quick fixes for the nits.  Will work on a test, as well as trying to implement a suggestion @gmaxwell gave me offline for improving the behavior in the situation where none of our peers are giving us any block announcements.",https://github.com/bitcoin/bitcoin/pull/11490#issuecomment-336449305,336449305,
sdaftuar,2017-10-19T17:23:24Z,Squashed (https://github.com/sdaftuar/bitcoin/commits/11490.1 -> 032dc531b911a0c0ea570aa74531508f54a36073),https://github.com/bitcoin/bitcoin/pull/11490#issuecomment-337978038,337978038,
jonasschnelli,2017-10-19T19:03:51Z,"Travis found:\n```\ntest/DoS_tests.cpp(80): error in ""outbound_slow_chain_eviction"": check dummyNode1.fDisconnect == true failed\n```",https://github.com/bitcoin/bitcoin/pull/11490#issuecomment-338005968,338005968,
sdaftuar,2017-10-19T21:02:45Z,Unit test issue should be fixed now.,https://github.com/bitcoin/bitcoin/pull/11490#issuecomment-338037130,338037130,
sdaftuar,2017-10-20T00:32:33Z,"Addressed some of @promag's nits at https://github.com/sdaftuar/bitcoin/commits/11490.2, squashed -> 39e0c8e",https://github.com/bitcoin/bitcoin/pull/11490#issuecomment-338074263,338074263,
sdaftuar,2017-10-24T13:43:48Z,"@ryanofsky Thanks for the review; I've addressed all but one of your comments, which I'm still thinking about.",https://github.com/bitcoin/bitcoin/pull/11490#issuecomment-338994557,338994557,
sdaftuar,2017-10-24T16:20:34Z,Squashed https://github.com/sdaftuar/bitcoin/commits/11490.3 -> 9dafb45,https://github.com/bitcoin/bitcoin/pull/11490#issuecomment-339047598,339047598,
sdaftuar,2017-10-24T20:43:12Z,Updated to address latest comments from @theuni.,https://github.com/bitcoin/bitcoin/pull/11490#issuecomment-339124918,339124918,
achow101,2017-10-25T04:09:19Z,utACK 011423049270dc288bb99d921620f9e0ba0bb43c Needs squash,https://github.com/bitcoin/bitcoin/pull/11490#issuecomment-339208519,339208519,
sdaftuar,2017-10-25T15:55:15Z,Squashed  https://github.com/sdaftuar/bitcoin/commits/11490.4 -> d6c4ad762a1f369a02367bfc18a79e79ab913857,https://github.com/bitcoin/bitcoin/pull/11490#issuecomment-339378627,339378627,
gmaxwell,2017-10-25T19:22:41Z,"ACK.  Looks good and I've been running it on a node for a couple days, seen some getheaders but no disconnections yet, though I've started disconnecting healthy outbound peers with the hope of finding some that fail naturally. :)",https://github.com/bitcoin/bitcoin/pull/11490#issuecomment-339442188,339442188,
gmaxwell,2017-10-26T03:22:14Z,"After a kicking all my outbounds every couple hours, I eventually hit on this disconnecting a peer... logs show that it was obviously broken. Good job patch.",https://github.com/bitcoin/bitcoin/pull/11490#issuecomment-339539581,339539581,
jnewbery,2017-10-26T17:48:50Z,utACK 453545ffb5b2843757e6644db98f4e8ac11092d2,https://github.com/bitcoin/bitcoin/pull/11490#issuecomment-339745378,339745378,
sdaftuar,2017-10-26T17:53:17Z,"@jnewbery pointed out to that the functional test didn't actually need a change, due to protections given to manual connections (and every connection in regtest is a manual connection).  So I reverted the change to minchainwork and just added a comment that explains the situation.  Also fixed a comment typo that he pointed out in the unit test.\n\nSquashed https://github.com/sdaftuar/bitcoin/com",https://github.com/bitcoin/bitcoin/pull/11490#issuecomment-339746686,339746686,
jnewbery,2017-10-26T18:25:46Z,utACK e065249c014a070a8799b2ff947af5b8f012c5c1,https://github.com/bitcoin/bitcoin/pull/11490#issuecomment-339755963,339755963,
sipa,2017-10-13T00:40:18Z,Unused variable,https://github.com/bitcoin/bitcoin/pull/11490#discussion_r144443566,144443566,src/net_processing.cpp
sipa,2017-10-13T00:48:50Z,Nit: same line,https://github.com/bitcoin/bitcoin/pull/11490#discussion_r144444476,144444476,src/net_processing.cpp
gmaxwell,2017-10-13T09:17:39Z,"I think this needs to be backed off a bit:  Consider-- imagine we start and are fully synced up, but we are still in IsInitialBlockDownload because the network has been slow and so the tip's timestamp is a ways back.  Then we have a peer we get headers from who is a single block behind us.   This would disconnect them, and I think that is probably undesirable.\n\nIt's probably a good idea to rev",https://github.com/bitcoin/bitcoin/pull/11490#discussion_r144503759,144503759,src/net_processing.cpp
sdaftuar,2017-10-13T13:14:27Z,"I guess with the second commit, we will eventually disconnect some peers if they stay on chains with less work than our tip.  So I think we could just leave this as nMinimumChainWork, to protect against the case that all our peers only have incomplete/bogus chains (which wouldn't be prevented by the second commit).",https://github.com/bitcoin/bitcoin/pull/11490#discussion_r144549214,144549214,src/net_processing.cpp
TheBlueMatt,2017-10-18T20:23:32Z,"I believe this adds a new invariant (currently true), that we shall never send a GETHEADERS or do something which expects, as a result, a HEADERS message, which is not MAX_HEADERS_RESULT if it doesn't end with the peer's tip (ie no GETHEADERS with hashStop of not-their-tip, or at least not when in IBD/before we've finished syncing the state of another peer). I don't think this is bad, but it shoul",https://github.com/bitcoin/bitcoin/pull/11490#discussion_r145531028,145531028,src/net_processing.cpp
TheBlueMatt,2017-10-18T22:13:07Z,"new code should have the m_ prefix here (and other places), and probably drop the hungarian type prefix.",https://github.com/bitcoin/bitcoin/pull/11490#discussion_r145557409,145557409,src/net_processing.cpp
TheBlueMatt,2017-10-18T23:21:17Z,"Ugh, just for a print?",https://github.com/bitcoin/bitcoin/pull/11490#discussion_r145568180,145568180,src/net_processing.cpp
sdaftuar,2017-10-19T15:54:48Z,"> I believe this adds a new invariant (currently true), that we shall never send a GETHEADERS or do something which expects, as a result, a HEADERS message, which is not MAX_HEADERS_RESULT if it doesn't end with the peer's tip (ie no GETHEADERS with hashStop of not-their-tip, or at least not when in IBD/before we've finished syncing the state of another peer). I don't think this is bad, but it sho",https://github.com/bitcoin/bitcoin/pull/11490#discussion_r145744064,145744064,src/net_processing.cpp
sdaftuar,2017-10-19T16:59:09Z,"agreed, chucking it",https://github.com/bitcoin/bitcoin/pull/11490#discussion_r145761027,145761027,src/net_processing.cpp
promag,2017-10-19T23:07:59Z,`int -= bool`?,https://github.com/bitcoin/bitcoin/pull/11490#discussion_r145845983,145845983,src/net_processing.cpp
promag,2017-10-19T23:10:16Z,Remove since this is easily calculated by counting nodes with `m_protect_from_disconnect`?,https://github.com/bitcoin/bitcoin/pull/11490#discussion_r145846296,145846296,src/net_processing.cpp
promag,2017-10-19T23:12:44Z,`_FROM_DISCONNECT`?,https://github.com/bitcoin/bitcoin/pull/11490#discussion_r145846645,145846645,src/net_processing.h
promag,2017-10-19T23:26:27Z,"More verbose but IMO more clear:\n```cpp\nif (state->m_protect_from_disconnect) {\n    assert(g_outbound_peers_with_protect_from_disconnect > 0);\n    --g_outbound_peers_with_protect_from_disconnect;\n}\n```",https://github.com/bitcoin/bitcoin/pull/11490#discussion_r145848428,145848428,src/net_processing.cpp
promag,2017-10-19T23:28:11Z,Swap conditions as the second is faster?,https://github.com/bitcoin/bitcoin/pull/11490#discussion_r145848655,145848655,src/net_processing.cpp
promag,2017-10-19T23:28:26Z,Remove extra space.,https://github.com/bitcoin/bitcoin/pull/11490#discussion_r145848695,145848695,src/net_processing.cpp
promag,2017-10-19T23:34:18Z,Remove extra space.,https://github.com/bitcoin/bitcoin/pull/11490#discussion_r145849488,145849488,src/net_processing.cpp
sdaftuar,2017-10-20T00:10:15Z,By looping over all the CNodeState objects when this value is needed?  I don't think that makes sense.  Note that tracking the value here is analogous to what we do with `nPeersWithValidatedDownloads` and `nPreferredDownload`.,https://github.com/bitcoin/bitcoin/pull/11490#discussion_r145853857,145853857,src/net_processing.cpp
sdaftuar,2017-10-20T00:12:03Z,I was following the pattern already in use in the lines above (`nPreferredDownload -= state->fPreferredDownload`).  But I can change to something like what you suggest if this is frowned upon for some reason.,https://github.com/bitcoin/bitcoin/pull/11490#discussion_r145854096,145854096,src/net_processing.cpp
sdaftuar,2017-10-20T00:13:44Z,"I don't think this really matters?  In the steady state (ie after we've caught up from initial sync), the second condition will generally be true, while the first condition will be false.",https://github.com/bitcoin/bitcoin/pull/11490#discussion_r145854280,145854280,src/net_processing.cpp
TheBlueMatt,2017-10-20T00:16:00Z,"> if we receive fewer than MAX_HEADERS_RESULTS, then we have no reason to request more headers in order to update pindexBestKnownBlock. Note that in the logic below, we are using pindexBestKnownBlock, not pindexLast.\n\nI'm confused, then. If we randomly decide to request the header at height 1 in the middle of syncing our peer's header chain, we'd do fine in the rest of the ::HEADERS handling h",https://github.com/bitcoin/bitcoin/pull/11490#discussion_r145854518,145854518,src/net_processing.cpp
sdaftuar,2017-10-20T01:09:00Z,"Ah, you're right about that case -- I was thinking of the case where we send a random getheaders after we've already synced the chain, and therefore updated pindexBestKnownBlock to be some recent-ish thing.\n\nI guess it is true that if you just added a random getheaders message in the middle of initial sync, you might not break the sync logic, but this new logic would cause a disconnect...  I c",https://github.com/bitcoin/bitcoin/pull/11490#discussion_r145859850,145859850,src/net_processing.cpp
ryanofsky,2017-10-23T19:58:25Z,"In commit ""Disconnecting from bad outbound peers in IBD""\n\nCan you update comment to say why this is checking against nMinimumChainWork (and not chainActive.Tip()->nChainWork)?",https://github.com/bitcoin/bitcoin/pull/11490#discussion_r146376617,146376617,src/net_processing.cpp
ryanofsky,2017-10-23T20:06:59Z,"In commit ""Disconnecting from bad outbound peers in IBD""\n\nA comment saying why -whitelist is needed would be helfpul I think",https://github.com/bitcoin/bitcoin/pull/11490#discussion_r146378731,146378731,test/functional/minchainwork.py
ryanofsky,2017-10-23T20:19:14Z,"In commit ""Permit disconnection of outbound peers on bad/slow chains""\n\nI think you should do something to more clearly group these variables together. You could use doxygen grouping syntax:\n\n```c++\n//! State used to enforce CHAIN_SYNC_TIMEOUT.\n//! @{\n... variable declarations here ...\n//! @}\n```\n\nYou could also give them a common prefix like `m_sync_timeout_enable` / `m_sync_",https://github.com/bitcoin/bitcoin/pull/11490#discussion_r146381766,146381766,src/net_processing.cpp
ryanofsky,2017-10-23T20:40:31Z,"In commit ""Permit disconnection of outbound peers on bad/slow chains""\n\nIt seems like it could be good to have an `pto->isOutbound()` helper returning `!pto->fInbound && !pto->m_manual_connection && !pto->fFeeler && !pto->fOneShot` so this long string of checks doesn't need to be repeated here and above in getheaders.",https://github.com/bitcoin/bitcoin/pull/11490#discussion_r146387299,146387299,src/net_processing.cpp
ryanofsky,2017-10-23T20:48:48Z,"In commit ""Permit disconnection of outbound peers on bad/slow chains""\n\nInstead of ""if their chain lags behind ours"" maybe be more specific and say ""if they don't announce a block with as much work as the current tip within CHAIN_SYNC_TIMEOUT+HEADERS_RESPONSE_TIME seconds.""",https://github.com/bitcoin/bitcoin/pull/11490#discussion_r146389459,146389459,src/net_processing.cpp
ryanofsky,2017-10-23T21:08:56Z,"In commit ""Permit disconnection of outbound peers on bad/slow chains"":\n\nI don't see why the first and second branches of this if/else are distinct. It seems like you could unite them and drop unneeded checks with:\n\n```c++\nif (!state.m_header_with_required_work || (state.pindexBestKnownBlock && state.pindexBestKnownBlock->nChainWork >= state.m_header_with_required_work->nChainWork) {\n  ",https://github.com/bitcoin/bitcoin/pull/11490#discussion_r146394614,146394614,src/net_processing.cpp
ryanofsky,2017-10-23T21:34:58Z,"In commit ""Add unit test for outbound peer eviction""\n\nMaybe check dummyNode1.vSendMsg size or contents to see if there actually was a getheaders.",https://github.com/bitcoin/bitcoin/pull/11490#discussion_r146400447,146400447,src/test/DoS_tests.cpp
sdaftuar,2017-10-24T13:22:36Z,"Hm, I'll think about this.  I haven't quite convinced myself yet that there are no edge-case differences between your simplification and my original patch but you may be right.",https://github.com/bitcoin/bitcoin/pull/11490#discussion_r146557036,146557036,src/net_processing.cpp
promag,2017-10-24T14:47:22Z,"Does it make sense to avoid the push above:\nhttps://github.com/bitcoin/bitcoin/blob/e9d58023aef97d954b7a75da806ee4f22c9760c3/src/net_processing.cpp#L2332\nnow that the node will disconnect?\n\nEdit: nevermind, since this is protected with `nCount != MAX_HEADERS_RESULTS`.",https://github.com/bitcoin/bitcoin/pull/11490#discussion_r146585070,146585070,src/net_processing.cpp
ryanofsky,2017-10-24T16:17:11Z,"Could maybe be more specific about the timeouts in the description. Instead of ""T in the future"", could write ""CHAIN_SYNC_TIMEOUT seconds in the future"", instead of ""bump the timeout"" could write ""reset the timeout"", instead of ""new shorter timeout"" could refer to HEADERS_RESPONSE_TIME.",https://github.com/bitcoin/bitcoin/pull/11490#discussion_r146614615,146614615,src/net_processing.cpp
ryanofsky,2017-10-24T16:20:22Z,"Thanks. New ""compare their tip"" text might make a little more sense as part of the ""peer has too little work"" comment below rather than the ""no more headers to fetch from this peer"" comment up here.",https://github.com/bitcoin/bitcoin/pull/11490#discussion_r146615542,146615542,src/net_processing.cpp
theuni,2017-10-24T17:27:23Z,"I'm unsure if it would be possible to get here without setting a pindexBestKnownBlock, but please double-check to be safe: ```if (nodestate->pindexBestKnownBlock && ...```",https://github.com/bitcoin/bitcoin/pull/11490#discussion_r146633913,146633913,src/net_processing.cpp
sdaftuar,2017-10-24T17:41:07Z,Done,https://github.com/bitcoin/bitcoin/pull/11490#discussion_r146637859,146637859,src/net_processing.cpp
sdaftuar,2017-10-24T17:41:17Z,Done,https://github.com/bitcoin/bitcoin/pull/11490#discussion_r146637896,146637896,src/net_processing.cpp
theuni,2017-10-24T18:36:19Z,"```nodestate->pindexBestKnownBlock``` needs a nullptr check here too. Though after a quick look, it doesn't look like we can get here without a pindexBestKnownBlock. If that's the case (I haven't traced it fully) an assert may make more sense.",https://github.com/bitcoin/bitcoin/pull/11490#discussion_r146653950,146653950,src/net_processing.cpp
theuni,2017-10-24T18:57:09Z,"Can this be factored out into a function? It seems we really only need to call it when we get new headers, or when a timer expires. Moving it out will make it easier to break up the SendMessages monster down the road.",https://github.com/bitcoin/bitcoin/pull/11490#discussion_r146659652,146659652,src/net_processing.cpp
theuni,2017-10-24T19:13:56Z,This name is really deceiving. Maybe IsOutboundDisconnectionCandidate?,https://github.com/bitcoin/bitcoin/pull/11490#discussion_r146664027,146664027,src/net_processing.cpp
theuni,2017-10-24T19:36:32Z,"I believe peers can avoid being added as disconnection candidates if they just never respond to requests for blocks/headers (pindexBestKnownBlock is unset). In that case (assuming the ""Start block sync"" fired off an initial GETHEADERS above), should the clock also start here if pindexBestKnownBlock is null?\n\nNote: This comment conflicts with the one above about possibly asserting pindexBestKno",https://github.com/bitcoin/bitcoin/pull/11490#discussion_r146669594,146669594,src/net_processing.cpp
sdaftuar,2017-10-24T20:06:47Z,"Yeah it should be impossible due to the call to UpdateBlockAvailability() above, but I'll add the nullptr check anyway.",https://github.com/bitcoin/bitcoin/pull/11490#discussion_r146677077,146677077,src/net_processing.cpp
achow101,2017-10-24T20:26:18Z,"If they don't respond, doesn't the timeout just expire and pindexBestKnownBlock doesn't matter?",https://github.com/bitcoin/bitcoin/pull/11490#discussion_r146682015,146682015,src/net_processing.cpp
sdaftuar,2017-10-24T20:31:07Z,"~Nice catch, thanks!~\n\nActually I misread -- I think if a peer just never responds to a headers request, then (a) they won't be protected from this logic (because we only protect peers who give us headers with work at least equal to our tip), and (b) we'll drop into this else if clause if `m_timeout == 0`, ie if we've never set a timeout.  The rest of the condition is for the case where we had",https://github.com/bitcoin/bitcoin/pull/11490#discussion_r146683222,146683222,src/net_processing.cpp
sdaftuar,2017-10-24T20:42:15Z,Done,https://github.com/bitcoin/bitcoin/pull/11490#discussion_r146686279,146686279,src/net_processing.cpp
sdaftuar,2017-10-24T20:42:19Z,done,https://github.com/bitcoin/bitcoin/pull/11490#discussion_r146686294,146686294,src/net_processing.cpp
theuni,2017-10-24T20:54:24Z,"ok, agreed.",https://github.com/bitcoin/bitcoin/pull/11490#discussion_r146689606,146689606,src/net_processing.cpp
