[
  {
    "sha": "ca62563df341786d1d1809a037d8b592924e78c4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTYyNTYzZGYzNDE3ODZkMWQxODA5YTAzN2Q4YjU5MjkyNGU3OGM0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-08T16:56:19Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-13T16:24:44Z"
      },
      "message": "Add a generic approach for (de)serialization of objects using code in other classes\n\nThis adds the (internal) Wrapper class, and the Using function that uses it. Given\na class F that implements Ser(stream, const object&) and Unser(stream, object&)\nfunctions, this permits writing e.g. READWRITE(Using<F>(object)).",
      "tree": {
        "sha": "ceed2c69361857a6c44cfc33aec8c99c8782dab0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ceed2c69361857a6c44cfc33aec8c99c8782dab0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca62563df341786d1d1809a037d8b592924e78c4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca62563df341786d1d1809a037d8b592924e78c4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca62563df341786d1d1809a037d8b592924e78c4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca62563df341786d1d1809a037d8b592924e78c4/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8e79958a7b2a0bf1b02adcce9f4d811eac37dfc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8e79958a7b2a0bf1b02adcce9f4d811eac37dfc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8e79958a7b2a0bf1b02adcce9f4d811eac37dfc"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 26,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fd8626007a00695842c300f3f09c84a29eaa6de6",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca62563df341786d1d1809a037d8b592924e78c4/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca62563df341786d1d1809a037d8b592924e78c4/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=ca62563df341786d1d1809a037d8b592924e78c4",
        "patch": "@@ -442,6 +442,32 @@ I ReadVarInt(Stream& is)\n     }\n }\n \n+/** Simple wrapper class to serialize objects using a formatter; used by Using(). */\n+template<typename Formatter, typename T>\n+class Wrapper\n+{\n+    static_assert(std::is_lvalue_reference<T>::value, \"Wrapper needs an lvalue reference type T\");\n+protected:\n+    T m_object;\n+public:\n+    explicit Wrapper(T obj) : m_object(obj) {}\n+    template<typename Stream> void Serialize(Stream &s) const { Formatter().Ser(s, m_object); }\n+    template<typename Stream> void Unserialize(Stream &s) { Formatter().Unser(s, m_object); }\n+};\n+\n+/** Cause serialization/deserialization of an object to be done using a specified formatter class.\n+ *\n+ * To use this, you need a class Formatter that has public functions Ser(stream, const object&) for\n+ * serialization, and Unser(stream, object&) for deserialization. Serialization routines (inside\n+ * READWRITE, or directly with << and >> operators), can then use Using<Formatter>(object).\n+ *\n+ * This works by constructing a Wrapper<Formatter, T>-wrapped version of object, where T is\n+ * const during serialization, and non-const during deserialization, which maintains const\n+ * correctness.\n+ */\n+template<typename Formatter, typename T>\n+static inline Wrapper<Formatter, T&> Using(T&& t) { return Wrapper<Formatter, T&>(t); }\n+\n #define VARINT(obj, ...) WrapVarInt<__VA_ARGS__>(REF(obj))\n #define COMPACTSIZE(obj) CCompactSize(REF(obj))\n #define LIMITED_STRING(obj,n) LimitedString< n >(REF(obj))"
      }
    ]
  },
  {
    "sha": "2f1b2f4ed044fe005e5a6c1b55e95822e83c16df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZjFiMmY0ZWQwNDRmZTAwNWU1YTZjMWI1NWU5NTgyMmU4M2MxNmRm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-08T17:05:44Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-13T16:24:44Z"
      },
      "message": "Convert VARINT to the formatter/Using approach",
      "tree": {
        "sha": "07b73b5085a12693a15fe4e156116057f9b72831",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07b73b5085a12693a15fe4e156116057f9b72831"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f1b2f4ed044fe005e5a6c1b55e95822e83c16df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f1b2f4ed044fe005e5a6c1b55e95822e83c16df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f1b2f4ed044fe005e5a6c1b55e95822e83c16df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f1b2f4ed044fe005e5a6c1b55e95822e83c16df/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca62563df341786d1d1809a037d8b592924e78c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca62563df341786d1d1809a037d8b592924e78c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca62563df341786d1d1809a037d8b592924e78c4"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 10,
      "deletions": 17
    },
    "files": [
      {
        "sha": "56c324c527791950234629036d8329e4dcdbf309",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 10,
        "deletions": 17,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f1b2f4ed044fe005e5a6c1b55e95822e83c16df/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f1b2f4ed044fe005e5a6c1b55e95822e83c16df/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=2f1b2f4ed044fe005e5a6c1b55e95822e83c16df",
        "patch": "@@ -468,26 +468,22 @@ class Wrapper\n template<typename Formatter, typename T>\n static inline Wrapper<Formatter, T&> Using(T&& t) { return Wrapper<Formatter, T&>(t); }\n \n-#define VARINT(obj, ...) WrapVarInt<__VA_ARGS__>(REF(obj))\n+#define VARINT(obj, ...) Using<VarIntFormatter<__VA_ARGS__>>(obj)\n #define COMPACTSIZE(obj) CCompactSize(REF(obj))\n #define LIMITED_STRING(obj,n) LimitedString< n >(REF(obj))\n \n-template<VarIntMode Mode, typename I>\n-class CVarInt\n+/** Serialization wrapper class for integers in VarInt format. */\n+template<VarIntMode Mode=VarIntMode::DEFAULT>\n+struct VarIntFormatter\n {\n-protected:\n-    I &n;\n-public:\n-    explicit CVarInt(I& nIn) : n(nIn) { }\n-\n-    template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        WriteVarInt<Stream,Mode,I>(s, n);\n+    template<typename Stream, typename I> void Ser(Stream &s, I v)\n+    {\n+        WriteVarInt<Stream,Mode,typename std::remove_cv<I>::type>(s, v);\n     }\n \n-    template<typename Stream>\n-    void Unserialize(Stream& s) {\n-        n = ReadVarInt<Stream,Mode,I>(s);\n+    template<typename Stream, typename I> void Unser(Stream& s, I& v)\n+    {\n+        v = ReadVarInt<Stream,Mode,typename std::remove_cv<I>::type>(s);\n     }\n };\n \n@@ -572,9 +568,6 @@ class LimitedString\n     }\n };\n \n-template<VarIntMode Mode=VarIntMode::DEFAULT, typename I>\n-CVarInt<Mode, I> WrapVarInt(I& n) { return CVarInt<Mode, I>{n}; }\n-\n template<typename I>\n BigEndian<I> WrapBigEndian(I& n) { return BigEndian<I>(n); }\n "
      }
    ]
  },
  {
    "sha": "9b66083788581c264a097e26795561cb3eac455d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjY2MDgzNzg4NTgxYzI2NGEwOTdlMjY3OTU1NjFjYjNlYWM0NTVk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-08T03:27:39Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-13T16:24:44Z"
      },
      "message": "Convert chain to new serialization",
      "tree": {
        "sha": "2bb8575a5ce5e01982b3c12c45ddc32023c9591d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2bb8575a5ce5e01982b3c12c45ddc32023c9591d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b66083788581c264a097e26795561cb3eac455d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b66083788581c264a097e26795561cb3eac455d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b66083788581c264a097e26795561cb3eac455d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b66083788581c264a097e26795561cb3eac455d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2f1b2f4ed044fe005e5a6c1b55e95822e83c16df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f1b2f4ed044fe005e5a6c1b55e95822e83c16df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f1b2f4ed044fe005e5a6c1b55e95822e83c16df"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 25,
      "deletions": 33
    },
    "files": [
      {
        "sha": "48bcb8bfddd906c47d4a1722e9dde01638b35f0b",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 25,
        "deletions": 33,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b66083788581c264a097e26795561cb3eac455d/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b66083788581c264a097e26795561cb3eac455d/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=9b66083788581c264a097e26795561cb3eac455d",
        "patch": "@@ -48,17 +48,15 @@ class CBlockFileInfo\n     uint64_t nTimeFirst;       //!< earliest time of block in file\n     uint64_t nTimeLast;        //!< latest time of block in file\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(VARINT(nBlocks));\n-        READWRITE(VARINT(nSize));\n-        READWRITE(VARINT(nUndoSize));\n-        READWRITE(VARINT(nHeightFirst));\n-        READWRITE(VARINT(nHeightLast));\n-        READWRITE(VARINT(nTimeFirst));\n-        READWRITE(VARINT(nTimeLast));\n+    SERIALIZE_METHODS(CBlockFileInfo, obj)\n+    {\n+        READWRITE(VARINT(obj.nBlocks));\n+        READWRITE(VARINT(obj.nSize));\n+        READWRITE(VARINT(obj.nUndoSize));\n+        READWRITE(VARINT(obj.nHeightFirst));\n+        READWRITE(VARINT(obj.nHeightLast));\n+        READWRITE(VARINT(obj.nTimeFirst));\n+        READWRITE(VARINT(obj.nTimeLast));\n     }\n \n      void SetNull() {\n@@ -332,31 +330,25 @@ class CDiskBlockIndex : public CBlockIndex\n         hashPrev = (pprev ? pprev->GetBlockHash() : uint256());\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n+    SERIALIZE_METHODS(CDiskBlockIndex, obj)\n+    {\n         int _nVersion = s.GetVersion();\n-        if (!(s.GetType() & SER_GETHASH))\n-            READWRITE(VARINT(_nVersion, VarIntMode::NONNEGATIVE_SIGNED));\n-\n-        READWRITE(VARINT(nHeight, VarIntMode::NONNEGATIVE_SIGNED));\n-        READWRITE(VARINT(nStatus));\n-        READWRITE(VARINT(nTx));\n-        if (nStatus & (BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO))\n-            READWRITE(VARINT(nFile, VarIntMode::NONNEGATIVE_SIGNED));\n-        if (nStatus & BLOCK_HAVE_DATA)\n-            READWRITE(VARINT(nDataPos));\n-        if (nStatus & BLOCK_HAVE_UNDO)\n-            READWRITE(VARINT(nUndoPos));\n+        if (!(s.GetType() & SER_GETHASH)) READWRITE(VARINT(_nVersion, VarIntMode::NONNEGATIVE_SIGNED));\n+\n+        READWRITE(VARINT(obj.nHeight, VarIntMode::NONNEGATIVE_SIGNED));\n+        READWRITE(VARINT(obj.nStatus));\n+        READWRITE(VARINT(obj.nTx));\n+        if (obj.nStatus & (BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO)) READWRITE(VARINT(obj.nFile, VarIntMode::NONNEGATIVE_SIGNED));\n+        if (obj.nStatus & BLOCK_HAVE_DATA) READWRITE(VARINT(obj.nDataPos));\n+        if (obj.nStatus & BLOCK_HAVE_UNDO) READWRITE(VARINT(obj.nUndoPos));\n \n         // block header\n-        READWRITE(this->nVersion);\n-        READWRITE(hashPrev);\n-        READWRITE(hashMerkleRoot);\n-        READWRITE(nTime);\n-        READWRITE(nBits);\n-        READWRITE(nNonce);\n+        READWRITE(obj.nVersion);\n+        READWRITE(obj.hashPrev);\n+        READWRITE(obj.hashMerkleRoot);\n+        READWRITE(obj.nTime);\n+        READWRITE(obj.nBits);\n+        READWRITE(obj.nNonce);\n     }\n \n     uint256 GetBlockHash() const"
      }
    ]
  }
]