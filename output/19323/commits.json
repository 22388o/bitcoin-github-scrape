[
  {
    "sha": "314b49bd50906c03911d2b17a21a34685a60b3c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTRiNDliZDUwOTA2YzAzOTExZDJiMTdhMjFhMzQ2ODVhNjBiM2M4",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-18T19:19:26Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-07-08T16:16:33Z"
      },
      "message": "gui: Fix regression in GUI console\n\nThis change prevents \"Shutting down\" message during \"dumptxoutset\",\n\"gettxoutsetinfo\" and \"scantxoutset\" calls.",
      "tree": {
        "sha": "a51a295d3d7b84b2f9a5a9c9597ba4a2da06a76c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a51a295d3d7b84b2f9a5a9c9597ba4a2da06a76c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/314b49bd50906c03911d2b17a21a34685a60b3c8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl8F8WEACgkQQQEIES5+\nqB/vkw/+J+vcaphRGPn6RFb6cW0ZqPXpr5ww5uuAJe11RMKRMbTGqQeeGdptTCOc\ni5zpBr9OHzxjkMd0zr4NRrKBK7oNFyDrtj2eIDIPJ5UxJGs31dXQ6sxaHc+eYVR7\n7/hi0WDEqBTvq36D3uqlbbU+vQCl2D95cXUMMxsBVf6JKb+KUEKUnmNLHOWAWU8K\nHU/B6Iws6Ha+SOUNc6NF5tFYxe7GOwXr/oWWud8Y+UPEvrXk1gV1B5BE0nBPpghU\nVCA8CPCIQQGKuDjaDieN6gORhvbRv4Yjjcf2D7S5+DHN7hWaPodOKoGw74c3G/eA\nWs9GUxKvW6GRAXeDGqWsvhNYpoL13Q6CRv57gvmTzLO+Y6Ykq11GEdOtnj6lvUAr\nMedNKhLjyO9SUUHqhX5Jv58dG5D3bc42n8VEOMb0XLl4KtJFWwyE0haaPF9lRu33\n4srE9dKRSSgb752XycZnQz9VyjFzI6a7ccuNxFHHyIk4jlzbYuk4Qz+Gz5Vkpf44\nZo7Gr6b2U3oSdLbUKlHeIhDtqBRSUJB8jlTTYpdLmzU9TpP5pU370xn6/CErV1ZW\nmxd+spV1uiZ44jGvR9LNtW3GtUxAFKwvC6tFBUu/dbruGm0LA7f2bwiG9/+M20xc\nvEjfqK5v36VjjjSSCH3OFx5XcfLypBCHYaier2siLfVU+6xKhM8=\n=BKIb\n-----END PGP SIGNATURE-----",
        "payload": "tree a51a295d3d7b84b2f9a5a9c9597ba4a2da06a76c\nparent abdfd2d0e3ebec7dbead89317ee9192189a35809\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1592507966 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1594224993 +0300\n\ngui: Fix regression in GUI console\n\nThis change prevents \"Shutting down\" message during \"dumptxoutset\",\n\"gettxoutsetinfo\" and \"scantxoutset\" calls.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/314b49bd50906c03911d2b17a21a34685a60b3c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/314b49bd50906c03911d2b17a21a34685a60b3c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/314b49bd50906c03911d2b17a21a34685a60b3c8/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "abdfd2d0e3ebec7dbead89317ee9192189a35809",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abdfd2d0e3ebec7dbead89317ee9192189a35809",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/abdfd2d0e3ebec7dbead89317ee9192189a35809"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 17,
      "deletions": 8
    },
    "files": [
      {
        "sha": "38448c084a437e40bd02b4b20e378769177b1781",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/314b49bd50906c03911d2b17a21a34685a60b3c8/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/314b49bd50906c03911d2b17a21a34685a60b3c8/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=314b49bd50906c03911d2b17a21a34685a60b3c8",
        "patch": "@@ -775,13 +775,14 @@ static bool InitSanityCheck()\n     return true;\n }\n \n-static bool AppInitServers(const util::Ref& context)\n+static bool AppInitServers(const util::Ref& context, NodeContext& node)\n {\n     RPCServer::OnStarted(&OnRPCStarted);\n     RPCServer::OnStopped(&OnRPCStopped);\n     if (!InitHTTPServer())\n         return false;\n     StartRPC();\n+    node.rpc_interruption_point = RpcInterruptionPoint;\n     if (!StartHTTPRPC(context))\n         return false;\n     if (gArgs.GetBoolArg(\"-rest\", DEFAULT_REST_ENABLE)) StartREST(context);\n@@ -1352,7 +1353,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node)\n     if (gArgs.GetBoolArg(\"-server\", false))\n     {\n         uiInterface.InitMessage_connect(SetRPCWarmupStatus);\n-        if (!AppInitServers(context))\n+        if (!AppInitServers(context, node))\n             return InitError(_(\"Unable to start HTTP server. See debug log for details.\"));\n     }\n "
      },
      {
        "sha": "be568cba365b4cd9f33c8c828ec59254237c1496",
        "filename": "src/node/context.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/314b49bd50906c03911d2b17a21a34685a60b3c8/src/node/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/314b49bd50906c03911d2b17a21a34685a60b3c8/src/node/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.h?ref=314b49bd50906c03911d2b17a21a34685a60b3c8",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_NODE_CONTEXT_H\n \n #include <cassert>\n+#include <functional>\n #include <memory>\n #include <vector>\n \n@@ -41,6 +42,7 @@ struct NodeContext {\n     std::unique_ptr<interfaces::Chain> chain;\n     std::vector<std::unique_ptr<interfaces::ChainClient>> chain_clients;\n     std::unique_ptr<CScheduler> scheduler;\n+    std::function<void()> rpc_interruption_point = [] {};\n \n     //! Declare default constructor and destructor that are not inline, so code\n     //! instantiating the NodeContext struct doesn't need to #include class"
      },
      {
        "sha": "b2834c31f8ae1175bb8821937a28b3b4201b01fe",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 6,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/314b49bd50906c03911d2b17a21a34685a60b3c8/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/314b49bd50906c03911d2b17a21a34685a60b3c8/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=314b49bd50906c03911d2b17a21a34685a60b3c8",
        "patch": "@@ -1004,7 +1004,8 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n     const CoinStatsHashType hash_type = ParseHashType(request.params[0], CoinStatsHashType::HASH_SERIALIZED);\n \n     CCoinsView* coins_view = WITH_LOCK(cs_main, return &ChainstateActive().CoinsDB());\n-    if (GetUTXOStats(coins_view, stats, hash_type, RpcInterruptionPoint)) {\n+    NodeContext& node = EnsureNodeContext(request.context);\n+    if (GetUTXOStats(coins_view, stats, hash_type, node.rpc_interruption_point)) {\n         ret.pushKV(\"height\", (int64_t)stats.nHeight);\n         ret.pushKV(\"bestblock\", stats.hashBlock.GetHex());\n         ret.pushKV(\"transactions\", (int64_t)stats.nTransactions);\n@@ -1974,16 +1975,18 @@ static UniValue savemempool(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+namespace {\n //! Search for a given set of pubkey scripts\n-bool FindScriptPubKey(std::atomic<int>& scan_progress, const std::atomic<bool>& should_abort, int64_t& count, CCoinsViewCursor* cursor, const std::set<CScript>& needles, std::map<COutPoint, Coin>& out_results) {\n+bool FindScriptPubKey(std::atomic<int>& scan_progress, const std::atomic<bool>& should_abort, int64_t& count, CCoinsViewCursor* cursor, const std::set<CScript>& needles, std::map<COutPoint, Coin>& out_results, std::function<void()>& interruption_point)\n+{\n     scan_progress = 0;\n     count = 0;\n     while (cursor->Valid()) {\n         COutPoint key;\n         Coin coin;\n         if (!cursor->GetKey(key) || !cursor->GetValue(coin)) return false;\n         if (++count % 8192 == 0) {\n-            RpcInterruptionPoint();\n+            interruption_point();\n             if (should_abort) {\n                 // allow to abort the scan via the abort reference\n                 return false;\n@@ -2002,6 +2005,7 @@ bool FindScriptPubKey(std::atomic<int>& scan_progress, const std::atomic<bool>&\n     scan_progress = 100;\n     return true;\n }\n+} // namespace\n \n /** RAII object to prevent concurrency issue when scanning the txout set */\n static std::atomic<int> g_scan_progress;\n@@ -2150,7 +2154,8 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n             tip = ::ChainActive().Tip();\n             CHECK_NONFATAL(tip);\n         }\n-        bool res = FindScriptPubKey(g_scan_progress, g_should_abort_scan, count, pcursor.get(), needles, coins);\n+        NodeContext& node = EnsureNodeContext(request.context);\n+        bool res = FindScriptPubKey(g_scan_progress, g_should_abort_scan, count, pcursor.get(), needles, coins, node.rpc_interruption_point);\n         result.pushKV(\"success\", res);\n         result.pushKV(\"txouts\", count);\n         result.pushKV(\"height\", tip->nHeight);\n@@ -2305,6 +2310,7 @@ UniValue dumptxoutset(const JSONRPCRequest& request)\n     std::unique_ptr<CCoinsViewCursor> pcursor;\n     CCoinsStats stats;\n     CBlockIndex* tip;\n+    NodeContext& node = EnsureNodeContext(request.context);\n \n     {\n         // We need to lock cs_main to ensure that the coinsdb isn't written to\n@@ -2323,7 +2329,7 @@ UniValue dumptxoutset(const JSONRPCRequest& request)\n \n         ::ChainstateActive().ForceFlushStateToDisk();\n \n-        if (!GetUTXOStats(&::ChainstateActive().CoinsDB(), stats, CoinStatsHashType::NONE, RpcInterruptionPoint)) {\n+        if (!GetUTXOStats(&::ChainstateActive().CoinsDB(), stats, CoinStatsHashType::NONE, node.rpc_interruption_point)) {\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Unable to read UTXO set\");\n         }\n \n@@ -2341,7 +2347,7 @@ UniValue dumptxoutset(const JSONRPCRequest& request)\n     unsigned int iter{0};\n \n     while (pcursor->Valid()) {\n-        if (iter % 5000 == 0) RpcInterruptionPoint();\n+        if (iter % 5000 == 0) node.rpc_interruption_point();\n         ++iter;\n         if (pcursor->GetKey(key) && pcursor->GetValue(coin)) {\n             afile << key;"
      }
    ]
  }
]