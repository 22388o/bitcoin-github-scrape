meshcollider,2020-02-09 09:23:30,"Nice catch and fix, thanks! Great first time contribution. Looks good to me, but it would be great to have a test for this too if possible :)",https://github.com/bitcoin/bitcoin/pull/18095#issuecomment-583823447,583823447,
hebasto,2020-02-09 15:30:39,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/18095#issuecomment-583857937,583857937,
uhliksk,2020-02-10 11:51:26,"> Nice catch and fix, thanks! Great first time contribution. Looks good to me, but it would be great to have a test for this too if possible :)\n\nI'll try to create test for all functions where error_code is necessary. Thank you for advice.",https://github.com/bitcoin/bitcoin/pull/18095#issuecomment-584086538,584086538,
uhliksk,2020-02-11 01:37:38,I added test to check all boost filesystem functions and added error code handlers where necessary.,https://github.com/bitcoin/bitcoin/pull/18095#issuecomment-584442708,584442708,
uhliksk,2020-02-11 01:58:05,I squashed all relative commits together to make it much cleaner now.,https://github.com/bitcoin/bitcoin/pull/18095#issuecomment-584447377,584447377,
DrahtBot,2020-02-11 06:00:17,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20275 (wallet: List SQLite wallets in non-SQLite builds by ryanofsky)\n\nIf you consider this pull request important, ple",https://github.com/bitcoin/bitcoin/pull/18095#issuecomment-584488829,584488829,
uhliksk,2020-02-11 17:05:14,There is an issue with wallet backup after changes in error handling. I'll check today.,https://github.com/bitcoin/bitcoin/pull/18095#issuecomment-584740715,584740715,
uhliksk,2020-02-11 19:32:40,"Ok, there was an unnecessary error handler. Routine is just checking if provided path is file or directory. It should not fail regardless of result. Fixed.",https://github.com/bitcoin/bitcoin/pull/18095#issuecomment-584811215,584811215,
hebasto,2020-02-13 10:07:29,"@uhliksk \nI guess with the words ""_...  it would be great to have a test for this too if possible_"" @meshcollider had in mind a new [_functional test_](https://github.com/bitcoin/bitcoin/tree/master/test/functional), not a linter. The latter seems do more harm than good.\n\nI think no need to force replacement existing boost filesystem library function calls that throw an exception with ones t",https://github.com/bitcoin/bitcoin/pull/18095#issuecomment-585649029,585649029,
uhliksk,2020-02-14 19:23:18,"> I think no need to force replacement existing boost filesystem library function calls that throw an exception with ones that set an `error_code`.\n\nOk, I can revert all changes back to ListWalletDir() fix only but I still think it's better to handle all function calls properly instead of random wallet crashes. With ""try...catch"" method you never know what actually caused exception - boost fun",https://github.com/bitcoin/bitcoin/pull/18095#issuecomment-586437301,586437301,
uhliksk,2020-02-14 20:02:16,@hebasto I'm little bit busy today but I can try to add functional test tomorrow. Thank you for suggestion.,https://github.com/bitcoin/bitcoin/pull/18095#issuecomment-586451452,586451452,
uhliksk,2020-02-21 13:47:37,"Yes, I was also thinking about that today. I'll revert back this PR to original issue and create another one for other changes.",https://github.com/bitcoin/bitcoin/pull/18095#issuecomment-589659661,589659661,
promag,2020-03-02 00:39:56,ACK 6307dfa87e31aa30e884489d36c67688527bf8ca.,https://github.com/bitcoin/bitcoin/pull/18095#issuecomment-593172854,593172854,
laanwj,2020-03-27 16:23:02,"Concept ACK but\n\n> It's fixed by adding ""ec"" parameter into fs::exists() function to handle any error correctly.\n\nIt's not actually checking the `ec` output (calls `file_size` right after, overwriting it). I don't think this is correct. The normal `boost::fs::exists` will throw an exception in case of an error, the `ec` one will not raise an exception but return the error in the parameter.",https://github.com/bitcoin/bitcoin/pull/18095#issuecomment-605092374,605092374,
uhliksk,2020-03-28 01:19:32,"> Concept ACK but\n> \n> > It's fixed by adding ""ec"" parameter into fs::exists() function to handle any error correctly.\n> \n> It's not actually checking the `ec` output (calls `file_size` right after, overwriting it). I don't think this is correct. The normal `boost::fs::exists` will throw an exception in case of an error, the `ec` one will not raise an exception but return the error in the ",https://github.com/bitcoin/bitcoin/pull/18095#issuecomment-605373933,605373933,
hebasto,2020-04-02 15:21:20,"@uhliksk on Linux Mint 19.3, master branch (b83565625e32b22395e28c1965b2e42fc17f04d7), cannot reproduce the following crash:\n\n> Reproduction steps on Linux platform:\n> \n>    1. Type: _mkdir ~/.bitcoin/crash_\n> \n>    2. Type:  _sudo chown root:root ~/.bitcoin/crash_\n> \n>    3. Run _bitcoin-qt_\n> \n>    4. Go to menu _""File""_ -> _""Open Wallet""_, wallet will crash immediately\n\n",https://github.com/bitcoin/bitcoin/pull/18095#issuecomment-607911807,607911807,
achow101,2020-06-11 19:41:12,"> @uhliksk on Linux Mint 19.3, master branch (b835656), cannot reproduce the following crash:\n\nI had to do `sudo chmod 700 ~/.bitcoin/wallets/crash` to reproduce.\n\nI was not able to reproduce the infinite loop issue.\n\nOne problem I noticed was that with the test case wallet in my walletdir, the listing did not contain all of the wallets present. Several wallets that were previously lis",https://github.com/bitcoin/bitcoin/pull/18095#issuecomment-642890087,642890087,
uhliksk,2020-10-11 22:11:28,"> Approach ACK [ece61bb](https://github.com/bitcoin/bitcoin/commit/ece61bb0fb795facb5ad780245e15c65a816c8b8), the only [suggestion](https://github.com/bitcoin/bitcoin/pull/18095/files#r500066201) I remind about, as currently clang emits warning:\n> \n> ```\n> wallet/walletutil.cpp:71:10: warning: expression result unused [-Wunused-value]\n>     for (it; it != fs::recursive_directory_iterator()",https://github.com/bitcoin/bitcoin/pull/18095#issuecomment-706775410,706775410,
uhliksk,2020-10-15 14:54:43,"> rebase\n\nRebased.",https://github.com/bitcoin/bitcoin/pull/18095#issuecomment-709381370,709381370,
hebasto,2020-10-16 16:10:57,"> > rebase\n> \n> Rebased.\n\nI don't think the latest rebasing is correct, wrt the ac38a87225be0f1103ff9629d63980550d2f372b commit.",https://github.com/bitcoin/bitcoin/pull/18095#issuecomment-710154127,710154127,
uhliksk,2020-10-17 20:25:35,"> > > rebase\n> > \n> > \n> > Rebased.\n> \n> I don't think the latest rebasing is correct, wrt the [ac38a87](https://github.com/bitcoin/bitcoin/commit/ac38a87225be0f1103ff9629d63980550d2f372b) commit.\n\nWhat exactly do you mean? I checked walletutil.cpp with current master branch and there is nothing different.",https://github.com/bitcoin/bitcoin/pull/18095#issuecomment-711075454,711075454,
hebasto,2020-10-17 20:29:16,"> > > > rebase\n> > > \n> > > \n> > > Rebased.\n> > \n> > \n> > I don't think the latest rebasing is correct, wrt the [ac38a87](https://github.com/bitcoin/bitcoin/commit/ac38a87225be0f1103ff9629d63980550d2f372b) commit.\n> \n> What exactly do you mean? I checked walletutil.cpp with current master branch and there is nothing different.\n\nI mean this initial patch:\n```diff\n--- a/src/w",https://github.com/bitcoin/bitcoin/pull/18095#issuecomment-711075995,711075995,
uhliksk,2020-10-17 20:43:52,"> > > > > rebase\n> > > > \n> > > > \n> > > > Rebased.\n> > > \n> > > \n> > > I don't think the latest rebasing is correct, wrt the [ac38a87](https://github.com/bitcoin/bitcoin/commit/ac38a87225be0f1103ff9629d63980550d2f372b) commit.\n> > \n> > \n> > What exactly do you mean? I checked walletutil.cpp with current master branch and there is nothing different.\n> \n> I mean this initial p",https://github.com/bitcoin/bitcoin/pull/18095#issuecomment-711077917,711077917,
uhliksk,2020-10-17 21:08:54,"> Are such changes not required now?\n\nBug has been introduced even into `IsSQLiteFile`. I fixed both right now. Thank you.",https://github.com/bitcoin/bitcoin/pull/18095#issuecomment-711080714,711080714,
uhliksk,2020-10-17 21:29:27,I should get back on #18189 where I have lint test to prevent this kind of bugs in future.,https://github.com/bitcoin/bitcoin/pull/18095#issuecomment-711082797,711082797,
hebasto,2020-10-20 22:07:42,"@uhliksk \n\nI suggest to combine your approach to prevent an infinity loop into #19502 (see https://github.com/bitcoin/bitcoin/pull/19502#issuecomment-713165606).\n\n@luke-jr's approach to handle file system errors/exceptions seems more preferable to me (with two types of wallet databases now).",https://github.com/bitcoin/bitcoin/pull/18095#issuecomment-713168121,713168121,
fanquake,2020-11-12 08:04:16,Closing now that #19502 has been merged.,https://github.com/bitcoin/bitcoin/pull/18095#issuecomment-725911512,725911512,
promag,2020-02-09 23:58:46,One `error_code` is enough?,https://github.com/bitcoin/bitcoin/pull/18095#discussion_r376828971,376828971,src/wallet/walletutil.cpp
uhliksk,2020-02-10 11:49:43,"Nice catch. I can add commits to this PR fixing all other instances with missing error_code. (exists(), is_directory(), etc.)\n\nFor iterator() and increment() you have to use separate error_code because you have to handle them differently. Using single one it's hard to differentiate which one failed.",https://github.com/bitcoin/bitcoin/pull/18095#discussion_r377016005,377016005,src/wallet/walletutil.cpp
luke-jr,2020-08-14 18:34:28,I don't see why we can't reuse `ec`? The initialisation and increment should never run in the same iteration.,https://github.com/bitcoin/bitcoin/pull/18095#discussion_r470797596,470797596,src/wallet/walletutil.cpp
luke-jr,2020-08-14 18:34:51,"In fact, `eci` wouldn't be initialised here the first iteration...",https://github.com/bitcoin/bitcoin/pull/18095#discussion_r470797936,470797936,src/wallet/walletutil.cpp
luke-jr,2020-08-14 19:00:47,"Oh, it's so the error message can be different... nm",https://github.com/bitcoin/bitcoin/pull/18095#discussion_r470814445,470814445,src/wallet/walletutil.cpp
luke-jr,2020-08-14 19:01:00,Initialising `eci` above should be done,https://github.com/bitcoin/bitcoin/pull/18095#discussion_r470814544,470814544,src/wallet/walletutil.cpp
uhliksk,2020-08-14 21:28:50,"You're right, I'll add `eci` initialisation. Thank you.",https://github.com/bitcoin/bitcoin/pull/18095#discussion_r470873246,470873246,src/wallet/walletutil.cpp
luke-jr,2020-08-15 06:31:27,"No, I'm wrong. Boost takes care of this, and won't let us explicitly initialise...",https://github.com/bitcoin/bitcoin/pull/18095#discussion_r470945226,470945226,src/wallet/walletutil.cpp
luke-jr,2020-08-18 03:50:33,`disable_recursion_pending` is a new name introduced in Boost 1.72. We support much older. Renaming this to `no_push` (the old name) should just work.,https://github.com/bitcoin/bitcoin/pull/18095#discussion_r471897617,471897617,src/wallet/walletutil.cpp
uhliksk,2020-09-22 20:43:11,Made PR #18189.,https://github.com/bitcoin/bitcoin/pull/18095#discussion_r493021429,493021429,src/wallet/walletutil.cpp
hebasto,2020-10-04 16:52:56,"6307dfa87e31aa30e884489d36c67688527bf8ca\n\nIf `recursive_directory_iterator` ctor sets an error code we should not iterate `it`. Mind replacing `continue` with `break`, or, even better, initializing `it` before the loop and early return in case of error?",https://github.com/bitcoin/bitcoin/pull/18095#discussion_r499266068,499266068,src/wallet/walletutil.cpp
uhliksk,2020-10-04 22:39:44,"Yes, you are right. If it failed initializing `it` then there is nothing to iterate. Fixed.",https://github.com/bitcoin/bitcoin/pull/18095#discussion_r499296383,499296383,src/wallet/walletutil.cpp
uhliksk,2020-10-04 22:54:57,We can also use `ec` again as I moved initialization of `it` before the loop.,https://github.com/bitcoin/bitcoin/pull/18095#discussion_r499297475,499297475,src/wallet/walletutil.cpp
hebasto,2020-10-06 07:37:57,"```suggestion\n    for (; it != fs::recursive_directory_iterator(); it.increment(ec)) {\n```",https://github.com/bitcoin/bitcoin/pull/18095#discussion_r500066201,500066201,src/wallet/walletutil.cpp
hebasto,2020-10-06 07:41:14,"Wondering what conditions could cause this error. I've read the relevant Boost docs, and tried different ill filesystem setups but without success.",https://github.com/bitcoin/bitcoin/pull/18095#discussion_r500068119,500068119,src/wallet/walletutil.cpp
