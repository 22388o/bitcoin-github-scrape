instagibbs,2019-07-31 17:25:16,This can be tested by applying https://github.com/instagibbs/bitcoin/commit/4538d6bfd1bddcfb741f04dbcd61a4eb41162e8f which without this fix causes `rpc_fundrawtransaction.py` to stall out when feefilter starts rejecting wallet/mempool transactions.,https://github.com/bitcoin/bitcoin/pull/16507#issuecomment-516943567,516943567,
DrahtBot,2019-07-31 17:41:32,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/16507#issuecomment-516949518,516949518,
naumenkogs,2019-08-06 20:25:51,"utACK.\nSeems like a reasonable simple fix for the existing problem.\n\n>Replacement PR for https://github.com/bitcoin/bitcoin/pull/165001\n\nThe link doesn't work.\n\n",https://github.com/bitcoin/bitcoin/pull/16507#issuecomment-518830042,518830042,
instagibbs,2019-08-06 20:33:14,"Oops, fixed link",https://github.com/bitcoin/bitcoin/pull/16507#issuecomment-518832696,518832696,
instagibbs,2019-08-20 14:00:14,@luke-jr fixed field type and made `CFeeRate` constructor explicit to avoid merge/backport errors.,https://github.com/bitcoin/bitcoin/pull/16507#issuecomment-523028495,523028495,
TheBlueMatt,2019-08-20 18:18:22,"I can haz test? Looks like you managed to write a test for the issue? Should be included here, no? I'm confused if the changes to TxMempoolInfo are required - we're still converting to CFeeRate before the convserion.",https://github.com/bitcoin/bitcoin/pull/16507#issuecomment-523135321,523135321,
instagibbs,2019-08-20 18:26:12,And yes I can write a test.,https://github.com/bitcoin/bitcoin/pull/16507#issuecomment-523138459,523138459,
instagibbs,2019-08-21 20:45:47,@TheBlueMatt Pushed a test change that causes fee filter test to stall out when fix is removed.,https://github.com/bitcoin/bitcoin/pull/16507#issuecomment-523642033,523642033,
instagibbs,2019-09-09 14:03:12,rebased,https://github.com/bitcoin/bitcoin/pull/16507#issuecomment-529490168,529490168,
instagibbs,2019-09-09 15:20:19,"kdiff ate some tab space or something, pushed fix",https://github.com/bitcoin/bitcoin/pull/16507#issuecomment-529528488,529528488,
naumenkogs,2019-09-21 13:09:00,"utACK 6a9ee897dd3dc3edd286085d47cb00df08f6d93c.\n\nI would slightly prefer 3859 and 3915 to share the code-style (they do the same thing but in different fashion), but feel free to ignore.",https://github.com/bitcoin/bitcoin/pull/16507#issuecomment-533796799,533796799,
achow101,2019-10-02 19:21:37,"ACK af5f7d2190023b0a9e2aaaf829b72043293c6879\n\nReviewed code and checked that the test fails without this change.",https://github.com/bitcoin/bitcoin/pull/16507#issuecomment-537641170,537641170,
instagibbs,2019-10-03 13:44:10,"@jkczyz your reading is correct. I was keeping the code *as close as possible* to the original logic, while fixing the bug. The previous logic asks if the fee is set(non-zero), so I mimicked that. p2p code is notoriously hard to get right and even harder to get reviewers for, so I just kept things as close as possible.\n\nFollow-on cleanups are welcome of course.",https://github.com/bitcoin/bitcoin/pull/16507#issuecomment-537951741,537951741,
ajtowns,2019-10-03 15:17:22,I think this no longer compiles after #16727 got merged?,https://github.com/bitcoin/bitcoin/pull/16507#issuecomment-537991188,537991188,
MarcoFalke,2019-10-03 15:44:22,"If you rebase this, could you please do so on top of 8afa602f308ef003bb6893718eae1fe5a830690c, so that backports are simplified?",https://github.com/bitcoin/bitcoin/pull/16507#issuecomment-538002758,538002758,
instagibbs,2019-10-03 15:45:18,I'll rebase it sure and fix some minimal nits.,https://github.com/bitcoin/bitcoin/pull/16507#issuecomment-538003160,538003160,
instagibbs,2019-10-03 18:04:11,rebased and removed the non-essential conditional that is spawing all the `IsNull`/`IsZero` debate.,https://github.com/bitcoin/bitcoin/pull/16507#issuecomment-538058960,538058960,
TheBlueMatt,2019-10-03 21:48:12,utACK af5f7d2190023b0a9e2aaaf829b72043293c6879. Code changes are simple enough and test fails if you revert the fix.,https://github.com/bitcoin/bitcoin/pull/16507#issuecomment-538142414,538142414,
kallewoof,2019-10-04 01:57:44,"> rebased and removed the non-essential conditional that is spawing all the IsNull/IsZero debate.\n\nStill see a bunch of `>/== CFeeRate(0)` in the changes.",https://github.com/bitcoin/bitcoin/pull/16507#issuecomment-538196737,538196737,
ajtowns,2019-10-04 06:09:20,ACK eb7b78165966f2c79da71b993c4c4d793e37297f code review only,https://github.com/bitcoin/bitcoin/pull/16507#issuecomment-538253210,538253210,
instagibbs,2019-10-04 13:26:56,@kallewoof I only removed the redundant calls in net_processing.cpp because it does reduce readability and fixing is a net gain imo.,https://github.com/bitcoin/bitcoin/pull/16507#issuecomment-538396021,538396021,
naumenkogs,2019-10-04 16:57:14,utACK eb7b78165966f2c79da71b993c4c4d793e37297f,https://github.com/bitcoin/bitcoin/pull/16507#issuecomment-538478590,538478590,
achow101,2019-10-04 17:08:25,re ACK eb7b78165966f2c79da71b993c4c4d793e37297f,https://github.com/bitcoin/bitcoin/pull/16507#issuecomment-538482403,538482403,
MarcoFalke,2019-10-07 18:04:12,"post-merge\n\nACK eb7b78165966f2c79da71b993c4c4d793e37297f\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK eb7b78165966f2c79da71b993c4c4d793e37297f\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgb3AwAh1Oi4PZcMIwCloxjHiSdLUKf/fEvb6wptxlDFY",https://github.com/bitcoin/bitcoin/pull/16507#issuecomment-539134200,539134200,
naumenkogs,2019-08-06 15:11:57,How is this variable supposed to be assigned?,https://github.com/bitcoin/bitcoin/pull/16507#discussion_r311119619,311119619,src/txmempool.h
instagibbs,2019-08-06 20:17:38,here https://github.com/bitcoin/bitcoin/pull/16507/files#diff-ca74c4b28865382863b8fe7633a85cd6R776,https://github.com/bitcoin/bitcoin/pull/16507#discussion_r311255247,311255247,src/txmempool.h
luke-jr,2019-08-20 00:54:41,"Yikes, that looks dangerous. What would happen if code without this PR got mixed in with the PR'd type?",https://github.com/bitcoin/bitcoin/pull/16507#discussion_r315469066,315469066,src/txmempool.h
instagibbs,2019-08-20 13:44:24,whoops! `fee` is supposed to be `CAmount`.,https://github.com/bitcoin/bitcoin/pull/16507#discussion_r315696480,315696480,src/txmempool.h
instagibbs,2019-08-20 18:24:55,"@TheBlueMatt we're using it directly here, not converting to feerate.",https://github.com/bitcoin/bitcoin/pull/16507#discussion_r315837811,315837811,src/net_processing.cpp
jonatack,2019-09-18 11:48:42,"FWIW identical code at L3847 and L3885 (also the case before the changes touching this).\n```cpp\n                    CFeeRate filterrate;\n                    {\n                        LOCK(pto->m_tx_relay->cs_feeFilter);\n                        filterrate = CFeeRate(pto->m_tx_relay->minFeeFilter);\n                    }\n```",https://github.com/bitcoin/bitcoin/pull/16507#discussion_r325628668,325628668,src/net_processing.cpp
jonatack,2019-09-18 11:51:09,"1. Some code comments would be great, particularly before the conditional here and line 3859 just above.\n\n2. With these changes the 2 conditionals appear to be equivalent now. Making them the same or extracting them to a well-named bool function might be a nice touch.\n\n```cpp\n                        if (filterrate > CFeeRate(0)) {\n                            if (txinfo.fee < filterrate",https://github.com/bitcoin/bitcoin/pull/16507#discussion_r325629622,325629622,src/net_processing.cpp
instagibbs,2019-09-18 13:30:15,"Can you suggest some text? I'm not sure of the confusion.\n\nAlso I'm not sure what you mean by (2)",https://github.com/bitcoin/bitcoin/pull/16507#discussion_r325675771,325675771,src/net_processing.cpp
instagibbs,2019-09-21 19:03:32,"ah I see now, I'm just mimicking current style. If I need to rebase or something I'll make them match.",https://github.com/bitcoin/bitcoin/pull/16507#discussion_r326870668,326870668,src/net_processing.cpp
kallewoof,2019-09-27 08:11:12,Î¼-Nit: I would slightly prefer a `IsNull() { return nSatoshisPerK == 0; }` in `CFeeRate` and using that instead of instantiating `CFeeRate()`s whenever you check if the filter rate is set.,https://github.com/bitcoin/bitcoin/pull/16507#discussion_r328958210,328958210,src/net_processing.cpp
instagibbs,2019-09-30 20:12:34,will do if forced to rebase or change commits for more substantial reasons,https://github.com/bitcoin/bitcoin/pull/16507#discussion_r329764883,329764883,src/net_processing.cpp
laanwj,2019-10-01 13:17:19,"maybe isZero instead of isNull? I always associate Null with pointers somehow, not with values, this could give confusion here.",https://github.com/bitcoin/bitcoin/pull/16507#discussion_r330050582,330050582,src/net_processing.cpp
kallewoof,2019-10-02 02:41:39,"Either works for me. We use `IsNull` elsewhere (e.g. `uint256`, `FlatFilePos`, `BlockHeader`, `PSBTInput`, `CScriptWitness`, etc etc.)",https://github.com/bitcoin/bitcoin/pull/16507#discussion_r330352726,330352726,src/net_processing.cpp
jkczyz,2019-10-02 20:57:06,"@kallewoof Those examples aren't really values in the sense of integral values that could support arithmetic operations. Rather they support invalid or null values via `IsNull`. For example, `FlatFilePos::IsNull` is not for the zero position but rather an invalid position object (i.e. `nFile == -1`). So `IsZero` seems more appropriate here since a zero fee rate represents a valid object.\n\nI'm ",https://github.com/bitcoin/bitcoin/pull/16507#discussion_r330767479,330767479,src/net_processing.cpp
jkczyz,2019-10-02 21:15:35,"In addition to removing code duplication, a helper would simplify this code, reduce dependencies on `CNode` internals, and prevent ever having an uninitialized fee rate. Consider (or similar):\n\n```c++\nconst CFeeRate filter_rate = pto->GetMinRelayFee();\n```\n\nIMHO, continually making small improvements like this would go a long way in making the codebase more approachable. Speaking from ",https://github.com/bitcoin/bitcoin/pull/16507#discussion_r330775125,330775125,src/net_processing.cpp
jkczyz,2019-10-03 00:41:08,"Agreed regarding extracting into a well-named helper and/or commenting there.  To me:\n\n1. It seems this code is to prevent sending transactions to a peers that won't relay it. Is that correct?\n2. It's not apparent why the check isn't made when the fee rate is zero. Is it as an optimization or some other reason?\n\nArguably someone scanning this code shouldn't need to parse that particular ",https://github.com/bitcoin/bitcoin/pull/16507#discussion_r330826378,330826378,src/net_processing.cpp
kallewoof,2019-10-03 12:30:12,"Same goes for `uint256` I'd say, but I don't really have a strong opinion on the matter. (Consistency -> IsNull; intuitive -> IsZero.)",https://github.com/bitcoin/bitcoin/pull/16507#discussion_r331011824,331011824,src/net_processing.cpp
instagibbs,2019-10-03 13:49:10,The p2p code is the most daunting part. Refactoring has its own dangers. Complete ACK on working to make it easier to understand!,https://github.com/bitcoin/bitcoin/pull/16507#discussion_r331049001,331049001,src/net_processing.cpp
promag,2019-10-03 22:38:57,"nit, add space before `:`.",https://github.com/bitcoin/bitcoin/pull/16507#discussion_r331282692,331282692,src/policy/feerate.h
