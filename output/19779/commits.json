[
  {
    "sha": "fa40017706e08b4de111e8e57aabeced60881a57",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQwMDE3NzA2ZTA4YjRkZTExMWU4ZTU3YWFiZWNlZDYwODgxYTU3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-21T18:13:40Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-24T05:45:17Z"
      },
      "message": "init: Pass reference to ArgsManager around instead of relying on global",
      "tree": {
        "sha": "7ed4294e423480fbfa745b17d2369ef149a96ec7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ed4294e423480fbfa745b17d2369ef149a96ec7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa40017706e08b4de111e8e57aabeced60881a57",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiwUAv+IMNyci8A3PIYdcaDj1AgpU252CyhlJybWQBu8q2Qygn0si82QaOZynkN\ncv67FYv+6kSTkeO0DVaFCKp4gIgAhXLJcqUQrf56Q0yUlg7BElrAvasvy+b+tdME\ndq6GEEcH0NjfV34WzbZr46S9N/1TZRofkLi6NWykndjUxW36AuTE+XVilkXkNT5w\nIcbkCI5bB1XYic3B+OAakf7cxFpnCKsP3XAVyS0PfeDpHGSAyIaCKopMzFc3DGRU\nMe5hk6OO9vkKlUhSO+NUnk2ThgGlZNefIf4KwEyFGmdf1ceIXhvhTVYn5Y0vTLcO\n4b7X8FYdVis3C+ppJbRo8NZ61EjITxu1EtnHMOiMNjenQdZEwIW51t/8XEru05mj\nOfFSxS0rUgpKyA7ASmbd+gt3zA2EaiNp1uYt4CBbCatYr1eiJ25/pCJQHYKKF7Qn\nSE/TZs6D4J5TjA9vYcdHsbCqLCETYZyq4Rxbktck81TA4eqQUTPMC8+VlqHaUVJx\nIi9gUi2z\n=A7d+\n-----END PGP SIGNATURE-----",
        "payload": "tree 7ed4294e423480fbfa745b17d2369ef149a96ec7\nparent 197450f80868fe752c6107955e5da80704212b34\nauthor MarcoFalke <falke.marco@gmail.com> 1598033620 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1598247917 +0200\n\ninit: Pass reference to ArgsManager around instead of relying on global\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa40017706e08b4de111e8e57aabeced60881a57",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa40017706e08b4de111e8e57aabeced60881a57",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa40017706e08b4de111e8e57aabeced60881a57/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "197450f80868fe752c6107955e5da80704212b34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/197450f80868fe752c6107955e5da80704212b34",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/197450f80868fe752c6107955e5da80704212b34"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 35,
      "deletions": 34
    },
    "files": [
      {
        "sha": "77baa07b8e9df772c8c9f2dac31571cff19825e9",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 9,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa40017706e08b4de111e8e57aabeced60881a57/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa40017706e08b4de111e8e57aabeced60881a57/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=fa40017706e08b4de111e8e57aabeced60881a57",
        "patch": "@@ -50,11 +50,9 @@ static bool AppInit(int argc, char* argv[])\n \n     util::ThreadSetInternalName(\"init\");\n \n-    //\n-    // Parameters\n-    //\n     // If Qt is used, parameters/bitcoin.conf are parsed in qt/bitcoin.cpp's main()\n     SetupServerArgs(node);\n+    ArgsManager& args = *Assert(node.args);\n     std::string error;\n     if (!gArgs.ParseParameters(argc, argv, error)) {\n         return InitError(Untranslated(strprintf(\"Error parsing command line arguments: %s\\n\", error)));\n@@ -109,15 +107,13 @@ static bool AppInit(int argc, char* argv[])\n         // -server defaults to true for bitcoind but not for the GUI so do this here\n         gArgs.SoftSetBoolArg(\"-server\", true);\n         // Set this early so that parameter interactions go to console\n-        InitLogging();\n-        InitParameterInteraction();\n-        if (!AppInitBasicSetup())\n-        {\n+        InitLogging(args);\n+        InitParameterInteraction(args);\n+        if (!AppInitBasicSetup(args)) {\n             // InitError will have been called with detailed error, which ends up on console\n             return false;\n         }\n-        if (!AppInitParameterInteraction())\n-        {\n+        if (!AppInitParameterInteraction(args)) {\n             // InitError will have been called with detailed error, which ends up on console\n             return false;\n         }"
      },
      {
        "sha": "ac18a266b9ed1721d2550576f292fc6c74a9f612",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 15,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa40017706e08b4de111e8e57aabeced60881a57/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa40017706e08b4de111e8e57aabeced60881a57/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa40017706e08b4de111e8e57aabeced60881a57",
        "patch": "@@ -107,14 +107,14 @@ static const char* DEFAULT_ASMAP_FILENAME=\"ip_asn.map\";\n  */\n static const char* BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n \n-static fs::path GetPidFile()\n+static fs::path GetPidFile(const ArgsManager& args)\n {\n     return AbsPathForConfigVal(fs::path(gArgs.GetArg(\"-pid\", BITCOIN_PID_FILENAME)));\n }\n \n-NODISCARD static bool CreatePidFile()\n+NODISCARD static bool CreatePidFile(const ArgsManager& args)\n {\n-    fsbridge::ofstream file{GetPidFile()};\n+    fsbridge::ofstream file{GetPidFile(args)};\n     if (file) {\n #ifdef WIN32\n         tfm::format(file, \"%d\\n\", GetCurrentProcessId());\n@@ -123,7 +123,7 @@ NODISCARD static bool CreatePidFile()\n #endif\n         return true;\n     } else {\n-        return InitError(strprintf(_(\"Unable to create the PID file '%s': %s\"), GetPidFile().string(), std::strerror(errno)));\n+        return InitError(strprintf(_(\"Unable to create the PID file '%s': %s\"), GetPidFile(args).string(), std::strerror(errno)));\n     }\n }\n \n@@ -180,6 +180,7 @@ void Shutdown(NodeContext& node)\n     TRY_LOCK(g_shutdown_mutex, lock_shutdown);\n     if (!lock_shutdown) return;\n     LogPrintf(\"%s: In progress...\\n\", __func__);\n+    Assert(node.args);\n \n     /// Note: Shutdown() must be able to handle cases in which initialization failed part of the way,\n     /// for example if the data directory was found to be locked.\n@@ -230,7 +231,7 @@ void Shutdown(NodeContext& node)\n     node.connman.reset();\n     node.banman.reset();\n \n-    if (::mempool.IsLoaded() && gArgs.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n+    if (::mempool.IsLoaded() && node.args->GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n         DumpMempool(::mempool);\n     }\n \n@@ -301,19 +302,19 @@ void Shutdown(NodeContext& node)\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n     globalVerifyHandle.reset();\n     ECC_Stop();\n-    node.args = nullptr;\n     node.mempool = nullptr;\n     node.chainman = nullptr;\n     node.scheduler.reset();\n \n     try {\n-        if (!fs::remove(GetPidFile())) {\n+        if (!fs::remove(GetPidFile(*node.args))) {\n             LogPrintf(\"%s: Unable to remove PID file: File does not exist\\n\", __func__);\n         }\n     } catch (const fs::filesystem_error& e) {\n         LogPrintf(\"%s: Unable to remove PID file: %s\\n\", __func__, fsbridge::get_filesystem_error_message(e));\n     }\n \n+    node.args = nullptr;\n     LogPrintf(\"%s: done\\n\", __func__);\n }\n \n@@ -372,7 +373,7 @@ void SetupServerArgs(NodeContext& node)\n     node.args = &gArgs;\n     ArgsManager& argsman = *node.args;\n \n-    SetupHelpOptions(gArgs);\n+    SetupHelpOptions(argsman);\n     argsman.AddArg(\"-help-debug\", \"Print help message with debugging options and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST); // server-only for now\n \n     const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n@@ -684,7 +685,7 @@ static void CleanupBlockRevFiles()\n     }\n }\n \n-static void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFiles)\n+static void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFiles, const ArgsManager& args)\n {\n     const CChainParams& chainparams = Params();\n     ScheduleBatchPriority();\n@@ -780,6 +781,7 @@ static bool InitSanityCheck()\n \n static bool AppInitServers(const util::Ref& context, NodeContext& node)\n {\n+    const ArgsManager& args = *Assert(node.args);\n     RPCServer::OnStarted(&OnRPCStarted);\n     RPCServer::OnStopped(&OnRPCStopped);\n     if (!InitHTTPServer())\n@@ -794,7 +796,7 @@ static bool AppInitServers(const util::Ref& context, NodeContext& node)\n }\n \n // Parameter interaction based on rules\n-void InitParameterInteraction()\n+void InitParameterInteraction(ArgsManager& args)\n {\n     // when specifying an explicit binding address, you want to listen on it\n     // even when -connect or -proxy is specified\n@@ -863,7 +865,7 @@ void InitParameterInteraction()\n  * Note that this is called very early in the process lifetime, so you should be\n  * careful about what global state you rely on here.\n  */\n-void InitLogging()\n+void InitLogging(const ArgsManager& args)\n {\n     LogInstance().m_print_to_file = !gArgs.IsArgNegated(\"-debuglogfile\");\n     LogInstance().m_file_path = AbsPathForConfigVal(gArgs.GetArg(\"-debuglogfile\", DEFAULT_DEBUGLOGFILE));\n@@ -909,7 +911,7 @@ std::set<BlockFilterType> g_enabled_filter_types;\n     std::terminate();\n };\n \n-bool AppInitBasicSetup()\n+bool AppInitBasicSetup(ArgsManager& args)\n {\n     // ********************************************************* Step 1: setup\n #ifdef _MSC_VER\n@@ -951,7 +953,7 @@ bool AppInitBasicSetup()\n     return true;\n }\n \n-bool AppInitParameterInteraction()\n+bool AppInitParameterInteraction(const ArgsManager& args)\n {\n     const CChainParams& chainparams = Params();\n     // ********************************************************* Step 2: parameter interactions\n@@ -1247,9 +1249,10 @@ bool AppInitLockDataDirectory()\n \n bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n {\n+    const ArgsManager& args = *Assert(node.args);\n     const CChainParams& chainparams = Params();\n     // ********************************************************* Step 4a: application initialization\n-    if (!CreatePidFile()) {\n+    if (!CreatePidFile(args)) {\n         // Detailed error printed inside CreatePidFile().\n         return false;\n     }\n@@ -1853,7 +1856,9 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n         vImportFiles.push_back(strFile);\n     }\n \n-    g_load_block = std::thread(&TraceThread<std::function<void()>>, \"loadblk\", [=, &chainman]{ ThreadImport(chainman, vImportFiles); });\n+    g_load_block = std::thread(&TraceThread<std::function<void()>>, \"loadblk\", [=, &chainman, &args] {\n+        ThreadImport(chainman, vImportFiles, args);\n+    });\n \n     // Wait for genesis block to be processed\n     {"
      },
      {
        "sha": "ce12a80dc71afc503bfd5918a2142d2148012aef",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa40017706e08b4de111e8e57aabeced60881a57/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa40017706e08b4de111e8e57aabeced60881a57/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=fa40017706e08b4de111e8e57aabeced60881a57",
        "patch": "@@ -8,8 +8,8 @@\n \n #include <memory>\n #include <string>\n-#include <util/system.h>\n \n+class ArgsManager;\n struct NodeContext;\n namespace interfaces {\n struct BlockAndHeaderTipInfo;\n@@ -25,21 +25,21 @@ class Ref;\n void Interrupt(NodeContext& node);\n void Shutdown(NodeContext& node);\n //!Initialize the logging infrastructure\n-void InitLogging();\n+void InitLogging(const ArgsManager& args);\n //!Parameter interaction: change current parameters depending on various rules\n-void InitParameterInteraction();\n+void InitParameterInteraction(ArgsManager& args);\n \n /** Initialize bitcoin core: Basic context setup.\n  *  @note This can be done before daemonization. Do not call Shutdown() if this function fails.\n  *  @pre Parameters should be parsed and config file should be read.\n  */\n-bool AppInitBasicSetup();\n+bool AppInitBasicSetup(ArgsManager& args);\n /**\n  * Initialization: parameter interaction.\n  * @note This can be done before daemonization. Do not call Shutdown() if this function fails.\n  * @pre Parameters should be parsed and config file should be read, AppInitBasicSetup should have been called.\n  */\n-bool AppInitParameterInteraction();\n+bool AppInitParameterInteraction(const ArgsManager& args);\n /**\n  * Initialization sanity checks: ecc init, sanity checks, dir lock.\n  * @note This can be done before daemonization. Do not call Shutdown() if this function fails."
      },
      {
        "sha": "e1c3a460e9a8def35294a0d5396e1c38f8bc3e4c",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa40017706e08b4de111e8e57aabeced60881a57/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa40017706e08b4de111e8e57aabeced60881a57/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=fa40017706e08b4de111e8e57aabeced60881a57",
        "patch": "@@ -71,13 +71,13 @@ class NodeImpl : public Node\n     uint64_t getAssumedBlockchainSize() override { return Params().AssumedBlockchainSize(); }\n     uint64_t getAssumedChainStateSize() override { return Params().AssumedChainStateSize(); }\n     std::string getNetwork() override { return Params().NetworkIDString(); }\n-    void initLogging() override { InitLogging(); }\n-    void initParameterInteraction() override { InitParameterInteraction(); }\n+    void initLogging() override { InitLogging(gArgs); }\n+    void initParameterInteraction() override { InitParameterInteraction(gArgs); }\n     bilingual_str getWarnings() override { return GetWarnings(true); }\n     uint32_t getLogCategories() override { return LogInstance().GetCategoryMask(); }\n     bool baseInitialize() override\n     {\n-        return AppInitBasicSetup() && AppInitParameterInteraction() && AppInitSanityChecks() &&\n+        return AppInitBasicSetup(gArgs) && AppInitParameterInteraction(gArgs) && AppInitSanityChecks() &&\n                AppInitLockDataDirectory();\n     }\n     bool appInitMain(interfaces::BlockAndHeaderTipInfo* tip_info) override"
      },
      {
        "sha": "0143b08be4925f9af5a8662e24359bd81329084e",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa40017706e08b4de111e8e57aabeced60881a57/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa40017706e08b4de111e8e57aabeced60881a57/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=fa40017706e08b4de111e8e57aabeced60881a57",
        "patch": "@@ -97,8 +97,8 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName, const std::ve\n     SelectParams(chainName);\n     SeedInsecureRand();\n     if (G_TEST_LOG_FUN) LogInstance().PushBackCallback(G_TEST_LOG_FUN);\n-    InitLogging();\n-    AppInitParameterInteraction();\n+    InitLogging(*m_node.args);\n+    AppInitParameterInteraction(*m_node.args);\n     LogInstance().StartLogging();\n     SHA256AutoDetect();\n     ECC_Start();"
      }
    ]
  },
  {
    "sha": "fa33bc2dabbbd2d73961f9b0ce51420a3b6e4ad5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTMzYmMyZGFiYmJkMmQ3Mzk2MWY5YjBjZTUxNDIwYTNiNmU0YWQ1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-22T07:44:49Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-24T05:51:48Z"
      },
      "message": "init: Capture copy of blocknotify setting for BlockNotifyCallback\n\nCan be reviewed with --color-moved=dimmed-zebra --color-moved-ws=ignore-all-space",
      "tree": {
        "sha": "1708499fbe1d0a71877437e27da176bc8cb9df7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1708499fbe1d0a71877437e27da176bc8cb9df7a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa33bc2dabbbd2d73961f9b0ce51420a3b6e4ad5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgYCAwAke6Zzh9FokvK+n/3E7vtr3HSJWoTdxLJqKFDSKVA4Ct8cfxCpLOf65dp\nRAc38RDGhO1LsmrIh/jnobhZIJdeNs81+Z5lF/0DX+TQruwAhM3LqAUom6a3DFDL\nYzVbZC1QPu5FmKsl17+Wzv/yxDB3zITSv7OheZGavyLSsrSflCMYFvw1Rg/Iwsow\nLpZyzFroaShepR8EQVBAshNTXMHfrgerFBRahjbZvOq2fUMTpdOk6nQR7/i1aheb\no8WQF3YKibOQEcOIQSN8aG1a+gku7NyyAMe4jRBywp5iGYHTHgsiWaMyHNQJmSvQ\ngGsvv1bcOHEvIfvS4b3SJVVgRjudo80IU+2ZK8LZr9J3B7YKe/WA8L4TdHRRHAXT\nk/YvpX+eM23wJsdQYQ19BHQceuJAkUzWDQlFpDLlgv4ipg1rdnvOik4vrxR1vNeJ\nR61yzdYLgEwwTxQtr48MjpxnorVDjUECsreqjhd1EM5bs990X8+ng43lc6dcv106\nfTZxphQU\n=Kf2m\n-----END PGP SIGNATURE-----",
        "payload": "tree 1708499fbe1d0a71877437e27da176bc8cb9df7a\nparent fa40017706e08b4de111e8e57aabeced60881a57\nauthor MarcoFalke <falke.marco@gmail.com> 1598082289 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1598248308 +0200\n\ninit: Capture copy of blocknotify setting for BlockNotifyCallback\n\nCan be reviewed with --color-moved=dimmed-zebra --color-moved-ws=ignore-all-space\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa33bc2dabbbd2d73961f9b0ce51420a3b6e4ad5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa33bc2dabbbd2d73961f9b0ce51420a3b6e4ad5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa33bc2dabbbd2d73961f9b0ce51420a3b6e4ad5/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa40017706e08b4de111e8e57aabeced60881a57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa40017706e08b4de111e8e57aabeced60881a57",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa40017706e08b4de111e8e57aabeced60881a57"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 14,
      "deletions": 16
    },
    "files": [
      {
        "sha": "d01a98fc5604cfa534b3e422d183ff5e6aec2329",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 16,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa33bc2dabbbd2d73961f9b0ce51420a3b6e4ad5/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa33bc2dabbbd2d73961f9b0ce51420a3b6e4ad5/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa33bc2dabbbd2d73961f9b0ce51420a3b6e4ad5",
        "patch": "@@ -600,21 +600,6 @@ std::string LicenseInfo()\n            \"\\n\";\n }\n \n-#if HAVE_SYSTEM\n-static void BlockNotifyCallback(SynchronizationState sync_state, const CBlockIndex* pBlockIndex)\n-{\n-    if (sync_state != SynchronizationState::POST_INIT || !pBlockIndex)\n-        return;\n-\n-    std::string strCmd = gArgs.GetArg(\"-blocknotify\", \"\");\n-    if (!strCmd.empty()) {\n-        boost::replace_all(strCmd, \"%s\", pBlockIndex->GetBlockHash().GetHex());\n-        std::thread t(runCommand, strCmd);\n-        t.detach(); // thread runs free\n-    }\n-}\n-#endif\n-\n static bool fHaveGenesis = false;\n static Mutex g_genesis_wait_mutex;\n static std::condition_variable g_genesis_wait_cv;\n@@ -1847,8 +1832,21 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     }\n \n #if HAVE_SYSTEM\n-    if (gArgs.IsArgSet(\"-blocknotify\"))\n+    if (args.IsArgSet(\"-blocknotify\")) {\n+        const std::string block_notify = args.GetArg(\"-blocknotify\", \"\");\n+        const auto BlockNotifyCallback = [block_notify](SynchronizationState sync_state, const CBlockIndex* pBlockIndex) {\n+            if (sync_state != SynchronizationState::POST_INIT || !pBlockIndex)\n+                return;\n+\n+            std::string strCmd = block_notify;\n+            if (!strCmd.empty()) {\n+                boost::replace_all(strCmd, \"%s\", pBlockIndex->GetBlockHash().GetHex());\n+                std::thread t(runCommand, strCmd);\n+                t.detach(); // thread runs free\n+            }\n+        };\n         uiInterface.NotifyBlockTip_connect(BlockNotifyCallback);\n+    }\n #endif\n \n     std::vector<fs::path> vImportFiles;"
      }
    ]
  },
  {
    "sha": "fa9d5902f7d72e8cce105dd1b1f5a1062e304b10",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTlkNTkwMmY3ZDcyZThjY2UxMDVkZDFiMWY1YTEwNjJlMzA0YjEw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-21T18:38:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-24T05:52:17Z"
      },
      "message": "scripted-diff: gArgs -> args\n\n-BEGIN VERIFY SCRIPT-\n # Replace gArgs with args\n sed -i 's/\\<gArgs\\>/args/g' src/init.cpp src/bitcoind.cpp\n sed -i 's/&args;/\\&gArgs;/g' src/init.cpp\n\n # Format changed lines\n git diff -U0 | clang-format-diff -p1 -i -v\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "0b5332f79619c87125192fb1b22e0f4bcc6d4de6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b5332f79619c87125192fb1b22e0f4bcc6d4de6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa9d5902f7d72e8cce105dd1b1f5a1062e304b10",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhZ8QwAqHzDOZh5KyfnWD22wxcvLWhaG8/5k7Cs43S5Fd86WA+CEMV1F/E/Uycf\n4sEbsneKvCaysUaonUevHuK3qDwdmvwFQToxIsiqbdNKvPJrDh8k8IeYwucp8XBX\nl6HHO40Q66ATgTgLjBZOn2eLm0hdZXsWuKcOg8Z6HCXBQr/5Ks8UBivqZLo5U56a\npx9GFjU0XQd/QKM5dc3Cm4I/GcoLaGd8s9/dQDSdRkGH2aNtKtrg1PY8hGUOBWX2\nGuPvCCPeSCxEVNQsnhdJOVBnRnEO13oeCxiUK7UVweUThgOKgerEAuqWF9+JBvCN\nmrqmtuwvqyz52hZ0dDqda3qlbxzCWE3/GDfFizuY4I1DaA6cm6LdIK2g/7IAjyZi\nAch113raTC/OYiL4G8MkweQJCC186E8XR4RDSi0KVdlTOGzPyRDl0P+/ItvbCzsD\n+EXliq14z6KuhUf22KMHd27xrP0wYeb5qzz2eWUQ80JT8t1CaJV3PxitBqeCz6WI\nOhWIedM0\n=5T/r\n-----END PGP SIGNATURE-----",
        "payload": "tree 0b5332f79619c87125192fb1b22e0f4bcc6d4de6\nparent fa33bc2dabbbd2d73961f9b0ce51420a3b6e4ad5\nauthor MarcoFalke <falke.marco@gmail.com> 1598035081 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1598248337 +0200\n\nscripted-diff: gArgs -> args\n\n-BEGIN VERIFY SCRIPT-\n # Replace gArgs with args\n sed -i 's/\\<gArgs\\>/args/g' src/init.cpp src/bitcoind.cpp\n sed -i 's/&args;/\\&gArgs;/g' src/init.cpp\n\n # Format changed lines\n git diff -U0 | clang-format-diff -p1 -i -v\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9d5902f7d72e8cce105dd1b1f5a1062e304b10",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa9d5902f7d72e8cce105dd1b1f5a1062e304b10",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9d5902f7d72e8cce105dd1b1f5a1062e304b10/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa33bc2dabbbd2d73961f9b0ce51420a3b6e4ad5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa33bc2dabbbd2d73961f9b0ce51420a3b6e4ad5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa33bc2dabbbd2d73961f9b0ce51420a3b6e4ad5"
      }
    ],
    "stats": {
      "total": 288,
      "additions": 140,
      "deletions": 148
    },
    "files": [
      {
        "sha": "227626f40fa5e4f9c386c571a5da401bfb42b771",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 15,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9d5902f7d72e8cce105dd1b1f5a1062e304b10/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9d5902f7d72e8cce105dd1b1f5a1062e304b10/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=fa9d5902f7d72e8cce105dd1b1f5a1062e304b10",
        "patch": "@@ -54,22 +54,19 @@ static bool AppInit(int argc, char* argv[])\n     SetupServerArgs(node);\n     ArgsManager& args = *Assert(node.args);\n     std::string error;\n-    if (!gArgs.ParseParameters(argc, argv, error)) {\n+    if (!args.ParseParameters(argc, argv, error)) {\n         return InitError(Untranslated(strprintf(\"Error parsing command line arguments: %s\\n\", error)));\n     }\n \n     // Process help and version before taking care about datadir\n-    if (HelpRequested(gArgs) || gArgs.IsArgSet(\"-version\")) {\n+    if (HelpRequested(args) || args.IsArgSet(\"-version\")) {\n         std::string strUsage = PACKAGE_NAME \" version \" + FormatFullVersion() + \"\\n\";\n \n-        if (gArgs.IsArgSet(\"-version\"))\n-        {\n+        if (args.IsArgSet(\"-version\")) {\n             strUsage += FormatParagraph(LicenseInfo()) + \"\\n\";\n-        }\n-        else\n-        {\n+        } else {\n             strUsage += \"\\nUsage:  bitcoind [options]                     Start \" PACKAGE_NAME \"\\n\";\n-            strUsage += \"\\n\" + gArgs.GetHelpMessage();\n+            strUsage += \"\\n\" + args.GetHelpMessage();\n         }\n \n         tfm::format(std::cout, \"%s\", strUsage);\n@@ -80,14 +77,14 @@ static bool AppInit(int argc, char* argv[])\n     try\n     {\n         if (!CheckDataDirOption()) {\n-            return InitError(Untranslated(strprintf(\"Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\"))));\n+            return InitError(Untranslated(strprintf(\"Specified data directory \\\"%s\\\" does not exist.\\n\", args.GetArg(\"-datadir\", \"\"))));\n         }\n-        if (!gArgs.ReadConfigFiles(error, true)) {\n+        if (!args.ReadConfigFiles(error, true)) {\n             return InitError(Untranslated(strprintf(\"Error reading configuration file: %s\\n\", error)));\n         }\n         // Check for -chain, -testnet or -regtest parameter (Params() calls are only valid after this clause)\n         try {\n-            SelectParams(gArgs.GetChainName());\n+            SelectParams(args.GetChainName());\n         } catch (const std::exception& e) {\n             return InitError(Untranslated(strprintf(\"%s\\n\", e.what())));\n         }\n@@ -99,13 +96,13 @@ static bool AppInit(int argc, char* argv[])\n             }\n         }\n \n-        if (!gArgs.InitSettings(error)) {\n+        if (!args.InitSettings(error)) {\n             InitError(Untranslated(error));\n             return false;\n         }\n \n         // -server defaults to true for bitcoind but not for the GUI so do this here\n-        gArgs.SoftSetBoolArg(\"-server\", true);\n+        args.SoftSetBoolArg(\"-server\", true);\n         // Set this early so that parameter interactions go to console\n         InitLogging(args);\n         InitParameterInteraction(args);\n@@ -122,8 +119,7 @@ static bool AppInit(int argc, char* argv[])\n             // InitError will have been called with detailed error, which ends up on console\n             return false;\n         }\n-        if (gArgs.GetBoolArg(\"-daemon\", false))\n-        {\n+        if (args.GetBoolArg(\"-daemon\", false)) {\n #if HAVE_DECL_DAEMON\n #if defined(MAC_OSX)\n #pragma GCC diagnostic push"
      },
      {
        "sha": "eddb3ae9a0675dd947e8d3717ea285efc1250d1a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 129,
        "deletions": 133,
        "changes": 262,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9d5902f7d72e8cce105dd1b1f5a1062e304b10/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9d5902f7d72e8cce105dd1b1f5a1062e304b10/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa9d5902f7d72e8cce105dd1b1f5a1062e304b10",
        "patch": "@@ -109,7 +109,7 @@ static const char* BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n \n static fs::path GetPidFile(const ArgsManager& args)\n {\n-    return AbsPathForConfigVal(fs::path(gArgs.GetArg(\"-pid\", BITCOIN_PID_FILENAME)));\n+    return AbsPathForConfigVal(fs::path(args.GetArg(\"-pid\", BITCOIN_PID_FILENAME)));\n }\n \n NODISCARD static bool CreatePidFile(const ArgsManager& args)\n@@ -732,13 +732,13 @@ static void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImp\n         }\n     }\n \n-    if (gArgs.GetBoolArg(\"-stopafterblockimport\", DEFAULT_STOPAFTERBLOCKIMPORT)) {\n+    if (args.GetBoolArg(\"-stopafterblockimport\", DEFAULT_STOPAFTERBLOCKIMPORT)) {\n         LogPrintf(\"Stopping after block import\\n\");\n         StartShutdown();\n         return;\n     }\n     } // End scope of CImportingNow\n-    if (gArgs.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n+    if (args.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n         LoadMempool(::mempool);\n     }\n     ::mempool.SetIsLoaded(!ShutdownRequested());\n@@ -775,7 +775,7 @@ static bool AppInitServers(const util::Ref& context, NodeContext& node)\n     node.rpc_interruption_point = RpcInterruptionPoint;\n     if (!StartHTTPRPC(context))\n         return false;\n-    if (gArgs.GetBoolArg(\"-rest\", DEFAULT_REST_ENABLE)) StartREST(context);\n+    if (args.GetBoolArg(\"-rest\", DEFAULT_REST_ENABLE)) StartREST(context);\n     StartHTTPServer();\n     return true;\n }\n@@ -785,61 +785,61 @@ void InitParameterInteraction(ArgsManager& args)\n {\n     // when specifying an explicit binding address, you want to listen on it\n     // even when -connect or -proxy is specified\n-    if (gArgs.IsArgSet(\"-bind\")) {\n-        if (gArgs.SoftSetBoolArg(\"-listen\", true))\n+    if (args.IsArgSet(\"-bind\")) {\n+        if (args.SoftSetBoolArg(\"-listen\", true))\n             LogPrintf(\"%s: parameter interaction: -bind set -> setting -listen=1\\n\", __func__);\n     }\n-    if (gArgs.IsArgSet(\"-whitebind\")) {\n-        if (gArgs.SoftSetBoolArg(\"-listen\", true))\n+    if (args.IsArgSet(\"-whitebind\")) {\n+        if (args.SoftSetBoolArg(\"-listen\", true))\n             LogPrintf(\"%s: parameter interaction: -whitebind set -> setting -listen=1\\n\", __func__);\n     }\n \n-    if (gArgs.IsArgSet(\"-connect\")) {\n+    if (args.IsArgSet(\"-connect\")) {\n         // when only connecting to trusted nodes, do not seed via DNS, or listen by default\n-        if (gArgs.SoftSetBoolArg(\"-dnsseed\", false))\n+        if (args.SoftSetBoolArg(\"-dnsseed\", false))\n             LogPrintf(\"%s: parameter interaction: -connect set -> setting -dnsseed=0\\n\", __func__);\n-        if (gArgs.SoftSetBoolArg(\"-listen\", false))\n+        if (args.SoftSetBoolArg(\"-listen\", false))\n             LogPrintf(\"%s: parameter interaction: -connect set -> setting -listen=0\\n\", __func__);\n     }\n \n-    if (gArgs.IsArgSet(\"-proxy\")) {\n+    if (args.IsArgSet(\"-proxy\")) {\n         // to protect privacy, do not listen by default if a default proxy server is specified\n-        if (gArgs.SoftSetBoolArg(\"-listen\", false))\n+        if (args.SoftSetBoolArg(\"-listen\", false))\n             LogPrintf(\"%s: parameter interaction: -proxy set -> setting -listen=0\\n\", __func__);\n         // to protect privacy, do not use UPNP when a proxy is set. The user may still specify -listen=1\n         // to listen locally, so don't rely on this happening through -listen below.\n-        if (gArgs.SoftSetBoolArg(\"-upnp\", false))\n+        if (args.SoftSetBoolArg(\"-upnp\", false))\n             LogPrintf(\"%s: parameter interaction: -proxy set -> setting -upnp=0\\n\", __func__);\n         // to protect privacy, do not discover addresses by default\n-        if (gArgs.SoftSetBoolArg(\"-discover\", false))\n+        if (args.SoftSetBoolArg(\"-discover\", false))\n             LogPrintf(\"%s: parameter interaction: -proxy set -> setting -discover=0\\n\", __func__);\n     }\n \n-    if (!gArgs.GetBoolArg(\"-listen\", DEFAULT_LISTEN)) {\n+    if (!args.GetBoolArg(\"-listen\", DEFAULT_LISTEN)) {\n         // do not map ports or try to retrieve public IP when not listening (pointless)\n-        if (gArgs.SoftSetBoolArg(\"-upnp\", false))\n+        if (args.SoftSetBoolArg(\"-upnp\", false))\n             LogPrintf(\"%s: parameter interaction: -listen=0 -> setting -upnp=0\\n\", __func__);\n-        if (gArgs.SoftSetBoolArg(\"-discover\", false))\n+        if (args.SoftSetBoolArg(\"-discover\", false))\n             LogPrintf(\"%s: parameter interaction: -listen=0 -> setting -discover=0\\n\", __func__);\n-        if (gArgs.SoftSetBoolArg(\"-listenonion\", false))\n+        if (args.SoftSetBoolArg(\"-listenonion\", false))\n             LogPrintf(\"%s: parameter interaction: -listen=0 -> setting -listenonion=0\\n\", __func__);\n     }\n \n-    if (gArgs.IsArgSet(\"-externalip\")) {\n+    if (args.IsArgSet(\"-externalip\")) {\n         // if an explicit public IP is specified, do not try to find others\n-        if (gArgs.SoftSetBoolArg(\"-discover\", false))\n+        if (args.SoftSetBoolArg(\"-discover\", false))\n             LogPrintf(\"%s: parameter interaction: -externalip set -> setting -discover=0\\n\", __func__);\n     }\n \n     // disable whitelistrelay in blocksonly mode\n-    if (gArgs.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY)) {\n-        if (gArgs.SoftSetBoolArg(\"-whitelistrelay\", false))\n+    if (args.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY)) {\n+        if (args.SoftSetBoolArg(\"-whitelistrelay\", false))\n             LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -whitelistrelay=0\\n\", __func__);\n     }\n \n     // Forcing relay from whitelisted hosts implies we will accept relays from them in the first place.\n-    if (gArgs.GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY)) {\n-        if (gArgs.SoftSetBoolArg(\"-whitelistrelay\", true))\n+    if (args.GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY)) {\n+        if (args.SoftSetBoolArg(\"-whitelistrelay\", true))\n             LogPrintf(\"%s: parameter interaction: -whitelistforcerelay=1 -> setting -whitelistrelay=1\\n\", __func__);\n     }\n }\n@@ -852,16 +852,16 @@ void InitParameterInteraction(ArgsManager& args)\n  */\n void InitLogging(const ArgsManager& args)\n {\n-    LogInstance().m_print_to_file = !gArgs.IsArgNegated(\"-debuglogfile\");\n-    LogInstance().m_file_path = AbsPathForConfigVal(gArgs.GetArg(\"-debuglogfile\", DEFAULT_DEBUGLOGFILE));\n-    LogInstance().m_print_to_console = gArgs.GetBoolArg(\"-printtoconsole\", !gArgs.GetBoolArg(\"-daemon\", false));\n-    LogInstance().m_log_timestamps = gArgs.GetBoolArg(\"-logtimestamps\", DEFAULT_LOGTIMESTAMPS);\n-    LogInstance().m_log_time_micros = gArgs.GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);\n+    LogInstance().m_print_to_file = !args.IsArgNegated(\"-debuglogfile\");\n+    LogInstance().m_file_path = AbsPathForConfigVal(args.GetArg(\"-debuglogfile\", DEFAULT_DEBUGLOGFILE));\n+    LogInstance().m_print_to_console = args.GetBoolArg(\"-printtoconsole\", !args.GetBoolArg(\"-daemon\", false));\n+    LogInstance().m_log_timestamps = args.GetBoolArg(\"-logtimestamps\", DEFAULT_LOGTIMESTAMPS);\n+    LogInstance().m_log_time_micros = args.GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);\n #ifdef HAVE_THREAD_LOCAL\n-    LogInstance().m_log_threadnames = gArgs.GetBoolArg(\"-logthreadnames\", DEFAULT_LOGTHREADNAMES);\n+    LogInstance().m_log_threadnames = args.GetBoolArg(\"-logthreadnames\", DEFAULT_LOGTHREADNAMES);\n #endif\n \n-    fLogIPs = gArgs.GetBoolArg(\"-logips\", DEFAULT_LOGIPS);\n+    fLogIPs = args.GetBoolArg(\"-logips\", DEFAULT_LOGIPS);\n \n     std::string version_string = FormatFullVersion();\n #ifdef DEBUG\n@@ -916,7 +916,7 @@ bool AppInitBasicSetup(ArgsManager& args)\n     }\n \n #ifndef WIN32\n-    if (!gArgs.GetBoolArg(\"-sysperms\", false)) {\n+    if (!args.GetBoolArg(\"-sysperms\", false)) {\n         umask(077);\n     }\n \n@@ -948,9 +948,9 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     // Error if network-specific options (-addnode, -connect, etc) are\n     // specified in default section of config file, but not overridden\n     // on the command line or in this network's section of the config file.\n-    std::string network = gArgs.GetChainName();\n+    std::string network = args.GetChainName();\n     bilingual_str errors;\n-    for (const auto& arg : gArgs.GetUnsuitableSectionOnlyArgs()) {\n+    for (const auto& arg : args.GetUnsuitableSectionOnlyArgs()) {\n         errors += strprintf(_(\"Config setting for %s only applied on %s network when in [%s] section.\") + Untranslated(\"\\n\"), arg, network, network);\n     }\n \n@@ -960,7 +960,7 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n \n     // Warn if unrecognized section name are present in the config file.\n     bilingual_str warnings;\n-    for (const auto& section : gArgs.GetUnrecognizedSections()) {\n+    for (const auto& section : args.GetUnrecognizedSections()) {\n         warnings += strprintf(Untranslated(\"%s:%i \") + _(\"Section [%s] is not recognized.\") + Untranslated(\"\\n\"), section.m_file, section.m_line, section.m_name);\n     }\n \n@@ -969,15 +969,15 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     }\n \n     if (!fs::is_directory(GetBlocksDir())) {\n-        return InitError(strprintf(_(\"Specified blocks directory \\\"%s\\\" does not exist.\"), gArgs.GetArg(\"-blocksdir\", \"\")));\n+        return InitError(strprintf(_(\"Specified blocks directory \\\"%s\\\" does not exist.\"), args.GetArg(\"-blocksdir\", \"\")));\n     }\n \n     // parse and validate enabled filter types\n-    std::string blockfilterindex_value = gArgs.GetArg(\"-blockfilterindex\", DEFAULT_BLOCKFILTERINDEX);\n+    std::string blockfilterindex_value = args.GetArg(\"-blockfilterindex\", DEFAULT_BLOCKFILTERINDEX);\n     if (blockfilterindex_value == \"\" || blockfilterindex_value == \"1\") {\n         g_enabled_filter_types = AllBlockFilterTypes();\n     } else if (blockfilterindex_value != \"0\") {\n-        const std::vector<std::string> names = gArgs.GetArgs(\"-blockfilterindex\");\n+        const std::vector<std::string> names = args.GetArgs(\"-blockfilterindex\");\n         for (const auto& name : names) {\n             BlockFilterType filter_type;\n             if (!BlockFilterTypeByName(name, filter_type)) {\n@@ -988,7 +988,7 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     }\n \n     // Signal NODE_COMPACT_FILTERS if peerblockfilters and basic filters index are both enabled.\n-    if (gArgs.GetBoolArg(\"-peerblockfilters\", DEFAULT_PEERBLOCKFILTERS)) {\n+    if (args.GetBoolArg(\"-peerblockfilters\", DEFAULT_PEERBLOCKFILTERS)) {\n         if (g_enabled_filter_types.count(BlockFilterType::BASIC) != 1) {\n             return InitError(_(\"Cannot set -peerblockfilters without -blockfilterindex.\"));\n         }\n@@ -997,23 +997,23 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     }\n \n     // if using block pruning, then disallow txindex\n-    if (gArgs.GetArg(\"-prune\", 0)) {\n-        if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n+    if (args.GetArg(\"-prune\", 0)) {\n+        if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n         if (!g_enabled_filter_types.empty()) {\n             return InitError(_(\"Prune mode is incompatible with -blockfilterindex.\"));\n         }\n     }\n \n     // -bind and -whitebind can't be set when not listening\n-    size_t nUserBind = gArgs.GetArgs(\"-bind\").size() + gArgs.GetArgs(\"-whitebind\").size();\n-    if (nUserBind != 0 && !gArgs.GetBoolArg(\"-listen\", DEFAULT_LISTEN)) {\n+    size_t nUserBind = args.GetArgs(\"-bind\").size() + args.GetArgs(\"-whitebind\").size();\n+    if (nUserBind != 0 && !args.GetBoolArg(\"-listen\", DEFAULT_LISTEN)) {\n         return InitError(Untranslated(\"Cannot set -bind or -whitebind together with -listen=0\"));\n     }\n \n     // Make sure enough file descriptors are available\n     int nBind = std::max(nUserBind, size_t(1));\n-    nUserMaxConnections = gArgs.GetArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);\n+    nUserMaxConnections = args.GetArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);\n     nMaxConnections = std::max(nUserMaxConnections, 0);\n \n     // Trim requested connection counts, to fit into system limitations\n@@ -1033,9 +1033,9 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         InitWarning(strprintf(_(\"Reducing -maxconnections from %d to %d, because of system limitations.\"), nUserMaxConnections, nMaxConnections));\n \n     // ********************************************************* Step 3: parameter-to-internal-flags\n-    if (gArgs.IsArgSet(\"-debug\")) {\n+    if (args.IsArgSet(\"-debug\")) {\n         // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n-        const std::vector<std::string> categories = gArgs.GetArgs(\"-debug\");\n+        const std::vector<std::string> categories = args.GetArgs(\"-debug\");\n \n         if (std::none_of(categories.begin(), categories.end(),\n             [](std::string cat){return cat == \"0\" || cat == \"none\";})) {\n@@ -1048,28 +1048,28 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     }\n \n     // Now remove the logging categories which were explicitly excluded\n-    for (const std::string& cat : gArgs.GetArgs(\"-debugexclude\")) {\n+    for (const std::string& cat : args.GetArgs(\"-debugexclude\")) {\n         if (!LogInstance().DisableCategory(cat)) {\n             InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debugexclude\", cat));\n         }\n     }\n \n     // Checkmempool and checkblockindex default to true in regtest mode\n-    int ratio = std::min<int>(std::max<int>(gArgs.GetArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks() ? 1 : 0), 0), 1000000);\n+    int ratio = std::min<int>(std::max<int>(args.GetArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks() ? 1 : 0), 0), 1000000);\n     if (ratio != 0) {\n         mempool.setSanityCheck(1.0 / ratio);\n     }\n-    fCheckBlockIndex = gArgs.GetBoolArg(\"-checkblockindex\", chainparams.DefaultConsistencyChecks());\n-    fCheckpointsEnabled = gArgs.GetBoolArg(\"-checkpoints\", DEFAULT_CHECKPOINTS_ENABLED);\n+    fCheckBlockIndex = args.GetBoolArg(\"-checkblockindex\", chainparams.DefaultConsistencyChecks());\n+    fCheckpointsEnabled = args.GetBoolArg(\"-checkpoints\", DEFAULT_CHECKPOINTS_ENABLED);\n \n-    hashAssumeValid = uint256S(gArgs.GetArg(\"-assumevalid\", chainparams.GetConsensus().defaultAssumeValid.GetHex()));\n+    hashAssumeValid = uint256S(args.GetArg(\"-assumevalid\", chainparams.GetConsensus().defaultAssumeValid.GetHex()));\n     if (!hashAssumeValid.IsNull())\n         LogPrintf(\"Assuming ancestors of block %s have valid signatures.\\n\", hashAssumeValid.GetHex());\n     else\n         LogPrintf(\"Validating signatures for all blocks.\\n\");\n \n-    if (gArgs.IsArgSet(\"-minimumchainwork\")) {\n-        const std::string minChainWorkStr = gArgs.GetArg(\"-minimumchainwork\", \"\");\n+    if (args.IsArgSet(\"-minimumchainwork\")) {\n+        const std::string minChainWorkStr = args.GetArg(\"-minimumchainwork\", \"\");\n         if (!IsHexNumber(minChainWorkStr)) {\n             return InitError(strprintf(Untranslated(\"Invalid non-hex (%s) minimum chain work value specified\"), minChainWorkStr));\n         }\n@@ -1083,22 +1083,21 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     }\n \n     // mempool limits\n-    int64_t nMempoolSizeMax = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n-    int64_t nMempoolSizeMin = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n+    int64_t nMempoolSizeMax = args.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    int64_t nMempoolSizeMin = args.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n     if (nMempoolSizeMax < 0 || nMempoolSizeMax < nMempoolSizeMin)\n         return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), std::ceil(nMempoolSizeMin / 1000000.0)));\n     // incremental relay fee sets the minimum feerate increase necessary for BIP 125 replacement in the mempool\n     // and the amount the mempool min fee increases above the feerate of txs evicted due to mempool limiting.\n-    if (gArgs.IsArgSet(\"-incrementalrelayfee\"))\n-    {\n+    if (args.IsArgSet(\"-incrementalrelayfee\")) {\n         CAmount n = 0;\n-        if (!ParseMoney(gArgs.GetArg(\"-incrementalrelayfee\", \"\"), n))\n-            return InitError(AmountErrMsg(\"incrementalrelayfee\", gArgs.GetArg(\"-incrementalrelayfee\", \"\")));\n+        if (!ParseMoney(args.GetArg(\"-incrementalrelayfee\", \"\"), n))\n+            return InitError(AmountErrMsg(\"incrementalrelayfee\", args.GetArg(\"-incrementalrelayfee\", \"\")));\n         incrementalRelayFee = CFeeRate(n);\n     }\n \n     // block pruning; get the amount of disk space (in MiB) to allot for block & undo files\n-    int64_t nPruneArg = gArgs.GetArg(\"-prune\", 0);\n+    int64_t nPruneArg = args.GetArg(\"-prune\", 0);\n     if (nPruneArg < 0) {\n         return InitError(_(\"Prune cannot be configured with a negative value.\"));\n     }\n@@ -1115,20 +1114,20 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         fPruneMode = true;\n     }\n \n-    nConnectTimeout = gArgs.GetArg(\"-timeout\", DEFAULT_CONNECT_TIMEOUT);\n+    nConnectTimeout = args.GetArg(\"-timeout\", DEFAULT_CONNECT_TIMEOUT);\n     if (nConnectTimeout <= 0) {\n         nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n     }\n \n-    peer_connect_timeout = gArgs.GetArg(\"-peertimeout\", DEFAULT_PEER_CONNECT_TIMEOUT);\n+    peer_connect_timeout = args.GetArg(\"-peertimeout\", DEFAULT_PEER_CONNECT_TIMEOUT);\n     if (peer_connect_timeout <= 0) {\n         return InitError(Untranslated(\"peertimeout cannot be configured with a negative value.\"));\n     }\n \n-    if (gArgs.IsArgSet(\"-minrelaytxfee\")) {\n+    if (args.IsArgSet(\"-minrelaytxfee\")) {\n         CAmount n = 0;\n-        if (!ParseMoney(gArgs.GetArg(\"-minrelaytxfee\", \"\"), n)) {\n-            return InitError(AmountErrMsg(\"minrelaytxfee\", gArgs.GetArg(\"-minrelaytxfee\", \"\")));\n+        if (!ParseMoney(args.GetArg(\"-minrelaytxfee\", \"\"), n)) {\n+            return InitError(AmountErrMsg(\"minrelaytxfee\", args.GetArg(\"-minrelaytxfee\", \"\")));\n         }\n         // High fee check is done afterward in CWallet::CreateWalletFromFile()\n         ::minRelayTxFee = CFeeRate(n);\n@@ -1140,48 +1139,46 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n \n     // Sanity check argument for min fee for including tx in block\n     // TODO: Harmonize which arguments need sanity checking and where that happens\n-    if (gArgs.IsArgSet(\"-blockmintxfee\"))\n-    {\n+    if (args.IsArgSet(\"-blockmintxfee\")) {\n         CAmount n = 0;\n-        if (!ParseMoney(gArgs.GetArg(\"-blockmintxfee\", \"\"), n))\n-            return InitError(AmountErrMsg(\"blockmintxfee\", gArgs.GetArg(\"-blockmintxfee\", \"\")));\n+        if (!ParseMoney(args.GetArg(\"-blockmintxfee\", \"\"), n))\n+            return InitError(AmountErrMsg(\"blockmintxfee\", args.GetArg(\"-blockmintxfee\", \"\")));\n     }\n \n     // Feerate used to define dust.  Shouldn't be changed lightly as old\n     // implementations may inadvertently create non-standard transactions\n-    if (gArgs.IsArgSet(\"-dustrelayfee\"))\n-    {\n+    if (args.IsArgSet(\"-dustrelayfee\")) {\n         CAmount n = 0;\n-        if (!ParseMoney(gArgs.GetArg(\"-dustrelayfee\", \"\"), n))\n-            return InitError(AmountErrMsg(\"dustrelayfee\", gArgs.GetArg(\"-dustrelayfee\", \"\")));\n+        if (!ParseMoney(args.GetArg(\"-dustrelayfee\", \"\"), n))\n+            return InitError(AmountErrMsg(\"dustrelayfee\", args.GetArg(\"-dustrelayfee\", \"\")));\n         dustRelayFee = CFeeRate(n);\n     }\n \n-    fRequireStandard = !gArgs.GetBoolArg(\"-acceptnonstdtxn\", !chainparams.RequireStandard());\n+    fRequireStandard = !args.GetBoolArg(\"-acceptnonstdtxn\", !chainparams.RequireStandard());\n     if (!chainparams.IsTestChain() && !fRequireStandard) {\n         return InitError(strprintf(Untranslated(\"acceptnonstdtxn is not currently supported for %s chain\"), chainparams.NetworkIDString()));\n     }\n-    nBytesPerSigOp = gArgs.GetArg(\"-bytespersigop\", nBytesPerSigOp);\n+    nBytesPerSigOp = args.GetArg(\"-bytespersigop\", nBytesPerSigOp);\n \n     if (!g_wallet_init_interface.ParameterInteraction()) return false;\n \n-    fIsBareMultisigStd = gArgs.GetBoolArg(\"-permitbaremultisig\", DEFAULT_PERMIT_BAREMULTISIG);\n-    fAcceptDatacarrier = gArgs.GetBoolArg(\"-datacarrier\", DEFAULT_ACCEPT_DATACARRIER);\n-    nMaxDatacarrierBytes = gArgs.GetArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n+    fIsBareMultisigStd = args.GetBoolArg(\"-permitbaremultisig\", DEFAULT_PERMIT_BAREMULTISIG);\n+    fAcceptDatacarrier = args.GetBoolArg(\"-datacarrier\", DEFAULT_ACCEPT_DATACARRIER);\n+    nMaxDatacarrierBytes = args.GetArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n \n     // Option to startup with mocktime set (used for regression testing):\n-    SetMockTime(gArgs.GetArg(\"-mocktime\", 0)); // SetMockTime(0) is a no-op\n+    SetMockTime(args.GetArg(\"-mocktime\", 0)); // SetMockTime(0) is a no-op\n \n-    if (gArgs.GetBoolArg(\"-peerbloomfilters\", DEFAULT_PEERBLOOMFILTERS))\n+    if (args.GetBoolArg(\"-peerbloomfilters\", DEFAULT_PEERBLOOMFILTERS))\n         nLocalServices = ServiceFlags(nLocalServices | NODE_BLOOM);\n \n-    if (gArgs.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) < 0)\n+    if (args.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) < 0)\n         return InitError(Untranslated(\"rpcserialversion must be non-negative.\"));\n \n-    if (gArgs.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) > 1)\n+    if (args.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) > 1)\n         return InitError(Untranslated(\"Unknown rpcserialversion requested.\"));\n \n-    nMaxTipAge = gArgs.GetArg(\"-maxtipage\", DEFAULT_MAX_TIP_AGE);\n+    nMaxTipAge = args.GetArg(\"-maxtipage\", DEFAULT_MAX_TIP_AGE);\n \n     return true;\n }\n@@ -1242,7 +1239,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n         return false;\n     }\n     if (LogInstance().m_print_to_file) {\n-        if (gArgs.GetBoolArg(\"-shrinkdebugfile\", LogInstance().DefaultShrinkDebugFile())) {\n+        if (args.GetBoolArg(\"-shrinkdebugfile\", LogInstance().DefaultShrinkDebugFile())) {\n             // Do this first since it both loads a bunch of debug.log into memory,\n             // and because this needs to happen before any other debug.log printing\n             LogInstance().ShrinkDebugFile();\n@@ -1259,10 +1256,10 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     LogPrintf(\"Using data directory %s\\n\", GetDataDir().string());\n \n     // Only log conf file usage message if conf file actually exists.\n-    fs::path config_file_path = GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n+    fs::path config_file_path = GetConfigFile(args.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n     if (fs::exists(config_file_path)) {\n         LogPrintf(\"Config file: %s\\n\", config_file_path.string());\n-    } else if (gArgs.IsArgSet(\"-conf\")) {\n+    } else if (args.IsArgSet(\"-conf\")) {\n         // Warn if no conf file exists at path provided by user\n         InitWarning(strprintf(_(\"The specified config file %s does not exist\\n\"), config_file_path.string()));\n     } else {\n@@ -1271,23 +1268,23 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     }\n \n     // Log the config arguments to debug.log\n-    gArgs.LogArgs();\n+    args.LogArgs();\n \n     LogPrintf(\"Using at most %i automatic connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n \n     // Warn about relative -datadir path.\n-    if (gArgs.IsArgSet(\"-datadir\") && !fs::path(gArgs.GetArg(\"-datadir\", \"\")).is_absolute()) {\n+    if (args.IsArgSet(\"-datadir\") && !fs::path(args.GetArg(\"-datadir\", \"\")).is_absolute()) {\n         LogPrintf(\"Warning: relative datadir option '%s' specified, which will be interpreted relative to the \" /* Continued */\n                   \"current working directory '%s'. This is fragile, because if bitcoin is started in the future \"\n                   \"from a different location, it will be unable to locate the current data files. There could \"\n                   \"also be data loss if bitcoin is started while in a temporary directory.\\n\",\n-            gArgs.GetArg(\"-datadir\", \"\"), fs::current_path().string());\n+                  args.GetArg(\"-datadir\", \"\"), fs::current_path().string());\n     }\n \n     InitSignatureCache();\n     InitScriptExecutionCache();\n \n-    int script_threads = gArgs.GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);\n+    int script_threads = args.GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);\n     if (script_threads <= 0) {\n         // -par=0 means autodetect (number of cores - 1 script threads)\n         // -par=-n means \"leave n cores free\" (number of cores - n - 1 script threads)\n@@ -1343,8 +1340,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n      * that the server is there and will be ready later).  Warmup mode will\n      * be disabled when initialisation is finished.\n      */\n-    if (gArgs.GetBoolArg(\"-server\", false))\n-    {\n+    if (args.GetBoolArg(\"-server\", false)) {\n         uiInterface.InitMessage_connect(SetRPCWarmupStatus);\n         if (!AppInitServers(context, node))\n             return InitError(_(\"Unable to start HTTP server. See debug log for details.\"));\n@@ -1364,9 +1360,9 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     // need to reindex later.\n \n     assert(!node.banman);\n-    node.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", &uiInterface, gArgs.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n+    node.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", &uiInterface, args.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n     assert(!node.connman);\n-    node.connman = MakeUnique<CConnman>(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max()), gArgs.GetBoolArg(\"-networkactive\", true));\n+    node.connman = MakeUnique<CConnman>(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max()), args.GetBoolArg(\"-networkactive\", true));\n     // Make mempool generally available in the node context. For example the connection manager, wallet, or RPC threads,\n     // which are all started after this, may use it from the node context.\n     assert(!node.mempool);\n@@ -1380,7 +1376,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n \n     // sanitize comments per BIP-0014, format user agent and check total size\n     std::vector<std::string> uacomments;\n-    for (const std::string& cmt : gArgs.GetArgs(\"-uacomment\")) {\n+    for (const std::string& cmt : args.GetArgs(\"-uacomment\")) {\n         if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n             return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\"), cmt));\n         uacomments.push_back(cmt);\n@@ -1391,9 +1387,9 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n             strSubVersion.size(), MAX_SUBVERSION_LENGTH));\n     }\n \n-    if (gArgs.IsArgSet(\"-onlynet\")) {\n+    if (args.IsArgSet(\"-onlynet\")) {\n         std::set<enum Network> nets;\n-        for (const std::string& snet : gArgs.GetArgs(\"-onlynet\")) {\n+        for (const std::string& snet : args.GetArgs(\"-onlynet\")) {\n             enum Network net = ParseNetwork(snet);\n             if (net == NET_UNROUTABLE)\n                 return InitError(strprintf(_(\"Unknown network specified in -onlynet: '%s'\"), snet));\n@@ -1407,12 +1403,12 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     }\n \n     // Check for host lookup allowed before parsing any network related parameters\n-    fNameLookup = gArgs.GetBoolArg(\"-dns\", DEFAULT_NAME_LOOKUP);\n+    fNameLookup = args.GetBoolArg(\"-dns\", DEFAULT_NAME_LOOKUP);\n \n-    bool proxyRandomize = gArgs.GetBoolArg(\"-proxyrandomize\", DEFAULT_PROXYRANDOMIZE);\n+    bool proxyRandomize = args.GetBoolArg(\"-proxyrandomize\", DEFAULT_PROXYRANDOMIZE);\n     // -proxy sets a proxy for all outgoing network traffic\n     // -noproxy (or -proxy=0) as well as the empty string can be used to not set a proxy, this is the default\n-    std::string proxyArg = gArgs.GetArg(\"-proxy\", \"\");\n+    std::string proxyArg = args.GetArg(\"-proxy\", \"\");\n     SetReachable(NET_ONION, false);\n     if (proxyArg != \"\" && proxyArg != \"0\") {\n         CService proxyAddr;\n@@ -1434,7 +1430,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     // -onion can be used to set only a proxy for .onion, or override normal proxy for .onion addresses\n     // -noonion (or -onion=0) disables connecting to .onion entirely\n     // An empty string is used to not override the onion proxy (in which case it defaults to -proxy set above, or none)\n-    std::string onionArg = gArgs.GetArg(\"-onion\", \"\");\n+    std::string onionArg = args.GetArg(\"-onion\", \"\");\n     if (onionArg != \"\") {\n         if (onionArg == \"0\") { // Handle -noonion/-onion=0\n             SetReachable(NET_ONION, false);\n@@ -1452,11 +1448,11 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     }\n \n     // see Step 2: parameter interactions for more information about these\n-    fListen = gArgs.GetBoolArg(\"-listen\", DEFAULT_LISTEN);\n-    fDiscover = gArgs.GetBoolArg(\"-discover\", true);\n-    g_relay_txes = !gArgs.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY);\n+    fListen = args.GetBoolArg(\"-listen\", DEFAULT_LISTEN);\n+    fDiscover = args.GetBoolArg(\"-discover\", true);\n+    g_relay_txes = !args.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY);\n \n-    for (const std::string& strAddr : gArgs.GetArgs(\"-externalip\")) {\n+    for (const std::string& strAddr : args.GetArgs(\"-externalip\")) {\n         CService addrLocal;\n         if (Lookup(strAddr, addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())\n             AddLocal(addrLocal, LOCAL_MANUAL);\n@@ -1465,8 +1461,8 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     }\n \n     // Read asmap file if configured\n-    if (gArgs.IsArgSet(\"-asmap\")) {\n-        fs::path asmap_path = fs::path(gArgs.GetArg(\"-asmap\", \"\"));\n+    if (args.IsArgSet(\"-asmap\")) {\n+        fs::path asmap_path = fs::path(args.GetArg(\"-asmap\", \"\"));\n         if (asmap_path.empty()) {\n             asmap_path = DEFAULT_ASMAP_FILENAME;\n         }\n@@ -1499,22 +1495,22 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     uint64_t nMaxOutboundLimit = 0; //unlimited unless -maxuploadtarget is set\n     uint64_t nMaxOutboundTimeframe = MAX_UPLOAD_TIMEFRAME;\n \n-    if (gArgs.IsArgSet(\"-maxuploadtarget\")) {\n-        nMaxOutboundLimit = gArgs.GetArg(\"-maxuploadtarget\", DEFAULT_MAX_UPLOAD_TARGET)*1024*1024;\n+    if (args.IsArgSet(\"-maxuploadtarget\")) {\n+        nMaxOutboundLimit = args.GetArg(\"-maxuploadtarget\", DEFAULT_MAX_UPLOAD_TARGET) * 1024 * 1024;\n     }\n \n     // ********************************************************* Step 7: load block chain\n \n-    fReindex = gArgs.GetBoolArg(\"-reindex\", false);\n-    bool fReindexChainState = gArgs.GetBoolArg(\"-reindex-chainstate\", false);\n+    fReindex = args.GetBoolArg(\"-reindex\", false);\n+    bool fReindexChainState = args.GetBoolArg(\"-reindex-chainstate\", false);\n \n     // cache size calculations\n-    int64_t nTotalCache = (gArgs.GetArg(\"-dbcache\", nDefaultDbCache) << 20);\n+    int64_t nTotalCache = (args.GetArg(\"-dbcache\", nDefaultDbCache) << 20);\n     nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n     nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greater than nMaxDbcache\n     int64_t nBlockTreeDBCache = std::min(nTotalCache / 8, nMaxBlockDBCache << 20);\n     nTotalCache -= nBlockTreeDBCache;\n-    int64_t nTxIndexCache = std::min(nTotalCache / 8, gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxTxIndexCache << 20 : 0);\n+    int64_t nTxIndexCache = std::min(nTotalCache / 8, args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxTxIndexCache << 20 : 0);\n     nTotalCache -= nTxIndexCache;\n     int64_t filter_index_cache = 0;\n     if (!g_enabled_filter_types.empty()) {\n@@ -1527,10 +1523,10 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n     nTotalCache -= nCoinDBCache;\n     int64_t nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n-    int64_t nMempoolSizeMax = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    int64_t nMempoolSizeMax = args.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     LogPrintf(\"Cache configuration:\\n\");\n     LogPrintf(\"* Using %.1f MiB for block index database\\n\", nBlockTreeDBCache * (1.0 / 1024 / 1024));\n-    if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n+    if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n         LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", nTxIndexCache * (1.0 / 1024 / 1024));\n     }\n     for (BlockFilterType filter_type : g_enabled_filter_types) {\n@@ -1695,7 +1691,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 for (CChainState* chainstate : chainman.GetAll()) {\n                     if (!is_coinsview_empty(chainstate)) {\n                         uiInterface.InitMessage(_(\"Verifying blocks...\").translated);\n-                        if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n+                        if (fHavePruned && args.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n                             LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n                                 MIN_BLOCKS_TO_KEEP);\n                         }\n@@ -1713,10 +1709,10 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                         // Only verify the DB of the active chainstate. This is fixed in later\n                         // work when we allow VerifyDB to be parameterized by chainstate.\n                         if (&::ChainstateActive() == chainstate &&\n-                                !CVerifyDB().VerifyDB(\n+                            !CVerifyDB().VerifyDB(\n                                 chainparams, &chainstate->CoinsDB(),\n-                                gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n-                                gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n+                                args.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                                args.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n                             strLoadError = _(\"Corrupted block database detected\");\n                             failed_verification = true;\n                             break;\n@@ -1772,7 +1768,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     fFeeEstimatesInitialized = true;\n \n     // ********************************************************* Step 8: start indexers\n-    if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n+    if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n         g_txindex = MakeUnique<TxIndex>(nTxIndexCache, false, fReindex);\n         g_txindex->Start();\n     }\n@@ -1850,7 +1846,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n #endif\n \n     std::vector<fs::path> vImportFiles;\n-    for (const std::string& strFile : gArgs.GetArgs(\"-loadblock\")) {\n+    for (const std::string& strFile : args.GetArgs(\"-loadblock\")) {\n         vImportFiles.push_back(strFile);\n     }\n \n@@ -1895,13 +1891,13 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     }\n     LogPrintf(\"nBestHeight = %d\\n\", chain_active_height);\n \n-    if (gArgs.GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION))\n+    if (args.GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION))\n         StartTorControl();\n \n     Discover();\n \n     // Map ports with UPnP\n-    if (gArgs.GetBoolArg(\"-upnp\", DEFAULT_UPNP)) {\n+    if (args.GetBoolArg(\"-upnp\", DEFAULT_UPNP)) {\n         StartMapPort();\n     }\n \n@@ -1916,41 +1912,41 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     connOptions.uiInterface = &uiInterface;\n     connOptions.m_banman = node.banman.get();\n     connOptions.m_msgproc = node.peer_logic.get();\n-    connOptions.nSendBufferMaxSize = 1000*gArgs.GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n-    connOptions.nReceiveFloodSize = 1000*gArgs.GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);\n-    connOptions.m_added_nodes = gArgs.GetArgs(\"-addnode\");\n+    connOptions.nSendBufferMaxSize = 1000 * args.GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n+    connOptions.nReceiveFloodSize = 1000 * args.GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);\n+    connOptions.m_added_nodes = args.GetArgs(\"-addnode\");\n \n     connOptions.nMaxOutboundTimeframe = nMaxOutboundTimeframe;\n     connOptions.nMaxOutboundLimit = nMaxOutboundLimit;\n     connOptions.m_peer_connect_timeout = peer_connect_timeout;\n \n-    for (const std::string& strBind : gArgs.GetArgs(\"-bind\")) {\n+    for (const std::string& strBind : args.GetArgs(\"-bind\")) {\n         CService addrBind;\n         if (!Lookup(strBind, addrBind, GetListenPort(), false)) {\n             return InitError(ResolveErrMsg(\"bind\", strBind));\n         }\n         connOptions.vBinds.push_back(addrBind);\n     }\n-    for (const std::string& strBind : gArgs.GetArgs(\"-whitebind\")) {\n+    for (const std::string& strBind : args.GetArgs(\"-whitebind\")) {\n         NetWhitebindPermissions whitebind;\n         bilingual_str error;\n         if (!NetWhitebindPermissions::TryParse(strBind, whitebind, error)) return InitError(error);\n         connOptions.vWhiteBinds.push_back(whitebind);\n     }\n \n-    for (const auto& net : gArgs.GetArgs(\"-whitelist\")) {\n+    for (const auto& net : args.GetArgs(\"-whitelist\")) {\n         NetWhitelistPermissions subnet;\n         bilingual_str error;\n         if (!NetWhitelistPermissions::TryParse(net, subnet, error)) return InitError(error);\n         connOptions.vWhitelistedRange.push_back(subnet);\n     }\n \n-    connOptions.vSeedNodes = gArgs.GetArgs(\"-seednode\");\n+    connOptions.vSeedNodes = args.GetArgs(\"-seednode\");\n \n     // Initiate outbound connections unless connect=0\n-    connOptions.m_use_addrman_outgoing = !gArgs.IsArgSet(\"-connect\");\n+    connOptions.m_use_addrman_outgoing = !args.IsArgSet(\"-connect\");\n     if (!connOptions.m_use_addrman_outgoing) {\n-        const auto connect = gArgs.GetArgs(\"-connect\");\n+        const auto connect = args.GetArgs(\"-connect\");\n         if (connect.size() != 1 || connect[0] != \"0\") {\n             connOptions.m_specified_outgoing = connect;\n         }"
      }
    ]
  }
]