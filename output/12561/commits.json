[
  {
    "sha": "0e7c52dc6cbb8fd881a0dd57a6167a812fe71dc4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZTdjNTJkYzZjYmI4ZmQ4ODFhMGRkNTdhNjE2N2E4MTJmZTcxZGM0",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2018-03-05T15:42:26Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2018-03-05T15:51:29Z"
      },
      "message": "Shut down if trying to connect a corrupted block\n\nThe call to CheckBlock() in ConnectBlock() is redundant with calls to it\nprior to storing a block on disk. If CheckBlock() fails with an error\nindicating the block is potentially corrupted, then shut down\nimmediately, as this is an indication that the node is experiencing\nhardware issues.  (If we didn't shut down, we could go into an infinite\nloop trying to reconnect this same bad block, as we're not setting the\nblock's status to FAILED in the case where there is potential\ncorruption.)\n\nIf CheckBlock() fails for some other reason, we'll end up flagging this\nblock as bad (perhaps some prior software version \"let a bad block in\",\nas the comment indicates), and not trying to connect it again, so this\ncase should be properly handled.",
      "tree": {
        "sha": "b6b91027ec3b8e27f8177f2e8c9ee6b82f681b14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6b91027ec3b8e27f8177f2e8c9ee6b82f681b14"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e7c52dc6cbb8fd881a0dd57a6167a812fe71dc4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e7c52dc6cbb8fd881a0dd57a6167a812fe71dc4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0e7c52dc6cbb8fd881a0dd57a6167a812fe71dc4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e7c52dc6cbb8fd881a0dd57a6167a812fe71dc4/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e2ed253f50500e1db4927d511d3ac0d47aed8df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e2ed253f50500e1db4927d511d3ac0d47aed8df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e2ed253f50500e1db4927d511d3ac0d47aed8df"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8ec30cac31ffd833af155da5014096b265b1b0ea",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e7c52dc6cbb8fd881a0dd57a6167a812fe71dc4/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e7c52dc6cbb8fd881a0dd57a6167a812fe71dc4/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0e7c52dc6cbb8fd881a0dd57a6167a812fe71dc4",
        "patch": "@@ -1791,8 +1791,15 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n     // is enforced in ContextualCheckBlockHeader(); we wouldn't want to\n     // re-enforce that rule here (at least until we make it impossible for\n     // GetAdjustedTime() to go backward).\n-    if (!CheckBlock(block, state, chainparams.GetConsensus(), !fJustCheck, !fJustCheck))\n+    if (!CheckBlock(block, state, chainparams.GetConsensus(), !fJustCheck, !fJustCheck)) {\n+        if (state.CorruptionPossible()) {\n+            // We don't write down blocks to disk if they may have been\n+            // corrupted, so this should be impossible unless we're having hardware\n+            // problems.\n+            return AbortNode(state, \"Corrupt block found indicating potential hardware failure; shutting down\");\n+        }\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n+    }\n \n     // verify that the view's current state corresponds to the previous block\n     uint256 hashPrevBlock = pindex->pprev == nullptr ? uint256() : pindex->pprev->GetBlockHash();"
      }
    ]
  }
]