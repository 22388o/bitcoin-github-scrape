[
  {
    "sha": "eb59c4ca8e8be07c587f1cbcb252153b97f08dcc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjU5YzRjYThlOGJlMDdjNTg3ZjFjYmNiMjUyMTUzYjk3ZjA4ZGNj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-03-27T15:34:23Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-04-01T15:56:22Z"
      },
      "message": "Revert \"Actually use mapAlreadyAskedFor.\"\n\nThis reverts commit 643160f6e7e5e8ca84bc7d2c1a0f37d9cf43a6e1.\n\nTurns out this commit was useless after a more careful reading of\nCNode::AskFor",
      "tree": {
        "sha": "20c5788fe70f771c7c38157bfd915480adf63fcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20c5788fe70f771c7c38157bfd915480adf63fcf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb59c4ca8e8be07c587f1cbcb252153b97f08dcc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb59c4ca8e8be07c587f1cbcb252153b97f08dcc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb59c4ca8e8be07c587f1cbcb252153b97f08dcc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb59c4ca8e8be07c587f1cbcb252153b97f08dcc/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf4d976f0e210ac2e5982f5386cd0e4c0a5a0455",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf4d976f0e210ac2e5982f5386cd0e4c0a5a0455",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf4d976f0e210ac2e5982f5386cd0e4c0a5a0455"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ee25752981de272535efb9bac69588aa1386a170",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb59c4ca8e8be07c587f1cbcb252153b97f08dcc/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb59c4ca8e8be07c587f1cbcb252153b97f08dcc/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=eb59c4ca8e8be07c587f1cbcb252153b97f08dcc",
        "patch": "@@ -3994,7 +3994,6 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                     pto->PushMessage(\"getdata\", vGetData);\n                     vGetData.clear();\n                 }\n-                mapAlreadyAskedFor[inv] = nNow;\n             }\n             pto->mapAskFor.erase(pto->mapAskFor.begin());\n         }"
      }
    ]
  },
  {
    "sha": "5ffc299404f4bcce3b9b2522096f8ed53d3181d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZmZjMjk5NDA0ZjRiY2NlM2I5YjI1MjIwOTZmOGVkNTNkMzE4MWQ1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-03-27T05:07:20Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-04-01T15:56:22Z"
      },
      "message": "Add a limitedmap class similar to mruset",
      "tree": {
        "sha": "e77f041d52075d2d6972451da683b11170a69384",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e77f041d52075d2d6972451da683b11170a69384"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ffc299404f4bcce3b9b2522096f8ed53d3181d5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ffc299404f4bcce3b9b2522096f8ed53d3181d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ffc299404f4bcce3b9b2522096f8ed53d3181d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ffc299404f4bcce3b9b2522096f8ed53d3181d5/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb59c4ca8e8be07c587f1cbcb252153b97f08dcc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb59c4ca8e8be07c587f1cbcb252153b97f08dcc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb59c4ca8e8be07c587f1cbcb252153b97f08dcc"
      }
    ],
    "stats": {
      "total": 100,
      "additions": 100,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7049d68e5aaa16b3de0688945e5afb114757fb8f",
        "filename": "src/limitedmap.h",
        "status": "added",
        "additions": 100,
        "deletions": 0,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ffc299404f4bcce3b9b2522096f8ed53d3181d5/src/limitedmap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ffc299404f4bcce3b9b2522096f8ed53d3181d5/src/limitedmap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/limitedmap.h?ref=5ffc299404f4bcce3b9b2522096f8ed53d3181d5",
        "patch": "@@ -0,0 +1,100 @@\n+// Copyright (c) 2012 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_LIMITEDMAP_H\n+#define BITCOIN_LIMITEDMAP_H\n+\n+#include <map>\n+#include <deque>\n+\n+/** STL-like map container that only keeps the N elements with the highest value. */\n+template <typename K, typename V> class limitedmap\n+{\n+public:\n+    typedef K key_type;\n+    typedef V mapped_type;\n+    typedef std::pair<const key_type, mapped_type> value_type;\n+    typedef typename std::map<K, V>::const_iterator const_iterator;\n+    typedef typename std::map<K, V>::size_type size_type;\n+\n+protected:\n+    std::map<K, V> map;\n+    typedef typename std::map<K, V>::iterator iterator;\n+    std::multimap<V, iterator> rmap;\n+    typedef typename std::multimap<V, iterator>::iterator rmap_iterator;\n+    size_type nMaxSize;\n+\n+public:\n+    limitedmap(size_type nMaxSizeIn = 0) { nMaxSize = nMaxSizeIn; }\n+    const_iterator begin() const { return map.begin(); }\n+    const_iterator end() const { return map.end(); }\n+    size_type size() const { return map.size(); }\n+    bool empty() const { return map.empty(); }\n+    const_iterator find(const key_type& k) const { return map.find(k); }\n+    size_type count(const key_type& k) const { return map.count(k); }\n+    void insert(const value_type& x)\n+    {\n+        std::pair<iterator, bool> ret = map.insert(x);\n+        if (ret.second)\n+        {\n+            if (nMaxSize && map.size() == nMaxSize)\n+            {\n+                map.erase(rmap.begin()->second);\n+                rmap.erase(rmap.begin());\n+            }\n+            rmap.insert(make_pair(x.second, ret.first));\n+        }\n+        return;\n+    }\n+    void erase(const key_type& k)\n+    {\n+        iterator itTarget = map.find(k);\n+        if (itTarget == map.end())\n+            return;\n+        std::pair<rmap_iterator, rmap_iterator> itPair = rmap.equal_range(itTarget->second);\n+        for (rmap_iterator it = itPair.first; it != itPair.second; ++it)\n+            if (it->second == itTarget)\n+            {\n+                rmap.erase(it);\n+                map.erase(itTarget);\n+                return;\n+            }\n+        // Shouldn't ever get here\n+        assert(0); //TODO remove me\n+        map.erase(itTarget);\n+    }\n+    void update(const_iterator itIn, const mapped_type& v)\n+    {\n+        //TODO: When we switch to C++11, use map.erase(itIn, itIn) to get the non-const iterator\n+        iterator itTarget = map.find(itIn->first);\n+        if (itTarget == map.end())\n+            return;\n+        std::pair<rmap_iterator, rmap_iterator> itPair = rmap.equal_range(itTarget->second);\n+        for (rmap_iterator it = itPair.first; it != itPair.second; ++it)\n+            if (it->second == itTarget)\n+            {\n+                rmap.erase(it);\n+                itTarget->second = v;\n+                rmap.insert(make_pair(v, itTarget));\n+                return;\n+            }\n+        // Shouldn't ever get here\n+        assert(0); //TODO remove me\n+        itTarget->second = v;\n+        rmap.insert(make_pair(v, itTarget));\n+    }\n+    size_type max_size() const { return nMaxSize; }\n+    size_type max_size(size_type s)\n+    {\n+        if (s)\n+            while (map.size() > s)\n+            {\n+                map.erase(rmap.begin()->second);\n+                rmap.erase(rmap.begin());\n+            }\n+        nMaxSize = s;\n+        return nMaxSize;\n+    }\n+};\n+\n+#endif"
      }
    ]
  },
  {
    "sha": "b5afda67f2846ddc6554304acc1567796733725b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNWFmZGE2N2YyODQ2ZGRjNjU1NDMwNGFjYzE1Njc3OTY3MzM3MjVi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-03-27T23:45:43Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-04-01T15:56:23Z"
      },
      "message": "Move mapAlreadyAskedFor to limitedmap\n\nThis will result in re-requesting invs if we are under heavy inv\nload, however as long as we get no more than 16,000 invs in two\nminutes, this should have no effect on runtime behavior.",
      "tree": {
        "sha": "e98486aeeba72e420d3229a136d841c4735b1246",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e98486aeeba72e420d3229a136d841c4735b1246"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5afda67f2846ddc6554304acc1567796733725b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5afda67f2846ddc6554304acc1567796733725b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b5afda67f2846ddc6554304acc1567796733725b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5afda67f2846ddc6554304acc1567796733725b/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ffc299404f4bcce3b9b2522096f8ed53d3181d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ffc299404f4bcce3b9b2522096f8ed53d3181d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ffc299404f4bcce3b9b2522096f8ed53d3181d5"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 13,
      "deletions": 3
    },
    "files": [
      {
        "sha": "926d570264f5e1ef4c1ab36b199006a20de6480d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5afda67f2846ddc6554304acc1567796733725b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5afda67f2846ddc6554304acc1567796733725b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=b5afda67f2846ddc6554304acc1567796733725b",
        "patch": "@@ -63,7 +63,7 @@ CCriticalSection cs_vNodes;\n map<CInv, CDataStream> mapRelay;\n deque<pair<int64, CInv> > vRelayExpiration;\n CCriticalSection cs_mapRelay;\n-map<CInv, int64> mapAlreadyAskedFor;\n+limitedmap<CInv, int64> mapAlreadyAskedFor(MAX_INV_SZ);\n \n static deque<string> vOneShots;\n CCriticalSection cs_vOneShots;"
      },
      {
        "sha": "9cbb593f5685b861c47a1b54eaea24f435c0fe7b",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5afda67f2846ddc6554304acc1567796733725b/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5afda67f2846ddc6554304acc1567796733725b/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=b5afda67f2846ddc6554304acc1567796733725b",
        "patch": "@@ -15,6 +15,7 @@\n #endif\n \n #include \"mruset.h\"\n+#include \"limitedmap.h\"\n #include \"netbase.h\"\n #include \"protocol.h\"\n #include \"addrman.h\"\n@@ -100,7 +101,7 @@ extern CCriticalSection cs_vNodes;\n extern std::map<CInv, CDataStream> mapRelay;\n extern std::deque<std::pair<int64, CInv> > vRelayExpiration;\n extern CCriticalSection cs_mapRelay;\n-extern std::map<CInv, int64> mapAlreadyAskedFor;\n+extern limitedmap<CInv, int64> mapAlreadyAskedFor;\n \n extern std::vector<std::string> vAddedNodes;\n extern CCriticalSection cs_vAddedNodes;\n@@ -367,7 +368,12 @@ class CNode\n     {\n         // We're using mapAskFor as a priority queue,\n         // the key is the earliest time the request can be sent\n-        int64& nRequestTime = mapAlreadyAskedFor[inv];\n+        int64 nRequestTime;\n+        limitedmap<CInv, int64>::const_iterator it = mapAlreadyAskedFor.find(inv);\n+        if (it != mapAlreadyAskedFor.end())\n+            nRequestTime = it->second;\n+        else\n+            nRequestTime = 0;\n         if (fDebugNet)\n             printf(\"askfor %s   %\"PRI64d\" (%s)\\n\", inv.ToString().c_str(), nRequestTime, DateTimeStrFormat(\"%H:%M:%S\", nRequestTime/1000000).c_str());\n \n@@ -380,6 +386,10 @@ class CNode\n \n         // Each retry is 2 minutes after the last\n         nRequestTime = std::max(nRequestTime + 2 * 60 * 1000000, nNow);\n+        if (it != mapAlreadyAskedFor.end())\n+            mapAlreadyAskedFor.update(it, nRequestTime);\n+        else\n+            mapAlreadyAskedFor.insert(std::make_pair(inv, nRequestTime));\n         mapAskFor.insert(std::make_pair(nRequestTime, inv));\n     }\n "
      }
    ]
  }
]