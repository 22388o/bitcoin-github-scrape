[
  {
    "sha": "be4efb165ab7ff5824de9a46aa06eca654b7513f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTRlZmIxNjVhYjdmZjU4MjRkZTlhNDZhYTA2ZWNhNjU0Yjc1MTNm",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-05-21T09:08:30Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-05-22T07:24:54Z"
      },
      "message": "rpc: Mention getwalletinfo where a rescan is triggered",
      "tree": {
        "sha": "855f9fb4343776d2ff1200fa1993ec866622ad2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/855f9fb4343776d2ff1200fa1993ec866622ad2d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be4efb165ab7ff5824de9a46aa06eca654b7513f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be4efb165ab7ff5824de9a46aa06eca654b7513f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be4efb165ab7ff5824de9a46aa06eca654b7513f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be4efb165ab7ff5824de9a46aa06eca654b7513f/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2d1583ee6aff4b68dc46bcb87eb7a85f90b465c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d1583ee6aff4b68dc46bcb87eb7a85f90b465c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2d1583ee6aff4b68dc46bcb87eb7a85f90b465c3"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 14,
      "deletions": 7
    },
    "files": [
      {
        "sha": "ca6bdcb6982c561cce401c43d88bf5af8af2aae8",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 6,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be4efb165ab7ff5824de9a46aa06eca654b7513f/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be4efb165ab7ff5824de9a46aa06eca654b7513f/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=be4efb165ab7ff5824de9a46aa06eca654b7513f",
        "patch": "@@ -116,7 +116,8 @@ UniValue importprivkey(const JSONRPCRequest& request)\n                 \"\\nAdds a private key (as returned by dumpprivkey) to your wallet. Requires a new wallet backup.\\n\"\n                 \"Hint: use importmulti to import more than one private key.\\n\"\n             \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n-            \"may report that the imported key exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\",\n+            \"may report that the imported key exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\"\n+            \"Note: Use \\\"getwalletinfo\\\" to query the scanning progress.\\n\",\n                 {\n                     {\"privkey\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The private key (see dumpprivkey)\"},\n                     {\"label\", RPCArg::Type::STR, /* default */ \"current label if address exists, otherwise \\\"\\\"\", \"An optional label\"},\n@@ -220,7 +221,8 @@ UniValue abortrescan(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() > 0)\n         throw std::runtime_error(\n             RPCHelpMan{\"abortrescan\",\n-                \"\\nStops current wallet rescan triggered by an RPC call, e.g. by an importprivkey call.\\n\",\n+                \"\\nStops current wallet rescan triggered by an RPC call, e.g. by an importprivkey call.\\n\"\n+                \"Note: Use \\\"getwalletinfo\\\" to query the scanning progress.\\n\",\n                 {},\n                 RPCResults{},\n                 RPCExamples{\n@@ -290,7 +292,8 @@ UniValue importaddress(const JSONRPCRequest& request)\n             \"may report that the imported address exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\"\n             \"If you have the full public key, you should call importpubkey instead of this.\\n\"\n             \"\\nNote: If you import a non-standard raw script in hex form, outputs sending to it will be treated\\n\"\n-            \"as change, and not show up in many RPCs.\\n\",\n+            \"as change, and not show up in many RPCs.\\n\"\n+            \"Note: Use \\\"getwalletinfo\\\" to query the scanning progress.\\n\",\n                 {\n                     {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The Bitcoin address (or hex-encoded script)\"},\n                     {\"label\", RPCArg::Type::STR, /* default */ \"\\\"\\\"\", \"An optional label\"},\n@@ -487,7 +490,8 @@ UniValue importpubkey(const JSONRPCRequest& request)\n             RPCHelpMan{\"importpubkey\",\n                 \"\\nAdds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\\n\"\n             \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n-            \"may report that the imported pubkey exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\",\n+            \"may report that the imported pubkey exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\"\n+            \"Note: Use \\\"getwalletinfo\\\" to query the scanning progress.\\n\",\n                 {\n                     {\"pubkey\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The hex-encoded public key\"},\n                     {\"label\", RPCArg::Type::STR, /* default */ \"\\\"\\\"\", \"An optional label\"},\n@@ -568,7 +572,8 @@ UniValue importwallet(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             RPCHelpMan{\"importwallet\",\n-                \"\\nImports keys from a wallet dump file (see dumpwallet). Requires a new wallet backup to include imported keys.\\n\",\n+                \"\\nImports keys from a wallet dump file (see dumpwallet). Requires a new wallet backup to include imported keys.\\n\"\n+                \"Note: Use \\\"getwalletinfo\\\" to query the scanning progress.\\n\",\n                 {\n                     {\"filename\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The wallet file\"},\n                 },\n@@ -1359,7 +1364,8 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n                 \"If an address/script is imported without all of the private keys required to spend from that address, it will be watchonly. The 'watchonly' option must be set to true in this case or a warning will be returned.\\n\"\n                 \"Conversely, if all the private keys are provided and the address/script is spendable, the watchonly option must be set to false, or a warning will be returned.\\n\"\n             \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n-            \"may report that the imported keys, addresses or scripts exists but related transactions are still missing.\\n\",\n+            \"may report that the imported keys, addresses or scripts exist but related transactions are still missing.\\n\"\n+            \"Note: Use \\\"getwalletinfo\\\" to query the scanning progress.\\n\",\n                 {\n                     {\"requests\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"Data to be imported\",\n                         {"
      },
      {
        "sha": "71d62a47dc142914c225a3517d42ed8df374ebc7",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be4efb165ab7ff5824de9a46aa06eca654b7513f/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be4efb165ab7ff5824de9a46aa06eca654b7513f/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=be4efb165ab7ff5824de9a46aa06eca654b7513f",
        "patch": "@@ -3452,7 +3452,8 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() > 2) {\n         throw std::runtime_error(\n             RPCHelpMan{\"rescanblockchain\",\n-                \"\\nRescan the local blockchain for wallet related transactions.\\n\",\n+                \"\\nRescan the local blockchain for wallet related transactions.\\n\"\n+                \"Note: Use \\\"getwalletinfo\\\" to query the scanning progress.\\n\",\n                 {\n                     {\"start_height\", RPCArg::Type::NUM, /* default */ \"0\", \"block height where the rescan should start\"},\n                     {\"stop_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"the last block height that should be scanned. If none is provided it will rescan up to the tip at return time of this call.\"},"
      }
    ]
  }
]