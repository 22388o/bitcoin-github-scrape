dongcarl,2020-05-20 16:55:57,"Concept ACK :smile: \n\nAm I correct in saying that you've replaced `NetworkID` in my implementation with `Bip155NetworkId`? (totally fine btw, just wanted to make sure)",https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-631599290,631599290,
laanwj,2020-05-20 17:03:29,Concept ACK!,https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-631603514,631603514,
vasild,2020-05-20 18:17:27,"> Am I correct in saying that you've replaced `NetworkID` in my implementation with `Bip155NetworkId`? (totally fine btw, just wanted to make sure)\n\nYes, thanks for asking!\n\nIdeally we would have just one `enum` for network types, not two. That would contain the network ids from BIP155 + the other ones we have now - unroutable, internal/name, etc. But the problem is that lots of code relie",https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-631641564,631641564,
DrahtBot,2020-05-20 18:57:20,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20028 (test: Check that invalid peer traffic is accounted for by MarcoFalke)\n* #19889 (test: Add consistent formatting f",https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-631662338,631662338,
naumenkogs,2020-05-20 22:13:21,Concept ACK. WIll do a good review later.,https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-631755683,631755683,
vasild,2020-06-04 13:23:13,Rebased.,https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-638844175,638844175,
vasild,2020-06-09 18:40:39,"Changed the implementation to use dedicated message `sendaddrv2` for signaling support instead of a service bit. The code complexity is about the same, the dedicated message needs a few more lines, [d85215213..9a526f22b](https://github.com/bitcoin/bitcoin/compare/d85215213..9a526f22b):\n```\n src/init.cpp                                |  2 +-\n src/net.h                                   |  3 ",https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-641499477,641499477,
vasild,2020-06-09 18:54:38,Rebased.,https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-641506189,641506189,
vasild,2020-06-10 06:58:33,Rebased.,https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-641772444,641772444,
naumenkogs,2020-06-10 11:34:04,"I reviewed the code and it looks sane.\n\nI believe all the questionable parts about BIP155 are not included here? Making this PR more or less ready to review without high-level discussions.\n\nWe probably need much more eyes, there's just too much low level code changes.",https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-641942869,641942869,
vasild,2020-06-10 12:40:28,"> I believe all the questionable parts about BIP155 are not included here? Making this PR more or less ready to review without high-level discussions.\n\nThis PR is a full implementation of ADDRv2. However:\n\n* The maximum length of an address, mentioned in BIP155 is 32 bytes, whereas this PR has set it to 512 bytes.\n* Signaling for ADDRv2 support is done by a protocol version bump in BIP15",https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-641979759,641979759,
jonatack,2020-06-19 13:23:06,"Concept ACK. At a high level the code looks well-done. Looked through the BIP and the previous PR.\n\nI wonder if this would make faster progress if it was turned into a master roadmap PR and split into easier-to-review PRs similar to what we've seen with the serialization refactoring. (A possible key to consider in making that work, if you do it, may be to take the time to set a clear map from ",https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-646633241,646633241,
vasild,2020-06-22 13:49:49,"> I wonder if this would make faster progress if ... split into easier-to-review PRs ...\n\nMy thought exactly! Let's start with something small and see how it goes: https://github.com/bitcoin/bitcoin/pull/19351.\n\nI updated the roadmap at: https://github.com/bitcoin/bitcoin/issues/18884, this PR can be split in:\n\nPreparation cleanup\n---\n```\ntest: add an edge case test for CSubNet\",https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-647531927,647531927,
vasild,2020-06-22 13:55:43,Rebased.,https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-647535424,647535424,
jonatack,2020-06-22 13:59:47,Can you update the PR descriptions of this PR and 18884 with the roadmap and to indicate clearly which PRs correspond to which step and which PR of the 3 that are open should currently be reviewed? Review can be hard to obtain; best to make it easy and clear for your reviewers.,https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-647537878,647537878,
vasild,2020-06-22 19:55:42,"Rebased, removing commit `test: add an edge case test for CSubNet` which was merged via https://github.com/bitcoin/bitcoin/pull/19351",https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-647738511,647738511,
vasild,2020-06-23 14:26:55,"> Can you update the PR descriptions...\n\nDone. In summary - https://github.com/bitcoin/bitcoin/issues/18884 is a roadmap for Tor v3. It is just an issue, does not contain code and this PR is part of that roadmap. https://github.com/bitcoin/bitcoin/pull/19351 already got merged (Thanks!). I chopped off the next one at https://github.com/bitcoin/bitcoin/pull/19360. It is happening!",https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-648192113,648192113,
vasild,2020-07-06 14:04:44,Rebased to restart CI,https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-654259883,654259883,
vasild,2020-07-10 13:59:25,"I simplified the code a little bit, now that `CNetAddr::GetAddrBytes()` has been added to `master`.\n\n#19219 introduced a new method [CNetAddr::GetAddrBytes()](https://github.com/bitcoin/bitcoin/blob/0d69fdb/src/netaddress.h#L93) in `master` which does the same thing as [CNetAddr::GetAddrKey()](https://github.com/bitcoin/bitcoin/blob/567f98ea5d33d8cec699148be83b079dd5189101/src/netaddress.cpp#L",https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-656691574,656691574,
Saibato,2020-07-10 18:21:41,"While testing https://github.com/bitcoin/bitcoin/commit/81780afb3b4575642f74b682327ff1c78b6efaa7\nI saw that v3 are advertised as  [::]:0  and ToString resulted also in  [::]:0\n\n```\n2020-07-10T17:43:18Z sending feefilter (8 bytes) peer=0\n2020-07-10T17:43:18Z trying connection [::]:0 lastseen=0.0hrs\n2020-07-10T17:43:18Z SOCKS5 connecting [::]:0\n2020-07-10T17:43:18Z Socks5() connect to ",https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-656817252,656817252,
jonatack,2020-07-11 12:50:04,"Can someone with label permissions add a `Review club` label to this PR?\n\nResource up soon at https://bitcoincore.reviews/19031.",https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-657058225,657058225,
vasild,2020-07-13 14:18:15,"@Saibato, thanks for testing this! To get this moving faster, maybe you can review https://github.com/bitcoin/bitcoin/pull/19360?\n\nThe changes you posted above and some of https://github.com/bitcoin/bitcoin/pull/19485 belong to a ""Tor v3"" implementation, which is out of the scope of this PR. It is the last item in the roadmap at https://github.com/bitcoin/bitcoin/issues/18884, the one that rea",https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-657588386,657588386,
Saibato,2020-07-14 12:39:47,"> #19360\n\nLast week i stumbled about this and i feel a bit sorry for you and the effort and work you put in this. that i looked not earlier in v3 support in bitcoin for the masses.  I reviewed this as part of https://github.com/bitcoin/bitcoin/commit/2533ce03c71a865ba230b7ff770dd04cd8be5ea1 and although i stated LGTM and that your code works, the whole ADDRv2 thing is a full NACK  and my view ",https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-658155790,658155790,
vasild,2020-07-15 12:31:11,"@Saibato IMO sending IPv4, Tor or other addresses disguised as IPv6 addresses is a hack and it wastes space and bandwidth (it sends 16 bytes instead of e.g. 4). Furthermore this hack is limited because one cannot send addresses that are longer than 16 bytes.\n\nADDRv2 solves this in a clean way with the variable address length, allowing us to send longer addresses and also to avoid the 16-instea",https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-658739350,658739350,
Saibato,2020-07-15 13:54:52,">  Furthermore this hack is limited because one cannot send addresses that are longer than 16 bytes.\n\n@vasild at some point. yes and i dont say your work is void, in someway we got futher, but please lock at the diff, it can be done and i have done it. \n\nOk prob i should hash the seq and send a bit less bytes and do some checking but the patch works right away on top of all nodes out there",https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-658782327,658782327,
laanwj,2020-07-15 14:14:26,"@Saibato Let's keep the discussion focused on reviewing addrv2 and this specific code change. Although  your proposal comes very late—we've been working on addrv2 for a long time—completely different suggestions are welcome, but please do so in a new PR. It would also need its own BIP.",https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-658793828,658793828,
Saibato,2020-07-15 14:26:47,"Yup, i see..\nFor sure late raw and hacky and more a backup plan to get old node on also on board, to the path to other formats with ADDv2. or easy crypt of the packets.\n\nSo here we discuss ADDRv2 and my view that the address data should not be in ip and get a different space in the code stands firm.\nAnd I will try to come up with some suggested change. inspirit of review the PR\nedit> Sin",https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-658800937,658800937,
jonatack,2020-07-15 14:55:13,"@Saibato as it happens, there is an IRC review session on the ADDRv2 topic and this PR in 2 hours, if you'd like to join in. Info at https://bitcoincore.reviews",https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-658817940,658817940,
sipa,2020-07-26 17:11:33,"You may want to consider using a prevector instead of a vector for the IP data, to avoid needing a separate memory allocation for each IP address.\n\nWith a vector, an IPv4/IPv6 address would take 24 bytes directly + another 32 bytes for the allocation.",https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-664015127,664015127,
vasild,2020-07-30 16:04:41,"Rebased, added more tests and fixed some issues discovered by them and also addressed comments.\n\n@sipa [changed](https://github.com/bitcoin/bitcoin/pull/19628/files#diff-76d15e11a95be7a4aee1eb89de6098caR91) to `prevector` and opted for a default size of 16, thanks for the suggestion!",https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-666490474,666490474,
vasild,2020-08-10 20:17:01,Rebased to resolve conflicts.,https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-671566843,671566843,
vasild,2020-08-11 12:07:27,Rebased just to restart Travis.,https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-671905987,671905987,
vasild,2020-08-12 07:45:24,Rebased to resolve conflicts.,https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-672699732,672699732,
leto,2020-09-11 18:26:11,"utACK\n\nIt's important to support new Tor service version 3 and adding support for i2p and cjdns is really awesome :+1: ",https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-691246841,691246841,
practicalswift,2020-09-13 06:51:10,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-691623025,691623025,
vasild,2020-09-18 12:48:00,Rebased on latest #19845,https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-694847109,694847109,
vasild,2020-09-28 14:32:47,Added more tests.,https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-700046336,700046336,
vasild,2020-09-28 14:34:54,Rebased on latest #19845,https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-700047609,700047609,
hebasto,2020-09-29 07:02:37,Mind rebasing?,https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-700494168,700494168,
DrahtBot,2020-09-29 07:59:15,"<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-700521966,700521966,
vasild,2020-09-29 08:49:58,Rebased now that https://github.com/bitcoin/bitcoin/pull/19845 is merged.,https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-700555459,700555459,
vasild,2020-09-29 08:53:28,"Two more commits remain from this PR to be merged:\n\n`net: CAddress & CAddrMan: (un)serialize as ADDRv2`\n`net: advertise support for ADDRv2 via new message`\n\nthey are included in https://github.com/bitcoin/bitcoin/pull/19954.\n\nClosing this as superseded by https://github.com/bitcoin/bitcoin/pull/19954.",https://github.com/bitcoin/bitcoin/pull/19031#issuecomment-700561350,700561350,
vasild,2020-05-20 16:18:09,"The signalling is done using a service flag because the service flags are gossiped and thus a node can choose to connect to `ADDRv2`-supporting nodes in the hopes of learning more e.g. Tor v3 addresses. For sure it is not going to learn any Tor v3, I2P or CJDNS addresses from nodes that do not support `ADDRv2`.\n\nHowever, [BIP155](https://github.com/bitcoin/bips/blob/master/bip-0155.mediawiki#c",https://github.com/bitcoin/bitcoin/pull/19031#discussion_r428140123,428140123,src/protocol.h
naumenkogs,2020-06-10 11:13:29,"It has also something to do with NET_TEREDO below.\nI mean, the whole thing is somewhat confusing, but maybe there's a chance to make it better or at least more clear?",https://github.com/bitcoin/bitcoin/pull/19031#discussion_r438044714,438044714,src/netaddress.h
naumenkogs,2020-06-10 11:24:03,"Can you rename the var to something more meaningful? At least `addr_format_supported` maybe. I see the comment, but well, it won't hurt to have better war names too.",https://github.com/bitcoin/bitcoin/pull/19031#discussion_r438049838,438049838,src/net.h
vasild,2020-06-10 11:54:46,"```suggestion\n * Keep these sequential starting from 0 and `NET_MAX` as the last entry. \n * We have loops like `for (int i = 0; i < NET_MAX; i++)` that expect to iterate \n * over all enum values and also `GetExtNetwork()` ""extends"" this enum by \n * introducing standalone constants starting from `NET_MAX`.\n```",https://github.com/bitcoin/bitcoin/pull/19031#discussion_r438064667,438064667,src/netaddress.h
vasild,2020-06-10 12:03:29,What about this? https://github.com/bitcoin/bitcoin/pull/19031#discussion_r438064667,https://github.com/bitcoin/bitcoin/pull/19031#discussion_r438069014,438069014,src/netaddress.h
vasild,2020-06-10 13:20:05,Done: https://github.com/bitcoin/bitcoin/compare/baf43171a670b5e41823836c889ecf6b2934e3bf..0bbe82d95b54e7727f966f4f8944f126619c9f28,https://github.com/bitcoin/bitcoin/pull/19031#discussion_r438115301,438115301,src/netaddress.h
vasild,2020-06-10 13:20:37,Done: https://github.com/bitcoin/bitcoin/compare/baf43171a670b5e41823836c889ecf6b2934e3bf..0bbe82d95b54e7727f966f4f8944f126619c9f28,https://github.com/bitcoin/bitcoin/pull/19031#discussion_r438115672,438115672,src/net.h
vasild,2020-06-10 13:20:48,Done: https://github.com/bitcoin/bitcoin/compare/baf43171a670b5e41823836c889ecf6b2934e3bf..0bbe82d95b54e7727f966f4f8944f126619c9f28,https://github.com/bitcoin/bitcoin/pull/19031#discussion_r438115800,438115800,src/netaddress.h
naumenkogs,2020-07-07 15:12:23,"I have never seen this variable used like this before and I've just spent 10 minutes trying to figure out what's going on, and I'm still a little confused. Maybe worth adding a comment?\nI think this code is counter-intuitive atm.",https://github.com/bitcoin/bitcoin/pull/19031#discussion_r450941410,450941410,src/net_processing.cpp
dongcarl,2020-07-07 20:56:35,I think perhaps `m_wants_addrv2` would be a more appropriate name,https://github.com/bitcoin/bitcoin/pull/19031#discussion_r451138256,451138256,src/net.h
dongcarl,2020-07-07 21:00:35,"This part probably deserves some extra scrutiny, I know that it's generally better to avoid exceptions in C++, but when I first wrote this I didn't see another option here for bubbling up an error and handling it.",https://github.com/bitcoin/bitcoin/pull/19031#discussion_r451140392,451140392,src/net_processing.cpp
dongcarl,2020-07-07 21:02:54,Potential followup: perhaps there is something cleaner we can do in the future for serialization/deserialization options other than abusing the protocol version.,https://github.com/bitcoin/bitcoin/pull/19031#discussion_r451141607,451141607,src/primitives/transaction.h
vasild,2020-07-09 16:21:34,"Yes, that is a bit hackish but I do not think there is a cleaner way. It is somewhat similar to [iostream::setf()](http://www.cplusplus.com/reference/ios/ios_base/setf/) which is used to configure the stream wrt how data should be parsed or printed, e.g.:\n```cpp\ncout.setf(ios::boolalpha);\ncout << true; // prints (serializes as) ""true"" rather than ""1""\n```\n\nI added comments like:\n```cp",https://github.com/bitcoin/bitcoin/pull/19031#discussion_r452338207,452338207,src/net_processing.cpp
vasild,2020-07-09 16:22:40,Renamed to `m_wants_addrv2`.,https://github.com/bitcoin/bitcoin/pull/19031#discussion_r452338790,452338790,src/net.h
vasild,2020-07-09 16:30:32,"Yes, I also couldn't find a better way to cancel the parsing. I think that is a limitation of our ser/unser framework - its not possible to cancel the parsing of multiple entries in the middle (e.g. when parsing a `std::vector` of `CNetAddr`) without using an exception.\n\nAnother way, but that's not good, would be to not throw an exception from `CNetAddr` unserialize methods, consume the bogus ",https://github.com/bitcoin/bitcoin/pull/19031#discussion_r452343713,452343713,src/net_processing.cpp
vasild,2020-07-09 19:47:08,"Right, there is room for improvement here. I opened https://github.com/bitcoin/bitcoin/issues/19477 to track this.",https://github.com/bitcoin/bitcoin/pull/19031#discussion_r452451052,452451052,src/primitives/transaction.h
dongcarl,2020-07-09 20:09:59,@sipa Could you advise on whether there's another way or if the current way is alright?,https://github.com/bitcoin/bitcoin/pull/19031#discussion_r452462111,452462111,src/net_processing.cpp
jnewbery,2020-07-15 16:45:20,"There are a couple of things to note about this signalling method with our current version handshake:\n\n1. we currently send a `getaddr` before this, on receipt of the peer's `version` message. If we don't change that, then the peer will receive the `getaddr` _before_ the `sendaddrv2` message, and will therefore respond with an `addr` message. We only ever send one `getaddr` message per peer to",https://github.com/bitcoin/bitcoin/pull/19031#discussion_r455188027,455188027,src/net_processing.cpp
vasild,2020-07-22 15:51:30,"The first point is easy to fix:\n\n<details>\n<summary>patch to change the order of initial messages</summary>\n\n```diff\ndiff --git i/src/net_processing.cpp w/src/net_processing.cpp\nindex 5af63acc4..296237075 100644\n--- i/src/net_processing.cpp\n+++ w/src/net_processing.cpp\n@@ -2318,12 +2318,15 @@ void ProcessMessage(\n         // Be shy and don't send version until we hear\n     ",https://github.com/bitcoin/bitcoin/pull/19031#discussion_r458896584,458896584,src/net_processing.cpp
vasild,2020-07-24 14:38:20,"On the second point:\n\n> we also add our own address to vAddrToSend on receipt of the version message to advertise our address to the peer.\n\nRight, that is in `AdvertiseLocal()`, called from `PeerLogicValidation::SendMessages()`\n\n> That gets sent out in an addr message in the SendMessages() loop on the m_next_addr_send loop.\n\nNot necessary as an `addr` message - if we have received ",https://github.com/bitcoin/bitcoin/pull/19031#discussion_r460094264,460094264,src/net_processing.cpp
jnewbery,2020-07-24 14:58:49,"I haven't reviewed the implementation, but if it's as you say:\n\n> - If our address is not addr-compatible (e.g. TORv3) then the first call to AdvertiseLocal() will end up being a noop because it will call CNode::PushAddress() which will see that the address being pushed is not supported by the peer and so it will not add it to vAddrToSend[].\n>   - On the next call to AdvertiseLocal() we shou",https://github.com/bitcoin/bitcoin/pull/19031#discussion_r460107102,460107102,src/net_processing.cpp
vasild,2020-07-24 15:19:44,"Yes, here are the changes to `PushAddress()`:\n\nhttps://github.com/bitcoin/bitcoin/pull/19031/files#diff-1a8b9d1ad0a6fda5e751286c73102fc2R953\n\nIt will only append the address to `vAddrToSend[]` if it is supported by the peer (which is - either the peer supports `addrv2` or he does not but the address is `addr`-compatible).\n\nWe can even avoid the delay if we detect that `AdvertiseLocal()",https://github.com/bitcoin/bitcoin/pull/19031#discussion_r460120240,460120240,src/net_processing.cpp
vasild,2020-07-30 16:06:11,"I addressed the first concern and now the order of sent messages is `verack, sendaddrv2, getaddr`.",https://github.com/bitcoin/bitcoin/pull/19031#discussion_r463107253,463107253,src/net_processing.cpp
