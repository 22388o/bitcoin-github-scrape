[
  {
    "sha": "031d6db27c65e64db12705717b0eeb6f03375218",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzFkNmRiMjdjNjVlNjRkYjEyNzA1NzE3YjBlZWI2ZjAzMzc1MjE4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-11T07:28:10Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-16T22:26:19Z"
      },
      "message": "Replace READWRITEAS macro with AsBase wrapping function",
      "tree": {
        "sha": "d657cbf1a182b32322193060ca1b08ef918ce096",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d657cbf1a182b32322193060ca1b08ef918ce096"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/031d6db27c65e64db12705717b0eeb6f03375218",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/031d6db27c65e64db12705717b0eeb6f03375218",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/031d6db27c65e64db12705717b0eeb6f03375218",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/031d6db27c65e64db12705717b0eeb6f03375218/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c57dc566b06034ce7bdb29da0db4d65e0accb382",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c57dc566b06034ce7bdb29da0db4d65e0accb382",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c57dc566b06034ce7bdb29da0db4d65e0accb382"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 27,
      "deletions": 15
    },
    "files": [
      {
        "sha": "2bd98634578bb6af83f4786e7741730874d4f9ea",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/031d6db27c65e64db12705717b0eeb6f03375218/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/031d6db27c65e64db12705717b0eeb6f03375218/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=031d6db27c65e64db12705717b0eeb6f03375218",
        "patch": "@@ -60,8 +60,7 @@ class CAddrInfo : public CAddress\n \n     SERIALIZE_METHODS(CAddrInfo, obj)\n     {\n-        READWRITEAS(CAddress, obj);\n-        READWRITE(obj.source, obj.nLastSuccess, obj.nAttempts);\n+        READWRITE(AsBase<CAddress>(obj), obj.source, obj.nLastSuccess, obj.nAttempts);\n     }\n \n     CAddrInfo(const CAddress &addrIn, const CNetAddr &addrSource) : CAddress(addrIn), source(addrSource)"
      },
      {
        "sha": "cf10e6c6c13aa519529e3f159f0136ca4396a75f",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/031d6db27c65e64db12705717b0eeb6f03375218/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/031d6db27c65e64db12705717b0eeb6f03375218/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=031d6db27c65e64db12705717b0eeb6f03375218",
        "patch": "@@ -21,8 +21,7 @@ struct CDiskTxPos : public FlatFilePos\n \n     SERIALIZE_METHODS(CDiskTxPos, obj)\n     {\n-        READWRITEAS(FlatFilePos, obj);\n-        READWRITE(VARINT(obj.nTxOffset));\n+        READWRITE(AsBase<FlatFilePos>(obj), VARINT(obj.nTxOffset));\n     }\n \n     CDiskTxPos(const FlatFilePos &blockIn, unsigned int nTxOffsetIn) : FlatFilePos(blockIn.nFile, blockIn.nPos), nTxOffset(nTxOffsetIn) {"
      },
      {
        "sha": "44fb431a01c920518838143b7a93418c88786d27",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/031d6db27c65e64db12705717b0eeb6f03375218/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/031d6db27c65e64db12705717b0eeb6f03375218/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=031d6db27c65e64db12705717b0eeb6f03375218",
        "patch": "@@ -162,8 +162,7 @@ class CService : public CNetAddr\n \n         SERIALIZE_METHODS(CService, obj)\n         {\n-            READWRITEAS(CNetAddr, obj);\n-            READWRITE(Using<BigEndianFormatter<2>>(obj.port));\n+            READWRITE(AsBase<CNetAddr>(obj), Using<BigEndianFormatter<2>>(obj.port));\n         }\n };\n "
      },
      {
        "sha": "5f3a7ec6cfd15fdfc8dd1a91147d96b7be4ea42b",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/031d6db27c65e64db12705717b0eeb6f03375218/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/031d6db27c65e64db12705717b0eeb6f03375218/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=031d6db27c65e64db12705717b0eeb6f03375218",
        "patch": "@@ -81,8 +81,7 @@ class CBlock : public CBlockHeader\n \n     SERIALIZE_METHODS(CBlock, obj)\n     {\n-        READWRITEAS(CBlockHeader, obj);\n-        READWRITE(obj.vtx);\n+        READWRITE(AsBase<CBlockHeader>(obj), obj.vtx);\n     }\n \n     void SetNull()"
      },
      {
        "sha": "e7dcb166d8fcf2450e45db5aa83458763fa322dd",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/031d6db27c65e64db12705717b0eeb6f03375218/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/031d6db27c65e64db12705717b0eeb6f03375218/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=031d6db27c65e64db12705717b0eeb6f03375218",
        "patch": "@@ -380,8 +380,7 @@ class CAddress : public CService\n             // nTime.\n             READWRITE(obj.nTime);\n         }\n-        READWRITE(Using<CustomUintFormatter<8>>(obj.nServices));\n-        READWRITEAS(CService, obj);\n+        READWRITE(Using<CustomUintFormatter<8>>(obj.nServices), AsBase<CService>(obj));\n     }\n \n     ServiceFlags nServices{NODE_NONE};"
      },
      {
        "sha": "dd03528005ca280eb4a4a47da5eff2284a0353ba",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/031d6db27c65e64db12705717b0eeb6f03375218/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/031d6db27c65e64db12705717b0eeb6f03375218/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=031d6db27c65e64db12705717b0eeb6f03375218",
        "patch": "@@ -412,7 +412,7 @@ class CScript : public CScriptBase\n     CScript(std::vector<unsigned char>::const_iterator pbegin, std::vector<unsigned char>::const_iterator pend) : CScriptBase(pbegin, pend) { }\n     CScript(const unsigned char* pbegin, const unsigned char* pend) : CScriptBase(pbegin, pend) { }\n \n-    SERIALIZE_METHODS(CScript, obj) { READWRITEAS(CScriptBase, obj); }\n+    SERIALIZE_METHODS(CScript, obj) { READWRITE(AsBase<CScriptBase>(obj)); }\n \n     explicit CScript(int64_t b) { operator<<(b); }\n     explicit CScript(opcodetype b)     { operator<<(b); }"
      },
      {
        "sha": "eb3952a484efcf883e72cfc63c49ed1db298679b",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 21,
        "deletions": 4,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/031d6db27c65e64db12705717b0eeb6f03375218/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/031d6db27c65e64db12705717b0eeb6f03375218/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=031d6db27c65e64db12705717b0eeb6f03375218",
        "patch": "@@ -164,12 +164,29 @@ enum\n     SER_GETHASH         = (1 << 2),\n };\n \n-//! Convert the reference base type to X, without changing constness or reference type.\n-template<typename X> X& ReadWriteAsHelper(X& x) { return x; }\n-template<typename X> const X& ReadWriteAsHelper(const X& x) { return x; }\n+/* Convert any argument to a reference to X, maintaining constness.\n+ *\n+ * This can be used in serialization code to invoke a base class's\n+ * serialization routines.\n+ *\n+ * Example use:\n+ *   class Base { ... };\n+ *   class Child : public Base {\n+ *     int m_data;\n+ *   public:\n+ *     SERIALIZE_METHODS(Child, obj) {\n+ *       READWRITE(AsBase<Base>(obj), obj.m_data);\n+ *     }\n+ *   };\n+ *\n+ * static_cast cannot easily be used here, as the type of Obj will be const Child&\n+ * during serialization and Child& during deserialization. AsBase will convert to\n+ * const Base& and Base& appropriately.\n+ */\n+template<typename X> X& AsBase(X& x) { return x; }\n+template<typename X> const X& AsBase(const X& x) { return x; }\n \n #define READWRITE(...) (::SerReadWriteMany(s, ser_action, __VA_ARGS__))\n-#define READWRITEAS(type, obj) (::SerReadWriteMany(s, ser_action, ReadWriteAsHelper<type>(obj)))\n #define SER_READ(obj, code) ::SerRead(s, ser_action, obj, [&](Stream& s, typename std::remove_const<Type>::type& obj) { code; })\n #define SER_WRITE(obj, code) ::SerWrite(s, ser_action, obj, [&](Stream& s, const Type& obj) { code; })\n "
      }
    ]
  },
  {
    "sha": "ee70e2dabb584ea840eccdb08b8ae22444c31e77",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTcwZTJkYWJiNTg0ZWE4NDBlY2NkYjA4YjhhZTIyNDQ0YzMxZTc3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-11T02:43:44Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-16T22:50:30Z"
      },
      "message": "Support for serialization parameters",
      "tree": {
        "sha": "7c5249b8290983646cf886d476d76004e4a923be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c5249b8290983646cf886d476d76004e4a923be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee70e2dabb584ea840eccdb08b8ae22444c31e77",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee70e2dabb584ea840eccdb08b8ae22444c31e77",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee70e2dabb584ea840eccdb08b8ae22444c31e77",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee70e2dabb584ea840eccdb08b8ae22444c31e77/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "031d6db27c65e64db12705717b0eeb6f03375218",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/031d6db27c65e64db12705717b0eeb6f03375218",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/031d6db27c65e64db12705717b0eeb6f03375218"
      }
    ],
    "stats": {
      "total": 137,
      "additions": 129,
      "deletions": 8
    },
    "files": [
      {
        "sha": "453bf8b39fad5d84b5971d80a09ea23f7c329195",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 129,
        "deletions": 8,
        "changes": 137,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee70e2dabb584ea840eccdb08b8ae22444c31e77/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee70e2dabb584ea840eccdb08b8ae22444c31e77/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=ee70e2dabb584ea840eccdb08b8ae22444c31e77",
        "patch": "@@ -214,14 +214,47 @@ template<typename X> const X& AsBase(const X& x) { return x; }\n     template<typename Stream, typename Type, typename Operation> \\\n     static inline void SerializationOps(Type& obj, Stream& s, Operation ser_action) \\\n \n-/**\n- * Implement the Serialize and Unserialize methods by delegating to a single templated\n- * static method that takes the to-be-(de)serialized object as a parameter. This approach\n- * has the advantage that the constness of the object becomes a template parameter, and\n- * thus allows a single implementation that sees the object as const for serializing\n- * and non-const for deserializing, without casts.\n+/** Variant of FORMATTER_METHODS that supports a declared parameter type.\n+ *\n+ * If a formatter has a declared parameter type, it must be invoked directly or\n+ * indirectly with a parameter of that type. This permits making serialization\n+ * depend on run-time context in a type-safe way.\n+ *\n+ * Example use:\n+ *   struct BarParameter { bool fancy; ... };\n+ *   struct Bar { ... };\n+ *   struct FooFormatter {\n+ *     FORMATTER_METHODS(Bar, obj, BarParameter, param) {\n+ *       if (param.fancy) {\n+ *         READWRITE(VARINT(obj.value));\n+ *       } else {\n+ *         READWRITE(obj.value);\n+ *       }\n+ *     }\n+ *   };\n+ * which would then be invoked as\n+ *   READWRITE(WithParams(BarParameter{...}, Using<FooFormatter>(obj.foo)))\n+ *\n+ * Note that WithParams(parameter, obj) can be invoked anywhere in the call\n+ * stack; it is passed down recursively into all serialization code, until\n+ * another WithParams overrides it.\n+ *\n+ * Parameters will be implicitly converted where appropriate. This means that\n+ * \"parent\" serialization code can use a parameter that derives from, or is\n+ * convertible to, a \"child\" formatter's parameter type.\n+ *\n+ * Compilation will fail in any context where serialization is invoked but\n+ * no parameter of a type convertible to BarParameter is provided.\n  */\n-#define SERIALIZE_METHODS(cls, obj)                                                 \\\n+#define FORMATTER_METHODS_PARAMS(cls, obj, paramcls, paramobj) \\\n+    template<typename Stream> \\\n+    static void Ser(Stream& s, const cls& obj) { SerializationOps(obj, s, CSerActionSerialize(), s.GetParams()); } \\\n+    template<typename Stream> \\\n+    static void Unser(Stream& s, cls& obj) { SerializationOps(obj, s, CSerActionUnserialize(), s.GetParams()); } \\\n+    template<typename Stream, typename Type, typename Operation> \\\n+    static inline void SerializationOps(Type& obj, Stream& s, Operation ser_action, const paramcls& paramobj) \\\n+\n+#define BASE_SERIALIZE_METHODS(cls)                                                 \\\n     template<typename Stream>                                                       \\\n     void Serialize(Stream& s) const                                                 \\\n     {                                                                               \\\n@@ -233,9 +266,27 @@ template<typename X> const X& AsBase(const X& x) { return x; }\n     {                                                                               \\\n         static_assert(std::is_same<cls&, decltype(*this)>::value, \"Unserialize type mismatch\"); \\\n         Unser(s, *this);                                                            \\\n-    }                                                                               \\\n+    }\n+\n+/**\n+ * Implement the Serialize and Unserialize methods by delegating to a single templated\n+ * static method that takes the to-be-(de)serialized object as a parameter. This approach\n+ * has the advantage that the constness of the object becomes a template parameter, and\n+ * thus allows a single implementation that sees the object as const for serializing\n+ * and non-const for deserializing, without casts.\n+ */\n+#define SERIALIZE_METHODS(cls, obj) \\\n+    BASE_SERIALIZE_METHODS(cls) \\\n     FORMATTER_METHODS(cls, obj)\n \n+/** Variant of SERIALIZE_METHODS that supports a declared parameter type.\n+ *\n+ *  See FORMATTER_METHODS_PARAMS for more information on parameters.\n+ */\n+#define SERIALIZE_METHODS_PARAMS(cls, obj, paramcls, paramobj) \\\n+    BASE_SERIALIZE_METHODS(cls) \\\n+    FORMATTER_METHODS_PARAMS(cls, obj, paramcls, paramobj)\n+\n #ifndef CHAR_EQUALS_INT8\n template<typename Stream> inline void Serialize(Stream& s, char a    ) { ser_writedata8(s, a); } // TODO Get rid of bare char\n #endif\n@@ -1131,4 +1182,74 @@ size_t GetSerializeSizeMany(int nVersion, const T&... t)\n     return sc.size();\n }\n \n+/** Wrapper that overrides the GetParams() function of a stream. */\n+template<typename Params, typename Stream>\n+class ParamsStream\n+{\n+    const Params& m_params;\n+    Stream& m_substream;\n+public:\n+    ParamsStream(const Params& params, Stream& substream) : m_params(params), m_substream(substream) {}\n+    template<typename U> inline ParamsStream& operator<<(const U& obj) { ::Serialize(*this, obj); return *this; }\n+    template<typename U> inline ParamsStream& operator>>(U&& obj) { ::Unserialize(*this, obj); return *this; }\n+    inline void write(const char* ptr, size_t size) { m_substream.write(ptr, size); }\n+    inline void read(char* ptr, size_t size) { m_substream.read(ptr, size); }\n+    inline size_t size() const { return m_substream.size(); }\n+    inline const Params& GetParams() { return m_params; }\n+    inline int GetVersion() const { return m_substream.GetVersion(); }\n+    inline int GetType() const { return m_substream.GetType(); }\n+    inline Stream& GetSubStream() const { return m_substream; }\n+};\n+\n+/** Wrapper that serializes objects with the specified parameters. */\n+template<typename Params, typename T>\n+class ParamsWrapper\n+{\n+    static_assert(std::is_lvalue_reference<T>::value, \"ParamsWrapper needs an lvalue reference type T\");\n+    const Params& m_params;\n+    T m_object;\n+\n+public:\n+    explicit ParamsWrapper(const Params& params, T obj) : m_params(params), m_object(obj) {}\n+\n+    //! Serialize to another ParamsStream: optimize by skipping it.\n+    template<typename Stream, typename PrevParams>\n+    inline void Serialize(ParamsStream<PrevParams, Stream>& s) const\n+    {\n+        ParamsStream<Params, Stream> ss(m_params, s.GetSubStream());\n+        ::Serialize(ss, m_object);\n+    }\n+\n+    //! Serialize to any other stream\n+    template<typename Stream>\n+    inline void Serialize(Stream& s) const\n+    {\n+        ParamsStream<Params, Stream> ss(m_params, s);\n+        ::Serialize(ss, m_object);\n+    }\n+\n+    //! Deserialize from another ParamsStream: optimize by skipping it.\n+    template<typename Stream, typename PrevParams>\n+    inline void Unserialize(ParamsStream<PrevParams, Stream>& s)\n+    {\n+        ParamsStream<Params, Stream> ss(m_params, s.GetSubStream());\n+        ::Unserialize(ss, m_object);\n+    }\n+\n+    //! Deserialize from any other stream\n+    template<typename Stream>\n+    inline void Unserialize(Stream& s)\n+    {\n+        ParamsStream<Params, Stream> ss(m_params, s);\n+        ::Unserialize(ss, m_object);\n+    }\n+};\n+\n+/** Return a wrapper around t that (de)serializes it with specified parameter params.\n+ *\n+ * See FORMATTER_METHODS_PARAMS for more information on serialization parameters.\n+ */\n+template<typename Params, typename T>\n+static inline ParamsWrapper<Params, T&> WithParams(const Params& params, T&& t) { return ParamsWrapper<Params, T&>(params, t); }\n+\n #endif // BITCOIN_SERIALIZE_H"
      }
    ]
  },
  {
    "sha": "12a5a3c0329d49e41b733312b43c2cc8a01a2a83",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMmE1YTNjMDMyOWQ0OWU0MWI3MzMzMTJiNDNjMmNjOGEwMWEyYTgz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-10T22:36:30Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-16T22:50:31Z"
      },
      "message": "Disentangle disk address version from client version",
      "tree": {
        "sha": "4861b14f11a1d19735fb33fff022b17a25273f58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4861b14f11a1d19735fb33fff022b17a25273f58"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12a5a3c0329d49e41b733312b43c2cc8a01a2a83",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12a5a3c0329d49e41b733312b43c2cc8a01a2a83",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12a5a3c0329d49e41b733312b43c2cc8a01a2a83",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12a5a3c0329d49e41b733312b43c2cc8a01a2a83/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee70e2dabb584ea840eccdb08b8ae22444c31e77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee70e2dabb584ea840eccdb08b8ae22444c31e77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee70e2dabb584ea840eccdb08b8ae22444c31e77"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 12,
      "deletions": 6
    },
    "files": [
      {
        "sha": "cc64e2e9278c71285eba413dc9dc3cdf7fcc0872",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 12,
        "deletions": 6,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12a5a3c0329d49e41b733312b43c2cc8a01a2a83/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12a5a3c0329d49e41b733312b43c2cc8a01a2a83/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=12a5a3c0329d49e41b733312b43c2cc8a01a2a83",
        "patch": "@@ -359,26 +359,32 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** The disk serialization for CAddress includes a version number.\n+     *  Traditionally the number CLIENT_VERSION was used, but it has since\n+     *  been disentangled from it. */\n+    static constexpr uint32_t DISK_VERSION{210000};\n+\n public:\n     CAddress() : CService{} {};\n     explicit CAddress(CService ipIn, ServiceFlags nServicesIn) : CService{ipIn}, nServices{nServicesIn} {};\n \n     SERIALIZE_METHODS(CAddress, obj)\n     {\n         SER_READ(obj, obj.nTime = TIME_INIT);\n-        int nVersion = s.GetVersion();\n         if (s.GetType() & SER_DISK) {\n-            READWRITE(nVersion);\n-        }\n-        if ((s.GetType() & SER_DISK) ||\n-            (nVersion != INIT_PROTO_VERSION && !(s.GetType() & SER_GETHASH))) {\n+            uint32_t disk_version = DISK_VERSION;\n+            READWRITE(disk_version);\n+            READWRITE(obj.nTime);\n+        } else if (s.GetType() & SER_NETWORK) {\n             // The only time we serialize a CAddress object without nTime is in\n             // the initial VERSION messages which contain two CAddress records.\n             // At that point, the serialization version is INIT_PROTO_VERSION.\n             // After the version handshake, serialization version is >=\n             // MIN_PEER_PROTO_VERSION and all ADDR messages are serialized with\n             // nTime.\n-            READWRITE(obj.nTime);\n+            if (s.GetVersion() != INIT_PROTO_VERSION) {\n+                READWRITE(obj.nTime);\n+            }\n         }\n         READWRITE(Using<CustomUintFormatter<8>>(obj.nServices), AsBase<CService>(obj));\n     }"
      }
    ]
  },
  {
    "sha": "21446c5b5daf1f167c4a8b835485d33883ee1061",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTQ0NmM1YjVkYWYxZjE2N2M0YThiODM1NDg1ZDMzODgzZWUxMDYx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-11T03:02:55Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-16T23:18:08Z"
      },
      "message": "Use serialization parameters for CAddress serialization",
      "tree": {
        "sha": "7bc9a3575948fe528a34d06bf62c3064f7d1233c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7bc9a3575948fe528a34d06bf62c3064f7d1233c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/21446c5b5daf1f167c4a8b835485d33883ee1061",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21446c5b5daf1f167c4a8b835485d33883ee1061",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/21446c5b5daf1f167c4a8b835485d33883ee1061",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21446c5b5daf1f167c4a8b835485d33883ee1061/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12a5a3c0329d49e41b733312b43c2cc8a01a2a83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12a5a3c0329d49e41b733312b43c2cc8a01a2a83",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12a5a3c0329d49e41b733312b43c2cc8a01a2a83"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 27,
      "deletions": 23
    },
    "files": [
      {
        "sha": "1d661814854d6f4ade504520f696b3a0faa2f9cb",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21446c5b5daf1f167c4a8b835485d33883ee1061/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21446c5b5daf1f167c4a8b835485d33883ee1061/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=21446c5b5daf1f167c4a8b835485d33883ee1061",
        "patch": "@@ -60,7 +60,7 @@ class CAddrInfo : public CAddress\n \n     SERIALIZE_METHODS(CAddrInfo, obj)\n     {\n-        READWRITE(AsBase<CAddress>(obj), obj.source, obj.nLastSuccess, obj.nAttempts);\n+        READWRITE(WithParams(CAddress::Format::DISK, AsBase<CAddress>(obj)), obj.source, obj.nLastSuccess, obj.nAttempts);\n     }\n \n     CAddrInfo(const CAddress &addrIn, const CNetAddr &addrSource) : CAddress(addrIn), source(addrSource)"
      },
      {
        "sha": "301a913e72d855edb39b378613c76adaedef9add",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 8,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21446c5b5daf1f167c4a8b835485d33883ee1061/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21446c5b5daf1f167c4a8b835485d33883ee1061/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=21446c5b5daf1f167c4a8b835485d33883ee1061",
        "patch": "@@ -477,8 +477,12 @@ static void PushNodeVersion(CNode& pnode, CConnman& connman, int64_t nTime)\n     CAddress addrYou = (addr.IsRoutable() && !IsProxy(addr) ? addr : CAddress(CService(), addr.nServices));\n     CAddress addrMe = CAddress(CService(), nLocalNodeServices);\n \n-    connman.PushMessage(&pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, (uint64_t)nLocalNodeServices, nTime, addrYou, addrMe,\n-            nonce, strSubVersion, nNodeStartingHeight, ::g_relay_txes && pnode.m_tx_relay != nullptr));\n+    connman.PushMessage(&pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(\n+        NetMsgType::VERSION, PROTOCOL_VERSION, (uint64_t)nLocalNodeServices, nTime,\n+        WithParams(CAddress::Format::NETWORK_NOTIME, addrYou),\n+        WithParams(CAddress::Format::NETWORK_NOTIME, addrMe),\n+        nonce, strSubVersion, nNodeStartingHeight,\n+        ::g_relay_txes && pnode.m_tx_relay != nullptr));\n \n     if (fLogIPs) {\n         LogPrint(BCLog::NET, \"send version message: version %d, blocks=%d, us=%s, them=%s, peer=%d\\n\", PROTOCOL_VERSION, nNodeStartingHeight, addrMe.ToString(), addrYou.ToString(), nodeid);\n@@ -2269,7 +2273,7 @@ void ProcessMessage(\n         int nStartingHeight = -1;\n         bool fRelay = true;\n \n-        vRecv >> nVersion >> nServiceInt >> nTime >> addrMe;\n+        vRecv >> nVersion >> nServiceInt >> nTime >> WithParams(CAddress::Format::NETWORK_NOTIME, addrMe);\n         nSendVersion = std::min(nVersion, PROTOCOL_VERSION);\n         nServices = ServiceFlags(nServiceInt);\n         if (!pfrom.fInbound)\n@@ -2290,8 +2294,9 @@ void ProcessMessage(\n             return;\n         }\n \n-        if (!vRecv.empty())\n-            vRecv >> addrFrom >> nNonce;\n+        if (!vRecv.empty()) {\n+            vRecv >> WithParams(CAddress::Format::NETWORK_NOTIME, addrFrom) >> nNonce;\n+        }\n         if (!vRecv.empty()) {\n             std::string strSubVer;\n             vRecv >> LIMITED_STRING(strSubVer, MAX_SUBVERSION_LENGTH);\n@@ -2464,7 +2469,7 @@ void ProcessMessage(\n \n     if (msg_type == NetMsgType::ADDR) {\n         std::vector<CAddress> vAddr;\n-        vRecv >> vAddr;\n+        vRecv >> WithParams(CAddress::Format::NETWORK_WITHTIME, vAddr);\n \n         if (!pfrom.IsAddrRelayPeer()) {\n             return;\n@@ -3938,14 +3943,14 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     // receiver rejects addr messages larger than 1000\n                     if (vAddr.size() >= 1000)\n                     {\n-                        connman->PushMessage(pto, msgMaker.Make(NetMsgType::ADDR, vAddr));\n+                        connman->PushMessage(pto, msgMaker.Make(NetMsgType::ADDR, WithParams(CAddress::Format::NETWORK_WITHTIME, vAddr)));\n                         vAddr.clear();\n                     }\n                 }\n             }\n             pto->vAddrToSend.clear();\n             if (!vAddr.empty())\n-                connman->PushMessage(pto, msgMaker.Make(NetMsgType::ADDR, vAddr));\n+                connman->PushMessage(pto, msgMaker.Make(NetMsgType::ADDR, WithParams(CAddress::Format::NETWORK_WITHTIME, vAddr)));\n             // we only send the big addr message once\n             if (pto->vAddrToSend.capacity() > 40)\n                 pto->vAddrToSend.shrink_to_fit();"
      },
      {
        "sha": "69e129bae550af759fccdaba0ce4232d38693c85",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21446c5b5daf1f167c4a8b835485d33883ee1061/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21446c5b5daf1f167c4a8b835485d33883ee1061/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=21446c5b5daf1f167c4a8b835485d33883ee1061",
        "patch": "@@ -354,6 +354,7 @@ static inline bool MayHaveUsefulAddressDB(ServiceFlags services)\n     return (services & NODE_NETWORK) || (services & NODE_NETWORK_LIMITED);\n }\n \n+\n /** A CService with information about it as peer */\n class CAddress : public CService\n {\n@@ -368,23 +369,21 @@ class CAddress : public CService\n     CAddress() : CService{} {};\n     explicit CAddress(CService ipIn, ServiceFlags nServicesIn) : CService{ipIn}, nServices{nServicesIn} {};\n \n-    SERIALIZE_METHODS(CAddress, obj)\n+    enum class Format {\n+        DISK,\n+        NETWORK_NOTIME,\n+        NETWORK_WITHTIME,\n+    };\n+\n+    SERIALIZE_METHODS_PARAMS(CAddress, obj, Format, fmt)\n     {\n         SER_READ(obj, obj.nTime = TIME_INIT);\n-        if (s.GetType() & SER_DISK) {\n+        if (fmt == Format::DISK) {\n             uint32_t disk_version = DISK_VERSION;\n             READWRITE(disk_version);\n             READWRITE(obj.nTime);\n-        } else if (s.GetType() & SER_NETWORK) {\n-            // The only time we serialize a CAddress object without nTime is in\n-            // the initial VERSION messages which contain two CAddress records.\n-            // At that point, the serialization version is INIT_PROTO_VERSION.\n-            // After the version handshake, serialization version is >=\n-            // MIN_PEER_PROTO_VERSION and all ADDR messages are serialized with\n-            // nTime.\n-            if (s.GetVersion() != INIT_PROTO_VERSION) {\n-                READWRITE(obj.nTime);\n-            }\n+        } else if (fmt == Format::NETWORK_WITHTIME) {\n+            READWRITE(obj.nTime);\n         }\n         READWRITE(Using<CustomUintFormatter<8>>(obj.nServices), AsBase<CService>(obj));\n     }"
      },
      {
        "sha": "64f9244f50470489aa65ae7ba1e48b08c67209a0",
        "filename": "src/test/fuzz/deserialize.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21446c5b5daf1f167c4a8b835485d33883ee1061/src/test/fuzz/deserialize.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21446c5b5daf1f167c4a8b835485d33883ee1061/src/test/fuzz/deserialize.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/deserialize.cpp?ref=21446c5b5daf1f167c4a8b835485d33883ee1061",
        "patch": "@@ -60,7 +60,7 @@ T Deserialize(CDataStream ds)\n }\n \n template <typename T>\n-void DeserializeFromFuzzingInput(const std::vector<uint8_t>& buffer, T& obj)\n+void DeserializeFromFuzzingInput(const std::vector<uint8_t>& buffer, T&& obj)\n {\n     CDataStream ds(buffer, SER_NETWORK, INIT_PROTO_VERSION);\n     try {\n@@ -195,7 +195,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         (void)mh.IsValid(pchMessageStart);\n #elif ADDRESS_DESERIALIZE\n         CAddress a;\n-        DeserializeFromFuzzingInput(buffer, a);\n+        DeserializeFromFuzzingInput(buffer, WithParams(CAddress::Format::NETWORK_NOTIME, a));\n #elif INV_DESERIALIZE\n         CInv i;\n         DeserializeFromFuzzingInput(buffer, i);"
      }
    ]
  },
  {
    "sha": "4406d9abce8e0c48e3ce582ea1398165f3a09f8c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDA2ZDlhYmNlOGUwYzQ4ZTNjZTU4MmVhMTM5ODE2NWYzYTA5Zjhj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-15T16:57:13Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-16T23:19:39Z"
      },
      "message": "Add deserialization fuzzers for address variants",
      "tree": {
        "sha": "9ccf4d30ef12a816bc5a8d40aec4ab1a3021ec34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ccf4d30ef12a816bc5a8d40aec4ab1a3021ec34"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4406d9abce8e0c48e3ce582ea1398165f3a09f8c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4406d9abce8e0c48e3ce582ea1398165f3a09f8c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4406d9abce8e0c48e3ce582ea1398165f3a09f8c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4406d9abce8e0c48e3ce582ea1398165f3a09f8c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "21446c5b5daf1f167c4a8b835485d33883ee1061",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21446c5b5daf1f167c4a8b835485d33883ee1061",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/21446c5b5daf1f167c4a8b835485d33883ee1061"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 20,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7eb6ed98c7495ab35a1d6023561f804713543e6a",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4406d9abce8e0c48e3ce582ea1398165f3a09f8c/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4406d9abce8e0c48e3ce582ea1398165f3a09f8c/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=4406d9abce8e0c48e3ce582ea1398165f3a09f8c",
        "patch": "@@ -7,6 +7,8 @@ FUZZ_TARGETS = \\\n   test/fuzz/addr_info_deserialize \\\n   test/fuzz/addrdb \\\n   test/fuzz/address_deserialize \\\n+  test/fuzz/address_withtime_deserialize \\\n+  test/fuzz/address_disk_deserialize \\\n   test/fuzz/addrman_deserialize \\\n   test/fuzz/asmap \\\n   test/fuzz/asmap_direct \\\n@@ -338,6 +340,18 @@ test_fuzz_address_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_address_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_address_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n+test_fuzz_address_withtime_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DADDRESS_DESERIALIZE_WITHTIME=1\n+test_fuzz_address_withtime_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_address_withtime_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_address_withtime_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_address_withtime_deserialize_SOURCES = test/fuzz/deserialize.cpp\n+\n+test_fuzz_address_disk_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DADDRESS_DESERIALIZE_DISK=1\n+test_fuzz_address_disk_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_address_disk_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_address_disk_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_address_disk_deserialize_SOURCES = test/fuzz/deserialize.cpp\n+\n test_fuzz_addrman_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DADDRMAN_DESERIALIZE=1\n test_fuzz_addrman_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_addrman_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)"
      },
      {
        "sha": "e64bdcbc89cbab6c5cbe5b190a0bf1e451809d1a",
        "filename": "src/test/fuzz/deserialize.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4406d9abce8e0c48e3ce582ea1398165f3a09f8c/src/test/fuzz/deserialize.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4406d9abce8e0c48e3ce582ea1398165f3a09f8c/src/test/fuzz/deserialize.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/deserialize.cpp?ref=4406d9abce8e0c48e3ce582ea1398165f3a09f8c",
        "patch": "@@ -196,6 +196,12 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n #elif ADDRESS_DESERIALIZE\n         CAddress a;\n         DeserializeFromFuzzingInput(buffer, WithParams(CAddress::Format::NETWORK_NOTIME, a));\n+#elif ADDRESS_DESERIALIZE_WITHTIME\n+        CAddress a;\n+        DeserializeFromFuzzingInput(buffer, WithParams(CAddress::Format::NETWORK_WITHTIME, a));\n+#elif ADDRESS_DESERIALIZE_DISK\n+        CAddress a;\n+        DeserializeFromFuzzingInput(buffer, WithParams(CAddress::Format::DISK, a));\n #elif INV_DESERIALIZE\n         CInv i;\n         DeserializeFromFuzzingInput(buffer, i);"
      }
    ]
  },
  {
    "sha": "483ed457411d164ad71115dbfe1d2b4ff8b2e5f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODNlZDQ1NzQxMWQxNjRhZDcxMTE1ZGJmZTFkMmI0ZmY4YjJlNWYz",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-07-16T08:32:24Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-17T00:16:27Z"
      },
      "message": "test: add tests that exercise WithParams()",
      "tree": {
        "sha": "f59e1847c5da167f2562f203246500a6193e58f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f59e1847c5da167f2562f203246500a6193e58f9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/483ed457411d164ad71115dbfe1d2b4ff8b2e5f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/483ed457411d164ad71115dbfe1d2b4ff8b2e5f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/483ed457411d164ad71115dbfe1d2b4ff8b2e5f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/483ed457411d164ad71115dbfe1d2b4ff8b2e5f3/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4406d9abce8e0c48e3ce582ea1398165f3a09f8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4406d9abce8e0c48e3ce582ea1398165f3a09f8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4406d9abce8e0c48e3ce582ea1398165f3a09f8c"
      }
    ],
    "stats": {
      "total": 172,
      "additions": 172,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5f4c5849e85ad5083f18fe0e096a07a7a35bd18f",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 172,
        "deletions": 0,
        "changes": 172,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/483ed457411d164ad71115dbfe1d2b4ff8b2e5f3/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/483ed457411d164ad71115dbfe1d2b4ff8b2e5f3/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=483ed457411d164ad71115dbfe1d2b4ff8b2e5f3",
        "patch": "@@ -9,6 +9,7 @@\n #include <util/strencodings.h>\n \n #include <stdint.h>\n+#include <string>\n \n #include <boost/test/unit_test.hpp>\n \n@@ -376,4 +377,175 @@ BOOST_AUTO_TEST_CASE(class_methods)\n     BOOST_CHECK(methodtest3 == methodtest4);\n }\n \n+enum class BaseFormat {\n+    DEC,\n+    HEX,\n+};\n+\n+/// (Un)serialize a number as a string either from/to decimal or hexadecimal.\n+class Base\n+{\n+public:\n+    uint8_t m_base_data;\n+\n+    Base() : m_base_data(17) {}\n+    explicit Base(uint8_t data) : m_base_data(data) {}\n+\n+#if 0 // the following two are equivalent\n+    SERIALIZE_METHODS_PARAMS(Base, obj, BaseFormat, fmt)\n+    {\n+        if (ser_action.ForRead()) {\n+            std::string str;\n+            s >> str;\n+            assert(str.size() == 2 || (fmt == BaseFormat::DEC && str.size() == 3));\n+            uint32_t data;\n+            bool ok;\n+            if (fmt == BaseFormat::DEC) {\n+                ok = ParseUint32(str, &data);\n+            } else {\n+                ok = IsHex(str);\n+                data = ParseHex(str)[0];\n+            }\n+            assert(ok);\n+            SER_READ(obj, obj.m_base_data = data);\n+        } else if (fmt == BaseFormat::DEC) {\n+            s << strprintf(\"%02u\", obj.m_base_data);\n+        } else {\n+            s << strprintf(\"%02X\", obj.m_base_data);\n+        }\n+    }\n+#else\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        if (s.GetParams() == BaseFormat::DEC) {\n+            s << strprintf(\"%02u\", m_base_data);\n+        } else {\n+            s << strprintf(\"%02X\", m_base_data);\n+        }\n+    }\n+\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        std::string str;\n+        s >> str;\n+        assert(str.size() == 2 || (s.GetParams() == BaseFormat::DEC && str.size() == 3));\n+        uint32_t data;\n+        bool ok;\n+        if (s.GetParams() == BaseFormat::DEC) {\n+            ok = ParseUInt32(str, &data);\n+        } else {\n+            ok = IsHex(str);\n+            data = ParseHex(str)[0];\n+        }\n+        assert(ok);\n+        m_base_data = data;\n+    }\n+#endif\n+};\n+\n+class DerivedAndBaseFormat\n+{\n+public:\n+    BaseFormat m_base_format;\n+\n+    enum class DerivedFormat {\n+        LOWER,\n+        UPPER,\n+    } m_derived_format;\n+};\n+\n+class Derived : public Base\n+{\n+public:\n+    std::string m_derived_data;\n+\n+    SERIALIZE_METHODS_PARAMS(Derived, obj, DerivedAndBaseFormat, fmt)\n+    {\n+        READWRITE(WithParams(fmt.m_base_format, AsBase<Base>(obj)));\n+\n+        if (ser_action.ForRead()) {\n+            std::string str;\n+            s >> str;\n+            SER_READ(obj, obj.m_derived_data = str);\n+        } else {\n+            s << (fmt.m_derived_format == DerivedAndBaseFormat::DerivedFormat::LOWER ?\n+                      ToLower(obj.m_derived_data) :\n+                      ToUpper(obj.m_derived_data));\n+        }\n+    }\n+};\n+\n+BOOST_AUTO_TEST_CASE(with_params_base)\n+{\n+    Base b{15};\n+\n+    CDataStream stream(SER_DISK, PROTOCOL_VERSION);\n+\n+    stream << WithParams(BaseFormat::DEC, b);\n+    BOOST_CHECK_EQUAL(stream.str(), \"\\2\" \"15\");\n+\n+    b.m_base_data = 0;\n+    stream >> WithParams(BaseFormat::DEC, b);\n+    BOOST_CHECK_EQUAL(b.m_base_data, 15);\n+\n+    stream.clear();\n+\n+    stream << WithParams(BaseFormat::HEX, b);\n+    BOOST_CHECK_EQUAL(stream.str(), \"\\2\" \"0F\");\n+\n+    b.m_base_data = 0;\n+    stream >> WithParams(BaseFormat::HEX, b);\n+    BOOST_CHECK_EQUAL(b.m_base_data, 0x0F);\n+}\n+\n+BOOST_AUTO_TEST_CASE(with_params_vector_of_base)\n+{\n+    std::vector<Base> v{Base{15}, Base{255}};\n+\n+    CDataStream stream(SER_DISK, PROTOCOL_VERSION);\n+\n+    stream << WithParams(BaseFormat::DEC, v);\n+    BOOST_CHECK_EQUAL(stream.str(), \"\\2\\2\" \"15\" \"\\3\" \"255\");\n+\n+    v[0].m_base_data = 0;\n+    v[1].m_base_data = 0;\n+    stream >> WithParams(BaseFormat::DEC, v);\n+    BOOST_CHECK_EQUAL(v[0].m_base_data, 15);\n+    BOOST_CHECK_EQUAL(v[1].m_base_data, 255);\n+\n+    stream.clear();\n+\n+    stream << WithParams(BaseFormat::HEX, v);\n+    BOOST_CHECK_EQUAL(stream.str(), \"\\2\\2\" \"0F\" \"\\2\" \"FF\");\n+\n+    v[0].m_base_data = 0;\n+    v[1].m_base_data = 0;\n+    stream >> WithParams(BaseFormat::HEX, v);\n+    BOOST_CHECK_EQUAL(v[0].m_base_data, 0x0F);\n+    BOOST_CHECK_EQUAL(v[1].m_base_data, 0xFF);\n+}\n+\n+BOOST_AUTO_TEST_CASE(with_params_derived)\n+{\n+    Derived d;\n+    d.m_base_data = 15;\n+    d.m_derived_data = \"xY\";\n+\n+    DerivedAndBaseFormat fmt;\n+\n+    CDataStream stream(SER_DISK, PROTOCOL_VERSION);\n+\n+    fmt.m_base_format = BaseFormat::DEC;\n+    fmt.m_derived_format = DerivedAndBaseFormat::DerivedFormat::LOWER;\n+    stream << WithParams(fmt, d);\n+\n+    fmt.m_base_format = BaseFormat::HEX;\n+    fmt.m_derived_format = DerivedAndBaseFormat::DerivedFormat::UPPER;\n+    stream << WithParams(fmt, d);\n+\n+    BOOST_CHECK_EQUAL(stream.str(), \"\\2\" \"15\" \"\\2\" \"xy\" \"\\2\" \"0F\" \"\\2\" \"XY\");\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]