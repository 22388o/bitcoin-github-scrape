DrahtBot,2020-07-13 05:51:54,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19065 (tests: Add fuzzing harness for CAddrMan. Fill some fuzzing coverage gaps. by practicalswift)\n* #14053 (Add addres",https://github.com/bitcoin/bitcoin/pull/19503#issuecomment-657373448,657373448,
practicalswift,2020-07-13 08:17:04,"Concept ACK\n\nGetting rid of `GetVersion`/`GetType` and replacing them with a compile-time checked approach would be very nice.",https://github.com/bitcoin/bitcoin/pull/19503#issuecomment-657400171,657400171,
dongcarl,2020-07-13 19:56:18,"Concept ACK as it will allow for a previously hacky solution to be neater. See https://github.com/bitcoin/bitcoin/issues/19477 for more details\n\nPerhaps a worthwhile followup: Completing the example documentations of our serialization ""helpers"" (seems like there's already a few examples, but not all of them are documented)",https://github.com/bitcoin/bitcoin/pull/19503#issuecomment-657759825,657759825,
sipa,2020-07-13 20:18:47,Rebased after #19486 merge. Addressed comments.,https://github.com/bitcoin/bitcoin/pull/19503#issuecomment-657769998,657769998,
MarcoFalke,2020-07-14 07:28:04,Looks like the fuzzers don't compile on some of the commits,https://github.com/bitcoin/bitcoin/pull/19503#issuecomment-658018845,658018845,
naumenkogs,2020-07-14 07:55:03,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/19503#issuecomment-658030795,658030795,
sipa,2020-07-14 17:32:46,"@dongcarl Agree - I've added more comments to explain the feature for now, but a more comprehensive overview of all the things the serialization framework supports would be a nice further improvement.\n\n@MarcoFalke Hopefully fixed. I also added all variants of deserialization to the fuzzers.",https://github.com/bitcoin/bitcoin/pull/19503#issuecomment-658312761,658312761,
vasild,2020-07-15 09:35:36,"Code coverage report for this PR from unit + functional tests (lines not modified by this PR are dimmed and files not modified by this PR are omitted from the report):\n* [report](https://people.freebsd.org/~vd/pr19503_3d3b09543_coverage/)\n* [links to modified and not covered lines](https://people.freebsd.org/~vd/pr19503_3d3b09543_coverage/modified_and_not_covered.html)\n* just [net_processing",https://github.com/bitcoin/bitcoin/pull/19503#issuecomment-658661474,658661474,
jnewbery,2020-07-15 09:48:08,"> just net_processing.cpp:3942 is ""interesting"" (it is modified by this PR and not covered by tests).\n\nThat line is pretty much a no-op and could be removed. It's ensuring that we never send more than 1000 CAddress records in a single ADDR message. However, the ADDR message is populated from vAddrToSend, which itself is limited to 1000 entries (see the PushAddress() function). So we could just",https://github.com/bitcoin/bitcoin/pull/19503#issuecomment-658668027,658668027,
vasild,2020-07-15 15:30:25,"In order to check that this works as intended and to understand it better I wrote some unit tests that exercise it.\n\nSome observations, correct me if I am wrong:\n\n* I think it is impossible to use two separate methods `Serialize()` and `Unserialize()` with this mechanism and one has to use:\n```cpp\nSERIALIZE_METHODS_PARAMS(...)\n{\n    if (ser_action.ForRead()) {\n        ... all uns",https://github.com/bitcoin/bitcoin/pull/19503#issuecomment-658836544,658836544,
sipa,2020-07-15 16:34:03,"@vasild:\n\n* It should be possible to use separate `Serialize` and `Unserialize` member functions. Do you have a specific example that does not work?\n\n* This should *not* work in general:\n\n```c++\nSERIALIZE_METHODS_PARAMS(...)\n{\n    if (ser_action.ForRead()) {\n        ... all unserialize goes here ...\n    } else {\n        ... all serialize goes here ...\n    }\n}\n```\n\",https://github.com/bitcoin/bitcoin/pull/19503#issuecomment-658868509,658868509,
MarcoFalke,2020-07-15 16:45:42,Will review when travis is green,https://github.com/bitcoin/bitcoin/pull/19503#issuecomment-658875099,658875099,
sipa,2020-07-15 16:58:53,"@MarcoFalke I've been pushing fixes, and GitHub's UI doesn't seem to be picking them up...",https://github.com/bitcoin/bitcoin/pull/19503#issuecomment-658882692,658882692,
sipa,2020-07-15 16:59:33,https://github.com/sipa/bitcoin/tree/202007_ser_options has commits that aren't here.,https://github.com/bitcoin/bitcoin/pull/19503#issuecomment-658883070,658883070,
MarcoFalke,2020-07-15 17:04:00,"No idea what's going on. Since this has no reviews, you could try rebasing once more on master and force push? :man_shrugging: ",https://github.com/bitcoin/bitcoin/pull/19503#issuecomment-658885841,658885841,
sipa,2020-07-15 17:26:00,Ah it was just behind; it picked them up now.,https://github.com/bitcoin/bitcoin/pull/19503#issuecomment-658898647,658898647,
MarcoFalke,2020-07-15 19:47:40,"Travis still failing in the fuzzer. Also, needs rebase after https://github.com/bitcoin/bitcoin/pull/19360#discussion_r455193993",https://github.com/bitcoin/bitcoin/pull/19503#issuecomment-658971768,658971768,
jnewbery,2020-07-15 21:22:10,I think this requires a change to netaddress.h now that #19360 has been merged: https://github.com/bitcoin/bitcoin/pull/19360/files#diff-76d15e11a95be7a4aee1eb89de6098caR165,https://github.com/bitcoin/bitcoin/pull/19503#issuecomment-659018638,659018638,
DrahtBot,2020-07-16 07:31:23,<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).,https://github.com/bitcoin/bitcoin/pull/19503#issuecomment-659216460,659216460,
vasild,2020-07-16 13:06:09,"Alright, so this:\n\n```cpp\n    SERIALIZE_METHODS_PARAMS(Base, obj, BaseFormat, fmt)\n    {\n        if (ser_action.ForRead()) {\n            std::string str;\n            s >> str;\n            const int base = fmt == BaseFormat::DEC ? 10 : 16;\n            const uint8_t data = (uint8_t)std::stoul(str, 0, base);\n            SER_READ(obj, obj.m_base_data = data);\n        } else {\n ",https://github.com/bitcoin/bitcoin/pull/19503#issuecomment-659398102,659398102,
sipa,2020-07-16 23:25:33,"Rebased, added a few more comments, renamed `AddrSerialization` to `CAddress::Format`, and included @vasild's unit test.",https://github.com/bitcoin/bitcoin/pull/19503#issuecomment-659731403,659731403,
sipa,2020-07-22 23:45:07,"@ryanofsky That approach works and is a lot simpler, but I think it misses the ""automatic recursion"" property I was hoping for, that you could e.g. serialize a CBlock with specified CTransaction parameters, and it would transparently pass those parameters down. Or a block could define its own type that can be converted to the CTransaction parameters type, but not need to anything beyond that.\n\",https://github.com/bitcoin/bitcoin/pull/19503#issuecomment-662752171,662752171,
MarcoFalke,2020-08-04 13:07:26,"re-ACK 483ed457411d164ad71115dbfe1d2b4ff8b2e5f3, though I did not review the serialize.h changes üö§\n\nChanges since last review:\n* Rebase\n* Added comments/doc\n* Fix ""off-by-one"" issue/typo bug in commit ""12a5a3c032 Disentangle disk address version from client version""\n* Properly deserialize addrFrom without time (Bugfix in commit ""21446c5b5d Use serialization parameters for CAddress seri",https://github.com/bitcoin/bitcoin/pull/19503#issuecomment-668585203,668585203,
MarcoFalke,2020-08-04 13:08:33,"Note to myself, if this gets merged: It would be good to remove the now unused protocol version includes. I.e.\n\n\n```diff\ncommit 7ffff5b3237fa418637d30ddb59534ab47d3f610 (HEAD)\nAuthor: MarcoFalke <falke.marco@gmail.com>\nDate:   Tue Aug 4 14:58:25 2020 +0200\n\n    Remove unused protocol version header from protocol.h\n\ndiff --git a/src/bench/rpc_blockchain.cpp b/src/bench/rpc_block",https://github.com/bitcoin/bitcoin/pull/19503#issuecomment-668585730,668585730,
DrahtBot,2020-08-17 11:55:18,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/19503#issuecomment-674837070,674837070,
jonatack,2020-09-11 10:03:22,Needs rebase.,https://github.com/bitcoin/bitcoin/pull/19503#issuecomment-690998864,690998864,
vasild,2020-10-22 08:30:59,"This would resolve https://github.com/bitcoin/bitcoin/issues/19477.\n\nAlso, `ADDRV2_FORMAT` could be replaced with the technique introduced in this PR.",https://github.com/bitcoin/bitcoin/pull/19503#issuecomment-714326849,714326849,
MarcoFalke,2020-11-25 14:21:18,Could also use `LIFETIMEBOUND` as per https://github.com/bitcoin/bitcoin/pull/19387#issuecomment-658372256?,https://github.com/bitcoin/bitcoin/pull/19503#issuecomment-733736072,733736072,
jnewbery,2020-07-13 10:35:05,This sentence can be removed now. It's meaningless without a serialization version.,https://github.com/bitcoin/bitcoin/pull/19503#discussion_r453556220,453556220,src/protocol.h
MarcoFalke,2020-07-13 16:50:43,"in commit ""distentangle ..."":\n\nThis is not compatible with the live network. When testing I get:\n\n```\n2020-07-13T16:36:11Z [opencon] trying connection 188.42.33.44:18333 lastseen=1702.0hrs\n2020-07-13T16:36:11Z [opencon] Added connection peer=7\n2020-07-13T16:36:11Z [opencon] sending version (111 bytes) peer=7\n2020-07-13T16:36:11Z [opencon] send version message: version 70015, blocks",https://github.com/bitcoin/bitcoin/pull/19503#discussion_r453789310,453789310,src/protocol.h
MarcoFalke,2020-07-13 17:17:27,"in commit ""user serialization ..."":\n\n\nStill not compatible. Now I get:\n\n```\n2020-07-13T17:01:39Z [opencon] trying connection 95.183.48.89:18333 lastseen=2468.3hrs\n2020-07-13T17:01:39Z [opencon] Added connection peer=2\n2020-07-13T17:01:39Z [opencon] sending version (103 bytes) peer=2\n2020-07-13T17:01:39Z [opencon] send version message: version 70015, blocks=1746969, us=[::]:0, pee",https://github.com/bitcoin/bitcoin/pull/19503#discussion_r453805326,453805326,src/protocol.h
MarcoFalke,2020-07-13 17:22:00,"in the last commit:\n\nCould add a trailing semicolon? I've prepared a suggested diff for you that also switches to a switch-case so that the compiler can check all cases are covered, feel free to take or reject:\n\n\n```diff\ndiff --git a/src/protocol.h b/src/protocol.h\nindex 500cf346e9..0f5786a1a9 100644\n--- a/src/protocol.h\n+++ b/src/protocol.h\n@@ -356,14 +356,8 @@ static inline b",https://github.com/bitcoin/bitcoin/pull/19503#discussion_r453808173,453808173,src/protocol.h
vasild,2020-07-13 19:12:56,Why not use `static_cast` instead of `AsBase`?,https://github.com/bitcoin/bitcoin/pull/19503#discussion_r453872482,453872482,src/serialize.h
vasild,2020-07-13 19:23:02,nit: `s/thet/the/`,https://github.com/bitcoin/bitcoin/pull/19503#discussion_r453877989,453877989,src/serialize.h
sipa,2020-07-13 20:13:24,"Arguably there still is a serialization version, but the link between that and CAddress serialization is purely historical. Removed by incorporating @MarcoFalke's changes below.",https://github.com/bitcoin/bitcoin/pull/19503#discussion_r453904401,453904401,src/protocol.h
sipa,2020-07-13 20:14:02,"There was a bug (`>= INIT_PROTO_VERSION` instead of `!= INIT_PROTO_VERSION`), fixed.",https://github.com/bitcoin/bitcoin/pull/19503#discussion_r453904737,453904737,src/protocol.h
sipa,2020-07-13 20:14:45,"There was an unrelated bug to the previous one in this commit, with the same effect: `addrFrom` in the VERSION message was parsed with `NETWORK_WITHTIME`.",https://github.com/bitcoin/bitcoin/pull/19503#discussion_r453905123,453905123,src/protocol.h
sipa,2020-07-13 20:14:57,Included.,https://github.com/bitcoin/bitcoin/pull/19503#discussion_r453905248,453905248,src/protocol.h
sipa,2020-07-13 20:36:45,"It needs to maintain constness. During serialization, the object may be `const T`, while during deserialization it cannot be `const`. This function is effectively a static cast, but one that passes through constness.",https://github.com/bitcoin/bitcoin/pull/19503#discussion_r453917160,453917160,src/serialize.h
sipa,2020-07-14 17:30:04,Fixed.,https://github.com/bitcoin/bitcoin/pull/19503#discussion_r454523459,454523459,src/serialize.h
sipa,2020-07-14 17:30:16,Added more comments to clarify this.,https://github.com/bitcoin/bitcoin/pull/19503#discussion_r454523579,454523579,src/serialize.h
vasild,2020-07-15 07:27:44,I checked that replacing `s/AsBase/static_cast/` all over the place compiles and the few tests I ran pass.,https://github.com/bitcoin/bitcoin/pull/19503#discussion_r454847580,454847580,src/serialize.h
jnewbery,2020-07-15 10:11:16,s/With/When ?,https://github.com/bitcoin/bitcoin/pull/19503#discussion_r454942622,454942622,src/serialize.h
jnewbery,2020-07-15 13:27:44,I think this line can be removed. `nTime` is already initialized on construction so this is a no-op.,https://github.com/bitcoin/bitcoin/pull/19503#discussion_r455050442,455050442,src/protocol.h
jnewbery,2020-07-15 14:11:01,Any reason for this magic number other than blocks-per-epoch? Wouldn't it be better to set this at 0 initially so we have maximum flexibility for this field?,https://github.com/bitcoin/bitcoin/pull/19503#discussion_r455082159,455082159,src/protocol.h
jnewbery,2020-07-15 14:19:24,"I actually preferred this as a series of if/else if blocks. A switch statement seems appropriate when the different cases are disjoint, which might not always be the case here. There could be some future param that adds a field to the end of the serialization, which would need to be included in this switch statement, but would also require an if statement at the end.\n\nBoth are fine, but making",https://github.com/bitcoin/bitcoin/pull/19503#discussion_r455088324,455088324,src/protocol.h
jnewbery,2020-07-15 15:38:16,"This may be because I don't have a good understanding of serialize.h in general so perhaps you can just ignore this, but I don't understand what's being skipped here.",https://github.com/bitcoin/bitcoin/pull/19503#discussion_r455147534,455147534,src/serialize.h
jnewbery,2020-07-15 15:44:22,"Thinking about it a bit more, I actually think this whole comment can be removed. It made sense when the serialization was based on a protocol version that we don't support anywhere else (and was added to document something that caused confusion for reviewers: https://github.com/bitcoin/bitcoin/pull/14033#issuecomment-652456443), but when the serialization is based on a parameter that we pass in e",https://github.com/bitcoin/bitcoin/pull/19503#discussion_r455151430,455151430,src/protocol.h
sipa,2020-07-15 16:28:05,"Yes, that's expected - but it may lead to UB. `static_cast` may cast away the constness of a reference, in a place where it is illegal to do so. So `AsBase` is just a more restrictive, safer, version of `static_cast`.",https://github.com/bitcoin/bitcoin/pull/19503#discussion_r455177400,455177400,src/serialize.h
MarcoFalke,2020-07-15 16:41:05,This has been added here on purpose: https://github.com/bitcoin/bitcoin/pull/19020#discussion_r427620111,https://github.com/bitcoin/bitcoin/pull/19503#discussion_r455185404,455185404,src/protocol.h
MarcoFalke,2020-07-15 16:42:11,It is the CLIENT_VERSION of the next major release. The number should be equal to or greater than the largest CLIENT_VERSION of any previously released version.,https://github.com/bitcoin/bitcoin/pull/19503#discussion_r455186066,455186066,src/protocol.h
sipa,2020-07-15 16:47:00,"It's an attempt at avoiding crazy template expansion in the compiler when multiple levels of serializers each use `WithParams` (the Stream object that would hit the bottom would be ParamsStream<ParamsInner, ParamsStream<ParamsMid, ParamsStream<ParamsOuter, BaseStream>>>, and all its methods need instantiating). This optimization will just result in `ParamsStream<ParamsInner, BaseStream>`.",https://github.com/bitcoin/bitcoin/pull/19503#discussion_r455189108,455189108,src/serialize.h
MarcoFalke,2020-07-15 18:02:36,Can be removed now,https://github.com/bitcoin/bitcoin/pull/19503#discussion_r455240534,455240534,src/serialize.h
sipa,2020-07-16 00:51:42,Done.,https://github.com/bitcoin/bitcoin/pull/19503#discussion_r455446617,455446617,src/serialize.h
vasild,2020-07-16 13:17:44,`s/is invoke/is invoked/`,https://github.com/bitcoin/bitcoin/pull/19503#discussion_r455777851,455777851,src/serialize.h
vasild,2020-07-16 13:33:01,"nit: this line is 257 columns and then it continues on the next line for another 103 columns. Could it be made more readable somehow?\n\nIt does not need to pass `INIT_PROTO_VERSION` anymore to skip serializing the time, but I guess it cannot be simplified.",https://github.com/bitcoin/bitcoin/pull/19503#discussion_r455788599,455788599,src/net_processing.cpp
jnewbery,2020-07-16 16:10:43,"The linked comment doesn't make much sense to me. There are plenty of examples where member fields aren't [de]serialized, eg:\n\nhttps://github.com/bitcoin/bitcoin/blob/0f6900e780afb9c176cf7d1da4a1fc0ca6c9118a/src/addrman.h#L48-L55\nhttps://github.com/bitcoin/bitcoin/blob/0f6900e780afb9c176cf7d1da4a1fc0ca6c9118a/src/primitives/block.h#L68-L69\nhttps://github.com/bitcoin/bitcoin/blob/0f6900e780",https://github.com/bitcoin/bitcoin/pull/19503#discussion_r455904073,455904073,src/protocol.h
vasild,2020-07-16 18:07:25,"nit, feel free to ignore: since this is also used in **un**serialization, the name could be misleading. `AddrFormat`?",https://github.com/bitcoin/bitcoin/pull/19503#discussion_r455975870,455975870,src/protocol.h
vasild,2020-07-16 18:31:10,"Could it happen that we unserialize into the same object twice? E.g.\n```\ns >> addr;\n... do something with addr, possibly change nTime ...\ns >> addr;\n// if we don't explicitly set nTime during unserialization,\n// then here we may end up with some leftover nTime?\n```",https://github.com/bitcoin/bitcoin/pull/19503#discussion_r455989882,455989882,src/protocol.h
sipa,2020-07-16 18:34:29,"Yes, that's the reason to prefer fully initializing all fields when deserializing (or at least, all fields that are subject to serialization in the first place).",https://github.com/bitcoin/bitcoin/pull/19503#discussion_r455991781,455991781,src/protocol.h
sipa,2020-07-16 22:59:50,"@jnewbery I think in general we should aim to support deserializing into an already existing (and not just default-initialized) objects, as it's hard to enforce the opposite.\n\n`CAddrInfo` is a bit of a special case, as its memory-only fields are ""managed"" by CAddrMan more than being a standalone object. In the other cases, I think it makes sense to make deserialization reset those fields.",https://github.com/bitcoin/bitcoin/pull/19503#discussion_r456124358,456124358,src/protocol.h
sipa,2020-07-16 23:20:24,I've changed it to `CAddress::Format`.,https://github.com/bitcoin/bitcoin/pull/19503#discussion_r456130818,456130818,src/protocol.h
sipa,2020-07-16 23:21:16,"Yeah, it was ridiculously long. I've split it up.\n\nIndeed, `INIT_PROTO_VERSION` is no longer needed here, but I think it's better to just get rid of all of these version numbers once everything has been updated to not using them anymore.",https://github.com/bitcoin/bitcoin/pull/19503#discussion_r456131065,456131065,src/net_processing.cpp
sipa,2020-07-16 23:21:25,Done.,https://github.com/bitcoin/bitcoin/pull/19503#discussion_r456131095,456131095,src/serialize.h
sipa,2020-07-16 23:25:57,Done.,https://github.com/bitcoin/bitcoin/pull/19503#discussion_r456132586,456132586,src/protocol.h
sipa,2020-07-16 23:26:26,I agree. I've reverted it to the if/then/else style.,https://github.com/bitcoin/bitcoin/pull/19503#discussion_r456132770,456132770,src/protocol.h
sipa,2020-07-16 23:26:53,"""If"" is even better, I think? Done.",https://github.com/bitcoin/bitcoin/pull/19503#discussion_r456132927,456132927,src/serialize.h
jnewbery,2020-07-17 08:42:57,"Thanks for the additional background. My immediate reaction is that it seems dangerous to re-deserialize into an existing object and that it could lead to subtle, confusing bugs. However, we've definitely wondered off-topic for this PR, so I'm going to mark this conversation as resolved. If the expectation really is that the deserialization methods overwrite all fields, a future PR could update th",https://github.com/bitcoin/bitcoin/pull/19503#discussion_r456305810,456305810,src/protocol.h
ryanofsky,2020-07-22 22:40:06,"re: https://github.com/bitcoin/bitcoin/pull/19503#discussion_r456305810\n\n> Thanks for the additional background. My immediate reaction is that it seems dangerous to re-deserialize into an existing object and that it could lead to subtle, confusing bugs.\n\nFWIW, this is my opinion too. I think it would be nice to figure out some SERIALIZE_METHODS alternative for new code that adds a serializ",https://github.com/bitcoin/bitcoin/pull/19503#discussion_r459123691,459123691,src/protocol.h
ryanofsky,2020-07-22 23:02:12,"In commit ""test: add tests that exercise WithParams()"" (483ed457411d164ad71115dbfe1d2b4ff8b2e5f3)\n\nThink this needs to capitalize Int: `ParseUInt32`",https://github.com/bitcoin/bitcoin/pull/19503#discussion_r459131462,459131462,src/test/serialize_tests.cpp
MarcoFalke,2020-08-27 15:57:21,"One include can now be removed, see https://github.com/bitcoin/bitcoin/pull/19503#issuecomment-668585730",https://github.com/bitcoin/bitcoin/pull/19503#discussion_r478526343,478526343,src/protocol.h
