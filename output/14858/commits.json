[
  {
    "sha": "c29ee963ddac96d4170433d84abf3f502b137b5a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjllZTk2M2RkYWM5NmQ0MTcwNDMzZDg0YWJmM2Y1MDJiMTM3YjVh",
    "commit": {
      "author": {
        "name": "salisbury-espinosa",
        "email": "salisbury.espinosa@gmail.com",
        "date": "2018-12-02T18:37:04Z"
      },
      "committer": {
        "name": "salisbury-espinosa",
        "email": "salisbury.espinosa@gmail.com",
        "date": "2018-12-02T19:40:58Z"
      },
      "message": "RPC getblock accepts height or hash",
      "tree": {
        "sha": "ced75d9085b38074887e0f0dea304a419699fcc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ced75d9085b38074887e0f0dea304a419699fcc5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c29ee963ddac96d4170433d84abf3f502b137b5a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c29ee963ddac96d4170433d84abf3f502b137b5a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c29ee963ddac96d4170433d84abf3f502b137b5a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c29ee963ddac96d4170433d84abf3f502b137b5a/comments",
    "author": {
      "login": "salisbury-espinosa",
      "id": 18151481,
      "node_id": "MDQ6VXNlcjE4MTUxNDgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/18151481?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/salisbury-espinosa",
      "html_url": "https://github.com/salisbury-espinosa",
      "followers_url": "https://api.github.com/users/salisbury-espinosa/followers",
      "following_url": "https://api.github.com/users/salisbury-espinosa/following{/other_user}",
      "gists_url": "https://api.github.com/users/salisbury-espinosa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/salisbury-espinosa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/salisbury-espinosa/subscriptions",
      "organizations_url": "https://api.github.com/users/salisbury-espinosa/orgs",
      "repos_url": "https://api.github.com/users/salisbury-espinosa/repos",
      "events_url": "https://api.github.com/users/salisbury-espinosa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/salisbury-espinosa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "salisbury-espinosa",
      "id": 18151481,
      "node_id": "MDQ6VXNlcjE4MTUxNDgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/18151481?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/salisbury-espinosa",
      "html_url": "https://github.com/salisbury-espinosa",
      "followers_url": "https://api.github.com/users/salisbury-espinosa/followers",
      "following_url": "https://api.github.com/users/salisbury-espinosa/following{/other_user}",
      "gists_url": "https://api.github.com/users/salisbury-espinosa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/salisbury-espinosa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/salisbury-espinosa/subscriptions",
      "organizations_url": "https://api.github.com/users/salisbury-espinosa/orgs",
      "repos_url": "https://api.github.com/users/salisbury-espinosa/repos",
      "events_url": "https://api.github.com/users/salisbury-espinosa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/salisbury-espinosa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed12fd83ca7999a896350197533de5e9202bc2fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed12fd83ca7999a896350197533de5e9202bc2fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed12fd83ca7999a896350197533de5e9202bc2fe"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 35,
      "deletions": 7
    },
    "files": [
      {
        "sha": "75c4dbb0b343f401a8af9eadab561f77bf9317fe",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 7,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c29ee963ddac96d4170433d84abf3f502b137b5a/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c29ee963ddac96d4170433d84abf3f502b137b5a/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=c29ee963ddac96d4170433d84abf3f502b137b5a",
        "patch": "@@ -39,6 +39,8 @@\n \n #include <univalue.h>\n \n+#include <regex>\n+\n #include <boost/thread/thread.hpp> // boost::thread::interrupt\n \n #include <memory>\n@@ -819,27 +821,27 @@ static UniValue getblock(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n             RPCHelpMan{\"getblock\",\n-                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'.\\n\"\n-                \"If verbosity is 1, returns an Object with information about block <hash>.\\n\"\n-                \"If verbosity is 2, returns an Object with information about block <hash> and information about each transaction. \\n\",\n+                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash|height'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <hash|height>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <hash|height> and information about each transaction. \\n\",\n                 {\n                     {\"blockhash\", RPCArg::Type::STR_HEX, false},\n                     {\"verbosity\", RPCArg::Type::NUM, true},\n                 }}\n                 .ToString() +\n             \"\\nArguments:\\n\"\n-            \"1. \\\"blockhash\\\"          (string, required) The block hash\\n\"\n+            \"1. \\\"blockhash\\\"          (string, required) The block hash or height\\n\"\n             \"2. verbosity              (numeric, optional, default=1) 0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\\n\"\n             \"\\nResult (for verbosity = 0):\\n\"\n             \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'hash'.\\n\"\n             \"\\nResult (for verbosity = 1):\\n\"\n             \"{\\n\"\n-            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided hash)\\n\"\n             \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n             \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n             \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n             \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n-            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index (same as provided height)\\n\"\n             \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n             \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n             \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n@@ -868,11 +870,37 @@ static UniValue getblock(const JSONRPCRequest& request)\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n             + HelpExampleRpc(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n+            + HelpExampleCli(\"getblock\", \"1000\")\n+            + HelpExampleRpc(\"getblock\", \"1000\")\n         );\n \n     LOCK(cs_main);\n \n-    uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n+    std::string strHash = request.params[0].get_str();\n+\n+    // If height is supplied, find the hash\n+    if (strHash.size() < (2 * sizeof(uint256))) {\n+        // std::stoi allows characters, whereas we want to be strict\n+        std::regex r(\"[[:digit:]]+\");\n+        if (!std::regex_match(strHash, r)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid block height parameter\");\n+        }\n+\n+        int nHeight = -1;\n+        try {\n+            nHeight = std::stoi(strHash);\n+        }\n+        catch (const std::exception &e) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid block height parameter\");\n+        }\n+\n+        if (nHeight < 0 || nHeight > chainActive.Height()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block height out of range\");\n+        }\n+        strHash = chainActive[nHeight]->GetBlockHash().GetHex();\n+    }\n+\n+    uint256 hash(ParseHashV(strHash, \"blockhash\"));\n \n     int verbosity = 1;\n     if (!request.params[1].isNull()) {"
      }
    ]
  }
]