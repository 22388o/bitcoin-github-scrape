fanquake,2020-05-06 00:42:03,My assumption is that those TODOs would be taken care of as part of #18807. Is that correct @amitiuttarwar ?,https://github.com/bitcoin/bitcoin/pull/18895#issuecomment-624381434,624381434,
amitiuttarwar,2020-05-06 02:02:18,"@fanquake sorry for the confusion üòõ\n@gzhao408 offered to implement these follow ups, so I asked her to open a PR so I & others could review. I was thinking (now that this PR is open), I'd update #18807 to let reviewers know, & focus that PR on updates to release notes and tests. \ndoes that seem reasonable? ",https://github.com/bitcoin/bitcoin/pull/18895#issuecomment-624404573,624404573,
fanquake,2020-05-06 02:06:30,"> does that seem reasonable?\n\n@amitiuttarwar Yea of course. Just wanted to clarify that you weren't both working on the same changes in parallel.",https://github.com/bitcoin/bitcoin/pull/18895#issuecomment-624405490,624405490,
amitiuttarwar,2020-05-06 02:11:07,"@fanquake thanks!\n\nConcept ACK :) will review soon ",https://github.com/bitcoin/bitcoin/pull/18895#issuecomment-624406521,624406521,
naumenkogs,2020-05-07 13:21:05,"Concept ACK. Code looks good, will do ACK when @MarcoFalke comments are addressed.",https://github.com/bitcoin/bitcoin/pull/18895#issuecomment-625251641,625251641,
glozow,2020-05-09 22:04:45,"Sorry for all the force pushes üòÖ. Addressed MarcoFalke's comments and the `mempool_packages.py` error. As mzumsande said, it was due to the `unbroadcast` value changing in between calls (i.e. a transaction completed initial broadcast while the test was running, so a subsequent call with `verbose=True` was inconsistent with before. \n\nWith `unbroadcast` as one of the mempool entry fields, it's p",https://github.com/bitcoin/bitcoin/pull/18895#issuecomment-626241339,626241339,
mzumsande,2020-05-13 00:03:29,"I meant an earlier spot in my comment: The `assert_equal(entry, mempool[x])` in L92 can fail because \n`mempool = self.nodes[0].getrawmempool(True)` and \n`entry = self.nodes[0].getmempoolentry(x)` \ncan have inconsistent unbroadcast flags if we haven't waited before calling `getrawmempool` the first time.",https://github.com/bitcoin/bitcoin/pull/18895#issuecomment-627663719,627663719,
glozow,2020-05-13 00:40:54,"> I meant an earlier spot in my comment: The `assert_equal(entry, mempool[x])` in L92 \n\n@mzumsande OMG I am so sorry ü§¶‚Äç‚ôÄÔ∏è that should have been obvious. Just fixed it (I hope), waiting to see what travis says. \n\n",https://github.com/bitcoin/bitcoin/pull/18895#issuecomment-627674733,627674733,
DrahtBot,2020-05-13 08:38:26,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #12677 (RPC: Add ancestor{count,size,fees} to listunspent output by luke-jr)\n\nIf you consider this pull request importan",https://github.com/bitcoin/bitcoin/pull/18895#issuecomment-627838670,627838670,
amitiuttarwar,2020-05-19 18:23:13,"also I realized, since this updates some RPC endpoints, should there be release notes added? @MarcoFalke ",https://github.com/bitcoin/bitcoin/pull/18895#issuecomment-630997343,630997343,
MarcoFalke,2020-05-19 18:26:16,"Sure, but I assumed this would be taken care of in the doc pr #18807 ",https://github.com/bitcoin/bitcoin/pull/18895#issuecomment-630998986,630998986,
MarcoFalke,2020-05-20 00:07:00,Review ACK 651f1d816f054cb9c637f8a99c9360bba381ef58,https://github.com/bitcoin/bitcoin/pull/18895#issuecomment-631154732,631154732,
amitiuttarwar,2020-05-21 19:27:39,"ACK 651f1d816f054cb9c637f8a99c9360bba381ef58 üéâ \n\ndouble checked functional tests for possible races around returning `unbroadcast` from the various RPCs. looks like `mempool_packages` is the only one comparing all the fields of the returned object, so your changes have them covered.",https://github.com/bitcoin/bitcoin/pull/18895#issuecomment-632298905,632298905,
MarcoFalke,2020-05-06 16:02:54,"```suggestion\n        if (m_mempool.exists(txid)) {\n```\n\nstyle-nit: (feel free to ignore)\n\nWhen an `if` has an else branch, I generally recommend not using inversion in the condition, just to avoid double negation, which can make code harder to read. Obviously not an issue here, so feel free to ignore.\n\nHowever, while this fights the symptom (unbroadcast txid exists), it doesn't pr",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r420908838,420908838,src/net_processing.cpp
MarcoFalke,2020-05-06 16:04:46,"style-nit: instead of a ""blind cast"" I slightly prefer the one that enables compile time checks and fails compilation in case it should be impossible to cast without loss of precision.\n\n```suggestion\n    ret.pushKV(""unbroadcastsize"", int64_t{pool.GetUnbroadcastTxs().size())};\n```",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r420910109,420910109,src/rpc/blockchain.cpp
glozow,2020-05-06 18:37:28,"Good point about inversion on an if+else, I'll rearrange to make it more clear.\n\nYeah, I think it'd make sense to add this check to `AddUnbroadcastTx` ([here](https://github.com/bitcoin/bitcoin/blob/7bcc42b4035b878719d13201286e322989b415c5/src/txmempool.h#L705)).\nApart from making sure we only add txids that exist in the mempool to unbroadcast, I think this sanity check helps if a tx was rem",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r421008446,421008446,src/net_processing.cpp
MarcoFalke,2020-05-06 18:47:28,"Jup, better to do the check in two places than in one. This needs a mempool lookup, but the cost doesn't seem too much, as this is only done every 10 minutes or when a new transaction is added to the mempool anyway.",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r421014509,421014509,src/net_processing.cpp
glozow,2020-05-09 18:31:05,"That makes sense. The only issue is it wouldn't be consistent with all the other casts throughout the file. I'm not sure what's the best practice: let this one be inconsistent, change all of them in this PR, or change all of them in a followup PR? ",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r422529987,422529987,src/rpc/blockchain.cpp
MarcoFalke,2020-05-09 18:41:54,"The guideline is that new code should follow best practices, old code can stay as is.",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r422531192,422531192,src/rpc/blockchain.cpp
amitiuttarwar,2020-05-09 18:44:31,"it's tough to aim for consistency in bitcoin bc the project values careful review for any changes (thus refactor PRs are generally only considered if there's a feature being built on top) so generally, we try to improve over time as we touch lines of code. \n\nanother example you'll see is mismatched naming conventions. code that's been touched recently adheres to the best practices, but code th",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r422531489,422531489,src/rpc/blockchain.cpp
glozow,2020-05-09 19:12:52,"Makes sense, thank you!",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r422534493,422534493,src/rpc/blockchain.cpp
MarcoFalke,2020-05-13 12:59:13,"The condition for initial broadcast is not that an inv was sent, but that a getdata was received\n\nI think you can simply replace this with a `self.sync_mempools()` and remove the newly added p2p connection",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r424416374,424416374,test/functional/mempool_packages.py
MarcoFalke,2020-05-13 13:03:30,"```suggestion\n    ret.pushKV(""unbroadcastsize"", int64_t{pool.GetUnbroadcastTxs().size())};\n```\n\nThis does the same thing, but has additional compile time checks that fail compilation when the conversion comes with a loss of precision.",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r424419308,424419308,src/rpc/blockchain.cpp
glozow,2020-05-13 20:02:12,"> I think you can simply replace this with a self.sync_mempools() and remove the newly added p2p connection\n\nI've tried this, but it times out: `AssertionError: Mempool sync timed out after 60s`\n\n> The condition for initial broadcast is not that an inv was sent, but that a getdata was received\n\nOh this is my misunderstanding. I can try to have a `wait_until` that counts the `msg_getdat",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r424697810,424697810,test/functional/mempool_packages.py
MarcoFalke,2020-05-13 20:07:59,"Oh, I missed that the second node has a stricter `limitancestorcount` set.\n\nIn that case your suggestion to wait for the getdata makes most sense, I guess.\n\nSo \n\n* register callback in mininode to send getdata when inv arrives\n* wait for invs\n* sync_with_ping (to flush all buffers)\n\nshould work",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r424700892,424700892,test/functional/mempool_packages.py
glozow,2020-05-13 20:08:36,"Really sorry about this - I got a compilation error: \n```\nrpc/blockchain.cpp:1394:43: error: non-constant-expression cannot be narrowed from type 'std::__1::set<uint256, std::__1::less<uint256>,\n      std::__1::allocator<uint256> >::size_type' (aka 'unsigned long') to 'int64_t' (aka 'long long') in initializer list [-Wc++11-narrowing]\n    ret.pushKV(""unbroadcastsize"", int64_t{pool.GetUnbro",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r424701189,424701189,src/rpc/blockchain.cpp
glozow,2020-05-13 20:10:22,"Thank you, this is super helpful! üôè ",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r424702151,424702151,test/functional/mempool_packages.py
MarcoFalke,2020-05-13 20:21:19,"Oh, I guess you can use this signature `bool pushKV(const std::string&, uint64_t)`. It should already be selected by default, so I don't see why we want to cast in the first place.\n\nI think you can either:\n\n* Remove the cast\n* Select the signature for `uint64_t`",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r424708021,424708021,src/rpc/blockchain.cpp
MarcoFalke,2020-05-14 23:56:55,"You still need to provide the callback. The default one does not reply with a getdata. See\n\n```py\nclass P2PTxInvStore(P2PInterface):\n    """"""A P2PInterface which stores a count of how many times each txid has been announced.""""""\n    def __init__(self):\n        super().__init__()\n        self.tx_invs_received = defaultdict(int)\n\n    def on_inv(self, message):\n        # Store how m",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r425492787,425492787,test/functional/mempool_packages.py
MarcoFalke,2020-05-14 23:57:09,You can run `git grep -W 'def on_inv'` to find examples on how to do that.,https://github.com/bitcoin/bitcoin/pull/18895#discussion_r425492838,425492838,test/functional/mempool_packages.py
MarcoFalke,2020-05-15 00:36:32,Hmm. Looks like the tests passed on travis. I am still unsure why.,https://github.com/bitcoin/bitcoin/pull/18895#discussion_r425503768,425503768,test/functional/mempool_packages.py
glozow,2020-05-15 01:12:09,"Gah, I made a super dumb assumption that it would automatically call `P2PInterface`'s `on_inv` (which responds with the `getdata`) since it inherits from it. I'm working on that right now. Not sure why travis passed haha\n",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r425512778,425512778,test/functional/mempool_packages.py
MarcoFalke,2020-05-15 12:19:24,"I reset travis, so that it properly shows failure. :sweat_smile: ",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r425762457,425762457,test/functional/mempool_packages.py
glozow,2020-05-15 23:48:40,I spoke with @amitiuttarwar and decided to just have `P2PTxInvStore` call `super().on_inv` since she's planning on doing it anyway (in [#18807](https://github.com/bitcoin/bitcoin/pull/18807/files#diff-a77567bbc57dc1bbc033560e5cdd3b7dR647)). We've agreed to resolve any conflicts that happen depending on which gets merged first.,https://github.com/bitcoin/bitcoin/pull/18895#discussion_r426091135,426091135,test/functional/mempool_packages.py
MarcoFalke,2020-05-16 16:26:31,"```suggestion\n        self.wait_until(lambda: set(self.get_invs()) == set(txns))\n```\n\n* self.wait_until because we need the scaling factor\n* self.get_inv because we need to take the lock\n* set because we want to check the txids",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r426168298,426168298,test/functional/test_framework/mininode.py
glozow,2020-05-17 18:43:32,"This makes sense. \n\nIt seems like a `P2PInterface`s don't have a `self.wait_until` function. I get a `object has no attribute 'wait_until'` error. The classes in `mininode.py` use `wait_until` with the `mininode_lock`.  I'm not familiar with what you mean by scaling factor, but is there something else I could do?",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r426291819,426291819,test/functional/test_framework/mininode.py
MarcoFalke,2020-05-17 19:33:43,"Are you sure you are on current master? I am seeing this function locally:\n\n```\n$ git grep 'def wait_until'\ntest/functional/test_framework/mininode.py:    def wait_until(self, test_function, timeout):\n",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r426296267,426296267,test/functional/test_framework/mininode.py
amitiuttarwar,2020-05-19 01:09:22,"when compiling, I'm seeing `warning: 'const' type qualifier on return type has no effect [-Wignored-qualifiers]`\n\njust took a little dive down the c++ rabbit hole.. I think declaring the return type as a const is meaningless if you are returning a built-in type by value. so in this example, the `const` wouldn't be enforcing anything on the caller. ",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r426973619,426973619,src/txmempool.h
amitiuttarwar,2020-05-19 01:22:30,accidental extra whitespace? ,https://github.com/bitcoin/bitcoin/pull/18895#discussion_r426977043,426977043,test/functional/mempool_packages.py
amitiuttarwar,2020-05-19 01:27:57,"consider updating part in parentheses to: `(initial broadcast not yet confirmed)`\n\nits a bit more accurate, but hard for me to evaluate clarity for end users üòõ \n",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r426978409,426978409,src/rpc/blockchain.cpp
amitiuttarwar,2020-05-19 01:32:32,"same as above, consider updating description. \n\nalso `unbroadcastcount` might make more sense than `unbroadcastsize`?",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r426979473,426979473,src/rpc/blockchain.cpp
amitiuttarwar,2020-05-19 01:56:58,"something to consider- to me, the naming `IsUnbroadcast` feels more natural. A transaction is in the mempool, but it might also be in the unbroadcast state. \n\nbut `InUnbroadcast` is still accurate in terms of implementation, since they are stored in the set of `m_unbroadcast_txids`.\n\nso might just be a preference thing. please feel free not to update :) ",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r426985995,426985995,src/txmempool.h
amitiuttarwar,2020-05-19 05:03:13,"hm, is there a reason this is a [doxygen comment](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-doxygen-compatible-comments)? I'm not sure what would happen, but I suspect you want normal `//` notation here\n",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r427031724,427031724,src/txmempool.h
amitiuttarwar,2020-05-19 05:31:13,"nit: pull out the description of the function from the implementation & description for readability \n\n```suggestion\n    # Waits for the txns (txids) to complete initial broadcast.\n    # The mempool should mark unbroadcast=False for these transactions.\n    def wait_for_broadcast(self, txns):\n        # Wait until invs have been received (and getdatas sent) for each txid.\n        self.w",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r427039165,427039165,test/functional/test_framework/mininode.py
glozow,2020-05-19 18:58:09,üòÖ I'll delete this,https://github.com/bitcoin/bitcoin/pull/18895#discussion_r427530299,427530299,test/functional/mempool_packages.py
MarcoFalke,2020-05-19 19:22:48,"```suggestion\n        self.wait_until(lambda: set(self.get_invs()) == set([int(tx, 16) for tx in txns]), timeout)\n```\n\nI think it makes sense to define a default value of `timeout=60` for the wait_for_broadcast member function. This way, callers can decide to overwrite it if needed.",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r427544333,427544333,test/functional/test_framework/mininode.py
glozow,2020-05-19 20:24:25,"Ok after over-thinking this for a few hours üòÇ I'm going to change it to `IsUnbroadcastTx` which looks pretty similar to the others and hopefully feels natural.\nI definitely think `entry.IsUnbroadcast()` would be ideal if it were a mempool entry method (I didn't do it that way because `m_unbroadcast_txids` belongs to the mempool). I just don't want it to sound like I'm saying the mempool is unbro",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r427577645,427577645,src/txmempool.h
glozow,2020-05-19 21:26:23,"Good point, gonna follow [this PEP-8 guideline](https://www.python.org/dev/peps/pep-0008/#documentation-strings)",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r427609851,427609851,test/functional/test_framework/mininode.py
jonatack,2020-05-22 07:45:54,"> I suspect you want normal `//` notation here\n\nAgree, perhaps can be touched up in #18807",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r429094005,429094005,src/txmempool.h
jonatack,2020-05-22 07:47:04,This can be doxygen like the neighbouring functions. Perhaps touch up in #18807.,https://github.com/bitcoin/bitcoin/pull/18895#discussion_r429094526,429094526,src/txmempool.h
harding,2020-05-23 10:52:07,"Suggested rephrasing: s/confirmed/acknowledged/.  I think ""confirmed"" might confuse the user into thinking we're referring to the transaction being included in a block.  Perhaps ""acknowledged"" would be less confusing, or if a few more words are ok, ""(initial broadcast not yet acknowledged by any peers)"".  Maybe @amitiuttarwar can squeeze this in #18807 (if not, I can open a separate PR).",https://github.com/bitcoin/bitcoin/pull/18895#discussion_r429535717,429535717,src/rpc/blockchain.cpp
amitiuttarwar,2020-05-23 17:56:43,great suggestion. adding to #18807 ,https://github.com/bitcoin/bitcoin/pull/18895#discussion_r429565592,429565592,src/rpc/blockchain.cpp
amitiuttarwar,2020-05-23 20:07:04,done,https://github.com/bitcoin/bitcoin/pull/18895#discussion_r429574471,429574471,src/txmempool.h
amitiuttarwar,2020-05-23 20:07:09,done,https://github.com/bitcoin/bitcoin/pull/18895#discussion_r429574475,429574475,src/rpc/blockchain.cpp
