[
  {
    "sha": "d16006960443c2efe37c896e46edae9dca86c57d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMTYwMDY5NjA0NDNjMmVmZTM3Yzg5NmU0NmVkYWU5ZGNhODZjNTdk",
    "commit": {
      "author": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2020-05-02T00:22:59Z"
      },
      "committer": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2020-05-18T00:52:11Z"
      },
      "message": "[wallet] remove nLastResend logic\n\nremove nLastResend because it's unnecessary now that rebroadcasts always happen at least 12 hours later",
      "tree": {
        "sha": "cf8da9c04116cfc2b599a2b193c978ab9c6ba0a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf8da9c04116cfc2b599a2b193c978ab9c6ba0a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d16006960443c2efe37c896e46edae9dca86c57d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d16006960443c2efe37c896e46edae9dca86c57d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d16006960443c2efe37c896e46edae9dca86c57d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d16006960443c2efe37c896e46edae9dca86c57d/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc5333d31f280e09bb1e8cdacfbe842f4ab9e69b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc5333d31f280e09bb1e8cdacfbe842f4ab9e69b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc5333d31f280e09bb1e8cdacfbe842f4ab9e69b"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 0,
      "deletions": 5
    },
    "files": [
      {
        "sha": "e1e8263ee1f55e5ca9716f95e991d3a565d57fd8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d16006960443c2efe37c896e46edae9dca86c57d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d16006960443c2efe37c896e46edae9dca86c57d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d16006960443c2efe37c896e46edae9dca86c57d",
        "patch": "@@ -1982,10 +1982,6 @@ void CWallet::ResendWalletTransactions()\n     nNextResend = GetTime() + (12 * 60 * 60) + GetRand(24 * 60 * 60);\n     if (fFirst) return;\n \n-    // Only do it if there's been a new block since last time\n-    if (m_best_block_time < nLastResend) return;\n-    nLastResend = GetTime();\n-\n     int submitted_tx_count = 0;\n \n     { // cs_wallet scope"
      },
      {
        "sha": "9d312e8ee5dc457988bdf0c118a94d406a91cbe6",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d16006960443c2efe37c896e46edae9dca86c57d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d16006960443c2efe37c896e46edae9dca86c57d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d16006960443c2efe37c896e46edae9dca86c57d",
        "patch": "@@ -641,7 +641,6 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     int nWalletMaxVersion GUARDED_BY(cs_wallet) = FEATURE_BASE;\n \n     int64_t nNextResend = 0;\n-    int64_t nLastResend = 0;\n     bool fBroadcastTransactions = false;\n     // Local time that the tip block was received. Used to schedule wallet rebroadcasts.\n     std::atomic<int64_t> m_best_block_time {0};"
      }
    ]
  },
  {
    "sha": "a7ebe48b94c5a9195c8eabd193204c499cb4bfdb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphN2ViZTQ4Yjk0YzVhOTE5NWM4ZWFiZDE5MzIwNGM0OTljYjRiZmRi",
    "commit": {
      "author": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2020-04-29T21:19:37Z"
      },
      "committer": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2020-05-19T21:23:13Z"
      },
      "message": "[rpc] add unbroadcast info to mempool entries and getmempoolinfo\n\n- expose info about number of txns in unbroadcast set and whether a mempool entry's tx has passed initial broadcast\n- makes rpcs more informative and allows for more explicit testing, eg tracking if tx is in unbroadcast set\nbefore and after originating node connects to peers (adds this in mempool_unbroadcast.py)\n- adds mempool method IsUnbroadcastTx to query for tx inclusion in  mempool's unbroadcast set",
      "tree": {
        "sha": "86fb5ff2d32de4199dc1bbd09838e516914241f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/86fb5ff2d32de4199dc1bbd09838e516914241f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7ebe48b94c5a9195c8eabd193204c499cb4bfdb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7ebe48b94c5a9195c8eabd193204c499cb4bfdb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a7ebe48b94c5a9195c8eabd193204c499cb4bfdb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7ebe48b94c5a9195c8eabd193204c499cb4bfdb/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d16006960443c2efe37c896e46edae9dca86c57d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d16006960443c2efe37c896e46edae9dca86c57d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d16006960443c2efe37c896e46edae9dca86c57d"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 26,
      "deletions": 1
    },
    "files": [
      {
        "sha": "22968c613c8f69e3ffed3e325a6653e55937aaa2",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7ebe48b94c5a9195c8eabd193204c499cb4bfdb/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7ebe48b94c5a9195c8eabd193204c499cb4bfdb/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=a7ebe48b94c5a9195c8eabd193204c499cb4bfdb",
        "patch": "@@ -399,6 +399,7 @@ static std::vector<RPCResult> MempoolEntryDescription() { return {\n     RPCResult{RPCResult::Type::ARR, \"spentby\", \"unconfirmed transactions spending outputs from this transaction\",\n         {RPCResult{RPCResult::Type::STR_HEX, \"transactionid\", \"child transaction id\"}}},\n     RPCResult{RPCResult::Type::BOOL, \"bip125-replaceable\", \"Whether this transaction could be replaced due to BIP125 (replace-by-fee)\"},\n+    RPCResult{RPCResult::Type::BOOL, \"unbroadcast\", \"Whether this transaction is currently unbroadcast (initial broadcast not yet confirmed)\"},\n };}\n \n static void entryToJSON(const CTxMemPool& pool, UniValue& info, const CTxMemPoolEntry& e) EXCLUSIVE_LOCKS_REQUIRED(pool.cs)\n@@ -460,6 +461,7 @@ static void entryToJSON(const CTxMemPool& pool, UniValue& info, const CTxMemPool\n     }\n \n     info.pushKV(\"bip125-replaceable\", rbfStatus);\n+    info.pushKV(\"unbroadcast\", pool.IsUnbroadcastTx(tx.GetHash()));\n }\n \n UniValue MempoolToJSON(const CTxMemPool& pool, bool verbose)\n@@ -1389,7 +1391,7 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"maxmempool\", (int64_t) maxmempool);\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n-\n+    ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n     return ret;\n }\n \n@@ -1408,6 +1410,7 @@ static UniValue getmempoolinfo(const JSONRPCRequest& request)\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n                     }},\n                 RPCExamples{\n                     HelpExampleCli(\"getmempoolinfo\", \"\")"
      },
      {
        "sha": "0f3ae3630c60bf7f91c39a91f3df9e84ee36788c",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7ebe48b94c5a9195c8eabd193204c499cb4bfdb/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7ebe48b94c5a9195c8eabd193204c499cb4bfdb/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=a7ebe48b94c5a9195c8eabd193204c499cb4bfdb",
        "patch": "@@ -716,6 +716,12 @@ class CTxMemPool\n         return m_unbroadcast_txids;\n     }\n \n+    // Returns if a txid is in the unbroadcast set\n+    bool IsUnbroadcastTx(const uint256& txid) const {\n+        LOCK(cs);\n+        return (m_unbroadcast_txids.count(txid) != 0);\n+    }\n+\n private:\n     /** UpdateForDescendants is used by UpdateTransactionsFromBlock to update\n      *  the descendants for a single transaction that has been added to the"
      },
      {
        "sha": "edd1e14725a3beb7dc6f85e019c8e491a43e1310",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7ebe48b94c5a9195c8eabd193204c499cb4bfdb/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7ebe48b94c5a9195c8eabd193204c499cb4bfdb/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=a7ebe48b94c5a9195c8eabd193204c499cb4bfdb",
        "patch": "@@ -212,6 +212,10 @@ def run_test(self):\n         for tx in chain[:MAX_ANCESTORS_CUSTOM]:\n             assert tx in mempool1\n         # TODO: more detailed check of node1's mempool (fees etc.)\n+        # check transaction unbroadcast info (should be false if in both mempools)\n+        mempool = self.nodes[0].getrawmempool(True)\n+        for tx in mempool:\n+            assert_equal(mempool[tx]['unbroadcast'], False)\n \n         # TODO: test ancestor size limits\n "
      },
      {
        "sha": "dedf5b8a4764130ec5d6a5fa39118744afe426e8",
        "filename": "test/functional/mempool_unbroadcast.py",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7ebe48b94c5a9195c8eabd193204c499cb4bfdb/test/functional/mempool_unbroadcast.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7ebe48b94c5a9195c8eabd193204c499cb4bfdb/test/functional/mempool_unbroadcast.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_unbroadcast.py?ref=a7ebe48b94c5a9195c8eabd193204c499cb4bfdb",
        "patch": "@@ -53,6 +53,13 @@ def test_broadcast(self):\n         txFS = node.signrawtransactionwithwallet(txF[\"hex\"])\n         rpc_tx_hsh = node.sendrawtransaction(txFS[\"hex\"])\n \n+        # check transactions are in unbroadcast using rpc\n+        mempoolinfo = self.nodes[0].getmempoolinfo()\n+        assert_equal(mempoolinfo['unbroadcastcount'], 2)\n+        mempool = self.nodes[0].getrawmempool(True)\n+        for tx in mempool:\n+            assert_equal(mempool[tx]['unbroadcast'], True)\n+\n         # check that second node doesn't have these two txns\n         mempool = self.nodes[1].getrawmempool()\n         assert rpc_tx_hsh not in mempool\n@@ -71,6 +78,11 @@ def test_broadcast(self):\n         assert rpc_tx_hsh in mempool\n         assert wallet_tx_hsh in mempool\n \n+        # check that transactions are no longer in first node's unbroadcast set\n+        mempool = self.nodes[0].getrawmempool(True)\n+        for tx in mempool:\n+            assert_equal(mempool[tx]['unbroadcast'], False)\n+\n         self.log.info(\"Add another connection & ensure transactions aren't broadcast again\")\n \n         conn = node.add_p2p_connection(P2PTxInvStore())"
      }
    ]
  },
  {
    "sha": "9d3f7eb9860254eb787ebe2734fd6a26bcf365c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDNmN2ViOTg2MDI1NGViNzg3ZWJlMjczNGZkNmEyNmJjZjM2NWMx",
    "commit": {
      "author": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2020-05-01T22:48:23Z"
      },
      "committer": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2020-05-19T21:23:19Z"
      },
      "message": "[mempool] sanity check that all unbroadcast txns are in mempool\n\n- before reattempting broadcast for unbroadcast txns, check they are in mempool and remove if not\n- this protects from memory leaks and network spam just in case unbroadcast set (incorrectly) has extra txns\n- check that tx is in mempool before adding to unbroadcast set to try to prevent this from happening",
      "tree": {
        "sha": "c1acea6568f9dd071859a4af0570984920157f81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c1acea6568f9dd071859a4af0570984920157f81"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d3f7eb9860254eb787ebe2734fd6a26bcf365c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d3f7eb9860254eb787ebe2734fd6a26bcf365c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d3f7eb9860254eb787ebe2734fd6a26bcf365c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d3f7eb9860254eb787ebe2734fd6a26bcf365c1/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7ebe48b94c5a9195c8eabd193204c499cb4bfdb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7ebe48b94c5a9195c8eabd193204c499cb4bfdb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7ebe48b94c5a9195c8eabd193204c499cb4bfdb"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 10,
      "deletions": 2
    },
    "files": [
      {
        "sha": "817ec1d79bd200e3ca78faf0de9374549f46c80d",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d3f7eb9860254eb787ebe2734fd6a26bcf365c1/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d3f7eb9860254eb787ebe2734fd6a26bcf365c1/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=9d3f7eb9860254eb787ebe2734fd6a26bcf365c1",
        "patch": "@@ -819,7 +819,12 @@ void PeerLogicValidation::ReattemptInitialBroadcast(CScheduler& scheduler) const\n     std::set<uint256> unbroadcast_txids = m_mempool.GetUnbroadcastTxs();\n \n     for (const uint256& txid : unbroadcast_txids) {\n-        RelayTransaction(txid, *connman);\n+        // Sanity check: all unbroadcast txns should exist in the mempool\n+        if (m_mempool.exists(txid)) {\n+            RelayTransaction(txid, *connman);\n+        } else {\n+            m_mempool.RemoveUnbroadcastTx(txid, true);\n+        }\n     }\n \n     // schedule next run for 10-15 minutes in the future"
      },
      {
        "sha": "4568eb928d9f687cc67e1bb642797b9982aa4a0f",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d3f7eb9860254eb787ebe2734fd6a26bcf365c1/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d3f7eb9860254eb787ebe2734fd6a26bcf365c1/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=9d3f7eb9860254eb787ebe2734fd6a26bcf365c1",
        "patch": "@@ -704,7 +704,10 @@ class CTxMemPool\n     /** Adds a transaction to the unbroadcast set */\n     void AddUnbroadcastTx(const uint256& txid) {\n         LOCK(cs);\n-        m_unbroadcast_txids.insert(txid);\n+        /** Sanity Check: the transaction should also be in the mempool */\n+        if (exists(txid)) {\n+            m_unbroadcast_txids.insert(txid);\n+        }\n     }\n \n     /** Removes a transaction from the unbroadcast set */"
      }
    ]
  },
  {
    "sha": "651f1d816f054cb9c637f8a99c9360bba381ef58",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTFmMWQ4MTZmMDU0Y2I5YzYzN2Y4YTk5YzkzNjBiYmEzODFlZjU4",
    "commit": {
      "author": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2020-05-09T20:42:15Z"
      },
      "committer": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2020-05-19T21:24:27Z"
      },
      "message": "[test] wait for inital broadcast before comparing mempool entries\n\n- mempool entry 'unbroadcast' field changes when tx passes initial broadcast (receive getdata),\nso anytime you compare mempool entries as a whole, you must wait for all broadcasts to complete\n('unbroadcast' = False) otherwise the state may change in between calls\n- update P2PTxInvStore to send msg_getdata for invs and add functionality to wait for a list\nof txids to complete initial broadcast\n- make mempool_packages.py wait because it compares entries using getrawmempool and\ngetmempoolentry",
      "tree": {
        "sha": "9f3432f5c419b57cefe4c09c708808bf9fd50929",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f3432f5c419b57cefe4c09c708808bf9fd50929"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/651f1d816f054cb9c637f8a99c9360bba381ef58",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/651f1d816f054cb9c637f8a99c9360bba381ef58",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/651f1d816f054cb9c637f8a99c9360bba381ef58",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/651f1d816f054cb9c637f8a99c9360bba381ef58/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d3f7eb9860254eb787ebe2734fd6a26bcf365c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d3f7eb9860254eb787ebe2734fd6a26bcf365c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d3f7eb9860254eb787ebe2734fd6a26bcf365c1"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 16,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5b7216b253989eca6eb7871a9d1a2f8f73b30088",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/651f1d816f054cb9c637f8a99c9360bba381ef58/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/651f1d816f054cb9c637f8a99c9360bba381ef58/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=651f1d816f054cb9c637f8a99c9360bba381ef58",
        "patch": "@@ -7,6 +7,7 @@\n from decimal import Decimal\n \n from test_framework.messages import COIN\n+from test_framework.mininode import P2PTxInvStore\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -58,6 +59,7 @@ def chain_transaction(self, node, parent_txid, vout, value, fee, num_outputs):\n \n     def run_test(self):\n         # Mine some blocks and have them mature.\n+        self.nodes[0].add_p2p_connection(P2PTxInvStore()) # keep track of invs\n         self.nodes[0].generate(101)\n         utxo = self.nodes[0].listunspent(10)\n         txid = utxo[0]['txid']\n@@ -72,6 +74,10 @@ def run_test(self):\n             value = sent_value\n             chain.append(txid)\n \n+        # Wait until mempool transactions have passed initial broadcast (sent inv and received getdata)\n+        # Otherwise, getrawmempool may be inconsistent with getmempoolentry if unbroadcast changes in between\n+        self.nodes[0].p2p.wait_for_broadcast(chain)\n+\n         # Check mempool has MAX_ANCESTORS transactions in it, and descendant and ancestor\n         # count and fees should look correct\n         mempool = self.nodes[0].getrawmempool(True)"
      },
      {
        "sha": "28c6c175dbf8b718bf4474d5d29672c38c763f57",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/651f1d816f054cb9c637f8a99c9360bba381ef58/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/651f1d816f054cb9c637f8a99c9360bba381ef58/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=651f1d816f054cb9c637f8a99c9360bba381ef58",
        "patch": "@@ -645,6 +645,7 @@ def __init__(self):\n         self.tx_invs_received = defaultdict(int)\n \n     def on_inv(self, message):\n+        super().on_inv(message) # Send getdata in response.\n         # Store how many times invs have been received for each tx.\n         for i in message.inv:\n             if i.type == MSG_TX:\n@@ -654,3 +655,12 @@ def on_inv(self, message):\n     def get_invs(self):\n         with mininode_lock:\n             return list(self.tx_invs_received.keys())\n+\n+    def wait_for_broadcast(self, txns, timeout=60):\n+        \"\"\"Waits for the txns (list of txids) to complete initial broadcast.\n+        The mempool should mark unbroadcast=False for these transactions.\n+        \"\"\"\n+        # Wait until invs have been received (and getdatas sent) for each txid.\n+        self.wait_until(lambda: set(self.get_invs()) == set([int(tx, 16) for tx in txns]), timeout)\n+        # Flush messages and wait for the getdatas to be processed\n+        self.sync_with_ping()"
      }
    ]
  }
]