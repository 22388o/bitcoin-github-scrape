jgarzik,2015-04-12T15:31:26Z,"lightly tested ACK\n\nThanks for doing this.  I coded this a while ago, then set it aside.  Your version, with registration, is cleaner.\n",https://github.com/bitcoin/bitcoin/pull/5994#issuecomment-92081400,92081400,
jonasschnelli,2015-04-13T13:06:53Z,fixed @Diapolo's nits.\n,https://github.com/bitcoin/bitcoin/pull/5994#issuecomment-92344590,92344590,
jtimon,2015-04-14T11:25:13Z,"Concept ack. \nGiven that you're touching their interfaces already, could CreateNewBlockWithScript() ProcessBlockFound(), BitcoinMiner() and GenerateBitcoins() take `const CChainParams& chainparams` as parameter?\n",https://github.com/bitcoin/bitcoin/pull/5994#issuecomment-92775415,92775415,
jonasschnelli,2015-04-14T12:16:59Z,Added a commit on top to help improve global state independence by passing `CChainParams` for the touched functions.\n,https://github.com/bitcoin/bitcoin/pull/5994#issuecomment-92788143,92788143,
jtimon,2015-04-14T13:19:40Z,"ut ACK, it is very nice to decouple miner.o from the wallet.\n",https://github.com/bitcoin/bitcoin/pull/5994#issuecomment-92824909,92824909,
jtimon,2015-04-16T01:09:42Z,Needs rebase\n,https://github.com/bitcoin/bitcoin/pull/5994#issuecomment-93610000,93610000,
jonasschnelli,2015-04-16T07:36:58Z,Rebased and squashed [squashme] commit.\n,https://github.com/bitcoin/bitcoin/pull/5994#issuecomment-93666918,93666918,
jtimon,2015-04-16T08:50:12Z,"I would also squash the second commit, leaving the note in the commit descrption. Specially, you never want to create CreateNewBlockWithScript.\nIn any case, minor nit, re-utAck.\n",https://github.com/bitcoin/bitcoin/pull/5994#issuecomment-93681185,93681185,
jonasschnelli,2015-04-16T08:52:47Z,Agreed. Squashed.\n,https://github.com/bitcoin/bitcoin/pull/5994#issuecomment-93681737,93681737,
jonasschnelli,2015-04-29T12:24:51Z,"Updated.\nDecoupled wallet (over signaling) from miner and rpcmining commands.\nIt still uses signaling to allow different wallet/pubscript-generation implementations, though, mining without pubScript providing listener will generate a error and stops mining.\n\nNow it reserves and keeps a key when calling `setgenerate` or generating over cmd arg `gen` (same key for all generated blocks).\n",https://github.com/bitcoin/bitcoin/pull/5994#issuecomment-97408182,97408182,
jtimon,2015-04-30T11:17:53Z,Travis is failing for the build without wallet: https://travis-ci.org/bitcoin/bitcoin/jobs/60528797#L1557\n,https://github.com/bitcoin/bitcoin/pull/5994#issuecomment-97743001,97743001,
jonasschnelli,2015-04-30T11:52:08Z,@jtimon: Thanks for the report. Fixed.\n,https://github.com/bitcoin/bitcoin/pull/5994#issuecomment-97747636,97747636,
jonasschnelli,2015-04-30T12:23:48Z,"Now the miner is completely decoupled from the wallet.\nThere are no more `#ifdef ENABLE_WALLET` checks (for mining).\nThe only check is during runtime if there was a listening device who could provide a `CScript` over the signal `ScriptForMining()`.\n\nIf one tries to use `-gen` without a wallet compiled in or enabled, it then will throw an exception during init phase. Current master would just i",https://github.com/bitcoin/bitcoin/pull/5994#issuecomment-97753055,97753055,
jonasschnelli,2015-05-19T11:30:38Z,Rebased.\nSeeks testers to escape the rebase hamster wheel.\n,https://github.com/bitcoin/bitcoin/pull/5994#issuecomment-103450963,103450963,
Diapolo,2015-05-19T12:30:55Z,"Can you extend or explain in some more details, how this pull achieves, what it sais in the commit-msg title? Perhaps in the commit-msg itself.\n",https://github.com/bitcoin/bitcoin/pull/5994#issuecomment-103469233,103469233,
jonasschnelli,2015-05-19T13:16:34Z,@Diapolo: this PR is a step forward in separating the wallet from the core which can lead to multiple benefits. This would be required to allow a flexible interface (basic modularity) for adding/switching bitcoin-core wallets.\n,https://github.com/bitcoin/bitcoin/pull/5994#issuecomment-103483044,103483044,
sipa,2015-06-14T14:07:45Z,Needs rebase.\n,https://github.com/bitcoin/bitcoin/pull/5994#issuecomment-111828921,111828921,
jonasschnelli,2015-06-15T11:44:12Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/5994#issuecomment-112030492,112030492,
sipa,2015-06-15T11:55:45Z,Untested ACK.\n,https://github.com/bitcoin/bitcoin/pull/5994#issuecomment-112032340,112032340,
jtimon,2015-06-15T12:35:41Z,re-untestedACK\n,https://github.com/bitcoin/bitcoin/pull/5994#issuecomment-112049215,112049215,
laanwj,2015-07-01T16:39:12Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/5994#issuecomment-117743157,117743157,
Diapolo,2015-04-12T20:36:14Z,Nit: This seems to have sneaked in?\n,https://github.com/bitcoin/bitcoin/pull/5994#discussion_r28207102,28207102,src/wallet/wallet.cpp
sipa,2015-04-24T09:46:44Z,"I would say this needs to be able to fail (if no wallet is connected), and have the miner code deal with that case. Otherwise you can't really make it independent of the wallet (if it needs to assume a wallet that can provide a script output for mining is present).\n",https://github.com/bitcoin/bitcoin/pull/5994#discussion_r29036731,29036731,src/validationinterface.h
sipa,2015-04-24T09:53:27Z,"I'd rather pass a pointer to chainParams in, and pass that by value to BitcoinMiners. That makes it more obvious to the caller that the argument may be used for a longer time.\n",https://github.com/bitcoin/bitcoin/pull/5994#discussion_r29037153,29037153,src/miner.cpp
sipa,2015-04-24T09:56:16Z,"Ugh, this means you'll never get a key back, even if no block is found. Would it be possible for the wallet to keep track of which keys are currently being used in a map, and when a block is found, look up the key in the map and mark it as kept?\n",https://github.com/bitcoin/bitcoin/pull/5994#discussion_r29037319,29037319,src/wallet/wallet.cpp
jonasschnelli,2015-04-24T09:57:24Z,I think it can fail. If no listening module provides a CScript through signal `ScriptForMining` the miner will continue with a empty script which should result in a unspendable coinbase? But i didn't tested that. Will do.\n,https://github.com/bitcoin/bitcoin/pull/5994#discussion_r29037367,29037367,src/validationinterface.h
sipa,2015-04-24T10:01:06Z,"I would _not_ want to create a block with an unspendable coinbase.\n\nI mean the call should return a boolean, or the resulting script should at least be tested for non-emptiness, and the miner should exit if that is the case.\n",https://github.com/bitcoin/bitcoin/pull/5994#discussion_r29037556,29037556,src/validationinterface.h
jonasschnelli,2015-04-24T11:33:17Z,Wouldn't it be nice if you could use generate() in a non-wallet environment? Regarding RPC test in a post-wallet-split-off world: this could make sense.\n\nIf somone uses the internal miner (which has no productive usage IMO) in a wallet-disable mode he probably uses it for testing only.\n\nI agree with adding a warning to the log. But throwing an error would block testing.\n,https://github.com/bitcoin/bitcoin/pull/5994#discussion_r29041591,29041591,src/validationinterface.h
sipa,2015-04-24T12:35:04Z,"I think the right solution for that is having a trivial not-really-a-wallet\nprovider that explicitly allows you to set the script output to mine to. It\njust looks incorrect to have a provider interface for something, and a\ndefault implementation that results in the least expected result.\n",https://github.com/bitcoin/bitcoin/pull/5994#discussion_r29044518,29044518,src/validationinterface.h
jonasschnelli,2015-04-24T12:44:16Z,Agreed. Maybe it would be most efficient by adding a argument to `generate()` and `setgenerate()` RPC calls where one could provide a output script to mine to?\n\nAdding a validation interface implementation for non-wallet-mining could be over the top.\n,https://github.com/bitcoin/bitcoin/pull/5994#discussion_r29045002,29045002,src/validationinterface.h
sipa,2015-04-24T12:54:00Z,"Yes, generate can just be changed to not need the GetScriptForMining\ninterface. And setgenerate could just be deleted IMHO and replaced with a\nsimple proof of concept Python or C miner in the tree.\n",https://github.com/bitcoin/bitcoin/pull/5994#discussion_r29045501,29045501,src/validationinterface.h
sipa,2015-04-24T12:54:41Z,"I just don't like an interface that can clearly fail, but doesn't have a\nclear way to indicate failure.\n",https://github.com/bitcoin/bitcoin/pull/5994#discussion_r29045546,29045546,src/validationinterface.h
jonasschnelli,2015-04-24T12:55:33Z,"IIRC there was a discussion about this on IRC.\nBut right, i also have a bad feeling with this. Every mining thread reserves and keeps a key straight off.\n\nI think i'm going invest there some time and build a proper way of only keeping keys which where used when a block was created.\n",https://github.com/bitcoin/bitcoin/pull/5994#discussion_r29045603,29045603,src/wallet/wallet.cpp
jonasschnelli,2015-05-08T10:05:01Z,"I think we can leave this as it is now. The only two points where this directly reserves and keeps a key is when starting the internal miner (over `-gen` or `setgenerate`, same script/key for all threads) or when calling generate.\n",https://github.com/bitcoin/bitcoin/pull/5994#discussion_r29929177,29929177,src/wallet/wallet.cpp
Diapolo,2015-05-19T12:26:29Z,Nit: Missing a space after `//`\nEdit: Same nit in rpcmining.cpp.\n,https://github.com/bitcoin/bitcoin/pull/5994#discussion_r30593445,30593445,src/miner.cpp
luke-jr,2015-06-02T02:33:48Z,Are signals guaranteed to be synchronous?\n,https://github.com/bitcoin/bitcoin/pull/5994#discussion_r31489235,31489235,src/miner.cpp
jonasschnelli,2015-06-02T04:09:11Z,Yes. Boost signals2 are always synchronous and in strict order (first register first call).\n,https://github.com/bitcoin/bitcoin/pull/5994#discussion_r31491833,31491833,src/miner.cpp
luke-jr,2015-06-02T05:19:42Z,"Is this guaranteed/by design, or merely an implementation coincidence?\n",https://github.com/bitcoin/bitcoin/pull/5994#discussion_r31493447,31493447,src/miner.cpp
jonasschnelli,2015-06-02T18:41:38Z,IIRC boost signals2 are by design synchronous. Check http://www.boost.org/doc/libs/1_58_0/doc/html/signals2/thread-safety.html\n,https://github.com/bitcoin/bitcoin/pull/5994#discussion_r31556202,31556202,src/miner.cpp
luke-jr,2015-06-02T20:33:56Z,Nothing on that page suggests they are synchronous...?\n,https://github.com/bitcoin/bitcoin/pull/5994#discussion_r31567780,31567780,src/miner.cpp
jonasschnelli,2015-06-03T09:37:21Z,Maybe my backtrace prove (see below) can convince you.\nI can also post a linux gdb backtrace or you could add a `sleep(10) in`void CWallet::GetScriptForMining(CScript &script)`.\n\n![bildschirmfoto 2015-06-03 um 11 34 37](https://cloud.githubusercontent.com/assets/178464/7957020/a55ba08e-09e4-11e5-9170-b41acdc98e71.png)\n,https://github.com/bitcoin/bitcoin/pull/5994#discussion_r31607349,31607349,src/miner.cpp
luke-jr,2015-06-03T18:28:54Z,That's with a current version of Boost. Nothing I can see prevents Boost 1.90 from making it all asynchronous.\n,https://github.com/bitcoin/bitcoin/pull/5994#discussion_r31654186,31654186,src/miner.cpp
sipa,2015-06-03T20:15:46Z,What would asynchronous even mean in this context? You can specify how signal's return values are combined. There is no way to make the execution asynchronous without breaking the API (which returns the combined return value directly).\n,https://github.com/bitcoin/bitcoin/pull/5994#discussion_r31664926,31664926,src/miner.cpp
luke-jr,2015-06-03T20:38:32Z,@sipa That's n/a for void return values. Maybe the solution here is to return the CScript then?\n,https://github.com/bitcoin/bitcoin/pull/5994#discussion_r31667154,31667154,src/miner.cpp
sipa,2015-06-03T20:50:39Z,I think we can very reasonably assume that boost::signals2 will not fundamentally change their design and API in a way that will only remain compatible for void outputs.\n,https://github.com/bitcoin/bitcoin/pull/5994#discussion_r31668320,31668320,src/miner.cpp
jonasschnelli,2015-06-03T22:20:42Z,"@luke-jr: if the signal listener don't provide a script, a exception get thrown at L559. If there are multiple listeners, one listener can detect this by reading out the passed-by-reference `coinbaseScript` (check if it's empty, etc.) and skip the creation/generation of another `CScript` or do some other clever things. IMO this design is acceptable for the internal miner/wallet decoupling. \n",https://github.com/bitcoin/bitcoin/pull/5994#discussion_r31676663,31676663,src/miner.cpp
jonasschnelli,2015-06-15T11:47:01Z,"Directly keeping the reserve key for a generate command is okay. It can result in unused but kept reserve keys if no block has been found during `GenerateBitcoins()` (`generate`, `setgenerate`). But this should be okay, at least after we merge HD features (https://github.com/bitcoin/bitcoin/pull/6265).\nAnd this would fix https://github.com/bitcoin/bitcoin/issues/6268\n",https://github.com/bitcoin/bitcoin/pull/5994#discussion_r32411664,32411664,src/wallet/wallet.cpp
sipa,2015-06-15T11:52:44Z,"Maybe I'm alone with this, but I dislike boost::cref... it seems like a hack to make pass-by-reference work when passing a pointer would work just as well.\n",https://github.com/bitcoin/bitcoin/pull/5994#discussion_r32412006,32412006,src/miner.cpp
Diapolo,2015-06-15T12:57:52Z,So a hack for something that's causes by a limitation in Boost itself? Weird...\n,https://github.com/bitcoin/bitcoin/pull/5994#discussion_r32416236,32416236,src/miner.cpp
laanwj,2015-06-17T06:11:59Z,"Why not make the return argument explicit:\n\n```\nCScript GetScriptForMining();\n```\n\nYes - you'll need to specify a combiner for the return argument, but right now this issue (""what if there are multiple subscribers that return a value"") is hidden.\n",https://github.com/bitcoin/bitcoin/pull/5994#discussion_r32597616,32597616,src/validationinterface.h
laanwj,2015-06-17T06:16:11Z,"As the internal miner is meant for testing only, this simple solution is elegant. I'd prefer not to introduce complex micro-management of keys, unless it's necessary for anything besides the miner. Responsibility for not requesting absurd numbers of scripts can be put with the callers (e.g. the mining threads).\n",https://github.com/bitcoin/bitcoin/pull/5994#discussion_r32597759,32597759,src/wallet/wallet.cpp
laanwj,2015-06-17T06:20:58Z,"Passing a pointer would be fine with me, I don't feel strongly about it. I suppose this will be replaced with C++11 constructs (lambda's?) when the time is there.\n",https://github.com/bitcoin/bitcoin/pull/5994#discussion_r32597940,32597940,src/miner.cpp
jonasschnelli,2015-06-17T06:22:17Z,"I think the current solution is elegant. If multiple subscribers are present, listeners can check the current script value and overwrite or change it. Combining return values (adding a combiner template) would mean to add a logic into the miner to decide, which scripts should be taken if multiple where supplied.\n\nBut sure, this have a downside of the fact, that all non-last signal listeners can'",https://github.com/bitcoin/bitcoin/pull/5994#discussion_r32598048,32598048,src/validationinterface.h
jonasschnelli,2015-06-17T06:24:13Z,I saw that the new scheduler also introduced `boost::cref` and i don't have a strong feeling about it (in both directions). Maybe it's worth fixing both as soon as we switch to c++11?\n,https://github.com/bitcoin/bitcoin/pull/5994#discussion_r32598116,32598116,src/miner.cpp
jtimon,2015-06-17T06:40:06Z,"I don't have a strong opinion either, but I plan to copy whatever is done here for other functions in main.\n",https://github.com/bitcoin/bitcoin/pull/5994#discussion_r32598802,32598802,src/miner.cpp
laanwj,2015-06-17T06:47:04Z,"I tend to disagree that it's the responsibility of the listeners to handle what to do when there are multiple listeners - you may not always have control over in which order they are invoked, and that can result in hard to debug problems.\n\nI'm not sure we even want to have multiple subscribers here, ever? If not, a combiner could simply throw an error if multiple return values are returned.\n",https://github.com/bitcoin/bitcoin/pull/5994#discussion_r32599109,32599109,src/validationinterface.h
jonasschnelli,2015-06-17T06:54:23Z,"Lets say if we support two wallets, we could define which wallet takes the signaling-lead by setting the signal registration order (last signal connect = last signal call).\n\nThrowing an error because both wallets could provide a script for mining seems to be relatively strict. The current solution would allow the 2nd (or upcoming) wallet(s) to decide if he likes to take the lead and overwrite or",https://github.com/bitcoin/bitcoin/pull/5994#discussion_r32599373,32599373,src/validationinterface.h
gavinandresen,2015-06-24T19:46:47Z,"NACK-- reservekey.KeepKey must happen AFTER .GetReservedKey or it is a no-op.\n\nThis works:\n\n```\ndiff --git a/src/wallet/wallet.cpp b/src/wallet/wallet.cpp\nindex 440459f..933b0ec 100644\n--- a/src/wallet/wallet.cpp\n+++ b/src/wallet/wallet.cpp\n@@ -2586,12 +2586,12 @@ void CWallet::UpdatedTransaction(const uint256 &hashTx)\n void CWallet::GetScriptForMining(CScript &script)\n {\n     CReserve",https://github.com/bitcoin/bitcoin/pull/5994#discussion_r33187547,33187547,src/wallet/wallet.cpp
jonasschnelli,2015-06-24T19:57:40Z,Hmmm... Indeed. This was a serious mistake.\nThanks for tracking this down.\nFixed.\n,https://github.com/bitcoin/bitcoin/pull/5994#discussion_r33188627,33188627,src/wallet/wallet.cpp
laanwj,2015-06-30T12:04:30Z,"Why not make CReserveKey (or e.g. CReserveScript) an abstract base class defined outside the wallet, and return that from `CWallet::GetScriptForMining`, so that like now the caller can decide to keep or return it\n\nThis also interacts better with the case where multiple wallets return a script for mining and some have to be discarded. At least with a CReserveKey-like class, these keys will be rec",https://github.com/bitcoin/bitcoin/pull/5994#discussion_r33565065,33565065,src/wallet/wallet.cpp
jonasschnelli,2015-06-30T19:02:02Z,Yes. This current design does not respect the keypool/CReserveKey. Will try a better approach.\n,https://github.com/bitcoin/bitcoin/pull/5994#discussion_r33610573,33610573,src/wallet/wallet.cpp
laanwj,2015-07-01T12:32:40Z,"Note that `Inventory(const uint256 &hash)`, connected to `g_signals.Inventory` does exactly the same thing. As far as I see we can get rid of `UpdateRequestCount` and replace it with that.\n",https://github.com/bitcoin/bitcoin/pull/5994#discussion_r33673391,33673391,src/validationinterface.h
laanwj,2015-07-01T12:33:03Z,Redundant `;`\n,https://github.com/bitcoin/bitcoin/pull/5994#discussion_r33673415,33673415,src/script/script.h
jonasschnelli,2015-07-01T14:07:06Z,Fixed.\n,https://github.com/bitcoin/bitcoin/pull/5994#discussion_r33681246,33681246,src/script/script.h
jonasschnelli,2015-07-01T14:11:08Z,Renamed `UpdateRequestCount` (name does not reflect the purpose of the method) to `ResetRequestCount`.\n,https://github.com/bitcoin/bitcoin/pull/5994#discussion_r33681613,33681613,src/validationinterface.h
