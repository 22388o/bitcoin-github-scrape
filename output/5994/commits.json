[
  {
    "sha": "d0fc10a8444484fabc3702e081ec77473c6c41d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMGZjMTBhODQ0NDQ4NGZhYmMzNzAyZTA4MWVjNzc0NzNjNmM0MWQy",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-04-10T10:49:01Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-30T19:45:46Z"
      },
      "message": "detach wallet from miner",
      "tree": {
        "sha": "0ffc49fc02777804ac6b48480a3fe88b39d81586",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ffc49fc02777804ac6b48480a3fe88b39d81586"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0fc10a8444484fabc3702e081ec77473c6c41d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0fc10a8444484fabc3702e081ec77473c6c41d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d0fc10a8444484fabc3702e081ec77473c6c41d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0fc10a8444484fabc3702e081ec77473c6c41d2/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da77a6f7611f71443914e1c71df1e52468cf507d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da77a6f7611f71443914e1c71df1e52468cf507d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da77a6f7611f71443914e1c71df1e52468cf507d"
      }
    ],
    "stats": {
      "total": 122,
      "additions": 61,
      "deletions": 61
    },
    "files": [
      {
        "sha": "b9510bec9dbf00672c31da6b53c12f8baeea13c8",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0fc10a8444484fabc3702e081ec77473c6c41d2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0fc10a8444484fabc3702e081ec77473c6c41d2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d0fc10a8444484fabc3702e081ec77473c6c41d2",
        "patch": "@@ -156,8 +156,8 @@ void Shutdown()\n #ifdef ENABLE_WALLET\n     if (pwalletMain)\n         pwalletMain->Flush(false);\n-    GenerateBitcoins(false, NULL, 0);\n #endif\n+    GenerateBitcoins(false, 0, Params());\n     StopNode();\n     UnregisterNodeSignals(GetNodeSignals());\n \n@@ -370,10 +370,8 @@ std::string HelpMessage(HelpMessageMode mode)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n         _(\"If <category> is not supplied or if <category> = 1, output all debugging information.\") + _(\"<category> can be:\") + \" \" + debugCategories + \".\");\n-#ifdef ENABLE_WALLET\n     strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), 0));\n     strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), 1));\n-#endif\n     strUsage += HelpMessageOpt(\"-help-debug\", _(\"Show all debugging options (usage: --help -help-debug)\"));\n     strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), 0));\n     strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), 1));\n@@ -1439,11 +1437,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                                          boost::ref(cs_main), boost::cref(pindexBestHeader), nPowTargetSpacing);\n     scheduler.scheduleEvery(f, nPowTargetSpacing);\n \n-#ifdef ENABLE_WALLET\n     // Generate coins in the background\n-    if (pwalletMain)\n-        GenerateBitcoins(GetBoolArg(\"-gen\", false), pwalletMain, GetArg(\"-genproclimit\", 1));\n-#endif\n+    GenerateBitcoins(GetBoolArg(\"-gen\", false), GetArg(\"-genproclimit\", 1), Params());\n \n     // ********************************************************* Step 11: finished\n "
      },
      {
        "sha": "c51c21b8cf4309cc57963a0585b18b4b3b30df72",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 33,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0fc10a8444484fabc3702e081ec77473c6c41d2/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0fc10a8444484fabc3702e081ec77473c6c41d2/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=d0fc10a8444484fabc3702e081ec77473c6c41d2",
        "patch": "@@ -17,9 +17,7 @@\n #include \"timedata.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n-#ifdef ENABLE_WALLET\n-#include \"wallet/wallet.h\"\n-#endif\n+#include \"validationinterface.h\"\n \n #include <boost/thread.hpp>\n #include <boost/tuple/tuple.hpp>\n@@ -362,7 +360,6 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n     pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n }\n \n-#ifdef ENABLE_WALLET\n //////////////////////////////////////////////////////////////////////////////\n //\n // Internal miner\n@@ -401,17 +398,7 @@ bool static ScanHash(const CBlockHeader *pblock, uint32_t& nNonce, uint256 *phas\n     }\n }\n \n-CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey)\n-{\n-    CPubKey pubkey;\n-    if (!reservekey.GetReservedKey(pubkey))\n-        return NULL;\n-\n-    CScript scriptPubKey = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n-    return CreateNewBlock(scriptPubKey);\n-}\n-\n-static bool ProcessBlockFound(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey)\n+static bool ProcessBlockFound(CBlock* pblock, const CChainParams& chainparams)\n {\n     LogPrintf(\"%s\\n\", pblock->ToString());\n     LogPrintf(\"generated %s\\n\", FormatMoney(pblock->vtx[0].vout[0].nValue));\n@@ -423,14 +410,8 @@ static bool ProcessBlockFound(CBlock* pblock, CWallet& wallet, CReserveKey& rese\n             return error(\"BitcoinMiner: generated block is stale\");\n     }\n \n-    // Remove key from key pool\n-    reservekey.KeepKey();\n-\n-    // Track how many getdata requests this block gets\n-    {\n-        LOCK(wallet.cs_wallet);\n-        wallet.mapRequestCount[pblock->GetHash()] = 0;\n-    }\n+    // Inform about the new block\n+    GetMainSignals().BlockFound(*pblock);\n \n     // Process this block the same as if we had received it from another node\n     CValidationState state;\n@@ -440,15 +421,12 @@ static bool ProcessBlockFound(CBlock* pblock, CWallet& wallet, CReserveKey& rese\n     return true;\n }\n \n-void static BitcoinMiner(CWallet *pwallet)\n+void static BitcoinMiner(const CChainParams& chainparams, const CScript& coinbaseScript)\n {\n     LogPrintf(\"BitcoinMiner started\\n\");\n     SetThreadPriority(THREAD_PRIORITY_LOWEST);\n     RenameThread(\"bitcoin-miner\");\n-    const CChainParams& chainparams = Params();\n \n-    // Each thread has its own key and counter\n-    CReserveKey reservekey(pwallet);\n     unsigned int nExtraNonce = 0;\n \n     try {\n@@ -474,7 +452,7 @@ void static BitcoinMiner(CWallet *pwallet)\n             unsigned int nTransactionsUpdatedLast = mempool.GetTransactionsUpdated();\n             CBlockIndex* pindexPrev = chainActive.Tip();\n \n-            auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlockWithKey(reservekey));\n+            auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlock(coinbaseScript));\n             if (!pblocktemplate.get())\n             {\n                 LogPrintf(\"Error in BitcoinMiner: Keypool ran out, please call keypoolrefill before restarting the mining thread\\n\");\n@@ -506,7 +484,7 @@ void static BitcoinMiner(CWallet *pwallet)\n                         SetThreadPriority(THREAD_PRIORITY_NORMAL);\n                         LogPrintf(\"BitcoinMiner:\\n\");\n                         LogPrintf(\"proof-of-work found  \\n  hash: %s  \\ntarget: %s\\n\", hash.GetHex(), hashTarget.GetHex());\n-                        ProcessBlockFound(pblock, *pwallet, reservekey);\n+                        ProcessBlockFound(pblock, chainparams);\n                         SetThreadPriority(THREAD_PRIORITY_LOWEST);\n \n                         // In regression test mode, stop mining after a block is found.\n@@ -551,7 +529,7 @@ void static BitcoinMiner(CWallet *pwallet)\n     }\n }\n \n-void GenerateBitcoins(bool fGenerate, CWallet* pwallet, int nThreads)\n+void GenerateBitcoins(bool fGenerate, int nThreads, const CChainParams& chainparams)\n {\n     static boost::thread_group* minerThreads = NULL;\n \n@@ -573,9 +551,14 @@ void GenerateBitcoins(bool fGenerate, CWallet* pwallet, int nThreads)\n     if (nThreads == 0 || !fGenerate)\n         return;\n \n+    CScript coinbaseScript;\n+    GetMainSignals().ScriptForMining(coinbaseScript);\n+\n+    //throw an error if no script was provided\n+    if (!coinbaseScript.size())\n+        throw std::runtime_error(\"No coinbase script available (mining requires a wallet)\");\n+\n     minerThreads = new boost::thread_group();\n     for (int i = 0; i < nThreads; i++)\n-        minerThreads->create_thread(boost::bind(&BitcoinMiner, pwallet));\n+        minerThreads->create_thread(boost::bind(&BitcoinMiner, boost::cref(chainparams), coinbaseScript));\n }\n-\n-#endif // ENABLE_WALLET"
      },
      {
        "sha": "777a091967d720eeb51a28e264cc4a9f2afb223f",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0fc10a8444484fabc3702e081ec77473c6c41d2/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0fc10a8444484fabc3702e081ec77473c6c41d2/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=d0fc10a8444484fabc3702e081ec77473c6c41d2",
        "patch": "@@ -11,6 +11,7 @@\n #include <stdint.h>\n \n class CBlockIndex;\n+class CChainParams;\n class CReserveKey;\n class CScript;\n class CWallet;\n@@ -24,10 +25,9 @@ struct CBlockTemplate\n };\n \n /** Run the miner threads */\n-void GenerateBitcoins(bool fGenerate, CWallet* pwallet, int nThreads);\n+void GenerateBitcoins(bool fGenerate, int nThreads, const CChainParams& chainparams);\n /** Generate a new block, without valid proof-of-work */\n CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn);\n-CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey);\n /** Modify the extranonce in a block */\n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n void UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);"
      },
      {
        "sha": "3e4071befa53ed36ad571600f630ceda739f605c",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 17,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0fc10a8444484fabc3702e081ec77473c6c41d2/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0fc10a8444484fabc3702e081ec77473c6c41d2/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=d0fc10a8444484fabc3702e081ec77473c6c41d2",
        "patch": "@@ -16,9 +16,6 @@\n #include \"rpcserver.h\"\n #include \"util.h\"\n #include \"validationinterface.h\"\n-#ifdef ENABLE_WALLET\n-#include \"wallet/wallet.h\"\n-#endif\n \n #include <stdint.h>\n \n@@ -92,7 +89,6 @@ UniValue getnetworkhashps(const UniValue& params, bool fHelp)\n     return GetNetworkHashPS(params.size() > 0 ? params[0].get_int() : 120, params.size() > 1 ? params[1].get_int() : -1);\n }\n \n-#ifdef ENABLE_WALLET\n UniValue getgenerate(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n@@ -127,16 +123,20 @@ UniValue generate(const UniValue& params, bool fHelp)\n             + HelpExampleCli(\"generate\", \"11\")\n         );\n \n-    if (pwalletMain == NULL)\n-        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found (disabled)\");\n     if (!Params().MineBlocksOnDemand())\n         throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"This method can only be used on regtest\");\n \n     int nHeightStart = 0;\n     int nHeightEnd = 0;\n     int nHeight = 0;\n     int nGenerate = params[0].get_int();\n-    CReserveKey reservekey(pwalletMain);\n+\n+    CScript coinbaseScript;\n+    GetMainSignals().ScriptForMining(coinbaseScript);\n+\n+    //throw an error if no script was provided\n+    if (!coinbaseScript.size())\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"No coinbase script available (mining requires a wallet)\");\n \n     {   // Don't keep cs_main locked\n         LOCK(cs_main);\n@@ -148,9 +148,9 @@ UniValue generate(const UniValue& params, bool fHelp)\n     UniValue blockHashes(UniValue::VARR);\n     while (nHeight < nHeightEnd)\n     {\n-        auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlockWithKey(reservekey));\n+        auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlock(coinbaseScript));\n         if (!pblocktemplate.get())\n-            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Wallet keypool empty\");\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Couldn't create new block\");\n         CBlock *pblock = &pblocktemplate->block;\n         {\n             LOCK(cs_main);\n@@ -170,7 +170,6 @@ UniValue generate(const UniValue& params, bool fHelp)\n     return blockHashes;\n }\n \n-\n UniValue setgenerate(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n@@ -193,8 +192,6 @@ UniValue setgenerate(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"setgenerate\", \"true, 1\")\n         );\n \n-    if (pwalletMain == NULL)\n-        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found (disabled)\");\n     if (Params().MineBlocksOnDemand())\n         throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Use the generate method instead of setgenerate on this network\");\n \n@@ -212,12 +209,10 @@ UniValue setgenerate(const UniValue& params, bool fHelp)\n \n     mapArgs[\"-gen\"] = (fGenerate ? \"1\" : \"0\");\n     mapArgs [\"-genproclimit\"] = itostr(nGenProcLimit);\n-    GenerateBitcoins(fGenerate, pwalletMain, nGenProcLimit);\n+    GenerateBitcoins(fGenerate, nGenProcLimit, Params());\n \n     return NullUniValue;\n }\n-#endif\n-\n \n UniValue getmininginfo(const UniValue& params, bool fHelp)\n {\n@@ -257,9 +252,7 @@ UniValue getmininginfo(const UniValue& params, bool fHelp)\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n     obj.push_back(Pair(\"testnet\",          Params().TestnetToBeDeprecatedFieldRPC()));\n     obj.push_back(Pair(\"chain\",            Params().NetworkIDString()));\n-#ifdef ENABLE_WALLET\n     obj.push_back(Pair(\"generate\",         getgenerate(params, false)));\n-#endif\n     return obj;\n }\n "
      },
      {
        "sha": "840bf57c219146b1e05f3ff00e4b9570e7831b51",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0fc10a8444484fabc3702e081ec77473c6c41d2/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0fc10a8444484fabc3702e081ec77473c6c41d2/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=d0fc10a8444484fabc3702e081ec77473c6c41d2",
        "patch": "@@ -306,12 +306,10 @@ static const CRPCCommand vRPCCommands[] =\n     { \"mining\",             \"prioritisetransaction\",  &prioritisetransaction,  true  },\n     { \"mining\",             \"submitblock\",            &submitblock,            true  },\n \n-#ifdef ENABLE_WALLET\n     /* Coin generation */\n     { \"generating\",         \"getgenerate\",            &getgenerate,            true  },\n     { \"generating\",         \"setgenerate\",            &setgenerate,            true  },\n     { \"generating\",         \"generate\",               &generate,               true  },\n-#endif\n \n     /* Raw transactions */\n     { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   true  },"
      },
      {
        "sha": "96f277915096e3638f6a6060fdecc2aeca2d4e12",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0fc10a8444484fabc3702e081ec77473c6c41d2/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0fc10a8444484fabc3702e081ec77473c6c41d2/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=d0fc10a8444484fabc3702e081ec77473c6c41d2",
        "patch": "@@ -19,9 +19,13 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1));\n     g_signals.BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n+    g_signals.ScriptForMining.connect(boost::bind(&CValidationInterface::GetScriptForMining, pwalletIn, _1));\n+    g_signals.BlockFound.connect(boost::bind(&CValidationInterface::UpdateRequestCount, pwalletIn, _1));\n }\n \n void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n+    g_signals.BlockFound.disconnect(boost::bind(&CValidationInterface::UpdateRequestCount, pwalletIn, _1));\n+    g_signals.ScriptForMining.disconnect(boost::bind(&CValidationInterface::GetScriptForMining, pwalletIn, _1));\n     g_signals.BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n     g_signals.Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1));\n     g_signals.Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n@@ -31,6 +35,8 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n }\n \n void UnregisterAllValidationInterfaces() {\n+    g_signals.BlockFound.disconnect_all_slots();\n+    g_signals.ScriptForMining.disconnect_all_slots();\n     g_signals.BlockChecked.disconnect_all_slots();\n     g_signals.Broadcast.disconnect_all_slots();\n     g_signals.Inventory.disconnect_all_slots();"
      },
      {
        "sha": "2d2427a194a0ccaac859e29d40453ec63a5252b9",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0fc10a8444484fabc3702e081ec77473c6c41d2/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0fc10a8444484fabc3702e081ec77473c6c41d2/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=d0fc10a8444484fabc3702e081ec77473c6c41d2",
        "patch": "@@ -10,6 +10,7 @@\n \n class CBlock;\n struct CBlockLocator;\n+class CScript;\n class CTransaction;\n class CValidationInterface;\n class CValidationState;\n@@ -34,6 +35,8 @@ class CValidationInterface {\n     virtual void Inventory(const uint256 &hash) {}\n     virtual void ResendWalletTransactions(int64_t nBestBlockTime) {}\n     virtual void BlockChecked(const CBlock&, const CValidationState&) {}\n+    virtual void GetScriptForMining(CScript &script) {};\n+    virtual void UpdateRequestCount(const CBlock&) {};\n     friend void ::RegisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterAllValidationInterfaces();\n@@ -52,6 +55,10 @@ struct CMainSignals {\n     boost::signals2::signal<void (int64_t nBestBlockTime)> Broadcast;\n     /** Notifies listeners of a block validation result */\n     boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    /** Notifies listeners that a key for mining is required (coinbase) */\n+    boost::signals2::signal<void (CScript &script)> ScriptForMining;\n+    /** Notifies listeners that a block has been successfully mined */\n+    boost::signals2::signal<void (const CBlock&)> BlockFound;\n };\n \n CMainSignals& GetMainSignals();"
      },
      {
        "sha": "440459fdeaaa766eaf4e5ed068d7737fbe6d3762",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0fc10a8444484fabc3702e081ec77473c6c41d2/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0fc10a8444484fabc3702e081ec77473c6c41d2/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d0fc10a8444484fabc3702e081ec77473c6c41d2",
        "patch": "@@ -2583,6 +2583,17 @@ void CWallet::UpdatedTransaction(const uint256 &hashTx)\n     }\n }\n \n+void CWallet::GetScriptForMining(CScript &script)\n+{\n+    CReserveKey reservekey(this);\n+    reservekey.KeepKey();\n+    \n+    CPubKey pubkey;\n+    if (!reservekey.GetReservedKey(pubkey))\n+        return;\n+    script = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n+}\n+\n void CWallet::LockCoin(COutPoint& output)\n {\n     AssertLockHeld(cs_wallet); // setLockedCoins"
      },
      {
        "sha": "c8ce5ad22197f302d1cb18d3886fbe6c0886c38a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0fc10a8444484fabc3702e081ec77473c6c41d2/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0fc10a8444484fabc3702e081ec77473c6c41d2/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d0fc10a8444484fabc3702e081ec77473c6c41d2",
        "patch": "@@ -680,6 +680,13 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         }\n     }\n \n+    void GetScriptForMining(CScript &script);\n+    void UpdateRequestCount(const CBlock& block)\n+    {\n+        LOCK(cs_wallet);\n+        mapRequestCount[block.GetHash()] = 0;\n+    };\n+    \n     unsigned int GetKeyPoolSize()\n     {\n         AssertLockHeld(cs_wallet); // setKeyPool"
      }
    ]
  },
  {
    "sha": "087e65def97fd3a2f61fa11b9f1cd2d7bc2f5f90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODdlNjVkZWY5N2ZkM2EyZjYxZmExMWI5ZjFjZDJkN2JjMmY1Zjkw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-24T19:51:47Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-30T19:45:46Z"
      },
      "message": "fix GetScriptForMining() CReserveKey::keepKey() issue",
      "tree": {
        "sha": "dba3462062806a7f8388eedc2cc654a67304965e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dba3462062806a7f8388eedc2cc654a67304965e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/087e65def97fd3a2f61fa11b9f1cd2d7bc2f5f90",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/087e65def97fd3a2f61fa11b9f1cd2d7bc2f5f90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/087e65def97fd3a2f61fa11b9f1cd2d7bc2f5f90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/087e65def97fd3a2f61fa11b9f1cd2d7bc2f5f90/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d0fc10a8444484fabc3702e081ec77473c6c41d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0fc10a8444484fabc3702e081ec77473c6c41d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0fc10a8444484fabc3702e081ec77473c6c41d2"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "997ca1e2f5cde93772f1dbdab647791aea4fe69e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087e65def97fd3a2f61fa11b9f1cd2d7bc2f5f90/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087e65def97fd3a2f61fa11b9f1cd2d7bc2f5f90/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=087e65def97fd3a2f61fa11b9f1cd2d7bc2f5f90",
        "patch": "@@ -2586,12 +2586,11 @@ void CWallet::UpdatedTransaction(const uint256 &hashTx)\n void CWallet::GetScriptForMining(CScript &script)\n {\n     CReserveKey reservekey(this);\n-    reservekey.KeepKey();\n-    \n     CPubKey pubkey;\n     if (!reservekey.GetReservedKey(pubkey))\n         return;\n     script = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n+    reservekey.KeepKey();\n }\n \n void CWallet::LockCoin(COutPoint& output)"
      }
    ]
  },
  {
    "sha": "5496253966abec287ea61a648cb518d14903f91f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDk2MjUzOTY2YWJlYzI4N2VhNjFhNjQ4Y2I1MThkMTQ5MDNmOTFm",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-07-01T06:32:30Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-07-01T14:06:14Z"
      },
      "message": "add CReserveScript to allow modular script keeping/returning\n\n- use one CReserveScript per mining thread",
      "tree": {
        "sha": "a8ed0fc4e07bfff4ac064ef80ff75f4882f4fe86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a8ed0fc4e07bfff4ac064ef80ff75f4882f4fe86"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5496253966abec287ea61a648cb518d14903f91f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5496253966abec287ea61a648cb518d14903f91f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5496253966abec287ea61a648cb518d14903f91f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5496253966abec287ea61a648cb518d14903f91f/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "087e65def97fd3a2f61fa11b9f1cd2d7bc2f5f90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/087e65def97fd3a2f61fa11b9f1cd2d7bc2f5f90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/087e65def97fd3a2f61fa11b9f1cd2d7bc2f5f90"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 42,
      "deletions": 23
    },
    "files": [
      {
        "sha": "46cde91a4df991e902510e9b4492f90c2bd03fa1",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5496253966abec287ea61a648cb518d14903f91f/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5496253966abec287ea61a648cb518d14903f91f/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=5496253966abec287ea61a648cb518d14903f91f",
        "patch": "@@ -421,15 +421,22 @@ static bool ProcessBlockFound(CBlock* pblock, const CChainParams& chainparams)\n     return true;\n }\n \n-void static BitcoinMiner(const CChainParams& chainparams, const CScript& coinbaseScript)\n+void static BitcoinMiner(const CChainParams& chainparams)\n {\n     LogPrintf(\"BitcoinMiner started\\n\");\n     SetThreadPriority(THREAD_PRIORITY_LOWEST);\n     RenameThread(\"bitcoin-miner\");\n \n     unsigned int nExtraNonce = 0;\n \n+    boost::shared_ptr<CReserveScript> coinbaseScript;\n+    GetMainSignals().ScriptForMining(coinbaseScript);\n+\n     try {\n+        //throw an error if no script was provided\n+        if (!coinbaseScript->reserveScript.size())\n+            throw std::runtime_error(\"No coinbase script available (mining requires a wallet)\");\n+\n         while (true) {\n             if (chainparams.MiningRequiresPeers()) {\n                 // Busy-wait for the network to come online so we don't waste time mining\n@@ -452,7 +459,7 @@ void static BitcoinMiner(const CChainParams& chainparams, const CScript& coinbas\n             unsigned int nTransactionsUpdatedLast = mempool.GetTransactionsUpdated();\n             CBlockIndex* pindexPrev = chainActive.Tip();\n \n-            auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlock(coinbaseScript));\n+            auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlock(coinbaseScript->reserveScript));\n             if (!pblocktemplate.get())\n             {\n                 LogPrintf(\"Error in BitcoinMiner: Keypool ran out, please call keypoolrefill before restarting the mining thread\\n\");\n@@ -486,6 +493,7 @@ void static BitcoinMiner(const CChainParams& chainparams, const CScript& coinbas\n                         LogPrintf(\"proof-of-work found  \\n  hash: %s  \\ntarget: %s\\n\", hash.GetHex(), hashTarget.GetHex());\n                         ProcessBlockFound(pblock, chainparams);\n                         SetThreadPriority(THREAD_PRIORITY_LOWEST);\n+                        coinbaseScript->KeepScript();\n \n                         // In regression test mode, stop mining after a block is found.\n                         if (chainparams.MineBlocksOnDemand())\n@@ -551,14 +559,7 @@ void GenerateBitcoins(bool fGenerate, int nThreads, const CChainParams& chainpar\n     if (nThreads == 0 || !fGenerate)\n         return;\n \n-    CScript coinbaseScript;\n-    GetMainSignals().ScriptForMining(coinbaseScript);\n-\n-    //throw an error if no script was provided\n-    if (!coinbaseScript.size())\n-        throw std::runtime_error(\"No coinbase script available (mining requires a wallet)\");\n-\n     minerThreads = new boost::thread_group();\n     for (int i = 0; i < nThreads; i++)\n-        minerThreads->create_thread(boost::bind(&BitcoinMiner, boost::cref(chainparams), coinbaseScript));\n+        minerThreads->create_thread(boost::bind(&BitcoinMiner, boost::cref(chainparams)));\n }"
      },
      {
        "sha": "9c6fb10af08ed412121efdf376867eaf39198d69",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5496253966abec287ea61a648cb518d14903f91f/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5496253966abec287ea61a648cb518d14903f91f/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=5496253966abec287ea61a648cb518d14903f91f",
        "patch": "@@ -20,6 +20,7 @@\n #include <stdint.h>\n \n #include <boost/assign/list_of.hpp>\n+#include <boost/shared_ptr.hpp>\n \n #include \"univalue/univalue.h\"\n \n@@ -131,11 +132,11 @@ UniValue generate(const UniValue& params, bool fHelp)\n     int nHeight = 0;\n     int nGenerate = params[0].get_int();\n \n-    CScript coinbaseScript;\n+    boost::shared_ptr<CReserveScript> coinbaseScript;\n     GetMainSignals().ScriptForMining(coinbaseScript);\n \n     //throw an error if no script was provided\n-    if (!coinbaseScript.size())\n+    if (!coinbaseScript->reserveScript.size())\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"No coinbase script available (mining requires a wallet)\");\n \n     {   // Don't keep cs_main locked\n@@ -148,7 +149,7 @@ UniValue generate(const UniValue& params, bool fHelp)\n     UniValue blockHashes(UniValue::VARR);\n     while (nHeight < nHeightEnd)\n     {\n-        auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlock(coinbaseScript));\n+        auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlock(coinbaseScript->reserveScript));\n         if (!pblocktemplate.get())\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Couldn't create new block\");\n         CBlock *pblock = &pblocktemplate->block;\n@@ -166,6 +167,9 @@ UniValue generate(const UniValue& params, bool fHelp)\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n         ++nHeight;\n         blockHashes.push_back(pblock->GetHash().GetHex());\n+\n+        //mark script as important because it was used at least for one coinbase output\n+        coinbaseScript->KeepScript();\n     }\n     return blockHashes;\n }"
      },
      {
        "sha": "e39ca57f4fbe94b5be929f722d5c19ec708906b2",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5496253966abec287ea61a648cb518d14903f91f/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5496253966abec287ea61a648cb518d14903f91f/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=5496253966abec287ea61a648cb518d14903f91f",
        "patch": "@@ -609,4 +609,13 @@ class CScript : public std::vector<unsigned char>\n     }\n };\n \n+class CReserveScript\n+{\n+public:\n+    CScript reserveScript;\n+    virtual void KeepScript() {}\n+    CReserveScript() {}\n+    virtual ~CReserveScript() {}\n+};\n+\n #endif // BITCOIN_SCRIPT_SCRIPT_H"
      },
      {
        "sha": "34acd40165118c3aefc9430ca81720fb971e7312",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5496253966abec287ea61a648cb518d14903f91f/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5496253966abec287ea61a648cb518d14903f91f/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=5496253966abec287ea61a648cb518d14903f91f",
        "patch": "@@ -7,10 +7,11 @@\n #define BITCOIN_VALIDATIONINTERFACE_H\n \n #include <boost/signals2/signal.hpp>\n+#include <boost/shared_ptr.hpp>\n \n class CBlock;\n struct CBlockLocator;\n-class CScript;\n+class CReserveScript;\n class CTransaction;\n class CValidationInterface;\n class CValidationState;\n@@ -35,7 +36,7 @@ class CValidationInterface {\n     virtual void Inventory(const uint256 &hash) {}\n     virtual void ResendWalletTransactions(int64_t nBestBlockTime) {}\n     virtual void BlockChecked(const CBlock&, const CValidationState&) {}\n-    virtual void GetScriptForMining(CScript &script) {};\n+    virtual void GetScriptForMining(boost::shared_ptr<CReserveScript>&) {};\n     virtual void UpdateRequestCount(const CBlock&) {};\n     friend void ::RegisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterValidationInterface(CValidationInterface*);\n@@ -56,7 +57,7 @@ struct CMainSignals {\n     /** Notifies listeners of a block validation result */\n     boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n     /** Notifies listeners that a key for mining is required (coinbase) */\n-    boost::signals2::signal<void (CScript &script)> ScriptForMining;\n+    boost::signals2::signal<void (boost::shared_ptr<CReserveScript>&)> ScriptForMining;\n     /** Notifies listeners that a block has been successfully mined */\n     boost::signals2::signal<void (const CBlock&)> BlockFound;\n };"
      },
      {
        "sha": "238f62a575e0f6fbf3dc9e65d817ba745fb87a06",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5496253966abec287ea61a648cb518d14903f91f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5496253966abec287ea61a648cb518d14903f91f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5496253966abec287ea61a648cb518d14903f91f",
        "patch": "@@ -2583,14 +2583,15 @@ void CWallet::UpdatedTransaction(const uint256 &hashTx)\n     }\n }\n \n-void CWallet::GetScriptForMining(CScript &script)\n+void CWallet::GetScriptForMining(boost::shared_ptr<CReserveScript> &script)\n {\n-    CReserveKey reservekey(this);\n+    boost::shared_ptr<CReserveKey> rKey(new CReserveKey(this));\n     CPubKey pubkey;\n-    if (!reservekey.GetReservedKey(pubkey))\n+    if (!rKey->GetReservedKey(pubkey))\n         return;\n-    script = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n-    reservekey.KeepKey();\n+\n+    script = rKey;\n+    script->reserveScript = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n }\n \n void CWallet::LockCoin(COutPoint& output)"
      },
      {
        "sha": "1774596af149967a6401c1fa9aa551ad86c75a5a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5496253966abec287ea61a648cb518d14903f91f/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5496253966abec287ea61a648cb518d14903f91f/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=5496253966abec287ea61a648cb518d14903f91f",
        "patch": "@@ -28,6 +28,8 @@\n #include <utility>\n #include <vector>\n \n+#include <boost/shared_ptr.hpp>\n+\n /**\n  * Settings\n  */\n@@ -680,7 +682,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         }\n     }\n \n-    void GetScriptForMining(CScript &script);\n+    void GetScriptForMining(boost::shared_ptr<CReserveScript> &script);\n     void UpdateRequestCount(const CBlock& block)\n     {\n         LOCK(cs_wallet);\n@@ -742,7 +744,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n };\n \n /** A key allocated from the key pool. */\n-class CReserveKey\n+class CReserveKey : public CReserveScript\n {\n protected:\n     CWallet* pwallet;\n@@ -763,6 +765,7 @@ class CReserveKey\n     void ReturnKey();\n     bool GetReservedKey(CPubKey &pubkey);\n     void KeepKey();\n+    void KeepScript() { KeepKey(); }\n };\n \n "
      }
    ]
  },
  {
    "sha": "a7b9623d189eb4a7d37ff7ad706d6385c3a38e80",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphN2I5NjIzZDE4OWViNGE3ZDM3ZmY3YWQ3MDZkNjM4NWMzYTM4ZTgw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-07-01T14:06:49Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-07-01T14:09:58Z"
      },
      "message": "miner: rename UpdateRequestCount signal to ResetRequestCount",
      "tree": {
        "sha": "5c8e0ff2ebbc89c965c4a5869332cae6b45489ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c8e0ff2ebbc89c965c4a5869332cae6b45489ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7b9623d189eb4a7d37ff7ad706d6385c3a38e80",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7b9623d189eb4a7d37ff7ad706d6385c3a38e80",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a7b9623d189eb4a7d37ff7ad706d6385c3a38e80",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7b9623d189eb4a7d37ff7ad706d6385c3a38e80/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5496253966abec287ea61a648cb518d14903f91f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5496253966abec287ea61a648cb518d14903f91f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5496253966abec287ea61a648cb518d14903f91f"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "2c5cba742c6749f8d20e7ef7c9b063dafa25368c",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7b9623d189eb4a7d37ff7ad706d6385c3a38e80/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7b9623d189eb4a7d37ff7ad706d6385c3a38e80/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=a7b9623d189eb4a7d37ff7ad706d6385c3a38e80",
        "patch": "@@ -411,7 +411,7 @@ static bool ProcessBlockFound(CBlock* pblock, const CChainParams& chainparams)\n     }\n \n     // Inform about the new block\n-    GetMainSignals().BlockFound(*pblock);\n+    GetMainSignals().BlockFound(pblock->GetHash());\n \n     // Process this block the same as if we had received it from another node\n     CValidationState state;"
      },
      {
        "sha": "d365f0300849e4295949cbbb7df1bc91dcb587de",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7b9623d189eb4a7d37ff7ad706d6385c3a38e80/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7b9623d189eb4a7d37ff7ad706d6385c3a38e80/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=a7b9623d189eb4a7d37ff7ad706d6385c3a38e80",
        "patch": "@@ -20,11 +20,11 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1));\n     g_signals.BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n     g_signals.ScriptForMining.connect(boost::bind(&CValidationInterface::GetScriptForMining, pwalletIn, _1));\n-    g_signals.BlockFound.connect(boost::bind(&CValidationInterface::UpdateRequestCount, pwalletIn, _1));\n+    g_signals.BlockFound.connect(boost::bind(&CValidationInterface::ResetRequestCount, pwalletIn, _1));\n }\n \n void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n-    g_signals.BlockFound.disconnect(boost::bind(&CValidationInterface::UpdateRequestCount, pwalletIn, _1));\n+    g_signals.BlockFound.disconnect(boost::bind(&CValidationInterface::ResetRequestCount, pwalletIn, _1));\n     g_signals.ScriptForMining.disconnect(boost::bind(&CValidationInterface::GetScriptForMining, pwalletIn, _1));\n     g_signals.BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n     g_signals.Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1));"
      },
      {
        "sha": "fb0ce0bdaac44333a4ac8278534280c70ff06b85",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7b9623d189eb4a7d37ff7ad706d6385c3a38e80/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7b9623d189eb4a7d37ff7ad706d6385c3a38e80/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=a7b9623d189eb4a7d37ff7ad706d6385c3a38e80",
        "patch": "@@ -37,7 +37,7 @@ class CValidationInterface {\n     virtual void ResendWalletTransactions(int64_t nBestBlockTime) {}\n     virtual void BlockChecked(const CBlock&, const CValidationState&) {}\n     virtual void GetScriptForMining(boost::shared_ptr<CReserveScript>&) {};\n-    virtual void UpdateRequestCount(const CBlock&) {};\n+    virtual void ResetRequestCount(const uint256 &hash) {};\n     friend void ::RegisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterAllValidationInterfaces();\n@@ -59,7 +59,7 @@ struct CMainSignals {\n     /** Notifies listeners that a key for mining is required (coinbase) */\n     boost::signals2::signal<void (boost::shared_ptr<CReserveScript>&)> ScriptForMining;\n     /** Notifies listeners that a block has been successfully mined */\n-    boost::signals2::signal<void (const CBlock&)> BlockFound;\n+    boost::signals2::signal<void (const uint256 &)> BlockFound;\n };\n \n CMainSignals& GetMainSignals();"
      },
      {
        "sha": "f36c98e9fc096a0bc3c2d5e805c90680b0b2c839",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7b9623d189eb4a7d37ff7ad706d6385c3a38e80/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7b9623d189eb4a7d37ff7ad706d6385c3a38e80/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=a7b9623d189eb4a7d37ff7ad706d6385c3a38e80",
        "patch": "@@ -683,10 +683,10 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     }\n \n     void GetScriptForMining(boost::shared_ptr<CReserveScript> &script);\n-    void UpdateRequestCount(const CBlock& block)\n+    void ResetRequestCount(const uint256 &hash)\n     {\n         LOCK(cs_wallet);\n-        mapRequestCount[block.GetHash()] = 0;\n+        mapRequestCount[hash] = 0;\n     };\n     \n     unsigned int GetKeyPoolSize()"
      }
    ]
  }
]