[
  {
    "sha": "bcc292b22d847c15776403197fcacc5ddbb6cd20",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiY2MyOTJiMjJkODQ3YzE1Nzc2NDAzMTk3ZmNhY2M1ZGRiYjZjZDIw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-09-30T12:34:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-10-01T17:45:41Z"
      },
      "message": "Extend printf warnings to error()",
      "tree": {
        "sha": "734009e506a2f93fe11c99658d4acdb2a038fdbb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/734009e506a2f93fe11c99658d4acdb2a038fdbb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bcc292b22d847c15776403197fcacc5ddbb6cd20",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcc292b22d847c15776403197fcacc5ddbb6cd20",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bcc292b22d847c15776403197fcacc5ddbb6cd20",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcc292b22d847c15776403197fcacc5ddbb6cd20/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a739598b14690998b20858321c244ad7e4bb9a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a739598b14690998b20858321c244ad7e4bb9a1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a739598b14690998b20858321c244ad7e4bb9a1"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 12,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d80b3c28b2dba131a93fb98baafb4fe218aee868",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcc292b22d847c15776403197fcacc5ddbb6cd20/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcc292b22d847c15776403197fcacc5ddbb6cd20/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=bcc292b22d847c15776403197fcacc5ddbb6cd20",
        "patch": "@@ -56,13 +56,22 @@ static const int64 CENT = 1000000;\n \n /* Format characters for (s)size_t and ptrdiff_t */\n #if defined(_MSC_VER) || defined(__MSVCRT__)\n+  /* (s)size_t and ptrdiff_t have the same size specifier in MSVC:\n+     http://msdn.microsoft.com/en-us/library/tcxf1dw6%28v=vs.100%29.aspx\n+   */\n   #define PRIszx    \"Ix\"\n   #define PRIszu    \"Iu\"\n   #define PRIszd    \"Id\"\n-#else\n+  #define PRIpdx    \"Ix\"\n+  #define PRIpdu    \"Iu\"\n+  #define PRIpdd    \"Id\"\n+#else /* C99 standard */\n   #define PRIszx    \"zx\"\n   #define PRIszu    \"zu\"\n   #define PRIszd    \"zd\"\n+  #define PRIpdx    \"tx\"\n+  #define PRIpdu    \"tu\"\n+  #define PRIpdd    \"td\"\n #endif\n \n // This is needed because the foreach macro can't get over the comma in pair<t1, t2>\n@@ -154,6 +163,8 @@ std::string real_strprintf(const std::string &format, int dummy, ...);\n #define strprintf(format, ...) real_strprintf(format, 0, __VA_ARGS__)\n std::string vstrprintf(const char *format, va_list ap);\n \n+bool ATTR_WARN_PRINTF(1,2) error(const char *format, ...);\n+\n /* Redefine printf so that it directs output to debug.log\n  *\n  * Do this *after* defining the other printf-like functions, because otherwise the\n@@ -162,7 +173,6 @@ std::string vstrprintf(const char *format, va_list ap);\n  */\n #define printf OutputDebugStringF\n \n-bool error(const char *format, ...);\n void LogException(std::exception* pex, const char* pszThread);\n void PrintException(std::exception* pex, const char* pszThread);\n void PrintExceptionContinue(std::exception* pex, const char* pszThread);"
      }
    ]
  },
  {
    "sha": "d210f4f5b8f904809789a543adeba520686b7573",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjEwZjRmNWI4ZjkwNDgwOTc4OWE1NDNhZGViYTUyMDY4NmI3NTcz",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2012-09-29T09:57:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-10-01T17:45:42Z"
      },
      "message": "fix -Wformat warnings all over the source",
      "tree": {
        "sha": "299bb3ab647c1bacdcb393f80a0e84a68f0cfd8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/299bb3ab647c1bacdcb393f80a0e84a68f0cfd8e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d210f4f5b8f904809789a543adeba520686b7573",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d210f4f5b8f904809789a543adeba520686b7573",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d210f4f5b8f904809789a543adeba520686b7573",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d210f4f5b8f904809789a543adeba520686b7573/comments",
    "author": null,
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bcc292b22d847c15776403197fcacc5ddbb6cd20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcc292b22d847c15776403197fcacc5ddbb6cd20",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bcc292b22d847c15776403197fcacc5ddbb6cd20"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 32,
      "deletions": 32
    },
    "files": [
      {
        "sha": "912f0c4113f1fe926c1ecabbc9d98dd07edf7eaa",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d210f4f5b8f904809789a543adeba520686b7573/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d210f4f5b8f904809789a543adeba520686b7573/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=d210f4f5b8f904809789a543adeba520686b7573",
        "patch": "@@ -345,7 +345,7 @@ static string HTTPReply(int nStatus, const string& strMsg, bool keepalive)\n             \"HTTP/1.1 %d %s\\r\\n\"\n             \"Date: %s\\r\\n\"\n             \"Connection: %s\\r\\n\"\n-            \"Content-Length: %d\\r\\n\"\n+            \"Content-Length: %\"PRIszu\"\\r\\n\"\n             \"Content-Type: application/json\\r\\n\"\n             \"Server: bitcoin-json-rpc/%s\\r\\n\"\n             \"\\r\\n\""
      },
      {
        "sha": "7e2cda6297b7857f55ad9661c578a1ba5efdd67a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d210f4f5b8f904809789a543adeba520686b7573/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d210f4f5b8f904809789a543adeba520686b7573/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d210f4f5b8f904809789a543adeba520686b7573",
        "patch": "@@ -767,11 +767,11 @@ bool AppInit2()\n     RandAddSeedPerfmon();\n \n     //// debug print\n-    printf(\"mapBlockIndex.size() = %d\\n\",   mapBlockIndex.size());\n+    printf(\"mapBlockIndex.size() = %\"PRIszu\"\\n\",   mapBlockIndex.size());\n     printf(\"nBestHeight = %d\\n\",            nBestHeight);\n-    printf(\"setKeyPool.size() = %d\\n\",      pwalletMain->setKeyPool.size());\n-    printf(\"mapWallet.size() = %d\\n\",       pwalletMain->mapWallet.size());\n-    printf(\"mapAddressBook.size() = %d\\n\",  pwalletMain->mapAddressBook.size());\n+    printf(\"setKeyPool.size() = %\"PRIszu\"\\n\",      pwalletMain->setKeyPool.size());\n+    printf(\"mapWallet.size() = %\"PRIszu\"\\n\",       pwalletMain->mapWallet.size());\n+    printf(\"mapAddressBook.size() = %\"PRIszu\"\\n\",  pwalletMain->mapAddressBook.size());\n \n     if (!NewThread(StartNode, NULL))\n         InitError(_(\"Error: could not start node\"));"
      },
      {
        "sha": "ec7eea3cf4f11d97f4c4f7617298c2206ed6d84b",
        "filename": "src/irc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d210f4f5b8f904809789a543adeba520686b7573/src/irc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d210f4f5b8f904809789a543adeba520686b7573/src/irc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/irc.cpp?ref=d210f4f5b8f904809789a543adeba520686b7573",
        "patch": "@@ -260,7 +260,7 @@ void ThreadIRCSeed2(void* parg)\n         if (!fNoListen && GetLocal(addrLocal, &addrIPv4) && nNameRetry<3)\n             strMyName = EncodeAddress(GetLocalAddress(&addrConnect));\n         if (strMyName == \"\")\n-            strMyName = strprintf(\"x%u\", GetRand(1000000000));\n+            strMyName = strprintf(\"x%\"PRI64u\"\", GetRand(1000000000));\n \n         Send(hSocket, strprintf(\"NICK %s\\r\", strMyName.c_str()).c_str());\n         Send(hSocket, strprintf(\"USER %s 8 * : %s\\r\", strMyName.c_str(), strMyName.c_str()).c_str());"
      },
      {
        "sha": "da1072970c0cd78a32e16491f04372fcce7d5413",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d210f4f5b8f904809789a543adeba520686b7573/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d210f4f5b8f904809789a543adeba520686b7573/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d210f4f5b8f904809789a543adeba520686b7573",
        "patch": "@@ -181,7 +181,7 @@ bool AddOrphanTx(const CDataStream& vMsg)\n     // at most 500 megabytes of orphans:\n     if (pvMsg->size() > 5000)\n     {\n-        printf(\"ignoring large orphan tx (size: %u, hash: %s)\\n\", pvMsg->size(), hash.ToString().substr(0,10).c_str());\n+        printf(\"ignoring large orphan tx (size: %\"PRIszu\", hash: %s)\\n\", pvMsg->size(), hash.ToString().substr(0,10).c_str());\n         delete pvMsg;\n         return false;\n     }\n@@ -190,7 +190,7 @@ bool AddOrphanTx(const CDataStream& vMsg)\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n         mapOrphanTransactionsByPrev[txin.prevout.hash].insert(make_pair(hash, pvMsg));\n \n-    printf(\"stored orphan tx %s (mapsz %u)\\n\", hash.ToString().substr(0,10).c_str(),\n+    printf(\"stored orphan tx %s (mapsz %\"PRIszu\")\\n\", hash.ToString().substr(0,10).c_str(),\n         mapOrphanTransactions.size());\n     return true;\n }\n@@ -667,7 +667,7 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n     if (ptxOld)\n         EraseFromWallets(ptxOld->GetHash());\n \n-    printf(\"CTxMemPool::accept() : accepted %s (poolsz %u)\\n\",\n+    printf(\"CTxMemPool::accept() : accepted %s (poolsz %\"PRIszu\")\\n\",\n            hash.ToString().substr(0,10).c_str(),\n            mapTx.size());\n     return true;\n@@ -1187,7 +1187,7 @@ bool CTransaction::FetchInputs(CTxDB& txdb, const map<uint256, CTxIndex>& mapTes\n             // Revisit this if/when transaction replacement is implemented and allows\n             // adding inputs:\n             fInvalid = true;\n-            return DoS(100, error(\"FetchInputs() : %s prevout.n out of range %d %d %d prev tx %s\\n%s\", GetHash().ToString().substr(0,10).c_str(), prevout.n, txPrev.vout.size(), txindex.vSpent.size(), prevout.hash.ToString().substr(0,10).c_str(), txPrev.ToString().c_str()));\n+            return DoS(100, error(\"FetchInputs() : %s prevout.n out of range %d %\"PRIszu\" %\"PRIszu\" prev tx %s\\n%s\", GetHash().ToString().substr(0,10).c_str(), prevout.n, txPrev.vout.size(), txindex.vSpent.size(), prevout.hash.ToString().substr(0,10).c_str(), txPrev.ToString().c_str()));\n         }\n     }\n \n@@ -1256,7 +1256,7 @@ bool CTransaction::ConnectInputs(MapPrevTx inputs,\n             CTransaction& txPrev = inputs[prevout.hash].second;\n \n             if (prevout.n >= txPrev.vout.size() || prevout.n >= txindex.vSpent.size())\n-                return DoS(100, error(\"ConnectInputs() : %s prevout.n out of range %d %d %d prev tx %s\\n%s\", GetHash().ToString().substr(0,10).c_str(), prevout.n, txPrev.vout.size(), txindex.vSpent.size(), prevout.hash.ToString().substr(0,10).c_str(), txPrev.ToString().c_str()));\n+                return DoS(100, error(\"ConnectInputs() : %s prevout.n out of range %d %\"PRIszu\" %\"PRIszu\" prev tx %s\\n%s\", GetHash().ToString().substr(0,10).c_str(), prevout.n, txPrev.vout.size(), txindex.vSpent.size(), prevout.hash.ToString().substr(0,10).c_str(), txPrev.ToString().c_str()));\n \n             // If prev is coinbase, check that it's matured\n             if (txPrev.IsCoinBase())\n@@ -1541,8 +1541,8 @@ bool static Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n         vConnect.push_back(pindex);\n     reverse(vConnect.begin(), vConnect.end());\n \n-    printf(\"REORGANIZE: Disconnect %i blocks; %s..%s\\n\", vDisconnect.size(), pfork->GetBlockHash().ToString().substr(0,20).c_str(), pindexBest->GetBlockHash().ToString().substr(0,20).c_str());\n-    printf(\"REORGANIZE: Connect %i blocks; %s..%s\\n\", vConnect.size(), pfork->GetBlockHash().ToString().substr(0,20).c_str(), pindexNew->GetBlockHash().ToString().substr(0,20).c_str());\n+    printf(\"REORGANIZE: Disconnect %\"PRIszu\" blocks; %s..%s\\n\", vDisconnect.size(), pfork->GetBlockHash().ToString().substr(0,20).c_str(), pindexBest->GetBlockHash().ToString().substr(0,20).c_str());\n+    printf(\"REORGANIZE: Connect %\"PRIszu\" blocks; %s..%s\\n\", vConnect.size(), pfork->GetBlockHash().ToString().substr(0,20).c_str(), pindexNew->GetBlockHash().ToString().substr(0,20).c_str());\n \n     // Disconnect shorter branch\n     vector<CTransaction> vResurrect;\n@@ -1670,7 +1670,7 @@ bool CBlock::SetBestChain(CTxDB& txdb, CBlockIndex* pindexNew)\n         }\n \n         if (!vpindexSecondary.empty())\n-            printf(\"Postponing %i reconnects\\n\", vpindexSecondary.size());\n+            printf(\"Postponing %\"PRIszu\" reconnects\\n\", vpindexSecondary.size());\n \n         // Switch to new best branch\n         if (!Reorganize(txdb, pindexIntermediate))\n@@ -2218,7 +2218,7 @@ void PrintBlockTree()\n         // print item\n         CBlock block;\n         block.ReadFromDisk(pindex);\n-        printf(\"%d (%u,%u) %s  %s  tx %d\",\n+        printf(\"%d (%u,%u) %s  %s  tx %\"PRIszu\"\",\n             pindex->nHeight,\n             pindex->nFile,\n             pindex->nBlockPos,\n@@ -2416,7 +2416,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n     static map<CService, CPubKey> mapReuseKey;\n     RandAddSeedPerfmon();\n     if (fDebug)\n-        printf(\"received: %s (%d bytes)\\n\", strCommand.c_str(), vRecv.size());\n+        printf(\"received: %s (%\"PRIszu\" bytes)\\n\", strCommand.c_str(), vRecv.size());\n     if (mapArgs.count(\"-dropmessagestest\") && GetRand(atoi(mapArgs[\"-dropmessagestest\"])) == 0)\n     {\n         printf(\"dropmessagestest DROPPING RECV MESSAGE\\n\");\n@@ -2561,7 +2561,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         if (vAddr.size() > 1000)\n         {\n             pfrom->Misbehaving(20);\n-            return error(\"message addr size() = %d\", vAddr.size());\n+            return error(\"message addr size() = %\"PRIszu\"\", vAddr.size());\n         }\n \n         // Store the new addresses\n@@ -2624,7 +2624,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         if (vInv.size() > MAX_INV_SZ)\n         {\n             pfrom->Misbehaving(20);\n-            return error(\"message inv size() = %d\", vInv.size());\n+            return error(\"message inv size() = %\"PRIszu\"\", vInv.size());\n         }\n \n         // find last block in inv vector\n@@ -2674,11 +2674,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         if (vInv.size() > MAX_INV_SZ)\n         {\n             pfrom->Misbehaving(20);\n-            return error(\"message getdata size() = %d\", vInv.size());\n+            return error(\"message getdata size() = %\"PRIszu\"\", vInv.size());\n         }\n \n         if (fDebugNet || (vInv.size() != 1))\n-            printf(\"received getdata (%d invsz)\\n\", vInv.size());\n+            printf(\"received getdata (%\"PRIszu\" invsz)\\n\", vInv.size());\n \n         BOOST_FOREACH(const CInv& inv, vInv)\n         {\n@@ -3072,7 +3072,7 @@ bool ProcessMessages(CNode* pfrom)\n             break;\n         }\n         if (pstart - vRecv.begin() > 0)\n-            printf(\"\\n\\nPROCESSMESSAGE SKIPPED %d BYTES\\n\\n\", pstart - vRecv.begin());\n+            printf(\"\\n\\nPROCESSMESSAGE SKIPPED %\"PRIpdd\" BYTES\\n\\n\", pstart - vRecv.begin());\n         vRecv.erase(vRecv.begin(), pstart);\n \n         // Read header\n@@ -3681,7 +3681,7 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n \n         nLastBlockTx = nBlockTx;\n         nLastBlockSize = nBlockSize;\n-        printf(\"CreateNewBlock(): total size %lu\\n\", nBlockSize);\n+        printf(\"CreateNewBlock(): total size %\"PRI64u\"\\n\", nBlockSize);\n \n     pblock->vtx[0].vout[0].nValue = GetBlockValue(pindexPrev->nHeight+1, nFees);\n \n@@ -3847,7 +3847,7 @@ void static BitcoinMiner(CWallet *pwallet)\n             return;\n         IncrementExtraNonce(pblock.get(), pindexPrev, nExtraNonce);\n \n-        printf(\"Running BitcoinMiner with %d transactions in block (%u bytes)\\n\", pblock->vtx.size(),\n+        printf(\"Running BitcoinMiner with %\"PRIszu\" transactions in block (%u bytes)\\n\", pblock->vtx.size(),\n                ::GetSerializeSize(*pblock, SER_NETWORK, PROTOCOL_VERSION));\n \n "
      },
      {
        "sha": "68302b85aca657f2ca6cb2a4d8afbdce9621f456",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d210f4f5b8f904809789a543adeba520686b7573/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d210f4f5b8f904809789a543adeba520686b7573/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=d210f4f5b8f904809789a543adeba520686b7573",
        "patch": "@@ -586,7 +586,7 @@ class CTransaction\n     std::string ToString() const\n     {\n         std::string str;\n-        str += strprintf(\"CTransaction(hash=%s, ver=%d, vin.size=%u, vout.size=%u, nLockTime=%u)\\n\",\n+        str += strprintf(\"CTransaction(hash=%s, ver=%d, vin.size=%\"PRIszu\", vout.size=%\"PRIszu\", nLockTime=%u)\\n\",\n             GetHash().ToString().substr(0,10).c_str(),\n             nVersion,\n             vin.size(),\n@@ -952,7 +952,7 @@ class CBlock\n \n     void print() const\n     {\n-        printf(\"CBlock(hash=%s, ver=%d, hashPrevBlock=%s, hashMerkleRoot=%s, nTime=%u, nBits=%08x, nNonce=%u, vtx=%d)\\n\",\n+        printf(\"CBlock(hash=%s, ver=%d, hashPrevBlock=%s, hashMerkleRoot=%s, nTime=%u, nBits=%08x, nNonce=%u, vtx=%\"PRIszu\")\\n\",\n             GetHash().ToString().substr(0,20).c_str(),\n             nVersion,\n             hashPrevBlock.ToString().substr(0,20).c_str(),\n@@ -1128,7 +1128,7 @@ class CBlockIndex\n \n     std::string ToString() const\n     {\n-        return strprintf(\"CBlockIndex(pprev=%08x, pnext=%08x, nFile=%u, nBlockPos=%-6u nHeight=%d, merkle=%s, hashBlock=%s)\",\n+        return strprintf(\"CBlockIndex(pprev=%p, pnext=%p, nFile=%u, nBlockPos=%-6u nHeight=%d, merkle=%s, hashBlock=%s)\",\n             pprev, pnext, nFile, nBlockPos, nHeight,\n             hashMerkleRoot.ToString().substr(0,10).c_str(),\n             GetBlockHash().ToString().substr(0,20).c_str());"
      },
      {
        "sha": "7c327f5d355fed01b27d98f7be5f0591e3912243",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d210f4f5b8f904809789a543adeba520686b7573/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d210f4f5b8f904809789a543adeba520686b7573/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d210f4f5b8f904809789a543adeba520686b7573",
        "patch": "@@ -885,7 +885,7 @@ void ThreadSocketHandler2(void* parg)\n \n                     if (nPos > ReceiveBufferSize()) {\n                         if (!pnode->fDisconnect)\n-                            printf(\"socket recv flood control disconnect (%d bytes)\\n\", vRecv.size());\n+                            printf(\"socket recv flood control disconnect (%\"PRIszu\" bytes)\\n\", vRecv.size());\n                         pnode->CloseSocketDisconnect();\n                     }\n                     else {"
      },
      {
        "sha": "50c365938e18fe9326e4d0a92d97fc7bfb4f3cec",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d210f4f5b8f904809789a543adeba520686b7573/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d210f4f5b8f904809789a543adeba520686b7573/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=d210f4f5b8f904809789a543adeba520686b7573",
        "patch": "@@ -725,7 +725,7 @@ Value addmultisigaddress(const Array& params, bool fHelp)\n     if ((int)keys.size() < nRequired)\n         throw runtime_error(\n             strprintf(\"not enough keys supplied \"\n-                      \"(got %d keys, but need at least %d to redeem)\", keys.size(), nRequired));\n+                      \"(got %\"PRIszu\" keys, but need at least %d to redeem)\", keys.size(), nRequired));\n     std::vector<CKey> pubkeys;\n     pubkeys.resize(keys.size());\n     for (unsigned int i = 0; i < keys.size(); i++)"
      },
      {
        "sha": "296842acc308c04605e8c1cd3d50be32931cc360",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d210f4f5b8f904809789a543adeba520686b7573/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d210f4f5b8f904809789a543adeba520686b7573/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=d210f4f5b8f904809789a543adeba520686b7573",
        "patch": "@@ -156,7 +156,7 @@ void RandAddSeedPerfmon()\n     {\n         RAND_add(pdata, nSize, nSize/100.0);\n         memset(pdata, 0, nSize);\n-        printf(\"RandAddSeed() %d bytes\\n\", nSize);\n+        printf(\"RandAddSeed() %lu bytes\\n\", nSize);\n     }\n #endif\n }"
      },
      {
        "sha": "f3e71f59aab3c73757c6aba014af19cdf5760383",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d210f4f5b8f904809789a543adeba520686b7573/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d210f4f5b8f904809789a543adeba520686b7573/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=d210f4f5b8f904809789a543adeba520686b7573",
        "patch": "@@ -804,7 +804,7 @@ void CWallet::ReacceptWalletTransactions()\n                 // Update fSpent if a tx got spent somewhere else by a copy of wallet.dat\n                 if (txindex.vSpent.size() != wtx.vout.size())\n                 {\n-                    printf(\"ERROR: ReacceptWalletTransactions() : txindex.vSpent.size() %d != wtx.vout.size() %d\\n\", txindex.vSpent.size(), wtx.vout.size());\n+                    printf(\"ERROR: ReacceptWalletTransactions() : txindex.vSpent.size() %\"PRIszu\" != wtx.vout.size() %\"PRIszu\"\\n\", txindex.vSpent.size(), wtx.vout.size());\n                     continue;\n                 }\n                 for (unsigned int i = 0; i < txindex.vSpent.size(); i++)\n@@ -1424,7 +1424,7 @@ void CWallet::PrintWallet(const CBlock& block)\n         if (mapWallet.count(block.vtx[0].GetHash()))\n         {\n             CWalletTx& wtx = mapWallet[block.vtx[0].GetHash()];\n-            printf(\"    mine:  %d  %d  %d\", wtx.GetDepthInMainChain(), wtx.GetBlocksToMaturity(), wtx.GetCredit());\n+            printf(\"    mine:  %d  %d  %\"PRI64d\"\", wtx.GetDepthInMainChain(), wtx.GetBlocksToMaturity(), wtx.GetCredit());\n         }\n     }\n     printf(\"\\n\");\n@@ -1511,7 +1511,7 @@ bool CWallet::TopUpKeyPool()\n             if (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey())))\n                 throw runtime_error(\"TopUpKeyPool() : writing generated key failed\");\n             setKeyPool.insert(nEnd);\n-            printf(\"keypool added key %\"PRI64d\", size=%d\\n\", nEnd, setKeyPool.size());\n+            printf(\"keypool added key %\"PRI64d\", size=%\"PRIszu\"\\n\", nEnd, setKeyPool.size());\n         }\n     }\n     return true;"
      }
    ]
  },
  {
    "sha": "827d8c2e0cc08bae775c191a44d3574a7909dc3c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjdkOGMyZTBjYzA4YmFlNzc1YzE5MWE0NGQzNTc0YTc5MDlkYzNj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-09-30T13:26:41Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-10-01T17:45:42Z"
      },
      "message": "Revert \"Remove -Wformat* warnings from makefiles\"\n\nThis reverts commit 14ac0adcc7c0224a467e38bbd4ebf39d824ada8d.",
      "tree": {
        "sha": "e86eac44aec2bab7737a44bf8a6a012ec93f9405",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e86eac44aec2bab7737a44bf8a6a012ec93f9405"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/827d8c2e0cc08bae775c191a44d3574a7909dc3c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/827d8c2e0cc08bae775c191a44d3574a7909dc3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/827d8c2e0cc08bae775c191a44d3574a7909dc3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/827d8c2e0cc08bae775c191a44d3574a7909dc3c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d210f4f5b8f904809789a543adeba520686b7573",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d210f4f5b8f904809789a543adeba520686b7573",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d210f4f5b8f904809789a543adeba520686b7573"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "a73a2c379bc1d9880572ca015b06e3135b00a68c",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/827d8c2e0cc08bae775c191a44d3574a7909dc3c/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/827d8c2e0cc08bae775c191a44d3574a7909dc3c/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=827d8c2e0cc08bae775c191a44d3574a7909dc3c",
        "patch": "@@ -101,7 +101,7 @@ contains(BITCOIN_NEED_QT_PLUGINS, 1) {\n     DEFINES += HAVE_BUILD_INFO\n }\n \n-QMAKE_CXXFLAGS_WARN_ON = -fdiagnostics-show-option -Wall -Wextra -Wno-format -Wno-format-security -Wno-unused-parameter -Wstack-protector\n+QMAKE_CXXFLAGS_WARN_ON = -fdiagnostics-show-option -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -Wstack-protector\n \n # Input\n DEPENDPATH += src src/json src/qt"
      },
      {
        "sha": "0970469a9886fc4bea42687e1b3ee81b94bb2336",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/827d8c2e0cc08bae775c191a44d3574a7909dc3c/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/827d8c2e0cc08bae775c191a44d3574a7909dc3c/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=827d8c2e0cc08bae775c191a44d3574a7909dc3c",
        "patch": "@@ -32,7 +32,7 @@ LIBS= \\\n \n DEFS=-D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB -DBOOST_SPIRIT_THREADSAFE\n DEBUGFLAGS=-g\n-CFLAGS=-O2 -w -Wall -Wextra -Wno-format -Wno-format-security -Wno-unused-parameter $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)\n+CFLAGS=-O2 -w -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)\n LDFLAGS=-Wl,--dynamicbase -Wl,--nxcompat\n \n TESTDEFS = -DTEST_DATA_DIR=$(abspath test/data)"
      },
      {
        "sha": "54054c25f913ce4effbfd830782e5aa24673cb40",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/827d8c2e0cc08bae775c191a44d3574a7909dc3c/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/827d8c2e0cc08bae775c191a44d3574a7909dc3c/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=827d8c2e0cc08bae775c191a44d3574a7909dc3c",
        "patch": "@@ -27,7 +27,7 @@ LIBS= \\\n \n DEFS=-DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB -DBOOST_SPIRIT_THREADSAFE\n DEBUGFLAGS=-g\n-CFLAGS=-mthreads -O2 -w -Wall -Wextra -Wno-format -Wno-format-security -Wno-unused-parameter $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)\n+CFLAGS=-mthreads -O2 -w -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)\n LDFLAGS=-Wl,--dynamicbase -Wl,--nxcompat\n \n TESTDEFS = -DTEST_DATA_DIR=$(abspath test/data)"
      },
      {
        "sha": "359739bd5ec2ffe0977ae8f4de1abb1fce7cdeca",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/827d8c2e0cc08bae775c191a44d3574a7909dc3c/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/827d8c2e0cc08bae775c191a44d3574a7909dc3c/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=827d8c2e0cc08bae775c191a44d3574a7909dc3c",
        "patch": "@@ -66,7 +66,7 @@ CFLAGS = -g\n endif\n \n # ppc doesn't work because we don't support big-endian\n-CFLAGS += -Wall -Wextra -Wno-format -Wno-format-security -Wno-unused-parameter \\\n+CFLAGS += -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter \\\n     $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)\n \n OBJS= \\"
      },
      {
        "sha": "a41b57b4fca5a9a0c4f980975b7361977297883e",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/827d8c2e0cc08bae775c191a44d3574a7909dc3c/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/827d8c2e0cc08bae775c191a44d3574a7909dc3c/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=827d8c2e0cc08bae775c191a44d3574a7909dc3c",
        "patch": "@@ -93,7 +93,7 @@ DEBUGFLAGS=-g\n \n # CXXFLAGS can be specified on the make command line, so we use xCXXFLAGS that only\n # adds some defaults in front. Unfortunately, CXXFLAGS=... $(CXXFLAGS) does not work.\n-xCXXFLAGS=-O2 -pthread -Wall -Wextra -Wno-format -Wno-format-security -Wno-unused-parameter \\\n+xCXXFLAGS=-O2 -pthread -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter \\\n     $(DEBUGFLAGS) $(DEFS) $(HARDENING) $(CXXFLAGS)\n \n # LDFLAGS can be specified on the make command line, so we use xLDFLAGS that only"
      }
    ]
  }
]