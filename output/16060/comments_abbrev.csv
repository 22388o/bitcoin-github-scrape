jnewbery,2019-05-20 20:40:01,"@jl2012 originally attempted this in #11398, which had concept ACKs from @gmaxwell @dcousens and @sdaftuar . I then tried again in #12360, which got ACKs from @jamesob and @jtimon .",https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-494142593,494142593,
practicalswift,2019-05-20 20:47:05,Concept ACK,https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-494144897,494144897,
sipa,2019-05-20 21:35:22,Concept ACK,https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-494159426,494159426,
DrahtBot,2019-05-21 01:21:14,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#8994](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/8994.html) (Testchains: Introduce custom chain whose cons",https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-494203974,494203974,
jnewbery,2019-05-22 13:28:56,"Force-pushed to fix some minor issues from rebasing.\n\n> Wouldn't it help to split out the first commit, which changes how ISM deployments are reported?\n\nAll three commits change the output of `getblockchaininfo` and how soft forks are reported, so it makes sense to merge them in the same PR.",https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-494802524,494802524,
laanwj,2019-05-29 10:18:39,Concept ACK,https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-496877051,496877051,
jnewbery,2019-06-05 09:50:18,Thanks for the review @PastaPastaPasta . I've fixed your two comments.,https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-499016982,499016982,
jtimon,2019-06-13 10:54:51,"I didn't check the actual activation heights, but beyond that and my small nit, utACK f395b23aa0d125aa9534ff05df8d7ccd2d576868",https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-501653941,501653941,
meshcollider,2019-06-13 19:12:51,Concept ACK,https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-501841653,501841653,
moneyball,2019-06-14 19:04:03,"I've looked through the history of the 3 PRs trying to get this change merged, and there is widespread support for it, but we need to get it to the finish line! Now that it has been added to the high priority list, would one or two of the following folks be able to review this in the next week or so? @sdaftuar @TheBlueMatt @sipa @jl2012 🙏",https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-502227558,502227558,
instagibbs,2019-06-18 13:57:52,just noting there is a competing proposal at #16229,https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-503147403,503147403,
laanwj,2019-07-02 13:06:46,"> just noting there is a competing proposal at #16229\n\nWhy are there competing proposals? Is there a comparison sometimes of the pros/cons of either approach? ",https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-507668450,507668450,
jnewbery,2019-07-02 14:51:32,This needs release notes if it reaches a stage where it's ready for merge.,https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-507712233,507712233,
ajtowns,2019-07-02 15:08:54,"> Why are there competing proposals? Is there a comparison sometimes of the pros/cons of either approach?\n\nThe propsals take different approaches: this one (#16060) changes segwit/csv from bip9 deployments to be hardcoded fixed height deployments; the other one (#16229) generalises bip9 deployments to also support fixed height deployments, and converts strictder and cltv into this generalised ",https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-507719494,507719494,
jnewbery,2019-07-02 15:15:00,"> The propsals take different approaches....\n\nThanks @ajtowns - that seems like a good summary to me. I left a comment in your PR about why I prefer the approach here, which I'll copy below:\n\n---\n\nI prefer the approach in #16060. The changes in this PR seem more complex for achieving a similar goal (+110 lines here vs -70 lines in 16060)\n\n> I think this should make future burials m",https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-507721921,507721921,
jonasschnelli,2019-07-16 15:52:23,Concept ACK,https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-511876056,511876056,
jnewbery,2019-07-19 14:29:51,"Rebased\n\nThis PR (or earlier versions) have concept ACKs from:\n\n- @gmaxwell\n- @dcousens\n- @sdaftuar\n- @jamesob\n- @jtimon\n- @practicalswift\n- @sipa\n- @laanwj\n- @meshcollider\n- @jonasschnelli\n\nI'd really appreciate some code review to get this unblocked.",https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-513251113,513251113,
jnewbery,2019-07-24 21:00:30,Thanks for the review @MarcoFalke . I believe I've addressed all your comments.,https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-514798182,514798182,
jnewbery,2019-07-25 19:07:52,Oops. I dropped a change to the help text (here: https://github.com/bitcoin/bitcoin/pull/16060#discussion_r305496691). Force pushed to get those changes.,https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-515175297,515175297,
jnewbery,2019-07-29 22:04:13,"Thanks for the review @ajtowns \n\n> If we want to change the way getblockchaininfo reports softforks (and I think we do), we should split that out as a separate PR (like #16328 proposed) and review those changes independently, rather than forcing them in as part of tidying up the codebase.\n\nThis PR changes the way that softforks are reported, so that _buried_ softforks are reported as such.",https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-516180130,516180130,
jnewbery,2019-07-30 21:52:27,Pushed a commit to address @ajtowns feedback. I'll squash it into the appropriate commits if people are happy with it.,https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-516610214,516610214,
jnewbery,2019-07-31 15:26:58,Added another commit that removes the `height` return value entirely from BIP9 forks which are locked_in. That avoids having to add a bunch of BIP9 machinery for very little benefit.,https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-516898719,516898719,
jnewbery,2019-07-31 19:48:31,"I think all review comments are addressed. @sdaftuar @TheBlueMatt : can you re-review with the fixup commits? If you're happy, I'll squash.",https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-516994492,516994492,
jnewbery,2019-08-01 19:08:15,"Squashed the fixup commits and addressed @ajtowns comment here: https://github.com/bitcoin/bitcoin/pull/16060#discussion_r309561920\n\nPre-squashed branch is here: https://github.com/jnewbery/bitcoin/tree/pr16060.1\n\nThis is ready for re-review",https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-517418587,517418587,
jnewbery,2019-08-02 17:33:59,rebased,https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-517785024,517785024,
jnewbery,2019-08-06 19:25:52,Updated to address @MarcoFalke and @ajtowns comments. Thanks for the review!,https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-518809290,518809290,
jnewbery,2019-08-08 20:15:37,Thanks for the review @ariard . I think I've addressed all your comments.,https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-519671107,519671107,
ajtowns,2019-08-13 16:07:13,"ACK 20e60006de5015e057121b74b623698e96c0bfae ; code review, compiles, tests pass, reports same activation heights as master for segwit/csv on testnet/mainnet. I've not thoroughly reviewed the changes in the python tests.\n\nNits:\n * the first commit (""tidy up reporting..."") only touches validation.h and validation.cpp in order to add/remove blank lines\n * the constant 9223372036854775807 in ",https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-520900105,520900105,
jnewbery,2019-08-13 20:16:16,"Thanks @ajtowns . I've force-pushed a fix to those nits and also release notes.\n\nI also intend to send a post to the mailing list if this gets merged (I don't think a full BIP is necessary).\n\n> I tried drafting up a bip9 functional test making use of testdummy on regtest, but I'm not convinced it makes sense to do that directly rather than improving our bip9 implementation or improving bip",https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-520991924,520991924,
ajtowns,2019-08-14 01:01:56,">  (I don't think a full BIP is necessary)\n\nI agree; IMO that the heights are already included in https://github.com/bitcoin/bips/blob/master/bip-0009/assignments.mediawiki means the BIP side of things is already covered.",https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-521063462,521063462,
jnewbery,2019-08-14 19:54:06,Thanks for the review @ariard - I've addressed your comments.,https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-521394015,521394015,
ajtowns,2019-08-15 08:32:08,"ACK e78aaf41f43d0e2ad78fa6d8dad61032c8ef73d0 ; checked diff to previous acked commit, checked tests still work",https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-521561156,521561156,
ariard,2019-08-15 15:02:26,"ACK e78aaf4, check diff, run the tests again and successfully activated csv/segwit heights on mainnet as expected.",https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-521673701,521673701,
MarcoFalke,2019-08-15 20:00:54,"ACK e78aaf41f43d0e2ad78fa6d8dad61032c8ef73d0 (still didn't check if the mainnet block heights are correct, but the code looks good now)\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK e78aaf41f43d0e2ad78fa6d8dad61032c8ef73d0 (still didn't check if the mainnet block heights are correct, but the code ",https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-521776767,521776767,
PastaPastaPasta,2019-05-31 03:12:46,"based on https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c it appears this line should be on the line above with the bracket.\n`} else if (height == -1) {`",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r289244691,289244691,src/chainparams.cpp
PastaPastaPasta,2019-05-31 03:13:45,"same as above \nbased on https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c it appears this line should be on the line above with the bracket.",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r289244825,289244825,src/rpc/blockchain.cpp
jnewbery,2019-06-05 09:49:54,fixed,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r290660874,290660874,src/chainparams.cpp
jnewbery,2019-06-05 09:49:57,fixed,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r290660895,290660895,src/rpc/blockchain.cpp
laanwj,2019-06-05 11:41:59,"Checked blockhashes against bock chain, and checked the activation heights against `getblockchaininfo` that they match `since`\n```json\n  ""bip9_softforks"": {\n    ""csv"": {\n      ""status"": ""active"",\n      ""startTime"": 1462060800,\n      ""timeout"": 1493596800,\n      ""since"": 419328\n    },\n    ""segwit"": {\n      ""status"": ""active"",\n      ""startTime"": 1479168000,\n      ""timeout"": 1",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r290696589,290696589,src/chainparams.cpp
laanwj,2019-06-05 12:00:37,"It's slightly inconsistent how all of these (BIP34, BIP65, BIP66) are BIPxx and the new ones are written out as name. I don't personally mind, to be honest, I even think this is clearer than having numbers.",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r290702393,290702393,src/chainparams.cpp
laanwj,2019-06-05 12:09:07,"I like making this a object indexed by name, makes it easier to look one up in languages that treat them as dictionaries.",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r290705260,290705260,src/rpc/blockchain.cpp
merehap,2019-06-05 17:19:27,"Can this LOCK(cs_main) be removed just like the one in IsWitnessEnabled was? If it shouldn't be, the reason would be unintuitive, so could you leave a comment why it is still needed/desirable in that case?",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r290847743,290847743,src/validation.cpp
jtimon,2019-06-13 10:47:36,"It would be nicer to do something more generic that works for other deployments, not just segwit. For example, if anybody was relying on vparams to test csv activation, it won't be possible after this PR.\nBut perhaps this is out of the scope for this PR, \nWith something like https://github.com/bitcoin/bitcoin/pull/8994 we could simply make the all the buried heights configurable for custom reg",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r293316730,293316730,src/chainparams.cpp
jtimon,2019-06-13 10:53:00,"Perhaps we can call the argument ""-con_segwitheight"" like in #8994 ?",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r293318465,293318465,src/chainparams.cpp
promag,2019-06-30 13:49:56,"Agree, but this is a breaking change, seems unnecessary.",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r298835284,298835284,src/rpc/blockchain.cpp
jnewbery,2019-07-02 13:54:21,"Neither the CSV nor segwit softforks were specified by a single BIP. CSV was BIPs 68, 112, and 113 and segwit was BIPs 141, 143, and 147. We could go back and give BIP34, BIP65 and BIP66 'descriptive' names, but I think that's an unnecessary breaking change.",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r299495299,299495299,src/chainparams.cpp
jnewbery,2019-07-02 14:18:06,"Yes, it can. In fact, this function is only called from within `GetBlockScriptFlags()`, which holds `cs_main`. After this PR, this is now a simple one-line check, so I've removed the function and placed the conditional directly into `GetBlockScriptFlags()`.",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r299506710,299506710,src/validation.cpp
jnewbery,2019-07-02 14:21:42,"> I like making this a object indexed by name, makes it easier to look one up in languages that treat them as dictionaries.\n\nFor the benefit of other reviewers - that's what this PR does already.\n\n> this is a breaking change, seems unnecessary\n\nI doubt that there are many clients programmatically querying this, since the value never changes once it's locked in. After this PR, there don",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r299508451,299508451,src/rpc/blockchain.cpp
jnewbery,2019-07-02 14:22:49,"This argument is just for testing, so it's not disruptive to change this in future if we think the `-con_xxx` naming scheme is better. For now, I'd like to keep this as it is, rather than optimizing for a PR that hasn't been merged yet.",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r299509009,299509009,src/chainparams.cpp
promag,2019-07-02 14:28:20,"We are on the same page then, but for the sake of complaints, just add a small release note? @MarcoFalke also asked it above.",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r299511982,299511982,src/rpc/blockchain.cpp
sdaftuar,2019-07-19 17:54:31,"Should some explanation of buried deployments be given in the code, for future code readers?  Not sure if we have docs we can point to in our code somewhere already, but BIP 90 has some information if not.",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r305463041,305463041,src/rpc/blockchain.cpp
sdaftuar,2019-07-19 18:50:03,"""softfork codes"" seems like an odd phrase.  Perhaps something like ""This is used when merging logic to implement a proposed softfork without a specified deployment schedule""?",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r305482869,305482869,src/rpc/blockchain.cpp
sdaftuar,2019-07-19 19:06:20,Shouldn't we just remove this line?  This seems unnecessary...,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r305488449,305488449,src/rpc/blockchain.cpp
sdaftuar,2019-07-19 19:12:57,"I think this concept of ""type"" is slightly weird -- we're leaking an implementation detail that shouldn't have any bearing on how this information is used.  It seems strange to me that we'd distinguish between long-since-activated bip9 softforks, and buried softforks, when reporting to users.  Is the goal just to be able to indicate which entries will have a bip9 field and which ones won't?",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r305490525,305490525,src/rpc/blockchain.cpp
sdaftuar,2019-07-19 19:26:12,"If we get rid of this filtering and the needless invocation of this function on ""testdummy"" I think things would be simpler.\n\nActually, it looks like you do this so that you can test the RPC in regtest even after everything else is buried?  I guess code coverage of the RPC is a good reason to do it this way, if that's what you have in mind.",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r305494547,305494547,src/rpc/blockchain.cpp
sdaftuar,2019-07-19 19:32:37,"""are or will be enforced""?  That seems like more accurate phrasing if you're going to do this for LOCKED_IN rules.",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r305496434,305496434,src/rpc/blockchain.cpp
sdaftuar,2019-07-19 19:33:33,"Maybe ""true if the rules are enforced in the block that is the current chain tip"" to be more explicit about how to think about this for buried deployments?",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r305496691,305496691,src/rpc/blockchain.cpp
sdaftuar,2019-07-19 19:39:20,"I wonder if it's worth adding a comment here to explain that segwit v0 script rules are enforced on all blocks, other than the BIP 16 exception?",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r305499278,305499278,src/consensus/params.h
sdaftuar,2019-07-19 19:49:54,I don't love that we're leaking bip9 implementation calculations into the rpc code.  Though it is useful to see when a LOCKED_IN softfork will actually activate.  Can we invoke a method in the bip9 machinery instead?,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r305502345,305502345,src/rpc/blockchain.cpp
MarcoFalke,2019-07-19 20:14:34,"Since this interface change is a breaking change, I'd like to split this object up into a new rpc. When calling getblockchaininfo you are not really interested in the state of all softforks that ever happened, especially ones that have activated a long time ago.",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r305509869,305509869,src/rpc/blockchain.cpp
MarcoFalke,2019-07-19 20:16:24,"You'd have to hold `cs_main` from `VersionBitsTipState` to this line to protect against a race where a block comes in during this function.\n\nThough, I'd prefer to hold `cs_main` until the whole json softforks object is constructed.",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r305510398,305510398,src/rpc/blockchain.cpp
MarcoFalke,2019-07-19 20:18:56,Why remove the TODO?,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r305511170,305511170,src/test/setup_common.cpp
MarcoFalke,2019-07-19 21:53:07,"This has been changed in "" [RPC] getblockchaininfo: Loop through the bip9 soft fork deployments instead of hard coding #10874 "" and now you are changing it back again. I'd prefer to just keep one version and stick with it, especially if there is no reason to switch.",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r305536182,305536182,src/rpc/blockchain.cpp
jnewbery,2019-07-23 20:36:36,Thanks. Changed to use your wording.,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r306521009,306521009,src/rpc/blockchain.cpp
jnewbery,2019-07-23 20:53:59,"> Is the goal just to be able to indicate which entries will have a bip9 field and which ones won't?\n\nI think it's useful for users to know how the softfork logic is implemented. We could remove this and it be implicit that the activation method is bip9 if there's a bip9 object, but I think having the field makes the getblockchaininfo return object extensible if we have a different activation ",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r306528190,306528190,src/rpc/blockchain.cpp
jnewbery,2019-07-23 21:00:19,Added a short description and a reference to BIP 90.,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r306530713,306530713,src/rpc/blockchain.cpp
jnewbery,2019-07-24 13:03:47,Done. Added a `VersionBitsActivationHeight()` function to validation.cpp,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r306796851,306796851,src/rpc/blockchain.cpp
jnewbery,2019-07-24 13:05:53,Fixed,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r306797734,306797734,src/rpc/blockchain.cpp
jnewbery,2019-07-24 13:06:35,fixed,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r306798019,306798019,src/rpc/blockchain.cpp
jnewbery,2019-07-24 13:07:30,I think it's ok to leave this for testing BIP9 logic.,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r306798407,306798407,src/rpc/blockchain.cpp
jnewbery,2019-07-24 13:07:48,Leaving this in so we can continue to test BIP 9 logic.,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r306798539,306798539,src/rpc/blockchain.cpp
jnewbery,2019-07-24 20:35:10,`cs_main` is held for the duration of `getblockchaininfo()`. That's not changed by this PR.,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r307008898,307008898,src/rpc/blockchain.cpp
jnewbery,2019-07-24 20:40:55,"Thanks for digging that out. I really don't understand why that PR was merged. The author's justification (https://github.com/bitcoin/bitcoin/pull/10874#issuecomment-321609838) was ""I had only made the change since I needed to add stats about BIP 91 to one of my branches and the fact that the forks needed to be hard coded in to be displayed with getblockchaininfo bothered me."" It doesn't make sens",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r307011140,307011140,src/rpc/blockchain.cpp
jnewbery,2019-07-24 20:51:13,oops. Bad rebase. I've readded the message.,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r307015396,307015396,src/test/setup_common.cpp
jnewbery,2019-07-24 20:58:04,"(also, at the end of this PR, there's only one BIP9 softfork left (TESTDUMMY), so having a for loop _really_ doesn't make sense)",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r307018182,307018182,src/rpc/blockchain.cpp
jnewbery,2019-07-24 21:00:03,"I think some users _may_ be interested in which height the node started enforcing rules. Even though that's leaking some implementation detail (see https://github.com/bitcoin/bitcoin/pull/16060#discussion_r306528190), I think it's better to show more to the user than less.\n\nAs for adding a new RPC, that's even more of a breaking change for clients. For me, it makes most sense to return all blo",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r307019023,307019023,src/rpc/blockchain.cpp
MarcoFalke,2019-07-24 21:25:30,"Indeed, you are right.\n\nstyle-nit: You could add `EXCLUSIVE_LOCKS_REQUIRED` to `BIP9SoftForkDescPushBack` and it should still compile.",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r307028561,307028561,src/rpc/blockchain.cpp
jnewbery,2019-07-24 21:56:12,Done. I've added `EXCLUSIVE_LOCKS_REQUIRED(cs_main)` to `BuriedForkDescPushBack()` and `BIP9SoftForkDescPushBack()`.,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r307038724,307038724,src/rpc/blockchain.cpp
ajtowns,2019-07-24 23:53:15,"We leak the details on how we implement the fork deployment anyway -- at worst you could `invalidateblock` back to before the fork activated and query the fork state to see if it's buried or bip9. I think fork activation is important/risky enough that it's worthwhile explicitly revealing how it's being determined.\n\nIf we were to do a bip-16-like deployment or a fixed-height-after-bip9-expiry U",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r307066779,307066779,src/rpc/blockchain.cpp
TheBlueMatt,2019-07-25 17:53:09,"Oof, please do not add new exception throws, especially not in validation. Either assert false or return 0.",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r307424741,307424741,src/chainparams.cpp
ajtowns,2019-07-29 01:06:37,"This should be `VersionBitsTipActivationHeight` to match the other functions in validation.cpp (if there's orphaned blocks that aren't part of the most-work chain that has different signalling, those blocks can have a different activation height; that can occur with a single block reorg with sufficiently bad luck). Really the logic should be in versionbits.cpp as well and should use `Period(params",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r308028983,308028983,src/validation.cpp
ajtowns,2019-07-29 01:20:27,"Seems simpler to me to return `-1` as ""unknown activation height"" rather than having a new failure path.",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r308030132,308030132,src/validation.cpp
ajtowns,2019-07-29 01:46:33,"Seems odd to replace `IsNullDummyenabled()` with a hardcoded test, rather than `IsWitnessEnabled()`.",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r308032532,308032532,src/validation.cpp
ajtowns,2019-07-29 03:19:41,"I don't think this is sufficient -- getblocktemplate only populates `aRules` based on versionbits state so whether or not ""segwit"" is passed as an arg, it ends up outputting an empty array `{""rules"": []}` for the template. I think that conflicts with [BIP145](https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki): ""Transactions with witness data may only be included if the template's ""rul",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r308043941,308043941,src/rpc/mining.cpp
laanwj,2019-07-30 10:04:35,"As I understand this is not called during validation, but during argument parsing at start. This follows the example of the other parsing failures later in this function.",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r308638525,308638525,src/chainparams.cpp
jnewbery,2019-07-30 21:38:45,"I think we're not compliant with this part of BIP 145 anyway, specifically:\n\n> The '!' rule prefix MUST be enabled on the ""segwit"" rule for templates including transactions with witness data.\n\nThere's no code to insert the '!' in templates with blocks containing segwit transactions. I've also tested on master that `getblocktemplate` doesn't include `!segwit` as a rule for templates with wi",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r308954683,308954683,src/rpc/mining.cpp
jnewbery,2019-07-30 21:48:09,done,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r308958489,308958489,src/validation.cpp
jnewbery,2019-07-30 21:48:14,done,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r308958523,308958523,src/validation.cpp
jnewbery,2019-07-30 21:48:18,done,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r308958556,308958556,src/validation.cpp
jnewbery,2019-07-30 21:51:52,"Correct, this isn't called during validation, only during initialization:\n\n```\n→ bitcoind -segwitheight=99999999999999999999999999\nError: Activation height 9223372036854775807 for segwit is out of valid range. Use -1 to disable segwit.\n```",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r308959829,308959829,src/chainparams.cpp
ajtowns,2019-07-31 04:38:44,"I don't think it makes much sense to require `segwit` in the params if we're not going to bother reporting it ourselves. I think the additional code would just be:\n\n```\n    if (pindex->nHeight+1 >= consensusparams.CSVHeight) aRules.push_back(""csv"");\n    if (!fPreSegWit) aRules.push_back(""segwit"");\n```\n\n(also, could have said `fPreSegWit = !IsWitnessEnabled(pindexPrev, consensusParams",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r309036184,309036184,src/rpc/mining.cpp
ajtowns,2019-07-31 04:49:32,versionbits.cpp::VersionBitsActivationHeight() still has the throw rather than returning -1 as of 41fd9d327f544d0e2f1f419a9ca70282ef5d30d2 though there's a test to see if it returns -1 in rpc/blockchain.cpp,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r309037700,309037700,src/validation.cpp
ajtowns,2019-07-31 04:50:02,Making Period() a public member is cheating :),https://github.com/bitcoin/bitcoin/pull/16060#discussion_r309037779,309037779,src/validation.cpp
ajtowns,2019-07-31 04:51:21,The throw that occurs via validation.cpp is the `std::logic_error` when calling `VersionBits(Tip)ActivationHeight()` on a deployment that isn't locked in or active,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r309037949,309037949,src/chainparams.cpp
jnewbery,2019-07-31 15:13:12,"urgh. _None_ of the BIP9 code will be used after this PR. I've now moved logic from `rpc/blockchain.cpp` into `validation.cpp` after @sdaftuar's comment here: https://github.com/bitcoin/bitcoin/pull/16060#discussion_r305502345, then pulled it into `versionbits.cpp` because of your comment here https://github.com/bitcoin/bitcoin/pull/16060#discussion_r308028983.\n\nI can add even more machinery t",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r309277812,309277812,src/validation.cpp
jnewbery,2019-07-31 15:18:10,I've now removed that `std::logic_error`,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r309280540,309280540,src/chainparams.cpp
jnewbery,2019-07-31 15:18:24,fixed,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r309280672,309280672,src/validation.cpp
jnewbery,2019-07-31 15:29:47,I can't see how #9955 changed including the `!`. Am I missing something?,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r309287026,309287026,src/rpc/mining.cpp
ajtowns,2019-07-31 15:33:28,"Sorry, that was just meant as a tease, not a criticism or a suggestion to change it. The ThresholdConditionChecker API isn't great.",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r309288860,309288860,src/validation.cpp
jnewbery,2019-07-31 16:00:21,"ah, I see: https://github.com/bitcoin/bitcoin/pull/9955/files#diff-d6954440f0346f8e42dcd669dd4aeafaL20\n\n'force' is defined as ""Whether GBT clients can safely ignore this rule in simplified usage"" which seems backwards to me.",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r309302789,309302789,src/rpc/mining.cpp
luke-jr,2019-07-31 16:44:19,"I guess `gbt_force` is too unclear a parameter name...\n\nWe should fix this. Maybe in a separate PR.",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r309323261,309323261,src/rpc/mining.cpp
ajtowns,2019-08-01 07:42:50,This probably should be in chainparamsbase.cpp? At least that's where the help for -vbparams is.,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r309561920,309561920,src/init.cpp
jnewbery,2019-08-01 19:07:05,moved,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r309853116,309853116,src/init.cpp
MarcoFalke,2019-08-02 18:43:16,"Instead of adding a TODO in the code, why not replace the check in the tests `assert(nServices&NODE_WITNESS)` with `assert_debug_log(['Segwit disabled for testing'])` or something?\n\nThat way you could remove this whole hunk",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r310254109,310254109,src/init.cpp
MarcoFalke,2019-08-02 18:44:04,"Instead of explaining what the code does, you could explain why the code does?\n\n```suggestion\n    // Buried deployments with activation height value of std::numeric_limits<int>::max() are disabled and thus hidden.\n```",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r310254376,310254376,src/rpc/blockchain.cpp
MarcoFalke,2019-08-02 18:59:35,"You are setting the activation height to \n\n```\n+        consensus.CSVHeight = 432; // CSV activated on regtest (Used in rpc activation tests)\n```\n\nbut fail to update this comment.\n\nCan you use the same constant in the params and this comment, please?",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r310259666,310259666,test/functional/feature_csv_activation.py
ajtowns,2019-08-05 15:30:35,"I don't think this works -- p2p_segwit launches some nodes with `-segwitheight=120` and one with segwit disabled, and expects them to follow the same blockchain. But if you set NODE_WITNESS then when the first node thinks segwit is enabled at block 120, it'll send the witness data to the other node, which will then give an error message, ""AcceptBlock FAILED (unexpected-witness, ..."" and fail the t",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r310663615,310663615,src/init.cpp
ajtowns,2019-08-05 15:37:44,"*sigh* Probably should update the comment for `IsWitnessEnabled` above...\n\nMight be good to note that segwit is enforced for all transactions, and this function is only used for nulldummy and block-level things (ie, working out if you've upgraded and need to reprocess segwit blocks that you didn't download witness data for, if you should generate witness data for getblocktemplate, and so you c",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r310666975,310666975,src/validation.h
jnewbery,2019-08-06 19:25:05,comment updated,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r311234769,311234769,src/validation.h
jnewbery,2019-08-06 19:25:17,"done, and fixed a bunch of other comments in the test.",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r311234843,311234843,test/functional/feature_csv_activation.py
jnewbery,2019-08-06 19:25:27,I've taken your suggestion. Thanks,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r311234892,311234892,src/rpc/blockchain.cpp
ariard,2019-08-06 22:18:23,"nit: LOCKED_IN could also display a ""activate_at"" value based on the height of the beginning of the period + size of period",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r311299358,311299358,src/rpc/blockchain.cpp
ariard,2019-08-06 22:50:35,"Isn't this a cltv test ?  Buried height of BIP66 being inferior at BIP65, strict der-sig will always be activated before cltv, and height digits are almost the same, maybe use a CLTV_HEIGHT alias.",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r311307654,311307654,test/functional/feature_cltv.py
ariard,2019-08-06 23:14:27,Comment should be updated to drop versionbits ref,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r311313164,311313164,src/validation.cpp
ariard,2019-08-06 23:29:01,"Maybe the 2 aforementioned versionbits references should be updated, while top test comment with something similar to cltv : ""Test that CSV soft-fork activates at (regtest) block height 432"". ",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r311315964,311315964,test/functional/feature_bip68_sequence.py
ariard,2019-08-06 23:35:12,nit: top comment should be updated too?,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r311317239,311317239,test/functional/feature_csv_activation.py
ariard,2019-08-06 23:45:15,nit : is softfork_active defined in next commit could be used here?,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r311319244,311319244,test/functional/feature_dersig.py
ariard,2019-08-06 23:50:23,Wouldn't be better to CSV regtest value to be superior to BIP65 and so respect the historical activation order? Is there anyways activating MTP before BIP65 or others interact badly ?,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r311320238,311320238,src/chainparams.cpp
ariard,2019-08-07 00:35:50,"It's out of PR scope, but now that we don't need `pindexPrev` for the underlying `GetStateFor`, we may just pass `pindex`, assert it and return equality, a quick skim it may simplify callers, add a TODO?",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r311328416,311328416,src/validation.cpp
ajtowns,2019-08-07 04:54:29,"Good catch; good example of why not to use 'bipXXX' as identifiers imo. Also the first check should be something like:\n\n```diff\n-        self.test_cltv_info(is_active=True)\n+        self.test_cltv_info(is_active=False) # Not active as of current tip and next block does not need to obey rules\n```\n",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r311368097,311368097,test/functional/feature_cltv.py
ajtowns,2019-08-07 05:00:36,"I don't think that works for `UpdateUncommittedBlockStructures` or `BlockAssembler::CreateNewBlock`, so you'd still need this function to be available.",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r311369067,311369067,src/validation.cpp
ariard,2019-08-07 14:13:45,"Right these functions test for the next block to be generated/submitted based on the parent,  for them you may pass `pindexPrev->nHeight + 1` to `IsWitnessEnabled`, should work but need to refactor also callers ?",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r311576550,311576550,src/validation.cpp
jnewbery,2019-08-08 18:49:08,"This was in the original version of the PR, but Suhas didn't like that it leaked details of the BIP9 implementation into the RPC code (https://github.com/bitcoin/bitcoin/pull/16060#discussion_r305502345). I tried adding additional BIP9 code to expose just the activation height (https://github.com/bitcoin/bitcoin/pull/16060#issuecomment-516898719), but it didn't seem worth it so I ended up removing",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r312190834,312190834,src/rpc/blockchain.cpp
laanwj,2019-08-08 18:55:46,"imo: let's try not to circle around too much here, and get the consensus burying part merged, the RPC part can be improved in later PRs",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r312193798,312193798,src/rpc/blockchain.cpp
jnewbery,2019-08-08 19:18:20,"Great catch. This was careless on my part (copy-pasting from feature_dersig.py to feature_cltv.py).\n\nI've fixed this and added the comment as suggested by AJ.",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r312202350,312202350,test/functional/feature_cltv.py
jnewbery,2019-08-08 19:18:57,fixed,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r312202564,312202564,src/validation.cpp
jnewbery,2019-08-08 19:28:45,fixed,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r312206090,312206090,test/functional/feature_bip68_sequence.py
jnewbery,2019-08-08 19:49:40,fixed,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r312213601,312213601,test/functional/feature_csv_activation.py
jnewbery,2019-08-08 19:51:06,"this also tests the height and type, so I'll leave it as it is.",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r312214156,312214156,test/functional/feature_dersig.py
jnewbery,2019-08-08 19:53:39,"hmmm, it's an interesting point, but I don't think there's an issue here. Previously, feature_csv_activation.py activated CSV at height 576, so that was still before bip 65/66 activation.",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r312215131,312215131,src/chainparams.cpp
jnewbery,2019-08-08 19:58:31,"Right, I think this could also be refactored to take a `height` parameter and just return whether segwit should be enforced for a block at that height.\n\nWe can leave that for a follow-up PR if people think it's worthwhile.",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r312216999,312216999,src/validation.cpp
ajtowns,2019-08-13 15:41:39,"If it was going to take a height parameter, might as well just have the test in place directly. I don't think it's worth fiddling with for just segwit.",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r313470676,313470676,src/validation.cpp
ariard,2019-08-14 16:19:37,"nit: seems to me this check is just about enforcing BIP112, BIP 68 reference should be there ? Same with `LOCKTIME_VERIFY_SEQUENCE` beneath (even if these 2 BIPs are strongly tied, their enforcement is done by different components)",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r313964342,313964342,src/validation.cpp
ariard,2019-08-14 17:14:47,"nit : maybe you could add an assert not active before activation, just to be sure everything is clean after the send_blocks/invalidateblock sequence ",https://github.com/bitcoin/bitcoin/pull/16060#discussion_r313987861,313987861,test/functional/feature_csv_activation.py
jnewbery,2019-08-14 19:53:47,good spot. Fixed!,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r314054314,314054314,src/validation.cpp
jnewbery,2019-08-14 19:53:52,done,https://github.com/bitcoin/bitcoin/pull/16060#discussion_r314054355,314054355,test/functional/feature_csv_activation.py
