[
  {
    "sha": "3862e473f0cb71a762c0306b171b591341d58142",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODYyZTQ3M2YwY2I3MWE3NjJjMDMwNmIxNzFiNTkxMzQxZDU4MTQy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-05-20T18:58:09Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-08-13T19:53:02Z"
      },
      "message": "[rpc] Tidy up reporting of buried and ongoing softforks\n\nThis combines reporting of buried (formally ISM) softfork deployments\nand BIP9 versionbits softfork deployments into one JSON object in the\ngetblockchaininfo return object.",
      "tree": {
        "sha": "d7c981c6fc7292b289bce4fd22eb6f1c5c1a463c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7c981c6fc7292b289bce4fd22eb6f1c5c1a463c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3862e473f0cb71a762c0306b171b591341d58142",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3862e473f0cb71a762c0306b171b591341d58142",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3862e473f0cb71a762c0306b171b591341d58142",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3862e473f0cb71a762c0306b171b591341d58142/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a3d8b83571205b8329d4ee25537e3cc4397c3b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a3d8b83571205b8329d4ee25537e3cc4397c3b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a3d8b83571205b8329d4ee25537e3cc4397c3b8"
      }
    ],
    "stats": {
      "total": 180,
      "additions": 81,
      "deletions": 99
    },
    "files": [
      {
        "sha": "4e5fb2f00da176a026579de4f8a62ca1c2e97194",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 77,
        "changes": 143,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3862e473f0cb71a762c0306b171b591341d58142/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3862e473f0cb71a762c0306b171b591341d58142/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=3862e473f0cb71a762c0306b171b591341d58142",
        "patch": "@@ -1183,54 +1183,49 @@ static UniValue verifychain(const JSONRPCRequest& request)\n     return CVerifyDB().VerifyDB(Params(), pcoinsTip.get(), nCheckLevel, nCheckDepth);\n }\n \n-/** Implementation of IsSuperMajority with better feedback */\n-static UniValue SoftForkMajorityDesc(int version, const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n+static void BuriedForkDescPushBack(UniValue& softforks, const std::string &name, int height) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n-    UniValue rv(UniValue::VOBJ);\n-    bool activated = false;\n-    switch(version)\n-    {\n-        case 2:\n-            activated = pindex->nHeight >= consensusParams.BIP34Height;\n-            break;\n-        case 3:\n-            activated = pindex->nHeight >= consensusParams.BIP66Height;\n-            break;\n-        case 4:\n-            activated = pindex->nHeight >= consensusParams.BIP65Height;\n-            break;\n-    }\n-    rv.pushKV(\"status\", activated);\n-    return rv;\n-}\n+    // For buried deployments.\n+    // A buried deployment is one where the height of the activation has been hardcoded into\n+    // the client implementation long after the consensus change has activated. See BIP 90.\n+    // Buried deployments with activation height value of\n+    // std::numeric_limits<int>::max() are disabled and thus hidden.\n+    if (height == std::numeric_limits<int>::max()) return;\n \n-static UniValue SoftForkDesc(const std::string &name, int version, const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n-{\n     UniValue rv(UniValue::VOBJ);\n-    rv.pushKV(\"id\", name);\n-    rv.pushKV(\"version\", version);\n-    rv.pushKV(\"reject\", SoftForkMajorityDesc(version, pindex, consensusParams));\n-    return rv;\n+    rv.pushKV(\"type\", \"buried\");\n+    // getblockchaininfo reports the softfork as active from when the chain height is\n+    // one below the activation height\n+    rv.pushKV(\"active\", ::ChainActive().Tip()->nHeight + 1 >= height);\n+    rv.pushKV(\"height\", height);\n+    softforks.pushKV(name, rv);\n }\n \n-static UniValue BIP9SoftForkDesc(const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n+static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n-    UniValue rv(UniValue::VOBJ);\n+    // For BIP9 deployments.\n+    // Deployments (e.g. testdummy) with timeout value before Jan 1, 2009 are hidden.\n+    // A timeout value of 0 guarantees a softfork will never be activated.\n+    // This is used when merging logic to implement a proposed softfork without a specified deployment schedule.\n+    if (consensusParams.vDeployments[id].nTimeout <= 1230768000) return;\n+\n+    UniValue bip9(UniValue::VOBJ);\n     const ThresholdState thresholdState = VersionBitsTipState(consensusParams, id);\n     switch (thresholdState) {\n-    case ThresholdState::DEFINED: rv.pushKV(\"status\", \"defined\"); break;\n-    case ThresholdState::STARTED: rv.pushKV(\"status\", \"started\"); break;\n-    case ThresholdState::LOCKED_IN: rv.pushKV(\"status\", \"locked_in\"); break;\n-    case ThresholdState::ACTIVE: rv.pushKV(\"status\", \"active\"); break;\n-    case ThresholdState::FAILED: rv.pushKV(\"status\", \"failed\"); break;\n+    case ThresholdState::DEFINED: bip9.pushKV(\"status\", \"defined\"); break;\n+    case ThresholdState::STARTED: bip9.pushKV(\"status\", \"started\"); break;\n+    case ThresholdState::LOCKED_IN: bip9.pushKV(\"status\", \"locked_in\"); break;\n+    case ThresholdState::ACTIVE: bip9.pushKV(\"status\", \"active\"); break;\n+    case ThresholdState::FAILED: bip9.pushKV(\"status\", \"failed\"); break;\n     }\n     if (ThresholdState::STARTED == thresholdState)\n     {\n-        rv.pushKV(\"bit\", consensusParams.vDeployments[id].bit);\n+        bip9.pushKV(\"bit\", consensusParams.vDeployments[id].bit);\n     }\n-    rv.pushKV(\"startTime\", consensusParams.vDeployments[id].nStartTime);\n-    rv.pushKV(\"timeout\", consensusParams.vDeployments[id].nTimeout);\n-    rv.pushKV(\"since\", VersionBitsTipStateSinceHeight(consensusParams, id));\n+    bip9.pushKV(\"startTime\", consensusParams.vDeployments[id].nStartTime);\n+    bip9.pushKV(\"timeout\", consensusParams.vDeployments[id].nTimeout);\n+    int64_t since_height = VersionBitsTipStateSinceHeight(consensusParams, id);\n+    bip9.pushKV(\"since\", since_height);\n     if (ThresholdState::STARTED == thresholdState)\n     {\n         UniValue statsUV(UniValue::VOBJ);\n@@ -1240,18 +1235,18 @@ static UniValue BIP9SoftForkDesc(const Consensus::Params& consensusParams, Conse\n         statsUV.pushKV(\"elapsed\", statsStruct.elapsed);\n         statsUV.pushKV(\"count\", statsStruct.count);\n         statsUV.pushKV(\"possible\", statsStruct.possible);\n-        rv.pushKV(\"statistics\", statsUV);\n+        bip9.pushKV(\"statistics\", statsUV);\n     }\n-    return rv;\n-}\n \n-static void BIP9SoftForkDescPushBack(UniValue& bip9_softforks, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n-{\n-    // Deployments with timeout value of 0 are hidden.\n-    // A timeout value of 0 guarantees a softfork will never be activated.\n-    // This is used when softfork codes are merged without specifying the deployment schedule.\n-    if (consensusParams.vDeployments[id].nTimeout > 0)\n-        bip9_softforks.pushKV(VersionBitsDeploymentInfo[id].name, BIP9SoftForkDesc(consensusParams, id));\n+    UniValue rv(UniValue::VOBJ);\n+    rv.pushKV(\"type\", \"bip9\");\n+    rv.pushKV(\"bip9\", bip9);\n+    if (ThresholdState::ACTIVE == thresholdState) {\n+        rv.pushKV(\"height\", since_height);\n+    }\n+    rv.pushKV(\"active\", ThresholdState::ACTIVE == thresholdState);\n+\n+    softforks.pushKV(name, rv);\n }\n \n UniValue getblockchaininfo(const JSONRPCRequest& request)\n@@ -1275,29 +1270,25 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n             \"  \\\"pruneheight\\\": xxxxxx,        (numeric) lowest-height complete block stored (only present if pruning is enabled)\\n\"\n             \"  \\\"automatic_pruning\\\": xx,      (boolean) whether automatic pruning is enabled (only present if pruning is enabled)\\n\"\n             \"  \\\"prune_target_size\\\": xxxxxx,  (numeric) the target size used by pruning (only present if automatic pruning is enabled)\\n\"\n-            \"  \\\"softforks\\\": [                (array) status of softforks in progress\\n\"\n-            \"     {\\n\"\n-            \"        \\\"id\\\": \\\"xxxx\\\",           (string) name of softfork\\n\"\n-            \"        \\\"version\\\": xx,          (numeric) block version\\n\"\n-            \"        \\\"reject\\\": {             (object) progress toward rejecting pre-softfork blocks\\n\"\n-            \"           \\\"status\\\": xx,        (boolean) true if threshold reached\\n\"\n-            \"        },\\n\"\n-            \"     }, ...\\n\"\n-            \"  ],\\n\"\n-            \"  \\\"bip9_softforks\\\": {           (object) status of BIP9 softforks in progress\\n\"\n+            \"  \\\"softforks\\\": {                (object) status of softforks\\n\"\n             \"     \\\"xxxx\\\" : {                 (string) name of the softfork\\n\"\n-            \"        \\\"status\\\": \\\"xxxx\\\",       (string) one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\\n\"\n-            \"        \\\"bit\\\": xx,              (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\\n\"\n-            \"        \\\"startTime\\\": xx,        (numeric) the minimum median time past of a block at which the bit gains its meaning\\n\"\n-            \"        \\\"timeout\\\": xx,          (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\\n\"\n-            \"        \\\"since\\\": xx,            (numeric) height of the first block to which the status applies\\n\"\n-            \"        \\\"statistics\\\": {         (object) numeric statistics about BIP9 signalling for a softfork (only for \\\"started\\\" status)\\n\"\n-            \"           \\\"period\\\": xx,        (numeric) the length in blocks of the BIP9 signalling period \\n\"\n-            \"           \\\"threshold\\\": xx,     (numeric) the number of blocks with the version bit set required to activate the feature \\n\"\n-            \"           \\\"elapsed\\\": xx,       (numeric) the number of blocks elapsed since the beginning of the current period \\n\"\n-            \"           \\\"count\\\": xx,         (numeric) the number of blocks with the version bit set in the current period \\n\"\n-            \"           \\\"possible\\\": xx       (boolean) returns false if there are not enough blocks left in this period to pass activation threshold \\n\"\n-            \"        }\\n\"\n+            \"        \\\"type\\\": \\\"xxxx\\\",         (string) one of \\\"buried\\\", \\\"bip9\\\"\\n\"\n+            \"        \\\"bip9\\\": {               (object) status of bip9 softforks (only for \\\"bip9\\\" type)\\n\"\n+            \"           \\\"status\\\": \\\"xxxx\\\",    (string) one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\\n\"\n+            \"           \\\"bit\\\": xx,           (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\\n\"\n+            \"           \\\"startTime\\\": xx,     (numeric) the minimum median time past of a block at which the bit gains its meaning\\n\"\n+            \"           \\\"timeout\\\": xx,       (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\\n\"\n+            \"           \\\"since\\\": xx,         (numeric) height of the first block to which the status applies\\n\"\n+            \"           \\\"statistics\\\": {      (object) numeric statistics about BIP9 signalling for a softfork\\n\"\n+            \"              \\\"period\\\": xx,     (numeric) the length in blocks of the BIP9 signalling period \\n\"\n+            \"              \\\"threshold\\\": xx,  (numeric) the number of blocks with the version bit set required to activate the feature \\n\"\n+            \"              \\\"elapsed\\\": xx,    (numeric) the number of blocks elapsed since the beginning of the current period \\n\"\n+            \"              \\\"count\\\": xx,      (numeric) the number of blocks with the version bit set in the current period \\n\"\n+            \"              \\\"possible\\\": xx    (boolean) returns false if there are not enough blocks left in this period to pass activation threshold \\n\"\n+            \"           }\\n\"\n+            \"        },\\n\"\n+            \"        \\\"height\\\": \\\"xxxxxx\\\",     (numeric) height of the first block which the rules are or will be enforced (only for \\\"buried\\\" type, or \\\"bip9\\\" type with \\\"active\\\" status)\\n\"\n+            \"        \\\"active\\\": xx,           (boolean) true if the rules are enforced for the mempool and the next block\\n\"\n             \"     }\\n\"\n             \"  }\\n\"\n             \"  \\\"warnings\\\" : \\\"...\\\",           (string) any network and blockchain warnings.\\n\"\n@@ -1342,16 +1333,14 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     }\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n-    UniValue softforks(UniValue::VARR);\n-    UniValue bip9_softforks(UniValue::VOBJ);\n-    softforks.push_back(SoftForkDesc(\"bip34\", 2, tip, consensusParams));\n-    softforks.push_back(SoftForkDesc(\"bip66\", 3, tip, consensusParams));\n-    softforks.push_back(SoftForkDesc(\"bip65\", 4, tip, consensusParams));\n-    for (int pos = Consensus::DEPLOYMENT_CSV; pos != Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++pos) {\n-        BIP9SoftForkDescPushBack(bip9_softforks, consensusParams, static_cast<Consensus::DeploymentPos>(pos));\n-    }\n+    UniValue softforks(UniValue::VOBJ);\n+    BuriedForkDescPushBack(softforks, \"bip34\", consensusParams.BIP34Height);\n+    BuriedForkDescPushBack(softforks, \"bip66\", consensusParams.BIP66Height);\n+    BuriedForkDescPushBack(softforks, \"bip65\", consensusParams.BIP65Height);\n+    BIP9SoftForkDescPushBack(softforks, \"csv\", consensusParams, Consensus::DEPLOYMENT_CSV);\n+    BIP9SoftForkDescPushBack(softforks, \"segwit\", consensusParams, Consensus::DEPLOYMENT_SEGWIT);\n+    BIP9SoftForkDescPushBack(softforks, \"testdummy\", consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n     obj.pushKV(\"softforks\",             softforks);\n-    obj.pushKV(\"bip9_softforks\", bip9_softforks);\n \n     obj.pushKV(\"warnings\", GetWarnings(\"statusbar\"));\n     return obj;"
      },
      {
        "sha": "e00219ca4a5ae106bf910f8415cae2114a44aae0",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 7,
        "deletions": 10,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3862e473f0cb71a762c0306b171b591341d58142/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3862e473f0cb71a762c0306b171b591341d58142/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=3862e473f0cb71a762c0306b171b591341d58142",
        "patch": "@@ -69,14 +69,11 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def test_cltv_info(self, *, is_active):\n-        assert_equal(\n-            next(s for s in self.nodes[0].getblockchaininfo()['softforks'] if s['id'] == 'bip65'),\n+        assert_equal(self.nodes[0].getblockchaininfo()['softforks']['bip65'],\n             {\n-                \"id\": \"bip65\",\n-                \"version\": 4,\n-                \"reject\": {\n-                    \"status\": is_active\n-                }\n+                \"active\": is_active,\n+                \"height\": CLTV_HEIGHT,\n+                \"type\": \"buried\",\n             },\n         )\n \n@@ -104,9 +101,9 @@ def run_test(self):\n         block.hashMerkleRoot = block.calc_merkle_root()\n         block.solve()\n \n-        self.test_cltv_info(is_active=False)\n+        self.test_cltv_info(is_active=False)  # Not active as of current tip and next block does not need to obey rules\n         self.nodes[0].p2p.send_and_ping(msg_block(block))\n-        self.test_cltv_info(is_active=False)  # Not active as of current tip, but next block must obey rules\n+        self.test_cltv_info(is_active=True)  # Not active as of current tip, but next block must obey rules\n         assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n \n         self.log.info(\"Test that blocks must now be at least version 4\")\n@@ -155,7 +152,7 @@ def run_test(self):\n         block.hashMerkleRoot = block.calc_merkle_root()\n         block.solve()\n \n-        self.test_cltv_info(is_active=False)  # Not active as of current tip, but next block must obey rules\n+        self.test_cltv_info(is_active=True)  # Not active as of current tip, but next block must obey rules\n         self.nodes[0].p2p.send_and_ping(msg_block(block))\n         self.test_cltv_info(is_active=True)  # Active as of current tip\n         assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.sha256)"
      },
      {
        "sha": "1bd95863645b44166553f4bc57ba7987b4374554",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 7,
        "deletions": 10,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3862e473f0cb71a762c0306b171b591341d58142/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3862e473f0cb71a762c0306b171b591341d58142/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=3862e473f0cb71a762c0306b171b591341d58142",
        "patch": "@@ -52,14 +52,11 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def test_dersig_info(self, *, is_active):\n-        assert_equal(\n-            next(s for s in self.nodes[0].getblockchaininfo()['softforks'] if s['id'] == 'bip66'),\n+        assert_equal(self.nodes[0].getblockchaininfo()['softforks']['bip66'],\n             {\n-                \"id\": \"bip66\",\n-                \"version\": 3,\n-                \"reject\": {\n-                    \"status\": is_active\n-                }\n+                \"active\": is_active,\n+                \"height\": DERSIG_HEIGHT,\n+                \"type\": \"buried\",\n             },\n         )\n \n@@ -88,9 +85,9 @@ def run_test(self):\n         block.rehash()\n         block.solve()\n \n-        self.test_dersig_info(is_active=False)\n+        self.test_dersig_info(is_active=False)  # Not active as of current tip and next block does not need to obey rules\n         self.nodes[0].p2p.send_and_ping(msg_block(block))\n-        self.test_dersig_info(is_active=False)  # Not active as of current tip, but next block must obey rules\n+        self.test_dersig_info(is_active=True)  # Not active as of current tip, but next block must obey rules\n         assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n \n         self.log.info(\"Test that blocks must now be at least version 3\")\n@@ -144,7 +141,7 @@ def run_test(self):\n         block.rehash()\n         block.solve()\n \n-        self.test_dersig_info(is_active=False)  # Not active as of current tip, but next block must obey rules\n+        self.test_dersig_info(is_active=True)  # Not active as of current tip, but next block must obey rules\n         self.nodes[0].p2p.send_and_ping(msg_block(block))\n         self.test_dersig_info(is_active=True)  # Active as of current tip\n         assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.sha256)"
      },
      {
        "sha": "a3063f4781818ca8f8b7d97fd294e263e94b87ff",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3862e473f0cb71a762c0306b171b591341d58142/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3862e473f0cb71a762c0306b171b591341d58142/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=3862e473f0cb71a762c0306b171b591341d58142",
        "patch": "@@ -78,7 +78,6 @@ def _test_getblockchaininfo(self):\n \n         keys = [\n             'bestblockhash',\n-            'bip9_softforks',\n             'blocks',\n             'chain',\n             'chainwork',"
      },
      {
        "sha": "c25698fe89be20ec7e81f7d89e3348bcc4b9d3ce",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3862e473f0cb71a762c0306b171b591341d58142/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3862e473f0cb71a762c0306b171b591341d58142/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=3862e473f0cb71a762c0306b171b591341d58142",
        "patch": "@@ -344,7 +344,7 @@ def delete_cookie_file(datadir):\n \n def get_bip9_status(node, key):\n     info = node.getblockchaininfo()\n-    return info['bip9_softforks'][key]\n+    return info['softforks'][key]['bip9']\n \n def set_node_times(nodes, t):\n     for node in nodes:"
      }
    ]
  },
  {
    "sha": "1c93b9b31c2ab7358f9d55f52dd46340397c906d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzkzYjliMzFjMmFiNzM1OGY5ZDU1ZjUyZGQ0NjM0MDM5N2M5MDZk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-05-20T18:58:44Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-08-14T19:52:52Z"
      },
      "message": "[Consensus] Bury CSV deployment height\n\nHard code CSV deployment height to 419328 for mainnet.",
      "tree": {
        "sha": "968a17c7c72093b56e1d60818f8f4ca8806316ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/968a17c7c72093b56e1d60818f8f4ca8806316ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c93b9b31c2ab7358f9d55f52dd46340397c906d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c93b9b31c2ab7358f9d55f52dd46340397c906d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1c93b9b31c2ab7358f9d55f52dd46340397c906d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c93b9b31c2ab7358f9d55f52dd46340397c906d/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3862e473f0cb71a762c0306b171b591341d58142",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3862e473f0cb71a762c0306b171b591341d58142",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3862e473f0cb71a762c0306b171b591341d58142"
      }
    ],
    "stats": {
      "total": 152,
      "additions": 54,
      "deletions": 98
    },
    "files": [
      {
        "sha": "59c105817b20c073df7c138bff0ae26319f57e37",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 13,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c93b9b31c2ab7358f9d55f52dd46340397c906d/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c93b9b31c2ab7358f9d55f52dd46340397c906d/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=1c93b9b31c2ab7358f9d55f52dd46340397c906d",
        "patch": "@@ -69,6 +69,7 @@ class CMainParams : public CChainParams {\n         consensus.BIP34Hash = uint256S(\"0x000000000000024b89b42a942fe0d9fea3bb44ab7bd1b19115dd6a759c0808b8\");\n         consensus.BIP65Height = 388381; // 000000000000000004c2b624ed5d7756c508d90fd0da2c7c679febfa6c4735f0\n         consensus.BIP66Height = 363725; // 00000000000000000379eaa19dce8c9b722d46ae6a57c2f1a988119488b50931\n+        consensus.CSVHeight = 419328; // 000000000000000004a1b34462cb8aeebd5799177f7a29cf28f2d1961716b5b5\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -80,11 +81,6 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n \n-        // Deployment of BIP68, BIP112, and BIP113.\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1462060800; // May 1st, 2016\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n-\n         // Deployment of SegWit (BIP141, BIP143, and BIP147)\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1479168000; // November 15th, 2016.\n@@ -183,6 +179,7 @@ class CTestNetParams : public CChainParams {\n         consensus.BIP34Hash = uint256S(\"0x0000000023b3a96d3484e5abb3755c413e7d41500f8e2a5c3f0dd01299cd8ef8\");\n         consensus.BIP65Height = 581885; // 00000000007f6655f22f98e72ed80d8b06dc761d5da09df0fa1dc4be4f861eb6\n         consensus.BIP66Height = 330776; // 000000002104c8c45e99a8853285a3b592602a3ccde2b832481da85e9e4ba182\n+        consensus.CSVHeight = 770112; // 00000000025e930139bac5c6c31a403776da130831ab85be56578f3fa75369bb\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -194,11 +191,6 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n \n-        // Deployment of BIP68, BIP112, and BIP113.\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1456790400; // March 1st, 2016\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n-\n         // Deployment of SegWit (BIP141, BIP143, and BIP147)\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1462060800; // May 1st 2016\n@@ -275,6 +267,7 @@ class CRegTestParams : public CChainParams {\n         consensus.BIP34Hash = uint256();\n         consensus.BIP65Height = 1351; // BIP65 activated on regtest (Used in functional tests)\n         consensus.BIP66Height = 1251; // BIP66 activated on regtest (Used in functional tests)\n+        consensus.CSVHeight = 432; // CSV activated on regtest (Used in rpc activation tests)\n         consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -285,9 +278,6 @@ class CRegTestParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;"
      },
      {
        "sha": "69881ffdf2b2f34d8da07f590b336814b4cbf8d1",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c93b9b31c2ab7358f9d55f52dd46340397c906d/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c93b9b31c2ab7358f9d55f52dd46340397c906d/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=1c93b9b31c2ab7358f9d55f52dd46340397c906d",
        "patch": "@@ -16,7 +16,6 @@ namespace Consensus {\n enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,\n-    DEPLOYMENT_CSV, // Deployment of BIP68, BIP112, and BIP113.\n     DEPLOYMENT_SEGWIT, // Deployment of BIP141, BIP143, and BIP147.\n     // NOTE: Also add new deployments to VersionBitsDeploymentInfo in versionbits.cpp\n     MAX_VERSION_BITS_DEPLOYMENTS\n@@ -58,6 +57,8 @@ struct Params {\n     int BIP65Height;\n     /** Block height at which BIP66 becomes active */\n     int BIP66Height;\n+    /** Block height at which CSV (BIP68, BIP112 and BIP113) becomes active */\n+    int CSVHeight;\n     /**\n      * Minimum blocks including miner confirmation of the total of 2016 blocks in a retargeting period,\n      * (nPowTargetTimespan / nPowTargetSpacing) which is also used for BIP9 deployments."
      },
      {
        "sha": "808324afea67984dc7cd802630b2b1c1de22c7c0",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c93b9b31c2ab7358f9d55f52dd46340397c906d/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c93b9b31c2ab7358f9d55f52dd46340397c906d/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=1c93b9b31c2ab7358f9d55f52dd46340397c906d",
        "patch": "@@ -1337,7 +1337,7 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     BuriedForkDescPushBack(softforks, \"bip34\", consensusParams.BIP34Height);\n     BuriedForkDescPushBack(softforks, \"bip66\", consensusParams.BIP66Height);\n     BuriedForkDescPushBack(softforks, \"bip65\", consensusParams.BIP65Height);\n-    BIP9SoftForkDescPushBack(softforks, \"csv\", consensusParams, Consensus::DEPLOYMENT_CSV);\n+    BuriedForkDescPushBack(softforks, \"csv\", consensusParams.CSVHeight);\n     BIP9SoftForkDescPushBack(softforks, \"segwit\", consensusParams, Consensus::DEPLOYMENT_SEGWIT);\n     BIP9SoftForkDescPushBack(softforks, \"testdummy\", consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n     obj.pushKV(\"softforks\",             softforks);"
      },
      {
        "sha": "fc15b755a7c47855233ffa20808b78827d644c1c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c93b9b31c2ab7358f9d55f52dd46340397c906d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c93b9b31c2ab7358f9d55f52dd46340397c906d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=1c93b9b31c2ab7358f9d55f52dd46340397c906d",
        "patch": "@@ -1644,8 +1644,8 @@ static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consens\n         flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n     }\n \n-    // Start enforcing BIP68 (sequence locks) and BIP112 (CHECKSEQUENCEVERIFY) using versionbits logic.\n-    if (VersionBitsState(pindex->pprev, consensusparams, Consensus::DEPLOYMENT_CSV, versionbitscache) == ThresholdState::ACTIVE) {\n+    // Start enforcing BIP112 (CHECKSEQUENCEVERIFY)\n+    if (pindex->nHeight >= consensusparams.CSVHeight) {\n         flags |= SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;\n     }\n \n@@ -1834,9 +1834,9 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n         }\n     }\n \n-    // Start enforcing BIP68 (sequence locks) and BIP112 (CHECKSEQUENCEVERIFY) using versionbits logic.\n+    // Start enforcing BIP68 (sequence locks)\n     int nLockTimeFlags = 0;\n-    if (VersionBitsState(pindex->pprev, chainparams.GetConsensus(), Consensus::DEPLOYMENT_CSV, versionbitscache) == ThresholdState::ACTIVE) {\n+    if (pindex->nHeight >= chainparams.GetConsensus().CSVHeight) {\n         nLockTimeFlags |= LOCKTIME_VERIFY_SEQUENCE;\n     }\n \n@@ -3185,9 +3185,9 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n {\n     const int nHeight = pindexPrev == nullptr ? 0 : pindexPrev->nHeight + 1;\n \n-    // Start enforcing BIP113 (Median Time Past) using versionbits logic.\n+    // Start enforcing BIP113 (Median Time Past).\n     int nLockTimeFlags = 0;\n-    if (VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_CSV, versionbitscache) == ThresholdState::ACTIVE) {\n+    if (nHeight >= consensusParams.CSVHeight) {\n         assert(pindexPrev != nullptr);\n         nLockTimeFlags |= LOCKTIME_MEDIAN_TIME_PAST;\n     }"
      },
      {
        "sha": "60bfaace99f501af1d033ff713b5f6a016c012bb",
        "filename": "src/versionbitsinfo.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c93b9b31c2ab7358f9d55f52dd46340397c906d/src/versionbitsinfo.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c93b9b31c2ab7358f9d55f52dd46340397c906d/src/versionbitsinfo.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbitsinfo.cpp?ref=1c93b9b31c2ab7358f9d55f52dd46340397c906d",
        "patch": "@@ -11,10 +11,6 @@ const struct VBDeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_B\n         /*.name =*/ \"testdummy\",\n         /*.gbt_force =*/ true,\n     },\n-    {\n-        /*.name =*/ \"csv\",\n-        /*.gbt_force =*/ true,\n-    },\n     {\n         /*.name =*/ \"segwit\",\n         /*.gbt_force =*/ true,"
      },
      {
        "sha": "fe6f9eade1491b169618bd3e8935535cc6d7e9f4",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c93b9b31c2ab7358f9d55f52dd46340397c906d/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c93b9b31c2ab7358f9d55f52dd46340397c906d/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=1c93b9b31c2ab7358f9d55f52dd46340397c906d",
        "patch": "@@ -14,8 +14,8 @@\n     assert_equal,\n     assert_greater_than,\n     assert_raises_rpc_error,\n-    get_bip9_status,\n     satoshi_round,\n+    softfork_active,\n )\n \n SEQUENCE_LOCKTIME_DISABLE_FLAG = (1<<31)\n@@ -52,7 +52,7 @@ def run_test(self):\n         self.log.info(\"Running test sequence-lock-unconfirmed-inputs\")\n         self.test_sequence_lock_unconfirmed_inputs()\n \n-        self.log.info(\"Running test BIP68 not consensus before versionbits activation\")\n+        self.log.info(\"Running test BIP68 not consensus before activation\")\n         self.test_bip68_not_consensus()\n \n         self.log.info(\"Activating BIP68 (and 112/113)\")\n@@ -336,12 +336,12 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         self.nodes[0].invalidateblock(self.nodes[0].getblockhash(cur_height+1))\n         self.nodes[0].generate(10)\n \n-    # Make sure that BIP68 isn't being used to validate blocks, prior to\n-    # versionbits activation.  If more blocks are mined prior to this test\n+    # Make sure that BIP68 isn't being used to validate blocks prior to\n+    # activation height.  If more blocks are mined prior to this test\n     # being run, then it's possible the test has activated the soft fork, and\n     # this test should be moved to run earlier, or deleted.\n     def test_bip68_not_consensus(self):\n-        assert get_bip9_status(self.nodes[0], 'csv')['status'] != 'active'\n+        assert not softfork_active(self.nodes[0], 'csv')\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 2)\n \n         tx1 = FromHex(CTransaction(), self.nodes[0].getrawtransaction(txid))\n@@ -391,9 +391,9 @@ def activateCSV(self):\n         height = self.nodes[0].getblockcount()\n         assert_greater_than(min_activation_height - height, 2)\n         self.nodes[0].generate(min_activation_height - height - 2)\n-        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], \"locked_in\")\n+        assert not softfork_active(self.nodes[0], 'csv')\n         self.nodes[0].generate(1)\n-        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], \"active\")\n+        assert softfork_active(self.nodes[0], 'csv')\n         self.sync_blocks()\n \n     # Use self.nodes[1] to test that version 2 transactions are standard."
      },
      {
        "sha": "6bd321992abf14eecb72f3412facc40e5c8ff167",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 31,
        "deletions": 66,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c93b9b31c2ab7358f9d55f52dd46340397c906d/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c93b9b31c2ab7358f9d55f52dd46340397c906d/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=1c93b9b31c2ab7358f9d55f52dd46340397c906d",
        "patch": "@@ -2,23 +2,17 @@\n # Copyright (c) 2015-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test activation of the first version bits soft fork.\n+\"\"\"Test CSV soft fork activation.\n \n This soft fork will activate the following BIPS:\n BIP 68  - nSequence relative lock times\n BIP 112 - CHECKSEQUENCEVERIFY\n BIP 113 - MedianTimePast semantics for nLockTime\n \n-regtest lock-in with 108/144 block signalling\n-activation after a further 144 blocks\n-\n mine 82 blocks whose coinbases will be used to generate inputs for our tests\n-mine 61 blocks to transition from DEFINED to STARTED\n-mine 144 blocks only 100 of which are signaling readiness in order to fail to change state this period\n-mine 144 blocks with 108 signaling and verify STARTED->LOCKED_IN\n-mine 140 blocks and seed block chain with the 82 inputs will use for our tests at height 572\n-mine 3 blocks and verify still at LOCKED_IN and test that enforcement has not triggered\n-mine 1 block and test that enforcement has triggered (which triggers ACTIVE)\n+mine 345 blocks and seed block chain with the 82 inputs will use for our tests at height 427\n+mine 2 blocks and verify soft fork not yet activated\n+mine 1 block and test that soft fork is activated (rules enforced for next block)\n Test BIP 113 is enforced\n Mine 4 blocks so next height is 580 and test BIP 68 is enforced for time and height\n Mine 1 block so next height is 581 and test BIP 68 now passes time but not height\n@@ -58,11 +52,12 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    get_bip9_status,\n     hex_str_to_bytes,\n+    softfork_active,\n )\n \n BASE_RELATIVE_LOCKTIME = 10\n+CSV_ACTIVATION_HEIGHT = 432\n SEQ_DISABLE_FLAG = 1 << 31\n SEQ_RANDOM_HIGH_BIT = 1 << 25\n SEQ_TYPE_FLAG = 1 << 22\n@@ -148,20 +143,19 @@ def set_test_params(self):\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n-    def generate_blocks(self, number, version, test_blocks=None):\n-        if test_blocks is None:\n-            test_blocks = []\n+    def generate_blocks(self, number):\n+        test_blocks = []\n         for i in range(number):\n-            block = self.create_test_block([], version)\n+            block = self.create_test_block([])\n             test_blocks.append(block)\n             self.last_block_time += 600\n             self.tip = block.sha256\n             self.tipheight += 1\n         return test_blocks\n \n-    def create_test_block(self, txs, version=536870912):\n+    def create_test_block(self, txs):\n         block = create_block(self.tip, create_coinbase(self.tipheight + 1), self.last_block_time + 600)\n-        block.nVersion = version\n+        block.nVersion = 4\n         block.vtx.extend(txs)\n         block.hashMerkleRoot = block.calc_merkle_root()\n         block.rehash()\n@@ -187,45 +181,14 @@ def run_test(self):\n         self.tip = int(self.nodes[0].getbestblockhash(), 16)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n \n-        self.log.info(\"Test that the csv softfork is DEFINED\")\n-        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'defined')\n-        test_blocks = self.generate_blocks(61, 4)\n-        self.send_blocks(test_blocks)\n-\n-        self.log.info(\"Advance from DEFINED to STARTED, height = 143\")\n-        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'started')\n-\n-        self.log.info(\"Fail to achieve LOCKED_IN\")\n-        # 100 out of 144 signal bit 0. Use a variety of bits to simulate multiple parallel softforks\n-\n-        test_blocks = self.generate_blocks(50, 536870913)  # 0x20000001 (signalling ready)\n-        test_blocks = self.generate_blocks(20, 4, test_blocks)  # 0x00000004 (signalling not)\n-        test_blocks = self.generate_blocks(50, 536871169, test_blocks)  # 0x20000101 (signalling ready)\n-        test_blocks = self.generate_blocks(24, 536936448, test_blocks)  # 0x20010000 (signalling not)\n-        self.send_blocks(test_blocks)\n-\n-        self.log.info(\"Failed to advance past STARTED, height = 287\")\n-        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'started')\n-\n-        self.log.info(\"Generate blocks to achieve LOCK-IN\")\n-        # 108 out of 144 signal bit 0 to achieve lock-in\n-        # using a variety of bits to simulate multiple parallel softforks\n-        test_blocks = self.generate_blocks(58, 536870913)  # 0x20000001 (signalling ready)\n-        test_blocks = self.generate_blocks(26, 4, test_blocks)  # 0x00000004 (signalling not)\n-        test_blocks = self.generate_blocks(50, 536871169, test_blocks)  # 0x20000101 (signalling ready)\n-        test_blocks = self.generate_blocks(10, 536936448, test_blocks)  # 0x20010000 (signalling not)\n-        self.send_blocks(test_blocks)\n-\n-        self.log.info(\"Advanced from STARTED to LOCKED_IN, height = 431\")\n-        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'locked_in')\n-\n-        # Generate 140 more version 4 blocks\n-        test_blocks = self.generate_blocks(140, 4)\n+        # Activation height is hardcoded\n+        test_blocks = self.generate_blocks(345)\n         self.send_blocks(test_blocks)\n+        assert not softfork_active(self.nodes[0], 'csv')\n \n-        # Inputs at height = 572\n+        # Inputs at height = 431\n         #\n-        # Put inputs for all tests in the chain at height 572 (tip now = 571) (time increases by 600s per block)\n+        # Put inputs for all tests in the chain at height 431 (tip now = 430) (time increases by 600s per block)\n         # Note we reuse inputs for v1 and v2 txs so must test these separately\n         # 16 normal inputs\n         bip68inputs = []\n@@ -255,19 +218,20 @@ def run_test(self):\n         bip113input = send_generic_input_tx(self.nodes[0], self.coinbase_blocks, self.nodeaddress)\n \n         self.nodes[0].setmocktime(self.last_block_time + 600)\n-        inputblockhash = self.nodes[0].generate(1)[0]  # 1 block generated for inputs to be in chain at height 572\n+        inputblockhash = self.nodes[0].generate(1)[0]  # 1 block generated for inputs to be in chain at height 431\n         self.nodes[0].setmocktime(0)\n         self.tip = int(inputblockhash, 16)\n         self.tipheight += 1\n         self.last_block_time += 600\n         assert_equal(len(self.nodes[0].getblock(inputblockhash, True)[\"tx\"]), 82 + 1)\n \n         # 2 more version 4 blocks\n-        test_blocks = self.generate_blocks(2, 4)\n+        test_blocks = self.generate_blocks(2)\n         self.send_blocks(test_blocks)\n \n-        self.log.info(\"Not yet advanced to ACTIVE, height = 574 (will activate for block 576, not 575)\")\n-        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'locked_in')\n+        assert_equal(self.tipheight, CSV_ACTIVATION_HEIGHT - 2)\n+        self.log.info(\"Height = {}, CSV not yet active (will activate for block {}, not {})\".format(self.tipheight, CSV_ACTIVATION_HEIGHT, CSV_ACTIVATION_HEIGHT - 1))\n+        assert not softfork_active(self.nodes[0], 'csv')\n \n         # Test both version 1 and version 2 transactions for all tests\n         # BIP113 test transaction will be modified before each use to put in appropriate block time\n@@ -340,10 +304,11 @@ def run_test(self):\n         self.send_blocks([self.create_test_block(success_txs)])\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n-        # 1 more version 4 block to get us to height 575 so the fork should now be active for the next block\n-        test_blocks = self.generate_blocks(1, 4)\n+        # 1 more version 4 block to get us to height 432 so the fork should now be active for the next block\n+        assert not softfork_active(self.nodes[0], 'csv')\n+        test_blocks = self.generate_blocks(1)\n         self.send_blocks(test_blocks)\n-        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'active')\n+        assert softfork_active(self.nodes[0], 'csv')\n \n         self.log.info(\"Post-Soft Fork Tests.\")\n \n@@ -364,8 +329,8 @@ def run_test(self):\n             self.send_blocks([self.create_test_block([bip113tx])])\n             self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n-        # Next block height = 580 after 4 blocks of random version\n-        test_blocks = self.generate_blocks(4, 1234)\n+        # Next block height = 437 after 4 blocks of random version\n+        test_blocks = self.generate_blocks(4)\n         self.send_blocks(test_blocks)\n \n         self.log.info(\"BIP 68 tests\")\n@@ -392,8 +357,8 @@ def run_test(self):\n         for tx in bip68heighttxs:\n             self.send_blocks([self.create_test_block([tx])], success=False)\n \n-        # Advance one block to 581\n-        test_blocks = self.generate_blocks(1, 1234)\n+        # Advance one block to 438\n+        test_blocks = self.generate_blocks(1)\n         self.send_blocks(test_blocks)\n \n         # Height txs should fail and time txs should now pass 9 * 600 > 10 * 512\n@@ -403,8 +368,8 @@ def run_test(self):\n         for tx in bip68heighttxs:\n             self.send_blocks([self.create_test_block([tx])], success=False)\n \n-        # Advance one block to 582\n-        test_blocks = self.generate_blocks(1, 1234)\n+        # Advance one block to 439\n+        test_blocks = self.generate_blocks(1)\n         self.send_blocks(test_blocks)\n \n         # All BIP 68 txs should pass"
      },
      {
        "sha": "095e0e3e7bf5188aa25af7cb4cde2f116fdccd5c",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c93b9b31c2ab7358f9d55f52dd46340397c906d/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c93b9b31c2ab7358f9d55f52dd46340397c906d/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=1c93b9b31c2ab7358f9d55f52dd46340397c906d",
        "patch": "@@ -346,6 +346,10 @@ def get_bip9_status(node, key):\n     info = node.getblockchaininfo()\n     return info['softforks'][key]['bip9']\n \n+def softfork_active(node, key):\n+    \"\"\"Return whether a softfork is active.\"\"\"\n+    return node.getblockchaininfo()['softforks'][key]['active']\n+\n def set_node_times(nodes, t):\n     for node in nodes:\n         node.setmocktime(t)"
      }
    ]
  },
  {
    "sha": "0328dcdcfcb56dc8918697716d7686be048ad0b3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzI4ZGNkY2ZjYjU2ZGM4OTE4Njk3NzE2ZDc2ODZiZTA0OGFkMGIz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-05-20T18:59:07Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-08-14T19:52:52Z"
      },
      "message": "[Consensus] Bury segwit deployment\n\nHardcode segwit deployment height to 481824 for mainnet.",
      "tree": {
        "sha": "c4c4bed225e5d08d9af5f007941ab5261147e256",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4c4bed225e5d08d9af5f007941ab5261147e256"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0328dcdcfcb56dc8918697716d7686be048ad0b3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0328dcdcfcb56dc8918697716d7686be048ad0b3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0328dcdcfcb56dc8918697716d7686be048ad0b3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0328dcdcfcb56dc8918697716d7686be048ad0b3/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c93b9b31c2ab7358f9d55f52dd46340397c906d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c93b9b31c2ab7358f9d55f52dd46340397c906d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c93b9b31c2ab7358f9d55f52dd46340397c906d"
      }
    ],
    "stats": {
      "total": 184,
      "additions": 71,
      "deletions": 113
    },
    "files": [
      {
        "sha": "ad766471dc13322206546d2437fe6c61eabd2cd1",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 16,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0328dcdcfcb56dc8918697716d7686be048ad0b3/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0328dcdcfcb56dc8918697716d7686be048ad0b3/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=0328dcdcfcb56dc8918697716d7686be048ad0b3",
        "patch": "@@ -70,6 +70,7 @@ class CMainParams : public CChainParams {\n         consensus.BIP65Height = 388381; // 000000000000000004c2b624ed5d7756c508d90fd0da2c7c679febfa6c4735f0\n         consensus.BIP66Height = 363725; // 00000000000000000379eaa19dce8c9b722d46ae6a57c2f1a988119488b50931\n         consensus.CSVHeight = 419328; // 000000000000000004a1b34462cb8aeebd5799177f7a29cf28f2d1961716b5b5\n+        consensus.SegwitHeight = 481824; // 0000000000000000001c8018d9cb3b742ef25114f27563e3fc4a1902167f9893\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -81,11 +82,6 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n \n-        // Deployment of SegWit (BIP141, BIP143, and BIP147)\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1479168000; // November 15th, 2016.\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1510704000; // November 15th, 2017.\n-\n         // The best chain should have at least this much work.\n         consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000051dc8b82f450202ecb3d471\");\n \n@@ -180,6 +176,7 @@ class CTestNetParams : public CChainParams {\n         consensus.BIP65Height = 581885; // 00000000007f6655f22f98e72ed80d8b06dc761d5da09df0fa1dc4be4f861eb6\n         consensus.BIP66Height = 330776; // 000000002104c8c45e99a8853285a3b592602a3ccde2b832481da85e9e4ba182\n         consensus.CSVHeight = 770112; // 00000000025e930139bac5c6c31a403776da130831ab85be56578f3fa75369bb\n+        consensus.SegwitHeight = 834624; // 00000000002b980fcd729daaa248fd9316a5200e9b367f4ff2c42453e84201ca\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -191,11 +188,6 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n \n-        // Deployment of SegWit (BIP141, BIP143, and BIP147)\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1462060800; // May 1st 2016\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1493596800; // May 1st 2017\n-\n         // The best chain should have at least this much work.\n         consensus.nMinimumChainWork = uint256S(\"0x00000000000000000000000000000000000000000000007dbe94253893cbd463\");\n \n@@ -268,6 +260,7 @@ class CRegTestParams : public CChainParams {\n         consensus.BIP65Height = 1351; // BIP65 activated on regtest (Used in functional tests)\n         consensus.BIP66Height = 1251; // BIP66 activated on regtest (Used in functional tests)\n         consensus.CSVHeight = 432; // CSV activated on regtest (Used in rpc activation tests)\n+        consensus.SegwitHeight = 0; // SEGWIT is always activated on regtest unless overridden\n         consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -278,9 +271,6 @@ class CRegTestParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n \n         // The best chain should have at least this much work.\n         consensus.nMinimumChainWork = uint256S(\"0x00\");\n@@ -297,7 +287,7 @@ class CRegTestParams : public CChainParams {\n         m_assumed_blockchain_size = 0;\n         m_assumed_chain_state_size = 0;\n \n-        UpdateVersionBitsParametersFromArgs(args);\n+        UpdateActivationParametersFromArgs(args);\n \n         genesis = CreateGenesisBlock(1296688602, 2, 0x207fffff, 1, 50 * COIN);\n         consensus.hashGenesisBlock = genesis.GetHash();\n@@ -340,11 +330,22 @@ class CRegTestParams : public CChainParams {\n         consensus.vDeployments[d].nStartTime = nStartTime;\n         consensus.vDeployments[d].nTimeout = nTimeout;\n     }\n-    void UpdateVersionBitsParametersFromArgs(const ArgsManager& args);\n+    void UpdateActivationParametersFromArgs(const ArgsManager& args);\n };\n \n-void CRegTestParams::UpdateVersionBitsParametersFromArgs(const ArgsManager& args)\n+void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n {\n+    if (gArgs.IsArgSet(\"-segwitheight\")) {\n+        int64_t height = gArgs.GetArg(\"-segwitheight\", consensus.SegwitHeight);\n+        if (height < -1 || height >= std::numeric_limits<int>::max()) {\n+            throw std::runtime_error(strprintf(\"Activation height %ld for segwit is out of valid range. Use -1 to disable segwit.\", height));\n+        } else if (height == -1) {\n+            LogPrintf(\"Segwit disabled for testing\\n\");\n+            height = std::numeric_limits<int>::max();\n+        }\n+        consensus.SegwitHeight = static_cast<int>(height);\n+    }\n+\n     if (!args.IsArgSet(\"-vbparams\")) return;\n \n     for (const std::string& strDeployment : args.GetArgs(\"-vbparams\")) {"
      },
      {
        "sha": "9b98dff3caf7b9d433e153c46e796faaff438166",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0328dcdcfcb56dc8918697716d7686be048ad0b3/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0328dcdcfcb56dc8918697716d7686be048ad0b3/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=0328dcdcfcb56dc8918697716d7686be048ad0b3",
        "patch": "@@ -19,6 +19,7 @@ void SetupChainParamsBaseOptions()\n {\n     gArgs.AddArg(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n                                    \"This is intended for regression testing tools and app development.\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-segwitheight=<n>\", \"Set the activation height of segwit. -1 to disable. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-testnet\", \"Use the test chain\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n }"
      },
      {
        "sha": "8263b0fef4a895e0d443eb5e19a14448bc1d4faf",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0328dcdcfcb56dc8918697716d7686be048ad0b3/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0328dcdcfcb56dc8918697716d7686be048ad0b3/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=0328dcdcfcb56dc8918697716d7686be048ad0b3",
        "patch": "@@ -16,7 +16,6 @@ namespace Consensus {\n enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,\n-    DEPLOYMENT_SEGWIT, // Deployment of BIP141, BIP143, and BIP147.\n     // NOTE: Also add new deployments to VersionBitsDeploymentInfo in versionbits.cpp\n     MAX_VERSION_BITS_DEPLOYMENTS\n };\n@@ -59,6 +58,10 @@ struct Params {\n     int BIP66Height;\n     /** Block height at which CSV (BIP68, BIP112 and BIP113) becomes active */\n     int CSVHeight;\n+    /** Block height at which Segwit (BIP141, BIP143 and BIP147) becomes active.\n+     * Note that segwit v0 script rules are enforced on all blocks except the\n+     * BIP 16 exception blocks. */\n+    int SegwitHeight;\n     /**\n      * Minimum blocks including miner confirmation of the total of 2016 blocks in a retargeting period,\n      * (nPowTargetTimespan / nPowTargetSpacing) which is also used for BIP9 deployments."
      },
      {
        "sha": "ab48dd4200a0ae7bafb9507b031ef42cfee445a7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0328dcdcfcb56dc8918697716d7686be048ad0b3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0328dcdcfcb56dc8918697716d7686be048ad0b3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0328dcdcfcb56dc8918697716d7686be048ad0b3",
        "patch": "@@ -1670,12 +1670,9 @@ bool AppInitMain(InitInterfaces& interfaces)\n         }\n     }\n \n-    if (chainparams.GetConsensus().vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout != 0) {\n-        // Only advertise witness capabilities if they have a reasonable start time.\n-        // This allows us to have the code merged without a defined softfork, by setting its\n-        // end time to 0.\n-        // Note that setting NODE_WITNESS is never required: the only downside from not\n-        // doing so is that after activation, no upgraded nodes will fetch from you.\n+    if (chainparams.GetConsensus().SegwitHeight != std::numeric_limits<int>::max()) {\n+        // Advertise witness capabilities.\n+        // The option to not set NODE_WITNESS is only used in the tests and should be removed.\n         nLocalServices = ServiceFlags(nLocalServices | NODE_WITNESS);\n     }\n "
      },
      {
        "sha": "cd98b6c1bc7020c73207b27b79e41a82d0ef76f1",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0328dcdcfcb56dc8918697716d7686be048ad0b3/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0328dcdcfcb56dc8918697716d7686be048ad0b3/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=0328dcdcfcb56dc8918697716d7686be048ad0b3",
        "patch": "@@ -1338,7 +1338,7 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     BuriedForkDescPushBack(softforks, \"bip66\", consensusParams.BIP66Height);\n     BuriedForkDescPushBack(softforks, \"bip65\", consensusParams.BIP65Height);\n     BuriedForkDescPushBack(softforks, \"csv\", consensusParams.CSVHeight);\n-    BIP9SoftForkDescPushBack(softforks, \"segwit\", consensusParams, Consensus::DEPLOYMENT_SEGWIT);\n+    BuriedForkDescPushBack(softforks, \"segwit\", consensusParams.SegwitHeight);\n     BIP9SoftForkDescPushBack(softforks, \"testdummy\", consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n     obj.pushKV(\"softforks\",             softforks);\n "
      },
      {
        "sha": "13bf611d329c4c1b7ea684c47881fbaacedead3d",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0328dcdcfcb56dc8918697716d7686be048ad0b3/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0328dcdcfcb56dc8918697716d7686be048ad0b3/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=0328dcdcfcb56dc8918697716d7686be048ad0b3",
        "patch": "@@ -482,9 +482,8 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n         // TODO: Maybe recheck connections/IBD and (if something wrong) send an expires-immediately template to stop miners?\n     }\n \n-    const struct VBDeploymentInfo& segwit_info = VersionBitsDeploymentInfo[Consensus::DEPLOYMENT_SEGWIT];\n     // GBT must be called with 'segwit' set in the rules\n-    if (setClientRules.count(segwit_info.name) != 1) {\n+    if (setClientRules.count(\"segwit\") != 1) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"getblocktemplate must be called with the segwit rule set (call with {\\\"rules\\\": [\\\"segwit\\\"]})\");\n     }\n \n@@ -521,7 +520,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n     pblock->nNonce = 0;\n \n     // NOTE: If at some point we support pre-segwit miners post-segwit-activation, this needs to take segwit support into consideration\n-    const bool fPreSegWit = (ThresholdState::ACTIVE != VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT, versionbitscache));\n+    const bool fPreSegWit = (pindexPrev->nHeight + 1 < consensusParams.SegwitHeight);\n \n     UniValue aCaps(UniValue::VARR); aCaps.push_back(\"proposal\");\n "
      },
      {
        "sha": "4d928264b7cea3dab973e44ea0292aa732b419e8",
        "filename": "src/test/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0328dcdcfcb56dc8918697716d7686be048ad0b3/src/test/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0328dcdcfcb56dc8918697716d7686be048ad0b3/src/test/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/setup_common.cpp?ref=0328dcdcfcb56dc8918697716d7686be048ad0b3",
        "patch": "@@ -122,7 +122,7 @@ TestChain100Setup::TestChain100Setup() : TestingSetup(CBaseChainParams::REGTEST)\n {\n     // CreateAndProcessBlock() does not support building SegWit blocks, so don't activate in these tests.\n     // TODO: fix the code to support SegWit blocks.\n-    gArgs.ForceSetArg(\"-vbparams\", strprintf(\"segwit:0:%d\", (int64_t)Consensus::BIP9Deployment::NO_TIMEOUT));\n+    gArgs.ForceSetArg(\"-segwitheight\", \"432\");\n     SelectParams(CBaseChainParams::REGTEST);\n \n     // Generate a 100-block chain:"
      },
      {
        "sha": "ab45ec86e84d8e56aee6f5ec89feb4ba20d0bae9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 12,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0328dcdcfcb56dc8918697716d7686be048ad0b3/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0328dcdcfcb56dc8918697716d7686be048ad0b3/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0328dcdcfcb56dc8918697716d7686be048ad0b3",
        "patch": "@@ -1608,7 +1608,7 @@ static ThresholdConditionCache warningcache[VERSIONBITS_NUM_BITS] GUARDED_BY(cs_\n // environment. See test/functional/p2p-segwit.py.\n static bool IsScriptWitnessEnabled(const Consensus::Params& params)\n {\n-    return params.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout != 0;\n+    return params.SegwitHeight != std::numeric_limits<int>::max();\n }\n \n static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& consensusparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n@@ -1649,7 +1649,8 @@ static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consens\n         flags |= SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;\n     }\n \n-    if (IsNullDummyEnabled(pindex->pprev, consensusparams)) {\n+    // Start enforcing BIP147 NULLDUMMY (activated simultaneously with segwit)\n+    if (IsWitnessEnabled(pindex->pprev, consensusparams)) {\n         flags |= SCRIPT_VERIFY_NULLDUMMY;\n     }\n \n@@ -3045,14 +3046,8 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n \n bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n {\n-    LOCK(cs_main);\n-    return (VersionBitsState(pindexPrev, params, Consensus::DEPLOYMENT_SEGWIT, versionbitscache) == ThresholdState::ACTIVE);\n-}\n-\n-bool IsNullDummyEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n-{\n-    LOCK(cs_main);\n-    return (VersionBitsState(pindexPrev, params, Consensus::DEPLOYMENT_SEGWIT, versionbitscache) == ThresholdState::ACTIVE);\n+    int height = pindexPrev == nullptr ? 0 : pindexPrev->nHeight + 1;\n+    return (height >= params.SegwitHeight);\n }\n \n // Compute at which vout of the block's coinbase transaction the witness\n@@ -3087,7 +3082,7 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n     std::vector<unsigned char> commitment;\n     int commitpos = GetWitnessCommitmentIndex(block);\n     std::vector<unsigned char> ret(32, 0x00);\n-    if (consensusParams.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout != 0) {\n+    if (consensusParams.SegwitHeight != std::numeric_limits<int>::max()) {\n         if (commitpos == -1) {\n             uint256 witnessroot = BlockWitnessMerkleRoot(block, nullptr);\n             CHash256().Write(witnessroot.begin(), 32).Write(ret.data(), 32).Finalize(witnessroot.begin());\n@@ -3222,7 +3217,7 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n     //   {0xaa, 0x21, 0xa9, 0xed}, and the following 32 bytes are SHA256^2(witness root, witness reserved value). In case there are\n     //   multiple, the last one is used.\n     bool fHaveWitness = false;\n-    if (VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT, versionbitscache) == ThresholdState::ACTIVE) {\n+    if (nHeight >= consensusParams.SegwitHeight) {\n         int commitpos = GetWitnessCommitmentIndex(block);\n         if (commitpos != -1) {\n             bool malleated = false;"
      },
      {
        "sha": "585a42849d18f2445f30dcd25bcd6e792d78ea16",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0328dcdcfcb56dc8918697716d7686be048ad0b3/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0328dcdcfcb56dc8918697716d7686be048ad0b3/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=0328dcdcfcb56dc8918697716d7686be048ad0b3",
        "patch": "@@ -383,12 +383,10 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n /** Check a block is completely valid from start to finish (only works on top of our current best block) */\n bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n-/** Check whether witness commitments are required for block. */\n+/** Check whether witness commitments are required for a block, and whether to enforce NULLDUMMY (BIP 147) rules.\n+ *  Note that transaction witness validation rules are always enforced when P2SH is enforced. */\n bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n \n-/** Check whether NULLDUMMY (BIP 147) has activated. */\n-bool IsNullDummyEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n-\n /** When there are blocks in the active chain with missing data, rewind the chainstate and remove them from the block index */\n bool RewindBlockIndex(const CChainParams& params) LOCKS_EXCLUDED(cs_main);\n "
      },
      {
        "sha": "82df92ac90aebb04f36af9ea93afc2dd7d065dbe",
        "filename": "src/versionbitsinfo.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0328dcdcfcb56dc8918697716d7686be048ad0b3/src/versionbitsinfo.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0328dcdcfcb56dc8918697716d7686be048ad0b3/src/versionbitsinfo.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbitsinfo.cpp?ref=0328dcdcfcb56dc8918697716d7686be048ad0b3",
        "patch": "@@ -11,8 +11,4 @@ const struct VBDeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_B\n         /*.name =*/ \"testdummy\",\n         /*.gbt_force =*/ true,\n     },\n-    {\n-        /*.name =*/ \"segwit\",\n-        /*.gbt_force =*/ true,\n-    }\n };"
      },
      {
        "sha": "250dee1528ebab9addce07a83d0241aac3e8e9c4",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0328dcdcfcb56dc8918697716d7686be048ad0b3/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0328dcdcfcb56dc8918697716d7686be048ad0b3/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=0328dcdcfcb56dc8918697716d7686be048ad0b3",
        "patch": "@@ -41,7 +41,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         # This script tests NULLDUMMY activation, which is part of the 'segwit' deployment, so we go through\n         # normal segwit activation here (and don't use the default always-on behaviour).\n-        self.extra_args = [['-whitelist=127.0.0.1', '-vbparams=segwit:0:999999999999', '-addresstype=legacy']]\n+        self.extra_args = [['-whitelist=127.0.0.1', '-segwitheight=432', '-addresstype=legacy']]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "d47065d1cbe810b39eb97748eff2890740bebb39",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0328dcdcfcb56dc8918697716d7686be048ad0b3/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0328dcdcfcb56dc8918697716d7686be048ad0b3/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=0328dcdcfcb56dc8918697716d7686be048ad0b3",
        "patch": "@@ -55,20 +55,20 @@ def set_test_params(self):\n             [\n                 \"-acceptnonstdtxn=1\",\n                 \"-rpcserialversion=0\",\n-                \"-vbparams=segwit:0:999999999999\",\n+                \"-segwitheight=432\",\n                 \"-addresstype=legacy\",\n             ],\n             [\n                 \"-acceptnonstdtxn=1\",\n                 \"-blockversion=4\",\n                 \"-rpcserialversion=1\",\n-                \"-vbparams=segwit:0:999999999999\",\n+                \"-segwitheight=432\",\n                 \"-addresstype=legacy\",\n             ],\n             [\n                 \"-acceptnonstdtxn=1\",\n                 \"-blockversion=536870915\",\n-                \"-vbparams=segwit:0:999999999999\",\n+                \"-segwitheight=432\",\n                 \"-addresstype=legacy\",\n             ],\n         ]"
      },
      {
        "sha": "7905cf5018ca6a1aa4b55ea08316f727e216c71c",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0328dcdcfcb56dc8918697716d7686be048ad0b3/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0328dcdcfcb56dc8918697716d7686be048ad0b3/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=0328dcdcfcb56dc8918697716d7686be048ad0b3",
        "patch": "@@ -14,7 +14,7 @@\n from test_framework.mininode import mininode_lock, P2PInterface\n from test_framework.script import CScript, OP_TRUE, OP_DROP\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, get_bip9_status, wait_until\n+from test_framework.util import assert_equal, wait_until, softfork_active\n \n # TestP2PConn: A peer we use to send messages to bitcoind, and store responses.\n class TestP2PConn(P2PInterface):\n@@ -803,7 +803,7 @@ def run_test(self):\n         # We will need UTXOs to construct transactions in later tests.\n         self.make_utxos()\n \n-        assert_equal(get_bip9_status(self.nodes[0], \"segwit\")[\"status\"], 'active')\n+        assert softfork_active(self.nodes[0], \"segwit\")\n \n         self.log.info(\"Testing SENDCMPCT p2p message... \")\n         self.test_sendcmpct(self.segwit_node, old_node=self.old_node)"
      },
      {
        "sha": "98f6b1d71ddb97cfef473362e9ec37868e15c0eb",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 27,
        "deletions": 55,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0328dcdcfcb56dc8918697716d7686be048ad0b3/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0328dcdcfcb56dc8918697716d7686be048ad0b3/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=0328dcdcfcb56dc8918697716d7686be048ad0b3",
        "patch": "@@ -76,7 +76,7 @@\n     assert_equal,\n     connect_nodes,\n     disconnect_nodes,\n-    get_bip9_status,\n+    softfork_active,\n     hex_str_to_bytes,\n     assert_raises_rpc_error,\n )\n@@ -88,6 +88,8 @@\n \n MAX_SIGOP_COST = 80000\n \n+SEGWIT_HEIGHT = 120\n+\n class UTXO():\n     \"\"\"Used to keep track of anyone-can-spend outputs that we can use in the tests.\"\"\"\n     def __init__(self, sha256, n, value):\n@@ -185,9 +187,9 @@ def set_test_params(self):\n         self.num_nodes = 3\n         # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n         self.extra_args = [\n-            [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=1\", \"-vbparams=segwit:0:999999999999\"],\n-            [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\", \"-vbparams=segwit:0:999999999999\"],\n-            [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=1\", \"-vbparams=segwit:0:0\"],\n+            [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=1\", \"-segwitheight={}\".format(SEGWIT_HEIGHT)],\n+            [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\", \"-segwitheight={}\".format(SEGWIT_HEIGHT)],\n+            [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=1\", \"-segwitheight=-1\"]\n         ]\n \n     def skip_test_if_missing_module(self):\n@@ -231,26 +233,18 @@ def run_test(self):\n         # Keep a place to store utxo's that can be used in later tests\n         self.utxo = []\n \n-        # Segwit status 'defined'\n-        self.segwit_status = 'defined'\n+        self.log.info(\"Starting tests before segwit activation\")\n+        self.segwit_active = False\n \n         self.test_non_witness_transaction()\n-        self.test_unnecessary_witness_before_segwit_activation()\n         self.test_v0_outputs_arent_spendable()\n         self.test_block_relay()\n-        self.advance_to_segwit_started()\n-\n-        # Segwit status 'started'\n-\n         self.test_getblocktemplate_before_lockin()\n-        self.advance_to_segwit_lockin()\n-\n-        # Segwit status 'locked_in'\n-\n         self.test_unnecessary_witness_before_segwit_activation()\n         self.test_witness_tx_relay_before_segwit_activation()\n-        self.test_block_relay()\n         self.test_standardness_v0()\n+\n+        self.log.info(\"Advancing to segwit activation\")\n         self.advance_to_segwit_active()\n \n         # Segwit status 'active'\n@@ -282,15 +276,15 @@ def run_test(self):\n     def subtest(func):  # noqa: N805\n         \"\"\"Wraps the subtests for logging and state assertions.\"\"\"\n         def func_wrapper(self, *args, **kwargs):\n-            self.log.info(\"Subtest: {} (Segwit status = {})\".format(func.__name__, self.segwit_status))\n+            self.log.info(\"Subtest: {} (Segwit active = {})\".format(func.__name__, self.segwit_active))\n             # Assert segwit status is as expected\n-            assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], self.segwit_status)\n+            assert_equal(softfork_active(self.nodes[0], 'segwit'), self.segwit_active)\n             func(self, *args, **kwargs)\n             # Each subtest should leave some utxos for the next subtest\n             assert self.utxo\n             self.sync_blocks()\n             # Assert segwit status is as expected at end of subtest\n-            assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], self.segwit_status)\n+            assert_equal(softfork_active(self.nodes[0], 'segwit'), self.segwit_active)\n \n         return func_wrapper\n \n@@ -392,7 +386,7 @@ def test_block_relay(self):\n \n         # Check that we can getdata for witness blocks or regular blocks,\n         # and the right thing happens.\n-        if self.segwit_status != 'active':\n+        if not self.segwit_active:\n             # Before activation, we should be able to request old blocks with\n             # or without witness, and they should be the same.\n             chain_height = self.nodes[0].getblockcount()\n@@ -535,33 +529,19 @@ def test_v0_outputs_arent_spendable(self):\n         self.utxo.pop(0)\n         self.utxo.append(UTXO(txid, 2, value))\n \n-    @subtest\n-    def advance_to_segwit_started(self):\n-        \"\"\"Mine enough blocks for segwit's vb state to be 'started'.\"\"\"\n-        height = self.nodes[0].getblockcount()\n-        # Will need to rewrite the tests here if we are past the first period\n-        assert height < VB_PERIOD - 1\n-        # Advance to end of period, status should now be 'started'\n-        self.nodes[0].generate(VB_PERIOD - height - 1)\n-        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'started')\n-        self.segwit_status = 'started'\n-\n     @subtest\n     def test_getblocktemplate_before_lockin(self):\n         txid = int(self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1), 16)\n \n         for node in [self.nodes[0], self.nodes[2]]:\n             gbt_results = node.getblocktemplate({\"rules\": [\"segwit\"]})\n-            block_version = gbt_results['version']\n             if node == self.nodes[2]:\n                 # If this is a non-segwit node, we should not get a witness\n-                # commitment, nor a version bit signalling segwit.\n-                assert_equal(block_version & (1 << VB_WITNESS_BIT), 0)\n+                # commitment.\n                 assert 'default_witness_commitment' not in gbt_results\n             else:\n-                # For segwit-aware nodes, check the version bit and the witness\n-                # commitment are correct.\n-                assert block_version & (1 << VB_WITNESS_BIT) != 0\n+                # For segwit-aware nodes, check the witness\n+                # commitment is correct.\n                 assert 'default_witness_commitment' in gbt_results\n                 witness_commitment = gbt_results['default_witness_commitment']\n \n@@ -571,18 +551,9 @@ def test_getblocktemplate_before_lockin(self):\n                 script = get_witness_script(witness_root, 0)\n                 assert_equal(witness_commitment, script.hex())\n \n-    @subtest\n-    def advance_to_segwit_lockin(self):\n-        \"\"\"Mine enough blocks to lock in segwit, but don't activate.\"\"\"\n-        height = self.nodes[0].getblockcount()\n-        # Advance to end of period, and verify lock-in happens at the end\n-        self.nodes[0].generate(VB_PERIOD - 1)\n-        height = self.nodes[0].getblockcount()\n-        assert (height % VB_PERIOD) == VB_PERIOD - 2\n-        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'started')\n+        # Clear out the mempool\n         self.nodes[0].generate(1)\n-        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'locked_in')\n-        self.segwit_status = 'locked_in'\n+        self.sync_blocks()\n \n     @subtest\n     def test_witness_tx_relay_before_segwit_activation(self):\n@@ -686,7 +657,7 @@ def test_standardness_v0(self):\n         tx3.wit.vtxinwit.append(CTxInWitness())\n         tx3.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n         tx3.rehash()\n-        if self.segwit_status != 'active':\n+        if not self.segwit_active:\n             # Just check mempool acceptance, but don't add the transaction to the mempool, since witness is disallowed\n             # in blocks and the tx is impossible to mine right now.\n             assert_equal(self.nodes[0].testmempoolaccept([tx3.serialize_with_witness().hex()]), [{'txid': tx3.hash, 'allowed': True}])\n@@ -707,12 +678,13 @@ def test_standardness_v0(self):\n     @subtest\n     def advance_to_segwit_active(self):\n         \"\"\"Mine enough blocks to activate segwit.\"\"\"\n+        assert not softfork_active(self.nodes[0], 'segwit')\n         height = self.nodes[0].getblockcount()\n-        self.nodes[0].generate(VB_PERIOD - (height % VB_PERIOD) - 2)\n-        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'locked_in')\n+        self.nodes[0].generate(SEGWIT_HEIGHT - height - 2)\n+        assert not softfork_active(self.nodes[0], 'segwit')\n         self.nodes[0].generate(1)\n-        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'active')\n-        self.segwit_status = 'active'\n+        assert softfork_active(self.nodes[0], 'segwit')\n+        self.segwit_active = True\n \n     @subtest\n     def test_p2sh_witness(self):\n@@ -1924,13 +1896,13 @@ def test_upgrade_after_activation(self):\n \n         # Restart with the new binary\n         self.stop_node(2)\n-        self.start_node(2, extra_args=[\"-vbparams=segwit:0:999999999999\"])\n+        self.start_node(2, extra_args=[\"-segwitheight={}\".format(SEGWIT_HEIGHT)])\n         connect_nodes(self.nodes[0], 2)\n \n         self.sync_blocks()\n \n         # Make sure that this peer thinks segwit has activated.\n-        assert get_bip9_status(self.nodes[2], 'segwit')['status'] == \"active\"\n+        assert softfork_active(self.nodes[2], 'segwit')\n \n         # Make sure this peer's blocks match those of node0.\n         height = self.nodes[2].getblockcount()"
      },
      {
        "sha": "b935f6ab992586184670e2e3ba17d66003f27b8e",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0328dcdcfcb56dc8918697716d7686be048ad0b3/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0328dcdcfcb56dc8918697716d7686be048ad0b3/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=0328dcdcfcb56dc8918697716d7686be048ad0b3",
        "patch": "@@ -342,10 +342,6 @@ def delete_cookie_file(datadir):\n         logger.debug(\"Deleting leftover cookie file\")\n         os.remove(os.path.join(datadir, \"regtest\", \".cookie\"))\n \n-def get_bip9_status(node, key):\n-    info = node.getblockchaininfo()\n-    return info['softforks'][key]['bip9']\n-\n def softfork_active(node, key):\n     \"\"\"Return whether a softfork is active.\"\"\"\n     return node.getblockchaininfo()['softforks'][key]['active']"
      }
    ]
  },
  {
    "sha": "8319e738f9f118025b332e4fa804d4c31e4113f4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzE5ZTczOGY5ZjExODAyNWIzMzJlNGZhODA0ZDRjMzFlNDExM2Y0",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-02-13T14:35:22Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-08-14T19:52:52Z"
      },
      "message": "[tests] Add coverage for the content of getblockchaininfo.softforks",
      "tree": {
        "sha": "583b9c13ac8891f6f2ac9397af9e5a587473a904",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/583b9c13ac8891f6f2ac9397af9e5a587473a904"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8319e738f9f118025b332e4fa804d4c31e4113f4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8319e738f9f118025b332e4fa804d4c31e4113f4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8319e738f9f118025b332e4fa804d4c31e4113f4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8319e738f9f118025b332e4fa804d4c31e4113f4/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0328dcdcfcb56dc8918697716d7686be048ad0b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0328dcdcfcb56dc8918697716d7686be048ad0b3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0328dcdcfcb56dc8918697716d7686be048ad0b3"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 25,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6c30e050847e1209668e297c89827fd4e83e432b",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8319e738f9f118025b332e4fa804d4c31e4113f4/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8319e738f9f118025b332e4fa804d4c31e4113f4/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=8319e738f9f118025b332e4fa804d4c31e4113f4",
        "patch": "@@ -123,6 +123,31 @@ def _test_getblockchaininfo(self):\n         assert_equal(res['prune_target_size'], 576716800)\n         assert_greater_than(res['size_on_disk'], 0)\n \n+        assert_equal(res['softforks'], {\n+            'bip34': {'type': 'buried', 'active': False, 'height': 500},\n+            'bip66': {'type': 'buried', 'active': False, 'height': 1251},\n+            'bip65': {'type': 'buried', 'active': False, 'height': 1351},\n+            'csv': {'type': 'buried', 'active': False, 'height': 432},\n+            'segwit': {'type': 'buried', 'active': True, 'height': 0},\n+            'testdummy': {\n+                'type': 'bip9',\n+                'bip9': {\n+                    'status': 'started',\n+                    'bit': 28,\n+                    'startTime': 0,\n+                    'timeout': 0x7fffffffffffffff,  # testdummy does not have a timeout so is set to the max int64 value\n+                    'since': 144,\n+                    'statistics': {\n+                        'period': 144,\n+                        'threshold': 108,\n+                        'elapsed': 57,\n+                        'count': 57,\n+                        'possible': True,\n+                    },\n+                },\n+                'active': False}\n+        })\n+\n     def _test_getchaintxstats(self):\n         self.log.info(\"Test getchaintxstats\")\n "
      }
    ]
  },
  {
    "sha": "e78aaf41f43d0e2ad78fa6d8dad61032c8ef73d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNzhhYWY0MWY0M2QwZTJhZDc4ZmE2ZDhkYWQ2MTAzMmM4ZWY3M2Qw",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-08-13T20:08:09Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-08-14T19:52:52Z"
      },
      "message": "[docs] Add release notes for burying bip 9 soft fork deployments",
      "tree": {
        "sha": "9e617deb3cb37950e85e393dce5d4c83caa25314",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e617deb3cb37950e85e393dce5d4c83caa25314"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e78aaf41f43d0e2ad78fa6d8dad61032c8ef73d0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e78aaf41f43d0e2ad78fa6d8dad61032c8ef73d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e78aaf41f43d0e2ad78fa6d8dad61032c8ef73d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e78aaf41f43d0e2ad78fa6d8dad61032c8ef73d0/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8319e738f9f118025b332e4fa804d4c31e4113f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8319e738f9f118025b332e4fa804d4c31e4113f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8319e738f9f118025b332e4fa804d4c31e4113f4"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 15,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7e150d10e752e9e75dc8ddab00cf4426246893a4",
        "filename": "doc/release-notes-16060.md",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e78aaf41f43d0e2ad78fa6d8dad61032c8ef73d0/doc/release-notes-16060.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e78aaf41f43d0e2ad78fa6d8dad61032c8ef73d0/doc/release-notes-16060.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-16060.md?ref=e78aaf41f43d0e2ad78fa6d8dad61032c8ef73d0",
        "patch": "@@ -0,0 +1,15 @@\n+Low-level RPC changes\n+----------------------\n+\n+- Soft fork reporting in the `getblockchaininfo` return object has been\n+  updated. For full details, see the RPC help text. In summary:\n+  - The `bip9_softforks` sub-object is no longer returned\n+  - The `softforks` sub-object now returns an object keyed by soft fork name,\n+    rather than an array\n+  - Each softfork object in the `softforks` object contains a `type` value which\n+    is either `buried` (for soft fork deployments where the activation height is\n+    hard-coded into the client implementation), or `bip9` (for soft fork deployments\n+    where activation is controlled by BIP 9 signaling).\n+\n+- `getblocktemplate` no longer returns a `rules` array containing `CSV`\n+  and `segwit` (the BIP 9 deployments that are currently in active state)."
      }
    ]
  }
]