[
  {
    "sha": "a372168e77a8a195613a02983f2589252698bf0f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzcyMTY4ZTc3YThhMTk1NjEzYTAyOTgzZjI1ODkyNTI2OThiZjBm",
    "commit": {
      "author": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2014-04-22T22:46:19Z"
      },
      "committer": {
        "name": "Mark Friedenbach",
        "email": "mark@blockstream.io",
        "date": "2014-09-26T22:42:04Z"
      },
      "message": "Use a typedef for monetary values",
      "tree": {
        "sha": "b300a5f7aa007645c6ba2bd708e7a962fab2894b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b300a5f7aa007645c6ba2bd708e7a962fab2894b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a372168e77a8a195613a02983f2589252698bf0f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a372168e77a8a195613a02983f2589252698bf0f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a372168e77a8a195613a02983f2589252698bf0f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a372168e77a8a195613a02983f2589252698bf0f/comments",
    "author": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": null,
    "parents": [
      {
        "sha": "64cfaf891fe539b36f6be37dac6c28a712d70b96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64cfaf891fe539b36f6be37dac6c28a712d70b96",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/64cfaf891fe539b36f6be37dac6c28a712d70b96"
      }
    ],
    "stats": {
      "total": 753,
      "additions": 397,
      "deletions": 356
    },
    "files": [
      {
        "sha": "48e4fc5d8f5247297e2cd972ec0226a609041639",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -65,6 +65,7 @@ BITCOIN_CORE_H = \\\n   addrman.h \\\n   alert.h \\\n   allocators.h \\\n+  amount.h \\\n   base58.h \\\n   bloom.h \\\n   chainparams.h \\"
      },
      {
        "sha": "42006a0388ebc38541fab988efffeef522d0f836",
        "filename": "src/amount.h",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -0,0 +1,13 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_AMOUNT_H\n+#define BITCOIN_AMOUNT_H\n+\n+#include <stdint.h>\n+\n+typedef int64_t CAmount;\n+\n+#endif"
      },
      {
        "sha": "a61b4fe29db29c27773e2d73ba67f74e297dd44e",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -214,7 +214,7 @@ static void MutateTxAddOutAddr(CMutableTransaction& tx, const string& strInput)\n \n     // extract and validate VALUE\n     string strValue = strInput.substr(0, pos);\n-    int64_t value;\n+    CAmount value;\n     if (!ParseMoney(strValue, value))\n         throw runtime_error(\"invalid TX output value\");\n \n@@ -242,7 +242,7 @@ static void MutateTxAddOutScript(CMutableTransaction& tx, const string& strInput\n \n     // extract and validate VALUE\n     string strValue = strInput.substr(0, pos);\n-    int64_t value;\n+    CAmount value;\n     if (!ParseMoney(strValue, value))\n         throw runtime_error(\"invalid TX output value\");\n "
      },
      {
        "sha": "9b8d63d4e449eae819d86b31f65fe7da66746cb5",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -171,12 +171,12 @@ const CTxOut &CCoinsViewCache::GetOutputFor(const CTxIn& input) const\n     return coins->vout[input.prevout.n];\n }\n \n-int64_t CCoinsViewCache::GetValueIn(const CTransaction& tx) const\n+CAmount CCoinsViewCache::GetValueIn(const CTransaction& tx) const\n {\n     if (tx.IsCoinBase())\n         return 0;\n \n-    int64_t nResult = 0;\n+    CAmount nResult = 0;\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n         nResult += GetOutputFor(tx.vin[i]).nValue;\n "
      },
      {
        "sha": "2583475323304c20091b8b27e19607b24dc814d4",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -266,7 +266,7 @@ struct CCoinsStats\n     uint64_t nTransactionOutputs;\n     uint64_t nSerializedSize;\n     uint256 hashSerialized;\n-    int64_t nTotalAmount;\n+    CAmount nTotalAmount;\n \n     CCoinsStats() : nHeight(0), hashBlock(0), nTransactions(0), nTransactionOutputs(0), nSerializedSize(0), hashSerialized(0), nTotalAmount(0) {}\n };\n@@ -367,7 +367,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n         @param[in] tx\ttransaction for which we are checking input total\n         @return\tSum of value of all inputs (scriptSigs)\n      */\n-    int64_t GetValueIn(const CTransaction& tx) const;\n+    CAmount GetValueIn(const CTransaction& tx) const;\n \n     // Check whether all prevouts of the transaction are present in the UTXO set represented by this view\n     bool HaveInputs(const CTransaction& tx) const;"
      },
      {
        "sha": "1489d77bb35699218556795c58babf43806fb0d2",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -43,7 +43,7 @@ std::string CTxIn::ToString() const\n     return str;\n }\n \n-CTxOut::CTxOut(int64_t nValueIn, CScript scriptPubKeyIn)\n+CTxOut::CTxOut(const CAmount& nValueIn, CScript scriptPubKeyIn)\n {\n     nValue = nValueIn;\n     scriptPubKey = scriptPubKeyIn;\n@@ -59,17 +59,17 @@ std::string CTxOut::ToString() const\n     return strprintf(\"CTxOut(nValue=%d.%08d, scriptPubKey=%s)\", nValue / COIN, nValue % COIN, scriptPubKey.ToString().substr(0,30));\n }\n \n-CFeeRate::CFeeRate(int64_t nFeePaid, size_t nSize)\n+CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nSize)\n {\n     if (nSize > 0)\n         nSatoshisPerK = nFeePaid*1000/nSize;\n     else\n         nSatoshisPerK = 0;\n }\n \n-int64_t CFeeRate::GetFee(size_t nSize) const\n+CAmount CFeeRate::GetFee(size_t nSize) const\n {\n-    int64_t nFee = nSatoshisPerK*nSize / 1000;\n+    CAmount nFee = nSatoshisPerK*nSize / 1000;\n \n     if (nFee == 0 && nSatoshisPerK > 0)\n         nFee = nSatoshisPerK;\n@@ -110,9 +110,9 @@ CTransaction& CTransaction::operator=(const CTransaction &tx) {\n     return *this;\n }\n \n-int64_t CTransaction::GetValueOut() const\n+CAmount CTransaction::GetValueOut() const\n {\n-    int64_t nValueOut = 0;\n+    CAmount nValueOut = 0;\n     BOOST_FOREACH(const CTxOut& txout, vout)\n     {\n         nValueOut += txout.nValue;"
      },
      {
        "sha": "e8435c8b0db698a48bbc0b2c13c61e603e38261e",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_CORE_H\n #define BITCOIN_CORE_H\n \n+#include \"amount.h\"\n #include \"script/compressor.h\"\n #include \"script/script.h\"\n #include \"serialize.h\"\n@@ -19,8 +20,8 @@ static const int64_t COIN = 100000000;\n static const int64_t CENT = 1000000;\n \n /** No amount larger than this (in satoshi) is valid */\n-static const int64_t MAX_MONEY = 21000000 * COIN;\n-inline bool MoneyRange(int64_t nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }\n+static const CAmount MAX_MONEY = 21000000 * COIN;\n+inline bool MoneyRange(const CAmount& nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }\n \n /** An outpoint - a combination of a transaction hash and an index n into its vout */\n class COutPoint\n@@ -129,15 +130,15 @@ class CTxIn\n class CFeeRate\n {\n private:\n-    int64_t nSatoshisPerK; // unit is satoshis-per-1,000-bytes\n+    CAmount nSatoshisPerK; // unit is satoshis-per-1,000-bytes\n public:\n     CFeeRate() : nSatoshisPerK(0) { }\n-    explicit CFeeRate(int64_t _nSatoshisPerK): nSatoshisPerK(_nSatoshisPerK) { }\n-    CFeeRate(int64_t nFeePaid, size_t nSize);\n+    explicit CFeeRate(const CAmount& _nSatoshisPerK): nSatoshisPerK(_nSatoshisPerK) { }\n+    CFeeRate(const CAmount& nFeePaid, size_t nSize);\n     CFeeRate(const CFeeRate& other) { nSatoshisPerK = other.nSatoshisPerK; }\n \n-    int64_t GetFee(size_t size) const; // unit returned is satoshis\n-    int64_t GetFeePerK() const { return GetFee(1000); } // satoshis-per-1000-bytes\n+    CAmount GetFee(size_t size) const; // unit returned is satoshis\n+    CAmount GetFeePerK() const { return GetFee(1000); } // satoshis-per-1000-bytes\n \n     friend bool operator<(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK < b.nSatoshisPerK; }\n     friend bool operator>(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK > b.nSatoshisPerK; }\n@@ -161,15 +162,15 @@ class CFeeRate\n class CTxOut\n {\n public:\n-    int64_t nValue;\n+    CAmount nValue;\n     CScript scriptPubKey;\n \n     CTxOut()\n     {\n         SetNull();\n     }\n \n-    CTxOut(int64_t nValueIn, CScript scriptPubKeyIn);\n+    CTxOut(const CAmount& nValueIn, CScript scriptPubKeyIn);\n \n     ADD_SERIALIZE_METHODS;\n \n@@ -276,7 +277,7 @@ class CTransaction\n     }\n \n     // Return sum of txouts.\n-    int64_t GetValueOut() const;\n+    CAmount GetValueOut() const;\n     // GetValueIn() is a method on CCoinsViewCache, because\n     // inputs must be known to compute value in.\n "
      },
      {
        "sha": "dfb984cb0d728164a30c6598eb66ac6a33390c37",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -662,7 +662,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     // cost to you of processing a transaction.\n     if (mapArgs.count(\"-minrelaytxfee\"))\n     {\n-        int64_t n = 0;\n+        CAmount n = 0;\n         if (ParseMoney(mapArgs[\"-minrelaytxfee\"], n) && n > 0)\n             ::minRelayTxFee = CFeeRate(n);\n         else\n@@ -672,15 +672,15 @@ bool AppInit2(boost::thread_group& threadGroup)\n #ifdef ENABLE_WALLET\n     if (mapArgs.count(\"-mintxfee\"))\n     {\n-        int64_t n = 0;\n+        CAmount n = 0;\n         if (ParseMoney(mapArgs[\"-mintxfee\"], n) && n > 0)\n             CWallet::minTxFee = CFeeRate(n);\n         else\n             return InitError(strprintf(_(\"Invalid amount for -mintxfee=<amount>: '%s'\"), mapArgs[\"-mintxfee\"]));\n     }\n     if (mapArgs.count(\"-paytxfee\"))\n     {\n-        int64_t nFeePerK = 0;\n+        CAmount nFeePerK = 0;\n         if (!ParseMoney(mapArgs[\"-paytxfee\"], nFeePerK))\n             return InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s'\"), mapArgs[\"-paytxfee\"]));\n         if (nFeePerK > nHighTransactionFeeWarning)"
      },
      {
        "sha": "234b343983e2f498d1e01f9cc63a760cc94cd762",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -781,7 +781,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n                          REJECT_INVALID, \"bad-txns-oversize\");\n \n     // Check for negative or overflow output values\n-    int64_t nValueOut = 0;\n+    CAmount nValueOut = 0;\n     BOOST_FOREACH(const CTxOut& txout, tx.vout)\n     {\n         if (txout.nValue < 0)\n@@ -823,19 +823,19 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n     return true;\n }\n \n-int64_t GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree)\n+CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree)\n {\n     {\n         LOCK(mempool.cs);\n         uint256 hash = tx.GetHash();\n         double dPriorityDelta = 0;\n-        int64_t nFeeDelta = 0;\n+        CAmount nFeeDelta = 0;\n         mempool.ApplyDeltas(hash, dPriorityDelta, nFeeDelta);\n         if (dPriorityDelta > 0 || nFeeDelta > 0)\n             return 0;\n     }\n \n-    int64_t nMinFee = ::minRelayTxFee.GetFee(nBytes);\n+    CAmount nMinFee = ::minRelayTxFee.GetFee(nBytes);\n \n     if (fAllowFree)\n     {\n@@ -898,7 +898,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CCoinsView dummy;\n         CCoinsViewCache view(dummy);\n \n-        int64_t nValueIn = 0;\n+        CAmount nValueIn = 0;\n         {\n         LOCK(pool.cs);\n         CCoinsViewMemPool viewMemPool(*pcoinsTip, pool);\n@@ -950,15 +950,15 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n                                    hash.ToString(), nSigOps, MAX_TX_SIGOPS),\n                              REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\");\n \n-        int64_t nValueOut = tx.GetValueOut();\n-        int64_t nFees = nValueIn-nValueOut;\n+        CAmount nValueOut = tx.GetValueOut();\n+        CAmount nFees = nValueIn-nValueOut;\n         double dPriority = view.GetPriority(tx, chainActive.Height());\n \n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height());\n         unsigned int nSize = entry.GetTxSize();\n \n         // Don't accept it if it can't get into a block\n-        int64_t txMinFee = GetMinRelayFee(tx, nSize, true);\n+        CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n         if (fLimitFree && nFees < txMinFee)\n             return state.DoS(0, error(\"AcceptToMemoryPool : not enough fees %s, %d < %d\",\n                                       hash.ToString(), nFees, txMinFee),\n@@ -1178,7 +1178,7 @@ void static PruneOrphanBlocks()\n     mapOrphanBlocks.erase(hash);\n }\n \n-int64_t GetBlockValue(int nHeight, int64_t nFees)\n+CAmount GetBlockValue(int nHeight, const CAmount& nFees)\n {\n     int64_t nSubsidy = 50 * COIN;\n     int halvings = nHeight / Params().SubsidyHalvingInterval();\n@@ -1389,8 +1389,8 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n         // This is also true for mempool checks.\n         CBlockIndex *pindexPrev = mapBlockIndex.find(inputs.GetBestBlock())->second;\n         int nSpendHeight = pindexPrev->nHeight + 1;\n-        int64_t nValueIn = 0;\n-        int64_t nFees = 0;\n+        CAmount nValueIn = 0;\n+        CAmount nFees = 0;\n         for (unsigned int i = 0; i < tx.vin.size(); i++)\n         {\n             const COutPoint &prevout = tx.vin[i].prevout;\n@@ -1418,7 +1418,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                              REJECT_INVALID, \"bad-txns-in-belowout\");\n \n         // Tally transaction fees\n-        int64_t nTxFee = nValueIn - tx.GetValueOut();\n+        CAmount nTxFee = nValueIn - tx.GetValueOut();\n         if (nTxFee < 0)\n             return state.DoS(100, error(\"CheckInputs() : %s nTxFee < 0\", tx.GetHash().ToString()),\n                              REJECT_INVALID, \"bad-txns-fee-negative\");\n@@ -1658,7 +1658,7 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n \n     int64_t nTimeStart = GetTimeMicros();\n-    int64_t nFees = 0;\n+    CAmount nFees = 0;\n     int nInputs = 0;\n     unsigned int nSigOps = 0;\n     CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));"
      },
      {
        "sha": "93915db519ee9203cb1d7e990a081fc650649150",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -172,7 +172,7 @@ std::string GetWarnings(std::string strFor);\n bool GetTransaction(const uint256 &hash, CTransaction &tx, uint256 &hashBlock, bool fAllowSlow = false);\n /** Find the best known block, and make it the tip of the block chain */\n bool ActivateBestChain(CValidationState &state, CBlock *pblock = NULL);\n-int64_t GetBlockValue(int nHeight, int64_t nFees);\n+CAmount GetBlockValue(int nHeight, const CAmount& nFees);\n \n /** Create a new block index entry for a given block hash */\n CBlockIndex * InsertBlockIndex(uint256 hash);\n@@ -260,7 +260,7 @@ struct CDiskTxPos : public CDiskBlockPos\n };\n \n \n-int64_t GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree);\n+CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree);\n \n //\n // Check transaction inputs, and make sure any\n@@ -970,7 +970,7 @@ extern CBlockTreeDB *pblocktree;\n struct CBlockTemplate\n {\n     CBlock block;\n-    std::vector<int64_t> vTxFees;\n+    std::vector<CAmount> vTxFees;\n     std::vector<int64_t> vTxSigOps;\n };\n "
      },
      {
        "sha": "361a2bea41231652838c811423e46ada6b9a4772",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -111,7 +111,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n     nBlockMinSize = std::min(nBlockMaxSize, nBlockMinSize);\n \n     // Collect memory pool transactions into the block\n-    int64_t nFees = 0;\n+    CAmount nFees = 0;\n \n     {\n         LOCK2(cs_main, mempool.cs);\n@@ -135,7 +135,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n             COrphan* porphan = NULL;\n             double dPriority = 0;\n-            int64_t nTotalIn = 0;\n+            CAmount nTotalIn = 0;\n             bool fMissingInputs = false;\n             BOOST_FOREACH(const CTxIn& txin, tx.vin)\n             {\n@@ -170,7 +170,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n                 const CCoins* coins = view.AccessCoins(txin.prevout.hash);\n                 assert(coins);\n \n-                int64_t nValueIn = coins->vout[txin.prevout.n].nValue;\n+                CAmount nValueIn = coins->vout[txin.prevout.n].nValue;\n                 nTotalIn += nValueIn;\n \n                 int nConf = pindexPrev->nHeight - coins->nHeight + 1;\n@@ -229,7 +229,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n             // Skip free transactions if we're past the minimum block size:\n             const uint256& hash = tx.GetHash();\n             double dPriorityDelta = 0;\n-            int64_t nFeeDelta = 0;\n+            CAmount nFeeDelta = 0;\n             mempool.ApplyDeltas(hash, dPriorityDelta, nFeeDelta);\n             if (fSortedByFee && (dPriorityDelta <= 0) && (nFeeDelta <= 0) && (feeRate < ::minRelayTxFee) && (nBlockSize + nTxSize >= nBlockMinSize))\n                 continue;\n@@ -247,7 +247,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n             if (!view.HaveInputs(tx))\n                 continue;\n \n-            int64_t nTxFees = view.GetValueIn(tx)-tx.GetValueOut();\n+            CAmount nTxFees = view.GetValueIn(tx)-tx.GetValueOut();\n \n             nTxSigOps += GetP2SHSigOpCount(tx, view);\n             if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)"
      },
      {
        "sha": "6e35bf17b3d5fa85718853123734db096f5acd7a",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -44,20 +44,20 @@ class AmountSpinBox: public QAbstractSpinBox\n     void fixup(QString &input) const\n     {\n         bool valid = false;\n-        qint64 val = parse(input, &valid);\n+        CAmount val = parse(input, &valid);\n         if(valid)\n         {\n             input = BitcoinUnits::format(currentUnit, val, false, BitcoinUnits::separatorAlways);\n             lineEdit()->setText(input);\n         }\n     }\n \n-    qint64 value(bool *valid_out=0) const\n+    CAmount value(bool *valid_out=0) const\n     {\n         return parse(text(), valid_out);\n     }\n \n-    void setValue(qint64 value)\n+    void setValue(const CAmount& value)\n     {\n         lineEdit()->setText(BitcoinUnits::format(currentUnit, value, false, BitcoinUnits::separatorAlways));\n         emit valueChanged();\n@@ -66,9 +66,9 @@ class AmountSpinBox: public QAbstractSpinBox\n     void stepBy(int steps)\n     {\n         bool valid = false;\n-        qint64 val = value(&valid);\n+        CAmount val = value(&valid);\n         val = val + steps * singleStep;\n-        val = qMin(qMax(val, Q_INT64_C(0)), BitcoinUnits::maxMoney());\n+        val = qMin(qMax(val, CAmount(0)), BitcoinUnits::maxMoney());\n         setValue(val);\n     }\n \n@@ -78,7 +78,7 @@ class AmountSpinBox: public QAbstractSpinBox\n         if(text().isEmpty()) // Allow step-up with empty field\n             return StepUpEnabled;\n         bool valid = false;\n-        qint64 val = value(&valid);\n+        CAmount val = value(&valid);\n         if(valid)\n         {\n             if(val > 0)\n@@ -92,7 +92,7 @@ class AmountSpinBox: public QAbstractSpinBox\n     void setDisplayUnit(int unit)\n     {\n         bool valid = false;\n-        qint64 val = value(&valid);\n+        CAmount val = value(&valid);\n \n         currentUnit = unit;\n \n@@ -102,7 +102,7 @@ class AmountSpinBox: public QAbstractSpinBox\n             clear();\n     }\n \n-    void setSingleStep(qint64 step)\n+    void setSingleStep(const CAmount& step)\n     {\n         singleStep = step;\n     }\n@@ -140,17 +140,17 @@ class AmountSpinBox: public QAbstractSpinBox\n     }\n private:\n     int currentUnit;\n-    qint64 singleStep;\n+    CAmount singleStep;\n     mutable QSize cachedMinimumSizeHint;\n \n     /**\n      * Parse a string into a number of base monetary units and\n      * return validity.\n      * @note Must return 0 if !valid.\n      */\n-    qint64 parse(const QString &text, bool *valid_out=0) const\n+    CAmount parse(const QString &text, bool *valid_out=0) const\n     {\n-        qint64 val = 0;\n+        CAmount val = 0;\n         bool valid = BitcoinUnits::parse(currentUnit, text, &val);\n         if(valid)\n         {\n@@ -253,12 +253,12 @@ QWidget *BitcoinAmountField::setupTabChain(QWidget *prev)\n     return unit;\n }\n \n-qint64 BitcoinAmountField::value(bool *valid_out) const\n+CAmount BitcoinAmountField::value(bool *valid_out) const\n {\n     return amount->value(valid_out);\n }\n \n-void BitcoinAmountField::setValue(qint64 value)\n+void BitcoinAmountField::setValue(const CAmount& value)\n {\n     amount->setValue(value);\n }\n@@ -285,7 +285,7 @@ void BitcoinAmountField::setDisplayUnit(int newUnit)\n     unit->setValue(newUnit);\n }\n \n-void BitcoinAmountField::setSingleStep(qint64 step)\n+void BitcoinAmountField::setSingleStep(const CAmount& step)\n {\n     amount->setSingleStep(step);\n }"
      },
      {
        "sha": "e52feeb46e8833134486491db6b52180aa2c7be4",
        "filename": "src/qt/bitcoinamountfield.h",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/bitcoinamountfield.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/bitcoinamountfield.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOINAMOUNTFIELD_H\n #define BITCOINAMOUNTFIELD_H\n \n+#include \"amount.h\"\n+\n #include <QWidget>\n \n class AmountSpinBox;\n@@ -19,16 +21,16 @@ class BitcoinAmountField: public QWidget\n {\n     Q_OBJECT\n \n-    Q_PROPERTY(qint64 value READ value WRITE setValue NOTIFY valueChanged USER true)\n+    Q_PROPERTY(CAmount value READ value WRITE setValue NOTIFY valueChanged USER true)\n \n public:\n     explicit BitcoinAmountField(QWidget *parent = 0);\n \n-    qint64 value(bool *valid=0) const;\n-    void setValue(qint64 value);\n+    CAmount value(bool *value=0) const;\n+    void setValue(const CAmount& value);\n \n     /** Set single step in satoshis **/\n-    void setSingleStep(qint64 step);\n+    void setSingleStep(const CAmount& step);\n \n     /** Make read-only **/\n     void setReadOnly(bool fReadOnly);"
      },
      {
        "sha": "7380fbd240f2377ad83b25ce961974a5350d87d3",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -864,7 +864,7 @@ void BitcoinGUI::closeEvent(QCloseEvent *event)\n }\n \n #ifdef ENABLE_WALLET\n-void BitcoinGUI::incomingTransaction(const QString& date, int unit, qint64 amount, const QString& type, const QString& address)\n+void BitcoinGUI::incomingTransaction(const QString& date, int unit, const CAmount& amount, const QString& type, const QString& address)\n {\n     // On new transaction, make an info balloon\n     message((amount)<0 ? tr(\"Sent transaction\") : tr(\"Incoming transaction\"),"
      },
      {
        "sha": "8af6eda867a27c588464a012835bf93e2d912e02",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -9,6 +9,8 @@\n #include \"config/bitcoin-config.h\"\n #endif\n \n+#include \"amount.h\"\n+\n #include <QLabel>\n #include <QMainWindow>\n #include <QMap>\n@@ -159,7 +161,7 @@ public slots:\n     bool handlePaymentRequest(const SendCoinsRecipient& recipient);\n \n     /** Show incoming transaction notification for new transactions. */\n-    void incomingTransaction(const QString& date, int unit, qint64 amount, const QString& type, const QString& address);\n+    void incomingTransaction(const QString& date, int unit, const CAmount& amount, const QString& type, const QString& address);\n #endif\n \n private slots:"
      },
      {
        "sha": "423b559bf7d962033973aa1b97a45b7022d569cf",
        "filename": "src/qt/bitcoinunits.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/bitcoinunits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/bitcoinunits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -91,12 +91,13 @@ int BitcoinUnits::decimals(int unit)\n     }\n }\n \n-QString BitcoinUnits::format(int unit, qint64 n, bool fPlus, SeparatorStyle separators)\n+QString BitcoinUnits::format(int unit, const CAmount& nIn, bool fPlus, SeparatorStyle separators)\n {\n     // Note: not using straight sprintf here because we do NOT want\n     // localized number formatting.\n     if(!valid(unit))\n         return QString(); // Refuse to format invalid unit\n+    qint64 n = (qint64)nIn;\n     qint64 coin = factor(unit);\n     int num_decimals = decimals(unit);\n     qint64 n_abs = (n > 0 ? n : -n);\n@@ -138,20 +139,20 @@ QString BitcoinUnits::format(int unit, qint64 n, bool fPlus, SeparatorStyle sepa\n // Please take care to use formatHtmlWithUnit instead, when\n // appropriate.\n \n-QString BitcoinUnits::formatWithUnit(int unit, qint64 amount, bool plussign, SeparatorStyle separators)\n+QString BitcoinUnits::formatWithUnit(int unit, const CAmount& amount, bool plussign, SeparatorStyle separators)\n {\n     return format(unit, amount, plussign, separators) + QString(\" \") + name(unit);\n }\n \n-QString BitcoinUnits::formatHtmlWithUnit(int unit, qint64 amount, bool plussign, SeparatorStyle separators)\n+QString BitcoinUnits::formatHtmlWithUnit(int unit, const CAmount& amount, bool plussign, SeparatorStyle separators)\n {\n     QString str(formatWithUnit(unit, amount, plussign, separators));\n     str.replace(QChar(THIN_SP_CP), QString(THIN_SP_HTML));\n     return QString(\"<span style='white-space: nowrap;'>%1</span>\").arg(str);\n }\n \n \n-bool BitcoinUnits::parse(int unit, const QString &value, qint64 *val_out)\n+bool BitcoinUnits::parse(int unit, const QString &value, CAmount *val_out)\n {\n     if(!valid(unit) || value.isEmpty())\n         return false; // Refuse to parse invalid unit or empty string\n@@ -182,7 +183,7 @@ bool BitcoinUnits::parse(int unit, const QString &value, qint64 *val_out)\n     {\n         return false; // Longer numbers will exceed 63 bits\n     }\n-    qint64 retvalue = str.toLongLong(&ok);\n+    CAmount retvalue(str.toLongLong(&ok));\n     if(val_out)\n     {\n         *val_out = retvalue;\n@@ -226,7 +227,7 @@ QVariant BitcoinUnits::data(const QModelIndex &index, int role) const\n     return QVariant();\n }\n \n-qint64 BitcoinUnits::maxMoney()\n+CAmount BitcoinUnits::maxMoney()\n {\n     return MAX_MONEY;\n }"
      },
      {
        "sha": "a392c42b9b56a94d08c4c7b6174e293784ca02cc",
        "filename": "src/qt/bitcoinunits.h",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/bitcoinunits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/bitcoinunits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOINUNITS_H\n #define BITCOINUNITS_H\n \n+#include \"amount.h\"\n+\n #include <QAbstractListModel>\n #include <QString>\n \n@@ -85,12 +87,12 @@ class BitcoinUnits: public QAbstractListModel\n     //! Number of decimals left\n     static int decimals(int unit);\n     //! Format as string\n-    static QString format(int unit, qint64 amount, bool plussign=false, SeparatorStyle separators=separatorStandard);\n+    static QString format(int unit, const CAmount& amount, bool plussign=false, SeparatorStyle separators=separatorStandard);\n     //! Format as string (with unit)\n-    static QString formatWithUnit(int unit, qint64 amount, bool plussign=false, SeparatorStyle separators=separatorStandard);\n-    static QString formatHtmlWithUnit(int unit, qint64 amount, bool plussign=false, SeparatorStyle separators=separatorStandard);\n+    static QString formatWithUnit(int unit, const CAmount& amount, bool plussign=false, SeparatorStyle separators=separatorStandard);\n+    static QString formatHtmlWithUnit(int unit, const CAmount& amount, bool plussign=false, SeparatorStyle separators=separatorStandard);\n     //! Parse string to coin amount\n-    static bool parse(int unit, const QString &value, qint64 *val_out);\n+    static bool parse(int unit, const QString &value, CAmount *val_out);\n     //! Gets title for amount column including current display unit if optionsModel reference available */\n     static QString getAmountColumnTitle(int unit);\n     ///@}\n@@ -117,7 +119,7 @@ class BitcoinUnits: public QAbstractListModel\n     }\n \n     //! Return maximum number of base units (Satoshis)\n-    static qint64 maxMoney();\n+    static CAmount maxMoney();\n \n private:\n     QList<BitcoinUnits::Unit> unitlist;"
      },
      {
        "sha": "ba0febe546d9c35ce8a7a050b16679931561cd0c",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -29,7 +29,7 @@\n #include <QTreeWidgetItem>\n \n using namespace std;\n-QList<qint64> CoinControlDialog::payAmounts;\n+QList<CAmount> CoinControlDialog::payAmounts;\n CCoinControl* CoinControlDialog::coinControl = new CCoinControl();\n \n CoinControlDialog::CoinControlDialog(QWidget *parent) :\n@@ -443,10 +443,10 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         return;\n \n     // nPayAmount\n-    qint64 nPayAmount = 0;\n+    CAmount nPayAmount = 0;\n     bool fDust = false;\n     CMutableTransaction txDummy;\n-    foreach(const qint64 &amount, CoinControlDialog::payAmounts)\n+    foreach(const CAmount &amount, CoinControlDialog::payAmounts)\n     {\n         nPayAmount += amount;\n \n@@ -460,10 +460,10 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     }\n \n     QString sPriorityLabel      = tr(\"none\");\n-    int64_t nAmount             = 0;\n-    int64_t nPayFee             = 0;\n-    int64_t nAfterFee           = 0;\n-    int64_t nChange             = 0;\n+    CAmount nAmount             = 0;\n+    CAmount nPayFee             = 0;\n+    CAmount nAfterFee           = 0;\n+    CAmount nChange             = 0;\n     unsigned int nBytes         = 0;\n     unsigned int nBytesInputs   = 0;\n     double dPriority            = 0;\n@@ -684,7 +684,7 @@ void CoinControlDialog::updateView()\n             itemWalletAddress->setText(COLUMN_ADDRESS, sWalletAddress);\n         }\n \n-        int64_t nSum = 0;\n+        CAmount nSum = 0;\n         double dPrioritySum = 0;\n         int nChildren = 0;\n         int nInputSum = 0;"
      },
      {
        "sha": "9eaa8eb41d556376d7059906147edf4fed138898",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef COINCONTROLDIALOG_H\n #define COINCONTROLDIALOG_H\n \n+#include \"amount.h\"\n+\n #include <QAbstractButton>\n #include <QAction>\n #include <QDialog>\n@@ -37,7 +39,7 @@ class CoinControlDialog : public QDialog\n     static void updateLabels(WalletModel*, QDialog*);\n     static QString getPriorityLabel(const CTxMemPool& pool, double);\n \n-    static QList<qint64> payAmounts;\n+    static QList<CAmount> payAmounts;\n     static CCoinControl *coinControl;\n \n private:"
      },
      {
        "sha": "91bb10755aa713b8b7a6962b8215a80e44cba48a",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -221,7 +221,7 @@ QString formatBitcoinURI(const SendCoinsRecipient &info)\n     return ret;\n }\n \n-bool isDust(const QString& address, qint64 amount)\n+bool isDust(const QString& address, const CAmount& amount)\n {\n     CTxDestination dest = CBitcoinAddress(address.toStdString()).Get();\n     CScript script = GetScriptForDestination(dest);"
      },
      {
        "sha": "0939c78f647f1f953e706344f0bbaf31e523e43d",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef GUIUTIL_H\n #define GUIUTIL_H\n \n+#include \"amount.h\"\n+\n #include <QHeaderView>\n #include <QMessageBox>\n #include <QObject>\n@@ -46,7 +48,7 @@ namespace GUIUtil\n     QString formatBitcoinURI(const SendCoinsRecipient &info);\n \n     // Returns true if given address+amount meets \"dust\" definition\n-    bool isDust(const QString& address, qint64 amount);\n+    bool isDust(const QString& address, const CAmount& amount);\n \n     // HTML escaping for rich text controls\n     QString HtmlEscape(const QString& str, bool fMultiLine=false);"
      },
      {
        "sha": "cb80bd0e3defa5e5c50eb126f47675bd40864b56",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -275,9 +275,9 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n #ifdef ENABLE_WALLET\n         case Fee: { // core option - can be changed on-the-fly\n             // Todo: Add is valid check  and warn via message, if not\n-            qint64 nTransactionFee = value.toLongLong();\n+            CAmount nTransactionFee(value.toLongLong());\n             payTxFee = CFeeRate(nTransactionFee, 1000);\n-            settings.setValue(\"nTransactionFee\", nTransactionFee);\n+            settings.setValue(\"nTransactionFee\", qint64(nTransactionFee));\n             emit transactionFeeChanged(nTransactionFee);\n             break;\n         }"
      },
      {
        "sha": "42ea3bf8e5b3dbaa8fabee3d000cedf60b765fcf",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef OPTIONSMODEL_H\n #define OPTIONSMODEL_H\n \n+#include \"amount.h\"\n+\n #include <QAbstractListModel>\n \n QT_BEGIN_NAMESPACE\n@@ -82,7 +84,7 @@ class OptionsModel : public QAbstractListModel\n \n signals:\n     void displayUnitChanged(int unit);\n-    void transactionFeeChanged(qint64);\n+    void transactionFeeChanged(const CAmount&);\n     void coinControlFeaturesChanged(bool);\n };\n "
      },
      {
        "sha": "1d6c23f8a0f7758eaac02936afbe1031af41cad4",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -146,7 +146,7 @@ OverviewPage::~OverviewPage()\n     delete ui;\n }\n \n-void OverviewPage::setBalance(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance, qint64 watchOnlyBalance, qint64 watchUnconfBalance, qint64 watchImmatureBalance)\n+void OverviewPage::setBalance(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance, const CAmount& watchOnlyBalance, const CAmount& watchUnconfBalance, const CAmount& watchImmatureBalance)\n {\n     int unit = walletModel->getOptionsModel()->getDisplayUnit();\n     currentBalance = balance;\n@@ -220,7 +220,7 @@ void OverviewPage::setWalletModel(WalletModel *model)\n         // Keep up to date with wallet\n         setBalance(model->getBalance(), model->getUnconfirmedBalance(), model->getImmatureBalance(),\n                    model->getWatchBalance(), model->getWatchUnconfirmedBalance(), model->getWatchImmatureBalance());\n-        connect(model, SIGNAL(balanceChanged(qint64, qint64, qint64, qint64, qint64, qint64)), this, SLOT(setBalance(qint64, qint64, qint64, qint64, qint64, qint64)));\n+        connect(model, SIGNAL(balanceChanged(const CAmount&, const CAmount&, const CAmount&, const CAmount&, const CAmount&, const CAmount&)), this, SLOT(setBalance(const CAmount&, const CAmount&, const CAmount&, const CAmount&, const CAmount&, const CAmount&)));\n \n         connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n "
      },
      {
        "sha": "03f239008f3625909fb9ce255f11e7f6dc21f4c1",
        "filename": "src/qt/overviewpage.h",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/overviewpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/overviewpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef OVERVIEWPAGE_H\n #define OVERVIEWPAGE_H\n \n+#include \"amount.h\"\n+\n #include <QWidget>\n \n class ClientModel;\n@@ -34,8 +36,8 @@ class OverviewPage : public QWidget\n     void showOutOfSyncWarning(bool fShow);\n \n public slots:\n-    void setBalance(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance,\n-                    qint64 watchOnlyBalance, qint64 watchUnconfBalance, qint64 watchImmatureBalance);\n+    void setBalance(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance,\n+                    const CAmount& watchOnlyBalance, const CAmount& watchUnconfBalance, const CAmount& watchImmatureBalance);\n \n signals:\n     void transactionClicked(const QModelIndex &index);\n@@ -44,12 +46,12 @@ public slots:\n     Ui::OverviewPage *ui;\n     ClientModel *clientModel;\n     WalletModel *walletModel;\n-    qint64 currentBalance;\n-    qint64 currentUnconfirmedBalance;\n-    qint64 currentImmatureBalance;\n-    qint64 currentWatchOnlyBalance;\n-    qint64 currentWatchUnconfBalance;\n-    qint64 currentWatchImmatureBalance;\n+    CAmount currentBalance;\n+    CAmount currentUnconfirmedBalance;\n+    CAmount currentImmatureBalance;\n+    CAmount currentWatchOnlyBalance;\n+    CAmount currentWatchUnconfBalance;\n+    CAmount currentWatchImmatureBalance;\n \n     TxViewDelegate *txdelegate;\n     TransactionFilterProxy *filter;"
      },
      {
        "sha": "7aefffe24afb4c33106bcafd988abe00f9dfbfa9",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -196,9 +196,9 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n     return fResult;\n }\n \n-QList<std::pair<CScript,qint64> > PaymentRequestPlus::getPayTo() const\n+QList<std::pair<CScript,CAmount> > PaymentRequestPlus::getPayTo() const\n {\n-    QList<std::pair<CScript,qint64> > result;\n+    QList<std::pair<CScript,CAmount> > result;\n     for (int i = 0; i < details.outputs_size(); i++)\n     {\n         const unsigned char* scriptStr = (const unsigned char*)details.outputs(i).script().data();"
      },
      {
        "sha": "3d94d93269d0e8db9c5aeda1b4603a576ad396ab",
        "filename": "src/qt/paymentrequestplus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/paymentrequestplus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/paymentrequestplus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -33,7 +33,7 @@ class PaymentRequestPlus\n     bool getMerchant(X509_STORE* certStore, QString& merchant) const;\n \n     // Returns list of outputs, amount\n-    QList<std::pair<CScript,qint64> > getPayTo() const;\n+    QList<std::pair<CScript,CAmount> > getPayTo() const;\n \n     const payments::PaymentDetails& getDetails() const { return details; }\n "
      },
      {
        "sha": "707de55290acf9cead90a5cd906594baeeb6832b",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -532,10 +532,10 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n \n     request.getMerchant(PaymentServer::certStore, recipient.authenticatedMerchant);\n \n-    QList<std::pair<CScript, qint64> > sendingTos = request.getPayTo();\n+    QList<std::pair<CScript, CAmount> > sendingTos = request.getPayTo();\n     QStringList addresses;\n \n-    foreach(const PAIRTYPE(CScript, qint64)& sendingTo, sendingTos) {\n+    foreach(const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n         // Extract and check destination addresses\n         CTxDestination dest;\n         if (ExtractDestination(sendingTo.first, dest)) {"
      },
      {
        "sha": "d67cac57b462cc21a54c5f83aba475bd520d3663",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -92,7 +92,7 @@ void SendCoinsDialog::setModel(WalletModel *model)\n \n         setBalance(model->getBalance(), model->getUnconfirmedBalance(), model->getImmatureBalance(),\n                    model->getWatchBalance(), model->getWatchUnconfirmedBalance(), model->getWatchImmatureBalance());\n-        connect(model, SIGNAL(balanceChanged(qint64, qint64, qint64, qint64, qint64, qint64)), this, SLOT(setBalance(qint64, qint64, qint64, qint64, qint64, qint64)));\n+        connect(model, SIGNAL(balanceChanged(const CAmount&, const CAmount&, const CAmount&, const CAmount&, const CAmount&, const CAmount&)), this, SLOT(setBalance(const CAmount&, const CAmount&, const CAmount&, const CAmount&, const CAmount&, const CAmount&)));\n         connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n \n         // Coin Control\n@@ -203,7 +203,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n         return;\n     }\n \n-    qint64 txFee = currentTransaction.getTransactionFee();\n+    CAmount txFee = currentTransaction.getTransactionFee();\n     QString questionString = tr(\"Are you sure you want to send?\");\n     questionString.append(\"<br /><br />%1\");\n \n@@ -218,7 +218,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n \n     // add total amount in all subdivision units\n     questionString.append(\"<hr />\");\n-    qint64 totalAmount = currentTransaction.getTotalTransactionAmount() + txFee;\n+    CAmount totalAmount = currentTransaction.getTotalTransactionAmount() + txFee;\n     QStringList alternativeUnits;\n     foreach(BitcoinUnits::Unit u, BitcoinUnits::availableUnits())\n     {\n@@ -384,8 +384,8 @@ bool SendCoinsDialog::handlePaymentRequest(const SendCoinsRecipient &rv)\n     return true;\n }\n \n-void SendCoinsDialog::setBalance(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance, \n-                                 qint64 watchBalance, qint64 watchUnconfirmedBalance, qint64 watchImmatureBalance)\n+void SendCoinsDialog::setBalance(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance, \n+                                 const CAmount& watchBalance, const CAmount& watchUnconfirmedBalance, const CAmount& watchImmatureBalance)\n {\n     Q_UNUSED(unconfirmedBalance);\n     Q_UNUSED(immatureBalance);"
      },
      {
        "sha": "74cc4bde56e2fc87bff1eec041a44b9e2b390eac",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -47,8 +47,8 @@ public slots:\n     void accept();\n     SendCoinsEntry *addEntry();\n     void updateTabsAndLabels();\n-    void setBalance(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance,\n-                    qint64 watchOnlyBalance, qint64 watchUnconfBalance, qint64 watchImmatureBalance);\n+    void setBalance(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance,\n+                    const CAmount& watchOnlyBalance, const CAmount& watchUnconfBalance, const CAmount& watchImmatureBalance);\n \n private:\n     Ui::SendCoinsDialog *ui;"
      },
      {
        "sha": "1efad8259bb6dd74d659861dd9cd3785b57e43ad",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -56,9 +56,9 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     strHTML += \"<html><font face='verdana, arial, helvetica, sans-serif'>\";\n \n     int64_t nTime = wtx.GetTxTime();\n-    int64_t nCredit = wtx.GetCredit(ISMINE_ALL);\n-    int64_t nDebit = wtx.GetDebit(ISMINE_ALL);\n-    int64_t nNet = nCredit - nDebit;\n+    CAmount nCredit = wtx.GetCredit(ISMINE_ALL);\n+    CAmount nDebit = wtx.GetDebit(ISMINE_ALL);\n+    CAmount nNet = nCredit - nDebit;\n \n     strHTML += \"<b>\" + tr(\"Status\") + \":</b> \" + FormatTxStatus(wtx);\n     int nRequests = wtx.GetRequestCount();\n@@ -132,7 +132,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n         //\n         // Coinbase\n         //\n-        int64_t nUnmatured = 0;\n+        CAmount nUnmatured = 0;\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n             nUnmatured += wallet->GetCredit(txout, ISMINE_ALL);\n         strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \";\n@@ -206,13 +206,13 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n             if (fAllToMe)\n             {\n                 // Payment to self\n-                int64_t nChange = wtx.GetChange();\n-                int64_t nValue = nCredit - nChange;\n+                CAmount nChange = wtx.GetChange();\n+                CAmount nValue = nCredit - nChange;\n                 strHTML += \"<b>\" + tr(\"Total debit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, -nValue) + \"<br>\";\n                 strHTML += \"<b>\" + tr(\"Total credit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, nValue) + \"<br>\";\n             }\n \n-            int64_t nTxFee = nDebit - wtx.GetValueOut();\n+            CAmount nTxFee = nDebit - wtx.GetValueOut();\n             if (nTxFee > 0)\n                 strHTML += \"<b>\" + tr(\"Transaction fee\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, -nTxFee) + \"<br>\";\n         }"
      },
      {
        "sha": "2a0f621d1e3a8646a2a566c598f3c4172d0f5cbf",
        "filename": "src/qt/transactionfilterproxy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/transactionfilterproxy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/transactionfilterproxy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -78,7 +78,7 @@ void TransactionFilterProxy::setTypeFilter(quint32 modes)\n     invalidateFilter();\n }\n \n-void TransactionFilterProxy::setMinAmount(qint64 minimum)\n+void TransactionFilterProxy::setMinAmount(const CAmount& minimum)\n {\n     this->minAmount = minimum;\n     invalidateFilter();"
      },
      {
        "sha": "ca31ee8f87202ea3cef45daf85354a0a86d13c30",
        "filename": "src/qt/transactionfilterproxy.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/transactionfilterproxy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/transactionfilterproxy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef TRANSACTIONFILTERPROXY_H\n #define TRANSACTIONFILTERPROXY_H\n \n+#include \"amount.h\"\n+\n #include <QDateTime>\n #include <QSortFilterProxyModel>\n \n@@ -38,7 +40,7 @@ class TransactionFilterProxy : public QSortFilterProxyModel\n       @note Type filter takes a bit field created with TYPE() or ALL_TYPES\n      */\n     void setTypeFilter(quint32 modes);\n-    void setMinAmount(qint64 minimum);\n+    void setMinAmount(const CAmount& minimum);\n     void setWatchOnlyFilter(WatchOnlyFilter filter);\n \n     /** Set maximum number of rows returned, -1 if unlimited. */\n@@ -58,7 +60,7 @@ class TransactionFilterProxy : public QSortFilterProxyModel\n     QString addrPrefix;\n     quint32 typeFilter;\n     WatchOnlyFilter watchOnlyFilter;\n-    qint64 minAmount;\n+    CAmount minAmount;\n     int limitRows;\n     bool showInactive;\n };"
      },
      {
        "sha": "afb343f349ea33bc7e89de3361e43001b88f2658",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -32,9 +32,9 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n {\n     QList<TransactionRecord> parts;\n     int64_t nTime = wtx.GetTxTime();\n-    int64_t nCredit = wtx.GetCredit(true);\n-    int64_t nDebit = wtx.GetDebit(ISMINE_ALL);\n-    int64_t nNet = nCredit - nDebit;\n+    CAmount nCredit = wtx.GetCredit(true);\n+    CAmount nDebit = wtx.GetDebit(ISMINE_ALL);\n+    CAmount nNet = nCredit - nDebit;\n     uint256 hash = wtx.GetHash();\n     std::map<std::string, std::string> mapValue = wtx.mapValue;\n \n@@ -97,7 +97,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n         if (fAllFromMe && fAllToMe)\n         {\n             // Payment to self\n-            int64_t nChange = wtx.GetChange();\n+            CAmount nChange = wtx.GetChange();\n \n             parts.append(TransactionRecord(hash, nTime, TransactionRecord::SendToSelf, \"\",\n                             -(nDebit - nChange), nCredit - nChange));\n@@ -108,7 +108,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n             //\n             // Debit\n             //\n-            int64_t nTxFee = nDebit - wtx.GetValueOut();\n+            CAmount nTxFee = nDebit - wtx.GetValueOut();\n \n             for (unsigned int nOut = 0; nOut < wtx.vout.size(); nOut++)\n             {\n@@ -138,7 +138,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n                     sub.address = mapValue[\"to\"];\n                 }\n \n-                int64_t nValue = txout.nValue;\n+                CAmount nValue = txout.nValue;\n                 /* Add fee to first output */\n                 if (nTxFee > 0)\n                 {"
      },
      {
        "sha": "9276c9f0afcf35677c9a5efb9da958ebec7391d2",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -5,6 +5,7 @@\n #ifndef TRANSACTIONRECORD_H\n #define TRANSACTIONRECORD_H\n \n+#include \"amount.h\"\n #include \"uint256.h\"\n \n #include <QList>\n@@ -94,7 +95,7 @@ class TransactionRecord\n \n     TransactionRecord(uint256 hash, qint64 time,\n                 Type type, const std::string &address,\n-                qint64 debit, qint64 credit):\n+                const CAmount& debit, const CAmount& credit):\n             hash(hash), time(time), type(type), address(address), debit(debit), credit(credit),\n             idx(0)\n     {\n@@ -111,8 +112,8 @@ class TransactionRecord\n     qint64 time;\n     Type type;\n     std::string address;\n-    qint64 debit;\n-    qint64 credit;\n+    CAmount debit;\n+    CAmount credit;\n     /**@}*/\n \n     /** Subtransaction index, for sort key */"
      },
      {
        "sha": "e34d776818680170636e017337084b4d8fe0208c",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -546,7 +546,7 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n         case ToAddress:\n             return formatTxToAddress(rec, true);\n         case Amount:\n-            return rec->credit + rec->debit;\n+            return qint64(rec->credit + rec->debit);\n         }\n         break;\n     case Qt::ToolTipRole:\n@@ -583,7 +583,7 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n     case LabelRole:\n         return walletModel->getAddressTableModel()->labelForAddress(QString::fromStdString(rec->address));\n     case AmountRole:\n-        return rec->credit + rec->debit;\n+        return qint64(rec->credit + rec->debit);\n     case TxIDRole:\n         return rec->getTxID();\n     case TxHashRole:"
      },
      {
        "sha": "d15397387218f98ed0385b2789afca95b73bbed5",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -304,7 +304,7 @@ void TransactionView::changedAmount(const QString &amount)\n {\n     if(!transactionProxyModel)\n         return;\n-    qint64 amount_parsed = 0;\n+    CAmount amount_parsed = 0;\n     if(BitcoinUnits::parse(model->getOptionsModel()->getDisplayUnit(), amount, &amount_parsed))\n     {\n         transactionProxyModel->setMinAmount(amount_parsed);"
      },
      {
        "sha": "b8701a23a651d4156e610ce287d421d111991edd",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -55,11 +55,11 @@ WalletModel::~WalletModel()\n     unsubscribeFromCoreSignals();\n }\n \n-qint64 WalletModel::getBalance(const CCoinControl *coinControl) const\n+CAmount WalletModel::getBalance(const CCoinControl *coinControl) const\n {\n     if (coinControl)\n     {\n-        qint64 nBalance = 0;\n+        CAmount nBalance = 0;\n         std::vector<COutput> vCoins;\n         wallet->AvailableCoins(vCoins, true, coinControl);\n         BOOST_FOREACH(const COutput& out, vCoins)\n@@ -72,12 +72,12 @@ qint64 WalletModel::getBalance(const CCoinControl *coinControl) const\n     return wallet->GetBalance();\n }\n \n-qint64 WalletModel::getUnconfirmedBalance() const\n+CAmount WalletModel::getUnconfirmedBalance() const\n {\n     return wallet->GetUnconfirmedBalance();\n }\n \n-qint64 WalletModel::getImmatureBalance() const\n+CAmount WalletModel::getImmatureBalance() const\n {\n     return wallet->GetImmatureBalance();\n }\n@@ -87,17 +87,17 @@ bool WalletModel::haveWatchOnly() const\n     return fHaveWatchOnly;\n }\n \n-qint64 WalletModel::getWatchBalance() const\n+CAmount WalletModel::getWatchBalance() const\n {\n     return wallet->GetWatchOnlyBalance();\n }\n \n-qint64 WalletModel::getWatchUnconfirmedBalance() const\n+CAmount WalletModel::getWatchUnconfirmedBalance() const\n {\n     return wallet->GetUnconfirmedWatchOnlyBalance();\n }\n \n-qint64 WalletModel::getWatchImmatureBalance() const\n+CAmount WalletModel::getWatchImmatureBalance() const\n {\n     return wallet->GetImmatureWatchOnlyBalance();\n }\n@@ -137,12 +137,12 @@ void WalletModel::pollBalanceChanged()\n \n void WalletModel::checkBalanceChanged()\n {\n-    qint64 newBalance = getBalance();\n-    qint64 newUnconfirmedBalance = getUnconfirmedBalance();\n-    qint64 newImmatureBalance = getImmatureBalance();\n-    qint64 newWatchOnlyBalance = 0;\n-    qint64 newWatchUnconfBalance = 0;\n-    qint64 newWatchImmatureBalance = 0;\n+    CAmount newBalance = getBalance();\n+    CAmount newUnconfirmedBalance = getUnconfirmedBalance();\n+    CAmount newImmatureBalance = getImmatureBalance();\n+    CAmount newWatchOnlyBalance = 0;\n+    CAmount newWatchUnconfBalance = 0;\n+    CAmount newWatchImmatureBalance = 0;\n     if (haveWatchOnly())\n     {\n         newWatchOnlyBalance = getWatchBalance();\n@@ -194,9 +194,9 @@ bool WalletModel::validateAddress(const QString &address)\n \n WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransaction &transaction, const CCoinControl *coinControl)\n {\n-    qint64 total = 0;\n+    CAmount total = 0;\n     QList<SendCoinsRecipient> recipients = transaction.getRecipients();\n-    std::vector<std::pair<CScript, int64_t> > vecSend;\n+    std::vector<std::pair<CScript, CAmount> > vecSend;\n \n     if(recipients.empty())\n     {\n@@ -211,7 +211,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n     {\n         if (rcp.paymentRequest.IsInitialized())\n         {   // PaymentRequest...\n-            int64_t subtotal = 0;\n+            CAmount subtotal = 0;\n             const payments::PaymentDetails& details = rcp.paymentRequest.getDetails();\n             for (int i = 0; i < details.outputs_size(); i++)\n             {\n@@ -220,7 +220,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n                 subtotal += out.amount();\n                 const unsigned char* scriptStr = (const unsigned char*)out.script().data();\n                 CScript scriptPubKey(scriptStr, scriptStr+out.script().size());\n-                vecSend.push_back(std::pair<CScript, int64_t>(scriptPubKey, out.amount()));\n+                vecSend.push_back(std::pair<CScript, CAmount>(scriptPubKey, out.amount()));\n             }\n             if (subtotal <= 0)\n             {\n@@ -242,7 +242,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n             ++nAddresses;\n \n             CScript scriptPubKey = GetScriptForDestination(CBitcoinAddress(rcp.address.toStdString()).Get());\n-            vecSend.push_back(std::pair<CScript, int64_t>(scriptPubKey, rcp.amount));\n+            vecSend.push_back(std::pair<CScript, CAmount>(scriptPubKey, rcp.amount));\n \n             total += rcp.amount;\n         }\n@@ -252,7 +252,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n         return DuplicateAddress;\n     }\n \n-    qint64 nBalance = getBalance(coinControl);\n+    CAmount nBalance = getBalance(coinControl);\n \n     if(total > nBalance)\n     {\n@@ -263,7 +263,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n         LOCK2(cs_main, wallet->cs_wallet);\n \n         transaction.newPossibleKeyChange(wallet);\n-        int64_t nFeeRequired = 0;\n+        CAmount nFeeRequired = 0;\n         std::string strFailReason;\n \n         CWalletTx *newTx = transaction.getTransaction();"
      },
      {
        "sha": "b1d0f28f127f97696fddd42f499314c7bce21f01",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -37,7 +37,7 @@ class SendCoinsRecipient\n {\n public:\n     explicit SendCoinsRecipient() : amount(0), nVersion(SendCoinsRecipient::CURRENT_VERSION) { }\n-    explicit SendCoinsRecipient(const QString &addr, const QString &label, quint64 amount, const QString &message):\n+    explicit SendCoinsRecipient(const QString &addr, const QString &label, const CAmount& amount, const QString &message):\n         address(addr), label(label), amount(amount), message(message), nVersion(SendCoinsRecipient::CURRENT_VERSION) {}\n \n     // If from an insecure payment request, this is used for storing\n@@ -47,7 +47,7 @@ class SendCoinsRecipient\n     // Todo: This is a hack, should be replaced with a cleaner solution!\n     QString address;\n     QString label;\n-    qint64 amount;\n+    CAmount amount;\n     // If from a payment request, this is used for storing the memo\n     QString message;\n \n@@ -125,13 +125,13 @@ class WalletModel : public QObject\n     TransactionTableModel *getTransactionTableModel();\n     RecentRequestsTableModel *getRecentRequestsTableModel();\n \n-    qint64 getBalance(const CCoinControl *coinControl = NULL) const;\n-    qint64 getUnconfirmedBalance() const;\n-    qint64 getImmatureBalance() const;\n+    CAmount getBalance(const CCoinControl *coinControl = NULL) const;\n+    CAmount getUnconfirmedBalance() const;\n+    CAmount getImmatureBalance() const;\n     bool haveWatchOnly() const;\n-    qint64 getWatchBalance() const;\n-    qint64 getWatchUnconfirmedBalance() const;\n-    qint64 getWatchImmatureBalance() const;\n+    CAmount getWatchBalance() const;\n+    CAmount getWatchUnconfirmedBalance() const;\n+    CAmount getWatchImmatureBalance() const;\n     EncryptionStatus getEncryptionStatus() const;\n     bool processingQueuedTransactions() { return fProcessingQueuedTransactions; }\n \n@@ -210,12 +210,12 @@ class WalletModel : public QObject\n     RecentRequestsTableModel *recentRequestsTableModel;\n \n     // Cache some values to be able to detect changes\n-    qint64 cachedBalance;\n-    qint64 cachedUnconfirmedBalance;\n-    qint64 cachedImmatureBalance;\n-    qint64 cachedWatchOnlyBalance;\n-    qint64 cachedWatchUnconfBalance;\n-    qint64 cachedWatchImmatureBalance;\n+    CAmount cachedBalance;\n+    CAmount cachedUnconfirmedBalance;\n+    CAmount cachedImmatureBalance;\n+    CAmount cachedWatchOnlyBalance;\n+    CAmount cachedWatchUnconfBalance;\n+    CAmount cachedWatchImmatureBalance;\n     EncryptionStatus cachedEncryptionStatus;\n     int cachedNumBlocks;\n \n@@ -227,8 +227,8 @@ class WalletModel : public QObject\n \n signals:\n     // Signal that balance in wallet changed\n-    void balanceChanged(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance,\n-                        qint64 watchOnlyBalance, qint64 watchUnconfBalance, qint64 watchImmatureBalance);\n+    void balanceChanged(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance,\n+                        const CAmount& watchOnlyBalance, const CAmount& watchUnconfBalance, const CAmount& watchImmatureBalance);\n \n     // Encryption status of wallet changed\n     void encryptionStatusChanged(int status);"
      },
      {
        "sha": "ddd2d09bb53498bd43ed515b155a2e16cd31559f",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -31,19 +31,19 @@ CWalletTx *WalletModelTransaction::getTransaction()\n     return walletTransaction;\n }\n \n-qint64 WalletModelTransaction::getTransactionFee()\n+CAmount WalletModelTransaction::getTransactionFee()\n {\n     return fee;\n }\n \n-void WalletModelTransaction::setTransactionFee(qint64 newFee)\n+void WalletModelTransaction::setTransactionFee(const CAmount& newFee)\n {\n     fee = newFee;\n }\n \n-qint64 WalletModelTransaction::getTotalTransactionAmount()\n+CAmount WalletModelTransaction::getTotalTransactionAmount()\n {\n-    qint64 totalTransactionAmount = 0;\n+    CAmount totalTransactionAmount = 0;\n     foreach(const SendCoinsRecipient &rcp, recipients)\n     {\n         totalTransactionAmount += rcp.amount;"
      },
      {
        "sha": "4eadfbe4d19ffeabe1754e7b23da0b7874c6e356",
        "filename": "src/qt/walletmodeltransaction.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/walletmodeltransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/walletmodeltransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -26,10 +26,10 @@ class WalletModelTransaction\n \n     CWalletTx *getTransaction();\n \n-    void setTransactionFee(qint64 newFee);\n-    qint64 getTransactionFee();\n+    void setTransactionFee(const CAmount& newFee);\n+    CAmount getTransactionFee();\n \n-    qint64 getTotalTransactionAmount();\n+    CAmount getTotalTransactionAmount();\n \n     void newPossibleKeyChange(CWallet *wallet);\n     CReserveKey *getPossibleKeyChange();\n@@ -38,7 +38,7 @@ class WalletModelTransaction\n     const QList<SendCoinsRecipient> recipients;\n     CWalletTx *walletTransaction;\n     CReserveKey *keyChange;\n-    qint64 fee;\n+    CAmount fee;\n };\n \n #endif // WALLETMODELTRANSACTION_H"
      },
      {
        "sha": "322d0a6ee60676273de8547c8dd1fbd0c52e429c",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -92,7 +92,7 @@ void WalletView::setBitcoinGUI(BitcoinGUI *gui)\n         connect(this, SIGNAL(encryptionStatusChanged(int)), gui, SLOT(setEncryptionStatus(int)));\n \n         // Pass through transaction notifications\n-        connect(this, SIGNAL(incomingTransaction(QString,int,qint64,QString,QString)), gui, SLOT(incomingTransaction(QString,int,qint64,QString,QString)));\n+        connect(this, SIGNAL(incomingTransaction(QString,int,const CAmount&,QString,QString)), gui, SLOT(incomingTransaction(QString,int,const CAmount&,QString,QString)));\n     }\n }\n "
      },
      {
        "sha": "cafba517fdf937832b4d82e922420591ecfd84ae",
        "filename": "src/qt/walletview.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/walletview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/walletview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef WALLETVIEW_H\n #define WALLETVIEW_H\n \n+#include \"amount.h\"\n+\n #include <QStackedWidget>\n \n class BitcoinGUI;\n@@ -111,7 +113,7 @@ public slots:\n     /** Encryption status of wallet changed */\n     void encryptionStatusChanged(int status);\n     /** Notify that a new transaction appeared */\n-    void incomingTransaction(const QString& date, int unit, qint64 amount, const QString& type, const QString& address);\n+    void incomingTransaction(const QString& date, int unit, const CAmount& amount, const QString& type, const QString& address);\n };\n \n #endif // WALLETVIEW_H"
      },
      {
        "sha": "e794bf69e0028bee2e94d9fe380167d7d903dd19",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -273,7 +273,7 @@ Value prioritisetransaction(const Array& params, bool fHelp)\n     uint256 hash;\n     hash.SetHex(params[0].get_str());\n \n-    int64_t nAmount = 0;\n+    CAmount nAmount = 0;\n     if (params[2].get_real() != 0.0)\n         nAmount = AmountFromValue(params[2]);\n "
      },
      {
        "sha": "bd87d77704ca547049b5465abf8f44b931efdbc8",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -269,7 +269,7 @@ Value listunspent(const Array& params, bool fHelp)\n                 continue;\n         }\n \n-        int64_t nValue = out.tx->vout[out.i].nValue;\n+        CAmount nValue = out.tx->vout[out.i].nValue;\n         const CScript& pk = out.tx->vout[out.i].scriptPubKey;\n         Object entry;\n         entry.push_back(Pair(\"txid\", out.tx->GetHash().GetHex()));\n@@ -367,7 +367,7 @@ Value createrawtransaction(const Array& params, bool fHelp)\n         setAddress.insert(address);\n \n         CScript scriptPubKey = GetScriptForDestination(address.Get());\n-        int64_t nAmount = AmountFromValue(s.value_);\n+        CAmount nAmount = AmountFromValue(s.value_);\n \n         CTxOut out(nAmount, scriptPubKey);\n         rawTx.vout.push_back(out);"
      },
      {
        "sha": "1a41344da53acf14d4c3d980d15ba71e57ec87ff",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -88,18 +88,18 @@ static inline int64_t roundint64(double d)\n     return (int64_t)(d > 0 ? d + 0.5 : d - 0.5);\n }\n \n-int64_t AmountFromValue(const Value& value)\n+CAmount AmountFromValue(const Value& value)\n {\n     double dAmount = value.get_real();\n     if (dAmount <= 0.0 || dAmount > 21000000.0)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n-    int64_t nAmount = roundint64(dAmount * COIN);\n+    CAmount nAmount = roundint64(dAmount * COIN);\n     if (!MoneyRange(nAmount))\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n     return nAmount;\n }\n \n-Value ValueFromAmount(int64_t amount)\n+Value ValueFromAmount(const CAmount& amount)\n {\n     return (double)amount / (double)COIN;\n }"
      },
      {
        "sha": "d440035f151da6e8f90047714890d7a2f8cd95c2",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef _BITCOINRPC_SERVER_H_\n #define _BITCOINRPC_SERVER_H_\n \n+#include \"amount.h\"\n #include \"uint256.h\"\n #include \"rpcprotocol.h\"\n \n@@ -116,8 +117,8 @@ extern void InitRPCMining();\n extern void ShutdownRPCMining();\n \n extern int64_t nWalletUnlockTime;\n-extern int64_t AmountFromValue(const json_spirit::Value& value);\n-extern json_spirit::Value ValueFromAmount(int64_t amount);\n+extern CAmount AmountFromValue(const json_spirit::Value& value);\n+extern json_spirit::Value ValueFromAmount(const CAmount& amount);\n extern double GetDifficulty(const CBlockIndex* blockindex = NULL);\n extern std::string HelpRequiringPassphrase();\n extern std::string HelpExampleCli(std::string methodname, std::string args);"
      },
      {
        "sha": "632c46acd591d2f6d1fb5790b20bd8b94c858ae4",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 31,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -331,7 +331,7 @@ Value sendtoaddress(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n     // Amount\n-    int64_t nAmount = AmountFromValue(params[1]);\n+    CAmount nAmount = AmountFromValue(params[1]);\n \n     // Wallet comments\n     CWalletTx wtx;\n@@ -375,7 +375,7 @@ Value listaddressgroupings(const Array& params, bool fHelp)\n         );\n \n     Array jsonGroupings;\n-    map<CTxDestination, int64_t> balances = pwalletMain->GetAddressBalances();\n+    map<CTxDestination, CAmount> balances = pwalletMain->GetAddressBalances();\n     BOOST_FOREACH(set<CTxDestination> grouping, pwalletMain->GetAddressGroupings())\n     {\n         Array jsonGrouping;\n@@ -483,7 +483,7 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n         nMinDepth = params[1].get_int();\n \n     // Tally\n-    int64_t nAmount = 0;\n+    CAmount nAmount = 0;\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n@@ -532,7 +532,7 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n     set<CTxDestination> setAddress = pwalletMain->GetAccountAddresses(strAccount);\n \n     // Tally\n-    int64_t nAmount = 0;\n+    CAmount nAmount = 0;\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n@@ -552,9 +552,9 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n }\n \n \n-int64_t GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinDepth, const isminefilter& filter)\n+CAmount GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinDepth, const isminefilter& filter)\n {\n-    int64_t nBalance = 0;\n+    CAmount nBalance = 0;\n \n     // Tally wallet transactions\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n@@ -563,7 +563,7 @@ int64_t GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMi\n         if (!IsFinalTx(wtx) || wtx.GetBlocksToMaturity() > 0 || wtx.GetDepthInMainChain() < 0)\n             continue;\n \n-        int64_t nReceived, nSent, nFee;\n+        CAmount nReceived, nSent, nFee;\n         wtx.GetAccountAmounts(strAccount, nReceived, nSent, nFee, filter);\n \n         if (nReceived != 0 && wtx.GetDepthInMainChain() >= nMinDepth)\n@@ -577,7 +577,7 @@ int64_t GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMi\n     return nBalance;\n }\n \n-int64_t GetAccountBalance(const string& strAccount, int nMinDepth, const isminefilter& filter)\n+CAmount GetAccountBalance(const string& strAccount, int nMinDepth, const isminefilter& filter)\n {\n     CWalletDB walletdb(pwalletMain->strWalletFile);\n     return GetAccountBalance(walletdb, strAccount, nMinDepth, filter);\n@@ -627,14 +627,14 @@ Value getbalance(const Array& params, bool fHelp)\n         // Calculate total balance a different way from GetBalance()\n         // (GetBalance() sums up all unspent TxOuts)\n         // getbalance and getbalance '*' 0 should return the same number\n-        int64_t nBalance = 0;\n+        CAmount nBalance = 0;\n         for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n         {\n             const CWalletTx& wtx = (*it).second;\n             if (!wtx.IsTrusted() || wtx.GetBlocksToMaturity() > 0)\n                 continue;\n \n-            int64_t allFee;\n+            CAmount allFee;\n             string strSentAccount;\n             list<COutputEntry> listReceived;\n             list<COutputEntry> listSent;\n@@ -653,7 +653,7 @@ Value getbalance(const Array& params, bool fHelp)\n \n     string strAccount = AccountFromValue(params[0]);\n \n-    int64_t nBalance = GetAccountBalance(strAccount, nMinDepth, filter);\n+    CAmount nBalance = GetAccountBalance(strAccount, nMinDepth, filter);\n \n     return ValueFromAmount(nBalance);\n }\n@@ -692,7 +692,7 @@ Value movecmd(const Array& params, bool fHelp)\n \n     string strFrom = AccountFromValue(params[0]);\n     string strTo = AccountFromValue(params[1]);\n-    int64_t nAmount = AmountFromValue(params[2]);\n+    CAmount nAmount = AmountFromValue(params[2]);\n     if (params.size() > 3)\n         // unused parameter, used to be nMinDepth, keep type-checking it though\n         (void)params[3].get_int();\n@@ -766,7 +766,7 @@ Value sendfrom(const Array& params, bool fHelp)\n     CBitcoinAddress address(params[1].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n-    int64_t nAmount = AmountFromValue(params[2]);\n+    CAmount nAmount = AmountFromValue(params[2]);\n     int nMinDepth = 1;\n     if (params.size() > 3)\n         nMinDepth = params[3].get_int();\n@@ -781,7 +781,7 @@ Value sendfrom(const Array& params, bool fHelp)\n     EnsureWalletIsUnlocked();\n \n     // Check funds\n-    int64_t nBalance = GetAccountBalance(strAccount, nMinDepth, ISMINE_SPENDABLE);\n+    CAmount nBalance = GetAccountBalance(strAccount, nMinDepth, ISMINE_SPENDABLE);\n     if (nAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n@@ -834,9 +834,9 @@ Value sendmany(const Array& params, bool fHelp)\n         wtx.mapValue[\"comment\"] = params[3].get_str();\n \n     set<CBitcoinAddress> setAddress;\n-    vector<pair<CScript, int64_t> > vecSend;\n+    vector<pair<CScript, CAmount> > vecSend;\n \n-    int64_t totalAmount = 0;\n+    CAmount totalAmount = 0;\n     BOOST_FOREACH(const Pair& s, sendTo)\n     {\n         CBitcoinAddress address(s.name_);\n@@ -848,7 +848,7 @@ Value sendmany(const Array& params, bool fHelp)\n         setAddress.insert(address);\n \n         CScript scriptPubKey = GetScriptForDestination(address.Get());\n-        int64_t nAmount = AmountFromValue(s.value_);\n+        CAmount nAmount = AmountFromValue(s.value_);\n         totalAmount += nAmount;\n \n         vecSend.push_back(make_pair(scriptPubKey, nAmount));\n@@ -857,13 +857,13 @@ Value sendmany(const Array& params, bool fHelp)\n     EnsureWalletIsUnlocked();\n \n     // Check funds\n-    int64_t nBalance = GetAccountBalance(strAccount, nMinDepth, ISMINE_SPENDABLE);\n+    CAmount nBalance = GetAccountBalance(strAccount, nMinDepth, ISMINE_SPENDABLE);\n     if (totalAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n     // Send\n     CReserveKey keyChange(pwalletMain);\n-    int64_t nFeeRequired = 0;\n+    CAmount nFeeRequired = 0;\n     string strFailReason;\n     bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, strFailReason);\n     if (!fCreated)\n@@ -923,7 +923,7 @@ Value addmultisigaddress(const Array& params, bool fHelp)\n \n struct tallyitem\n {\n-    int64_t nAmount;\n+    CAmount nAmount;\n     int nConf;\n     vector<uint256> txids;\n     bool fIsWatchonly;\n@@ -995,7 +995,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n         if (it == mapTally.end() && !fIncludeEmpty)\n             continue;\n \n-        int64_t nAmount = 0;\n+        CAmount nAmount = 0;\n         int nConf = std::numeric_limits<int>::max();\n         bool fIsWatchonly = false;\n         if (it != mapTally.end())\n@@ -1038,7 +1038,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n     {\n         for (map<string, tallyitem>::iterator it = mapAccountTally.begin(); it != mapAccountTally.end(); ++it)\n         {\n-            int64_t nAmount = (*it).second.nAmount;\n+            CAmount nAmount = (*it).second.nAmount;\n             int nConf = (*it).second.nConf;\n             Object obj;\n             if((*it).second.fIsWatchonly)\n@@ -1125,7 +1125,7 @@ static void MaybePushAddress(Object & entry, const CTxDestination &dest)\n \n void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, Array& ret, const isminefilter& filter)\n {\n-    int64_t nFee;\n+    CAmount nFee;\n     string strSentAccount;\n     list<COutputEntry> listReceived;\n     list<COutputEntry> listSent;\n@@ -1355,7 +1355,7 @@ Value listaccounts(const Array& params, bool fHelp)\n         if(params[1].get_bool())\n             includeWatchonly = includeWatchonly | ISMINE_WATCH_ONLY;\n \n-    map<string, int64_t> mapAccountBalances;\n+    map<string, CAmount> mapAccountBalances;\n     BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {\n         if (IsMine(*pwalletMain, entry.first) & includeWatchonly) // This address belongs to me\n             mapAccountBalances[entry.second.name] = 0;\n@@ -1364,7 +1364,7 @@ Value listaccounts(const Array& params, bool fHelp)\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n-        int64_t nFee;\n+        CAmount nFee;\n         string strSentAccount;\n         list<COutputEntry> listReceived;\n         list<COutputEntry> listSent;\n@@ -1391,7 +1391,7 @@ Value listaccounts(const Array& params, bool fHelp)\n         mapAccountBalances[entry.strAccount] += entry.nCreditDebit;\n \n     Object ret;\n-    BOOST_FOREACH(const PAIRTYPE(string, int64_t)& accountBalance, mapAccountBalances) {\n+    BOOST_FOREACH(const PAIRTYPE(string, CAmount)& accountBalance, mapAccountBalances) {\n         ret.push_back(Pair(accountBalance.first, ValueFromAmount(accountBalance.second)));\n     }\n     return ret;\n@@ -1534,10 +1534,10 @@ Value gettransaction(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n     const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n \n-    int64_t nCredit = wtx.GetCredit(filter != 0);\n-    int64_t nDebit = wtx.GetDebit(filter);\n-    int64_t nNet = nCredit - nDebit;\n-    int64_t nFee = (wtx.IsFromMe(filter) ? wtx.GetValueOut() - nDebit : 0);\n+    CAmount nCredit = wtx.GetCredit(filter != 0);\n+    CAmount nDebit = wtx.GetDebit(filter);\n+    CAmount nNet = nCredit - nDebit;\n+    CAmount nFee = (wtx.IsFromMe(filter) ? wtx.GetValueOut() - nDebit : 0);\n \n     entry.push_back(Pair(\"amount\", ValueFromAmount(nNet - nFee)));\n     if (wtx.IsFromMe(filter))\n@@ -1937,7 +1937,7 @@ Value settxfee(const Array& params, bool fHelp)\n         );\n \n     // Amount\n-    int64_t nAmount = 0;\n+    CAmount nAmount = 0;\n     if (params[0].get_real() != 0.0)\n         nAmount = AmountFromValue(params[0]);        // rejects 0.0 amounts\n "
      },
      {
        "sha": "af2a9a214f0cef37d3db7bf59bf36638ec13a788",
        "filename": "src/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/accounting_tests.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -15,7 +15,7 @@ extern CWallet* pwalletMain;\n BOOST_AUTO_TEST_SUITE(accounting_tests)\n \n static void\n-GetResults(CWalletDB& walletdb, std::map<int64_t, CAccountingEntry>& results)\n+GetResults(CWalletDB& walletdb, std::map<CAmount, CAccountingEntry>& results)\n {\n     std::list<CAccountingEntry> aes;\n \n@@ -34,7 +34,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     std::vector<CWalletTx*> vpwtx;\n     CWalletTx wtx;\n     CAccountingEntry ae;\n-    std::map<int64_t, CAccountingEntry> results;\n+    std::map<CAmount, CAccountingEntry> results;\n \n     LOCK(pwalletMain->cs_wallet);\n "
      },
      {
        "sha": "70a800af51b70ba57ac4f9ecab3a1764be29e9d0",
        "filename": "src/test/main_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/test/main_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/test/main_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main_tests.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -11,9 +11,9 @@ BOOST_AUTO_TEST_SUITE(main_tests)\n \n BOOST_AUTO_TEST_CASE(subsidy_limit_test)\n {\n-    uint64_t nSum = 0;\n+    CAmount nSum = 0;\n     for (int nHeight = 0; nHeight < 14000000; nHeight += 1000) {\n-        uint64_t nSubsidy = GetBlockValue(nHeight, 0);\n+        CAmount nSubsidy = GetBlockValue(nHeight, 0);\n         BOOST_CHECK(nSubsidy <= 50 * COIN);\n         nSum += nSubsidy * 1000;\n         BOOST_CHECK(MoneyRange(nSum));"
      },
      {
        "sha": "6378bd09418e61f284a12dd92894edaa8af37f40",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -171,7 +171,7 @@ BOOST_AUTO_TEST_CASE(util_FormatMoney)\n \n BOOST_AUTO_TEST_CASE(util_ParseMoney)\n {\n-    int64_t ret = 0;\n+    CAmount ret = 0;\n     BOOST_CHECK(ParseMoney(\"0.0\", ret));\n     BOOST_CHECK_EQUAL(ret, 0);\n "
      },
      {
        "sha": "90fc470e0645f653432bd5defe46c24116df6de0",
        "filename": "src/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/wallet_tests.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -28,7 +28,7 @@ BOOST_AUTO_TEST_SUITE(wallet_tests)\n static CWallet wallet;\n static vector<COutput> vCoins;\n \n-static void add_coin(int64_t nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n+static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n {\n     static int nextLockTime = 0;\n     CMutableTransaction tx;\n@@ -66,7 +66,7 @@ static bool equal_sets(CoinSet a, CoinSet b)\n BOOST_AUTO_TEST_CASE(coin_selection_tests)\n {\n     CoinSet setCoinsRet, setCoinsRet2;\n-    int64_t nValueRet;\n+    CAmount nValueRet;\n \n     LOCK(wallet.cs_wallet);\n "
      },
      {
        "sha": "d5f424fabddec0599041ff8dc33031e38840a787",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -117,7 +117,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n     CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n     stats.hashBlock = GetBestBlock();\n     ss << stats.hashBlock;\n-    int64_t nTotalAmount = 0;\n+    CAmount nTotalAmount = 0;\n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();\n         try {"
      },
      {
        "sha": "d923c2204a5450ced3eb8aaefc714de4f70d26bf",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"core.h\"\n #include \"util.h\"\n+#include \"utilmoneystr.h\"\n \n #include <boost/circular_buffer.hpp>\n \n@@ -18,7 +19,7 @@ CTxMemPoolEntry::CTxMemPoolEntry():\n     nHeight = MEMPOOL_HEIGHT;\n }\n \n-CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, int64_t _nFee,\n+CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, double _dPriority,\n                                  unsigned int _nHeight):\n     tx(_tx), nFee(_nFee), nTime(_nTime), dPriority(_dPriority), nHeight(_nHeight)\n@@ -36,7 +37,7 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n double\n CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n {\n-    int64_t nValueIn = tx.GetValueOut()+nFee;\n+    CAmount nValueIn = tx.GetValueOut()+nFee;\n     double deltaPriority = ((double)(currentHeight-nHeight)*nValueIn)/nModSize;\n     double dResult = dPriority + deltaPriority;\n     return dResult;\n@@ -601,24 +602,24 @@ CTxMemPool::ReadFeeEstimates(CAutoFile& filein)\n     return true;\n }\n \n-void CTxMemPool::PrioritiseTransaction(const uint256 hash, const string strHash, double dPriorityDelta, int64_t nFeeDelta)\n+void CTxMemPool::PrioritiseTransaction(const uint256 hash, const string strHash, double dPriorityDelta, const CAmount& nFeeDelta)\n {\n     {\n         LOCK(cs);\n-        std::pair<double, int64_t> &deltas = mapDeltas[hash];\n+        std::pair<double, CAmount> &deltas = mapDeltas[hash];\n         deltas.first += dPriorityDelta;\n         deltas.second += nFeeDelta;\n     }\n-    LogPrintf(\"PrioritiseTransaction: %s priority += %f, fee += %d\\n\", strHash, dPriorityDelta, nFeeDelta);\n+    LogPrintf(\"PrioritiseTransaction: %s priority += %f, fee += %d\\n\", strHash, dPriorityDelta, FormatMoney(nFeeDelta));\n }\n \n-void CTxMemPool::ApplyDeltas(const uint256 hash, double &dPriorityDelta, int64_t &nFeeDelta)\n+void CTxMemPool::ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta)\n {\n     LOCK(cs);\n-    std::map<uint256, std::pair<double, int64_t> >::iterator pos = mapDeltas.find(hash);\n+    std::map<uint256, std::pair<double, CAmount> >::iterator pos = mapDeltas.find(hash);\n     if (pos == mapDeltas.end())\n         return;\n-    const std::pair<double, int64_t> &deltas = pos->second;\n+    const std::pair<double, CAmount> &deltas = pos->second;\n     dPriorityDelta += deltas.first;\n     nFeeDelta += deltas.second;\n }"
      },
      {
        "sha": "c35ea52d4e0020a7b88618d57e78c49f60acaa83",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -29,22 +29,22 @@ class CTxMemPoolEntry\n {\n private:\n     CTransaction tx;\n-    int64_t nFee; // Cached to avoid expensive parent-transaction lookups\n+    CAmount nFee; // Cached to avoid expensive parent-transaction lookups\n     size_t nTxSize; // ... and avoid recomputing tx size\n     size_t nModSize; // ... and modified size for priority\n     int64_t nTime; // Local time when entering the mempool\n     double dPriority; // Priority when entering the mempool\n     unsigned int nHeight; // Chain height when entering the mempool\n \n public:\n-    CTxMemPoolEntry(const CTransaction& _tx, int64_t _nFee,\n+    CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                     int64_t _nTime, double _dPriority, unsigned int _nHeight);\n     CTxMemPoolEntry();\n     CTxMemPoolEntry(const CTxMemPoolEntry& other);\n \n     const CTransaction& GetTx() const { return this->tx; }\n     double GetPriority(unsigned int currentHeight) const;\n-    int64_t GetFee() const { return nFee; }\n+    CAmount GetFee() const { return nFee; }\n     size_t GetTxSize() const { return nTxSize; }\n     int64_t GetTime() const { return nTime; }\n     unsigned int GetHeight() const { return nHeight; }\n@@ -76,7 +76,7 @@ class CTxMemPool\n     mutable CCriticalSection cs;\n     std::map<uint256, CTxMemPoolEntry> mapTx;\n     std::map<COutPoint, CInPoint> mapNextTx;\n-    std::map<uint256, std::pair<double, int64_t> > mapDeltas;\n+    std::map<uint256, std::pair<double, CAmount> > mapDeltas;\n \n     CTxMemPool(const CFeeRate& _minRelayFee);\n     ~CTxMemPool();\n@@ -102,8 +102,8 @@ class CTxMemPool\n     void AddTransactionsUpdated(unsigned int n);\n \n     /** Affect CreateNewBlock prioritisation of transactions */\n-    void PrioritiseTransaction(const uint256 hash, const std::string strHash, double dPriorityDelta, int64_t nFeeDelta);\n-    void ApplyDeltas(const uint256 hash, double &dPriorityDelta, int64_t &nFeeDelta);\n+    void PrioritiseTransaction(const uint256 hash, const std::string strHash, double dPriorityDelta, const CAmount& nFeeDelta);\n+    void ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta);\n     void ClearPrioritisation(const uint256 hash);\n \n     unsigned long size()"
      },
      {
        "sha": "fb1d3eacb575f97c4c8ad667b8c902d2bdb10cc1",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -14,6 +14,7 @@\n #include \"config/bitcoin-config.h\"\n #endif\n \n+#include \"amount.h\"\n #include \"compat.h\"\n #include \"tinyformat.h\"\n #include \"utiltime.h\""
      },
      {
        "sha": "1a5635bfb8d089939d667113f58360b2f0831ff0",
        "filename": "src/utilmoneystr.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/utilmoneystr.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/utilmoneystr.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilmoneystr.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -10,7 +10,7 @@\n \n using namespace std;\n \n-string FormatMoney(int64_t n, bool fPlus)\n+string FormatMoney(const CAmount& n, bool fPlus)\n {\n     // Note: not using straight sprintf here because we do NOT want\n     // localized number formatting.\n@@ -34,12 +34,12 @@ string FormatMoney(int64_t n, bool fPlus)\n }\n \n \n-bool ParseMoney(const string& str, int64_t& nRet)\n+bool ParseMoney(const string& str, CAmount& nRet)\n {\n     return ParseMoney(str.c_str(), nRet);\n }\n \n-bool ParseMoney(const char* pszIn, int64_t& nRet)\n+bool ParseMoney(const char* pszIn, CAmount& nRet)\n {\n     string strWhole;\n     int64_t nUnits = 0;\n@@ -73,7 +73,7 @@ bool ParseMoney(const char* pszIn, int64_t& nRet)\n     if (nUnits < 0 || nUnits > COIN)\n         return false;\n     int64_t nWhole = atoi64(strWhole);\n-    int64_t nValue = nWhole*COIN + nUnits;\n+    CAmount nValue = nWhole*COIN + nUnits;\n \n     nRet = nValue;\n     return true;"
      },
      {
        "sha": "65415afd3f3121dd1550eba5ad6e2032eab97b5b",
        "filename": "src/utilmoneystr.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/utilmoneystr.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/utilmoneystr.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilmoneystr.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -12,8 +12,10 @@\n #include <stdint.h>\n #include <string>\n \n-std::string FormatMoney(int64_t n, bool fPlus=false);\n-bool ParseMoney(const std::string& str, int64_t& nRet);\n-bool ParseMoney(const char* pszIn, int64_t& nRet);\n+#include \"amount.h\"\n+\n+std::string FormatMoney(const CAmount& n, bool fPlus=false);\n+bool ParseMoney(const std::string& str, CAmount& nRet);\n+bool ParseMoney(const char* pszIn, CAmount& nRet);\n \n #endif // BITCOIN_UTILMONEYSTR_H"
      },
      {
        "sha": "b20b0007ce28379f6c5ff2ae1bc463ddc0200571",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 54,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -35,8 +35,8 @@ CFeeRate CWallet::minTxFee = CFeeRate(10000);  // Override with -mintxfee\n \n struct CompareValueOnly\n {\n-    bool operator()(const pair<int64_t, pair<const CWalletTx*, unsigned int> >& t1,\n-                    const pair<int64_t, pair<const CWalletTx*, unsigned int> >& t2) const\n+    bool operator()(const pair<CAmount, pair<const CWalletTx*, unsigned int> >& t1,\n+                    const pair<CAmount, pair<const CWalletTx*, unsigned int> >& t2) const\n     {\n         return t1.first < t2.first;\n     }\n@@ -697,7 +697,7 @@ isminetype CWallet::IsMine(const CTxIn &txin) const\n     return ISMINE_NO;\n }\n \n-int64_t CWallet::GetDebit(const CTxIn &txin, const isminefilter& filter) const\n+CAmount CWallet::GetDebit(const CTxIn &txin, const isminefilter& filter) const\n {\n     {\n         LOCK(cs_wallet);\n@@ -781,18 +781,18 @@ int CWalletTx::GetRequestCount() const\n }\n \n void CWalletTx::GetAmounts(list<COutputEntry>& listReceived,\n-                           list<COutputEntry>& listSent, int64_t& nFee, string& strSentAccount, const isminefilter& filter) const\n+                           list<COutputEntry>& listSent, CAmount& nFee, string& strSentAccount, const isminefilter& filter) const\n {\n     nFee = 0;\n     listReceived.clear();\n     listSent.clear();\n     strSentAccount = strFromAccount;\n \n     // Compute fee:\n-    int64_t nDebit = GetDebit(filter);\n+    CAmount nDebit = GetDebit(filter);\n     if (nDebit > 0) // debit>0 means we signed/sent this transaction\n     {\n-        int64_t nValueOut = GetValueOut();\n+        CAmount nValueOut = GetValueOut();\n         nFee = nDebit - nValueOut;\n     }\n \n@@ -835,12 +835,12 @@ void CWalletTx::GetAmounts(list<COutputEntry>& listReceived,\n \n }\n \n-void CWalletTx::GetAccountAmounts(const string& strAccount, int64_t& nReceived,\n-                                  int64_t& nSent, int64_t& nFee, const isminefilter& filter) const\n+void CWalletTx::GetAccountAmounts(const string& strAccount, CAmount& nReceived,\n+                                  CAmount& nSent, CAmount& nFee, const isminefilter& filter) const\n {\n     nReceived = nSent = nFee = 0;\n \n-    int64_t allFee;\n+    CAmount allFee;\n     string strSentAccount;\n     list<COutputEntry> listReceived;\n     list<COutputEntry> listSent;\n@@ -1011,9 +1011,9 @@ void CWallet::ResendWalletTransactions()\n //\n \n \n-int64_t CWallet::GetBalance() const\n+CAmount CWallet::GetBalance() const\n {\n-    int64_t nTotal = 0;\n+    CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n@@ -1027,9 +1027,9 @@ int64_t CWallet::GetBalance() const\n     return nTotal;\n }\n \n-int64_t CWallet::GetUnconfirmedBalance() const\n+CAmount CWallet::GetUnconfirmedBalance() const\n {\n-    int64_t nTotal = 0;\n+    CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n@@ -1042,9 +1042,9 @@ int64_t CWallet::GetUnconfirmedBalance() const\n     return nTotal;\n }\n \n-int64_t CWallet::GetImmatureBalance() const\n+CAmount CWallet::GetImmatureBalance() const\n {\n-    int64_t nTotal = 0;\n+    CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n@@ -1056,9 +1056,9 @@ int64_t CWallet::GetImmatureBalance() const\n     return nTotal;\n }\n \n-int64_t CWallet::GetWatchOnlyBalance() const\n+CAmount CWallet::GetWatchOnlyBalance() const\n {\n-    int64_t nTotal = 0;\n+    CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n@@ -1072,9 +1072,9 @@ int64_t CWallet::GetWatchOnlyBalance() const\n     return nTotal;\n }\n \n-int64_t CWallet::GetUnconfirmedWatchOnlyBalance() const\n+CAmount CWallet::GetUnconfirmedWatchOnlyBalance() const\n {\n-    int64_t nTotal = 0;\n+    CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n@@ -1087,9 +1087,9 @@ int64_t CWallet::GetUnconfirmedWatchOnlyBalance() const\n     return nTotal;\n }\n \n-int64_t CWallet::GetImmatureWatchOnlyBalance() const\n+CAmount CWallet::GetImmatureWatchOnlyBalance() const\n {\n-    int64_t nTotal = 0;\n+    CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n@@ -1137,8 +1137,8 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n     }\n }\n \n-static void ApproximateBestSubset(vector<pair<int64_t, pair<const CWalletTx*,unsigned int> > >vValue, int64_t nTotalLower, int64_t nTargetValue,\n-                                  vector<char>& vfBest, int64_t& nBest, int iterations = 1000)\n+static void ApproximateBestSubset(vector<pair<CAmount, pair<const CWalletTx*,unsigned int> > >vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n+                                  vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n {\n     vector<char> vfIncluded;\n \n@@ -1150,7 +1150,7 @@ static void ApproximateBestSubset(vector<pair<int64_t, pair<const CWalletTx*,uns\n     for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n     {\n         vfIncluded.assign(vValue.size(), false);\n-        int64_t nTotal = 0;\n+        CAmount nTotal = 0;\n         bool fReachedTarget = false;\n         for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n         {\n@@ -1183,18 +1183,18 @@ static void ApproximateBestSubset(vector<pair<int64_t, pair<const CWalletTx*,uns\n     }\n }\n \n-bool CWallet::SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfTheirs, vector<COutput> vCoins,\n-                                 set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64_t& nValueRet) const\n+bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, vector<COutput> vCoins,\n+                                 set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n     // List of values less than target\n-    pair<int64_t, pair<const CWalletTx*,unsigned int> > coinLowestLarger;\n-    coinLowestLarger.first = std::numeric_limits<int64_t>::max();\n+    pair<CAmount, pair<const CWalletTx*,unsigned int> > coinLowestLarger;\n+    coinLowestLarger.first = std::numeric_limits<CAmount>::max();\n     coinLowestLarger.second.first = NULL;\n-    vector<pair<int64_t, pair<const CWalletTx*,unsigned int> > > vValue;\n-    int64_t nTotalLower = 0;\n+    vector<pair<CAmount, pair<const CWalletTx*,unsigned int> > > vValue;\n+    CAmount nTotalLower = 0;\n \n     random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n \n@@ -1209,9 +1209,9 @@ bool CWallet::SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfT\n             continue;\n \n         int i = output.i;\n-        int64_t n = pcoin->vout[i].nValue;\n+        CAmount n = pcoin->vout[i].nValue;\n \n-        pair<int64_t,pair<const CWalletTx*,unsigned int> > coin = make_pair(n,make_pair(pcoin, i));\n+        pair<CAmount,pair<const CWalletTx*,unsigned int> > coin = make_pair(n,make_pair(pcoin, i));\n \n         if (n == nTargetValue)\n         {\n@@ -1252,7 +1252,7 @@ bool CWallet::SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfT\n     // Solve subset sum by stochastic approximation\n     sort(vValue.rbegin(), vValue.rend(), CompareValueOnly());\n     vector<char> vfBest;\n-    int64_t nBest;\n+    CAmount nBest;\n \n     ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest, 1000);\n     if (nBest != nTargetValue && nTotalLower >= nTargetValue + CENT)\n@@ -1284,7 +1284,7 @@ bool CWallet::SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfT\n     return true;\n }\n \n-bool CWallet::SelectCoins(int64_t nTargetValue, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64_t& nValueRet, const CCoinControl* coinControl) const\n+bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl* coinControl) const\n {\n     vector<COutput> vCoins;\n     AvailableCoins(vCoins, true, coinControl);\n@@ -1310,11 +1310,11 @@ bool CWallet::SelectCoins(int64_t nTargetValue, set<pair<const CWalletTx*,unsign\n \n \n \n-bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n-                                CWalletTx& wtxNew, CReserveKey& reservekey, int64_t& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl)\n+bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n+                                CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl)\n {\n-    int64_t nValue = 0;\n-    BOOST_FOREACH (const PAIRTYPE(CScript, int64_t)& s, vecSend)\n+    CAmount nValue = 0;\n+    BOOST_FOREACH (const PAIRTYPE(CScript, CAmount)& s, vecSend)\n     {\n         if (nValue < 0)\n         {\n@@ -1343,10 +1343,10 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n                 txNew.vout.clear();\n                 wtxNew.fFromMe = true;\n \n-                int64_t nTotalValue = nValue + nFeeRet;\n+                CAmount nTotalValue = nValue + nFeeRet;\n                 double dPriority = 0;\n                 // vouts to the payees\n-                BOOST_FOREACH (const PAIRTYPE(CScript, int64_t)& s, vecSend)\n+                BOOST_FOREACH (const PAIRTYPE(CScript, CAmount)& s, vecSend)\n                 {\n                     CTxOut txout(s.second, s.first);\n                     if (txout.IsDust(::minRelayTxFee))\n@@ -1359,22 +1359,22 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n \n                 // Choose coins to use\n                 set<pair<const CWalletTx*,unsigned int> > setCoins;\n-                int64_t nValueIn = 0;\n+                CAmount nValueIn = 0;\n                 if (!SelectCoins(nTotalValue, setCoins, nValueIn, coinControl))\n                 {\n                     strFailReason = _(\"Insufficient funds\");\n                     return false;\n                 }\n                 BOOST_FOREACH(PAIRTYPE(const CWalletTx*, unsigned int) pcoin, setCoins)\n                 {\n-                    int64_t nCredit = pcoin.first->vout[pcoin.second].nValue;\n+                    CAmount nCredit = pcoin.first->vout[pcoin.second].nValue;\n                     //The priority after the next block (depth+1) is used instead of the current,\n                     //reflecting an assumption the user would accept a bit more delay for\n                     //a chance at a free transaction.\n                     dPriority += (double)nCredit * (pcoin.first->GetDepthInMainChain()+1);\n                 }\n \n-                int64_t nChange = nValueIn - nValue - nFeeRet;\n+                CAmount nChange = nValueIn - nValue - nFeeRet;\n \n                 if (nChange > 0)\n                 {\n@@ -1450,7 +1450,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n                 }\n                 dPriority = wtxNew.ComputePriority(dPriority, nBytes);\n \n-                int64_t nFeeNeeded = GetMinimumFee(nBytes, nTxConfirmTarget, mempool);\n+                CAmount nFeeNeeded = GetMinimumFee(nBytes, nTxConfirmTarget, mempool);\n \n                 if (nFeeRet >= nFeeNeeded)\n                     break; // Done, enough fee included.\n@@ -1481,10 +1481,10 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n     return true;\n }\n \n-bool CWallet::CreateTransaction(CScript scriptPubKey, int64_t nValue,\n-                                CWalletTx& wtxNew, CReserveKey& reservekey, int64_t& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl)\n+bool CWallet::CreateTransaction(CScript scriptPubKey, const CAmount& nValue,\n+                                CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl)\n {\n-    vector< pair<CScript, int64_t> > vecSend;\n+    vector< pair<CScript, CAmount> > vecSend;\n     vecSend.push_back(make_pair(scriptPubKey, nValue));\n     return CreateTransaction(vecSend, wtxNew, reservekey, nFeeRet, strFailReason, coinControl);\n }\n@@ -1539,7 +1539,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n \n \n \n-string CWallet::SendMoney(const CTxDestination &address, int64_t nValue, CWalletTx& wtxNew)\n+string CWallet::SendMoney(const CTxDestination &address, CAmount nValue, CWalletTx& wtxNew)\n {\n     // Check amount\n     if (nValue <= 0)\n@@ -1560,7 +1560,7 @@ string CWallet::SendMoney(const CTxDestination &address, int64_t nValue, CWallet\n \n     // Create and send the transaction\n     CReserveKey reservekey(this);\n-    int64_t nFeeRequired;\n+    CAmount nFeeRequired;\n     if (!CreateTransaction(scriptPubKey, nValue, wtxNew, reservekey, nFeeRequired, strError))\n     {\n         if (nValue + nFeeRequired > GetBalance())\n@@ -1576,10 +1576,10 @@ string CWallet::SendMoney(const CTxDestination &address, int64_t nValue, CWallet\n \n \n \n-int64_t CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool)\n+CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool)\n {\n     // payTxFee is user-set \"I want to pay this much\"\n-    int64_t nFeeNeeded = payTxFee.GetFee(nTxBytes);\n+    CAmount nFeeNeeded = payTxFee.GetFee(nTxBytes);\n     // User didn't set: use -txconfirmtarget to estimate...\n     if (nFeeNeeded == 0)\n         nFeeNeeded = pool.estimateFee(nConfirmTarget).GetFee(nTxBytes);\n@@ -1838,9 +1838,9 @@ int64_t CWallet::GetOldestKeyPoolTime()\n     return keypool.nTime;\n }\n \n-std::map<CTxDestination, int64_t> CWallet::GetAddressBalances()\n+std::map<CTxDestination, CAmount> CWallet::GetAddressBalances()\n {\n-    map<CTxDestination, int64_t> balances;\n+    map<CTxDestination, CAmount> balances;\n \n     {\n         LOCK(cs_wallet);\n@@ -1866,7 +1866,7 @@ std::map<CTxDestination, int64_t> CWallet::GetAddressBalances()\n                 if(!ExtractDestination(pcoin->vout[i].scriptPubKey, addr))\n                     continue;\n \n-                int64_t n = IsSpent(walletEntry.first, i) ? 0 : pcoin->vout[i].nValue;\n+                CAmount n = IsSpent(walletEntry.first, i) ? 0 : pcoin->vout[i].nValue;\n \n                 if (!balances.count(addr))\n                     balances[addr] = 0;"
      },
      {
        "sha": "f3fffb22532fd479eca29c30e350982e43d604a2",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 50,
        "deletions": 50,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -30,9 +30,9 @@ extern unsigned int nTxConfirmTarget;\n extern bool bSpendZeroConfChange;\n \n // -paytxfee default\n-static const int64_t DEFAULT_TRANSACTION_FEE = 0;\n+static const CAmount DEFAULT_TRANSACTION_FEE = 0;\n // -paytxfee will warn if called with a higher fee than this amount (in satoshis) per KB\n-static const int nHighTransactionFeeWarning = 0.01 * COIN;\n+static const CAmount nHighTransactionFeeWarning = 0.01 * COIN;\n // Largest (in bytes) free transaction we're willing to create\n static const unsigned int MAX_FREE_TRANSACTION_CREATE_SIZE = 1000;\n \n@@ -98,7 +98,7 @@ class CAddressBookData\n class CWallet : public CCryptoKeyStore, public CWalletInterface\n {\n private:\n-    bool SelectCoins(int64_t nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64_t& nValueRet, const CCoinControl *coinControl = NULL) const;\n+    bool SelectCoins(const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl *coinControl = NULL) const;\n \n     CWalletDB *pwalletdbEncryption;\n \n@@ -182,7 +182,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     bool CanSupportFeature(enum WalletFeature wf) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n \n     void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL) const;\n-    bool SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64_t& nValueRet) const;\n+    bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const;\n \n     bool IsSpent(const uint256& hash, unsigned int n) const;\n \n@@ -253,21 +253,21 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions();\n-    int64_t GetBalance() const;\n-    int64_t GetUnconfirmedBalance() const;\n-    int64_t GetImmatureBalance() const;\n-    int64_t GetWatchOnlyBalance() const;\n-    int64_t GetUnconfirmedWatchOnlyBalance() const;\n-    int64_t GetImmatureWatchOnlyBalance() const;\n-    bool CreateTransaction(const std::vector<std::pair<CScript, int64_t> >& vecSend,\n-                           CWalletTx& wtxNew, CReserveKey& reservekey, int64_t& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n-    bool CreateTransaction(CScript scriptPubKey, int64_t nValue,\n-                           CWalletTx& wtxNew, CReserveKey& reservekey, int64_t& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n+    CAmount GetBalance() const;\n+    CAmount GetUnconfirmedBalance() const;\n+    CAmount GetImmatureBalance() const;\n+    CAmount GetWatchOnlyBalance() const;\n+    CAmount GetUnconfirmedWatchOnlyBalance() const;\n+    CAmount GetImmatureWatchOnlyBalance() const;\n+    bool CreateTransaction(const std::vector<std::pair<CScript, CAmount> >& vecSend,\n+                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n+    bool CreateTransaction(CScript scriptPubKey, const CAmount& nValue,\n+                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n-    std::string SendMoney(const CTxDestination &address, int64_t nValue, CWalletTx& wtxNew);\n+    std::string SendMoney(const CTxDestination &address, CAmount nValue, CWalletTx& wtxNew);\n \n     static CFeeRate minTxFee;\n-    static int64_t GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool);\n+    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool);\n \n     bool NewKeyPool();\n     bool TopUpKeyPool(unsigned int kpSize = 0);\n@@ -279,24 +279,24 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     void GetAllReserveKeys(std::set<CKeyID>& setAddress) const;\n \n     std::set< std::set<CTxDestination> > GetAddressGroupings();\n-    std::map<CTxDestination, int64_t> GetAddressBalances();\n+    std::map<CTxDestination, CAmount> GetAddressBalances();\n \n     std::set<CTxDestination> GetAccountAddresses(std::string strAccount) const;\n \n     isminetype IsMine(const CTxIn& txin) const;\n-    int64_t GetDebit(const CTxIn& txin, const isminefilter& filter) const;\n+    CAmount GetDebit(const CTxIn& txin, const isminefilter& filter) const;\n     isminetype IsMine(const CTxOut& txout) const\n     {\n         return ::IsMine(*this, txout.scriptPubKey);\n     }\n-    int64_t GetCredit(const CTxOut& txout, const isminefilter& filter) const\n+    CAmount GetCredit(const CTxOut& txout, const isminefilter& filter) const\n     {\n         if (!MoneyRange(txout.nValue))\n             throw std::runtime_error(\"CWallet::GetCredit() : value out of range\");\n         return ((IsMine(txout) & filter) ? txout.nValue : 0);\n     }\n     bool IsChange(const CTxOut& txout) const;\n-    int64_t GetChange(const CTxOut& txout) const\n+    CAmount GetChange(const CTxOut& txout) const\n     {\n         if (!MoneyRange(txout.nValue))\n             throw std::runtime_error(\"CWallet::GetChange() : value out of range\");\n@@ -313,9 +313,9 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     {\n         return (GetDebit(tx, ISMINE_ALL) > 0);\n     }\n-    int64_t GetDebit(const CTransaction& tx, const isminefilter& filter) const\n+    CAmount GetDebit(const CTransaction& tx, const isminefilter& filter) const\n     {\n-        int64_t nDebit = 0;\n+        CAmount nDebit = 0;\n         BOOST_FOREACH(const CTxIn& txin, tx.vin)\n         {\n             nDebit += GetDebit(txin, filter);\n@@ -324,9 +324,9 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n         }\n         return nDebit;\n     }\n-    int64_t GetCredit(const CTransaction& tx, const isminefilter& filter) const\n+    CAmount GetCredit(const CTransaction& tx, const isminefilter& filter) const\n     {\n-        int64_t nCredit = 0;\n+        CAmount nCredit = 0;\n         BOOST_FOREACH(const CTxOut& txout, tx.vout)\n         {\n             nCredit += GetCredit(txout, filter);\n@@ -335,9 +335,9 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n         }\n         return nCredit;\n     }\n-    int64_t GetChange(const CTransaction& tx) const\n+    CAmount GetChange(const CTransaction& tx) const\n     {\n-        int64_t nChange = 0;\n+        CAmount nChange = 0;\n         BOOST_FOREACH(const CTxOut& txout, tx.vout)\n         {\n             nChange += GetChange(txout);\n@@ -457,7 +457,7 @@ static void WriteOrderPos(const int64_t& nOrderPos, mapValue_t& mapValue)\n struct COutputEntry\n {\n     CTxDestination destination;\n-    int64_t amount;\n+    CAmount amount;\n     int vout;\n };\n \n@@ -545,15 +545,15 @@ class CWalletTx : public CMerkleTx\n     mutable bool fImmatureWatchCreditCached;\n     mutable bool fAvailableWatchCreditCached;\n     mutable bool fChangeCached;\n-    mutable int64_t nDebitCached;\n-    mutable int64_t nCreditCached;\n-    mutable int64_t nImmatureCreditCached;\n-    mutable int64_t nAvailableCreditCached;\n-    mutable int64_t nWatchDebitCached;\n-    mutable int64_t nWatchCreditCached;\n-    mutable int64_t nImmatureWatchCreditCached;\n-    mutable int64_t nAvailableWatchCreditCached;\n-    mutable int64_t nChangeCached;\n+    mutable CAmount nDebitCached;\n+    mutable CAmount nCreditCached;\n+    mutable CAmount nImmatureCreditCached;\n+    mutable CAmount nAvailableCreditCached;\n+    mutable CAmount nWatchDebitCached;\n+    mutable CAmount nWatchCreditCached;\n+    mutable CAmount nImmatureWatchCreditCached;\n+    mutable CAmount nAvailableWatchCreditCached;\n+    mutable CAmount nChangeCached;\n \n     CWalletTx()\n     {\n@@ -670,12 +670,12 @@ class CWalletTx : public CMerkleTx\n     }\n \n     // filter decides which addresses will count towards the debit\n-    int64_t GetDebit(const isminefilter& filter) const\n+    CAmount GetDebit(const isminefilter& filter) const\n     {\n         if (vin.empty())\n             return 0;\n \n-        int64_t debit = 0;\n+        CAmount debit = 0;\n         if(filter & ISMINE_SPENDABLE)\n         {\n             if (fDebitCached)\n@@ -701,7 +701,7 @@ class CWalletTx : public CMerkleTx\n         return debit;\n     }\n \n-    int64_t GetCredit(bool fUseCache=true) const\n+    CAmount GetCredit(bool fUseCache=true) const\n     {\n         // Must wait until coinbase is safely deep enough in the chain before valuing it\n         if (IsCoinBase() && GetBlocksToMaturity() > 0)\n@@ -715,7 +715,7 @@ class CWalletTx : public CMerkleTx\n         return nCreditCached;\n     }\n \n-    int64_t GetImmatureCredit(bool fUseCache=true) const\n+    CAmount GetImmatureCredit(bool fUseCache=true) const\n     {\n         if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n         {\n@@ -729,7 +729,7 @@ class CWalletTx : public CMerkleTx\n         return 0;\n     }\n \n-    int64_t GetAvailableCredit(bool fUseCache=true) const\n+    CAmount GetAvailableCredit(bool fUseCache=true) const\n     {\n         if (pwallet == 0)\n             return 0;\n@@ -741,7 +741,7 @@ class CWalletTx : public CMerkleTx\n         if (fUseCache && fAvailableCreditCached)\n             return nAvailableCreditCached;\n \n-        int64_t nCredit = 0;\n+        CAmount nCredit = 0;\n         uint256 hashTx = GetHash();\n         for (unsigned int i = 0; i < vout.size(); i++)\n         {\n@@ -759,7 +759,7 @@ class CWalletTx : public CMerkleTx\n         return nCredit;\n     }\n \n-    int64_t GetImmatureWatchOnlyCredit(const bool& fUseCache=true) const\n+    CAmount GetImmatureWatchOnlyCredit(const bool& fUseCache=true) const\n     {\n         if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n         {\n@@ -773,7 +773,7 @@ class CWalletTx : public CMerkleTx\n         return 0;\n     }\n \n-    int64_t GetAvailableWatchOnlyCredit(const bool& fUseCache=true) const\n+    CAmount GetAvailableWatchOnlyCredit(const bool& fUseCache=true) const\n     {\n         if (pwallet == 0)\n             return 0;\n@@ -785,7 +785,7 @@ class CWalletTx : public CMerkleTx\n         if (fUseCache && fAvailableWatchCreditCached)\n             return nAvailableWatchCreditCached;\n \n-        int64_t nCredit = 0;\n+        CAmount nCredit = 0;\n         for (unsigned int i = 0; i < vout.size(); i++)\n         {\n             if (!pwallet->IsSpent(GetHash(), i))\n@@ -802,7 +802,7 @@ class CWalletTx : public CMerkleTx\n         return nCredit;\n     }\n \n-    int64_t GetChange() const\n+    CAmount GetChange() const\n     {\n         if (fChangeCached)\n             return nChangeCached;\n@@ -812,10 +812,10 @@ class CWalletTx : public CMerkleTx\n     }\n \n     void GetAmounts(std::list<COutputEntry>& listReceived,\n-                    std::list<COutputEntry>& listSent, int64_t& nFee, std::string& strSentAccount, const isminefilter& filter) const;\n+                    std::list<COutputEntry>& listSent, CAmount& nFee, std::string& strSentAccount, const isminefilter& filter) const;\n \n-    void GetAccountAmounts(const std::string& strAccount, int64_t& nReceived,\n-                           int64_t& nSent, int64_t& nFee, const isminefilter& filter) const;\n+    void GetAccountAmounts(const std::string& strAccount, CAmount& nReceived,\n+                           CAmount& nSent, CAmount& nFee, const isminefilter& filter) const;\n \n     bool IsFromMe(const isminefilter& filter) const\n     {\n@@ -949,7 +949,7 @@ class CAccountingEntry\n {\n public:\n     std::string strAccount;\n-    int64_t nCreditDebit;\n+    CAmount nCreditDebit;\n     int64_t nTime;\n     std::string strOtherAccount;\n     std::string strComment;"
      },
      {
        "sha": "67218bf2c851fdb266f363bc5fe01cf1d4ad7459",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -187,12 +187,12 @@ bool CWalletDB::WriteAccountingEntry(const CAccountingEntry& acentry)\n     return WriteAccountingEntry(++nAccountingEntryNumber, acentry);\n }\n \n-int64_t CWalletDB::GetAccountCreditDebit(const string& strAccount)\n+CAmount CWalletDB::GetAccountCreditDebit(const string& strAccount)\n {\n     list<CAccountingEntry> entries;\n     ListAccountCreditDebit(strAccount, entries);\n \n-    int64_t nCreditDebit = 0;\n+    CAmount nCreditDebit = 0;\n     BOOST_FOREACH (const CAccountingEntry& entry, entries)\n         nCreditDebit += entry.nCreditDebit;\n "
      },
      {
        "sha": "f3d6e61f8bc7031b32ed9b5ce324264feb6e6373",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_WALLETDB_H\n #define BITCOIN_WALLETDB_H\n \n+#include \"amount.h\"\n #include \"db.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n@@ -118,7 +119,7 @@ class CWalletDB : public CDB\n     bool EraseDestData(const std::string &address, const std::string &key);\n \n     bool WriteAccountingEntry(const CAccountingEntry& acentry);\n-    int64_t GetAccountCreditDebit(const std::string& strAccount);\n+    CAmount GetAccountCreditDebit(const std::string& strAccount);\n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& acentries);\n \n     DBErrors ReorderTransactions(CWallet* pwallet);"
      }
    ]
  }
]