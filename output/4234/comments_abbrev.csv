sipa,2014-05-26T21:31:30Z,"ACK.\n\nTo review, `git show --word-diff-regex='[[:alnum:]]+|[^[:space:]]'` may be useful.\n",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-44219223,44219223,
laanwj,2014-05-27T09:50:26Z,Looks good to me\n,https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-44255204,44255204,
laanwj,2014-05-27T09:56:20Z,"I get quite a few compile errors in the Qt GUI. I think you're missing some casts here and there:\n\nhttp://www.hastebin.com/mamaxumafo.vbs\n\nMind that qint64 and int64_t are defined differently (long long versus long on AMD64), so converting between then needs casts.\n",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-44255738,44255738,
luke-jr,2014-05-27T11:36:13Z,"Maybe it should be CMoneyAmount or CSatoshis? CMoney doesn't seem to explain what it is (the whole program is arguably ""money"" to less-experienced people)\n",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-44264061,44264061,
gmaxwell,2014-05-27T11:39:32Z,"Money sounds fine to me, ""CCoins"" might be better, alas.  I'm not keen on using the base unit word there. If people wanted to change it CValue might be another alternative.\n",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-44264410,44264410,
laanwj,2014-05-27T11:47:46Z,"CCoins sounds like a list of 'coins' which already have a clear-cut definition in the source code (alas, indeed), and CValue is very general (is it economic value, or some parameter value, or...).\nCSatoshis would make it specific to Bitcoin, which is what this is trying to avoid in the first place.\nBut let's not bikeshed this too much. I think CMoney is fine.\n",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-44265280,44265280,
luke-jr,2014-05-27T11:50:31Z,"CCoins already is used for a collection of (specific) coins, isn't it?\n",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-44265497,44265497,
gmaxwell,2014-05-27T11:53:28Z,"That was the ""alas"".\n",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-44265719,44265719,
maaku,2014-05-30T20:39:38Z,"I think a ""coin"" should include the entire txout including the scriptPubKey. But yeah, that ship has long-since sailed.\n\n@laanwj Your pastbin has expired, although I think I know what is going on with the qint64 and can figure it out. I'm not getting any errors or even warnings on my system however (clang on OS X 10.9.3) so I'm not sure if I'd catch them all. What compile and platform are you us",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-44696963,44696963,
laanwj,2014-06-01T15:48:17Z,@maaku Ubuntu 14.04 64-bit\n,https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-44780824,44780824,
maaku,2014-06-06T08:06:50Z,Fixed the compilation issue on Ubuntu 14.04 with a static cast. Also rebased against current master branch.\n,https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-45312572,45312572,
jgarzik,2014-07-29T16:57:33Z,"Needs rebase.\n\nThis was ACK'd then sat.  Shall we get this moving again?  It is the sort of change that should be merged or dropped, as it is unfair to keep asking @maaku to keep rebasing it otherwise.\n",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-50505275,50505275,
sipa,2014-07-29T23:51:13Z,Yes please.\n,https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-50555373,50555373,
jtimon,2014-07-30T00:54:48Z,"Back to bike-shedding I like CAmount, seems less general than CValue.\nBut, yes, this was separated from #4067 because the typedef only was acked there. Maybe it got forgotten due to the failed merge of the pull-tester...\n",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-50560658,50560658,
laanwj,2014-07-30T08:43:52Z,"I tend to focus on pulls that fix bugs, add tests or change functionality in a useful way, so 'all over the place' changes like this tend to end up in the back burner.\n\nLast time it introduced a build problem for me. As that's fixed, and when this is rebased, I'm fine with merging it.\n",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-50588932,50588932,
maaku,2014-07-30T16:20:18Z,"Ok, sounds like there is some consensus developing. I'll rebase ASAP. (Rebasing is a non-trivial process for this PR as it involves manually checking the entire diff history; hopefully I'll have it up this afternoon.)\n",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-50638813,50638813,
sipa,2014-07-31T01:04:27Z,To join the shed: CMoney or CAmount are fine to me. So are Money or Amount.\n,https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-50701399,50701399,
jtimon,2014-07-31T13:30:43Z,This is a version with replacing CMoney with Amount: https://github.com/jtimon/bitcoin/tree/typedef \nStill without rebase though.\n,https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-50758370,50758370,
jtimon,2014-07-31T17:47:13Z,"And here's another version after the rebase (by the way, no, it wasn't trivial): https://github.com/jtimon/bitcoin/tree/typedef2\n",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-50793527,50793527,
laanwj,2014-07-31T19:59:58Z,Rebased version using Amount looks good to me (prefer it to Money/CMoney).\n,https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-50810643,50810643,
maaku,2014-07-31T20:10:38Z,"I'm reviewing as well, comparing with my own rebase.\n\nI don't mind changing the name, but only if we get consensus. Amount is way too generic IMHO. Amount of what? Fees? We have a separate class (CFeeRate) for that. CMoney/Money isn't ideal, but I don't see a better, succinct option...\n",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-50811822,50811822,
laanwj,2014-07-31T20:18:33Z,"Well it's better than Value. We should stop bike-shedding here and simply decide. Otherwise we'll still have this open in a month.\n\n@jtimon likes Amount, @sipa likes Amount, I like Amount. So that's our consensus.\n\nTo be entirely clear, just add a comment what it is about in amount.h where you define the type.\n",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-50812757,50812757,
sipa,2014-07-31T21:20:52Z,"@jtimon Looks good at first glace; care to do a pullreq, so we get pulltester feedback etc?\n\nI'm very aware that this is a change that will pretty much instantly become non-mergable, so given that there seems reasonable support for it, let's move.\n",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-50820392,50820392,
jtimon,2014-08-01T00:19:26Z,"I conserved maaku's commit, I thought he could fetch my branch and push here, but if that's simpler I'll open a new PR (#4614).\n",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-50835553,50835553,
maaku,2014-08-01T15:31:57Z,"So there were a dozen or so locations where int64_t/qint64 was still being used. Those have been fixed in the latest rebase, just pushed.\n",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-50898193,50898193,
sipa,2014-08-01T20:15:20Z,Untested ACK (reviewed with above word diff command).\n,https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-50929855,50929855,
laanwj,2014-08-15T13:05:23Z,"It cannot be merged like this. One thing needs to be done here, either:\n- Register the CAmount type with qt, and use that type name in the signal/slot definitions\n- Change the qt slots/signals back to qint64\n\nConnecting the signals/slots with amounts as qint64 but having them as CAmount in the .h file is difficult to read, and may break randomly.\n",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-52303131,52303131,
jtimon,2014-08-15T13:26:00Z,I think the first option is better.\n,https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-52304944,52304944,
laanwj,2014-08-26T09:09:30Z,"@maaku this is quickly going out of sync with the code again, do you intend to address the last nit so that this can be merged?\n",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-53394043,53394043,
laanwj,2014-09-25T09:26:27Z,Lots of conflicts already...\n\n```\nUU src/coins.cpp\nUU src/coins.h\nUU src/core.cpp\nUU src/main.h\nUU src/miner.cpp\nUU src/qt/transactionfilterproxy.h\nUU src/qt/walletmodel.cpp\nUU src/qt/walletmodel.h\nUU src/rpcrawtransaction.cpp\nUU src/rpcserver.cpp\nUU src/rpcwallet.cpp\nUU src/txmempool.cpp\nUU src/util.cpp\nUU src/util.h\n```\n,https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-56794489,56794489,
BitcoinPullTester,2014-09-26T21:27:35Z,"Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/p4234_57c858d8c179a14487a6a85f5dbbc2b087d21e30/ for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/p",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-57022826,57022826,
BitcoinPullTester,2014-09-26T21:48:59Z,"Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/p4234_a8df9965b68498292a1cc588b4ebdc6622b79499/ for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/p",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-57025040,57025040,
BitcoinPullTester,2014-09-26T23:43:41Z,"Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/p4234_a372168e77a8a195613a02983f2589252698bf0f/ for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/p",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-57033817,57033817,
BitcoinPullTester,2014-09-27T00:11:17Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4234_a372168e77a8a195613a02983f2589252698bf0f/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-te",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-57035246,57035246,
sipa,2014-09-27T08:56:11Z,ACK. Verified type replacement + headers changes only.\n,https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-57046855,57046855,
Diapolo,2014-09-27T12:01:16Z,"@laanwj Is a `qint64` always an `int64_t`, Is that a sane assumption?\n",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-57050608,57050608,
laanwj,2014-09-27T13:45:19Z,"@Diapolo That's not an assumption that you can make. Only that both are 64 bit and can be cast to each other, but they may be (and are in practice) defined differently.\n",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-57053075,57053075,
sipa,2014-09-27T17:42:34Z,Let's not hold this up for stylistic reasons that can be trivially fixed later; it will very quickly start conflicting again probably...\n,https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-57060106,57060106,
maaku,2014-09-27T18:16:00Z,"Wladimir made an in-line comment about that already. The right and proper thing to do is to abstract the interface between the two, and to register / provide the necessary hooks for Qt to handle CAmount natively in slot definitions.\n\nI'll be honest though, I'm not going to have time to write that in the next 1-2 weeks. Given how quickly this PR atrophies, it's probably better to do that as a sep",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-57061089,57061089,
jtimon,2014-09-27T18:29:25Z,"Yep, ACK, let's merge this before it needs rebase again.\n",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-57061461,57061461,
sipa,2014-09-27T18:44:35Z,"@laanwj Is that SLOT typing issue a blocker? If it's not, I think we can hold up other pull requests for a short while while this is being reviewed/merged, but not longer.\n",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-57061846,57061846,
laanwj,2014-09-29T07:32:58Z,"@sipa The point is that I am not sure how Qt handles  types, ie, CAmount that are not directly registered to the system but used nevertheless in slot/signal descriptions. It does some magic especially when serializing for cross-thread messages, and it may be that this only works by accident.\n\nHas anyone actually tested the wallet GUI with this? That amounts still work correctly when receiving an",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-57125791,57125791,
jtimon,2014-09-30T20:14:45Z,"Can we ""abstract the interface between the two, and to register / provide the necessary hooks for Qt to handle CAmount natively in slot definitions"" after merging this?\nThe GUI seems to be working just fine with the new type.\n",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-57375296,57375296,
sipa,2014-09-30T20:23:50Z,"@jtimon My question whether the lack of slot hooks was a blocker. @laanwj asked whether someone actually tested it. It seems you did. So, all good?\n",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-57376651,57376651,
jtimon,2014-09-30T23:35:37Z,"I just opened it in main mode (with no funds) and in regtest mode (where the mined 50s are ok). \nIf you want me to do some other specific testing I'm happy to do it since I really want this to be merged soon, while it still doesn't require yet another rebase.\n",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-57399413,57399413,
laanwj,2014-10-01T07:42:04Z,Thanks for testing @jtimon .\n\nI don't like merging this in good faith. What if it breaks only on some platforms? Having wrong amounts would be the greatest screw-up possible in a GUI. So I'm going to do some testing myself and research the qt documentation on what to do here first.\n,https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-57429400,57429400,
laanwj,2014-10-01T09:27:00Z,"OK - I've verified all three signals involving CAmount:\n- `WalletModel::balanceChanged(CAmount,CAmount,CAmount,CAmount,CAmount,CAmount)`\n- `WalletView::incomingTransaction(QString,int,CAmount,QString,QString)`\n- `OptionsModel::transactionFeeChanged(CAmount)`\n\nI've also added code to make it possible to send CAmount over queued connections (just two lines).\n\nFixes are here https://github.com",https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-57439340,57439340,
laanwj,2014-10-01T09:40:32Z,Merged via 3fd192f8b4\n,https://github.com/bitcoin/bitcoin/pull/4234#issuecomment-57440616,57440616,
sipa,2014-08-01T20:13:16Z,Why change the initialization order?\n,https://github.com/bitcoin/bitcoin/pull/4234#discussion_r15716394,15716394,src/miner.cpp
maaku,2014-08-02T05:13:48Z,"That... is a fine question. I swear at one point during the rebase I was getting out-of-order initialization warnings, so I switched it. But looking at the diff, the prior ordering is obviously correct. Thank you for catching it.\n\nI've pushed a new squashed commit that reverses that one hunk.\n",https://github.com/bitcoin/bitcoin/pull/4234#discussion_r15727360,15727360,src/miner.cpp
laanwj,2014-08-04T15:27:12Z,"BTW we have many signal/slot definitions like this:\n\n``` c++\nconnect(model, SIGNAL(balanceChanged(qint64, qint64, qint64, qint64, qint64, qint64)), this, SLOT(setBalance(qint64, qint64, qint64, qint64, qint64, qint64)));\n```\n\nI'm fairly sure that these need to be updated to use CAmount as well. No need to add & or const in these SIGNAL() and SLOT() definitions (they are ignored), but the typ",https://github.com/bitcoin/bitcoin/pull/4234#discussion_r15761246,15761246,src/qt/overviewpage.h
Diapolo,2014-09-27T11:59:35Z,Should be `#endif // BITCOIN_AMOUNT_H`!\n,https://github.com/bitcoin/bitcoin/pull/4234#discussion_r18123283,18123283,src/amount.h
Diapolo,2014-10-01T12:39:50Z,@jtimon Why was this included here? It isn't even used in util!\n,https://github.com/bitcoin/bitcoin/pull/4234#discussion_r18275349,18275349,src/util.h
jtimon,2014-10-01T18:14:19Z,"I don't know, a small mistake by @maaku I guess. Can you correct it?\n",https://github.com/bitcoin/bitcoin/pull/4234#discussion_r18297123,18297123,src/util.h
maaku,2014-10-01T18:47:01Z,Yeah that can be removed. It's a leftover from when utilmoneystr was part of util. Should have been removed in the rebase.\n,https://github.com/bitcoin/bitcoin/pull/4234#discussion_r18299421,18299421,src/util.h
