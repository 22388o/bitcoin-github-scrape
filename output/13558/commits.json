[
  {
    "sha": "da74db0940720407fafaf3582bbaf9c81a4d3b4d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTc0ZGIwOTQwNzIwNDA3ZmFmYWYzNTgyYmJhZjljODFhNGQzYjRk",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-06-22T18:27:18Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-09-11T04:58:05Z"
      },
      "message": "Drop unused GetType() from CSizeComputer",
      "tree": {
        "sha": "12ea45e64d4da961a7f89a718ea3c9bb233ea173",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/12ea45e64d4da961a7f89a718ea3c9bb233ea173"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da74db0940720407fafaf3582bbaf9c81a4d3b4d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJbl0teAAoJEG7l83hfeLNFcxUIAJI1UOIh8VaMvOC0qa5Xx/EU\nxMTW8MXLL8evj7+qvKV8Dztqw68ncxtEvOyxoUs/DNYAlDIB46ApEvotktKNrfwm\nZLAQXL39scsBzJcIAfzXhSJOTE724FLSQXOMVdvNM1qSHszmFVL5vLFJ59iFzh3I\nAsMapKipb9yHPpRAZ2hfXetRbQA2YgIYxcCkWLS5a8rPSOmzRYf7QpN9odh48igD\nnXDGRAN0aE+7QIoeknyX3VexM2dwMm64JFp49kiHzaH4aM1zR/YB7JYTeN9VuQHm\nYnZ8KFR4T9VcdLilc8OhxobYjF5MssAAc9x/U0u9psjDw/lC0n5NHfSOlKsUjks=\n=mzbW\n-----END PGP SIGNATURE-----",
        "payload": "tree 12ea45e64d4da961a7f89a718ea3c9bb233ea173\nparent 4e9a6f87b7d25d56fca4166bd929003cf15c9b58\nauthor Ben Woosley <ben.woosley@gmail.com> 1529692038 +0000\ncommitter Ben Woosley <ben.woosley@gmail.com> 1536641885 -0400\n\nDrop unused GetType() from CSizeComputer\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da74db0940720407fafaf3582bbaf9c81a4d3b4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da74db0940720407fafaf3582bbaf9c81a4d3b4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da74db0940720407fafaf3582bbaf9c81a4d3b4d/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e9a6f87b7d25d56fca4166bd929003cf15c9b58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e9a6f87b7d25d56fca4166bd929003cf15c9b58",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e9a6f87b7d25d56fca4166bd929003cf15c9b58"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 33,
      "deletions": 35
    },
    "files": [
      {
        "sha": "4c57965becc3a0f82674b399ed4e212b15047e44",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=da74db0940720407fafaf3582bbaf9c81a4d3b4d",
        "patch": "@@ -162,7 +162,7 @@ ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& c\n             break;\n     }\n \n-    LogPrint(BCLog::CMPCTBLOCK, \"Initialized PartiallyDownloadedBlock for block %s using a cmpctblock of size %lu\\n\", cmpctblock.header.GetHash().ToString(), GetSerializeSize(cmpctblock, SER_NETWORK, PROTOCOL_VERSION));\n+    LogPrint(BCLog::CMPCTBLOCK, \"Initialized PartiallyDownloadedBlock for block %s using a cmpctblock of size %lu\\n\", cmpctblock.header.GetHash().ToString(), GetSerializeSize(cmpctblock, PROTOCOL_VERSION));\n \n     return READ_STATUS_OK;\n }"
      },
      {
        "sha": "f125b483bb8d60f19cad1f31a011077a346e4a1f",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=da74db0940720407fafaf3582bbaf9c81a4d3b4d",
        "patch": "@@ -244,7 +244,7 @@ bool CCoinsViewCache::HaveInputs(const CTransaction& tx) const\n     return true;\n }\n \n-static const size_t MIN_TRANSACTION_OUTPUT_WEIGHT = WITNESS_SCALE_FACTOR * ::GetSerializeSize(CTxOut(), SER_NETWORK, PROTOCOL_VERSION);\n+static const size_t MIN_TRANSACTION_OUTPUT_WEIGHT = WITNESS_SCALE_FACTOR * ::GetSerializeSize(CTxOut(), PROTOCOL_VERSION);\n static const size_t MAX_OUTPUTS_PER_BLOCK = MAX_BLOCK_WEIGHT / MIN_TRANSACTION_OUTPUT_WEIGHT;\n \n const Coin& AccessByTxid(const CCoinsViewCache& view, const uint256& txid)"
      },
      {
        "sha": "0628ec1d475e273fc3536e31bd7404286182165e",
        "filename": "src/consensus/tx_verify.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/consensus/tx_verify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/consensus/tx_verify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.cpp?ref=da74db0940720407fafaf3582bbaf9c81a4d3b4d",
        "patch": "@@ -164,7 +164,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n     if (tx.vout.empty())\n         return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n     // Size limits (this doesn't take the witness into account, as that hasn't been checked for malleability)\n-    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT)\n+    if (::GetSerializeSize(tx, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT)\n         return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n \n     // Check for negative or overflow output values"
      },
      {
        "sha": "f2e2c3585a9df790b4658009dbd1d16a3da341bc",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=da74db0940720407fafaf3582bbaf9c81a4d3b4d",
        "patch": "@@ -95,16 +95,16 @@ class CValidationState {\n // weight = (stripped_size * 3) + total_size.\n static inline int64_t GetTransactionWeight(const CTransaction& tx)\n {\n-    return ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n+    return ::GetSerializeSize(tx, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(tx, PROTOCOL_VERSION);\n }\n static inline int64_t GetBlockWeight(const CBlock& block)\n {\n-    return ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION);\n+    return ::GetSerializeSize(block, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, PROTOCOL_VERSION);\n }\n static inline int64_t GetTransactionInputWeight(const CTxIn& txin)\n {\n     // scriptWitness size is added here because witnesses and txins are split up in segwit serialization.\n-    return ::GetSerializeSize(txin, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(txin, SER_NETWORK, PROTOCOL_VERSION) + ::GetSerializeSize(txin.scriptWitness.stack, SER_NETWORK, PROTOCOL_VERSION);\n+    return ::GetSerializeSize(txin, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(txin, PROTOCOL_VERSION) + ::GetSerializeSize(txin.scriptWitness.stack, PROTOCOL_VERSION);\n }\n \n #endif // BITCOIN_CONSENSUS_VALIDATION_H"
      },
      {
        "sha": "b86490716f4ccf188ccb7a47e49df72cb725f5a2",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=da74db0940720407fafaf3582bbaf9c81a4d3b4d",
        "patch": "@@ -181,7 +181,7 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry,\n     entry.pushKV(\"txid\", tx.GetHash().GetHex());\n     entry.pushKV(\"hash\", tx.GetWitnessHash().GetHex());\n     entry.pushKV(\"version\", tx.nVersion);\n-    entry.pushKV(\"size\", (int)::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION));\n+    entry.pushKV(\"size\", (int)::GetSerializeSize(tx, PROTOCOL_VERSION));\n     entry.pushKV(\"vsize\", (GetTransactionWeight(tx) + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR);\n     entry.pushKV(\"weight\", GetTransactionWeight(tx));\n     entry.pushKV(\"locktime\", (int64_t)tx.nLockTime);"
      },
      {
        "sha": "f606c8993c360acdf51d8e52aa7b2250d055b02c",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=da74db0940720407fafaf3582bbaf9c81a4d3b4d",
        "patch": "@@ -250,7 +250,7 @@ bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n     vPos.reserve(block.vtx.size());\n     for (const auto& tx : block.vtx) {\n         vPos.emplace_back(tx->GetHash(), pos);\n-        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+        pos.nTxOffset += ::GetSerializeSize(*tx, CLIENT_VERSION);\n     }\n     return m_db->WriteTxs(vPos);\n }"
      },
      {
        "sha": "ac1b75edb4c7f571c22ef7df422f9317fc17f869",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=da74db0940720407fafaf3582bbaf9c81a4d3b4d",
        "patch": "@@ -34,7 +34,7 @@ CAmount GetDustThreshold(const CTxOut& txout, const CFeeRate& dustRelayFeeIn)\n     if (txout.scriptPubKey.IsUnspendable())\n         return 0;\n \n-    size_t nSize = GetSerializeSize(txout, SER_DISK, 0);\n+    size_t nSize = GetSerializeSize(txout);\n     int witnessversion = 0;\n     std::vector<unsigned char> witnessprogram;\n "
      },
      {
        "sha": "bdb470470e24cb07deef4fa82b8f51f84e98538e",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=da74db0940720407fafaf3582bbaf9c81a4d3b4d",
        "patch": "@@ -93,7 +93,7 @@ CAmount CTransaction::GetValueOut() const\n \n unsigned int CTransaction::GetTotalSize() const\n {\n-    return ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION);\n+    return ::GetSerializeSize(*this, PROTOCOL_VERSION);\n }\n \n std::string CTransaction::ToString() const"
      },
      {
        "sha": "c84e065cd150c9f29d60bee8038dca1c7ea98104",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=da74db0940720407fafaf3582bbaf9c81a4d3b4d",
        "patch": "@@ -121,8 +121,8 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     if (chainActive.Contains(blockindex))\n         confirmations = chainActive.Height() - blockindex->nHeight + 1;\n     result.pushKV(\"confirmations\", confirmations);\n-    result.pushKV(\"strippedsize\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS));\n-    result.pushKV(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION));\n+    result.pushKV(\"strippedsize\", (int)::GetSerializeSize(block, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS));\n+    result.pushKV(\"size\", (int)::GetSerializeSize(block, PROTOCOL_VERSION));\n     result.pushKV(\"weight\", (int)::GetBlockWeight(block));\n     result.pushKV(\"height\", blockindex->nHeight);\n     result.pushKV(\"version\", block.nVersion);\n@@ -1831,7 +1831,7 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n         if (loop_outputs) {\n             for (const CTxOut& out : tx->vout) {\n                 tx_total_out += out.nValue;\n-                utxo_size_inc += GetSerializeSize(out, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+                utxo_size_inc += GetSerializeSize(out, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n             }\n         }\n \n@@ -1882,7 +1882,7 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n                 CTxOut prevoutput = tx_in->vout[in.prevout.n];\n \n                 tx_total_in += prevoutput.nValue;\n-                utxo_size_inc -= GetSerializeSize(prevoutput, SER_NETWORK, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n+                utxo_size_inc -= GetSerializeSize(prevoutput, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;\n             }\n \n             CAmount txfee = tx_total_in - tx_total_out;"
      },
      {
        "sha": "15e204062f8032649d173962119bbae88b6c65fc",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=da74db0940720407fafaf3582bbaf9c81a4d3b4d",
        "patch": "@@ -88,7 +88,7 @@ static int verify_script(const unsigned char *scriptPubKey, unsigned int scriptP\n         CTransaction tx(deserialize, stream);\n         if (nIn >= tx.vin.size())\n             return set_error(err, bitcoinconsensus_ERR_TX_INDEX);\n-        if (GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) != txToLen)\n+        if (GetSerializeSize(tx, PROTOCOL_VERSION) != txToLen)\n             return set_error(err, bitcoinconsensus_ERR_TX_SIZE_MISMATCH);\n \n         // Regardless of the verification result, the tx did not error."
      },
      {
        "sha": "ae8e11a43ab0702cc15b237b8bfcc5c738728b39",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=da74db0940720407fafaf3582bbaf9c81a4d3b4d",
        "patch": "@@ -901,10 +901,9 @@ class CSizeComputer\n protected:\n     size_t nSize;\n \n-    const int nType;\n     const int nVersion;\n public:\n-    CSizeComputer(int nTypeIn, int nVersionIn) : nSize(0), nType(nTypeIn), nVersion(nVersionIn) {}\n+    explicit CSizeComputer(int nVersionIn) : nSize(0), nVersion(nVersionIn) {}\n \n     void write(const char *psz, size_t _nSize)\n     {\n@@ -929,7 +928,6 @@ class CSizeComputer\n     }\n \n     int GetVersion() const { return nVersion; }\n-    int GetType() const { return nType; }\n };\n \n template<typename Stream>\n@@ -980,15 +978,15 @@ inline void WriteCompactSize(CSizeComputer &s, uint64_t nSize)\n }\n \n template <typename T>\n-size_t GetSerializeSize(const T& t, int nType, int nVersion = 0)\n+size_t GetSerializeSize(const T& t, int nVersion = 0)\n {\n-    return (CSizeComputer(nType, nVersion) << t).size();\n+    return (CSizeComputer(nVersion) << t).size();\n }\n \n template <typename S, typename T>\n size_t GetSerializeSize(const S& s, const T& t)\n {\n-    return (CSizeComputer(s.GetType(), s.GetVersion()) << t).size();\n+    return (CSizeComputer(s.GetVersion()) << t).size();\n }\n \n template <typename S, typename... T>"
      },
      {
        "sha": "3eb8aa14fd419317d3f0b841f84b9296ea2138b6",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=da74db0940720407fafaf3582bbaf9c81a4d3b4d",
        "patch": "@@ -139,7 +139,7 @@ static void TestPackageSelection(const CChainParams& chainparams, const CScript&\n     tx.vout[0].nValue = 5000000000LL - 1000 - 50000; // 0 fee\n     uint256 hashFreeTx = tx.GetHash();\n     mempool.addUnchecked(entry.Fee(0).FromTx(tx));\n-    size_t freeTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n+    size_t freeTxSize = ::GetSerializeSize(tx, PROTOCOL_VERSION);\n \n     // Calculate a fee on child transaction that will put the package just\n     // below the block min tx fee (assuming 1 child tx of the same size)."
      },
      {
        "sha": "e754996d2f25aa762d3fd5129ef3711fe8fe348e",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=da74db0940720407fafaf3582bbaf9c81a4d3b4d",
        "patch": "@@ -182,13 +182,13 @@ BOOST_AUTO_TEST_CASE(varints)\n     CDataStream::size_type size = 0;\n     for (int i = 0; i < 100000; i++) {\n         ss << VARINT(i, VarIntMode::NONNEGATIVE_SIGNED);\n-        size += ::GetSerializeSize(VARINT(i, VarIntMode::NONNEGATIVE_SIGNED), 0, 0);\n+        size += ::GetSerializeSize(VARINT(i, VarIntMode::NONNEGATIVE_SIGNED), 0);\n         BOOST_CHECK(size == ss.size());\n     }\n \n     for (uint64_t i = 0;  i < 100000000000ULL; i += 999999937) {\n         ss << VARINT(i);\n-        size += ::GetSerializeSize(VARINT(i), 0, 0);\n+        size += ::GetSerializeSize(VARINT(i), 0);\n         BOOST_CHECK(size == ss.size());\n     }\n "
      },
      {
        "sha": "cca5e2029633676786a598d4ec2fa1b165e416f3",
        "filename": "src/test/uint256_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/test/uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/test/uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint256_tests.cpp?ref=da74db0940720407fafaf3582bbaf9c81a4d3b4d",
        "patch": "@@ -184,8 +184,8 @@ BOOST_AUTO_TEST_CASE( methods ) // GetHex SetHex begin() end() size() GetLow64 G\n     BOOST_CHECK(OneL.begin() + 32 == OneL.end());\n     BOOST_CHECK(MaxL.begin() + 32 == MaxL.end());\n     BOOST_CHECK(TmpL.begin() + 32 == TmpL.end());\n-    BOOST_CHECK(GetSerializeSize(R1L, 0, PROTOCOL_VERSION) == 32);\n-    BOOST_CHECK(GetSerializeSize(ZeroL, 0, PROTOCOL_VERSION) == 32);\n+    BOOST_CHECK(GetSerializeSize(R1L, PROTOCOL_VERSION) == 32);\n+    BOOST_CHECK(GetSerializeSize(ZeroL, PROTOCOL_VERSION) == 32);\n \n     CDataStream ss(0, PROTOCOL_VERSION);\n     ss << R1L;\n@@ -230,8 +230,8 @@ BOOST_AUTO_TEST_CASE( methods ) // GetHex SetHex begin() end() size() GetLow64 G\n     BOOST_CHECK(OneS.begin() + 20 == OneS.end());\n     BOOST_CHECK(MaxS.begin() + 20 == MaxS.end());\n     BOOST_CHECK(TmpS.begin() + 20 == TmpS.end());\n-    BOOST_CHECK(GetSerializeSize(R1S, 0, PROTOCOL_VERSION) == 20);\n-    BOOST_CHECK(GetSerializeSize(ZeroS, 0, PROTOCOL_VERSION) == 20);\n+    BOOST_CHECK(GetSerializeSize(R1S, PROTOCOL_VERSION) == 20);\n+    BOOST_CHECK(GetSerializeSize(ZeroS, PROTOCOL_VERSION) == 20);\n \n     ss << R1S;\n     BOOST_CHECK(ss.str() == std::string(R1Array,R1Array+20));"
      },
      {
        "sha": "4ed3dc4ca015883c15d065edca3a86cff39f577f",
        "filename": "src/undo.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/undo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/undo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/undo.h?ref=da74db0940720407fafaf3582bbaf9c81a4d3b4d",
        "patch": "@@ -61,7 +61,7 @@ class TxInUndoDeserializer\n     explicit TxInUndoDeserializer(Coin* coin) : txout(coin) {}\n };\n \n-static const size_t MIN_TRANSACTION_INPUT_WEIGHT = WITNESS_SCALE_FACTOR * ::GetSerializeSize(CTxIn(), SER_NETWORK, PROTOCOL_VERSION);\n+static const size_t MIN_TRANSACTION_INPUT_WEIGHT = WITNESS_SCALE_FACTOR * ::GetSerializeSize(CTxIn(), PROTOCOL_VERSION);\n static const size_t MAX_INPUTS_PER_BLOCK = MAX_BLOCK_WEIGHT / MIN_TRANSACTION_INPUT_WEIGHT;\n \n /** Undo information for a CTransaction */"
      },
      {
        "sha": "088dbf30fc2ac5df2a4c6c5eefcbed9ca99dc6c2",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=da74db0940720407fafaf3582bbaf9c81a4d3b4d",
        "patch": "@@ -584,7 +584,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n     // Do not work on transactions that are too small.\n     // A transaction with 1 segwit input and 1 P2WPHK output has non-witness size of 82 bytes.\n     // Transactions smaller than this are not relayed to reduce unnecessary malloc overhead.\n-    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) < MIN_STANDARD_TX_NONWITNESS_SIZE)\n+    if (::GetSerializeSize(tx, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) < MIN_STANDARD_TX_NONWITNESS_SIZE)\n         return state.DoS(0, false, REJECT_NONSTANDARD, \"tx-size-small\");\n \n     // Only accept nLockTime-using transactions that can be mined in the next\n@@ -1668,7 +1668,7 @@ static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, CValidationState&\n     // Write undo information to disk\n     if (pindex->GetUndoPos().IsNull()) {\n         CDiskBlockPos _pos;\n-        if (!FindUndoPos(state, pindex->nFile, _pos, ::GetSerializeSize(blockundo, SER_DISK, CLIENT_VERSION) + 40))\n+        if (!FindUndoPos(state, pindex->nFile, _pos, ::GetSerializeSize(blockundo, CLIENT_VERSION) + 40))\n             return error(\"ConnectBlock(): FindUndoPos failed\");\n         if (!UndoWriteToDisk(blockundo, _pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))\n             return AbortNode(state, \"Failed to write undo data\");\n@@ -3119,7 +3119,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n     // checks that use witness data may be performed here.\n \n     // Size limits\n-    if (block.vtx.empty() || block.vtx.size() * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT)\n+    if (block.vtx.empty() || block.vtx.size() * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT || ::GetSerializeSize(block, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT)\n         return state.DoS(100, false, REJECT_INVALID, \"bad-blk-length\", false, \"size limits failed\");\n \n     // First transaction must be coinbase, the rest must not be\n@@ -3436,7 +3436,7 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidatio\n \n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n static CDiskBlockPos SaveBlockToDisk(const CBlock& block, int nHeight, const CChainParams& chainparams, const CDiskBlockPos* dbp) {\n-    unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n+    unsigned int nBlockSize = ::GetSerializeSize(block, CLIENT_VERSION);\n     CDiskBlockPos blockPos;\n     if (dbp != nullptr)\n         blockPos = *dbp;"
      },
      {
        "sha": "1027f93c941c30c23bbd850f37051331ce6316ff",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da74db0940720407fafaf3582bbaf9c81a4d3b4d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=da74db0940720407fafaf3582bbaf9c81a4d3b4d",
        "patch": "@@ -2763,7 +2763,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n                 scriptChange = GetScriptForDestination(GetDestinationForKey(vchPubKey, change_type));\n             }\n             CTxOut change_prototype_txout(0, scriptChange);\n-            coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout, SER_DISK, 0);\n+            coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout);\n \n             CFeeRate discard_rate = GetDiscardRate(*this, ::feeEstimator);\n \n@@ -2807,7 +2807,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n                         }\n                     }\n                     // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, SER_NETWORK, PROTOCOL_VERSION);\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n \n                     if (IsDust(txout, ::dustRelayFee))\n                     {"
      }
    ]
  },
  {
    "sha": "893628be0166b4096b6e52f516e0f65bb63a75a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTM2MjhiZTAxNjZiNDA5NmI2ZTUyZjUxNmUwZjY1YmI2M2E3NWEy",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-06-15T00:48:30Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-09-11T04:58:13Z"
      },
      "message": "Drop minor GetSerializeSize template\n\nNow that `GetType()` is not propagated, the benefits are not worth the code.",
      "tree": {
        "sha": "59b7512c8f429312dd137429251c0df9f89942a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/59b7512c8f429312dd137429251c0df9f89942a4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/893628be0166b4096b6e52f516e0f65bb63a75a2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJbl0tlAAoJEG7l83hfeLNFO/IH/0V9dm40ujExp3UsGHGkw1ea\nbmiaPF4GSJsvGWYIAlH6WUhK5GSMH3K1IZFxplbz/CykuvB5uxn+6SmH2ff0NM4t\nETY5gWa5DuZA4D+pcIqcgJulrd049S2u7VhDiZaH9yeBlUU0kPFZI/C1bqnCiKOy\nXI9gsG0aAmCVAPi92T8HQ8ajwcfbpZKG5jD7EiR43moppyuWYQYl0qqMimvRSfd8\ngzjiDoPAg+f9Fm3vLmRh4rM9L7g8ds8hy/xoOGccfYBByDxxhKfm0Ey10TzsCjSH\nQqyptc/2EUVFQqL45iNS1o7DoG8YGjFGv9C6VjEPAFcEps9SzVzloI02wtNAwlY=\n=mE9O\n-----END PGP SIGNATURE-----",
        "payload": "tree 59b7512c8f429312dd137429251c0df9f89942a4\nparent da74db0940720407fafaf3582bbaf9c81a4d3b4d\nauthor Ben Woosley <ben.woosley@gmail.com> 1529023710 -0500\ncommitter Ben Woosley <ben.woosley@gmail.com> 1536641893 -0400\n\nDrop minor GetSerializeSize template\n\nNow that `GetType()` is not propagated, the benefits are not worth the code.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/893628be0166b4096b6e52f516e0f65bb63a75a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/893628be0166b4096b6e52f516e0f65bb63a75a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/893628be0166b4096b6e52f516e0f65bb63a75a2/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da74db0940720407fafaf3582bbaf9c81a4d3b4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da74db0940720407fafaf3582bbaf9c81a4d3b4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da74db0940720407fafaf3582bbaf9c81a4d3b4d"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 6,
      "deletions": 12
    },
    "files": [
      {
        "sha": "2fc4575e591c3fc942b50f0d7f97d39acd02140b",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/893628be0166b4096b6e52f516e0f65bb63a75a2/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/893628be0166b4096b6e52f516e0f65bb63a75a2/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=893628be0166b4096b6e52f516e0f65bb63a75a2",
        "patch": "@@ -147,7 +147,7 @@ static constexpr uint8_t PSBT_SEPARATOR = 0x00;\n template<typename Stream, typename... X>\n void SerializeToVector(Stream& s, const X&... args)\n {\n-    WriteCompactSize(s, GetSerializeSizeMany(s, args...));\n+    WriteCompactSize(s, GetSerializeSizeMany(s.GetVersion(), args...));\n     SerializeMany(s, args...);\n }\n "
      },
      {
        "sha": "2d0cfbbbf04aa175cd2414d7a80f8076cdfaaa35",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 3,
        "deletions": 9,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/893628be0166b4096b6e52f516e0f65bb63a75a2/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/893628be0166b4096b6e52f516e0f65bb63a75a2/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=893628be0166b4096b6e52f516e0f65bb63a75a2",
        "patch": "@@ -983,16 +983,10 @@ size_t GetSerializeSize(const T& t, int nVersion = 0)\n     return (CSizeComputer(nVersion) << t).size();\n }\n \n-template <typename S, typename T>\n-size_t GetSerializeSize(const S& s, const T& t)\n+template <typename... T>\n+size_t GetSerializeSizeMany(int nVersion, const T&... t)\n {\n-    return (CSizeComputer(s.GetVersion()) << t).size();\n-}\n-\n-template <typename S, typename... T>\n-size_t GetSerializeSizeMany(const S& s, const T&... t)\n-{\n-    CSizeComputer sc(s.GetType(), s.GetVersion());\n+    CSizeComputer sc(nVersion);\n     SerializeMany(sc, t...);\n     return sc.size();\n }"
      },
      {
        "sha": "a1d0b3d04684c5792df27e714449eef19699db3a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/893628be0166b4096b6e52f516e0f65bb63a75a2/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/893628be0166b4096b6e52f516e0f65bb63a75a2/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=893628be0166b4096b6e52f516e0f65bb63a75a2",
        "patch": "@@ -1060,7 +1060,7 @@ static bool WriteBlockToDisk(const CBlock& block, CDiskBlockPos& pos, const CMes\n         return error(\"WriteBlockToDisk: OpenBlockFile failed\");\n \n     // Write index header\n-    unsigned int nSize = GetSerializeSize(fileout, block);\n+    unsigned int nSize = GetSerializeSize(block, fileout.GetVersion());\n     fileout << messageStart << nSize;\n \n     // Write block\n@@ -1470,7 +1470,7 @@ bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint\n         return error(\"%s: OpenUndoFile failed\", __func__);\n \n     // Write index header\n-    unsigned int nSize = GetSerializeSize(fileout, blockundo);\n+    unsigned int nSize = GetSerializeSize(blockundo, fileout.GetVersion());\n     fileout << messageStart << nSize;\n \n     // Write undo data"
      }
    ]
  }
]