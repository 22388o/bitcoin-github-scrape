[
  {
    "sha": "b806977734931f34efd945f24b97f1d1b3a75185",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODA2OTc3NzM0OTMxZjM0ZWZkOTQ1ZjI0Yjk3ZjFkMWIzYTc1MTg1",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-01-19T08:39:25Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-01-19T08:39:25Z"
      },
      "message": "[pep-8] Prefer \"foo not in bar\" to \"not foo in bar\"\n\nIn accordance with Style Guide for Python Code (PEP 8):\n* https://www.python.org/dev/peps/pep-0008/#programming-recommendations",
      "tree": {
        "sha": "7f4f5efc1bf029d342f7859fbb96fdbc56b64641",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f4f5efc1bf029d342f7859fbb96fdbc56b64641"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b806977734931f34efd945f24b97f1d1b3a75185",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b806977734931f34efd945f24b97f1d1b3a75185",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b806977734931f34efd945f24b97f1d1b3a75185",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b806977734931f34efd945f24b97f1d1b3a75185/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c9af5ab2d9e461bb6f2dee1390025ce82a3625b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "083327314cbc87a49e557097fcc22a31082bc3e2",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b806977734931f34efd945f24b97f1d1b3a75185/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b806977734931f34efd945f24b97f1d1b3a75185/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=b806977734931f34efd945f24b97f1d1b3a75185",
        "patch": "@@ -118,7 +118,7 @@ def check_version(max_versions, version):\n         lib = version\n         ver = '0'\n     ver = tuple([int(x) for x in ver.split(b'.')])\n-    if not lib in max_versions:\n+    if lib not in max_versions:\n         return False\n     return ver <= max_versions[lib]\n "
      },
      {
        "sha": "d3d94bcf9cc0f2786709b04999ffcd4345a7f833",
        "filename": "contrib/linearize/linearize-data.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b806977734931f34efd945f24b97f1d1b3a75185/contrib/linearize/linearize-data.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b806977734931f34efd945f24b97f1d1b3a75185/contrib/linearize/linearize-data.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-data.py?ref=b806977734931f34efd945f24b97f1d1b3a75185",
        "patch": "@@ -224,7 +224,7 @@ def run(self):\n \t\t\tinExtent = BlockExtent(self.inFn, self.inF.tell(), inhdr, blk_hdr, inLen)\n \n \t\t\thash_str = calc_hash_str(blk_hdr)\n-\t\t\tif not hash_str in blkmap:\n+\t\t\tif hash_str not in blkmap:\n \t\t\t\tprint(\"Skipping unknown block \" + hash_str)\n \t\t\t\tself.inF.seek(inLen, os.SEEK_CUR)\n \t\t\t\tcontinue"
      },
      {
        "sha": "47c2fe53d3aeecc5ba87094b3c6d47a4a309cbe5",
        "filename": "qa/rpc-tests/abandonconflict.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b806977734931f34efd945f24b97f1d1b3a75185/qa/rpc-tests/abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b806977734931f34efd945f24b97f1d1b3a75185/qa/rpc-tests/abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/abandonconflict.py?ref=b806977734931f34efd945f24b97f1d1b3a75185",
        "patch": "@@ -89,7 +89,7 @@ def run_test(self):\n         unconfbalance = self.nodes[0].getunconfirmedbalance() + self.nodes[0].getbalance()\n         assert_equal(unconfbalance, newbalance)\n         # Also shouldn't show up in listunspent\n-        assert(not txABC2 in [utxo[\"txid\"] for utxo in self.nodes[0].listunspent(0)])\n+        assert(txABC2 not in [utxo[\"txid\"] for utxo in self.nodes[0].listunspent(0)])\n         balance = newbalance\n \n         # Abandon original transaction and verify inputs are available again"
      },
      {
        "sha": "e8363bcd66b20efca31cc13a621cb13f7cd152b1",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b806977734931f34efd945f24b97f1d1b3a75185/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b806977734931f34efd945f24b97f1d1b3a75185/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=b806977734931f34efd945f24b97f1d1b3a75185",
        "patch": "@@ -315,7 +315,7 @@ def run_test(self):\n         json_string = http_get_call(url.hostname, url.port, '/rest/block/'+newblockhash[0]+self.FORMAT_SEPARATOR+'json')\n         json_obj = json.loads(json_string)\n         for tx in json_obj['tx']:\n-            if not 'coinbase' in tx['vin'][0]: #exclude coinbase\n+            if 'coinbase' not in tx['vin'][0]: #exclude coinbase\n                 assert_equal(tx['txid'] in txs, True)\n \n         #check the same but without tx details"
      }
    ]
  },
  {
    "sha": "db68ddf24fa3f207e9f023dda11c3b63bccc105c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjY4ZGRmMjRmYTNmMjA3ZTlmMDIzZGRhMTFjM2I2M2JjY2MxMDVj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-01-19T09:51:41Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-01-19T11:15:53Z"
      },
      "message": "[pep-8] Prefer \"foo is None\" to \"foo == None\"\n\nIn accordance with Style Guide for Python Code (PEP 8):\n* https://www.python.org/dev/peps/pep-0008/#programming-recommendations",
      "tree": {
        "sha": "a4fa79e3702cf24c36e184d82567eece0f823b1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a4fa79e3702cf24c36e184d82567eece0f823b1b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db68ddf24fa3f207e9f023dda11c3b63bccc105c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db68ddf24fa3f207e9f023dda11c3b63bccc105c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db68ddf24fa3f207e9f023dda11c3b63bccc105c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db68ddf24fa3f207e9f023dda11c3b63bccc105c/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b806977734931f34efd945f24b97f1d1b3a75185",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b806977734931f34efd945f24b97f1d1b3a75185",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b806977734931f34efd945f24b97f1d1b3a75185"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 27,
      "deletions": 27
    },
    "files": [
      {
        "sha": "4c9ea67462306c36f79f5df05d7695afd6be9ed5",
        "filename": "contrib/devtools/clang-format-diff.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db68ddf24fa3f207e9f023dda11c3b63bccc105c/contrib/devtools/clang-format-diff.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db68ddf24fa3f207e9f023dda11c3b63bccc105c/contrib/devtools/clang-format-diff.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/clang-format-diff.py?ref=db68ddf24fa3f207e9f023dda11c3b63bccc105c",
        "patch": "@@ -110,7 +110,7 @@ def main():\n     match = re.search('^\\+\\+\\+\\ (.*?/){%s}(\\S*)' % args.p, line)\n     if match:\n       filename = match.group(2)\n-    if filename == None:\n+    if filename is None:\n       continue\n \n     if args.regex is not None:"
      },
      {
        "sha": "ec378111ed0c6022a848e7609947bf651c898eb2",
        "filename": "contrib/devtools/copyright_header.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db68ddf24fa3f207e9f023dda11c3b63bccc105c/contrib/devtools/copyright_header.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db68ddf24fa3f207e9f023dda11c3b63bccc105c/contrib/devtools/copyright_header.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/copyright_header.py?ref=db68ddf24fa3f207e9f023dda11c3b63bccc105c",
        "patch": "@@ -489,7 +489,7 @@ def get_git_change_year_range(filename):\n \n def file_already_has_core_copyright(file_lines):\n     index, _ = get_updatable_copyright_line(file_lines)\n-    return index != None\n+    return index is not None\n \n ################################################################################\n # insert header execution"
      },
      {
        "sha": "d1de1ceca9a4ef08963cbf373722c52d0a23b734",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db68ddf24fa3f207e9f023dda11c3b63bccc105c/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db68ddf24fa3f207e9f023dda11c3b63bccc105c/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=db68ddf24fa3f207e9f023dda11c3b63bccc105c",
        "patch": "@@ -36,13 +36,13 @@ def run_test(self):\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n         assert(b'\"error\":null' in out1)\n-        assert(conn.sock!=None) #according to http/1.1 connection must still be open!\n+        assert(conn.sock is not None) #according to http/1.1 connection must still be open!\n \n         #send 2nd request without closing connection\n         conn.request('POST', '/', '{\"method\": \"getchaintips\"}', headers)\n         out1 = conn.getresponse().read()\n         assert(b'\"error\":null' in out1) #must also response with a correct json-rpc message\n-        assert(conn.sock!=None) #according to http/1.1 connection must still be open!\n+        assert(conn.sock is not None) #according to http/1.1 connection must still be open!\n         conn.close()\n \n         #same should be if we add keep-alive because this should be the std. behaviour\n@@ -53,13 +53,13 @@ def run_test(self):\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n         assert(b'\"error\":null' in out1)\n-        assert(conn.sock!=None) #according to http/1.1 connection must still be open!\n+        assert(conn.sock is not None) #according to http/1.1 connection must still be open!\n \n         #send 2nd request without closing connection\n         conn.request('POST', '/', '{\"method\": \"getchaintips\"}', headers)\n         out1 = conn.getresponse().read()\n         assert(b'\"error\":null' in out1) #must also response with a correct json-rpc message\n-        assert(conn.sock!=None) #according to http/1.1 connection must still be open!\n+        assert(conn.sock is not None) #according to http/1.1 connection must still be open!\n         conn.close()\n \n         #now do the same with \"Connection: close\"\n@@ -70,7 +70,7 @@ def run_test(self):\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n         assert(b'\"error\":null' in out1)\n-        assert(conn.sock==None) #now the connection must be closed after the response\n+        assert(conn.sock is None) #now the connection must be closed after the response\n \n         #node1 (2nd node) is running with disabled keep-alive option\n         urlNode1 = urllib.parse.urlparse(self.nodes[1].url)\n@@ -93,7 +93,7 @@ def run_test(self):\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n         assert(b'\"error\":null' in out1)\n-        assert(conn.sock!=None) #connection must be closed because bitcoind should use keep-alive by default\n+        assert(conn.sock is not None) #connection must be closed because bitcoind should use keep-alive by default\n \n         # Check excessive request size\n         conn = http.client.HTTPConnection(urlNode2.hostname, urlNode2.port)"
      },
      {
        "sha": "31f8f1526b2eaca3983fc37449194ec842c53a30",
        "filename": "qa/rpc-tests/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db68ddf24fa3f207e9f023dda11c3b63bccc105c/qa/rpc-tests/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db68ddf24fa3f207e9f023dda11c3b63bccc105c/qa/rpc-tests/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-fullblocktest.py?ref=db68ddf24fa3f207e9f023dda11c3b63bccc105c",
        "patch": "@@ -98,7 +98,7 @@ def create_and_sign_transaction(self, spend_tx, n, value, script=CScript([OP_TRU\n         return tx\n \n     def next_block(self, number, spend=None, additional_coinbase_value=0, script=CScript([OP_TRUE]), solve=True):\n-        if self.tip == None:\n+        if self.tip is None:\n             base_block_hash = self.genesis_hash\n             block_time = int(time.time())+1\n         else:\n@@ -109,7 +109,7 @@ def next_block(self, number, spend=None, additional_coinbase_value=0, script=CSc\n         coinbase = create_coinbase(height, self.coinbase_pubkey)\n         coinbase.vout[0].nValue += additional_coinbase_value\n         coinbase.rehash()\n-        if spend == None:\n+        if spend is None:\n             block = create_block(base_block_hash, coinbase, block_time)\n         else:\n             coinbase.vout[0].nValue += spend.tx.vout[spend.n].nValue - 1 # all but one satoshi to fees"
      },
      {
        "sha": "fed4f4bf6ac26ea03b13717f1118b959b613c053",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db68ddf24fa3f207e9f023dda11c3b63bccc105c/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db68ddf24fa3f207e9f023dda11c3b63bccc105c/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=db68ddf24fa3f207e9f023dda11c3b63bccc105c",
        "patch": "@@ -92,16 +92,16 @@ def sync_with_ping(self, timeout=60):\n         return\n \n     def wait_for_block(self, blockhash, timeout=60):\n-        test_function = lambda: self.last_block != None and self.last_block.sha256 == blockhash\n+        test_function = lambda: self.last_block is not None and self.last_block.sha256 == blockhash\n         self.sync(test_function, timeout)\n         return\n \n     def wait_for_getdata(self, timeout=60):\n-        test_function = lambda: self.last_getdata != None\n+        test_function = lambda: self.last_getdata is not None\n         self.sync(test_function, timeout)\n \n     def wait_for_getheaders(self, timeout=60):\n-        test_function = lambda: self.last_getheaders != None\n+        test_function = lambda: self.last_getheaders is not None\n         self.sync(test_function, timeout)\n \n     def wait_for_inv(self, expected_inv, timeout=60):\n@@ -154,7 +154,7 @@ def test_transaction_acceptance(self, tx, with_witness, accepted, reason=None):\n         self.send_message(tx_message)\n         self.sync_with_ping()\n         assert_equal(tx.hash in self.connection.rpc.getrawmempool(), accepted)\n-        if (reason != None and not accepted):\n+        if reason is not None and not accepted:\n             # Check the rejection reason as well.\n             with mininode_lock:\n                 assert_equal(self.last_reject.reason, reason)"
      },
      {
        "sha": "7fe06b7348bb3ac5b2384e606fd673169738ea63",
        "filename": "qa/rpc-tests/prioritise_transaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db68ddf24fa3f207e9f023dda11c3b63bccc105c/qa/rpc-tests/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db68ddf24fa3f207e9f023dda11c3b63bccc105c/qa/rpc-tests/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/prioritise_transaction.py?ref=db68ddf24fa3f207e9f023dda11c3b63bccc105c",
        "patch": "@@ -71,7 +71,7 @@ def run_test(self):\n                 high_fee_tx = x\n \n         # Something high-fee should have been mined!\n-        assert(high_fee_tx != None)\n+        assert(high_fee_tx is not None)\n \n         # Add a prioritisation before a tx is in the mempool (de-prioritising a\n         # high-fee transaction so that it's now low fee)."
      },
      {
        "sha": "b4f9d7183b4b41cd4b74bc5c27d59f957ebb2462",
        "filename": "qa/rpc-tests/sendheaders.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db68ddf24fa3f207e9f023dda11c3b63bccc105c/qa/rpc-tests/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db68ddf24fa3f207e9f023dda11c3b63bccc105c/qa/rpc-tests/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/sendheaders.py?ref=db68ddf24fa3f207e9f023dda11c3b63bccc105c",
        "patch": "@@ -147,22 +147,22 @@ def on_close(self, conn):\n     # right header or the right inv\n     # inv and headers should be lists of block hashes\n     def check_last_announcement(self, headers=None, inv=None):\n-        expect_headers = headers if headers != None else []\n-        expect_inv = inv if inv != None else []\n+        expect_headers = headers if headers is not None else []\n+        expect_inv = inv if inv is not None else []\n         test_function = lambda: self.block_announced\n         assert(wait_until(test_function, timeout=60))\n         with mininode_lock:\n             self.block_announced = False\n \n             success = True\n             compare_inv = []\n-            if self.last_inv != None:\n+            if self.last_inv is not None:\n                 compare_inv = [x.hash for x in self.last_inv.inv]\n             if compare_inv != expect_inv:\n                 success = False\n \n             hash_headers = []\n-            if self.last_headers != None:\n+            if self.last_headers is not None:\n                 # treat headers as a list of block hashes\n                 hash_headers = [ x.sha256 for x in self.last_headers.headers ]\n             if hash_headers != expect_headers:\n@@ -174,20 +174,20 @@ def check_last_announcement(self, headers=None, inv=None):\n \n     # Syncing helpers\n     def wait_for_block(self, blockhash, timeout=60):\n-        test_function = lambda: self.last_block != None and self.last_block.sha256 == blockhash\n+        test_function = lambda: self.last_block is not None and self.last_block.sha256 == blockhash\n         assert(wait_until(test_function, timeout=timeout))\n         return\n \n     def wait_for_getheaders(self, timeout=60):\n-        test_function = lambda: self.last_getheaders != None\n+        test_function = lambda: self.last_getheaders is not None\n         assert(wait_until(test_function, timeout=timeout))\n         return\n \n     def wait_for_getdata(self, hash_list, timeout=60):\n         if hash_list == []:\n             return\n \n-        test_function = lambda: self.last_getdata != None and [x.hash for x in self.last_getdata.inv] == hash_list\n+        test_function = lambda: self.last_getdata is not None and [x.hash for x in self.last_getdata.inv] == hash_list\n         assert(wait_until(test_function, timeout=timeout))\n         return\n "
      },
      {
        "sha": "59b96337075c059e23bc6eaa31a12a330827fea3",
        "filename": "qa/rpc-tests/test_framework/blocktools.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db68ddf24fa3f207e9f023dda11c3b63bccc105c/qa/rpc-tests/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db68ddf24fa3f207e9f023dda11c3b63bccc105c/qa/rpc-tests/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blocktools.py?ref=db68ddf24fa3f207e9f023dda11c3b63bccc105c",
        "patch": "@@ -71,7 +71,7 @@ def create_coinbase(height, pubkey = None):\n     coinbaseoutput.nValue = 50 * COIN\n     halvings = int(height/150) # regtest\n     coinbaseoutput.nValue >>= halvings\n-    if (pubkey != None):\n+    if pubkey is not None:\n         coinbaseoutput.scriptPubKey = CScript([pubkey, OP_CHECKSIG])\n     else:\n         coinbaseoutput.scriptPubKey = CScript([OP_TRUE])"
      },
      {
        "sha": "a8fae8e184b051475ecef6194589ddb74b6c8f0a",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db68ddf24fa3f207e9f023dda11c3b63bccc105c/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db68ddf24fa3f207e9f023dda11c3b63bccc105c/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=db68ddf24fa3f207e9f023dda11c3b63bccc105c",
        "patch": "@@ -823,7 +823,7 @@ def __init__(self, p2pheaders_and_shortids = None):\n         self.prefilled_txn = []\n         self.use_witness = False\n \n-        if p2pheaders_and_shortids != None:\n+        if p2pheaders_and_shortids is not None:\n             self.header = p2pheaders_and_shortids.header\n             self.nonce = p2pheaders_and_shortids.nonce\n             self.shortids = p2pheaders_and_shortids.shortids\n@@ -880,7 +880,7 @@ class BlockTransactionsRequest(object):\n \n     def __init__(self, blockhash=0, indexes = None):\n         self.blockhash = blockhash\n-        self.indexes = indexes if indexes != None else []\n+        self.indexes = indexes if indexes is not None else []\n \n     def deserialize(self, f):\n         self.blockhash = deser_uint256(f)\n@@ -920,7 +920,7 @@ class BlockTransactions(object):\n \n     def __init__(self, blockhash=0, transactions = None):\n         self.blockhash = blockhash\n-        self.transactions = transactions if transactions != None else []\n+        self.transactions = transactions if transactions is not None else []\n \n     def deserialize(self, f):\n         self.blockhash = deser_uint256(f)\n@@ -1082,7 +1082,7 @@ class msg_getdata(object):\n     command = b\"getdata\"\n \n     def __init__(self, inv=None):\n-        self.inv = inv if inv != None else []\n+        self.inv = inv if inv is not None else []\n \n     def deserialize(self, f):\n         self.inv = deser_vector(f, CInv)"
      }
    ]
  }
]