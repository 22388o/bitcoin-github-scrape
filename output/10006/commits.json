[
  {
    "sha": "569596cc5148ef868350a9720013d38faf3e34ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Njk1OTZjYzUxNDhlZjg2ODM1MGE5NzIwMDEzZDM4ZmFmM2UzNGNl",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-03-08T20:56:59Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-03-16T14:43:54Z"
      },
      "message": "Don't require segwit in getblocktemplate for segwit signalling or mining\n\nSegwit's version bit will be signalled for all invocations of CreateNewBlock,\nand not specifying segwit only will cause CreateNewBlock to skip transactions\nwith witness from being selected.\n\nGithub-Pull: #9955\nRebased-From: abe7b3d3abe10e3554b770f40824174b3b217490",
      "tree": {
        "sha": "907377b3adb5cb56ae99a44c0ac425167a970bc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/907377b3adb5cb56ae99a44c0ac425167a970bc4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/569596cc5148ef868350a9720013d38faf3e34ce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/569596cc5148ef868350a9720013d38faf3e34ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/569596cc5148ef868350a9720013d38faf3e34ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/569596cc5148ef868350a9720013d38faf3e34ce/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "43a987c1cbcd04b9c59052606c3c31c56abc826e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43a987c1cbcd04b9c59052606c3c31c56abc826e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/43a987c1cbcd04b9c59052606c3c31c56abc826e"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 28,
      "deletions": 25
    },
    "files": [
      {
        "sha": "479f1c6796b7956ca76717811160ead3f77dc6d0",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/569596cc5148ef868350a9720013d38faf3e34ce/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/569596cc5148ef868350a9720013d38faf3e34ce/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=569596cc5148ef868350a9720013d38faf3e34ce",
        "patch": "@@ -1701,9 +1701,11 @@ def test_getblocktemplate_before_lockin(self):\n         for node in [self.nodes[0], self.nodes[2]]:\n             gbt_results = node.getblocktemplate()\n             block_version = gbt_results['version']\n-            # If we're not indicating segwit support, we should not be signalling\n-            # for segwit activation, nor should we get a witness commitment.\n-            assert_equal(block_version & (1 << VB_WITNESS_BIT), 0)\n+            # If we're not indicating segwit support, we will still be\n+            # signalling for segwit activation.\n+            assert_equal((block_version & (1 << VB_WITNESS_BIT) != 0), node == self.nodes[0])\n+            # If we don't specify the segwit rule, then we won't get a default\n+            # commitment.\n             assert('default_witness_commitment' not in gbt_results)\n \n         # Workaround:"
      },
      {
        "sha": "5dfc7a2f06fb08882c329931d22cfdc01204c33f",
        "filename": "qa/rpc-tests/segwit.py",
        "status": "modified",
        "additions": 5,
        "deletions": 14,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/569596cc5148ef868350a9720013d38faf3e34ce/qa/rpc-tests/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/569596cc5148ef868350a9720013d38faf3e34ce/qa/rpc-tests/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/segwit.py?ref=569596cc5148ef868350a9720013d38faf3e34ce",
        "patch": "@@ -251,20 +251,11 @@ def run_test(self):\n         assert(tmpl['transactions'][0]['txid'] == txid)\n         assert(tmpl['transactions'][0]['sigops'] == 8)\n \n-        print(\"Verify non-segwit miners get a valid GBT response after the fork\")\n-        send_to_witness(1, self.nodes[0], find_unspent(self.nodes[0], 50), self.pubkey[0], False, Decimal(\"49.998\"))\n-        try:\n-            tmpl = self.nodes[0].getblocktemplate({})\n-            assert(len(tmpl['transactions']) == 1)  # Doesn't include witness tx\n-            assert(tmpl['sizelimit'] == 1000000)\n-            assert('weightlimit' not in tmpl)\n-            assert(tmpl['sigoplimit'] == 20000)\n-            assert(tmpl['transactions'][0]['hash'] == txid)\n-            assert(tmpl['transactions'][0]['sigops'] == 2)\n-            assert(('!segwit' in tmpl['rules']) or ('segwit' not in tmpl['rules']))\n-        except JSONRPCException:\n-            # This is an acceptable outcome\n-            pass\n+        print(\"Non-segwit miners are able to use GBT response after activation.\")\n+        txid = send_to_witness(1, self.nodes[0], find_unspent(self.nodes[0], 50), self.pubkey[0], False, Decimal(\"49.998\"))\n+        tmpl = self.nodes[0].getblocktemplate()\n+        # TODO: add a transaction with witness to mempool, and verify it's not\n+        # selected for mining.\n \n         print(\"Verify behaviour of importaddress, addwitnessaddress and listunspent\")\n "
      },
      {
        "sha": "7b3d94d0e4f391e50a413fd797bc1022a8f81f13",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/569596cc5148ef868350a9720013d38faf3e34ce/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/569596cc5148ef868350a9720013d38faf3e34ce/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=569596cc5148ef868350a9720013d38faf3e34ce",
        "patch": "@@ -127,7 +127,7 @@ void BlockAssembler::resetBlock()\n     blockFinished = false;\n }\n \n-std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)\n+std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn, bool fMineWitnessTx)\n {\n     resetBlock();\n \n@@ -165,7 +165,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     // -promiscuousmempoolflags is used.\n     // TODO: replace this with a call to main to assess validity of a mempool\n     // transaction (which in most cases can be a no-op).\n-    fIncludeWitness = IsWitnessEnabled(pindexPrev, chainparams.GetConsensus());\n+    fIncludeWitness = IsWitnessEnabled(pindexPrev, chainparams.GetConsensus()) && fMineWitnessTx;\n \n     addPriorityTxs();\n     addPackageTxs();"
      },
      {
        "sha": "29013c3bcc1b66ca5f2187b5485360ec2d4a591e",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/569596cc5148ef868350a9720013d38faf3e34ce/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/569596cc5148ef868350a9720013d38faf3e34ce/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=569596cc5148ef868350a9720013d38faf3e34ce",
        "patch": "@@ -165,7 +165,7 @@ class BlockAssembler\n public:\n     BlockAssembler(const CChainParams& chainparams);\n     /** Construct a new block template with coinbase to scriptPubKeyIn */\n-    std::unique_ptr<CBlockTemplate> CreateNewBlock(const CScript& scriptPubKeyIn);\n+    std::unique_ptr<CBlockTemplate> CreateNewBlock(const CScript& scriptPubKeyIn, bool fMineWitnessTx=true);\n \n private:\n     // utility functions"
      },
      {
        "sha": "38d7b1eb1e225b2385afeed921b857ca880725e8",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 4,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/569596cc5148ef868350a9720013d38faf3e34ce/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/569596cc5148ef868350a9720013d38faf3e34ce/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=569596cc5148ef868350a9720013d38faf3e34ce",
        "patch": "@@ -519,12 +519,22 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n         // TODO: Maybe recheck connections/IBD and (if something wrong) send an expires-immediately template to stop miners?\n     }\n \n+    const struct BIP9DeploymentInfo& segwit_info = VersionBitsDeploymentInfo[Consensus::DEPLOYMENT_SEGWIT];\n+    // If the caller is indicating segwit support, then allow CreateNewBlock()\n+    // to select witness transactions, after segwit activates (otherwise\n+    // don't).\n+    bool fSupportsSegwit = setClientRules.find(segwit_info.name) != setClientRules.end();\n+\n     // Update block\n     static CBlockIndex* pindexPrev;\n     static int64_t nStart;\n     static std::unique_ptr<CBlockTemplate> pblocktemplate;\n+    // Cache whether the last invocation was with segwit support, to avoid returning\n+    // a segwit-block to a non-segwit caller.\n+    static bool fLastTemplateSupportsSegwit = true;\n     if (pindexPrev != chainActive.Tip() ||\n-        (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLast && GetTime() - nStart > 5))\n+        (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLast && GetTime() - nStart > 5) ||\n+        fLastTemplateSupportsSegwit != fSupportsSegwit)\n     {\n         // Clear pindexPrev so future calls make a new block, despite any failures from here on\n         pindexPrev = nullptr;\n@@ -533,10 +543,11 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n         nTransactionsUpdatedLast = mempool.GetTransactionsUpdated();\n         CBlockIndex* pindexPrevNew = chainActive.Tip();\n         nStart = GetTime();\n+        fLastTemplateSupportsSegwit = fSupportsSegwit;\n \n         // Create new block\n         CScript scriptDummy = CScript() << OP_TRUE;\n-        pblocktemplate = BlockAssembler(Params()).CreateNewBlock(scriptDummy);\n+        pblocktemplate = BlockAssembler(Params()).CreateNewBlock(scriptDummy, fSupportsSegwit);\n         if (!pblocktemplate)\n             throw JSONRPCError(RPC_OUT_OF_MEMORY, \"Out of memory\");\n \n@@ -686,8 +697,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     result.push_back(Pair(\"bits\", strprintf(\"%08x\", pblock->nBits)));\n     result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));\n \n-    const struct BIP9DeploymentInfo& segwit_info = VersionBitsDeploymentInfo[Consensus::DEPLOYMENT_SEGWIT];\n-    if (!pblocktemplate->vchCoinbaseCommitment.empty() && setClientRules.find(segwit_info.name) != setClientRules.end()) {\n+    if (!pblocktemplate->vchCoinbaseCommitment.empty() && fSupportsSegwit) {\n         result.push_back(Pair(\"default_witness_commitment\", HexStr(pblocktemplate->vchCoinbaseCommitment.begin(), pblocktemplate->vchCoinbaseCommitment.end())));\n     }\n "
      },
      {
        "sha": "8a7cce7485659841bf8513a2fc58817ba3522d2f",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/569596cc5148ef868350a9720013d38faf3e34ce/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/569596cc5148ef868350a9720013d38faf3e34ce/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=569596cc5148ef868350a9720013d38faf3e34ce",
        "patch": "@@ -17,7 +17,7 @@ const struct BIP9DeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION\n     },\n     {\n         /*.name =*/ \"segwit\",\n-        /*.gbt_force =*/ false,\n+        /*.gbt_force =*/ true,\n     }\n };\n "
      }
    ]
  },
  {
    "sha": "2cd2cd51f7ae954160d5422e105089ff1f598aa6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyY2QyY2Q1MWY3YWU5NTQxNjBkNTQyMmUxMDUwODlmZjFmNTk4YWE2",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-03-09T18:49:50Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-03-16T14:50:16Z"
      },
      "message": "Test transaction selection when gbt called without segwit support\n\nGithub-Pull: #9955\nRebased-From: c85ffe6d8d57132c1825c16a572d3847419030a6",
      "tree": {
        "sha": "242446cf8f699f6f177fcd271228f47e43353fcb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/242446cf8f699f6f177fcd271228f47e43353fcb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2cd2cd51f7ae954160d5422e105089ff1f598aa6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cd2cd51f7ae954160d5422e105089ff1f598aa6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2cd2cd51f7ae954160d5422e105089ff1f598aa6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cd2cd51f7ae954160d5422e105089ff1f598aa6/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "569596cc5148ef868350a9720013d38faf3e34ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/569596cc5148ef868350a9720013d38faf3e34ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/569596cc5148ef868350a9720013d38faf3e34ce"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 49,
      "deletions": 6
    },
    "files": [
      {
        "sha": "c814399f922eb54479f0efb0fbb398f1ed2ad426",
        "filename": "qa/rpc-tests/segwit.py",
        "status": "modified",
        "additions": 49,
        "deletions": 6,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cd2cd51f7ae954160d5422e105089ff1f598aa6/qa/rpc-tests/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cd2cd51f7ae954160d5422e105089ff1f598aa6/qa/rpc-tests/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/segwit.py?ref=2cd2cd51f7ae954160d5422e105089ff1f598aa6",
        "patch": "@@ -11,9 +11,9 @@\n from test_framework.util import *\n from test_framework.mininode import sha256, ripemd160, CTransaction, CTxIn, COutPoint, CTxOut\n from test_framework.address import script_to_p2sh, key_to_p2pkh\n-from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG\n+from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, OP_TRUE\n from io import BytesIO\n-from test_framework.mininode import FromHex\n+from test_framework.mininode import ToHex, FromHex, COIN\n \n NODE_0 = 0\n NODE_1 = 1\n@@ -251,11 +251,54 @@ def run_test(self):\n         assert(tmpl['transactions'][0]['txid'] == txid)\n         assert(tmpl['transactions'][0]['sigops'] == 8)\n \n+        self.nodes[0].generate(1) # Mine a block to clear the gbt cache\n+\n         print(\"Non-segwit miners are able to use GBT response after activation.\")\n-        txid = send_to_witness(1, self.nodes[0], find_unspent(self.nodes[0], 50), self.pubkey[0], False, Decimal(\"49.998\"))\n-        tmpl = self.nodes[0].getblocktemplate()\n-        # TODO: add a transaction with witness to mempool, and verify it's not\n-        # selected for mining.\n+        # Create a 3-tx chain: tx1 (non-segwit input, paying to a segwit output) ->\n+        #                      tx2 (segwit input, paying to a non-segwit output) ->\n+        #                      tx3 (non-segwit input, paying to a non-segwit output).\n+        # tx1 is allowed to appear in the block, but no others.\n+        txid1 = send_to_witness(1, self.nodes[0], find_unspent(self.nodes[0], 50), self.pubkey[0], False, Decimal(\"49.996\"))\n+        hex_tx = self.nodes[0].gettransaction(txid)['hex']\n+        tx = FromHex(CTransaction(), hex_tx)\n+        assert(tx.wit.is_null()) # This should not be a segwit input\n+        assert(txid1 in self.nodes[0].getrawmempool())\n+\n+        # Now create tx2, which will spend from txid1.\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(int(txid1, 16), 0), b''))\n+        tx.vout.append(CTxOut(int(49.99*COIN), CScript([OP_TRUE])))\n+        tx2_hex = self.nodes[0].signrawtransaction(ToHex(tx))['hex']\n+        txid2 = self.nodes[0].sendrawtransaction(tx2_hex)\n+        tx = FromHex(CTransaction(), tx2_hex)\n+        assert(not tx.wit.is_null())\n+\n+        # Now create tx3, which will spend from txid2\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(int(txid2, 16), 0), b\"\"))\n+        tx.vout.append(CTxOut(int(49.95*COIN), CScript([OP_TRUE]))) # Huge fee\n+        tx.calc_sha256()\n+        txid3 = self.nodes[0].sendrawtransaction(ToHex(tx))\n+        assert(tx.wit.is_null())\n+        assert(txid3 in self.nodes[0].getrawmempool())\n+\n+        # Now try calling getblocktemplate() without segwit support.\n+        template = self.nodes[0].getblocktemplate()\n+\n+        # Check that tx1 is the only transaction of the 3 in the template.\n+        template_txids = [ t['txid'] for t in template['transactions'] ]\n+        assert(txid2 not in template_txids and txid3 not in template_txids)\n+        assert(txid1 in template_txids)\n+\n+        # Check that running with segwit support results in all 3 being included.\n+        template = self.nodes[0].getblocktemplate({\"rules\": [\"segwit\"]})\n+        template_txids = [ t['txid'] for t in template['transactions'] ]\n+        assert(txid1 in template_txids)\n+        assert(txid2 in template_txids)\n+        assert(txid3 in template_txids)\n+\n+        # Mine a block to clear the gbt cache again.\n+        self.nodes[0].generate(1)\n \n         print(\"Verify behaviour of importaddress, addwitnessaddress and listunspent\")\n "
      }
    ]
  }
]