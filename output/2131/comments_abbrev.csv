sipa,2012-12-28T16:12:56Z,@gavinandresen Updated.\n,https://github.com/bitcoin/bitcoin/pull/2131#issuecomment-11734974,11734974,
BitcoinPullTester,2013-01-03T07:46:56Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/3e4655404a8839a03c241fdcf67e063940eb462b for binaries and test log.\n",https://github.com/bitcoin/bitcoin/pull/2131#issuecomment-11836841,11836841,
BitcoinPullTester,2013-01-18T13:51:32Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/e1771b85af3d16e12bab2243ea50adf2d52eaf3c for binaries and test log.\n",https://github.com/bitcoin/bitcoin/pull/2131#issuecomment-12422487,12422487,
gavinandresen,2013-01-23T14:41:05Z,"I think this goes one step too far.\n\nSome almost-baked thoughts on the problem we're actually trying to solve (we'd like transactions ids to be immutable):\n\nI think this ties into a bunch of other almost-baked thoughts I've had surrounding bumping the transaction.version. I think it might make sense to introduce transaction.version=2 messages onto the network, with additional rules for relayin",https://github.com/bitcoin/bitcoin/pull/2131#issuecomment-12598031,12598031,
BitcoinPullTester,2013-01-24T04:38:23Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/e1771b85af3d16e12bab2243ea50adf2d52eaf3c for binaries and test log.\n",https://github.com/bitcoin/bitcoin/pull/2131#issuecomment-12636926,12636926,
gmaxwell,2013-01-24T04:42:29Z,DOS rules don't prevent a miner from modifying a transaction. We really do need to actually remove the malleability. ... though the actual enforcement would need to be on a version=2 transaction.\n,https://github.com/bitcoin/bitcoin/pull/2131#issuecomment-12637027,12637027,
sipa,2013-02-05T09:42:59Z,"@gavinandresen I really don't like the fact that this would mean rules at the transaction validation level would need knowledge about the precise inner script semantics. IMHO, we should just gradually introduce rules to remove malleabilities, and then perhaps use tx.nVersion==2 rule to enforce them in the block chain at some later point.\n",https://github.com/bitcoin/bitcoin/pull/2131#issuecomment-13121681,13121681,
luke-jr,2013-07-17T04:29:51Z,@sipa Needs rebase (or close if it was merged in another form?).\n,https://github.com/bitcoin/bitcoin/pull/2131#issuecomment-21091621,21091621,
sipa,2013-08-15T22:19:30Z,Rebased. @jgarzik @gmaxwell @gavinandresen @laanwj: opinions?\n,https://github.com/bitcoin/bitcoin/pull/2131#issuecomment-22735066,22735066,
gmaxwell,2013-08-15T22:26:29Z,"Without this, or a substantially similar, change we cannot eliminate malleability attacks on unconfirmed transaction chains.\n\nThough I almost wish the evenness procedure had been specified in BIP32, as now we're going to see hardware wallet deployed that produce odd signatures.  They can be fixed with an after the fact mutation, so perhaps thats not the end of the world.\n",https://github.com/bitcoin/bitcoin/pull/2131#issuecomment-22735438,22735438,
BitcoinPullTester,2013-08-15T23:07:44Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/a81cd96805ce6b65cca3a40ebbd3b2eb428abb7b for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/cu",https://github.com/bitcoin/bitcoin/pull/2131#issuecomment-22737406,22737406,
gavinandresen,2013-08-16T00:20:52Z,ACK.\n,https://github.com/bitcoin/bitcoin/pull/2131#issuecomment-22740291,22740291,
gavinandresen,2012-12-27T18:48:20Z,"Subtle change in semantics here: if sig == NULL, the old code cleared vchSig.\n\nFor defensive programming, I'd suggest a vchSig.clear(); as the first statement in this routine.\n",https://github.com/bitcoin/bitcoin/pull/2131#discussion_r2510727,2510727,src/key.cpp
