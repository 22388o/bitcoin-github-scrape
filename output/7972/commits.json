[
  {
    "sha": "fa494dec79b9d469b7eb38d2f0b8cf9832cdc398",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQ5NGRlYzc5YjlkNDY5YjdlYjM4ZDJmMGI4Y2Y5ODMyY2RjMzk4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-29T10:51:15Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-05-09T17:56:16Z"
      },
      "message": "[qa] pull-tester: Run rpc test in parallel",
      "tree": {
        "sha": "351e0224a788a8f1c3ec201675029edc96b25f83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/351e0224a788a8f1c3ec201675029edc96b25f83"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa494dec79b9d469b7eb38d2f0b8cf9832cdc398",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa494dec79b9d469b7eb38d2f0b8cf9832cdc398",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa494dec79b9d469b7eb38d2f0b8cf9832cdc398",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa494dec79b9d469b7eb38d2f0b8cf9832cdc398/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e14afe42fdd468d5de11df8cc13defdcb8e83f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e14afe42fdd468d5de11df8cc13defdcb8e83f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e14afe42fdd468d5de11df8cc13defdcb8e83f8"
      }
    ],
    "stats": {
      "total": 118,
      "additions": 105,
      "deletions": 13
    },
    "files": [
      {
        "sha": "7489eb5130ac090658051ef17b98a7296a19293e",
        "filename": "qa/README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa494dec79b9d469b7eb38d2f0b8cf9832cdc398/qa/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa494dec79b9d469b7eb38d2f0b8cf9832cdc398/qa/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/README.md?ref=fa494dec79b9d469b7eb38d2f0b8cf9832cdc398",
        "patch": "@@ -35,6 +35,9 @@ Run all possible tests with\n \n     qa/pull-tester/rpc-tests.py -extended\n \n+By default, tests will be run in parallel if you want to specify how many\n+tests should be run in parallel, append `-paralell=n` (default n=4).\n+\n If you want to create a basic coverage report for the rpc test suite, append `--coverage`.\n \n Possible options, which apply to each individual test run:"
      },
      {
        "sha": "f926398d58259a5703f1f889ef1b5d0761871e98",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 79,
        "deletions": 13,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa494dec79b9d469b7eb38d2f0b8cf9832cdc398/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa494dec79b9d469b7eb38d2f0b8cf9832cdc398/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=fa494dec79b9d469b7eb38d2f0b8cf9832cdc398",
        "patch": "@@ -53,10 +53,12 @@\n \n #Create a set to store arguments and create the passon string\n opts = set()\n-passon_args = \"\"\n+passon_args = []\n PASSON_REGEX = re.compile(\"^--\")\n+PARALLEL_REGEX = re.compile('^-parallel=')\n \n print_help = False\n+run_parallel = 4\n \n for arg in sys.argv[1:]:\n     if arg == \"--help\" or arg == \"-h\" or arg == \"-?\":\n@@ -65,7 +67,9 @@\n     if arg == '--coverage':\n         ENABLE_COVERAGE = 1\n     elif PASSON_REGEX.match(arg):\n-        passon_args += \" \" + arg\n+        passon_args.append(arg)\n+    elif PARALLEL_REGEX.match(arg):\n+        run_parallel = int(arg.split(sep='=', maxsplit=1)[1])\n     else:\n         opts.add(arg)\n \n@@ -96,6 +100,7 @@\n \n #Tests\n testScripts = [\n+    'walletbackup.py',\n     'bip68-112-113-p2p.py',\n     'wallet.py',\n     'listtransactions.py',\n@@ -116,7 +121,6 @@\n     'merkle_blocks.py',\n     'fundrawtransaction.py',\n     'signrawtransactions.py',\n-    'walletbackup.py',\n     'nodehandling.py',\n     'reindex.py',\n     'decodescript.py',\n@@ -131,7 +135,7 @@\n     'abandonconflict.py',\n     'p2p-versionbits-warning.py',\n     'importprunedfunds.py',\n-    'signmessages.py'\n+    'signmessages.py',\n ]\n if ENABLE_ZMQ:\n     testScripts.append('zmq_test.py')\n@@ -160,6 +164,7 @@\n     'pruning.py', # leave pruning last as it takes a REALLY long time\n ]\n \n+\n def runtests():\n     test_list = []\n     if '-extended' in opts:\n@@ -173,30 +178,91 @@ def runtests():\n \n     if print_help:\n         # Only print help of the first script and exit\n-        subprocess.check_call(RPC_TESTS_DIR + test_list[0] + ' -h', shell=True)\n+        subprocess.check_call((RPC_TESTS_DIR + test_list[0]).split() + ['-h'])\n         sys.exit(0)\n \n     coverage = None\n \n     if ENABLE_COVERAGE:\n         coverage = RPCCoverage()\n         print(\"Initializing coverage directory at %s\\n\" % coverage.dir)\n-    flags = \" --srcdir %s/src %s %s\" % (BUILDDIR, coverage.flag if coverage else '', passon_args)\n+    flags = [\"--srcdir=%s/src\" % BUILDDIR] + passon_args\n+    if coverage:\n+        flags.append(coverage.flag)\n+\n+    if len(test_list) > 1:\n+        # Populate cache\n+        subprocess.check_output([RPC_TESTS_DIR + 'create_cache.py'] + flags)\n \n     #Run Tests\n-    for t in test_list:\n-            print(\"Running testscript %s%s%s ...\" % (BOLD[1], t, BOLD[0]))\n-            time0 = time.time()\n-            subprocess.check_call(\n-                RPC_TESTS_DIR + t + flags, shell=True)\n-            print(\"Duration: %s s\\n\" % (int(time.time() - time0)))\n+    max_len_name = len(max(test_list, key=len))\n+    time_sum = 0\n+    time0 = time.time()\n+    job_queue = RPCTestHandler(run_parallel, test_list, flags)\n+    results = BOLD[1] + \"%s | %s | %s\\n\\n\" % (\"TEST\".ljust(max_len_name), \"PASSED\", \"DURATION\") + BOLD[0]\n+    all_passed = True\n+    for _ in range(len(test_list)):\n+        (name, stdout, stderr, passed, duration) = job_queue.get_next()\n+        all_passed = all_passed and passed\n+        time_sum += duration\n+\n+        print('\\n' + BOLD[1] + name + BOLD[0] + \":\")\n+        print(stdout)\n+        print('stderr:\\n' if not stderr == '' else '', stderr)\n+        results += \"%s | %s | %s s\\n\" % (name.ljust(max_len_name), str(passed).ljust(6), duration)\n+        print(\"Pass: %s%s%s, Duration: %s s\\n\" % (BOLD[1], passed, BOLD[0], duration))\n+    results += BOLD[1] + \"\\n%s | %s | %s s (accumulated)\" % (\"ALL\".ljust(max_len_name), str(all_passed).ljust(6), time_sum) + BOLD[0]\n+    print(results)\n+    print(\"\\nRuntime: %s s\" % (int(time.time() - time0)))\n \n     if coverage:\n         coverage.report_rpc_coverage()\n \n         print(\"Cleaning up coverage data\")\n         coverage.cleanup()\n \n+    sys.exit(not all_passed)\n+\n+\n+class RPCTestHandler:\n+    \"\"\"\n+    Trigger the testscrips passed in via the list.\n+    \"\"\"\n+\n+    def __init__(self, num_tests_parallel, test_list=None, flags=None):\n+        assert(num_tests_parallel >= 1)\n+        self.num_jobs = num_tests_parallel\n+        self.test_list = test_list\n+        self.flags = flags\n+        self.num_running = 0\n+        self.jobs = []\n+\n+    def get_next(self):\n+        while self.num_running < self.num_jobs and self.test_list:\n+            # Add tests\n+            self.num_running += 1\n+            t = self.test_list.pop(0)\n+            self.jobs.append((t,\n+                              time.time(),\n+                              subprocess.Popen((RPC_TESTS_DIR + t).split() + self.flags,\n+                                               universal_newlines=True,\n+                                               stdout=subprocess.PIPE,\n+                                               stderr=subprocess.PIPE)))\n+        if not self.jobs:\n+            raise IndexError('%s from empty list' % __name__)\n+        while True:\n+            # Return first proc that finishes\n+            time.sleep(.5)\n+            for j in self.jobs:\n+                (name, time0, proc) = j\n+                if proc.poll() is not None:\n+                    (stdout, stderr) = proc.communicate(timeout=3)\n+                    passed = stderr == \"\" and proc.returncode == 0\n+                    self.num_running -= 1\n+                    self.jobs.remove(j)\n+                    return name, stdout, stderr, passed, int(time.time() - time0)\n+            print('.', end='', flush=True)\n+\n \n class RPCCoverage(object):\n     \"\"\"\n@@ -215,7 +281,7 @@ class RPCCoverage(object):\n     \"\"\"\n     def __init__(self):\n         self.dir = tempfile.mkdtemp(prefix=\"coverage\")\n-        self.flag = '--coveragedir %s' % self.dir\n+        self.flag = '--coveragedir=%s' % self.dir\n \n     def report_rpc_coverage(self):\n         \"\"\""
      },
      {
        "sha": "b6161e0917d07593b2ffad50dcaea56b1fd77854",
        "filename": "qa/rpc-tests/create_cache.py",
        "status": "added",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa494dec79b9d469b7eb38d2f0b8cf9832cdc398/qa/rpc-tests/create_cache.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa494dec79b9d469b7eb38d2f0b8cf9832cdc398/qa/rpc-tests/create_cache.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/create_cache.py?ref=fa494dec79b9d469b7eb38d2f0b8cf9832cdc398",
        "patch": "@@ -0,0 +1,23 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Helper script to create the cache\n+# (see BitcoinTestFramework.setup_chain)\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+class CreateCache(BitcoinTestFramework):\n+\n+    def setup_network(self):\n+        # Don't setup any test nodes\n+        self.options.noshutdown = True\n+\n+    def run_test(self):\n+        pass\n+\n+if __name__ == '__main__':\n+    CreateCache().main()"
      }
    ]
  },
  {
    "sha": "ccccc591a456f9a8fcf5f8e68a5bacdbbaeb0937",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjY2NjYzU5MWE0NTZmOWE4ZmNmNWY4ZTY4YTViYWNkYmJhZWIwOTM3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-05-09T17:55:49Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-05-09T17:56:24Z"
      },
      "message": "[qa] Add option --portseed to test_framework",
      "tree": {
        "sha": "4453a25fb7afb0d124671d58a72416b90ebdcc91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4453a25fb7afb0d124671d58a72416b90ebdcc91"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ccccc591a456f9a8fcf5f8e68a5bacdbbaeb0937",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccccc591a456f9a8fcf5f8e68a5bacdbbaeb0937",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ccccc591a456f9a8fcf5f8e68a5bacdbbaeb0937",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccccc591a456f9a8fcf5f8e68a5bacdbbaeb0937/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa494dec79b9d469b7eb38d2f0b8cf9832cdc398",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa494dec79b9d469b7eb38d2f0b8cf9832cdc398",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa494dec79b9d469b7eb38d2f0b8cf9832cdc398"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 17,
      "deletions": 9
    },
    "files": [
      {
        "sha": "f810f89a5991aa2e8da483461a8854caa755fdab",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccccc591a456f9a8fcf5f8e68a5bacdbbaeb0937/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccccc591a456f9a8fcf5f8e68a5bacdbbaeb0937/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=ccccc591a456f9a8fcf5f8e68a5bacdbbaeb0937",
        "patch": "@@ -242,9 +242,10 @@ def get_next(self):\n             # Add tests\n             self.num_running += 1\n             t = self.test_list.pop(0)\n+            port_seed = [\"--portseed=%s\" % len(self.test_list)]\n             self.jobs.append((t,\n                               time.time(),\n-                              subprocess.Popen((RPC_TESTS_DIR + t).split() + self.flags,\n+                              subprocess.Popen((RPC_TESTS_DIR + t).split() + self.flags + port_seed,\n                                                universal_newlines=True,\n                                                stdout=subprocess.PIPE,\n                                                stderr=subprocess.PIPE)))"
      },
      {
        "sha": "3480de6c6e20cc05967beb0b14b4630067153d09",
        "filename": "qa/rpc-tests/test_framework/test_framework.py",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccccc591a456f9a8fcf5f8e68a5bacdbbaeb0937/qa/rpc-tests/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccccc591a456f9a8fcf5f8e68a5bacdbbaeb0937/qa/rpc-tests/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/test_framework.py?ref=ccccc591a456f9a8fcf5f8e68a5bacdbbaeb0937",
        "patch": "@@ -5,10 +5,10 @@\n \n # Base class for RPC testing\n \n-# Add python-bitcoinrpc to module search path:\n+import logging\n+import optparse\n import os\n import sys\n-\n import shutil\n import tempfile\n import traceback\n@@ -25,8 +25,9 @@\n     enable_coverage,\n     check_json_precision,\n     initialize_chain_clean,\n+    PortSeed,\n )\n-from .authproxy import AuthServiceProxy, JSONRPCException\n+from .authproxy import JSONRPCException\n \n \n class BitcoinTestFramework(object):\n@@ -95,7 +96,6 @@ def join_network(self):\n         self.setup_network(False)\n \n     def main(self):\n-        import optparse\n \n         parser = optparse.OptionParser(usage=\"%prog [options]\")\n         parser.add_option(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n@@ -108,18 +108,21 @@ def main(self):\n                           help=\"Root directory for datadirs\")\n         parser.add_option(\"--tracerpc\", dest=\"trace_rpc\", default=False, action=\"store_true\",\n                           help=\"Print out all RPC calls as they are made\")\n+        parser.add_option(\"--portseed\", dest=\"port_seed\", default=os.getpid(), type='int',\n+                          help=\"The seed to use for assigning port numbers (default: current process id)\")\n         parser.add_option(\"--coveragedir\", dest=\"coveragedir\",\n                           help=\"Write tested RPC commands into this directory\")\n         self.add_options(parser)\n         (self.options, self.args) = parser.parse_args()\n \n         if self.options.trace_rpc:\n-            import logging\n             logging.basicConfig(level=logging.DEBUG, stream=sys.stdout)\n \n         if self.options.coveragedir:\n             enable_coverage(self.options.coveragedir)\n \n+        PortSeed.n = self.options.port_seed\n+\n         os.environ['PATH'] = self.options.srcdir+\":\"+self.options.srcdir+\"/qt:\"+os.environ['PATH']\n \n         check_json_precision()"
      },
      {
        "sha": "6784177aaac57b70bb9080e51ca9a40bc187c3be",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccccc591a456f9a8fcf5f8e68a5bacdbbaeb0937/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccccc591a456f9a8fcf5f8e68a5bacdbbaeb0937/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=ccccc591a456f9a8fcf5f8e68a5bacdbbaeb0937",
        "patch": "@@ -8,7 +8,6 @@\n # Helpful routines for regression testing\n #\n \n-# Add python-bitcoinrpc to module search path:\n import os\n import sys\n \n@@ -36,6 +35,11 @@\n # The number of ports to \"reserve\" for p2p and rpc, each\n PORT_RANGE = 5000\n \n+\n+class PortSeed:\n+    # Must be initialized with a unique integer for each process\n+    n = None\n+\n #Set Mocktime default to OFF.\n #MOCKTIME is only needed for scripts that use the\n #cached version of the blockchain.  If the cached\n@@ -91,10 +95,10 @@ def get_rpc_proxy(url, node_number, timeout=None):\n \n def p2p_port(n):\n     assert(n <= MAX_NODES)\n-    return PORT_MIN + n + (MAX_NODES * os.getpid()) % (PORT_RANGE - 1 - MAX_NODES)\n+    return PORT_MIN + n + (MAX_NODES * PortSeed.n) % (PORT_RANGE - 1 - MAX_NODES)\n \n def rpc_port(n):\n-    return PORT_MIN + PORT_RANGE + n + (MAX_NODES * os.getpid()) % (PORT_RANGE -1 - MAX_NODES)\n+    return PORT_MIN + PORT_RANGE + n + (MAX_NODES * PortSeed.n) % (PORT_RANGE - 1 - MAX_NODES)\n \n def check_json_precision():\n     \"\"\"Make sure json library being used does not lose precision converting BTC values\"\"\""
      }
    ]
  }
]