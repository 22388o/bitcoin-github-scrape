[
  {
    "sha": "eb306664e786ae43d539fde66f0fbe2a3e89d910",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjMwNjY2NGU3ODZhZTQzZDUzOWZkZTY2ZjBmYmUyYTNlODlkOTEw",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-11-19T16:18:28Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2015-12-02T17:59:30Z"
      },
      "message": "Fix mempool limiting for PrioritiseTransaction\n\nRedo the feerate index to be based on mining score, rather than fee.\n\nUpdate mempool_packages.py to test prioritisetransaction's effect on\npackage scores.",
      "tree": {
        "sha": "39fa888024520cd460c77d600450e2c596d0dcc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39fa888024520cd460c77d600450e2c596d0dcc2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb306664e786ae43d539fde66f0fbe2a3e89d910",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb306664e786ae43d539fde66f0fbe2a3e89d910",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb306664e786ae43d539fde66f0fbe2a3e89d910",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb306664e786ae43d539fde66f0fbe2a3e89d910/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aeedd8a53b2df0ca2bf0429ce37f97cd45b35ba6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeedd8a53b2df0ca2bf0429ce37f97cd45b35ba6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aeedd8a53b2df0ca2bf0429ce37f97cd45b35ba6"
      }
    ],
    "stats": {
      "total": 124,
      "additions": 78,
      "deletions": 46
    },
    "files": [
      {
        "sha": "063308d39430ee48ebfc5831d660f1e7ed6e50c0",
        "filename": "qa/rpc-tests/mempool_packages.py",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb306664e786ae43d539fde66f0fbe2a3e89d910/qa/rpc-tests/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb306664e786ae43d539fde66f0fbe2a3e89d910/qa/rpc-tests/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_packages.py?ref=eb306664e786ae43d539fde66f0fbe2a3e89d910",
        "patch": "@@ -64,17 +64,41 @@ def run_test(self):\n         for x in reversed(chain):\n             assert_equal(mempool[x]['descendantcount'], descendant_count)\n             descendant_fees += mempool[x]['fee']\n+            assert_equal(mempool[x]['modifiedfee'], mempool[x]['fee'])\n             assert_equal(mempool[x]['descendantfees'], SATOSHIS*descendant_fees)\n             descendant_size += mempool[x]['size']\n             assert_equal(mempool[x]['descendantsize'], descendant_size)\n             descendant_count += 1\n \n+        # Check that descendant modified fees includes fee deltas from\n+        # prioritisetransaction\n+        self.nodes[0].prioritisetransaction(chain[-1], 0, 1000)\n+        mempool = self.nodes[0].getrawmempool(True)\n+\n+        descendant_fees = 0\n+        for x in reversed(chain):\n+            descendant_fees += mempool[x]['fee']\n+            assert_equal(mempool[x]['descendantfees'], SATOSHIS*descendant_fees+1000)\n+\n         # Adding one more transaction on to the chain should fail.\n         try:\n             self.chain_transaction(self.nodes[0], txid, vout, value, fee, 1)\n         except JSONRPCException as e:\n             print \"too-long-ancestor-chain successfully rejected\"\n \n+        # Check that prioritising a tx before it's added to the mempool works\n+        self.nodes[0].generate(1)\n+        self.nodes[0].prioritisetransaction(chain[-1], 0, 2000)\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+        mempool = self.nodes[0].getrawmempool(True)\n+\n+        descendant_fees = 0\n+        for x in reversed(chain):\n+            descendant_fees += mempool[x]['fee']\n+            if (x == chain[-1]):\n+                assert_equal(mempool[x]['modifiedfee'], mempool[x]['fee']+satoshi_round(0.00002))\n+            assert_equal(mempool[x]['descendantfees'], SATOSHIS*descendant_fees+2000)\n+\n         # TODO: check that node1's mempool is as expected\n \n         # TODO: test ancestor size limits"
      },
      {
        "sha": "73e6f8029b8a15694afe15051e9e791382172f7e",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb306664e786ae43d539fde66f0fbe2a3e89d910/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb306664e786ae43d539fde66f0fbe2a3e89d910/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=eb306664e786ae43d539fde66f0fbe2a3e89d910",
        "patch": "@@ -197,7 +197,7 @@ UniValue mempoolToJSON(bool fVerbose = false)\n             info.push_back(Pair(\"currentpriority\", e.GetPriority(chainActive.Height())));\n             info.push_back(Pair(\"descendantcount\", e.GetCountWithDescendants()));\n             info.push_back(Pair(\"descendantsize\", e.GetSizeWithDescendants()));\n-            info.push_back(Pair(\"descendantfees\", e.GetFeesWithDescendants()));\n+            info.push_back(Pair(\"descendantfees\", e.GetModFeesWithDescendants()));\n             const CTransaction& tx = e.GetTx();\n             set<string> setDepends;\n             BOOST_FOREACH(const CTxIn& txin, tx.vin)\n@@ -255,7 +255,7 @@ UniValue getrawmempool(const UniValue& params, bool fHelp)\n             \"    \\\"currentpriority\\\" : n,  (numeric) transaction priority now\\n\"\n             \"    \\\"descendantcount\\\" : n,  (numeric) number of in-mempool descendant transactions (including this one)\\n\"\n             \"    \\\"descendantsize\\\" : n,   (numeric) size of in-mempool descendants (including this one)\\n\"\n-            \"    \\\"descendantfees\\\" : n,   (numeric) fees of in-mempool descendants (including this one)\\n\"\n+            \"    \\\"descendantfees\\\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)\\n\"\n             \"    \\\"depends\\\" : [           (array) unconfirmed transactions used as inputs for this transaction\\n\"\n             \"        \\\"transactionid\\\",    (string) parent transaction id\\n\"\n             \"       ... ]\\n\""
      },
      {
        "sha": "c72a1e8c19da4cfebde2df37c713aecf849d6014",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 23,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb306664e786ae43d539fde66f0fbe2a3e89d910/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb306664e786ae43d539fde66f0fbe2a3e89d910/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=eb306664e786ae43d539fde66f0fbe2a3e89d910",
        "patch": "@@ -33,7 +33,7 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n \n     nCountWithDescendants = 1;\n     nSizeWithDescendants = nTxSize;\n-    nFeesWithDescendants = nFee;\n+    nModFeesWithDescendants = nFee;\n     CAmount nValueIn = tx.GetValueOut()+nFee;\n     assert(inChainInputValue <= nValueIn);\n \n@@ -57,6 +57,7 @@ CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n \n void CTxMemPoolEntry::UpdateFeeDelta(int64_t newFeeDelta)\n {\n+    nModFeesWithDescendants += newFeeDelta - feeDelta;\n     feeDelta = newFeeDelta;\n }\n \n@@ -114,7 +115,7 @@ bool CTxMemPool::UpdateForDescendants(txiter updateIt, int maxDescendantsToVisit\n     BOOST_FOREACH(txiter cit, setAllDescendants) {\n         if (!setExclude.count(cit->GetTx().GetHash())) {\n             modifySize += cit->GetTxSize();\n-            modifyFee += cit->GetFee();\n+            modifyFee += cit->GetModifiedFee();\n             modifyCount++;\n             cachedDescendants[updateIt].insert(cit);\n         }\n@@ -244,7 +245,7 @@ void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, setEntries &setAncestors\n     }\n     const int64_t updateCount = (add ? 1 : -1);\n     const int64_t updateSize = updateCount * it->GetTxSize();\n-    const CAmount updateFee = updateCount * it->GetFee();\n+    const CAmount updateFee = updateCount * it->GetModifiedFee();\n     BOOST_FOREACH(txiter ancestorIt, setAncestors) {\n         mapTx.modify(ancestorIt, update_descendant_state(updateSize, updateFee, updateCount));\n     }\n@@ -304,16 +305,15 @@ void CTxMemPoolEntry::SetDirty()\n {\n     nCountWithDescendants = 0;\n     nSizeWithDescendants = nTxSize;\n-    nFeesWithDescendants = nFee;\n+    nModFeesWithDescendants = GetModifiedFee();\n }\n \n void CTxMemPoolEntry::UpdateState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount)\n {\n     if (!IsDirty()) {\n         nSizeWithDescendants += modifySize;\n         assert(int64_t(nSizeWithDescendants) > 0);\n-        nFeesWithDescendants += modifyFee;\n-        assert(nFeesWithDescendants >= 0);\n+        nModFeesWithDescendants += modifyFee;\n         nCountWithDescendants += modifyCount;\n         assert(int64_t(nCountWithDescendants) > 0);\n     }\n@@ -372,6 +372,17 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     indexed_transaction_set::iterator newit = mapTx.insert(entry).first;\n     mapLinks.insert(make_pair(newit, TxLinks()));\n \n+    // Update transaction for any feeDelta created by PrioritiseTransaction\n+    // TODO: refactor so that the fee delta is calculated before inserting\n+    // into mapTx.\n+    std::map<uint256, std::pair<double, CAmount> >::const_iterator pos = mapDeltas.find(hash);\n+    if (pos != mapDeltas.end()) {\n+        const std::pair<double, CAmount> &deltas = pos->second;\n+        if (deltas.second) {\n+            mapTx.modify(newit, update_fee_delta(deltas.second));\n+        }\n+    }\n+\n     // Update cachedInnerUsage to include contained transaction's usage.\n     // (When we update the entry for in-mempool parents, memory usage will be\n     // further updated.)\n@@ -399,15 +410,6 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     }\n     UpdateAncestorsOf(true, newit, setAncestors);\n \n-    // Update transaction's score for any feeDelta created by PrioritiseTransaction\n-    std::map<uint256, std::pair<double, CAmount> >::const_iterator pos = mapDeltas.find(hash);\n-    if (pos != mapDeltas.end()) {\n-        const std::pair<double, CAmount> &deltas = pos->second;\n-        if (deltas.second) {\n-            mapTx.modify(newit, update_fee_delta(deltas.second));\n-        }\n-    }\n-\n     nTransactionsUpdated++;\n     totalTxSize += entry.GetTxSize();\n     minerPolicyEstimator->processTransaction(entry, fCurrentEstimate);\n@@ -644,27 +646,24 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n         CTxMemPool::setEntries setChildrenCheck;\n         std::map<COutPoint, CInPoint>::const_iterator iter = mapNextTx.lower_bound(COutPoint(it->GetTx().GetHash(), 0));\n         int64_t childSizes = 0;\n-        CAmount childFees = 0;\n+        CAmount childModFee = 0;\n         for (; iter != mapNextTx.end() && iter->first.hash == it->GetTx().GetHash(); ++iter) {\n             txiter childit = mapTx.find(iter->second.ptx->GetHash());\n             assert(childit != mapTx.end()); // mapNextTx points to in-mempool transactions\n             if (setChildrenCheck.insert(childit).second) {\n                 childSizes += childit->GetTxSize();\n-                childFees += childit->GetFee();\n+                childModFee += childit->GetModifiedFee();\n             }\n         }\n         assert(setChildrenCheck == GetMemPoolChildren(it));\n-        // Also check to make sure size/fees is greater than sum with immediate children.\n+        // Also check to make sure size is greater than sum with immediate children.\n         // just a sanity check, not definitive that this calc is correct...\n-        // also check that the size is less than the size of the entire mempool.\n         if (!it->IsDirty()) {\n             assert(it->GetSizeWithDescendants() >= childSizes + it->GetTxSize());\n-            assert(it->GetFeesWithDescendants() >= childFees + it->GetFee());\n         } else {\n             assert(it->GetSizeWithDescendants() == it->GetTxSize());\n-            assert(it->GetFeesWithDescendants() == it->GetFee());\n+            assert(it->GetModFeesWithDescendants() == it->GetModifiedFee());\n         }\n-        assert(it->GetFeesWithDescendants() >= 0);\n \n         if (fDependsWait)\n             waitingOnDependants.push_back(&(*it));\n@@ -788,6 +787,14 @@ void CTxMemPool::PrioritiseTransaction(const uint256 hash, const string strHash,\n         txiter it = mapTx.find(hash);\n         if (it != mapTx.end()) {\n             mapTx.modify(it, update_fee_delta(deltas.second));\n+            // Now update all ancestors' modified fees with descendants\n+            setEntries setAncestors;\n+            uint64_t nNoLimit = std::numeric_limits<uint64_t>::max();\n+            std::string dummy;\n+            CalculateMemPoolAncestors(*it, setAncestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy, false);\n+            BOOST_FOREACH(txiter ancestorIt, setAncestors) {\n+                mapTx.modify(ancestorIt, update_descendant_state(0, nFeeDelta, 0));\n+            }\n         }\n     }\n     LogPrintf(\"PrioritiseTransaction: %s priority += %f, fee += %d\\n\", strHash, dPriorityDelta, FormatMoney(nFeeDelta));\n@@ -956,7 +963,7 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<uint256>* pvNoSpendsRe\n         // \"minimum reasonable fee rate\" (ie some value under which we consider txn\n         // to have 0 fee). This way, we don't allow txn to enter mempool with feerate\n         // equal to txn which were removed with no block in between.\n-        CFeeRate removed(it->GetFeesWithDescendants(), it->GetSizeWithDescendants());\n+        CFeeRate removed(it->GetModFeesWithDescendants(), it->GetSizeWithDescendants());\n         removed += minReasonableRelayFee;\n         trackPackageRemoved(removed);\n         maxFeeRateRemoved = std::max(maxFeeRateRemoved, removed);"
      },
      {
        "sha": "4b726cc902d24009a945f4c1d796de36c95255ad",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 22,
        "deletions": 21,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb306664e786ae43d539fde66f0fbe2a3e89d910/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb306664e786ae43d539fde66f0fbe2a3e89d910/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=eb306664e786ae43d539fde66f0fbe2a3e89d910",
        "patch": "@@ -44,12 +44,12 @@ class CTxMemPool;\n  * (\"descendant\" transactions).\n  *\n  * When a new entry is added to the mempool, we update the descendant state\n- * (nCountWithDescendants, nSizeWithDescendants, and nFeesWithDescendants) for\n+ * (nCountWithDescendants, nSizeWithDescendants, and nModFeesWithDescendants) for\n  * all ancestors of the newly added transaction.\n  *\n  * If updating the descendant state is skipped, we can mark the entry as\n- * \"dirty\", and set nSizeWithDescendants/nFeesWithDescendants to equal nTxSize/\n- * nTxFee. (This can potentially happen during a reorg, where we limit the\n+ * \"dirty\", and set nSizeWithDescendants/nModFeesWithDescendants to equal nTxSize/\n+ * nFee+feeDelta. (This can potentially happen during a reorg, where we limit the\n  * amount of work we're willing to do to avoid consuming too much CPU.)\n  *\n  */\n@@ -74,11 +74,11 @@ class CTxMemPoolEntry\n     // Information about descendants of this transaction that are in the\n     // mempool; if we remove this transaction we must remove all of these\n     // descendants as well.  if nCountWithDescendants is 0, treat this entry as\n-    // dirty, and nSizeWithDescendants and nFeesWithDescendants will not be\n+    // dirty, and nSizeWithDescendants and nModFeesWithDescendants will not be\n     // correct.\n     uint64_t nCountWithDescendants; //! number of descendant transactions\n     uint64_t nSizeWithDescendants;  //! ... and size\n-    CAmount nFeesWithDescendants;  //! ... and total fees (all including us)\n+    CAmount nModFeesWithDescendants;  //! ... and total fees (all including us)\n \n public:\n     CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n@@ -104,7 +104,8 @@ class CTxMemPoolEntry\n \n     // Adjusts the descendant state, if this entry is not dirty.\n     void UpdateState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount);\n-    // Updates the fee delta used for mining priority score\n+    // Updates the fee delta used for mining priority score, and the\n+    // modified fees with descendants.\n     void UpdateFeeDelta(int64_t feeDelta);\n \n     /** We can set the entry to be dirty if doing the full calculation of in-\n@@ -116,7 +117,7 @@ class CTxMemPoolEntry\n \n     uint64_t GetCountWithDescendants() const { return nCountWithDescendants; }\n     uint64_t GetSizeWithDescendants() const { return nSizeWithDescendants; }\n-    CAmount GetFeesWithDescendants() const { return nFeesWithDescendants; }\n+    CAmount GetModFeesWithDescendants() const { return nModFeesWithDescendants; }\n \n     bool GetSpendsCoinbase() const { return spendsCoinbase; }\n };\n@@ -163,39 +164,39 @@ struct mempoolentry_txid\n     }\n };\n \n-/** \\class CompareTxMemPoolEntryByFee\n+/** \\class CompareTxMemPoolEntryByDescendantScore\n  *\n- *  Sort an entry by max(feerate of entry's tx, feerate with all descendants).\n+ *  Sort an entry by max(score/size of entry's tx, score/size with all descendants).\n  */\n-class CompareTxMemPoolEntryByFee\n+class CompareTxMemPoolEntryByDescendantScore\n {\n public:\n     bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b)\n     {\n-        bool fUseADescendants = UseDescendantFeeRate(a);\n-        bool fUseBDescendants = UseDescendantFeeRate(b);\n+        bool fUseADescendants = UseDescendantScore(a);\n+        bool fUseBDescendants = UseDescendantScore(b);\n \n-        double aFees = fUseADescendants ? a.GetFeesWithDescendants() : a.GetFee();\n+        double aModFee = fUseADescendants ? a.GetModFeesWithDescendants() : a.GetModifiedFee();\n         double aSize = fUseADescendants ? a.GetSizeWithDescendants() : a.GetTxSize();\n \n-        double bFees = fUseBDescendants ? b.GetFeesWithDescendants() : b.GetFee();\n+        double bModFee = fUseBDescendants ? b.GetModFeesWithDescendants() : b.GetModifiedFee();\n         double bSize = fUseBDescendants ? b.GetSizeWithDescendants() : b.GetTxSize();\n \n         // Avoid division by rewriting (a/b > c/d) as (a*d > c*b).\n-        double f1 = aFees * bSize;\n-        double f2 = aSize * bFees;\n+        double f1 = aModFee * bSize;\n+        double f2 = aSize * bModFee;\n \n         if (f1 == f2) {\n             return a.GetTime() >= b.GetTime();\n         }\n         return f1 < f2;\n     }\n \n-    // Calculate which feerate to use for an entry (avoiding division).\n-    bool UseDescendantFeeRate(const CTxMemPoolEntry &a)\n+    // Calculate which score to use for an entry (avoiding division).\n+    bool UseDescendantScore(const CTxMemPoolEntry &a)\n     {\n-        double f1 = (double)a.GetFee() * a.GetSizeWithDescendants();\n-        double f2 = (double)a.GetFeesWithDescendants() * a.GetTxSize();\n+        double f1 = (double)a.GetModifiedFee() * a.GetSizeWithDescendants();\n+        double f2 = (double)a.GetModFeesWithDescendants() * a.GetTxSize();\n         return f2 > f1;\n     }\n };\n@@ -350,7 +351,7 @@ class CTxMemPool\n             // sorted by fee rate\n             boost::multi_index::ordered_non_unique<\n                 boost::multi_index::identity<CTxMemPoolEntry>,\n-                CompareTxMemPoolEntryByFee\n+                CompareTxMemPoolEntryByDescendantScore\n             >,\n             // sorted by entry time\n             boost::multi_index::ordered_non_unique<"
      }
    ]
  },
  {
    "sha": "9ef2a25603c9ec4e44c4f45c6a5d4e4386ec86d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZWYyYTI1NjAzYzllYzRlNDRjNGY0NWM2YTVkNGU0Mzg2ZWM4NmQz",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-11-30T21:42:36Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2015-12-02T17:59:30Z"
      },
      "message": "Update replace-by-fee logic to use fee deltas",
      "tree": {
        "sha": "ac68b31c9d8055c9114f6aad0ba38b195bbdb572",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac68b31c9d8055c9114f6aad0ba38b195bbdb572"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ef2a25603c9ec4e44c4f45c6a5d4e4386ec86d3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ef2a25603c9ec4e44c4f45c6a5d4e4386ec86d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ef2a25603c9ec4e44c4f45c6a5d4e4386ec86d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ef2a25603c9ec4e44c4f45c6a5d4e4386ec86d3/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb306664e786ae43d539fde66f0fbe2a3e89d910",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb306664e786ae43d539fde66f0fbe2a3e89d910",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb306664e786ae43d539fde66f0fbe2a3e89d910"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 89,
      "deletions": 9
    },
    "files": [
      {
        "sha": "734db33b5125d71da4064c058d4cc9dfaa86817c",
        "filename": "qa/rpc-tests/replace-by-fee.py",
        "status": "modified",
        "additions": 78,
        "deletions": 2,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ef2a25603c9ec4e44c4f45c6a5d4e4386ec86d3/qa/rpc-tests/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ef2a25603c9ec4e44c4f45c6a5d4e4386ec86d3/qa/rpc-tests/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/replace-by-fee.py?ref=9ef2a25603c9ec4e44c4f45c6a5d4e4386ec86d3",
        "patch": "@@ -63,16 +63,22 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n \n     # If requested, ensure txouts are confirmed.\n     if confirmed:\n-        while len(node.getrawmempool()):\n+        mempool_size = len(node.getrawmempool())\n+        while mempool_size > 0:\n             node.generate(1)\n+            new_size = len(node.getrawmempool())\n+            # Error out if we have something stuck in the mempool, as this\n+            # would likely be a bug.\n+            assert(new_size < mempool_size)\n+            mempool_size = new_size\n \n     return COutPoint(int(txid, 16), 0)\n \n class ReplaceByFeeTest(BitcoinTestFramework):\n \n     def setup_network(self):\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-maxorphantx=1000\",\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-maxorphantx=1000\", \"-debug\",\n                                                               \"-relaypriority=0\", \"-whitelist=127.0.0.1\",\n                                                               \"-limitancestorcount=50\",\n                                                               \"-limitancestorsize=101\",\n@@ -108,6 +114,9 @@ def run_test(self):\n         print \"Running test opt-in...\"\n         self.test_opt_in()\n \n+        print \"Running test prioritised transactions...\"\n+        self.test_prioritised_transactions()\n+\n         print \"Passed\\n\"\n \n     def test_simple_doublespend(self):\n@@ -513,5 +522,72 @@ def test_opt_in(self):\n         # but make sure it is accepted anyway\n         self.nodes[0].sendrawtransaction(tx3c_hex, True)\n \n+    def test_prioritised_transactions(self):\n+        # Ensure that fee deltas used via prioritisetransaction are\n+        # correctly used by replacement logic\n+\n+        # 1. Check that feeperkb uses modified fees\n+        tx0_outpoint = make_utxo(self.nodes[0], 1.1*COIN)\n+\n+        tx1a = CTransaction()\n+        tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n+        tx1a.vout = [CTxOut(1*COIN, CScript([b'a']))]\n+        tx1a_hex = txToHex(tx1a)\n+        tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, True)\n+\n+        # Higher fee, but the actual fee per KB is much lower.\n+        tx1b = CTransaction()\n+        tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n+        tx1b.vout = [CTxOut(0.001*COIN, CScript([b'a'*740000]))]\n+        tx1b_hex = txToHex(tx1b)\n+\n+        # Verify tx1b cannot replace tx1a.\n+        try:\n+            tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, True)\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error['code'], -26)\n+        else:\n+            assert(False)\n+\n+        # Use prioritisetransaction to set tx1a's fee to 0.\n+        self.nodes[0].prioritisetransaction(tx1a_txid, 0, int(-0.1*COIN))\n+\n+        # Now tx1b should be able to replace tx1a\n+        tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, True)\n+\n+        assert(tx1b_txid in self.nodes[0].getrawmempool())\n+\n+        # 2. Check that absolute fee checks use modified fee.\n+        tx1_outpoint = make_utxo(self.nodes[0], 1.1*COIN)\n+\n+        tx2a = CTransaction()\n+        tx2a.vin = [CTxIn(tx1_outpoint, nSequence=0)]\n+        tx2a.vout = [CTxOut(1*COIN, CScript([b'a']))]\n+        tx2a_hex = txToHex(tx2a)\n+        tx2a_txid = self.nodes[0].sendrawtransaction(tx2a_hex, True)\n+\n+        # Lower fee, but we'll prioritise it\n+        tx2b = CTransaction()\n+        tx2b.vin = [CTxIn(tx1_outpoint, nSequence=0)]\n+        tx2b.vout = [CTxOut(1.01*COIN, CScript([b'a']))]\n+        tx2b.rehash()\n+        tx2b_hex = txToHex(tx2b)\n+\n+        # Verify tx2b cannot replace tx2a.\n+        try:\n+            tx2b_txid = self.nodes[0].sendrawtransaction(tx2b_hex, True)\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error['code'], -26)\n+        else:\n+            assert(False)\n+\n+        # Now prioritise tx2b to have a higher modified fee\n+        self.nodes[0].prioritisetransaction(tx2b.hash, 0, int(0.1*COIN))\n+\n+        # tx2b should now be accepted\n+        tx2b_txid = self.nodes[0].sendrawtransaction(tx2b_hex, True)\n+\n+        assert(tx2b_txid in self.nodes[0].getrawmempool())\n+\n if __name__ == '__main__':\n     ReplaceByFeeTest().main()"
      },
      {
        "sha": "23df8ca6896eec27d627e133ae09b339cde0e8dc",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ef2a25603c9ec4e44c4f45c6a5d4e4386ec86d3/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ef2a25603c9ec4e44c4f45c6a5d4e4386ec86d3/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9ef2a25603c9ec4e44c4f45c6a5d4e4386ec86d3",
        "patch": "@@ -1061,13 +1061,17 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n         uint64_t nConflictingCount = 0;\n         CTxMemPool::setEntries allConflicting;\n \n+        CAmount nModifiedFees = nFees;\n+        double nPriorityDummy = 0;\n+        pool.ApplyDeltas(hash, nPriorityDummy, nModifiedFees);\n+\n         // If we don't hold the lock allConflicting might be incomplete; the\n         // subsequent RemoveStaged() and addUnchecked() calls don't guarantee\n         // mempool consistency for us.\n         LOCK(pool.cs);\n         if (setConflicts.size())\n         {\n-            CFeeRate newFeeRate(nFees, nSize);\n+            CFeeRate newFeeRate(nModifiedFees, nSize);\n             set<uint256> setConflictsParents;\n             const int maxDescendantsToVisit = 100;\n             CTxMemPool::setEntries setIterConflicting;\n@@ -1110,7 +1114,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n                 // ignored when deciding whether or not to replace, we do\n                 // require the replacement to pay more overall fees too,\n                 // mitigating most cases.\n-                CFeeRate oldFeeRate(mi->GetFee(), mi->GetTxSize());\n+                CFeeRate oldFeeRate(mi->GetModifiedFee(), mi->GetTxSize());\n                 if (newFeeRate <= oldFeeRate)\n                 {\n                     return state.DoS(0,\n@@ -1138,7 +1142,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n                     pool.CalculateDescendants(it, allConflicting);\n                 }\n                 BOOST_FOREACH(CTxMemPool::txiter it, allConflicting) {\n-                    nConflictingFees += it->GetFee();\n+                    nConflictingFees += it->GetModifiedFee();\n                     nConflictingSize += it->GetTxSize();\n                 }\n             } else {\n@@ -1171,16 +1175,16 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n             // The replacement must pay greater fees than the transactions it\n             // replaces - if we did the bandwidth used by those conflicting\n             // transactions would not be paid for.\n-            if (nFees < nConflictingFees)\n+            if (nModifiedFees < nConflictingFees)\n             {\n                 return state.DoS(0, error(\"AcceptToMemoryPool: rejecting replacement %s, less fees than conflicting txs; %s < %s\",\n-                                          hash.ToString(), FormatMoney(nFees), FormatMoney(nConflictingFees)),\n+                                          hash.ToString(), FormatMoney(nModifiedFees), FormatMoney(nConflictingFees)),\n                                  REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n             }\n \n             // Finally in addition to paying more fees than the conflicts the\n             // new transaction must pay for its own bandwidth.\n-            CAmount nDeltaFees = nFees - nConflictingFees;\n+            CAmount nDeltaFees = nModifiedFees - nConflictingFees;\n             if (nDeltaFees < ::minRelayTxFee.GetFee(nSize))\n             {\n                 return state.DoS(0,\n@@ -1218,7 +1222,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n             LogPrint(\"mempool\", \"replacing tx %s with %s for %s BTC additional fees, %d delta bytes\\n\",\n                     it->GetTx().GetHash().ToString(),\n                     hash.ToString(),\n-                    FormatMoney(nFees - nConflictingFees),\n+                    FormatMoney(nModifiedFees - nConflictingFees),\n                     (int)nSize - (int)nConflictingSize);\n         }\n         pool.RemoveStaged(allConflicting);"
      }
    ]
  },
  {
    "sha": "27fae3484cdb21b0d24face833b966fce5926be5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyN2ZhZTM0ODRjZGIyMWIwZDI0ZmFjZTgzM2I5NjZmY2U1OTI2YmU1",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2015-12-02T14:37:18Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2015-12-02T17:59:30Z"
      },
      "message": "Use fee deltas for determining mempool acceptance",
      "tree": {
        "sha": "f7fac7661597973c4b40d9749dcb23dc82e56eb6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7fac7661597973c4b40d9749dcb23dc82e56eb6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27fae3484cdb21b0d24face833b966fce5926be5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27fae3484cdb21b0d24face833b966fce5926be5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27fae3484cdb21b0d24face833b966fce5926be5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27fae3484cdb21b0d24face833b966fce5926be5/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ef2a25603c9ec4e44c4f45c6a5d4e4386ec86d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ef2a25603c9ec4e44c4f45c6a5d4e4386ec86d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ef2a25603c9ec4e44c4f45c6a5d4e4386ec86d3"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 51,
      "deletions": 7
    },
    "files": [
      {
        "sha": "d9492f27a40858ed0a9074e238d9319093bb573d",
        "filename": "qa/rpc-tests/prioritise_transaction.py",
        "status": "modified",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27fae3484cdb21b0d24face833b966fce5926be5/qa/rpc-tests/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27fae3484cdb21b0d24face833b966fce5926be5/qa/rpc-tests/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/prioritise_transaction.py?ref=27fae3484cdb21b0d24face833b966fce5926be5",
        "patch": "@@ -143,5 +143,45 @@ def run_test(self):\n             if (x != high_fee_tx):\n                 assert(x not in mempool)\n \n+        # Create a free, low priority transaction.  Should be rejected.\n+        utxo_list = self.nodes[0].listunspent()\n+        assert(len(utxo_list) > 0)\n+        utxo = utxo_list[0]\n+\n+        inputs = []\n+        outputs = {}\n+        inputs.append({\"txid\" : utxo[\"txid\"], \"vout\" : utxo[\"vout\"]})\n+        outputs[self.nodes[0].getnewaddress()] = utxo[\"amount\"] - self.relayfee\n+        raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        tx_hex = self.nodes[0].signrawtransaction(raw_tx)[\"hex\"]\n+        txid = self.nodes[0].sendrawtransaction(tx_hex)\n+\n+        # A tx that spends an in-mempool tx has 0 priority, so we can use it to\n+        # test the effect of using prioritise transaction for mempool acceptance\n+        inputs = []\n+        inputs.append({\"txid\": txid, \"vout\": 0})\n+        outputs = {}\n+        outputs[self.nodes[0].getnewaddress()] = utxo[\"amount\"] - self.relayfee\n+        raw_tx2 = self.nodes[0].createrawtransaction(inputs, outputs)\n+        tx2_hex = self.nodes[0].signrawtransaction(raw_tx2)[\"hex\"]\n+        tx2_id = self.nodes[0].decoderawtransaction(tx2_hex)[\"txid\"]\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(tx2_hex)\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error['code'], -26) # insufficient fee\n+            assert(tx2_id not in self.nodes[0].getrawmempool())\n+        else:\n+            assert(False)\n+\n+        # This is a less than 1000-byte transaction, so just set the fee\n+        # to be the minimum for a 1000 byte transaction and check that it is\n+        # accepted.\n+        self.nodes[0].prioritisetransaction(tx2_id, 0, int(self.relayfee*COIN))\n+\n+        print \"Assert that prioritised free transaction is accepted to mempool\"\n+        assert_equal(self.nodes[0].sendrawtransaction(tx2_hex), tx2_id)\n+        assert(tx2_id in self.nodes[0].getrawmempool())\n+\n if __name__ == '__main__':\n     PrioritiseTransactionTest().main()"
      },
      {
        "sha": "12642f3196685a4da9cf62e4e600b87f2090d956",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27fae3484cdb21b0d24face833b966fce5926be5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27fae3484cdb21b0d24face833b966fce5926be5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=27fae3484cdb21b0d24face833b966fce5926be5",
        "patch": "@@ -968,6 +968,11 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n \n         CAmount nValueOut = tx.GetValueOut();\n         CAmount nFees = nValueIn-nValueOut;\n+        // nModifiedFees includes any fee deltas from PrioritiseTransaction\n+        CAmount nModifiedFees = nFees;\n+        double nPriorityDummy = 0;\n+        pool.ApplyDeltas(hash, nPriorityDummy, nModifiedFees);\n+\n         CAmount inChainInputValue;\n         double dPriority = view.GetPriority(tx, chainActive.Height(), inChainInputValue);\n \n@@ -987,22 +992,25 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n \n         // Don't accept it if it can't get into a block\n         CAmount txMinFee = GetMinRelayFee(tx, pool, nSize, true);\n+\n+        // txMinFee takes into account priority/fee deltas, so compare using\n+        // nFees rather than nModifiedFees\n         if (fLimitFree && nFees < txMinFee)\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient fee\", false,\n                 strprintf(\"%d < %d\", nFees, txMinFee));\n \n         CAmount mempoolRejectFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n-        if (mempoolRejectFee > 0 && nFees < mempoolRejectFee) {\n+        if (mempoolRejectFee > 0 && nModifiedFees < mempoolRejectFee) {\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n-        } else if (GetBoolArg(\"-relaypriority\", DEFAULT_RELAYPRIORITY) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(entry.GetPriority(chainActive.Height() + 1))) {\n+        } else if (GetBoolArg(\"-relaypriority\", DEFAULT_RELAYPRIORITY) && nModifiedFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(entry.GetPriority(chainActive.Height() + 1))) {\n             // Require that free transactions have sufficient priority to be mined in the next block.\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n         }\n \n         // Continuously rate-limit free (really, very-low-fee) transactions\n         // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n         // be annoying or make others' transactions take longer to confirm.\n-        if (fLimitFree && nFees < ::minRelayTxFee.GetFee(nSize))\n+        if (fLimitFree && nModifiedFees < ::minRelayTxFee.GetFee(nSize))\n         {\n             static CCriticalSection csFreeLimiter;\n             static double dFreeCount;\n@@ -1061,10 +1069,6 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n         uint64_t nConflictingCount = 0;\n         CTxMemPool::setEntries allConflicting;\n \n-        CAmount nModifiedFees = nFees;\n-        double nPriorityDummy = 0;\n-        pool.ApplyDeltas(hash, nPriorityDummy, nModifiedFees);\n-\n         // If we don't hold the lock allConflicting might be incomplete; the\n         // subsequent RemoveStaged() and addUnchecked() calls don't guarantee\n         // mempool consistency for us."
      }
    ]
  },
  {
    "sha": "901b01d674031f9aca717deeb372bafa160a24af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDFiMDFkNjc0MDMxZjlhY2E3MTdkZWViMzcyYmFmYTE2MGEyNGFm",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2015-12-02T16:04:15Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2015-12-02T17:59:30Z"
      },
      "message": "Remove GetMinRelayFee\n\nOne test in AcceptToMemoryPool was to compare a transaction's fee\nagains the value returned by GetMinRelayFee. This value was zero for\nall small transactions.  For larger transactions (between\nDEFAULT_BLOCK_PRIORITY_SIZE and MAX_STANDARD_TX_SIZE), this function\nwas preventing low fee transactions from ever being accepted.\n\nWith this function removed, we will now allow transactions in that range\nwith fees (including modifications via PrioritiseTransaction) below\nthe minRelayTxFee, provided that they have sufficient priority.",
      "tree": {
        "sha": "0b7c26545730cb10c9887e694a50ad359fb13d44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b7c26545730cb10c9887e694a50ad359fb13d44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/901b01d674031f9aca717deeb372bafa160a24af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/901b01d674031f9aca717deeb372bafa160a24af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/901b01d674031f9aca717deeb372bafa160a24af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/901b01d674031f9aca717deeb372bafa160a24af/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27fae3484cdb21b0d24face833b966fce5926be5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27fae3484cdb21b0d24face833b966fce5926be5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27fae3484cdb21b0d24face833b966fce5926be5"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 0,
      "deletions": 37
    },
    "files": [
      {
        "sha": "9363015a5a66075503f9ed448c800ac14ee22129",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 35,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/901b01d674031f9aca717deeb372bafa160a24af/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/901b01d674031f9aca717deeb372bafa160a24af/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=901b01d674031f9aca717deeb372bafa160a24af",
        "patch": "@@ -800,32 +800,6 @@ void LimitMempoolSize(CTxMemPool& pool, size_t limit, unsigned long age) {\n         pcoinsTip->Uncache(removed);\n }\n \n-CAmount GetMinRelayFee(const CTransaction& tx, const CTxMemPool& pool, unsigned int nBytes, bool fAllowFree)\n-{\n-    uint256 hash = tx.GetHash();\n-    double dPriorityDelta = 0;\n-    CAmount nFeeDelta = 0;\n-    pool.ApplyDeltas(hash, dPriorityDelta, nFeeDelta);\n-    if (dPriorityDelta > 0 || nFeeDelta > 0)\n-        return 0;\n-\n-    CAmount nMinFee = ::minRelayTxFee.GetFee(nBytes);\n-\n-    if (fAllowFree)\n-    {\n-        // There is a free transaction area in blocks created by most miners,\n-        // * If we are relaying we allow transactions up to DEFAULT_BLOCK_PRIORITY_SIZE - 1000\n-        //   to be considered to fall into this category. We don't want to encourage sending\n-        //   multiple transactions instead of one big transaction to avoid fees.\n-        if (nBytes < (DEFAULT_BLOCK_PRIORITY_SIZE - 1000))\n-            nMinFee = 0;\n-    }\n-\n-    if (!MoneyRange(nMinFee))\n-        nMinFee = MAX_MONEY;\n-    return nMinFee;\n-}\n-\n /** Convert CValidationState to a human-readable message for logging */\n std::string FormatStateMessage(const CValidationState &state)\n {\n@@ -990,15 +964,6 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue, fSpendsCoinbase, nSigOps);\n         unsigned int nSize = entry.GetTxSize();\n \n-        // Don't accept it if it can't get into a block\n-        CAmount txMinFee = GetMinRelayFee(tx, pool, nSize, true);\n-\n-        // txMinFee takes into account priority/fee deltas, so compare using\n-        // nFees rather than nModifiedFees\n-        if (fLimitFree && nFees < txMinFee)\n-            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient fee\", false,\n-                strprintf(\"%d < %d\", nFees, txMinFee));\n-\n         CAmount mempoolRejectFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n         if (mempoolRejectFee > 0 && nModifiedFees < mempoolRejectFee) {\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));"
      },
      {
        "sha": "d813f01ba789ca15aad323bdbe46a2ed72a7f559",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/901b01d674031f9aca717deeb372bafa160a24af/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/901b01d674031f9aca717deeb372bafa160a24af/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=901b01d674031f9aca717deeb372bafa160a24af",
        "patch": "@@ -293,8 +293,6 @@ struct CDiskTxPos : public CDiskBlockPos\n };\n \n \n-CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree);\n-\n /** \n  * Count ECDSA signature operations the old-fashioned (pre-0.6) way\n  * @return number of sigops this transaction's outputs will produce when spent"
      }
    ]
  }
]