[
  {
    "sha": "faa8d9581affde35a8242c63fca8a52004d4f943",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWE4ZDk1ODFhZmZkZTM1YTgyNDJjNjNmY2E4YTUyMDA0ZDRmOTQz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-08-16T15:52:24Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-06T16:41:21Z"
      },
      "message": "[qa] TestNode: Add wait_until_stopped helper method",
      "tree": {
        "sha": "20cb6a1f016bffae3846df2484424dd1ce5d0efa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20cb6a1f016bffae3846df2484424dd1ce5d0efa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa8d9581affde35a8242c63fca8a52004d4f943",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa8d9581affde35a8242c63fca8a52004d4f943",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa8d9581affde35a8242c63fca8a52004d4f943",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa8d9581affde35a8242c63fca8a52004d4f943/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "777519bd96f68c18150a0f5942f8f97a91937f5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/777519bd96f68c18150a0f5942f8f97a91937f5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/777519bd96f68c18150a0f5942f8f97a91937f5e"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 24,
      "deletions": 22
    },
    "files": [
      {
        "sha": "50be9262e4f9cf9b95a2c397c11c55dc5905d817",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa8d9581affde35a8242c63fca8a52004d4f943/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa8d9581affde35a8242c63fca8a52004d4f943/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=faa8d9581affde35a8242c63fca8a52004d4f943",
        "patch": "@@ -21,7 +21,7 @@\n import http.client\n import subprocess\n \n-from test_framework.test_framework import (BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT)\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_raises,\n@@ -141,7 +141,7 @@ def _test_stopatheight(self):\n         except (ConnectionError, http.client.BadStatusLine):\n             pass  # The node already shut down before response\n         self.log.debug('Node should stop at this height...')\n-        self.nodes[0].process.wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+        self.nodes[0].wait_until_stopped()\n         self.start_node(0)\n         assert_equal(self.nodes[0].getblockcount(), 207)\n "
      },
      {
        "sha": "71e88009b6e3c29e84f763bbe199fae25fdb5be1",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa8d9581affde35a8242c63fca8a52004d4f943/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa8d9581affde35a8242c63fca8a52004d4f943/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=faa8d9581affde35a8242c63fca8a52004d4f943",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the fundrawtransaction RPC.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n "
      },
      {
        "sha": "a53eb517998dcdb22db84d6a561f475d15572217",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa8d9581affde35a8242c63fca8a52004d4f943/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa8d9581affde35a8242c63fca8a52004d4f943/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=faa8d9581affde35a8242c63fca8a52004d4f943",
        "patch": "@@ -43,8 +43,6 @@ class TestStatus(Enum):\n TEST_EXIT_FAILED = 1\n TEST_EXIT_SKIPPED = 77\n \n-BITCOIND_PROC_WAIT_TIMEOUT = 60\n-\n class BitcoinTestFramework(object):\n     \"\"\"Base class for a bitcoin test script.\n \n@@ -263,8 +261,7 @@ def start_nodes(self, extra_args=None):\n     def stop_node(self, i):\n         \"\"\"Stop a bitcoind test node\"\"\"\n         self.nodes[i].stop_node()\n-        while not self.nodes[i].is_node_stopped():\n-            time.sleep(0.1)\n+        self.nodes[i].wait_until_stopped()\n \n     def stop_nodes(self):\n         \"\"\"Stop multiple bitcoind test nodes\"\"\"\n@@ -274,8 +271,7 @@ def stop_nodes(self):\n \n         for node in self.nodes:\n             # Wait for nodes to stop\n-            while not node.is_node_stopped():\n-                time.sleep(0.1)\n+            node.wait_until_stopped()\n \n     def assert_start_raises_init_error(self, i, extra_args=None, expected_msg=None):\n         with tempfile.SpooledTemporaryFile(max_size=2**16) as log_stderr:"
      },
      {
        "sha": "f58a372a144a0f5748d8dd1cb4ca1464f59537fd",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 18,
        "deletions": 12,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa8d9581affde35a8242c63fca8a52004d4f943/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa8d9581affde35a8242c63fca8a52004d4f943/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=faa8d9581affde35a8242c63fca8a52004d4f943",
        "patch": "@@ -17,9 +17,12 @@\n     assert_equal,\n     get_rpc_proxy,\n     rpc_url,\n+    wait_until,\n )\n from .authproxy import JSONRPCException\n \n+BITCOIND_PROC_WAIT_TIMEOUT = 60\n+\n class TestNode():\n     \"\"\"A class for representing a bitcoind node under test.\n \n@@ -125,25 +128,28 @@ def is_node_stopped(self):\n         if not self.running:\n             return True\n         return_code = self.process.poll()\n-        if return_code is not None:\n-            # process has stopped. Assert that it didn't return an error code.\n-            assert_equal(return_code, 0)\n-            self.running = False\n-            self.process = None\n-            self.log.debug(\"Node stopped\")\n-            return True\n-        return False\n+        if return_code is None:\n+            return False\n+\n+        # process has stopped. Assert that it didn't return an error code.\n+        assert_equal(return_code, 0)\n+        self.running = False\n+        self.process = None\n+        self.rpc_connected = False\n+        self.rpc = None\n+        self.log.debug(\"Node stopped\")\n+        return True\n+\n+    def wait_until_stopped(self, timeout=BITCOIND_PROC_WAIT_TIMEOUT):\n+        wait_until(self.is_node_stopped, timeout=timeout)\n \n     def node_encrypt_wallet(self, passphrase):\n         \"\"\"\"Encrypts the wallet.\n \n         This causes bitcoind to shutdown, so this method takes\n         care of cleaning up resources.\"\"\"\n         self.encryptwallet(passphrase)\n-        while not self.is_node_stopped():\n-            time.sleep(0.1)\n-        self.rpc = None\n-        self.rpc_connected = False\n+        self.wait_until_stopped()\n \n class TestNodeCLI():\n     \"\"\"Interface to bitcoin-cli for an individual node\"\"\""
      },
      {
        "sha": "ce1e7744e903fe60062413ac106ee3248bd77175",
        "filename": "test/functional/wallet-encryption.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa8d9581affde35a8242c63fca8a52004d4f943/test/functional/wallet-encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa8d9581affde35a8242c63fca8a52004d4f943/test/functional/wallet-encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-encryption.py?ref=faa8d9581affde35a8242c63fca8a52004d4f943",
        "patch": "@@ -6,7 +6,7 @@\n \n import time\n \n-from test_framework.test_framework import BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_raises_jsonrpc,"
      }
    ]
  }
]