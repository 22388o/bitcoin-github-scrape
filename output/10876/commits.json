[
  {
    "sha": "0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYTVhNmI5MGJjNzVhOGQ3NWZkZmY3MWM5YjA4YWJlOWIwYjk2YjBh",
    "commit": {
      "author": {
        "name": "Dimitris Tsapakidis",
        "email": "dimitris@tsapakidis.com",
        "date": "2017-06-19T22:57:31Z"
      },
      "committer": {
        "name": "Dimitris Tsapakidis",
        "email": "dimitris@tsapakidis.com",
        "date": "2017-06-22T16:18:10Z"
      },
      "message": "Fixed multiple typos\n\nA few \"a->an\" and \"an->a\".\n\"Shows, if the supplied default SOCKS5 proxy\" -> \"Shows if the supplied default SOCKS5 proxy\". Change made on 3 occurrences.\n\"without fully understanding the ramification of a command\" -> \"without fully understanding the ramifications of a command\".\nRemoved duplicate words such as \"the the\".",
      "tree": {
        "sha": "fed3c77d7bdbe735ca127c017e85db94506f3204",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fed3c77d7bdbe735ca127c017e85db94506f3204"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/comments",
    "author": {
      "login": "dimitris-t",
      "id": 8949706,
      "node_id": "MDQ6VXNlcjg5NDk3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8949706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dimitris-t",
      "html_url": "https://github.com/dimitris-t",
      "followers_url": "https://api.github.com/users/dimitris-t/followers",
      "following_url": "https://api.github.com/users/dimitris-t/following{/other_user}",
      "gists_url": "https://api.github.com/users/dimitris-t/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dimitris-t/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dimitris-t/subscriptions",
      "organizations_url": "https://api.github.com/users/dimitris-t/orgs",
      "repos_url": "https://api.github.com/users/dimitris-t/repos",
      "events_url": "https://api.github.com/users/dimitris-t/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dimitris-t/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dimitris-t",
      "id": 8949706,
      "node_id": "MDQ6VXNlcjg5NDk3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8949706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dimitris-t",
      "html_url": "https://github.com/dimitris-t",
      "followers_url": "https://api.github.com/users/dimitris-t/followers",
      "following_url": "https://api.github.com/users/dimitris-t/following{/other_user}",
      "gists_url": "https://api.github.com/users/dimitris-t/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dimitris-t/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dimitris-t/subscriptions",
      "organizations_url": "https://api.github.com/users/dimitris-t/orgs",
      "repos_url": "https://api.github.com/users/dimitris-t/repos",
      "events_url": "https://api.github.com/users/dimitris-t/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dimitris-t/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c38f540298f0e188df5ed68fd56c623b9ac8331b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c38f540298f0e188df5ed68fd56c623b9ac8331b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c38f540298f0e188df5ed68fd56c623b9ac8331b"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 60,
      "deletions": 60
    },
    "files": [
      {
        "sha": "4ab2f356803a8933edd1fe7b573533281ef7c1f2",
        "filename": "contrib/rpm/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/contrib/rpm/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/contrib/rpm/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/rpm/README.md?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -181,5 +181,5 @@ knows what they are getting when installing the GUI package.\n \n As far as minor differences, I generally prefer to assign the file permissions\n in the `%files` portion of an RPM spec file rather than specifying the\n-permissions of a file during `%install` and other minor things like that that\n+permissions of a file during `%install` and other minor things like that\n are largely just cosmetic."
      },
      {
        "sha": "b206866cc5eb4abc3075f8692637a7096d7f0b0e",
        "filename": "contrib/rpm/bitcoin.if",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/contrib/rpm/bitcoin.if",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/contrib/rpm/bitcoin.if",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/rpm/bitcoin.if?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -121,7 +121,7 @@ interface(`bitcoin_manage_lib_dirs',`\n ########################################\n ## <summary>\n ##\tAll of the rules required to administrate\n-##\tan bitcoin environment\n+##\ta bitcoin environment\n ## </summary>\n ## <param name=\"domain\">\n ##\t<summary>"
      },
      {
        "sha": "a7fb4b4da13d168248ca921cb6339670fbb65cf4",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -287,7 +287,7 @@ General C++\n \n - Assertions should not have side-effects\n \n-  - *Rationale*: Even though the source code is set to to refuse to compile\n+  - *Rationale*: Even though the source code is set to refuse to compile\n     with assertions disabled, having side-effects in assertions is unexpected and\n     makes the code harder to understand\n "
      },
      {
        "sha": "8d4c4e7deab8088c2c7a6bad866106670bd098d1",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -126,7 +126,7 @@ arith_uint256 GetBlockProof(const CBlockIndex& block)\n     if (fNegative || fOverflow || bnTarget == 0)\n         return 0;\n     // We need to compute 2**256 / (bnTarget+1), but we can't represent 2**256\n-    // as it's too large for a arith_uint256. However, as 2**256 is at least as large\n+    // as it's too large for an arith_uint256. However, as 2**256 is at least as large\n     // as bnTarget+1, it is equal to ((2**256 - bnTarget - 1) / (bnTarget+1)) + 1,\n     // or ~bnTarget / (nTarget+1) + 1.\n     return (~bnTarget / (bnTarget + 1)) + 1;"
      },
      {
        "sha": "2e66901b3504b8cc8c5c068c07a781caebf8534d",
        "filename": "src/cuckoocache.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/cuckoocache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/cuckoocache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cuckoocache.h?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -176,15 +176,15 @@ class cache\n      */\n     mutable std::vector<bool> epoch_flags;\n \n-    /** epoch_heuristic_counter is used to determine when a epoch might be aged\n+    /** epoch_heuristic_counter is used to determine when an epoch might be aged\n      * & an expensive scan should be done.  epoch_heuristic_counter is\n      * decremented on insert and reset to the new number of inserts which would\n      * cause the epoch to reach epoch_size when it reaches zero.\n      */\n     uint32_t epoch_heuristic_counter;\n \n     /** epoch_size is set to be the number of elements supposed to be in a\n-     * epoch. When the number of non-erased elements in a epoch\n+     * epoch. When the number of non-erased elements in an epoch\n      * exceeds epoch_size, a new epoch should be started and all\n      * current entries demoted. epoch_size is set to be 45% of size because\n      * we want to keep load around 90%, and we support 3 epochs at once --"
      },
      {
        "sha": "9df56e5fc554926db46af8efcb47dba7869a403f",
        "filename": "src/httpserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -86,7 +86,7 @@ class HTTPRequest\n \n     /**\n      * Get the request header specified by hdr, or an empty string.\n-     * Return an pair (isPresent,string).\n+     * Return a pair (isPresent,string).\n      */\n     std::pair<bool, std::string> GetHeader(const std::string& hdr);\n \n@@ -125,7 +125,7 @@ class HTTPClosure\n     virtual ~HTTPClosure() {}\n };\n \n-/** Event class. This can be used either as an cross-thread trigger or as a timer.\n+/** Event class. This can be used either as a cross-thread trigger or as a timer.\n  */\n class HTTPEvent\n {"
      },
      {
        "sha": "7935a965a7c9fdd62533a8c13c9b6033675066df",
        "filename": "src/leveldb/db/version_set.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/leveldb/db/version_set.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/leveldb/db/version_set.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/version_set.h?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -376,7 +376,7 @@ class Compaction {\n   // Each compaction reads inputs from \"level_\" and \"level_+1\"\n   std::vector<FileMetaData*> inputs_[2];      // The two sets of inputs\n \n-  // State used to check for number of of overlapping grandparent files\n+  // State used to check for number of overlapping grandparent files\n   // (parent == level_ + 1, grandparent == level_ + 2)\n   std::vector<FileMetaData*> grandparents_;\n   size_t grandparent_index_;  // Index in grandparent_starts_"
      },
      {
        "sha": "2029ce37448eb67554db29abd4bdfad833e50b28",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -48,7 +48,7 @@ class TxConfirmStats;\n  * in each bucket and the total amount of feerate paid in each bucket. Then we\n  * calculate how many blocks Y it took each transaction to be mined.  We convert\n  * from a number of blocks to a number of periods Y' each encompassing \"scale\"\n- * blocks.  This is is tracked in 3 different data sets each up to a maximum\n+ * blocks.  This is tracked in 3 different data sets each up to a maximum\n  * number of periods. Within each data set we have an array of counters in each\n  * feerate bucket and we increment all the counters from Y' up to max periods\n  * representing that a tx was successfully confirmed in less than or equal to"
      },
      {
        "sha": "3dfb51ccfa515504c7f4ceb8374d47d2b0ec02d0",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -303,7 +303,7 @@ static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, const CB\n     }\n     // if we are in-sync, update the UI regardless of last update time\n     if (!initialSync || now - nLastUpdateNotification > MODEL_UPDATE_DELAY) {\n-        //pass a async signal to the UI thread\n+        //pass an async signal to the UI thread\n         QMetaObject::invokeMethod(clientmodel, \"numBlocksChanged\", Qt::QueuedConnection,\n                                   Q_ARG(int, pIndex->nHeight),\n                                   Q_ARG(QDateTime, QDateTime::fromTime_t(pIndex->GetBlockTime())),"
      },
      {
        "sha": "b1d48a92f7eb6905a6638295e8397524dc9d5f1c",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -499,7 +499,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         {\n             // there is some fudging in these numbers related to the actual virtual transaction size calculation that will keep this estimate from being exact.\n             // usually, the result will be an overestimate within a couple of satoshis so that the confirmation dialog ends up displaying a slightly smaller fee.\n-            // also, the witness stack size value value is a variable sized integer. usually, the number of stack items will be well under the single byte var int limit.\n+            // also, the witness stack size value is a variable sized integer. usually, the number of stack items will be well under the single byte var int limit.\n             nBytes += 2; // account for the serialized marker and flag bytes\n             nBytes += nQuantity; // account for the witness byte that holds the number of stack items for each input.\n         }"
      },
      {
        "sha": "14078b9ee810503a326b2d212d001e1777c8316c",
        "filename": "src/qt/forms/optionsdialog.ui",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/qt/forms/optionsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/qt/forms/optionsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/optionsdialog.ui?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -315,7 +315,7 @@\n             <bool>false</bool>\n            </property>\n            <property name=\"toolTip\">\n-            <string>Shows, if the supplied default SOCKS5 proxy is used to reach peers via this network type.</string>\n+            <string>Shows if the supplied default SOCKS5 proxy is used to reach peers via this network type.</string>\n            </property>\n            <property name=\"text\">\n             <string/>\n@@ -338,7 +338,7 @@\n             <bool>false</bool>\n            </property>\n            <property name=\"toolTip\">\n-            <string>Shows, if the supplied default SOCKS5 proxy is used to reach peers via this network type.</string>\n+            <string>Shows if the supplied default SOCKS5 proxy is used to reach peers via this network type.</string>\n            </property>\n            <property name=\"text\">\n             <string/>\n@@ -361,7 +361,7 @@\n             <bool>false</bool>\n            </property>\n            <property name=\"toolTip\">\n-            <string>Shows, if the supplied default SOCKS5 proxy is used to reach peers via this network type.</string>\n+            <string>Shows if the supplied default SOCKS5 proxy is used to reach peers via this network type.</string>\n            </property>\n            <property name=\"text\">\n             <string/>"
      },
      {
        "sha": "a83f285034fdb8b30330800c28e5913fc6b42fd4",
        "filename": "src/qt/modaloverlay.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/qt/modaloverlay.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/qt/modaloverlay.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.cpp?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -126,7 +126,7 @@ void ModalOverlay::tipUpdate(int count, const QDateTime& blockDate, double nVeri\n         return;\n \n     // estimate the number of headers left based on nPowTargetSpacing\n-    // and check if the gui is not aware of the the best header (happens rarely)\n+    // and check if the gui is not aware of the best header (happens rarely)\n     int estimateNumHeadersLeft = bestHeaderDate.secsTo(currentDate) / Params().GetConsensus().nPowTargetSpacing;\n     bool hasBestHeader = bestHeaderHeight >= count;\n "
      },
      {
        "sha": "ec0580b81c24404cd4b664bde411573404f04f11",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -672,7 +672,7 @@ void RPCConsole::setFontSize(int newSize)\n {\n     QSettings settings;\n \n-    //don't allow a insane font size\n+    //don't allow an insane font size\n     if (newSize < FONT_RANGE.width() || newSize > FONT_RANGE.height())\n         return;\n \n@@ -738,7 +738,7 @@ void RPCConsole::clear(bool clearHistory)\n                         tr(\"Use up and down arrows to navigate history, and %1 to clear screen.\").arg(\"<b>\"+clsKey+\"</b>\") + \"<br>\" +\n                         tr(\"Type <b>help</b> for an overview of available commands.\")) +\n                         \"<br><span class=\\\"secwarning\\\">\" +\n-                        tr(\"WARNING: Scammers have been active, telling users to type commands here, stealing their wallet contents. Do not use this console without fully understanding the ramification of a command.\") +\n+                        tr(\"WARNING: Scammers have been active, telling users to type commands here, stealing their wallet contents. Do not use this console without fully understanding the ramifications of a command.\") +\n                         \"</span>\",\n                         true);\n }"
      },
      {
        "sha": "6538a80233c9acc342dcbf13915075631be091d8",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -339,7 +339,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n         transaction_array.append(&(ssTx[0]), ssTx.size());\n     }\n \n-    // Add addresses / update labels that we've sent to to the address book,\n+    // Add addresses / update labels that we've sent to the address book,\n     // and emit coinsSent signal for each recipient\n     for (const SendCoinsRecipient &rcp : transaction.getRecipients())\n     {"
      },
      {
        "sha": "33e3fb4529833d3eb14e89e486e9019206c4c420",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -413,7 +413,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n         boost::split(uriParts, strUriParams, boost::is_any_of(\"/\"));\n     }\n \n-    // throw exception in case of a empty request\n+    // throw exception in case of an empty request\n     std::string strRequestMutable = req->ReadBody();\n     if (strRequestMutable.length() == 0 && uriParts.size() == 0)\n         return RESTERR(req, HTTP_BAD_REQUEST, \"Error: empty request\");"
      },
      {
        "sha": "aecedb48b2c635db0af5cd4344888552bae9255e",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -75,7 +75,7 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n             \"[\\n\"\n             \"  {\\n\"\n             \"    \\\"id\\\": n,                   (numeric) Peer index\\n\"\n-            \"    \\\"addr\\\":\\\"host:port\\\",      (string) The ip address and port of the peer\\n\"\n+            \"    \\\"addr\\\":\\\"host:port\\\",      (string) The IP address and port of the peer\\n\"\n             \"    \\\"addrbind\\\":\\\"ip:port\\\",    (string) Bind address of the connection to the peer\\n\"\n             \"    \\\"addrlocal\\\":\\\"ip:port\\\",   (string) Local address as reported by the peer\\n\"\n             \"    \\\"services\\\":\\\"xxxxxxxxxxxxxxxx\\\",   (string) The services offered\\n\"\n@@ -199,7 +199,7 @@ UniValue addnode(const JSONRPCRequest& request)\n         (strCommand != \"onetry\" && strCommand != \"add\" && strCommand != \"remove\"))\n         throw std::runtime_error(\n             \"addnode \\\"node\\\" \\\"add|remove|onetry\\\"\\n\"\n-            \"\\nAttempts add or remove a node from the addnode list.\\n\"\n+            \"\\nAttempts to add or remove a node from the addnode list.\\n\"\n             \"Or try a connection to a node once.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"node\\\"     (string, required) The node (see getpeerinfo for nodes)\\n\"\n@@ -290,7 +290,7 @@ UniValue getaddednodeinfo(const JSONRPCRequest& request)\n             \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  {\\n\"\n-            \"    \\\"addednode\\\" : \\\"192.168.0.201\\\",   (string) The node ip address or name (as provided to addnode)\\n\"\n+            \"    \\\"addednode\\\" : \\\"192.168.0.201\\\",   (string) The node IP address or name (as provided to addnode)\\n\"\n             \"    \\\"connected\\\" : true|false,          (boolean) If connected\\n\"\n             \"    \\\"addresses\\\" : [                    (list of objects) Only when connected = true\\n\"\n             \"       {\\n\"\n@@ -497,12 +497,12 @@ UniValue setban(const JSONRPCRequest& request)\n         (strCommand != \"add\" && strCommand != \"remove\"))\n         throw std::runtime_error(\n                             \"setban \\\"subnet\\\" \\\"add|remove\\\" (bantime) (absolute)\\n\"\n-                            \"\\nAttempts add or remove a IP/Subnet from the banned list.\\n\"\n+                            \"\\nAttempts to add or remove an IP/Subnet from the banned list.\\n\"\n                             \"\\nArguments:\\n\"\n-                            \"1. \\\"subnet\\\"       (string, required) The IP/Subnet (see getpeerinfo for nodes ip) with a optional netmask (default is /32 = single ip)\\n\"\n-                            \"2. \\\"command\\\"      (string, required) 'add' to add a IP/Subnet to the list, 'remove' to remove a IP/Subnet from the list\\n\"\n-                            \"3. \\\"bantime\\\"      (numeric, optional) time in seconds how long (or until when if [absolute] is set) the ip is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\\n\"\n-                            \"4. \\\"absolute\\\"     (boolean, optional) If set, the bantime must be a absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+                            \"1. \\\"subnet\\\"       (string, required) The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)\\n\"\n+                            \"2. \\\"command\\\"      (string, required) 'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list\\n\"\n+                            \"3. \\\"bantime\\\"      (numeric, optional) time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\\n\"\n+                            \"4. \\\"absolute\\\"     (boolean, optional) If set, the bantime must be an absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\\n\"\n                             \"\\nExamples:\\n\"\n                             + HelpExampleCli(\"setban\", \"\\\"192.168.0.6\\\" \\\"add\\\" 86400\")\n                             + HelpExampleCli(\"setban\", \"\\\"192.168.0.0/24\\\" \\\"add\\\"\")"
      },
      {
        "sha": "5198724bea15360d7c680e76ba8d0b2d3ef75641",
        "filename": "src/secp256k1/sage/group_prover.sage",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/secp256k1/sage/group_prover.sage",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/secp256k1/sage/group_prover.sage",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/sage/group_prover.sage?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -3,7 +3,7 @@\n # to independently set assumptions on input or intermediary variables.\n #\n # The general approach is:\n-# * A constraint is a tuple of two sets of of symbolic expressions:\n+# * A constraint is a tuple of two sets of symbolic expressions:\n #   the first of which are required to evaluate to zero, the second of which\n #   are required to evaluate to nonzero.\n #   - A constraint is said to be conflicting if any of its nonzero expressions"
      },
      {
        "sha": "bd2b629e1c2e9b9699533bc598fa7759918e0645",
        "filename": "src/secp256k1/src/asm/field_10x26_arm.s",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/secp256k1/src/asm/field_10x26_arm.s",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/secp256k1/src/asm/field_10x26_arm.s",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/asm/field_10x26_arm.s?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -11,7 +11,7 @@ Note:\n \n - To avoid unnecessary loads and make use of available registers, two\n   'passes' have every time been interleaved, with the odd passes accumulating c' and d' \n-  which will be added to c and d respectively in the the even passes\n+  which will be added to c and d respectively in the even passes\n \n */\n "
      },
      {
        "sha": "2c98fbcfd67efa8da6fec19070934611c1770369",
        "filename": "src/test/arith_uint256_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/test/arith_uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/test/arith_uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/arith_uint256_tests.cpp?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -219,7 +219,7 @@ BOOST_AUTO_TEST_CASE( unaryOperators ) // !    ~    -\n \n \n // Check if doing _A_ _OP_ _B_ results in the same as applying _OP_ onto each\n-// element of Aarray and Barray, and then converting the result into a arith_uint256.\n+// element of Aarray and Barray, and then converting the result into an arith_uint256.\n #define CHECKBITWISEOPERATOR(_A_,_B_,_OP_)                              \\\n     for (unsigned int i = 0; i < 32; ++i) { TmpArray[i] = _A_##Array[i] _OP_ _B_##Array[i]; } \\\n     BOOST_CHECK(arith_uint256V(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (_A_##L _OP_ _B_##L));"
      },
      {
        "sha": "0390d6806d2bb687190bb08e0afe9352a045c397",
        "filename": "src/test/data/script_tests.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -2506,7 +2506,7 @@\n ],\n \n [\"CHECKSEQUENCEVERIFY tests\"],\n-[\"\", \"CHECKSEQUENCEVERIFY\", \"CHECKSEQUENCEVERIFY\", \"INVALID_STACK_OPERATION\", \"CSV automatically fails on a empty stack\"],\n+[\"\", \"CHECKSEQUENCEVERIFY\", \"CHECKSEQUENCEVERIFY\", \"INVALID_STACK_OPERATION\", \"CSV automatically fails on an empty stack\"],\n [\"-1\", \"CHECKSEQUENCEVERIFY\", \"CHECKSEQUENCEVERIFY\", \"NEGATIVE_LOCKTIME\", \"CSV automatically fails if stack top is negative\"],\n [\"0x0100\", \"CHECKSEQUENCEVERIFY\", \"CHECKSEQUENCEVERIFY,MINIMALDATA\", \"UNKNOWN_ERROR\", \"CSV fails if stack top is not minimally encoded\"],\n [\"0\", \"CHECKSEQUENCEVERIFY\", \"CHECKSEQUENCEVERIFY\", \"UNSATISFIED_LOCKTIME\", \"CSV fails if stack top bit 1 << 31 is set and the tx version < 2\"],"
      },
      {
        "sha": "e6b382af13e70b8466eb935d5aaac65eab1f9b05",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -174,7 +174,7 @@\n [[[\"5a6b0021a6042a686b6b94abc36b387bef9109847774e8b1e51eb8cc55c53921\", 1, \"DUP HASH160 0x14 0xee5a6aa40facefb2655ac23c0c28c57c65c41f9b EQUALVERIFY CHECKSIG\"]],\n \"01000000012139c555ccb81ee5b1e87477840991ef7b386bc3ab946b6b682a04a621006b5a01000000fdb40148304502201723e692e5f409a7151db386291b63524c5eb2030df652b1f53022fd8207349f022100b90d9bbf2f3366ce176e5e780a00433da67d9e5c79312c6388312a296a5800390148304502201723e692e5f409a7151db386291b63524c5eb2030df652b1f53022fd8207349f022100b90d9bbf2f3366ce176e5e780a00433da67d9e5c79312c6388312a296a5800390121038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f2204148304502201723e692e5f409a7151db386291b63524c5eb2030df652b1f53022fd8207349f022100b90d9bbf2f3366ce176e5e780a00433da67d9e5c79312c6388312a296a5800390175ac4830450220646b72c35beeec51f4d5bc1cbae01863825750d7f490864af354e6ea4f625e9c022100f04b98432df3a9641719dbced53393022e7249fb59db993af1118539830aab870148304502201723e692e5f409a7151db386291b63524c5eb2030df652b1f53022fd8207349f022100b90d9bbf2f3366ce176e5e780a00433da67d9e5c79312c6388312a296a580039017521038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f22041ffffffff010000000000000000016a00000000\", \"P2SH\"],\n \n-[\"Finally CHECKMULTISIG removes all signatures prior to hashing the script containing those signatures. In conjunction with the SIGHASH_SINGLE bug this lets us test whether or not FindAndDelete() is actually present in scriptPubKey/redeemScript evaluation by including a signature of the digest 0x01 We can compute in advance for our pubkey, embed it it in the scriptPubKey, and then also using a normal SIGHASH_ALL signature. If FindAndDelete() wasn't run, the 'bugged' signature would still be in the hashed script, and the normal signature would fail.\"],\n+[\"Finally CHECKMULTISIG removes all signatures prior to hashing the script containing those signatures. In conjunction with the SIGHASH_SINGLE bug this lets us test whether or not FindAndDelete() is actually present in scriptPubKey/redeemScript evaluation by including a signature of the digest 0x01 We can compute in advance for our pubkey, embed it in the scriptPubKey, and then also using a normal SIGHASH_ALL signature. If FindAndDelete() wasn't run, the 'bugged' signature would still be in the hashed script, and the normal signature would fail.\"],\n \n [\"Here's an example on mainnet within a P2SH redeemScript. Remarkably it's a standard transaction in <0.9\"],\n [[[\"b5b598de91787439afd5938116654e0b16b7a0d0f82742ba37564219c5afcbf9\", 0, \"DUP HASH160 0x14 0xf6f365c40f0739b61de827a44751e5e99032ed8f EQUALVERIFY CHECKSIG\"],"
      },
      {
        "sha": "4cd64bf0281f15fc371dcf6ae9e1777527f135d4",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -407,7 +407,7 @@ static bool WriteBinaryFile(const fs::path &filename, const std::string &data)\n /****** Bitcoin specific TorController implementation ********/\n \n /** Controller that connects to Tor control socket, authenticate, then create\n- * and maintain a ephemeral hidden service.\n+ * and maintain an ephemeral hidden service.\n  */\n class TorController\n {"
      },
      {
        "sha": "bb03e0546087b0f4ad4e88be3697b7e8eb04dea7",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -122,7 +122,7 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     // accounted for in the state of their ancestors)\n     std::set<uint256> setAlreadyIncluded(vHashesToUpdate.begin(), vHashesToUpdate.end());\n \n-    // Iterate in reverse, so that whenever we are looking at at a transaction\n+    // Iterate in reverse, so that whenever we are looking at a transaction\n     // we are sure that all in-mempool descendants have already been processed.\n     // This maximizes the benefit of the descendant cache and guarantees that\n     // setMemPoolChildren will be updated, an assumption made in"
      },
      {
        "sha": "93abaec04b1090a25680daf8c2db74c209ad6e97",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -437,7 +437,7 @@ bool ParseInt32(const std::string& str, int32_t *out)\n     errno = 0; // strtol will not set errno if valid\n     long int n = strtol(str.c_str(), &endp, 10);\n     if(out) *out = (int32_t)n;\n-    // Note that strtol returns a *long int*, so even if strtol doesn't report a over/underflow\n+    // Note that strtol returns a *long int*, so even if strtol doesn't report an over/underflow\n     // we still have to check that the returned value is within the range of an *int32_t*. On 64-bit\n     // platforms the size of these types may be different.\n     return endp && *endp == 0 && !errno &&\n@@ -453,7 +453,7 @@ bool ParseInt64(const std::string& str, int64_t *out)\n     errno = 0; // strtoll will not set errno if valid\n     long long int n = strtoll(str.c_str(), &endp, 10);\n     if(out) *out = (int64_t)n;\n-    // Note that strtoll returns a *long long int*, so even if strtol doesn't report a over/underflow\n+    // Note that strtoll returns a *long long int*, so even if strtol doesn't report an over/underflow\n     // we still have to check that the returned value is within the range of an *int64_t*.\n     return endp && *endp == 0 && !errno &&\n         n >= std::numeric_limits<int64_t>::min() &&\n@@ -470,7 +470,7 @@ bool ParseUInt32(const std::string& str, uint32_t *out)\n     errno = 0; // strtoul will not set errno if valid\n     unsigned long int n = strtoul(str.c_str(), &endp, 10);\n     if(out) *out = (uint32_t)n;\n-    // Note that strtoul returns a *unsigned long int*, so even if it doesn't report a over/underflow\n+    // Note that strtoul returns a *unsigned long int*, so even if it doesn't report an over/underflow\n     // we still have to check that the returned value is within the range of an *uint32_t*. On 64-bit\n     // platforms the size of these types may be different.\n     return endp && *endp == 0 && !errno &&\n@@ -487,7 +487,7 @@ bool ParseUInt64(const std::string& str, uint64_t *out)\n     errno = 0; // strtoull will not set errno if valid\n     unsigned long long int n = strtoull(str.c_str(), &endp, 10);\n     if(out) *out = (uint64_t)n;\n-    // Note that strtoull returns a *unsigned long long int*, so even if it doesn't report a over/underflow\n+    // Note that strtoull returns a *unsigned long long int*, so even if it doesn't report an over/underflow\n     // we still have to check that the returned value is within the range of an *uint64_t*.\n     return endp && *endp == 0 && !errno &&\n         n <= std::numeric_limits<uint64_t>::max();"
      },
      {
        "sha": "7b40447de6c77cbbdd54e2e8af0c10f46d222b7c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -1206,7 +1206,7 @@ static bool CheckInputs(const CTransaction& tx, CValidationState &state, const C\n                             return state.Invalid(false, REJECT_NONSTANDARD, strprintf(\"non-mandatory-script-verify-flag (%s)\", ScriptErrorString(check.GetScriptError())));\n                     }\n                     // Failures of other flags indicate a transaction that is\n-                    // invalid in new blocks, e.g. a invalid P2SH. We DoS ban\n+                    // invalid in new blocks, e.g. an invalid P2SH. We DoS ban\n                     // such nodes as they are not following the protocol. That\n                     // said during an upgrade careful thought should be taken\n                     // as to the correct behavior - we may want to continue"
      },
      {
        "sha": "09aaf4f74706c61231b40b4f8f5cc163d0bcda43",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -1049,7 +1049,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             \"      \\\"redeemscript\\\": \\\"<script>\\\"                            , (string, optional) Allowed only if the scriptPubKey is a P2SH address or a P2SH scriptPubKey\\n\"\n             \"      \\\"pubkeys\\\": [\\\"<pubKey>\\\", ... ]                         , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript\\n\"\n             \"      \\\"keys\\\": [\\\"<key>\\\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript\\n\"\n-            \"      \\\"internal\\\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be be treated as not incoming payments\\n\"\n+            \"      \\\"internal\\\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be treated as not incoming payments\\n\"\n             \"      \\\"watchonly\\\": <true>                                   , (boolean, optional, default: false) Stating whether matching outputs should be considered watched even when they're not spendable, only allowed if keys are empty\\n\"\n             \"      \\\"label\\\": <label>                                      , (string, optional, default: '') Label to assign to the address (aka account name, for now), only allowed with internal=false\\n\"\n             \"    }\\n\""
      },
      {
        "sha": "c94f337b261d82fa24dc19e0e27979bfebaa626e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -3866,11 +3866,11 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n     else if (IsArgSet(\"-usehd\")) {\n         bool useHD = GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET);\n         if (walletInstance->IsHDEnabled() && !useHD) {\n-            InitError(strprintf(_(\"Error loading %s: You can't disable HD on a already existing HD wallet\"), walletFile));\n+            InitError(strprintf(_(\"Error loading %s: You can't disable HD on an already existing HD wallet\"), walletFile));\n             return NULL;\n         }\n         if (!walletInstance->IsHDEnabled() && useHD) {\n-            InitError(strprintf(_(\"Error loading %s: You can't enable HD on a already existing non-HD wallet\"), walletFile));\n+            InitError(strprintf(_(\"Error loading %s: You can't enable HD on an already existing non-HD wallet\"), walletFile));\n             return NULL;\n         }\n     }\n@@ -3890,7 +3890,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n     if (chainActive.Tip() && chainActive.Tip() != pindexRescan)\n     {\n         //We can't rescan beyond non-pruned blocks, stop and throw an error\n-        //this might happen if a user uses a old wallet within a pruned node\n+        //this might happen if a user uses an old wallet within a pruned node\n         // or if he ran -disablewallet for a longer time, then decided to re-enable\n         if (fPruneMode)\n         {"
      },
      {
        "sha": "569db7ced5b1d23b4e1ff07d5fd8974d8c894fda",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -10,7 +10,7 @@\n This module consists of around a dozen individual test cases implemented in the\n top-level functions named as test_<test_case_description>. The test functions\n can be disabled or reordered if needed for debugging. If new test cases are\n-added in the the future, they should try to follow the same convention and not\n+added in the future, they should try to follow the same convention and not\n make assumptions about execution order.\n \"\"\"\n "
      },
      {
        "sha": "4f778a933b67d373e8641784481fd5879070a777",
        "filename": "test/functional/pruning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/test/functional/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/test/functional/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/pruning.py?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -318,7 +318,7 @@ def wallet_test(self):\n         self.start_node(2, self.options.tmpdir, [\"-prune=550\"])\n         self.log.info(\"Success\")\n \n-        # check that wallet loads loads successfully when restarting a pruned node after IBD.\n+        # check that wallet loads successfully when restarting a pruned node after IBD.\n         # this was reported to fail in #7494.\n         self.log.info(\"Syncing node 5 to test wallet\")\n         connect_nodes(self.nodes[0], 5)"
      },
      {
        "sha": "a69dbb501333a58e3a8372c316fc9023768ae155",
        "filename": "test/functional/rest.py",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/test/functional/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/test/functional/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rest.py?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -82,9 +82,9 @@ def run_test(self):\n                 n = vout['n']\n \n \n-        ######################################\n-        # GETUTXOS: query a unspent outpoint #\n-        ######################################\n+        #######################################\n+        # GETUTXOS: query an unspent outpoint #\n+        #######################################\n         json_request = '/checkmempool/'+txid+'-'+str(n)\n         json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n         json_obj = json.loads(json_string)\n@@ -97,9 +97,9 @@ def run_test(self):\n         assert_equal(json_obj['utxos'][0]['value'], 0.1)\n \n \n-        ################################################\n-        # GETUTXOS: now query a already spent outpoint #\n-        ################################################\n+        #################################################\n+        # GETUTXOS: now query an already spent outpoint #\n+        #################################################\n         json_request = '/checkmempool/'+vintx+'-0'\n         json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n         json_obj = json.loads(json_string)\n@@ -161,24 +161,24 @@ def run_test(self):\n         json_request = '/'+txid+'-'+str(n)\n         json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n         json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 0) #there should be a outpoint because it has just added to the mempool\n+        assert_equal(len(json_obj['utxos']), 0) #there should be an outpoint because it has just added to the mempool\n \n         json_request = '/checkmempool/'+txid+'-'+str(n)\n         json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n         json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 1) #there should be a outpoint because it has just added to the mempool\n+        assert_equal(len(json_obj['utxos']), 1) #there should be an outpoint because it has just added to the mempool\n \n         #do some invalid requests\n         json_request = '{\"checkmempool'\n         response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'json', json_request, True)\n-        assert_equal(response.status, 400) #must be a 400 because we send a invalid json request\n+        assert_equal(response.status, 400) #must be a 400 because we send an invalid json request\n \n         json_request = '{\"checkmempool'\n         response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'bin', json_request, True)\n-        assert_equal(response.status, 400) #must be a 400 because we send a invalid bin request\n+        assert_equal(response.status, 400) #must be a 400 because we send an invalid bin request\n \n         response = http_post_call(url.hostname, url.port, '/rest/getutxos/checkmempool'+self.FORMAT_SEPARATOR+'bin', '', True)\n-        assert_equal(response.status, 400) #must be a 400 because we send a invalid bin request\n+        assert_equal(response.status, 400) #must be a 400 because we send an invalid bin request\n \n         #test limits\n         json_request = '/checkmempool/'"
      },
      {
        "sha": "bc42a319df79dc061a89eab78351911972c6f087",
        "filename": "test/functional/smartfees.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/test/functional/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/test/functional/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/smartfees.py?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -10,7 +10,7 @@\n from test_framework.mininode import CTransaction, CTxIn, CTxOut, COutPoint, ToHex, COIN\n \n # Construct 2 trivial P2SH's and the ScriptSigs that spend them\n-# So we can create many many transactions without needing to spend\n+# So we can create many transactions without needing to spend\n # time signing.\n redeem_script_1 = CScript([OP_1, OP_DROP])\n redeem_script_2 = CScript([OP_2, OP_DROP])"
      },
      {
        "sha": "688347a68ff53db386e8bbec62e091627ca4c43e",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -61,7 +61,7 @@\n \n # One lock for synchronizing all data access between the networking thread (see\n # NetworkThread below) and the thread running the test logic.  For simplicity,\n-# NodeConn acquires this lock whenever delivering a message to to a NodeConnCB,\n+# NodeConn acquires this lock whenever delivering a message to a NodeConnCB,\n # and whenever adding anything to the send buffer (in send_message()).  This\n # lock should be acquired in the thread running the test logic to synchronize\n # access to any data shared with the NodeConnCB or NodeConn."
      },
      {
        "sha": "e4d40520ef6361e62cdcd50eb6f5147b574ef4c8",
        "filename": "test/functional/zapwallettxes.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/test/functional/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/test/functional/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zapwallettxes.py?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -70,7 +70,7 @@ def run_test (self):\n         self.nodes[0] = self.start_node(0,self.options.tmpdir, [\"-zapwallettxes=1\"])\n         \n         assert_raises(JSONRPCException, self.nodes[0].gettransaction, [txid3])\n-        #there must be a expection because the unconfirmed wallettx0 must be gone by now\n+        #there must be an exception because the unconfirmed wallettx0 must be gone by now\n \n         tx0 = self.nodes[0].gettransaction(txid0)\n         assert_equal(tx0['txid'], txid0) #tx0 (confirmed) must still be available because it was confirmed"
      }
    ]
  },
  {
    "sha": "b014668e27b496bd6ad30985294f3d6971311910",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDE0NjY4ZTI3YjQ5NmJkNmFkMzA5ODUyOTRmM2Q2OTcxMzExOTEw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-06-06T00:46:23Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-06-22T16:21:09Z"
      },
      "message": "Add CheckInputs wrapper CCoinsViewMemPool -> non-consensus-critical\n\nThis wraps CheckInputs in ATMP's cache-inputs call to check that\neach scriptPubKey the CCoinsViewCache provides is the one which\nwas committed to by the input's transaction hash.",
      "tree": {
        "sha": "9236fe0b456f308f413791efe72fa6b9733f7d02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9236fe0b456f308f413791efe72fa6b9733f7d02"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b014668e27b496bd6ad30985294f3d6971311910",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b014668e27b496bd6ad30985294f3d6971311910",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b014668e27b496bd6ad30985294f3d6971311910",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b014668e27b496bd6ad30985294f3d6971311910/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eada04e778435574198b5778bf6ccc72cfcba7be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eada04e778435574198b5778bf6ccc72cfcba7be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eada04e778435574198b5778bf6ccc72cfcba7be"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 37,
      "deletions": 1
    },
    "files": [
      {
        "sha": "463c16c11fa918c7cf9aaa0914c715464ed62245",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 1,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b014668e27b496bd6ad30985294f3d6971311910/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b014668e27b496bd6ad30985294f3d6971311910/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b014668e27b496bd6ad30985294f3d6971311910",
        "patch": "@@ -399,6 +399,42 @@ void UpdateMempoolForReorg(DisconnectedBlockTransactions &disconnectpool, bool f\n     LimitMempoolSize(mempool, GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n }\n \n+// Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n+// were somehow broken and returning the wrong scriptPubKeys\n+static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &view, CTxMemPool& pool,\n+                 unsigned int flags, bool cacheSigStore, PrecomputedTransactionData& txdata) {\n+    AssertLockHeld(cs_main);\n+\n+    // pool.cs should be locked already, but go ahead and re-take the lock here\n+    // to enforce that mempool doesn't change between when we check the view\n+    // and when we actually call through to CheckInputs\n+    LOCK(pool.cs);\n+\n+    assert(!tx.IsCoinBase());\n+    for (const CTxIn& txin : tx.vin) {\n+        const Coin& coin = view.AccessCoin(txin.prevout);\n+\n+        // At this point we haven't actually checked if the coins are all\n+        // available (or shouldn't assume we have, since CheckInputs does).\n+        // So we just return failure if the inputs are not available here,\n+        // and then only have to check equivalence for available inputs.\n+        if (coin.IsSpent()) return false;\n+\n+        const CTransactionRef& txFrom = pool.get(txin.prevout.hash);\n+        if (txFrom) {\n+            assert(txFrom->GetHash() == txin.prevout.hash);\n+            assert(txFrom->vout.size() > txin.prevout.n);\n+            assert(txFrom->vout[txin.prevout.n] == coin.out);\n+        } else {\n+            const Coin& coinFromDisk = pcoinsTip->AccessCoin(txin.prevout);\n+            assert(!coinFromDisk.IsSpent());\n+            assert(coinFromDisk.out == coin.out);\n+        }\n+    }\n+\n+    return CheckInputs(tx, state, view, true, flags, cacheSigStore, true, txdata);\n+}\n+\n static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx, bool fLimitFree,\n                               bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n                               bool fOverrideMempoolLimit, const CAmount& nAbsurdFee, std::vector<COutPoint>& coins_to_uncache)\n@@ -782,7 +818,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         // invalid blocks (using TestBlockValidity), however allowing such\n         // transactions into the mempool can be exploited as a DoS attack.\n         unsigned int currentBlockScriptVerifyFlags = GetBlockScriptFlags(chainActive.Tip(), Params().GetConsensus());\n-        if (!CheckInputs(tx, state, view, true, currentBlockScriptVerifyFlags, true, true, txdata))\n+        if (!CheckInputsFromMempoolAndCache(tx, state, view, pool, currentBlockScriptVerifyFlags, true, txdata))\n         {\n             // If we're using promiscuousmempoolflags, we may hit this normally\n             // Check if current block has some flags that scriptVerifyFlags"
      }
    ]
  },
  {
    "sha": "309ee1ae7b288deabe6601b054474393f31e1fe7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDllZTFhZTdiMjg4ZGVhYmU2NjAxYjA1NDQ3NDM5M2YzMWUxZmU3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-21T20:38:12Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-06-22T16:21:09Z"
      },
      "message": "Update -maxsigcachesize doc clarify init logprints for it",
      "tree": {
        "sha": "20239fbd4b7bc256a02e4f129e56143f5ab9641e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20239fbd4b7bc256a02e4f129e56143f5ab9641e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/309ee1ae7b288deabe6601b054474393f31e1fe7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/309ee1ae7b288deabe6601b054474393f31e1fe7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/309ee1ae7b288deabe6601b054474393f31e1fe7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/309ee1ae7b288deabe6601b054474393f31e1fe7/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b014668e27b496bd6ad30985294f3d6971311910",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b014668e27b496bd6ad30985294f3d6971311910",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b014668e27b496bd6ad30985294f3d6971311910"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "df6a762a7a8074c87f5c6ce491487d8e58658002",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/309ee1ae7b288deabe6601b054474393f31e1fe7/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/309ee1ae7b288deabe6601b054474393f31e1fe7/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=309ee1ae7b288deabe6601b054474393f31e1fe7",
        "patch": "@@ -461,7 +461,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     {\n         strUsage += HelpMessageOpt(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS));\n         strUsage += HelpMessageOpt(\"-mocktime=<n>\", \"Replace actual time with <n> seconds since epoch (default: 0)\");\n-        strUsage += HelpMessageOpt(\"-maxsigcachesize=<n>\", strprintf(\"Limit size of signature cache to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE));\n+        strUsage += HelpMessageOpt(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE));\n         strUsage += HelpMessageOpt(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE));\n     }\n     strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees (in %s) to use in a single wallet transaction or raw transaction; setting this too low may abort large transactions (default: %s)\"),"
      },
      {
        "sha": "66aa7ad3e3bb2c2295a09880c35af53b49b68c1d",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/309ee1ae7b288deabe6601b054474393f31e1fe7/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/309ee1ae7b288deabe6601b054474393f31e1fe7/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=309ee1ae7b288deabe6601b054474393f31e1fe7",
        "patch": "@@ -76,8 +76,8 @@ void InitSignatureCache()\n     // setup_bytes creates the minimum possible cache (2 elements).\n     size_t nMaxCacheSize = std::min(std::max((int64_t)0, GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n     size_t nElems = signatureCache.setup_bytes(nMaxCacheSize);\n-    LogPrintf(\"Using %zu MiB out of %zu requested for signature cache, able to store %zu elements\\n\",\n-            (nElems*sizeof(uint256)) >>20, nMaxCacheSize>>20, nElems);\n+    LogPrintf(\"Using %zu MiB out of %zu/2 requested for signature cache, able to store %zu elements\\n\",\n+            (nElems*sizeof(uint256)) >>20, (nMaxCacheSize*2)>>20, nElems);\n }\n \n bool CachingTransactionSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const"
      },
      {
        "sha": "baddb84be6485a3212727c501f26d49deda3a681",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/309ee1ae7b288deabe6601b054474393f31e1fe7/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/309ee1ae7b288deabe6601b054474393f31e1fe7/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=309ee1ae7b288deabe6601b054474393f31e1fe7",
        "patch": "@@ -1217,8 +1217,8 @@ void InitScriptExecutionCache() {\n     // setup_bytes creates the minimum possible cache (2 elements).\n     size_t nMaxCacheSize = std::min(std::max((int64_t)0, GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n     size_t nElems = scriptExecutionCache.setup_bytes(nMaxCacheSize);\n-    LogPrintf(\"Using %zu MiB out of %zu requested for script execution cache, able to store %zu elements\\n\",\n-            (nElems*sizeof(uint256)) >>20, nMaxCacheSize>>20, nElems);\n+    LogPrintf(\"Using %zu MiB out of %zu/2 requested for script execution cache, able to store %zu elements\\n\",\n+            (nElems*sizeof(uint256)) >>20, (nMaxCacheSize*2)>>20, nElems);\n }\n \n /**"
      }
    ]
  },
  {
    "sha": "a3543af3cc878f2f24ada8b80198c8e4572c06eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzU0M2FmM2NjODc4ZjJmMjRhZGE4YjgwMTk4YzhlNDU3MmMwNmVi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-06-07T15:05:34Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-06-22T16:21:09Z"
      },
      "message": "Better document CheckInputs parameter meanings",
      "tree": {
        "sha": "70a84ffbcba3b6fd4f091cd088085d4823e37da4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70a84ffbcba3b6fd4f091cd088085d4823e37da4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3543af3cc878f2f24ada8b80198c8e4572c06eb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3543af3cc878f2f24ada8b80198c8e4572c06eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a3543af3cc878f2f24ada8b80198c8e4572c06eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3543af3cc878f2f24ada8b80198c8e4572c06eb/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "309ee1ae7b288deabe6601b054474393f31e1fe7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/309ee1ae7b288deabe6601b054474393f31e1fe7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/309ee1ae7b288deabe6601b054474393f31e1fe7"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 9,
      "deletions": 2
    },
    "files": [
      {
        "sha": "945d39876c88a599e515516f7373e7b7dc89be75",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3543af3cc878f2f24ada8b80198c8e4572c06eb/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3543af3cc878f2f24ada8b80198c8e4572c06eb/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a3543af3cc878f2f24ada8b80198c8e4572c06eb",
        "patch": "@@ -1223,8 +1223,15 @@ void InitScriptExecutionCache() {\n \n /**\n  * Check whether all inputs of this transaction are valid (no double spends, scripts & sigs, amounts)\n- * This does not modify the UTXO set. If pvChecks is not NULL, script checks are pushed onto it\n- * instead of being performed inline.\n+ * This does not modify the UTXO set.\n+ *\n+ * If pvChecks is not NULL, script checks are pushed onto it instead of being performed inline. Any\n+ * script checks which are not necessary (eg due to script execution cache hits) are, obviously,\n+ * not pushed onto pvChecks/run.\n+ *\n+ * Setting cacheSigStore/cacheFullScriptStore to false will remove elements from the corresponding cache\n+ * which are matched. This is useful for checking blocks where we will likely never need the cache\n+ * entry again.\n  */\n static bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks)\n {"
      }
    ]
  },
  {
    "sha": "209eef60a9accc880480fea886c3668343d4749a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDllZWY2MGE5YWNjYzg4MDQ4MGZlYTg4NmMzNjY4MzQzZDQ3NDlh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-22T15:55:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-22T16:23:11Z"
      },
      "message": "Merge #9343: Don't create change at dust limit\n\n6171826 Don't create change at the dust limit, even if it means paying more than expected (Alex Morcos)\n\nTree-SHA512: d4cf939b97a92d63d4703ad152093c9dc60e74af590697bc21adbcdf17fc9e6ffb37d46d5eefafbd69327d1bcb79911f1b826ce1d960d895d464c4408c4995c3",
      "tree": {
        "sha": "b73e4f692410bf8d3f1b7f843771e35a98fd7698",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b73e4f692410bf8d3f1b7f843771e35a98fd7698"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/209eef60a9accc880480fea886c3668343d4749a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZS+7vAAoJEB5K7WKYbNJd3fwH/RinC1ekLMAf3dL0gp7d+2k9\nXt3e2FMiLr9Sdm6ppK7/CiLK4yzUuARKFgQrEfH56gY3Z6VM5huft7xf2V3OtoF7\nf8Go75GG5XNjjTRvlhoo0b3zg4ASd0P/ZBd2f8JLudj5XA/G0pKimq3qUsFdzTuO\n/p+7yARn2MJOLn0aVA/Dz+VcMGYO3nLAu25q6DPqIINCO8n0u6804kwYgjP1Y+yo\nctGBmrUhbcMBsbDL1bi31KGlOnXuFfJX1RWVe+9wh5vwgg31G2T7u/W2YxwmE46H\nLZmyh0uK6GxjTx9TrRbbFgho6HkcqY3qcE9xTspYG3Gv3+j7KaFwwOuY7QQ2t0Q=\n=xA2s\n-----END PGP SIGNATURE-----",
        "payload": "tree b73e4f692410bf8d3f1b7f843771e35a98fd7698\nparent 87e69c2549c44b862558f1c025dc0c4449fca272\nparent 61718268b5067acd1b8af4a4e94b1bf60334e1f7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1498146951 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1498148591 +0200\n\nMerge #9343: Don't create change at dust limit\n\n6171826 Don't create change at the dust limit, even if it means paying more than expected (Alex Morcos)\n\nTree-SHA512: d4cf939b97a92d63d4703ad152093c9dc60e74af590697bc21adbcdf17fc9e6ffb37d46d5eefafbd69327d1bcb79911f1b826ce1d960d895d464c4408c4995c3\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/209eef60a9accc880480fea886c3668343d4749a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/209eef60a9accc880480fea886c3668343d4749a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/209eef60a9accc880480fea886c3668343d4749a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "87e69c2549c44b862558f1c025dc0c4449fca272",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87e69c2549c44b862558f1c025dc0c4449fca272",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87e69c2549c44b862558f1c025dc0c4449fca272"
      },
      {
        "sha": "61718268b5067acd1b8af4a4e94b1bf60334e1f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61718268b5067acd1b8af4a4e94b1bf60334e1f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/61718268b5067acd1b8af4a4e94b1bf60334e1f7"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 4,
      "deletions": 29
    },
    "files": [
      {
        "sha": "c52cb43f3545bb81728a35edc29f2f1c5c56968b",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/209eef60a9accc880480fea886c3668343d4749a/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/209eef60a9accc880480fea886c3668343d4749a/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=209eef60a9accc880480fea886c3668343d4749a",
        "patch": "@@ -524,13 +524,10 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n                 CTxOut txout(nChange, (CScript)std::vector<unsigned char>(24, 0));\n                 if (IsDust(txout, ::dustRelayFee))\n                 {\n-                    if (CoinControlDialog::fSubtractFeeFromAmount) // dust-change will be raised until no dust\n-                        nChange = GetDustThreshold(txout, ::dustRelayFee);\n-                    else\n-                    {\n-                        nPayFee += nChange;\n-                        nChange = 0;\n-                    }\n+                    nPayFee += nChange;\n+                    nChange = 0;\n+                    if (CoinControlDialog::fSubtractFeeFromAmount)\n+                        nBytes -= 34; // we didn't detect lack of change above\n                 }\n             }\n "
      },
      {
        "sha": "34178e462529b2d089dba93c50563f6e4e345c2c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/209eef60a9accc880480fea886c3668343d4749a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/209eef60a9accc880480fea886c3668343d4749a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=209eef60a9accc880480fea886c3668343d4749a",
        "patch": "@@ -2633,28 +2633,6 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n \n                     CTxOut newTxOut(nChange, scriptChange);\n \n-                    // We do not move dust-change to fees, because the sender would end up paying more than requested.\n-                    // This would be against the purpose of the all-inclusive feature.\n-                    // So instead we raise the change and deduct from the recipient.\n-                    if (nSubtractFeeFromAmount > 0 && IsDust(newTxOut, ::dustRelayFee))\n-                    {\n-                        CAmount nDust = GetDustThreshold(newTxOut, ::dustRelayFee) - newTxOut.nValue;\n-                        newTxOut.nValue += nDust; // raise change until no more dust\n-                        for (unsigned int i = 0; i < vecSend.size(); i++) // subtract from first recipient\n-                        {\n-                            if (vecSend[i].fSubtractFeeFromAmount)\n-                            {\n-                                txNew.vout[i].nValue -= nDust;\n-                                if (IsDust(txNew.vout[i], ::dustRelayFee))\n-                                {\n-                                    strFailReason = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                                    return false;\n-                                }\n-                                break;\n-                            }\n-                        }\n-                    }\n-\n                     // Never create dust outputs; if we would, just\n                     // add the dust to the fee.\n                     if (IsDust(newTxOut, ::dustRelayFee))"
      }
    ]
  },
  {
    "sha": "ffce893982d91294f7d0d966e7061301f0583ced",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZmNlODkzOTgyZDkxMjk0ZjdkMGQ5NjZlNzA2MTMwMWYwNTgzY2Vk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-22T16:35:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-22T17:16:37Z"
      },
      "message": "Merge #9517: [refactor] Switched httpserver.cpp to use RAII wrapped libevents.\n\n1ae86ec Changed event RAII helper functions to inline to deal with duplicate symbol linker errors. (Karl-Johan Alm)\nfd369d2 Switched httpserver.cpp to use RAII wrapped libevents. (Kalle Alm)\n\nTree-SHA512: 877e431f211024d42a3b0800e860e02833398611433e8393f8d5d4970f47f4bd670b900443678c067fec110c087aaab7dc1981ccbf17f6057676fdbbda89aed9",
      "tree": {
        "sha": "a6ebfbd9ca6a594076ff7a4ad1bed39cd513f4c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a6ebfbd9ca6a594076ff7a4ad1bed39cd513f4c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ffce893982d91294f7d0d966e7061301f0583ced",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZS/t1AAoJEB5K7WKYbNJdi2MIAIZk1kvLhxj+Wad2cEcyRDA2\nmnvVxAk5RglWdYvEX8Q07w4oLTd5bNO1jC/5kSomtb6J2Uv3aA5ZnQK4IeBbja2w\nCQjsqVm3HJUbEcDK2GxdWoQp3rjnm7ZS6AIfg+Cp3pVwpeHtzHe1Bs0N4tadUqFb\noYIbndwI8BW634mv+FkLdv9uIvo6SKEHhS3HsgdBeXtylGbLfCIIjTZ9h2O9DGrj\nL4yEHhd1qoIGe5klVp9lwC95XDZxz9cQKMbVSH30UDVoPO96bo501rlvF+8/vDlM\nr2Hdp907E6LSmIJLHS+cRWOyfjy8CyMAwlNIdVyyq+QDZ5Hr5Rp315Ti18QswIo=\n=L7MH\n-----END PGP SIGNATURE-----",
        "payload": "tree a6ebfbd9ca6a594076ff7a4ad1bed39cd513f4c4\nparent 209eef60a9accc880480fea886c3668343d4749a\nparent 1ae86ec5ec740a5ccd8b1a006a50de6fcc1d29e7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1498149339 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1498151797 +0200\n\nMerge #9517: [refactor] Switched httpserver.cpp to use RAII wrapped libevents.\n\n1ae86ec Changed event RAII helper functions to inline to deal with duplicate symbol linker errors. (Karl-Johan Alm)\nfd369d2 Switched httpserver.cpp to use RAII wrapped libevents. (Kalle Alm)\n\nTree-SHA512: 877e431f211024d42a3b0800e860e02833398611433e8393f8d5d4970f47f4bd670b900443678c067fec110c087aaab7dc1981ccbf17f6057676fdbbda89aed9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffce893982d91294f7d0d966e7061301f0583ced",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ffce893982d91294f7d0d966e7061301f0583ced",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffce893982d91294f7d0d966e7061301f0583ced/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "209eef60a9accc880480fea886c3668343d4749a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/209eef60a9accc880480fea886c3668343d4749a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/209eef60a9accc880480fea886c3668343d4749a"
      },
      {
        "sha": "1ae86ec5ec740a5ccd8b1a006a50de6fcc1d29e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ae86ec5ec740a5ccd8b1a006a50de6fcc1d29e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ae86ec5ec740a5ccd8b1a006a50de6fcc1d29e7"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 13,
      "deletions": 21
    },
    "files": [
      {
        "sha": "1557cf98f89a5576486e274a24e17f1e00a8e9f1",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 16,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffce893982d91294f7d0d966e7061301f0583ced/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffce893982d91294f7d0d966e7061301f0583ced/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=ffce893982d91294f7d0d966e7061301f0583ced",
        "patch": "@@ -21,13 +21,13 @@\n #include <signal.h>\n #include <future>\n \n-#include <event2/event.h>\n-#include <event2/http.h>\n #include <event2/thread.h>\n #include <event2/buffer.h>\n #include <event2/util.h>\n #include <event2/keyvalq_struct.h>\n \n+#include \"support/events.h\"\n+\n #ifdef EVENT__HAVE_NETINET_IN_H\n #include <netinet/in.h>\n #ifdef _XOPEN_SOURCE_EXTENDED\n@@ -367,9 +367,6 @@ static void libevent_log_cb(int severity, const char *msg)\n \n bool InitHTTPServer()\n {\n-    struct evhttp* http = 0;\n-    struct event_base* base = 0;\n-\n     if (!InitHTTPAllowList())\n         return false;\n \n@@ -395,17 +392,13 @@ bool InitHTTPServer()\n     evthread_use_pthreads();\n #endif\n \n-    base = event_base_new(); // XXX RAII\n-    if (!base) {\n-        LogPrintf(\"Couldn't create an event_base: exiting\\n\");\n-        return false;\n-    }\n+    raii_event_base base_ctr = obtain_event_base();\n \n     /* Create a new evhttp object to handle requests. */\n-    http = evhttp_new(base); // XXX RAII\n+    raii_evhttp http_ctr = obtain_evhttp(base_ctr.get());\n+    struct evhttp* http = http_ctr.get();\n     if (!http) {\n         LogPrintf(\"couldn't create evhttp. Exiting.\\n\");\n-        event_base_free(base);\n         return false;\n     }\n \n@@ -416,8 +409,6 @@ bool InitHTTPServer()\n \n     if (!HTTPBindAddresses(http)) {\n         LogPrintf(\"Unable to bind any endpoint for RPC server\\n\");\n-        evhttp_free(http);\n-        event_base_free(base);\n         return false;\n     }\n \n@@ -426,8 +417,9 @@ bool InitHTTPServer()\n     LogPrintf(\"HTTP: creating work queue of depth %d\\n\", workQueueDepth);\n \n     workQueue = new WorkQueue<HTTPClosure>(workQueueDepth);\n-    eventBase = base;\n-    eventHTTP = http;\n+    // tranfer ownership to eventBase/HTTP via .release()\n+    eventBase = base_ctr.release();\n+    eventHTTP = http_ctr.release();\n     return true;\n }\n "
      },
      {
        "sha": "90690876eee05893d7b13fa8cd795401b565832e",
        "filename": "src/support/events.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffce893982d91294f7d0d966e7061301f0583ced/src/support/events.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffce893982d91294f7d0d966e7061301f0583ced/src/support/events.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/events.h?ref=ffce893982d91294f7d0d966e7061301f0583ced",
        "patch": "@@ -27,26 +27,26 @@ MAKE_RAII(evhttp);\n MAKE_RAII(evhttp_request);\n MAKE_RAII(evhttp_connection);\n \n-raii_event_base obtain_event_base() {\n+inline raii_event_base obtain_event_base() {\n     auto result = raii_event_base(event_base_new());\n     if (!result.get())\n         throw std::runtime_error(\"cannot create event_base\");\n     return result;\n }\n \n-raii_event obtain_event(struct event_base* base, evutil_socket_t s, short events, event_callback_fn cb, void* arg) {\n+inline raii_event obtain_event(struct event_base* base, evutil_socket_t s, short events, event_callback_fn cb, void* arg) {\n     return raii_event(event_new(base, s, events, cb, arg));\n }\n \n-raii_evhttp obtain_evhttp(struct event_base* base) {\n+inline raii_evhttp obtain_evhttp(struct event_base* base) {\n     return raii_evhttp(evhttp_new(base));\n }\n \n-raii_evhttp_request obtain_evhttp_request(void(*cb)(struct evhttp_request *, void *), void *arg) {\n+inline raii_evhttp_request obtain_evhttp_request(void(*cb)(struct evhttp_request *, void *), void *arg) {\n     return raii_evhttp_request(evhttp_request_new(cb, arg));\n }\n \n-raii_evhttp_connection obtain_evhttp_connection_base(struct event_base* base, std::string host, uint16_t port) {\n+inline raii_evhttp_connection obtain_evhttp_connection_base(struct event_base* base, std::string host, uint16_t port) {\n     auto result = raii_evhttp_connection(evhttp_connection_base_new(base, NULL, host.c_str(), port));\n     if (!result.get())\n         throw std::runtime_error(\"create connection failed\");"
      }
    ]
  },
  {
    "sha": "b750b33c3ceaf370bd90868f727d49d65d216b36",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzUwYjMzYzNjZWFmMzcwYmQ5MDg2OGY3MjdkNDlkNjVkMjE2YjM2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-22T17:33:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-22T17:33:10Z"
      },
      "message": "Merge #10276: contrib/verifybinaries: allow filtering by platform\n\n8d4dafd contrib/verifybinaries: allow filtering by platform (Andres G. Aragoneses)\n\nTree-SHA512: 5c117d18fd6e73cdbbf39c610f521bccb32ca7100eb8d5d5ed9c664514c37b32bd2f94f357b64c34f7c093e0c09312ecff330b7f5c708700d4b48643780ebac5",
      "tree": {
        "sha": "5802d7b107ff59d186c29b054255ede1fbc241f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5802d7b107ff59d186c29b054255ede1fbc241f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b750b33c3ceaf370bd90868f727d49d65d216b36",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZS/9WAAoJEB5K7WKYbNJdQ+sIAM71GANVRkEgcFIVZHj8gHwV\niFFvTJltrUOY9MICDdwzr95RZhD1nVRIK7TVUoc/EquIhOdA3+T9q/9d4oq/SuGU\n9KfORcXbLCjcmxhi2ltaIME7/2XiwbPoVw6Jk0cd0ExjDuSvuCwljp3v+bwpo9Xg\n/f3QlFJKBWemVksP8k7/xdzXeQuYFjGlT7hj+c5jxptz4M4i1qH7Z/p+N7IvjwNU\niW4p+SuQElFFgatvfaEg+QrBiegw+npQdJy/fSxriATHv/MtrgKhEaoMnOapF7lV\nG574XG6oygTybruGdE6oaAU+goP0i1UgENgF3LvE6kHOGrpFKmtPD15mD070J2E=\n=1+Ji\n-----END PGP SIGNATURE-----",
        "payload": "tree 5802d7b107ff59d186c29b054255ede1fbc241f4\nparent ffce893982d91294f7d0d966e7061301f0583ced\nparent 8d4dafd774436a355b6aa49a44b867cf78c38f6d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1498152780 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1498152790 +0200\n\nMerge #10276: contrib/verifybinaries: allow filtering by platform\n\n8d4dafd contrib/verifybinaries: allow filtering by platform (Andres G. Aragoneses)\n\nTree-SHA512: 5c117d18fd6e73cdbbf39c610f521bccb32ca7100eb8d5d5ed9c664514c37b32bd2f94f357b64c34f7c093e0c09312ecff330b7f5c708700d4b48643780ebac5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b750b33c3ceaf370bd90868f727d49d65d216b36",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b750b33c3ceaf370bd90868f727d49d65d216b36",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b750b33c3ceaf370bd90868f727d49d65d216b36/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ffce893982d91294f7d0d966e7061301f0583ced",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffce893982d91294f7d0d966e7061301f0583ced",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ffce893982d91294f7d0d966e7061301f0583ced"
      },
      {
        "sha": "8d4dafd774436a355b6aa49a44b867cf78c38f6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d4dafd774436a355b6aa49a44b867cf78c38f6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d4dafd774436a355b6aa49a44b867cf78c38f6d"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 46,
      "deletions": 5
    },
    "files": [
      {
        "sha": "3ffe0a2f289556d40fab4f5ed82ddefaab645ea9",
        "filename": "contrib/verifybinaries/README.md",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b750b33c3ceaf370bd90868f727d49d65d216b36/contrib/verifybinaries/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b750b33c3ceaf370bd90868f727d49d65d216b36/contrib/verifybinaries/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/README.md?ref=b750b33c3ceaf370bd90868f727d49d65d216b36",
        "patch": "@@ -26,6 +26,14 @@ The script returns 0 if everything passes the checks. It returns 1 if either the\n ./verify.sh bitcoin-core-0.13.0-rc3\n ```\n \n+If you only want to download the binaries of certain platform, add the corresponding suffix, e.g.:\n+\n+```sh\n+./verify.sh bitcoin-core-0.11.2-osx\n+./verify.sh 0.12.0-linux\n+./verify.sh bitcoin-core-0.13.0-rc3-win64\n+```\n+\n If you do not want to keep the downloaded binaries, specify anything as the second parameter.\n \n ```sh"
      },
      {
        "sha": "c2cc2b7013ad9ddee52374b89750d52342792370",
        "filename": "contrib/verifybinaries/verify.sh",
        "status": "modified",
        "additions": 38,
        "deletions": 5,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b750b33c3ceaf370bd90868f727d49d65d216b36/contrib/verifybinaries/verify.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b750b33c3ceaf370bd90868f727d49d65d216b36/contrib/verifybinaries/verify.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.sh?ref=b750b33c3ceaf370bd90868f727d49d65d216b36",
        "patch": "@@ -42,13 +42,36 @@ if [ -n \"$1\" ]; then\n       VERSION=\"$VERSIONPREFIX$1\"\n    fi\n \n-   #now let's see if the version string contains \"rc\", and strip it off if it does\n-   #  and simultaneously add RCSUBDIR to BASEDIR, where we will look for SIGNATUREFILENAME\n-   if [[ $VERSION == *\"$RCVERSIONSTRING\"* ]]; then\n-      BASEDIR=\"$BASEDIR${VERSION/%-$RCVERSIONSTRING*}/\"\n-      BASEDIR=\"$BASEDIR$RCSUBDIR.$RCVERSIONSTRING${VERSION: -1}/\"\n+   STRIPPEDLAST=\"${VERSION%-*}\"\n+\n+   #now let's see if the version string contains \"rc\" or a platform name (e.g. \"osx\")\n+   if [[ \"$STRIPPEDLAST-\" == \"$VERSIONPREFIX\" ]]; then\n+      BASEDIR=\"$BASEDIR$VERSION/\"\n    else\n+      # let's examine the last part to see if it's rc and/or platform name\n+      STRIPPEDNEXTTOLAST=\"${STRIPPEDLAST%-*}\"\n+      if [[ \"$STRIPPEDNEXTTOLAST-\" == \"$VERSIONPREFIX\" ]]; then\n+\n+         LASTSUFFIX=\"${VERSION##*-}\"\n+         VERSION=\"$STRIPPEDLAST\"\n+\n+         if [[ $LASTSUFFIX == *\"$RCVERSIONSTRING\"* ]]; then\n+            RCVERSION=\"$LASTSUFFIX\"\n+         else\n+            PLATFORM=\"$LASTSUFFIX\"\n+         fi\n+\n+      else\n+         RCVERSION=\"${STRIPPEDLAST##*-}\"\n+         PLATFORM=\"${VERSION##*-}\"\n+\n+         VERSION=\"$STRIPPEDNEXTTOLAST\"\n+      fi\n+\n       BASEDIR=\"$BASEDIR$VERSION/\"\n+      if [[ $RCVERSION == *\"$RCVERSIONSTRING\"* ]]; then\n+         BASEDIR=\"$BASEDIR$RCSUBDIR.$RCVERSION/\"\n+      fi\n    fi\n \n    SIGNATUREFILE=\"$BASEDIR$SIGNATUREFILENAME\"\n@@ -92,12 +115,22 @@ if [ $RET -ne 0 ]; then\n    exit \"$RET\"\n fi\n \n+if [ -n \"$PLATFORM\" ]; then\n+   grep $PLATFORM $TMPFILE > \"$TMPFILE-plat\"\n+   TMPFILESIZE=$(stat -c%s \"$TMPFILE-plat\")\n+   if [ $TMPFILESIZE -eq 0 ]; then\n+      echo \"error: no files matched the platform specified\" && exit 3\n+   fi\n+   mv \"$TMPFILE-plat\" $TMPFILE\n+fi\n+\n #here we extract the filenames from the signature file\n FILES=$(awk '{print $2}' \"$TMPFILE\")\n \n #and download these one by one\n for file in $FILES\n do\n+   echo \"Downloading $file\"\n    wget --quiet -N \"$BASEDIR$file\"\n done\n "
      }
    ]
  },
  {
    "sha": "01c4b143a87e255d5fcb0f60f1164291262040c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMWM0YjE0M2E4N2UyNTVkNWZjYjBmNjBmMTE2NDI5MTI2MjA0MGM2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-22T17:40:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-22T17:54:22Z"
      },
      "message": "Merge #10248: Rewrite addrdb with less duplication using CHashVerifier\n\ncf68a48 Deduplicate addrdb.cpp and use CHashWriter/Verifier (Pieter Wuille)\n\nTree-SHA512: 0301332e797f64da3a1588c9ebaf533af58da41e38f8a64206bff20102c5e82c2a7c630ca3150cf451b2ccf4acb3dd45e44259b6ba15e92786e9e9a2b225bd2f",
      "tree": {
        "sha": "9c0659a967cdbde0f23bf34cb136c081c77e7f9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c0659a967cdbde0f23bf34cb136c081c77e7f9b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01c4b143a87e255d5fcb0f60f1164291262040c6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZTAROAAoJEB5K7WKYbNJdw9oH/12WPtRMEXp+PME1X81eZW4Q\nzn14eKY2U7AaAO3RL23D21tnZgZBLHr0Ri6fqcnxHilj58Px7tbdrl0z3nnE+lLq\ny0rYnmuZLgw4shebIpn9l4VWC2a3K6EXtbXWOwYPMb094tjflPS64YEEjJecjwdh\nBUfUot06RL9/Lha5ek/Yngmmu15JuRFSere/ub39icdD4IU32H1wlMBPMY9DzaV4\n+klORHpqPwHzz4AQJTX3XbTP4qxc86fbOc92b9rJyKSKug/pO/aNcv+lQWPNb4Pu\nLFCOotXLu+9lyFVL0lRCiVoDvy0jHUdZI+4TSTYVE6eoXFNCUhHXJF+M1lcmUBw=\n=4/fO\n-----END PGP SIGNATURE-----",
        "payload": "tree 9c0659a967cdbde0f23bf34cb136c081c77e7f9b\nparent b750b33c3ceaf370bd90868f727d49d65d216b36\nparent cf68a488a4cc78d711ca6e5e3236c6d89d689079\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1498153200 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1498154062 +0200\n\nMerge #10248: Rewrite addrdb with less duplication using CHashVerifier\n\ncf68a48 Deduplicate addrdb.cpp and use CHashWriter/Verifier (Pieter Wuille)\n\nTree-SHA512: 0301332e797f64da3a1588c9ebaf533af58da41e38f8a64206bff20102c5e82c2a7c630ca3150cf451b2ccf4acb3dd45e44259b6ba15e92786e9e9a2b225bd2f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01c4b143a87e255d5fcb0f60f1164291262040c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01c4b143a87e255d5fcb0f60f1164291262040c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01c4b143a87e255d5fcb0f60f1164291262040c6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b750b33c3ceaf370bd90868f727d49d65d216b36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b750b33c3ceaf370bd90868f727d49d65d216b36",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b750b33c3ceaf370bd90868f727d49d65d216b36"
      },
      {
        "sha": "cf68a488a4cc78d711ca6e5e3236c6d89d689079",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf68a488a4cc78d711ca6e5e3236c6d89d689079",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf68a488a4cc78d711ca6e5e3236c6d89d689079"
      }
    ],
    "stats": {
      "total": 216,
      "additions": 72,
      "deletions": 144
    },
    "files": [
      {
        "sha": "7f85c16585aa28b471d16c15b689ba23da6391a8",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 71,
        "deletions": 143,
        "changes": 214,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01c4b143a87e255d5fcb0f60f1164291262040c6/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01c4b143a87e255d5fcb0f60f1164291262040c6/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=01c4b143a87e255d5fcb0f60f1164291262040c6",
        "patch": "@@ -15,25 +15,31 @@\n #include \"tinyformat.h\"\n #include \"util.h\"\n \n+namespace {\n \n-CBanDB::CBanDB()\n+template <typename Stream, typename Data>\n+bool SerializeDB(Stream& stream, const Data& data)\n {\n-    pathBanlist = GetDataDir() / \"banlist.dat\";\n+    // Write and commit header, data\n+    try {\n+        CHashWriter hasher(SER_DISK, CLIENT_VERSION);\n+        stream << FLATDATA(Params().MessageStart()) << data;\n+        hasher << FLATDATA(Params().MessageStart()) << data;\n+        stream << hasher.GetHash();\n+    } catch (const std::exception& e) {\n+        return error(\"%s: Serialize or I/O error - %s\", __func__, e.what());\n+    }\n+\n+    return true;\n }\n \n-bool CBanDB::Write(const banmap_t& banSet)\n+template <typename Data>\n+bool SerializeFileDB(const std::string& prefix, const fs::path& path, const Data& data)\n {\n     // Generate random temporary filename\n     unsigned short randv = 0;\n     GetRandBytes((unsigned char*)&randv, sizeof(randv));\n-    std::string tmpfn = strprintf(\"banlist.dat.%04x\", randv);\n-\n-    // serialize banlist, checksum data up to that point, then append csum\n-    CDataStream ssBanlist(SER_DISK, CLIENT_VERSION);\n-    ssBanlist << FLATDATA(Params().MessageStart());\n-    ssBanlist << banSet;\n-    uint256 hash = Hash(ssBanlist.begin(), ssBanlist.end());\n-    ssBanlist << hash;\n+    std::string tmpfn = strprintf(\"%s.%04x\", prefix, randv);\n \n     // open temp output file, and associate with CAutoFile\n     fs::path pathTmp = GetDataDir() / tmpfn;\n@@ -42,69 +48,41 @@ bool CBanDB::Write(const banmap_t& banSet)\n     if (fileout.IsNull())\n         return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n \n-    // Write and commit header, data\n-    try {\n-        fileout << ssBanlist;\n-    }\n-    catch (const std::exception& e) {\n-        return error(\"%s: Serialize or I/O error - %s\", __func__, e.what());\n-    }\n+    // Serialize\n+    if (!SerializeDB(fileout, data)) return false;\n     FileCommit(fileout.Get());\n     fileout.fclose();\n \n-    // replace existing banlist.dat, if any, with new banlist.dat.XXXX\n-    if (!RenameOver(pathTmp, pathBanlist))\n+    // replace existing file, if any, with new file\n+    if (!RenameOver(pathTmp, path))\n         return error(\"%s: Rename-into-place failed\", __func__);\n \n     return true;\n }\n \n-bool CBanDB::Read(banmap_t& banSet)\n+template <typename Stream, typename Data>\n+bool DeserializeDB(Stream& stream, Data& data, bool fCheckSum = true)\n {\n-    // open input file, and associate with CAutoFile\n-    FILE *file = fsbridge::fopen(pathBanlist, \"rb\");\n-    CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n-    if (filein.IsNull())\n-        return error(\"%s: Failed to open file %s\", __func__, pathBanlist.string());\n-\n-    // use file size to size memory buffer\n-    uint64_t fileSize = fs::file_size(pathBanlist);\n-    uint64_t dataSize = 0;\n-    // Don't try to resize to a negative number if file is small\n-    if (fileSize >= sizeof(uint256))\n-        dataSize = fileSize - sizeof(uint256);\n-    std::vector<unsigned char> vchData;\n-    vchData.resize(dataSize);\n-    uint256 hashIn;\n-\n-    // read data and checksum from file\n-    try {\n-        filein.read((char *)&vchData[0], dataSize);\n-        filein >> hashIn;\n-    }\n-    catch (const std::exception& e) {\n-        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n-    }\n-    filein.fclose();\n-\n-    CDataStream ssBanlist(vchData, SER_DISK, CLIENT_VERSION);\n-\n-    // verify stored checksum matches input data\n-    uint256 hashTmp = Hash(ssBanlist.begin(), ssBanlist.end());\n-    if (hashIn != hashTmp)\n-        return error(\"%s: Checksum mismatch, data corrupted\", __func__);\n-\n-    unsigned char pchMsgTmp[4];\n     try {\n+        CHashVerifier<Stream> verifier(&stream);\n         // de-serialize file header (network specific magic number) and ..\n-        ssBanlist >> FLATDATA(pchMsgTmp);\n-\n+        unsigned char pchMsgTmp[4];\n+        verifier >> FLATDATA(pchMsgTmp);\n         // ... verify the network matches ours\n         if (memcmp(pchMsgTmp, Params().MessageStart(), sizeof(pchMsgTmp)))\n             return error(\"%s: Invalid network magic number\", __func__);\n \n-        // de-serialize ban data\n-        ssBanlist >> banSet;\n+        // de-serialize data\n+        verifier >> data;\n+\n+        // verify checksum\n+        if (fCheckSum) {\n+            uint256 hashTmp;\n+            stream >> hashTmp;\n+            if (hashTmp != verifier.GetHash()) {\n+                return error(\"%s: Checksum mismatch, data corrupted\", __func__);\n+            }\n+        }\n     }\n     catch (const std::exception& e) {\n         return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n@@ -113,106 +91,56 @@ bool CBanDB::Read(banmap_t& banSet)\n     return true;\n }\n \n-CAddrDB::CAddrDB()\n+template <typename Data>\n+bool DeserializeFileDB(const fs::path& path, Data& data)\n {\n-    pathAddr = GetDataDir() / \"peers.dat\";\n+    // open input file, and associate with CAutoFile\n+    FILE *file = fsbridge::fopen(path, \"rb\");\n+    CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n+    if (filein.IsNull())\n+        return error(\"%s: Failed to open file %s\", __func__, path.string());\n+\n+    return DeserializeDB(filein, data);\n }\n \n-bool CAddrDB::Write(const CAddrMan& addr)\n-{\n-    // Generate random temporary filename\n-    unsigned short randv = 0;\n-    GetRandBytes((unsigned char*)&randv, sizeof(randv));\n-    std::string tmpfn = strprintf(\"peers.dat.%04x\", randv);\n+}\n \n-    // serialize addresses, checksum data up to that point, then append csum\n-    CDataStream ssPeers(SER_DISK, CLIENT_VERSION);\n-    ssPeers << FLATDATA(Params().MessageStart());\n-    ssPeers << addr;\n-    uint256 hash = Hash(ssPeers.begin(), ssPeers.end());\n-    ssPeers << hash;\n+CBanDB::CBanDB()\n+{\n+    pathBanlist = GetDataDir() / \"banlist.dat\";\n+}\n \n-    // open temp output file, and associate with CAutoFile\n-    fs::path pathTmp = GetDataDir() / tmpfn;\n-    FILE *file = fsbridge::fopen(pathTmp, \"wb\");\n-    CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n-    if (fileout.IsNull())\n-        return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n+bool CBanDB::Write(const banmap_t& banSet)\n+{\n+    return SerializeFileDB(\"banlist\", pathBanlist, banSet);\n+}\n \n-    // Write and commit header, data\n-    try {\n-        fileout << ssPeers;\n-    }\n-    catch (const std::exception& e) {\n-        return error(\"%s: Serialize or I/O error - %s\", __func__, e.what());\n-    }\n-    FileCommit(fileout.Get());\n-    fileout.fclose();\n+bool CBanDB::Read(banmap_t& banSet)\n+{\n+    return DeserializeFileDB(pathBanlist, banSet);\n+}\n \n-    // replace existing peers.dat, if any, with new peers.dat.XXXX\n-    if (!RenameOver(pathTmp, pathAddr))\n-        return error(\"%s: Rename-into-place failed\", __func__);\n+CAddrDB::CAddrDB()\n+{\n+    pathAddr = GetDataDir() / \"peers.dat\";\n+}\n \n-    return true;\n+bool CAddrDB::Write(const CAddrMan& addr)\n+{\n+    return SerializeFileDB(\"peers\", pathAddr, addr);\n }\n \n bool CAddrDB::Read(CAddrMan& addr)\n {\n-    // open input file, and associate with CAutoFile\n-    FILE *file = fsbridge::fopen(pathAddr, \"rb\");\n-    CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n-    if (filein.IsNull())\n-        return error(\"%s: Failed to open file %s\", __func__, pathAddr.string());\n-\n-    // use file size to size memory buffer\n-    uint64_t fileSize = fs::file_size(pathAddr);\n-    uint64_t dataSize = 0;\n-    // Don't try to resize to a negative number if file is small\n-    if (fileSize >= sizeof(uint256))\n-        dataSize = fileSize - sizeof(uint256);\n-    std::vector<unsigned char> vchData;\n-    vchData.resize(dataSize);\n-    uint256 hashIn;\n-\n-    // read data and checksum from file\n-    try {\n-        filein.read((char *)&vchData[0], dataSize);\n-        filein >> hashIn;\n-    }\n-    catch (const std::exception& e) {\n-        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n-    }\n-    filein.fclose();\n-\n-    CDataStream ssPeers(vchData, SER_DISK, CLIENT_VERSION);\n-\n-    // verify stored checksum matches input data\n-    uint256 hashTmp = Hash(ssPeers.begin(), ssPeers.end());\n-    if (hashIn != hashTmp)\n-        return error(\"%s: Checksum mismatch, data corrupted\", __func__);\n-\n-    return Read(addr, ssPeers);\n+    return DeserializeFileDB(pathAddr, addr);\n }\n \n bool CAddrDB::Read(CAddrMan& addr, CDataStream& ssPeers)\n {\n-    unsigned char pchMsgTmp[4];\n-    try {\n-        // de-serialize file header (network specific magic number) and ..\n-        ssPeers >> FLATDATA(pchMsgTmp);\n-\n-        // ... verify the network matches ours\n-        if (memcmp(pchMsgTmp, Params().MessageStart(), sizeof(pchMsgTmp)))\n-            return error(\"%s: Invalid network magic number\", __func__);\n-\n-        // de-serialize address data into one CAddrMan object\n-        ssPeers >> addr;\n-    }\n-    catch (const std::exception& e) {\n-        // de-serialization has failed, ensure addrman is left in a clean state\n+    bool ret = DeserializeDB(ssPeers, addr, false);\n+    if (!ret) {\n+        // Ensure addrman is left in a clean state\n         addr.Clear();\n-        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n     }\n-\n-    return true;\n+    return ret;\n }"
      },
      {
        "sha": "6cb36dfac4e60ee8512f8dfdac28101aa6ecc48c",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01c4b143a87e255d5fcb0f60f1164291262040c6/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01c4b143a87e255d5fcb0f60f1164291262040c6/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=01c4b143a87e255d5fcb0f60f1164291262040c6",
        "patch": "@@ -85,7 +85,7 @@ class CAddrDB\n     CAddrDB();\n     bool Write(const CAddrMan& addr);\n     bool Read(CAddrMan& addr);\n-    bool Read(CAddrMan& addr, CDataStream& ssPeers);\n+    static bool Read(CAddrMan& addr, CDataStream& ssPeers);\n };\n \n /** Access to the banlist database (banlist.dat) */"
      }
    ]
  },
  {
    "sha": "6270d624cf6bc235b3e47bbbf5d49039fe1e172a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MjcwZDYyNGNmNmJjMjM1YjNlNDdiYmJmNWQ0OTAzOWZlMWUxNzJh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-06-22T17:44:31Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-06-22T17:54:27Z"
      },
      "message": "Verify binaries from bitcoincore.org and bitcoin.org",
      "tree": {
        "sha": "76a6671c69cb2a610ef282a2fda7af9343507adf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76a6671c69cb2a610ef282a2fda7af9343507adf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6270d624cf6bc235b3e47bbbf5d49039fe1e172a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6270d624cf6bc235b3e47bbbf5d49039fe1e172a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6270d624cf6bc235b3e47bbbf5d49039fe1e172a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6270d624cf6bc235b3e47bbbf5d49039fe1e172a/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b750b33c3ceaf370bd90868f727d49d65d216b36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b750b33c3ceaf370bd90868f727d49d65d216b36",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b750b33c3ceaf370bd90868f727d49d65d216b36"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 25,
      "deletions": 6
    },
    "files": [
      {
        "sha": "409f517c9fb2691549a8ff280461d14d1b2e9dd7",
        "filename": "contrib/verifybinaries/verify.sh",
        "status": "modified",
        "additions": 25,
        "deletions": 6,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6270d624cf6bc235b3e47bbbf5d49039fe1e172a/contrib/verifybinaries/verify.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6270d624cf6bc235b3e47bbbf5d49039fe1e172a/contrib/verifybinaries/verify.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.sh?ref=6270d624cf6bc235b3e47bbbf5d49039fe1e172a",
        "patch": "@@ -3,7 +3,8 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-###   This script attempts to download the signature file SHA256SUMS.asc from bitcoin.org\n+###   This script attempts to download the signature file SHA256SUMS.asc from\n+###   bitcoincore.org and bitcoin.org and compares them.\n ###   It first checks if the signature passes, and then downloads the files specified in\n ###   the file, and checks if the hashes of these files match those that are specified\n ###   in the signature file.\n@@ -22,7 +23,9 @@ TMPFILE=\"hashes.tmp\"\n \n SIGNATUREFILENAME=\"SHA256SUMS.asc\"\n RCSUBDIR=\"test\"\n-BASEDIR=\"https://bitcoin.org/bin/\"\n+HOST1=\"https://bitcoincore.org\"\n+HOST2=\"https://bitcoin.org\"\n+BASEDIR=\"/bin/\"\n VERSIONPREFIX=\"bitcoin-core-\"\n RCVERSIONSTRING=\"rc\"\n \n@@ -81,7 +84,7 @@ else\n fi\n \n #first we fetch the file containing the signature\n-WGETOUT=$(wget -N \"$BASEDIR$SIGNATUREFILENAME\" 2>&1)\n+WGETOUT=$(wget -N \"$HOST1$BASEDIR$SIGNATUREFILENAME\" 2>&1)\n \n #and then see if wget completed successfully\n if [ $? -ne 0 ]; then\n@@ -92,6 +95,22 @@ if [ $? -ne 0 ]; then\n    exit 2\n fi\n \n+WGETOUT=$(wget -N -O \"$SIGNATUREFILENAME.2\" \"$HOST2$BASEDIR$SIGNATUREFILENAME\" 2>&1)\n+if [ $? -ne 0 ]; then\n+   echo \"bitcoin.org failed to provide signature file, but bitcoincore.org did?\"\n+   echo \"wget output:\"\n+   echo \"$WGETOUT\"|sed 's/^/\\t/g'\n+   clean_up $SIGNATUREFILENAME\n+   exit 3\n+fi\n+\n+SIGFILEDIFFS=\"$(diff $SIGNATUREFILENAME $SIGNATUREFILENAME.2)\"\n+if [ \"$SIGFILEDIFFS\" != \"\" ]; then\n+   echo \"bitcoin.org and bitcoincore.org signature files were not equal?\"\n+   clean_up $SIGNATUREFILENAME $SIGNATUREFILENAME.2\n+   exit 4\n+fi\n+\n #then we check it\n GPGOUT=$(gpg --yes --decrypt --output \"$TMPFILE\" \"$SIGNATUREFILENAME\" 2>&1)\n \n@@ -111,7 +130,7 @@ if [ $RET -ne 0 ]; then\n \n    echo \"gpg output:\"\n    echo \"$GPGOUT\"|sed 's/^/\\t/g'\n-   clean_up $SIGNATUREFILENAME $TMPFILE\n+   clean_up $SIGNATUREFILENAME $SIGNATUREFILENAME.2 $TMPFILE\n    exit \"$RET\"\n fi\n \n@@ -131,7 +150,7 @@ FILES=$(awk '{print $2}' \"$TMPFILE\")\n for file in $FILES\n do\n    echo \"Downloading $file\"\n-   wget --quiet -N \"$BASEDIR$file\"\n+   wget --quiet -N \"$HOST1$BASEDIR$file\"\n done\n \n #check hashes\n@@ -149,7 +168,7 @@ fi\n \n if [ -n \"$2\" ]; then\n    echo \"Clean up the binaries\"\n-   clean_up $FILES $SIGNATUREFILENAME $TMPFILE\n+   clean_up $FILES $SIGNATUREFILENAME $SIGNATUREFILENAME.2 $TMPFILE\n else\n    echo \"Keep the binaries in $WORKINGDIR\"\n    clean_up $TMPFILE"
      }
    ]
  },
  {
    "sha": "4bc853b50fd9127687eb9e4f3b679dd261a4fa96",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YmM4NTNiNTBmZDkxMjc2ODdlYjllNGYzYjY3OWRkMjYxYTRmYTk2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-06-22T18:16:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-06-22T18:16:20Z"
      },
      "message": "Merge #10636: [qa] util: Check return code after closing bitcoind proc\n\n999923e [qa] util: Check return code after closing bitcoind proc (MarcoFalke)\n\nTree-SHA512: 1aa911e5ce25ef59b006b7f8f25e5eef3c6c31f1b4362564e158ed92dd7804625fccc08be8b98c8c32779b530a8ec988819947692698214e34f5cb1d411c9eda",
      "tree": {
        "sha": "4776683a31484741e172bd75b21d94ea1304f237",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4776683a31484741e172bd75b21d94ea1304f237"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4bc853b50fd9127687eb9e4f3b679dd261a4fa96",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZTAl0AAoJENLqSFDnUoslkuMP/0zwCtSm6jDLrGWlMbWEsWbp\n4EDtN69Eug3oubbB1g8VJsIsGEBDC6ZJ1cGSpzuWGAL0DWv0IMSsRMzDRa+zrHDS\npZ0fBZGbllNawyXJtNjOGK8Z4X1cZHtu60fJHIGTjxYKpQeRoUhyALq11qhgl7Es\noSrMjj69Zv206xk2+cT58wiuMgjjnbWgEExk8bDAtf+SmN6vocB+7rGRM69X94Bx\nAW+slxwKAoi6GUPO91zGWLdBXsgqyylHFO6Wj2MBTW8LttedBGuVTOPxrxFbqnD2\nlTCp6n2AeninWqJ1dyHzoYxG7pMRdS4jmSOntI5opxGB26932PKOpv9x1djNPJUP\nJGjC6lFsCxxZt0dPB2rIi2E4j67VQ3SRZA7hVx1g3zYnycoVGlJoTtBVbY/I+klS\n03mkbHaUulWVD9Oy+A6AlpnaljrMPQWvXYKwoW3lUrBWBLyXFBc7fXcutmPxSVVn\nzQJIirr3Pbbzux/8tZHp8NbPcUR1JLHqRec9z6mUwXbjLVA6BhGvvWz5YCJQDMyg\nigs+u05zYim3y12AVeM3Dw88Qm9r7GcbAgAmrWmKwhUNxT2BtVOCIKN7kyfkSFRj\n1qu5wRo/tMe0LIwdA9Y2vlrt2be04oz3Xu6SKMTNfBAxCrI5cPAwPukamQoYvoZM\nlKTLJGHnd7kdcTdLCnD2\n=P5O5\n-----END PGP SIGNATURE-----",
        "payload": "tree 4776683a31484741e172bd75b21d94ea1304f237\nparent 01c4b143a87e255d5fcb0f60f1164291262040c6\nparent 999923e4bbc62920810d4d149a4938cfd657408a\nauthor MarcoFalke <falke.marco@gmail.com> 1498155373 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1498155380 +0200\n\nMerge #10636: [qa] util: Check return code after closing bitcoind proc\n\n999923e [qa] util: Check return code after closing bitcoind proc (MarcoFalke)\n\nTree-SHA512: 1aa911e5ce25ef59b006b7f8f25e5eef3c6c31f1b4362564e158ed92dd7804625fccc08be8b98c8c32779b530a8ec988819947692698214e34f5cb1d411c9eda\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bc853b50fd9127687eb9e4f3b679dd261a4fa96",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4bc853b50fd9127687eb9e4f3b679dd261a4fa96",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bc853b50fd9127687eb9e4f3b679dd261a4fa96/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "01c4b143a87e255d5fcb0f60f1164291262040c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01c4b143a87e255d5fcb0f60f1164291262040c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01c4b143a87e255d5fcb0f60f1164291262040c6"
      },
      {
        "sha": "999923e4bbc62920810d4d149a4938cfd657408a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/999923e4bbc62920810d4d149a4938cfd657408a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/999923e4bbc62920810d4d149a4938cfd657408a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fa6388bf967f8ebb124eee5de676f1d5b477296c",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4bc853b50fd9127687eb9e4f3b679dd261a4fa96/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4bc853b50fd9127687eb9e4f3b679dd261a4fa96/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=4bc853b50fd9127687eb9e4f3b679dd261a4fa96",
        "patch": "@@ -322,8 +322,8 @@ def _stop_node(node, i):\n     except http.client.CannotSendRequest as e:\n         logger.exception(\"Unable to stop node\")\n     return_code = bitcoind_processes[i].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n-    assert_equal(return_code, 0)\n     del bitcoind_processes[i]\n+    assert_equal(return_code, 0)\n \n def _stop_nodes(nodes):\n     \"\"\"Stop multiple bitcoind test nodes"
      }
    ]
  },
  {
    "sha": "6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmVmN2NhOGJjNmEwODk0ODc1ZWVkZTdjYmIyZjI4ZTc3ZTkxYmQ3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-22T18:36:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-22T18:46:37Z"
      },
      "message": "Merge #10633: doc: Fix various typos\n\n0a5a6b9 Fixed multiple typos (Dimitris Tsapakidis)\n\nTree-SHA512: 57748710bcbc03945b160db5e95bd686a2c64605f25d5e11d8ed9d0e1be3b3bf287a63588dc6eb33d0cef4ff17c765fda7c226d667a357acc539c8fcf2b9bb7e",
      "tree": {
        "sha": "5b210133c46f235eb18c8a1983c2cfd1c49b470a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b210133c46f235eb18c8a1983c2cfd1c49b470a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZTBCNAAoJEB5K7WKYbNJdLh0IAIJ7WcTX0QJqFzP2ZLgBHn5s\nMyVLispxOReWWUO6jytCXaPU11y5oJuyCYoAoUS84DDIAo2zvLPcnJdXXfRO8cXA\nMmOPPulntGfqQnlPTyMFqg+nRvJ9RktH4TvNBi23I4lbZ1opx8hphVdXHo/pH7F+\nmlqov0tde5Mu8AqWMcFhJTbSXe2bJoPObcKTAdqH8clZ69b/0xlOdPolCt7t1sRa\n/4bOhTaDAao2XyWFAxnLLLzQJmz7jQi3xEFTmWtTFBGYfUJJckRwq9G/igY7mx/B\nbjJDvOOA12k15BdnVe/sv+7lac0qk/hIw9zAcKXAU2t8SFecBeN3cbdN+PHPow0=\n=rd1r\n-----END PGP SIGNATURE-----",
        "payload": "tree 5b210133c46f235eb18c8a1983c2cfd1c49b470a\nparent 4bc853b50fd9127687eb9e4f3b679dd261a4fa96\nparent 0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1498156576 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1498157197 +0200\n\nMerge #10633: doc: Fix various typos\n\n0a5a6b9 Fixed multiple typos (Dimitris Tsapakidis)\n\nTree-SHA512: 57748710bcbc03945b160db5e95bd686a2c64605f25d5e11d8ed9d0e1be3b3bf287a63588dc6eb33d0cef4ff17c765fda7c226d667a357acc539c8fcf2b9bb7e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4bc853b50fd9127687eb9e4f3b679dd261a4fa96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bc853b50fd9127687eb9e4f3b679dd261a4fa96",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4bc853b50fd9127687eb9e4f3b679dd261a4fa96"
      },
      {
        "sha": "0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 60,
      "deletions": 60
    },
    "files": [
      {
        "sha": "4ab2f356803a8933edd1fe7b573533281ef7c1f2",
        "filename": "contrib/rpm/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/contrib/rpm/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/contrib/rpm/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/rpm/README.md?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -181,5 +181,5 @@ knows what they are getting when installing the GUI package.\n \n As far as minor differences, I generally prefer to assign the file permissions\n in the `%files` portion of an RPM spec file rather than specifying the\n-permissions of a file during `%install` and other minor things like that that\n+permissions of a file during `%install` and other minor things like that\n are largely just cosmetic."
      },
      {
        "sha": "b206866cc5eb4abc3075f8692637a7096d7f0b0e",
        "filename": "contrib/rpm/bitcoin.if",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/contrib/rpm/bitcoin.if",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/contrib/rpm/bitcoin.if",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/rpm/bitcoin.if?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -121,7 +121,7 @@ interface(`bitcoin_manage_lib_dirs',`\n ########################################\n ## <summary>\n ##\tAll of the rules required to administrate\n-##\tan bitcoin environment\n+##\ta bitcoin environment\n ## </summary>\n ## <param name=\"domain\">\n ##\t<summary>"
      },
      {
        "sha": "a7fb4b4da13d168248ca921cb6339670fbb65cf4",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -287,7 +287,7 @@ General C++\n \n - Assertions should not have side-effects\n \n-  - *Rationale*: Even though the source code is set to to refuse to compile\n+  - *Rationale*: Even though the source code is set to refuse to compile\n     with assertions disabled, having side-effects in assertions is unexpected and\n     makes the code harder to understand\n "
      },
      {
        "sha": "8d4c4e7deab8088c2c7a6bad866106670bd098d1",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -126,7 +126,7 @@ arith_uint256 GetBlockProof(const CBlockIndex& block)\n     if (fNegative || fOverflow || bnTarget == 0)\n         return 0;\n     // We need to compute 2**256 / (bnTarget+1), but we can't represent 2**256\n-    // as it's too large for a arith_uint256. However, as 2**256 is at least as large\n+    // as it's too large for an arith_uint256. However, as 2**256 is at least as large\n     // as bnTarget+1, it is equal to ((2**256 - bnTarget - 1) / (bnTarget+1)) + 1,\n     // or ~bnTarget / (nTarget+1) + 1.\n     return (~bnTarget / (bnTarget + 1)) + 1;"
      },
      {
        "sha": "2e66901b3504b8cc8c5c068c07a781caebf8534d",
        "filename": "src/cuckoocache.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/cuckoocache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/cuckoocache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cuckoocache.h?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -176,15 +176,15 @@ class cache\n      */\n     mutable std::vector<bool> epoch_flags;\n \n-    /** epoch_heuristic_counter is used to determine when a epoch might be aged\n+    /** epoch_heuristic_counter is used to determine when an epoch might be aged\n      * & an expensive scan should be done.  epoch_heuristic_counter is\n      * decremented on insert and reset to the new number of inserts which would\n      * cause the epoch to reach epoch_size when it reaches zero.\n      */\n     uint32_t epoch_heuristic_counter;\n \n     /** epoch_size is set to be the number of elements supposed to be in a\n-     * epoch. When the number of non-erased elements in a epoch\n+     * epoch. When the number of non-erased elements in an epoch\n      * exceeds epoch_size, a new epoch should be started and all\n      * current entries demoted. epoch_size is set to be 45% of size because\n      * we want to keep load around 90%, and we support 3 epochs at once --"
      },
      {
        "sha": "9df56e5fc554926db46af8efcb47dba7869a403f",
        "filename": "src/httpserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -86,7 +86,7 @@ class HTTPRequest\n \n     /**\n      * Get the request header specified by hdr, or an empty string.\n-     * Return an pair (isPresent,string).\n+     * Return a pair (isPresent,string).\n      */\n     std::pair<bool, std::string> GetHeader(const std::string& hdr);\n \n@@ -125,7 +125,7 @@ class HTTPClosure\n     virtual ~HTTPClosure() {}\n };\n \n-/** Event class. This can be used either as an cross-thread trigger or as a timer.\n+/** Event class. This can be used either as a cross-thread trigger or as a timer.\n  */\n class HTTPEvent\n {"
      },
      {
        "sha": "7935a965a7c9fdd62533a8c13c9b6033675066df",
        "filename": "src/leveldb/db/version_set.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/leveldb/db/version_set.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/leveldb/db/version_set.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/version_set.h?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -376,7 +376,7 @@ class Compaction {\n   // Each compaction reads inputs from \"level_\" and \"level_+1\"\n   std::vector<FileMetaData*> inputs_[2];      // The two sets of inputs\n \n-  // State used to check for number of of overlapping grandparent files\n+  // State used to check for number of overlapping grandparent files\n   // (parent == level_ + 1, grandparent == level_ + 2)\n   std::vector<FileMetaData*> grandparents_;\n   size_t grandparent_index_;  // Index in grandparent_starts_"
      },
      {
        "sha": "2029ce37448eb67554db29abd4bdfad833e50b28",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -48,7 +48,7 @@ class TxConfirmStats;\n  * in each bucket and the total amount of feerate paid in each bucket. Then we\n  * calculate how many blocks Y it took each transaction to be mined.  We convert\n  * from a number of blocks to a number of periods Y' each encompassing \"scale\"\n- * blocks.  This is is tracked in 3 different data sets each up to a maximum\n+ * blocks.  This is tracked in 3 different data sets each up to a maximum\n  * number of periods. Within each data set we have an array of counters in each\n  * feerate bucket and we increment all the counters from Y' up to max periods\n  * representing that a tx was successfully confirmed in less than or equal to"
      },
      {
        "sha": "3dfb51ccfa515504c7f4ceb8374d47d2b0ec02d0",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -303,7 +303,7 @@ static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, const CB\n     }\n     // if we are in-sync, update the UI regardless of last update time\n     if (!initialSync || now - nLastUpdateNotification > MODEL_UPDATE_DELAY) {\n-        //pass a async signal to the UI thread\n+        //pass an async signal to the UI thread\n         QMetaObject::invokeMethod(clientmodel, \"numBlocksChanged\", Qt::QueuedConnection,\n                                   Q_ARG(int, pIndex->nHeight),\n                                   Q_ARG(QDateTime, QDateTime::fromTime_t(pIndex->GetBlockTime())),"
      },
      {
        "sha": "af9a888d94f971da1f11ac3864157f3e6dd15e35",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -499,7 +499,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         {\n             // there is some fudging in these numbers related to the actual virtual transaction size calculation that will keep this estimate from being exact.\n             // usually, the result will be an overestimate within a couple of satoshis so that the confirmation dialog ends up displaying a slightly smaller fee.\n-            // also, the witness stack size value value is a variable sized integer. usually, the number of stack items will be well under the single byte var int limit.\n+            // also, the witness stack size value is a variable sized integer. usually, the number of stack items will be well under the single byte var int limit.\n             nBytes += 2; // account for the serialized marker and flag bytes\n             nBytes += nQuantity; // account for the witness byte that holds the number of stack items for each input.\n         }"
      },
      {
        "sha": "14078b9ee810503a326b2d212d001e1777c8316c",
        "filename": "src/qt/forms/optionsdialog.ui",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/qt/forms/optionsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/qt/forms/optionsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/optionsdialog.ui?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -315,7 +315,7 @@\n             <bool>false</bool>\n            </property>\n            <property name=\"toolTip\">\n-            <string>Shows, if the supplied default SOCKS5 proxy is used to reach peers via this network type.</string>\n+            <string>Shows if the supplied default SOCKS5 proxy is used to reach peers via this network type.</string>\n            </property>\n            <property name=\"text\">\n             <string/>\n@@ -338,7 +338,7 @@\n             <bool>false</bool>\n            </property>\n            <property name=\"toolTip\">\n-            <string>Shows, if the supplied default SOCKS5 proxy is used to reach peers via this network type.</string>\n+            <string>Shows if the supplied default SOCKS5 proxy is used to reach peers via this network type.</string>\n            </property>\n            <property name=\"text\">\n             <string/>\n@@ -361,7 +361,7 @@\n             <bool>false</bool>\n            </property>\n            <property name=\"toolTip\">\n-            <string>Shows, if the supplied default SOCKS5 proxy is used to reach peers via this network type.</string>\n+            <string>Shows if the supplied default SOCKS5 proxy is used to reach peers via this network type.</string>\n            </property>\n            <property name=\"text\">\n             <string/>"
      },
      {
        "sha": "a83f285034fdb8b30330800c28e5913fc6b42fd4",
        "filename": "src/qt/modaloverlay.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/qt/modaloverlay.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/qt/modaloverlay.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.cpp?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -126,7 +126,7 @@ void ModalOverlay::tipUpdate(int count, const QDateTime& blockDate, double nVeri\n         return;\n \n     // estimate the number of headers left based on nPowTargetSpacing\n-    // and check if the gui is not aware of the the best header (happens rarely)\n+    // and check if the gui is not aware of the best header (happens rarely)\n     int estimateNumHeadersLeft = bestHeaderDate.secsTo(currentDate) / Params().GetConsensus().nPowTargetSpacing;\n     bool hasBestHeader = bestHeaderHeight >= count;\n "
      },
      {
        "sha": "ec0580b81c24404cd4b664bde411573404f04f11",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -672,7 +672,7 @@ void RPCConsole::setFontSize(int newSize)\n {\n     QSettings settings;\n \n-    //don't allow a insane font size\n+    //don't allow an insane font size\n     if (newSize < FONT_RANGE.width() || newSize > FONT_RANGE.height())\n         return;\n \n@@ -738,7 +738,7 @@ void RPCConsole::clear(bool clearHistory)\n                         tr(\"Use up and down arrows to navigate history, and %1 to clear screen.\").arg(\"<b>\"+clsKey+\"</b>\") + \"<br>\" +\n                         tr(\"Type <b>help</b> for an overview of available commands.\")) +\n                         \"<br><span class=\\\"secwarning\\\">\" +\n-                        tr(\"WARNING: Scammers have been active, telling users to type commands here, stealing their wallet contents. Do not use this console without fully understanding the ramification of a command.\") +\n+                        tr(\"WARNING: Scammers have been active, telling users to type commands here, stealing their wallet contents. Do not use this console without fully understanding the ramifications of a command.\") +\n                         \"</span>\",\n                         true);\n }"
      },
      {
        "sha": "6538a80233c9acc342dcbf13915075631be091d8",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -339,7 +339,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n         transaction_array.append(&(ssTx[0]), ssTx.size());\n     }\n \n-    // Add addresses / update labels that we've sent to to the address book,\n+    // Add addresses / update labels that we've sent to the address book,\n     // and emit coinsSent signal for each recipient\n     for (const SendCoinsRecipient &rcp : transaction.getRecipients())\n     {"
      },
      {
        "sha": "33e3fb4529833d3eb14e89e486e9019206c4c420",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -413,7 +413,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n         boost::split(uriParts, strUriParams, boost::is_any_of(\"/\"));\n     }\n \n-    // throw exception in case of a empty request\n+    // throw exception in case of an empty request\n     std::string strRequestMutable = req->ReadBody();\n     if (strRequestMutable.length() == 0 && uriParts.size() == 0)\n         return RESTERR(req, HTTP_BAD_REQUEST, \"Error: empty request\");"
      },
      {
        "sha": "aecedb48b2c635db0af5cd4344888552bae9255e",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -75,7 +75,7 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n             \"[\\n\"\n             \"  {\\n\"\n             \"    \\\"id\\\": n,                   (numeric) Peer index\\n\"\n-            \"    \\\"addr\\\":\\\"host:port\\\",      (string) The ip address and port of the peer\\n\"\n+            \"    \\\"addr\\\":\\\"host:port\\\",      (string) The IP address and port of the peer\\n\"\n             \"    \\\"addrbind\\\":\\\"ip:port\\\",    (string) Bind address of the connection to the peer\\n\"\n             \"    \\\"addrlocal\\\":\\\"ip:port\\\",   (string) Local address as reported by the peer\\n\"\n             \"    \\\"services\\\":\\\"xxxxxxxxxxxxxxxx\\\",   (string) The services offered\\n\"\n@@ -199,7 +199,7 @@ UniValue addnode(const JSONRPCRequest& request)\n         (strCommand != \"onetry\" && strCommand != \"add\" && strCommand != \"remove\"))\n         throw std::runtime_error(\n             \"addnode \\\"node\\\" \\\"add|remove|onetry\\\"\\n\"\n-            \"\\nAttempts add or remove a node from the addnode list.\\n\"\n+            \"\\nAttempts to add or remove a node from the addnode list.\\n\"\n             \"Or try a connection to a node once.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"node\\\"     (string, required) The node (see getpeerinfo for nodes)\\n\"\n@@ -290,7 +290,7 @@ UniValue getaddednodeinfo(const JSONRPCRequest& request)\n             \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  {\\n\"\n-            \"    \\\"addednode\\\" : \\\"192.168.0.201\\\",   (string) The node ip address or name (as provided to addnode)\\n\"\n+            \"    \\\"addednode\\\" : \\\"192.168.0.201\\\",   (string) The node IP address or name (as provided to addnode)\\n\"\n             \"    \\\"connected\\\" : true|false,          (boolean) If connected\\n\"\n             \"    \\\"addresses\\\" : [                    (list of objects) Only when connected = true\\n\"\n             \"       {\\n\"\n@@ -497,12 +497,12 @@ UniValue setban(const JSONRPCRequest& request)\n         (strCommand != \"add\" && strCommand != \"remove\"))\n         throw std::runtime_error(\n                             \"setban \\\"subnet\\\" \\\"add|remove\\\" (bantime) (absolute)\\n\"\n-                            \"\\nAttempts add or remove a IP/Subnet from the banned list.\\n\"\n+                            \"\\nAttempts to add or remove an IP/Subnet from the banned list.\\n\"\n                             \"\\nArguments:\\n\"\n-                            \"1. \\\"subnet\\\"       (string, required) The IP/Subnet (see getpeerinfo for nodes ip) with a optional netmask (default is /32 = single ip)\\n\"\n-                            \"2. \\\"command\\\"      (string, required) 'add' to add a IP/Subnet to the list, 'remove' to remove a IP/Subnet from the list\\n\"\n-                            \"3. \\\"bantime\\\"      (numeric, optional) time in seconds how long (or until when if [absolute] is set) the ip is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\\n\"\n-                            \"4. \\\"absolute\\\"     (boolean, optional) If set, the bantime must be a absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+                            \"1. \\\"subnet\\\"       (string, required) The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)\\n\"\n+                            \"2. \\\"command\\\"      (string, required) 'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list\\n\"\n+                            \"3. \\\"bantime\\\"      (numeric, optional) time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\\n\"\n+                            \"4. \\\"absolute\\\"     (boolean, optional) If set, the bantime must be an absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\\n\"\n                             \"\\nExamples:\\n\"\n                             + HelpExampleCli(\"setban\", \"\\\"192.168.0.6\\\" \\\"add\\\" 86400\")\n                             + HelpExampleCli(\"setban\", \"\\\"192.168.0.0/24\\\" \\\"add\\\"\")"
      },
      {
        "sha": "5198724bea15360d7c680e76ba8d0b2d3ef75641",
        "filename": "src/secp256k1/sage/group_prover.sage",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/secp256k1/sage/group_prover.sage",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/secp256k1/sage/group_prover.sage",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/sage/group_prover.sage?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -3,7 +3,7 @@\n # to independently set assumptions on input or intermediary variables.\n #\n # The general approach is:\n-# * A constraint is a tuple of two sets of of symbolic expressions:\n+# * A constraint is a tuple of two sets of symbolic expressions:\n #   the first of which are required to evaluate to zero, the second of which\n #   are required to evaluate to nonzero.\n #   - A constraint is said to be conflicting if any of its nonzero expressions"
      },
      {
        "sha": "bd2b629e1c2e9b9699533bc598fa7759918e0645",
        "filename": "src/secp256k1/src/asm/field_10x26_arm.s",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/secp256k1/src/asm/field_10x26_arm.s",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/secp256k1/src/asm/field_10x26_arm.s",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/asm/field_10x26_arm.s?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -11,7 +11,7 @@ Note:\n \n - To avoid unnecessary loads and make use of available registers, two\n   'passes' have every time been interleaved, with the odd passes accumulating c' and d' \n-  which will be added to c and d respectively in the the even passes\n+  which will be added to c and d respectively in the even passes\n \n */\n "
      },
      {
        "sha": "2c98fbcfd67efa8da6fec19070934611c1770369",
        "filename": "src/test/arith_uint256_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/test/arith_uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/test/arith_uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/arith_uint256_tests.cpp?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -219,7 +219,7 @@ BOOST_AUTO_TEST_CASE( unaryOperators ) // !    ~    -\n \n \n // Check if doing _A_ _OP_ _B_ results in the same as applying _OP_ onto each\n-// element of Aarray and Barray, and then converting the result into a arith_uint256.\n+// element of Aarray and Barray, and then converting the result into an arith_uint256.\n #define CHECKBITWISEOPERATOR(_A_,_B_,_OP_)                              \\\n     for (unsigned int i = 0; i < 32; ++i) { TmpArray[i] = _A_##Array[i] _OP_ _B_##Array[i]; } \\\n     BOOST_CHECK(arith_uint256V(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (_A_##L _OP_ _B_##L));"
      },
      {
        "sha": "0390d6806d2bb687190bb08e0afe9352a045c397",
        "filename": "src/test/data/script_tests.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -2506,7 +2506,7 @@\n ],\n \n [\"CHECKSEQUENCEVERIFY tests\"],\n-[\"\", \"CHECKSEQUENCEVERIFY\", \"CHECKSEQUENCEVERIFY\", \"INVALID_STACK_OPERATION\", \"CSV automatically fails on a empty stack\"],\n+[\"\", \"CHECKSEQUENCEVERIFY\", \"CHECKSEQUENCEVERIFY\", \"INVALID_STACK_OPERATION\", \"CSV automatically fails on an empty stack\"],\n [\"-1\", \"CHECKSEQUENCEVERIFY\", \"CHECKSEQUENCEVERIFY\", \"NEGATIVE_LOCKTIME\", \"CSV automatically fails if stack top is negative\"],\n [\"0x0100\", \"CHECKSEQUENCEVERIFY\", \"CHECKSEQUENCEVERIFY,MINIMALDATA\", \"UNKNOWN_ERROR\", \"CSV fails if stack top is not minimally encoded\"],\n [\"0\", \"CHECKSEQUENCEVERIFY\", \"CHECKSEQUENCEVERIFY\", \"UNSATISFIED_LOCKTIME\", \"CSV fails if stack top bit 1 << 31 is set and the tx version < 2\"],"
      },
      {
        "sha": "e6b382af13e70b8466eb935d5aaac65eab1f9b05",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -174,7 +174,7 @@\n [[[\"5a6b0021a6042a686b6b94abc36b387bef9109847774e8b1e51eb8cc55c53921\", 1, \"DUP HASH160 0x14 0xee5a6aa40facefb2655ac23c0c28c57c65c41f9b EQUALVERIFY CHECKSIG\"]],\n \"01000000012139c555ccb81ee5b1e87477840991ef7b386bc3ab946b6b682a04a621006b5a01000000fdb40148304502201723e692e5f409a7151db386291b63524c5eb2030df652b1f53022fd8207349f022100b90d9bbf2f3366ce176e5e780a00433da67d9e5c79312c6388312a296a5800390148304502201723e692e5f409a7151db386291b63524c5eb2030df652b1f53022fd8207349f022100b90d9bbf2f3366ce176e5e780a00433da67d9e5c79312c6388312a296a5800390121038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f2204148304502201723e692e5f409a7151db386291b63524c5eb2030df652b1f53022fd8207349f022100b90d9bbf2f3366ce176e5e780a00433da67d9e5c79312c6388312a296a5800390175ac4830450220646b72c35beeec51f4d5bc1cbae01863825750d7f490864af354e6ea4f625e9c022100f04b98432df3a9641719dbced53393022e7249fb59db993af1118539830aab870148304502201723e692e5f409a7151db386291b63524c5eb2030df652b1f53022fd8207349f022100b90d9bbf2f3366ce176e5e780a00433da67d9e5c79312c6388312a296a580039017521038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f22041ffffffff010000000000000000016a00000000\", \"P2SH\"],\n \n-[\"Finally CHECKMULTISIG removes all signatures prior to hashing the script containing those signatures. In conjunction with the SIGHASH_SINGLE bug this lets us test whether or not FindAndDelete() is actually present in scriptPubKey/redeemScript evaluation by including a signature of the digest 0x01 We can compute in advance for our pubkey, embed it it in the scriptPubKey, and then also using a normal SIGHASH_ALL signature. If FindAndDelete() wasn't run, the 'bugged' signature would still be in the hashed script, and the normal signature would fail.\"],\n+[\"Finally CHECKMULTISIG removes all signatures prior to hashing the script containing those signatures. In conjunction with the SIGHASH_SINGLE bug this lets us test whether or not FindAndDelete() is actually present in scriptPubKey/redeemScript evaluation by including a signature of the digest 0x01 We can compute in advance for our pubkey, embed it in the scriptPubKey, and then also using a normal SIGHASH_ALL signature. If FindAndDelete() wasn't run, the 'bugged' signature would still be in the hashed script, and the normal signature would fail.\"],\n \n [\"Here's an example on mainnet within a P2SH redeemScript. Remarkably it's a standard transaction in <0.9\"],\n [[[\"b5b598de91787439afd5938116654e0b16b7a0d0f82742ba37564219c5afcbf9\", 0, \"DUP HASH160 0x14 0xf6f365c40f0739b61de827a44751e5e99032ed8f EQUALVERIFY CHECKSIG\"],"
      },
      {
        "sha": "4cd64bf0281f15fc371dcf6ae9e1777527f135d4",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -407,7 +407,7 @@ static bool WriteBinaryFile(const fs::path &filename, const std::string &data)\n /****** Bitcoin specific TorController implementation ********/\n \n /** Controller that connects to Tor control socket, authenticate, then create\n- * and maintain a ephemeral hidden service.\n+ * and maintain an ephemeral hidden service.\n  */\n class TorController\n {"
      },
      {
        "sha": "f49fd391da6493c791e78b086b98d73322afa092",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -122,7 +122,7 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     // accounted for in the state of their ancestors)\n     std::set<uint256> setAlreadyIncluded(vHashesToUpdate.begin(), vHashesToUpdate.end());\n \n-    // Iterate in reverse, so that whenever we are looking at at a transaction\n+    // Iterate in reverse, so that whenever we are looking at a transaction\n     // we are sure that all in-mempool descendants have already been processed.\n     // This maximizes the benefit of the descendant cache and guarantees that\n     // setMemPoolChildren will be updated, an assumption made in"
      },
      {
        "sha": "93abaec04b1090a25680daf8c2db74c209ad6e97",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -437,7 +437,7 @@ bool ParseInt32(const std::string& str, int32_t *out)\n     errno = 0; // strtol will not set errno if valid\n     long int n = strtol(str.c_str(), &endp, 10);\n     if(out) *out = (int32_t)n;\n-    // Note that strtol returns a *long int*, so even if strtol doesn't report a over/underflow\n+    // Note that strtol returns a *long int*, so even if strtol doesn't report an over/underflow\n     // we still have to check that the returned value is within the range of an *int32_t*. On 64-bit\n     // platforms the size of these types may be different.\n     return endp && *endp == 0 && !errno &&\n@@ -453,7 +453,7 @@ bool ParseInt64(const std::string& str, int64_t *out)\n     errno = 0; // strtoll will not set errno if valid\n     long long int n = strtoll(str.c_str(), &endp, 10);\n     if(out) *out = (int64_t)n;\n-    // Note that strtoll returns a *long long int*, so even if strtol doesn't report a over/underflow\n+    // Note that strtoll returns a *long long int*, so even if strtol doesn't report an over/underflow\n     // we still have to check that the returned value is within the range of an *int64_t*.\n     return endp && *endp == 0 && !errno &&\n         n >= std::numeric_limits<int64_t>::min() &&\n@@ -470,7 +470,7 @@ bool ParseUInt32(const std::string& str, uint32_t *out)\n     errno = 0; // strtoul will not set errno if valid\n     unsigned long int n = strtoul(str.c_str(), &endp, 10);\n     if(out) *out = (uint32_t)n;\n-    // Note that strtoul returns a *unsigned long int*, so even if it doesn't report a over/underflow\n+    // Note that strtoul returns a *unsigned long int*, so even if it doesn't report an over/underflow\n     // we still have to check that the returned value is within the range of an *uint32_t*. On 64-bit\n     // platforms the size of these types may be different.\n     return endp && *endp == 0 && !errno &&\n@@ -487,7 +487,7 @@ bool ParseUInt64(const std::string& str, uint64_t *out)\n     errno = 0; // strtoull will not set errno if valid\n     unsigned long long int n = strtoull(str.c_str(), &endp, 10);\n     if(out) *out = (uint64_t)n;\n-    // Note that strtoull returns a *unsigned long long int*, so even if it doesn't report a over/underflow\n+    // Note that strtoull returns a *unsigned long long int*, so even if it doesn't report an over/underflow\n     // we still have to check that the returned value is within the range of an *uint64_t*.\n     return endp && *endp == 0 && !errno &&\n         n <= std::numeric_limits<uint64_t>::max();"
      },
      {
        "sha": "59542e8f983d3a7ab30db2bb8892f2e1a43b4063",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -1209,7 +1209,7 @@ static bool CheckInputs(const CTransaction& tx, CValidationState &state, const C\n                             return state.Invalid(false, REJECT_NONSTANDARD, strprintf(\"non-mandatory-script-verify-flag (%s)\", ScriptErrorString(check.GetScriptError())));\n                     }\n                     // Failures of other flags indicate a transaction that is\n-                    // invalid in new blocks, e.g. a invalid P2SH. We DoS ban\n+                    // invalid in new blocks, e.g. an invalid P2SH. We DoS ban\n                     // such nodes as they are not following the protocol. That\n                     // said during an upgrade careful thought should be taken\n                     // as to the correct behavior - we may want to continue"
      },
      {
        "sha": "09aaf4f74706c61231b40b4f8f5cc163d0bcda43",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -1049,7 +1049,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             \"      \\\"redeemscript\\\": \\\"<script>\\\"                            , (string, optional) Allowed only if the scriptPubKey is a P2SH address or a P2SH scriptPubKey\\n\"\n             \"      \\\"pubkeys\\\": [\\\"<pubKey>\\\", ... ]                         , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript\\n\"\n             \"      \\\"keys\\\": [\\\"<key>\\\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript\\n\"\n-            \"      \\\"internal\\\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be be treated as not incoming payments\\n\"\n+            \"      \\\"internal\\\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be treated as not incoming payments\\n\"\n             \"      \\\"watchonly\\\": <true>                                   , (boolean, optional, default: false) Stating whether matching outputs should be considered watched even when they're not spendable, only allowed if keys are empty\\n\"\n             \"      \\\"label\\\": <label>                                      , (string, optional, default: '') Label to assign to the address (aka account name, for now), only allowed with internal=false\\n\"\n             \"    }\\n\""
      },
      {
        "sha": "f07a6cb5a50d86d793c56a7aaf2fe88b01832a36",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -3841,11 +3841,11 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n     else if (IsArgSet(\"-usehd\")) {\n         bool useHD = GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET);\n         if (walletInstance->IsHDEnabled() && !useHD) {\n-            InitError(strprintf(_(\"Error loading %s: You can't disable HD on a already existing HD wallet\"), walletFile));\n+            InitError(strprintf(_(\"Error loading %s: You can't disable HD on an already existing HD wallet\"), walletFile));\n             return NULL;\n         }\n         if (!walletInstance->IsHDEnabled() && useHD) {\n-            InitError(strprintf(_(\"Error loading %s: You can't enable HD on a already existing non-HD wallet\"), walletFile));\n+            InitError(strprintf(_(\"Error loading %s: You can't enable HD on an already existing non-HD wallet\"), walletFile));\n             return NULL;\n         }\n     }\n@@ -3865,7 +3865,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n     if (chainActive.Tip() && chainActive.Tip() != pindexRescan)\n     {\n         //We can't rescan beyond non-pruned blocks, stop and throw an error\n-        //this might happen if a user uses a old wallet within a pruned node\n+        //this might happen if a user uses an old wallet within a pruned node\n         // or if he ran -disablewallet for a longer time, then decided to re-enable\n         if (fPruneMode)\n         {"
      },
      {
        "sha": "569db7ced5b1d23b4e1ff07d5fd8974d8c894fda",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -10,7 +10,7 @@\n This module consists of around a dozen individual test cases implemented in the\n top-level functions named as test_<test_case_description>. The test functions\n can be disabled or reordered if needed for debugging. If new test cases are\n-added in the the future, they should try to follow the same convention and not\n+added in the future, they should try to follow the same convention and not\n make assumptions about execution order.\n \"\"\"\n "
      },
      {
        "sha": "0af91e0658904fc5422922642d80e946fd7e4313",
        "filename": "test/functional/pruning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/test/functional/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/test/functional/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/pruning.py?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -318,7 +318,7 @@ def wallet_test(self):\n         self.nodes[2] = self.start_node(2, self.options.tmpdir, [\"-prune=550\"])\n         self.log.info(\"Success\")\n \n-        # check that wallet loads loads successfully when restarting a pruned node after IBD.\n+        # check that wallet loads successfully when restarting a pruned node after IBD.\n         # this was reported to fail in #7494.\n         self.log.info(\"Syncing node 5 to test wallet\")\n         connect_nodes(self.nodes[0], 5)"
      },
      {
        "sha": "a69dbb501333a58e3a8372c316fc9023768ae155",
        "filename": "test/functional/rest.py",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/test/functional/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/test/functional/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rest.py?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -82,9 +82,9 @@ def run_test(self):\n                 n = vout['n']\n \n \n-        ######################################\n-        # GETUTXOS: query a unspent outpoint #\n-        ######################################\n+        #######################################\n+        # GETUTXOS: query an unspent outpoint #\n+        #######################################\n         json_request = '/checkmempool/'+txid+'-'+str(n)\n         json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n         json_obj = json.loads(json_string)\n@@ -97,9 +97,9 @@ def run_test(self):\n         assert_equal(json_obj['utxos'][0]['value'], 0.1)\n \n \n-        ################################################\n-        # GETUTXOS: now query a already spent outpoint #\n-        ################################################\n+        #################################################\n+        # GETUTXOS: now query an already spent outpoint #\n+        #################################################\n         json_request = '/checkmempool/'+vintx+'-0'\n         json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n         json_obj = json.loads(json_string)\n@@ -161,24 +161,24 @@ def run_test(self):\n         json_request = '/'+txid+'-'+str(n)\n         json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n         json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 0) #there should be a outpoint because it has just added to the mempool\n+        assert_equal(len(json_obj['utxos']), 0) #there should be an outpoint because it has just added to the mempool\n \n         json_request = '/checkmempool/'+txid+'-'+str(n)\n         json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n         json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 1) #there should be a outpoint because it has just added to the mempool\n+        assert_equal(len(json_obj['utxos']), 1) #there should be an outpoint because it has just added to the mempool\n \n         #do some invalid requests\n         json_request = '{\"checkmempool'\n         response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'json', json_request, True)\n-        assert_equal(response.status, 400) #must be a 400 because we send a invalid json request\n+        assert_equal(response.status, 400) #must be a 400 because we send an invalid json request\n \n         json_request = '{\"checkmempool'\n         response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'bin', json_request, True)\n-        assert_equal(response.status, 400) #must be a 400 because we send a invalid bin request\n+        assert_equal(response.status, 400) #must be a 400 because we send an invalid bin request\n \n         response = http_post_call(url.hostname, url.port, '/rest/getutxos/checkmempool'+self.FORMAT_SEPARATOR+'bin', '', True)\n-        assert_equal(response.status, 400) #must be a 400 because we send a invalid bin request\n+        assert_equal(response.status, 400) #must be a 400 because we send an invalid bin request\n \n         #test limits\n         json_request = '/checkmempool/'"
      },
      {
        "sha": "bc42a319df79dc061a89eab78351911972c6f087",
        "filename": "test/functional/smartfees.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/test/functional/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/test/functional/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/smartfees.py?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -10,7 +10,7 @@\n from test_framework.mininode import CTransaction, CTxIn, CTxOut, COutPoint, ToHex, COIN\n \n # Construct 2 trivial P2SH's and the ScriptSigs that spend them\n-# So we can create many many transactions without needing to spend\n+# So we can create many transactions without needing to spend\n # time signing.\n redeem_script_1 = CScript([OP_1, OP_DROP])\n redeem_script_2 = CScript([OP_2, OP_DROP])"
      },
      {
        "sha": "688347a68ff53db386e8bbec62e091627ca4c43e",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -61,7 +61,7 @@\n \n # One lock for synchronizing all data access between the networking thread (see\n # NetworkThread below) and the thread running the test logic.  For simplicity,\n-# NodeConn acquires this lock whenever delivering a message to to a NodeConnCB,\n+# NodeConn acquires this lock whenever delivering a message to a NodeConnCB,\n # and whenever adding anything to the send buffer (in send_message()).  This\n # lock should be acquired in the thread running the test logic to synchronize\n # access to any data shared with the NodeConnCB or NodeConn."
      },
      {
        "sha": "e4d40520ef6361e62cdcd50eb6f5147b574ef4c8",
        "filename": "test/functional/zapwallettxes.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/test/functional/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7/test/functional/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zapwallettxes.py?ref=6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "patch": "@@ -70,7 +70,7 @@ def run_test (self):\n         self.nodes[0] = self.start_node(0,self.options.tmpdir, [\"-zapwallettxes=1\"])\n         \n         assert_raises(JSONRPCException, self.nodes[0].gettransaction, [txid3])\n-        #there must be a expection because the unconfirmed wallettx0 must be gone by now\n+        #there must be an exception because the unconfirmed wallettx0 must be gone by now\n \n         tx0 = self.nodes[0].gettransaction(txid0)\n         assert_equal(tx0['txid'], txid0) #tx0 (confirmed) must still be available because it was confirmed"
      }
    ]
  },
  {
    "sha": "8c2098ad120913776421bf670aadf69b01c534bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzIwOThhZDEyMDkxMzc3NjQyMWJmNjcwYWFkZjY5YjAxYzUzNGJm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-22T18:49:54Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-22T18:57:11Z"
      },
      "message": "Merge #10565: [coverage] Remove subtrees and benchmarks from coverage report\n\nd5711f4 Filter subtrees and and benchmarks from coverage report (Andrew Chow)\n405b86a Replace lcov -r commands with faster way (Andrew Chow)\nc8914b9 Have `make cov` optionally include branch coverage statistics (Andrew Chow)\n\nTree-SHA512: 9c349a7baeb7430ea586617c52f91177df58e3546d6dc573e26815ddb79e30ab1873542d85ac1daca5e1fb2c6d6c8965824b42d027b6b0496a744af57b095852",
      "tree": {
        "sha": "c91e5e6109c15dd6baf40a02f5425fe6c78fc9ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c91e5e6109c15dd6baf40a02f5425fe6c78fc9ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c2098ad120913776421bf670aadf69b01c534bf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZTBMHAAoJEB5K7WKYbNJdlH4H/jHK6bElx09WZmPrqxQNlTVb\n/mtPttKRGRPYVR6vdiYYm9pMkaaoAffw91EF2sfUlEzIohmPELMpwouKKhhlLr3I\nw7T17IXZy56jUhUFzKNvBGt/bWOltVMU3FWDeUkjBonDitIlbpdzb6lKpZd9hSwP\nM+oi7wgwMw7HOpjV9yf2uuQplPQ4pQjLMldKBnFgEF+KUBbztvZreQ41j9hfrlBS\nI46Lw39nCy35KSue/kqLSQW3Y66jaWOGiVrjzFuOW8/UjnkZ9xLV7UpkRKg8y7b1\nD9Fp+WvsSH/G6qf60CrMpUtep8jThokLvlRcCuX8iBpXJgBsD5HKgdoVZAVB7EI=\n=t0Rk\n-----END PGP SIGNATURE-----",
        "payload": "tree c91e5e6109c15dd6baf40a02f5425fe6c78fc9ba\nparent 6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7\nparent d5711f4a2d59adc45755b13e3776b9d36e1c55f5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1498157394 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1498157831 +0200\n\nMerge #10565: [coverage] Remove subtrees and benchmarks from coverage report\n\nd5711f4 Filter subtrees and and benchmarks from coverage report (Andrew Chow)\n405b86a Replace lcov -r commands with faster way (Andrew Chow)\nc8914b9 Have `make cov` optionally include branch coverage statistics (Andrew Chow)\n\nTree-SHA512: 9c349a7baeb7430ea586617c52f91177df58e3546d6dc573e26815ddb79e30ab1873542d85ac1daca5e1fb2c6d6c8965824b42d027b6b0496a744af57b095852\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c2098ad120913776421bf670aadf69b01c534bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c2098ad120913776421bf670aadf69b01c534bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c2098ad120913776421bf670aadf69b01c534bf/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6bef7ca8bc6a0894875eede7cbb2f28e77e91bd7"
      },
      {
        "sha": "d5711f4a2d59adc45755b13e3776b9d36e1c55f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5711f4a2d59adc45755b13e3776b9d36e1c55f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d5711f4a2d59adc45755b13e3776b9d36e1c55f5"
      }
    ],
    "stats": {
      "total": 100,
      "additions": 71,
      "deletions": 29
    },
    "files": [
      {
        "sha": "8216b7d60811bc01573622eaa5f12a856d6e53e8",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 22,
        "deletions": 29,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c2098ad120913776421bf670aadf69b01c534bf/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c2098ad120913776421bf670aadf69b01c534bf/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=8c2098ad120913776421bf670aadf69b01c534bf",
        "patch": "@@ -59,10 +59,10 @@ OSX_PACKAGING = $(OSX_DEPLOY_SCRIPT) $(OSX_FANCY_PLIST) $(OSX_INSTALLER_ICONS) \\\n   $(top_srcdir)/contrib/macdeploy/detached-sig-apply.sh \\\n   $(top_srcdir)/contrib/macdeploy/detached-sig-create.sh\n \n-COVERAGE_INFO = baseline_filtered_combined.info baseline.info \\\n-  leveldb_baseline.info test_bitcoin_filtered.info total_coverage.info \\\n+COVERAGE_INFO = baseline.info \\\n+  test_bitcoin_filtered.info total_coverage.info \\\n   baseline_filtered.info functional_test.info functional_test_filtered.info \\\n-  leveldb_baseline_filtered.info test_bitcoin_coverage.info test_bitcoin.info\n+  test_bitcoin_coverage.info test_bitcoin.info\n \n dist-hook:\n \t-$(GIT) archive --format=tar HEAD -- src/clientversion.cpp | $(AMTAR) -C $(top_distdir) -xf -\n@@ -166,52 +166,45 @@ $(BITCOIN_CLI_BIN): FORCE\n \t$(MAKE) -C src $(@F)\n \n if USE_LCOV\n+LCOV_FILTER_PATTERN=-p \"/usr/include/\" -p \"src/leveldb/\" -p \"src/bench/\" -p \"src/univalue\" -p \"src/crypto/ctaes\" -p \"src/secp256k1\"\n \n baseline.info:\n \t$(LCOV) -c -i -d $(abs_builddir)/src -o $@\n \n baseline_filtered.info: baseline.info\n-\t$(LCOV) -r $< \"/usr/include/*\" -o $@\n+\t$(abs_builddir)/contrib/filter-lcov.py $(LCOV_FILTER_PATTERN) $< $@\n+\t$(LCOV) -a $@ $(LCOV_OPTS) -o $@\n \n-leveldb_baseline.info: baseline_filtered.info\n-\t$(LCOV) -c -i -d $(abs_builddir)/src/leveldb -b $(abs_builddir)/src/leveldb -o $@\n-\n-leveldb_baseline_filtered.info: leveldb_baseline.info\n-\t$(LCOV) -r $< \"/usr/include/*\" -o $@\n-\n-baseline_filtered_combined.info: leveldb_baseline_filtered.info baseline_filtered.info\n-\t$(LCOV) -a leveldb_baseline_filtered.info -a baseline_filtered.info -o $@\n-\n-test_bitcoin.info: baseline_filtered_combined.info\n+test_bitcoin.info: baseline_filtered.info\n \t$(MAKE) -C src/ check\n-\t$(LCOV) -c -d $(abs_builddir)/src -t test_bitcoin -o $@\n-\t$(LCOV) -z -d $(abs_builddir)/src\n-\t$(LCOV) -z -d $(abs_builddir)/src/leveldb\n+\t$(LCOV) -c $(LCOV_OPTS) -d $(abs_builddir)/src -t test_bitcoin -o $@\n+\t$(LCOV) -z $(LCOV_OPTS) -d $(abs_builddir)/src\n \n test_bitcoin_filtered.info: test_bitcoin.info\n-\t$(LCOV) -r $< \"/usr/include/*\" -o $@\n+\t$(abs_builddir)/contrib/filter-lcov.py $(LCOV_FILTER_PATTERN) $< $@\n+\t$(LCOV) -a $@ $(LCOV_OPTS) -o $@\n \n functional_test.info: test_bitcoin_filtered.info\n-\t-@TIMEOUT=15 python test/functional/test_runner.py $(EXTENDED_FUNCTIONAL_TESTS)\n-\t$(LCOV) -c -d $(abs_builddir)/src --t functional-tests -o $@\n-\t$(LCOV) -z -d $(abs_builddir)/src\n-\t$(LCOV) -z -d $(abs_builddir)/src/leveldb\n+\t-@TIMEOUT=15 test/functional/test_runner.py $(EXTENDED_FUNCTIONAL_TESTS)\n+\t$(LCOV) -c $(LCOV_OPTS) -d $(abs_builddir)/src --t functional-tests -o $@\n+\t$(LCOV) -z $(LCOV_OPTS) -d $(abs_builddir)/src\n \n functional_test_filtered.info: functional_test.info\n-\t$(LCOV) -r $< \"/usr/include/*\" -o $@\n+\t$(abs_builddir)/contrib/filter-lcov.py $(LCOV_FILTER_PATTERN) $< $@\n+\t$(LCOV) -a $@ $(LCOV_OPTS) -o $@\n \n-test_bitcoin_coverage.info: baseline_filtered_combined.info test_bitcoin_filtered.info\n-\t$(LCOV) -a baseline_filtered.info -a leveldb_baseline_filtered.info -a test_bitcoin_filtered.info -o $@\n+test_bitcoin_coverage.info: baseline_filtered.info test_bitcoin_filtered.info\n+\t$(LCOV) -a $(LCOV_OPTS) baseline_filtered.info -a test_bitcoin_filtered.info -o $@\n \n-total_coverage.info: baseline_filtered_combined.info test_bitcoin_filtered.info functional_test_filtered.info\n-\t$(LCOV) -a baseline_filtered.info -a leveldb_baseline_filtered.info -a test_bitcoin_filtered.info -a functional_test_filtered.info -o $@ | $(GREP) \"\\%\" | $(AWK) '{ print substr($$3,2,50) \"/\" $$5 }' > coverage_percent.txt\n+total_coverage.info: test_bitcoin_filtered.info functional_test_filtered.info\n+\t$(LCOV) -a $(LCOV_OPTS) baseline_filtered.info -a test_bitcoin_filtered.info -a functional_test_filtered.info -o $@ | $(GREP) \"\\%\" | $(AWK) '{ print substr($$3,2,50) \"/\" $$5 }' > coverage_percent.txt\n \n test_bitcoin.coverage/.dirstamp:  test_bitcoin_coverage.info\n-\t$(GENHTML) -s $< -o $(@D)\n+\t$(GENHTML) -s $(LCOV_OPTS) $< -o $(@D)\n \t@touch $@\n \n total.coverage/.dirstamp: total_coverage.info\n-\t$(GENHTML) -s $< -o $(@D)\n+\t$(GENHTML) -s $(LCOV_OPTS) $< -o $(@D)\n \t@touch $@\n \n cov: test_bitcoin.coverage/.dirstamp total.coverage/.dirstamp"
      },
      {
        "sha": "a90063d9dedc4909648f68e6adb42609f3698f5a",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c2098ad120913776421bf670aadf69b01c534bf/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c2098ad120913776421bf670aadf69b01c534bf/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=8c2098ad120913776421bf670aadf69b01c534bf",
        "patch": "@@ -158,6 +158,12 @@ AC_ARG_ENABLE([lcov],\n   [enable lcov testing (default is no)])],\n   [use_lcov=yes],\n   [use_lcov=no])\n+  \n+AC_ARG_ENABLE([lcov-branch-coverage],\n+  [AS_HELP_STRING([--enable-lcov-branch-coverage],\n+  [enable lcov testing branch coverage (default is no)])],\n+  [use_lcov_branch=yes],\n+  [use_lcov_branch=no])\n \n AC_ARG_ENABLE([glibc-back-compat],\n   [AS_HELP_STRING([--enable-glibc-back-compat],\n@@ -442,6 +448,12 @@ if test x$use_lcov = xyes; then\n     [AC_MSG_ERROR(\"lcov testing requested but --coverage linker flag does not work\")])\n   AX_CHECK_COMPILE_FLAG([--coverage],[CXXFLAGS=\"$CXXFLAGS --coverage\"],\n     [AC_MSG_ERROR(\"lcov testing requested but --coverage flag does not work\")])\n+  AC_DEFINE(USE_COVERAGE, 1, [Define this symbol if coverage is enabled])\n+  CXXFLAGS=\"$CXXFLAGS -Og\"\n+fi\n+\n+if test x$use_lcov_branch != xno; then\n+  AC_SUBST(LCOV_OPTS, \"$LCOV_OPTS --rc lcov_branch_coverage=1\")\n fi\n \n dnl Check for endianness"
      },
      {
        "sha": "299377d691155308875fb95fe5b7f49f9e8d50dc",
        "filename": "contrib/filter-lcov.py",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c2098ad120913776421bf670aadf69b01c534bf/contrib/filter-lcov.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c2098ad120913776421bf670aadf69b01c534bf/contrib/filter-lcov.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/filter-lcov.py?ref=8c2098ad120913776421bf670aadf69b01c534bf",
        "patch": "@@ -0,0 +1,25 @@\n+#!/usr/bin/env python3\n+\n+import argparse\n+\n+parser = argparse.ArgumentParser(description='Remove the coverage data from a tracefile for all files matching the pattern.')\n+parser.add_argument('--pattern', '-p', action='append', help='the pattern of files to remove', required=True)\n+parser.add_argument('tracefile', help='the tracefile to remove the coverage data from')\n+parser.add_argument('outfile', help='filename for the output to be written to')\n+\n+args = parser.parse_args()\n+tracefile = args.tracefile\n+pattern = args.pattern\n+outfile = args.outfile\n+\n+in_remove = False\n+with open(tracefile, 'r') as f:\n+    with open(outfile, 'w') as wf:\n+        for line in f:\n+            for p in pattern:\n+                if line.startswith(\"SF:\") and p in line:\n+                    in_remove = True\n+            if not in_remove:\n+                wf.write(line)\n+            if line == 'end_of_record\\n':\n+                in_remove = False"
      },
      {
        "sha": "a4d7aa4db82b6ad94a8cbb3192f11423e3fa8d7f",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c2098ad120913776421bf670aadf69b01c534bf/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c2098ad120913776421bf670aadf69b01c534bf/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=8c2098ad120913776421bf670aadf69b01c534bf",
        "patch": "@@ -122,6 +122,17 @@ int LogPrintStr(const std::string &str);\n /** Get format string from VA_ARGS for error reporting */\n template<typename... Args> std::string FormatStringFromLogArgs(const char *fmt, const Args&... args) { return fmt; }\n \n+static inline void MarkUsed() {}\n+template<typename T, typename... Args> static inline void MarkUsed(const T& t, const Args&... args)\n+{\n+    (void)t;\n+    MarkUsed(args...);\n+}\n+\n+#ifdef USE_COVERAGE\n+#define LogPrintf(...) do { MarkUsed(__VA_ARGS__); } while(0)\n+#define LogPrint(category, ...) do { MarkUsed(__VA_ARGS__); } while(0)\n+#else\n #define LogPrintf(...) do { \\\n     std::string _log_msg_; /* Unlikely name to avoid shadowing variables */ \\\n     try { \\\n@@ -138,6 +149,7 @@ template<typename... Args> std::string FormatStringFromLogArgs(const char *fmt,\n         LogPrintf(__VA_ARGS__); \\\n     } \\\n } while(0)\n+#endif\n \n template<typename... Args>\n bool error(const char* fmt, const Args&... args)"
      }
    ]
  },
  {
    "sha": "d5c7c1cfe3090775bf30dee531d511801926c18b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNWM3YzFjZmUzMDkwNzc1YmYzMGRlZTUzMWQ1MTE4MDE5MjZjMThi",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-06-21T19:45:20Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-06-22T19:21:22Z"
      },
      "message": "net: use an internal address for fixed seeds",
      "tree": {
        "sha": "21a4316bfbcd0b5a3ffd525f71bd7ff9eebf023c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21a4316bfbcd0b5a3ffd525f71bd7ff9eebf023c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d5c7c1cfe3090775bf30dee531d511801926c18b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5c7c1cfe3090775bf30dee531d511801926c18b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d5c7c1cfe3090775bf30dee531d511801926c18b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5c7c1cfe3090775bf30dee531d511801926c18b/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6cdc488e3604267b1e115da5c50ffb970cd30084",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cdc488e3604267b1e115da5c50ffb970cd30084",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6cdc488e3604267b1e115da5c50ffb970cd30084"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cd9e0d05d91827464ded50d8536121120ff4f63c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5c7c1cfe3090775bf30dee531d511801926c18b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5c7c1cfe3090775bf30dee531d511801926c18b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d5c7c1cfe3090775bf30dee531d511801926c18b",
        "patch": "@@ -1718,7 +1718,7 @@ void CConnman::ThreadOpenConnections()\n             if (!done) {\n                 LogPrintf(\"Adding fixed seed nodes as DNS doesn't seem to be available.\\n\");\n                 CNetAddr local;\n-                LookupHost(\"127.0.0.1\", local, false);\n+                local.SetInternal(\"fixedseeds\");\n                 addrman.Add(convertSeed6(Params().FixedSeeds()), local);\n                 done = true;\n             }"
      }
    ]
  },
  {
    "sha": "c1be28536467e90ce75eaa7d8c338f6485c4bee5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMWJlMjg1MzY0NjdlOTBjZTc1ZWFhN2Q4YzMzOGY2NDg1YzRiZWU1",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-06-22T19:13:58Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-06-22T19:21:22Z"
      },
      "message": "chainparams: make supported service bits option explicit",
      "tree": {
        "sha": "16ec606a5fad8418fa8fedab06e86b4790df76aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16ec606a5fad8418fa8fedab06e86b4790df76aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1be28536467e90ce75eaa7d8c338f6485c4bee5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1be28536467e90ce75eaa7d8c338f6485c4bee5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1be28536467e90ce75eaa7d8c338f6485c4bee5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1be28536467e90ce75eaa7d8c338f6485c4bee5/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d5c7c1cfe3090775bf30dee531d511801926c18b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5c7c1cfe3090775bf30dee531d511801926c18b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d5c7c1cfe3090775bf30dee531d511801926c18b"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "dc4d2621ee0422dd01791031d0bd142439c69f23",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1be28536467e90ce75eaa7d8c338f6485c4bee5/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1be28536467e90ce75eaa7d8c338f6485c4bee5/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=c1be28536467e90ce75eaa7d8c338f6485c4bee5",
        "patch": "@@ -126,7 +126,7 @@ class CMainParams : public CChainParams {\n         // Note that of those with the service bits flag, most only support a subset of possible options\n         vSeeds.emplace_back(\"seed.bitcoin.sipa.be\", true); // Pieter Wuille, only supports x1, x5, x9, and xd\n         vSeeds.emplace_back(\"dnsseed.bluematt.me\", true); // Matt Corallo, only supports x9\n-        vSeeds.emplace_back(\"dnsseed.bitcoin.dashjr.org\"); // Luke Dashjr\n+        vSeeds.emplace_back(\"dnsseed.bitcoin.dashjr.org\", false); // Luke Dashjr\n         vSeeds.emplace_back(\"seed.bitcoinstats.com\", true); // Christian Decker, supports x1 - xf\n         vSeeds.emplace_back(\"seed.bitcoin.jonasschnelli.ch\", true); // Jonas Schnelli, only supports x1, x5, x9, and xd\n         vSeeds.emplace_back(\"seed.btc.petertodd.org\", true); // Peter Todd, only supports x1, x5, x9, and xd\n@@ -227,8 +227,8 @@ class CTestNetParams : public CChainParams {\n         // nodes with support for servicebits filtering should be at the top\n         vSeeds.emplace_back(\"testnet-seed.bitcoin.jonasschnelli.ch\", true);\n         vSeeds.emplace_back(\"seed.tbtc.petertodd.org\", true);\n-        vSeeds.emplace_back(\"testnet-seed.bluematt.me\");\n-        vSeeds.emplace_back(\"testnet-seed.bitcoin.schildbach.de\");\n+        vSeeds.emplace_back(\"testnet-seed.bluematt.me\", false);\n+        vSeeds.emplace_back(\"testnet-seed.bitcoin.schildbach.de\", false);\n \n         base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,111);\n         base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,196);"
      },
      {
        "sha": "f55ae4cf7f068f8884f976c7a6c431bb7a778bcb",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1be28536467e90ce75eaa7d8c338f6485c4bee5/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1be28536467e90ce75eaa7d8c338f6485c4bee5/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=c1be28536467e90ce75eaa7d8c338f6485c4bee5",
        "patch": "@@ -17,7 +17,7 @@\n struct CDNSSeedData {\n     std::string host;\n     bool supportsServiceBitsFiltering;\n-    CDNSSeedData(const std::string &strHost, bool supportsServiceBitsFilteringIn = false) : host(strHost), supportsServiceBitsFiltering(supportsServiceBitsFilteringIn) {}\n+    CDNSSeedData(const std::string &strHost, bool supportsServiceBitsFilteringIn) : host(strHost), supportsServiceBitsFiltering(supportsServiceBitsFilteringIn) {}\n };\n \n struct SeedSpec6 {"
      }
    ]
  },
  {
    "sha": "92fb8bd81fb5e71116f648e6cc149ad27357f2a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmZiOGJkODFmYjVlNzExMTZmNjQ4ZTZjYzE0OWFkMjczNTdmMmE3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-06-22T19:40:48Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-06-22T19:40:48Z"
      },
      "message": "Slightly overhaul NSI pixmaps",
      "tree": {
        "sha": "e193ce5ef2d876b7692250a8b8841a5a04ae48cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e193ce5ef2d876b7692250a8b8841a5a04ae48cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92fb8bd81fb5e71116f648e6cc149ad27357f2a7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAllMHUIACgkQHrd2uwPH\nki33fQ//ZH9wk8jS/toQROoHQT+Yfmg06fi+dPjpoXOmaA3yG7Ue1CONJ3EP6ykZ\nAFYP6ax65WOthQ2MaQlDG2WfBM1jNDSbqR0TJx03PpjDWUlud5aMo/Gaa0L3yDXr\nItYAHMzPqzssoRiBe4TQUfiyugNLHjvmmNpbtXhnLm8cdKtAnn5dLh9fLK2cDfS3\njHHfCmAClHbGaxgE5a4NYpBo1Ka4vc0ZzfayYZtDE6pt5cEIfxKw/F3xCDbky5o7\nBIRZTkRUMTx8a+hEOIaXvFVKJdAPUCGuw15Lx4/yjEGd377tu/J5dw/7Ohslbc5+\nm0jpoie2B6boq9F38AbGjJxYHbyPQ0Jm1Alx3kIS15YXuIRSthpPpib4HL81yWOO\n3fYX9aLV3dzw2HuKPJu/9SMowwFl/4XBQuMoBAjM711q5Ti/r2+WmeaYVfESw77R\nWDtAsdLlZBUqWZ/iyhwxCD3nEr7U9WiKBe8DVne0kh3MUasnnOUeC9i6i0v67212\nbdjmA+DKKyhtl9c8mwN6t4rNWGXHoVokaQXWZDYSbqEc9jEsZQTd+aXGld29FCQD\na/KFqmUA4rwTXsskXgzArP8M/NqTRloNDdJisfhP10jwheZIv1Nh9HG9FHZI+fkw\n+1uEER4mW8hBtAmMdRzoh6A4IacEryNLlVw1QMY3Pb9umw5oOyA=\n=z52y\n-----END PGP SIGNATURE-----",
        "payload": "tree e193ce5ef2d876b7692250a8b8841a5a04ae48cd\nparent d083bd9b9c5249f21b8b7e4abd7aee48a25806b1\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1498160448 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1498160448 +0200\n\nSlightly overhaul NSI pixmaps\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92fb8bd81fb5e71116f648e6cc149ad27357f2a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92fb8bd81fb5e71116f648e6cc149ad27357f2a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92fb8bd81fb5e71116f648e6cc149ad27357f2a7/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d083bd9b9c5249f21b8b7e4abd7aee48a25806b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d083bd9b9c5249f21b8b7e4abd7aee48a25806b1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d083bd9b9c5249f21b8b7e4abd7aee48a25806b1"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f54e249a0c1e77003e93d9f9a0f1325caa859e42",
        "filename": "share/pixmaps/nsis-header.bmp",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fb8bd81fb5e71116f648e6cc149ad27357f2a7/share/pixmaps/nsis-header.bmp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fb8bd81fb5e71116f648e6cc149ad27357f2a7/share/pixmaps/nsis-header.bmp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/pixmaps/nsis-header.bmp?ref=92fb8bd81fb5e71116f648e6cc149ad27357f2a7"
      },
      {
        "sha": "14349528853f1198bfdbf7f9f180a5618820ef76",
        "filename": "share/pixmaps/nsis-wizard.bmp",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fb8bd81fb5e71116f648e6cc149ad27357f2a7/share/pixmaps/nsis-wizard.bmp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fb8bd81fb5e71116f648e6cc149ad27357f2a7/share/pixmaps/nsis-wizard.bmp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/pixmaps/nsis-wizard.bmp?ref=92fb8bd81fb5e71116f648e6cc149ad27357f2a7"
      }
    ]
  },
  {
    "sha": "5b2be2b787f26ce8a87b742890e43b02cc4779d1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjJiZTJiNzg3ZjI2Y2U4YTg3Yjc0Mjg5MGU0M2IwMmNjNDc3OWQx",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-06-22T21:14:40Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-06-22T21:14:40Z"
      },
      "message": "Make CWallet::RescanFromTime comment less ambiguous",
      "tree": {
        "sha": "5b09a4485248a64a8ed3370d633e65018b3ba6de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b09a4485248a64a8ed3370d633e65018b3ba6de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b2be2b787f26ce8a87b742890e43b02cc4779d1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b2be2b787f26ce8a87b742890e43b02cc4779d1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b2be2b787f26ce8a87b742890e43b02cc4779d1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b2be2b787f26ce8a87b742890e43b02cc4779d1/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9bb66ab66013fc3024fad00bceeb22a330b5bc1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bb66ab66013fc3024fad00bceeb22a330b5bc1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bb66ab66013fc3024fad00bceeb22a330b5bc1b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d65a31ee913b76ba6346617ff62a884a6c29654a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b2be2b787f26ce8a87b742890e43b02cc4779d1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b2be2b787f26ce8a87b742890e43b02cc4779d1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5b2be2b787f26ce8a87b742890e43b02cc4779d1",
        "patch": "@@ -1468,7 +1468,7 @@ void CWalletTx::GetAmounts(std::list<COutputEntry>& listReceived,\n  * creation time minus TIMESTAMP_WINDOW.\n  *\n  * @return Earliest timestamp that could be successfully scanned from. Timestamp\n- * returned may be higher than startTime if some blocks could not be read.\n+ * returned will be higher than startTime if relevant blocks could not be read.\n  */\n int64_t CWallet::RescanFromTime(int64_t startTime, bool update)\n {"
      }
    ]
  },
  {
    "sha": "deaf48b046e573f6774d19e74b58918ed777cb14",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZWFmNDhiMDQ2ZTU3M2Y2Nzc0ZDE5ZTc0YjU4OTE4ZWQ3NzdjYjE0",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-06-22T21:16:24Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-06-22T21:16:24Z"
      },
      "message": "Handle TIMESTAMP_WINDOW within CWallet::RescanFromTime\n\nThis way CWallet::RescanFromTime callers don't need to subtract\nTIMESTAMP_WINDOW themselves.\n\nThis is pure refactoring, there is no change in behavior.",
      "tree": {
        "sha": "53ce45e371b51b474fbde5a09cef25efa12bdd57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53ce45e371b51b474fbde5a09cef25efa12bdd57"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/deaf48b046e573f6774d19e74b58918ed777cb14",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deaf48b046e573f6774d19e74b58918ed777cb14",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/deaf48b046e573f6774d19e74b58918ed777cb14",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deaf48b046e573f6774d19e74b58918ed777cb14/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b2be2b787f26ce8a87b742890e43b02cc4779d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b2be2b787f26ce8a87b742890e43b02cc4779d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b2be2b787f26ce8a87b742890e43b02cc4779d1"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "d8fdbd39172a2230a833c45d4f2bf733cd764bd7",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deaf48b046e573f6774d19e74b58918ed777cb14/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deaf48b046e573f6774d19e74b58918ed777cb14/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=deaf48b046e573f6774d19e74b58918ed777cb14",
        "patch": "@@ -537,7 +537,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n     file.close();\n     pwallet->ShowProgress(\"\", 100); // hide progress dialog in GUI\n     pwallet->UpdateTimeFirstKey(nTimeBegin);\n-    pwallet->RescanFromTime(nTimeBegin - TIMESTAMP_WINDOW, false /* update */);\n+    pwallet->RescanFromTime(nTimeBegin, false /* update */);\n     pwallet->MarkDirty();\n \n     if (!fGood)\n@@ -1113,10 +1113,10 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     }\n \n     if (fRescan && fRunScan && requests.size()) {\n-        int64_t scannedTime = pwallet->RescanFromTime(nLowestTimestamp - TIMESTAMP_WINDOW, true /* update */);\n+        int64_t scannedTime = pwallet->RescanFromTime(nLowestTimestamp, true /* update */);\n         pwallet->ReacceptWalletTransactions();\n \n-        if (scannedTime > nLowestTimestamp - TIMESTAMP_WINDOW) {\n+        if (scannedTime > nLowestTimestamp) {\n             std::vector<UniValue> results = response.getValues();\n             response.clear();\n             response.setArray();\n@@ -1126,7 +1126,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n                 // range, or if the import result already has an error set, let\n                 // the result stand unmodified. Otherwise replace the result\n                 // with an error message.\n-                if (scannedTime <= GetImportTimestamp(request, now) - TIMESTAMP_WINDOW || results.at(i).exists(\"error\")) {\n+                if (scannedTime <= GetImportTimestamp(request, now) || results.at(i).exists(\"error\")) {\n                     response.push_back(results.at(i));\n                 } else {\n                     UniValue result = UniValue(UniValue::VOBJ);\n@@ -1142,7 +1142,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n                                       \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n                                       \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n                                       \"and -rescan options).\",\n-                                GetImportTimestamp(request, now), scannedTime - 1, TIMESTAMP_WINDOW)));\n+                                GetImportTimestamp(request, now), scannedTime - TIMESTAMP_WINDOW - 1, TIMESTAMP_WINDOW)));\n                     response.push_back(std::move(result));\n                 }\n                 ++i;"
      },
      {
        "sha": "a4197caeb6ec65c577065c0931c63a9abf13423f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deaf48b046e573f6774d19e74b58918ed777cb14/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deaf48b046e573f6774d19e74b58918ed777cb14/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=deaf48b046e573f6774d19e74b58918ed777cb14",
        "patch": "@@ -1465,7 +1465,7 @@ void CWalletTx::GetAmounts(std::list<COutputEntry>& listReceived,\n /**\n  * Scan active chain for relevant transactions after importing keys. This should\n  * be called whenever new keys are added to the wallet, with the oldest key\n- * creation time minus TIMESTAMP_WINDOW.\n+ * creation time.\n  *\n  * @return Earliest timestamp that could be successfully scanned from. Timestamp\n  * returned will be higher than startTime if relevant blocks could not be read.\n@@ -1478,13 +1478,13 @@ int64_t CWallet::RescanFromTime(int64_t startTime, bool update)\n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs\n     // to be scanned.\n-    CBlockIndex* const startBlock = chainActive.FindEarliestAtLeast(startTime);\n+    CBlockIndex* const startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n     LogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n \n     if (startBlock) {\n         const CBlockIndex* const failedBlock = ScanForWalletTransactions(startBlock, update);\n         if (failedBlock) {\n-            return failedBlock->GetBlockTimeMax() + 1;\n+            return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n         }\n     }\n     return startTime;"
      }
    ]
  },
  {
    "sha": "fab1fb737b826c01fca4c10f3416cd84a8eca970",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWIxZmI3MzdiODI2YzAxZmNhNGMxMGYzNDE2Y2Q4NGE4ZWNhOTcw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-06-23T07:17:18Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-06-23T07:17:13Z"
      },
      "message": "[qa] blockchain: Pass on closed connection during generate call",
      "tree": {
        "sha": "918536775103e3b414e612ce294d667f8e39feba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/918536775103e3b414e612ce294d667f8e39feba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab1fb737b826c01fca4c10f3416cd84a8eca970",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab1fb737b826c01fca4c10f3416cd84a8eca970",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab1fb737b826c01fca4c10f3416cd84a8eca970",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab1fb737b826c01fca4c10f3416cd84a8eca970/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c68a9a69278aa194fed96bd9733d32af3690a11e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c68a9a69278aa194fed96bd9733d32af3690a11e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c68a9a69278aa194fed96bd9733d32af3690a11e"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 7,
      "deletions": 2
    },
    "files": [
      {
        "sha": "eeef05efd22a11b539902dd7a2964b19d3d4123c",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab1fb737b826c01fca4c10f3416cd84a8eca970/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab1fb737b826c01fca4c10f3416cd84a8eca970/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=fab1fb737b826c01fca4c10f3416cd84a8eca970",
        "patch": "@@ -18,6 +18,7 @@\n \"\"\"\n \n from decimal import Decimal\n+import http.client\n import subprocess\n \n from test_framework.test_framework import BitcoinTestFramework\n@@ -28,6 +29,7 @@\n     assert_is_hex_string,\n     assert_is_hash_string,\n     bitcoind_processes,\n+    BITCOIND_PROC_WAIT_TIMEOUT,\n )\n \n \n@@ -140,9 +142,12 @@ def _test_stopatheight(self):\n         assert_equal(self.nodes[0].getblockcount(), 206)\n         self.log.debug('Node should not stop at this height')\n         assert_raises(subprocess.TimeoutExpired, lambda: bitcoind_processes[0].wait(timeout=3))\n-        self.nodes[0].generate(1)\n+        try:\n+            self.nodes[0].generate(1)\n+        except (ConnectionError, http.client.BadStatusLine):\n+            pass  # The node already shut down before response\n         self.log.debug('Node should stop at this height...')\n-        bitcoind_processes[0].wait(timeout=3)\n+        bitcoind_processes[0].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n         self.nodes[0] = self.start_node(0, self.options.tmpdir)\n         assert_equal(self.nodes[0].getblockcount(), 207)\n "
      }
    ]
  },
  {
    "sha": "e2921405dff1331d0a1ba6a2e97b2cc23992e72a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMjkyMTQwNWRmZjEzMzFkMGExYmE2YTJlOTdiMmNjMjM5OTJlNzJh",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-06-23T08:44:05Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-06-23T08:44:09Z"
      },
      "message": "Merge #10644: Slightly overhaul NSI pixmaps\n\n92fb8bd81 Slightly overhaul NSI pixmaps (Jonas Schnelli)\n\nTree-SHA512: d10508e38c37d63a1a1f0f640a402f24c9d4a4e94b603752c4e48b51ad7d2cbd12267a1ab038af69b9a519293ee57bce7c2c4236fec4031ca789cf2f20fdb863",
      "tree": {
        "sha": "f65b9b49adde08bccc1783cdccd64fd65ba32b77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f65b9b49adde08bccc1783cdccd64fd65ba32b77"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2921405dff1331d0a1ba6a2e97b2cc23992e72a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAllM1NkACgkQHrd2uwPH\nki1DWA//bWjplCzK37xzCutLBQo9tRItHgnAuBNE7U4pTBdWe/n4XhDmF65tbLrp\noX31WnV8TPLU3VSNN5CnHg+R3CO6BbxqLjjD7ZRndZArsx9QY103KfAvjXu0+B3K\nRI7Eat6IOapEz9iC1nvo19s7aF3xpmntUeb5RUF53Nf7o/6/APIsufxtPKLa70xU\n4kcGrCijnFPqwXBd9cu8eXs0Qz+nHF1qJWeudECGK62s1XU1eVlkLseFLw/FVcLE\nJUXcxBAge350PuL251eVkYlEAxAFm8jhVIV5RfxU7C1kkIsn9A5bDVvEnrNNoEOU\n7JWl+CqyG118JEs63hT9KNa6ep/WS2tF3LNzPXhd7OhtWxXn8FR8ZaRgaig99hal\n/T84iXmj4rHN3hR47+REfrPbFT1e4Y7uLWeaRh+JI9r5by00+o6UI/RHOgNBWG/B\nCkC4vLEPUHTbBU55nZMjI3X0HejZ7pJMYVDo2n0rwRN341NOHVE30NHDus9JDKvd\n2JZeRWKastz1SRIBLzFnCXQeUWvK/kpfyMKAEDlGsD8uOpSHT15u1yzM2VYzPVnX\nu3o1WXN86zOiiHaKlGNd9Rx+17rjApLiKmtBvBTHO0WJh0y8gWK65ZBFpZ2WC4JH\nh0yN3U/4QS11Gyx9TOI1xk8PWjftJ8f8XdR7TsCiZWolZBdlJXQ=\n=4+SG\n-----END PGP SIGNATURE-----",
        "payload": "tree f65b9b49adde08bccc1783cdccd64fd65ba32b77\nparent 8c2098ad120913776421bf670aadf69b01c534bf\nparent 92fb8bd81fb5e71116f648e6cc149ad27357f2a7\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1498207445 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1498207449 +0200\n\nMerge #10644: Slightly overhaul NSI pixmaps\n\n92fb8bd81 Slightly overhaul NSI pixmaps (Jonas Schnelli)\n\nTree-SHA512: d10508e38c37d63a1a1f0f640a402f24c9d4a4e94b603752c4e48b51ad7d2cbd12267a1ab038af69b9a519293ee57bce7c2c4236fec4031ca789cf2f20fdb863\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2921405dff1331d0a1ba6a2e97b2cc23992e72a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2921405dff1331d0a1ba6a2e97b2cc23992e72a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2921405dff1331d0a1ba6a2e97b2cc23992e72a/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c2098ad120913776421bf670aadf69b01c534bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c2098ad120913776421bf670aadf69b01c534bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c2098ad120913776421bf670aadf69b01c534bf"
      },
      {
        "sha": "92fb8bd81fb5e71116f648e6cc149ad27357f2a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92fb8bd81fb5e71116f648e6cc149ad27357f2a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92fb8bd81fb5e71116f648e6cc149ad27357f2a7"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f54e249a0c1e77003e93d9f9a0f1325caa859e42",
        "filename": "share/pixmaps/nsis-header.bmp",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2921405dff1331d0a1ba6a2e97b2cc23992e72a/share/pixmaps/nsis-header.bmp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2921405dff1331d0a1ba6a2e97b2cc23992e72a/share/pixmaps/nsis-header.bmp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/pixmaps/nsis-header.bmp?ref=e2921405dff1331d0a1ba6a2e97b2cc23992e72a"
      },
      {
        "sha": "14349528853f1198bfdbf7f9f180a5618820ef76",
        "filename": "share/pixmaps/nsis-wizard.bmp",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2921405dff1331d0a1ba6a2e97b2cc23992e72a/share/pixmaps/nsis-wizard.bmp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2921405dff1331d0a1ba6a2e97b2cc23992e72a/share/pixmaps/nsis-wizard.bmp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/pixmaps/nsis-wizard.bmp?ref=e2921405dff1331d0a1ba6a2e97b2cc23992e72a"
      }
    ]
  },
  {
    "sha": "5155d1101eb4fc9d4d797b583bb29f71807bd10b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTU1ZDExMDFlYjRmYzlkNGQ3OTdiNTgzYmIyOWY3MTgwN2JkMTBi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-06-23T21:18:44Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-06-23T21:21:10Z"
      },
      "message": "Initialize randomness in benchmarks\n\nCall RandomInit() in bench_bitcoin to initialize the RNG so that it\ndoes not cause an assertion error.",
      "tree": {
        "sha": "322409a43d8b3dd3be0033d39aa2cd83d56f984d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/322409a43d8b3dd3be0033d39aa2cd83d56f984d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5155d1101eb4fc9d4d797b583bb29f71807bd10b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5155d1101eb4fc9d4d797b583bb29f71807bd10b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5155d1101eb4fc9d4d797b583bb29f71807bd10b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5155d1101eb4fc9d4d797b583bb29f71807bd10b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2921405dff1331d0a1ba6a2e97b2cc23992e72a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2921405dff1331d0a1ba6a2e97b2cc23992e72a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2921405dff1331d0a1ba6a2e97b2cc23992e72a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "226861aa7f745a5edb94155ef17dd86494537fd9",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5155d1101eb4fc9d4d797b583bb29f71807bd10b/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5155d1101eb4fc9d4d797b583bb29f71807bd10b/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=5155d1101eb4fc9d4d797b583bb29f71807bd10b",
        "patch": "@@ -7,10 +7,12 @@\n #include \"key.h\"\n #include \"validation.h\"\n #include \"util.h\"\n+#include \"random.h\"\n \n int\n main(int argc, char** argv)\n {\n+    RandomInit();\n     ECC_Start();\n     SetupEnvironment();\n     fPrintToDebugLog = false; // don't want to write to debug.log file"
      }
    ]
  },
  {
    "sha": "8c841a31a91ffe7e449c4733d14664b79cb39378",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Yzg0MWEzMWE5MWZmZTdlNDQ5YzQ3MzNkMTQ2NjRiNzljYjM5Mzc4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-24T08:11:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-24T08:16:32Z"
      },
      "message": "Merge #10626: doc: Remove outdated minrelaytxfee comment\n\nfab9b60 doc: Remove outdated minrelaytxfee comment (MarcoFalke)\n\nTree-SHA512: e36c5a554a9773f034c2d358c52a772688009a5a71dfd3f664d9b5566c98378f44ef7c6dc0902b42d69ab5fd54b60d4850a2903823d0b2309c7ae063d1923f7f",
      "tree": {
        "sha": "2ffff29482272c1ee577c5500a32ab9c557f9534",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ffff29482272c1ee577c5500a32ab9c557f9534"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c841a31a91ffe7e449c4733d14664b79cb39378",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZTh/gAAoJEB5K7WKYbNJdhkEH+wer4bQfThrEgxDYba8BeBg3\nDj3TdH3O/OySJhvYOHKRw8ujpcRcSE+VDI6YC2DxZFyDfmfm6ACMMMxAHsD9eT2H\nsTGOewE6L1A0cXsTjlnCuKVj0GDDslWK9ECE8wHfouVRBusqSOnL41p8Hz58og/v\nwpOR9H0wxgYkSgwrdOa7AaAjXCahaiMRqMSN2DAveT98JQFgto3X39DnhFYdWtMF\nDY9PHRArhqrrdPsguQuPXDCYUUVpyodgWgnkPtllRWd+Ds39h3uD7h7NbFlzlwaI\nGBaUrOcxhWEaEgoV9PFxOtl97ekhRFi4eLkNbAbBpYxTL4jBYW2WPjZBkuJFGKw=\n=EVgb\n-----END PGP SIGNATURE-----",
        "payload": "tree 2ffff29482272c1ee577c5500a32ab9c557f9534\nparent e2921405dff1331d0a1ba6a2e97b2cc23992e72a\nparent fab9b60fbd44cf6af4ada7baa987ad7ef268bd27\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1498291878 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1498292192 +0200\n\nMerge #10626: doc: Remove outdated minrelaytxfee comment\n\nfab9b60 doc: Remove outdated minrelaytxfee comment (MarcoFalke)\n\nTree-SHA512: e36c5a554a9773f034c2d358c52a772688009a5a71dfd3f664d9b5566c98378f44ef7c6dc0902b42d69ab5fd54b60d4850a2903823d0b2309c7ae063d1923f7f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c841a31a91ffe7e449c4733d14664b79cb39378",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c841a31a91ffe7e449c4733d14664b79cb39378",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c841a31a91ffe7e449c4733d14664b79cb39378/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2921405dff1331d0a1ba6a2e97b2cc23992e72a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2921405dff1331d0a1ba6a2e97b2cc23992e72a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2921405dff1331d0a1ba6a2e97b2cc23992e72a"
      },
      {
        "sha": "fab9b60fbd44cf6af4ada7baa987ad7ef268bd27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab9b60fbd44cf6af4ada7baa987ad7ef268bd27",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fab9b60fbd44cf6af4ada7baa987ad7ef268bd27"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 2,
      "deletions": 9
    },
    "files": [
      {
        "sha": "249214e9318de9783e0bdf71f5020bb6c1529d66",
        "filename": "contrib/devtools/check-doc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c841a31a91ffe7e449c4733d14664b79cb39378/contrib/devtools/check-doc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c841a31a91ffe7e449c4733d14664b79cb39378/contrib/devtools/check-doc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/check-doc.py?ref=8c841a31a91ffe7e449c4733d14664b79cb39378",
        "patch": "@@ -21,7 +21,7 @@\n REGEX_ARG = re.compile(r'(?:map(?:Multi)?Args(?:\\.count\\(|\\[)|Get(?:Bool)?Arg\\()\\\"(\\-[^\\\"]+?)\\\"')\n REGEX_DOC = re.compile(r'HelpMessageOpt\\(\\\"(\\-[^\\\"=]+?)(?:=|\\\")')\n # list unsupported, deprecated and duplicate args as they need no documentation\n-SET_DOC_OPTIONAL = set(['-rpcssl', '-benchmark', '-h', '-help', '-socks', '-tor', '-debugnet', '-whitelistalwaysrelay', '-prematurewitness', '-walletprematurewitness', '-promiscuousmempoolflags', '-blockminsize', '-sendfreetransactions'])\n+SET_DOC_OPTIONAL = set(['-rpcssl', '-benchmark', '-h', '-help', '-socks', '-tor', '-debugnet', '-whitelistalwaysrelay', '-prematurewitness', '-walletprematurewitness', '-promiscuousmempoolflags', '-blockminsize'])\n \n def main():\n   used = check_output(CMD_GREP_ARGS, shell=True)"
      },
      {
        "sha": "686a31b0f48dd7ece38ff9a0cbd817b42ac08307",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c841a31a91ffe7e449c4733d14664b79cb39378/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c841a31a91ffe7e449c4733d14664b79cb39378/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8c841a31a91ffe7e449c4733d14664b79cb39378",
        "patch": "@@ -1028,14 +1028,7 @@ bool AppInitParameterInteraction()\n     if (nConnectTimeout <= 0)\n         nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n \n-    // Fee-per-kilobyte amount required for mempool acceptance and relay\n-    // If you are mining, be careful setting this:\n-    // if you set it to zero then\n-    // a transaction spammer can cheaply fill blocks using\n-    // 0-fee transactions. It should be set above the real\n-    // cost to you of processing a transaction.\n-    if (IsArgSet(\"-minrelaytxfee\"))\n-    {\n+    if (IsArgSet(\"-minrelaytxfee\")) {\n         CAmount n = 0;\n         if (!ParseMoney(GetArg(\"-minrelaytxfee\", \"\"), n)) {\n             return InitError(AmountErrMsg(\"minrelaytxfee\", GetArg(\"-minrelaytxfee\", \"\")));"
      }
    ]
  },
  {
    "sha": "e0a7801223fd573863939e76cb633f1dcc2d22c4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGE3ODAxMjIzZmQ1NzM4NjM5MzllNzZjYjYzM2YxZGNjMmQyMmM0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-06-24T08:19:41Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-06-24T08:19:44Z"
      },
      "message": "Merge #10662: Initialize randomness in benchmarks\n\n5155d11 Initialize randomness in benchmarks (Andrew Chow)\n\nTree-SHA512: 235006eb161893e1a84d5b2747cbaf7c82ced179ab2b9df30197b4cb2d3c4f31e47fa5b9cf62aced0fe244da47f3a38fbbe91fe86b0a90f1d86604da5d806fb1",
      "tree": {
        "sha": "56b1605a34ee3de56cac184225800954fd45e28c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56b1605a34ee3de56cac184225800954fd45e28c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0a7801223fd573863939e76cb633f1dcc2d22c4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZTiCgAAoJENLqSFDnUoslBVwP/1zK1HkZocjaj1zGhxE2/s4L\nwTC74u6sbfkAmxzErGcoRCefhYi2U0RMqQHx3Hdl1/abMNCZ7VGMWFxsfUUaRRP6\nCJFaRVpctz+eTLEpead2ZnvtgJtQeL/Dy73pW+7J6RlR+lc/Myecbq8MDrTxFUGn\n8uhG5xrdGeYsu4sKQCQKanb5SljHtAhirSVK/BG0shsdtfSQKXvFtKay1e4QeKZu\n5ji32yEhV+DpI4BmImUNGQszOJkQMQVVKl53XeAzbAsrclojbArvWSQK0ONGfpkq\nuvJsgLrIc1pfNIkM42WLN4oL4MfeCP9IStzmpdGr3Wcl2k5+Xtw/EtiBjUVUHrBd\neIytdtpaccPGMdIRKwJ0XgYkuNidl4pLRe/VuAksvHIF8bFAngxxDh84bDw0W1SV\nx70VZGKfZYhiB1vS5UnLI8AMr+/1PqeuBxWMCMo0fcWdyMlVc5X1sfThmfIiFkI5\neTaUfDkyyBB10spCeEmD569hl7ahFBt0xXVB8ilc5yLd0v++3vjj3E5AHQ3+7KJI\nyKxW3g+FqmP/iC9wFQqgu0fiq27XhvqzoM0UcMqTO2zPgW0vRcpH19xfFOLs+qjS\nRDoSs8Rw/pLGLVW0BFZWbx3IeqwhbGAgkXLdLY7DiAYx1mWSxFeTbXSJQQprzdQT\nqQwmx/6In3VDD4B52s6h\n=8pEc\n-----END PGP SIGNATURE-----",
        "payload": "tree 56b1605a34ee3de56cac184225800954fd45e28c\nparent 8c841a31a91ffe7e449c4733d14664b79cb39378\nparent 5155d1101eb4fc9d4d797b583bb29f71807bd10b\nauthor MarcoFalke <falke.marco@gmail.com> 1498292381 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1498292384 +0200\n\nMerge #10662: Initialize randomness in benchmarks\n\n5155d11 Initialize randomness in benchmarks (Andrew Chow)\n\nTree-SHA512: 235006eb161893e1a84d5b2747cbaf7c82ced179ab2b9df30197b4cb2d3c4f31e47fa5b9cf62aced0fe244da47f3a38fbbe91fe86b0a90f1d86604da5d806fb1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0a7801223fd573863939e76cb633f1dcc2d22c4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0a7801223fd573863939e76cb633f1dcc2d22c4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0a7801223fd573863939e76cb633f1dcc2d22c4/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c841a31a91ffe7e449c4733d14664b79cb39378",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c841a31a91ffe7e449c4733d14664b79cb39378",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c841a31a91ffe7e449c4733d14664b79cb39378"
      },
      {
        "sha": "5155d1101eb4fc9d4d797b583bb29f71807bd10b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5155d1101eb4fc9d4d797b583bb29f71807bd10b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5155d1101eb4fc9d4d797b583bb29f71807bd10b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "226861aa7f745a5edb94155ef17dd86494537fd9",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0a7801223fd573863939e76cb633f1dcc2d22c4/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0a7801223fd573863939e76cb633f1dcc2d22c4/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=e0a7801223fd573863939e76cb633f1dcc2d22c4",
        "patch": "@@ -7,10 +7,12 @@\n #include \"key.h\"\n #include \"validation.h\"\n #include \"util.h\"\n+#include \"random.h\"\n \n int\n main(int argc, char** argv)\n {\n+    RandomInit();\n     ECC_Start();\n     SetupEnvironment();\n     fPrintToDebugLog = false; // don't want to write to debug.log file"
      }
    ]
  },
  {
    "sha": "232508fe0fcb9ab33739a18cde8b0d5bfe4b4676",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzI1MDhmZTBmY2I5YWIzMzczOWExOGNkZThiMGQ1YmZlNGI0Njc2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-24T09:27:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-24T09:28:04Z"
      },
      "message": "Merge #10577: Add an explanation of quickly hashing onto a non-power of two range.\n\ndd869c6 Add an explanation of quickly hashing onto a non-power of two range. (Gregory Maxwell)\n\nTree-SHA512: 8b362e396206a4ee2e825908dcff6fe4525c12b9c85a6e6ed809d75f03d42edcfba5e460a002e5d17cc70c103792f84d99693563b638057e4e97946dd1d800b2",
      "tree": {
        "sha": "255224922c6d6e1255436543c8fdf75bb3568451",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/255224922c6d6e1255436543c8fdf75bb3568451"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/232508fe0fcb9ab33739a18cde8b0d5bfe4b4676",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZTjCkAAoJEB5K7WKYbNJdiOkH/A3LMl2ynqPJQRyDPR4LxZo1\n6BU5J5JIuO99QWFVDY6ybFZ7yullmV6chIHDUE0tcX2PSiNzkLGjTpClMfTHhov1\n5FYNYSEdfH4XsXLb5NGBe9GElZG8QiSvADgBz4eIkIRj2K02KdeBjzWh0M8ZW1jD\ngAYzpXL46Rk4SGiHmUnx9opeIX6qyBs47fuUkniALWJoCxFpbg1sLYS6CZHZrGS8\nOoFdPuLghc18nkeeLemXX1rqtVY69pk74ZR03lxeJX42X0J4po5gpwhCVAO6v6OP\nmRpiP/BuwdIlo/+Hfi7ATTax32IkPJFfwrCY1sFhhbaMudCxeXWcaUME/g8tFrk=\n=y/C+\n-----END PGP SIGNATURE-----",
        "payload": "tree 255224922c6d6e1255436543c8fdf75bb3568451\nparent e0a7801223fd573863939e76cb633f1dcc2d22c4\nparent dd869c60ca069fa3eea3dd1aab977b8a10e05f2f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1498296479 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1498296484 +0200\n\nMerge #10577: Add an explanation of quickly hashing onto a non-power of two range.\n\ndd869c6 Add an explanation of quickly hashing onto a non-power of two range. (Gregory Maxwell)\n\nTree-SHA512: 8b362e396206a4ee2e825908dcff6fe4525c12b9c85a6e6ed809d75f03d42edcfba5e460a002e5d17cc70c103792f84d99693563b638057e4e97946dd1d800b2\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/232508fe0fcb9ab33739a18cde8b0d5bfe4b4676",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/232508fe0fcb9ab33739a18cde8b0d5bfe4b4676",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/232508fe0fcb9ab33739a18cde8b0d5bfe4b4676/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0a7801223fd573863939e76cb633f1dcc2d22c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0a7801223fd573863939e76cb633f1dcc2d22c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0a7801223fd573863939e76cb633f1dcc2d22c4"
      },
      {
        "sha": "dd869c60ca069fa3eea3dd1aab977b8a10e05f2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd869c60ca069fa3eea3dd1aab977b8a10e05f2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd869c60ca069fa3eea3dd1aab977b8a10e05f2f"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 31,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fd24d05ee7b998eab6bc7a4510e4d13fd1841f22",
        "filename": "src/cuckoocache.h",
        "status": "modified",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/232508fe0fcb9ab33739a18cde8b0d5bfe4b4676/src/cuckoocache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/232508fe0fcb9ab33739a18cde8b0d5bfe4b4676/src/cuckoocache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cuckoocache.h?ref=232508fe0fcb9ab33739a18cde8b0d5bfe4b4676",
        "patch": "@@ -206,6 +206,37 @@ class cache\n     /** compute_hashes is convenience for not having to write out this\n      * expression everywhere we use the hash values of an Element.\n      *\n+     * We need to map the 32-bit input hash onto a hash bucket in a range [0, size) in a\n+     *  manner which preserves as much of the hash's uniformity as possible.  Ideally\n+     *  this would be done by bitmasking but the size is usually not a power of two.\n+     *\n+     * The naive approach would be to use a mod -- which isn't perfectly uniform but so\n+     *  long as the hash is much larger than size it is not that bad.  Unfortunately,\n+     *  mod/division is fairly slow on ordinary microprocessors (e.g. 90-ish cycles on\n+     *  haswell, ARM doesn't even have an instruction for it.); when the divisor is a\n+     *  constant the compiler will do clever tricks to turn it into a multiply+add+shift,\n+     *  but size is a run-time value so the compiler can't do that here.\n+     *\n+     * One option would be to implement the same trick the compiler uses and compute the\n+     *  constants for exact division based on the size, as described in \"{N}-bit Unsigned\n+     *  Division via {N}-bit Multiply-Add\" by Arch D. Robison in 2005. But that code is\n+     *  somewhat complicated and the result is still slower than other options:\n+     *\n+     * Instead we treat the 32-bit random number as a Q32 fixed-point number in the range\n+     *  [0,1) and simply multiply it by the size.  Then we just shift the result down by\n+     *  32-bits to get our bucket number.  The results has non-uniformity the same as a\n+     *  mod, but it is much faster to compute. More about this technique can be found at\n+     *  http://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction/\n+     *\n+     * The resulting non-uniformity is also more equally distributed which would be\n+     *  advantageous for something like linear probing, though it shouldn't matter\n+     *  one way or the other for a cuckoo table.\n+     *\n+     * The primary disadvantage of this approach is increased intermediate precision is\n+     *  required but for a 32-bit random number we only need the high 32 bits of a\n+     *  32*32->64 multiply, which means the operation is reasonably fast even on a\n+     *  typical 32-bit processor.\n+     *\n      * @param e the element whose hashes will be returned\n      * @returns std::array<uint32_t, 8> of deterministic hashes derived from e\n      */"
      }
    ]
  },
  {
    "sha": "2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzcyZGM5ZjIxOTliMWRhZDhmZjFmNWZhMTMxNDNjMGE4OThiMWFj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-24T10:16:41Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-24T10:25:13Z"
      },
      "message": "Merge #10446: net: avoid extra dns query per seed\n\nc1be285 chainparams: make supported service bits option explicit (Cory Fields)\nd5c7c1c net: use an internal address for fixed seeds (Cory Fields)\n6cdc488 net: switch to dummy internal ip for dns seed source (Cory Fields)\n6d0bd5b net: do not allow resolving to an internal address (Cory Fields)\n7f31762 net: add an internal subnet for representing unresolved hostnames (Cory Fields)\n\nTree-SHA512: 9bf1042bef546ac3ef0e0d3a9a5555eb21628ff2674a0cf8c6367194b22bfdab477adf452c0e7c56f44e0fb37debc5e14bdb623452e076fb9c492c7702601d7a",
      "tree": {
        "sha": "9500c45ed5db67fa88d0bd59b1a45bab19afea3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9500c45ed5db67fa88d0bd59b1a45bab19afea3a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZTj4JAAoJEB5K7WKYbNJd+lUIALZDTIESnOUBJgtjW4cDohCA\nTAMxQhw63YKRaQ9mlQjVuCsXcTlTJNZJ5zf9/FHiJfq2QnRyiIqrRSezraR2gNKN\nTFcmrKeeT77KBbZkc9LIUM+oWMHmS2X/emWSGpRgGngJmboujgqZ1Wmgae64wPoe\nX4ZO+ntylNzaRgIXeA2yyMKquVuOmrS92UCcxP2Afa7RwBJY3WxVxU5y5gkh1nON\nv+jL1LsZ+L40FRPeQqG6nQjbYMfOXaZStYOaKHyk2YkTtSIiAya2zSy7NiVq321p\nms3uETxb4LHI2Rj8Ai5OrwqcdsMPQIiUliHNGnoXFqorvKU2XPBLuWH4h/9YLmY=\n=md0Q\n-----END PGP SIGNATURE-----",
        "payload": "tree 9500c45ed5db67fa88d0bd59b1a45bab19afea3a\nparent 232508fe0fcb9ab33739a18cde8b0d5bfe4b4676\nparent c1be28536467e90ce75eaa7d8c338f6485c4bee5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1498299401 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1498299913 +0200\n\nMerge #10446: net: avoid extra dns query per seed\n\nc1be285 chainparams: make supported service bits option explicit (Cory Fields)\nd5c7c1c net: use an internal address for fixed seeds (Cory Fields)\n6cdc488 net: switch to dummy internal ip for dns seed source (Cory Fields)\n6d0bd5b net: do not allow resolving to an internal address (Cory Fields)\n7f31762 net: add an internal subnet for representing unresolved hostnames (Cory Fields)\n\nTree-SHA512: 9bf1042bef546ac3ef0e0d3a9a5555eb21628ff2674a0cf8c6367194b22bfdab477adf452c0e7c56f44e0fb37debc5e14bdb623452e076fb9c492c7702601d7a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "232508fe0fcb9ab33739a18cde8b0d5bfe4b4676",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/232508fe0fcb9ab33739a18cde8b0d5bfe4b4676",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/232508fe0fcb9ab33739a18cde8b0d5bfe4b4676"
      },
      {
        "sha": "c1be28536467e90ce75eaa7d8c338f6485c4bee5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1be28536467e90ce75eaa7d8c338f6485c4bee5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1be28536467e90ce75eaa7d8c338f6485c4bee5"
      }
    ],
    "stats": {
      "total": 133,
      "additions": 96,
      "deletions": 37
    },
    "files": [
      {
        "sha": "dc4d2621ee0422dd01791031d0bd142439c69f23",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac",
        "patch": "@@ -124,12 +124,12 @@ class CMainParams : public CChainParams {\n         assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n \n         // Note that of those with the service bits flag, most only support a subset of possible options\n-        vSeeds.push_back(CDNSSeedData(\"bitcoin.sipa.be\", \"seed.bitcoin.sipa.be\", true)); // Pieter Wuille, only supports x1, x5, x9, and xd\n-        vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"dnsseed.bluematt.me\", true)); // Matt Corallo, only supports x9\n-        vSeeds.push_back(CDNSSeedData(\"dashjr.org\", \"dnsseed.bitcoin.dashjr.org\")); // Luke Dashjr\n-        vSeeds.push_back(CDNSSeedData(\"bitcoinstats.com\", \"seed.bitcoinstats.com\", true)); // Christian Decker, supports x1 - xf\n-        vSeeds.push_back(CDNSSeedData(\"bitcoin.jonasschnelli.ch\", \"seed.bitcoin.jonasschnelli.ch\", true)); // Jonas Schnelli, only supports x1, x5, x9, and xd\n-        vSeeds.push_back(CDNSSeedData(\"petertodd.org\", \"seed.btc.petertodd.org\", true)); // Peter Todd, only supports x1, x5, x9, and xd\n+        vSeeds.emplace_back(\"seed.bitcoin.sipa.be\", true); // Pieter Wuille, only supports x1, x5, x9, and xd\n+        vSeeds.emplace_back(\"dnsseed.bluematt.me\", true); // Matt Corallo, only supports x9\n+        vSeeds.emplace_back(\"dnsseed.bitcoin.dashjr.org\", false); // Luke Dashjr\n+        vSeeds.emplace_back(\"seed.bitcoinstats.com\", true); // Christian Decker, supports x1 - xf\n+        vSeeds.emplace_back(\"seed.bitcoin.jonasschnelli.ch\", true); // Jonas Schnelli, only supports x1, x5, x9, and xd\n+        vSeeds.emplace_back(\"seed.btc.petertodd.org\", true); // Peter Todd, only supports x1, x5, x9, and xd\n \n         base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,0);\n         base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,5);\n@@ -225,10 +225,10 @@ class CTestNetParams : public CChainParams {\n         vFixedSeeds.clear();\n         vSeeds.clear();\n         // nodes with support for servicebits filtering should be at the top\n-        vSeeds.push_back(CDNSSeedData(\"testnetbitcoin.jonasschnelli.ch\", \"testnet-seed.bitcoin.jonasschnelli.ch\", true));\n-        vSeeds.push_back(CDNSSeedData(\"petertodd.org\", \"seed.tbtc.petertodd.org\", true));\n-        vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"testnet-seed.bluematt.me\"));\n-        vSeeds.push_back(CDNSSeedData(\"bitcoin.schildbach.de\", \"testnet-seed.bitcoin.schildbach.de\"));\n+        vSeeds.emplace_back(\"testnet-seed.bitcoin.jonasschnelli.ch\", true);\n+        vSeeds.emplace_back(\"seed.tbtc.petertodd.org\", true);\n+        vSeeds.emplace_back(\"testnet-seed.bluematt.me\", false);\n+        vSeeds.emplace_back(\"testnet-seed.bitcoin.schildbach.de\", false);\n \n         base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,111);\n         base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,196);"
      },
      {
        "sha": "f55ae4cf7f068f8884f976c7a6c431bb7a778bcb",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac",
        "patch": "@@ -15,9 +15,9 @@\n #include <vector>\n \n struct CDNSSeedData {\n-    std::string name, host;\n+    std::string host;\n     bool supportsServiceBitsFiltering;\n-    CDNSSeedData(const std::string &strName, const std::string &strHost, bool supportsServiceBitsFilteringIn = false) : name(strName), host(strHost), supportsServiceBitsFiltering(supportsServiceBitsFilteringIn) {}\n+    CDNSSeedData(const std::string &strHost, bool supportsServiceBitsFilteringIn) : host(strHost), supportsServiceBitsFiltering(supportsServiceBitsFilteringIn) {}\n };\n \n struct SeedSpec6 {"
      },
      {
        "sha": "43bd0eb0d5643610cdbb3038c601a7039f7bf046",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 15,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac",
        "patch": "@@ -240,7 +240,7 @@ bool RemoveLocal(const CService& addr)\n /** Make a particular network entirely off-limits (no automatic connects to it) */\n void SetLimited(enum Network net, bool fLimited)\n {\n-    if (net == NET_UNROUTABLE)\n+    if (net == NET_UNROUTABLE || net == NET_INTERNAL)\n         return;\n     LOCK(cs_mapLocalHost);\n     vfLimited[net] = fLimited;\n@@ -1604,7 +1604,12 @@ void CConnman::ThreadDNSAddressSeed()\n             std::vector<CNetAddr> vIPs;\n             std::vector<CAddress> vAdd;\n             ServiceFlags requiredServiceBits = nRelevantServices;\n-            if (LookupHost(GetDNSHost(seed, &requiredServiceBits).c_str(), vIPs, 0, true))\n+            std::string host = GetDNSHost(seed, &requiredServiceBits);\n+            CNetAddr resolveSource;\n+            if (!resolveSource.SetInternal(host)) {\n+                continue;\n+            }\n+            if (LookupHost(host.c_str(), vIPs, 0, true))\n             {\n                 for (const CNetAddr& ip : vIPs)\n                 {\n@@ -1614,18 +1619,7 @@ void CConnman::ThreadDNSAddressSeed()\n                     vAdd.push_back(addr);\n                     found++;\n                 }\n-            }\n-            if (interruptNet) {\n-                return;\n-            }\n-            // TODO: The seed name resolve may fail, yielding an IP of [::], which results in\n-            // addrman assigning the same source to results from different seeds.\n-            // This should switch to a hard-coded stable dummy IP for each seed name, so that the\n-            // resolve is not required at all.\n-            if (!vIPs.empty()) {\n-                CService seedSource;\n-                Lookup(seed.name.c_str(), seedSource, 0, true);\n-                addrman.Add(vAdd, seedSource);\n+                addrman.Add(vAdd, resolveSource);\n             }\n         }\n     }\n@@ -1724,7 +1718,7 @@ void CConnman::ThreadOpenConnections()\n             if (!done) {\n                 LogPrintf(\"Adding fixed seed nodes as DNS doesn't seem to be available.\\n\");\n                 CNetAddr local;\n-                LookupHost(\"127.0.0.1\", local, false);\n+                local.SetInternal(\"fixedseeds\");\n                 addrman.Add(convertSeed6(Params().FixedSeeds()), local);\n                 done = true;\n             }"
      },
      {
        "sha": "89f257c6422c69a71cf938e4ece666355e6f6650",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 7,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac",
        "patch": "@@ -15,6 +15,9 @@\n static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };\n static const unsigned char pchOnionCat[] = {0xFD,0x87,0xD8,0x7E,0xEB,0x43};\n \n+// 0xFD + sha256(\"bitcoin\")[0:5]\n+static const unsigned char g_internal_prefix[] = { 0xFD, 0x6B, 0x88, 0xC0, 0x87, 0x24 };\n+\n void CNetAddr::Init()\n {\n     memset(ip, 0, sizeof(ip));\n@@ -42,6 +45,18 @@ void CNetAddr::SetRaw(Network network, const uint8_t *ip_in)\n     }\n }\n \n+bool CNetAddr::SetInternal(const std::string &name)\n+{\n+    if (name.empty()) {\n+        return false;\n+    }\n+    unsigned char hash[32] = {};\n+    CSHA256().Write((const unsigned char*)name.data(), name.size()).Finalize(hash);\n+    memcpy(ip, g_internal_prefix, sizeof(g_internal_prefix));\n+    memcpy(ip + sizeof(g_internal_prefix), hash, sizeof(ip) - sizeof(g_internal_prefix));\n+    return true;\n+}\n+\n bool CNetAddr::SetSpecial(const std::string &strName)\n {\n     if (strName.size()>6 && strName.substr(strName.size() - 6, 6) == \".onion\") {\n@@ -84,7 +99,7 @@ bool CNetAddr::IsIPv4() const\n \n bool CNetAddr::IsIPv6() const\n {\n-    return (!IsIPv4() && !IsTor());\n+    return (!IsIPv4() && !IsTor() && !IsInternal());\n }\n \n bool CNetAddr::IsRFC1918() const\n@@ -199,6 +214,9 @@ bool CNetAddr::IsValid() const\n     if (IsRFC3849())\n         return false;\n \n+    if (IsInternal())\n+        return false;\n+\n     if (IsIPv4())\n     {\n         // INADDR_NONE\n@@ -217,11 +235,19 @@ bool CNetAddr::IsValid() const\n \n bool CNetAddr::IsRoutable() const\n {\n-    return IsValid() && !(IsRFC1918() || IsRFC2544() || IsRFC3927() || IsRFC4862() || IsRFC6598() || IsRFC5737() || (IsRFC4193() && !IsTor()) || IsRFC4843() || IsLocal());\n+    return IsValid() && !(IsRFC1918() || IsRFC2544() || IsRFC3927() || IsRFC4862() || IsRFC6598() || IsRFC5737() || (IsRFC4193() && !IsTor()) || IsRFC4843() || IsLocal() || IsInternal());\n+}\n+\n+bool CNetAddr::IsInternal() const\n+{\n+   return memcmp(ip, g_internal_prefix, sizeof(g_internal_prefix)) == 0;\n }\n \n enum Network CNetAddr::GetNetwork() const\n {\n+    if (IsInternal())\n+        return NET_INTERNAL;\n+\n     if (!IsRoutable())\n         return NET_UNROUTABLE;\n \n@@ -238,6 +264,8 @@ std::string CNetAddr::ToStringIP() const\n {\n     if (IsTor())\n         return EncodeBase32(&ip[6], 10) + \".onion\";\n+    if (IsInternal())\n+        return EncodeBase32(ip + sizeof(g_internal_prefix), sizeof(ip) - sizeof(g_internal_prefix)) + \".internal\";\n     CService serv(*this, 0);\n     struct sockaddr_storage sockaddr;\n     socklen_t socklen = sizeof(sockaddr);\n@@ -305,9 +333,15 @@ std::vector<unsigned char> CNetAddr::GetGroup() const\n         nClass = 255;\n         nBits = 0;\n     }\n-\n-    // all unroutable addresses belong to the same group\n-    if (!IsRoutable())\n+    // all internal-usage addresses get their own group\n+    if (IsInternal())\n+    {\n+        nClass = NET_INTERNAL;\n+        nStartByte = sizeof(g_internal_prefix);\n+        nBits = (sizeof(ip) - sizeof(g_internal_prefix)) * 8;\n+    }\n+    // all other unroutable addresses belong to the same group\n+    else if (!IsRoutable())\n     {\n         nClass = NET_UNROUTABLE;\n         nBits = 0;\n@@ -393,7 +427,7 @@ int CNetAddr::GetReachabilityFrom(const CNetAddr *paddrPartner) const\n         REACH_PRIVATE\n     };\n \n-    if (!IsRoutable())\n+    if (!IsRoutable() || IsInternal())\n         return REACH_UNREACHABLE;\n \n     int ourNet = GetExtNetwork(this);\n@@ -552,7 +586,7 @@ std::string CService::ToStringPort() const\n \n std::string CService::ToStringIPPort() const\n {\n-    if (IsIPv4() || IsTor()) {\n+    if (IsIPv4() || IsTor() || IsInternal()) {\n         return ToStringIP() + \":\" + ToStringPort();\n     } else {\n         return \"[\" + ToStringIP() + \"]:\" + ToStringPort();"
      },
      {
        "sha": "80716600d17f004e765561b142fa9aeada2f3971",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac",
        "patch": "@@ -22,6 +22,7 @@ enum Network\n     NET_IPV4,\n     NET_IPV6,\n     NET_TOR,\n+    NET_INTERNAL,\n \n     NET_MAX,\n };\n@@ -45,6 +46,12 @@ class CNetAddr\n          */\n         void SetRaw(Network network, const uint8_t *data);\n \n+        /**\n+          * Transform an arbitrary string into a non-routable ipv6 address.\n+          * Useful for mapping resolved addresses back to their source.\n+         */\n+        bool SetInternal(const std::string& name);\n+\n         bool SetSpecial(const std::string &strName); // for Tor addresses\n         bool IsIPv4() const;    // IPv4 mapped address (::FFFF:0:0/96, 0.0.0.0/0)\n         bool IsIPv6() const;    // IPv6 address (not mapped IPv4, not Tor)\n@@ -64,6 +71,7 @@ class CNetAddr\n         bool IsTor() const;\n         bool IsLocal() const;\n         bool IsRoutable() const;\n+        bool IsInternal() const;\n         bool IsValid() const;\n         enum Network GetNetwork() const;\n         std::string ToString() const;"
      },
      {
        "sha": "a23f92e1ed00ac56d2e61b2aca296cabac614f74",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac",
        "patch": "@@ -108,17 +108,22 @@ bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsign\n     struct addrinfo *aiTrav = aiRes;\n     while (aiTrav != NULL && (nMaxSolutions == 0 || vIP.size() < nMaxSolutions))\n     {\n+        CNetAddr resolved;\n         if (aiTrav->ai_family == AF_INET)\n         {\n             assert(aiTrav->ai_addrlen >= sizeof(sockaddr_in));\n-            vIP.push_back(CNetAddr(((struct sockaddr_in*)(aiTrav->ai_addr))->sin_addr));\n+            resolved = CNetAddr(((struct sockaddr_in*)(aiTrav->ai_addr))->sin_addr);\n         }\n \n         if (aiTrav->ai_family == AF_INET6)\n         {\n             assert(aiTrav->ai_addrlen >= sizeof(sockaddr_in6));\n             struct sockaddr_in6* s6 = (struct sockaddr_in6*) aiTrav->ai_addr;\n-            vIP.push_back(CNetAddr(s6->sin6_addr, s6->sin6_scope_id));\n+            resolved = CNetAddr(s6->sin6_addr, s6->sin6_scope_id);\n+        }\n+        /* Never allow resolving to an internal address. Consider any such result invalid */\n+        if (!resolved.IsInternal()) {\n+            vIP.push_back(resolved);\n         }\n \n         aiTrav = aiTrav->ai_next;"
      },
      {
        "sha": "5cab0ad5bd8dabcfa41c5ee8197f50602adbc498",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac",
        "patch": "@@ -397,7 +397,7 @@ static UniValue GetNetworksInfo()\n     for(int n=0; n<NET_MAX; ++n)\n     {\n         enum Network network = static_cast<enum Network>(n);\n-        if(network == NET_UNROUTABLE)\n+        if(network == NET_UNROUTABLE || network == NET_INTERNAL)\n             continue;\n         proxyType proxy;\n         UniValue obj(UniValue::VOBJ);"
      },
      {
        "sha": "b45a7fcc572fbeb77800084201523cb90e3a6e61",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac",
        "patch": "@@ -25,13 +25,21 @@ static CSubNet ResolveSubNet(const char* subnet)\n     return ret;\n }\n \n+static CNetAddr CreateInternal(const char* host)\n+{\n+    CNetAddr addr;\n+    addr.SetInternal(host);\n+    return addr;\n+}\n+\n BOOST_AUTO_TEST_CASE(netbase_networks)\n {\n     BOOST_CHECK(ResolveIP(\"127.0.0.1\").GetNetwork()                              == NET_UNROUTABLE);\n     BOOST_CHECK(ResolveIP(\"::1\").GetNetwork()                                    == NET_UNROUTABLE);\n     BOOST_CHECK(ResolveIP(\"8.8.8.8\").GetNetwork()                                == NET_IPV4);\n     BOOST_CHECK(ResolveIP(\"2001::8888\").GetNetwork()                             == NET_IPV6);\n     BOOST_CHECK(ResolveIP(\"FD87:D87E:EB43:edb1:8e4:3588:e546:35ca\").GetNetwork() == NET_TOR);\n+    BOOST_CHECK(CreateInternal(\"foo.com\").GetNetwork()                           == NET_INTERNAL);\n \n }\n \n@@ -58,6 +66,8 @@ BOOST_AUTO_TEST_CASE(netbase_properties)\n     BOOST_CHECK(ResolveIP(\"8.8.8.8\").IsRoutable());\n     BOOST_CHECK(ResolveIP(\"2001::1\").IsRoutable());\n     BOOST_CHECK(ResolveIP(\"127.0.0.1\").IsValid());\n+    BOOST_CHECK(CreateInternal(\"FD6B:88C0:8724:edb1:8e4:3588:e546:35ca\").IsInternal());\n+    BOOST_CHECK(CreateInternal(\"bar.com\").IsInternal());\n \n }\n \n@@ -103,6 +113,11 @@ BOOST_AUTO_TEST_CASE(netbase_lookupnumeric)\n     BOOST_CHECK(TestParse(\"[::]:8333\", \"[::]:8333\"));\n     BOOST_CHECK(TestParse(\"[127.0.0.1]\", \"127.0.0.1:65535\"));\n     BOOST_CHECK(TestParse(\":::\", \"[::]:0\"));\n+\n+    // verify that an internal address fails to resolve\n+    BOOST_CHECK(TestParse(\"[fd6b:88c0:8724:1:2:3:4:5]\", \"[::]:0\"));\n+    // and that a one-off resolves correctly\n+    BOOST_CHECK(TestParse(\"[fd6c:88c0:8724:1:2:3:4:5]\", \"[fd6c:88c0:8724:1:2:3:4:5]:65535\"));\n }\n \n BOOST_AUTO_TEST_CASE(onioncat_test)\n@@ -281,6 +296,9 @@ BOOST_AUTO_TEST_CASE(netbase_getgroup)\n     BOOST_CHECK(ResolveIP(\"2001:470:abcd:9999:9999:9999:9999:9999\").GetGroup() == std::vector<unsigned char>({(unsigned char)NET_IPV6, 32, 1, 4, 112, 175})); //he.net\n     BOOST_CHECK(ResolveIP(\"2001:2001:9999:9999:9999:9999:9999:9999\").GetGroup() == std::vector<unsigned char>({(unsigned char)NET_IPV6, 32, 1, 32, 1})); //IPv6\n \n+    // baz.net sha256 hash: 12929400eb4607c4ac075f087167e75286b179c693eb059a01774b864e8fe505\n+    std::vector<unsigned char> internal_group = {NET_INTERNAL, 0x12, 0x92, 0x94, 0x00, 0xeb, 0x46, 0x07, 0xc4, 0xac, 0x07};\n+    BOOST_CHECK(CreateInternal(\"baz.net\").GetGroup() == internal_group);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "00350bd6db91545c9d307733448af9432ee151c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDM1MGJkNmRiOTE1NDVjOWQzMDc3MzM0NDhhZjk0MzJlZTE1MWM3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-24T13:15:06Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-24T13:15:18Z"
      },
      "message": "Merge #10191: [trivial] Rename unused RPC arguments 'dummy'\n\n0ef7de9 [RPCs] Remove submitblock parameters argument help text (John Newbery)\n\nTree-SHA512: f39ad4bb3006e3d722fa51ae2ab4a48726e740993d6bed5737b355d1e0a99cf475ca9519f97adf8cde1b7187b14a24d5951ce4f34624d01d9ef84b49124c2894",
      "tree": {
        "sha": "460def707af2742f0badcdcc1b80ce38135d64bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/460def707af2742f0badcdcc1b80ce38135d64bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00350bd6db91545c9d307733448af9432ee151c7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZTmXmAAoJEB5K7WKYbNJdXqgH/3MONMXgF4yIrN3ntLOUBEj9\nkwkxjvOZi7rXdDamOa7rOhSb7jrYTkSdZlmcoIi791JSwdfYZP5iGQgxiCWlcEnp\nwfrRu1Qb511VNyjiM/YUcB5tTWjIDD5+1D1f0dg1sShRw0XlgZWTvo5QSP6RvIvd\nqKEQdiWCVi70uT8sYnpEQ23mpxWTcn6bL8vmKDaZ/DRxhQk9sOGXBhtZUq7gshyZ\nswdFKzJwRmwc01RRyeMvw1wRXaZTGDqTOWEYVR26UzUq2H8ABglpRNLYAjQzFVj7\ndUeNAks1VISZlIsbYqBlxJ5Ypean6eyaVTr3OR/KhfTIG34DSHnHYPHf5R0veRI=\n=ACSo\n-----END PGP SIGNATURE-----",
        "payload": "tree 460def707af2742f0badcdcc1b80ce38135d64bb\nparent 2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac\nparent 0ef7de953f5eeb27651690871c18c4dc1ee4f83b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1498310106 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1498310118 +0200\n\nMerge #10191: [trivial] Rename unused RPC arguments 'dummy'\n\n0ef7de9 [RPCs] Remove submitblock parameters argument help text (John Newbery)\n\nTree-SHA512: f39ad4bb3006e3d722fa51ae2ab4a48726e740993d6bed5737b355d1e0a99cf475ca9519f97adf8cde1b7187b14a24d5951ce4f34624d01d9ef84b49124c2894\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00350bd6db91545c9d307733448af9432ee151c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/00350bd6db91545c9d307733448af9432ee151c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00350bd6db91545c9d307733448af9432ee151c7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2772dc9f2199b1dad8ff1f5fa13143c0a898b1ac"
      },
      {
        "sha": "0ef7de953f5eeb27651690871c18c4dc1ee4f83b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ef7de953f5eeb27651690871c18c4dc1ee4f83b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ef7de953f5eeb27651690871c18c4dc1ee4f83b"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 4,
      "deletions": 7
    },
    "files": [
      {
        "sha": "8c682592c56560e927b92e770c20ce3d8a433031",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00350bd6db91545c9d307733448af9432ee151c7/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00350bd6db91545c9d307733448af9432ee151c7/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=00350bd6db91545c9d307733448af9432ee151c7",
        "patch": "@@ -722,19 +722,16 @@ class submitblock_StateCatcher : public CValidationInterface\n \n UniValue submitblock(const JSONRPCRequest& request)\n {\n+    // We allow 2 arguments for compliance with BIP22. Argument 2 is ignored.\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n         throw std::runtime_error(\n-            \"submitblock \\\"hexdata\\\" ( \\\"jsonparametersobject\\\" )\\n\"\n+            \"submitblock \\\"hexdata\\\"  ( \\\"dummy\\\" )\\n\"\n             \"\\nAttempts to submit new block to network.\\n\"\n-            \"The 'jsonparametersobject' parameter is currently ignored.\\n\"\n             \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\\n\"\n \n             \"\\nArguments\\n\"\n             \"1. \\\"hexdata\\\"        (string, required) the hex-encoded block data to submit\\n\"\n-            \"2. \\\"parameters\\\"     (string, optional) object of optional parameters\\n\"\n-            \"    {\\n\"\n-            \"      \\\"workid\\\" : \\\"id\\\"    (string, optional) if the server provided a workid, it MUST be included with submissions\\n\"\n-            \"    }\\n\"\n+            \"2. \\\"dummy\\\"          (optional) dummy value, for compatibility with BIP22. This value is ignored.\\n\"\n             \"\\nResult:\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"submitblock\", \"\\\"mydata\\\"\")\n@@ -963,7 +960,7 @@ static const CRPCCommand commands[] =\n     { \"mining\",             \"getmininginfo\",          &getmininginfo,          true,  {} },\n     { \"mining\",             \"prioritisetransaction\",  &prioritisetransaction,  true,  {\"txid\",\"dummy\",\"fee_delta\"} },\n     { \"mining\",             \"getblocktemplate\",       &getblocktemplate,       true,  {\"template_request\"} },\n-    { \"mining\",             \"submitblock\",            &submitblock,            true,  {\"hexdata\",\"parameters\"} },\n+    { \"mining\",             \"submitblock\",            &submitblock,            true,  {\"hexdata\",\"dummy\"} },\n \n     { \"generating\",         \"generate\",               &generate,               true,  {\"nblocks\",\"maxtries\"} },\n     { \"generating\",         \"generatetoaddress\",      &generatetoaddress,      true,  {\"nblocks\",\"address\",\"maxtries\"} },"
      }
    ]
  },
  {
    "sha": "b62b4c873e18f26c0ba049a02b8cdf764e3d98ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjJiNGM4NzNlMThmMjZjMGJhMDQ5YTAyYjhjZGY3NjRlM2Q5OGNl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-24T13:28:15Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-24T13:39:43Z"
      },
      "message": "Merge #10627: fixed listunspent rpc convert parameter\n\ne503b2b fixed listunspent rpc convert parameter (tnaka)\n\nTree-SHA512: 6da1cee8fd8459187825fad47678b36bbf6b4582f03f557c8a48c2c4273d9e12405e8bb6ade02a06e6555419eefb1dc298d4d4781ebb3b6b72743ca6108cb18e",
      "tree": {
        "sha": "33395206ec3563fd6cf6f4c101dc947bd0e05557",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33395206ec3563fd6cf6f4c101dc947bd0e05557"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b62b4c873e18f26c0ba049a02b8cdf764e3d98ce",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZTmufAAoJEB5K7WKYbNJdtx8H/it8PD49S7Pij652E33GOdZ2\nO7wAG0yS1L1M6Sn9MxrgQwIhR+fyNU8deUVg9h3dR1/blZrfvf9KorOEYkdEfQeP\n5t6Xq+p4aQHuX47GuEMxz8JYUE+mlZs4bLSr+gnSju5UgmUzXVEjGbtkDfd81NQJ\ny2RIx745snLR6Lod6VT03+AAhgRhl1FY89D1gi9hwZnkV7A8Kop8hTEy+OCZtZvG\nfm7iHgEIGMFabiTC2HipKNYrKihNisSTZO6XKMxWHlvK7eAmSyPBIquEX03cUnGL\nE72n2xMFSBsQmdz/kNt/XhcQv3iM+/kQ2nNKOLvhZUXNZ+CbI5mMot48Iz4FVHg=\n=B/qr\n-----END PGP SIGNATURE-----",
        "payload": "tree 33395206ec3563fd6cf6f4c101dc947bd0e05557\nparent 00350bd6db91545c9d307733448af9432ee151c7\nparent e503b2b6809d91317c503c3dab78a9cf246b2ea3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1498310895 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1498311583 +0200\n\nMerge #10627: fixed listunspent rpc convert parameter\n\ne503b2b fixed listunspent rpc convert parameter (tnaka)\n\nTree-SHA512: 6da1cee8fd8459187825fad47678b36bbf6b4582f03f557c8a48c2c4273d9e12405e8bb6ade02a06e6555419eefb1dc298d4d4781ebb3b6b72743ca6108cb18e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b62b4c873e18f26c0ba049a02b8cdf764e3d98ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b62b4c873e18f26c0ba049a02b8cdf764e3d98ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b62b4c873e18f26c0ba049a02b8cdf764e3d98ce/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "00350bd6db91545c9d307733448af9432ee151c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00350bd6db91545c9d307733448af9432ee151c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/00350bd6db91545c9d307733448af9432ee151c7"
      },
      {
        "sha": "e503b2b6809d91317c503c3dab78a9cf246b2ea3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e503b2b6809d91317c503c3dab78a9cf246b2ea3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e503b2b6809d91317c503c3dab78a9cf246b2ea3"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "cb1539dce5bc1a1ab46fef03c51bdaf3885a701b",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b62b4c873e18f26c0ba049a02b8cdf764e3d98ce/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b62b4c873e18f26c0ba049a02b8cdf764e3d98ce/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=b62b4c873e18f26c0ba049a02b8cdf764e3d98ce",
        "patch": "@@ -76,6 +76,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"listunspent\", 0, \"minconf\" },\n     { \"listunspent\", 1, \"maxconf\" },\n     { \"listunspent\", 2, \"addresses\" },\n+    { \"listunspent\", 3, \"include_unsafe\" },\n     { \"listunspent\", 4, \"query_options\" },\n     { \"getblock\", 1, \"verbosity\" },\n     { \"getblockheader\", 1, \"verbose\" },"
      }
    ]
  },
  {
    "sha": "eee398fa123ff677f24f2211e8d3012650530c32",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWUzOThmYTEyM2ZmNjc3ZjI0ZjIyMTFlOGQzMDEyNjUwNTMwYzMy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-24T13:43:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-24T13:45:14Z"
      },
      "message": "Merge #10608: Add a comment explaining the use of MAX_BLOCK_BASE_SIZE.\n\n1887337 Add a comment explaining the use of MAX_BLOCK_BASE_SIZE. (Gregory Maxwell)\n\nTree-SHA512: 4c643a3696241fbf4eac8d58bb26586f319338b28ee86d20394a8ea362911b467853eb40c43487ede753209a3c7bee2e576d2ca80627e9fc924fabefbcaea34b",
      "tree": {
        "sha": "7fd45688bc9d8c10555d3dab1db0cf49551759f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7fd45688bc9d8c10555d3dab1db0cf49551759f8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eee398fa123ff677f24f2211e8d3012650530c32",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZTmzqAAoJEB5K7WKYbNJdqokH+QHFxrt6egn9gYKbHE2q7ujy\nJrUuR2AnT7RQ8IZAGpn7a5lCr7rUW92UxnbchuFp3vl2baP8jf0bkve7iIhb9AJv\n6y4XENODc3WphrcpDp0h0PQ2N4AYpsPYpQcfjiPk716vGZbMRnS87sWFqFNVQy7R\n7R6lDmxl3+sqL7uvlb4yZJugFs93PGi61a+FHLBwf0JRmqVEYRl7U/lzsz6vuNij\npwOgE/vZLDWTr4vXxwBPV74jsEG6JhOZJECuYZTjH+nXcmOZrPo0JpUiq7S7Kz9c\nBVzayOilJmoGj/9Rgwo+7BV9tdS6RkG0znG+gDe1TQbC7E3sdvm1R4POY9/aBi8=\n=xmHV\n-----END PGP SIGNATURE-----",
        "payload": "tree 7fd45688bc9d8c10555d3dab1db0cf49551759f8\nparent b62b4c873e18f26c0ba049a02b8cdf764e3d98ce\nparent 18873373bde38a026f154c5878fedac6c2a04446\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1498311830 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1498311914 +0200\n\nMerge #10608: Add a comment explaining the use of MAX_BLOCK_BASE_SIZE.\n\n1887337 Add a comment explaining the use of MAX_BLOCK_BASE_SIZE. (Gregory Maxwell)\n\nTree-SHA512: 4c643a3696241fbf4eac8d58bb26586f319338b28ee86d20394a8ea362911b467853eb40c43487ede753209a3c7bee2e576d2ca80627e9fc924fabefbcaea34b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eee398fa123ff677f24f2211e8d3012650530c32",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eee398fa123ff677f24f2211e8d3012650530c32",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eee398fa123ff677f24f2211e8d3012650530c32/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b62b4c873e18f26c0ba049a02b8cdf764e3d98ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b62b4c873e18f26c0ba049a02b8cdf764e3d98ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b62b4c873e18f26c0ba049a02b8cdf764e3d98ce"
      },
      {
        "sha": "18873373bde38a026f154c5878fedac6c2a04446",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18873373bde38a026f154c5878fedac6c2a04446",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/18873373bde38a026f154c5878fedac6c2a04446"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 7,
      "deletions": 1
    },
    "files": [
      {
        "sha": "58b2ed4b3e623daf4fe57be20fbff8781b40630f",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eee398fa123ff677f24f2211e8d3012650530c32/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eee398fa123ff677f24f2211e8d3012650530c32/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=eee398fa123ff677f24f2211e8d3012650530c32",
        "patch": "@@ -12,7 +12,13 @@\n static const unsigned int MAX_BLOCK_SERIALIZED_SIZE = 4000000;\n /** The maximum allowed weight for a block, see BIP 141 (network rule) */\n static const unsigned int MAX_BLOCK_WEIGHT = 4000000;\n-/** The maximum allowed size for a block excluding witness data, in bytes (network rule) */\n+/**\n+ * The maximum allowed size for a block excluding witness data, in bytes (network rule).\n+ * This parameter is largely superfluous because it is directly implied by the above block\n+ *  weight limit, even when BIP 141 is not active.  It continues to exist for use in\n+ *  various early tests that run before the witness data has been checked.\n+ * All tests related to it could be removed without breaking consensus compatibility.\n+ */\n static const unsigned int MAX_BLOCK_BASE_SIZE = 1000000;\n /** The maximum allowed number of signature check operations in a block (network rule) */\n static const int64_t MAX_BLOCK_SIGOPS_COST = 80000;"
      }
    ]
  },
  {
    "sha": "bef02fb6ac9f57fdb490f6a5725cde6bde0da124",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZWYwMmZiNmFjOWY1N2ZkYjQ5MGY2YTU3MjVjZGU2YmRlMGRhMTI0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-24T14:26:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-24T14:37:42Z"
      },
      "message": "Merge #10412: Improve wallet rescan API\n\ndeaf48b Handle TIMESTAMP_WINDOW within CWallet::RescanFromTime (Russell Yanofsky)\n5b2be2b Make CWallet::RescanFromTime comment less ambiguous (Russell Yanofsky)\n9bb66ab Add RescanFromTime method and use from rpcdump (Russell Yanofsky)\nccf84bb Move birthday optimization out of ScanForWalletTransactions (Russell Yanofsky)\n\nTree-SHA512: cd38433b8f5c5e44ecfba830a6a26bd9a9d0f4a22ae42bce17773d1a6fb25e1ee4289484996dad2d7acfa03059917ff062459f25030a761da7083ba5fbc87bc9",
      "tree": {
        "sha": "c369995b06a606b0ecf29ba06aa49346600b0987",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c369995b06a606b0ecf29ba06aa49346600b0987"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bef02fb6ac9f57fdb490f6a5725cde6bde0da124",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZTnk2AAoJEB5K7WKYbNJd9OoIAL2AJSnYs1IsRIKK/yKlOtnV\nOqyNiAxfAkFDNPxq9cJckpp4M5ENXqBIgngNDxKcaMObh1dorYJ/uzg2Xo0uxc84\nc39aXhei4/6uSBCEZ4ooJNZM7jK/3xKBwtGXgIHeu58gsbmol8lgyfzgvea2IvN+\nQ+9rLKaeO3eExVpuXGtv1hBtHdB70aLrFRLPtR3vkolXlXLmUtMDJSKBJDoRDxjn\npToUy3gxm3wTFTujcRxXS8xdgK9YMeE+PxNyjj+ZpWNGpEcMavEQ6UjyKbX7KT9O\nsZ3O4ExujnwFIuWxDYic6/VXthi7nAqoYiIeSazSUSBNidNQIbGKZl4scLqdZHw=\n=jIKn\n-----END PGP SIGNATURE-----",
        "payload": "tree c369995b06a606b0ecf29ba06aa49346600b0987\nparent eee398fa123ff677f24f2211e8d3012650530c32\nparent deaf48b046e573f6774d19e74b58918ed777cb14\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1498314365 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1498315062 +0200\n\nMerge #10412: Improve wallet rescan API\n\ndeaf48b Handle TIMESTAMP_WINDOW within CWallet::RescanFromTime (Russell Yanofsky)\n5b2be2b Make CWallet::RescanFromTime comment less ambiguous (Russell Yanofsky)\n9bb66ab Add RescanFromTime method and use from rpcdump (Russell Yanofsky)\nccf84bb Move birthday optimization out of ScanForWalletTransactions (Russell Yanofsky)\n\nTree-SHA512: cd38433b8f5c5e44ecfba830a6a26bd9a9d0f4a22ae42bce17773d1a6fb25e1ee4289484996dad2d7acfa03059917ff062459f25030a761da7083ba5fbc87bc9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bef02fb6ac9f57fdb490f6a5725cde6bde0da124",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bef02fb6ac9f57fdb490f6a5725cde6bde0da124",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bef02fb6ac9f57fdb490f6a5725cde6bde0da124/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eee398fa123ff677f24f2211e8d3012650530c32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eee398fa123ff677f24f2211e8d3012650530c32",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eee398fa123ff677f24f2211e8d3012650530c32"
      },
      {
        "sha": "deaf48b046e573f6774d19e74b58918ed777cb14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deaf48b046e573f6774d19e74b58918ed777cb14",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/deaf48b046e573f6774d19e74b58918ed777cb14"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 51,
      "deletions": 22
    },
    "files": [
      {
        "sha": "0fe2412352b46372faf88b7073ed0505b3c6b869",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 17,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bef02fb6ac9f57fdb490f6a5725cde6bde0da124/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bef02fb6ac9f57fdb490f6a5725cde6bde0da124/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=bef02fb6ac9f57fdb490f6a5725cde6bde0da124",
        "patch": "@@ -148,7 +148,7 @@ UniValue importprivkey(const JSONRPCRequest& request)\n         pwallet->UpdateTimeFirstKey(1);\n \n         if (fRescan) {\n-            pwallet->ScanForWalletTransactions(chainActive.Genesis(), true);\n+            pwallet->RescanFromTime(TIMESTAMP_MIN, true /* update */);\n         }\n     }\n \n@@ -278,7 +278,7 @@ UniValue importaddress(const JSONRPCRequest& request)\n \n     if (fRescan)\n     {\n-        pwallet->ScanForWalletTransactions(chainActive.Genesis(), true);\n+        pwallet->RescanFromTime(TIMESTAMP_MIN, true /* update */);\n         pwallet->ReacceptWalletTransactions();\n     }\n \n@@ -436,7 +436,7 @@ UniValue importpubkey(const JSONRPCRequest& request)\n \n     if (fRescan)\n     {\n-        pwallet->ScanForWalletTransactions(chainActive.Genesis(), true);\n+        pwallet->RescanFromTime(TIMESTAMP_MIN, true /* update */);\n         pwallet->ReacceptWalletTransactions();\n     }\n \n@@ -536,11 +536,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n     file.close();\n     pwallet->ShowProgress(\"\", 100); // hide progress dialog in GUI\n     pwallet->UpdateTimeFirstKey(nTimeBegin);\n-\n-    CBlockIndex *pindex = chainActive.FindEarliestAtLeast(nTimeBegin - TIMESTAMP_WINDOW);\n-\n-    LogPrintf(\"Rescanning last %i blocks\\n\", pindex ? chainActive.Height() - pindex->nHeight + 1 : 0);\n-    pwallet->ScanForWalletTransactions(pindex);\n+    pwallet->RescanFromTime(nTimeBegin, false /* update */);\n     pwallet->MarkDirty();\n \n     if (!fGood)\n@@ -1126,14 +1122,10 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     }\n \n     if (fRescan && fRunScan && requests.size()) {\n-        CBlockIndex* pindex = nLowestTimestamp > minimumTimestamp ? chainActive.FindEarliestAtLeast(std::max<int64_t>(nLowestTimestamp - TIMESTAMP_WINDOW, 0)) : chainActive.Genesis();\n-        CBlockIndex* scanFailed = nullptr;\n-        if (pindex) {\n-            scanFailed = pwallet->ScanForWalletTransactions(pindex, true);\n-            pwallet->ReacceptWalletTransactions();\n-        }\n+        int64_t scannedTime = pwallet->RescanFromTime(nLowestTimestamp, true /* update */);\n+        pwallet->ReacceptWalletTransactions();\n \n-        if (scanFailed) {\n+        if (scannedTime > nLowestTimestamp) {\n             std::vector<UniValue> results = response.getValues();\n             response.clear();\n             response.setArray();\n@@ -1143,7 +1135,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n                 // range, or if the import result already has an error set, let\n                 // the result stand unmodified. Otherwise replace the result\n                 // with an error message.\n-                if (GetImportTimestamp(request, now) - TIMESTAMP_WINDOW > scanFailed->GetBlockTimeMax() || results.at(i).exists(\"error\")) {\n+                if (scannedTime <= GetImportTimestamp(request, now) || results.at(i).exists(\"error\")) {\n                     response.push_back(results.at(i));\n                 } else {\n                     UniValue result = UniValue(UniValue::VOBJ);\n@@ -1159,7 +1151,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n                                       \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n                                       \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n                                       \"and -rescan options).\",\n-                                GetImportTimestamp(request, now), scanFailed->GetBlockTimeMax(), TIMESTAMP_WINDOW)));\n+                                GetImportTimestamp(request, now), scannedTime - TIMESTAMP_WINDOW - 1, TIMESTAMP_WINDOW)));\n                     response.push_back(std::move(result));\n                 }\n                 ++i;"
      },
      {
        "sha": "0d1a86dd244bd9d14afef42c2561d21c646a3af7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 5,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bef02fb6ac9f57fdb490f6a5725cde6bde0da124/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bef02fb6ac9f57fdb490f6a5725cde6bde0da124/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bef02fb6ac9f57fdb490f6a5725cde6bde0da124",
        "patch": "@@ -220,6 +220,10 @@ bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigne\n     return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret);\n }\n \n+/**\n+ * Update wallet first key creation time. This should be called whenever keys\n+ * are added to the wallet, with the oldest key creation time.\n+ */\n void CWallet::UpdateTimeFirstKey(int64_t nCreateTime)\n {\n     AssertLockHeld(cs_wallet);\n@@ -1467,6 +1471,34 @@ void CWalletTx::GetAmounts(std::list<COutputEntry>& listReceived,\n \n }\n \n+/**\n+ * Scan active chain for relevant transactions after importing keys. This should\n+ * be called whenever new keys are added to the wallet, with the oldest key\n+ * creation time.\n+ *\n+ * @return Earliest timestamp that could be successfully scanned from. Timestamp\n+ * returned will be higher than startTime if relevant blocks could not be read.\n+ */\n+int64_t CWallet::RescanFromTime(int64_t startTime, bool update)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(cs_wallet);\n+\n+    // Find starting block. May be null if nCreateTime is greater than the\n+    // highest blockchain timestamp, in which case there is nothing that needs\n+    // to be scanned.\n+    CBlockIndex* const startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n+    LogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n+\n+    if (startBlock) {\n+        const CBlockIndex* const failedBlock = ScanForWalletTransactions(startBlock, update);\n+        if (failedBlock) {\n+            return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n+        }\n+    }\n+    return startTime;\n+}\n+\n /**\n  * Scan the block chain (starting in pindexStart) for transactions\n  * from or to us. If fUpdate is true, found transactions that already\n@@ -1488,11 +1520,6 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool f\n         fAbortRescan = false;\n         fScanningWallet = true;\n \n-        // no need to read and scan block, if block was created before\n-        // our wallet birthday (as adjusted for block time variability)\n-        while (pindex && nTimeFirstKey && (pindex->GetBlockTime() < (nTimeFirstKey - TIMESTAMP_WINDOW)))\n-            pindex = chainActive.Next(pindex);\n-\n         ShowProgress(_(\"Rescanning...\"), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n         double dProgressStart = GuessVerificationProgress(chainParams.TxData(), pindex);\n         double dProgressTip = GuessVerificationProgress(chainParams.TxData(), chainActive.Tip());\n@@ -3881,6 +3908,13 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n         uiInterface.InitMessage(_(\"Rescanning...\"));\n         LogPrintf(\"Rescanning last %i blocks (from block %i)...\\n\", chainActive.Height() - pindexRescan->nHeight, pindexRescan->nHeight);\n+\n+        // No need to read and scan block if block was created before\n+        // our wallet birthday (as adjusted for block time variability)\n+        while (pindexRescan && walletInstance->nTimeFirstKey && (pindexRescan->GetBlockTime() < (walletInstance->nTimeFirstKey - TIMESTAMP_WINDOW))) {\n+            pindexRescan = chainActive.Next(pindexRescan);\n+        }\n+\n         nStart = GetTimeMillis();\n         walletInstance->ScanForWalletTransactions(pindexRescan, true);\n         LogPrintf(\" rescan      %15dms\\n\", GetTimeMillis() - nStart);"
      },
      {
        "sha": "6ed955cf58e048f2e36bafeb0a39a3a6a00d6209",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bef02fb6ac9f57fdb490f6a5725cde6bde0da124/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bef02fb6ac9f57fdb490f6a5725cde6bde0da124/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=bef02fb6ac9f57fdb490f6a5725cde6bde0da124",
        "patch": "@@ -68,6 +68,8 @@ static const bool DEFAULT_USE_HD_WALLET = true;\n \n extern const char * DEFAULT_WALLET_DAT;\n \n+static const int64_t TIMESTAMP_MIN = 0;\n+\n class CBlockIndex;\n class CCoinControl;\n class COutput;\n@@ -919,6 +921,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) override;\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n     bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n+    int64_t RescanFromTime(int64_t startTime, bool update);\n     CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;"
      }
    ]
  },
  {
    "sha": "d609fd85ca41c003233d74fbd6c680970ad4a48b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjA5ZmQ4NWNhNDFjMDAzMjMzZDc0ZmJkNmM2ODA5NzBhZDRhNDhi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-25T08:01:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-25T08:26:01Z"
      },
      "message": "Merge #9176: Globals: Pass Consensus::Params through CBlockTreeDB::LoadBlockIndexGuts()\n\nb324b28 Globals: Pass Consensus::Params through CBlockTreeDB::LoadBlockIndexGuts() (Jorge Tim\u00f3n)\n\nTree-SHA512: 9ef561a026960dc69df52603f4d60246c913bdd127465e8238f0954c6bbbc6b8b3b039bab70df38be1cbf5d06788fb631a2236b49c0167633d54366103c7c055",
      "tree": {
        "sha": "3aabeb5fbf86f88a3f13f0230e8840357fe6b93f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3aabeb5fbf86f88a3f13f0230e8840357fe6b93f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d609fd85ca41c003233d74fbd6c680970ad4a48b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZT3OZAAoJEB5K7WKYbNJdZvkH/2owjQm1a84Kn7DNRKeryvX5\nvDkq0VJF4qkX7xfF/zwB2Y3WgUTFMu95GOvEixzgwMpAfVB0oTkq2w9j2oyfei0e\nr/KDNtcNHmoRhtFuaOLE6cHwm+CWXxGtWoNfp55tdoLWMV8DkWrCmhbcToLfCD7+\nFPjUX+RTuhm9eeTXFN4lOVwM0d1GZGx0murN1FFogFsL6Uxruom23dtxSp2Ed1OW\nsyaS89uX/wSYxtcU2CVI2x+pzhUiBtYWF+TaVgMtee24pQqHSmS9O/IeMNnduwvZ\nnn4C9G5PL+lahaTugUPNpLoj1XYj58Ud/r93f5KrS9b8ywjys7y137PtT91ELl8=\n=FeaJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 3aabeb5fbf86f88a3f13f0230e8840357fe6b93f\nparent bef02fb6ac9f57fdb490f6a5725cde6bde0da124\nparent b324b2820903e777f3bbf5bf96686bbe723d8df7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1498377681 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1498379161 +0200\n\nMerge #9176: Globals: Pass Consensus::Params through CBlockTreeDB::LoadBlockIndexGuts()\n\nb324b28 Globals: Pass Consensus::Params through CBlockTreeDB::LoadBlockIndexGuts() (Jorge Tim\u00f3n)\n\nTree-SHA512: 9ef561a026960dc69df52603f4d60246c913bdd127465e8238f0954c6bbbc6b8b3b039bab70df38be1cbf5d06788fb631a2236b49c0167633d54366103c7c055\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d609fd85ca41c003233d74fbd6c680970ad4a48b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d609fd85ca41c003233d74fbd6c680970ad4a48b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d609fd85ca41c003233d74fbd6c680970ad4a48b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bef02fb6ac9f57fdb490f6a5725cde6bde0da124",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bef02fb6ac9f57fdb490f6a5725cde6bde0da124",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bef02fb6ac9f57fdb490f6a5725cde6bde0da124"
      },
      {
        "sha": "b324b2820903e777f3bbf5bf96686bbe723d8df7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b324b2820903e777f3bbf5bf96686bbe723d8df7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b324b2820903e777f3bbf5bf96686bbe723d8df7"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "97e916fd220eb420d4df7ec63aa8901adc543001",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d609fd85ca41c003233d74fbd6c680970ad4a48b/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d609fd85ca41c003233d74fbd6c680970ad4a48b/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=d609fd85ca41c003233d74fbd6c680970ad4a48b",
        "patch": "@@ -210,7 +210,7 @@ bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue) {\n     return true;\n }\n \n-bool CBlockTreeDB::LoadBlockIndexGuts(std::function<CBlockIndex*(const uint256&)> insertBlockIndex)\n+bool CBlockTreeDB::LoadBlockIndexGuts(const Consensus::Params& consensusParams, std::function<CBlockIndex*(const uint256&)> insertBlockIndex)\n {\n     std::unique_ptr<CDBIterator> pcursor(NewIterator());\n \n@@ -238,12 +238,12 @@ bool CBlockTreeDB::LoadBlockIndexGuts(std::function<CBlockIndex*(const uint256&)\n                 pindexNew->nStatus        = diskindex.nStatus;\n                 pindexNew->nTx            = diskindex.nTx;\n \n-                if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits, Params().GetConsensus()))\n-                    return error(\"LoadBlockIndex(): CheckProofOfWork failed: %s\", pindexNew->ToString());\n+                if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits, consensusParams))\n+                    return error(\"%s: CheckProofOfWork failed: %s\", __func__, pindexNew->ToString());\n \n                 pcursor->Next();\n             } else {\n-                return error(\"LoadBlockIndex() : failed to read value\");\n+                return error(\"%s: failed to read value\", __func__);\n             }\n         } else {\n             break;"
      },
      {
        "sha": "2a3e4eb69619486847708aeb52cfcb92b30abbcc",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d609fd85ca41c003233d74fbd6c680970ad4a48b/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d609fd85ca41c003233d74fbd6c680970ad4a48b/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=d609fd85ca41c003233d74fbd6c680970ad4a48b",
        "patch": "@@ -122,7 +122,7 @@ class CBlockTreeDB : public CDBWrapper\n     bool WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> > &list);\n     bool WriteFlag(const std::string &name, bool fValue);\n     bool ReadFlag(const std::string &name, bool &fValue);\n-    bool LoadBlockIndexGuts(std::function<CBlockIndex*(const uint256&)> insertBlockIndex);\n+    bool LoadBlockIndexGuts(const Consensus::Params& consensusParams, std::function<CBlockIndex*(const uint256&)> insertBlockIndex);\n };\n \n #endif // BITCOIN_TXDB_H"
      },
      {
        "sha": "f09fff8ee8d537a55622ff1beaafa20ffb9832be",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d609fd85ca41c003233d74fbd6c680970ad4a48b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d609fd85ca41c003233d74fbd6c680970ad4a48b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d609fd85ca41c003233d74fbd6c680970ad4a48b",
        "patch": "@@ -3325,7 +3325,7 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n \n bool static LoadBlockIndexDB(const CChainParams& chainparams)\n {\n-    if (!pblocktree->LoadBlockIndexGuts(InsertBlockIndex))\n+    if (!pblocktree->LoadBlockIndexGuts(chainparams.GetConsensus(), InsertBlockIndex))\n         return false;\n \n     boost::this_thread::interruption_point();"
      }
    ]
  },
  {
    "sha": "c07475294ae2c60f1dcc394922838b1f1f57b476",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMDc0NzUyOTRhZTJjNjBmMWRjYzM5NDkyMjgzOGIxZjFmNTdiNDc2",
    "commit": {
      "author": {
        "name": "Ricardo Velhote",
        "email": "rvelhote@gmail.com",
        "date": "2017-05-14T18:18:26Z"
      },
      "committer": {
        "name": "Ricardo Velhote",
        "email": "rvelhote@gmail.com",
        "date": "2017-06-25T19:25:45Z"
      },
      "message": "[RPC] Add an uptime command that displays the amount of time that bitcoind has been running",
      "tree": {
        "sha": "c319c0083959385a694e7b30ea7f00422c5c82b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c319c0083959385a694e7b30ea7f00422c5c82b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c07475294ae2c60f1dcc394922838b1f1f57b476",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJZUA5OAAoJEA0kzbIiRyV2SXAIALg4W1MWw5A7D7erdxbznkRb\ntsx7wGKgcdu6JdwScB1+E2+Q3BDnTVqUGOj9qOda4iyHmX2tMJ0nj7DHyX9uLw2/\noyblW+O3IIYxxAXGVOAw50Y9GQSG4rsN5tyeox3sZq7d7TCD6bOhGzks2uPXTMEA\n0CkDrgfxs0ReiRWoKwdTm8lMHQed3CPJLRjB3rohaHXwCqr0s5PuFJ3BJ3evWWnT\nOFhlXOVEC9isoOzHrzuJ0x+TYC0BNU7GdsyBACUzAKIJGP2RohrDkqf+5i71BWZu\nUKlmWAZF466zLR7dqgKmdbTRstTY7sezfqDqHw966cBTeLU6AHKt6F6tWgvAY2Y=\n=rnn8\n-----END PGP SIGNATURE-----",
        "payload": "tree c319c0083959385a694e7b30ea7f00422c5c82b1\nparent d609fd85ca41c003233d74fbd6c680970ad4a48b\nauthor Ricardo Velhote <rvelhote@gmail.com> 1494785906 +0100\ncommitter Ricardo Velhote <rvelhote@gmail.com> 1498418745 +0100\n\n[RPC] Add an uptime command that displays the amount of time that bitcoind has been running\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c07475294ae2c60f1dcc394922838b1f1f57b476",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c07475294ae2c60f1dcc394922838b1f1f57b476",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c07475294ae2c60f1dcc394922838b1f1f57b476/comments",
    "author": {
      "login": "rvelhote",
      "id": 59101,
      "node_id": "MDQ6VXNlcjU5MTAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/59101?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rvelhote",
      "html_url": "https://github.com/rvelhote",
      "followers_url": "https://api.github.com/users/rvelhote/followers",
      "following_url": "https://api.github.com/users/rvelhote/following{/other_user}",
      "gists_url": "https://api.github.com/users/rvelhote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rvelhote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rvelhote/subscriptions",
      "organizations_url": "https://api.github.com/users/rvelhote/orgs",
      "repos_url": "https://api.github.com/users/rvelhote/repos",
      "events_url": "https://api.github.com/users/rvelhote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rvelhote/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rvelhote",
      "id": 59101,
      "node_id": "MDQ6VXNlcjU5MTAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/59101?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rvelhote",
      "html_url": "https://github.com/rvelhote",
      "followers_url": "https://api.github.com/users/rvelhote/followers",
      "following_url": "https://api.github.com/users/rvelhote/following{/other_user}",
      "gists_url": "https://api.github.com/users/rvelhote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rvelhote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rvelhote/subscriptions",
      "organizations_url": "https://api.github.com/users/rvelhote/orgs",
      "repos_url": "https://api.github.com/users/rvelhote/repos",
      "events_url": "https://api.github.com/users/rvelhote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rvelhote/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d609fd85ca41c003233d74fbd6c680970ad4a48b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d609fd85ca41c003233d74fbd6c680970ad4a48b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d609fd85ca41c003233d74fbd6c680970ad4a48b"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 63,
      "deletions": 3
    },
    "files": [
      {
        "sha": "33f4535ee22a56e13d063c005eb63ebe7f7cfb3e",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c07475294ae2c60f1dcc394922838b1f1f57b476/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c07475294ae2c60f1dcc394922838b1f1f57b476/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=c07475294ae2c60f1dcc394922838b1f1f57b476",
        "patch": "@@ -26,7 +26,6 @@\n \n class CBlockIndex;\n \n-static const int64_t nClientStartupTime = GetTime();\n static int64_t nLastHeaderTipUpdateNotification = 0;\n static int64_t nLastBlockTipUpdateNotification = 0;\n \n@@ -238,7 +237,7 @@ bool ClientModel::isReleaseVersion() const\n \n QString ClientModel::formatClientStartupTime() const\n {\n-    return QDateTime::fromTime_t(nClientStartupTime).toString();\n+    return QDateTime::fromTime_t(GetStartupTime()).toString();\n }\n \n QString ClientModel::dataDir() const"
      },
      {
        "sha": "c320d20453f24adcf4790789cca3af84a2208d6b",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c07475294ae2c60f1dcc394922838b1f1f57b476/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c07475294ae2c60f1dcc394922838b1f1f57b476/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=c07475294ae2c60f1dcc394922838b1f1f57b476",
        "patch": "@@ -258,6 +258,22 @@ UniValue stop(const JSONRPCRequest& jsonRequest)\n     return \"Bitcoin server stopping\";\n }\n \n+UniValue uptime(const JSONRPCRequest& jsonRequest)\n+{\n+    if (jsonRequest.fHelp || jsonRequest.params.size() > 1)\n+        throw std::runtime_error(\n+                \"uptime\\n\"\n+                        \"\\nReturns the total uptime of the server.\\n\"\n+                        \"\\nResult:\\n\"\n+                        \"ttt        (numeric) The number of seconds that the server has been running\\n\"\n+                        \"\\nExamples:\\n\"\n+                + HelpExampleCli(\"uptime\", \"\")\n+                + HelpExampleRpc(\"uptime\", \"\")\n+        );\n+\n+    return GetTime() - GetStartupTime();\n+}\n+\n /**\n  * Call Table\n  */\n@@ -267,6 +283,7 @@ static const CRPCCommand vRPCCommands[] =\n     /* Overall control/query calls */\n     { \"control\",            \"help\",                   &help,                   true,  {\"command\"}  },\n     { \"control\",            \"stop\",                   &stop,                   true,  {}  },\n+    { \"control\",            \"uptime\",                 &uptime,                 true,  {}  },\n };\n \n CRPCTable::CRPCTable()"
      },
      {
        "sha": "0e1464e590c1b79c8374b3f47f3cbe57b0c4c286",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c07475294ae2c60f1dcc394922838b1f1f57b476/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c07475294ae2c60f1dcc394922838b1f1f57b476/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=c07475294ae2c60f1dcc394922838b1f1f57b476",
        "patch": "@@ -84,6 +84,8 @@\n #include <openssl/rand.h>\n #include <openssl/conf.h>\n \n+// Application startup time (used for uptime calculation)\n+const int64_t nStartupTime = GetTime();\n \n const char * const BITCOIN_CONF_FILENAME = \"bitcoin.conf\";\n const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n@@ -889,3 +891,9 @@ std::string CopyrightHolders(const std::string& strPrefix)\n     }\n     return strCopyrightHolders;\n }\n+\n+// Obtain the application startup time (used for uptime calculation)\n+int64_t GetStartupTime()\n+{\n+    return nStartupTime;\n+}"
      },
      {
        "sha": "824ad51ac48a08d780db2402d0a037a5bf20f0c7",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c07475294ae2c60f1dcc394922838b1f1f57b476/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c07475294ae2c60f1dcc394922838b1f1f57b476/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=c07475294ae2c60f1dcc394922838b1f1f57b476",
        "patch": "@@ -5,7 +5,7 @@\n \n /**\n  * Server/client environment: argument handling, config file parsing,\n- * logging, thread wrappers\n+ * logging, thread wrappers, startup time\n  */\n #ifndef BITCOIN_UTIL_H\n #define BITCOIN_UTIL_H\n@@ -29,6 +29,9 @@\n \n #include <boost/signals2/signal.hpp>\n \n+// Application startup time (used for uptime calculation)\n+int64_t GetStartupTime();\n+\n static const bool DEFAULT_LOGTIMEMICROS = false;\n static const bool DEFAULT_LOGIPS        = false;\n static const bool DEFAULT_LOGTIMESTAMPS = true;"
      },
      {
        "sha": "4c7eea67d52540a2ca333831c3cf9ceacfc9ec31",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c07475294ae2c60f1dcc394922838b1f1f57b476/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c07475294ae2c60f1dcc394922838b1f1f57b476/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=c07475294ae2c60f1dcc394922838b1f1f57b476",
        "patch": "@@ -113,6 +113,7 @@\n     'listsinceblock.py',\n     'p2p-leaktests.py',\n     'wallet-encryption.py',\n+    'uptime.py',\n ]\n \n EXTENDED_SCRIPTS = ["
      },
      {
        "sha": "b20d6f5cb62bfe755905bf89d06720fd67390881",
        "filename": "test/functional/uptime.py",
        "status": "added",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c07475294ae2c60f1dcc394922838b1f1f57b476/test/functional/uptime.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c07475294ae2c60f1dcc394922838b1f1f57b476/test/functional/uptime.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/uptime.py?ref=c07475294ae2c60f1dcc394922838b1f1f57b476",
        "patch": "@@ -0,0 +1,32 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the RPC call related to the uptime command.\n+\n+Test corresponds to code in rpc/server.cpp.\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class UptimeTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self._test_uptime()\n+\n+    def _test_uptime(self):\n+        wait_time = 10\n+        self.nodes[0].setmocktime(int(time.time() + wait_time))\n+        assert(self.nodes[0].uptime() >= wait_time)\n+\n+\n+if __name__ == '__main__':\n+    UptimeTest().main()"
      }
    ]
  },
  {
    "sha": "f3f1e2e7d38005fa3edecb01469a18a6f7500ea6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmM2YxZTJlN2QzODAwNWZhM2VkZWNiMDE0NjlhMThhNmY3NTAwZWE2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-26T11:37:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-26T11:40:26Z"
      },
      "message": "Merge #9544: [trivial] Add end of namespace comments. Improve consistency.\n\n5a9b508 [trivial] Add end of namespace comments (practicalswift)\n\nTree-SHA512: 92b0fcae4d1d3f4da9e97569ae84ef2d6e09625a5815cd0e5f0eb6dd2ecba9852fa85c184c5ae9de5117050330ce995e9867b451fa8cd5512169025990541a2b",
      "tree": {
        "sha": "dcb6ea5f65307e2d5c6dee21b739a52870a660da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dcb6ea5f65307e2d5c6dee21b739a52870a660da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZUPKqAAoJEB5K7WKYbNJdh6UIAJj6x0La62jcA/rzsiUa3Nel\ne1/69vN0ICxZ9el1e8qrE5RElgLCVgwIhFICxzBH6wDbxaFDDOIdq4QCICS9IPy+\nNjMtb3bOfmqG3ZkWbqdixBTDGagTlG9C0VOdV1PsoPxuiy7ncPAYLjpzPbo5soMR\nOGEqQt9l6vAtfufWVy4k++yRQZVeNV/zcJ0AcU8LBZ9mn7cRMu0lad7QEXxw/BCQ\nX3fGNzTlLdeiaPa3FSj1VDv0PD/W9AcTfE3tSktF52MLWeQCo/3CEFEmLIo7WWyv\n7jnXp1P9rsxw5HduWD4sr2FK/kA2RRV5gJPxB/v9x3pivQt2vbp2O5l4h5MTpdk=\n=o/a4\n-----END PGP SIGNATURE-----",
        "payload": "tree dcb6ea5f65307e2d5c6dee21b739a52870a660da\nparent d609fd85ca41c003233d74fbd6c680970ad4a48b\nparent 5a9b508279b3a221d36149aa2e811a9702b28e60\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1498477062 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1498477226 +0200\n\nMerge #9544: [trivial] Add end of namespace comments. Improve consistency.\n\n5a9b508 [trivial] Add end of namespace comments (practicalswift)\n\nTree-SHA512: 92b0fcae4d1d3f4da9e97569ae84ef2d6e09625a5815cd0e5f0eb6dd2ecba9852fa85c184c5ae9de5117050330ce995e9867b451fa8cd5512169025990541a2b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d609fd85ca41c003233d74fbd6c680970ad4a48b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d609fd85ca41c003233d74fbd6c680970ad4a48b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d609fd85ca41c003233d74fbd6c680970ad4a48b"
      },
      {
        "sha": "5a9b508279b3a221d36149aa2e811a9702b28e60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a9b508279b3a221d36149aa2e811a9702b28e60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a9b508279b3a221d36149aa2e811a9702b28e60"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 37,
      "deletions": 22
    },
    "files": [
      {
        "sha": "81bdcc9fdb936f656be7ac38b28a52762b7f2f1a",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 16,
        "deletions": 1,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=f3f1e2e7d38005fa3edecb01469a18a6f7500ea6",
        "patch": "@@ -68,7 +68,7 @@ public:\n         return true;\n     }\n }\n-}\n+} // namespace foo\n ```\n \n Doxygen comments\n@@ -438,6 +438,21 @@ Source code organization\n \n   - *Rationale*: Avoids symbol conflicts\n \n+- Terminate namespaces with a comment (`// namespace mynamespace`). The comment\n+  should be placed on the same line as the brace closing the namespace, e.g.\n+\n+```c++\n+namespace mynamespace {\n+    ...\n+} // namespace mynamespace\n+\n+namespace {\n+    ...\n+} // namespace\n+```\n+\n+  - *Rationale*: Avoids confusion about the namespace context\n+\n GUI\n -----\n "
      },
      {
        "sha": "efa1beb1e4f7c908f23b8f34161494287c3555d6",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=f3f1e2e7d38005fa3edecb01469a18a6f7500ea6",
        "patch": "@@ -225,7 +225,7 @@ class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n     bool operator()(const CNoDestination& no) const { return false; }\n };\n \n-} // anon namespace\n+} // namespace\n \n bool CBitcoinAddress::Set(const CKeyID& id)\n {"
      },
      {
        "sha": "7bb1b93668cf7472dd8781cf750596d204d5314a",
        "filename": "src/bench/checkblock.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/bench/checkblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/bench/checkblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkblock.cpp?ref=f3f1e2e7d38005fa3edecb01469a18a6f7500ea6",
        "patch": "@@ -11,7 +11,7 @@\n \n namespace block_bench {\n #include \"bench/data/block413567.raw.h\"\n-}\n+} // namespace block_bench\n \n // These are the two major time-sinks which happen after we have fully received\n // a block off the wire, but before we can relay the block on to peers using"
      },
      {
        "sha": "b4d1c90992b767f2f3676936f0478f2ef44a1b98",
        "filename": "src/compat/glibc_sanity.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/compat/glibc_sanity.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/compat/glibc_sanity.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_sanity.cpp?ref=f3f1e2e7d38005fa3edecb01469a18a6f7500ea6",
        "patch": "@@ -56,7 +56,7 @@ bool sanity_test_fdelt()\n }\n #endif\n \n-} // anon namespace\n+} // namespace\n \n bool glibc_sanity_test()\n {"
      },
      {
        "sha": "569fb1bbe886c5f561e5273a5f2fa3f086a32333",
        "filename": "src/compat/glibcxx_sanity.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/compat/glibcxx_sanity.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/compat/glibcxx_sanity.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibcxx_sanity.cpp?ref=f3f1e2e7d38005fa3edecb01469a18a6f7500ea6",
        "patch": "@@ -38,7 +38,7 @@ bool sanity_test_list(unsigned int size)\n     return true;\n }\n \n-} // anon namespace\n+} // namespace\n \n // trigger: string::at(x) on an empty string to trigger __throw_out_of_range_fmt.\n // test: force std::string to throw an out_of_range exception. Verify that"
      },
      {
        "sha": "ba9e21cc1fce8b36a5b199290147b1d2fdbd0ac7",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=f3f1e2e7d38005fa3edecb01469a18a6f7500ea6",
        "patch": "@@ -209,4 +209,4 @@ const std::vector<unsigned char>& GetObfuscateKey(const CDBWrapper &w)\n     return w.obfuscate_key;\n }\n \n-};\n+} // namespace dbwrapper_private"
      },
      {
        "sha": "1f3a58e53ba4ee2f29eee22104c327813dca86f9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f3f1e2e7d38005fa3edecb01469a18a6f7500ea6",
        "patch": "@@ -822,7 +822,7 @@ int nUserMaxConnections;\n int nFD;\n ServiceFlags nLocalServices = NODE_NETWORK;\n \n-}\n+} // namespace\n \n [[noreturn]] static void new_handler_terminate()\n {"
      },
      {
        "sha": "8fc6f6f95e9f27404a0a184629653c76edbc3d8a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=f3f1e2e7d38005fa3edecb01469a18a6f7500ea6",
        "patch": "@@ -120,7 +120,7 @@ namespace {\n     MapRelay mapRelay;\n     /** Expiration-time ordered list of (expire time, relay map entry) pairs, protected by cs_main). */\n     std::deque<std::pair<int64_t, MapRelay::iterator>> vRelayExpiration;\n-} // anon namespace\n+} // namespace\n \n //////////////////////////////////////////////////////////////////////////////\n //\n@@ -559,7 +559,7 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<con\n     }\n }\n \n-} // anon namespace\n+} // namespace\n \n bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n     LOCK(cs_main);"
      },
      {
        "sha": "da87e40091f65088ce6fff620cb27884bbbbae22",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=f3f1e2e7d38005fa3edecb01469a18a6f7500ea6",
        "patch": "@@ -39,7 +39,7 @@ const char *SENDCMPCT=\"sendcmpct\";\n const char *CMPCTBLOCK=\"cmpctblock\";\n const char *GETBLOCKTXN=\"getblocktxn\";\n const char *BLOCKTXN=\"blocktxn\";\n-};\n+} // namespace NetMsgType\n \n /** All known message types. Keep this in the same order as the list of\n  * messages above and in protocol.h."
      },
      {
        "sha": "a16457ea4ee39babac484348faf98764d0063974",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=f3f1e2e7d38005fa3edecb01469a18a6f7500ea6",
        "patch": "@@ -11,7 +11,7 @@ namespace\n {\n /* Global secp256k1_context object used for verification. */\n secp256k1_context* secp256k1_context_verify = NULL;\n-}\n+} // namespace\n \n /** This function is taken from the libsecp256k1 distribution and implements\n  *  DER parsing for ECDSA signatures, while supporting an arbitrary subset of"
      },
      {
        "sha": "4b71a42cdff54f87d267dda9655cce335c3eb4f1",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=f3f1e2e7d38005fa3edecb01469a18a6f7500ea6",
        "patch": "@@ -68,7 +68,7 @@ struct ECCryptoClosure\n };\n \n ECCryptoClosure instance_of_eccryptoclosure;\n-}\n+} // namespace\n \n /** Check that all specified flags are part of the libconsensus interface. */\n static bool verify_flags(unsigned int flags)"
      },
      {
        "sha": "7149c938fc8242c8e90c36f279782b5493b467da",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=f3f1e2e7d38005fa3edecb01469a18a6f7500ea6",
        "patch": "@@ -31,7 +31,7 @@ inline bool set_error(ScriptError* ret, const ScriptError serror)\n     return false;\n }\n \n-} // anon namespace\n+} // namespace\n \n bool CastToBool(const valtype& vch)\n {\n@@ -1164,7 +1164,7 @@ uint256 GetOutputsHash(const CTransaction& txTo) {\n     return ss.GetHash();\n }\n \n-} // anon namespace\n+} // namespace\n \n PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo)\n {"
      },
      {
        "sha": "befc5f52338d7ca5855879458b62f0a185664d4e",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=f3f1e2e7d38005fa3edecb01469a18a6f7500ea6",
        "patch": "@@ -66,7 +66,7 @@ class CSignatureCache\n  * signatureCache could be made local to VerifySignature.\n */\n static CSignatureCache signatureCache;\n-}\n+} // namespace\n \n // To be called once in AppInitMain/BasicTestingSetup to initialize the\n // signatureCache."
      },
      {
        "sha": "4b01a6de94401e8891278705dcb6e49882e42a3a",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=f3f1e2e7d38005fa3edecb01469a18a6f7500ea6",
        "patch": "@@ -399,7 +399,7 @@ class DummySignatureChecker : public BaseSignatureChecker\n     }\n };\n const DummySignatureChecker dummyChecker;\n-}\n+} // namespace\n \n const BaseSignatureChecker& DummySignatureCreator::Checker() const\n {"
      },
      {
        "sha": "8e08acf0c61b70dd07edd29b361fd102b7c94d05",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=f3f1e2e7d38005fa3edecb01469a18a6f7500ea6",
        "patch": "@@ -273,7 +273,7 @@ class CScriptVisitor : public boost::static_visitor<bool>\n         return true;\n     }\n };\n-}\n+} // namespace\n \n CScript GetScriptForDestination(const CTxDestination& dest)\n {"
      },
      {
        "sha": "622b157621f40c6ff94943ea0a512bcc3b82251a",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=f3f1e2e7d38005fa3edecb01469a18a6f7500ea6",
        "patch": "@@ -99,7 +99,7 @@ class CCoinsViewCacheTest : public CCoinsViewCache\n     size_t& usage() { return cachedCoinsUsage; }\n };\n \n-}\n+} // namespace\n \n BOOST_FIXTURE_TEST_SUITE(coins_tests, BasicTestingSetup)\n "
      },
      {
        "sha": "1bb191c73d00064fa4998943c52b74e6e0da5797",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=f3f1e2e7d38005fa3edecb01469a18a6f7500ea6",
        "patch": "@@ -468,7 +468,7 @@ std::string JSONPrettyPrint(const UniValue& univalue)\n     }\n     return ret;\n }\n-}\n+} // namespace\n \n BOOST_AUTO_TEST_CASE(script_build)\n {"
      },
      {
        "sha": "8deb703d2e5497dd217ad64fa1fb47b69d5e16d1",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=f3f1e2e7d38005fa3edecb01469a18a6f7500ea6",
        "patch": "@@ -769,7 +769,7 @@ class DepthAndScoreComparator\n         return counta < countb;\n     }\n };\n-}\n+} // namespace\n \n std::vector<CTxMemPool::indexed_transaction_set::const_iterator> CTxMemPool::GetSortedDepthAndScore() const\n {"
      },
      {
        "sha": "eb6ea42b6381ac5427de22278de15eb1179a8407",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f3f1e2e7d38005fa3edecb01469a18a6f7500ea6",
        "patch": "@@ -1297,7 +1297,7 @@ bool AbortNode(CValidationState& state, const std::string& strMessage, const std\n     return state.Error(strMessage);\n }\n \n-} // anon namespace\n+} // namespace\n \n enum DisconnectResult\n {"
      },
      {
        "sha": "92c90b7efb1454d8c5623f430c16a02332c3682b",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=f3f1e2e7d38005fa3edecb01469a18a6f7500ea6",
        "patch": "@@ -189,7 +189,7 @@ class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {\n     uint32_t Mask(const Consensus::Params& params) const { return ((uint32_t)1) << params.vDeployments[id].bit; }\n };\n \n-}\n+} // namespace\n \n ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)\n {"
      }
    ]
  },
  {
    "sha": "22a0aca32974b37c50ec175181010115c1b3fc7f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMmEwYWNhMzI5NzRiMzdjNTBlYzE3NTE4MTAxMDExNWMxYjNmYzdm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-26T12:42:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-26T13:04:54Z"
      },
      "message": "Merge #10496: Add Binds, WhiteBinds, Whitelistedrange to CConnman::Options\n\n07b2afe add Binds, WhiteBinds to CConnman::Options (Marko Bencun)\nce79f32 add WhitelistedRange to CConnman::Options (Marko Bencun)\n\nTree-SHA512: c23a6f317c955338af531fa3e53e3c42e995f88c6e1939bbc2ad119fa5b786c54b3dad3d2e9b3f830b7292c0c63a02fcff66a89907d0fa8d7c83aefade01af45",
      "tree": {
        "sha": "070e7f818317bd325315149c1b6add1d79d6b123",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/070e7f818317bd325315149c1b6add1d79d6b123"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22a0aca32974b37c50ec175181010115c1b3fc7f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZUQZ2AAoJEB5K7WKYbNJd9voH/iYWME3VZbIgS4E7Hqt/KFJt\ncp3KAUzh9QVM/KoXrfQvx37/6/CDfe93umRFjRZc+IY+1OSmTEOUtYrvffM/t0aX\nUfBo/xJ7Zt27HX2zC3k+qdZISrkn8XNa73UhjwqZN9H8MyXH/xXXWFwH4ShulT5e\nI+0cOkmALmDstx5F5SLxLYun3ENxlwzNNHWzR80BKLaByOd6z2PZKB/pixYIg1je\nQBuoZa5U5JYgcoBCta7hqBQjZw4OIx6/w4+k4J0Z4BGqKnZ2r5PMxUG3WMq0GPbu\n43D9RqAtiCN0Ut3c2m4Pnp9guvTotxkS2FfrVuAyglgqe2y9/GaMCkjc5Ck2cl0=\n=vlrp\n-----END PGP SIGNATURE-----",
        "payload": "tree 070e7f818317bd325315149c1b6add1d79d6b123\nparent f3f1e2e7d38005fa3edecb01469a18a6f7500ea6\nparent 07b2afef10bb6366a270e325fd41a8bc526c9ef3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1498480966 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1498482294 +0200\n\nMerge #10496: Add Binds, WhiteBinds, Whitelistedrange to CConnman::Options\n\n07b2afe add Binds, WhiteBinds to CConnman::Options (Marko Bencun)\nce79f32 add WhitelistedRange to CConnman::Options (Marko Bencun)\n\nTree-SHA512: c23a6f317c955338af531fa3e53e3c42e995f88c6e1939bbc2ad119fa5b786c54b3dad3d2e9b3f830b7292c0c63a02fcff66a89907d0fa8d7c83aefade01af45\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22a0aca32974b37c50ec175181010115c1b3fc7f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22a0aca32974b37c50ec175181010115c1b3fc7f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22a0aca32974b37c50ec175181010115c1b3fc7f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3f1e2e7d38005fa3edecb01469a18a6f7500ea6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3f1e2e7d38005fa3edecb01469a18a6f7500ea6"
      },
      {
        "sha": "07b2afef10bb6366a270e325fd41a8bc526c9ef3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07b2afef10bb6366a270e325fd41a8bc526c9ef3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07b2afef10bb6366a270e325fd41a8bc526c9ef3"
      }
    ],
    "stats": {
      "total": 182,
      "additions": 103,
      "deletions": 79
    },
    "files": [
      {
        "sha": "88084cbeec6c1cf3e2037c48e87f90094012373b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 65,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22a0aca32974b37c50ec175181010115c1b3fc7f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22a0aca32974b37c50ec175181010115c1b3fc7f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=22a0aca32974b37c50ec175181010115c1b3fc7f",
        "patch": "@@ -88,14 +88,6 @@ static CZMQNotificationInterface* pzmqNotificationInterface = NULL;\n #define MIN_CORE_FILEDESCRIPTORS 150\n #endif\n \n-/** Used to pass flags to the Bind() function */\n-enum BindFlags {\n-    BF_NONE         = 0,\n-    BF_EXPLICIT     = (1U << 0),\n-    BF_REPORT_ERROR = (1U << 1),\n-    BF_WHITELIST    = (1U << 2),\n-};\n-\n static const char* FEE_ESTIMATES_FILENAME=\"fee_estimates.dat\";\n \n //////////////////////////////////////////////////////////////////////////////\n@@ -296,17 +288,6 @@ static void registerSignalHandler(int signal, void(*handler)(int))\n }\n #endif\n \n-bool static Bind(CConnman& connman, const CService &addr, unsigned int flags) {\n-    if (!(flags & BF_EXPLICIT) && IsLimited(addr))\n-        return false;\n-    std::string strError;\n-    if (!connman.BindListenPort(addr, strError, (flags & BF_WHITELIST) != 0)) {\n-        if (flags & BF_REPORT_ERROR)\n-            return InitError(strError);\n-        return false;\n-    }\n-    return true;\n-}\n void OnRPCStarted()\n {\n     uiInterface.NotifyBlockTip.connect(&RPCNotifyBlockChange);\n@@ -898,10 +879,16 @@ bool AppInitParameterInteraction()\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n     }\n \n+    // -bind and -whitebind can't be set when not listening\n+    size_t nUserBind =\n+        (gArgs.IsArgSet(\"-bind\") ? gArgs.GetArgs(\"-bind\").size() : 0) +\n+        (gArgs.IsArgSet(\"-whitebind\") ? gArgs.GetArgs(\"-whitebind\").size() : 0);\n+    if (nUserBind != 0 && !gArgs.GetBoolArg(\"-listen\", DEFAULT_LISTEN)) {\n+        return InitError(\"Cannot set -bind or -whitebind together with -listen=0\");\n+    }\n+\n     // Make sure enough file descriptors are available\n-    int nBind = std::max(\n-                (gArgs.IsArgSet(\"-bind\") ? gArgs.GetArgs(\"-bind\").size() : 0) +\n-                (gArgs.IsArgSet(\"-whitebind\") ? gArgs.GetArgs(\"-whitebind\").size() : 0), size_t(1));\n+    int nBind = std::max(nUserBind, size_t(1));\n     nUserMaxConnections = GetArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);\n     nMaxConnections = std::max(nUserMaxConnections, 0);\n \n@@ -1280,16 +1267,6 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n \n-    if (gArgs.IsArgSet(\"-whitelist\")) {\n-        for (const std::string& net : gArgs.GetArgs(\"-whitelist\")) {\n-            CSubNet subnet;\n-            LookupSubNet(net.c_str(), subnet);\n-            if (!subnet.IsValid())\n-                return InitError(strprintf(_(\"Invalid netmask specified in -whitelist: '%s'\"), net));\n-            connman.AddWhitelistedRange(subnet);\n-        }\n-    }\n-\n     // Check for host lookup allowed before parsing any network related parameters\n     fNameLookup = GetBoolArg(\"-dns\", DEFAULT_NAME_LOOKUP);\n \n@@ -1340,36 +1317,6 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fDiscover = GetBoolArg(\"-discover\", true);\n     fRelayTxes = !GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY);\n \n-    if (fListen) {\n-        bool fBound = false;\n-        if (gArgs.IsArgSet(\"-bind\")) {\n-            for (const std::string& strBind : gArgs.GetArgs(\"-bind\")) {\n-                CService addrBind;\n-                if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false))\n-                    return InitError(ResolveErrMsg(\"bind\", strBind));\n-                fBound |= Bind(connman, addrBind, (BF_EXPLICIT | BF_REPORT_ERROR));\n-            }\n-        }\n-        if (gArgs.IsArgSet(\"-whitebind\")) {\n-            for (const std::string& strBind : gArgs.GetArgs(\"-whitebind\")) {\n-                CService addrBind;\n-                if (!Lookup(strBind.c_str(), addrBind, 0, false))\n-                    return InitError(ResolveErrMsg(\"whitebind\", strBind));\n-                if (addrBind.GetPort() == 0)\n-                    return InitError(strprintf(_(\"Need to specify a port with -whitebind: '%s'\"), strBind));\n-                fBound |= Bind(connman, addrBind, (BF_EXPLICIT | BF_REPORT_ERROR | BF_WHITELIST));\n-            }\n-        }\n-        if (!gArgs.IsArgSet(\"-bind\") && !gArgs.IsArgSet(\"-whitebind\")) {\n-            struct in_addr inaddr_any;\n-            inaddr_any.s_addr = INADDR_ANY;\n-            fBound |= Bind(connman, CService(in6addr_any, GetListenPort()), BF_NONE);\n-            fBound |= Bind(connman, CService(inaddr_any, GetListenPort()), !fBound ? BF_REPORT_ERROR : BF_NONE);\n-        }\n-        if (!fBound)\n-            return InitError(_(\"Failed to listen on any port. Use -listen=0 if you want this.\"));\n-    }\n-\n     if (gArgs.IsArgSet(\"-externalip\")) {\n         for (const std::string& strAddr : gArgs.GetArgs(\"-externalip\")) {\n             CService addrLocal;\n@@ -1636,7 +1583,6 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // Map ports with UPnP\n     MapPort(GetBoolArg(\"-upnp\", DEFAULT_UPNP));\n \n-    std::string strNodeError;\n     CConnman::Options connOptions;\n     connOptions.nLocalServices = nLocalServices;\n     connOptions.nRelevantServices = nRelevantServices;\n@@ -1652,12 +1598,45 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     connOptions.nMaxOutboundTimeframe = nMaxOutboundTimeframe;\n     connOptions.nMaxOutboundLimit = nMaxOutboundLimit;\n \n+    if (gArgs.IsArgSet(\"-bind\")) {\n+        for (const std::string& strBind : gArgs.GetArgs(\"-bind\")) {\n+            CService addrBind;\n+            if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false)) {\n+                return InitError(ResolveErrMsg(\"bind\", strBind));\n+            }\n+            connOptions.vBinds.push_back(addrBind);\n+        }\n+    }\n+    if (gArgs.IsArgSet(\"-whitebind\")) {\n+        for (const std::string& strBind : gArgs.GetArgs(\"-whitebind\")) {\n+            CService addrBind;\n+            if (!Lookup(strBind.c_str(), addrBind, 0, false)) {\n+                return InitError(ResolveErrMsg(\"whitebind\", strBind));\n+            }\n+            if (addrBind.GetPort() == 0) {\n+                return InitError(strprintf(_(\"Need to specify a port with -whitebind: '%s'\"), strBind));\n+            }\n+            connOptions.vWhiteBinds.push_back(addrBind);\n+        }\n+    }\n+\n+    if (gArgs.IsArgSet(\"-whitelist\")) {\n+        for (const auto& net : gArgs.GetArgs(\"-whitelist\")) {\n+            CSubNet subnet;\n+            LookupSubNet(net.c_str(), subnet);\n+            if (!subnet.IsValid())\n+                return InitError(strprintf(_(\"Invalid netmask specified in -whitelist: '%s'\"), net));\n+            connOptions.vWhitelistedRange.push_back(subnet);\n+        }\n+    }\n+\n     if (gArgs.IsArgSet(\"-seednode\")) {\n         connOptions.vSeedNodes = gArgs.GetArgs(\"-seednode\");\n     }\n \n-    if (!connman.Start(scheduler, strNodeError, connOptions))\n-        return InitError(strNodeError);\n+    if (!connman.Start(scheduler, connOptions)) {\n+        return false;\n+    }\n \n     // ********************************************************* Step 12: finished\n "
      },
      {
        "sha": "91a62626a2f2c5f1d781d38918abaacaa9a72cee",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 9,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22a0aca32974b37c50ec175181010115c1b3fc7f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22a0aca32974b37c50ec175181010115c1b3fc7f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=22a0aca32974b37c50ec175181010115c1b3fc7f",
        "patch": "@@ -64,6 +64,14 @@\n #endif\n #endif\n \n+/** Used to pass flags to the Bind() function */\n+enum BindFlags {\n+    BF_NONE         = 0,\n+    BF_EXPLICIT     = (1U << 0),\n+    BF_REPORT_ERROR = (1U << 1),\n+    BF_WHITELIST    = (1U << 2),\n+};\n+\n const static std::string NET_MESSAGE_COMMAND_OTHER = \"*other*\";\n \n static const uint64_t RANDOMIZER_ID_NETGROUP = 0x6c0edd8036ef4036ULL; // SHA256(\"netgroup\")[0:8]\n@@ -601,20 +609,13 @@ void CConnman::SetBannedSetDirty(bool dirty)\n \n \n bool CConnman::IsWhitelistedRange(const CNetAddr &addr) {\n-    LOCK(cs_vWhitelistedRange);\n     for (const CSubNet& subnet : vWhitelistedRange) {\n         if (subnet.Match(addr))\n             return true;\n     }\n     return false;\n }\n \n-void CConnman::AddWhitelistedRange(const CSubNet &subnet) {\n-    LOCK(cs_vWhitelistedRange);\n-    vWhitelistedRange.push_back(subnet);\n-}\n-\n-\n std::string CNode::GetAddrName() const {\n     LOCK(cs_addrName);\n     return addrName;\n@@ -2220,7 +2221,38 @@ NodeId CConnman::GetNewNodeId()\n     return nLastNodeId.fetch_add(1, std::memory_order_relaxed);\n }\n \n-bool CConnman::Start(CScheduler& scheduler, std::string& strNodeError, Options connOptions)\n+\n+bool CConnman::Bind(const CService &addr, unsigned int flags) {\n+    if (!(flags & BF_EXPLICIT) && IsLimited(addr))\n+        return false;\n+    std::string strError;\n+    if (!BindListenPort(addr, strError, (flags & BF_WHITELIST) != 0)) {\n+        if ((flags & BF_REPORT_ERROR) && clientInterface) {\n+            clientInterface->ThreadSafeMessageBox(strError, \"\", CClientUIInterface::MSG_ERROR);\n+        }\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool CConnman::InitBinds(const std::vector<CService>& binds, const std::vector<CService>& whiteBinds) {\n+    bool fBound = false;\n+    for (const auto& addrBind : binds) {\n+        fBound |= Bind(addrBind, (BF_EXPLICIT | BF_REPORT_ERROR));\n+    }\n+    for (const auto& addrBind : whiteBinds) {\n+        fBound |= Bind(addrBind, (BF_EXPLICIT | BF_REPORT_ERROR | BF_WHITELIST));\n+    }\n+    if (binds.empty() && whiteBinds.empty()) {\n+        struct in_addr inaddr_any;\n+        inaddr_any.s_addr = INADDR_ANY;\n+        fBound |= Bind(CService(in6addr_any, GetListenPort()), BF_NONE);\n+        fBound |= Bind(CService(inaddr_any, GetListenPort()), !fBound ? BF_REPORT_ERROR : BF_NONE);\n+    }\n+    return fBound;\n+}\n+\n+bool CConnman::Start(CScheduler& scheduler, Options connOptions)\n {\n     nTotalBytesRecv = 0;\n     nTotalBytesSent = 0;\n@@ -2242,11 +2274,23 @@ bool CConnman::Start(CScheduler& scheduler, std::string& strNodeError, Options c\n \n     SetBestHeight(connOptions.nBestHeight);\n \n+    clientInterface = connOptions.uiInterface;\n+\n+    if (fListen && !InitBinds(connOptions.vBinds, connOptions.vWhiteBinds)) {\n+        if (clientInterface) {\n+            clientInterface->ThreadSafeMessageBox(\n+                _(\"Failed to listen on any port. Use -listen=0 if you want this.\"),\n+                \"\", CClientUIInterface::MSG_ERROR);\n+        }\n+        return false;\n+    }\n+\n+    vWhitelistedRange = connOptions.vWhitelistedRange;\n+\n     for (const auto& strDest : connOptions.vSeedNodes) {\n         AddOneShot(strDest);\n     }\n \n-    clientInterface = connOptions.uiInterface;\n     if (clientInterface) {\n         clientInterface->InitMessage(_(\"Loading P2P addresses...\"));\n     }"
      },
      {
        "sha": "dc25e7a5dd6c33db12bf8e70579ed08b6051b810",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22a0aca32974b37c50ec175181010115c1b3fc7f/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22a0aca32974b37c50ec175181010115c1b3fc7f/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=22a0aca32974b37c50ec175181010115c1b3fc7f",
        "patch": "@@ -144,13 +144,14 @@ class CConnman\n         uint64_t nMaxOutboundTimeframe = 0;\n         uint64_t nMaxOutboundLimit = 0;\n         std::vector<std::string> vSeedNodes;\n+        std::vector<CSubNet> vWhitelistedRange;\n+        std::vector<CService> vBinds, vWhiteBinds;\n     };\n     CConnman(uint64_t seed0, uint64_t seed1);\n     ~CConnman();\n-    bool Start(CScheduler& scheduler, std::string& strNodeError, Options options);\n+    bool Start(CScheduler& scheduler, Options options);\n     void Stop();\n     void Interrupt();\n-    bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n     bool GetNetworkActive() const { return fNetworkActive; };\n     void SetNetworkActive(bool active);\n     bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = NULL, const char *strDest = NULL, bool fOneShot = false, bool fFeeler = false, bool fAddnode = false);\n@@ -244,8 +245,6 @@ class CConnman\n \n     unsigned int GetSendBufferSize() const;\n \n-    void AddWhitelistedRange(const CSubNet &subnet);\n-\n     ServiceFlags GetLocalServices() const;\n \n     //!set the max outbound target in bytes\n@@ -289,6 +288,9 @@ class CConnman\n         ListenSocket(SOCKET socket_, bool whitelisted_) : socket(socket_), whitelisted(whitelisted_) {}\n     };\n \n+    bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n+    bool Bind(const CService &addr, unsigned int flags);\n+    bool InitBinds(const std::vector<CService>& binds, const std::vector<CService>& whiteBinds);\n     void ThreadOpenAddedConnections();\n     void AddOneShot(const std::string& strDest);\n     void ProcessOneShot();\n@@ -346,7 +348,6 @@ class CConnman\n     // Whitelisted ranges. Any node connecting from these is automatically\n     // whitelisted (as well as those connecting to whitelisted binds).\n     std::vector<CSubNet> vWhitelistedRange;\n-    CCriticalSection cs_vWhitelistedRange;\n \n     unsigned int nSendBufferMaxSize;\n     unsigned int nReceiveFloodSize;"
      }
    ]
  },
  {
    "sha": "234ffc677ee58591b139695bf92bbd6f504ee91a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzRmZmM2NzdlZTU4NTkxYjEzOTY5NWJmOTJiYmQ2ZjUwNGVlOTFh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-26T15:06:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-26T15:11:15Z"
      },
      "message": "Merge #10559: Change semantics of HaveCoinInCache to match HaveCoin\n\n5257698 Change semantics of HaveCoinInCache to match HaveCoin (Alex Morcos)\n\nTree-SHA512: 397e9ba28646b81fffa53e55064735d4d242aaffdf8484506825f785b0e414f334e4c5cd1e4e1dd9a4b6d1f6954c7ecad15429934a1c4e8d39f596cbd9f5dd80",
      "tree": {
        "sha": "7f87a35577e7989820349cc0471a541c1ea961f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f87a35577e7989820349cc0471a541c1ea961f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/234ffc677ee58591b139695bf92bbd6f504ee91a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZUSQTAAoJEB5K7WKYbNJdMzoH/0zcl7ti4mFrfxhKVCYmZe6X\nqjbRXXeNSjgfmdMOZiSQgPKC9e+bdQP6nXYUKSTBS6iLpr8/EWT/udWDs+jUWJvw\naVn00lfhc1OvAGv+CuAAYaVi/kE5v5BwtPj66hbEaPO6OqfEPNLYKhCyNZynDOAQ\namah7BVMjesm2q3jDT1Al/DdlK9hbwgPxm59rtlVAUKm5YjmVV4LDQ7bqb/ZpYyu\ncKQJTqIJP+qsOUODrPZxYM5Ecgz+5VIhk66eswABOigFzdv+Pf552AAsOqa7LE1S\ne3wRW0bFUiUhNekwbuuNXy+IRYU81AI9TqoVT19m9v6boRj1Bhd+zGOuzLRRHSQ=\n=0Jgu\n-----END PGP SIGNATURE-----",
        "payload": "tree 7f87a35577e7989820349cc0471a541c1ea961f1\nparent 22a0aca32974b37c50ec175181010115c1b3fc7f\nparent 525769853efd7796679bf95d069a432df46d8e35\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1498489584 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1498489875 +0200\n\nMerge #10559: Change semantics of HaveCoinInCache to match HaveCoin\n\n5257698 Change semantics of HaveCoinInCache to match HaveCoin (Alex Morcos)\n\nTree-SHA512: 397e9ba28646b81fffa53e55064735d4d242aaffdf8484506825f785b0e414f334e4c5cd1e4e1dd9a4b6d1f6954c7ecad15429934a1c4e8d39f596cbd9f5dd80\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/234ffc677ee58591b139695bf92bbd6f504ee91a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/234ffc677ee58591b139695bf92bbd6f504ee91a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/234ffc677ee58591b139695bf92bbd6f504ee91a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22a0aca32974b37c50ec175181010115c1b3fc7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22a0aca32974b37c50ec175181010115c1b3fc7f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22a0aca32974b37c50ec175181010115c1b3fc7f"
      },
      {
        "sha": "525769853efd7796679bf95d069a432df46d8e35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/525769853efd7796679bf95d069a432df46d8e35",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/525769853efd7796679bf95d069a432df46d8e35"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f8df835e9f604f1bb9581b8039445eedc8bb925a",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/234ffc677ee58591b139695bf92bbd6f504ee91a/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/234ffc677ee58591b139695bf92bbd6f504ee91a/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=234ffc677ee58591b139695bf92bbd6f504ee91a",
        "patch": "@@ -125,7 +125,7 @@ bool CCoinsViewCache::HaveCoin(const COutPoint &outpoint) const {\n \n bool CCoinsViewCache::HaveCoinInCache(const COutPoint &outpoint) const {\n     CCoinsMap::const_iterator it = cacheCoins.find(outpoint);\n-    return it != cacheCoins.end();\n+    return (it != cacheCoins.end() && !it->second.coin.IsSpent());\n }\n \n uint256 CCoinsViewCache::GetBestBlock() const {"
      }
    ]
  },
  {
    "sha": "b3a279cd58d9ae0e107c7fee81f598635e53f9e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiM2EyNzljZDU4ZDlhZTBlMTA3YzdmZWU4MWY1OTg2MzVlNTNmOWUx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-04-16T13:57:11Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-26T17:45:48Z"
      },
      "message": "[MOVEONLY] Move LastCommonAncestor to chain",
      "tree": {
        "sha": "4ca31d34f211a7fb926e81c8fef27c5cd5f96ccc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ca31d34f211a7fb926e81c8fef27c5cd5f96ccc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3a279cd58d9ae0e107c7fee81f598635e53f9e1",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3a279cd58d9ae0e107c7fee81f598635e53f9e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3a279cd58d9ae0e107c7fee81f598635e53f9e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3a279cd58d9ae0e107c7fee81f598635e53f9e1/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "234ffc677ee58591b139695bf92bbd6f504ee91a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/234ffc677ee58591b139695bf92bbd6f504ee91a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/234ffc677ee58591b139695bf92bbd6f504ee91a"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 22,
      "deletions": 19
    },
    "files": [
      {
        "sha": "ffd58d471d34b5f9926194446137f4e703742a82",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3a279cd58d9ae0e107c7fee81f598635e53f9e1/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3a279cd58d9ae0e107c7fee81f598635e53f9e1/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=b3a279cd58d9ae0e107c7fee81f598635e53f9e1",
        "patch": "@@ -148,3 +148,22 @@ int64_t GetBlockProofEquivalentTime(const CBlockIndex& to, const CBlockIndex& fr\n     }\n     return sign * r.GetLow64();\n }\n+\n+/** Find the last common ancestor two blocks have.\n+ *  Both pa and pb must be non-NULL. */\n+const CBlockIndex* LastCommonAncestor(const CBlockIndex* pa, const CBlockIndex* pb) {\n+    if (pa->nHeight > pb->nHeight) {\n+        pa = pa->GetAncestor(pb->nHeight);\n+    } else if (pb->nHeight > pa->nHeight) {\n+        pb = pb->GetAncestor(pa->nHeight);\n+    }\n+\n+    while (pa != pb && pa && pb) {\n+        pa = pa->pprev;\n+        pb = pb->pprev;\n+    }\n+\n+    // Eventually all chain branches meet at the genesis block.\n+    assert(pa == pb);\n+    return pa;\n+}"
      },
      {
        "sha": "c5304b7d6f3e10bb32a1313d88d308ed14813d11",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3a279cd58d9ae0e107c7fee81f598635e53f9e1/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3a279cd58d9ae0e107c7fee81f598635e53f9e1/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=b3a279cd58d9ae0e107c7fee81f598635e53f9e1",
        "patch": "@@ -362,6 +362,9 @@ class CBlockIndex\n arith_uint256 GetBlockProof(const CBlockIndex& block);\n /** Return the time it would take to redo the work difference between from and to, assuming the current hashrate corresponds to the difficulty at tip, in seconds. */\n int64_t GetBlockProofEquivalentTime(const CBlockIndex& to, const CBlockIndex& from, const CBlockIndex& tip, const Consensus::Params&);\n+/** Find the forking point between two chain tips. */\n+const CBlockIndex* LastCommonAncestor(const CBlockIndex* pa, const CBlockIndex* pb);\n+\n \n /** Used to marshal pointers into hashes for db storage. */\n class CDiskBlockIndex : public CBlockIndex"
      },
      {
        "sha": "4d832f37113ef1f78ad95d1c97d938745f77cb9d",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 19,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3a279cd58d9ae0e107c7fee81f598635e53f9e1/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3a279cd58d9ae0e107c7fee81f598635e53f9e1/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=b3a279cd58d9ae0e107c7fee81f598635e53f9e1",
        "patch": "@@ -452,25 +452,6 @@ bool PeerHasHeader(CNodeState *state, const CBlockIndex *pindex)\n     return false;\n }\n \n-/** Find the last common ancestor two blocks have.\n- *  Both pa and pb must be non-NULL. */\n-const CBlockIndex* LastCommonAncestor(const CBlockIndex* pa, const CBlockIndex* pb) {\n-    if (pa->nHeight > pb->nHeight) {\n-        pa = pa->GetAncestor(pb->nHeight);\n-    } else if (pb->nHeight > pa->nHeight) {\n-        pb = pb->GetAncestor(pa->nHeight);\n-    }\n-\n-    while (pa != pb && pa && pb) {\n-        pa = pa->pprev;\n-        pb = pb->pprev;\n-    }\n-\n-    // Eventually all chain branches meet at the genesis block.\n-    assert(pa == pb);\n-    return pa;\n-}\n-\n /** Update pindexLastCommonBlock and add not-in-flight missing successors to vBlocks, until it has\n  *  at most count entries. */\n void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<const CBlockIndex*>& vBlocks, NodeId& nodeStaller, const Consensus::Params& consensusParams) {"
      }
    ]
  },
  {
    "sha": "013a56aa1af985894b3eaf7c325647b0b74e4456",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTNhNTZhYTFhZjk4NTg5NGIzZWFmN2MzMjU2NDdiMGI3NGU0NDU2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-04-19T16:34:30Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-26T17:45:48Z"
      },
      "message": "Non-atomic flushing using the blockchain as replay journal",
      "tree": {
        "sha": "e09581eda1ae2da213a85f699acc47e312c4e1e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e09581eda1ae2da213a85f699acc47e312c4e1e8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/013a56aa1af985894b3eaf7c325647b0b74e4456",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/013a56aa1af985894b3eaf7c325647b0b74e4456",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/013a56aa1af985894b3eaf7c325647b0b74e4456",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/013a56aa1af985894b3eaf7c325647b0b74e4456/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b3a279cd58d9ae0e107c7fee81f598635e53f9e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3a279cd58d9ae0e107c7fee81f598635e53f9e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3a279cd58d9ae0e107c7fee81f598635e53f9e1"
      }
    ],
    "stats": {
      "total": 202,
      "additions": 186,
      "deletions": 16
    },
    "files": [
      {
        "sha": "4bcafcec8cba5d97fe7f98c154bd7eaf563e4a65",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/013a56aa1af985894b3eaf7c325647b0b74e4456/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/013a56aa1af985894b3eaf7c325647b0b74e4456/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=013a56aa1af985894b3eaf7c325647b0b74e4456",
        "patch": "@@ -13,6 +13,7 @@\n bool CCoinsView::GetCoin(const COutPoint &outpoint, Coin &coin) const { return false; }\n bool CCoinsView::HaveCoin(const COutPoint &outpoint) const { return false; }\n uint256 CCoinsView::GetBestBlock() const { return uint256(); }\n+std::vector<uint256> CCoinsView::GetHeadBlocks() const { return std::vector<uint256>(); }\n bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return false; }\n CCoinsViewCursor *CCoinsView::Cursor() const { return 0; }\n \n@@ -21,6 +22,7 @@ CCoinsViewBacked::CCoinsViewBacked(CCoinsView *viewIn) : base(viewIn) { }\n bool CCoinsViewBacked::GetCoin(const COutPoint &outpoint, Coin &coin) const { return base->GetCoin(outpoint, coin); }\n bool CCoinsViewBacked::HaveCoin(const COutPoint &outpoint) const { return base->HaveCoin(outpoint); }\n uint256 CCoinsViewBacked::GetBestBlock() const { return base->GetBestBlock(); }\n+std::vector<uint256> CCoinsViewBacked::GetHeadBlocks() const { return base->GetHeadBlocks(); }\n void CCoinsViewBacked::SetBackend(CCoinsView &viewIn) { base = &viewIn; }\n bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return base->BatchWrite(mapCoins, hashBlock); }\n CCoinsViewCursor *CCoinsViewBacked::Cursor() const { return base->Cursor(); }\n@@ -81,13 +83,14 @@ void CCoinsViewCache::AddCoin(const COutPoint &outpoint, Coin&& coin, bool possi\n     cachedCoinsUsage += it->second.coin.DynamicMemoryUsage();\n }\n \n-void AddCoins(CCoinsViewCache& cache, const CTransaction &tx, int nHeight) {\n+void AddCoins(CCoinsViewCache& cache, const CTransaction &tx, int nHeight, bool check) {\n     bool fCoinbase = tx.IsCoinBase();\n     const uint256& txid = tx.GetHash();\n     for (size_t i = 0; i < tx.vout.size(); ++i) {\n-        // Pass fCoinbase as the possible_overwrite flag to AddCoin, in order to correctly\n+        bool overwrite = check ? cache.HaveCoin(COutPoint(txid, i)) : fCoinbase;\n+        // Always set the possible_overwrite flag to AddCoin for coinbase txn, in order to correctly\n         // deal with the pre-BIP30 occurrences of duplicate coinbase transactions.\n-        cache.AddCoin(COutPoint(txid, i), Coin(tx.vout[i], nHeight, fCoinbase), fCoinbase);\n+        cache.AddCoin(COutPoint(txid, i), Coin(tx.vout[i], nHeight, fCoinbase), overwrite);\n     }\n }\n "
      },
      {
        "sha": "de3264f46e0a9eda9acaf8c85b511d78a70a5cd0",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/013a56aa1af985894b3eaf7c325647b0b74e4456/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/013a56aa1af985894b3eaf7c325647b0b74e4456/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=013a56aa1af985894b3eaf7c325647b0b74e4456",
        "patch": "@@ -155,6 +155,12 @@ class CCoinsView\n     //! Retrieve the block hash whose state this CCoinsView currently represents\n     virtual uint256 GetBestBlock() const;\n \n+    //! Retrieve the range of blocks that may have been only partially written.\n+    //! If the database is in a consistent state, the result is the empty vector.\n+    //! Otherwise, a two-element vector is returned consisting of the new and\n+    //! the old block hash, in that order.\n+    virtual std::vector<uint256> GetHeadBlocks() const;\n+\n     //! Do a bulk modification (multiple Coin changes + BestBlock change).\n     //! The passed mapCoins can be modified.\n     virtual bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n@@ -181,6 +187,7 @@ class CCoinsViewBacked : public CCoinsView\n     bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;\n     bool HaveCoin(const COutPoint &outpoint) const override;\n     uint256 GetBestBlock() const override;\n+    std::vector<uint256> GetHeadBlocks() const override;\n     void SetBackend(CCoinsView &viewIn);\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) override;\n     CCoinsViewCursor *Cursor() const override;\n@@ -289,10 +296,12 @@ class CCoinsViewCache : public CCoinsViewBacked\n };\n \n //! Utility function to add all of a transaction's outputs to a cache.\n-// It assumes that overwrites are only possible for coinbase transactions,\n+// When check is false, this assumes that overwrites are only possible for coinbase transactions.\n+// When check is true, the underlying view may be queried to determine whether an addition is\n+// an overwrite.\n // TODO: pass in a boolean to limit these possible overwrites to known\n // (pre-BIP34) cases.\n-void AddCoins(CCoinsViewCache& cache, const CTransaction& tx, int nHeight);\n+void AddCoins(CCoinsViewCache& cache, const CTransaction& tx, int nHeight, bool check = false);\n \n //! Utility function to find any unspent output with a given txid.\n const Coin& AccessByTxid(const CCoinsViewCache& cache, const uint256& txid);"
      },
      {
        "sha": "51f0d4003566b33f0221e1f56397e112a789f6ca",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/013a56aa1af985894b3eaf7c325647b0b74e4456/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/013a56aa1af985894b3eaf7c325647b0b74e4456/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=013a56aa1af985894b3eaf7c325647b0b74e4456",
        "patch": "@@ -336,6 +336,9 @@ std::string HelpMessage(HelpMessageMode mode)\n #endif\n     }\n     strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n+    if (showDebug) {\n+        strUsage += HelpMessageOpt(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize));\n+    }\n     strUsage += HelpMessageOpt(\"-dbcache=<n>\", strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER));\n@@ -1426,6 +1429,13 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     break;\n                 }\n \n+                if (!ReplayBlocks(chainparams, pcoinsdbview)) {\n+                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n+                    break;\n+                }\n+                pcoinsTip->SetBestBlock(pcoinsdbview->GetBestBlock()); // TODO: only initialize pcoinsTip after ReplayBlocks\n+                LoadChainTip(chainparams);\n+\n                 if (!fReindex && chainActive.Tip() != NULL) {\n                     uiInterface.InitMessage(_(\"Rewinding blocks...\"));\n                     if (!RewindBlockIndex(chainparams)) {"
      },
      {
        "sha": "f0e5098b11e1fe79d578e3612618a17316dc89d0",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 2,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/013a56aa1af985894b3eaf7c325647b0b74e4456/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/013a56aa1af985894b3eaf7c325647b0b74e4456/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=013a56aa1af985894b3eaf7c325647b0b74e4456",
        "patch": "@@ -21,6 +21,7 @@ static const char DB_TXINDEX = 't';\n static const char DB_BLOCK_INDEX = 'b';\n \n static const char DB_BEST_BLOCK = 'B';\n+static const char DB_HEAD_BLOCKS = 'H';\n static const char DB_FLAG = 'F';\n static const char DB_REINDEX_FLAG = 'R';\n static const char DB_LAST_BLOCK = 'l';\n@@ -68,10 +69,45 @@ uint256 CCoinsViewDB::GetBestBlock() const {\n     return hashBestChain;\n }\n \n+std::vector<uint256> CCoinsViewDB::GetHeadBlocks() const {\n+    std::vector<uint256> vhashHeadBlocks;\n+    if (!db.Read(DB_HEAD_BLOCKS, vhashHeadBlocks)) {\n+        return std::vector<uint256>();\n+    }\n+    return vhashHeadBlocks;\n+}\n+\n bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n     CDBBatch batch(db);\n     size_t count = 0;\n     size_t changed = 0;\n+    size_t batch_size = (size_t)GetArg(\"-dbbatchsize\", nDefaultDbBatchSize);\n+\n+\n+    uint256 old_tip = GetBestBlock();\n+    if (old_tip.IsNull()) {\n+        // We may be in the middle of replaying.\n+        std::vector<uint256> old_heads = GetHeadBlocks();\n+        if (old_heads.size() == 2) {\n+            assert(old_heads[0] == hashBlock);\n+            old_tip = old_heads[1];\n+        }\n+    }\n+\n+    if (hashBlock.IsNull()) {\n+        // Initial flush, nothing to write.\n+        assert(mapCoins.empty());\n+        assert(old_tip.IsNull());\n+        return true;\n+    }\n+\n+    // In the first batch, mark the database as being in the middle of a\n+    // transition from old_tip to hashBlock.\n+    // A vector is used for future extensibility, as we may want to support\n+    // interrupting after partial writes from multiple independent reorgs.\n+    batch.Erase(DB_BEST_BLOCK);\n+    batch.Write(DB_HEAD_BLOCKS, std::vector<uint256>{hashBlock, old_tip});\n+\n     for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n         if (it->second.flags & CCoinsCacheEntry::DIRTY) {\n             CoinEntry entry(&it->first);\n@@ -84,10 +120,18 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n         count++;\n         CCoinsMap::iterator itOld = it++;\n         mapCoins.erase(itOld);\n+        if (batch.SizeEstimate() > batch_size) {\n+            LogPrint(BCLog::COINDB, \"Writing partial batch of %.2f MiB\\n\", batch.SizeEstimate() * (1.0 / 1048576.0));\n+            db.WriteBatch(batch);\n+            batch.Clear();\n+        }\n     }\n-    if (!hashBlock.IsNull())\n-        batch.Write(DB_BEST_BLOCK, hashBlock);\n \n+    // In the last batch, mark the database as consistent with hashBlock again.\n+    batch.Erase(DB_HEAD_BLOCKS);\n+    batch.Write(DB_BEST_BLOCK, hashBlock);\n+\n+    LogPrint(BCLog::COINDB, \"Writing final batch of %.2f MiB\\n\", batch.SizeEstimate() * (1.0 / 1048576.0));\n     bool ret = db.WriteBatch(batch);\n     LogPrint(BCLog::COINDB, \"Committed %u changed transaction outputs (out of %u) to coin database...\\n\", (unsigned int)changed, (unsigned int)count);\n     return ret;"
      },
      {
        "sha": "fa6bce214035ca75c3137c3d3f99cb74c0c51b05",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/013a56aa1af985894b3eaf7c325647b0b74e4456/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/013a56aa1af985894b3eaf7c325647b0b74e4456/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=013a56aa1af985894b3eaf7c325647b0b74e4456",
        "patch": "@@ -25,6 +25,8 @@ static constexpr int DB_PEAK_USAGE_FACTOR = 2;\n static constexpr int MAX_BLOCK_COINSDB_USAGE = 10 * DB_PEAK_USAGE_FACTOR;\n //! -dbcache default (MiB)\n static const int64_t nDefaultDbCache = 450;\n+//! -dbbatchsize default (bytes)\n+static const int64_t nDefaultDbBatchSize = 16 << 20;\n //! max. -dbcache (MiB)\n static const int64_t nMaxDbCache = sizeof(void*) > 4 ? 16384 : 1024;\n //! min. -dbcache (MiB)\n@@ -74,6 +76,7 @@ class CCoinsViewDB : public CCoinsView\n     bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;\n     bool HaveCoin(const COutPoint &outpoint) const override;\n     uint256 GetBestBlock() const override;\n+    std::vector<uint256> GetHeadBlocks() const override;\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) override;\n     CCoinsViewCursor *Cursor() const override;\n "
      },
      {
        "sha": "f5e31e0a0b454bb6b3e63c0636d7a992e4be0c44",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 105,
        "deletions": 9,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/013a56aa1af985894b3eaf7c325647b0b74e4456/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/013a56aa1af985894b3eaf7c325647b0b74e4456/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=013a56aa1af985894b3eaf7c325647b0b74e4456",
        "patch": "@@ -96,7 +96,7 @@ namespace {\n \n     struct CBlockIndexWorkComparator\n     {\n-        bool operator()(CBlockIndex *pa, CBlockIndex *pb) const {\n+        bool operator()(const CBlockIndex *pa, const CBlockIndex *pb) const {\n             // First sort by most total work, ...\n             if (pa->nChainWork > pb->nChainWork) return false;\n             if (pa->nChainWork < pb->nChainWork) return true;\n@@ -1331,17 +1331,19 @@ int ApplyTxInUndo(Coin&& undo, CCoinsViewCache& view, const COutPoint& out)\n             return DISCONNECT_FAILED; // adding output for transaction without known metadata\n         }\n     }\n-    view.AddCoin(out, std::move(undo), undo.fCoinBase);\n+    // The potential_overwrite parameter to AddCoin is only allowed to be false if we know for\n+    // sure that the coin did not already exist in the cache. As we have queried for that above\n+    // using HaveCoin, we don't need to guess. When fClean is false, a coin already existed and\n+    // it is an overwrite.\n+    view.AddCoin(out, std::move(undo), !fClean);\n \n     return fClean ? DISCONNECT_OK : DISCONNECT_UNCLEAN;\n }\n \n /** Undo the effects of this block (with given index) on the UTXO set represented by coins.\n- *  When UNCLEAN or FAILED is returned, view is left in an indeterminate state. */\n+ *  When FAILED is returned, view is left in an indeterminate state. */\n static DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view)\n {\n-    assert(pindex->GetBlockHash() == view.GetBestBlock());\n-\n     bool fClean = true;\n \n     CBlockUndo blockUndo;\n@@ -1946,6 +1948,7 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n     int64_t nStart = GetTimeMicros();\n     {\n         CCoinsViewCache view(pcoinsTip);\n+        assert(view.GetBestBlock() == pindexDelete->GetBlockHash());\n         if (DisconnectBlock(block, pindexDelete, view) != DISCONNECT_OK)\n             return error(\"DisconnectTip(): DisconnectBlock %s failed\", pindexDelete->GetBlockHash().ToString());\n         bool flushed = view.Flush();\n@@ -3417,20 +3420,26 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n     pblocktree->ReadFlag(\"txindex\", fTxIndex);\n     LogPrintf(\"%s: transaction index %s\\n\", __func__, fTxIndex ? \"enabled\" : \"disabled\");\n \n+    LoadChainTip(chainparams);\n+    return true;\n+}\n+\n+void LoadChainTip(const CChainParams& chainparams)\n+{\n+    if (chainActive.Tip() && chainActive.Tip()->GetBlockHash() == pcoinsTip->GetBestBlock()) return;\n+\n     // Load pointer to end of best chain\n     BlockMap::iterator it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n     if (it == mapBlockIndex.end())\n-        return true;\n+        return;\n     chainActive.SetTip(it->second);\n \n     PruneBlockIndexCandidates();\n \n-    LogPrintf(\"%s: hashBestChain=%s height=%d date=%s progress=%f\\n\", __func__,\n+    LogPrintf(\"Loaded best chain: hashBestChain=%s height=%d date=%s progress=%f\\n\",\n         chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(),\n         DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", chainActive.Tip()->GetBlockTime()),\n         GuessVerificationProgress(chainparams.TxData(), chainActive.Tip()));\n-\n-    return true;\n }\n \n CVerifyDB::CVerifyDB()\n@@ -3499,6 +3508,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n         }\n         // check level 3: check for inconsistencies during memory-only disconnect of tip blocks\n         if (nCheckLevel >= 3 && pindex == pindexState && (coins.DynamicMemoryUsage() + pcoinsTip->DynamicMemoryUsage()) <= nCoinCacheUsage) {\n+            assert(coins.GetBestBlock() == pindex->GetBlockHash());\n             DisconnectResult res = DisconnectBlock(block, pindex, coins);\n             if (res == DISCONNECT_FAILED) {\n                 return error(\"VerifyDB(): *** irrecoverable inconsistency in block data at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n@@ -3538,6 +3548,92 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     return true;\n }\n \n+/** Apply the effects of a block on the utxo cache, ignoring that it may already have been applied. */\n+static bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)\n+{\n+    // TODO: merge with ConnectBlock\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, pindex, params.GetConsensus())) {\n+        return error(\"ReplayBlock(): ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+    }\n+\n+    for (const CTransactionRef& tx : block.vtx) {\n+        if (!tx->IsCoinBase()) {\n+            for (const CTxIn &txin : tx->vin) {\n+                inputs.SpendCoin(txin.prevout);\n+            }\n+        }\n+        // Pass check = true as every addition may be an overwrite.\n+        AddCoins(inputs, *tx, pindex->nHeight, true);\n+    }\n+    return true;\n+}\n+\n+bool ReplayBlocks(const CChainParams& params, CCoinsView* view)\n+{\n+    LOCK(cs_main);\n+\n+    CCoinsViewCache cache(view);\n+\n+    std::vector<uint256> hashHeads = view->GetHeadBlocks();\n+    if (hashHeads.empty()) return true; // We're already in a consistent state.\n+    if (hashHeads.size() != 2) return error(\"ReplayBlocks(): unknown inconsistent state\");\n+\n+    uiInterface.ShowProgress(_(\"Replaying blocks...\"), 0);\n+    LogPrintf(\"Replaying blocks\\n\");\n+\n+    const CBlockIndex* pindexOld = nullptr;  // Old tip during the interrupted flush.\n+    const CBlockIndex* pindexNew;            // New tip during the interrupted flush.\n+    const CBlockIndex* pindexFork = nullptr; // Latest block common to both the old and the new tip.\n+\n+    if (mapBlockIndex.count(hashHeads[0]) == 0) {\n+        return error(\"ReplayBlocks(): reorganization to unknown block requested\");\n+    }\n+    pindexNew = mapBlockIndex[hashHeads[0]];\n+\n+    if (!hashHeads[1].IsNull()) { // The old tip is allowed to be 0, indicating it's the first flush.\n+        if (mapBlockIndex.count(hashHeads[1]) == 0) {\n+            return error(\"ReplayBlocks(): reorganization from unknown block requested\");\n+        }\n+        pindexOld = mapBlockIndex[hashHeads[1]];\n+        pindexFork = LastCommonAncestor(pindexOld, pindexNew);\n+        assert(pindexFork != nullptr);\n+    }\n+\n+    // Rollback along the old branch.\n+    while (pindexOld != pindexFork) {\n+        if (pindexOld->nHeight > 0) { // Never disconnect the genesis block.\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindexOld, params.GetConsensus())) {\n+                return error(\"RollbackBlock(): ReadBlockFromDisk() failed at %d, hash=%s\", pindexOld->nHeight, pindexOld->GetBlockHash().ToString());\n+            }\n+            LogPrintf(\"Rolling back %s (%i)\\n\", pindexOld->GetBlockHash().ToString(), pindexOld->nHeight);\n+            DisconnectResult res = DisconnectBlock(block, pindexOld, cache);\n+            if (res == DISCONNECT_FAILED) {\n+                return error(\"RollbackBlock(): DisconnectBlock failed at %d, hash=%s\", pindexOld->nHeight, pindexOld->GetBlockHash().ToString());\n+            }\n+            // If DISCONNECT_UNCLEAN is returned, it means a non-existing UTXO was deleted, or an existing UTXO was\n+            // overwritten. It corresponds to cases where the block-to-be-disconnect never had all its operations\n+            // applied to the UTXO set. However, as both writing a UTXO and deleting a UTXO are idempotent operations,\n+            // the result is still a version of the UTXO set with the effects of that block undone.\n+        }\n+        pindexOld = pindexOld->pprev;\n+    }\n+\n+    // Roll forward from the forking point to the new tip.\n+    int nForkHeight = pindexFork ? pindexFork->nHeight : 0;\n+    for (int nHeight = nForkHeight + 1; nHeight <= pindexNew->nHeight; ++nHeight) {\n+        const CBlockIndex* pindex = pindexNew->GetAncestor(nHeight);\n+        LogPrintf(\"Rolling forward %s (%i)\\n\", pindex->GetBlockHash().ToString(), nHeight);\n+        if (!RollforwardBlock(pindex, cache, params)) return false;\n+    }\n+\n+    cache.SetBestBlock(pindexNew->GetBlockHash());\n+    cache.Flush();\n+    uiInterface.ShowProgress(\"\", 100);\n+    return true;\n+}\n+\n bool RewindBlockIndex(const CChainParams& params)\n {\n     LOCK(cs_main);"
      },
      {
        "sha": "8a721dd7a256770e8645aef0666a2abdfd850cb7",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/013a56aa1af985894b3eaf7c325647b0b74e4456/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/013a56aa1af985894b3eaf7c325647b0b74e4456/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=013a56aa1af985894b3eaf7c325647b0b74e4456",
        "patch": "@@ -260,6 +260,8 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n bool InitBlockIndex(const CChainParams& chainparams);\n /** Load the block tree and coins database from disk */\n bool LoadBlockIndex(const CChainParams& chainparams);\n+/** Update the chain tip based on database information. */\n+void LoadChainTip(const CChainParams& chainparams);\n /** Unload database information */\n void UnloadBlockIndex();\n /** Run an instance of the script checking thread */\n@@ -424,6 +426,9 @@ class CVerifyDB {\n     bool VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth);\n };\n \n+/** Replay blocks that aren't fully applied to the database. */\n+bool ReplayBlocks(const CChainParams& params, CCoinsView* view);\n+\n /** Find the last common block between the parameter chain and a locator. */\n CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator);\n "
      }
    ]
  },
  {
    "sha": "0580ee08ff413f729bd34e5a5ce0fb75894f0256",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNTgwZWUwOGZmNDEzZjcyOWJkMzRlNWE1Y2UwZmI3NTg5NGYwMjU2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-04-19T16:34:48Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-26T17:45:48Z"
      },
      "message": "Adapt memory usage estimation for flushing",
      "tree": {
        "sha": "1aa759b02f0d8210a079a06b9535a3120f1f5238",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1aa759b02f0d8210a079a06b9535a3120f1f5238"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0580ee08ff413f729bd34e5a5ce0fb75894f0256",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0580ee08ff413f729bd34e5a5ce0fb75894f0256",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0580ee08ff413f729bd34e5a5ce0fb75894f0256",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0580ee08ff413f729bd34e5a5ce0fb75894f0256/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "013a56aa1af985894b3eaf7c325647b0b74e4456",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/013a56aa1af985894b3eaf7c325647b0b74e4456",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/013a56aa1af985894b3eaf7c325647b0b74e4456"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 2,
      "deletions": 4
    },
    "files": [
      {
        "sha": "e5c0516a3868dd96b895975558b621442452c86f",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0580ee08ff413f729bd34e5a5ce0fb75894f0256/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0580ee08ff413f729bd34e5a5ce0fb75894f0256/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=0580ee08ff413f729bd34e5a5ce0fb75894f0256",
        "patch": "@@ -19,10 +19,8 @@ class CBlockIndex;\n class CCoinsViewDBCursor;\n class uint256;\n \n-//! Compensate for extra memory peak (x1.5-x1.9) at flush time.\n-static constexpr int DB_PEAK_USAGE_FACTOR = 2;\n //! No need to periodic flush if at least this much space still available.\n-static constexpr int MAX_BLOCK_COINSDB_USAGE = 10 * DB_PEAK_USAGE_FACTOR;\n+static constexpr int MAX_BLOCK_COINSDB_USAGE = 10;\n //! -dbcache default (MiB)\n static const int64_t nDefaultDbCache = 450;\n //! -dbbatchsize default (bytes)"
      },
      {
        "sha": "77b96be1e514699bebdb2a6fe02f731013c672b4",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0580ee08ff413f729bd34e5a5ce0fb75894f0256/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0580ee08ff413f729bd34e5a5ce0fb75894f0256/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0580ee08ff413f729bd34e5a5ce0fb75894f0256",
        "patch": "@@ -1781,7 +1781,7 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n         nLastSetChain = nNow;\n     }\n     int64_t nMempoolSizeMax = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n-    int64_t cacheSize = pcoinsTip->DynamicMemoryUsage() * DB_PEAK_USAGE_FACTOR;\n+    int64_t cacheSize = pcoinsTip->DynamicMemoryUsage();\n     int64_t nTotalSpace = nCoinCacheUsage + std::max<int64_t>(nMempoolSizeMax - nMempoolUsage, 0);\n     // The cache is large and we're within 10% and 10 MiB of the limit, but we have time now (not in the middle of a block processing).\n     bool fCacheLarge = mode == FLUSH_STATE_PERIODIC && cacheSize > std::max((9 * nTotalSpace) / 10, nTotalSpace - MAX_BLOCK_COINSDB_USAGE * 1024 * 1024);"
      }
    ]
  },
  {
    "sha": "eaca1b7b08b4911292d49efbce8471cbc9ca0e1c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYWNhMWI3YjA4YjQ5MTEyOTJkNDllZmJjZTg0NzFjYmM5Y2EwZTFj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-04-05T08:37:09Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-26T17:46:51Z"
      },
      "message": "Random db flush crash simulator",
      "tree": {
        "sha": "9b6bde7479dc3a0550a0d550f914cdebcbcdd0e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b6bde7479dc3a0550a0d550f914cdebcbcdd0e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eaca1b7b08b4911292d49efbce8471cbc9ca0e1c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eaca1b7b08b4911292d49efbce8471cbc9ca0e1c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eaca1b7b08b4911292d49efbce8471cbc9ca0e1c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eaca1b7b08b4911292d49efbce8471cbc9ca0e1c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0580ee08ff413f729bd34e5a5ce0fb75894f0256",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0580ee08ff413f729bd34e5a5ce0fb75894f0256",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0580ee08ff413f729bd34e5a5ce0fb75894f0256"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 11,
      "deletions": 2
    },
    "files": [
      {
        "sha": "150f368513296525112f09d9732bc7c7a428b32f",
        "filename": "contrib/devtools/check-doc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eaca1b7b08b4911292d49efbce8471cbc9ca0e1c/contrib/devtools/check-doc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eaca1b7b08b4911292d49efbce8471cbc9ca0e1c/contrib/devtools/check-doc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/check-doc.py?ref=eaca1b7b08b4911292d49efbce8471cbc9ca0e1c",
        "patch": "@@ -21,7 +21,7 @@\n REGEX_ARG = re.compile(r'(?:map(?:Multi)?Args(?:\\.count\\(|\\[)|Get(?:Bool)?Arg\\()\\\"(\\-[^\\\"]+?)\\\"')\n REGEX_DOC = re.compile(r'HelpMessageOpt\\(\\\"(\\-[^\\\"=]+?)(?:=|\\\")')\n # list unsupported, deprecated and duplicate args as they need no documentation\n-SET_DOC_OPTIONAL = set(['-rpcssl', '-benchmark', '-h', '-help', '-socks', '-tor', '-debugnet', '-whitelistalwaysrelay', '-prematurewitness', '-walletprematurewitness', '-promiscuousmempoolflags', '-blockminsize'])\n+SET_DOC_OPTIONAL = set(['-rpcssl', '-benchmark', '-h', '-help', '-socks', '-tor', '-debugnet', '-whitelistalwaysrelay', '-prematurewitness', '-walletprematurewitness', '-promiscuousmempoolflags', '-blockminsize', '-dbcrashratio'])\n \n def main():\n   used = check_output(CMD_GREP_ARGS, shell=True)"
      },
      {
        "sha": "7de11cc6172f60fc8dbcc6fe296affd25b87a3e0",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eaca1b7b08b4911292d49efbce8471cbc9ca0e1c/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eaca1b7b08b4911292d49efbce8471cbc9ca0e1c/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=eaca1b7b08b4911292d49efbce8471cbc9ca0e1c",
        "patch": "@@ -7,8 +7,10 @@\n \n #include \"chainparams.h\"\n #include \"hash.h\"\n+#include \"random.h\"\n #include \"pow.h\"\n #include \"uint256.h\"\n+#include \"util.h\"\n \n #include <stdint.h>\n \n@@ -82,7 +84,7 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n     size_t count = 0;\n     size_t changed = 0;\n     size_t batch_size = (size_t)GetArg(\"-dbbatchsize\", nDefaultDbBatchSize);\n-\n+    int crash_simulate = GetArg(\"-dbcrashratio\", 0);\n \n     uint256 old_tip = GetBestBlock();\n     if (old_tip.IsNull()) {\n@@ -124,6 +126,13 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n             LogPrint(BCLog::COINDB, \"Writing partial batch of %.2f MiB\\n\", batch.SizeEstimate() * (1.0 / 1048576.0));\n             db.WriteBatch(batch);\n             batch.Clear();\n+            if (crash_simulate) {\n+                static FastRandomContext rng;\n+                if (rng.randrange(crash_simulate) == 0) {\n+                    LogPrintf(\"Simulating a crash. Goodbye.\\n\");\n+                    exit(0);\n+                }\n+            }\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "d6af06d68aae985436cbc942f0d11078041d121b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNmFmMDZkNjhhYWU5ODU0MzZjYmM5NDJmMGQxMTA3ODA0MWQxMjFi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-17T15:41:10Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-26T17:46:51Z"
      },
      "message": "Dont create pcoinsTip until after ReplayBlocks.\n\nThis requires that we not access pcoinsTip in InitBlockIndex's\nFlushStateToDisk (so we just skip it until later in AppInitMain)\nand the LoadChainTip in LoadBlockIndex (which there is already one\nlater in AppinitMain, after ReplayBlocks, so skipping it there is\nfine).\n\nIncludes some simplifications by Suhas Daftuar and Pieter Wuille.",
      "tree": {
        "sha": "a8af3452e747b038bc50957aae8b47a9e8585ee5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a8af3452e747b038bc50957aae8b47a9e8585ee5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6af06d68aae985436cbc942f0d11078041d121b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6af06d68aae985436cbc942f0d11078041d121b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6af06d68aae985436cbc942f0d11078041d121b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6af06d68aae985436cbc942f0d11078041d121b/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eaca1b7b08b4911292d49efbce8471cbc9ca0e1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eaca1b7b08b4911292d49efbce8471cbc9ca0e1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eaca1b7b08b4911292d49efbce8471cbc9ca0e1c"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 2,
      "deletions": 12
    },
    "files": [
      {
        "sha": "794c6bc45e3a659cf82dcee363a1f95440427c20",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6af06d68aae985436cbc942f0d11078041d121b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6af06d68aae985436cbc942f0d11078041d121b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d6af06d68aae985436cbc942f0d11078041d121b",
        "patch": "@@ -1385,7 +1385,6 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 pblocktree = new CBlockTreeDB(nBlockTreeDBCache, false, fReindex);\n                 pcoinsdbview = new CCoinsViewDB(nCoinDBCache, false, fReindex || fReindexChainState);\n                 pcoinscatcher = new CCoinsViewErrorCatcher(pcoinsdbview);\n-                pcoinsTip = new CCoinsViewCache(pcoinscatcher);\n \n                 if (fReindex) {\n                     pblocktree->WriteReindexing(true);\n@@ -1433,7 +1432,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n                     break;\n                 }\n-                pcoinsTip->SetBestBlock(pcoinsdbview->GetBestBlock()); // TODO: only initialize pcoinsTip after ReplayBlocks\n+                pcoinsTip = new CCoinsViewCache(pcoinscatcher);\n                 LoadChainTip(chainparams);\n \n                 if (!fReindex && chainActive.Tip() != NULL) {"
      },
      {
        "sha": "4cdfc7d6f5f4a35dcdd04cf8886cbef224780088",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6af06d68aae985436cbc942f0d11078041d121b/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6af06d68aae985436cbc942f0d11078041d121b/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=d6af06d68aae985436cbc942f0d11078041d121b",
        "patch": "@@ -85,6 +85,7 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n     size_t changed = 0;\n     size_t batch_size = (size_t)GetArg(\"-dbbatchsize\", nDefaultDbBatchSize);\n     int crash_simulate = GetArg(\"-dbcrashratio\", 0);\n+    assert(!hashBlock.IsNull());\n \n     uint256 old_tip = GetBestBlock();\n     if (old_tip.IsNull()) {\n@@ -96,13 +97,6 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n         }\n     }\n \n-    if (hashBlock.IsNull()) {\n-        // Initial flush, nothing to write.\n-        assert(mapCoins.empty());\n-        assert(old_tip.IsNull());\n-        return true;\n-    }\n-\n     // In the first batch, mark the database as being in the middle of a\n     // transition from old_tip to hashBlock.\n     // A vector is used for future extensibility, as we may want to support"
      },
      {
        "sha": "6100ccb33ddf15ed5a7a392e802701fe21440159",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6af06d68aae985436cbc942f0d11078041d121b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6af06d68aae985436cbc942f0d11078041d121b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d6af06d68aae985436cbc942f0d11078041d121b",
        "patch": "@@ -3420,7 +3420,6 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n     pblocktree->ReadFlag(\"txindex\", fTxIndex);\n     LogPrintf(\"%s: transaction index %s\\n\", __func__, fTxIndex ? \"enabled\" : \"disabled\");\n \n-    LoadChainTip(chainparams);\n     return true;\n }\n \n@@ -3783,8 +3782,6 @@ bool InitBlockIndex(const CChainParams& chainparams)\n             CBlockIndex *pindex = AddToBlockIndex(block);\n             if (!ReceivedBlockTransactions(block, state, pindex, blockPos, chainparams.GetConsensus()))\n                 return error(\"LoadBlockIndex(): genesis block not accepted\");\n-            // Force a chainstate write so that when we VerifyDB in a moment, it doesn't check stale data\n-            return FlushStateToDisk(chainparams, state, FLUSH_STATE_ALWAYS);\n         } catch (const std::runtime_error& e) {\n             return error(\"LoadBlockIndex(): failed to initialize block database: %s\", e.what());\n         }"
      }
    ]
  },
  {
    "sha": "176c021d085f5a45bc9e038e760942aa648dd797",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzZjMDIxZDA4NWY1YTQ1YmM5ZTAzOGU3NjA5NDJhYTY0OGRkNzk3",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-06-15T21:08:48Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-26T21:48:42Z"
      },
      "message": "[qa] Test non-atomic chainstate writes\n\nAdds new functional test, dbcrash.py, which uses -dbcrashratio to exercise the\nlogic for recovering from a crash during chainstate flush.\n\ndbcrash.py is added to the extended tests, as it may take ~10 minutes to run\n\nUse _Exit() instead of exit() for crash simulation\n\nThis eliminates stderr output such as:\n    terminate called without an active exception\nor\n    Assertion failed: (!pthread_mutex_destroy(&m)), function ~recursive_mutex, file /usr/local/include/boost/thread/pthread/recursive_mutex.hpp, line 104.\n\nEliminating the stderr output on crash simulation allows testing with\ntest_runner.py, which reports a test as failed if stderr is produced.",
      "tree": {
        "sha": "cd057e23d8dedece53ffa4db73efa245c204b796",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd057e23d8dedece53ffa4db73efa245c204b796"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/176c021d085f5a45bc9e038e760942aa648dd797",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/176c021d085f5a45bc9e038e760942aa648dd797",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/176c021d085f5a45bc9e038e760942aa648dd797",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/176c021d085f5a45bc9e038e760942aa648dd797/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d6af06d68aae985436cbc942f0d11078041d121b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6af06d68aae985436cbc942f0d11078041d121b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6af06d68aae985436cbc942f0d11078041d121b"
      }
    ],
    "stats": {
      "total": 273,
      "additions": 272,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d24162ba2dc6d5c49f8dacf131af12127d22cd7c",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/176c021d085f5a45bc9e038e760942aa648dd797/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/176c021d085f5a45bc9e038e760942aa648dd797/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=176c021d085f5a45bc9e038e760942aa648dd797",
        "patch": "@@ -124,7 +124,7 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n                 static FastRandomContext rng;\n                 if (rng.randrange(crash_simulate) == 0) {\n                     LogPrintf(\"Simulating a crash. Goodbye.\\n\");\n-                    exit(0);\n+                    _Exit(0);\n                 }\n             }\n         }"
      },
      {
        "sha": "4a10743f04792f0566b5ac1812f6b28e98d68e68",
        "filename": "test/functional/dbcrash.py",
        "status": "added",
        "additions": 268,
        "deletions": 0,
        "changes": 268,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/176c021d085f5a45bc9e038e760942aa648dd797/test/functional/dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/176c021d085f5a45bc9e038e760942aa648dd797/test/functional/dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/dbcrash.py?ref=176c021d085f5a45bc9e038e760942aa648dd797",
        "patch": "@@ -0,0 +1,268 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test recovery from a crash during chainstate writing.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from test_framework.script import *\n+from test_framework.mininode import *\n+import random\n+try:\n+    import http.client as httplib\n+except ImportError:\n+    import httplib\n+import errno\n+\n+'''\n+Test structure:\n+\n+- 4 nodes\n+  * node0, node1, and node2 will have different dbcrash ratios, and different\n+    dbcache sizes\n+  * node3 will be a regular node, with no crashing.\n+  * The nodes will not connect to each other.\n+\n+- use default test framework starting chain. initialize starting_tip_height to\n+  tip height.\n+\n+- Main loop:\n+  * generate lots of transactions on node3, enough to fill up a block.\n+  * uniformly randomly pick a tip height from starting_tip_height to\n+    tip_height; with probability 1/(height_difference+4), invalidate this block.\n+  * mine enough blocks to overtake tip_height at start of loop.\n+  * for each node in [node0,node1,node2]:\n+     - for each mined block:\n+       * submit block to node\n+       * if node crashed on/after submitting:\n+         - restart until recovery succeeds\n+         - check that utxo matches node3 using gettxoutsetinfo\n+'''\n+\n+class ChainstateWriteCrashTest(BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 4\n+        self.setup_clean_chain = False\n+\n+        # Set -maxmempool=0 to turn off mempool memory sharing with dbcache\n+        # Set -rpcservertimeout=900 to reduce socket disconnects in this\n+        # long-running test\n+        self.base_args = [\"-limitdescendantsize=0\", \"-maxmempool=0\", \"-rpcservertimeout=900\"]\n+\n+        # Set different crash ratios and cache sizes.  Note that not all of\n+        # -dbcache goes to pcoinsTip.\n+        self.node0_args = [\"-dbcrashratio=8\", \"-dbcache=4\", \"-dbbatchsize=200000\"] + self.base_args\n+        self.node1_args = [\"-dbcrashratio=16\", \"-dbcache=8\", \"-dbbatchsize=200000\"] + self.base_args\n+        self.node2_args = [\"-dbcrashratio=24\", \"-dbcache=16\", \"-dbbatchsize=200000\"] + self.base_args\n+\n+        # Node3 is a normal node with default args, except will mine full blocks\n+        self.node3_args = [\"-blockmaxweight=4000000\"]\n+        self.extra_args = [self.node0_args, self.node1_args, self.node2_args, self.node3_args]\n+\n+        # We'll track some test coverage statistics\n+        self.restart_counts = [0, 0, 0] # Track the restarts for nodes 0-2\n+        self.crashed_on_restart = 0     # Track count of crashes during recovery\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+        # Leave them unconnected, we'll use submitblock directly in this test\n+\n+    # Starts up a given node id, waits for the tip to reach the given block\n+    # hash, and calculates the utxo hash.  Exceptions on startup should\n+    # indicate node crash (due to -dbcrashratio), in which case we try again.\n+    # Give up after 60 seconds.\n+    # Returns the utxo hash of the given node.\n+    def restart_node(self, node_index, expected_tip):\n+        time_start = time.time()\n+        while time.time() - time_start < 60:\n+            try:\n+                # Any of these RPC calls could throw due to node crash\n+                self.nodes[node_index] = self.start_node(node_index, self.options.tmpdir, self.extra_args[node_index])\n+                self.nodes[node_index].waitforblock(expected_tip)\n+                utxo_hash = self.nodes[node_index].gettxoutsetinfo()['hash_serialized_2']\n+                return utxo_hash\n+            except:\n+                # An exception here should mean the node is about to crash.\n+                # If bitcoind exits, then try again.  wait_for_node_exit()\n+                # should raise an exception if bitcoind doesn't exit.\n+                wait_for_node_exit(node_index, timeout=10)\n+            self.crashed_on_restart += 1\n+            time.sleep(1)\n+\n+        # If we got here, bitcoind isn't coming back up on restart.  Could be a\n+        # bug in bitcoind, or we've gotten unlucky with our dbcrash ratio --\n+        # perhaps we generated a test case that blew up our cache?\n+        # TODO: If this happens a lot, we should try to restart without -dbcrashratio\n+        # and make sure that recovery happens.\n+        raise AssertionError(\"Unable to successfully restart node %d in allotted time\", node_index)\n+\n+    # Try submitting a block to the given node.\n+    # Catch any exceptions that indicate the node has crashed.\n+    # Returns true if the block was submitted successfully; false otherwise.\n+    def submit_block_catch_error(self, node_index, block):\n+        try:\n+            self.nodes[node_index].submitblock(block)\n+            return True\n+        except (httplib.CannotSendRequest, httplib.RemoteDisconnected) as e:\n+            self.log.debug(\"node %d submitblock raised exception: %s\", node_index, e)\n+            return False\n+        except OSError as e:\n+            self.log.debug(\"node %d submitblock raised OSError exception: errno=%s\", node_index, e.errno)\n+            if e.errno in [errno.EPIPE, errno.ECONNREFUSED, errno.ECONNRESET]:\n+                # The node has likely crashed\n+                return False\n+            else:\n+                # Unexpected exception, raise\n+                raise\n+\n+    # Use submitblock to sync node3's chain with the other nodes\n+    # If submitblock fails, restart the node and get the new utxo hash.\n+    def sync_node3blocks(self, block_hashes):\n+        # If any nodes crash while updating, we'll compare utxo hashes to\n+        # ensure recovery was successful.\n+        node3_utxo_hash = self.nodes[3].gettxoutsetinfo()['hash_serialized_2']\n+\n+        # Retrieve all the blocks from node3\n+        blocks = []\n+        for block_hash in block_hashes:\n+            blocks.append([block_hash, self.nodes[3].getblock(block_hash, 0)])\n+\n+        # Deliver each block to each other node\n+        for i in range(3):\n+            nodei_utxo_hash = None\n+            self.log.debug(\"Syncing blocks to node %d\", i)\n+            for (block_hash, block) in blocks:\n+                # Get the block from node3, and submit to node_i\n+                self.log.debug(\"submitting block %s\", block_hash)\n+                if not self.submit_block_catch_error(i, block):\n+                    # TODO: more carefully check that the crash is due to -dbcrashratio\n+                    # (change the exit code perhaps, and check that here?)\n+                    wait_for_node_exit(i, timeout=30)\n+                    self.log.debug(\"Restarting node %d after block hash %s\", i, block_hash)\n+                    nodei_utxo_hash = self.restart_node(i, block_hash)\n+                    assert nodei_utxo_hash is not None\n+                    self.restart_counts[i] += 1\n+                else:\n+                    # Clear it out after successful submitblock calls -- the cached\n+                    # utxo hash will no longer be correct\n+                    nodei_utxo_hash = None\n+\n+            # Check that the utxo hash matches node3's utxo set\n+            # NOTE: we only check the utxo set if we had to restart the node\n+            # after the last block submitted:\n+            # - checking the utxo hash causes a cache flush, which we don't\n+            # want to do every time; so\n+            # - we only update the utxo cache after a node restart, since flushing\n+            # the cache is a no-op at that point\n+            if nodei_utxo_hash is not None:\n+                self.log.debug(\"Checking txoutsetinfo matches for node %d\", i)\n+                assert_equal(nodei_utxo_hash, node3_utxo_hash)\n+\n+    # Verify that the utxo hash of each node matches node3.\n+    # Restart any nodes that crash while querying.\n+    def verify_utxo_hash(self):\n+        node3_utxo_hash = self.nodes[3].gettxoutsetinfo()['hash_serialized_2']\n+        self.log.info(\"Verifying utxo hash matches for all nodes\")\n+\n+        for i in range(3):\n+            try:\n+                nodei_utxo_hash = self.nodes[i].gettxoutsetinfo()['hash_serialized_2']\n+            except OSError:\n+                # probably a crash on db flushing\n+                nodei_utxo_hash = self.restart_node(i, self.nodes[3].getbestblockhash())\n+            assert_equal(nodei_utxo_hash, node3_utxo_hash)\n+\n+\n+    def generate_small_transactions(self, node, count, utxo_list):\n+        FEE = 1000 # TODO: replace this with node relay fee based calculation\n+        num_transactions = 0\n+        random.shuffle(utxo_list)\n+        while len(utxo_list) >= 2 and num_transactions < count:\n+            tx = CTransaction()\n+            input_amount = 0\n+            for i in range(2):\n+                utxo = utxo_list.pop()\n+                tx.vin.append(CTxIn(COutPoint(int(utxo['txid'], 16), utxo['vout'])))\n+                input_amount += int(utxo['amount']*COIN)\n+            output_amount = (input_amount - FEE)//3\n+\n+            if output_amount <= 0:\n+                # Sanity check -- if we chose inputs that are too small, skip\n+                continue\n+\n+            for i in range(3):\n+                tx.vout.append(CTxOut(output_amount, hex_str_to_bytes(utxo['scriptPubKey'])))\n+\n+            # Sign and send the transaction to get into the mempool\n+            tx_signed_hex = node.signrawtransaction(ToHex(tx))['hex']\n+            node.sendrawtransaction(tx_signed_hex)\n+            num_transactions += 1\n+\n+    def run_test(self):\n+\n+        # Start by creating a lot of utxos on node3\n+        initial_height = self.nodes[3].getblockcount()\n+        utxo_list = create_confirmed_utxos(self.nodes[3].getnetworkinfo()['relayfee'], self.nodes[3], 5000)\n+        self.log.info(\"Prepped %d utxo entries\", len(utxo_list))\n+\n+        # Sync these blocks with the other nodes\n+        block_hashes_to_sync = []\n+        for height in range(initial_height+1, self.nodes[3].getblockcount()+1):\n+            block_hashes_to_sync.append(self.nodes[3].getblockhash(height))\n+\n+        self.log.debug(\"Syncing %d blocks with other nodes\", len(block_hashes_to_sync))\n+        # Syncing the blocks could cause nodes to crash, so the test begins here.\n+        self.sync_node3blocks(block_hashes_to_sync)\n+\n+        starting_tip_height = self.nodes[3].getblockcount()\n+\n+        # Main test loop:\n+        # each time through the loop, generate a bunch of transactions,\n+        # and then either mine a single new block on the tip, or some-sized reorg.\n+        for i in range(40):\n+            self.log.info(\"Iteration %d, generating 2500 transactions %s\", i, self.restart_counts)\n+            # Generate a bunch of small-ish transactions\n+            self.generate_small_transactions(self.nodes[3], 2500, utxo_list)\n+            # Pick a random block between current tip, and starting tip\n+            current_height = self.nodes[3].getblockcount()\n+            random_height = random.randint(starting_tip_height, current_height)\n+            self.log.debug(\"At height %d, considering height %d\", current_height, random_height)\n+            if random_height > starting_tip_height:\n+                # Randomly reorg from this point with some probability (1/4 for\n+                # tip, 1/5 for tip-1, ...)\n+                if random.random() < 1.0/(current_height + 4 - random_height):\n+                    self.log.debug(\"Invalidating block at height %d\", random_height)\n+                    self.nodes[3].invalidateblock(self.nodes[3].getblockhash(random_height))\n+\n+            # Now generate new blocks until we pass the old tip height\n+            self.log.debug(\"Mining longer tip\")\n+            block_hashes = self.nodes[3].generate(current_height+1-self.nodes[3].getblockcount())\n+            self.log.debug(\"Syncing %d new blocks...\", len(block_hashes))\n+            self.sync_node3blocks(block_hashes)\n+            utxo_list = self.nodes[3].listunspent()\n+            self.log.debug(\"Node3 utxo count: %d\", len(utxo_list))\n+\n+        # Check that the utxo hashes agree with node3\n+        # Useful side effect: each utxo cache gets flushed here, so that we\n+        # won't get crashes on shutdown at the end of the test.\n+        self.verify_utxo_hash()\n+\n+        # Check the test coverage\n+        self.log.info(\"Restarted nodes: %s; crashes on restart: %d\", self.restart_counts, self.crashed_on_restart)\n+\n+        # If no nodes were restarted, we didn't test anything.\n+        assert self.restart_counts != [0, 0, 0]\n+\n+        # Make sure we tested the case of crash-during-recovery.\n+        assert self.crashed_on_restart > 0\n+\n+        # Warn if any of the nodes escaped restart.\n+        for i in range(3):\n+            if self.restart_counts[i] == 0:\n+                self.log.warn(\"Node %d never crashed during utxo flush!\", i)\n+\n+if __name__ == \"__main__\":\n+    ChainstateWriteCrashTest().main()"
      },
      {
        "sha": "2a4f3104aa0d1e656e1e1be6c8d132d702057696",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/176c021d085f5a45bc9e038e760942aa648dd797/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/176c021d085f5a45bc9e038e760942aa648dd797/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=176c021d085f5a45bc9e038e760942aa648dd797",
        "patch": "@@ -249,6 +249,8 @@ def wait_for_bitcoind_start(process, datadir, i, rpchost=None):\n                 raise\n         time.sleep(0.25)\n \n+def wait_for_node_exit(node_index, timeout):\n+    bitcoind_processes[node_index].wait(timeout)\n \n def _start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n     \"\"\"Start a bitcoind and return RPC connection to it"
      },
      {
        "sha": "70a7b2a1ffc70aa05bcb7c75b2ef7bb61575dd0b",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/176c021d085f5a45bc9e038e760942aa648dd797/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/176c021d085f5a45bc9e038e760942aa648dd797/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=176c021d085f5a45bc9e038e760942aa648dd797",
        "patch": "@@ -124,6 +124,7 @@\n     # vv Tests less than 5m vv\n     'maxuploadtarget.py',\n     'mempool_packages.py',\n+    'dbcrash.py',\n     # vv Tests less than 2m vv\n     'bip68-sequence.py',\n     'getblocktemplate_longpoll.py',"
      }
    ]
  },
  {
    "sha": "21180ff73436e198b6828c312ddfd0a1195447b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTE4MGZmNzM0MzZlMTk4YjY4MjhjMzEyZGRmZDBhMTE5NTQ0N2Iy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-13T19:17:30Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-26T23:16:26Z"
      },
      "message": "Simplify return values of GetCoin/HaveCoin(InCache)\n\nThis removes the possibility for GetCoin/HaveCoin/HaveCoinInCache to return\ntrue while the respective coin is spent. By doing it across all calls, some\nextra checks can be eliminated.\n\ncoins_tests is modified to call HaveCoin sometimes before and sometimes\nafter AccessCoin. A further change is needed because the semantics for\nGetCoin slightly changed, causing a pruned entry in the parent cache to not\nbe pulled into the child in FetchCoin.",
      "tree": {
        "sha": "32541dfda7113742cc54340eda7e859ab62869ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32541dfda7113742cc54340eda7e859ab62869ce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/21180ff73436e198b6828c312ddfd0a1195447b2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21180ff73436e198b6828c312ddfd0a1195447b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/21180ff73436e198b6828c312ddfd0a1195447b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21180ff73436e198b6828c312ddfd0a1195447b2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "234ffc677ee58591b139695bf92bbd6f504ee91a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/234ffc677ee58591b139695bf92bbd6f504ee91a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/234ffc677ee58591b139695bf92bbd6f504ee91a"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 28,
      "deletions": 19
    },
    "files": [
      {
        "sha": "3113b7755dcc12adaeb6b6ea77f04e72dffc2acb",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21180ff73436e198b6828c312ddfd0a1195447b2/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21180ff73436e198b6828c312ddfd0a1195447b2/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=21180ff73436e198b6828c312ddfd0a1195447b2",
        "patch": "@@ -11,11 +11,15 @@\n #include <assert.h>\n \n bool CCoinsView::GetCoin(const COutPoint &outpoint, Coin &coin) const { return false; }\n-bool CCoinsView::HaveCoin(const COutPoint &outpoint) const { return false; }\n uint256 CCoinsView::GetBestBlock() const { return uint256(); }\n bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return false; }\n CCoinsViewCursor *CCoinsView::Cursor() const { return 0; }\n \n+bool CCoinsView::HaveCoin(const COutPoint &outpoint) const\n+{\n+    Coin coin;\n+    return GetCoin(outpoint, coin);\n+}\n \n CCoinsViewBacked::CCoinsViewBacked(CCoinsView *viewIn) : base(viewIn) { }\n bool CCoinsViewBacked::GetCoin(const COutPoint &outpoint, Coin &coin) const { return base->GetCoin(outpoint, coin); }\n@@ -55,7 +59,7 @@ bool CCoinsViewCache::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n     CCoinsMap::const_iterator it = FetchCoin(outpoint);\n     if (it != cacheCoins.end()) {\n         coin = it->second.coin;\n-        return true;\n+        return !coin.IsSpent();\n     }\n     return false;\n }"
      },
      {
        "sha": "077545a55bd61d78027ffacdc03467d885b0e765",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21180ff73436e198b6828c312ddfd0a1195447b2/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21180ff73436e198b6828c312ddfd0a1195447b2/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=21180ff73436e198b6828c312ddfd0a1195447b2",
        "patch": "@@ -145,11 +145,13 @@ class CCoinsViewCursor\n class CCoinsView\n {\n public:\n-    //! Retrieve the Coin (unspent transaction output) for a given outpoint.\n+    /** Retrieve the Coin (unspent transaction output) for a given outpoint.\n+     *  Returns true only when an unspent coin was found, which is returned in coin.\n+     *  When false is returned, coin's value is unspecified.\n+     */\n     virtual bool GetCoin(const COutPoint &outpoint, Coin &coin) const;\n \n-    //! Just check whether we have data for a given outpoint.\n-    //! This may (but cannot always) return true for spent outputs.\n+    //! Just check whether a given outpoint is unspent.\n     virtual bool HaveCoin(const COutPoint &outpoint) const;\n \n     //! Retrieve the block hash whose state this CCoinsView currently represents"
      },
      {
        "sha": "e24431528a2a1e86f09b24333f83d32c8c454532",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 7,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21180ff73436e198b6828c312ddfd0a1195447b2/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21180ff73436e198b6828c312ddfd0a1195447b2/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=21180ff73436e198b6828c312ddfd0a1195447b2",
        "patch": "@@ -50,12 +50,6 @@ class CCoinsViewTest : public CCoinsView\n         return true;\n     }\n \n-    bool HaveCoin(const COutPoint& outpoint) const override\n-    {\n-        Coin coin;\n-        return GetCoin(outpoint, coin);\n-    }\n-\n     uint256 GetBestBlock() const override { return hashBestBlock_; }\n \n     bool BatchWrite(CCoinsMap& mapCoins, const uint256& hashBlock) override\n@@ -147,8 +141,22 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n         {\n             uint256 txid = txids[InsecureRandRange(txids.size())]; // txid we're going to modify in this iteration.\n             Coin& coin = result[COutPoint(txid, 0)];\n+\n+            // Determine whether to test HaveCoin before or after Access* (or both). As these functions\n+            // can influence each other's behaviour by pulling things into the cache, all combinations\n+            // are tested.\n+            bool test_havecoin_before = InsecureRandBits(2) == 0;\n+            bool test_havecoin_after = InsecureRandBits(2) == 0;\n+\n+            bool result_havecoin = test_havecoin_before ? stack.back()->HaveCoin(COutPoint(txid, 0)) : false;\n             const Coin& entry = (InsecureRandRange(500) == 0) ? AccessByTxid(*stack.back(), txid) : stack.back()->AccessCoin(COutPoint(txid, 0));\n             BOOST_CHECK(coin == entry);\n+            BOOST_CHECK(!test_havecoin_before || result_havecoin == !entry.IsSpent());\n+\n+            if (test_havecoin_after) {\n+                bool ret = stack.back()->HaveCoin(COutPoint(txid, 0));\n+                BOOST_CHECK(ret == !entry.IsSpent());\n+            }\n \n             if (InsecureRandRange(5) == 0 || coin.IsSpent()) {\n                 Coin newcoin;\n@@ -628,7 +636,7 @@ BOOST_AUTO_TEST_CASE(ccoins_access)\n     CheckAccessCoin(ABSENT, VALUE2, VALUE2, FRESH      , FRESH      );\n     CheckAccessCoin(ABSENT, VALUE2, VALUE2, DIRTY      , DIRTY      );\n     CheckAccessCoin(ABSENT, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(PRUNED, ABSENT, PRUNED, NO_ENTRY   , FRESH      );\n+    CheckAccessCoin(PRUNED, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n     CheckAccessCoin(PRUNED, PRUNED, PRUNED, 0          , 0          );\n     CheckAccessCoin(PRUNED, PRUNED, PRUNED, FRESH      , FRESH      );\n     CheckAccessCoin(PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );"
      },
      {
        "sha": "dcfc5ffde0b56aea71fa63945e8473fa316d835b",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21180ff73436e198b6828c312ddfd0a1195447b2/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21180ff73436e198b6828c312ddfd0a1195447b2/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=21180ff73436e198b6828c312ddfd0a1195447b2",
        "patch": "@@ -903,11 +903,7 @@ bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n             return false;\n         }\n     }\n-    return (base->GetCoin(outpoint, coin) && !coin.IsSpent());\n-}\n-\n-bool CCoinsViewMemPool::HaveCoin(const COutPoint &outpoint) const {\n-    return mempool.exists(outpoint) || base->HaveCoin(outpoint);\n+    return base->GetCoin(outpoint, coin);\n }\n \n size_t CTxMemPool::DynamicMemoryUsage() const {"
      },
      {
        "sha": "78ac3c209bc7d3cd449d60dd15fc704470bb0f0a",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21180ff73436e198b6828c312ddfd0a1195447b2/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21180ff73436e198b6828c312ddfd0a1195447b2/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=21180ff73436e198b6828c312ddfd0a1195447b2",
        "patch": "@@ -684,8 +684,7 @@ class CCoinsViewMemPool : public CCoinsViewBacked\n \n public:\n     CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn);\n-    bool GetCoin(const COutPoint &outpoint, Coin &coin) const;\n-    bool HaveCoin(const COutPoint &outpoint) const;\n+    bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;\n };\n \n /**"
      }
    ]
  },
  {
    "sha": "506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDZiNzAwZGNiNWRkNWE3YzFkOGZmYTdjNzcwNDNhOTNlNGUxMGRl",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-03-29T15:51:41Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-27T00:54:19Z"
      },
      "message": "Util: Remove redundant calls to gArgs.IsArgSet()\n\nReturn empty std::vector<std::string> with ArgsManager::GetArgs if\nnothing is set for that string",
      "tree": {
        "sha": "7f46aa37dccf2c77cb897c00afbede86e40a7f42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f46aa37dccf2c77cb897c00afbede86e40a7f42"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZUazEAAoJEKT10UHAGgOHFU0QAIacv3M7ddQMKd+EfTXpkfbU\nyTeg04tbh/5UlDlG/QSf5wRIi9P990AEAj89xOEVOShbT/x+018srUzCg8v9X6Wk\nWI5/8dGKggigFbmOkwWZJqCZSxck2vBNR6GkP9q13knRnIMqx056/P2bRSzvGQg6\nsZ4J9063/pAoCfwJ7eehaBWkWVKhGArf0O5ZVtmhJ8tOnprSbmTLpBVgTBpjtoDO\nmt4+55AmaQTiGRDHlTe2d9N7Rad/HNO7hDkNj9OHibd1Bq9hDhq5JhTXUrPELV8X\nPph0ogGvx7VmOvivNM8MS5sLwqwTKGqGK2eHXkUlYyt5IMdX9ZMJpoxC78+LWyeg\nQlDGwVo0vPSyXj1I4x5Ml1VVP+eYAtqPbG/SSBNrZjjv7YAQ+NFAj5PXMKkq/2S2\nur5truLRbKpx4wdjeo3qE7zkQ34Aa4fQ8D0oOYhRgdVdLkPBfhUIVezAQ2fH7kF4\n0FEu1JIu6Yktp3txsmQUhb+Q5a0whbW3CMRfcENwKrGzKLNncsOIbT7mBJyeKOzw\nuv1h9AKqndZrVkA2jrZp1kAoV+BrunIxZtLJ5r6WoUHlvvgBLkHo+UHbEdnPsxyT\n0dDy6KX5JM6IFcQKUMSC8CmeV/ZwYN3oTV5jeKQErcTicxig4OhLuU01gDpTkhyp\nsWnx1pVQh6ZizN8nvjcO\n=1CAJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 7f46aa37dccf2c77cb897c00afbede86e40a7f42\nparent 234ffc677ee58591b139695bf92bbd6f504ee91a\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1490802701 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498524859 +0200\n\nUtil: Remove redundant calls to gArgs.IsArgSet()\n\nReturn empty std::vector<std::string> with ArgsManager::GetArgs if\nnothing is set for that string\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "234ffc677ee58591b139695bf92bbd6f504ee91a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/234ffc677ee58591b139695bf92bbd6f504ee91a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/234ffc677ee58591b139695bf92bbd6f504ee91a"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 16,
      "deletions": 37
    },
    "files": [
      {
        "sha": "3f030fce56fb737300fca8ee300c8e80f6e26e38",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de",
        "patch": "@@ -92,10 +92,8 @@ static bool multiUserAuthorized(std::string strUserPass)\n     std::string strUser = strUserPass.substr(0, strUserPass.find(\":\"));\n     std::string strPass = strUserPass.substr(strUserPass.find(\":\") + 1);\n \n-    if (gArgs.IsArgSet(\"-rpcauth\")) {\n+    for (const std::string& strRPCAuth : gArgs.GetArgs(\"-rpcauth\")) {\n         //Search for multi-user login/pass \"rpcauth\" from config\n-        for (std::string strRPCAuth : gArgs.GetArgs(\"-rpcauth\"))\n-        {\n             std::vector<std::string> vFields;\n             boost::split(vFields, strRPCAuth, boost::is_any_of(\":$\"));\n             if (vFields.size() != 3) {\n@@ -121,7 +119,6 @@ static bool multiUserAuthorized(std::string strUserPass)\n             if (TimingResistantEqual(strHashFromPass, strHash)) {\n                 return true;\n             }\n-        }\n     }\n     return false;\n }"
      },
      {
        "sha": "e7ece42b0d624378f998b9d50ac2ed7f7cd62fab",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de",
        "patch": "@@ -196,8 +196,7 @@ static bool InitHTTPAllowList()\n     LookupHost(\"::1\", localv6, false);\n     rpc_allow_subnets.push_back(CSubNet(localv4, 8));      // always allow IPv4 local subnet\n     rpc_allow_subnets.push_back(CSubNet(localv6));         // always allow IPv6 localhost\n-    if (gArgs.IsArgSet(\"-rpcallowip\")) {\n-        for (const std::string& strAllow : gArgs.GetArgs(\"-rpcallowip\")) {\n+    for (const std::string& strAllow : gArgs.GetArgs(\"-rpcallowip\")) {\n             CSubNet subnet;\n             LookupSubNet(strAllow.c_str(), subnet);\n             if (!subnet.IsValid()) {\n@@ -207,7 +206,6 @@ static bool InitHTTPAllowList()\n                 return false;\n             }\n             rpc_allow_subnets.push_back(subnet);\n-        }\n     }\n     std::string strAllowed;\n     for (const CSubNet& subnet : rpc_allow_subnets)"
      },
      {
        "sha": "dfa07eaf49b0a7ab072a5c10bbc68157f821f23a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 26,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de",
        "patch": "@@ -880,9 +880,7 @@ bool AppInitParameterInteraction()\n     }\n \n     // -bind and -whitebind can't be set when not listening\n-    size_t nUserBind =\n-        (gArgs.IsArgSet(\"-bind\") ? gArgs.GetArgs(\"-bind\").size() : 0) +\n-        (gArgs.IsArgSet(\"-whitebind\") ? gArgs.GetArgs(\"-whitebind\").size() : 0);\n+    size_t nUserBind = gArgs.GetArgs(\"-bind\").size() + gArgs.GetArgs(\"-whitebind\").size();\n     if (nUserBind != 0 && !gArgs.GetBoolArg(\"-listen\", DEFAULT_LISTEN)) {\n         return InitError(\"Cannot set -bind or -whitebind together with -listen=0\");\n     }\n@@ -920,15 +918,13 @@ bool AppInitParameterInteraction()\n     }\n \n     // Now remove the logging categories which were explicitly excluded\n-    if (gArgs.IsArgSet(\"-debugexclude\")) {\n-        for (const std::string& cat : gArgs.GetArgs(\"-debugexclude\")) {\n+    for (const std::string& cat : gArgs.GetArgs(\"-debugexclude\")) {\n             uint32_t flag = 0;\n             if (!GetLogCategory(&flag, &cat)) {\n                 InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debugexclude\", cat));\n                 continue;\n             }\n             logCategories &= ~flag;\n-        }\n     }\n \n     // Check for -debugnet\n@@ -1238,13 +1234,10 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // sanitize comments per BIP-0014, format user agent and check total size\n     std::vector<std::string> uacomments;\n-    if (gArgs.IsArgSet(\"-uacomment\")) {\n-        for (std::string cmt : gArgs.GetArgs(\"-uacomment\"))\n-        {\n+    for (const std::string& cmt : gArgs.GetArgs(\"-uacomment\")) {\n             if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n                 return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\"), cmt));\n             uacomments.push_back(cmt);\n-        }\n     }\n     strSubVersion = FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, uacomments);\n     if (strSubVersion.size() > MAX_SUBVERSION_LENGTH) {\n@@ -1317,14 +1310,12 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fDiscover = GetBoolArg(\"-discover\", true);\n     fRelayTxes = !GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY);\n \n-    if (gArgs.IsArgSet(\"-externalip\")) {\n-        for (const std::string& strAddr : gArgs.GetArgs(\"-externalip\")) {\n+    for (const std::string& strAddr : gArgs.GetArgs(\"-externalip\")) {\n             CService addrLocal;\n             if (Lookup(strAddr.c_str(), addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())\n                 AddLocal(addrLocal, LOCAL_MANUAL);\n             else\n                 return InitError(ResolveErrMsg(\"externalip\", strAddr));\n-        }\n     }\n \n #if ENABLE_ZMQ\n@@ -1553,10 +1544,8 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         uiInterface.NotifyBlockTip.connect(BlockNotifyCallback);\n \n     std::vector<fs::path> vImportFiles;\n-    if (gArgs.IsArgSet(\"-loadblock\"))\n-    {\n-        for (const std::string& strFile : gArgs.GetArgs(\"-loadblock\"))\n-            vImportFiles.push_back(strFile);\n+    for (const std::string& strFile : gArgs.GetArgs(\"-loadblock\")) {\n+        vImportFiles.push_back(strFile);\n     }\n \n     threadGroup.create_thread(boost::bind(&ThreadImport, vImportFiles));\n@@ -1598,17 +1587,14 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     connOptions.nMaxOutboundTimeframe = nMaxOutboundTimeframe;\n     connOptions.nMaxOutboundLimit = nMaxOutboundLimit;\n \n-    if (gArgs.IsArgSet(\"-bind\")) {\n-        for (const std::string& strBind : gArgs.GetArgs(\"-bind\")) {\n+    for (const std::string& strBind : gArgs.GetArgs(\"-bind\")) {\n             CService addrBind;\n             if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false)) {\n                 return InitError(ResolveErrMsg(\"bind\", strBind));\n             }\n             connOptions.vBinds.push_back(addrBind);\n-        }\n     }\n-    if (gArgs.IsArgSet(\"-whitebind\")) {\n-        for (const std::string& strBind : gArgs.GetArgs(\"-whitebind\")) {\n+    for (const std::string& strBind : gArgs.GetArgs(\"-whitebind\")) {\n             CService addrBind;\n             if (!Lookup(strBind.c_str(), addrBind, 0, false)) {\n                 return InitError(ResolveErrMsg(\"whitebind\", strBind));\n@@ -1617,17 +1603,14 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 return InitError(strprintf(_(\"Need to specify a port with -whitebind: '%s'\"), strBind));\n             }\n             connOptions.vWhiteBinds.push_back(addrBind);\n-        }\n     }\n \n-    if (gArgs.IsArgSet(\"-whitelist\")) {\n-        for (const auto& net : gArgs.GetArgs(\"-whitelist\")) {\n+    for (const auto& net : gArgs.GetArgs(\"-whitelist\")) {\n             CSubNet subnet;\n             LookupSubNet(net.c_str(), subnet);\n             if (!subnet.IsValid())\n                 return InitError(strprintf(_(\"Invalid netmask specified in -whitelist: '%s'\"), net));\n             connOptions.vWhitelistedRange.push_back(subnet);\n-        }\n     }\n \n     if (gArgs.IsArgSet(\"-seednode\")) {"
      },
      {
        "sha": "301cf58b8705e4bda0de4f965be097cd7cfeb0d2",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de",
        "patch": "@@ -1677,7 +1677,7 @@ void CConnman::ProcessOneShot()\n void CConnman::ThreadOpenConnections()\n {\n     // Connect to specific addresses\n-    if (gArgs.IsArgSet(\"-connect\") && gArgs.GetArgs(\"-connect\").size() > 0)\n+    if (gArgs.IsArgSet(\"-connect\"))\n     {\n         for (int64_t nLoop = 0;; nLoop++)\n         {\n@@ -1903,8 +1903,7 @@ void CConnman::ThreadOpenAddedConnections()\n {\n     {\n         LOCK(cs_vAddedNodes);\n-        if (gArgs.IsArgSet(\"-addnode\"))\n-            vAddedNodes = gArgs.GetArgs(\"-addnode\");\n+        vAddedNodes = gArgs.GetArgs(\"-addnode\");\n     }\n \n     while (true)"
      },
      {
        "sha": "27ccd40b7b36dd4e3a11b679abe4201179adfac5",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de",
        "patch": "@@ -420,7 +420,9 @@ void ArgsManager::ParseParameters(int argc, const char* const argv[])\n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg)\n {\n     LOCK(cs_args);\n-    return mapMultiArgs.at(strArg);\n+    if (IsArgSet(strArg))\n+        return mapMultiArgs.at(strArg);\n+    return {};\n }\n \n bool ArgsManager::IsArgSet(const std::string& strArg)"
      }
    ]
  },
  {
    "sha": "ed866ab923c01d9da2ddd067144e74978383e304",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDg2NmFiOTIzYzAxZDlkYTJkZGQwNjcxNDRlNzQ5NzgzODNlMzA0",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-27T01:10:39Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-27T05:39:52Z"
      },
      "message": "Indentation after 'Remove redundant calls to gArgs.IsArgSet()'",
      "tree": {
        "sha": "880ce76b5e16b8bcc82d6e83b8a1a300f3bb3577",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/880ce76b5e16b8bcc82d6e83b8a1a300f3bb3577"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed866ab923c01d9da2ddd067144e74978383e304",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZUe+oAAoJEKT10UHAGgOH0eIP/iZu+bQgj0trxvGmkQvp/82C\nGHyDf/Daa83m5R0f06X2g8LTyK+E090KEoP68cWCM53mM77OWhVuwBHL4AjnR0o0\nShj85jL3YbTq62C0gP6ii920E8aF6WEVO8Jbhb6DPV/HLj0B/E6rJ9nRnRphC/LN\nPqEu58MtFDdk/0mnbH1quMGTMzR6cdtE5cCO2f7DbcE+LNq82vKnPoq9H1Q89wOt\nTifT8aQsJndcnJViLfTi6Id93Z4YlKCd7XgnyhqOHHkjhxNe76ShR1sMwSFG5IZi\n7kP8j489MWhS0fle1Hv64N9/2k6qPV6i82YY1BIAKSmNVxU1P5HsQUkYJJccxkSD\nbbYIpwW5bxGvktYUHfQLT9M3jaNfp1DLhs09VNz9Lk85I1gloroAcXz+DA4+wxEb\nh09lNuXr79J5DQtjw6+GXR+eXRe0BzbGetFvAS6LP6O4qDJFlSjvzMwL1dX0OBvI\nIGqBfVMq98uSZ1pSFpSFh0qDPpsEf/d3Sdgm6tUI7n2HGrRlO5+GgicEznDRUZmM\n3Y2Xvg1Mbj9wMXiuZlW3hQf6MrnjF6lz+VSz/RkmCl2W4FoCt4qEr3/5KJR2UQp9\nvwCO87MyeK5q9ICcyspis0fgXbCyVyujW108aPw4OljndImnGeRFv9EaIVqiiz0u\njAhIRiuIzrIdTXMeD10N\n=9xBs\n-----END PGP SIGNATURE-----",
        "payload": "tree 880ce76b5e16b8bcc82d6e83b8a1a300f3bb3577\nparent 506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498525839 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498541992 +0200\n\nIndentation after 'Remove redundant calls to gArgs.IsArgSet()'\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed866ab923c01d9da2ddd067144e74978383e304",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed866ab923c01d9da2ddd067144e74978383e304",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed866ab923c01d9da2ddd067144e74978383e304/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/506b700dcb5dd5a7c1d8ffa7c77043a93e4e10de"
      }
    ],
    "stats": {
      "total": 132,
      "additions": 66,
      "deletions": 66
    },
    "files": [
      {
        "sha": "497e565b1efa32b433364a43d3683a384eb8896f",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 25,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed866ab923c01d9da2ddd067144e74978383e304/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed866ab923c01d9da2ddd067144e74978383e304/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=ed866ab923c01d9da2ddd067144e74978383e304",
        "patch": "@@ -94,31 +94,31 @@ static bool multiUserAuthorized(std::string strUserPass)\n \n     for (const std::string& strRPCAuth : gArgs.GetArgs(\"-rpcauth\")) {\n         //Search for multi-user login/pass \"rpcauth\" from config\n-            std::vector<std::string> vFields;\n-            boost::split(vFields, strRPCAuth, boost::is_any_of(\":$\"));\n-            if (vFields.size() != 3) {\n-                //Incorrect formatting in config file\n-                continue;\n-            }\n-\n-            std::string strName = vFields[0];\n-            if (!TimingResistantEqual(strName, strUser)) {\n-                continue;\n-            }\n-\n-            std::string strSalt = vFields[1];\n-            std::string strHash = vFields[2];\n-\n-            static const unsigned int KEY_SIZE = 32;\n-            unsigned char out[KEY_SIZE];\n-\n-            CHMAC_SHA256(reinterpret_cast<const unsigned char*>(strSalt.c_str()), strSalt.size()).Write(reinterpret_cast<const unsigned char*>(strPass.c_str()), strPass.size()).Finalize(out);\n-            std::vector<unsigned char> hexvec(out, out+KEY_SIZE);\n-            std::string strHashFromPass = HexStr(hexvec);\n-\n-            if (TimingResistantEqual(strHashFromPass, strHash)) {\n-                return true;\n-            }\n+        std::vector<std::string> vFields;\n+        boost::split(vFields, strRPCAuth, boost::is_any_of(\":$\"));\n+        if (vFields.size() != 3) {\n+            //Incorrect formatting in config file\n+            continue;\n+        }\n+\n+        std::string strName = vFields[0];\n+        if (!TimingResistantEqual(strName, strUser)) {\n+            continue;\n+        }\n+\n+        std::string strSalt = vFields[1];\n+        std::string strHash = vFields[2];\n+\n+        static const unsigned int KEY_SIZE = 32;\n+        unsigned char out[KEY_SIZE];\n+\n+        CHMAC_SHA256(reinterpret_cast<const unsigned char*>(strSalt.c_str()), strSalt.size()).Write(reinterpret_cast<const unsigned char*>(strPass.c_str()), strPass.size()).Finalize(out);\n+        std::vector<unsigned char> hexvec(out, out+KEY_SIZE);\n+        std::string strHashFromPass = HexStr(hexvec);\n+\n+        if (TimingResistantEqual(strHashFromPass, strHash)) {\n+            return true;\n+        }\n     }\n     return false;\n }"
      },
      {
        "sha": "8841a4e9e72422599dcf84b90513912b9f31f070",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed866ab923c01d9da2ddd067144e74978383e304/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed866ab923c01d9da2ddd067144e74978383e304/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=ed866ab923c01d9da2ddd067144e74978383e304",
        "patch": "@@ -197,15 +197,15 @@ static bool InitHTTPAllowList()\n     rpc_allow_subnets.push_back(CSubNet(localv4, 8));      // always allow IPv4 local subnet\n     rpc_allow_subnets.push_back(CSubNet(localv6));         // always allow IPv6 localhost\n     for (const std::string& strAllow : gArgs.GetArgs(\"-rpcallowip\")) {\n-            CSubNet subnet;\n-            LookupSubNet(strAllow.c_str(), subnet);\n-            if (!subnet.IsValid()) {\n-                uiInterface.ThreadSafeMessageBox(\n-                    strprintf(\"Invalid -rpcallowip subnet specification: %s. Valid are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24).\", strAllow),\n-                    \"\", CClientUIInterface::MSG_ERROR);\n-                return false;\n-            }\n-            rpc_allow_subnets.push_back(subnet);\n+        CSubNet subnet;\n+        LookupSubNet(strAllow.c_str(), subnet);\n+        if (!subnet.IsValid()) {\n+            uiInterface.ThreadSafeMessageBox(\n+                strprintf(\"Invalid -rpcallowip subnet specification: %s. Valid are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24).\", strAllow),\n+                \"\", CClientUIInterface::MSG_ERROR);\n+            return false;\n+        }\n+        rpc_allow_subnets.push_back(subnet);\n     }\n     std::string strAllowed;\n     for (const CSubNet& subnet : rpc_allow_subnets)"
      },
      {
        "sha": "57232c7df328ca5496ca2cb861dc4b3238855122",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 32,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed866ab923c01d9da2ddd067144e74978383e304/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed866ab923c01d9da2ddd067144e74978383e304/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ed866ab923c01d9da2ddd067144e74978383e304",
        "patch": "@@ -919,12 +919,12 @@ bool AppInitParameterInteraction()\n \n     // Now remove the logging categories which were explicitly excluded\n     for (const std::string& cat : gArgs.GetArgs(\"-debugexclude\")) {\n-            uint32_t flag = 0;\n-            if (!GetLogCategory(&flag, &cat)) {\n-                InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debugexclude\", cat));\n-                continue;\n-            }\n-            logCategories &= ~flag;\n+        uint32_t flag = 0;\n+        if (!GetLogCategory(&flag, &cat)) {\n+            InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debugexclude\", cat));\n+            continue;\n+        }\n+        logCategories &= ~flag;\n     }\n \n     // Check for -debugnet\n@@ -1235,9 +1235,9 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // sanitize comments per BIP-0014, format user agent and check total size\n     std::vector<std::string> uacomments;\n     for (const std::string& cmt : gArgs.GetArgs(\"-uacomment\")) {\n-            if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n-                return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\"), cmt));\n-            uacomments.push_back(cmt);\n+        if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n+            return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\"), cmt));\n+        uacomments.push_back(cmt);\n     }\n     strSubVersion = FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, uacomments);\n     if (strSubVersion.size() > MAX_SUBVERSION_LENGTH) {\n@@ -1311,11 +1311,11 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fRelayTxes = !GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY);\n \n     for (const std::string& strAddr : gArgs.GetArgs(\"-externalip\")) {\n-            CService addrLocal;\n-            if (Lookup(strAddr.c_str(), addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())\n-                AddLocal(addrLocal, LOCAL_MANUAL);\n-            else\n-                return InitError(ResolveErrMsg(\"externalip\", strAddr));\n+        CService addrLocal;\n+        if (Lookup(strAddr.c_str(), addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())\n+            AddLocal(addrLocal, LOCAL_MANUAL);\n+        else\n+            return InitError(ResolveErrMsg(\"externalip\", strAddr));\n     }\n \n #if ENABLE_ZMQ\n@@ -1588,29 +1588,29 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     connOptions.nMaxOutboundLimit = nMaxOutboundLimit;\n \n     for (const std::string& strBind : gArgs.GetArgs(\"-bind\")) {\n-            CService addrBind;\n-            if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false)) {\n-                return InitError(ResolveErrMsg(\"bind\", strBind));\n-            }\n-            connOptions.vBinds.push_back(addrBind);\n+        CService addrBind;\n+        if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false)) {\n+            return InitError(ResolveErrMsg(\"bind\", strBind));\n+        }\n+        connOptions.vBinds.push_back(addrBind);\n     }\n     for (const std::string& strBind : gArgs.GetArgs(\"-whitebind\")) {\n-            CService addrBind;\n-            if (!Lookup(strBind.c_str(), addrBind, 0, false)) {\n-                return InitError(ResolveErrMsg(\"whitebind\", strBind));\n-            }\n-            if (addrBind.GetPort() == 0) {\n-                return InitError(strprintf(_(\"Need to specify a port with -whitebind: '%s'\"), strBind));\n-            }\n-            connOptions.vWhiteBinds.push_back(addrBind);\n+        CService addrBind;\n+        if (!Lookup(strBind.c_str(), addrBind, 0, false)) {\n+            return InitError(ResolveErrMsg(\"whitebind\", strBind));\n+        }\n+        if (addrBind.GetPort() == 0) {\n+            return InitError(strprintf(_(\"Need to specify a port with -whitebind: '%s'\"), strBind));\n+        }\n+        connOptions.vWhiteBinds.push_back(addrBind);\n     }\n \n     for (const auto& net : gArgs.GetArgs(\"-whitelist\")) {\n-            CSubNet subnet;\n-            LookupSubNet(net.c_str(), subnet);\n-            if (!subnet.IsValid())\n-                return InitError(strprintf(_(\"Invalid netmask specified in -whitelist: '%s'\"), net));\n-            connOptions.vWhitelistedRange.push_back(subnet);\n+        CSubNet subnet;\n+        LookupSubNet(net.c_str(), subnet);\n+        if (!subnet.IsValid())\n+            return InitError(strprintf(_(\"Invalid netmask specified in -whitelist: '%s'\"), net));\n+        connOptions.vWhitelistedRange.push_back(subnet);\n     }\n \n     if (gArgs.IsArgSet(\"-seednode\")) {"
      }
    ]
  },
  {
    "sha": "76859e6a7665faef97edf339810aa56d2e4d0ad6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Njg1OWU2YTc2NjVmYWVmOTdlZGYzMzk4MTBhYTU2ZDJlNGQwYWQ2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-15T16:43:03Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-27T09:04:52Z"
      },
      "message": "[tests] Update functional tests documentation",
      "tree": {
        "sha": "686ee41ec54e7062f57b42a445031f6af1d9e675",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/686ee41ec54e7062f57b42a445031f6af1d9e675"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76859e6a7665faef97edf339810aa56d2e4d0ad6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76859e6a7665faef97edf339810aa56d2e4d0ad6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/76859e6a7665faef97edf339810aa56d2e4d0ad6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76859e6a7665faef97edf339810aa56d2e4d0ad6/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2ab38bdd57a16e6c708dcc633d9162331c9d311",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2ab38bdd57a16e6c708dcc633d9162331c9d311",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2ab38bdd57a16e6c708dcc633d9162331c9d311"
      }
    ],
    "stats": {
      "total": 328,
      "additions": 221,
      "deletions": 107
    },
    "files": [
      {
        "sha": "15f6df790f9ba6142baf85319dcec6cc52d2119d",
        "filename": "test/README.md",
        "status": "modified",
        "additions": 111,
        "deletions": 43,
        "changes": 154,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76859e6a7665faef97edf339810aa56d2e4d0ad6/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76859e6a7665faef97edf339810aa56d2e4d0ad6/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/README.md?ref=76859e6a7665faef97edf339810aa56d2e4d0ad6",
        "patch": "@@ -15,84 +15,152 @@ The util tests are run as part of `make check` target. The functional\n tests are run by the travis continuous build process whenever a pull\n request is opened. Both sets of tests can also be run locally.\n \n-Functional Test dependencies\n-============================\n+# Running tests locally\n+\n+Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+\n+### Functional tests\n+\n+#### Dependencies\n+\n The ZMQ functional test requires a python ZMQ library. To install it:\n \n - on Unix, run `sudo apt-get install python3-zmq`\n - on mac OS, run `pip3 install pyzmq`\n \n-Running tests locally\n-=====================\n+#### Running the tests\n \n-Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+Individual tests can be run by directly calling the test script, eg:\n \n-Functional tests\n-----------------\n+```\n+test/functional/replace-by-fee.py\n+```\n \n-You can run any single test by calling\n+or can be run through the test_runner harness, eg:\n \n-    test/functional/test_runner.py <testname>\n+```\n+test/functional/test_runner.py replace-by-fee.py\n+```\n \n-Or you can run any combination (incl. duplicates) of tests by calling\n+You can run any combination (incl. duplicates) of tests by calling:\n \n-    test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n+```\n+test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n+```\n \n-Run the regression test suite with\n+Run the regression test suite with:\n \n-    test/functional/test_runner.py\n+```\n+test/functional/test_runner.py\n+```\n \n Run all possible tests with\n \n-    test/functional/test_runner.py --extended\n+```\n+test/functional/test_runner.py --extended\n+```\n+\n+By default, up to 4 tests will be run in parallel by test_runner. To specify\n+how many jobs to run, append `--jobs=n`\n \n-By default, tests will be run in parallel. To specify how many jobs to run,\n-append `--jobs=n` (default n=4).\n+The individual tests and the test_runner harness have many command-line\n+options. Run `test_runner.py -h` to see them all.\n \n-If you want to create a basic coverage report for the RPC test suite, append `--coverage`.\n+#### Troubleshooting and debugging test failures\n \n-Possible options, which apply to each individual test run:\n+##### Resource contention\n \n+The P2P and RPC ports used by the bitcoind nodes-under-test are chosen to make\n+conflicts with other processes unlikely. However, if there is another bitcoind\n+process running on the system (perhaps from a previous test which hasn't successfully\n+killed all its bitcoind nodes), then there may be a port conflict which will\n+cause the test to fail. It is recommended that you run the tests on a system\n+where no other bitcoind processes are running.\n+\n+On linux, the test_framework will warn if there is another\n+bitcoind process running when the tests are started.\n+\n+If there are zombie bitcoind processes after test failure, you can kill them\n+by running the following commands. **Note that these commands will kill all\n+bitcoind processes running on the system, so should not be used if any non-test\n+bitcoind processes are being run.**\n+\n+```bash\n+killall bitcoind\n ```\n-  -h, --help            show this help message and exit\n-  --nocleanup           Leave bitcoinds and test.* datadir on exit or error\n-  --noshutdown          Don't stop bitcoinds after the test execution\n-  --srcdir=SRCDIR       Source directory containing bitcoind/bitcoin-cli\n-                        (default: ../../src)\n-  --tmpdir=TMPDIR       Root directory for datadirs\n-  --tracerpc            Print out all RPC calls as they are made\n-  --coveragedir=COVERAGEDIR\n-                        Write tested RPC commands into this directory\n-```\n \n-If you set the environment variable `PYTHON_DEBUG=1` you will get some debug\n-output (example: `PYTHON_DEBUG=1 test/functional/test_runner.py wallet`).\n+or\n+\n+```bash\n+pkill -9 bitcoind\n+```\n \n-A 200-block -regtest blockchain and wallets for four nodes\n-is created the first time a regression test is run and\n-is stored in the cache/ directory. Each node has 25 mature\n-blocks (25*50=1250 BTC) in its wallet.\n \n-After the first run, the cache/ blockchain and wallets are\n-copied into a temporary directory and used as the initial\n-test state.\n+##### Data directory cache\n \n-If you get into a bad state, you should be able\n-to recover with:\n+A pre-mined blockchain with 200 blocks is generated the first time a\n+functional test is run and is stored in test/cache. This speeds up\n+test startup times since new blockchains don't need to be generated for\n+each test. However, the cache may get into a bad state, in which case\n+tests will fail. If this happens, remove the cache directory (and make\n+sure bitcoind processes are stopped as above):\n \n ```bash\n rm -rf cache\n killall bitcoind\n ```\n \n-Util tests\n-----------\n+##### Test logging\n+\n+The tests contain logging at different levels (debug, info, warning, etc). By\n+default:\n+\n+- when run through the test_runner harness, *all* logs are written to\n+  `test_framework.log` and no logs are output to the console.\n+- when run directly, *all* logs are written to `test_framework.log` and INFO\n+  level and above are output to the console.\n+- when run on Travis, no logs are output to the console. However, if a test\n+  fails, the `test_framework.log` and bitcoind `debug.log`s will all be dumped\n+  to the console to help troubleshooting.\n+\n+To change the level of logs output to the console, use the `-l` command line\n+argument.\n+\n+`test_framework.log` and bitcoind `debug.log`s can be combined into a single\n+aggregate log by running the `combine_logs.py` script. The output can be plain\n+text, colorized text or html. For example:\n+\n+```\n+combine_logs.py -c <test data directory> | less -r\n+```\n+\n+will pipe the colorized logs from the test into less.\n+\n+Use `--tracerpc` to trace out all the RPC calls and responses to the console. For\n+some tests (eg any that use `submitblock` to submit a full block over RPC),\n+this can result in a lot of screen output.\n+\n+By default, the test data directory will be deleted after a successful run.\n+Use `--nocleanup` to leave the test data directory intact. The test data\n+directory is never deleted after a failed test.\n+\n+##### Attaching a debugger\n+\n+A python debugger can be attached to tests at any point. Just add the line:\n+\n+```py\n+import pdb; pdb.set_trace()\n+```\n+\n+anywhere in the test. You will then be able to inspect variables, as well as\n+call methods that interact with the bitcoind nodes-under-test.\n+\n+### Util tests\n \n Util tests can be run locally by running `test/util/bitcoin-util-test.py`. \n Use the `-v` option for verbose output.\n \n-Writing functional tests\n-========================\n+# Writing functional tests\n \n You are encouraged to write functional tests for new or existing features.\n Further information about the functional test framework and individual "
      },
      {
        "sha": "96fe0beccea9c0b50bcdfb2e8064e72901878cd3",
        "filename": "test/functional/README.md",
        "status": "modified",
        "additions": 110,
        "deletions": 64,
        "changes": 174,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76859e6a7665faef97edf339810aa56d2e4d0ad6/test/functional/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76859e6a7665faef97edf339810aa56d2e4d0ad6/test/functional/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/README.md?ref=76859e6a7665faef97edf339810aa56d2e4d0ad6",
        "patch": "@@ -1,108 +1,154 @@\n-Regression tests\n-================\n+# Functional tests\n \n-### [test_framework/authproxy.py](test_framework/authproxy.py)\n-Taken from the [python-bitcoinrpc repository](https://github.com/jgarzik/python-bitcoinrpc).\n+### Writing Functional Tests\n \n-### [test_framework/test_framework.py](test_framework/test_framework.py)\n-Base class for new regression tests.\n+#### Example test\n \n-### [test_framework/util.py](test_framework/util.py)\n-Generally useful functions.\n+The [example_test.py](example_test.py) is a heavily commented example of a test case that uses both\n+the RPC and P2P interfaces. If you are writing your first test, copy that file\n+and modify to fit your needs.\n \n-### [test_framework/mininode.py](test_framework/mininode.py)\n-Basic code to support p2p connectivity to a bitcoind.\n+#### Coverage\n \n-### [test_framework/comptool.py](test_framework/comptool.py)\n-Framework for comparison-tool style, p2p tests.\n+Running `test_runner.py` with the `--coverage` argument tracks which RPCs are\n+called by the tests and prints a report of uncovered RPCs in the summary. This\n+can be used (along with the `--extended` argument) to find out which RPCs we\n+don't have test cases for.\n \n-### [test_framework/script.py](test_framework/script.py)\n-Utilities for manipulating transaction scripts (originally from python-bitcoinlib)\n+#### Style guidelines\n \n-### [test_framework/blockstore.py](test_framework/blockstore.py)\n-Implements disk-backed block and tx storage.\n+- Where possible, try to adhere to [PEP-8 guidelines]([https://www.python.org/dev/peps/pep-0008/)\n+- Use a python linter like flake8 before submitting PRs to catch common style\n+  nits (eg trailing whitespace, unused imports, etc)\n+- Avoid wildcard imports where possible\n+- Use a module-level docstring to describe what the test is testing, and how it\n+  is testing it.\n+- When subclassing the BitcoinTestFramwork, place overrides for the\n+  `__init__()`, and `setup_xxxx()` methods at the top of the subclass, then\n+  locally-defined helper methods, then the `run_test()` method.\n \n-### [test_framework/key.py](test_framework/key.py)\n-Wrapper around OpenSSL EC_Key (originally from python-bitcoinlib)\n+#### General test-writing advice\n \n-### [test_framework/bignum.py](test_framework/bignum.py)\n-Helpers for script.py\n+- Set `self.num_nodes` to the minimum number of nodes necessary for the test.\n+  Having additional unrequired nodes adds to the execution time of the test as\n+  well as memory/CPU/disk requirements (which is important when running tests in\n+  parallel or on Travis).\n+- Avoid stop-starting the nodes multiple times during the test if possible. A\n+  stop-start takes several seconds, so doing it several times blows up the\n+  runtime of the test.\n+- Set the `self.setup_clean_chain` variable in `__init__()` to control whether\n+  or not to use the cached data directories. The cached data directories\n+  contain a 200-block pre-mined blockchain and wallets for four nodes. Each node\n+  has 25 mature blocks (25x50=1250 BTC) in its wallet.\n+- When calling RPCs with lots of arguments, consider using named keyword\n+  arguments instead of positional arguments to make the intent of the call\n+  clear to readers.\n \n-### [test_framework/blocktools.py](test_framework/blocktools.py)\n-Helper functions for creating blocks and transactions.\n+#### RPC and P2P definitions\n \n-P2P test design notes\n----------------------\n+Test writers may find it helpful to refer to the definitions for the RPC and\n+P2P messages. These can be found in the following source files:\n \n-## Mininode\n+- `/src/rpc/*` for RPCs\n+- `/src/wallet/rpc*` for wallet RPCs\n+- `ProcessMessage()` in `/src/net_processing.cpp` for parsing P2P messages\n \n-* ```mininode.py``` contains all the definitions for objects that pass\n-over the network (```CBlock```, ```CTransaction```, etc, along with the network-level\n-wrappers for them, ```msg_block```, ```msg_tx```, etc).\n+#### Using the P2P interface\n \n-* P2P tests have two threads.  One thread handles all network communication\n+- `mininode.py` contains all the definitions for objects that pass\n+over the network (`CBlock`, `CTransaction`, etc, along with the network-level\n+wrappers for them, `msg_block`, `msg_tx`, etc).\n+\n+- P2P tests have two threads. One thread handles all network communication\n with the bitcoind(s) being tested (using python's asyncore package); the other\n implements the test logic.\n \n-* ```NodeConn``` is the class used to connect to a bitcoind.  If you implement\n-a callback class that derives from ```NodeConnCB``` and pass that to the\n-```NodeConn``` object, your code will receive the appropriate callbacks when\n+- `NodeConn` is the class used to connect to a bitcoind.  If you implement\n+a callback class that derives from `NodeConnCB` and pass that to the\n+`NodeConn` object, your code will receive the appropriate callbacks when\n events of interest arrive.\n \n-* You can pass the same handler to multiple ```NodeConn```'s if you like, or pass\n-different ones to each -- whatever makes the most sense for your test.\n-\n-* Call ```NetworkThread.start()``` after all ```NodeConn``` objects are created to\n+- Call `NetworkThread.start()` after all `NodeConn` objects are created to\n start the networking thread.  (Continue with the test logic in your existing\n thread.)\n \n-* RPC calls are available in p2p tests.\n+- Can be used to write tests where specific P2P protocol behavior is tested.\n+Examples tests are `p2p-accept-block.py`, `p2p-compactblocks.py`.\n \n-* Can be used to write free-form tests, where specific p2p-protocol behavior\n-is tested.  Examples: ```p2p-accept-block.py```, ```p2p-compactblocks.py```.\n+#### Comptool\n \n-## Comptool\n+- Comptool is a Testing framework for writing tests that compare the block/tx acceptance\n+behavior of a bitcoind against 1 or more other bitcoind instances. It should not be used\n+to write static tests with known outcomes, since that type of test is easier to write and\n+maintain using the standard BitcoinTestFramework.\n \n-* Testing framework for writing tests that compare the block/tx acceptance\n-behavior of a bitcoind against 1 or more other bitcoind instances, or against\n-known outcomes, or both.\n-\n-* Set the ```num_nodes``` variable (defined in ```ComparisonTestFramework```) to start up\n-1 or more nodes.  If using 1 node, then ```--testbinary``` can be used as a command line\n+- Set the `num_nodes` variable (defined in `ComparisonTestFramework`) to start up\n+1 or more nodes.  If using 1 node, then `--testbinary` can be used as a command line\n option to change the bitcoind binary used by the test.  If using 2 or more nodes,\n-then ```--refbinary``` can be optionally used to change the bitcoind that will be used\n+then `--refbinary` can be optionally used to change the bitcoind that will be used\n on nodes 2 and up.\n \n-* Implement a (generator) function called ```get_tests()``` which yields ```TestInstance```s.\n-Each ```TestInstance``` consists of:\n-  - a list of ```[object, outcome, hash]``` entries\n-    * ```object``` is a ```CBlock```, ```CTransaction```, or\n-    ```CBlockHeader```.  ```CBlock```'s and ```CTransaction```'s are tested for\n-    acceptance.  ```CBlockHeader```s can be used so that the test runner can deliver\n+- Implement a (generator) function called `get_tests()` which yields `TestInstance`s.\n+Each `TestInstance` consists of:\n+  - a list of `[object, outcome, hash]` entries\n+    * `object` is a `CBlock`, `CTransaction`, or\n+    `CBlockHeader`.  `CBlock`'s and `CTransaction`'s are tested for\n+    acceptance.  `CBlockHeader`s can be used so that the test runner can deliver\n     complete headers-chains when requested from the bitcoind, to allow writing\n     tests where blocks can be delivered out of order but still processed by\n     headers-first bitcoind's.\n-    * ```outcome``` is ```True```, ```False```, or ```None```.  If ```True```\n-    or ```False```, the tip is compared with the expected tip -- either the\n+    * `outcome` is `True`, `False`, or `None`.  If `True`\n+    or `False`, the tip is compared with the expected tip -- either the\n     block passed in, or the hash specified as the optional 3rd entry.  If\n-    ```None``` is specified, then the test will compare all the bitcoind's\n+    `None` is specified, then the test will compare all the bitcoind's\n     being tested to see if they all agree on what the best tip is.\n-    * ```hash``` is the block hash of the tip to compare against. Optional to\n+    * `hash` is the block hash of the tip to compare against. Optional to\n     specify; if left out then the hash of the block passed in will be used as\n     the expected tip.  This allows for specifying an expected tip while testing\n     the handling of either invalid blocks or blocks delivered out of order,\n     which complete a longer chain.\n-  - ```sync_every_block```: ```True/False```.  If ```False```, then all blocks\n+  - `sync_every_block`: `True/False`.  If `False`, then all blocks\n     are inv'ed together, and the test runner waits until the node receives the\n     last one, and tests only the last block for tip acceptance using the\n-    outcome and specified tip.  If ```True```, then each block is tested in\n+    outcome and specified tip.  If `True`, then each block is tested in\n     sequence and synced (this is slower when processing many blocks).\n-  - ```sync_every_transaction```: ```True/False```.  Analogous to\n-    ```sync_every_block```, except if the outcome on the last tx is \"None\",\n+  - `sync_every_transaction`: `True/False`.  Analogous to\n+    `sync_every_block`, except if the outcome on the last tx is \"None\",\n     then the contents of the entire mempool are compared across all bitcoind\n-    connections.  If ```True``` or ```False```, then only the last tx's\n+    connections.  If `True` or `False`, then only the last tx's\n     acceptance is tested against the given outcome.\n \n-* For examples of tests written in this framework, see\n-  ```invalidblockrequest.py``` and ```p2p-fullblocktest.py```.\n+- For examples of tests written in this framework, see\n+  `invalidblockrequest.py` and `p2p-fullblocktest.py`.\n+\n+### test-framework modules\n+\n+#### [test_framework/authproxy.py](test_framework/authproxy.py)\n+Taken from the [python-bitcoinrpc repository](https://github.com/jgarzik/python-bitcoinrpc).\n+\n+#### [test_framework/test_framework.py](test_framework/test_framework.py)\n+Base class for functional tests.\n \n+#### [test_framework/util.py](test_framework/util.py)\n+Generally useful functions.\n+\n+#### [test_framework/mininode.py](test_framework/mininode.py)\n+Basic code to support P2P connectivity to a bitcoind.\n+\n+#### [test_framework/comptool.py](test_framework/comptool.py)\n+Framework for comparison-tool style, P2P tests.\n+\n+#### [test_framework/script.py](test_framework/script.py)\n+Utilities for manipulating transaction scripts (originally from python-bitcoinlib)\n+\n+#### [test_framework/blockstore.py](test_framework/blockstore.py)\n+Implements disk-backed block and tx storage.\n+\n+#### [test_framework/key.py](test_framework/key.py)\n+Wrapper around OpenSSL EC_Key (originally from python-bitcoinlib)\n+\n+#### [test_framework/bignum.py](test_framework/bignum.py)\n+Helpers for script.py\n+\n+#### [test_framework/blocktools.py](test_framework/blocktools.py)\n+Helper functions for creating blocks and transactions."
      }
    ]
  },
  {
    "sha": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplN2JhNmMxNmIzNDQ0M2NmMDc3NGQ3MDdkOTkxOGViYzk4MzVkNmNh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-15T19:29:53Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-27T09:04:52Z"
      },
      "message": "[tests] add example test",
      "tree": {
        "sha": "015b2e7815a31e0d4fdb9b8aecc9ba9d64fb7929",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/015b2e7815a31e0d4fdb9b8aecc9ba9d64fb7929"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7ba6c16b34443cf0774d707d9918ebc9835d6ca/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "76859e6a7665faef97edf339810aa56d2e4d0ad6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76859e6a7665faef97edf339810aa56d2e4d0ad6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/76859e6a7665faef97edf339810aa56d2e4d0ad6"
      }
    ],
    "stats": {
      "total": 220,
      "additions": 220,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1ba5f756cd4a05cd4f7388ffad125b0f899bceef",
        "filename": "test/functional/example_test.py",
        "status": "added",
        "additions": 219,
        "deletions": 0,
        "changes": 219,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7ba6c16b34443cf0774d707d9918ebc9835d6ca/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7ba6c16b34443cf0774d707d9918ebc9835d6ca/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
        "patch": "@@ -0,0 +1,219 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"An example functional test\n+\n+The module-level docstring should include a high-level description of\n+what the test is doing. It's the first thing people see when they open\n+the file and should give the reader information about *what* the test\n+is testing and *how* it's being tested\n+\"\"\"\n+# Imports should be in PEP8 ordering (std library first, then third party\n+# libraries then local imports).\n+from collections import defaultdict\n+\n+# Avoid wildcard * imports if possible\n+from test_framework.blocktools import (create_block, create_coinbase)\n+from test_framework.mininode import (\n+    CInv,\n+    NetworkThread,\n+    NodeConn,\n+    NodeConnCB,\n+    mininode_lock,\n+    msg_block,\n+    msg_getdata,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    p2p_port,\n+)\n+\n+# NodeConnCB is a class containing callbacks to be executed when a P2P\n+# message is received from the node-under-test. Subclass NodeConnCB and\n+# override the on_*() methods if you need custom behaviour.\n+class BaseNode(NodeConnCB):\n+    def __init__(self):\n+        \"\"\"Initialize the NodeConnCB\n+\n+        Used to inialize custom properties for the Node that aren't\n+        included by default in the base class. Be aware that the NodeConnCB\n+        base class already stores a counter for each P2P message type and the\n+        last received message of each type, which should be sufficient for the\n+        needs of most tests.\n+\n+        Call super().__init__() first for standard initialization and then\n+        initialize custom properties.\"\"\"\n+        super().__init__()\n+        # Stores a dictionary of all blocks received\n+        self.block_receive_map = defaultdict(int)\n+\n+    def on_block(self, conn, message):\n+        \"\"\"Override the standard on_block callback\n+\n+        Store the hash of a received block in the dictionary.\"\"\"\n+        message.block.calc_sha256()\n+        self.block_receive_map[message.block.sha256] += 1\n+\n+def custom_function():\n+    \"\"\"Do some custom behaviour\n+\n+    If this function is more generally useful for other tests, consider\n+    moving it to a module in test_framework.\"\"\"\n+    # self.log.info(\"running custom_function\")  # Oops! Can't run self.log outside the BitcoinTestFramework\n+    pass\n+\n+class ExampleTest(BitcoinTestFramework):\n+    # Each functional test is a subclass of the BitcoinTestFramework class.\n+\n+    # Override the __init__(), add_options(), setup_chain(), setup_network()\n+    # and setup_nodes() methods to customize the test setup as required.\n+\n+    def __init__(self):\n+        \"\"\"Initialize the test\n+\n+        Call super().__init__() first, and then override any test parameters\n+        for your individual test.\"\"\"\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+        # Use self.extra_args to change command-line arguments for the nodes\n+        self.extra_args = [[], [\"-logips\"], []]\n+\n+        # self.log.info(\"I've finished __init__\")  # Oops! Can't run self.log before run_test()\n+\n+    # Use add_options() to add specific command-line options for your test.\n+    # In practice this is not used very much, since the tests are mostly written\n+    # to be run in automated environments without command-line options.\n+    # def add_options()\n+    #     pass\n+\n+    # Use setup_chain() to customize the node data directories. In practice\n+    # this is not used very much since the default behaviour is almost always\n+    # fine\n+    # def setup_chain():\n+    #     pass\n+\n+    def setup_network(self):\n+        \"\"\"Setup the test network topology\n+\n+        Often you won't need to override this, since the standard network topology\n+        (linear: node0 <-> node1 <-> node2 <-> ...) is fine for most tests.\n+\n+        If you do override this method, remember to start the nodes, assign\n+        them to self.nodes, connect them and then sync.\"\"\"\n+\n+        self.setup_nodes()\n+\n+        # In this test, we're not connecting node2 to node0 or node1. Calls to\n+        # sync_all() should not include node2, since we're not expecting it to\n+        # sync.\n+        connect_nodes(self.nodes[0], 1)\n+        self.sync_all([self.nodes[0:1]])\n+\n+    # Use setup_nodes() to customize the node start behaviour (for example if\n+    # you don't want to start all nodes at the start of the test).\n+    # def setup_nodes():\n+    #     pass\n+\n+    def custom_method(self):\n+        \"\"\"Do some custom behaviour for this test\n+\n+        Define it in a method here because you're going to use it repeatedly.\n+        If you think it's useful in general, consider moving it to the base\n+        BitcoinTestFramework class so other tests can use it.\"\"\"\n+\n+        self.log.info(\"Running custom_method\")\n+\n+    def run_test(self):\n+        \"\"\"Main test logic\"\"\"\n+\n+        # Create a P2P connection to one of the nodes\n+        node0 = BaseNode()\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], node0))\n+        node0.add_connection(connections[0])\n+\n+        # Start up network handling in another thread. This needs to be called\n+        # after the P2P connections have been created.\n+        NetworkThread().start()\n+        # wait_for_verack ensures that the P2P connection is fully up.\n+        node0.wait_for_verack()\n+\n+        # Generating a block on one of the nodes will get us out of IBD\n+        blocks = [int(self.nodes[0].generate(nblocks=1)[0], 16)]\n+        self.sync_all([self.nodes[0:1]])\n+\n+        # Notice above how we called an RPC by calling a method with the same\n+        # name on the node object. Notice also how we used a keyword argument\n+        # to specify a named RPC argument. Neither of those are defined on the\n+        # node object. Instead there's some __getattr__() magic going on under\n+        # the covers to dispatch unrecognised attribute calls to the RPC\n+        # interface.\n+\n+        # Logs are nice. Do plenty of them. They can be used in place of comments for\n+        # breaking the test into sub-sections.\n+        self.log.info(\"Starting test!\")\n+\n+        self.log.info(\"Calling a custom function\")\n+        custom_function()\n+\n+        self.log.info(\"Calling a custom method\")\n+        self.custom_method()\n+\n+        self.log.info(\"Create some blocks\")\n+        self.tip = int(self.nodes[0].getbestblockhash(), 16)\n+        self.block_time = self.nodes[0].getblock(self.nodes[0].getbestblockhash())['time'] + 1\n+\n+        height = 1\n+\n+        for i in range(10):\n+            # Use the mininode and blocktools functionality to manually build a block\n+            # Calling the generate() rpc is easier, but this allows us to exactly\n+            # control the blocks and transactions.\n+            block = create_block(self.tip, create_coinbase(height), self.block_time)\n+            block.solve()\n+            block_message = msg_block(block)\n+            # Send message is used to send a P2P message to the node over our NodeConn connection\n+            node0.send_message(block_message)\n+            self.tip = block.sha256\n+            blocks.append(self.tip)\n+            self.block_time += 1\n+            height += 1\n+\n+        self.log.info(\"Wait for node1 to reach current tip (height 11) using RPC\")\n+        self.nodes[1].waitforblockheight(11)\n+\n+        self.log.info(\"Connect node2 and node1\")\n+        connect_nodes(self.nodes[1], 2)\n+\n+        self.log.info(\"Add P2P connection to node2\")\n+        node2 = BaseNode()\n+        connections.append(NodeConn('127.0.0.1', p2p_port(2), self.nodes[2], node2))\n+        node2.add_connection(connections[1])\n+        node2.wait_for_verack()\n+\n+        self.log.info(\"Wait for node2 reach current tip. Test that it has propogated all the blocks to us\")\n+\n+        for block in blocks:\n+            getdata_request = msg_getdata()\n+            getdata_request.inv.append(CInv(2, block))\n+            node2.send_message(getdata_request)\n+\n+        # wait_until() will loop until a predicate condition is met. Use it to test properties of the\n+        # NodeConnCB objects.\n+        assert wait_until(lambda: sorted(blocks) == sorted(list(node2.block_receive_map.keys())), timeout=5)\n+\n+        self.log.info(\"Check that each block was received only once\")\n+        # The network thread uses a global lock on data access to the NodeConn objects when sending and receiving\n+        # messages. The test thread should acquire the global lock before accessing any NodeConn data to avoid locking\n+        # and synchronization issues. Note wait_until() acquires this global lock when testing the predicate.\n+        with mininode_lock:\n+            for block in node2.block_receive_map.values():\n+                assert_equal(block, 1)\n+\n+if __name__ == '__main__':\n+    ExampleTest().main()"
      },
      {
        "sha": "1cac61d9097ef69d7a69d0aac462431d9af7ae42",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7ba6c16b34443cf0774d707d9918ebc9835d6ca/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7ba6c16b34443cf0774d707d9918ebc9835d6ca/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
        "patch": "@@ -137,6 +137,7 @@\n     'bip65-cltv-p2p.py',\n     'bipdersig-p2p.py',\n     'bipdersig.py',\n+    'example_test.py',\n     'getblocktemplate_proposals.py',\n     'txn_doublespend.py',\n     'txn_clone.py --mineblock',"
      }
    ]
  },
  {
    "sha": "78783531b7cc90c6f405dd9c62807be835d4c74f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODc4MzUzMWI3Y2M5MGM2ZjQwNWRkOWM2MjgwN2JlODM1ZDRjNzRm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-27T06:49:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-27T09:12:34Z"
      },
      "message": "Merge #10581: Simplify return values of GetCoin/HaveCoin(InCache)\n\n21180ff Simplify return values of GetCoin/HaveCoin(InCache) (Pieter Wuille)\n\nTree-SHA512: eae0aa64fa1308191100cdc7cdc790c825f33b066c200a18b5895d7d5806cee1cc4caba1766ef3379a7cf93dde4bbae2bc9be92947935f5741f5c126d3ee991b",
      "tree": {
        "sha": "32541dfda7113742cc54340eda7e859ab62869ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32541dfda7113742cc54340eda7e859ab62869ce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78783531b7cc90c6f405dd9c62807be835d4c74f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZUiGEAAoJEB5K7WKYbNJdqxAH/1wokXxnesPzCiR6NXddL7r4\nQPtwMt38DH3bof5K4sDRGXmp5Y8yz5XhSuWeg61MVhKpDZZNYbEi17Vu6ZDWQbdB\n1mnSAjtTk+z0AnGIMg1YoswY+AKOiUvgagkpZzjxLMo8wjmKlqg/aXrBsDRyxWqy\nBAP9zCoIjDRL2bwP8SYTBFX2inWUMMFKkVaZFkAv68Ju5YhCmUeVbe6x6XsLLJh5\nHHUS99W3aHKrCtyDB1FTOugt67tNJzhS/TfkLBOePEUYAuBEgOb6otR5lYcrfmEd\nnOh2GfL4WwchJyRUSBS3WCKQzUjQnVJEa+wxjxttrAyny8C+CdJpiO8DiZSSlME=\n=HB5S\n-----END PGP SIGNATURE-----",
        "payload": "tree 32541dfda7113742cc54340eda7e859ab62869ce\nparent 234ffc677ee58591b139695bf92bbd6f504ee91a\nparent 21180ff73436e198b6828c312ddfd0a1195447b2\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1498546184 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1498554754 +0200\n\nMerge #10581: Simplify return values of GetCoin/HaveCoin(InCache)\n\n21180ff Simplify return values of GetCoin/HaveCoin(InCache) (Pieter Wuille)\n\nTree-SHA512: eae0aa64fa1308191100cdc7cdc790c825f33b066c200a18b5895d7d5806cee1cc4caba1766ef3379a7cf93dde4bbae2bc9be92947935f5741f5c126d3ee991b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78783531b7cc90c6f405dd9c62807be835d4c74f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78783531b7cc90c6f405dd9c62807be835d4c74f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78783531b7cc90c6f405dd9c62807be835d4c74f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "234ffc677ee58591b139695bf92bbd6f504ee91a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/234ffc677ee58591b139695bf92bbd6f504ee91a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/234ffc677ee58591b139695bf92bbd6f504ee91a"
      },
      {
        "sha": "21180ff73436e198b6828c312ddfd0a1195447b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21180ff73436e198b6828c312ddfd0a1195447b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/21180ff73436e198b6828c312ddfd0a1195447b2"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 28,
      "deletions": 19
    },
    "files": [
      {
        "sha": "3113b7755dcc12adaeb6b6ea77f04e72dffc2acb",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78783531b7cc90c6f405dd9c62807be835d4c74f/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78783531b7cc90c6f405dd9c62807be835d4c74f/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=78783531b7cc90c6f405dd9c62807be835d4c74f",
        "patch": "@@ -11,11 +11,15 @@\n #include <assert.h>\n \n bool CCoinsView::GetCoin(const COutPoint &outpoint, Coin &coin) const { return false; }\n-bool CCoinsView::HaveCoin(const COutPoint &outpoint) const { return false; }\n uint256 CCoinsView::GetBestBlock() const { return uint256(); }\n bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return false; }\n CCoinsViewCursor *CCoinsView::Cursor() const { return 0; }\n \n+bool CCoinsView::HaveCoin(const COutPoint &outpoint) const\n+{\n+    Coin coin;\n+    return GetCoin(outpoint, coin);\n+}\n \n CCoinsViewBacked::CCoinsViewBacked(CCoinsView *viewIn) : base(viewIn) { }\n bool CCoinsViewBacked::GetCoin(const COutPoint &outpoint, Coin &coin) const { return base->GetCoin(outpoint, coin); }\n@@ -55,7 +59,7 @@ bool CCoinsViewCache::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n     CCoinsMap::const_iterator it = FetchCoin(outpoint);\n     if (it != cacheCoins.end()) {\n         coin = it->second.coin;\n-        return true;\n+        return !coin.IsSpent();\n     }\n     return false;\n }"
      },
      {
        "sha": "077545a55bd61d78027ffacdc03467d885b0e765",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78783531b7cc90c6f405dd9c62807be835d4c74f/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78783531b7cc90c6f405dd9c62807be835d4c74f/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=78783531b7cc90c6f405dd9c62807be835d4c74f",
        "patch": "@@ -145,11 +145,13 @@ class CCoinsViewCursor\n class CCoinsView\n {\n public:\n-    //! Retrieve the Coin (unspent transaction output) for a given outpoint.\n+    /** Retrieve the Coin (unspent transaction output) for a given outpoint.\n+     *  Returns true only when an unspent coin was found, which is returned in coin.\n+     *  When false is returned, coin's value is unspecified.\n+     */\n     virtual bool GetCoin(const COutPoint &outpoint, Coin &coin) const;\n \n-    //! Just check whether we have data for a given outpoint.\n-    //! This may (but cannot always) return true for spent outputs.\n+    //! Just check whether a given outpoint is unspent.\n     virtual bool HaveCoin(const COutPoint &outpoint) const;\n \n     //! Retrieve the block hash whose state this CCoinsView currently represents"
      },
      {
        "sha": "e24431528a2a1e86f09b24333f83d32c8c454532",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 7,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78783531b7cc90c6f405dd9c62807be835d4c74f/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78783531b7cc90c6f405dd9c62807be835d4c74f/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=78783531b7cc90c6f405dd9c62807be835d4c74f",
        "patch": "@@ -50,12 +50,6 @@ class CCoinsViewTest : public CCoinsView\n         return true;\n     }\n \n-    bool HaveCoin(const COutPoint& outpoint) const override\n-    {\n-        Coin coin;\n-        return GetCoin(outpoint, coin);\n-    }\n-\n     uint256 GetBestBlock() const override { return hashBestBlock_; }\n \n     bool BatchWrite(CCoinsMap& mapCoins, const uint256& hashBlock) override\n@@ -147,8 +141,22 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n         {\n             uint256 txid = txids[InsecureRandRange(txids.size())]; // txid we're going to modify in this iteration.\n             Coin& coin = result[COutPoint(txid, 0)];\n+\n+            // Determine whether to test HaveCoin before or after Access* (or both). As these functions\n+            // can influence each other's behaviour by pulling things into the cache, all combinations\n+            // are tested.\n+            bool test_havecoin_before = InsecureRandBits(2) == 0;\n+            bool test_havecoin_after = InsecureRandBits(2) == 0;\n+\n+            bool result_havecoin = test_havecoin_before ? stack.back()->HaveCoin(COutPoint(txid, 0)) : false;\n             const Coin& entry = (InsecureRandRange(500) == 0) ? AccessByTxid(*stack.back(), txid) : stack.back()->AccessCoin(COutPoint(txid, 0));\n             BOOST_CHECK(coin == entry);\n+            BOOST_CHECK(!test_havecoin_before || result_havecoin == !entry.IsSpent());\n+\n+            if (test_havecoin_after) {\n+                bool ret = stack.back()->HaveCoin(COutPoint(txid, 0));\n+                BOOST_CHECK(ret == !entry.IsSpent());\n+            }\n \n             if (InsecureRandRange(5) == 0 || coin.IsSpent()) {\n                 Coin newcoin;\n@@ -628,7 +636,7 @@ BOOST_AUTO_TEST_CASE(ccoins_access)\n     CheckAccessCoin(ABSENT, VALUE2, VALUE2, FRESH      , FRESH      );\n     CheckAccessCoin(ABSENT, VALUE2, VALUE2, DIRTY      , DIRTY      );\n     CheckAccessCoin(ABSENT, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(PRUNED, ABSENT, PRUNED, NO_ENTRY   , FRESH      );\n+    CheckAccessCoin(PRUNED, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n     CheckAccessCoin(PRUNED, PRUNED, PRUNED, 0          , 0          );\n     CheckAccessCoin(PRUNED, PRUNED, PRUNED, FRESH      , FRESH      );\n     CheckAccessCoin(PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );"
      },
      {
        "sha": "dcfc5ffde0b56aea71fa63945e8473fa316d835b",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78783531b7cc90c6f405dd9c62807be835d4c74f/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78783531b7cc90c6f405dd9c62807be835d4c74f/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=78783531b7cc90c6f405dd9c62807be835d4c74f",
        "patch": "@@ -903,11 +903,7 @@ bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n             return false;\n         }\n     }\n-    return (base->GetCoin(outpoint, coin) && !coin.IsSpent());\n-}\n-\n-bool CCoinsViewMemPool::HaveCoin(const COutPoint &outpoint) const {\n-    return mempool.exists(outpoint) || base->HaveCoin(outpoint);\n+    return base->GetCoin(outpoint, coin);\n }\n \n size_t CTxMemPool::DynamicMemoryUsage() const {"
      },
      {
        "sha": "78ac3c209bc7d3cd449d60dd15fc704470bb0f0a",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78783531b7cc90c6f405dd9c62807be835d4c74f/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78783531b7cc90c6f405dd9c62807be835d4c74f/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=78783531b7cc90c6f405dd9c62807be835d4c74f",
        "patch": "@@ -684,8 +684,7 @@ class CCoinsViewMemPool : public CCoinsViewBacked\n \n public:\n     CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn);\n-    bool GetCoin(const COutPoint &outpoint, Coin &coin) const;\n-    bool HaveCoin(const COutPoint &outpoint) const;\n+    bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;\n };\n \n /**"
      }
    ]
  },
  {
    "sha": "1680ee0edf46aa22c4d00c8ff4f3d0bcc235bc68",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjgwZWUwZWRmNDZhYTIyYzRkMDBjOGZmNGYzZDBiY2MyMzViYzY4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-27T09:33:32Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-27T09:34:15Z"
      },
      "message": "Merge #10400: [RPC] Add an uptime command that displays the amount of time (in seconds) bitcoind has been running\n\nc074752 [RPC] Add an uptime command that displays the amount of time that bitcoind has been running (Ricardo Velhote)\n\nTree-SHA512: 8f59d4205042885f23f5b87a0eae0f5d386e9c6134e5324598e7ee304728d4275f383cd154bf1fb25350f5a88cc0ed9f97edb099e9b50c4a0ba72d63ec5ca5b4",
      "tree": {
        "sha": "81a3e57d6a9c6870b5436283a0276d86e751c484",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81a3e57d6a9c6870b5436283a0276d86e751c484"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1680ee0edf46aa22c4d00c8ff4f3d0bcc235bc68",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZUiaXAAoJEB5K7WKYbNJd1s0IAI9efGn03nEBiMWW7gHPHg53\no1fhEKKQaOjmhRhFAZFXGL0zLRPIkL4BCLbt1rLtfjLo9OumC2Wry9Fqro6xMsFA\nq9fYcXEJ/CbxDjwzPnjmfk1kbbqodjWJOpbk0oiquEku3cKZZw2Gqx8F9cvb4Mq0\npXGxrlTh/8pynU+yJcCziZ6fm8iKpb+6NWplARww/JKnwvKB2KiSFYagkEtxdmP9\nFSiMgem6idyhhZ7MAp+whT12uPP7htuhGHxQxGVf+1lLClU82FgbsuiI+bvZ7C8W\nAUG9IjLmq2/QAE7XOmclt4S8nGu5uoaHiGhrWP7KXkgOXp9rwHMBXI9Y5aXVxik=\n=fOKx\n-----END PGP SIGNATURE-----",
        "payload": "tree 81a3e57d6a9c6870b5436283a0276d86e751c484\nparent 78783531b7cc90c6f405dd9c62807be835d4c74f\nparent c07475294ae2c60f1dcc394922838b1f1f57b476\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1498556012 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1498556055 +0200\n\nMerge #10400: [RPC] Add an uptime command that displays the amount of time (in seconds) bitcoind has been running\n\nc074752 [RPC] Add an uptime command that displays the amount of time that bitcoind has been running (Ricardo Velhote)\n\nTree-SHA512: 8f59d4205042885f23f5b87a0eae0f5d386e9c6134e5324598e7ee304728d4275f383cd154bf1fb25350f5a88cc0ed9f97edb099e9b50c4a0ba72d63ec5ca5b4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1680ee0edf46aa22c4d00c8ff4f3d0bcc235bc68",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1680ee0edf46aa22c4d00c8ff4f3d0bcc235bc68",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1680ee0edf46aa22c4d00c8ff4f3d0bcc235bc68/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "78783531b7cc90c6f405dd9c62807be835d4c74f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78783531b7cc90c6f405dd9c62807be835d4c74f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/78783531b7cc90c6f405dd9c62807be835d4c74f"
      },
      {
        "sha": "c07475294ae2c60f1dcc394922838b1f1f57b476",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c07475294ae2c60f1dcc394922838b1f1f57b476",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c07475294ae2c60f1dcc394922838b1f1f57b476"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 63,
      "deletions": 3
    },
    "files": [
      {
        "sha": "33f4535ee22a56e13d063c005eb63ebe7f7cfb3e",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1680ee0edf46aa22c4d00c8ff4f3d0bcc235bc68/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1680ee0edf46aa22c4d00c8ff4f3d0bcc235bc68/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=1680ee0edf46aa22c4d00c8ff4f3d0bcc235bc68",
        "patch": "@@ -26,7 +26,6 @@\n \n class CBlockIndex;\n \n-static const int64_t nClientStartupTime = GetTime();\n static int64_t nLastHeaderTipUpdateNotification = 0;\n static int64_t nLastBlockTipUpdateNotification = 0;\n \n@@ -238,7 +237,7 @@ bool ClientModel::isReleaseVersion() const\n \n QString ClientModel::formatClientStartupTime() const\n {\n-    return QDateTime::fromTime_t(nClientStartupTime).toString();\n+    return QDateTime::fromTime_t(GetStartupTime()).toString();\n }\n \n QString ClientModel::dataDir() const"
      },
      {
        "sha": "c320d20453f24adcf4790789cca3af84a2208d6b",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1680ee0edf46aa22c4d00c8ff4f3d0bcc235bc68/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1680ee0edf46aa22c4d00c8ff4f3d0bcc235bc68/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=1680ee0edf46aa22c4d00c8ff4f3d0bcc235bc68",
        "patch": "@@ -258,6 +258,22 @@ UniValue stop(const JSONRPCRequest& jsonRequest)\n     return \"Bitcoin server stopping\";\n }\n \n+UniValue uptime(const JSONRPCRequest& jsonRequest)\n+{\n+    if (jsonRequest.fHelp || jsonRequest.params.size() > 1)\n+        throw std::runtime_error(\n+                \"uptime\\n\"\n+                        \"\\nReturns the total uptime of the server.\\n\"\n+                        \"\\nResult:\\n\"\n+                        \"ttt        (numeric) The number of seconds that the server has been running\\n\"\n+                        \"\\nExamples:\\n\"\n+                + HelpExampleCli(\"uptime\", \"\")\n+                + HelpExampleRpc(\"uptime\", \"\")\n+        );\n+\n+    return GetTime() - GetStartupTime();\n+}\n+\n /**\n  * Call Table\n  */\n@@ -267,6 +283,7 @@ static const CRPCCommand vRPCCommands[] =\n     /* Overall control/query calls */\n     { \"control\",            \"help\",                   &help,                   true,  {\"command\"}  },\n     { \"control\",            \"stop\",                   &stop,                   true,  {}  },\n+    { \"control\",            \"uptime\",                 &uptime,                 true,  {}  },\n };\n \n CRPCTable::CRPCTable()"
      },
      {
        "sha": "0e1464e590c1b79c8374b3f47f3cbe57b0c4c286",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1680ee0edf46aa22c4d00c8ff4f3d0bcc235bc68/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1680ee0edf46aa22c4d00c8ff4f3d0bcc235bc68/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=1680ee0edf46aa22c4d00c8ff4f3d0bcc235bc68",
        "patch": "@@ -84,6 +84,8 @@\n #include <openssl/rand.h>\n #include <openssl/conf.h>\n \n+// Application startup time (used for uptime calculation)\n+const int64_t nStartupTime = GetTime();\n \n const char * const BITCOIN_CONF_FILENAME = \"bitcoin.conf\";\n const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n@@ -889,3 +891,9 @@ std::string CopyrightHolders(const std::string& strPrefix)\n     }\n     return strCopyrightHolders;\n }\n+\n+// Obtain the application startup time (used for uptime calculation)\n+int64_t GetStartupTime()\n+{\n+    return nStartupTime;\n+}"
      },
      {
        "sha": "824ad51ac48a08d780db2402d0a037a5bf20f0c7",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1680ee0edf46aa22c4d00c8ff4f3d0bcc235bc68/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1680ee0edf46aa22c4d00c8ff4f3d0bcc235bc68/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=1680ee0edf46aa22c4d00c8ff4f3d0bcc235bc68",
        "patch": "@@ -5,7 +5,7 @@\n \n /**\n  * Server/client environment: argument handling, config file parsing,\n- * logging, thread wrappers\n+ * logging, thread wrappers, startup time\n  */\n #ifndef BITCOIN_UTIL_H\n #define BITCOIN_UTIL_H\n@@ -29,6 +29,9 @@\n \n #include <boost/signals2/signal.hpp>\n \n+// Application startup time (used for uptime calculation)\n+int64_t GetStartupTime();\n+\n static const bool DEFAULT_LOGTIMEMICROS = false;\n static const bool DEFAULT_LOGIPS        = false;\n static const bool DEFAULT_LOGTIMESTAMPS = true;"
      },
      {
        "sha": "4c7eea67d52540a2ca333831c3cf9ceacfc9ec31",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1680ee0edf46aa22c4d00c8ff4f3d0bcc235bc68/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1680ee0edf46aa22c4d00c8ff4f3d0bcc235bc68/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=1680ee0edf46aa22c4d00c8ff4f3d0bcc235bc68",
        "patch": "@@ -113,6 +113,7 @@\n     'listsinceblock.py',\n     'p2p-leaktests.py',\n     'wallet-encryption.py',\n+    'uptime.py',\n ]\n \n EXTENDED_SCRIPTS = ["
      },
      {
        "sha": "b20d6f5cb62bfe755905bf89d06720fd67390881",
        "filename": "test/functional/uptime.py",
        "status": "added",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1680ee0edf46aa22c4d00c8ff4f3d0bcc235bc68/test/functional/uptime.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1680ee0edf46aa22c4d00c8ff4f3d0bcc235bc68/test/functional/uptime.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/uptime.py?ref=1680ee0edf46aa22c4d00c8ff4f3d0bcc235bc68",
        "patch": "@@ -0,0 +1,32 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the RPC call related to the uptime command.\n+\n+Test corresponds to code in rpc/server.cpp.\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class UptimeTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self._test_uptime()\n+\n+    def _test_uptime(self):\n+        wait_time = 10\n+        self.nodes[0].setmocktime(int(time.time() + wait_time))\n+        assert(self.nodes[0].uptime() >= wait_time)\n+\n+\n+if __name__ == '__main__':\n+    UptimeTest().main()"
      }
    ]
  },
  {
    "sha": "7c87a9c748be7121a240d81f9a5c6c988be6ffcf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Yzg3YTljNzQ4YmU3MTIxYTI0MGQ4MWY5YTVjNmM5ODhiZTZmZmNm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-27T10:05:54Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-27T10:07:21Z"
      },
      "message": "Merge #10612: The young person's guide to the test_framework\n\ne7ba6c1 [tests] add example test (John Newbery)\n76859e6 [tests] Update functional tests documentation (John Newbery)\n\nTree-SHA512: 74eb464e965e16466f95b9eda7d1e89a31ef1ef204dd30e1b11ddf482336f12f33fa5ca3cc733b6eaf440c46401e663585af9caca202deddb440bbadce964a62",
      "tree": {
        "sha": "3ff30c3fe322ccd7811f990b92b11db642792e6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ff30c3fe322ccd7811f990b92b11db642792e6e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c87a9c748be7121a240d81f9a5c6c988be6ffcf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZUi5ZAAoJEB5K7WKYbNJdPYkIAM6Pz4m3dx7gbv+oZYCItqN1\nHUN6EukUkIYm5vY7CxiZwoy3gpiJ1eAcrg603/Io545eK8swFT9e0LEwyKcSxo4X\noc+JP2v3u3HYhNTzGMB9WdzFLcU6F/g0zQONAdhV4zP/J7g/rGQChOJyq/xNQC0P\n3EnG9y8ve5RxYHAOnY+UMz8zsU1/Z5/ZvCOW2JcU1bJocezvmdzauJ6qRDSyOQFW\n8uYr8QwzOerBBiCrd/wvOjHor3ewv71dMaGqyyFDElyOj6ORATE7DeIDoCJNHBf5\nohrItFNSGMuWB2ICmxdQmnM3p9WlhDe5DnyceDp46r1CPyctlZPaAt+n0Wpnz4g=\n=QLjL\n-----END PGP SIGNATURE-----",
        "payload": "tree 3ff30c3fe322ccd7811f990b92b11db642792e6e\nparent 1680ee0edf46aa22c4d00c8ff4f3d0bcc235bc68\nparent e7ba6c16b34443cf0774d707d9918ebc9835d6ca\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1498557954 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1498558041 +0200\n\nMerge #10612: The young person's guide to the test_framework\n\ne7ba6c1 [tests] add example test (John Newbery)\n76859e6 [tests] Update functional tests documentation (John Newbery)\n\nTree-SHA512: 74eb464e965e16466f95b9eda7d1e89a31ef1ef204dd30e1b11ddf482336f12f33fa5ca3cc733b6eaf440c46401e663585af9caca202deddb440bbadce964a62\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c87a9c748be7121a240d81f9a5c6c988be6ffcf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7c87a9c748be7121a240d81f9a5c6c988be6ffcf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c87a9c748be7121a240d81f9a5c6c988be6ffcf/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1680ee0edf46aa22c4d00c8ff4f3d0bcc235bc68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1680ee0edf46aa22c4d00c8ff4f3d0bcc235bc68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1680ee0edf46aa22c4d00c8ff4f3d0bcc235bc68"
      },
      {
        "sha": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e7ba6c16b34443cf0774d707d9918ebc9835d6ca"
      }
    ],
    "stats": {
      "total": 548,
      "additions": 441,
      "deletions": 107
    },
    "files": [
      {
        "sha": "15f6df790f9ba6142baf85319dcec6cc52d2119d",
        "filename": "test/README.md",
        "status": "modified",
        "additions": 111,
        "deletions": 43,
        "changes": 154,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c87a9c748be7121a240d81f9a5c6c988be6ffcf/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c87a9c748be7121a240d81f9a5c6c988be6ffcf/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/README.md?ref=7c87a9c748be7121a240d81f9a5c6c988be6ffcf",
        "patch": "@@ -15,84 +15,152 @@ The util tests are run as part of `make check` target. The functional\n tests are run by the travis continuous build process whenever a pull\n request is opened. Both sets of tests can also be run locally.\n \n-Functional Test dependencies\n-============================\n+# Running tests locally\n+\n+Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+\n+### Functional tests\n+\n+#### Dependencies\n+\n The ZMQ functional test requires a python ZMQ library. To install it:\n \n - on Unix, run `sudo apt-get install python3-zmq`\n - on mac OS, run `pip3 install pyzmq`\n \n-Running tests locally\n-=====================\n+#### Running the tests\n \n-Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+Individual tests can be run by directly calling the test script, eg:\n \n-Functional tests\n-----------------\n+```\n+test/functional/replace-by-fee.py\n+```\n \n-You can run any single test by calling\n+or can be run through the test_runner harness, eg:\n \n-    test/functional/test_runner.py <testname>\n+```\n+test/functional/test_runner.py replace-by-fee.py\n+```\n \n-Or you can run any combination (incl. duplicates) of tests by calling\n+You can run any combination (incl. duplicates) of tests by calling:\n \n-    test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n+```\n+test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n+```\n \n-Run the regression test suite with\n+Run the regression test suite with:\n \n-    test/functional/test_runner.py\n+```\n+test/functional/test_runner.py\n+```\n \n Run all possible tests with\n \n-    test/functional/test_runner.py --extended\n+```\n+test/functional/test_runner.py --extended\n+```\n+\n+By default, up to 4 tests will be run in parallel by test_runner. To specify\n+how many jobs to run, append `--jobs=n`\n \n-By default, tests will be run in parallel. To specify how many jobs to run,\n-append `--jobs=n` (default n=4).\n+The individual tests and the test_runner harness have many command-line\n+options. Run `test_runner.py -h` to see them all.\n \n-If you want to create a basic coverage report for the RPC test suite, append `--coverage`.\n+#### Troubleshooting and debugging test failures\n \n-Possible options, which apply to each individual test run:\n+##### Resource contention\n \n+The P2P and RPC ports used by the bitcoind nodes-under-test are chosen to make\n+conflicts with other processes unlikely. However, if there is another bitcoind\n+process running on the system (perhaps from a previous test which hasn't successfully\n+killed all its bitcoind nodes), then there may be a port conflict which will\n+cause the test to fail. It is recommended that you run the tests on a system\n+where no other bitcoind processes are running.\n+\n+On linux, the test_framework will warn if there is another\n+bitcoind process running when the tests are started.\n+\n+If there are zombie bitcoind processes after test failure, you can kill them\n+by running the following commands. **Note that these commands will kill all\n+bitcoind processes running on the system, so should not be used if any non-test\n+bitcoind processes are being run.**\n+\n+```bash\n+killall bitcoind\n ```\n-  -h, --help            show this help message and exit\n-  --nocleanup           Leave bitcoinds and test.* datadir on exit or error\n-  --noshutdown          Don't stop bitcoinds after the test execution\n-  --srcdir=SRCDIR       Source directory containing bitcoind/bitcoin-cli\n-                        (default: ../../src)\n-  --tmpdir=TMPDIR       Root directory for datadirs\n-  --tracerpc            Print out all RPC calls as they are made\n-  --coveragedir=COVERAGEDIR\n-                        Write tested RPC commands into this directory\n-```\n \n-If you set the environment variable `PYTHON_DEBUG=1` you will get some debug\n-output (example: `PYTHON_DEBUG=1 test/functional/test_runner.py wallet`).\n+or\n+\n+```bash\n+pkill -9 bitcoind\n+```\n \n-A 200-block -regtest blockchain and wallets for four nodes\n-is created the first time a regression test is run and\n-is stored in the cache/ directory. Each node has 25 mature\n-blocks (25*50=1250 BTC) in its wallet.\n \n-After the first run, the cache/ blockchain and wallets are\n-copied into a temporary directory and used as the initial\n-test state.\n+##### Data directory cache\n \n-If you get into a bad state, you should be able\n-to recover with:\n+A pre-mined blockchain with 200 blocks is generated the first time a\n+functional test is run and is stored in test/cache. This speeds up\n+test startup times since new blockchains don't need to be generated for\n+each test. However, the cache may get into a bad state, in which case\n+tests will fail. If this happens, remove the cache directory (and make\n+sure bitcoind processes are stopped as above):\n \n ```bash\n rm -rf cache\n killall bitcoind\n ```\n \n-Util tests\n-----------\n+##### Test logging\n+\n+The tests contain logging at different levels (debug, info, warning, etc). By\n+default:\n+\n+- when run through the test_runner harness, *all* logs are written to\n+  `test_framework.log` and no logs are output to the console.\n+- when run directly, *all* logs are written to `test_framework.log` and INFO\n+  level and above are output to the console.\n+- when run on Travis, no logs are output to the console. However, if a test\n+  fails, the `test_framework.log` and bitcoind `debug.log`s will all be dumped\n+  to the console to help troubleshooting.\n+\n+To change the level of logs output to the console, use the `-l` command line\n+argument.\n+\n+`test_framework.log` and bitcoind `debug.log`s can be combined into a single\n+aggregate log by running the `combine_logs.py` script. The output can be plain\n+text, colorized text or html. For example:\n+\n+```\n+combine_logs.py -c <test data directory> | less -r\n+```\n+\n+will pipe the colorized logs from the test into less.\n+\n+Use `--tracerpc` to trace out all the RPC calls and responses to the console. For\n+some tests (eg any that use `submitblock` to submit a full block over RPC),\n+this can result in a lot of screen output.\n+\n+By default, the test data directory will be deleted after a successful run.\n+Use `--nocleanup` to leave the test data directory intact. The test data\n+directory is never deleted after a failed test.\n+\n+##### Attaching a debugger\n+\n+A python debugger can be attached to tests at any point. Just add the line:\n+\n+```py\n+import pdb; pdb.set_trace()\n+```\n+\n+anywhere in the test. You will then be able to inspect variables, as well as\n+call methods that interact with the bitcoind nodes-under-test.\n+\n+### Util tests\n \n Util tests can be run locally by running `test/util/bitcoin-util-test.py`. \n Use the `-v` option for verbose output.\n \n-Writing functional tests\n-========================\n+# Writing functional tests\n \n You are encouraged to write functional tests for new or existing features.\n Further information about the functional test framework and individual "
      },
      {
        "sha": "96fe0beccea9c0b50bcdfb2e8064e72901878cd3",
        "filename": "test/functional/README.md",
        "status": "modified",
        "additions": 110,
        "deletions": 64,
        "changes": 174,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c87a9c748be7121a240d81f9a5c6c988be6ffcf/test/functional/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c87a9c748be7121a240d81f9a5c6c988be6ffcf/test/functional/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/README.md?ref=7c87a9c748be7121a240d81f9a5c6c988be6ffcf",
        "patch": "@@ -1,108 +1,154 @@\n-Regression tests\n-================\n+# Functional tests\n \n-### [test_framework/authproxy.py](test_framework/authproxy.py)\n-Taken from the [python-bitcoinrpc repository](https://github.com/jgarzik/python-bitcoinrpc).\n+### Writing Functional Tests\n \n-### [test_framework/test_framework.py](test_framework/test_framework.py)\n-Base class for new regression tests.\n+#### Example test\n \n-### [test_framework/util.py](test_framework/util.py)\n-Generally useful functions.\n+The [example_test.py](example_test.py) is a heavily commented example of a test case that uses both\n+the RPC and P2P interfaces. If you are writing your first test, copy that file\n+and modify to fit your needs.\n \n-### [test_framework/mininode.py](test_framework/mininode.py)\n-Basic code to support p2p connectivity to a bitcoind.\n+#### Coverage\n \n-### [test_framework/comptool.py](test_framework/comptool.py)\n-Framework for comparison-tool style, p2p tests.\n+Running `test_runner.py` with the `--coverage` argument tracks which RPCs are\n+called by the tests and prints a report of uncovered RPCs in the summary. This\n+can be used (along with the `--extended` argument) to find out which RPCs we\n+don't have test cases for.\n \n-### [test_framework/script.py](test_framework/script.py)\n-Utilities for manipulating transaction scripts (originally from python-bitcoinlib)\n+#### Style guidelines\n \n-### [test_framework/blockstore.py](test_framework/blockstore.py)\n-Implements disk-backed block and tx storage.\n+- Where possible, try to adhere to [PEP-8 guidelines]([https://www.python.org/dev/peps/pep-0008/)\n+- Use a python linter like flake8 before submitting PRs to catch common style\n+  nits (eg trailing whitespace, unused imports, etc)\n+- Avoid wildcard imports where possible\n+- Use a module-level docstring to describe what the test is testing, and how it\n+  is testing it.\n+- When subclassing the BitcoinTestFramwork, place overrides for the\n+  `__init__()`, and `setup_xxxx()` methods at the top of the subclass, then\n+  locally-defined helper methods, then the `run_test()` method.\n \n-### [test_framework/key.py](test_framework/key.py)\n-Wrapper around OpenSSL EC_Key (originally from python-bitcoinlib)\n+#### General test-writing advice\n \n-### [test_framework/bignum.py](test_framework/bignum.py)\n-Helpers for script.py\n+- Set `self.num_nodes` to the minimum number of nodes necessary for the test.\n+  Having additional unrequired nodes adds to the execution time of the test as\n+  well as memory/CPU/disk requirements (which is important when running tests in\n+  parallel or on Travis).\n+- Avoid stop-starting the nodes multiple times during the test if possible. A\n+  stop-start takes several seconds, so doing it several times blows up the\n+  runtime of the test.\n+- Set the `self.setup_clean_chain` variable in `__init__()` to control whether\n+  or not to use the cached data directories. The cached data directories\n+  contain a 200-block pre-mined blockchain and wallets for four nodes. Each node\n+  has 25 mature blocks (25x50=1250 BTC) in its wallet.\n+- When calling RPCs with lots of arguments, consider using named keyword\n+  arguments instead of positional arguments to make the intent of the call\n+  clear to readers.\n \n-### [test_framework/blocktools.py](test_framework/blocktools.py)\n-Helper functions for creating blocks and transactions.\n+#### RPC and P2P definitions\n \n-P2P test design notes\n----------------------\n+Test writers may find it helpful to refer to the definitions for the RPC and\n+P2P messages. These can be found in the following source files:\n \n-## Mininode\n+- `/src/rpc/*` for RPCs\n+- `/src/wallet/rpc*` for wallet RPCs\n+- `ProcessMessage()` in `/src/net_processing.cpp` for parsing P2P messages\n \n-* ```mininode.py``` contains all the definitions for objects that pass\n-over the network (```CBlock```, ```CTransaction```, etc, along with the network-level\n-wrappers for them, ```msg_block```, ```msg_tx```, etc).\n+#### Using the P2P interface\n \n-* P2P tests have two threads.  One thread handles all network communication\n+- `mininode.py` contains all the definitions for objects that pass\n+over the network (`CBlock`, `CTransaction`, etc, along with the network-level\n+wrappers for them, `msg_block`, `msg_tx`, etc).\n+\n+- P2P tests have two threads. One thread handles all network communication\n with the bitcoind(s) being tested (using python's asyncore package); the other\n implements the test logic.\n \n-* ```NodeConn``` is the class used to connect to a bitcoind.  If you implement\n-a callback class that derives from ```NodeConnCB``` and pass that to the\n-```NodeConn``` object, your code will receive the appropriate callbacks when\n+- `NodeConn` is the class used to connect to a bitcoind.  If you implement\n+a callback class that derives from `NodeConnCB` and pass that to the\n+`NodeConn` object, your code will receive the appropriate callbacks when\n events of interest arrive.\n \n-* You can pass the same handler to multiple ```NodeConn```'s if you like, or pass\n-different ones to each -- whatever makes the most sense for your test.\n-\n-* Call ```NetworkThread.start()``` after all ```NodeConn``` objects are created to\n+- Call `NetworkThread.start()` after all `NodeConn` objects are created to\n start the networking thread.  (Continue with the test logic in your existing\n thread.)\n \n-* RPC calls are available in p2p tests.\n+- Can be used to write tests where specific P2P protocol behavior is tested.\n+Examples tests are `p2p-accept-block.py`, `p2p-compactblocks.py`.\n \n-* Can be used to write free-form tests, where specific p2p-protocol behavior\n-is tested.  Examples: ```p2p-accept-block.py```, ```p2p-compactblocks.py```.\n+#### Comptool\n \n-## Comptool\n+- Comptool is a Testing framework for writing tests that compare the block/tx acceptance\n+behavior of a bitcoind against 1 or more other bitcoind instances. It should not be used\n+to write static tests with known outcomes, since that type of test is easier to write and\n+maintain using the standard BitcoinTestFramework.\n \n-* Testing framework for writing tests that compare the block/tx acceptance\n-behavior of a bitcoind against 1 or more other bitcoind instances, or against\n-known outcomes, or both.\n-\n-* Set the ```num_nodes``` variable (defined in ```ComparisonTestFramework```) to start up\n-1 or more nodes.  If using 1 node, then ```--testbinary``` can be used as a command line\n+- Set the `num_nodes` variable (defined in `ComparisonTestFramework`) to start up\n+1 or more nodes.  If using 1 node, then `--testbinary` can be used as a command line\n option to change the bitcoind binary used by the test.  If using 2 or more nodes,\n-then ```--refbinary``` can be optionally used to change the bitcoind that will be used\n+then `--refbinary` can be optionally used to change the bitcoind that will be used\n on nodes 2 and up.\n \n-* Implement a (generator) function called ```get_tests()``` which yields ```TestInstance```s.\n-Each ```TestInstance``` consists of:\n-  - a list of ```[object, outcome, hash]``` entries\n-    * ```object``` is a ```CBlock```, ```CTransaction```, or\n-    ```CBlockHeader```.  ```CBlock```'s and ```CTransaction```'s are tested for\n-    acceptance.  ```CBlockHeader```s can be used so that the test runner can deliver\n+- Implement a (generator) function called `get_tests()` which yields `TestInstance`s.\n+Each `TestInstance` consists of:\n+  - a list of `[object, outcome, hash]` entries\n+    * `object` is a `CBlock`, `CTransaction`, or\n+    `CBlockHeader`.  `CBlock`'s and `CTransaction`'s are tested for\n+    acceptance.  `CBlockHeader`s can be used so that the test runner can deliver\n     complete headers-chains when requested from the bitcoind, to allow writing\n     tests where blocks can be delivered out of order but still processed by\n     headers-first bitcoind's.\n-    * ```outcome``` is ```True```, ```False```, or ```None```.  If ```True```\n-    or ```False```, the tip is compared with the expected tip -- either the\n+    * `outcome` is `True`, `False`, or `None`.  If `True`\n+    or `False`, the tip is compared with the expected tip -- either the\n     block passed in, or the hash specified as the optional 3rd entry.  If\n-    ```None``` is specified, then the test will compare all the bitcoind's\n+    `None` is specified, then the test will compare all the bitcoind's\n     being tested to see if they all agree on what the best tip is.\n-    * ```hash``` is the block hash of the tip to compare against. Optional to\n+    * `hash` is the block hash of the tip to compare against. Optional to\n     specify; if left out then the hash of the block passed in will be used as\n     the expected tip.  This allows for specifying an expected tip while testing\n     the handling of either invalid blocks or blocks delivered out of order,\n     which complete a longer chain.\n-  - ```sync_every_block```: ```True/False```.  If ```False```, then all blocks\n+  - `sync_every_block`: `True/False`.  If `False`, then all blocks\n     are inv'ed together, and the test runner waits until the node receives the\n     last one, and tests only the last block for tip acceptance using the\n-    outcome and specified tip.  If ```True```, then each block is tested in\n+    outcome and specified tip.  If `True`, then each block is tested in\n     sequence and synced (this is slower when processing many blocks).\n-  - ```sync_every_transaction```: ```True/False```.  Analogous to\n-    ```sync_every_block```, except if the outcome on the last tx is \"None\",\n+  - `sync_every_transaction`: `True/False`.  Analogous to\n+    `sync_every_block`, except if the outcome on the last tx is \"None\",\n     then the contents of the entire mempool are compared across all bitcoind\n-    connections.  If ```True``` or ```False```, then only the last tx's\n+    connections.  If `True` or `False`, then only the last tx's\n     acceptance is tested against the given outcome.\n \n-* For examples of tests written in this framework, see\n-  ```invalidblockrequest.py``` and ```p2p-fullblocktest.py```.\n+- For examples of tests written in this framework, see\n+  `invalidblockrequest.py` and `p2p-fullblocktest.py`.\n+\n+### test-framework modules\n+\n+#### [test_framework/authproxy.py](test_framework/authproxy.py)\n+Taken from the [python-bitcoinrpc repository](https://github.com/jgarzik/python-bitcoinrpc).\n+\n+#### [test_framework/test_framework.py](test_framework/test_framework.py)\n+Base class for functional tests.\n \n+#### [test_framework/util.py](test_framework/util.py)\n+Generally useful functions.\n+\n+#### [test_framework/mininode.py](test_framework/mininode.py)\n+Basic code to support P2P connectivity to a bitcoind.\n+\n+#### [test_framework/comptool.py](test_framework/comptool.py)\n+Framework for comparison-tool style, P2P tests.\n+\n+#### [test_framework/script.py](test_framework/script.py)\n+Utilities for manipulating transaction scripts (originally from python-bitcoinlib)\n+\n+#### [test_framework/blockstore.py](test_framework/blockstore.py)\n+Implements disk-backed block and tx storage.\n+\n+#### [test_framework/key.py](test_framework/key.py)\n+Wrapper around OpenSSL EC_Key (originally from python-bitcoinlib)\n+\n+#### [test_framework/bignum.py](test_framework/bignum.py)\n+Helpers for script.py\n+\n+#### [test_framework/blocktools.py](test_framework/blocktools.py)\n+Helper functions for creating blocks and transactions."
      },
      {
        "sha": "1ba5f756cd4a05cd4f7388ffad125b0f899bceef",
        "filename": "test/functional/example_test.py",
        "status": "added",
        "additions": 219,
        "deletions": 0,
        "changes": 219,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c87a9c748be7121a240d81f9a5c6c988be6ffcf/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c87a9c748be7121a240d81f9a5c6c988be6ffcf/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=7c87a9c748be7121a240d81f9a5c6c988be6ffcf",
        "patch": "@@ -0,0 +1,219 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"An example functional test\n+\n+The module-level docstring should include a high-level description of\n+what the test is doing. It's the first thing people see when they open\n+the file and should give the reader information about *what* the test\n+is testing and *how* it's being tested\n+\"\"\"\n+# Imports should be in PEP8 ordering (std library first, then third party\n+# libraries then local imports).\n+from collections import defaultdict\n+\n+# Avoid wildcard * imports if possible\n+from test_framework.blocktools import (create_block, create_coinbase)\n+from test_framework.mininode import (\n+    CInv,\n+    NetworkThread,\n+    NodeConn,\n+    NodeConnCB,\n+    mininode_lock,\n+    msg_block,\n+    msg_getdata,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    p2p_port,\n+)\n+\n+# NodeConnCB is a class containing callbacks to be executed when a P2P\n+# message is received from the node-under-test. Subclass NodeConnCB and\n+# override the on_*() methods if you need custom behaviour.\n+class BaseNode(NodeConnCB):\n+    def __init__(self):\n+        \"\"\"Initialize the NodeConnCB\n+\n+        Used to inialize custom properties for the Node that aren't\n+        included by default in the base class. Be aware that the NodeConnCB\n+        base class already stores a counter for each P2P message type and the\n+        last received message of each type, which should be sufficient for the\n+        needs of most tests.\n+\n+        Call super().__init__() first for standard initialization and then\n+        initialize custom properties.\"\"\"\n+        super().__init__()\n+        # Stores a dictionary of all blocks received\n+        self.block_receive_map = defaultdict(int)\n+\n+    def on_block(self, conn, message):\n+        \"\"\"Override the standard on_block callback\n+\n+        Store the hash of a received block in the dictionary.\"\"\"\n+        message.block.calc_sha256()\n+        self.block_receive_map[message.block.sha256] += 1\n+\n+def custom_function():\n+    \"\"\"Do some custom behaviour\n+\n+    If this function is more generally useful for other tests, consider\n+    moving it to a module in test_framework.\"\"\"\n+    # self.log.info(\"running custom_function\")  # Oops! Can't run self.log outside the BitcoinTestFramework\n+    pass\n+\n+class ExampleTest(BitcoinTestFramework):\n+    # Each functional test is a subclass of the BitcoinTestFramework class.\n+\n+    # Override the __init__(), add_options(), setup_chain(), setup_network()\n+    # and setup_nodes() methods to customize the test setup as required.\n+\n+    def __init__(self):\n+        \"\"\"Initialize the test\n+\n+        Call super().__init__() first, and then override any test parameters\n+        for your individual test.\"\"\"\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+        # Use self.extra_args to change command-line arguments for the nodes\n+        self.extra_args = [[], [\"-logips\"], []]\n+\n+        # self.log.info(\"I've finished __init__\")  # Oops! Can't run self.log before run_test()\n+\n+    # Use add_options() to add specific command-line options for your test.\n+    # In practice this is not used very much, since the tests are mostly written\n+    # to be run in automated environments without command-line options.\n+    # def add_options()\n+    #     pass\n+\n+    # Use setup_chain() to customize the node data directories. In practice\n+    # this is not used very much since the default behaviour is almost always\n+    # fine\n+    # def setup_chain():\n+    #     pass\n+\n+    def setup_network(self):\n+        \"\"\"Setup the test network topology\n+\n+        Often you won't need to override this, since the standard network topology\n+        (linear: node0 <-> node1 <-> node2 <-> ...) is fine for most tests.\n+\n+        If you do override this method, remember to start the nodes, assign\n+        them to self.nodes, connect them and then sync.\"\"\"\n+\n+        self.setup_nodes()\n+\n+        # In this test, we're not connecting node2 to node0 or node1. Calls to\n+        # sync_all() should not include node2, since we're not expecting it to\n+        # sync.\n+        connect_nodes(self.nodes[0], 1)\n+        self.sync_all([self.nodes[0:1]])\n+\n+    # Use setup_nodes() to customize the node start behaviour (for example if\n+    # you don't want to start all nodes at the start of the test).\n+    # def setup_nodes():\n+    #     pass\n+\n+    def custom_method(self):\n+        \"\"\"Do some custom behaviour for this test\n+\n+        Define it in a method here because you're going to use it repeatedly.\n+        If you think it's useful in general, consider moving it to the base\n+        BitcoinTestFramework class so other tests can use it.\"\"\"\n+\n+        self.log.info(\"Running custom_method\")\n+\n+    def run_test(self):\n+        \"\"\"Main test logic\"\"\"\n+\n+        # Create a P2P connection to one of the nodes\n+        node0 = BaseNode()\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], node0))\n+        node0.add_connection(connections[0])\n+\n+        # Start up network handling in another thread. This needs to be called\n+        # after the P2P connections have been created.\n+        NetworkThread().start()\n+        # wait_for_verack ensures that the P2P connection is fully up.\n+        node0.wait_for_verack()\n+\n+        # Generating a block on one of the nodes will get us out of IBD\n+        blocks = [int(self.nodes[0].generate(nblocks=1)[0], 16)]\n+        self.sync_all([self.nodes[0:1]])\n+\n+        # Notice above how we called an RPC by calling a method with the same\n+        # name on the node object. Notice also how we used a keyword argument\n+        # to specify a named RPC argument. Neither of those are defined on the\n+        # node object. Instead there's some __getattr__() magic going on under\n+        # the covers to dispatch unrecognised attribute calls to the RPC\n+        # interface.\n+\n+        # Logs are nice. Do plenty of them. They can be used in place of comments for\n+        # breaking the test into sub-sections.\n+        self.log.info(\"Starting test!\")\n+\n+        self.log.info(\"Calling a custom function\")\n+        custom_function()\n+\n+        self.log.info(\"Calling a custom method\")\n+        self.custom_method()\n+\n+        self.log.info(\"Create some blocks\")\n+        self.tip = int(self.nodes[0].getbestblockhash(), 16)\n+        self.block_time = self.nodes[0].getblock(self.nodes[0].getbestblockhash())['time'] + 1\n+\n+        height = 1\n+\n+        for i in range(10):\n+            # Use the mininode and blocktools functionality to manually build a block\n+            # Calling the generate() rpc is easier, but this allows us to exactly\n+            # control the blocks and transactions.\n+            block = create_block(self.tip, create_coinbase(height), self.block_time)\n+            block.solve()\n+            block_message = msg_block(block)\n+            # Send message is used to send a P2P message to the node over our NodeConn connection\n+            node0.send_message(block_message)\n+            self.tip = block.sha256\n+            blocks.append(self.tip)\n+            self.block_time += 1\n+            height += 1\n+\n+        self.log.info(\"Wait for node1 to reach current tip (height 11) using RPC\")\n+        self.nodes[1].waitforblockheight(11)\n+\n+        self.log.info(\"Connect node2 and node1\")\n+        connect_nodes(self.nodes[1], 2)\n+\n+        self.log.info(\"Add P2P connection to node2\")\n+        node2 = BaseNode()\n+        connections.append(NodeConn('127.0.0.1', p2p_port(2), self.nodes[2], node2))\n+        node2.add_connection(connections[1])\n+        node2.wait_for_verack()\n+\n+        self.log.info(\"Wait for node2 reach current tip. Test that it has propogated all the blocks to us\")\n+\n+        for block in blocks:\n+            getdata_request = msg_getdata()\n+            getdata_request.inv.append(CInv(2, block))\n+            node2.send_message(getdata_request)\n+\n+        # wait_until() will loop until a predicate condition is met. Use it to test properties of the\n+        # NodeConnCB objects.\n+        assert wait_until(lambda: sorted(blocks) == sorted(list(node2.block_receive_map.keys())), timeout=5)\n+\n+        self.log.info(\"Check that each block was received only once\")\n+        # The network thread uses a global lock on data access to the NodeConn objects when sending and receiving\n+        # messages. The test thread should acquire the global lock before accessing any NodeConn data to avoid locking\n+        # and synchronization issues. Note wait_until() acquires this global lock when testing the predicate.\n+        with mininode_lock:\n+            for block in node2.block_receive_map.values():\n+                assert_equal(block, 1)\n+\n+if __name__ == '__main__':\n+    ExampleTest().main()"
      },
      {
        "sha": "9952835951f7d24194d4f048e32278c0c2579e9d",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c87a9c748be7121a240d81f9a5c6c988be6ffcf/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c87a9c748be7121a240d81f9a5c6c988be6ffcf/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=7c87a9c748be7121a240d81f9a5c6c988be6ffcf",
        "patch": "@@ -139,6 +139,7 @@\n     'bip65-cltv-p2p.py',\n     'bipdersig-p2p.py',\n     'bipdersig.py',\n+    'example_test.py',\n     'getblocktemplate_proposals.py',\n     'txn_doublespend.py',\n     'txn_clone.py --mineblock',"
      }
    ]
  },
  {
    "sha": "fd9599b1358a314b073a9ca0a68ca8037915d91d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDk1OTliMTM1OGEzMTRiMDczYTljYTBhNjhjYTgwMzc5MTVkOTFk",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-06-26T20:02:51Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-06-27T13:06:39Z"
      },
      "message": "[qt] Avoid potential null pointer dereference in TransactionView::exportClicked()",
      "tree": {
        "sha": "3264ca782b36e1d5513113145b20663aebd82320",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3264ca782b36e1d5513113145b20663aebd82320"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd9599b1358a314b073a9ca0a68ca8037915d91d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd9599b1358a314b073a9ca0a68ca8037915d91d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd9599b1358a314b073a9ca0a68ca8037915d91d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd9599b1358a314b073a9ca0a68ca8037915d91d/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "234ffc677ee58591b139695bf92bbd6f504ee91a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/234ffc677ee58591b139695bf92bbd6f504ee91a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/234ffc677ee58591b139695bf92bbd6f504ee91a"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "43d6e8826ba6fe1699c3899995ead50c48ec0982",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd9599b1358a314b073a9ca0a68ca8037915d91d/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd9599b1358a314b073a9ca0a68ca8037915d91d/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=fd9599b1358a314b073a9ca0a68ca8037915d91d",
        "patch": "@@ -336,6 +336,10 @@ void TransactionView::changedAmount(const QString &amount)\n \n void TransactionView::exportClicked()\n {\n+    if (!model || !model->getOptionsModel()) {\n+        return;\n+    }\n+\n     // CSV is currently the only supported format\n     QString filename = GUIUtil::getSaveFileName(this,\n         tr(\"Export Transaction History\"), QString(),"
      }
    ]
  },
  {
    "sha": "ac52492cd22782d7b09c78c198fb6fd8eb1da57c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYzUyNDkyY2QyMjc4MmQ3YjA5Yzc4YzE5OGZiNmZkOGViMWRhNTdj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-27T12:22:54Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-27T14:29:11Z"
      },
      "message": "Merge #10118: Util: Remove redundant calls to argsGlobal.IsArgSet()\n\ned866ab Indentation after 'Remove redundant calls to gArgs.IsArgSet()' (Jorge Tim\u00f3n)\n506b700 Util: Remove redundant calls to gArgs.IsArgSet() (Jorge Tim\u00f3n)\n\nTree-SHA512: 4f97a0bf2a76c0f351a6343db62898cf057d745c848de00fa09465e870a120f28e0d836cafd6a047f4ec0da7ab671aebee43fa7410c9f0e66382edd1bb2009ba",
      "tree": {
        "sha": "e02f1da9e4323a3dcf37b829dcf87656983a0d4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e02f1da9e4323a3dcf37b829dcf87656983a0d4d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac52492cd22782d7b09c78c198fb6fd8eb1da57c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZUmu3AAoJEB5K7WKYbNJdzzoH/RQs5VFRUTFn9FJe6QQ4E7K2\nRGYZadqRLDqcMS2JVBiyhrUyGgtLMjvK8Mfs878V91q6KM/Pgn0y0BuePYatlAUd\nWVbk785i9JmMYuGS8/O5vL6/fKeERIJtX3bbnfLsqIFZ9d6/m2ht5hWeEfBEWXmI\ngwuP66k5pO4UNDMDCbIMmk1sxB875d9XXKtLr1yCAo5fDvjIOQysev+TAlQaNl8+\n/DxzaN+Nx3rNwpywY4RwZZ03yOaChwUfRYVCqHEhfRoXqSdS0ymvn+WPYiT8/lgW\nnIDBZenBVohGwEl9SZf8tgoLmMiCArZZ82LauObZiJAbANZZ62RuAdUV0RaBUxA=\n=3ZRO\n-----END PGP SIGNATURE-----",
        "payload": "tree e02f1da9e4323a3dcf37b829dcf87656983a0d4d\nparent 7c87a9c748be7121a240d81f9a5c6c988be6ffcf\nparent ed866ab923c01d9da2ddd067144e74978383e304\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1498566174 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1498573751 +0200\n\nMerge #10118: Util: Remove redundant calls to argsGlobal.IsArgSet()\n\ned866ab Indentation after 'Remove redundant calls to gArgs.IsArgSet()' (Jorge Tim\u00f3n)\n506b700 Util: Remove redundant calls to gArgs.IsArgSet() (Jorge Tim\u00f3n)\n\nTree-SHA512: 4f97a0bf2a76c0f351a6343db62898cf057d745c848de00fa09465e870a120f28e0d836cafd6a047f4ec0da7ab671aebee43fa7410c9f0e66382edd1bb2009ba\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac52492cd22782d7b09c78c198fb6fd8eb1da57c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ac52492cd22782d7b09c78c198fb6fd8eb1da57c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac52492cd22782d7b09c78c198fb6fd8eb1da57c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c87a9c748be7121a240d81f9a5c6c988be6ffcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c87a9c748be7121a240d81f9a5c6c988be6ffcf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c87a9c748be7121a240d81f9a5c6c988be6ffcf"
      },
      {
        "sha": "ed866ab923c01d9da2ddd067144e74978383e304",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed866ab923c01d9da2ddd067144e74978383e304",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed866ab923c01d9da2ddd067144e74978383e304"
      }
    ],
    "stats": {
      "total": 175,
      "additions": 77,
      "deletions": 98
    },
    "files": [
      {
        "sha": "497e565b1efa32b433364a43d3683a384eb8896f",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 28,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac52492cd22782d7b09c78c198fb6fd8eb1da57c/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac52492cd22782d7b09c78c198fb6fd8eb1da57c/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=ac52492cd22782d7b09c78c198fb6fd8eb1da57c",
        "patch": "@@ -92,35 +92,32 @@ static bool multiUserAuthorized(std::string strUserPass)\n     std::string strUser = strUserPass.substr(0, strUserPass.find(\":\"));\n     std::string strPass = strUserPass.substr(strUserPass.find(\":\") + 1);\n \n-    if (gArgs.IsArgSet(\"-rpcauth\")) {\n+    for (const std::string& strRPCAuth : gArgs.GetArgs(\"-rpcauth\")) {\n         //Search for multi-user login/pass \"rpcauth\" from config\n-        for (std::string strRPCAuth : gArgs.GetArgs(\"-rpcauth\"))\n-        {\n-            std::vector<std::string> vFields;\n-            boost::split(vFields, strRPCAuth, boost::is_any_of(\":$\"));\n-            if (vFields.size() != 3) {\n-                //Incorrect formatting in config file\n-                continue;\n-            }\n-\n-            std::string strName = vFields[0];\n-            if (!TimingResistantEqual(strName, strUser)) {\n-                continue;\n-            }\n-\n-            std::string strSalt = vFields[1];\n-            std::string strHash = vFields[2];\n-\n-            static const unsigned int KEY_SIZE = 32;\n-            unsigned char out[KEY_SIZE];\n-\n-            CHMAC_SHA256(reinterpret_cast<const unsigned char*>(strSalt.c_str()), strSalt.size()).Write(reinterpret_cast<const unsigned char*>(strPass.c_str()), strPass.size()).Finalize(out);\n-            std::vector<unsigned char> hexvec(out, out+KEY_SIZE);\n-            std::string strHashFromPass = HexStr(hexvec);\n-\n-            if (TimingResistantEqual(strHashFromPass, strHash)) {\n-                return true;\n-            }\n+        std::vector<std::string> vFields;\n+        boost::split(vFields, strRPCAuth, boost::is_any_of(\":$\"));\n+        if (vFields.size() != 3) {\n+            //Incorrect formatting in config file\n+            continue;\n+        }\n+\n+        std::string strName = vFields[0];\n+        if (!TimingResistantEqual(strName, strUser)) {\n+            continue;\n+        }\n+\n+        std::string strSalt = vFields[1];\n+        std::string strHash = vFields[2];\n+\n+        static const unsigned int KEY_SIZE = 32;\n+        unsigned char out[KEY_SIZE];\n+\n+        CHMAC_SHA256(reinterpret_cast<const unsigned char*>(strSalt.c_str()), strSalt.size()).Write(reinterpret_cast<const unsigned char*>(strPass.c_str()), strPass.size()).Finalize(out);\n+        std::vector<unsigned char> hexvec(out, out+KEY_SIZE);\n+        std::string strHashFromPass = HexStr(hexvec);\n+\n+        if (TimingResistantEqual(strHashFromPass, strHash)) {\n+            return true;\n         }\n     }\n     return false;"
      },
      {
        "sha": "8841a4e9e72422599dcf84b90513912b9f31f070",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 11,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac52492cd22782d7b09c78c198fb6fd8eb1da57c/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac52492cd22782d7b09c78c198fb6fd8eb1da57c/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=ac52492cd22782d7b09c78c198fb6fd8eb1da57c",
        "patch": "@@ -196,18 +196,16 @@ static bool InitHTTPAllowList()\n     LookupHost(\"::1\", localv6, false);\n     rpc_allow_subnets.push_back(CSubNet(localv4, 8));      // always allow IPv4 local subnet\n     rpc_allow_subnets.push_back(CSubNet(localv6));         // always allow IPv6 localhost\n-    if (gArgs.IsArgSet(\"-rpcallowip\")) {\n-        for (const std::string& strAllow : gArgs.GetArgs(\"-rpcallowip\")) {\n-            CSubNet subnet;\n-            LookupSubNet(strAllow.c_str(), subnet);\n-            if (!subnet.IsValid()) {\n-                uiInterface.ThreadSafeMessageBox(\n-                    strprintf(\"Invalid -rpcallowip subnet specification: %s. Valid are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24).\", strAllow),\n-                    \"\", CClientUIInterface::MSG_ERROR);\n-                return false;\n-            }\n-            rpc_allow_subnets.push_back(subnet);\n+    for (const std::string& strAllow : gArgs.GetArgs(\"-rpcallowip\")) {\n+        CSubNet subnet;\n+        LookupSubNet(strAllow.c_str(), subnet);\n+        if (!subnet.IsValid()) {\n+            uiInterface.ThreadSafeMessageBox(\n+                strprintf(\"Invalid -rpcallowip subnet specification: %s. Valid are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24).\", strAllow),\n+                \"\", CClientUIInterface::MSG_ERROR);\n+            return false;\n         }\n+        rpc_allow_subnets.push_back(subnet);\n     }\n     std::string strAllowed;\n     for (const CSubNet& subnet : rpc_allow_subnets)"
      },
      {
        "sha": "57232c7df328ca5496ca2cb861dc4b3238855122",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 55,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac52492cd22782d7b09c78c198fb6fd8eb1da57c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac52492cd22782d7b09c78c198fb6fd8eb1da57c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ac52492cd22782d7b09c78c198fb6fd8eb1da57c",
        "patch": "@@ -880,9 +880,7 @@ bool AppInitParameterInteraction()\n     }\n \n     // -bind and -whitebind can't be set when not listening\n-    size_t nUserBind =\n-        (gArgs.IsArgSet(\"-bind\") ? gArgs.GetArgs(\"-bind\").size() : 0) +\n-        (gArgs.IsArgSet(\"-whitebind\") ? gArgs.GetArgs(\"-whitebind\").size() : 0);\n+    size_t nUserBind = gArgs.GetArgs(\"-bind\").size() + gArgs.GetArgs(\"-whitebind\").size();\n     if (nUserBind != 0 && !gArgs.GetBoolArg(\"-listen\", DEFAULT_LISTEN)) {\n         return InitError(\"Cannot set -bind or -whitebind together with -listen=0\");\n     }\n@@ -920,15 +918,13 @@ bool AppInitParameterInteraction()\n     }\n \n     // Now remove the logging categories which were explicitly excluded\n-    if (gArgs.IsArgSet(\"-debugexclude\")) {\n-        for (const std::string& cat : gArgs.GetArgs(\"-debugexclude\")) {\n-            uint32_t flag = 0;\n-            if (!GetLogCategory(&flag, &cat)) {\n-                InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debugexclude\", cat));\n-                continue;\n-            }\n-            logCategories &= ~flag;\n+    for (const std::string& cat : gArgs.GetArgs(\"-debugexclude\")) {\n+        uint32_t flag = 0;\n+        if (!GetLogCategory(&flag, &cat)) {\n+            InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debugexclude\", cat));\n+            continue;\n         }\n+        logCategories &= ~flag;\n     }\n \n     // Check for -debugnet\n@@ -1238,13 +1234,10 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // sanitize comments per BIP-0014, format user agent and check total size\n     std::vector<std::string> uacomments;\n-    if (gArgs.IsArgSet(\"-uacomment\")) {\n-        for (std::string cmt : gArgs.GetArgs(\"-uacomment\"))\n-        {\n-            if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n-                return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\"), cmt));\n-            uacomments.push_back(cmt);\n-        }\n+    for (const std::string& cmt : gArgs.GetArgs(\"-uacomment\")) {\n+        if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n+            return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\"), cmt));\n+        uacomments.push_back(cmt);\n     }\n     strSubVersion = FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, uacomments);\n     if (strSubVersion.size() > MAX_SUBVERSION_LENGTH) {\n@@ -1317,14 +1310,12 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fDiscover = GetBoolArg(\"-discover\", true);\n     fRelayTxes = !GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY);\n \n-    if (gArgs.IsArgSet(\"-externalip\")) {\n-        for (const std::string& strAddr : gArgs.GetArgs(\"-externalip\")) {\n-            CService addrLocal;\n-            if (Lookup(strAddr.c_str(), addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())\n-                AddLocal(addrLocal, LOCAL_MANUAL);\n-            else\n-                return InitError(ResolveErrMsg(\"externalip\", strAddr));\n-        }\n+    for (const std::string& strAddr : gArgs.GetArgs(\"-externalip\")) {\n+        CService addrLocal;\n+        if (Lookup(strAddr.c_str(), addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())\n+            AddLocal(addrLocal, LOCAL_MANUAL);\n+        else\n+            return InitError(ResolveErrMsg(\"externalip\", strAddr));\n     }\n \n #if ENABLE_ZMQ\n@@ -1553,10 +1544,8 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         uiInterface.NotifyBlockTip.connect(BlockNotifyCallback);\n \n     std::vector<fs::path> vImportFiles;\n-    if (gArgs.IsArgSet(\"-loadblock\"))\n-    {\n-        for (const std::string& strFile : gArgs.GetArgs(\"-loadblock\"))\n-            vImportFiles.push_back(strFile);\n+    for (const std::string& strFile : gArgs.GetArgs(\"-loadblock\")) {\n+        vImportFiles.push_back(strFile);\n     }\n \n     threadGroup.create_thread(boost::bind(&ThreadImport, vImportFiles));\n@@ -1598,36 +1587,30 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     connOptions.nMaxOutboundTimeframe = nMaxOutboundTimeframe;\n     connOptions.nMaxOutboundLimit = nMaxOutboundLimit;\n \n-    if (gArgs.IsArgSet(\"-bind\")) {\n-        for (const std::string& strBind : gArgs.GetArgs(\"-bind\")) {\n-            CService addrBind;\n-            if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false)) {\n-                return InitError(ResolveErrMsg(\"bind\", strBind));\n-            }\n-            connOptions.vBinds.push_back(addrBind);\n+    for (const std::string& strBind : gArgs.GetArgs(\"-bind\")) {\n+        CService addrBind;\n+        if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false)) {\n+            return InitError(ResolveErrMsg(\"bind\", strBind));\n         }\n+        connOptions.vBinds.push_back(addrBind);\n     }\n-    if (gArgs.IsArgSet(\"-whitebind\")) {\n-        for (const std::string& strBind : gArgs.GetArgs(\"-whitebind\")) {\n-            CService addrBind;\n-            if (!Lookup(strBind.c_str(), addrBind, 0, false)) {\n-                return InitError(ResolveErrMsg(\"whitebind\", strBind));\n-            }\n-            if (addrBind.GetPort() == 0) {\n-                return InitError(strprintf(_(\"Need to specify a port with -whitebind: '%s'\"), strBind));\n-            }\n-            connOptions.vWhiteBinds.push_back(addrBind);\n+    for (const std::string& strBind : gArgs.GetArgs(\"-whitebind\")) {\n+        CService addrBind;\n+        if (!Lookup(strBind.c_str(), addrBind, 0, false)) {\n+            return InitError(ResolveErrMsg(\"whitebind\", strBind));\n+        }\n+        if (addrBind.GetPort() == 0) {\n+            return InitError(strprintf(_(\"Need to specify a port with -whitebind: '%s'\"), strBind));\n         }\n+        connOptions.vWhiteBinds.push_back(addrBind);\n     }\n \n-    if (gArgs.IsArgSet(\"-whitelist\")) {\n-        for (const auto& net : gArgs.GetArgs(\"-whitelist\")) {\n-            CSubNet subnet;\n-            LookupSubNet(net.c_str(), subnet);\n-            if (!subnet.IsValid())\n-                return InitError(strprintf(_(\"Invalid netmask specified in -whitelist: '%s'\"), net));\n-            connOptions.vWhitelistedRange.push_back(subnet);\n-        }\n+    for (const auto& net : gArgs.GetArgs(\"-whitelist\")) {\n+        CSubNet subnet;\n+        LookupSubNet(net.c_str(), subnet);\n+        if (!subnet.IsValid())\n+            return InitError(strprintf(_(\"Invalid netmask specified in -whitelist: '%s'\"), net));\n+        connOptions.vWhitelistedRange.push_back(subnet);\n     }\n \n     if (gArgs.IsArgSet(\"-seednode\")) {"
      },
      {
        "sha": "301cf58b8705e4bda0de4f965be097cd7cfeb0d2",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac52492cd22782d7b09c78c198fb6fd8eb1da57c/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac52492cd22782d7b09c78c198fb6fd8eb1da57c/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ac52492cd22782d7b09c78c198fb6fd8eb1da57c",
        "patch": "@@ -1677,7 +1677,7 @@ void CConnman::ProcessOneShot()\n void CConnman::ThreadOpenConnections()\n {\n     // Connect to specific addresses\n-    if (gArgs.IsArgSet(\"-connect\") && gArgs.GetArgs(\"-connect\").size() > 0)\n+    if (gArgs.IsArgSet(\"-connect\"))\n     {\n         for (int64_t nLoop = 0;; nLoop++)\n         {\n@@ -1903,8 +1903,7 @@ void CConnman::ThreadOpenAddedConnections()\n {\n     {\n         LOCK(cs_vAddedNodes);\n-        if (gArgs.IsArgSet(\"-addnode\"))\n-            vAddedNodes = gArgs.GetArgs(\"-addnode\");\n+        vAddedNodes = gArgs.GetArgs(\"-addnode\");\n     }\n \n     while (true)"
      },
      {
        "sha": "b76c173f90602e56d5457d1c1e9467c662df0663",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac52492cd22782d7b09c78c198fb6fd8eb1da57c/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac52492cd22782d7b09c78c198fb6fd8eb1da57c/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=ac52492cd22782d7b09c78c198fb6fd8eb1da57c",
        "patch": "@@ -422,7 +422,9 @@ void ArgsManager::ParseParameters(int argc, const char* const argv[])\n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg)\n {\n     LOCK(cs_args);\n-    return mapMultiArgs.at(strArg);\n+    if (IsArgSet(strArg))\n+        return mapMultiArgs.at(strArg);\n+    return {};\n }\n \n bool ArgsManager::IsArgSet(const std::string& strArg)"
      }
    ]
  },
  {
    "sha": "32cffe6bef8974db6bf1536a24bce8c2b2304c52",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMmNmZmU2YmVmODk3NGRiNmJmMTUzNmEyNGJjZThjMmIyMzA0YzUy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-11T17:03:03Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-27T14:51:37Z"
      },
      "message": "[tests] Fix import order in getblocktemplate test",
      "tree": {
        "sha": "5c7264e0e18c3539939337ab14dfd753f8bf755a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c7264e0e18c3539939337ab14dfd753f8bf755a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32cffe6bef8974db6bf1536a24bce8c2b2304c52",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32cffe6bef8974db6bf1536a24bce8c2b2304c52",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32cffe6bef8974db6bf1536a24bce8c2b2304c52",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32cffe6bef8974db6bf1536a24bce8c2b2304c52/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c87a9c748be7121a240d81f9a5c6c988be6ffcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c87a9c748be7121a240d81f9a5c6c988be6ffcf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c87a9c748be7121a240d81f9a5c6c988be6ffcf"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "304eaa20e97a584edca578e2241b09c77f021cc7",
        "filename": "test/functional/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32cffe6bef8974db6bf1536a24bce8c2b2304c52/test/functional/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32cffe6bef8974db6bf1536a24bce8c2b2304c52/test/functional/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getblocktemplate_proposals.py?ref=32cffe6bef8974db6bf1536a24bce8c2b2304c52",
        "patch": "@@ -4,13 +4,13 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test block proposals with getblocktemplate.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-\n from binascii import a2b_hex, b2a_hex\n from hashlib import sha256\n from struct import pack\n \n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n def b2x(b):\n     return b2a_hex(b).decode('ascii')\n "
      }
    ]
  },
  {
    "sha": "0a3a5ff454643d148e5a68c12393fa4e187af157",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYTNhNWZmNDU0NjQzZDE0OGU1YTY4YzEyMzkzZmE0ZTE4N2FmMTU3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-11T17:05:41Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-27T14:51:37Z"
      },
      "message": "[tests] Fix flake8 warnings in getblocktemplate tests",
      "tree": {
        "sha": "1c45507a325ef4e5cef78bb42357286a2c39ab7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c45507a325ef4e5cef78bb42357286a2c39ab7c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a3a5ff454643d148e5a68c12393fa4e187af157",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a3a5ff454643d148e5a68c12393fa4e187af157",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a3a5ff454643d148e5a68c12393fa4e187af157",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a3a5ff454643d148e5a68c12393fa4e187af157/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "32cffe6bef8974db6bf1536a24bce8c2b2304c52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32cffe6bef8974db6bf1536a24bce8c2b2304c52",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32cffe6bef8974db6bf1536a24bce8c2b2304c52"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 9,
      "deletions": 14
    },
    "files": [
      {
        "sha": "51b4dc33e368590519269ed1000d8e803e052956",
        "filename": "test/functional/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 9,
        "deletions": 14,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a3a5ff454643d148e5a68c12393fa4e187af157/test/functional/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a3a5ff454643d148e5a68c12393fa4e187af157/test/functional/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getblocktemplate_proposals.py?ref=0a3a5ff454643d148e5a68c12393fa4e187af157",
        "patch": "@@ -43,7 +43,7 @@ def genmrklroot(leaflist):\n         if len(cur) & 1:\n             cur.append(cur[-1])\n         for i in range(0, len(cur), 2):\n-            n.append(dblsha(cur[i] + cur[i+1]))\n+            n.append(dblsha(cur[i] + cur[i + 1]))\n         cur = n\n     return cur[0]\n \n@@ -62,7 +62,7 @@ def template_to_hex(tmpl, txlist):\n     return b2x(template_to_bytearray(tmpl, txlist))\n \n def assert_template(node, tmpl, txlist, expect):\n-    rsp = node.getblocktemplate({'data':template_to_hex(tmpl, txlist),'mode':'proposal'})\n+    rsp = node.getblocktemplate({'data': template_to_hex(tmpl, txlist), 'mode': 'proposal'})\n     if rsp != expect:\n         raise AssertionError('unexpected: %s' % (rsp,))\n \n@@ -75,7 +75,8 @@ def __init__(self):\n \n     def run_test(self):\n         node = self.nodes[0]\n-        node.generate(1) # Mine a block to leave initial block download\n+        # Mine a block to leave initial block download\n+        node.generate(1)\n         tmpl = node.getblocktemplate()\n         if 'coinbasetxn' not in tmpl:\n             rawcoinbase = encodeUNum(tmpl['height'])\n@@ -88,16 +89,10 @@ def run_test(self):\n         # Test 0: Capability advertised\n         assert('proposal' in tmpl['capabilities'])\n \n-        # NOTE: This test currently FAILS (regtest mode doesn't enforce block height in coinbase)\n-        ## Test 1: Bad height in coinbase\n-        #txlist[0][4+1+36+1+1] += 1\n-        #assert_template(node, tmpl, txlist, 'FIXME')\n-        #txlist[0][4+1+36+1+1] -= 1\n-\n         # Test 2: Bad input hash for gen tx\n-        txlist[0][4+1] += 1\n+        txlist[0][4 + 1] += 1\n         assert_template(node, tmpl, txlist, 'bad-cb-missing')\n-        txlist[0][4+1] -= 1\n+        txlist[0][4 + 1] -= 1\n \n         # Test 3: Truncated final tx\n         lastbyte = txlist[-1].pop()\n@@ -111,7 +106,7 @@ def run_test(self):\n \n         # Test 5: Add an invalid tx to the end (non-duplicate)\n         txlist.append(bytearray(txlist[0]))\n-        txlist[-1][4+1] = 0xff\n+        txlist[-1][4 + 1] = 0xff\n         assert_template(node, tmpl, txlist, 'bad-txns-inputs-missingorspent')\n         txlist.pop()\n \n@@ -133,8 +128,8 @@ def run_test(self):\n \n         # Test 9: Bad merkle root\n         rawtmpl = template_to_bytearray(tmpl, txlist)\n-        rawtmpl[4+32] = (rawtmpl[4+32] + 1) % 0x100\n-        rsp = node.getblocktemplate({'data':b2x(rawtmpl),'mode':'proposal'})\n+        rawtmpl[4 + 32] = (rawtmpl[4 + 32] + 1) % 0x100\n+        rsp = node.getblocktemplate({'data': b2x(rawtmpl), 'mode': 'proposal'})\n         if rsp != 'bad-txnmrklroot':\n             raise AssertionError('unexpected: %s' % (rsp,))\n "
      }
    ]
  },
  {
    "sha": "38b38cd2d1a8db8d4bf5bd88e1cbd14d640c73c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOGIzOGNkMmQxYThkYjhkNGJmNWJkODhlMWNiZDE0ZDY0MGM3M2M3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-11T17:10:20Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-27T14:51:37Z"
      },
      "message": "[tests] getblocktemplate_proposals.py: add logging",
      "tree": {
        "sha": "794ce5261cd4fb524a6d12117d97c509f2af8cd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/794ce5261cd4fb524a6d12117d97c509f2af8cd8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38b38cd2d1a8db8d4bf5bd88e1cbd14d640c73c7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38b38cd2d1a8db8d4bf5bd88e1cbd14d640c73c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38b38cd2d1a8db8d4bf5bd88e1cbd14d640c73c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38b38cd2d1a8db8d4bf5bd88e1cbd14d640c73c7/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a3a5ff454643d148e5a68c12393fa4e187af157",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a3a5ff454643d148e5a68c12393fa4e187af157",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a3a5ff454643d148e5a68c12393fa4e187af157"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "6fd5279b8e82ffc3754ea494d469a1c268911e58",
        "filename": "test/functional/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38b38cd2d1a8db8d4bf5bd88e1cbd14d640c73c7/test/functional/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38b38cd2d1a8db8d4bf5bd88e1cbd14d640c73c7/test/functional/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getblocktemplate_proposals.py?ref=38b38cd2d1a8db8d4bf5bd88e1cbd14d640c73c7",
        "patch": "@@ -86,65 +86,65 @@ def run_test(self):\n             tmpl['coinbasetxn'] = {'data': '01000000' + '01' + '0000000000000000000000000000000000000000000000000000000000000000ffffffff' + ('%02x' % (len(rawcoinbase),)) + hexcoinbase + 'fffffffe' + '01' + hexoutval + '00' + '00000000'}\n         txlist = list(bytearray(a2b_hex(a['data'])) for a in (tmpl['coinbasetxn'],) + tuple(tmpl['transactions']))\n \n-        # Test 0: Capability advertised\n+        self.log.info(\"getblocktemplate: Test capability advertised\")\n         assert('proposal' in tmpl['capabilities'])\n \n-        # Test 2: Bad input hash for gen tx\n+        self.log.info(\"getblocktemplate: Test bad input hash for coinbase transaction\")\n         txlist[0][4 + 1] += 1\n         assert_template(node, tmpl, txlist, 'bad-cb-missing')\n         txlist[0][4 + 1] -= 1\n \n-        # Test 3: Truncated final tx\n+        self.log.info(\"getblocktemplate: Test truncated final transaction\")\n         lastbyte = txlist[-1].pop()\n         assert_raises_jsonrpc(-22, \"Block decode failed\", assert_template, node, tmpl, txlist, 'n/a')\n         txlist[-1].append(lastbyte)\n \n-        # Test 4: Add an invalid tx to the end (duplicate of gen tx)\n+        self.log.info(\"getblocktemplate: Test duplicate transaction\")\n         txlist.append(txlist[0])\n         assert_template(node, tmpl, txlist, 'bad-txns-duplicate')\n         txlist.pop()\n \n-        # Test 5: Add an invalid tx to the end (non-duplicate)\n+        self.log.info(\"getblocktemplate: Test invalid transaction\")\n         txlist.append(bytearray(txlist[0]))\n         txlist[-1][4 + 1] = 0xff\n         assert_template(node, tmpl, txlist, 'bad-txns-inputs-missingorspent')\n         txlist.pop()\n \n-        # Test 6: Future tx lock time\n+        self.log.info(\"getblocktemplate: Test nonfinal transaction\")\n         txlist[0][-4:] = b'\\xff\\xff\\xff\\xff'\n         assert_template(node, tmpl, txlist, 'bad-txns-nonfinal')\n         txlist[0][-4:] = b'\\0\\0\\0\\0'\n \n-        # Test 7: Bad tx count\n+        self.log.info(\"getblocktemplate: Test bad tx count\")\n         txlist.append(b'')\n         assert_raises_jsonrpc(-22, 'Block decode failed', assert_template, node, tmpl, txlist, 'n/a')\n         txlist.pop()\n \n-        # Test 8: Bad bits\n+        self.log.info(\"getblocktemplate: Test bad bits\")\n         realbits = tmpl['bits']\n         tmpl['bits'] = '1c0000ff'  # impossible in the real world\n         assert_template(node, tmpl, txlist, 'bad-diffbits')\n         tmpl['bits'] = realbits\n \n-        # Test 9: Bad merkle root\n+        self.log.info(\"getblocktemplate: Test bad merkle root\")\n         rawtmpl = template_to_bytearray(tmpl, txlist)\n         rawtmpl[4 + 32] = (rawtmpl[4 + 32] + 1) % 0x100\n         rsp = node.getblocktemplate({'data': b2x(rawtmpl), 'mode': 'proposal'})\n         if rsp != 'bad-txnmrklroot':\n             raise AssertionError('unexpected: %s' % (rsp,))\n \n-        # Test 10: Bad timestamps\n+        self.log.info(\"getblocktemplate: Test bad timestamps\")\n         realtime = tmpl['curtime']\n         tmpl['curtime'] = 0x7fffffff\n         assert_template(node, tmpl, txlist, 'time-too-new')\n         tmpl['curtime'] = 0\n         assert_template(node, tmpl, txlist, 'time-too-old')\n         tmpl['curtime'] = realtime\n \n-        # Test 11: Valid block\n+        self.log.info(\"getblocktemplate: Test valid block\")\n         assert_template(node, tmpl, txlist, None)\n \n-        # Test 12: Orphan block\n+        self.log.info(\"getblocktemplate: Test not best block\")\n         tmpl['previousblockhash'] = 'ff00' * 16\n         assert_template(node, tmpl, txlist, 'inconclusive-not-best-prevblk')\n "
      }
    ]
  },
  {
    "sha": "66c570a38eb21153599f0478adc5a17ca9821a52",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NmM1NzBhMzhlYjIxMTUzNTk5ZjA0NzhhZGM1YTE3Y2E5ODIxYTUy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-11T19:09:19Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-27T14:51:37Z"
      },
      "message": "[tests] Don't build the coinbase manually in getblocktemplate test",
      "tree": {
        "sha": "b670e8162e38b8b7d1fe2b8c2db22a9d38ddc113",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b670e8162e38b8b7d1fe2b8c2db22a9d38ddc113"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66c570a38eb21153599f0478adc5a17ca9821a52",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66c570a38eb21153599f0478adc5a17ca9821a52",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/66c570a38eb21153599f0478adc5a17ca9821a52",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66c570a38eb21153599f0478adc5a17ca9821a52/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38b38cd2d1a8db8d4bf5bd88e1cbd14d640c73c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38b38cd2d1a8db8d4bf5bd88e1cbd14d640c73c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38b38cd2d1a8db8d4bf5bd88e1cbd14d640c73c7"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "82a82d01f221264ccba24212f30ccf9e6522ec6a",
        "filename": "test/functional/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66c570a38eb21153599f0478adc5a17ca9821a52/test/functional/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66c570a38eb21153599f0478adc5a17ca9821a52/test/functional/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getblocktemplate_proposals.py?ref=66c570a38eb21153599f0478adc5a17ca9821a52",
        "patch": "@@ -8,6 +8,7 @@\n from hashlib import sha256\n from struct import pack\n \n+from test_framework.blocktools import create_coinbase\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n@@ -78,13 +79,13 @@ def run_test(self):\n         # Mine a block to leave initial block download\n         node.generate(1)\n         tmpl = node.getblocktemplate()\n-        if 'coinbasetxn' not in tmpl:\n-            rawcoinbase = encodeUNum(tmpl['height'])\n-            rawcoinbase += b'\\x01-'\n-            hexcoinbase = b2x(rawcoinbase)\n-            hexoutval = b2x(pack('<Q', tmpl['coinbasevalue']))\n-            tmpl['coinbasetxn'] = {'data': '01000000' + '01' + '0000000000000000000000000000000000000000000000000000000000000000ffffffff' + ('%02x' % (len(rawcoinbase),)) + hexcoinbase + 'fffffffe' + '01' + hexoutval + '00' + '00000000'}\n-        txlist = list(bytearray(a2b_hex(a['data'])) for a in (tmpl['coinbasetxn'],) + tuple(tmpl['transactions']))\n+        assert 'coinbasetxn' not in tmpl\n+\n+        coinbase_tx = create_coinbase(height=int(tmpl[\"height\"]) + 1)\n+        # sequence numbers must not be max for nLockTime to have effect\n+        coinbase_tx.vin[0].nSequence = 2 ** 32 - 2\n+        tmpl['coinbasetxn'] = {'data': coinbase_tx.serialize()}\n+        txlist = [bytearray(coinbase_tx.serialize())]\n \n         self.log.info(\"getblocktemplate: Test capability advertised\")\n         assert('proposal' in tmpl['capabilities'])"
      }
    ]
  },
  {
    "sha": "f82c709fbe9d1e7ae646a6d3b536971b411c906d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODJjNzA5ZmJlOWQxZTdhZTY0NmE2ZDNiNTM2OTcxYjQxMWM5MDZk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-11T19:13:09Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-27T14:51:37Z"
      },
      "message": "[tests] clarify assertions in getblocktemplate test",
      "tree": {
        "sha": "ad36199d4451369d40bc1ed30b5d23486cae6bf4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad36199d4451369d40bc1ed30b5d23486cae6bf4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f82c709fbe9d1e7ae646a6d3b536971b411c906d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f82c709fbe9d1e7ae646a6d3b536971b411c906d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f82c709fbe9d1e7ae646a6d3b536971b411c906d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f82c709fbe9d1e7ae646a6d3b536971b411c906d/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66c570a38eb21153599f0478adc5a17ca9821a52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66c570a38eb21153599f0478adc5a17ca9821a52",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66c570a38eb21153599f0478adc5a17ca9821a52"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 3,
      "deletions": 5
    },
    "files": [
      {
        "sha": "788e3ce2594b39901531c961618ce9343bd91611",
        "filename": "test/functional/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f82c709fbe9d1e7ae646a6d3b536971b411c906d/test/functional/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f82c709fbe9d1e7ae646a6d3b536971b411c906d/test/functional/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getblocktemplate_proposals.py?ref=f82c709fbe9d1e7ae646a6d3b536971b411c906d",
        "patch": "@@ -64,8 +64,7 @@ def template_to_hex(tmpl, txlist):\n \n def assert_template(node, tmpl, txlist, expect):\n     rsp = node.getblocktemplate({'data': template_to_hex(tmpl, txlist), 'mode': 'proposal'})\n-    if rsp != expect:\n-        raise AssertionError('unexpected: %s' % (rsp,))\n+    assert_equal(rsp, expect)\n \n class GetBlockTemplateProposalTest(BitcoinTestFramework):\n \n@@ -88,7 +87,7 @@ def run_test(self):\n         txlist = [bytearray(coinbase_tx.serialize())]\n \n         self.log.info(\"getblocktemplate: Test capability advertised\")\n-        assert('proposal' in tmpl['capabilities'])\n+        assert 'proposal' in tmpl['capabilities']\n \n         self.log.info(\"getblocktemplate: Test bad input hash for coinbase transaction\")\n         txlist[0][4 + 1] += 1\n@@ -131,8 +130,7 @@ def run_test(self):\n         rawtmpl = template_to_bytearray(tmpl, txlist)\n         rawtmpl[4 + 32] = (rawtmpl[4 + 32] + 1) % 0x100\n         rsp = node.getblocktemplate({'data': b2x(rawtmpl), 'mode': 'proposal'})\n-        if rsp != 'bad-txnmrklroot':\n-            raise AssertionError('unexpected: %s' % (rsp,))\n+        assert_equal(rsp, 'bad-txnmrklroot')\n \n         self.log.info(\"getblocktemplate: Test bad timestamps\")\n         realtime = tmpl['curtime']"
      }
    ]
  },
  {
    "sha": "82dc59706e3cf0184083ddc10a25674608235f48",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MmRjNTk3MDZlM2NmMDE4NDA4M2RkYzEwYTI1Njc0NjA4MjM1ZjQ4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-11T20:42:12Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-27T14:51:37Z"
      },
      "message": "[tests] don't build blocks manually in getblocktemplate test",
      "tree": {
        "sha": "85794f65b918c23cd8c96f4d9ac3d0f2499dd720",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85794f65b918c23cd8c96f4d9ac3d0f2499dd720"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82dc59706e3cf0184083ddc10a25674608235f48",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82dc59706e3cf0184083ddc10a25674608235f48",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/82dc59706e3cf0184083ddc10a25674608235f48",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82dc59706e3cf0184083ddc10a25674608235f48/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f82c709fbe9d1e7ae646a6d3b536971b411c906d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f82c709fbe9d1e7ae646a6d3b536971b411c906d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f82c709fbe9d1e7ae646a6d3b536971b411c906d"
      }
    ],
    "stats": {
      "total": 149,
      "additions": 57,
      "deletions": 92
    },
    "files": [
      {
        "sha": "a65d14ce064b0bff45dcf6cfdaa516b2ec5021ae",
        "filename": "test/functional/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 57,
        "deletions": 92,
        "changes": 149,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82dc59706e3cf0184083ddc10a25674608235f48/test/functional/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82dc59706e3cf0184083ddc10a25674608235f48/test/functional/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getblocktemplate_proposals.py?ref=82dc59706e3cf0184083ddc10a25674608235f48",
        "patch": "@@ -4,66 +4,21 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test block proposals with getblocktemplate.\"\"\"\n \n-from binascii import a2b_hex, b2a_hex\n-from hashlib import sha256\n-from struct import pack\n+from binascii import b2a_hex\n+import copy\n \n from test_framework.blocktools import create_coinbase\n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import CBlock\n from test_framework.util import *\n \n def b2x(b):\n     return b2a_hex(b).decode('ascii')\n \n-# NOTE: This does not work for signed numbers (set the high bit) or zero (use b'\\0')\n-def encodeUNum(n):\n-    s = bytearray(b'\\1')\n-    while n > 127:\n-        s[0] += 1\n-        s.append(n % 256)\n-        n //= 256\n-    s.append(n)\n-    return bytes(s)\n-\n-def varlenEncode(n):\n-    if n < 0xfd:\n-        return pack('<B', n)\n-    if n <= 0xffff:\n-        return b'\\xfd' + pack('<H', n)\n-    if n <= 0xffffffff:\n-        return b'\\xfe' + pack('<L', n)\n-    return b'\\xff' + pack('<Q', n)\n-\n-def dblsha(b):\n-    return sha256(sha256(b).digest()).digest()\n-\n-def genmrklroot(leaflist):\n-    cur = leaflist\n-    while len(cur) > 1:\n-        n = []\n-        if len(cur) & 1:\n-            cur.append(cur[-1])\n-        for i in range(0, len(cur), 2):\n-            n.append(dblsha(cur[i] + cur[i + 1]))\n-        cur = n\n-    return cur[0]\n-\n-def template_to_bytearray(tmpl, txlist):\n-    blkver = pack('<L', tmpl['version'])\n-    mrklroot = genmrklroot(list(dblsha(a) for a in txlist))\n-    timestamp = pack('<L', tmpl['curtime'])\n-    nonce = b'\\0\\0\\0\\0'\n-    blk = blkver + a2b_hex(tmpl['previousblockhash'])[::-1] + mrklroot + timestamp + a2b_hex(tmpl['bits'])[::-1] + nonce\n-    blk += varlenEncode(len(txlist))\n-    for tx in txlist:\n-        blk += tx\n-    return bytearray(blk)\n-\n-def template_to_hex(tmpl, txlist):\n-    return b2x(template_to_bytearray(tmpl, txlist))\n-\n-def assert_template(node, tmpl, txlist, expect):\n-    rsp = node.getblocktemplate({'data': template_to_hex(tmpl, txlist), 'mode': 'proposal'})\n+def assert_template(node, block, expect, rehash=True):\n+    if rehash:\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+    rsp = node.getblocktemplate({'data': b2x(block.serialize()), 'mode': 'proposal'})\n     assert_equal(rsp, expect)\n \n class GetBlockTemplateProposalTest(BitcoinTestFramework):\n@@ -78,74 +33,84 @@ def run_test(self):\n         # Mine a block to leave initial block download\n         node.generate(1)\n         tmpl = node.getblocktemplate()\n+        self.log.info(\"getblocktemplate: Test capability advertised\")\n+        assert 'proposal' in tmpl['capabilities']\n         assert 'coinbasetxn' not in tmpl\n \n         coinbase_tx = create_coinbase(height=int(tmpl[\"height\"]) + 1)\n         # sequence numbers must not be max for nLockTime to have effect\n         coinbase_tx.vin[0].nSequence = 2 ** 32 - 2\n-        tmpl['coinbasetxn'] = {'data': coinbase_tx.serialize()}\n-        txlist = [bytearray(coinbase_tx.serialize())]\n+        coinbase_tx.rehash()\n \n-        self.log.info(\"getblocktemplate: Test capability advertised\")\n-        assert 'proposal' in tmpl['capabilities']\n+        block = CBlock()\n+        block.nVersion = tmpl[\"version\"]\n+        block.hashPrevBlock = int(tmpl[\"previousblockhash\"], 16)\n+        block.nTime = tmpl[\"curtime\"]\n+        block.nBits = int(tmpl[\"bits\"], 16)\n+        block.nNonce = 0\n+        block.vtx = [coinbase_tx]\n \n         self.log.info(\"getblocktemplate: Test bad input hash for coinbase transaction\")\n-        txlist[0][4 + 1] += 1\n-        assert_template(node, tmpl, txlist, 'bad-cb-missing')\n-        txlist[0][4 + 1] -= 1\n+        bad_block = copy.deepcopy(block)\n+        bad_block.vtx[0].vin[0].prevout.hash += 1\n+        bad_block.vtx[0].rehash()\n+        assert_template(node, bad_block, 'bad-cb-missing')\n+\n \n         self.log.info(\"getblocktemplate: Test truncated final transaction\")\n-        lastbyte = txlist[-1].pop()\n-        assert_raises_jsonrpc(-22, \"Block decode failed\", assert_template, node, tmpl, txlist, 'n/a')\n-        txlist[-1].append(lastbyte)\n+        assert_raises_jsonrpc(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(block.serialize()[:-1]), 'mode': 'proposal'})\n \n         self.log.info(\"getblocktemplate: Test duplicate transaction\")\n-        txlist.append(txlist[0])\n-        assert_template(node, tmpl, txlist, 'bad-txns-duplicate')\n-        txlist.pop()\n+        bad_block = copy.deepcopy(block)\n+        bad_block.vtx.append(bad_block.vtx[0])\n+        assert_template(node, bad_block, 'bad-txns-duplicate')\n \n         self.log.info(\"getblocktemplate: Test invalid transaction\")\n-        txlist.append(bytearray(txlist[0]))\n-        txlist[-1][4 + 1] = 0xff\n-        assert_template(node, tmpl, txlist, 'bad-txns-inputs-missingorspent')\n-        txlist.pop()\n+        bad_block = copy.deepcopy(block)\n+        bad_tx = copy.deepcopy(bad_block.vtx[0])\n+        bad_tx.vin[0].prevout.hash = 255\n+        bad_tx.rehash()\n+        bad_block.vtx.append(bad_tx)\n+        assert_template(node, bad_block, 'bad-txns-inputs-missingorspent')\n \n         self.log.info(\"getblocktemplate: Test nonfinal transaction\")\n-        txlist[0][-4:] = b'\\xff\\xff\\xff\\xff'\n-        assert_template(node, tmpl, txlist, 'bad-txns-nonfinal')\n-        txlist[0][-4:] = b'\\0\\0\\0\\0'\n+        bad_block = copy.deepcopy(block)\n+        bad_block.vtx[0].nLockTime = 2 ** 32 - 1\n+        bad_block.vtx[0].rehash()\n+        assert_template(node, bad_block, 'bad-txns-nonfinal')\n \n         self.log.info(\"getblocktemplate: Test bad tx count\")\n-        txlist.append(b'')\n-        assert_raises_jsonrpc(-22, 'Block decode failed', assert_template, node, tmpl, txlist, 'n/a')\n-        txlist.pop()\n+        # The tx count is immediately after the block header\n+        TX_COUNT_OFFSET = 80\n+        bad_block_sn = bytearray(block.serialize())\n+        assert_equal(bad_block_sn[TX_COUNT_OFFSET], 1)\n+        bad_block_sn[TX_COUNT_OFFSET] += 1\n+        assert_raises_jsonrpc(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(bad_block_sn), 'mode': 'proposal'})\n \n         self.log.info(\"getblocktemplate: Test bad bits\")\n-        realbits = tmpl['bits']\n-        tmpl['bits'] = '1c0000ff'  # impossible in the real world\n-        assert_template(node, tmpl, txlist, 'bad-diffbits')\n-        tmpl['bits'] = realbits\n+        bad_block = copy.deepcopy(block)\n+        bad_block.nBits = 469762303  # impossible in the real world\n+        assert_template(node, bad_block, 'bad-diffbits')\n \n         self.log.info(\"getblocktemplate: Test bad merkle root\")\n-        rawtmpl = template_to_bytearray(tmpl, txlist)\n-        rawtmpl[4 + 32] = (rawtmpl[4 + 32] + 1) % 0x100\n-        rsp = node.getblocktemplate({'data': b2x(rawtmpl), 'mode': 'proposal'})\n-        assert_equal(rsp, 'bad-txnmrklroot')\n+        bad_block = copy.deepcopy(block)\n+        bad_block.hashMerkleRoot += 1\n+        assert_template(node, bad_block, 'bad-txnmrklroot', False)\n \n         self.log.info(\"getblocktemplate: Test bad timestamps\")\n-        realtime = tmpl['curtime']\n-        tmpl['curtime'] = 0x7fffffff\n-        assert_template(node, tmpl, txlist, 'time-too-new')\n-        tmpl['curtime'] = 0\n-        assert_template(node, tmpl, txlist, 'time-too-old')\n-        tmpl['curtime'] = realtime\n+        bad_block = copy.deepcopy(block)\n+        bad_block.nTime = 2 ** 31 - 1\n+        assert_template(node, bad_block, 'time-too-new')\n+        bad_block.nTime = 0\n+        assert_template(node, bad_block, 'time-too-old')\n \n         self.log.info(\"getblocktemplate: Test valid block\")\n-        assert_template(node, tmpl, txlist, None)\n+        assert_template(node, block, None)\n \n         self.log.info(\"getblocktemplate: Test not best block\")\n-        tmpl['previousblockhash'] = 'ff00' * 16\n-        assert_template(node, tmpl, txlist, 'inconclusive-not-best-prevblk')\n+        bad_block = copy.deepcopy(block)\n+        bad_block.hashPrevBlock = 123\n+        assert_template(node, bad_block, 'inconclusive-not-best-prevblk')\n \n if __name__ == '__main__':\n     GetBlockTemplateProposalTest().main()"
      }
    ]
  },
  {
    "sha": "9bf0d80ab07ede52629960b2478beff55401a51b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YmYwZDgwYWIwN2VkZTUyNjI5OTYwYjI0NzhiZWZmNTU0MDFhNTFi",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-11T20:39:37Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-27T14:51:37Z"
      },
      "message": "[tests] run successful test in getblocktemplate first",
      "tree": {
        "sha": "d1b7d719b5491ed4a97d45174e894bbce38cf8a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1b7d719b5491ed4a97d45174e894bbce38cf8a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9bf0d80ab07ede52629960b2478beff55401a51b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bf0d80ab07ede52629960b2478beff55401a51b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9bf0d80ab07ede52629960b2478beff55401a51b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bf0d80ab07ede52629960b2478beff55401a51b/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82dc59706e3cf0184083ddc10a25674608235f48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82dc59706e3cf0184083ddc10a25674608235f48",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82dc59706e3cf0184083ddc10a25674608235f48"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "777b20212cd5380b4375fbe475b43697c1f99d09",
        "filename": "test/functional/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bf0d80ab07ede52629960b2478beff55401a51b/test/functional/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bf0d80ab07ede52629960b2478beff55401a51b/test/functional/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getblocktemplate_proposals.py?ref=9bf0d80ab07ede52629960b2478beff55401a51b",
        "patch": "@@ -50,6 +50,9 @@ def run_test(self):\n         block.nNonce = 0\n         block.vtx = [coinbase_tx]\n \n+        self.log.info(\"getblocktemplate: Test valid block\")\n+        assert_template(node, block, None)\n+\n         self.log.info(\"getblocktemplate: Test bad input hash for coinbase transaction\")\n         bad_block = copy.deepcopy(block)\n         bad_block.vtx[0].vin[0].prevout.hash += 1\n@@ -104,9 +107,6 @@ def run_test(self):\n         bad_block.nTime = 0\n         assert_template(node, bad_block, 'time-too-old')\n \n-        self.log.info(\"getblocktemplate: Test valid block\")\n-        assert_template(node, block, None)\n-\n         self.log.info(\"getblocktemplate: Test not best block\")\n         bad_block = copy.deepcopy(block)\n         bad_block.hashPrevBlock = 123"
      }
    ]
  },
  {
    "sha": "b29dd41f0f8482fb6dbaa4f9fa468ac66069f207",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjlkZDQxZjBmODQ4MmZiNmRiYWE0ZjlmYTQ2OGFjNjYwNjlmMjA3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-11T20:42:35Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-27T14:51:37Z"
      },
      "message": "[tests] add test for submit block",
      "tree": {
        "sha": "12df4f089aeaa571be73c37b66f8e40126ddf03c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/12df4f089aeaa571be73c37b66f8e40126ddf03c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b29dd41f0f8482fb6dbaa4f9fa468ac66069f207",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b29dd41f0f8482fb6dbaa4f9fa468ac66069f207",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b29dd41f0f8482fb6dbaa4f9fa468ac66069f207",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b29dd41f0f8482fb6dbaa4f9fa468ac66069f207/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9bf0d80ab07ede52629960b2478beff55401a51b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bf0d80ab07ede52629960b2478beff55401a51b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bf0d80ab07ede52629960b2478beff55401a51b"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "311d9197acaccd37a0f2b37c51cd3e2527a6a592",
        "filename": "test/functional/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b29dd41f0f8482fb6dbaa4f9fa468ac66069f207/test/functional/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b29dd41f0f8482fb6dbaa4f9fa468ac66069f207/test/functional/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getblocktemplate_proposals.py?ref=b29dd41f0f8482fb6dbaa4f9fa468ac66069f207",
        "patch": "@@ -53,12 +53,17 @@ def run_test(self):\n         self.log.info(\"getblocktemplate: Test valid block\")\n         assert_template(node, block, None)\n \n+        self.log.info(\"submitblock: Test block decode failure\")\n+        assert_raises_jsonrpc(-22, \"Block decode failed\", node.submitblock, b2x(block.serialize()[:-15]))\n+\n         self.log.info(\"getblocktemplate: Test bad input hash for coinbase transaction\")\n         bad_block = copy.deepcopy(block)\n         bad_block.vtx[0].vin[0].prevout.hash += 1\n         bad_block.vtx[0].rehash()\n         assert_template(node, bad_block, 'bad-cb-missing')\n \n+        self.log.info(\"submitblock: Test invalid coinbase transaction\")\n+        assert_raises_jsonrpc(-22, \"Block does not start with a coinbase\", node.submitblock, b2x(bad_block.serialize()))\n \n         self.log.info(\"getblocktemplate: Test truncated final transaction\")\n         assert_raises_jsonrpc(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(block.serialize()[:-1]), 'mode': 'proposal'})"
      }
    ]
  },
  {
    "sha": "11ba8e9cdd2652835c650b9f72d8421ea10f4116",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMWJhOGU5Y2RkMjY1MjgzNWM2NTBiOWY3MmQ4NDIxZWExMGY0MTE2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-11T20:47:10Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-27T15:02:18Z"
      },
      "message": "[tests] rename getblocktemplate_proposals.py to mining.py",
      "tree": {
        "sha": "45c61206020a215aaa5099d29fc3fd872d957987",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45c61206020a215aaa5099d29fc3fd872d957987"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11ba8e9cdd2652835c650b9f72d8421ea10f4116",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11ba8e9cdd2652835c650b9f72d8421ea10f4116",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11ba8e9cdd2652835c650b9f72d8421ea10f4116",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11ba8e9cdd2652835c650b9f72d8421ea10f4116/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b29dd41f0f8482fb6dbaa4f9fa468ac66069f207",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b29dd41f0f8482fb6dbaa4f9fa468ac66069f207",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b29dd41f0f8482fb6dbaa4f9fa468ac66069f207"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 7,
      "deletions": 4
    },
    "files": [
      {
        "sha": "dbd4e29ecae80cb92f40b1964eee2a2863b69b4d",
        "filename": "test/functional/mining.py",
        "status": "renamed",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11ba8e9cdd2652835c650b9f72d8421ea10f4116/test/functional/mining.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11ba8e9cdd2652835c650b9f72d8421ea10f4116/test/functional/mining.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining.py?ref=11ba8e9cdd2652835c650b9f72d8421ea10f4116",
        "patch": "@@ -2,7 +2,10 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test block proposals with getblocktemplate.\"\"\"\n+\"\"\"Test mining RPCs\n+\n+- getblocktemplate proposal mode\n+- submitblock\"\"\"\n \n from binascii import b2a_hex\n import copy\n@@ -21,7 +24,7 @@ def assert_template(node, block, expect, rehash=True):\n     rsp = node.getblocktemplate({'data': b2x(block.serialize()), 'mode': 'proposal'})\n     assert_equal(rsp, expect)\n \n-class GetBlockTemplateProposalTest(BitcoinTestFramework):\n+class MiningTest(BitcoinTestFramework):\n \n     def __init__(self):\n         super().__init__()\n@@ -118,4 +121,4 @@ def run_test(self):\n         assert_template(node, bad_block, 'inconclusive-not-best-prevblk')\n \n if __name__ == '__main__':\n-    GetBlockTemplateProposalTest().main()\n+    MiningTest().main()",
        "previous_filename": "test/functional/getblocktemplate_proposals.py"
      },
      {
        "sha": "d411534ca2faa4d89d8acddd4454e76e4de69939",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11ba8e9cdd2652835c650b9f72d8421ea10f4116/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11ba8e9cdd2652835c650b9f72d8421ea10f4116/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=11ba8e9cdd2652835c650b9f72d8421ea10f4116",
        "patch": "@@ -108,6 +108,7 @@\n     'signmessages.py',\n     'nulldummy.py',\n     'import-rescan.py',\n+    'mining.py',\n     'bumpfee.py',\n     'rpcnamedargs.py',\n     'listsinceblock.py',\n@@ -140,7 +141,6 @@\n     'bipdersig-p2p.py',\n     'bipdersig.py',\n     'example_test.py',\n-    'getblocktemplate_proposals.py',\n     'txn_doublespend.py',\n     'txn_clone.py --mineblock',\n     'forknotify.py',"
      }
    ]
  },
  {
    "sha": "acb11535cb8499fd47fdde7f52457f8945b58856",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphY2IxMTUzNWNiODQ5OWZkNDdmZGRlN2Y1MjQ1N2Y4OTQ1YjU4ODU2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-27T17:23:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-27T17:27:57Z"
      },
      "message": "Merge #10659: [qa] blockchain: Pass on closed connection during generate call\n\nfab1fb7 [qa] blockchain: Pass on closed connection during generate call (MarcoFalke)\n\nTree-SHA512: 754be08675c3aca6f8003dc4bc68336e3693609ec14afc91cec592603aabe515f82534ef7b3db469792458ae4c70d5eae0ea0e8abd0ea338e22351aa01173046",
      "tree": {
        "sha": "2750225308b42d2c7231c3d09573609a367961bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2750225308b42d2c7231c3d09573609a367961bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/acb11535cb8499fd47fdde7f52457f8945b58856",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZUpWdAAoJEB5K7WKYbNJdGBcIAI2eyHp8CZCgExiu3N/q2j1A\n2IRkwYIwiTco8g2pap9blnGn8puLt0YZx2X/s06XJQ5z0qS9N7oDTFckmN68/r4T\nyPi186p5+X+f0cUken0UZjqfTbBbX30nOYVmzLa0J/8csyqsefdtX0yH3aTD274X\ntzteaJlpMZNHpcdLVywsVblas0hp3zWbxPd4XFm+FyWTTwY9Lm7CH2agh8U6tdaV\no2KTp/SRtgMZlP2u37dCsEPHnHjHOGmAdDWSsPLzvYTkH0RVWOu2/cn2zNf9VvfF\nrH+f+CKa7kwUzc3iJ9TbyzMo/FtR9KmYWbL+f7d+66WBV+Jf/ihxjNqI8NV+Fj0=\n=cZ4b\n-----END PGP SIGNATURE-----",
        "payload": "tree 2750225308b42d2c7231c3d09573609a367961bd\nparent ac52492cd22782d7b09c78c198fb6fd8eb1da57c\nparent fab1fb737b826c01fca4c10f3416cd84a8eca970\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1498584238 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1498584477 +0200\n\nMerge #10659: [qa] blockchain: Pass on closed connection during generate call\n\nfab1fb7 [qa] blockchain: Pass on closed connection during generate call (MarcoFalke)\n\nTree-SHA512: 754be08675c3aca6f8003dc4bc68336e3693609ec14afc91cec592603aabe515f82534ef7b3db469792458ae4c70d5eae0ea0e8abd0ea338e22351aa01173046\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acb11535cb8499fd47fdde7f52457f8945b58856",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/acb11535cb8499fd47fdde7f52457f8945b58856",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acb11535cb8499fd47fdde7f52457f8945b58856/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ac52492cd22782d7b09c78c198fb6fd8eb1da57c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac52492cd22782d7b09c78c198fb6fd8eb1da57c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac52492cd22782d7b09c78c198fb6fd8eb1da57c"
      },
      {
        "sha": "fab1fb737b826c01fca4c10f3416cd84a8eca970",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab1fb737b826c01fca4c10f3416cd84a8eca970",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fab1fb737b826c01fca4c10f3416cd84a8eca970"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 7,
      "deletions": 2
    },
    "files": [
      {
        "sha": "eeef05efd22a11b539902dd7a2964b19d3d4123c",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acb11535cb8499fd47fdde7f52457f8945b58856/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acb11535cb8499fd47fdde7f52457f8945b58856/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=acb11535cb8499fd47fdde7f52457f8945b58856",
        "patch": "@@ -18,6 +18,7 @@\n \"\"\"\n \n from decimal import Decimal\n+import http.client\n import subprocess\n \n from test_framework.test_framework import BitcoinTestFramework\n@@ -28,6 +29,7 @@\n     assert_is_hex_string,\n     assert_is_hash_string,\n     bitcoind_processes,\n+    BITCOIND_PROC_WAIT_TIMEOUT,\n )\n \n \n@@ -140,9 +142,12 @@ def _test_stopatheight(self):\n         assert_equal(self.nodes[0].getblockcount(), 206)\n         self.log.debug('Node should not stop at this height')\n         assert_raises(subprocess.TimeoutExpired, lambda: bitcoind_processes[0].wait(timeout=3))\n-        self.nodes[0].generate(1)\n+        try:\n+            self.nodes[0].generate(1)\n+        except (ConnectionError, http.client.BadStatusLine):\n+            pass  # The node already shut down before response\n         self.log.debug('Node should stop at this height...')\n-        bitcoind_processes[0].wait(timeout=3)\n+        bitcoind_processes[0].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n         self.nodes[0] = self.start_node(0, self.options.tmpdir)\n         assert_equal(self.nodes[0].getblockcount(), 207)\n "
      }
    ]
  },
  {
    "sha": "22378adbe5c7c723c2fa91c162e37a2ae1f80fb3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjM3OGFkYmU1YzdjNzIzYzJmYTkxYzE2MmUzN2EyYWUxZjgwZmIz",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-27T18:10:03Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-27T18:10:03Z"
      },
      "message": "Remove no longer used mempool.exists(outpoint)",
      "tree": {
        "sha": "7b7b66bf665385e407ee189386d82f237dbe785b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b7b66bf665385e407ee189386d82f237dbe785b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22378adbe5c7c723c2fa91c162e37a2ae1f80fb3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22378adbe5c7c723c2fa91c162e37a2ae1f80fb3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22378adbe5c7c723c2fa91c162e37a2ae1f80fb3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22378adbe5c7c723c2fa91c162e37a2ae1f80fb3/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ac52492cd22782d7b09c78c198fb6fd8eb1da57c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac52492cd22782d7b09c78c198fb6fd8eb1da57c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac52492cd22782d7b09c78c198fb6fd8eb1da57c"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 0,
      "deletions": 7
    },
    "files": [
      {
        "sha": "be9e83eb4bf067f8128864a4cdec8556704d51f5",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22378adbe5c7c723c2fa91c162e37a2ae1f80fb3/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22378adbe5c7c723c2fa91c162e37a2ae1f80fb3/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=22378adbe5c7c723c2fa91c162e37a2ae1f80fb3",
        "patch": "@@ -618,13 +618,6 @@ class CTxMemPool\n         return (mapTx.count(hash) != 0);\n     }\n \n-    bool exists(const COutPoint& outpoint) const\n-    {\n-        LOCK(cs);\n-        auto it = mapTx.find(outpoint.hash);\n-        return (it != mapTx.end() && outpoint.n < it->GetTx().vout.size());\n-    }\n-\n     CTransactionRef get(const uint256& hash) const;\n     TxMempoolInfo info(const uint256& hash) const;\n     std::vector<TxMempoolInfo> infoAll() const;"
      }
    ]
  },
  {
    "sha": "18bacec6c2c8493fd6b7011778446b3c7473bb25",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOGJhY2VjNmMyYzg0OTNmZDZiNzAxMTc3ODQ0NmIzYzc0NzNiYjI1",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-08T14:41:19Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-27T18:14:15Z"
      },
      "message": "Make check to distinguish between orphan txs and old txs more efficient.\n\nChecking for the existence in the CCoinsViewCache of the outputs of a new tx\nwill result in a disk hit for every output since they will not be found.  On the\nother hand if those outputs exist already, then the inputs must also have been\nmissing, so we can move this check inside the input existence check so in the\ncommon case of a new tx it doesn't need to run.\n\nThe purpose of the check is to avoid spamming the orphanMap with slightly old\ntxs which we have already seen in a block, but it is already only optimistic\n(depending on the outputs not being spent), so make it even more efficient by\nonly checking the cache and not the entire pcoinsTip.",
      "tree": {
        "sha": "8a6f2be4ec128d74dc9f0add6342a794cafcb1cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a6f2be4ec128d74dc9f0add6342a794cafcb1cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18bacec6c2c8493fd6b7011778446b3c7473bb25",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18bacec6c2c8493fd6b7011778446b3c7473bb25",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/18bacec6c2c8493fd6b7011778446b3c7473bb25",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18bacec6c2c8493fd6b7011778446b3c7473bb25/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ac52492cd22782d7b09c78c198fb6fd8eb1da57c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac52492cd22782d7b09c78c198fb6fd8eb1da57c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac52492cd22782d7b09c78c198fb6fd8eb1da57c"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 8,
      "deletions": 12
    },
    "files": [
      {
        "sha": "c160da64abe4121428dd64b55032ece5775cacf5",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 12,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18bacec6c2c8493fd6b7011778446b3c7473bb25/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18bacec6c2c8493fd6b7011778446b3c7473bb25/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=18bacec6c2c8493fd6b7011778446b3c7473bb25",
        "patch": "@@ -491,24 +491,20 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         CCoinsViewMemPool viewMemPool(pcoinsTip, pool);\n         view.SetBackend(viewMemPool);\n \n-        // do we already have it?\n-        for (size_t out = 0; out < tx.vout.size(); out++) {\n-            COutPoint outpoint(hash, out);\n-            bool had_coin_in_cache = pcoinsTip->HaveCoinInCache(outpoint);\n-            if (view.HaveCoin(outpoint)) {\n-                if (!had_coin_in_cache) {\n-                    coins_to_uncache.push_back(outpoint);\n-                }\n-                return state.Invalid(false, REJECT_DUPLICATE, \"txn-already-known\");\n-            }\n-        }\n-\n         // do all inputs exist?\n         for (const CTxIn txin : tx.vin) {\n             if (!pcoinsTip->HaveCoinInCache(txin.prevout)) {\n                 coins_to_uncache.push_back(txin.prevout);\n             }\n             if (!view.HaveCoin(txin.prevout)) {\n+                // Are inputs missing because we already have the tx?\n+                for (size_t out = 0; out < tx.vout.size(); out++) {\n+                    // Optimistically just do efficient check of cache for outputs\n+                    if (pcoinsTip->HaveCoinInCache(COutPoint(hash, out))) {\n+                        return state.Invalid(false, REJECT_DUPLICATE, \"txn-already-known\");\n+                    }\n+                }\n+                // Otherwise assume this might be an orphan tx for which we just haven't seen parents yet\n                 if (pfMissingInputs) {\n                     *pfMissingInputs = true;\n                 }"
      }
    ]
  },
  {
    "sha": "381b8fc36537f9fa42f4487bcf55920b2ae0bda9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODFiOGZjMzY1MzdmOWZhNDJmNDQ4N2JjZjU1OTIwYjJhZTBiZGE5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-06-27T18:46:19Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-06-27T18:47:07Z"
      },
      "message": "Clarify CCoinsViewMemPool documentation.\n\nThanks to @sdaftuar for correcting my misunderstanding.",
      "tree": {
        "sha": "95c6c018bdeee5027e5676afb1766bbc319c93dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95c6c018bdeee5027e5676afb1766bbc319c93dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/381b8fc36537f9fa42f4487bcf55920b2ae0bda9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/381b8fc36537f9fa42f4487bcf55920b2ae0bda9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/381b8fc36537f9fa42f4487bcf55920b2ae0bda9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/381b8fc36537f9fa42f4487bcf55920b2ae0bda9/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "acb11535cb8499fd47fdde7f52457f8945b58856",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acb11535cb8499fd47fdde7f52457f8945b58856",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/acb11535cb8499fd47fdde7f52457f8945b58856"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c17ca2fa3a1760f57fb9e108d44205734f11860d",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/381b8fc36537f9fa42f4487bcf55920b2ae0bda9/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/381b8fc36537f9fa42f4487bcf55920b2ae0bda9/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=381b8fc36537f9fa42f4487bcf55920b2ae0bda9",
        "patch": "@@ -991,7 +991,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n     if (fMempool) {\n         LOCK(mempool.cs);\n         CCoinsViewMemPool view(pcoinsTip, mempool);\n-        if (!view.GetCoin(out, coin) || mempool.isSpent(out)) { // TODO: filtering spent coins should be done by the CCoinsViewMemPool\n+        if (!view.GetCoin(out, coin) || mempool.isSpent(out)) {\n             return NullUniValue;\n         }\n     } else {"
      },
      {
        "sha": "70d7429f220f226949b1c5d738d03b328e363597",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/381b8fc36537f9fa42f4487bcf55920b2ae0bda9/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/381b8fc36537f9fa42f4487bcf55920b2ae0bda9/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=381b8fc36537f9fa42f4487bcf55920b2ae0bda9",
        "patch": "@@ -676,6 +676,13 @@ class CTxMemPool\n /** \n  * CCoinsView that brings transactions from a memorypool into view.\n  * It does not check for spendings by memory pool transactions.\n+ * Instead, it provides access to all Coins which are either unspent in the\n+ * base CCoinsView, or are outputs from any mempool transaction!\n+ * This allows transaction replacement to work as expected, as you want to\n+ * have all inputs \"available\" to check signatures, and any cycles in the\n+ * dependency graph are checked directly in AcceptToMemoryPool.\n+ * It also allows you to sign a double-spend directly in signrawtransaction,\n+ * as long as the conflicting transaction is not yet confirmed.\n  */\n class CCoinsViewMemPool : public CCoinsViewBacked\n {"
      }
    ]
  },
  {
    "sha": "3c8a9aefff3a600bef3da63c560f62af9e5582d6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzhhOWFlZmZmM2E2MDBiZWYzZGE2M2M1NjBmNjJhZjllNTU4MmQ2",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-08T16:08:32Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-27T19:04:56Z"
      },
      "message": "Add belt-and-suspenders in DisconnectBlock\n\nThese extra variables were previously checked before the move to per-txout database.",
      "tree": {
        "sha": "354ccd21bf82944ddf85a4cfc05fc0ea574e26db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/354ccd21bf82944ddf85a4cfc05fc0ea574e26db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c8a9aefff3a600bef3da63c560f62af9e5582d6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c8a9aefff3a600bef3da63c560f62af9e5582d6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c8a9aefff3a600bef3da63c560f62af9e5582d6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c8a9aefff3a600bef3da63c560f62af9e5582d6/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ac52492cd22782d7b09c78c198fb6fd8eb1da57c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac52492cd22782d7b09c78c198fb6fd8eb1da57c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac52492cd22782d7b09c78c198fb6fd8eb1da57c"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "baf76e5bae693fa4eb3bdf976e6ccb3bce170fbc",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c8a9aefff3a600bef3da63c560f62af9e5582d6/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c8a9aefff3a600bef3da63c560f62af9e5582d6/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3c8a9aefff3a600bef3da63c560f62af9e5582d6",
        "patch": "@@ -1364,6 +1364,7 @@ static DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex*\n     for (int i = block.vtx.size() - 1; i >= 0; i--) {\n         const CTransaction &tx = *(block.vtx[i]);\n         uint256 hash = tx.GetHash();\n+        bool is_coinbase = tx.IsCoinBase();\n \n         // Check that all outputs are available and match the outputs in the block itself\n         // exactly.\n@@ -1372,7 +1373,7 @@ static DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex*\n                 COutPoint out(hash, o);\n                 Coin coin;\n                 bool is_spent = view.SpendCoin(out, &coin);\n-                if (!is_spent || tx.vout[o] != coin.out) {\n+                if (!is_spent || tx.vout[o] != coin.out || pindex->nHeight != coin.nHeight || is_coinbase != coin.fCoinBase) {\n                     fClean = false; // transaction output mismatch\n                 }\n             }"
      }
    ]
  },
  {
    "sha": "e3f9c05b966622146e090f2a01a913516ccb874a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplM2Y5YzA1Yjk2NjYyMjE0NmUwOTBmMmEwMWE5MTM1MTZjY2I4NzRh",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-06-23T20:23:55Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-06-27T20:05:04Z"
      },
      "message": "Add CheckInputs() unit tests\n\nCheck that cached script execution results are only valid for the same\nscript flags; that script execution checks are returned for non-cached\ntransactions; and that cached results are only valid for transactions\nwith the same witness hash.",
      "tree": {
        "sha": "7d9642a50d9d0473f87fbe1046dcebb372364c43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d9642a50d9d0473f87fbe1046dcebb372364c43"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e3f9c05b966622146e090f2a01a913516ccb874a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3f9c05b966622146e090f2a01a913516ccb874a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e3f9c05b966622146e090f2a01a913516ccb874a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3f9c05b966622146e090f2a01a913516ccb874a/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a3543af3cc878f2f24ada8b80198c8e4572c06eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3543af3cc878f2f24ada8b80198c8e4572c06eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a3543af3cc878f2f24ada8b80198c8e4572c06eb"
      }
    ],
    "stats": {
      "total": 290,
      "additions": 288,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a74f40251aa3ee1427742e657ce2c3dd98232813",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 284,
        "deletions": 0,
        "changes": 284,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3f9c05b966622146e090f2a01a913516ccb874a/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3f9c05b966622146e090f2a01a913516ccb874a/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=e3f9c05b966622146e090f2a01a913516ccb874a",
        "patch": "@@ -10,11 +10,17 @@\n #include \"txmempool.h\"\n #include \"random.h\"\n #include \"script/standard.h\"\n+#include \"script/sign.h\"\n #include \"test/test_bitcoin.h\"\n #include \"utiltime.h\"\n+#include \"core_io.h\"\n+#include \"keystore.h\"\n+#include \"policy/policy.h\"\n \n #include <boost/test/unit_test.hpp>\n \n+bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks);\n+\n BOOST_AUTO_TEST_SUITE(tx_validationcache_tests)\n \n static bool\n@@ -84,4 +90,282 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n     BOOST_CHECK_EQUAL(mempool.size(), 0);\n }\n \n+// Run CheckInputs (using pcoinsTip) on the given transaction, for all script\n+// flags.  Test that CheckInputs passes for all flags that don't overlap with\n+// the failing_flags argument, but otherwise fails.\n+// CHECKLOCKTIMEVERIFY and CHECKSEQUENCEVERIFY (and future NOP codes that may\n+// get reassigned) have an interaction with DISCOURAGE_UPGRADABLE_NOPS: if\n+// the script flags used contain DISCOURAGE_UPGRADABLE_NOPS but don't contain\n+// CHECKLOCKTIMEVERIFY (or CHECKSEQUENCEVERIFY), but the script does contain\n+// OP_CHECKLOCKTIMEVERIFY (or OP_CHECKSEQUENCEVERIFY), then script execution\n+// should fail.\n+// Capture this interaction with the upgraded_nop argument: set it when evaluating\n+// any script flag that is implemented as an upgraded NOP code.\n+void ValidateCheckInputsForAllFlags(CMutableTransaction &tx, uint32_t failing_flags, bool add_to_cache, bool upgraded_nop)\n+{\n+    PrecomputedTransactionData txdata(tx);\n+    // If we add many more flags, this loop can get too expensive, but we can\n+    // rewrite in the future to randomly pick a set of flags to evaluate.\n+    for (uint32_t test_flags=0; test_flags < (1U << 16); test_flags += 1) {\n+        CValidationState state;\n+        // Filter out incompatible flag choices\n+        if ((test_flags & SCRIPT_VERIFY_CLEANSTACK)) {\n+            // CLEANSTACK requires P2SH and WITNESS, see VerifyScript() in\n+            // script/interpreter.cpp\n+            test_flags |= SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS;\n+        }\n+        if ((test_flags & SCRIPT_VERIFY_WITNESS)) {\n+            // WITNESS requires P2SH\n+            test_flags |= SCRIPT_VERIFY_P2SH;\n+        }\n+        bool ret = CheckInputs(tx, state, pcoinsTip, true, test_flags, true, add_to_cache, txdata, nullptr);\n+        // CheckInputs should succeed iff test_flags doesn't intersect with\n+        // failing_flags\n+        bool expected_return_value = !(test_flags & failing_flags);\n+        if (expected_return_value && upgraded_nop) {\n+            // If the script flag being tested corresponds to an upgraded NOP,\n+            // then script execution should fail if DISCOURAGE_UPGRADABLE_NOPS\n+            // is set.\n+            expected_return_value = !(test_flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS);\n+        }\n+        BOOST_CHECK_EQUAL(ret, expected_return_value);\n+\n+        // Test the caching\n+        if (ret && add_to_cache) {\n+            // Check that we get a cache hit if the tx was valid\n+            std::vector<CScriptCheck> scriptchecks;\n+            BOOST_CHECK(CheckInputs(tx, state, pcoinsTip, true, test_flags, true, add_to_cache, txdata, &scriptchecks));\n+            BOOST_CHECK(scriptchecks.empty());\n+        } else {\n+            // Check that we get script executions to check, if the transaction\n+            // was invalid, or we didn't add to cache.\n+            std::vector<CScriptCheck> scriptchecks;\n+            BOOST_CHECK(CheckInputs(tx, state, pcoinsTip, true, test_flags, true, add_to_cache, txdata, &scriptchecks));\n+            BOOST_CHECK_EQUAL(scriptchecks.size(), tx.vin.size());\n+        }\n+    }\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n+{\n+    // Test that passing CheckInputs with one set of script flags doesn't imply\n+    // that we would pass again with a different set of flags.\n+    InitScriptExecutionCache();\n+\n+    CScript p2pk_scriptPubKey = CScript() << ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n+    CScript p2sh_scriptPubKey = GetScriptForDestination(CScriptID(p2pk_scriptPubKey));\n+    CScript p2pkh_scriptPubKey = GetScriptForDestination(coinbaseKey.GetPubKey().GetID());\n+    CScript p2wpkh_scriptPubKey = GetScriptForWitness(p2pkh_scriptPubKey);\n+\n+    CBasicKeyStore keystore;\n+    keystore.AddKey(coinbaseKey);\n+    keystore.AddCScript(p2pk_scriptPubKey);\n+\n+    // flags to test: SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, SCRIPT_VERIFY_CHECKSEQUENCE_VERIFY, SCRIPT_VERIFY_NULLDUMMY, uncompressed pubkey thing\n+\n+    // Create 2 outputs that match the three scripts above, spending the first\n+    // coinbase tx.\n+    CMutableTransaction spend_tx;\n+\n+    spend_tx.nVersion = 1;\n+    spend_tx.vin.resize(1);\n+    spend_tx.vin[0].prevout.hash = coinbaseTxns[0].GetHash();\n+    spend_tx.vin[0].prevout.n = 0;\n+    spend_tx.vout.resize(4);\n+    spend_tx.vout[0].nValue = 11*CENT;\n+    spend_tx.vout[0].scriptPubKey = p2sh_scriptPubKey;\n+    spend_tx.vout[1].nValue = 11*CENT;\n+    spend_tx.vout[1].scriptPubKey = p2wpkh_scriptPubKey;\n+    spend_tx.vout[2].nValue = 11*CENT;\n+    spend_tx.vout[2].scriptPubKey = CScript() << OP_CHECKLOCKTIMEVERIFY << OP_DROP << ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n+    spend_tx.vout[3].nValue = 11*CENT;\n+    spend_tx.vout[3].scriptPubKey = CScript() << OP_CHECKSEQUENCEVERIFY << OP_DROP << ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n+\n+    // Sign, with a non-DER signature\n+    {\n+        std::vector<unsigned char> vchSig;\n+        uint256 hash = SignatureHash(p2pk_scriptPubKey, spend_tx, 0, SIGHASH_ALL, 0, SIGVERSION_BASE);\n+        BOOST_CHECK(coinbaseKey.Sign(hash, vchSig));\n+        vchSig.push_back((unsigned char) 0); // padding byte makes this non-DER\n+        vchSig.push_back((unsigned char)SIGHASH_ALL);\n+        spend_tx.vin[0].scriptSig << vchSig;\n+    }\n+\n+    LOCK(cs_main);\n+\n+    // Test that invalidity under a set of flags doesn't preclude validity\n+    // under other (eg consensus) flags.\n+    // spend_tx is invalid according to DERSIG\n+    CValidationState state;\n+    {\n+        PrecomputedTransactionData ptd_spend_tx(spend_tx);\n+\n+        BOOST_CHECK(!CheckInputs(spend_tx, state, pcoinsTip, true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_DERSIG, true, true, ptd_spend_tx, nullptr));\n+\n+        // If we call again asking for scriptchecks (as happens in\n+        // ConnectBlock), we should add a script check object for this -- we're\n+        // not caching invalidity (if that changes, delete this test case).\n+        std::vector<CScriptCheck> scriptchecks;\n+        BOOST_CHECK(CheckInputs(spend_tx, state, pcoinsTip, true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_DERSIG, true, true, ptd_spend_tx, &scriptchecks));\n+        BOOST_CHECK_EQUAL(scriptchecks.size(), 1);\n+\n+        // Test that CheckInputs returns true iff DERSIG-enforcing flags are\n+        // not present.  Don't add these checks to the cache, so that we can\n+        // test later that block validation works fine in the absence of cached\n+        // successes.\n+        ValidateCheckInputsForAllFlags(spend_tx, SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC, false, false);\n+\n+        // And if we produce a block with this tx, it should be valid (DERSIG not\n+        // enabled yet), even though there's no cache entry.\n+        CBlock block;\n+\n+        block = CreateAndProcessBlock({spend_tx}, p2pk_scriptPubKey);\n+        BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block.GetHash());\n+        BOOST_CHECK(pcoinsTip->GetBestBlock() == block.GetHash());\n+    }\n+\n+    // Test P2SH: construct a transaction that is valid without P2SH, and\n+    // then test validity with P2SH.\n+    {\n+        CMutableTransaction invalid_under_p2sh_tx;\n+        invalid_under_p2sh_tx.nVersion = 1;\n+        invalid_under_p2sh_tx.vin.resize(1);\n+        invalid_under_p2sh_tx.vin[0].prevout.hash = spend_tx.GetHash();\n+        invalid_under_p2sh_tx.vin[0].prevout.n = 0;\n+        invalid_under_p2sh_tx.vout.resize(1);\n+        invalid_under_p2sh_tx.vout[0].nValue = 11*CENT;\n+        invalid_under_p2sh_tx.vout[0].scriptPubKey = p2pk_scriptPubKey;\n+        std::vector<unsigned char> vchSig2(p2pk_scriptPubKey.begin(), p2pk_scriptPubKey.end());\n+        invalid_under_p2sh_tx.vin[0].scriptSig << vchSig2;\n+\n+        ValidateCheckInputsForAllFlags(invalid_under_p2sh_tx, SCRIPT_VERIFY_P2SH, true, false);\n+    }\n+\n+    // Test CHECKLOCKTIMEVERIFY\n+    {\n+        CMutableTransaction invalid_with_cltv_tx;\n+        invalid_with_cltv_tx.nVersion = 1;\n+        invalid_with_cltv_tx.nLockTime = 100;\n+        invalid_with_cltv_tx.vin.resize(1);\n+        invalid_with_cltv_tx.vin[0].prevout.hash = spend_tx.GetHash();\n+        invalid_with_cltv_tx.vin[0].prevout.n = 2;\n+        invalid_with_cltv_tx.vin[0].nSequence = 0;\n+        invalid_with_cltv_tx.vout.resize(1);\n+        invalid_with_cltv_tx.vout[0].nValue = 11*CENT;\n+        invalid_with_cltv_tx.vout[0].scriptPubKey = p2pk_scriptPubKey;\n+\n+        // Sign\n+        std::vector<unsigned char> vchSig;\n+        uint256 hash = SignatureHash(spend_tx.vout[2].scriptPubKey, invalid_with_cltv_tx, 0, SIGHASH_ALL, 0, SIGVERSION_BASE);\n+        BOOST_CHECK(coinbaseKey.Sign(hash, vchSig));\n+        vchSig.push_back((unsigned char)SIGHASH_ALL);\n+        invalid_with_cltv_tx.vin[0].scriptSig = CScript() << vchSig << 101;\n+\n+        ValidateCheckInputsForAllFlags(invalid_with_cltv_tx, SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, true, true);\n+\n+        // Make it valid, and check again\n+        invalid_with_cltv_tx.vin[0].scriptSig = CScript() << vchSig << 100;\n+        CValidationState state;\n+        PrecomputedTransactionData txdata(invalid_with_cltv_tx);\n+        BOOST_CHECK(CheckInputs(invalid_with_cltv_tx, state, pcoinsTip, true, SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, true, true, txdata, nullptr));\n+    }\n+\n+    // TEST CHECKSEQUENCEVERIFY\n+    {\n+        CMutableTransaction invalid_with_csv_tx;\n+        invalid_with_csv_tx.nVersion = 2;\n+        invalid_with_csv_tx.vin.resize(1);\n+        invalid_with_csv_tx.vin[0].prevout.hash = spend_tx.GetHash();\n+        invalid_with_csv_tx.vin[0].prevout.n = 3;\n+        invalid_with_csv_tx.vin[0].nSequence = 100;\n+        invalid_with_csv_tx.vout.resize(1);\n+        invalid_with_csv_tx.vout[0].nValue = 11*CENT;\n+        invalid_with_csv_tx.vout[0].scriptPubKey = p2pk_scriptPubKey;\n+\n+        // Sign\n+        std::vector<unsigned char> vchSig;\n+        uint256 hash = SignatureHash(spend_tx.vout[3].scriptPubKey, invalid_with_csv_tx, 0, SIGHASH_ALL, 0, SIGVERSION_BASE);\n+        BOOST_CHECK(coinbaseKey.Sign(hash, vchSig));\n+        vchSig.push_back((unsigned char)SIGHASH_ALL);\n+        invalid_with_csv_tx.vin[0].scriptSig = CScript() << vchSig << 101;\n+\n+        ValidateCheckInputsForAllFlags(invalid_with_csv_tx, SCRIPT_VERIFY_CHECKSEQUENCEVERIFY, true, true);\n+\n+        // Make it valid, and check again\n+        invalid_with_csv_tx.vin[0].scriptSig = CScript() << vchSig << 100;\n+        CValidationState state;\n+        PrecomputedTransactionData txdata(invalid_with_csv_tx);\n+        BOOST_CHECK(CheckInputs(invalid_with_csv_tx, state, pcoinsTip, true, SCRIPT_VERIFY_CHECKSEQUENCEVERIFY, true, true, txdata, nullptr));\n+    }\n+\n+    // TODO: add tests for remaining script flags\n+\n+    // Test that passing CheckInputs with a valid witness doesn't imply success\n+    // for the same tx with a different witness.\n+    {\n+        CMutableTransaction valid_with_witness_tx;\n+        valid_with_witness_tx.nVersion = 1;\n+        valid_with_witness_tx.vin.resize(1);\n+        valid_with_witness_tx.vin[0].prevout.hash = spend_tx.GetHash();\n+        valid_with_witness_tx.vin[0].prevout.n = 1;\n+        valid_with_witness_tx.vout.resize(1);\n+        valid_with_witness_tx.vout[0].nValue = 11*CENT;\n+        valid_with_witness_tx.vout[0].scriptPubKey = p2pk_scriptPubKey;\n+\n+        // Sign\n+        SignatureData sigdata;\n+        ProduceSignature(MutableTransactionSignatureCreator(&keystore, &valid_with_witness_tx, 0, 11*CENT, SIGHASH_ALL), spend_tx.vout[1].scriptPubKey, sigdata);\n+        UpdateTransaction(valid_with_witness_tx, 0, sigdata);\n+\n+        // This should be valid under all script flags.\n+        ValidateCheckInputsForAllFlags(valid_with_witness_tx, 0, true, false);\n+\n+        // Remove the witness, and check that it is now invalid.\n+        valid_with_witness_tx.vin[0].scriptWitness.SetNull();\n+        ValidateCheckInputsForAllFlags(valid_with_witness_tx, SCRIPT_VERIFY_WITNESS, true, false);\n+    }\n+\n+    {\n+        // Test a transaction with multiple inputs.\n+        CMutableTransaction tx;\n+\n+        tx.nVersion = 1;\n+        tx.vin.resize(2);\n+        tx.vin[0].prevout.hash = spend_tx.GetHash();\n+        tx.vin[0].prevout.n = 0;\n+        tx.vin[1].prevout.hash = spend_tx.GetHash();\n+        tx.vin[1].prevout.n = 1;\n+        tx.vout.resize(1);\n+        tx.vout[0].nValue = 22*CENT;\n+        tx.vout[0].scriptPubKey = p2pk_scriptPubKey;\n+\n+        // Sign\n+        for (int i=0; i<2; ++i) {\n+            SignatureData sigdata;\n+            ProduceSignature(MutableTransactionSignatureCreator(&keystore, &tx, i, 11*CENT, SIGHASH_ALL), spend_tx.vout[i].scriptPubKey, sigdata);\n+            UpdateTransaction(tx, i, sigdata);\n+        }\n+\n+        // This should be valid under all script flags\n+        ValidateCheckInputsForAllFlags(tx, 0, true, false);\n+\n+        // Check that if the second input is invalid, but the first input is\n+        // valid, the transaction is not cached.\n+        // Invalidate vin[1]\n+        tx.vin[1].scriptWitness.SetNull();\n+\n+        CValidationState state;\n+        PrecomputedTransactionData txdata(tx);\n+        // This transaction is now invalid under segwit, because of the second input.\n+        BOOST_CHECK(!CheckInputs(tx, state, pcoinsTip, true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true, true, txdata, nullptr));\n+\n+        std::vector<CScriptCheck> scriptchecks;\n+        // Make sure this transaction was not cached (ie because the first\n+        // input was valid)\n+        BOOST_CHECK(CheckInputs(tx, state, pcoinsTip, true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true, true, txdata, &scriptchecks));\n+        // Should get 2 script checks back -- caching is on a whole-transaction basis.\n+        BOOST_CHECK_EQUAL(scriptchecks.size(), 2);\n+    }\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "d32ba6933696e79c2a1a23168e00f945f9207b93",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3f9c05b966622146e090f2a01a913516ccb874a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3f9c05b966622146e090f2a01a913516ccb874a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e3f9c05b966622146e090f2a01a913516ccb874a",
        "patch": "@@ -190,7 +190,7 @@ enum FlushStateMode {\n static bool FlushStateToDisk(const CChainParams& chainParams, CValidationState &state, FlushStateMode mode, int nManualPruneHeight=0);\n static void FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPruneHeight);\n static void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight);\n-static bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks = nullptr);\n+bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks = nullptr);\n static FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n \n bool CheckFinalTx(const CTransaction &tx, int flags)\n@@ -1232,8 +1232,10 @@ void InitScriptExecutionCache() {\n  * Setting cacheSigStore/cacheFullScriptStore to false will remove elements from the corresponding cache\n  * which are matched. This is useful for checking blocks where we will likely never need the cache\n  * entry again.\n+ *\n+ * Non-static (and re-declared) in src/test/txvalidationcache_tests.cpp\n  */\n-static bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks)\n+bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks)\n {\n     if (!tx.IsCoinBase())\n     {"
      }
    ]
  },
  {
    "sha": "21d4afa12fbf1e7f59b629060c9e10db213fe07a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMWQ0YWZhMTJmYmYxZTdmNTliNjI5MDYwYzllMTBkYjIxM2ZlMDdh",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-08T16:15:04Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-27T20:08:06Z"
      },
      "message": "Comment clarifications in coins.cpp",
      "tree": {
        "sha": "b33e4fcb3dba39c7c4ba5106d3ba5e0a296347ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b33e4fcb3dba39c7c4ba5106d3ba5e0a296347ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/21d4afa12fbf1e7f59b629060c9e10db213fe07a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21d4afa12fbf1e7f59b629060c9e10db213fe07a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/21d4afa12fbf1e7f59b629060c9e10db213fe07a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21d4afa12fbf1e7f59b629060c9e10db213fe07a/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c8a9aefff3a600bef3da63c560f62af9e5582d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c8a9aefff3a600bef3da63c560f62af9e5582d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c8a9aefff3a600bef3da63c560f62af9e5582d6"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7c1d6da2be5d2ee31f879fbfd712704feb3f684c",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d4afa12fbf1e7f59b629060c9e10db213fe07a/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d4afa12fbf1e7f59b629060c9e10db213fe07a/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=21d4afa12fbf1e7f59b629060c9e10db213fe07a",
        "patch": "@@ -297,6 +297,9 @@ class CCoinsViewCache : public CCoinsViewBacked\n void AddCoins(CCoinsViewCache& cache, const CTransaction& tx, int nHeight);\n \n //! Utility function to find any unspent output with a given txid.\n+// This function can be quite expensive because in the event of a transaction\n+// which is not found in the cache, it can cause up to MAX_OUTPUTS_PER_BLOCK\n+// lookups to database, so it should be used with care.\n const Coin& AccessByTxid(const CCoinsViewCache& cache, const uint256& txid);\n \n #endif // BITCOIN_COINS_H"
      }
    ]
  },
  {
    "sha": "aa95947ded93e7e45f222f255baf186433cc11fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTk1OTQ3ZGVkOTNlN2U0NWYyMjJmMjU1YmFmMTg2NDMzY2MxMWZj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-06-20T19:58:56Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-06-28T00:12:06Z"
      },
      "message": "Use the override specifier (C++11) where we expect to be overriding the virtual function of a base class",
      "tree": {
        "sha": "5c57ac83b17f7d0ac6095a8e36c359e5f3121ae6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c57ac83b17f7d0ac6095a8e36c359e5f3121ae6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa95947ded93e7e45f222f255baf186433cc11fc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa95947ded93e7e45f222f255baf186433cc11fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa95947ded93e7e45f222f255baf186433cc11fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa95947ded93e7e45f222f255baf186433cc11fc/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "acb11535cb8499fd47fdde7f52457f8945b58856",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acb11535cb8499fd47fdde7f52457f8945b58856",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/acb11535cb8499fd47fdde7f52457f8945b58856"
      }
    ],
    "stats": {
      "total": 136,
      "additions": 68,
      "deletions": 68
    },
    "files": [
      {
        "sha": "8c2e0da32fd166f9af9a787e360d7697b81379f4",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -47,11 +47,11 @@ class HTTPRPCTimerInterface : public RPCTimerInterface\n     HTTPRPCTimerInterface(struct event_base* _base) : base(_base)\n     {\n     }\n-    const char* Name()\n+    const char* Name() override\n     {\n         return \"HTTP\";\n     }\n-    RPCTimerBase* NewTimer(std::function<void(void)>& func, int64_t millis)\n+    RPCTimerBase* NewTimer(std::function<void(void)>& func, int64_t millis) override\n     {\n         return new HTTPRPCTimer(base, func, millis);\n     }"
      },
      {
        "sha": "1c53d8d49d2a16da4b8a5940aae9225032d75911",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -46,7 +46,7 @@ class HTTPWorkItem : public HTTPClosure\n         req(std::move(_req)), path(_path), func(_func)\n     {\n     }\n-    void operator()()\n+    void operator()() override\n     {\n         func(req.get(), path);\n     }"
      },
      {
        "sha": "965ae0c79ad865193afe0fb7041ca2c0ffe5f751",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -60,9 +60,9 @@ class CBasicKeyStore : public CKeyStore\n     WatchOnlySet setWatchOnly;\n \n public:\n-    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n-    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n-    bool HaveKey(const CKeyID &address) const\n+    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n+    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n+    bool HaveKey(const CKeyID &address) const override\n     {\n         bool result;\n         {\n@@ -71,7 +71,7 @@ class CBasicKeyStore : public CKeyStore\n         }\n         return result;\n     }\n-    void GetKeys(std::set<CKeyID> &setAddress) const\n+    void GetKeys(std::set<CKeyID> &setAddress) const override\n     {\n         setAddress.clear();\n         {\n@@ -84,7 +84,7 @@ class CBasicKeyStore : public CKeyStore\n             }\n         }\n     }\n-    bool GetKey(const CKeyID &address, CKey &keyOut) const\n+    bool GetKey(const CKeyID &address, CKey &keyOut) const override\n     {\n         {\n             LOCK(cs_KeyStore);\n@@ -97,14 +97,14 @@ class CBasicKeyStore : public CKeyStore\n         }\n         return false;\n     }\n-    virtual bool AddCScript(const CScript& redeemScript);\n-    virtual bool HaveCScript(const CScriptID &hash) const;\n-    virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const;\n+    virtual bool AddCScript(const CScript& redeemScript) override;\n+    virtual bool HaveCScript(const CScriptID &hash) const override;\n+    virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const override;\n \n-    virtual bool AddWatchOnly(const CScript &dest);\n-    virtual bool RemoveWatchOnly(const CScript &dest);\n-    virtual bool HaveWatchOnly(const CScript &dest) const;\n-    virtual bool HaveWatchOnly() const;\n+    virtual bool AddWatchOnly(const CScript &dest) override;\n+    virtual bool RemoveWatchOnly(const CScript &dest) override;\n+    virtual bool HaveWatchOnly(const CScript &dest) const override;\n+    virtual bool HaveWatchOnly() const override;\n };\n \n typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;"
      },
      {
        "sha": "ab1dc4e681b4c628898ff3a6885b9154b9e62df7",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -160,9 +160,9 @@ class TransactionSignatureChecker : public BaseSignatureChecker\n public:\n     TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn) : txTo(txToIn), nIn(nInIn), amount(amountIn), txdata(NULL) {}\n     TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, const PrecomputedTransactionData& txdataIn) : txTo(txToIn), nIn(nInIn), amount(amountIn), txdata(&txdataIn) {}\n-    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const;\n-    bool CheckLockTime(const CScriptNum& nLockTime) const;\n-    bool CheckSequence(const CScriptNum& nSequence) const;\n+    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const override;\n+    bool CheckLockTime(const CScriptNum& nLockTime) const override;\n+    bool CheckSequence(const CScriptNum& nSequence) const override;\n };\n \n class MutableTransactionSignatureChecker : public TransactionSignatureChecker"
      },
      {
        "sha": "5832b264b36fdb344f3dd63d7645f21c6e0e4841",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -48,7 +48,7 @@ class CachingTransactionSignatureChecker : public TransactionSignatureChecker\n public:\n     CachingTransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, bool storeIn, PrecomputedTransactionData& txdataIn) : TransactionSignatureChecker(txToIn, nInIn, amountIn, txdataIn), store(storeIn) {}\n \n-    bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n+    bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const override;\n };\n \n void InitSignatureCache();"
      },
      {
        "sha": "ec93c5451b0cc3be2430a9c2795983f5ddb255bc",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -393,7 +393,7 @@ class DummySignatureChecker : public BaseSignatureChecker\n public:\n     DummySignatureChecker() {}\n \n-    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const\n+    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const override\n     {\n         return true;\n     }"
      },
      {
        "sha": "bd458628922253fe2e85a87019102b678819b628",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -40,8 +40,8 @@ class TransactionSignatureCreator : public BaseSignatureCreator {\n \n public:\n     TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn=SIGHASH_ALL);\n-    const BaseSignatureChecker& Checker() const { return checker; }\n-    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const;\n+    const BaseSignatureChecker& Checker() const override { return checker; }\n+    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;\n };\n \n class MutableTransactionSignatureCreator : public TransactionSignatureCreator {\n@@ -55,8 +55,8 @@ class MutableTransactionSignatureCreator : public TransactionSignatureCreator {\n class DummySignatureCreator : public BaseSignatureCreator {\n public:\n     DummySignatureCreator(const CKeyStore* keystoreIn) : BaseSignatureCreator(keystoreIn) {}\n-    const BaseSignatureChecker& Checker() const;\n-    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const;\n+    const BaseSignatureChecker& Checker() const override;\n+    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;\n };\n \n struct SignatureData {"
      },
      {
        "sha": "2df6b84a5997bfd1dbdaca1555e07899944f14a8",
        "filename": "src/support/lockedpool.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/support/lockedpool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/support/lockedpool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/lockedpool.cpp?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -148,9 +148,9 @@ class Win32LockedPageAllocator: public LockedPageAllocator\n {\n public:\n     Win32LockedPageAllocator();\n-    void* AllocateLocked(size_t len, bool *lockingSuccess);\n-    void FreeLocked(void* addr, size_t len);\n-    size_t GetLimit();\n+    void* AllocateLocked(size_t len, bool *lockingSuccess) override;\n+    void FreeLocked(void* addr, size_t len) override;\n+    size_t GetLimit() override;\n private:\n     size_t page_size;\n };\n@@ -200,9 +200,9 @@ class PosixLockedPageAllocator: public LockedPageAllocator\n {\n public:\n     PosixLockedPageAllocator();\n-    void* AllocateLocked(size_t len, bool *lockingSuccess);\n-    void FreeLocked(void* addr, size_t len);\n-    size_t GetLimit();\n+    void* AllocateLocked(size_t len, bool *lockingSuccess) override;\n+    void FreeLocked(void* addr, size_t len) override;\n+    size_t GetLimit() override;\n private:\n     size_t page_size;\n };"
      },
      {
        "sha": "bc6aef2c1152fbb470ff8512f1f5130a2fa29144",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -27,7 +27,7 @@ class CAddrManTest : public CAddrMan\n         insecure_rand = FastRandomContext(true);\n     }\n \n-    int RandomInt(int nMax)\n+    int RandomInt(int nMax) override\n     {\n         state = (CHashWriter(SER_GETHASH, 0) << state).GetHash().GetCheapHash();\n         return (unsigned int)(state % nMax);"
      },
      {
        "sha": "4a533b5bf2fb5cbb376ef6b0db8b648649c4aa9a",
        "filename": "src/test/allocator_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/test/allocator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/test/allocator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/allocator_tests.cpp?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -131,7 +131,7 @@ class TestLockedPageAllocator: public LockedPageAllocator\n {\n public:\n     TestLockedPageAllocator(int count_in, int lockedcount_in): count(count_in), lockedcount(lockedcount_in) {}\n-    void* AllocateLocked(size_t len, bool *lockingSuccess)\n+    void* AllocateLocked(size_t len, bool *lockingSuccess) override\n     {\n         *lockingSuccess = false;\n         if (count > 0) {\n@@ -146,10 +146,10 @@ class TestLockedPageAllocator: public LockedPageAllocator\n         }\n         return 0;\n     }\n-    void FreeLocked(void* addr, size_t len)\n+    void FreeLocked(void* addr, size_t len) override\n     {\n     }\n-    size_t GetLimit()\n+    size_t GetLimit() override\n     {\n         return std::numeric_limits<size_t>::max();\n     }"
      },
      {
        "sha": "095d86834c0b3711512a8708b78d62275a78f4fe",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -29,7 +29,7 @@ class CAddrManSerializationMock : public CAddrMan\n class CAddrManUncorrupted : public CAddrManSerializationMock\n {\n public:\n-    void Serialize(CDataStream& s) const\n+    void Serialize(CDataStream& s) const override\n     {\n         CAddrMan::Serialize(s);\n     }\n@@ -38,7 +38,7 @@ class CAddrManUncorrupted : public CAddrManSerializationMock\n class CAddrManCorrupted : public CAddrManSerializationMock\n {\n public:\n-    void Serialize(CDataStream& s) const\n+    void Serialize(CDataStream& s) const override\n     {\n         // Produces corrupt output that claims addrman has 20 addrs when it only has one addr.\n         unsigned char nVersion = 1;"
      },
      {
        "sha": "722f6ae059ce4d8fc49fc8bc0e52a12a33b5c62a",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -22,11 +22,11 @@ class TestConditionChecker : public AbstractThresholdConditionChecker\n     mutable ThresholdConditionCache cache;\n \n public:\n-    int64_t BeginTime(const Consensus::Params& params) const { return TestTime(10000); }\n-    int64_t EndTime(const Consensus::Params& params) const { return TestTime(20000); }\n-    int Period(const Consensus::Params& params) const { return 1000; }\n-    int Threshold(const Consensus::Params& params) const { return 900; }\n-    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const { return (pindex->nVersion & 0x100); }\n+    int64_t BeginTime(const Consensus::Params& params) const override { return TestTime(10000); }\n+    int64_t EndTime(const Consensus::Params& params) const override { return TestTime(20000); }\n+    int Period(const Consensus::Params& params) const override { return 1000; }\n+    int Threshold(const Consensus::Params& params) const override { return 900; }\n+    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const override { return (pindex->nVersion & 0x100); }\n \n     ThresholdState GetStateFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateFor(pindexPrev, paramsDummy, cache); }\n     int GetStateSinceHeightFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateSinceHeightFor(pindexPrev, paramsDummy, cache); }"
      },
      {
        "sha": "b14a0af147e490c00c150a58c55ad0be6406fc67",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -88,12 +88,12 @@ class CCoinsViewDBCursor: public CCoinsViewCursor\n public:\n     ~CCoinsViewDBCursor() {}\n \n-    bool GetKey(COutPoint &key) const;\n-    bool GetValue(Coin &coin) const;\n-    unsigned int GetValueSize() const;\n+    bool GetKey(COutPoint &key) const override;\n+    bool GetValue(Coin &coin) const override;\n+    unsigned int GetValueSize() const override;\n \n-    bool Valid() const;\n-    void Next();\n+    bool Valid() const override;\n+    void Next() override;\n \n private:\n     CCoinsViewDBCursor(CDBIterator* pcursorIn, const uint256 &hashBlockIn):"
      },
      {
        "sha": "8d47b52ebec1162cb266a5e7527d0efbc9d88026",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -1462,12 +1462,12 @@ class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n public:\n     WarningBitsConditionChecker(int bitIn) : bit(bitIn) {}\n \n-    int64_t BeginTime(const Consensus::Params& params) const { return 0; }\n-    int64_t EndTime(const Consensus::Params& params) const { return std::numeric_limits<int64_t>::max(); }\n-    int Period(const Consensus::Params& params) const { return params.nMinerConfirmationWindow; }\n-    int Threshold(const Consensus::Params& params) const { return params.nRuleChangeActivationThreshold; }\n+    int64_t BeginTime(const Consensus::Params& params) const override { return 0; }\n+    int64_t EndTime(const Consensus::Params& params) const override { return std::numeric_limits<int64_t>::max(); }\n+    int Period(const Consensus::Params& params) const override { return params.nMinerConfirmationWindow; }\n+    int Threshold(const Consensus::Params& params) const override { return params.nRuleChangeActivationThreshold; }\n \n-    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const\n+    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const override\n     {\n         return ((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) &&\n                ((pindex->nVersion >> bit) & 1) != 0 &&"
      },
      {
        "sha": "8047e17aa826dab5f97848c2488a6ad273d17b3d",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -174,12 +174,12 @@ class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {\n     const Consensus::DeploymentPos id;\n \n protected:\n-    int64_t BeginTime(const Consensus::Params& params) const { return params.vDeployments[id].nStartTime; }\n-    int64_t EndTime(const Consensus::Params& params) const { return params.vDeployments[id].nTimeout; }\n-    int Period(const Consensus::Params& params) const { return params.nMinerConfirmationWindow; }\n-    int Threshold(const Consensus::Params& params) const { return params.nRuleChangeActivationThreshold; }\n+    int64_t BeginTime(const Consensus::Params& params) const override { return params.vDeployments[id].nStartTime; }\n+    int64_t EndTime(const Consensus::Params& params) const override { return params.vDeployments[id].nTimeout; }\n+    int Period(const Consensus::Params& params) const override { return params.nMinerConfirmationWindow; }\n+    int Threshold(const Consensus::Params& params) const override { return params.nRuleChangeActivationThreshold; }\n \n-    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const\n+    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const override\n     {\n         return (((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) && (pindex->nVersion & Mask(params)) != 0);\n     }"
      },
      {
        "sha": "1dc44e424f631f4cd419443a0b338fc68b9f9f47",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -157,8 +157,8 @@ class CCryptoKeyStore : public CBasicKeyStore\n     bool Lock();\n \n     virtual bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n-    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n-    bool HaveKey(const CKeyID &address) const\n+    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n+    bool HaveKey(const CKeyID &address) const override\n     {\n         {\n             LOCK(cs_KeyStore);\n@@ -168,9 +168,9 @@ class CCryptoKeyStore : public CBasicKeyStore\n         }\n         return false;\n     }\n-    bool GetKey(const CKeyID &address, CKey& keyOut) const;\n-    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n-    void GetKeys(std::set<CKeyID> &setAddress) const\n+    bool GetKey(const CKeyID &address, CKey& keyOut) const override;\n+    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n+    void GetKeys(std::set<CKeyID> &setAddress) const override\n     {\n         if (!IsCrypted())\n         {"
      },
      {
        "sha": "a3fd7408a0e38f01583a6df0bc52335cfb823c45",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -1153,7 +1153,7 @@ class CReserveKey : public CReserveScript\n     void ReturnKey();\n     bool GetReservedKey(CPubKey &pubkey, bool internal = false);\n     void KeepKey();\n-    void KeepScript() { KeepKey(); }\n+    void KeepScript() override { KeepKey(); }\n };\n \n "
      },
      {
        "sha": "1790fe56982a1a34c0521ce9c70bf910e0da765f",
        "filename": "src/zmq/zmqpublishnotifier.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/zmq/zmqpublishnotifier.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/zmq/zmqpublishnotifier.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqpublishnotifier.h?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -24,32 +24,32 @@ class CZMQAbstractPublishNotifier : public CZMQAbstractNotifier\n     */\n     bool SendMessage(const char *command, const void* data, size_t size);\n \n-    bool Initialize(void *pcontext);\n-    void Shutdown();\n+    bool Initialize(void *pcontext) override;\n+    void Shutdown() override;\n };\n \n class CZMQPublishHashBlockNotifier : public CZMQAbstractPublishNotifier\n {\n public:\n-    bool NotifyBlock(const CBlockIndex *pindex);\n+    bool NotifyBlock(const CBlockIndex *pindex) override;\n };\n \n class CZMQPublishHashTransactionNotifier : public CZMQAbstractPublishNotifier\n {\n public:\n-    bool NotifyTransaction(const CTransaction &transaction);\n+    bool NotifyTransaction(const CTransaction &transaction) override;\n };\n \n class CZMQPublishRawBlockNotifier : public CZMQAbstractPublishNotifier\n {\n public:\n-    bool NotifyBlock(const CBlockIndex *pindex);\n+    bool NotifyBlock(const CBlockIndex *pindex) override;\n };\n \n class CZMQPublishRawTransactionNotifier : public CZMQAbstractPublishNotifier\n {\n public:\n-    bool NotifyTransaction(const CTransaction &transaction);\n+    bool NotifyTransaction(const CTransaction &transaction) override;\n };\n \n #endif // BITCOIN_ZMQ_ZMQPUBLISHNOTIFIER_H"
      }
    ]
  },
  {
    "sha": "3c85332f2928489964c4a5cff66f7119892e7a17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzg1MzMyZjI5Mjg0ODk5NjRjNGE1Y2ZmNjZmNzExOTg5MmU3YTE3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-28T07:02:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-28T07:05:28Z"
      },
      "message": "contrib: Update laanwj key\n\nI recently added a signing subkey, which is used to sign gitian\nasserts as well as commits.\n\nOld:\n```\npub  rsa2048/0x74810B012346C9A6 2011-08-24\nuid                             Wladimir J. van der Laan <laanwj@gmail.com>\nsub  rsa2048/0xF69705ED890DE427 2011-08-24\n```\n\nNew:\n```\npub  rsa2048/0x74810B012346C9A6 2011-08-24 [expires: 2019-02-14]\nuid                             Wladimir J. van der Laan <laanwj@visucore.com>\nuid                             Wladimir J. van der Laan <laanwj@gmail.com>\nsub  rsa2048/0xF69705ED890DE427 2011-08-24\nsub  rsa2048/0x1E4AED62986CD25D 2017-05-17 [expires: 2019-05-17]\nsub  rsa2048/0x69B4C4CDC628F8F9 2017-05-17 [expires: 2019-05-17]\n```",
      "tree": {
        "sha": "caca32f16fd27976726707b51d18718fbd235c46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/caca32f16fd27976726707b51d18718fbd235c46"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c85332f2928489964c4a5cff66f7119892e7a17",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZU1U6AAoJEB5K7WKYbNJd4gQIAMafjL+HoefAPKTKnzLQvzZE\nB4W3PkmMVthSm3neqqWacwyYBxos4HF+f+RAaCAn6N/cmyYMdFfzbJJv7VfiOhRD\n5V/DTBG8xQS+GU+jWqteLvdCMmsovbBKKMibwibzFiHLr5N0jTUS1OWB6lVy3ZTG\nh43z7DlMUSMIO2LkDTzCFzRSz4VfIWjkptSrZCRkFkRK0LypMJEcFefFdoLwFHxx\n2elAVHU4kotpTwQTvQzBRNfGK3BzvrLquhs6Rai1AG8G/3H/TIG0K10UxZF9CgH2\n7gK1eJgNr786p7IgB7Epb0YQzU+eMAIQRvDevlO+cHlsOq2lWU4dIglOn7h+VxU=\n=+Mtb\n-----END PGP SIGNATURE-----",
        "payload": "tree caca32f16fd27976726707b51d18718fbd235c46\nparent acb11535cb8499fd47fdde7f52457f8945b58856\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1498633340 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1498633528 +0200\n\ncontrib: Update laanwj key\n\nI recently added a signing subkey, which is used to sign gitian\nasserts as well as commits.\n\nOld:\n```\npub  rsa2048/0x74810B012346C9A6 2011-08-24\nuid                             Wladimir J. van der Laan <laanwj@gmail.com>\nsub  rsa2048/0xF69705ED890DE427 2011-08-24\n```\n\nNew:\n```\npub  rsa2048/0x74810B012346C9A6 2011-08-24 [expires: 2019-02-14]\nuid                             Wladimir J. van der Laan <laanwj@visucore.com>\nuid                             Wladimir J. van der Laan <laanwj@gmail.com>\nsub  rsa2048/0xF69705ED890DE427 2011-08-24\nsub  rsa2048/0x1E4AED62986CD25D 2017-05-17 [expires: 2019-05-17]\nsub  rsa2048/0x69B4C4CDC628F8F9 2017-05-17 [expires: 2019-05-17]\n```\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c85332f2928489964c4a5cff66f7119892e7a17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c85332f2928489964c4a5cff66f7119892e7a17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c85332f2928489964c4a5cff66f7119892e7a17/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "acb11535cb8499fd47fdde7f52457f8945b58856",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acb11535cb8499fd47fdde7f52457f8945b58856",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/acb11535cb8499fd47fdde7f52457f8945b58856"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": [
      {
        "sha": "eed232a8722de569dc75dc97fc926e18b060898a",
        "filename": "contrib/gitian-keys/laanwj-key.pgp",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c85332f2928489964c4a5cff66f7119892e7a17/contrib/gitian-keys/laanwj-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c85332f2928489964c4a5cff66f7119892e7a17/contrib/gitian-keys/laanwj-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/laanwj-key.pgp?ref=3c85332f2928489964c4a5cff66f7119892e7a17"
      }
    ]
  },
  {
    "sha": "a381f6a5bdc2d5da7e4df64f230eb03f8c04cc12",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzgxZjZhNWJkYzJkNWRhN2U0ZGY2NGYyMzBlYjAzZjhjMDRjYzEy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-28T07:13:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-28T07:21:38Z"
      },
      "message": "Merge #10684: Remove no longer used mempool.exists(outpoint)\n\n22378ad Remove no longer used mempool.exists(outpoint) (Alex Morcos)\n\nTree-SHA512: e98ffdf9039a1bdd84a388dc2da43221b8850bab413dffbd18c20fb06c791ff364f824d1b3b7c0a696987ae126e52b4ee200bb63c5c46e9782c1973c6d888d32",
      "tree": {
        "sha": "518cad479d9a8ba546dad69358e6e8054ec973ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/518cad479d9a8ba546dad69358e6e8054ec973ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a381f6a5bdc2d5da7e4df64f230eb03f8c04cc12",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZU1kCAAoJEB5K7WKYbNJdXikH/jpB7xI4WqfRg8JqVY3cZ7X6\ncgQv0i4InplVqHPYx+EyDwXPn5FY2Ky2QH33FY9NyrCCz5XfwWnui//2VYi4wBQm\no/4CeqogYcMP6E9xWWn7z+Fjuh0ceT9Oz7mk2cOU6uuWEiCdXXJRsqLeXnhoRzxU\n3uVgT+rMq2c9T9gIhs4yS4HTX0T34HSEAQol8zyTdpmnXXQOuHqe9lZDxSspSiJi\nX6gmewxSAuUjjN7Fv0oO8mlos978bp+p6e1gxdZ6+volb40+atdPc6pPd5olWeN8\n+0UA08ai0vTz6YrujS07P2przwbI9bdh7EPvecCsv8vOy/X2yeHn84n9Z2sG7sg=\n=nFgK\n-----END PGP SIGNATURE-----",
        "payload": "tree 518cad479d9a8ba546dad69358e6e8054ec973ec\nparent acb11535cb8499fd47fdde7f52457f8945b58856\nparent 22378adbe5c7c723c2fa91c162e37a2ae1f80fb3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1498634022 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1498634498 +0200\n\nMerge #10684: Remove no longer used mempool.exists(outpoint)\n\n22378ad Remove no longer used mempool.exists(outpoint) (Alex Morcos)\n\nTree-SHA512: e98ffdf9039a1bdd84a388dc2da43221b8850bab413dffbd18c20fb06c791ff364f824d1b3b7c0a696987ae126e52b4ee200bb63c5c46e9782c1973c6d888d32\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a381f6a5bdc2d5da7e4df64f230eb03f8c04cc12",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a381f6a5bdc2d5da7e4df64f230eb03f8c04cc12",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a381f6a5bdc2d5da7e4df64f230eb03f8c04cc12/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "acb11535cb8499fd47fdde7f52457f8945b58856",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acb11535cb8499fd47fdde7f52457f8945b58856",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/acb11535cb8499fd47fdde7f52457f8945b58856"
      },
      {
        "sha": "22378adbe5c7c723c2fa91c162e37a2ae1f80fb3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22378adbe5c7c723c2fa91c162e37a2ae1f80fb3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22378adbe5c7c723c2fa91c162e37a2ae1f80fb3"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 0,
      "deletions": 7
    },
    "files": [
      {
        "sha": "be9e83eb4bf067f8128864a4cdec8556704d51f5",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a381f6a5bdc2d5da7e4df64f230eb03f8c04cc12/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a381f6a5bdc2d5da7e4df64f230eb03f8c04cc12/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=a381f6a5bdc2d5da7e4df64f230eb03f8c04cc12",
        "patch": "@@ -618,13 +618,6 @@ class CTxMemPool\n         return (mapTx.count(hash) != 0);\n     }\n \n-    bool exists(const COutPoint& outpoint) const\n-    {\n-        LOCK(cs);\n-        auto it = mapTx.find(outpoint.hash);\n-        return (it != mapTx.end() && outpoint.n < it->GetTx().vout.size());\n-    }\n-\n     CTransactionRef get(const uint256& hash) const;\n     TxMempoolInfo info(const uint256& hash) const;\n     std::vector<TxMempoolInfo> infoAll() const;"
      }
    ]
  },
  {
    "sha": "4ed36539bcdebb360c730b2492b6435d7cd2476c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZWQzNjUzOWJjZGViYjM2MGM3MzBiMjQ5MmI2NDM1ZDdjZDI0NzZj",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-06-28T12:53:20Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-06-28T12:53:20Z"
      },
      "message": "[qa] Bugfix: allow overriding extra_args in ComparisonTestFramework",
      "tree": {
        "sha": "ec6d94ac022b276338e858d425527bd6d7b6af9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec6d94ac022b276338e858d425527bd6d7b6af9d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ed36539bcdebb360c730b2492b6435d7cd2476c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ed36539bcdebb360c730b2492b6435d7cd2476c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4ed36539bcdebb360c730b2492b6435d7cd2476c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ed36539bcdebb360c730b2492b6435d7cd2476c/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "300f8e7a828f3ffaa3a3e9d979a6dc90f15d0203",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/300f8e7a828f3ffaa3a3e9d979a6dc90f15d0203",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/300f8e7a828f3ffaa3a3e9d979a6dc90f15d0203"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "439a9bb8baccdfc532cf3d3febe809447ade6dab",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ed36539bcdebb360c730b2492b6435d7cd2476c/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ed36539bcdebb360c730b2492b6435d7cd2476c/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=4ed36539bcdebb360c730b2492b6435d7cd2476c",
        "patch": "@@ -380,8 +380,10 @@ def add_options(self, parser):\n                           help=\"bitcoind binary to use for reference nodes (if any)\")\n \n     def setup_network(self):\n+        extra_args = [['-whitelist=127.0.0.1']]*self.num_nodes\n+        if hasattr(self, \"extra_args\"):\n+            extra_args = self.extra_args\n         self.nodes = self.start_nodes(\n-            self.num_nodes, self.options.tmpdir,\n-            extra_args=[['-whitelist=127.0.0.1']] * self.num_nodes,\n+            self.num_nodes, self.options.tmpdir, extra_args,\n             binary=[self.options.testbinary] +\n             [self.options.refbinary]*(self.num_nodes-1))"
      }
    ]
  },
  {
    "sha": "9a941a10101dc720d7d8b425f7778abf2a1b7c36",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YTk0MWExMDEwMWRjNzIwZDdkOGI0MjVmNzc3OGFiZjJhMWI3YzM2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-28T12:33:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-28T13:05:23Z"
      },
      "message": "Merge #10631: Use the override specifier (C++11) where we expect to be overriding the virtual function of a base class\n\naa95947 Use the override specifier (C++11) where we expect to be overriding the virtual function of a base class (practicalswift)\n\nTree-SHA512: 3835e9b4ceaa4b2db485a25dfa3e5fe50c2e3ecb22ca9d5331aed7728aa496d4378fb84c0a1a3c47b0adecc10a00bca99cc239cbaf94cf2ce5b4cda497db6023",
      "tree": {
        "sha": "b70c32af24d1a318dfcd39bb63e1e472566733ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b70c32af24d1a318dfcd39bb63e1e472566733ef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a941a10101dc720d7d8b425f7778abf2a1b7c36",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZU6mTAAoJEB5K7WKYbNJdA1oIALRUOa/c55+ayQTNrBzhiUpn\n1OybxMZtIJ1eehk/P6apB9kCC9gaT0YektCSyIvMkCHGwaWpZW7EjojpJD2l/itb\n4zu8ilbZIMFn7gjK4awNaGGosthyjtYSXa+Amf74Yuq17M8wH4reydQUurzSuxU3\nd9T9Z356LlQiEItXmSApPkMFwZUBuIpDO9rG0WrGT91HzLOTZtaAR8rmPm0YtWRf\ndxnXfWcr6iAlpBlPlfTuCIB5av9IcLWJT1iAN30UWXKjwcwSvycHxwNd/tf5LLYE\ngfucqaWi9MPk1Y9FUl+opT8XqGhiD5285EciULBTak1g845WS1t6Bg8dajog/Kg=\n=V/ry\n-----END PGP SIGNATURE-----",
        "payload": "tree b70c32af24d1a318dfcd39bb63e1e472566733ef\nparent a381f6a5bdc2d5da7e4df64f230eb03f8c04cc12\nparent aa95947ded93e7e45f222f255baf186433cc11fc\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1498653224 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1498655123 +0200\n\nMerge #10631: Use the override specifier (C++11) where we expect to be overriding the virtual function of a base class\n\naa95947 Use the override specifier (C++11) where we expect to be overriding the virtual function of a base class (practicalswift)\n\nTree-SHA512: 3835e9b4ceaa4b2db485a25dfa3e5fe50c2e3ecb22ca9d5331aed7728aa496d4378fb84c0a1a3c47b0adecc10a00bca99cc239cbaf94cf2ce5b4cda497db6023\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a941a10101dc720d7d8b425f7778abf2a1b7c36",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a941a10101dc720d7d8b425f7778abf2a1b7c36",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a941a10101dc720d7d8b425f7778abf2a1b7c36/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a381f6a5bdc2d5da7e4df64f230eb03f8c04cc12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a381f6a5bdc2d5da7e4df64f230eb03f8c04cc12",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a381f6a5bdc2d5da7e4df64f230eb03f8c04cc12"
      },
      {
        "sha": "aa95947ded93e7e45f222f255baf186433cc11fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa95947ded93e7e45f222f255baf186433cc11fc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa95947ded93e7e45f222f255baf186433cc11fc"
      }
    ],
    "stats": {
      "total": 136,
      "additions": 68,
      "deletions": 68
    },
    "files": [
      {
        "sha": "8c2e0da32fd166f9af9a787e360d7697b81379f4",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=9a941a10101dc720d7d8b425f7778abf2a1b7c36",
        "patch": "@@ -47,11 +47,11 @@ class HTTPRPCTimerInterface : public RPCTimerInterface\n     HTTPRPCTimerInterface(struct event_base* _base) : base(_base)\n     {\n     }\n-    const char* Name()\n+    const char* Name() override\n     {\n         return \"HTTP\";\n     }\n-    RPCTimerBase* NewTimer(std::function<void(void)>& func, int64_t millis)\n+    RPCTimerBase* NewTimer(std::function<void(void)>& func, int64_t millis) override\n     {\n         return new HTTPRPCTimer(base, func, millis);\n     }"
      },
      {
        "sha": "1c53d8d49d2a16da4b8a5940aae9225032d75911",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=9a941a10101dc720d7d8b425f7778abf2a1b7c36",
        "patch": "@@ -46,7 +46,7 @@ class HTTPWorkItem : public HTTPClosure\n         req(std::move(_req)), path(_path), func(_func)\n     {\n     }\n-    void operator()()\n+    void operator()() override\n     {\n         func(req.get(), path);\n     }"
      },
      {
        "sha": "965ae0c79ad865193afe0fb7041ca2c0ffe5f751",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=9a941a10101dc720d7d8b425f7778abf2a1b7c36",
        "patch": "@@ -60,9 +60,9 @@ class CBasicKeyStore : public CKeyStore\n     WatchOnlySet setWatchOnly;\n \n public:\n-    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n-    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n-    bool HaveKey(const CKeyID &address) const\n+    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n+    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n+    bool HaveKey(const CKeyID &address) const override\n     {\n         bool result;\n         {\n@@ -71,7 +71,7 @@ class CBasicKeyStore : public CKeyStore\n         }\n         return result;\n     }\n-    void GetKeys(std::set<CKeyID> &setAddress) const\n+    void GetKeys(std::set<CKeyID> &setAddress) const override\n     {\n         setAddress.clear();\n         {\n@@ -84,7 +84,7 @@ class CBasicKeyStore : public CKeyStore\n             }\n         }\n     }\n-    bool GetKey(const CKeyID &address, CKey &keyOut) const\n+    bool GetKey(const CKeyID &address, CKey &keyOut) const override\n     {\n         {\n             LOCK(cs_KeyStore);\n@@ -97,14 +97,14 @@ class CBasicKeyStore : public CKeyStore\n         }\n         return false;\n     }\n-    virtual bool AddCScript(const CScript& redeemScript);\n-    virtual bool HaveCScript(const CScriptID &hash) const;\n-    virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const;\n+    virtual bool AddCScript(const CScript& redeemScript) override;\n+    virtual bool HaveCScript(const CScriptID &hash) const override;\n+    virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const override;\n \n-    virtual bool AddWatchOnly(const CScript &dest);\n-    virtual bool RemoveWatchOnly(const CScript &dest);\n-    virtual bool HaveWatchOnly(const CScript &dest) const;\n-    virtual bool HaveWatchOnly() const;\n+    virtual bool AddWatchOnly(const CScript &dest) override;\n+    virtual bool RemoveWatchOnly(const CScript &dest) override;\n+    virtual bool HaveWatchOnly(const CScript &dest) const override;\n+    virtual bool HaveWatchOnly() const override;\n };\n \n typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;"
      },
      {
        "sha": "ab1dc4e681b4c628898ff3a6885b9154b9e62df7",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=9a941a10101dc720d7d8b425f7778abf2a1b7c36",
        "patch": "@@ -160,9 +160,9 @@ class TransactionSignatureChecker : public BaseSignatureChecker\n public:\n     TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn) : txTo(txToIn), nIn(nInIn), amount(amountIn), txdata(NULL) {}\n     TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, const PrecomputedTransactionData& txdataIn) : txTo(txToIn), nIn(nInIn), amount(amountIn), txdata(&txdataIn) {}\n-    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const;\n-    bool CheckLockTime(const CScriptNum& nLockTime) const;\n-    bool CheckSequence(const CScriptNum& nSequence) const;\n+    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const override;\n+    bool CheckLockTime(const CScriptNum& nLockTime) const override;\n+    bool CheckSequence(const CScriptNum& nSequence) const override;\n };\n \n class MutableTransactionSignatureChecker : public TransactionSignatureChecker"
      },
      {
        "sha": "5832b264b36fdb344f3dd63d7645f21c6e0e4841",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=9a941a10101dc720d7d8b425f7778abf2a1b7c36",
        "patch": "@@ -48,7 +48,7 @@ class CachingTransactionSignatureChecker : public TransactionSignatureChecker\n public:\n     CachingTransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, bool storeIn, PrecomputedTransactionData& txdataIn) : TransactionSignatureChecker(txToIn, nInIn, amountIn, txdataIn), store(storeIn) {}\n \n-    bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n+    bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const override;\n };\n \n void InitSignatureCache();"
      },
      {
        "sha": "ec93c5451b0cc3be2430a9c2795983f5ddb255bc",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=9a941a10101dc720d7d8b425f7778abf2a1b7c36",
        "patch": "@@ -393,7 +393,7 @@ class DummySignatureChecker : public BaseSignatureChecker\n public:\n     DummySignatureChecker() {}\n \n-    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const\n+    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const override\n     {\n         return true;\n     }"
      },
      {
        "sha": "bd458628922253fe2e85a87019102b678819b628",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=9a941a10101dc720d7d8b425f7778abf2a1b7c36",
        "patch": "@@ -40,8 +40,8 @@ class TransactionSignatureCreator : public BaseSignatureCreator {\n \n public:\n     TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn=SIGHASH_ALL);\n-    const BaseSignatureChecker& Checker() const { return checker; }\n-    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const;\n+    const BaseSignatureChecker& Checker() const override { return checker; }\n+    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;\n };\n \n class MutableTransactionSignatureCreator : public TransactionSignatureCreator {\n@@ -55,8 +55,8 @@ class MutableTransactionSignatureCreator : public TransactionSignatureCreator {\n class DummySignatureCreator : public BaseSignatureCreator {\n public:\n     DummySignatureCreator(const CKeyStore* keystoreIn) : BaseSignatureCreator(keystoreIn) {}\n-    const BaseSignatureChecker& Checker() const;\n-    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const;\n+    const BaseSignatureChecker& Checker() const override;\n+    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;\n };\n \n struct SignatureData {"
      },
      {
        "sha": "2df6b84a5997bfd1dbdaca1555e07899944f14a8",
        "filename": "src/support/lockedpool.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/support/lockedpool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/support/lockedpool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/lockedpool.cpp?ref=9a941a10101dc720d7d8b425f7778abf2a1b7c36",
        "patch": "@@ -148,9 +148,9 @@ class Win32LockedPageAllocator: public LockedPageAllocator\n {\n public:\n     Win32LockedPageAllocator();\n-    void* AllocateLocked(size_t len, bool *lockingSuccess);\n-    void FreeLocked(void* addr, size_t len);\n-    size_t GetLimit();\n+    void* AllocateLocked(size_t len, bool *lockingSuccess) override;\n+    void FreeLocked(void* addr, size_t len) override;\n+    size_t GetLimit() override;\n private:\n     size_t page_size;\n };\n@@ -200,9 +200,9 @@ class PosixLockedPageAllocator: public LockedPageAllocator\n {\n public:\n     PosixLockedPageAllocator();\n-    void* AllocateLocked(size_t len, bool *lockingSuccess);\n-    void FreeLocked(void* addr, size_t len);\n-    size_t GetLimit();\n+    void* AllocateLocked(size_t len, bool *lockingSuccess) override;\n+    void FreeLocked(void* addr, size_t len) override;\n+    size_t GetLimit() override;\n private:\n     size_t page_size;\n };"
      },
      {
        "sha": "bc6aef2c1152fbb470ff8512f1f5130a2fa29144",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=9a941a10101dc720d7d8b425f7778abf2a1b7c36",
        "patch": "@@ -27,7 +27,7 @@ class CAddrManTest : public CAddrMan\n         insecure_rand = FastRandomContext(true);\n     }\n \n-    int RandomInt(int nMax)\n+    int RandomInt(int nMax) override\n     {\n         state = (CHashWriter(SER_GETHASH, 0) << state).GetHash().GetCheapHash();\n         return (unsigned int)(state % nMax);"
      },
      {
        "sha": "4a533b5bf2fb5cbb376ef6b0db8b648649c4aa9a",
        "filename": "src/test/allocator_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/test/allocator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/test/allocator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/allocator_tests.cpp?ref=9a941a10101dc720d7d8b425f7778abf2a1b7c36",
        "patch": "@@ -131,7 +131,7 @@ class TestLockedPageAllocator: public LockedPageAllocator\n {\n public:\n     TestLockedPageAllocator(int count_in, int lockedcount_in): count(count_in), lockedcount(lockedcount_in) {}\n-    void* AllocateLocked(size_t len, bool *lockingSuccess)\n+    void* AllocateLocked(size_t len, bool *lockingSuccess) override\n     {\n         *lockingSuccess = false;\n         if (count > 0) {\n@@ -146,10 +146,10 @@ class TestLockedPageAllocator: public LockedPageAllocator\n         }\n         return 0;\n     }\n-    void FreeLocked(void* addr, size_t len)\n+    void FreeLocked(void* addr, size_t len) override\n     {\n     }\n-    size_t GetLimit()\n+    size_t GetLimit() override\n     {\n         return std::numeric_limits<size_t>::max();\n     }"
      },
      {
        "sha": "095d86834c0b3711512a8708b78d62275a78f4fe",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=9a941a10101dc720d7d8b425f7778abf2a1b7c36",
        "patch": "@@ -29,7 +29,7 @@ class CAddrManSerializationMock : public CAddrMan\n class CAddrManUncorrupted : public CAddrManSerializationMock\n {\n public:\n-    void Serialize(CDataStream& s) const\n+    void Serialize(CDataStream& s) const override\n     {\n         CAddrMan::Serialize(s);\n     }\n@@ -38,7 +38,7 @@ class CAddrManUncorrupted : public CAddrManSerializationMock\n class CAddrManCorrupted : public CAddrManSerializationMock\n {\n public:\n-    void Serialize(CDataStream& s) const\n+    void Serialize(CDataStream& s) const override\n     {\n         // Produces corrupt output that claims addrman has 20 addrs when it only has one addr.\n         unsigned char nVersion = 1;"
      },
      {
        "sha": "722f6ae059ce4d8fc49fc8bc0e52a12a33b5c62a",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=9a941a10101dc720d7d8b425f7778abf2a1b7c36",
        "patch": "@@ -22,11 +22,11 @@ class TestConditionChecker : public AbstractThresholdConditionChecker\n     mutable ThresholdConditionCache cache;\n \n public:\n-    int64_t BeginTime(const Consensus::Params& params) const { return TestTime(10000); }\n-    int64_t EndTime(const Consensus::Params& params) const { return TestTime(20000); }\n-    int Period(const Consensus::Params& params) const { return 1000; }\n-    int Threshold(const Consensus::Params& params) const { return 900; }\n-    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const { return (pindex->nVersion & 0x100); }\n+    int64_t BeginTime(const Consensus::Params& params) const override { return TestTime(10000); }\n+    int64_t EndTime(const Consensus::Params& params) const override { return TestTime(20000); }\n+    int Period(const Consensus::Params& params) const override { return 1000; }\n+    int Threshold(const Consensus::Params& params) const override { return 900; }\n+    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const override { return (pindex->nVersion & 0x100); }\n \n     ThresholdState GetStateFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateFor(pindexPrev, paramsDummy, cache); }\n     int GetStateSinceHeightFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateSinceHeightFor(pindexPrev, paramsDummy, cache); }"
      },
      {
        "sha": "b14a0af147e490c00c150a58c55ad0be6406fc67",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=9a941a10101dc720d7d8b425f7778abf2a1b7c36",
        "patch": "@@ -88,12 +88,12 @@ class CCoinsViewDBCursor: public CCoinsViewCursor\n public:\n     ~CCoinsViewDBCursor() {}\n \n-    bool GetKey(COutPoint &key) const;\n-    bool GetValue(Coin &coin) const;\n-    unsigned int GetValueSize() const;\n+    bool GetKey(COutPoint &key) const override;\n+    bool GetValue(Coin &coin) const override;\n+    unsigned int GetValueSize() const override;\n \n-    bool Valid() const;\n-    void Next();\n+    bool Valid() const override;\n+    void Next() override;\n \n private:\n     CCoinsViewDBCursor(CDBIterator* pcursorIn, const uint256 &hashBlockIn):"
      },
      {
        "sha": "8d47b52ebec1162cb266a5e7527d0efbc9d88026",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9a941a10101dc720d7d8b425f7778abf2a1b7c36",
        "patch": "@@ -1462,12 +1462,12 @@ class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n public:\n     WarningBitsConditionChecker(int bitIn) : bit(bitIn) {}\n \n-    int64_t BeginTime(const Consensus::Params& params) const { return 0; }\n-    int64_t EndTime(const Consensus::Params& params) const { return std::numeric_limits<int64_t>::max(); }\n-    int Period(const Consensus::Params& params) const { return params.nMinerConfirmationWindow; }\n-    int Threshold(const Consensus::Params& params) const { return params.nRuleChangeActivationThreshold; }\n+    int64_t BeginTime(const Consensus::Params& params) const override { return 0; }\n+    int64_t EndTime(const Consensus::Params& params) const override { return std::numeric_limits<int64_t>::max(); }\n+    int Period(const Consensus::Params& params) const override { return params.nMinerConfirmationWindow; }\n+    int Threshold(const Consensus::Params& params) const override { return params.nRuleChangeActivationThreshold; }\n \n-    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const\n+    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const override\n     {\n         return ((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) &&\n                ((pindex->nVersion >> bit) & 1) != 0 &&"
      },
      {
        "sha": "8047e17aa826dab5f97848c2488a6ad273d17b3d",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=9a941a10101dc720d7d8b425f7778abf2a1b7c36",
        "patch": "@@ -174,12 +174,12 @@ class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {\n     const Consensus::DeploymentPos id;\n \n protected:\n-    int64_t BeginTime(const Consensus::Params& params) const { return params.vDeployments[id].nStartTime; }\n-    int64_t EndTime(const Consensus::Params& params) const { return params.vDeployments[id].nTimeout; }\n-    int Period(const Consensus::Params& params) const { return params.nMinerConfirmationWindow; }\n-    int Threshold(const Consensus::Params& params) const { return params.nRuleChangeActivationThreshold; }\n+    int64_t BeginTime(const Consensus::Params& params) const override { return params.vDeployments[id].nStartTime; }\n+    int64_t EndTime(const Consensus::Params& params) const override { return params.vDeployments[id].nTimeout; }\n+    int Period(const Consensus::Params& params) const override { return params.nMinerConfirmationWindow; }\n+    int Threshold(const Consensus::Params& params) const override { return params.nRuleChangeActivationThreshold; }\n \n-    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const\n+    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const override\n     {\n         return (((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) && (pindex->nVersion & Mask(params)) != 0);\n     }"
      },
      {
        "sha": "1dc44e424f631f4cd419443a0b338fc68b9f9f47",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=9a941a10101dc720d7d8b425f7778abf2a1b7c36",
        "patch": "@@ -157,8 +157,8 @@ class CCryptoKeyStore : public CBasicKeyStore\n     bool Lock();\n \n     virtual bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n-    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n-    bool HaveKey(const CKeyID &address) const\n+    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n+    bool HaveKey(const CKeyID &address) const override\n     {\n         {\n             LOCK(cs_KeyStore);\n@@ -168,9 +168,9 @@ class CCryptoKeyStore : public CBasicKeyStore\n         }\n         return false;\n     }\n-    bool GetKey(const CKeyID &address, CKey& keyOut) const;\n-    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n-    void GetKeys(std::set<CKeyID> &setAddress) const\n+    bool GetKey(const CKeyID &address, CKey& keyOut) const override;\n+    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n+    void GetKeys(std::set<CKeyID> &setAddress) const override\n     {\n         if (!IsCrypted())\n         {"
      },
      {
        "sha": "a3fd7408a0e38f01583a6df0bc52335cfb823c45",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=9a941a10101dc720d7d8b425f7778abf2a1b7c36",
        "patch": "@@ -1153,7 +1153,7 @@ class CReserveKey : public CReserveScript\n     void ReturnKey();\n     bool GetReservedKey(CPubKey &pubkey, bool internal = false);\n     void KeepKey();\n-    void KeepScript() { KeepKey(); }\n+    void KeepScript() override { KeepKey(); }\n };\n \n "
      },
      {
        "sha": "1790fe56982a1a34c0521ce9c70bf910e0da765f",
        "filename": "src/zmq/zmqpublishnotifier.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/zmq/zmqpublishnotifier.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a941a10101dc720d7d8b425f7778abf2a1b7c36/src/zmq/zmqpublishnotifier.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqpublishnotifier.h?ref=9a941a10101dc720d7d8b425f7778abf2a1b7c36",
        "patch": "@@ -24,32 +24,32 @@ class CZMQAbstractPublishNotifier : public CZMQAbstractNotifier\n     */\n     bool SendMessage(const char *command, const void* data, size_t size);\n \n-    bool Initialize(void *pcontext);\n-    void Shutdown();\n+    bool Initialize(void *pcontext) override;\n+    void Shutdown() override;\n };\n \n class CZMQPublishHashBlockNotifier : public CZMQAbstractPublishNotifier\n {\n public:\n-    bool NotifyBlock(const CBlockIndex *pindex);\n+    bool NotifyBlock(const CBlockIndex *pindex) override;\n };\n \n class CZMQPublishHashTransactionNotifier : public CZMQAbstractPublishNotifier\n {\n public:\n-    bool NotifyTransaction(const CTransaction &transaction);\n+    bool NotifyTransaction(const CTransaction &transaction) override;\n };\n \n class CZMQPublishRawBlockNotifier : public CZMQAbstractPublishNotifier\n {\n public:\n-    bool NotifyBlock(const CBlockIndex *pindex);\n+    bool NotifyBlock(const CBlockIndex *pindex) override;\n };\n \n class CZMQPublishRawTransactionNotifier : public CZMQAbstractPublishNotifier\n {\n public:\n-    bool NotifyTransaction(const CTransaction &transaction);\n+    bool NotifyTransaction(const CTransaction &transaction) override;\n };\n \n #endif // BITCOIN_ZMQ_ZMQPUBLISHNOTIFIER_H"
      }
    ]
  },
  {
    "sha": "416af3edf5b5ab265acf95568f2bc9eabd3d96de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTZhZjNlZGY1YjVhYjI2NWFjZjk1NTY4ZjJiYzllYWJkM2Q5NmRl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-06-28T16:09:54Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-06-28T16:09:58Z"
      },
      "message": "Merge #10690: [qa] Bugfix: allow overriding extra_args in ComparisonTestFramework\n\n4ed3653 [qa] Bugfix: allow overriding extra_args in ComparisonTestFramework (Suhas Daftuar)\n\nTree-SHA512: d8f724b3324aad73a7b15cf87ff394e8d615bf3cd5a394d5715347d833f2ae9ac745a944202986866255eca5fc105ea06ab3abe12e168b67de34482f751c68e2",
      "tree": {
        "sha": "321896f153f313d880a20325b710d3e4c699d65f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/321896f153f313d880a20325b710d3e4c699d65f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/416af3edf5b5ab265acf95568f2bc9eabd3d96de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZU9TWAAoJENLqSFDnUoslVVYP/0w/fFOmcIFzROmOkItherM3\nN3hMPP+CWAC/w7qQiOA7U7NuXz8+m8g4QA5gRcCUQRiuP6RynkquFgeBI96+Vrev\nDNsRL6IVRa4y4R4XWGWMVcR6zL9CC80JRmXWnpVj8t43fbPR3biMhD0885gguc+Z\nZ5GcVjMB/Aah4l8NGRVaPYRu8/ee6wcLmgpn9X2cNaP2tU30hpxE8O3KPI4kAGch\nObAf++gkqFB5Hl66NMWJ1F1+tJiROAP8b6UkDBiJp9tmE4p+X0TacVQlYnr2f4Fe\nVOb6zaAkkfHYuVQYMDaQWEZTSMk15r3Tt8KQ3LOe6vj32K7OImaA/1qUhCzfaTNA\nGPm7us82UmGu9W2bRKrD8J/8cz3kyyJX7k+dsnU/NJmYwsRbDDt5OjEfk6r1TvtR\nujOdR57uytESwImk4HvhV1oR6X1HQ2GrOHJYysB4xvymIyBaZFnTk6x9zyxNGOXT\nMnsISdQlyWA4WJKytGpR1Q/smYnwhz8yy6dvfYFOVjBJyuHu7isL9d4F/t+qbAB8\nDnobMBmTce4MlbCwXCBPdPUg1664o0adhXbUDnKi2z7CEi4mhDHo2JSQgZTf57xn\ns5ShwD1z6Pd4DaDaqHWcavbVWyXNjpequwXGeFzt97Sksvk+YpzRpjsiEtCeG+pT\npTUabruN8lLyN6byrx0V\n=aPSW\n-----END PGP SIGNATURE-----",
        "payload": "tree 321896f153f313d880a20325b710d3e4c699d65f\nparent 9a941a10101dc720d7d8b425f7778abf2a1b7c36\nparent 4ed36539bcdebb360c730b2492b6435d7cd2476c\nauthor MarcoFalke <falke.marco@gmail.com> 1498666194 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1498666198 +0200\n\nMerge #10690: [qa] Bugfix: allow overriding extra_args in ComparisonTestFramework\n\n4ed3653 [qa] Bugfix: allow overriding extra_args in ComparisonTestFramework (Suhas Daftuar)\n\nTree-SHA512: d8f724b3324aad73a7b15cf87ff394e8d615bf3cd5a394d5715347d833f2ae9ac745a944202986866255eca5fc105ea06ab3abe12e168b67de34482f751c68e2\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/416af3edf5b5ab265acf95568f2bc9eabd3d96de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/416af3edf5b5ab265acf95568f2bc9eabd3d96de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/416af3edf5b5ab265acf95568f2bc9eabd3d96de/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9a941a10101dc720d7d8b425f7778abf2a1b7c36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a941a10101dc720d7d8b425f7778abf2a1b7c36",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a941a10101dc720d7d8b425f7778abf2a1b7c36"
      },
      {
        "sha": "4ed36539bcdebb360c730b2492b6435d7cd2476c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ed36539bcdebb360c730b2492b6435d7cd2476c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ed36539bcdebb360c730b2492b6435d7cd2476c"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "ac0fbe61f89c22cced1f264a3a46b9875989c6fc",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/416af3edf5b5ab265acf95568f2bc9eabd3d96de/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/416af3edf5b5ab265acf95568f2bc9eabd3d96de/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=416af3edf5b5ab265acf95568f2bc9eabd3d96de",
        "patch": "@@ -381,8 +381,10 @@ def add_options(self, parser):\n                           help=\"bitcoind binary to use for reference nodes (if any)\")\n \n     def setup_network(self):\n+        extra_args = [['-whitelist=127.0.0.1']]*self.num_nodes\n+        if hasattr(self, \"extra_args\"):\n+            extra_args = self.extra_args\n         self.nodes = self.start_nodes(\n-            self.num_nodes, self.options.tmpdir,\n-            extra_args=[['-whitelist=127.0.0.1']] * self.num_nodes,\n+            self.num_nodes, self.options.tmpdir, extra_args,\n             binary=[self.options.testbinary] +\n             [self.options.refbinary]*(self.num_nodes-1))"
      }
    ]
  },
  {
    "sha": "d4e551adfec298d12f2147467227f07e3a94b872",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNGU1NTFhZGZlYzI5OGQxMmYyMTQ3NDY3MjI3ZjA3ZTNhOTRiODcy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-28T16:24:32Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-28T16:26:41Z"
      },
      "message": "Merge #10148: Use non-atomic flushing with block replay\n\n176c021 [qa] Test non-atomic chainstate writes (Suhas Daftuar)\nd6af06d Dont create pcoinsTip until after ReplayBlocks. (Matt Corallo)\neaca1b7 Random db flush crash simulator (Pieter Wuille)\n0580ee0 Adapt memory usage estimation for flushing (Pieter Wuille)\n013a56a Non-atomic flushing using the blockchain as replay journal (Pieter Wuille)\nb3a279c [MOVEONLY] Move LastCommonAncestor to chain (Pieter Wuille)\n\nTree-SHA512: 47ccc62303f9075c44d2a914be75bd6969ff881a857a2ff1227f05ec7def6f4c71c46680c5a28cb150c814999526797dc05cf2701fde1369c06169f46eccddee",
      "tree": {
        "sha": "38479ecf10f5bf10363d208334e25bb6271b3429",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38479ecf10f5bf10363d208334e25bb6271b3429"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4e551adfec298d12f2147467227f07e3a94b872",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZU9jBAAoJEB5K7WKYbNJd45QIAJAMKqcbXXXUp73UR/q4k1S/\n0QSs7hvIPTe65e0FEcj1ARKegHvNd9tdZsVy4Isxli3+RW4lnUD2ZgixvPU5J99/\nfiIZLQlkcFeiDuwKpLl3WRXXKRerUEqQuacdgLk+0MTdXjkVLDteBXb0bJDJM3kN\nzaJ5c0OrVJB/oXCK9UCQjof4FsMIqPXRe11xqWytV1xtSKMRvZoAgayNgxMfAM8P\n1IJUMeHm+Z6Zz9T99nORvRlHRxHh9D1+AuXfLaIYVz0K+0lcP/xPjxdECLWzbCO8\nGAeYHzXeNKTgezZs4qL2lxKVVUQIsfo6eeYL7/by/bqZGZbGUBEyLAfH3vU8BEI=\n=ny3a\n-----END PGP SIGNATURE-----",
        "payload": "tree 38479ecf10f5bf10363d208334e25bb6271b3429\nparent 416af3edf5b5ab265acf95568f2bc9eabd3d96de\nparent 176c021d085f5a45bc9e038e760942aa648dd797\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1498667072 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1498667201 +0200\n\nMerge #10148: Use non-atomic flushing with block replay\n\n176c021 [qa] Test non-atomic chainstate writes (Suhas Daftuar)\nd6af06d Dont create pcoinsTip until after ReplayBlocks. (Matt Corallo)\neaca1b7 Random db flush crash simulator (Pieter Wuille)\n0580ee0 Adapt memory usage estimation for flushing (Pieter Wuille)\n013a56a Non-atomic flushing using the blockchain as replay journal (Pieter Wuille)\nb3a279c [MOVEONLY] Move LastCommonAncestor to chain (Pieter Wuille)\n\nTree-SHA512: 47ccc62303f9075c44d2a914be75bd6969ff881a857a2ff1227f05ec7def6f4c71c46680c5a28cb150c814999526797dc05cf2701fde1369c06169f46eccddee\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4e551adfec298d12f2147467227f07e3a94b872",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d4e551adfec298d12f2147467227f07e3a94b872",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4e551adfec298d12f2147467227f07e3a94b872/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "416af3edf5b5ab265acf95568f2bc9eabd3d96de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/416af3edf5b5ab265acf95568f2bc9eabd3d96de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/416af3edf5b5ab265acf95568f2bc9eabd3d96de"
      },
      {
        "sha": "176c021d085f5a45bc9e038e760942aa648dd797",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/176c021d085f5a45bc9e038e760942aa648dd797",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/176c021d085f5a45bc9e038e760942aa648dd797"
      }
    ],
    "stats": {
      "total": 527,
      "additions": 484,
      "deletions": 43
    },
    "files": [
      {
        "sha": "150f368513296525112f09d9732bc7c7a428b32f",
        "filename": "contrib/devtools/check-doc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4e551adfec298d12f2147467227f07e3a94b872/contrib/devtools/check-doc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4e551adfec298d12f2147467227f07e3a94b872/contrib/devtools/check-doc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/check-doc.py?ref=d4e551adfec298d12f2147467227f07e3a94b872",
        "patch": "@@ -21,7 +21,7 @@\n REGEX_ARG = re.compile(r'(?:map(?:Multi)?Args(?:\\.count\\(|\\[)|Get(?:Bool)?Arg\\()\\\"(\\-[^\\\"]+?)\\\"')\n REGEX_DOC = re.compile(r'HelpMessageOpt\\(\\\"(\\-[^\\\"=]+?)(?:=|\\\")')\n # list unsupported, deprecated and duplicate args as they need no documentation\n-SET_DOC_OPTIONAL = set(['-rpcssl', '-benchmark', '-h', '-help', '-socks', '-tor', '-debugnet', '-whitelistalwaysrelay', '-prematurewitness', '-walletprematurewitness', '-promiscuousmempoolflags', '-blockminsize'])\n+SET_DOC_OPTIONAL = set(['-rpcssl', '-benchmark', '-h', '-help', '-socks', '-tor', '-debugnet', '-whitelistalwaysrelay', '-prematurewitness', '-walletprematurewitness', '-promiscuousmempoolflags', '-blockminsize', '-dbcrashratio'])\n \n def main():\n   used = check_output(CMD_GREP_ARGS, shell=True)"
      },
      {
        "sha": "ffd58d471d34b5f9926194446137f4e703742a82",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4e551adfec298d12f2147467227f07e3a94b872/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4e551adfec298d12f2147467227f07e3a94b872/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=d4e551adfec298d12f2147467227f07e3a94b872",
        "patch": "@@ -148,3 +148,22 @@ int64_t GetBlockProofEquivalentTime(const CBlockIndex& to, const CBlockIndex& fr\n     }\n     return sign * r.GetLow64();\n }\n+\n+/** Find the last common ancestor two blocks have.\n+ *  Both pa and pb must be non-NULL. */\n+const CBlockIndex* LastCommonAncestor(const CBlockIndex* pa, const CBlockIndex* pb) {\n+    if (pa->nHeight > pb->nHeight) {\n+        pa = pa->GetAncestor(pb->nHeight);\n+    } else if (pb->nHeight > pa->nHeight) {\n+        pb = pb->GetAncestor(pa->nHeight);\n+    }\n+\n+    while (pa != pb && pa && pb) {\n+        pa = pa->pprev;\n+        pb = pb->pprev;\n+    }\n+\n+    // Eventually all chain branches meet at the genesis block.\n+    assert(pa == pb);\n+    return pa;\n+}"
      },
      {
        "sha": "c5304b7d6f3e10bb32a1313d88d308ed14813d11",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4e551adfec298d12f2147467227f07e3a94b872/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4e551adfec298d12f2147467227f07e3a94b872/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=d4e551adfec298d12f2147467227f07e3a94b872",
        "patch": "@@ -362,6 +362,9 @@ class CBlockIndex\n arith_uint256 GetBlockProof(const CBlockIndex& block);\n /** Return the time it would take to redo the work difference between from and to, assuming the current hashrate corresponds to the difficulty at tip, in seconds. */\n int64_t GetBlockProofEquivalentTime(const CBlockIndex& to, const CBlockIndex& from, const CBlockIndex& tip, const Consensus::Params&);\n+/** Find the forking point between two chain tips. */\n+const CBlockIndex* LastCommonAncestor(const CBlockIndex* pa, const CBlockIndex* pb);\n+\n \n /** Used to marshal pointers into hashes for db storage. */\n class CDiskBlockIndex : public CBlockIndex"
      },
      {
        "sha": "b5dc6197bd6956143dd38346eb7830c112af946c",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4e551adfec298d12f2147467227f07e3a94b872/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4e551adfec298d12f2147467227f07e3a94b872/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=d4e551adfec298d12f2147467227f07e3a94b872",
        "patch": "@@ -12,6 +12,7 @@\n \n bool CCoinsView::GetCoin(const COutPoint &outpoint, Coin &coin) const { return false; }\n uint256 CCoinsView::GetBestBlock() const { return uint256(); }\n+std::vector<uint256> CCoinsView::GetHeadBlocks() const { return std::vector<uint256>(); }\n bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return false; }\n CCoinsViewCursor *CCoinsView::Cursor() const { return 0; }\n \n@@ -25,6 +26,7 @@ CCoinsViewBacked::CCoinsViewBacked(CCoinsView *viewIn) : base(viewIn) { }\n bool CCoinsViewBacked::GetCoin(const COutPoint &outpoint, Coin &coin) const { return base->GetCoin(outpoint, coin); }\n bool CCoinsViewBacked::HaveCoin(const COutPoint &outpoint) const { return base->HaveCoin(outpoint); }\n uint256 CCoinsViewBacked::GetBestBlock() const { return base->GetBestBlock(); }\n+std::vector<uint256> CCoinsViewBacked::GetHeadBlocks() const { return base->GetHeadBlocks(); }\n void CCoinsViewBacked::SetBackend(CCoinsView &viewIn) { base = &viewIn; }\n bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return base->BatchWrite(mapCoins, hashBlock); }\n CCoinsViewCursor *CCoinsViewBacked::Cursor() const { return base->Cursor(); }\n@@ -85,13 +87,14 @@ void CCoinsViewCache::AddCoin(const COutPoint &outpoint, Coin&& coin, bool possi\n     cachedCoinsUsage += it->second.coin.DynamicMemoryUsage();\n }\n \n-void AddCoins(CCoinsViewCache& cache, const CTransaction &tx, int nHeight) {\n+void AddCoins(CCoinsViewCache& cache, const CTransaction &tx, int nHeight, bool check) {\n     bool fCoinbase = tx.IsCoinBase();\n     const uint256& txid = tx.GetHash();\n     for (size_t i = 0; i < tx.vout.size(); ++i) {\n-        // Pass fCoinbase as the possible_overwrite flag to AddCoin, in order to correctly\n+        bool overwrite = check ? cache.HaveCoin(COutPoint(txid, i)) : fCoinbase;\n+        // Always set the possible_overwrite flag to AddCoin for coinbase txn, in order to correctly\n         // deal with the pre-BIP30 occurrences of duplicate coinbase transactions.\n-        cache.AddCoin(COutPoint(txid, i), Coin(tx.vout[i], nHeight, fCoinbase), fCoinbase);\n+        cache.AddCoin(COutPoint(txid, i), Coin(tx.vout[i], nHeight, fCoinbase), overwrite);\n     }\n }\n "
      },
      {
        "sha": "ff7719b724f0d9a0b823240ec61ed5c8971a69a0",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4e551adfec298d12f2147467227f07e3a94b872/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4e551adfec298d12f2147467227f07e3a94b872/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=d4e551adfec298d12f2147467227f07e3a94b872",
        "patch": "@@ -157,6 +157,12 @@ class CCoinsView\n     //! Retrieve the block hash whose state this CCoinsView currently represents\n     virtual uint256 GetBestBlock() const;\n \n+    //! Retrieve the range of blocks that may have been only partially written.\n+    //! If the database is in a consistent state, the result is the empty vector.\n+    //! Otherwise, a two-element vector is returned consisting of the new and\n+    //! the old block hash, in that order.\n+    virtual std::vector<uint256> GetHeadBlocks() const;\n+\n     //! Do a bulk modification (multiple Coin changes + BestBlock change).\n     //! The passed mapCoins can be modified.\n     virtual bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n@@ -183,6 +189,7 @@ class CCoinsViewBacked : public CCoinsView\n     bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;\n     bool HaveCoin(const COutPoint &outpoint) const override;\n     uint256 GetBestBlock() const override;\n+    std::vector<uint256> GetHeadBlocks() const override;\n     void SetBackend(CCoinsView &viewIn);\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) override;\n     CCoinsViewCursor *Cursor() const override;\n@@ -291,10 +298,12 @@ class CCoinsViewCache : public CCoinsViewBacked\n };\n \n //! Utility function to add all of a transaction's outputs to a cache.\n-// It assumes that overwrites are only possible for coinbase transactions,\n+// When check is false, this assumes that overwrites are only possible for coinbase transactions.\n+// When check is true, the underlying view may be queried to determine whether an addition is\n+// an overwrite.\n // TODO: pass in a boolean to limit these possible overwrites to known\n // (pre-BIP34) cases.\n-void AddCoins(CCoinsViewCache& cache, const CTransaction& tx, int nHeight);\n+void AddCoins(CCoinsViewCache& cache, const CTransaction& tx, int nHeight, bool check = false);\n \n //! Utility function to find any unspent output with a given txid.\n const Coin& AccessByTxid(const CCoinsViewCache& cache, const uint256& txid);"
      },
      {
        "sha": "d59713258c1b1b14505b77e801c4048d091a07ea",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4e551adfec298d12f2147467227f07e3a94b872/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4e551adfec298d12f2147467227f07e3a94b872/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d4e551adfec298d12f2147467227f07e3a94b872",
        "patch": "@@ -336,6 +336,9 @@ std::string HelpMessage(HelpMessageMode mode)\n #endif\n     }\n     strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n+    if (showDebug) {\n+        strUsage += HelpMessageOpt(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize));\n+    }\n     strUsage += HelpMessageOpt(\"-dbcache=<n>\", strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER));\n@@ -1373,7 +1376,6 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 pblocktree = new CBlockTreeDB(nBlockTreeDBCache, false, fReindex);\n                 pcoinsdbview = new CCoinsViewDB(nCoinDBCache, false, fReindex || fReindexChainState);\n                 pcoinscatcher = new CCoinsViewErrorCatcher(pcoinsdbview);\n-                pcoinsTip = new CCoinsViewCache(pcoinscatcher);\n \n                 if (fReindex) {\n                     pblocktree->WriteReindexing(true);\n@@ -1417,6 +1419,13 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     break;\n                 }\n \n+                if (!ReplayBlocks(chainparams, pcoinsdbview)) {\n+                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n+                    break;\n+                }\n+                pcoinsTip = new CCoinsViewCache(pcoinscatcher);\n+                LoadChainTip(chainparams);\n+\n                 if (!fReindex && chainActive.Tip() != NULL) {\n                     uiInterface.InitMessage(_(\"Rewinding blocks...\"));\n                     if (!RewindBlockIndex(chainparams)) {"
      },
      {
        "sha": "4d832f37113ef1f78ad95d1c97d938745f77cb9d",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 19,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4e551adfec298d12f2147467227f07e3a94b872/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4e551adfec298d12f2147467227f07e3a94b872/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=d4e551adfec298d12f2147467227f07e3a94b872",
        "patch": "@@ -452,25 +452,6 @@ bool PeerHasHeader(CNodeState *state, const CBlockIndex *pindex)\n     return false;\n }\n \n-/** Find the last common ancestor two blocks have.\n- *  Both pa and pb must be non-NULL. */\n-const CBlockIndex* LastCommonAncestor(const CBlockIndex* pa, const CBlockIndex* pb) {\n-    if (pa->nHeight > pb->nHeight) {\n-        pa = pa->GetAncestor(pb->nHeight);\n-    } else if (pb->nHeight > pa->nHeight) {\n-        pb = pb->GetAncestor(pa->nHeight);\n-    }\n-\n-    while (pa != pb && pa && pb) {\n-        pa = pa->pprev;\n-        pb = pb->pprev;\n-    }\n-\n-    // Eventually all chain branches meet at the genesis block.\n-    assert(pa == pb);\n-    return pa;\n-}\n-\n /** Update pindexLastCommonBlock and add not-in-flight missing successors to vBlocks, until it has\n  *  at most count entries. */\n void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<const CBlockIndex*>& vBlocks, NodeId& nodeStaller, const Consensus::Params& consensusParams) {"
      },
      {
        "sha": "d24162ba2dc6d5c49f8dacf131af12127d22cd7c",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 2,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4e551adfec298d12f2147467227f07e3a94b872/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4e551adfec298d12f2147467227f07e3a94b872/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=d4e551adfec298d12f2147467227f07e3a94b872",
        "patch": "@@ -7,8 +7,10 @@\n \n #include \"chainparams.h\"\n #include \"hash.h\"\n+#include \"random.h\"\n #include \"pow.h\"\n #include \"uint256.h\"\n+#include \"util.h\"\n \n #include <stdint.h>\n \n@@ -21,6 +23,7 @@ static const char DB_TXINDEX = 't';\n static const char DB_BLOCK_INDEX = 'b';\n \n static const char DB_BEST_BLOCK = 'B';\n+static const char DB_HEAD_BLOCKS = 'H';\n static const char DB_FLAG = 'F';\n static const char DB_REINDEX_FLAG = 'R';\n static const char DB_LAST_BLOCK = 'l';\n@@ -68,10 +71,39 @@ uint256 CCoinsViewDB::GetBestBlock() const {\n     return hashBestChain;\n }\n \n+std::vector<uint256> CCoinsViewDB::GetHeadBlocks() const {\n+    std::vector<uint256> vhashHeadBlocks;\n+    if (!db.Read(DB_HEAD_BLOCKS, vhashHeadBlocks)) {\n+        return std::vector<uint256>();\n+    }\n+    return vhashHeadBlocks;\n+}\n+\n bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n     CDBBatch batch(db);\n     size_t count = 0;\n     size_t changed = 0;\n+    size_t batch_size = (size_t)GetArg(\"-dbbatchsize\", nDefaultDbBatchSize);\n+    int crash_simulate = GetArg(\"-dbcrashratio\", 0);\n+    assert(!hashBlock.IsNull());\n+\n+    uint256 old_tip = GetBestBlock();\n+    if (old_tip.IsNull()) {\n+        // We may be in the middle of replaying.\n+        std::vector<uint256> old_heads = GetHeadBlocks();\n+        if (old_heads.size() == 2) {\n+            assert(old_heads[0] == hashBlock);\n+            old_tip = old_heads[1];\n+        }\n+    }\n+\n+    // In the first batch, mark the database as being in the middle of a\n+    // transition from old_tip to hashBlock.\n+    // A vector is used for future extensibility, as we may want to support\n+    // interrupting after partial writes from multiple independent reorgs.\n+    batch.Erase(DB_BEST_BLOCK);\n+    batch.Write(DB_HEAD_BLOCKS, std::vector<uint256>{hashBlock, old_tip});\n+\n     for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n         if (it->second.flags & CCoinsCacheEntry::DIRTY) {\n             CoinEntry entry(&it->first);\n@@ -84,10 +116,25 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n         count++;\n         CCoinsMap::iterator itOld = it++;\n         mapCoins.erase(itOld);\n+        if (batch.SizeEstimate() > batch_size) {\n+            LogPrint(BCLog::COINDB, \"Writing partial batch of %.2f MiB\\n\", batch.SizeEstimate() * (1.0 / 1048576.0));\n+            db.WriteBatch(batch);\n+            batch.Clear();\n+            if (crash_simulate) {\n+                static FastRandomContext rng;\n+                if (rng.randrange(crash_simulate) == 0) {\n+                    LogPrintf(\"Simulating a crash. Goodbye.\\n\");\n+                    _Exit(0);\n+                }\n+            }\n+        }\n     }\n-    if (!hashBlock.IsNull())\n-        batch.Write(DB_BEST_BLOCK, hashBlock);\n \n+    // In the last batch, mark the database as consistent with hashBlock again.\n+    batch.Erase(DB_HEAD_BLOCKS);\n+    batch.Write(DB_BEST_BLOCK, hashBlock);\n+\n+    LogPrint(BCLog::COINDB, \"Writing final batch of %.2f MiB\\n\", batch.SizeEstimate() * (1.0 / 1048576.0));\n     bool ret = db.WriteBatch(batch);\n     LogPrint(BCLog::COINDB, \"Committed %u changed transaction outputs (out of %u) to coin database...\\n\", (unsigned int)changed, (unsigned int)count);\n     return ret;"
      },
      {
        "sha": "adcbc73380d116ef3cf8fd6fab5e112ea554a7b7",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4e551adfec298d12f2147467227f07e3a94b872/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4e551adfec298d12f2147467227f07e3a94b872/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=d4e551adfec298d12f2147467227f07e3a94b872",
        "patch": "@@ -19,12 +19,12 @@ class CBlockIndex;\n class CCoinsViewDBCursor;\n class uint256;\n \n-//! Compensate for extra memory peak (x1.5-x1.9) at flush time.\n-static constexpr int DB_PEAK_USAGE_FACTOR = 2;\n //! No need to periodic flush if at least this much space still available.\n-static constexpr int MAX_BLOCK_COINSDB_USAGE = 10 * DB_PEAK_USAGE_FACTOR;\n+static constexpr int MAX_BLOCK_COINSDB_USAGE = 10;\n //! -dbcache default (MiB)\n static const int64_t nDefaultDbCache = 450;\n+//! -dbbatchsize default (bytes)\n+static const int64_t nDefaultDbBatchSize = 16 << 20;\n //! max. -dbcache (MiB)\n static const int64_t nMaxDbCache = sizeof(void*) > 4 ? 16384 : 1024;\n //! min. -dbcache (MiB)\n@@ -74,6 +74,7 @@ class CCoinsViewDB : public CCoinsView\n     bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;\n     bool HaveCoin(const COutPoint &outpoint) const override;\n     uint256 GetBestBlock() const override;\n+    std::vector<uint256> GetHeadBlocks() const override;\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) override;\n     CCoinsViewCursor *Cursor() const override;\n "
      },
      {
        "sha": "216ba3d4a5b36dbb5b51ab5e12933f788a7b1b96",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 105,
        "deletions": 12,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4e551adfec298d12f2147467227f07e3a94b872/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4e551adfec298d12f2147467227f07e3a94b872/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d4e551adfec298d12f2147467227f07e3a94b872",
        "patch": "@@ -96,7 +96,7 @@ namespace {\n \n     struct CBlockIndexWorkComparator\n     {\n-        bool operator()(CBlockIndex *pa, CBlockIndex *pb) const {\n+        bool operator()(const CBlockIndex *pa, const CBlockIndex *pb) const {\n             // First sort by most total work, ...\n             if (pa->nChainWork > pb->nChainWork) return false;\n             if (pa->nChainWork < pb->nChainWork) return true;\n@@ -1331,17 +1331,19 @@ int ApplyTxInUndo(Coin&& undo, CCoinsViewCache& view, const COutPoint& out)\n             return DISCONNECT_FAILED; // adding output for transaction without known metadata\n         }\n     }\n-    view.AddCoin(out, std::move(undo), undo.fCoinBase);\n+    // The potential_overwrite parameter to AddCoin is only allowed to be false if we know for\n+    // sure that the coin did not already exist in the cache. As we have queried for that above\n+    // using HaveCoin, we don't need to guess. When fClean is false, a coin already existed and\n+    // it is an overwrite.\n+    view.AddCoin(out, std::move(undo), !fClean);\n \n     return fClean ? DISCONNECT_OK : DISCONNECT_UNCLEAN;\n }\n \n /** Undo the effects of this block (with given index) on the UTXO set represented by coins.\n- *  When UNCLEAN or FAILED is returned, view is left in an indeterminate state. */\n+ *  When FAILED is returned, view is left in an indeterminate state. */\n static DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view)\n {\n-    assert(pindex->GetBlockHash() == view.GetBestBlock());\n-\n     bool fClean = true;\n \n     CBlockUndo blockUndo;\n@@ -1779,7 +1781,7 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n         nLastSetChain = nNow;\n     }\n     int64_t nMempoolSizeMax = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n-    int64_t cacheSize = pcoinsTip->DynamicMemoryUsage() * DB_PEAK_USAGE_FACTOR;\n+    int64_t cacheSize = pcoinsTip->DynamicMemoryUsage();\n     int64_t nTotalSpace = nCoinCacheUsage + std::max<int64_t>(nMempoolSizeMax - nMempoolUsage, 0);\n     // The cache is large and we're within 10% and 10 MiB of the limit, but we have time now (not in the middle of a block processing).\n     bool fCacheLarge = mode == FLUSH_STATE_PERIODIC && cacheSize > std::max((9 * nTotalSpace) / 10, nTotalSpace - MAX_BLOCK_COINSDB_USAGE * 1024 * 1024);\n@@ -1946,6 +1948,7 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n     int64_t nStart = GetTimeMicros();\n     {\n         CCoinsViewCache view(pcoinsTip);\n+        assert(view.GetBestBlock() == pindexDelete->GetBlockHash());\n         if (DisconnectBlock(block, pindexDelete, view) != DISCONNECT_OK)\n             return error(\"DisconnectTip(): DisconnectBlock %s failed\", pindexDelete->GetBlockHash().ToString());\n         bool flushed = view.Flush();\n@@ -3417,20 +3420,25 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n     pblocktree->ReadFlag(\"txindex\", fTxIndex);\n     LogPrintf(\"%s: transaction index %s\\n\", __func__, fTxIndex ? \"enabled\" : \"disabled\");\n \n+    return true;\n+}\n+\n+void LoadChainTip(const CChainParams& chainparams)\n+{\n+    if (chainActive.Tip() && chainActive.Tip()->GetBlockHash() == pcoinsTip->GetBestBlock()) return;\n+\n     // Load pointer to end of best chain\n     BlockMap::iterator it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n     if (it == mapBlockIndex.end())\n-        return true;\n+        return;\n     chainActive.SetTip(it->second);\n \n     PruneBlockIndexCandidates();\n \n-    LogPrintf(\"%s: hashBestChain=%s height=%d date=%s progress=%f\\n\", __func__,\n+    LogPrintf(\"Loaded best chain: hashBestChain=%s height=%d date=%s progress=%f\\n\",\n         chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(),\n         DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", chainActive.Tip()->GetBlockTime()),\n         GuessVerificationProgress(chainparams.TxData(), chainActive.Tip()));\n-\n-    return true;\n }\n \n CVerifyDB::CVerifyDB()\n@@ -3499,6 +3507,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n         }\n         // check level 3: check for inconsistencies during memory-only disconnect of tip blocks\n         if (nCheckLevel >= 3 && pindex == pindexState && (coins.DynamicMemoryUsage() + pcoinsTip->DynamicMemoryUsage()) <= nCoinCacheUsage) {\n+            assert(coins.GetBestBlock() == pindex->GetBlockHash());\n             DisconnectResult res = DisconnectBlock(block, pindex, coins);\n             if (res == DISCONNECT_FAILED) {\n                 return error(\"VerifyDB(): *** irrecoverable inconsistency in block data at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n@@ -3538,6 +3547,92 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     return true;\n }\n \n+/** Apply the effects of a block on the utxo cache, ignoring that it may already have been applied. */\n+static bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)\n+{\n+    // TODO: merge with ConnectBlock\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, pindex, params.GetConsensus())) {\n+        return error(\"ReplayBlock(): ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+    }\n+\n+    for (const CTransactionRef& tx : block.vtx) {\n+        if (!tx->IsCoinBase()) {\n+            for (const CTxIn &txin : tx->vin) {\n+                inputs.SpendCoin(txin.prevout);\n+            }\n+        }\n+        // Pass check = true as every addition may be an overwrite.\n+        AddCoins(inputs, *tx, pindex->nHeight, true);\n+    }\n+    return true;\n+}\n+\n+bool ReplayBlocks(const CChainParams& params, CCoinsView* view)\n+{\n+    LOCK(cs_main);\n+\n+    CCoinsViewCache cache(view);\n+\n+    std::vector<uint256> hashHeads = view->GetHeadBlocks();\n+    if (hashHeads.empty()) return true; // We're already in a consistent state.\n+    if (hashHeads.size() != 2) return error(\"ReplayBlocks(): unknown inconsistent state\");\n+\n+    uiInterface.ShowProgress(_(\"Replaying blocks...\"), 0);\n+    LogPrintf(\"Replaying blocks\\n\");\n+\n+    const CBlockIndex* pindexOld = nullptr;  // Old tip during the interrupted flush.\n+    const CBlockIndex* pindexNew;            // New tip during the interrupted flush.\n+    const CBlockIndex* pindexFork = nullptr; // Latest block common to both the old and the new tip.\n+\n+    if (mapBlockIndex.count(hashHeads[0]) == 0) {\n+        return error(\"ReplayBlocks(): reorganization to unknown block requested\");\n+    }\n+    pindexNew = mapBlockIndex[hashHeads[0]];\n+\n+    if (!hashHeads[1].IsNull()) { // The old tip is allowed to be 0, indicating it's the first flush.\n+        if (mapBlockIndex.count(hashHeads[1]) == 0) {\n+            return error(\"ReplayBlocks(): reorganization from unknown block requested\");\n+        }\n+        pindexOld = mapBlockIndex[hashHeads[1]];\n+        pindexFork = LastCommonAncestor(pindexOld, pindexNew);\n+        assert(pindexFork != nullptr);\n+    }\n+\n+    // Rollback along the old branch.\n+    while (pindexOld != pindexFork) {\n+        if (pindexOld->nHeight > 0) { // Never disconnect the genesis block.\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindexOld, params.GetConsensus())) {\n+                return error(\"RollbackBlock(): ReadBlockFromDisk() failed at %d, hash=%s\", pindexOld->nHeight, pindexOld->GetBlockHash().ToString());\n+            }\n+            LogPrintf(\"Rolling back %s (%i)\\n\", pindexOld->GetBlockHash().ToString(), pindexOld->nHeight);\n+            DisconnectResult res = DisconnectBlock(block, pindexOld, cache);\n+            if (res == DISCONNECT_FAILED) {\n+                return error(\"RollbackBlock(): DisconnectBlock failed at %d, hash=%s\", pindexOld->nHeight, pindexOld->GetBlockHash().ToString());\n+            }\n+            // If DISCONNECT_UNCLEAN is returned, it means a non-existing UTXO was deleted, or an existing UTXO was\n+            // overwritten. It corresponds to cases where the block-to-be-disconnect never had all its operations\n+            // applied to the UTXO set. However, as both writing a UTXO and deleting a UTXO are idempotent operations,\n+            // the result is still a version of the UTXO set with the effects of that block undone.\n+        }\n+        pindexOld = pindexOld->pprev;\n+    }\n+\n+    // Roll forward from the forking point to the new tip.\n+    int nForkHeight = pindexFork ? pindexFork->nHeight : 0;\n+    for (int nHeight = nForkHeight + 1; nHeight <= pindexNew->nHeight; ++nHeight) {\n+        const CBlockIndex* pindex = pindexNew->GetAncestor(nHeight);\n+        LogPrintf(\"Rolling forward %s (%i)\\n\", pindex->GetBlockHash().ToString(), nHeight);\n+        if (!RollforwardBlock(pindex, cache, params)) return false;\n+    }\n+\n+    cache.SetBestBlock(pindexNew->GetBlockHash());\n+    cache.Flush();\n+    uiInterface.ShowProgress(\"\", 100);\n+    return true;\n+}\n+\n bool RewindBlockIndex(const CChainParams& params)\n {\n     LOCK(cs_main);\n@@ -3687,8 +3782,6 @@ bool InitBlockIndex(const CChainParams& chainparams)\n             CBlockIndex *pindex = AddToBlockIndex(block);\n             if (!ReceivedBlockTransactions(block, state, pindex, blockPos, chainparams.GetConsensus()))\n                 return error(\"LoadBlockIndex(): genesis block not accepted\");\n-            // Force a chainstate write so that when we VerifyDB in a moment, it doesn't check stale data\n-            return FlushStateToDisk(chainparams, state, FLUSH_STATE_ALWAYS);\n         } catch (const std::runtime_error& e) {\n             return error(\"LoadBlockIndex(): failed to initialize block database: %s\", e.what());\n         }"
      },
      {
        "sha": "8a721dd7a256770e8645aef0666a2abdfd850cb7",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4e551adfec298d12f2147467227f07e3a94b872/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4e551adfec298d12f2147467227f07e3a94b872/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=d4e551adfec298d12f2147467227f07e3a94b872",
        "patch": "@@ -260,6 +260,8 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n bool InitBlockIndex(const CChainParams& chainparams);\n /** Load the block tree and coins database from disk */\n bool LoadBlockIndex(const CChainParams& chainparams);\n+/** Update the chain tip based on database information. */\n+void LoadChainTip(const CChainParams& chainparams);\n /** Unload database information */\n void UnloadBlockIndex();\n /** Run an instance of the script checking thread */\n@@ -424,6 +426,9 @@ class CVerifyDB {\n     bool VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth);\n };\n \n+/** Replay blocks that aren't fully applied to the database. */\n+bool ReplayBlocks(const CChainParams& params, CCoinsView* view);\n+\n /** Find the last common block between the parameter chain and a locator. */\n CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator);\n "
      },
      {
        "sha": "4a10743f04792f0566b5ac1812f6b28e98d68e68",
        "filename": "test/functional/dbcrash.py",
        "status": "added",
        "additions": 268,
        "deletions": 0,
        "changes": 268,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4e551adfec298d12f2147467227f07e3a94b872/test/functional/dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4e551adfec298d12f2147467227f07e3a94b872/test/functional/dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/dbcrash.py?ref=d4e551adfec298d12f2147467227f07e3a94b872",
        "patch": "@@ -0,0 +1,268 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test recovery from a crash during chainstate writing.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from test_framework.script import *\n+from test_framework.mininode import *\n+import random\n+try:\n+    import http.client as httplib\n+except ImportError:\n+    import httplib\n+import errno\n+\n+'''\n+Test structure:\n+\n+- 4 nodes\n+  * node0, node1, and node2 will have different dbcrash ratios, and different\n+    dbcache sizes\n+  * node3 will be a regular node, with no crashing.\n+  * The nodes will not connect to each other.\n+\n+- use default test framework starting chain. initialize starting_tip_height to\n+  tip height.\n+\n+- Main loop:\n+  * generate lots of transactions on node3, enough to fill up a block.\n+  * uniformly randomly pick a tip height from starting_tip_height to\n+    tip_height; with probability 1/(height_difference+4), invalidate this block.\n+  * mine enough blocks to overtake tip_height at start of loop.\n+  * for each node in [node0,node1,node2]:\n+     - for each mined block:\n+       * submit block to node\n+       * if node crashed on/after submitting:\n+         - restart until recovery succeeds\n+         - check that utxo matches node3 using gettxoutsetinfo\n+'''\n+\n+class ChainstateWriteCrashTest(BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 4\n+        self.setup_clean_chain = False\n+\n+        # Set -maxmempool=0 to turn off mempool memory sharing with dbcache\n+        # Set -rpcservertimeout=900 to reduce socket disconnects in this\n+        # long-running test\n+        self.base_args = [\"-limitdescendantsize=0\", \"-maxmempool=0\", \"-rpcservertimeout=900\"]\n+\n+        # Set different crash ratios and cache sizes.  Note that not all of\n+        # -dbcache goes to pcoinsTip.\n+        self.node0_args = [\"-dbcrashratio=8\", \"-dbcache=4\", \"-dbbatchsize=200000\"] + self.base_args\n+        self.node1_args = [\"-dbcrashratio=16\", \"-dbcache=8\", \"-dbbatchsize=200000\"] + self.base_args\n+        self.node2_args = [\"-dbcrashratio=24\", \"-dbcache=16\", \"-dbbatchsize=200000\"] + self.base_args\n+\n+        # Node3 is a normal node with default args, except will mine full blocks\n+        self.node3_args = [\"-blockmaxweight=4000000\"]\n+        self.extra_args = [self.node0_args, self.node1_args, self.node2_args, self.node3_args]\n+\n+        # We'll track some test coverage statistics\n+        self.restart_counts = [0, 0, 0] # Track the restarts for nodes 0-2\n+        self.crashed_on_restart = 0     # Track count of crashes during recovery\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+        # Leave them unconnected, we'll use submitblock directly in this test\n+\n+    # Starts up a given node id, waits for the tip to reach the given block\n+    # hash, and calculates the utxo hash.  Exceptions on startup should\n+    # indicate node crash (due to -dbcrashratio), in which case we try again.\n+    # Give up after 60 seconds.\n+    # Returns the utxo hash of the given node.\n+    def restart_node(self, node_index, expected_tip):\n+        time_start = time.time()\n+        while time.time() - time_start < 60:\n+            try:\n+                # Any of these RPC calls could throw due to node crash\n+                self.nodes[node_index] = self.start_node(node_index, self.options.tmpdir, self.extra_args[node_index])\n+                self.nodes[node_index].waitforblock(expected_tip)\n+                utxo_hash = self.nodes[node_index].gettxoutsetinfo()['hash_serialized_2']\n+                return utxo_hash\n+            except:\n+                # An exception here should mean the node is about to crash.\n+                # If bitcoind exits, then try again.  wait_for_node_exit()\n+                # should raise an exception if bitcoind doesn't exit.\n+                wait_for_node_exit(node_index, timeout=10)\n+            self.crashed_on_restart += 1\n+            time.sleep(1)\n+\n+        # If we got here, bitcoind isn't coming back up on restart.  Could be a\n+        # bug in bitcoind, or we've gotten unlucky with our dbcrash ratio --\n+        # perhaps we generated a test case that blew up our cache?\n+        # TODO: If this happens a lot, we should try to restart without -dbcrashratio\n+        # and make sure that recovery happens.\n+        raise AssertionError(\"Unable to successfully restart node %d in allotted time\", node_index)\n+\n+    # Try submitting a block to the given node.\n+    # Catch any exceptions that indicate the node has crashed.\n+    # Returns true if the block was submitted successfully; false otherwise.\n+    def submit_block_catch_error(self, node_index, block):\n+        try:\n+            self.nodes[node_index].submitblock(block)\n+            return True\n+        except (httplib.CannotSendRequest, httplib.RemoteDisconnected) as e:\n+            self.log.debug(\"node %d submitblock raised exception: %s\", node_index, e)\n+            return False\n+        except OSError as e:\n+            self.log.debug(\"node %d submitblock raised OSError exception: errno=%s\", node_index, e.errno)\n+            if e.errno in [errno.EPIPE, errno.ECONNREFUSED, errno.ECONNRESET]:\n+                # The node has likely crashed\n+                return False\n+            else:\n+                # Unexpected exception, raise\n+                raise\n+\n+    # Use submitblock to sync node3's chain with the other nodes\n+    # If submitblock fails, restart the node and get the new utxo hash.\n+    def sync_node3blocks(self, block_hashes):\n+        # If any nodes crash while updating, we'll compare utxo hashes to\n+        # ensure recovery was successful.\n+        node3_utxo_hash = self.nodes[3].gettxoutsetinfo()['hash_serialized_2']\n+\n+        # Retrieve all the blocks from node3\n+        blocks = []\n+        for block_hash in block_hashes:\n+            blocks.append([block_hash, self.nodes[3].getblock(block_hash, 0)])\n+\n+        # Deliver each block to each other node\n+        for i in range(3):\n+            nodei_utxo_hash = None\n+            self.log.debug(\"Syncing blocks to node %d\", i)\n+            for (block_hash, block) in blocks:\n+                # Get the block from node3, and submit to node_i\n+                self.log.debug(\"submitting block %s\", block_hash)\n+                if not self.submit_block_catch_error(i, block):\n+                    # TODO: more carefully check that the crash is due to -dbcrashratio\n+                    # (change the exit code perhaps, and check that here?)\n+                    wait_for_node_exit(i, timeout=30)\n+                    self.log.debug(\"Restarting node %d after block hash %s\", i, block_hash)\n+                    nodei_utxo_hash = self.restart_node(i, block_hash)\n+                    assert nodei_utxo_hash is not None\n+                    self.restart_counts[i] += 1\n+                else:\n+                    # Clear it out after successful submitblock calls -- the cached\n+                    # utxo hash will no longer be correct\n+                    nodei_utxo_hash = None\n+\n+            # Check that the utxo hash matches node3's utxo set\n+            # NOTE: we only check the utxo set if we had to restart the node\n+            # after the last block submitted:\n+            # - checking the utxo hash causes a cache flush, which we don't\n+            # want to do every time; so\n+            # - we only update the utxo cache after a node restart, since flushing\n+            # the cache is a no-op at that point\n+            if nodei_utxo_hash is not None:\n+                self.log.debug(\"Checking txoutsetinfo matches for node %d\", i)\n+                assert_equal(nodei_utxo_hash, node3_utxo_hash)\n+\n+    # Verify that the utxo hash of each node matches node3.\n+    # Restart any nodes that crash while querying.\n+    def verify_utxo_hash(self):\n+        node3_utxo_hash = self.nodes[3].gettxoutsetinfo()['hash_serialized_2']\n+        self.log.info(\"Verifying utxo hash matches for all nodes\")\n+\n+        for i in range(3):\n+            try:\n+                nodei_utxo_hash = self.nodes[i].gettxoutsetinfo()['hash_serialized_2']\n+            except OSError:\n+                # probably a crash on db flushing\n+                nodei_utxo_hash = self.restart_node(i, self.nodes[3].getbestblockhash())\n+            assert_equal(nodei_utxo_hash, node3_utxo_hash)\n+\n+\n+    def generate_small_transactions(self, node, count, utxo_list):\n+        FEE = 1000 # TODO: replace this with node relay fee based calculation\n+        num_transactions = 0\n+        random.shuffle(utxo_list)\n+        while len(utxo_list) >= 2 and num_transactions < count:\n+            tx = CTransaction()\n+            input_amount = 0\n+            for i in range(2):\n+                utxo = utxo_list.pop()\n+                tx.vin.append(CTxIn(COutPoint(int(utxo['txid'], 16), utxo['vout'])))\n+                input_amount += int(utxo['amount']*COIN)\n+            output_amount = (input_amount - FEE)//3\n+\n+            if output_amount <= 0:\n+                # Sanity check -- if we chose inputs that are too small, skip\n+                continue\n+\n+            for i in range(3):\n+                tx.vout.append(CTxOut(output_amount, hex_str_to_bytes(utxo['scriptPubKey'])))\n+\n+            # Sign and send the transaction to get into the mempool\n+            tx_signed_hex = node.signrawtransaction(ToHex(tx))['hex']\n+            node.sendrawtransaction(tx_signed_hex)\n+            num_transactions += 1\n+\n+    def run_test(self):\n+\n+        # Start by creating a lot of utxos on node3\n+        initial_height = self.nodes[3].getblockcount()\n+        utxo_list = create_confirmed_utxos(self.nodes[3].getnetworkinfo()['relayfee'], self.nodes[3], 5000)\n+        self.log.info(\"Prepped %d utxo entries\", len(utxo_list))\n+\n+        # Sync these blocks with the other nodes\n+        block_hashes_to_sync = []\n+        for height in range(initial_height+1, self.nodes[3].getblockcount()+1):\n+            block_hashes_to_sync.append(self.nodes[3].getblockhash(height))\n+\n+        self.log.debug(\"Syncing %d blocks with other nodes\", len(block_hashes_to_sync))\n+        # Syncing the blocks could cause nodes to crash, so the test begins here.\n+        self.sync_node3blocks(block_hashes_to_sync)\n+\n+        starting_tip_height = self.nodes[3].getblockcount()\n+\n+        # Main test loop:\n+        # each time through the loop, generate a bunch of transactions,\n+        # and then either mine a single new block on the tip, or some-sized reorg.\n+        for i in range(40):\n+            self.log.info(\"Iteration %d, generating 2500 transactions %s\", i, self.restart_counts)\n+            # Generate a bunch of small-ish transactions\n+            self.generate_small_transactions(self.nodes[3], 2500, utxo_list)\n+            # Pick a random block between current tip, and starting tip\n+            current_height = self.nodes[3].getblockcount()\n+            random_height = random.randint(starting_tip_height, current_height)\n+            self.log.debug(\"At height %d, considering height %d\", current_height, random_height)\n+            if random_height > starting_tip_height:\n+                # Randomly reorg from this point with some probability (1/4 for\n+                # tip, 1/5 for tip-1, ...)\n+                if random.random() < 1.0/(current_height + 4 - random_height):\n+                    self.log.debug(\"Invalidating block at height %d\", random_height)\n+                    self.nodes[3].invalidateblock(self.nodes[3].getblockhash(random_height))\n+\n+            # Now generate new blocks until we pass the old tip height\n+            self.log.debug(\"Mining longer tip\")\n+            block_hashes = self.nodes[3].generate(current_height+1-self.nodes[3].getblockcount())\n+            self.log.debug(\"Syncing %d new blocks...\", len(block_hashes))\n+            self.sync_node3blocks(block_hashes)\n+            utxo_list = self.nodes[3].listunspent()\n+            self.log.debug(\"Node3 utxo count: %d\", len(utxo_list))\n+\n+        # Check that the utxo hashes agree with node3\n+        # Useful side effect: each utxo cache gets flushed here, so that we\n+        # won't get crashes on shutdown at the end of the test.\n+        self.verify_utxo_hash()\n+\n+        # Check the test coverage\n+        self.log.info(\"Restarted nodes: %s; crashes on restart: %d\", self.restart_counts, self.crashed_on_restart)\n+\n+        # If no nodes were restarted, we didn't test anything.\n+        assert self.restart_counts != [0, 0, 0]\n+\n+        # Make sure we tested the case of crash-during-recovery.\n+        assert self.crashed_on_restart > 0\n+\n+        # Warn if any of the nodes escaped restart.\n+        for i in range(3):\n+            if self.restart_counts[i] == 0:\n+                self.log.warn(\"Node %d never crashed during utxo flush!\", i)\n+\n+if __name__ == \"__main__\":\n+    ChainstateWriteCrashTest().main()"
      },
      {
        "sha": "2a4f3104aa0d1e656e1e1be6c8d132d702057696",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4e551adfec298d12f2147467227f07e3a94b872/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4e551adfec298d12f2147467227f07e3a94b872/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=d4e551adfec298d12f2147467227f07e3a94b872",
        "patch": "@@ -249,6 +249,8 @@ def wait_for_bitcoind_start(process, datadir, i, rpchost=None):\n                 raise\n         time.sleep(0.25)\n \n+def wait_for_node_exit(node_index, timeout):\n+    bitcoind_processes[node_index].wait(timeout)\n \n def _start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n     \"\"\"Start a bitcoind and return RPC connection to it"
      },
      {
        "sha": "54f625514bd9f1e3e24a2db2d6c83287190b55aa",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4e551adfec298d12f2147467227f07e3a94b872/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4e551adfec298d12f2147467227f07e3a94b872/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=d4e551adfec298d12f2147467227f07e3a94b872",
        "patch": "@@ -125,6 +125,7 @@\n     # vv Tests less than 5m vv\n     'maxuploadtarget.py',\n     'mempool_packages.py',\n+    'dbcrash.py',\n     # vv Tests less than 2m vv\n     'bip68-sequence.py',\n     'getblocktemplate_longpoll.py',"
      }
    ]
  },
  {
    "sha": "30c21306c17165c3925fea4ac9d1a4763c6d2a99",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMGMyMTMwNmMxNzE2NWMzOTI1ZmVhNGFjOWQxYTQ3NjNjNmQyYTk5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-28T18:15:45Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-28T18:22:00Z"
      },
      "message": "Merge #10685: Clarify CCoinsViewMemPool documentation.\n\n381b8fc36 Clarify CCoinsViewMemPool documentation. (Matt Corallo)\n\nTree-SHA512: 0d1520595a03ea4038b4119871d79dfc28a50f42ac7667b30a583805d4fe4b0480a6912b9b4f7660c7223778ef85f2f9d1870551383a35c5e8c88cd2935f59d3",
      "tree": {
        "sha": "d7c5cbf6a96fb2121c184ec74edaa150c4861988",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7c5cbf6a96fb2121c184ec74edaa150c4861988"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30c21306c17165c3925fea4ac9d1a4763c6d2a99",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZU/PIAAoJEKY26XYx92fg/kQQAK8YjJ/SWOY9QgKS+TTBvDjd\ncKM44DCZ9ukEOwdoDBbXMm6qtkOjNhDBx9yPfyDzQa3RFdg4jg47YVJonpeI8qry\nM3uSijnxKtn0Nmtdx/sqAAdQ/AhKOmjvANonZvEH55+3VmVjdD5iIpvBDppwjmfw\nq1LWW4jngJPgi47WWPC33eCZlm+m82QCxbWIVrUazvLR3RUiiLFnXwPn1SI7mu5f\nFoVoc3irCBvzXWxKyZHireAzk7mymWJpfv6lx7x7nrJztn0SEXNEf2g4NxGR33sW\nAnIzxfp2vTz4fjQ5REHHja6YWxJMmkkrYZuNb1hPhJzmuO8k56PC3rvmLz7tEwgt\nhU2q1Ux4zUwKDjkIzoSs5RcXPBlVhofp+/0Rz0y3hwTwZM30jyfw1qGfFlTJaEqX\nX0IqTYqhSCJm8hQ6mZdhB6+To7LsG4QROq62uMOhvkrv/25Ul2/yvg7gxUi7BDF7\n36yvPqL7fFQ40GgAaSGQqbPjegnzfcrNmY5gNfZqNRg9SHfVd1LgqmGoqiT2iOsd\nZL9rG5xOcVlMfsmIcP47jQ2YoWayv3nVMdt4kUIloTpvtM86vJuRJwYegI7qF7vg\nP9y38ONcj0ow59UnDZE0W3LuogYHRUuPNb1Ue2Mh+Pl13RInqvRhmay9CeomiGRJ\naRm1yTcWer+RqEhIZbRD\n=ZGHG\n-----END PGP SIGNATURE-----",
        "payload": "tree d7c5cbf6a96fb2121c184ec74edaa150c4861988\nparent d4e551adfec298d12f2147467227f07e3a94b872\nparent 381b8fc36537f9fa42f4487bcf55920b2ae0bda9\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1498673745 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1498674120 -0700\n\nMerge #10685: Clarify CCoinsViewMemPool documentation.\n\n381b8fc36 Clarify CCoinsViewMemPool documentation. (Matt Corallo)\n\nTree-SHA512: 0d1520595a03ea4038b4119871d79dfc28a50f42ac7667b30a583805d4fe4b0480a6912b9b4f7660c7223778ef85f2f9d1870551383a35c5e8c88cd2935f59d3\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30c21306c17165c3925fea4ac9d1a4763c6d2a99",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/30c21306c17165c3925fea4ac9d1a4763c6d2a99",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30c21306c17165c3925fea4ac9d1a4763c6d2a99/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d4e551adfec298d12f2147467227f07e3a94b872",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4e551adfec298d12f2147467227f07e3a94b872",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d4e551adfec298d12f2147467227f07e3a94b872"
      },
      {
        "sha": "381b8fc36537f9fa42f4487bcf55920b2ae0bda9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/381b8fc36537f9fa42f4487bcf55920b2ae0bda9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/381b8fc36537f9fa42f4487bcf55920b2ae0bda9"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c17ca2fa3a1760f57fb9e108d44205734f11860d",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30c21306c17165c3925fea4ac9d1a4763c6d2a99/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30c21306c17165c3925fea4ac9d1a4763c6d2a99/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=30c21306c17165c3925fea4ac9d1a4763c6d2a99",
        "patch": "@@ -991,7 +991,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n     if (fMempool) {\n         LOCK(mempool.cs);\n         CCoinsViewMemPool view(pcoinsTip, mempool);\n-        if (!view.GetCoin(out, coin) || mempool.isSpent(out)) { // TODO: filtering spent coins should be done by the CCoinsViewMemPool\n+        if (!view.GetCoin(out, coin) || mempool.isSpent(out)) {\n             return NullUniValue;\n         }\n     } else {"
      },
      {
        "sha": "d272114a7c551e29f687e38fec85f8ad05cf5431",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30c21306c17165c3925fea4ac9d1a4763c6d2a99/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30c21306c17165c3925fea4ac9d1a4763c6d2a99/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=30c21306c17165c3925fea4ac9d1a4763c6d2a99",
        "patch": "@@ -669,6 +669,13 @@ class CTxMemPool\n /** \n  * CCoinsView that brings transactions from a memorypool into view.\n  * It does not check for spendings by memory pool transactions.\n+ * Instead, it provides access to all Coins which are either unspent in the\n+ * base CCoinsView, or are outputs from any mempool transaction!\n+ * This allows transaction replacement to work as expected, as you want to\n+ * have all inputs \"available\" to check signatures, and any cycles in the\n+ * dependency graph are checked directly in AcceptToMemoryPool.\n+ * It also allows you to sign a double-spend directly in signrawtransaction,\n+ * as long as the conflicting transaction is not yet confirmed.\n  */\n class CCoinsViewMemPool : public CCoinsViewBacked\n {"
      }
    ]
  },
  {
    "sha": "90a002ea647dcea57a2ed4294eab77897168ba1d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MGEwMDJlYTY0N2RjZWE1N2EyZWQ0Mjk0ZWFiNzc4OTcxNjhiYTFk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-28T18:23:11Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-28T18:44:22Z"
      },
      "message": "Merge #10558: Address nits from per-utxo change\n\n21d4afa12 Comment clarifications in coins.cpp (Alex Morcos)\n3c8a9aeff Add belt-and-suspenders in DisconnectBlock (Alex Morcos)\n\nTree-SHA512: d83e12ed71674faaaaebc03ffa1e2276984c35a29db419268ac9e14a45b33ccab716e3606dff8cfe1dcee4bec6e4794d2ca90341f10d5684be80e3fee61addf8",
      "tree": {
        "sha": "77a518a5dbbe4c4f53203a11cdb3538a68ab7b6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77a518a5dbbe4c4f53203a11cdb3538a68ab7b6e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90a002ea647dcea57a2ed4294eab77897168ba1d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZU/kGAAoJEKY26XYx92fgG+4P/inYRoxiR8MmcE8QC6HN6KQ1\nlr9/G34l/f4udgg6YX363geJogcbKRtRB6xrkfJXNglRHaNI6tIOo31/1nZwdlaU\nZWUK2kjMq7A4xAiYxj5vBF5DxF/VjwnHdmvbhh0YMSO1YNPOMm8Tf2un0aP5kqFg\ntMsmeZC8E7DrSHX7IgN8pFl6vmuGWy+FJtApLox+mK7DHyUvILudb5o4PRfM/dKX\nw7tCSuHdPAVwOtwCDJlKWlTu5S7x4glP391jterSAWpO055tO2WEebud6X37rM3R\nWCDorzGiZsGhVRmha9P12NawgFDlLYZeEXtNkt6i2cuhexO0CH+ZWsXUD9QPfuOY\nXXYKMtHa/cyGLtimAgkmi8CxslIK3sR8g1xTuoX5+kiEEvSc0EbHMhjmcQjUxiq7\n3enS/7FtjakwJhIHy/0jr5a0IGe1W9IfkE2qQiyn+p7lcQqG6wLzWdG/tOH7xbiD\ngFt0covJvESImsUQj34IJya4pMFMZhIqAXcRDef6SZI9tgSAogQv/qF0wrdZuDmK\n/WChomOnMVvpoU1KbmdcSd/KC4BVYYcFA/UDga5/A3JFp8+Ixz00C5ZgW2ZXnAG0\nbP0aFIAR9ro53Mnt0vbXF4pmXypi56XkOFxnQKyDG/wXm2trMP6CA3j6ciJALSKp\nIT/q3NWjo3MpPEipuS9J\n=tIjd\n-----END PGP SIGNATURE-----",
        "payload": "tree 77a518a5dbbe4c4f53203a11cdb3538a68ab7b6e\nparent 30c21306c17165c3925fea4ac9d1a4763c6d2a99\nparent 21d4afa12fbf1e7f59b629060c9e10db213fe07a\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1498674191 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1498675462 -0700\n\nMerge #10558: Address nits from per-utxo change\n\n21d4afa12 Comment clarifications in coins.cpp (Alex Morcos)\n3c8a9aeff Add belt-and-suspenders in DisconnectBlock (Alex Morcos)\n\nTree-SHA512: d83e12ed71674faaaaebc03ffa1e2276984c35a29db419268ac9e14a45b33ccab716e3606dff8cfe1dcee4bec6e4794d2ca90341f10d5684be80e3fee61addf8\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90a002ea647dcea57a2ed4294eab77897168ba1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90a002ea647dcea57a2ed4294eab77897168ba1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90a002ea647dcea57a2ed4294eab77897168ba1d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "30c21306c17165c3925fea4ac9d1a4763c6d2a99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30c21306c17165c3925fea4ac9d1a4763c6d2a99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30c21306c17165c3925fea4ac9d1a4763c6d2a99"
      },
      {
        "sha": "21d4afa12fbf1e7f59b629060c9e10db213fe07a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21d4afa12fbf1e7f59b629060c9e10db213fe07a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/21d4afa12fbf1e7f59b629060c9e10db213fe07a"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "efb5ce869c3fc13365cc07e436b75c2a7364d3dd",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90a002ea647dcea57a2ed4294eab77897168ba1d/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90a002ea647dcea57a2ed4294eab77897168ba1d/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=90a002ea647dcea57a2ed4294eab77897168ba1d",
        "patch": "@@ -306,6 +306,9 @@ class CCoinsViewCache : public CCoinsViewBacked\n void AddCoins(CCoinsViewCache& cache, const CTransaction& tx, int nHeight, bool check = false);\n \n //! Utility function to find any unspent output with a given txid.\n+// This function can be quite expensive because in the event of a transaction\n+// which is not found in the cache, it can cause up to MAX_OUTPUTS_PER_BLOCK\n+// lookups to database, so it should be used with care.\n const Coin& AccessByTxid(const CCoinsViewCache& cache, const uint256& txid);\n \n #endif // BITCOIN_COINS_H"
      },
      {
        "sha": "0fe7f775af798f2f3a123ca60e9a30a607d21174",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90a002ea647dcea57a2ed4294eab77897168ba1d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90a002ea647dcea57a2ed4294eab77897168ba1d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=90a002ea647dcea57a2ed4294eab77897168ba1d",
        "patch": "@@ -1366,6 +1366,7 @@ static DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex*\n     for (int i = block.vtx.size() - 1; i >= 0; i--) {\n         const CTransaction &tx = *(block.vtx[i]);\n         uint256 hash = tx.GetHash();\n+        bool is_coinbase = tx.IsCoinBase();\n \n         // Check that all outputs are available and match the outputs in the block itself\n         // exactly.\n@@ -1374,7 +1375,7 @@ static DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex*\n                 COutPoint out(hash, o);\n                 Coin coin;\n                 bool is_spent = view.SpendCoin(out, &coin);\n-                if (!is_spent || tx.vout[o] != coin.out) {\n+                if (!is_spent || tx.vout[o] != coin.out || pindex->nHeight != coin.nHeight || is_coinbase != coin.fCoinBase) {\n                     fClean = false; // transaction output mismatch\n                 }\n             }"
      }
    ]
  },
  {
    "sha": "080ec5209172ac9605f1434559dbb3c1e012b10a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODBlYzUyMDkxNzJhYzk2MDVmMTQzNDU1OWRiYjNjMWUwMTJiMTBh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-06-29T09:02:34Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-06-29T09:02:47Z"
      },
      "message": "Merge #10688: contrib: Update laanwj key\n\n3c85332 contrib: Update laanwj key (Wladimir J. van der Laan)\n\nTree-SHA512: c8cad76158850a3e480ccb58ee86c3dbb4e45ef67376173720c2520d3cb02c1c3e13b4e0acea3be6d90991e073db49aad2e185a87a09be194f1d1605b31b6ee4",
      "tree": {
        "sha": "617f1fba5ec980f153bbb0eca769265c15ec5429",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/617f1fba5ec980f153bbb0eca769265c15ec5429"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/080ec5209172ac9605f1434559dbb3c1e012b10a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZVMI3AAoJENLqSFDnUoslf64P/2z0vcnRyPrvZpQDToEZH45R\nLpeJtwIkU1/O2K8+hA3i41SbW7k9KHavbtYTrphM0iE49WJxKd5QyPZzrcu/pPr9\n1CJ+3yxDK6GteskDqquYiAnDzUP0XcepD0cejK28RzdaJ/QtJ0w35jM4jb/KSigL\nyLr69ewhfrMFj0e/wX+65vXqCep1ZWzJoutObNtLYKJXbTWfW0JAl1aNo2CqKejt\nMQLukF4wa4hMLWuUT4xziQBsJI5TWVDTk774Z26SDe1KeSYge07ehifyoqv5ZSSI\nndUQgz2Ne9yBsSpeYFLx5zfHHrfW+vac4LxLy7khuDqgXti5hHwhDDQK31p8u61G\nr+IJihc7tU73EdncWwY5ZUfOf3CJnITXL2l2ww90NnaImv3xuMQZFHKmX1mk0QWC\n5gV+tIl61/6EseDNenjGQ6E6tRr/zkEe1hWSbruwVCHBMejUWyjKuN7khRbHnd5j\nDTvDCQsr09yzcG4SXsJdbDE0ZoweP7MS38NQ7DWiHlprnuzmq7kBxHUktSt//d8e\nv1aZ6jegPE/1ExHjv70nS/RidIbaq3/lX4l1ZL37n9a2WVpYckcID6Z5+HXIWmua\n8iKk8fY9LTTnk1xOhGBSUNWrlCHN9HG6WLBa3WWFpY3VBd4yknHA9k4MKVZJCB1F\ncXGBSwuokJWd1nTUgKqx\n=p1q6\n-----END PGP SIGNATURE-----",
        "payload": "tree 617f1fba5ec980f153bbb0eca769265c15ec5429\nparent 90a002ea647dcea57a2ed4294eab77897168ba1d\nparent 3c85332f2928489964c4a5cff66f7119892e7a17\nauthor MarcoFalke <falke.marco@gmail.com> 1498726954 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1498726967 +0200\n\nMerge #10688: contrib: Update laanwj key\n\n3c85332 contrib: Update laanwj key (Wladimir J. van der Laan)\n\nTree-SHA512: c8cad76158850a3e480ccb58ee86c3dbb4e45ef67376173720c2520d3cb02c1c3e13b4e0acea3be6d90991e073db49aad2e185a87a09be194f1d1605b31b6ee4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/080ec5209172ac9605f1434559dbb3c1e012b10a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/080ec5209172ac9605f1434559dbb3c1e012b10a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/080ec5209172ac9605f1434559dbb3c1e012b10a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90a002ea647dcea57a2ed4294eab77897168ba1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90a002ea647dcea57a2ed4294eab77897168ba1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90a002ea647dcea57a2ed4294eab77897168ba1d"
      },
      {
        "sha": "3c85332f2928489964c4a5cff66f7119892e7a17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c85332f2928489964c4a5cff66f7119892e7a17",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c85332f2928489964c4a5cff66f7119892e7a17"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": [
      {
        "sha": "eed232a8722de569dc75dc97fc926e18b060898a",
        "filename": "contrib/gitian-keys/laanwj-key.pgp",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/080ec5209172ac9605f1434559dbb3c1e012b10a/contrib/gitian-keys/laanwj-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/080ec5209172ac9605f1434559dbb3c1e012b10a/contrib/gitian-keys/laanwj-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/laanwj-key.pgp?ref=080ec5209172ac9605f1434559dbb3c1e012b10a"
      }
    ]
  },
  {
    "sha": "df7e2f057b6c9f0f7c950f9077dc63a577f54117",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjdlMmYwNTdiNmM5ZjBmN2M5NTBmOTA3N2RjNjNhNTc3ZjU0MTE3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-27T14:50:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-29T10:02:43Z"
      },
      "message": "rpc: Move the `generate` RPC call to rpcwallet\n\nThis makes it possible to mine to any wallet when multi-wallet mode is added.\nSolves the same problem as #10649, but IMO in a cleaner way.\n\nIt also gets rid of the circuitous `ScriptForMining` method on\n`CValidationInterface`, which really doesn't belong there.\n\nAfter this change it's still possible to mine without wallet through\n`generatetoaddress`.",
      "tree": {
        "sha": "15eb622e97f335d74ceebc2583dbcd0ca5ffa4fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15eb622e97f335d74ceebc2583dbcd0ca5ffa4fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df7e2f057b6c9f0f7c950f9077dc63a577f54117",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df7e2f057b6c9f0f7c950f9077dc63a577f54117",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df7e2f057b6c9f0f7c950f9077dc63a577f54117",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df7e2f057b6c9f0f7c950f9077dc63a577f54117/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ac52492cd22782d7b09c78c198fb6fd8eb1da57c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac52492cd22782d7b09c78c198fb6fd8eb1da57c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac52492cd22782d7b09c78c198fb6fd8eb1da57c"
      }
    ],
    "stats": {
      "total": 106,
      "additions": 62,
      "deletions": 44
    },
    "files": [
      {
        "sha": "8ecd3918045b672fbdb1fbe014b661d991ef23ae",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df7e2f057b6c9f0f7c950f9077dc63a577f54117/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df7e2f057b6c9f0f7c950f9077dc63a577f54117/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=df7e2f057b6c9f0f7c950f9077dc63a577f54117",
        "patch": "@@ -127,6 +127,7 @@ BITCOIN_CORE_H = \\\n   reverselock.h \\\n   rpc/blockchain.h \\\n   rpc/client.h \\\n+  rpc/mining.h \\\n   rpc/protocol.h \\\n   rpc/server.h \\\n   rpc/register.h \\"
      },
      {
        "sha": "e50742f36e37a57c2103b02427ecc6185d472525",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 37,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df7e2f057b6c9f0f7c950f9077dc63a577f54117/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df7e2f057b6c9f0f7c950f9077dc63a577f54117/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=df7e2f057b6c9f0f7c950f9077dc63a577f54117",
        "patch": "@@ -18,6 +18,7 @@\n #include \"policy/fees.h\"\n #include \"pow.h\"\n #include \"rpc/blockchain.h\"\n+#include \"rpc/mining.h\"\n #include \"rpc/server.h\"\n #include \"txmempool.h\"\n #include \"util.h\"\n@@ -141,42 +142,6 @@ UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGen\n     return blockHashes;\n }\n \n-UniValue generate(const JSONRPCRequest& request)\n-{\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n-            \"generate nblocks ( maxtries )\\n\"\n-            \"\\nMine up to nblocks blocks immediately (before the RPC call returns)\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. nblocks      (numeric, required) How many blocks are generated immediately.\\n\"\n-            \"2. maxtries     (numeric, optional) How many iterations to try (default = 1000000).\\n\"\n-            \"\\nResult:\\n\"\n-            \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n-            \"\\nExamples:\\n\"\n-            \"\\nGenerate 11 blocks\\n\"\n-            + HelpExampleCli(\"generate\", \"11\")\n-        );\n-\n-    int nGenerate = request.params[0].get_int();\n-    uint64_t nMaxTries = 1000000;\n-    if (request.params.size() > 1) {\n-        nMaxTries = request.params[1].get_int();\n-    }\n-\n-    std::shared_ptr<CReserveScript> coinbaseScript;\n-    GetMainSignals().ScriptForMining(coinbaseScript);\n-\n-    // If the keypool is exhausted, no script is returned at all.  Catch this.\n-    if (!coinbaseScript)\n-        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n-\n-    //throw an error if no script was provided\n-    if (coinbaseScript->reserveScript.empty())\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"No coinbase script available (mining requires a wallet)\");\n-\n-    return generateBlocks(coinbaseScript, nGenerate, nMaxTries, true);\n-}\n-\n UniValue generatetoaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n@@ -962,7 +927,6 @@ static const CRPCCommand commands[] =\n     { \"mining\",             \"getblocktemplate\",       &getblocktemplate,       true,  {\"template_request\"} },\n     { \"mining\",             \"submitblock\",            &submitblock,            true,  {\"hexdata\",\"dummy\"} },\n \n-    { \"generating\",         \"generate\",               &generate,               true,  {\"nblocks\",\"maxtries\"} },\n     { \"generating\",         \"generatetoaddress\",      &generatetoaddress,      true,  {\"nblocks\",\"address\",\"maxtries\"} },\n \n     { \"util\",               \"estimatefee\",            &estimatefee,            true,  {\"nblocks\"} },"
      },
      {
        "sha": "a148d851da0000805729a0eacdc4e33c1de4fe62",
        "filename": "src/rpc/mining.h",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df7e2f057b6c9f0f7c950f9077dc63a577f54117/src/rpc/mining.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df7e2f057b6c9f0f7c950f9077dc63a577f54117/src/rpc/mining.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.h?ref=df7e2f057b6c9f0f7c950f9077dc63a577f54117",
        "patch": "@@ -0,0 +1,15 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_MINING_H\n+#define BITCOIN_RPC_MINING_H\n+\n+#include \"script/script.h\"\n+\n+#include <univalue.h>\n+\n+/** Generate blocks (mine) */\n+UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGenerate, uint64_t nMaxTries, bool keepScript);\n+\n+#endif"
      },
      {
        "sha": "be2f20b8635d9f727e65722b4b2c108e48b30385",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df7e2f057b6c9f0f7c950f9077dc63a577f54117/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df7e2f057b6c9f0f7c950f9077dc63a577f54117/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=df7e2f057b6c9f0f7c950f9077dc63a577f54117",
        "patch": "@@ -21,12 +21,10 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n     g_signals.BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n-    g_signals.ScriptForMining.connect(boost::bind(&CValidationInterface::GetScriptForMining, pwalletIn, _1));\n     g_signals.NewPoWValidBlock.connect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n }\n \n void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n-    g_signals.ScriptForMining.disconnect(boost::bind(&CValidationInterface::GetScriptForMining, pwalletIn, _1));\n     g_signals.BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n     g_signals.Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n     g_signals.Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n@@ -39,7 +37,6 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n }\n \n void UnregisterAllValidationInterfaces() {\n-    g_signals.ScriptForMining.disconnect_all_slots();\n     g_signals.BlockChecked.disconnect_all_slots();\n     g_signals.Broadcast.disconnect_all_slots();\n     g_signals.Inventory.disconnect_all_slots();"
      },
      {
        "sha": "17545018df75af6067f2247fd3e3aa2fde0066bf",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df7e2f057b6c9f0f7c950f9077dc63a577f54117/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df7e2f057b6c9f0f7c950f9077dc63a577f54117/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=df7e2f057b6c9f0f7c950f9077dc63a577f54117",
        "patch": "@@ -40,7 +40,6 @@ class CValidationInterface {\n     virtual void Inventory(const uint256 &hash) {}\n     virtual void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) {}\n     virtual void BlockChecked(const CBlock&, const CValidationState&) {}\n-    virtual void GetScriptForMining(std::shared_ptr<CReserveScript>&) {};\n     virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};\n     friend void ::RegisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterValidationInterface(CValidationInterface*);\n@@ -72,8 +71,6 @@ struct CMainSignals {\n      * callback was generated (not necessarily now)\n      */\n     boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n-    /** Notifies listeners that a key for mining is required (coinbase) */\n-    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n     /**\n      * Notifies listeners that a block which builds directly on our current tip\n      * has been received and connected to the headers tree, though not validated yet */"
      },
      {
        "sha": "93d3920d21b6e9440a636644e99cae2688df794a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df7e2f057b6c9f0f7c950f9077dc63a577f54117/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df7e2f057b6c9f0f7c950f9077dc63a577f54117/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=df7e2f057b6c9f0f7c950f9077dc63a577f54117",
        "patch": "@@ -15,6 +15,7 @@\n #include \"policy/fees.h\"\n #include \"policy/policy.h\"\n #include \"policy/rbf.h\"\n+#include \"rpc/mining.h\"\n #include \"rpc/server.h\"\n #include \"script/sign.h\"\n #include \"timedata.h\"\n@@ -2922,6 +2923,47 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue generate(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw std::runtime_error(\n+            \"generate nblocks ( maxtries )\\n\"\n+            \"\\nMine up to nblocks blocks immediately (before the RPC call returns) to an address in the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. nblocks      (numeric, required) How many blocks are generated immediately.\\n\"\n+            \"2. maxtries     (numeric, optional) How many iterations to try (default = 1000000).\\n\"\n+            \"\\nResult:\\n\"\n+            \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nGenerate 11 blocks\\n\"\n+            + HelpExampleCli(\"generate\", \"11\")\n+        );\n+\n+    int nGenerate = request.params[0].get_int();\n+    uint64_t nMaxTries = 1000000;\n+    if (request.params.size() > 1) {\n+        nMaxTries = request.params[1].get_int();\n+    }\n+\n+    std::shared_ptr<CReserveScript> coinbaseScript;\n+    pwallet->GetScriptForMining(coinbaseScript);\n+\n+    // If the keypool is exhausted, no script is returned at all.  Catch this.\n+    if (!coinbaseScript)\n+        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n+\n+    //throw an error if no script was provided\n+    if (coinbaseScript->reserveScript.empty())\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"No coinbase script available (mining requires a wallet)\");\n+\n+    return generateBlocks(coinbaseScript, nGenerate, nMaxTries, true);\n+}\n+\n extern UniValue abortrescan(const JSONRPCRequest& request); // in rpcdump.cpp\n extern UniValue dumpprivkey(const JSONRPCRequest& request); // in rpcdump.cpp\n extern UniValue importprivkey(const JSONRPCRequest& request);\n@@ -2985,6 +3027,8 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"walletpassphrasechange\",   &walletpassphrasechange,   true,   {\"oldpassphrase\",\"newpassphrase\"} },\n     { \"wallet\",             \"walletpassphrase\",         &walletpassphrase,         true,   {\"passphrase\",\"timeout\"} },\n     { \"wallet\",             \"removeprunedfunds\",        &removeprunedfunds,        true,   {\"txid\"} },\n+\n+    { \"generating\",         \"generate\",                 &generate,                 true,   {\"nblocks\",\"maxtries\"} },\n };\n \n void RegisterWalletRPCCommands(CRPCTable &t)"
      },
      {
        "sha": "2af61b1aa5ac5f9ee4ac366dcaf742a7c02a93fd",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df7e2f057b6c9f0f7c950f9077dc63a577f54117/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df7e2f057b6c9f0f7c950f9077dc63a577f54117/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=df7e2f057b6c9f0f7c950f9077dc63a577f54117",
        "patch": "@@ -1025,7 +1025,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         }\n     }\n \n-    void GetScriptForMining(std::shared_ptr<CReserveScript> &script) override;\n+    void GetScriptForMining(std::shared_ptr<CReserveScript> &script);\n     \n     unsigned int GetKeyPoolSize()\n     {"
      }
    ]
  },
  {
    "sha": "2a962834febc9f56126ef06cf1bd5e1b02370278",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTk2MjgzNGZlYmM5ZjU2MTI2ZWYwNmNmMWJkNWUxYjAyMzcwMjc4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-28T06:32:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-29T10:02:44Z"
      },
      "message": "rpc: Update `generate` for developer notes\n\nFix nits by John Newbery.",
      "tree": {
        "sha": "ceab0a93b505e6c9af7dbb18ce99b3f35bc3269e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ceab0a93b505e6c9af7dbb18ce99b3f35bc3269e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a962834febc9f56126ef06cf1bd5e1b02370278",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a962834febc9f56126ef06cf1bd5e1b02370278",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a962834febc9f56126ef06cf1bd5e1b02370278",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a962834febc9f56126ef06cf1bd5e1b02370278/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df7e2f057b6c9f0f7c950f9077dc63a577f54117",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df7e2f057b6c9f0f7c950f9077dc63a577f54117",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df7e2f057b6c9f0f7c950f9077dc63a577f54117"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 16,
      "deletions": 12
    },
    "files": [
      {
        "sha": "e0c7ab9f0f98686805fd07883c811576c53960a8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 12,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a962834febc9f56126ef06cf1bd5e1b02370278/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a962834febc9f56126ef06cf1bd5e1b02370278/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=2a962834febc9f56126ef06cf1bd5e1b02370278",
        "patch": "@@ -2927,10 +2927,11 @@ UniValue generate(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n         throw std::runtime_error(\n             \"generate nblocks ( maxtries )\\n\"\n             \"\\nMine up to nblocks blocks immediately (before the RPC call returns) to an address in the wallet.\\n\"\n@@ -2943,25 +2944,28 @@ UniValue generate(const JSONRPCRequest& request)\n             \"\\nGenerate 11 blocks\\n\"\n             + HelpExampleCli(\"generate\", \"11\")\n         );\n+    }\n \n-    int nGenerate = request.params[0].get_int();\n-    uint64_t nMaxTries = 1000000;\n-    if (request.params.size() > 1) {\n-        nMaxTries = request.params[1].get_int();\n+    int num_generate = request.params[0].get_int();\n+    uint64_t max_tries = 1000000;\n+    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+        max_tries = request.params[1].get_int();\n     }\n \n-    std::shared_ptr<CReserveScript> coinbaseScript;\n-    pwallet->GetScriptForMining(coinbaseScript);\n+    std::shared_ptr<CReserveScript> coinbase_script;\n+    pwallet->GetScriptForMining(coinbase_script);\n \n     // If the keypool is exhausted, no script is returned at all.  Catch this.\n-    if (!coinbaseScript)\n+    if (!coinbase_script) {\n         throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n+    }\n \n     //throw an error if no script was provided\n-    if (coinbaseScript->reserveScript.empty())\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"No coinbase script available (mining requires a wallet)\");\n+    if (coinbase_script->reserveScript.empty()) {\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"No coinbase script available\");\n+    }\n \n-    return generateBlocks(coinbaseScript, nGenerate, nMaxTries, true);\n+    return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n extern UniValue abortrescan(const JSONRPCRequest& request); // in rpcdump.cpp"
      }
    ]
  },
  {
    "sha": "37065d2ed2869aea5a83e69a0ef7a55c5d56724c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNzA2NWQyZWQyODY5YWVhNWE4M2U2OWEwZWY3YTU1YzVkNTY3MjRj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-07T15:54:39Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-29T10:16:32Z"
      },
      "message": "[tests] remove unused imports from utils.py",
      "tree": {
        "sha": "80546b50c01313b2dc6f6e42e7959c311a360bab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80546b50c01313b2dc6f6e42e7959c311a360bab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37065d2ed2869aea5a83e69a0ef7a55c5d56724c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37065d2ed2869aea5a83e69a0ef7a55c5d56724c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/37065d2ed2869aea5a83e69a0ef7a55c5d56724c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37065d2ed2869aea5a83e69a0ef7a55c5d56724c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90a002ea647dcea57a2ed4294eab77897168ba1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90a002ea647dcea57a2ed4294eab77897168ba1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90a002ea647dcea57a2ed4294eab77897168ba1d"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "f00232c9ffe0398f4456b4881c48144873f5d336",
        "filename": "test/functional/bip9-softforks.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37065d2ed2869aea5a83e69a0ef7a55c5d56724c/test/functional/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37065d2ed2869aea5a83e69a0ef7a55c5d56724c/test/functional/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip9-softforks.py?ref=37065d2ed2869aea5a83e69a0ef7a55c5d56724c",
        "patch": "@@ -15,16 +15,17 @@\n test that enforcement has not triggered (which triggers ACTIVE)\n test that enforcement has triggered\n \"\"\"\n+from io import BytesIO\n+import shutil\n+import time\n+import itertools\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n from test_framework.mininode import CTransaction, NetworkThread\n from test_framework.blocktools import create_coinbase, create_block\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import CScript, OP_1NEGATE, OP_CHECKSEQUENCEVERIFY, OP_DROP\n-from io import BytesIO\n-import time\n-import itertools\n \n class BIP9SoftForksTest(ComparisonTestFramework):\n "
      },
      {
        "sha": "9f40de08c6f9c80f38c2cc1915193980018d38e9",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37065d2ed2869aea5a83e69a0ef7a55c5d56724c/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37065d2ed2869aea5a83e69a0ef7a55c5d56724c/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=37065d2ed2869aea5a83e69a0ef7a55c5d56724c",
        "patch": "@@ -5,15 +5,13 @@\n \"\"\"Helpful routines for regression testing.\"\"\"\n \n import os\n-import sys\n \n from binascii import hexlify, unhexlify\n from base64 import b64encode\n from decimal import Decimal, ROUND_DOWN\n import json\n import http.client\n import random\n-import shutil\n import subprocess\n import tempfile\n import time"
      },
      {
        "sha": "ff51cba4b3f64f94c6de22081400a97a25e63cd1",
        "filename": "test/functional/walletbackup.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37065d2ed2869aea5a83e69a0ef7a55c5d56724c/test/functional/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37065d2ed2869aea5a83e69a0ef7a55c5d56724c/test/functional/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/walletbackup.py?ref=37065d2ed2869aea5a83e69a0ef7a55c5d56724c",
        "patch": "@@ -30,10 +30,11 @@\n Shutdown again, restore using importwallet,\n and confirm again balances are correct.\n \"\"\"\n+from random import randint\n+import shutil\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from random import randint\n \n class WalletBackupTest(BitcoinTestFramework):\n "
      }
    ]
  },
  {
    "sha": "f1fe5368f191018a72276a93a9e74cd95f896697",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMWZlNTM2OGYxOTEwMThhNzIyNzZhOTNhOWU3NGNkOTVmODk2Njk3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-07T15:44:17Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-29T10:19:06Z"
      },
      "message": "[tests] fix flake8 warnings in test_framework.py and util.py",
      "tree": {
        "sha": "b80612a6a7b9177e5eaf173f7548a12b58b06790",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b80612a6a7b9177e5eaf173f7548a12b58b06790"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1fe5368f191018a72276a93a9e74cd95f896697",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1fe5368f191018a72276a93a9e74cd95f896697",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f1fe5368f191018a72276a93a9e74cd95f896697",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1fe5368f191018a72276a93a9e74cd95f896697/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "37065d2ed2869aea5a83e69a0ef7a55c5d56724c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37065d2ed2869aea5a83e69a0ef7a55c5d56724c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/37065d2ed2869aea5a83e69a0ef7a55c5d56724c"
      }
    ],
    "stats": {
      "total": 205,
      "additions": 104,
      "deletions": 101
    },
    "files": [
      {
        "sha": "37e59f79db0b9f5ef552cebe605a55c24fde39f2",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 19,
        "deletions": 18,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1fe5368f191018a72276a93a9e74cd95f896697/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1fe5368f191018a72276a93a9e74cd95f896697/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=f1fe5368f191018a72276a93a9e74cd95f896697",
        "patch": "@@ -14,6 +14,7 @@\n import sys\n import tempfile\n import time\n+import traceback\n \n from .util import (\n     PortSeed,\n@@ -77,7 +78,7 @@ def add_options(self, parser):\n         pass\n \n     def setup_chain(self):\n-        self.log.info(\"Initializing test directory \"+self.options.tmpdir)\n+        self.log.info(\"Initializing test directory \" + self.options.tmpdir)\n         if self.setup_clean_chain:\n             self._initialize_chain_clean(self.options.tmpdir, self.num_nodes)\n         else:\n@@ -111,9 +112,9 @@ def main(self):\n                           help=\"Leave bitcoinds and test.* datadir on exit or error\")\n         parser.add_option(\"--noshutdown\", dest=\"noshutdown\", default=False, action=\"store_true\",\n                           help=\"Don't stop bitcoinds after the test execution\")\n-        parser.add_option(\"--srcdir\", dest=\"srcdir\", default=os.path.normpath(os.path.dirname(os.path.realpath(__file__))+\"/../../../src\"),\n+        parser.add_option(\"--srcdir\", dest=\"srcdir\", default=os.path.normpath(os.path.dirname(os.path.realpath(__file__)) + \"/../../../src\"),\n                           help=\"Source directory containing bitcoind/bitcoin-cli (default: %default)\")\n-        parser.add_option(\"--cachedir\", dest=\"cachedir\", default=os.path.normpath(os.path.dirname(os.path.realpath(__file__))+\"/../../cache\"),\n+        parser.add_option(\"--cachedir\", dest=\"cachedir\", default=os.path.normpath(os.path.dirname(os.path.realpath(__file__)) + \"/../../cache\"),\n                           help=\"Directory for caching pregenerated datadirs\")\n         parser.add_option(\"--tmpdir\", dest=\"tmpdir\", help=\"Root directory for datadirs\")\n         parser.add_option(\"-l\", \"--loglevel\", dest=\"loglevel\", default=\"INFO\",\n@@ -134,7 +135,7 @@ def main(self):\n \n         PortSeed.n = self.options.port_seed\n \n-        os.environ['PATH'] = self.options.srcdir+\":\"+self.options.srcdir+\"/qt:\"+os.environ['PATH']\n+        os.environ['PATH'] = self.options.srcdir + \":\" + self.options.srcdir + \"/qt:\" + os.environ['PATH']\n \n         check_json_precision()\n \n@@ -188,7 +189,7 @@ def main(self):\n                 for fn in filenames:\n                     try:\n                         with open(fn, 'r') as f:\n-                            print(\"From\" , fn, \":\")\n+                            print(\"From\", fn, \":\")\n                             print(\"\".join(deque(f, MAX_LINES_TO_PRINT)))\n                     except OSError:\n                         print(\"Opening file %s failed.\" % fn)\n@@ -257,7 +258,7 @@ def _start_logging(self):\n         ll = int(self.options.loglevel) if self.options.loglevel.isdigit() else self.options.loglevel.upper()\n         ch.setLevel(ll)\n         # Format logs the same as bitcoind's debug.log with microprecision (so log files can be concatenated and sorted)\n-        formatter = logging.Formatter(fmt = '%(asctime)s.%(msecs)03d000 %(name)s (%(levelname)s): %(message)s', datefmt='%Y-%m-%d %H:%M:%S')\n+        formatter = logging.Formatter(fmt='%(asctime)s.%(msecs)03d000 %(name)s (%(levelname)s): %(message)s', datefmt='%Y-%m-%d %H:%M:%S')\n         formatter.converter = time.gmtime\n         fh.setFormatter(formatter)\n         ch.setFormatter(formatter)\n@@ -354,18 +355,13 @@ def _initialize_chain_clean(self, test_dir, num_nodes):\n         for i in range(num_nodes):\n             initialize_datadir(test_dir, i)\n \n-# Test framework for doing p2p comparison testing, which sets up some bitcoind\n-# binaries:\n-# 1 binary: test binary\n-# 2 binaries: 1 test binary, 1 ref binary\n-# n>2 binaries: 1 test binary, n-1 ref binaries\n-\n-class SkipTest(Exception):\n-    \"\"\"This exception is raised to skip a test\"\"\"\n-    def __init__(self, message):\n-        self.message = message\n-\n class ComparisonTestFramework(BitcoinTestFramework):\n+    \"\"\"Test framework for doing p2p comparison testing\n+\n+    Sets up some bitcoind binaries:\n+    - 1 binary: test binary\n+    - 2 binaries: 1 test binary, 1 ref binary\n+    - n>2 binaries: 1 test binary, n-1 ref binaries\"\"\"\n \n     def __init__(self):\n         super().__init__()\n@@ -387,4 +383,9 @@ def setup_network(self):\n         self.nodes = self.start_nodes(\n             self.num_nodes, self.options.tmpdir, extra_args,\n             binary=[self.options.testbinary] +\n-            [self.options.refbinary]*(self.num_nodes-1))\n+            [self.options.refbinary] * (self.num_nodes - 1))\n+\n+class SkipTest(Exception):\n+    \"\"\"This exception is raised to skip a test\"\"\"\n+    def __init__(self, message):\n+        self.message = message"
      },
      {
        "sha": "d02a130a1f829c0df4777f644534a966a2e32c1d",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 85,
        "deletions": 83,
        "changes": 168,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1fe5368f191018a72276a93a9e74cd95f896697/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1fe5368f191018a72276a93a9e74cd95f896697/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=f1fe5368f191018a72276a93a9e74cd95f896697",
        "patch": "@@ -4,20 +4,19 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Helpful routines for regression testing.\"\"\"\n \n-import os\n-\n-from binascii import hexlify, unhexlify\n from base64 import b64encode\n+from binascii import hexlify, unhexlify\n from decimal import Decimal, ROUND_DOWN\n-import json\n+import errno\n import http.client\n+import json\n+import logging\n+import os\n import random\n+import re\n import subprocess\n import tempfile\n import time\n-import re\n-import errno\n-import logging\n \n from . import coverage\n from .authproxy import AuthServiceProxy, JSONRPCException\n@@ -40,17 +39,17 @@ class PortSeed:\n     # Must be initialized with a unique integer for each process\n     n = None\n \n-#Set Mocktime default to OFF.\n-#MOCKTIME is only needed for scripts that use the\n-#cached version of the blockchain.  If the cached\n-#version of the blockchain is used without MOCKTIME\n-#then the mempools will not sync due to IBD.\n+# Set Mocktime default to OFF.\n+# MOCKTIME is only needed for scripts that use the\n+# cached version of the blockchain.  If the cached\n+# version of the blockchain is used without MOCKTIME\n+# then the mempools will not sync due to IBD.\n MOCKTIME = 0\n \n def enable_mocktime():\n-    #For backwared compatibility of the python scripts\n-    #with previous versions of the cache, set MOCKTIME \n-    #to Jan 1, 2014 + (201 * 10 * 60)\n+    # For backwared compatibility of the python scripts\n+    # with previous versions of the cache, set MOCKTIME\n+    # to Jan 1, 2014 + (201 * 10 * 60)\n     global MOCKTIME\n     MOCKTIME = 1388534400 + (201 * 10 * 60)\n \n@@ -103,7 +102,7 @@ def rpc_port(n):\n def check_json_precision():\n     \"\"\"Make sure json library being used does not lose precision converting BTC values\"\"\"\n     n = Decimal(\"20000000.00000003\")\n-    satoshis = int(json.loads(json.dumps(float(n)))*1.0e8)\n+    satoshis = int(json.loads(json.dumps(float(n))) * 1.0e8)\n     if satoshis != 2000000000000003:\n         raise RuntimeError(\"JSON encode/decode loses precision\")\n \n@@ -150,7 +149,7 @@ def sync_chain(rpc_connections, *, wait=1, timeout=60):\n     \"\"\"\n     while timeout > 0:\n         best_hash = [x.getbestblockhash() for x in rpc_connections]\n-        if best_hash == [best_hash[0]]*len(best_hash):\n+        if best_hash == [best_hash[0]] * len(best_hash):\n             return\n         time.sleep(wait)\n         timeout -= wait\n@@ -166,7 +165,7 @@ def sync_mempools(rpc_connections, *, wait=1, timeout=60):\n         num_match = 1\n         for i in range(1, len(rpc_connections)):\n             if set(rpc_connections[i].getrawmempool()) == pool:\n-                num_match = num_match+1\n+                num_match = num_match + 1\n         if num_match == len(rpc_connections):\n             return\n         time.sleep(wait)\n@@ -176,18 +175,18 @@ def sync_mempools(rpc_connections, *, wait=1, timeout=60):\n bitcoind_processes = {}\n \n def initialize_datadir(dirname, n):\n-    datadir = os.path.join(dirname, \"node\"+str(n))\n+    datadir = os.path.join(dirname, \"node\" + str(n))\n     if not os.path.isdir(datadir):\n         os.makedirs(datadir)\n     with open(os.path.join(datadir, \"bitcoin.conf\"), 'w', encoding='utf8') as f:\n         f.write(\"regtest=1\\n\")\n-        f.write(\"port=\"+str(p2p_port(n))+\"\\n\")\n-        f.write(\"rpcport=\"+str(rpc_port(n))+\"\\n\")\n+        f.write(\"port=\" + str(p2p_port(n)) + \"\\n\")\n+        f.write(\"rpcport=\" + str(rpc_port(n)) + \"\\n\")\n         f.write(\"listenonion=0\\n\")\n     return datadir\n \n def get_datadir_path(dirname, n):\n-    return os.path.join(dirname, \"node\"+str(n))\n+    return os.path.join(dirname, \"node\" + str(n))\n \n def get_auth_cookie(datadir, n):\n     user = None\n@@ -196,10 +195,10 @@ def get_auth_cookie(datadir, n):\n         with open(os.path.join(datadir, \"bitcoin.conf\"), 'r') as f:\n             for line in f:\n                 if line.startswith(\"rpcuser=\"):\n-                    assert user is None # Ensure that there is only one rpcuser line\n+                    assert user is None  # Ensure that there is only one rpcuser line\n                     user = line.split(\"=\")[1].strip(\"\\n\")\n                 if line.startswith(\"rpcpassword=\"):\n-                    assert password is None # Ensure that there is only one rpcpassword line\n+                    assert password is None  # Ensure that there is only one rpcpassword line\n                     password = line.split(\"=\")[1].strip(\"\\n\")\n     if os.path.isfile(os.path.join(datadir, \"regtest\", \".cookie\")):\n         with open(os.path.join(datadir, \"regtest\", \".cookie\"), 'r') as f:\n@@ -234,15 +233,15 @@ def wait_for_bitcoind_start(process, datadir, i, rpchost=None):\n         try:\n             # Check if .cookie file to be created\n             rpc = get_rpc_proxy(rpc_url(datadir, i, rpchost), i)\n-            blocks = rpc.getblockcount()\n-            break # break out of loop on success\n+            rpc.getblockcount()\n+            break  # break out of loop on success\n         except IOError as e:\n-            if e.errno != errno.ECONNREFUSED: # Port not yet open?\n-                raise # unknown IO error\n-        except JSONRPCException as e: # Initialization phase\n-            if e.error['code'] != -28: # RPC in warmup?\n-                raise # unknown JSON RPC exception\n-        except ValueError as e: # cookie file not found and no rpcuser or rpcassword. bitcoind still starting\n+            if e.errno != errno.ECONNREFUSED:  # Port not yet open?\n+                raise  # unknown IO error\n+        except JSONRPCException as e:  # Initialization phase\n+            if e.error['code'] != -28:  # RPC in warmup?\n+                raise  # unknown JSON RPC exception\n+        except ValueError as e:  # cookie file not found and no rpcuser or rpcassword. bitcoind still starting\n             if \"No RPC credentials\" not in str(e):\n                 raise\n         time.sleep(0.25)\n@@ -255,11 +254,12 @@ def _start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary\n \n     This function should only be called from within test_framework, not by individual test scripts.\"\"\"\n \n-    datadir = os.path.join(dirname, \"node\"+str(i))\n+    datadir = os.path.join(dirname, \"node\" + str(i))\n     if binary is None:\n         binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n     args = [binary, \"-datadir=\" + datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(get_mocktime()), \"-uacomment=testnode%d\" % i]\n-    if extra_args is not None: args.extend(extra_args)\n+    if extra_args is not None:\n+        args.extend(extra_args)\n     bitcoind_processes[i] = subprocess.Popen(args, stderr=stderr)\n     logger.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n     wait_for_bitcoind_start(bitcoind_processes[i], datadir, i, rpchost)\n@@ -277,7 +277,7 @@ def assert_start_raises_init_error(i, dirname, extra_args=None, expected_msg=Non\n             node = _start_node(i, dirname, extra_args, stderr=log_stderr)\n             _stop_node(node, i)\n         except Exception as e:\n-            assert 'bitcoind exited' in str(e) #node must have shutdown\n+            assert 'bitcoind exited' in str(e)  # node must have shutdown\n             if expected_msg is not None:\n                 log_stderr.seek(0)\n                 stderr = log_stderr.read().decode('utf-8')\n@@ -292,24 +292,27 @@ def assert_start_raises_init_error(i, dirname, extra_args=None, expected_msg=Non\n \n def _start_nodes(num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n     \"\"\"Start multiple bitcoinds, return RPC connections to them\n-    \n+\n     This function should only be called from within test_framework, not by individual test scripts.\"\"\"\n \n-    if extra_args is None: extra_args = [ None for _ in range(num_nodes) ]\n-    if binary is None: binary = [ None for _ in range(num_nodes) ]\n+    if extra_args is None:\n+        extra_args = [None] * num_nodes\n+    if binary is None:\n+        binary = [None] * num_nodes\n     assert_equal(len(extra_args), num_nodes)\n     assert_equal(len(binary), num_nodes)\n     rpcs = []\n     try:\n         for i in range(num_nodes):\n             rpcs.append(_start_node(i, dirname, extra_args[i], rpchost, timewait=timewait, binary=binary[i]))\n-    except: # If one node failed to start, stop the others\n+    except:\n+        # If one node failed to start, stop the others\n         _stop_nodes(rpcs)\n         raise\n     return rpcs\n \n def log_filename(dirname, n_node, logname):\n-    return os.path.join(dirname, \"node\"+str(n_node), \"regtest\", logname)\n+    return os.path.join(dirname, \"node\" + str(n_node), \"regtest\", logname)\n \n def _stop_node(node, i):\n     \"\"\"Stop a bitcoind test node\n@@ -332,7 +335,7 @@ def _stop_nodes(nodes):\n \n     for i, node in enumerate(nodes):\n         _stop_node(node, i)\n-    assert not bitcoind_processes.values() # All connections must be gone now\n+    assert not bitcoind_processes.values()  # All connections must be gone now\n \n def set_node_times(nodes, t):\n     for node in nodes:\n@@ -350,7 +353,7 @@ def disconnect_nodes(from_connection, node_num):\n         raise AssertionError(\"timed out waiting for disconnect\")\n \n def connect_nodes(from_connection, node_num):\n-    ip_port = \"127.0.0.1:\"+str(p2p_port(node_num))\n+    ip_port = \"127.0.0.1:\" + str(p2p_port(node_num))\n     from_connection.addnode(ip_port, \"onetry\")\n     # poll until version handshake complete to avoid race conditions\n     # with transaction relaying\n@@ -370,38 +373,37 @@ def find_output(node, txid, amount):\n     for i in range(len(txdata[\"vout\"])):\n         if txdata[\"vout\"][i][\"value\"] == amount:\n             return i\n-    raise RuntimeError(\"find_output txid %s : %s not found\"%(txid,str(amount)))\n-\n+    raise RuntimeError(\"find_output txid %s : %s not found\" % (txid, str(amount)))\n \n def gather_inputs(from_node, amount_needed, confirmations_required=1):\n     \"\"\"\n     Return a random set of unspent txouts that are enough to pay amount_needed\n     \"\"\"\n-    assert(confirmations_required >=0)\n+    assert(confirmations_required >= 0)\n     utxo = from_node.listunspent(confirmations_required)\n     random.shuffle(utxo)\n     inputs = []\n     total_in = Decimal(\"0.00000000\")\n     while total_in < amount_needed and len(utxo) > 0:\n         t = utxo.pop()\n         total_in += t[\"amount\"]\n-        inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"], \"address\" : t[\"address\"] } )\n+        inputs.append({\"txid\": t[\"txid\"], \"vout\": t[\"vout\"], \"address\": t[\"address\"]})\n     if total_in < amount_needed:\n-        raise RuntimeError(\"Insufficient funds: need %d, have %d\"%(amount_needed, total_in))\n+        raise RuntimeError(\"Insufficient funds: need %d, have %d\" % (amount_needed, total_in))\n     return (total_in, inputs)\n \n def make_change(from_node, amount_in, amount_out, fee):\n     \"\"\"\n     Create change output(s), return them\n     \"\"\"\n     outputs = {}\n-    amount = amount_out+fee\n+    amount = amount_out + fee\n     change = amount_in - amount\n-    if change > amount*2:\n+    if change > amount * 2:\n         # Create an extra change output to break up big inputs\n         change_address = from_node.getnewaddress()\n         # Split change in two, being careful of rounding:\n-        outputs[change_address] = Decimal(change/2).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n+        outputs[change_address] = Decimal(change / 2).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n         change = amount_in - amount - outputs[change_address]\n     if change > 0:\n         outputs[from_node.getnewaddress()] = change\n@@ -414,9 +416,9 @@ def random_transaction(nodes, amount, min_fee, fee_increment, fee_variants):\n     \"\"\"\n     from_node = random.choice(nodes)\n     to_node = random.choice(nodes)\n-    fee = min_fee + fee_increment*random.randint(0,fee_variants)\n+    fee = min_fee + fee_increment * random.randint(0, fee_variants)\n \n-    (total_in, inputs) = gather_inputs(from_node, amount+fee)\n+    (total_in, inputs) = gather_inputs(from_node, amount + fee)\n     outputs = make_change(from_node, total_in, amount, fee)\n     outputs[to_node.getnewaddress()] = float(amount)\n \n@@ -430,22 +432,22 @@ def assert_fee_amount(fee, tx_size, fee_per_kB):\n     \"\"\"Assert the fee was in range\"\"\"\n     target_fee = tx_size * fee_per_kB / 1000\n     if fee < target_fee:\n-        raise AssertionError(\"Fee of %s BTC too low! (Should be %s BTC)\"%(str(fee), str(target_fee)))\n+        raise AssertionError(\"Fee of %s BTC too low! (Should be %s BTC)\" % (str(fee), str(target_fee)))\n     # allow the wallet's estimation to be at most 2 bytes off\n     if fee > (tx_size + 2) * fee_per_kB / 1000:\n-        raise AssertionError(\"Fee of %s BTC too high! (Should be %s BTC)\"%(str(fee), str(target_fee)))\n+        raise AssertionError(\"Fee of %s BTC too high! (Should be %s BTC)\" % (str(fee), str(target_fee)))\n \n def assert_equal(thing1, thing2, *args):\n     if thing1 != thing2 or any(thing1 != arg for arg in args):\n         raise AssertionError(\"not(%s)\" % \" == \".join(str(arg) for arg in (thing1, thing2) + args))\n \n def assert_greater_than(thing1, thing2):\n     if thing1 <= thing2:\n-        raise AssertionError(\"%s <= %s\"%(str(thing1),str(thing2)))\n+        raise AssertionError(\"%s <= %s\" % (str(thing1), str(thing2)))\n \n def assert_greater_than_or_equal(thing1, thing2):\n     if thing1 < thing2:\n-        raise AssertionError(\"%s < %s\"%(str(thing1),str(thing2)))\n+        raise AssertionError(\"%s < %s\" % (str(thing1), str(thing2)))\n \n def assert_raises(exc, fun, *args, **kwds):\n     assert_raises_message(exc, None, fun, *args, **kwds)\n@@ -455,9 +457,9 @@ def assert_raises_message(exc, message, fun, *args, **kwds):\n         fun(*args, **kwds)\n     except exc as e:\n         if message is not None and message not in e.error['message']:\n-            raise AssertionError(\"Expected substring not found:\"+e.error['message'])\n+            raise AssertionError(\"Expected substring not found:\" + e.error['message'])\n     except Exception as e:\n-        raise AssertionError(\"Unexpected exception raised: \"+type(e).__name__)\n+        raise AssertionError(\"Unexpected exception raised: \" + type(e).__name__)\n     else:\n         raise AssertionError(\"No exception raised\")\n \n@@ -484,9 +486,9 @@ def assert_raises_jsonrpc(code, message, fun, *args, **kwds):\n         if (code is not None) and (code != e.error[\"code\"]):\n             raise AssertionError(\"Unexpected JSONRPC error code %i\" % e.error[\"code\"])\n         if (message is not None) and (message not in e.error['message']):\n-            raise AssertionError(\"Expected substring not found:\"+e.error['message'])\n+            raise AssertionError(\"Expected substring not found:\" + e.error['message'])\n     except Exception as e:\n-        raise AssertionError(\"Unexpected exception raised: \"+type(e).__name__)\n+        raise AssertionError(\"Unexpected exception raised: \" + type(e).__name__)\n     else:\n         raise AssertionError(\"No exception raised\")\n \n@@ -507,42 +509,42 @@ def assert_is_hash_string(string, length=64):\n         raise AssertionError(\n             \"String %r contains invalid characters for a hash.\" % string)\n \n-def assert_array_result(object_array, to_match, expected, should_not_find = False):\n+def assert_array_result(object_array, to_match, expected, should_not_find=False):\n     \"\"\"\n         Pass in array of JSON objects, a dictionary with key/value pairs\n         to match against, and another dictionary with expected key/value\n         pairs.\n         If the should_not_find flag is true, to_match should not be found\n         in object_array\n         \"\"\"\n-    if should_not_find == True:\n-        assert_equal(expected, { })\n+    if should_not_find:\n+        assert_equal(expected, {})\n     num_matched = 0\n     for item in object_array:\n         all_match = True\n-        for key,value in to_match.items():\n+        for key, value in to_match.items():\n             if item[key] != value:\n                 all_match = False\n         if not all_match:\n             continue\n-        elif should_not_find == True:\n-            num_matched = num_matched+1\n-        for key,value in expected.items():\n+        elif should_not_find:\n+            num_matched = num_matched + 1\n+        for key, value in expected.items():\n             if item[key] != value:\n-                raise AssertionError(\"%s : expected %s=%s\"%(str(item), str(key), str(value)))\n-            num_matched = num_matched+1\n-    if num_matched == 0 and should_not_find != True:\n-        raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n-    if num_matched > 0 and should_not_find == True:\n-        raise AssertionError(\"Objects were found %s\"%(str(to_match)))\n+                raise AssertionError(\"%s : expected %s=%s\" % (str(item), str(key), str(value)))\n+            num_matched = num_matched + 1\n+    if num_matched == 0 and not should_not_find:\n+        raise AssertionError(\"No objects matched %s\" % (str(to_match)))\n+    if num_matched > 0 and should_not_find:\n+        raise AssertionError(\"Objects were found %s\" % (str(to_match)))\n \n def satoshi_round(amount):\n     return Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n \n # Helper to create at least \"count\" utxos\n # Pass in a fee that is sufficient for relay and mining new transactions.\n def create_confirmed_utxos(fee, node, count):\n-    node.generate(int(0.5*count)+101)\n+    node.generate(int(0.5 * count) + 101)\n     utxos = node.listunspent()\n     iterations = count - len(utxos)\n     addr1 = node.getnewaddress()\n@@ -552,14 +554,14 @@ def create_confirmed_utxos(fee, node, count):\n     for i in range(iterations):\n         t = utxos.pop()\n         inputs = []\n-        inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]})\n+        inputs.append({\"txid\": t[\"txid\"], \"vout\": t[\"vout\"]})\n         outputs = {}\n         send_value = t['amount'] - fee\n-        outputs[addr1] = satoshi_round(send_value/2)\n-        outputs[addr2] = satoshi_round(send_value/2)\n+        outputs[addr1] = satoshi_round(send_value / 2)\n+        outputs[addr2] = satoshi_round(send_value / 2)\n         raw_tx = node.createrawtransaction(inputs, outputs)\n         signed_tx = node.signrawtransaction(raw_tx)[\"hex\"]\n-        txid = node.sendrawtransaction(signed_tx)\n+        node.sendrawtransaction(signed_tx)\n \n     while (node.getmempoolinfo()['size'] > 0):\n         node.generate(1)\n@@ -574,8 +576,8 @@ def gen_return_txouts():\n     # Some pre-processing to create a bunch of OP_RETURN txouts to insert into transactions we create\n     # So we have big transactions (and therefore can't fit very many into each block)\n     # create one script_pubkey\n-    script_pubkey = \"6a4d0200\" #OP_RETURN OP_PUSH2 512 bytes\n-    for i in range (512):\n+    script_pubkey = \"6a4d0200\"  # OP_RETURN OP_PUSH2 512 bytes\n+    for i in range(512):\n         script_pubkey = script_pubkey + \"01\"\n     # concatenate 128 txouts of above script_pubkey which we'll insert before the txout for change\n     txouts = \"81\"\n@@ -589,8 +591,8 @@ def gen_return_txouts():\n     return txouts\n \n def create_tx(node, coinbase, to_address, amount):\n-    inputs = [{ \"txid\" : coinbase, \"vout\" : 0}]\n-    outputs = { to_address : amount }\n+    inputs = [{\"txid\": coinbase, \"vout\": 0}]\n+    outputs = {to_address: amount}\n     rawtx = node.createrawtransaction(inputs, outputs)\n     signresult = node.signrawtransaction(rawtx)\n     assert_equal(signresult[\"complete\"], True)\n@@ -603,7 +605,7 @@ def create_lots_of_big_transactions(node, txouts, utxos, num, fee):\n     txids = []\n     for _ in range(num):\n         t = utxos.pop()\n-        inputs=[{ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]}]\n+        inputs = [{\"txid\": t[\"txid\"], \"vout\": t[\"vout\"]}]\n         outputs = {}\n         change = t['amount'] - fee\n         outputs[addr] = satoshi_round(change)"
      }
    ]
  },
  {
    "sha": "cad967a892d836b3afbd1ab81c73731e968368c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYWQ5NjdhODkyZDgzNmIzYWZiZDFhYjgxYzczNzMxZTk2ODM2OGM2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-02T17:14:14Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-29T10:55:19Z"
      },
      "message": "[tests] Move stop_node and start_node methods to BitcoinTestFramework\n\nThis commit moves functions start_node, start_nodes, stop_node and\nstop_nodes functions into the BitcoinTestFramework class. It also moves\nthe bitcoind_processes dict and coverage variables into BitcoinTestFramework.",
      "tree": {
        "sha": "2d14c93b35f492798fd89ac6481218c9d489a30b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d14c93b35f492798fd89ac6481218c9d489a30b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cad967a892d836b3afbd1ab81c73731e968368c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cad967a892d836b3afbd1ab81c73731e968368c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cad967a892d836b3afbd1ab81c73731e968368c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cad967a892d836b3afbd1ab81c73731e968368c6/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f1fe5368f191018a72276a93a9e74cd95f896697",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1fe5368f191018a72276a93a9e74cd95f896697",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f1fe5368f191018a72276a93a9e74cd95f896697"
      }
    ],
    "stats": {
      "total": 303,
      "additions": 131,
      "deletions": 172
    },
    "files": [
      {
        "sha": "a7034e6bcdbab5f2d743cfaab9cbfefb9a570840",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cad967a892d836b3afbd1ab81c73731e968368c6/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cad967a892d836b3afbd1ab81c73731e968368c6/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=cad967a892d836b3afbd1ab81c73731e968368c6",
        "patch": "@@ -21,15 +21,13 @@\n import http.client\n import subprocess\n \n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import (BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT)\n from test_framework.util import (\n     assert_equal,\n     assert_raises,\n     assert_raises_jsonrpc,\n     assert_is_hex_string,\n     assert_is_hash_string,\n-    bitcoind_processes,\n-    BITCOIND_PROC_WAIT_TIMEOUT,\n )\n \n \n@@ -141,13 +139,13 @@ def _test_stopatheight(self):\n         self.nodes[0].generate(6)\n         assert_equal(self.nodes[0].getblockcount(), 206)\n         self.log.debug('Node should not stop at this height')\n-        assert_raises(subprocess.TimeoutExpired, lambda: bitcoind_processes[0].wait(timeout=3))\n+        assert_raises(subprocess.TimeoutExpired, lambda: self.bitcoind_processes[0].wait(timeout=3))\n         try:\n             self.nodes[0].generate(1)\n         except (ConnectionError, http.client.BadStatusLine):\n             pass  # The node already shut down before response\n         self.log.debug('Node should stop at this height...')\n-        bitcoind_processes[0].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+        self.bitcoind_processes[0].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n         self.nodes[0] = self.start_node(0, self.options.tmpdir)\n         assert_equal(self.nodes[0].getblockcount(), 207)\n "
      },
      {
        "sha": "9237f0924012b1b1952037d4aab9475f16f45cf3",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cad967a892d836b3afbd1ab81c73731e968368c6/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cad967a892d836b3afbd1ab81c73731e968368c6/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=cad967a892d836b3afbd1ab81c73731e968368c6",
        "patch": "@@ -42,7 +42,7 @@ def setup_network(self, split=False):\n \n         # Encrypt wallet for test_locked_wallet_fails test\n         self.nodes[1].encryptwallet(WALLET_PASSPHRASE)\n-        bitcoind_processes[1].wait()\n+        self.bitcoind_processes[1].wait()\n         self.nodes[1] = self.start_node(1, self.options.tmpdir, extra_args[1])\n         self.nodes[1].walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n "
      },
      {
        "sha": "6f877f8362fe06d9b8c8b9950cd2c1d11a0fc4a3",
        "filename": "test/functional/dbcrash.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cad967a892d836b3afbd1ab81c73731e968368c6/test/functional/dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cad967a892d836b3afbd1ab81c73731e968368c6/test/functional/dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/dbcrash.py?ref=cad967a892d836b3afbd1ab81c73731e968368c6",
        "patch": "@@ -88,7 +88,7 @@ def restart_node(self, node_index, expected_tip):\n                 # An exception here should mean the node is about to crash.\n                 # If bitcoind exits, then try again.  wait_for_node_exit()\n                 # should raise an exception if bitcoind doesn't exit.\n-                wait_for_node_exit(node_index, timeout=10)\n+                self.wait_for_node_exit(node_index, timeout=10)\n             self.crashed_on_restart += 1\n             time.sleep(1)\n \n@@ -140,7 +140,7 @@ def sync_node3blocks(self, block_hashes):\n                 if not self.submit_block_catch_error(i, block):\n                     # TODO: more carefully check that the crash is due to -dbcrashratio\n                     # (change the exit code perhaps, and check that here?)\n-                    wait_for_node_exit(i, timeout=30)\n+                    self.wait_for_node_exit(i, timeout=30)\n                     self.log.debug(\"Restarting node %d after block hash %s\", i, block_hash)\n                     nodei_utxo_hash = self.restart_node(i, block_hash)\n                     assert nodei_utxo_hash is not None"
      },
      {
        "sha": "0baab6d01cf3cbb5c4697a6059cb814dce309541",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cad967a892d836b3afbd1ab81c73731e968368c6/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cad967a892d836b3afbd1ab81c73731e968368c6/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=cad967a892d836b3afbd1ab81c73731e968368c6",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the fundrawtransaction RPC.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT\n from test_framework.util import *\n \n \n@@ -452,7 +452,7 @@ def run_test(self):\n         self.stop_node(2)\n         self.stop_node(3)\n         self.nodes[1].encryptwallet(\"test\")\n-        bitcoind_processes[1].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+        self.bitcoind_processes[1].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n \n         self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n         # This test is not meant to test fee estimation and we'd like"
      },
      {
        "sha": "e8be559918d52ae8449aec4ef1535c6b01c3bc3d",
        "filename": "test/functional/keypool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cad967a892d836b3afbd1ab81c73731e968368c6/test/functional/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cad967a892d836b3afbd1ab81c73731e968368c6/test/functional/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool.py?ref=cad967a892d836b3afbd1ab81c73731e968368c6",
        "patch": "@@ -18,7 +18,7 @@ def run_test(self):\n         \n         # Encrypt wallet and wait to terminate\n         nodes[0].encryptwallet('test')\n-        bitcoind_processes[0].wait()\n+        self.bitcoind_processes[0].wait()\n         # Restart node 0\n         nodes[0] = self.start_node(0, self.options.tmpdir)\n         # Keep creating keys"
      },
      {
        "sha": "951685aa7606a16c089c4280d0b221e836902774",
        "filename": "test/functional/rpcbind_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cad967a892d836b3afbd1ab81c73731e968368c6/test/functional/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cad967a892d836b3afbd1ab81c73731e968368c6/test/functional/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcbind_test.py?ref=cad967a892d836b3afbd1ab81c73731e968368c6",
        "patch": "@@ -37,7 +37,7 @@ def run_bind_test(self, allow_ips, connect_to, addresses, expected):\n             base_args += ['-rpcallowip=' + x for x in allow_ips]\n         binds = ['-rpcbind='+addr for addr in addresses]\n         self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, [base_args + binds], connect_to)\n-        pid = bitcoind_processes[0].pid\n+        pid = self.bitcoind_processes[0].pid\n         assert_equal(set(get_bind_addrs(pid)), set(expected))\n         self.stop_nodes()\n "
      },
      {
        "sha": "557c9db4823ec0670f2d0017ec31e51d4300b085",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 114,
        "deletions": 21,
        "changes": 135,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cad967a892d836b3afbd1ab81c73731e968368c6/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cad967a892d836b3afbd1ab81c73731e968368c6/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=cad967a892d836b3afbd1ab81c73731e968368c6",
        "patch": "@@ -5,7 +5,9 @@\n \"\"\"Base class for RPC testing.\"\"\"\n \n from collections import deque\n+import errno\n from enum import Enum\n+import http.client\n import logging\n import optparse\n import os\n@@ -16,15 +18,16 @@\n import time\n import traceback\n \n+from .authproxy import JSONRPCException\n+from . import coverage\n from .util import (\n-    PortSeed,\n     MAX_NODES,\n-    bitcoind_processes,\n+    PortSeed,\n+    assert_equal,\n     check_json_precision,\n     connect_nodes_bi,\n     disable_mocktime,\n     disconnect_nodes,\n-    enable_coverage,\n     enable_mocktime,\n     get_mocktime,\n     get_rpc_proxy,\n@@ -34,15 +37,9 @@\n     p2p_port,\n     rpc_url,\n     set_node_times,\n-    _start_node,\n-    _start_nodes,\n-    _stop_node,\n-    _stop_nodes,\n     sync_blocks,\n     sync_mempools,\n-    wait_for_bitcoind_start,\n )\n-from .authproxy import JSONRPCException\n \n class TestStatus(Enum):\n     PASSED = 1\n@@ -53,6 +50,8 @@ class TestStatus(Enum):\n TEST_EXIT_FAILED = 1\n TEST_EXIT_SKIPPED = 77\n \n+BITCOIND_PROC_WAIT_TIMEOUT = 60\n+\n class BitcoinTestFramework(object):\n     \"\"\"Base class for a bitcoin test script.\n \n@@ -72,7 +71,8 @@ class BitcoinTestFramework(object):\n     def __init__(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n-        self.nodes = None\n+        self.nodes = []\n+        self.bitcoind_processes = {}\n \n     def add_options(self, parser):\n         pass\n@@ -98,7 +98,7 @@ def setup_nodes(self):\n         extra_args = None\n         if hasattr(self, \"extra_args\"):\n             extra_args = self.extra_args\n-        self.nodes = _start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n \n     def run_test(self):\n         raise NotImplementedError\n@@ -130,9 +130,6 @@ def main(self):\n         self.add_options(parser)\n         (self.options, self.args) = parser.parse_args()\n \n-        if self.options.coveragedir:\n-            enable_coverage(self.options.coveragedir)\n-\n         PortSeed.n = self.options.port_seed\n \n         os.environ['PATH'] = self.options.srcdir + \":\" + self.options.srcdir + \"/qt:\" + os.environ['PATH']\n@@ -209,16 +206,88 @@ def main(self):\n     # Public helper methods. These can be accessed by the subclass test scripts.\n \n     def start_node(self, i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n-        return _start_node(i, dirname, extra_args, rpchost, timewait, binary, stderr)\n+        \"\"\"Start a bitcoind and return RPC connection to it\"\"\"\n+\n+        datadir = os.path.join(dirname, \"node\" + str(i))\n+        if binary is None:\n+            binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n+        args = [binary, \"-datadir=\" + datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(get_mocktime()), \"-uacomment=testnode%d\" % i]\n+        if extra_args is not None:\n+            args.extend(extra_args)\n+        self.bitcoind_processes[i] = subprocess.Popen(args, stderr=stderr)\n+        self.log.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n+        self._wait_for_bitcoind_start(self.bitcoind_processes[i], datadir, i, rpchost)\n+        self.log.debug(\"initialize_chain: RPC successfully started\")\n+        proxy = get_rpc_proxy(rpc_url(datadir, i, rpchost), i, timeout=timewait)\n+\n+        if self.options.coveragedir:\n+            coverage.write_all_rpc_commands(self.options.coveragedir, proxy)\n+\n+        return proxy\n \n     def start_nodes(self, num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n-        return _start_nodes(num_nodes, dirname, extra_args, rpchost, timewait, binary)\n+        \"\"\"Start multiple bitcoinds, return RPC connections to them\"\"\"\n+\n+        if extra_args is None:\n+            extra_args = [None] * num_nodes\n+        if binary is None:\n+            binary = [None] * num_nodes\n+        assert_equal(len(extra_args), num_nodes)\n+        assert_equal(len(binary), num_nodes)\n+        rpcs = []\n+        try:\n+            for i in range(num_nodes):\n+                rpcs.append(self.start_node(i, dirname, extra_args[i], rpchost, timewait=timewait, binary=binary[i]))\n+        except:\n+            # If one node failed to start, stop the others\n+            # TODO: abusing self.nodes in this way is a little hacky.\n+            # Eventually we should do a better job of tracking nodes\n+            self.nodes.extend(rpcs)\n+            self.stop_nodes()\n+            self.nodes = []\n+            raise\n+        return rpcs\n+\n+    def stop_node(self, i):\n+        \"\"\"Stop a bitcoind test node\"\"\"\n \n-    def stop_node(self, num_node):\n-        _stop_node(self.nodes[num_node], num_node)\n+        self.log.debug(\"Stopping node %d\" % i)\n+        try:\n+            self.nodes[i].stop()\n+        except http.client.CannotSendRequest as e:\n+            self.log.exception(\"Unable to stop node\")\n+        return_code = self.bitcoind_processes[i].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+        assert_equal(return_code, 0)\n+        del self.bitcoind_processes[i]\n \n     def stop_nodes(self):\n-        _stop_nodes(self.nodes)\n+        \"\"\"Stop multiple bitcoind test nodes\"\"\"\n+\n+        for i in range(len(self.nodes)):\n+            self.stop_node(i)\n+        assert not self.bitcoind_processes.values()  # All connections must be gone now\n+\n+    def assert_start_raises_init_error(self, i, dirname, extra_args=None, expected_msg=None):\n+        with tempfile.SpooledTemporaryFile(max_size=2**16) as log_stderr:\n+            try:\n+                self.start_node(i, dirname, extra_args, stderr=log_stderr)\n+                self.stop_node(i)\n+            except Exception as e:\n+                assert 'bitcoind exited' in str(e)  # node must have shutdown\n+                if expected_msg is not None:\n+                    log_stderr.seek(0)\n+                    stderr = log_stderr.read().decode('utf-8')\n+                    if expected_msg not in stderr:\n+                        raise AssertionError(\"Expected error \\\"\" + expected_msg + \"\\\" not found in:\\n\" + stderr)\n+            else:\n+                if expected_msg is None:\n+                    assert_msg = \"bitcoind should have exited with an error\"\n+                else:\n+                    assert_msg = \"bitcoind should have exited with expected error \" + expected_msg\n+                raise AssertionError(assert_msg)\n+\n+    def wait_for_node_exit(self, i, timeout):\n+        self.bitcoind_processes[i].wait(timeout)\n \n     def split_network(self):\n         \"\"\"\n@@ -300,9 +369,9 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n                 args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-datadir=\" + datadir, \"-discover=0\"]\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n-                bitcoind_processes[i] = subprocess.Popen(args)\n+                self.bitcoind_processes[i] = subprocess.Popen(args)\n                 self.log.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n-                wait_for_bitcoind_start(bitcoind_processes[i], datadir, i)\n+                self._wait_for_bitcoind_start(self.bitcoind_processes[i], datadir, i)\n                 self.log.debug(\"initialize_chain: RPC successfully started\")\n \n             self.nodes = []\n@@ -355,6 +424,30 @@ def _initialize_chain_clean(self, test_dir, num_nodes):\n         for i in range(num_nodes):\n             initialize_datadir(test_dir, i)\n \n+    def _wait_for_bitcoind_start(self, process, datadir, i, rpchost=None):\n+        \"\"\"Wait for bitcoind to start.\n+\n+        This means that RPC is accessible and fully initialized.\n+        Raise an exception if bitcoind exits during initialization.\"\"\"\n+        while True:\n+            if process.poll() is not None:\n+                raise Exception('bitcoind exited with status %i during initialization' % process.returncode)\n+            try:\n+                # Check if .cookie file to be created\n+                rpc = get_rpc_proxy(rpc_url(datadir, i, rpchost), i, coveragedir=self.options.coveragedir)\n+                rpc.getblockcount()\n+                break  # break out of loop on success\n+            except IOError as e:\n+                if e.errno != errno.ECONNREFUSED:  # Port not yet open?\n+                    raise  # unknown IO error\n+            except JSONRPCException as e:  # Initialization phase\n+                if e.error['code'] != -28:  # RPC in warmup?\n+                    raise  # unknown JSON RPC exception\n+            except ValueError as e:  # cookie file not found and no rpcuser or rpcassword. bitcoind still starting\n+                if \"No RPC credentials\" not in str(e):\n+                    raise\n+            time.sleep(0.25)\n+\n class ComparisonTestFramework(BitcoinTestFramework):\n     \"\"\"Test framework for doing p2p comparison testing\n "
      },
      {
        "sha": "fbdb3d7e6daa62e1e9e8171ae0a20457d8f7fe17",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 131,
        "changes": 133,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cad967a892d836b3afbd1ab81c73731e968368c6/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cad967a892d836b3afbd1ab81c73731e968368c6/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=cad967a892d836b3afbd1ab81c73731e968368c6",
        "patch": "@@ -7,22 +7,16 @@\n from base64 import b64encode\n from binascii import hexlify, unhexlify\n from decimal import Decimal, ROUND_DOWN\n-import errno\n-import http.client\n import json\n import logging\n import os\n import random\n import re\n-import subprocess\n-import tempfile\n import time\n \n from . import coverage\n from .authproxy import AuthServiceProxy, JSONRPCException\n \n-COVERAGE_DIR = None\n-\n logger = logging.getLogger(\"TestFramework.utils\")\n \n # The maximum number of nodes a single test can spawn\n@@ -32,9 +26,6 @@\n # The number of ports to \"reserve\" for p2p and rpc, each\n PORT_RANGE = 5000\n \n-BITCOIND_PROC_WAIT_TIMEOUT = 60\n-\n-\n class PortSeed:\n     # Must be initialized with a unique integer for each process\n     n = None\n@@ -60,13 +51,7 @@ def disable_mocktime():\n def get_mocktime():\n     return MOCKTIME\n \n-def enable_coverage(dirname):\n-    \"\"\"Maintain a log of which RPC calls are made during testing.\"\"\"\n-    global COVERAGE_DIR\n-    COVERAGE_DIR = dirname\n-\n-\n-def get_rpc_proxy(url, node_number, timeout=None):\n+def get_rpc_proxy(url, node_number, timeout=None, coveragedir=None):\n     \"\"\"\n     Args:\n         url (str): URL of the RPC server to call\n@@ -87,7 +72,7 @@ def get_rpc_proxy(url, node_number, timeout=None):\n     proxy.url = url  # store URL on proxy for info\n \n     coverage_logfile = coverage.get_filename(\n-        COVERAGE_DIR, node_number) if COVERAGE_DIR else None\n+        coveragedir, node_number) if coveragedir else None\n \n     return coverage.AuthServiceProxyWrapper(proxy, coverage_logfile)\n \n@@ -172,8 +157,6 @@ def sync_mempools(rpc_connections, *, wait=1, timeout=60):\n         timeout -= wait\n     raise AssertionError(\"Mempool sync failed\")\n \n-bitcoind_processes = {}\n-\n def initialize_datadir(dirname, n):\n     datadir = os.path.join(dirname, \"node\" + str(n))\n     if not os.path.isdir(datadir):\n@@ -222,121 +205,9 @@ def rpc_url(datadir, i, rpchost=None):\n             host = rpchost\n     return \"http://%s:%s@%s:%d\" % (rpc_u, rpc_p, host, int(port))\n \n-def wait_for_bitcoind_start(process, datadir, i, rpchost=None):\n-    '''\n-    Wait for bitcoind to start. This means that RPC is accessible and fully initialized.\n-    Raise an exception if bitcoind exits during initialization.\n-    '''\n-    while True:\n-        if process.poll() is not None:\n-            raise Exception('bitcoind exited with status %i during initialization' % process.returncode)\n-        try:\n-            # Check if .cookie file to be created\n-            rpc = get_rpc_proxy(rpc_url(datadir, i, rpchost), i)\n-            rpc.getblockcount()\n-            break  # break out of loop on success\n-        except IOError as e:\n-            if e.errno != errno.ECONNREFUSED:  # Port not yet open?\n-                raise  # unknown IO error\n-        except JSONRPCException as e:  # Initialization phase\n-            if e.error['code'] != -28:  # RPC in warmup?\n-                raise  # unknown JSON RPC exception\n-        except ValueError as e:  # cookie file not found and no rpcuser or rpcassword. bitcoind still starting\n-            if \"No RPC credentials\" not in str(e):\n-                raise\n-        time.sleep(0.25)\n-\n-def wait_for_node_exit(node_index, timeout):\n-    bitcoind_processes[node_index].wait(timeout)\n-\n-def _start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n-    \"\"\"Start a bitcoind and return RPC connection to it\n-\n-    This function should only be called from within test_framework, not by individual test scripts.\"\"\"\n-\n-    datadir = os.path.join(dirname, \"node\" + str(i))\n-    if binary is None:\n-        binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n-    args = [binary, \"-datadir=\" + datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(get_mocktime()), \"-uacomment=testnode%d\" % i]\n-    if extra_args is not None:\n-        args.extend(extra_args)\n-    bitcoind_processes[i] = subprocess.Popen(args, stderr=stderr)\n-    logger.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n-    wait_for_bitcoind_start(bitcoind_processes[i], datadir, i, rpchost)\n-    logger.debug(\"initialize_chain: RPC successfully started\")\n-    proxy = get_rpc_proxy(rpc_url(datadir, i, rpchost), i, timeout=timewait)\n-\n-    if COVERAGE_DIR:\n-        coverage.write_all_rpc_commands(COVERAGE_DIR, proxy)\n-\n-    return proxy\n-\n-def assert_start_raises_init_error(i, dirname, extra_args=None, expected_msg=None):\n-    with tempfile.SpooledTemporaryFile(max_size=2**16) as log_stderr:\n-        try:\n-            node = _start_node(i, dirname, extra_args, stderr=log_stderr)\n-            _stop_node(node, i)\n-        except Exception as e:\n-            assert 'bitcoind exited' in str(e)  # node must have shutdown\n-            if expected_msg is not None:\n-                log_stderr.seek(0)\n-                stderr = log_stderr.read().decode('utf-8')\n-                if expected_msg not in stderr:\n-                    raise AssertionError(\"Expected error \\\"\" + expected_msg + \"\\\" not found in:\\n\" + stderr)\n-        else:\n-            if expected_msg is None:\n-                assert_msg = \"bitcoind should have exited with an error\"\n-            else:\n-                assert_msg = \"bitcoind should have exited with expected error \" + expected_msg\n-            raise AssertionError(assert_msg)\n-\n-def _start_nodes(num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n-    \"\"\"Start multiple bitcoinds, return RPC connections to them\n-\n-    This function should only be called from within test_framework, not by individual test scripts.\"\"\"\n-\n-    if extra_args is None:\n-        extra_args = [None] * num_nodes\n-    if binary is None:\n-        binary = [None] * num_nodes\n-    assert_equal(len(extra_args), num_nodes)\n-    assert_equal(len(binary), num_nodes)\n-    rpcs = []\n-    try:\n-        for i in range(num_nodes):\n-            rpcs.append(_start_node(i, dirname, extra_args[i], rpchost, timewait=timewait, binary=binary[i]))\n-    except:\n-        # If one node failed to start, stop the others\n-        _stop_nodes(rpcs)\n-        raise\n-    return rpcs\n-\n def log_filename(dirname, n_node, logname):\n     return os.path.join(dirname, \"node\" + str(n_node), \"regtest\", logname)\n \n-def _stop_node(node, i):\n-    \"\"\"Stop a bitcoind test node\n-\n-    This function should only be called from within test_framework, not by individual test scripts.\"\"\"\n-\n-    logger.debug(\"Stopping node %d\" % i)\n-    try:\n-        node.stop()\n-    except http.client.CannotSendRequest as e:\n-        logger.exception(\"Unable to stop node\")\n-    return_code = bitcoind_processes[i].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n-    del bitcoind_processes[i]\n-    assert_equal(return_code, 0)\n-\n-def _stop_nodes(nodes):\n-    \"\"\"Stop multiple bitcoind test nodes\n-\n-    This function should only be called from within test_framework, not by individual test scripts.\"\"\"\n-\n-    for i, node in enumerate(nodes):\n-        _stop_node(node, i)\n-    assert not bitcoind_processes.values()  # All connections must be gone now\n-\n def set_node_times(nodes, t):\n     for node in nodes:\n         node.setmocktime(t)"
      },
      {
        "sha": "569cc46e6cf92cea3c3e3d991673f8710056c825",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cad967a892d836b3afbd1ab81c73731e968368c6/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cad967a892d836b3afbd1ab81c73731e968368c6/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=cad967a892d836b3afbd1ab81c73731e968368c6",
        "patch": "@@ -7,7 +7,7 @@\n import os\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (assert_equal, bitcoind_processes)\n+from test_framework.util import assert_equal\n \n \n def read_dump(file_name, addrs, hd_master_addr_old):\n@@ -95,7 +95,7 @@ def run_test (self):\n \n         #encrypt wallet, restart, unlock and dump\n         self.nodes[0].encryptwallet('test')\n-        bitcoind_processes[0].wait()\n+        self.bitcoind_processes[0].wait()\n         self.nodes[0] = self.start_node(0, self.options.tmpdir, self.extra_args[0])\n         self.nodes[0].walletpassphrase('test', 10)\n         # Should be a no-op:"
      },
      {
        "sha": "ba72918fe1564dcf09153c5711ef9e9e8c373fc4",
        "filename": "test/functional/wallet-encryption.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cad967a892d836b3afbd1ab81c73731e968368c6/test/functional/wallet-encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cad967a892d836b3afbd1ab81c73731e968368c6/test/functional/wallet-encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-encryption.py?ref=cad967a892d836b3afbd1ab81c73731e968368c6",
        "patch": "@@ -6,12 +6,10 @@\n \n import time\n \n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT\n from test_framework.util import (\n     assert_equal,\n     assert_raises_jsonrpc,\n-    bitcoind_processes,\n-    BITCOIND_PROC_WAIT_TIMEOUT,\n )\n \n class WalletEncryptionTest(BitcoinTestFramework):\n@@ -33,7 +31,7 @@ def run_test(self):\n \n         # Encrypt the wallet\n         self.nodes[0].encryptwallet(passphrase)\n-        bitcoind_processes[0].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+        self.bitcoind_processes[0].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n         self.nodes[0] = self.start_node(0, self.options.tmpdir)\n \n         # Test that the wallet is encrypted"
      },
      {
        "sha": "dfd3dc83c523a47ca59a9700ff2051b2238ed7d9",
        "filename": "test/functional/wallet-hd.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cad967a892d836b3afbd1ab81c73731e968368c6/test/functional/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cad967a892d836b3afbd1ab81c73731e968368c6/test/functional/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd.py?ref=cad967a892d836b3afbd1ab81c73731e968368c6",
        "patch": "@@ -8,7 +8,6 @@\n from test_framework.util import (\n     assert_equal,\n     connect_nodes_bi,\n-    assert_start_raises_init_error\n )\n import os\n import shutil\n@@ -27,7 +26,7 @@ def run_test (self):\n \n         # Make sure can't switch off usehd after wallet creation\n         self.stop_node(1)\n-        assert_start_raises_init_error(1, self.options.tmpdir, ['-usehd=0'], 'already existing HD wallet')\n+        self.assert_start_raises_init_error(1, self.options.tmpdir, ['-usehd=0'], 'already existing HD wallet')\n         self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n         connect_nodes_bi(self.nodes, 0, 1)\n "
      }
    ]
  },
  {
    "sha": "0d473c539ed0f53168aa3bae8474f214831dec1f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZDQ3M2M1MzllZDBmNTMxNjhhYTNiYWU4NDc0ZjIxNDgzMWRlYzFm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-07T17:43:03Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-29T10:55:23Z"
      },
      "message": "[tests] move mocktime property and functions to BitcoinTestFramework",
      "tree": {
        "sha": "3bb27a7b56a4d8d7cd49297d64dedf524cb8f872",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3bb27a7b56a4d8d7cd49297d64dedf524cb8f872"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d473c539ed0f53168aa3bae8474f214831dec1f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d473c539ed0f53168aa3bae8474f214831dec1f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0d473c539ed0f53168aa3bae8474f214831dec1f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d473c539ed0f53168aa3bae8474f214831dec1f/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cad967a892d836b3afbd1ab81c73731e968368c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cad967a892d836b3afbd1ab81c73731e968368c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cad967a892d836b3afbd1ab81c73731e968368c6"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 22,
      "deletions": 30
    },
    "files": [
      {
        "sha": "f75a8e29cc7a0b76e4c38451f2b53b16f1faa210",
        "filename": "test/functional/listtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d473c539ed0f53168aa3bae8474f214831dec1f/test/functional/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d473c539ed0f53168aa3bae8474f214831dec1f/test/functional/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listtransactions.py?ref=0d473c539ed0f53168aa3bae8474f214831dec1f",
        "patch": "@@ -23,7 +23,7 @@ def __init__(self):\n \n     def setup_nodes(self):\n         #This test requires mocktime\n-        enable_mocktime()\n+        self.enable_mocktime()\n         self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n \n     def run_test(self):"
      },
      {
        "sha": "19d99c9c9e9750241da3a46c59bebb9f21eae28f",
        "filename": "test/functional/receivedby.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d473c539ed0f53168aa3bae8474f214831dec1f/test/functional/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d473c539ed0f53168aa3bae8474f214831dec1f/test/functional/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/receivedby.py?ref=0d473c539ed0f53168aa3bae8474f214831dec1f",
        "patch": "@@ -31,7 +31,7 @@ def __init__(self):\n \n     def setup_nodes(self):\n         #This test requires mocktime\n-        enable_mocktime()\n+        self.enable_mocktime()\n         self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n \n     def run_test(self):"
      },
      {
        "sha": "00807b022cf924c9cd5fdb83bca10a71ea7eb2ba",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 20,
        "deletions": 7,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d473c539ed0f53168aa3bae8474f214831dec1f/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d473c539ed0f53168aa3bae8474f214831dec1f/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=0d473c539ed0f53168aa3bae8474f214831dec1f",
        "patch": "@@ -26,10 +26,7 @@\n     assert_equal,\n     check_json_precision,\n     connect_nodes_bi,\n-    disable_mocktime,\n     disconnect_nodes,\n-    enable_mocktime,\n-    get_mocktime,\n     get_rpc_proxy,\n     initialize_datadir,\n     get_datadir_path,\n@@ -73,6 +70,7 @@ def __init__(self):\n         self.setup_clean_chain = False\n         self.nodes = []\n         self.bitcoind_processes = {}\n+        self.mocktime = 0\n \n     def add_options(self, parser):\n         pass\n@@ -211,7 +209,7 @@ def start_node(self, i, dirname, extra_args=None, rpchost=None, timewait=None, b\n         datadir = os.path.join(dirname, \"node\" + str(i))\n         if binary is None:\n             binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n-        args = [binary, \"-datadir=\" + datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(get_mocktime()), \"-uacomment=testnode%d\" % i]\n+        args = [binary, \"-datadir=\" + datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(self.mocktime), \"-uacomment=testnode%d\" % i]\n         if extra_args is not None:\n             args.extend(extra_args)\n         self.bitcoind_processes[i] = subprocess.Popen(args, stderr=stderr)\n@@ -312,6 +310,21 @@ def sync_all(self, node_groups=None):\n             sync_blocks(group)\n             sync_mempools(group)\n \n+    def enable_mocktime(self):\n+        \"\"\"Enable mocktime for the script.\n+\n+        mocktime may be needed for scripts that use the cached version of the\n+        blockchain.  If the cached version of the blockchain is used without\n+        mocktime then the mempools will not sync due to IBD.\n+\n+        For backwared compatibility of the python scripts with previous\n+        versions of the cache, this helper function sets mocktime to Jan 1,\n+        2014 + (201 * 10 * 60)\"\"\"\n+        self.mocktime = 1388534400 + (201 * 10 * 60)\n+\n+    def disable_mocktime(self):\n+        self.mocktime = 0\n+\n     # Private helper methods. These should not be accessed by the subclass test scripts.\n \n     def _start_logging(self):\n@@ -389,8 +402,8 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n             #\n             # blocks are created with timestamps 10 minutes apart\n             # starting from 2010 minutes in the past\n-            enable_mocktime()\n-            block_time = get_mocktime() - (201 * 10 * 60)\n+            self.enable_mocktime()\n+            block_time = self.mocktime - (201 * 10 * 60)\n             for i in range(2):\n                 for peer in range(4):\n                     for j in range(25):\n@@ -403,7 +416,7 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n             # Shut them down, and clean up cache directories:\n             self.stop_nodes()\n             self.nodes = []\n-            disable_mocktime()\n+            self.disable_mocktime()\n             for i in range(MAX_NODES):\n                 os.remove(log_filename(cachedir, i, \"debug.log\"))\n                 os.remove(log_filename(cachedir, i, \"db.log\"))"
      },
      {
        "sha": "cca1e2b8943797167b9caeaeee390d1f33f53e43",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 0,
        "deletions": 21,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d473c539ed0f53168aa3bae8474f214831dec1f/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d473c539ed0f53168aa3bae8474f214831dec1f/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=0d473c539ed0f53168aa3bae8474f214831dec1f",
        "patch": "@@ -30,27 +30,6 @@ class PortSeed:\n     # Must be initialized with a unique integer for each process\n     n = None\n \n-# Set Mocktime default to OFF.\n-# MOCKTIME is only needed for scripts that use the\n-# cached version of the blockchain.  If the cached\n-# version of the blockchain is used without MOCKTIME\n-# then the mempools will not sync due to IBD.\n-MOCKTIME = 0\n-\n-def enable_mocktime():\n-    # For backwared compatibility of the python scripts\n-    # with previous versions of the cache, set MOCKTIME\n-    # to Jan 1, 2014 + (201 * 10 * 60)\n-    global MOCKTIME\n-    MOCKTIME = 1388534400 + (201 * 10 * 60)\n-\n-def disable_mocktime():\n-    global MOCKTIME\n-    MOCKTIME = 0\n-\n-def get_mocktime():\n-    return MOCKTIME\n-\n def get_rpc_proxy(url, node_number, timeout=None, coveragedir=None):\n     \"\"\"\n     Args:"
      }
    ]
  },
  {
    "sha": "05b8c081b435e87b08335e9f9b62a55fa1d48ecc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNWI4YzA4MWI0MzVlODdiMDgzMzVlOWY5YjYyYTU1ZmExZDQ4ZWNj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-07T17:51:25Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-29T10:56:33Z"
      },
      "message": "[tests] reorganize utils.py module (code move only)\n\nThis commit re-organizes the utils.py module into logical sections.",
      "tree": {
        "sha": "1da4d7589eb7eeb95c75f776d6c435891b6ceb71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1da4d7589eb7eeb95c75f776d6c435891b6ceb71"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05b8c081b435e87b08335e9f9b62a55fa1d48ecc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05b8c081b435e87b08335e9f9b62a55fa1d48ecc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/05b8c081b435e87b08335e9f9b62a55fa1d48ecc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05b8c081b435e87b08335e9f9b62a55fa1d48ecc/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d473c539ed0f53168aa3bae8474f214831dec1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d473c539ed0f53168aa3bae8474f214831dec1f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d473c539ed0f53168aa3bae8474f214831dec1f"
      }
    ],
    "stats": {
      "total": 417,
      "additions": 217,
      "deletions": 200
    },
    "files": [
      {
        "sha": "8080c8c97239d094a8eb64cda9535b46c1a14b3b",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 217,
        "deletions": 200,
        "changes": 417,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05b8c081b435e87b08335e9f9b62a55fa1d48ecc/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05b8c081b435e87b08335e9f9b62a55fa1d48ecc/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=05b8c081b435e87b08335e9f9b62a55fa1d48ecc",
        "patch": "@@ -19,6 +19,147 @@\n \n logger = logging.getLogger(\"TestFramework.utils\")\n \n+# Assert functions\n+##################\n+\n+def assert_fee_amount(fee, tx_size, fee_per_kB):\n+    \"\"\"Assert the fee was in range\"\"\"\n+    target_fee = tx_size * fee_per_kB / 1000\n+    if fee < target_fee:\n+        raise AssertionError(\"Fee of %s BTC too low! (Should be %s BTC)\" % (str(fee), str(target_fee)))\n+    # allow the wallet's estimation to be at most 2 bytes off\n+    if fee > (tx_size + 2) * fee_per_kB / 1000:\n+        raise AssertionError(\"Fee of %s BTC too high! (Should be %s BTC)\" % (str(fee), str(target_fee)))\n+\n+def assert_equal(thing1, thing2, *args):\n+    if thing1 != thing2 or any(thing1 != arg for arg in args):\n+        raise AssertionError(\"not(%s)\" % \" == \".join(str(arg) for arg in (thing1, thing2) + args))\n+\n+def assert_greater_than(thing1, thing2):\n+    if thing1 <= thing2:\n+        raise AssertionError(\"%s <= %s\" % (str(thing1), str(thing2)))\n+\n+def assert_greater_than_or_equal(thing1, thing2):\n+    if thing1 < thing2:\n+        raise AssertionError(\"%s < %s\" % (str(thing1), str(thing2)))\n+\n+def assert_raises(exc, fun, *args, **kwds):\n+    assert_raises_message(exc, None, fun, *args, **kwds)\n+\n+def assert_raises_message(exc, message, fun, *args, **kwds):\n+    try:\n+        fun(*args, **kwds)\n+    except exc as e:\n+        if message is not None and message not in e.error['message']:\n+            raise AssertionError(\"Expected substring not found:\" + e.error['message'])\n+    except Exception as e:\n+        raise AssertionError(\"Unexpected exception raised: \" + type(e).__name__)\n+    else:\n+        raise AssertionError(\"No exception raised\")\n+\n+def assert_raises_jsonrpc(code, message, fun, *args, **kwds):\n+    \"\"\"Run an RPC and verify that a specific JSONRPC exception code and message is raised.\n+\n+    Calls function `fun` with arguments `args` and `kwds`. Catches a JSONRPCException\n+    and verifies that the error code and message are as expected. Throws AssertionError if\n+    no JSONRPCException was returned or if the error code/message are not as expected.\n+\n+    Args:\n+        code (int), optional: the error code returned by the RPC call (defined\n+            in src/rpc/protocol.h). Set to None if checking the error code is not required.\n+        message (string), optional: [a substring of] the error string returned by the\n+            RPC call. Set to None if checking the error string is not required\n+        fun (function): the function to call. This should be the name of an RPC.\n+        args*: positional arguments for the function.\n+        kwds**: named arguments for the function.\n+    \"\"\"\n+    try:\n+        fun(*args, **kwds)\n+    except JSONRPCException as e:\n+        # JSONRPCException was thrown as expected. Check the code and message values are correct.\n+        if (code is not None) and (code != e.error[\"code\"]):\n+            raise AssertionError(\"Unexpected JSONRPC error code %i\" % e.error[\"code\"])\n+        if (message is not None) and (message not in e.error['message']):\n+            raise AssertionError(\"Expected substring not found:\" + e.error['message'])\n+    except Exception as e:\n+        raise AssertionError(\"Unexpected exception raised: \" + type(e).__name__)\n+    else:\n+        raise AssertionError(\"No exception raised\")\n+\n+def assert_is_hex_string(string):\n+    try:\n+        int(string, 16)\n+    except Exception as e:\n+        raise AssertionError(\n+            \"Couldn't interpret %r as hexadecimal; raised: %s\" % (string, e))\n+\n+def assert_is_hash_string(string, length=64):\n+    if not isinstance(string, str):\n+        raise AssertionError(\"Expected a string, got type %r\" % type(string))\n+    elif length and len(string) != length:\n+        raise AssertionError(\n+            \"String of length %d expected; got %d\" % (length, len(string)))\n+    elif not re.match('[abcdef0-9]+$', string):\n+        raise AssertionError(\n+            \"String %r contains invalid characters for a hash.\" % string)\n+\n+def assert_array_result(object_array, to_match, expected, should_not_find=False):\n+    \"\"\"\n+        Pass in array of JSON objects, a dictionary with key/value pairs\n+        to match against, and another dictionary with expected key/value\n+        pairs.\n+        If the should_not_find flag is true, to_match should not be found\n+        in object_array\n+        \"\"\"\n+    if should_not_find:\n+        assert_equal(expected, {})\n+    num_matched = 0\n+    for item in object_array:\n+        all_match = True\n+        for key, value in to_match.items():\n+            if item[key] != value:\n+                all_match = False\n+        if not all_match:\n+            continue\n+        elif should_not_find:\n+            num_matched = num_matched + 1\n+        for key, value in expected.items():\n+            if item[key] != value:\n+                raise AssertionError(\"%s : expected %s=%s\" % (str(item), str(key), str(value)))\n+            num_matched = num_matched + 1\n+    if num_matched == 0 and not should_not_find:\n+        raise AssertionError(\"No objects matched %s\" % (str(to_match)))\n+    if num_matched > 0 and should_not_find:\n+        raise AssertionError(\"Objects were found %s\" % (str(to_match)))\n+\n+# Utility functions\n+###################\n+\n+def check_json_precision():\n+    \"\"\"Make sure json library being used does not lose precision converting BTC values\"\"\"\n+    n = Decimal(\"20000000.00000003\")\n+    satoshis = int(json.loads(json.dumps(float(n))) * 1.0e8)\n+    if satoshis != 2000000000000003:\n+        raise RuntimeError(\"JSON encode/decode loses precision\")\n+\n+def count_bytes(hex_string):\n+    return len(bytearray.fromhex(hex_string))\n+\n+def bytes_to_hex_str(byte_str):\n+    return hexlify(byte_str).decode('ascii')\n+\n+def hex_str_to_bytes(hex_str):\n+    return unhexlify(hex_str.encode('ascii'))\n+\n+def str_to_b64str(string):\n+    return b64encode(string.encode('utf-8')).decode('ascii')\n+\n+def satoshi_round(amount):\n+    return Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n+\n+# RPC/P2P connection constants and functions\n+############################################\n+\n # The maximum number of nodes a single test can spawn\n MAX_NODES = 8\n # Don't assign rpc or p2p ports lower than this\n@@ -55,86 +196,30 @@ def get_rpc_proxy(url, node_number, timeout=None, coveragedir=None):\n \n     return coverage.AuthServiceProxyWrapper(proxy, coverage_logfile)\n \n-\n def p2p_port(n):\n     assert(n <= MAX_NODES)\n     return PORT_MIN + n + (MAX_NODES * PortSeed.n) % (PORT_RANGE - 1 - MAX_NODES)\n \n def rpc_port(n):\n     return PORT_MIN + PORT_RANGE + n + (MAX_NODES * PortSeed.n) % (PORT_RANGE - 1 - MAX_NODES)\n \n-def check_json_precision():\n-    \"\"\"Make sure json library being used does not lose precision converting BTC values\"\"\"\n-    n = Decimal(\"20000000.00000003\")\n-    satoshis = int(json.loads(json.dumps(float(n))) * 1.0e8)\n-    if satoshis != 2000000000000003:\n-        raise RuntimeError(\"JSON encode/decode loses precision\")\n-\n-def count_bytes(hex_string):\n-    return len(bytearray.fromhex(hex_string))\n-\n-def bytes_to_hex_str(byte_str):\n-    return hexlify(byte_str).decode('ascii')\n-\n-def hex_str_to_bytes(hex_str):\n-    return unhexlify(hex_str.encode('ascii'))\n+def rpc_auth_pair(n):\n+    return 'rpcuser\ud83d\udcbb' + str(n), 'rpcpass\ud83d\udd11' + str(n)\n \n-def str_to_b64str(string):\n-    return b64encode(string.encode('utf-8')).decode('ascii')\n-\n-def sync_blocks(rpc_connections, *, wait=1, timeout=60):\n-    \"\"\"\n-    Wait until everybody has the same tip.\n-\n-    sync_blocks needs to be called with an rpc_connections set that has least\n-    one node already synced to the latest, stable tip, otherwise there's a\n-    chance it might return before all nodes are stably synced.\n-    \"\"\"\n-    # Use getblockcount() instead of waitforblockheight() to determine the\n-    # initial max height because the two RPCs look at different internal global\n-    # variables (chainActive vs latestBlock) and the former gets updated\n-    # earlier.\n-    maxheight = max(x.getblockcount() for x in rpc_connections)\n-    start_time = cur_time = time.time()\n-    while cur_time <= start_time + timeout:\n-        tips = [r.waitforblockheight(maxheight, int(wait * 1000)) for r in rpc_connections]\n-        if all(t[\"height\"] == maxheight for t in tips):\n-            if all(t[\"hash\"] == tips[0][\"hash\"] for t in tips):\n-                return\n-            raise AssertionError(\"Block sync failed, mismatched block hashes:{}\".format(\n-                                 \"\".join(\"\\n  {!r}\".format(tip) for tip in tips)))\n-        cur_time = time.time()\n-    raise AssertionError(\"Block sync to height {} timed out:{}\".format(\n-                         maxheight, \"\".join(\"\\n  {!r}\".format(tip) for tip in tips)))\n+def rpc_url(datadir, i, rpchost=None):\n+    rpc_u, rpc_p = get_auth_cookie(datadir, i)\n+    host = '127.0.0.1'\n+    port = rpc_port(i)\n+    if rpchost:\n+        parts = rpchost.split(':')\n+        if len(parts) == 2:\n+            host, port = parts\n+        else:\n+            host = rpchost\n+    return \"http://%s:%s@%s:%d\" % (rpc_u, rpc_p, host, int(port))\n \n-def sync_chain(rpc_connections, *, wait=1, timeout=60):\n-    \"\"\"\n-    Wait until everybody has the same best block\n-    \"\"\"\n-    while timeout > 0:\n-        best_hash = [x.getbestblockhash() for x in rpc_connections]\n-        if best_hash == [best_hash[0]] * len(best_hash):\n-            return\n-        time.sleep(wait)\n-        timeout -= wait\n-    raise AssertionError(\"Chain sync failed: Best block hashes don't match\")\n-\n-def sync_mempools(rpc_connections, *, wait=1, timeout=60):\n-    \"\"\"\n-    Wait until everybody has the same transactions in their memory\n-    pools\n-    \"\"\"\n-    while timeout > 0:\n-        pool = set(rpc_connections[0].getrawmempool())\n-        num_match = 1\n-        for i in range(1, len(rpc_connections)):\n-            if set(rpc_connections[i].getrawmempool()) == pool:\n-                num_match = num_match + 1\n-        if num_match == len(rpc_connections):\n-            return\n-        time.sleep(wait)\n-        timeout -= wait\n-    raise AssertionError(\"Mempool sync failed\")\n+# Node functions\n+################\n \n def initialize_datadir(dirname, n):\n     datadir = os.path.join(dirname, \"node\" + str(n))\n@@ -172,21 +257,13 @@ def get_auth_cookie(datadir, n):\n         raise ValueError(\"No RPC credentials\")\n     return user, password\n \n-def rpc_url(datadir, i, rpchost=None):\n-    rpc_u, rpc_p = get_auth_cookie(datadir, i)\n-    host = '127.0.0.1'\n-    port = rpc_port(i)\n-    if rpchost:\n-        parts = rpchost.split(':')\n-        if len(parts) == 2:\n-            host, port = parts\n-        else:\n-            host = rpchost\n-    return \"http://%s:%s@%s:%d\" % (rpc_u, rpc_p, host, int(port))\n-\n def log_filename(dirname, n_node, logname):\n     return os.path.join(dirname, \"node\" + str(n_node), \"regtest\", logname)\n \n+def get_bip9_status(node, key):\n+    info = node.getblockchaininfo()\n+    return info['bip9_softforks'][key]\n+\n def set_node_times(nodes, t):\n     for node in nodes:\n         node.setmocktime(t)\n@@ -214,6 +291,63 @@ def connect_nodes_bi(nodes, a, b):\n     connect_nodes(nodes[a], b)\n     connect_nodes(nodes[b], a)\n \n+def sync_blocks(rpc_connections, *, wait=1, timeout=60):\n+    \"\"\"\n+    Wait until everybody has the same tip.\n+\n+    sync_blocks needs to be called with an rpc_connections set that has least\n+    one node already synced to the latest, stable tip, otherwise there's a\n+    chance it might return before all nodes are stably synced.\n+    \"\"\"\n+    # Use getblockcount() instead of waitforblockheight() to determine the\n+    # initial max height because the two RPCs look at different internal global\n+    # variables (chainActive vs latestBlock) and the former gets updated\n+    # earlier.\n+    maxheight = max(x.getblockcount() for x in rpc_connections)\n+    start_time = cur_time = time.time()\n+    while cur_time <= start_time + timeout:\n+        tips = [r.waitforblockheight(maxheight, int(wait * 1000)) for r in rpc_connections]\n+        if all(t[\"height\"] == maxheight for t in tips):\n+            if all(t[\"hash\"] == tips[0][\"hash\"] for t in tips):\n+                return\n+            raise AssertionError(\"Block sync failed, mismatched block hashes:{}\".format(\n+                                 \"\".join(\"\\n  {!r}\".format(tip) for tip in tips)))\n+        cur_time = time.time()\n+    raise AssertionError(\"Block sync to height {} timed out:{}\".format(\n+                         maxheight, \"\".join(\"\\n  {!r}\".format(tip) for tip in tips)))\n+\n+def sync_chain(rpc_connections, *, wait=1, timeout=60):\n+    \"\"\"\n+    Wait until everybody has the same best block\n+    \"\"\"\n+    while timeout > 0:\n+        best_hash = [x.getbestblockhash() for x in rpc_connections]\n+        if best_hash == [best_hash[0]] * len(best_hash):\n+            return\n+        time.sleep(wait)\n+        timeout -= wait\n+    raise AssertionError(\"Chain sync failed: Best block hashes don't match\")\n+\n+def sync_mempools(rpc_connections, *, wait=1, timeout=60):\n+    \"\"\"\n+    Wait until everybody has the same transactions in their memory\n+    pools\n+    \"\"\"\n+    while timeout > 0:\n+        pool = set(rpc_connections[0].getrawmempool())\n+        num_match = 1\n+        for i in range(1, len(rpc_connections)):\n+            if set(rpc_connections[i].getrawmempool()) == pool:\n+                num_match = num_match + 1\n+        if num_match == len(rpc_connections):\n+            return\n+        time.sleep(wait)\n+        timeout -= wait\n+    raise AssertionError(\"Mempool sync failed\")\n+\n+# Transaction/Block functions\n+#############################\n+\n def find_output(node, txid, amount):\n     \"\"\"\n     Return index to output of txid with value amount\n@@ -278,119 +412,6 @@ def random_transaction(nodes, amount, min_fee, fee_increment, fee_variants):\n \n     return (txid, signresult[\"hex\"], fee)\n \n-def assert_fee_amount(fee, tx_size, fee_per_kB):\n-    \"\"\"Assert the fee was in range\"\"\"\n-    target_fee = tx_size * fee_per_kB / 1000\n-    if fee < target_fee:\n-        raise AssertionError(\"Fee of %s BTC too low! (Should be %s BTC)\" % (str(fee), str(target_fee)))\n-    # allow the wallet's estimation to be at most 2 bytes off\n-    if fee > (tx_size + 2) * fee_per_kB / 1000:\n-        raise AssertionError(\"Fee of %s BTC too high! (Should be %s BTC)\" % (str(fee), str(target_fee)))\n-\n-def assert_equal(thing1, thing2, *args):\n-    if thing1 != thing2 or any(thing1 != arg for arg in args):\n-        raise AssertionError(\"not(%s)\" % \" == \".join(str(arg) for arg in (thing1, thing2) + args))\n-\n-def assert_greater_than(thing1, thing2):\n-    if thing1 <= thing2:\n-        raise AssertionError(\"%s <= %s\" % (str(thing1), str(thing2)))\n-\n-def assert_greater_than_or_equal(thing1, thing2):\n-    if thing1 < thing2:\n-        raise AssertionError(\"%s < %s\" % (str(thing1), str(thing2)))\n-\n-def assert_raises(exc, fun, *args, **kwds):\n-    assert_raises_message(exc, None, fun, *args, **kwds)\n-\n-def assert_raises_message(exc, message, fun, *args, **kwds):\n-    try:\n-        fun(*args, **kwds)\n-    except exc as e:\n-        if message is not None and message not in e.error['message']:\n-            raise AssertionError(\"Expected substring not found:\" + e.error['message'])\n-    except Exception as e:\n-        raise AssertionError(\"Unexpected exception raised: \" + type(e).__name__)\n-    else:\n-        raise AssertionError(\"No exception raised\")\n-\n-def assert_raises_jsonrpc(code, message, fun, *args, **kwds):\n-    \"\"\"Run an RPC and verify that a specific JSONRPC exception code and message is raised.\n-\n-    Calls function `fun` with arguments `args` and `kwds`. Catches a JSONRPCException\n-    and verifies that the error code and message are as expected. Throws AssertionError if\n-    no JSONRPCException was returned or if the error code/message are not as expected.\n-\n-    Args:\n-        code (int), optional: the error code returned by the RPC call (defined\n-            in src/rpc/protocol.h). Set to None if checking the error code is not required.\n-        message (string), optional: [a substring of] the error string returned by the\n-            RPC call. Set to None if checking the error string is not required\n-        fun (function): the function to call. This should be the name of an RPC.\n-        args*: positional arguments for the function.\n-        kwds**: named arguments for the function.\n-    \"\"\"\n-    try:\n-        fun(*args, **kwds)\n-    except JSONRPCException as e:\n-        # JSONRPCException was thrown as expected. Check the code and message values are correct.\n-        if (code is not None) and (code != e.error[\"code\"]):\n-            raise AssertionError(\"Unexpected JSONRPC error code %i\" % e.error[\"code\"])\n-        if (message is not None) and (message not in e.error['message']):\n-            raise AssertionError(\"Expected substring not found:\" + e.error['message'])\n-    except Exception as e:\n-        raise AssertionError(\"Unexpected exception raised: \" + type(e).__name__)\n-    else:\n-        raise AssertionError(\"No exception raised\")\n-\n-def assert_is_hex_string(string):\n-    try:\n-        int(string, 16)\n-    except Exception as e:\n-        raise AssertionError(\n-            \"Couldn't interpret %r as hexadecimal; raised: %s\" % (string, e))\n-\n-def assert_is_hash_string(string, length=64):\n-    if not isinstance(string, str):\n-        raise AssertionError(\"Expected a string, got type %r\" % type(string))\n-    elif length and len(string) != length:\n-        raise AssertionError(\n-            \"String of length %d expected; got %d\" % (length, len(string)))\n-    elif not re.match('[abcdef0-9]+$', string):\n-        raise AssertionError(\n-            \"String %r contains invalid characters for a hash.\" % string)\n-\n-def assert_array_result(object_array, to_match, expected, should_not_find=False):\n-    \"\"\"\n-        Pass in array of JSON objects, a dictionary with key/value pairs\n-        to match against, and another dictionary with expected key/value\n-        pairs.\n-        If the should_not_find flag is true, to_match should not be found\n-        in object_array\n-        \"\"\"\n-    if should_not_find:\n-        assert_equal(expected, {})\n-    num_matched = 0\n-    for item in object_array:\n-        all_match = True\n-        for key, value in to_match.items():\n-            if item[key] != value:\n-                all_match = False\n-        if not all_match:\n-            continue\n-        elif should_not_find:\n-            num_matched = num_matched + 1\n-        for key, value in expected.items():\n-            if item[key] != value:\n-                raise AssertionError(\"%s : expected %s=%s\" % (str(item), str(key), str(value)))\n-            num_matched = num_matched + 1\n-    if num_matched == 0 and not should_not_find:\n-        raise AssertionError(\"No objects matched %s\" % (str(to_match)))\n-    if num_matched > 0 and should_not_find:\n-        raise AssertionError(\"Objects were found %s\" % (str(to_match)))\n-\n-def satoshi_round(amount):\n-    return Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n-\n # Helper to create at least \"count\" utxos\n # Pass in a fee that is sufficient for relay and mining new transactions.\n def create_confirmed_utxos(fee, node, count):\n@@ -480,7 +501,3 @@ def mine_large_block(node, utxos=None):\n     fee = 100 * node.getnetworkinfo()[\"relayfee\"]\n     create_lots_of_big_transactions(node, txouts, utxos, num, fee=fee)\n     node.generate(1)\n-\n-def get_bip9_status(node, key):\n-    info = node.getblockchaininfo()\n-    return info['bip9_softforks'][key]"
      }
    ]
  },
  {
    "sha": "4c72cc33ebcc4267e68a73ad04b7f88570e990fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YzcyY2MzM2ViY2M0MjY3ZTY4YTczYWQwNGI3Zjg4NTcwZTk5MGZi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-29T12:44:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-29T13:03:15Z"
      },
      "message": "Merge #10673: [qt] Avoid potential null pointer dereference in TransactionView::exportClicked()\n\nfd9599b [qt] Avoid potential null pointer dereference in TransactionView::exportClicked() (practicalswift)\n\nTree-SHA512: 33cbb65bd86aceb58918eb0a19e1727599a22285e7c89d4e7d3b2639c879dc8939708fd506006c6c092f624050d1131f997cc37f837cb980aa440f8abe5a3c18",
      "tree": {
        "sha": "ba63009cdd8f7a2a31fc681dee3c75397c899b94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba63009cdd8f7a2a31fc681dee3c75397c899b94"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c72cc33ebcc4267e68a73ad04b7f88570e990fb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZVPqTAAoJEB5K7WKYbNJdk9YH/3vG+3OfXizp9gAe1arrJWyd\nL3kdwexUd/K9p91NbW2XG8MTcJI3Yd5x91t25TN0a3CyA2M34JDBS5z9+6qwgnCS\npPxg5RPQXD/YULcM+QjQ452SOhpFgNePv9s4p+IPuJmzx3QuxhbhJlv6rS78jUAd\npEcMUL+qlVaj48d5bcYub2GQjcKAzmuBEWBqnICCSDpgzjcQCQwg5hzqzo8EM55S\nJcVdP8hWRXnCHApBWYwS3a++Ky37+J8EnuOoM6/KduYa2to9oTdJrMiFXW373zCu\nXM21vgkvxRvCtoSZvFgMJuI25MPgWp73KQu1e08FAhyuwRtb9H6GAmmoSDMasLY=\n=/F5T\n-----END PGP SIGNATURE-----",
        "payload": "tree ba63009cdd8f7a2a31fc681dee3c75397c899b94\nparent 080ec5209172ac9605f1434559dbb3c1e012b10a\nparent fd9599b1358a314b073a9ca0a68ca8037915d91d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1498740247 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1498741395 +0200\n\nMerge #10673: [qt] Avoid potential null pointer dereference in TransactionView::exportClicked()\n\nfd9599b [qt] Avoid potential null pointer dereference in TransactionView::exportClicked() (practicalswift)\n\nTree-SHA512: 33cbb65bd86aceb58918eb0a19e1727599a22285e7c89d4e7d3b2639c879dc8939708fd506006c6c092f624050d1131f997cc37f837cb980aa440f8abe5a3c18\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c72cc33ebcc4267e68a73ad04b7f88570e990fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c72cc33ebcc4267e68a73ad04b7f88570e990fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c72cc33ebcc4267e68a73ad04b7f88570e990fb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "080ec5209172ac9605f1434559dbb3c1e012b10a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/080ec5209172ac9605f1434559dbb3c1e012b10a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/080ec5209172ac9605f1434559dbb3c1e012b10a"
      },
      {
        "sha": "fd9599b1358a314b073a9ca0a68ca8037915d91d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd9599b1358a314b073a9ca0a68ca8037915d91d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd9599b1358a314b073a9ca0a68ca8037915d91d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "43d6e8826ba6fe1699c3899995ead50c48ec0982",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c72cc33ebcc4267e68a73ad04b7f88570e990fb/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c72cc33ebcc4267e68a73ad04b7f88570e990fb/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=4c72cc33ebcc4267e68a73ad04b7f88570e990fb",
        "patch": "@@ -336,6 +336,10 @@ void TransactionView::changedAmount(const QString &amount)\n \n void TransactionView::exportClicked()\n {\n+    if (!model || !model->getOptionsModel()) {\n+        return;\n+    }\n+\n     // CSV is currently the only supported format\n     QString filename = GUIUtil::getSaveFileName(this,\n         tr(\"Export Transaction History\"), QString(),"
      }
    ]
  },
  {
    "sha": "5ba83c1d434be508064cf039d73f215f0b199c2d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YmE4M2MxZDQzNGJlNTA4MDY0Y2YwMzlkNzNmMjE1ZjBiMTk5YzJk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-29T14:06:33Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-29T14:06:38Z"
      },
      "message": "[tests] fix nits.\n\nThanks to Marco Falke.",
      "tree": {
        "sha": "5e2f5010a38d7db088651eb4cae797c874fa4a76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e2f5010a38d7db088651eb4cae797c874fa4a76"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ba83c1d434be508064cf039d73f215f0b199c2d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ba83c1d434be508064cf039d73f215f0b199c2d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ba83c1d434be508064cf039d73f215f0b199c2d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ba83c1d434be508064cf039d73f215f0b199c2d/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "05b8c081b435e87b08335e9f9b62a55fa1d48ecc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05b8c081b435e87b08335e9f9b62a55fa1d48ecc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/05b8c081b435e87b08335e9f9b62a55fa1d48ecc"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 1,
      "deletions": 4
    },
    "files": [
      {
        "sha": "8d698a73276a1eb38f4963fb67e4b5d0fb71d6f5",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ba83c1d434be508064cf039d73f215f0b199c2d/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ba83c1d434be508064cf039d73f215f0b199c2d/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=5ba83c1d434be508064cf039d73f215f0b199c2d",
        "patch": "@@ -255,8 +255,8 @@ def stop_node(self, i):\n         except http.client.CannotSendRequest as e:\n             self.log.exception(\"Unable to stop node\")\n         return_code = self.bitcoind_processes[i].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n-        assert_equal(return_code, 0)\n         del self.bitcoind_processes[i]\n+        assert_equal(return_code, 0)\n \n     def stop_nodes(self):\n         \"\"\"Stop multiple bitcoind test nodes\"\"\""
      },
      {
        "sha": "3c918b48fbd87554f46397a4d8cb05e39edd02e6",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ba83c1d434be508064cf039d73f215f0b199c2d/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ba83c1d434be508064cf039d73f215f0b199c2d/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=5ba83c1d434be508064cf039d73f215f0b199c2d",
        "patch": "@@ -203,9 +203,6 @@ def p2p_port(n):\n def rpc_port(n):\n     return PORT_MIN + PORT_RANGE + n + (MAX_NODES * PortSeed.n) % (PORT_RANGE - 1 - MAX_NODES)\n \n-def rpc_auth_pair(n):\n-    return 'rpcuser\ud83d\udcbb' + str(n), 'rpcpass\ud83d\udd11' + str(n)\n-\n def rpc_url(datadir, i, rpchost=None):\n     rpc_u, rpc_p = get_auth_cookie(datadir, i)\n     host = '127.0.0.1'"
      }
    ]
  },
  {
    "sha": "65cc7aacfbfc7b747926375280a1d839e88d576b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWNjN2FhY2ZiZmM3Yjc0NzkyNjM3NTI4MGExZDgzOWU4OGQ1NzZi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-06-29T15:37:19Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-06-29T15:38:09Z"
      },
      "message": "Merge #10556: Move stop/start functions from utils.py into BitcoinTestFramework\n\n5ba83c1 [tests] fix nits. (John Newbery)\n05b8c08 [tests] reorganize utils.py module (code move only) (John Newbery)\n0d473c5 [tests] move mocktime property and functions to BitcoinTestFramework (John Newbery)\ncad967a [tests] Move stop_node and start_node methods to BitcoinTestFramework (John Newbery)\nf1fe536 [tests] fix flake8 warnings in test_framework.py and util.py (John Newbery)\n37065d2 [tests] remove unused imports from utils.py (John Newbery)\n\nTree-SHA512: 461db412c57c4d0030e27fe3f78f17bcaf00b966f319a9e613460cca897508ff70a29db7138133fe1be8d447dad6702ba2778f9eddfe929016e560d71c20b09f",
      "tree": {
        "sha": "49e229ac529dc37586b989991243775b7d0d2e03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/49e229ac529dc37586b989991243775b7d0d2e03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65cc7aacfbfc7b747926375280a1d839e88d576b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZVR7hAAoJENLqSFDnUoslUMMP/1Y7lyVTf55WdKgq3rZd3Ies\nLIotHAD5+H2DOVZ292nLEtzAq8zkG7jy2sIas8WyJLwtl4hbfL/zz4zpZtM/Njsv\nxyqO2AhSm1LreEE1VQVbLTrJFuHZaD5ls5tMcO2PccucxIIgxRRIwpVn2GatRxZW\nbm9yA8r6XTvq42DYbkmkOpyE5cEb+9hig+xoSsTH3preTHjtRURzeWVt8q1XdeWn\n86740gIcpW36ucCJQEZ5qyubATyrZ4Al7F/Uo4OCCWrxwc4e4olzchGDyVooyqq+\nVV6r54VfZoi7SiwbBlq4tcyW9kK+8VHWyUrh0At54JWokNrI2jn0k2atAv0u4sOH\nkQi8C5tyJUx6wCFEXrBPGIu0QSlzfBAITRPM72Grd/g4iZfADFq6qdOnCO/AhlqC\nD/YnftT5kjFW0wYWEvPELE+ClFFLkmoyIEua9ivLqgsjfzJBVym3JEag9SQ3gzcg\n+mTUaXK5rcF77kEquWBd6uqBLGdvE5cqQl4uobgkBOiarRgd/3KKoZFAc9eOc2wo\nLkE3F5sG0BfN6ibho7TW+/1ZRYLXAqSxZcwzCSfKwcToAyhQhUOUeA9hykgQC4eR\n4LX4SJYv1B8spgnnUAvg385IsNqwERu+IunYCsFLJLBWPm9oTdZWKbEJSibhgNHB\nb2lfv/B1ET+2bbjrLrGf\n=Lu/d\n-----END PGP SIGNATURE-----",
        "payload": "tree 49e229ac529dc37586b989991243775b7d0d2e03\nparent 4c72cc33ebcc4267e68a73ad04b7f88570e990fb\nparent 5ba83c1d434be508064cf039d73f215f0b199c2d\nauthor MarcoFalke <falke.marco@gmail.com> 1498750639 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1498750689 +0200\n\nMerge #10556: Move stop/start functions from utils.py into BitcoinTestFramework\n\n5ba83c1 [tests] fix nits. (John Newbery)\n05b8c08 [tests] reorganize utils.py module (code move only) (John Newbery)\n0d473c5 [tests] move mocktime property and functions to BitcoinTestFramework (John Newbery)\ncad967a [tests] Move stop_node and start_node methods to BitcoinTestFramework (John Newbery)\nf1fe536 [tests] fix flake8 warnings in test_framework.py and util.py (John Newbery)\n37065d2 [tests] remove unused imports from utils.py (John Newbery)\n\nTree-SHA512: 461db412c57c4d0030e27fe3f78f17bcaf00b966f319a9e613460cca897508ff70a29db7138133fe1be8d447dad6702ba2778f9eddfe929016e560d71c20b09f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65cc7aacfbfc7b747926375280a1d839e88d576b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65cc7aacfbfc7b747926375280a1d839e88d576b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65cc7aacfbfc7b747926375280a1d839e88d576b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c72cc33ebcc4267e68a73ad04b7f88570e990fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c72cc33ebcc4267e68a73ad04b7f88570e990fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c72cc33ebcc4267e68a73ad04b7f88570e990fb"
      },
      {
        "sha": "5ba83c1d434be508064cf039d73f215f0b199c2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ba83c1d434be508064cf039d73f215f0b199c2d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ba83c1d434be508064cf039d73f215f0b199c2d"
      }
    ],
    "stats": {
      "total": 874,
      "additions": 421,
      "deletions": 453
    },
    "files": [
      {
        "sha": "f00232c9ffe0398f4456b4881c48144873f5d336",
        "filename": "test/functional/bip9-softforks.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65cc7aacfbfc7b747926375280a1d839e88d576b/test/functional/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65cc7aacfbfc7b747926375280a1d839e88d576b/test/functional/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip9-softforks.py?ref=65cc7aacfbfc7b747926375280a1d839e88d576b",
        "patch": "@@ -15,16 +15,17 @@\n test that enforcement has not triggered (which triggers ACTIVE)\n test that enforcement has triggered\n \"\"\"\n+from io import BytesIO\n+import shutil\n+import time\n+import itertools\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n from test_framework.mininode import CTransaction, NetworkThread\n from test_framework.blocktools import create_coinbase, create_block\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import CScript, OP_1NEGATE, OP_CHECKSEQUENCEVERIFY, OP_DROP\n-from io import BytesIO\n-import time\n-import itertools\n \n class BIP9SoftForksTest(ComparisonTestFramework):\n "
      },
      {
        "sha": "a7034e6bcdbab5f2d743cfaab9cbfefb9a570840",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65cc7aacfbfc7b747926375280a1d839e88d576b/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65cc7aacfbfc7b747926375280a1d839e88d576b/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=65cc7aacfbfc7b747926375280a1d839e88d576b",
        "patch": "@@ -21,15 +21,13 @@\n import http.client\n import subprocess\n \n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import (BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT)\n from test_framework.util import (\n     assert_equal,\n     assert_raises,\n     assert_raises_jsonrpc,\n     assert_is_hex_string,\n     assert_is_hash_string,\n-    bitcoind_processes,\n-    BITCOIND_PROC_WAIT_TIMEOUT,\n )\n \n \n@@ -141,13 +139,13 @@ def _test_stopatheight(self):\n         self.nodes[0].generate(6)\n         assert_equal(self.nodes[0].getblockcount(), 206)\n         self.log.debug('Node should not stop at this height')\n-        assert_raises(subprocess.TimeoutExpired, lambda: bitcoind_processes[0].wait(timeout=3))\n+        assert_raises(subprocess.TimeoutExpired, lambda: self.bitcoind_processes[0].wait(timeout=3))\n         try:\n             self.nodes[0].generate(1)\n         except (ConnectionError, http.client.BadStatusLine):\n             pass  # The node already shut down before response\n         self.log.debug('Node should stop at this height...')\n-        bitcoind_processes[0].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+        self.bitcoind_processes[0].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n         self.nodes[0] = self.start_node(0, self.options.tmpdir)\n         assert_equal(self.nodes[0].getblockcount(), 207)\n "
      },
      {
        "sha": "9237f0924012b1b1952037d4aab9475f16f45cf3",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65cc7aacfbfc7b747926375280a1d839e88d576b/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65cc7aacfbfc7b747926375280a1d839e88d576b/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=65cc7aacfbfc7b747926375280a1d839e88d576b",
        "patch": "@@ -42,7 +42,7 @@ def setup_network(self, split=False):\n \n         # Encrypt wallet for test_locked_wallet_fails test\n         self.nodes[1].encryptwallet(WALLET_PASSPHRASE)\n-        bitcoind_processes[1].wait()\n+        self.bitcoind_processes[1].wait()\n         self.nodes[1] = self.start_node(1, self.options.tmpdir, extra_args[1])\n         self.nodes[1].walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n "
      },
      {
        "sha": "6f877f8362fe06d9b8c8b9950cd2c1d11a0fc4a3",
        "filename": "test/functional/dbcrash.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65cc7aacfbfc7b747926375280a1d839e88d576b/test/functional/dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65cc7aacfbfc7b747926375280a1d839e88d576b/test/functional/dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/dbcrash.py?ref=65cc7aacfbfc7b747926375280a1d839e88d576b",
        "patch": "@@ -88,7 +88,7 @@ def restart_node(self, node_index, expected_tip):\n                 # An exception here should mean the node is about to crash.\n                 # If bitcoind exits, then try again.  wait_for_node_exit()\n                 # should raise an exception if bitcoind doesn't exit.\n-                wait_for_node_exit(node_index, timeout=10)\n+                self.wait_for_node_exit(node_index, timeout=10)\n             self.crashed_on_restart += 1\n             time.sleep(1)\n \n@@ -140,7 +140,7 @@ def sync_node3blocks(self, block_hashes):\n                 if not self.submit_block_catch_error(i, block):\n                     # TODO: more carefully check that the crash is due to -dbcrashratio\n                     # (change the exit code perhaps, and check that here?)\n-                    wait_for_node_exit(i, timeout=30)\n+                    self.wait_for_node_exit(i, timeout=30)\n                     self.log.debug(\"Restarting node %d after block hash %s\", i, block_hash)\n                     nodei_utxo_hash = self.restart_node(i, block_hash)\n                     assert nodei_utxo_hash is not None"
      },
      {
        "sha": "0baab6d01cf3cbb5c4697a6059cb814dce309541",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65cc7aacfbfc7b747926375280a1d839e88d576b/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65cc7aacfbfc7b747926375280a1d839e88d576b/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=65cc7aacfbfc7b747926375280a1d839e88d576b",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the fundrawtransaction RPC.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT\n from test_framework.util import *\n \n \n@@ -452,7 +452,7 @@ def run_test(self):\n         self.stop_node(2)\n         self.stop_node(3)\n         self.nodes[1].encryptwallet(\"test\")\n-        bitcoind_processes[1].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+        self.bitcoind_processes[1].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n \n         self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n         # This test is not meant to test fee estimation and we'd like"
      },
      {
        "sha": "e8be559918d52ae8449aec4ef1535c6b01c3bc3d",
        "filename": "test/functional/keypool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65cc7aacfbfc7b747926375280a1d839e88d576b/test/functional/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65cc7aacfbfc7b747926375280a1d839e88d576b/test/functional/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool.py?ref=65cc7aacfbfc7b747926375280a1d839e88d576b",
        "patch": "@@ -18,7 +18,7 @@ def run_test(self):\n         \n         # Encrypt wallet and wait to terminate\n         nodes[0].encryptwallet('test')\n-        bitcoind_processes[0].wait()\n+        self.bitcoind_processes[0].wait()\n         # Restart node 0\n         nodes[0] = self.start_node(0, self.options.tmpdir)\n         # Keep creating keys"
      },
      {
        "sha": "f75a8e29cc7a0b76e4c38451f2b53b16f1faa210",
        "filename": "test/functional/listtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65cc7aacfbfc7b747926375280a1d839e88d576b/test/functional/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65cc7aacfbfc7b747926375280a1d839e88d576b/test/functional/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listtransactions.py?ref=65cc7aacfbfc7b747926375280a1d839e88d576b",
        "patch": "@@ -23,7 +23,7 @@ def __init__(self):\n \n     def setup_nodes(self):\n         #This test requires mocktime\n-        enable_mocktime()\n+        self.enable_mocktime()\n         self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n \n     def run_test(self):"
      },
      {
        "sha": "19d99c9c9e9750241da3a46c59bebb9f21eae28f",
        "filename": "test/functional/receivedby.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65cc7aacfbfc7b747926375280a1d839e88d576b/test/functional/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65cc7aacfbfc7b747926375280a1d839e88d576b/test/functional/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/receivedby.py?ref=65cc7aacfbfc7b747926375280a1d839e88d576b",
        "patch": "@@ -31,7 +31,7 @@ def __init__(self):\n \n     def setup_nodes(self):\n         #This test requires mocktime\n-        enable_mocktime()\n+        self.enable_mocktime()\n         self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n \n     def run_test(self):"
      },
      {
        "sha": "951685aa7606a16c089c4280d0b221e836902774",
        "filename": "test/functional/rpcbind_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65cc7aacfbfc7b747926375280a1d839e88d576b/test/functional/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65cc7aacfbfc7b747926375280a1d839e88d576b/test/functional/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcbind_test.py?ref=65cc7aacfbfc7b747926375280a1d839e88d576b",
        "patch": "@@ -37,7 +37,7 @@ def run_bind_test(self, allow_ips, connect_to, addresses, expected):\n             base_args += ['-rpcallowip=' + x for x in allow_ips]\n         binds = ['-rpcbind='+addr for addr in addresses]\n         self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, [base_args + binds], connect_to)\n-        pid = bitcoind_processes[0].pid\n+        pid = self.bitcoind_processes[0].pid\n         assert_equal(set(get_bind_addrs(pid)), set(expected))\n         self.stop_nodes()\n "
      },
      {
        "sha": "8d698a73276a1eb38f4963fb67e4b5d0fb71d6f5",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 151,
        "deletions": 44,
        "changes": 195,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65cc7aacfbfc7b747926375280a1d839e88d576b/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65cc7aacfbfc7b747926375280a1d839e88d576b/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=65cc7aacfbfc7b747926375280a1d839e88d576b",
        "patch": "@@ -5,7 +5,9 @@\n \"\"\"Base class for RPC testing.\"\"\"\n \n from collections import deque\n+import errno\n from enum import Enum\n+import http.client\n import logging\n import optparse\n import os\n@@ -14,34 +16,27 @@\n import sys\n import tempfile\n import time\n+import traceback\n \n+from .authproxy import JSONRPCException\n+from . import coverage\n from .util import (\n-    PortSeed,\n     MAX_NODES,\n-    bitcoind_processes,\n+    PortSeed,\n+    assert_equal,\n     check_json_precision,\n     connect_nodes_bi,\n-    disable_mocktime,\n     disconnect_nodes,\n-    enable_coverage,\n-    enable_mocktime,\n-    get_mocktime,\n     get_rpc_proxy,\n     initialize_datadir,\n     get_datadir_path,\n     log_filename,\n     p2p_port,\n     rpc_url,\n     set_node_times,\n-    _start_node,\n-    _start_nodes,\n-    _stop_node,\n-    _stop_nodes,\n     sync_blocks,\n     sync_mempools,\n-    wait_for_bitcoind_start,\n )\n-from .authproxy import JSONRPCException\n \n class TestStatus(Enum):\n     PASSED = 1\n@@ -52,6 +47,8 @@ class TestStatus(Enum):\n TEST_EXIT_FAILED = 1\n TEST_EXIT_SKIPPED = 77\n \n+BITCOIND_PROC_WAIT_TIMEOUT = 60\n+\n class BitcoinTestFramework(object):\n     \"\"\"Base class for a bitcoin test script.\n \n@@ -71,13 +68,15 @@ class BitcoinTestFramework(object):\n     def __init__(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n-        self.nodes = None\n+        self.nodes = []\n+        self.bitcoind_processes = {}\n+        self.mocktime = 0\n \n     def add_options(self, parser):\n         pass\n \n     def setup_chain(self):\n-        self.log.info(\"Initializing test directory \"+self.options.tmpdir)\n+        self.log.info(\"Initializing test directory \" + self.options.tmpdir)\n         if self.setup_clean_chain:\n             self._initialize_chain_clean(self.options.tmpdir, self.num_nodes)\n         else:\n@@ -97,7 +96,7 @@ def setup_nodes(self):\n         extra_args = None\n         if hasattr(self, \"extra_args\"):\n             extra_args = self.extra_args\n-        self.nodes = _start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n \n     def run_test(self):\n         raise NotImplementedError\n@@ -111,9 +110,9 @@ def main(self):\n                           help=\"Leave bitcoinds and test.* datadir on exit or error\")\n         parser.add_option(\"--noshutdown\", dest=\"noshutdown\", default=False, action=\"store_true\",\n                           help=\"Don't stop bitcoinds after the test execution\")\n-        parser.add_option(\"--srcdir\", dest=\"srcdir\", default=os.path.normpath(os.path.dirname(os.path.realpath(__file__))+\"/../../../src\"),\n+        parser.add_option(\"--srcdir\", dest=\"srcdir\", default=os.path.normpath(os.path.dirname(os.path.realpath(__file__)) + \"/../../../src\"),\n                           help=\"Source directory containing bitcoind/bitcoin-cli (default: %default)\")\n-        parser.add_option(\"--cachedir\", dest=\"cachedir\", default=os.path.normpath(os.path.dirname(os.path.realpath(__file__))+\"/../../cache\"),\n+        parser.add_option(\"--cachedir\", dest=\"cachedir\", default=os.path.normpath(os.path.dirname(os.path.realpath(__file__)) + \"/../../cache\"),\n                           help=\"Directory for caching pregenerated datadirs\")\n         parser.add_option(\"--tmpdir\", dest=\"tmpdir\", help=\"Root directory for datadirs\")\n         parser.add_option(\"-l\", \"--loglevel\", dest=\"loglevel\", default=\"INFO\",\n@@ -129,12 +128,9 @@ def main(self):\n         self.add_options(parser)\n         (self.options, self.args) = parser.parse_args()\n \n-        if self.options.coveragedir:\n-            enable_coverage(self.options.coveragedir)\n-\n         PortSeed.n = self.options.port_seed\n \n-        os.environ['PATH'] = self.options.srcdir+\":\"+self.options.srcdir+\"/qt:\"+os.environ['PATH']\n+        os.environ['PATH'] = self.options.srcdir + \":\" + self.options.srcdir + \"/qt:\" + os.environ['PATH']\n \n         check_json_precision()\n \n@@ -188,7 +184,7 @@ def main(self):\n                 for fn in filenames:\n                     try:\n                         with open(fn, 'r') as f:\n-                            print(\"From\" , fn, \":\")\n+                            print(\"From\", fn, \":\")\n                             print(\"\".join(deque(f, MAX_LINES_TO_PRINT)))\n                     except OSError:\n                         print(\"Opening file %s failed.\" % fn)\n@@ -208,16 +204,88 @@ def main(self):\n     # Public helper methods. These can be accessed by the subclass test scripts.\n \n     def start_node(self, i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n-        return _start_node(i, dirname, extra_args, rpchost, timewait, binary, stderr)\n+        \"\"\"Start a bitcoind and return RPC connection to it\"\"\"\n+\n+        datadir = os.path.join(dirname, \"node\" + str(i))\n+        if binary is None:\n+            binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n+        args = [binary, \"-datadir=\" + datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(self.mocktime), \"-uacomment=testnode%d\" % i]\n+        if extra_args is not None:\n+            args.extend(extra_args)\n+        self.bitcoind_processes[i] = subprocess.Popen(args, stderr=stderr)\n+        self.log.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n+        self._wait_for_bitcoind_start(self.bitcoind_processes[i], datadir, i, rpchost)\n+        self.log.debug(\"initialize_chain: RPC successfully started\")\n+        proxy = get_rpc_proxy(rpc_url(datadir, i, rpchost), i, timeout=timewait)\n+\n+        if self.options.coveragedir:\n+            coverage.write_all_rpc_commands(self.options.coveragedir, proxy)\n+\n+        return proxy\n \n     def start_nodes(self, num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n-        return _start_nodes(num_nodes, dirname, extra_args, rpchost, timewait, binary)\n+        \"\"\"Start multiple bitcoinds, return RPC connections to them\"\"\"\n+\n+        if extra_args is None:\n+            extra_args = [None] * num_nodes\n+        if binary is None:\n+            binary = [None] * num_nodes\n+        assert_equal(len(extra_args), num_nodes)\n+        assert_equal(len(binary), num_nodes)\n+        rpcs = []\n+        try:\n+            for i in range(num_nodes):\n+                rpcs.append(self.start_node(i, dirname, extra_args[i], rpchost, timewait=timewait, binary=binary[i]))\n+        except:\n+            # If one node failed to start, stop the others\n+            # TODO: abusing self.nodes in this way is a little hacky.\n+            # Eventually we should do a better job of tracking nodes\n+            self.nodes.extend(rpcs)\n+            self.stop_nodes()\n+            self.nodes = []\n+            raise\n+        return rpcs\n+\n+    def stop_node(self, i):\n+        \"\"\"Stop a bitcoind test node\"\"\"\n \n-    def stop_node(self, num_node):\n-        _stop_node(self.nodes[num_node], num_node)\n+        self.log.debug(\"Stopping node %d\" % i)\n+        try:\n+            self.nodes[i].stop()\n+        except http.client.CannotSendRequest as e:\n+            self.log.exception(\"Unable to stop node\")\n+        return_code = self.bitcoind_processes[i].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+        del self.bitcoind_processes[i]\n+        assert_equal(return_code, 0)\n \n     def stop_nodes(self):\n-        _stop_nodes(self.nodes)\n+        \"\"\"Stop multiple bitcoind test nodes\"\"\"\n+\n+        for i in range(len(self.nodes)):\n+            self.stop_node(i)\n+        assert not self.bitcoind_processes.values()  # All connections must be gone now\n+\n+    def assert_start_raises_init_error(self, i, dirname, extra_args=None, expected_msg=None):\n+        with tempfile.SpooledTemporaryFile(max_size=2**16) as log_stderr:\n+            try:\n+                self.start_node(i, dirname, extra_args, stderr=log_stderr)\n+                self.stop_node(i)\n+            except Exception as e:\n+                assert 'bitcoind exited' in str(e)  # node must have shutdown\n+                if expected_msg is not None:\n+                    log_stderr.seek(0)\n+                    stderr = log_stderr.read().decode('utf-8')\n+                    if expected_msg not in stderr:\n+                        raise AssertionError(\"Expected error \\\"\" + expected_msg + \"\\\" not found in:\\n\" + stderr)\n+            else:\n+                if expected_msg is None:\n+                    assert_msg = \"bitcoind should have exited with an error\"\n+                else:\n+                    assert_msg = \"bitcoind should have exited with expected error \" + expected_msg\n+                raise AssertionError(assert_msg)\n+\n+    def wait_for_node_exit(self, i, timeout):\n+        self.bitcoind_processes[i].wait(timeout)\n \n     def split_network(self):\n         \"\"\"\n@@ -242,6 +310,21 @@ def sync_all(self, node_groups=None):\n             sync_blocks(group)\n             sync_mempools(group)\n \n+    def enable_mocktime(self):\n+        \"\"\"Enable mocktime for the script.\n+\n+        mocktime may be needed for scripts that use the cached version of the\n+        blockchain.  If the cached version of the blockchain is used without\n+        mocktime then the mempools will not sync due to IBD.\n+\n+        For backwared compatibility of the python scripts with previous\n+        versions of the cache, this helper function sets mocktime to Jan 1,\n+        2014 + (201 * 10 * 60)\"\"\"\n+        self.mocktime = 1388534400 + (201 * 10 * 60)\n+\n+    def disable_mocktime(self):\n+        self.mocktime = 0\n+\n     # Private helper methods. These should not be accessed by the subclass test scripts.\n \n     def _start_logging(self):\n@@ -257,7 +340,7 @@ def _start_logging(self):\n         ll = int(self.options.loglevel) if self.options.loglevel.isdigit() else self.options.loglevel.upper()\n         ch.setLevel(ll)\n         # Format logs the same as bitcoind's debug.log with microprecision (so log files can be concatenated and sorted)\n-        formatter = logging.Formatter(fmt = '%(asctime)s.%(msecs)03d000 %(name)s (%(levelname)s): %(message)s', datefmt='%Y-%m-%d %H:%M:%S')\n+        formatter = logging.Formatter(fmt='%(asctime)s.%(msecs)03d000 %(name)s (%(levelname)s): %(message)s', datefmt='%Y-%m-%d %H:%M:%S')\n         formatter.converter = time.gmtime\n         fh.setFormatter(formatter)\n         ch.setFormatter(formatter)\n@@ -299,9 +382,9 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n                 args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-datadir=\" + datadir, \"-discover=0\"]\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n-                bitcoind_processes[i] = subprocess.Popen(args)\n+                self.bitcoind_processes[i] = subprocess.Popen(args)\n                 self.log.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n-                wait_for_bitcoind_start(bitcoind_processes[i], datadir, i)\n+                self._wait_for_bitcoind_start(self.bitcoind_processes[i], datadir, i)\n                 self.log.debug(\"initialize_chain: RPC successfully started\")\n \n             self.nodes = []\n@@ -319,8 +402,8 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n             #\n             # blocks are created with timestamps 10 minutes apart\n             # starting from 2010 minutes in the past\n-            enable_mocktime()\n-            block_time = get_mocktime() - (201 * 10 * 60)\n+            self.enable_mocktime()\n+            block_time = self.mocktime - (201 * 10 * 60)\n             for i in range(2):\n                 for peer in range(4):\n                     for j in range(25):\n@@ -333,7 +416,7 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n             # Shut them down, and clean up cache directories:\n             self.stop_nodes()\n             self.nodes = []\n-            disable_mocktime()\n+            self.disable_mocktime()\n             for i in range(MAX_NODES):\n                 os.remove(log_filename(cachedir, i, \"debug.log\"))\n                 os.remove(log_filename(cachedir, i, \"db.log\"))\n@@ -354,18 +437,37 @@ def _initialize_chain_clean(self, test_dir, num_nodes):\n         for i in range(num_nodes):\n             initialize_datadir(test_dir, i)\n \n-# Test framework for doing p2p comparison testing, which sets up some bitcoind\n-# binaries:\n-# 1 binary: test binary\n-# 2 binaries: 1 test binary, 1 ref binary\n-# n>2 binaries: 1 test binary, n-1 ref binaries\n-\n-class SkipTest(Exception):\n-    \"\"\"This exception is raised to skip a test\"\"\"\n-    def __init__(self, message):\n-        self.message = message\n+    def _wait_for_bitcoind_start(self, process, datadir, i, rpchost=None):\n+        \"\"\"Wait for bitcoind to start.\n+\n+        This means that RPC is accessible and fully initialized.\n+        Raise an exception if bitcoind exits during initialization.\"\"\"\n+        while True:\n+            if process.poll() is not None:\n+                raise Exception('bitcoind exited with status %i during initialization' % process.returncode)\n+            try:\n+                # Check if .cookie file to be created\n+                rpc = get_rpc_proxy(rpc_url(datadir, i, rpchost), i, coveragedir=self.options.coveragedir)\n+                rpc.getblockcount()\n+                break  # break out of loop on success\n+            except IOError as e:\n+                if e.errno != errno.ECONNREFUSED:  # Port not yet open?\n+                    raise  # unknown IO error\n+            except JSONRPCException as e:  # Initialization phase\n+                if e.error['code'] != -28:  # RPC in warmup?\n+                    raise  # unknown JSON RPC exception\n+            except ValueError as e:  # cookie file not found and no rpcuser or rpcassword. bitcoind still starting\n+                if \"No RPC credentials\" not in str(e):\n+                    raise\n+            time.sleep(0.25)\n \n class ComparisonTestFramework(BitcoinTestFramework):\n+    \"\"\"Test framework for doing p2p comparison testing\n+\n+    Sets up some bitcoind binaries:\n+    - 1 binary: test binary\n+    - 2 binaries: 1 test binary, 1 ref binary\n+    - n>2 binaries: 1 test binary, n-1 ref binaries\"\"\"\n \n     def __init__(self):\n         super().__init__()\n@@ -387,4 +489,9 @@ def setup_network(self):\n         self.nodes = self.start_nodes(\n             self.num_nodes, self.options.tmpdir, extra_args,\n             binary=[self.options.testbinary] +\n-            [self.options.refbinary]*(self.num_nodes-1))\n+            [self.options.refbinary] * (self.num_nodes - 1))\n+\n+class SkipTest(Exception):\n+    \"\"\"This exception is raised to skip a test\"\"\"\n+    def __init__(self, message):\n+        self.message = message"
      },
      {
        "sha": "3c918b48fbd87554f46397a4d8cb05e39edd02e6",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 247,
        "deletions": 383,
        "changes": 630,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65cc7aacfbfc7b747926375280a1d839e88d576b/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65cc7aacfbfc7b747926375280a1d839e88d576b/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=65cc7aacfbfc7b747926375280a1d839e88d576b",
        "patch": "@@ -4,72 +4,174 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Helpful routines for regression testing.\"\"\"\n \n-import os\n-import sys\n-\n-from binascii import hexlify, unhexlify\n from base64 import b64encode\n+from binascii import hexlify, unhexlify\n from decimal import Decimal, ROUND_DOWN\n import json\n-import http.client\n+import logging\n+import os\n import random\n-import shutil\n-import subprocess\n-import tempfile\n-import time\n import re\n-import errno\n-import logging\n+import time\n \n from . import coverage\n from .authproxy import AuthServiceProxy, JSONRPCException\n \n-COVERAGE_DIR = None\n-\n logger = logging.getLogger(\"TestFramework.utils\")\n \n+# Assert functions\n+##################\n+\n+def assert_fee_amount(fee, tx_size, fee_per_kB):\n+    \"\"\"Assert the fee was in range\"\"\"\n+    target_fee = tx_size * fee_per_kB / 1000\n+    if fee < target_fee:\n+        raise AssertionError(\"Fee of %s BTC too low! (Should be %s BTC)\" % (str(fee), str(target_fee)))\n+    # allow the wallet's estimation to be at most 2 bytes off\n+    if fee > (tx_size + 2) * fee_per_kB / 1000:\n+        raise AssertionError(\"Fee of %s BTC too high! (Should be %s BTC)\" % (str(fee), str(target_fee)))\n+\n+def assert_equal(thing1, thing2, *args):\n+    if thing1 != thing2 or any(thing1 != arg for arg in args):\n+        raise AssertionError(\"not(%s)\" % \" == \".join(str(arg) for arg in (thing1, thing2) + args))\n+\n+def assert_greater_than(thing1, thing2):\n+    if thing1 <= thing2:\n+        raise AssertionError(\"%s <= %s\" % (str(thing1), str(thing2)))\n+\n+def assert_greater_than_or_equal(thing1, thing2):\n+    if thing1 < thing2:\n+        raise AssertionError(\"%s < %s\" % (str(thing1), str(thing2)))\n+\n+def assert_raises(exc, fun, *args, **kwds):\n+    assert_raises_message(exc, None, fun, *args, **kwds)\n+\n+def assert_raises_message(exc, message, fun, *args, **kwds):\n+    try:\n+        fun(*args, **kwds)\n+    except exc as e:\n+        if message is not None and message not in e.error['message']:\n+            raise AssertionError(\"Expected substring not found:\" + e.error['message'])\n+    except Exception as e:\n+        raise AssertionError(\"Unexpected exception raised: \" + type(e).__name__)\n+    else:\n+        raise AssertionError(\"No exception raised\")\n+\n+def assert_raises_jsonrpc(code, message, fun, *args, **kwds):\n+    \"\"\"Run an RPC and verify that a specific JSONRPC exception code and message is raised.\n+\n+    Calls function `fun` with arguments `args` and `kwds`. Catches a JSONRPCException\n+    and verifies that the error code and message are as expected. Throws AssertionError if\n+    no JSONRPCException was returned or if the error code/message are not as expected.\n+\n+    Args:\n+        code (int), optional: the error code returned by the RPC call (defined\n+            in src/rpc/protocol.h). Set to None if checking the error code is not required.\n+        message (string), optional: [a substring of] the error string returned by the\n+            RPC call. Set to None if checking the error string is not required\n+        fun (function): the function to call. This should be the name of an RPC.\n+        args*: positional arguments for the function.\n+        kwds**: named arguments for the function.\n+    \"\"\"\n+    try:\n+        fun(*args, **kwds)\n+    except JSONRPCException as e:\n+        # JSONRPCException was thrown as expected. Check the code and message values are correct.\n+        if (code is not None) and (code != e.error[\"code\"]):\n+            raise AssertionError(\"Unexpected JSONRPC error code %i\" % e.error[\"code\"])\n+        if (message is not None) and (message not in e.error['message']):\n+            raise AssertionError(\"Expected substring not found:\" + e.error['message'])\n+    except Exception as e:\n+        raise AssertionError(\"Unexpected exception raised: \" + type(e).__name__)\n+    else:\n+        raise AssertionError(\"No exception raised\")\n+\n+def assert_is_hex_string(string):\n+    try:\n+        int(string, 16)\n+    except Exception as e:\n+        raise AssertionError(\n+            \"Couldn't interpret %r as hexadecimal; raised: %s\" % (string, e))\n+\n+def assert_is_hash_string(string, length=64):\n+    if not isinstance(string, str):\n+        raise AssertionError(\"Expected a string, got type %r\" % type(string))\n+    elif length and len(string) != length:\n+        raise AssertionError(\n+            \"String of length %d expected; got %d\" % (length, len(string)))\n+    elif not re.match('[abcdef0-9]+$', string):\n+        raise AssertionError(\n+            \"String %r contains invalid characters for a hash.\" % string)\n+\n+def assert_array_result(object_array, to_match, expected, should_not_find=False):\n+    \"\"\"\n+        Pass in array of JSON objects, a dictionary with key/value pairs\n+        to match against, and another dictionary with expected key/value\n+        pairs.\n+        If the should_not_find flag is true, to_match should not be found\n+        in object_array\n+        \"\"\"\n+    if should_not_find:\n+        assert_equal(expected, {})\n+    num_matched = 0\n+    for item in object_array:\n+        all_match = True\n+        for key, value in to_match.items():\n+            if item[key] != value:\n+                all_match = False\n+        if not all_match:\n+            continue\n+        elif should_not_find:\n+            num_matched = num_matched + 1\n+        for key, value in expected.items():\n+            if item[key] != value:\n+                raise AssertionError(\"%s : expected %s=%s\" % (str(item), str(key), str(value)))\n+            num_matched = num_matched + 1\n+    if num_matched == 0 and not should_not_find:\n+        raise AssertionError(\"No objects matched %s\" % (str(to_match)))\n+    if num_matched > 0 and should_not_find:\n+        raise AssertionError(\"Objects were found %s\" % (str(to_match)))\n+\n+# Utility functions\n+###################\n+\n+def check_json_precision():\n+    \"\"\"Make sure json library being used does not lose precision converting BTC values\"\"\"\n+    n = Decimal(\"20000000.00000003\")\n+    satoshis = int(json.loads(json.dumps(float(n))) * 1.0e8)\n+    if satoshis != 2000000000000003:\n+        raise RuntimeError(\"JSON encode/decode loses precision\")\n+\n+def count_bytes(hex_string):\n+    return len(bytearray.fromhex(hex_string))\n+\n+def bytes_to_hex_str(byte_str):\n+    return hexlify(byte_str).decode('ascii')\n+\n+def hex_str_to_bytes(hex_str):\n+    return unhexlify(hex_str.encode('ascii'))\n+\n+def str_to_b64str(string):\n+    return b64encode(string.encode('utf-8')).decode('ascii')\n+\n+def satoshi_round(amount):\n+    return Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n+\n+# RPC/P2P connection constants and functions\n+############################################\n+\n # The maximum number of nodes a single test can spawn\n MAX_NODES = 8\n # Don't assign rpc or p2p ports lower than this\n PORT_MIN = 11000\n # The number of ports to \"reserve\" for p2p and rpc, each\n PORT_RANGE = 5000\n \n-BITCOIND_PROC_WAIT_TIMEOUT = 60\n-\n-\n class PortSeed:\n     # Must be initialized with a unique integer for each process\n     n = None\n \n-#Set Mocktime default to OFF.\n-#MOCKTIME is only needed for scripts that use the\n-#cached version of the blockchain.  If the cached\n-#version of the blockchain is used without MOCKTIME\n-#then the mempools will not sync due to IBD.\n-MOCKTIME = 0\n-\n-def enable_mocktime():\n-    #For backwared compatibility of the python scripts\n-    #with previous versions of the cache, set MOCKTIME \n-    #to Jan 1, 2014 + (201 * 10 * 60)\n-    global MOCKTIME\n-    MOCKTIME = 1388534400 + (201 * 10 * 60)\n-\n-def disable_mocktime():\n-    global MOCKTIME\n-    MOCKTIME = 0\n-\n-def get_mocktime():\n-    return MOCKTIME\n-\n-def enable_coverage(dirname):\n-    \"\"\"Maintain a log of which RPC calls are made during testing.\"\"\"\n-    global COVERAGE_DIR\n-    COVERAGE_DIR = dirname\n-\n-\n-def get_rpc_proxy(url, node_number, timeout=None):\n+def get_rpc_proxy(url, node_number, timeout=None, coveragedir=None):\n     \"\"\"\n     Args:\n         url (str): URL of the RPC server to call\n@@ -90,106 +192,45 @@ def get_rpc_proxy(url, node_number, timeout=None):\n     proxy.url = url  # store URL on proxy for info\n \n     coverage_logfile = coverage.get_filename(\n-        COVERAGE_DIR, node_number) if COVERAGE_DIR else None\n+        coveragedir, node_number) if coveragedir else None\n \n     return coverage.AuthServiceProxyWrapper(proxy, coverage_logfile)\n \n-\n def p2p_port(n):\n     assert(n <= MAX_NODES)\n     return PORT_MIN + n + (MAX_NODES * PortSeed.n) % (PORT_RANGE - 1 - MAX_NODES)\n \n def rpc_port(n):\n     return PORT_MIN + PORT_RANGE + n + (MAX_NODES * PortSeed.n) % (PORT_RANGE - 1 - MAX_NODES)\n \n-def check_json_precision():\n-    \"\"\"Make sure json library being used does not lose precision converting BTC values\"\"\"\n-    n = Decimal(\"20000000.00000003\")\n-    satoshis = int(json.loads(json.dumps(float(n)))*1.0e8)\n-    if satoshis != 2000000000000003:\n-        raise RuntimeError(\"JSON encode/decode loses precision\")\n-\n-def count_bytes(hex_string):\n-    return len(bytearray.fromhex(hex_string))\n-\n-def bytes_to_hex_str(byte_str):\n-    return hexlify(byte_str).decode('ascii')\n-\n-def hex_str_to_bytes(hex_str):\n-    return unhexlify(hex_str.encode('ascii'))\n-\n-def str_to_b64str(string):\n-    return b64encode(string.encode('utf-8')).decode('ascii')\n-\n-def sync_blocks(rpc_connections, *, wait=1, timeout=60):\n-    \"\"\"\n-    Wait until everybody has the same tip.\n-\n-    sync_blocks needs to be called with an rpc_connections set that has least\n-    one node already synced to the latest, stable tip, otherwise there's a\n-    chance it might return before all nodes are stably synced.\n-    \"\"\"\n-    # Use getblockcount() instead of waitforblockheight() to determine the\n-    # initial max height because the two RPCs look at different internal global\n-    # variables (chainActive vs latestBlock) and the former gets updated\n-    # earlier.\n-    maxheight = max(x.getblockcount() for x in rpc_connections)\n-    start_time = cur_time = time.time()\n-    while cur_time <= start_time + timeout:\n-        tips = [r.waitforblockheight(maxheight, int(wait * 1000)) for r in rpc_connections]\n-        if all(t[\"height\"] == maxheight for t in tips):\n-            if all(t[\"hash\"] == tips[0][\"hash\"] for t in tips):\n-                return\n-            raise AssertionError(\"Block sync failed, mismatched block hashes:{}\".format(\n-                                 \"\".join(\"\\n  {!r}\".format(tip) for tip in tips)))\n-        cur_time = time.time()\n-    raise AssertionError(\"Block sync to height {} timed out:{}\".format(\n-                         maxheight, \"\".join(\"\\n  {!r}\".format(tip) for tip in tips)))\n-\n-def sync_chain(rpc_connections, *, wait=1, timeout=60):\n-    \"\"\"\n-    Wait until everybody has the same best block\n-    \"\"\"\n-    while timeout > 0:\n-        best_hash = [x.getbestblockhash() for x in rpc_connections]\n-        if best_hash == [best_hash[0]]*len(best_hash):\n-            return\n-        time.sleep(wait)\n-        timeout -= wait\n-    raise AssertionError(\"Chain sync failed: Best block hashes don't match\")\n-\n-def sync_mempools(rpc_connections, *, wait=1, timeout=60):\n-    \"\"\"\n-    Wait until everybody has the same transactions in their memory\n-    pools\n-    \"\"\"\n-    while timeout > 0:\n-        pool = set(rpc_connections[0].getrawmempool())\n-        num_match = 1\n-        for i in range(1, len(rpc_connections)):\n-            if set(rpc_connections[i].getrawmempool()) == pool:\n-                num_match = num_match+1\n-        if num_match == len(rpc_connections):\n-            return\n-        time.sleep(wait)\n-        timeout -= wait\n-    raise AssertionError(\"Mempool sync failed\")\n+def rpc_url(datadir, i, rpchost=None):\n+    rpc_u, rpc_p = get_auth_cookie(datadir, i)\n+    host = '127.0.0.1'\n+    port = rpc_port(i)\n+    if rpchost:\n+        parts = rpchost.split(':')\n+        if len(parts) == 2:\n+            host, port = parts\n+        else:\n+            host = rpchost\n+    return \"http://%s:%s@%s:%d\" % (rpc_u, rpc_p, host, int(port))\n \n-bitcoind_processes = {}\n+# Node functions\n+################\n \n def initialize_datadir(dirname, n):\n-    datadir = os.path.join(dirname, \"node\"+str(n))\n+    datadir = os.path.join(dirname, \"node\" + str(n))\n     if not os.path.isdir(datadir):\n         os.makedirs(datadir)\n     with open(os.path.join(datadir, \"bitcoin.conf\"), 'w', encoding='utf8') as f:\n         f.write(\"regtest=1\\n\")\n-        f.write(\"port=\"+str(p2p_port(n))+\"\\n\")\n-        f.write(\"rpcport=\"+str(rpc_port(n))+\"\\n\")\n+        f.write(\"port=\" + str(p2p_port(n)) + \"\\n\")\n+        f.write(\"rpcport=\" + str(rpc_port(n)) + \"\\n\")\n         f.write(\"listenonion=0\\n\")\n     return datadir\n \n def get_datadir_path(dirname, n):\n-    return os.path.join(dirname, \"node\"+str(n))\n+    return os.path.join(dirname, \"node\" + str(n))\n \n def get_auth_cookie(datadir, n):\n     user = None\n@@ -198,10 +239,10 @@ def get_auth_cookie(datadir, n):\n         with open(os.path.join(datadir, \"bitcoin.conf\"), 'r') as f:\n             for line in f:\n                 if line.startswith(\"rpcuser=\"):\n-                    assert user is None # Ensure that there is only one rpcuser line\n+                    assert user is None  # Ensure that there is only one rpcuser line\n                     user = line.split(\"=\")[1].strip(\"\\n\")\n                 if line.startswith(\"rpcpassword=\"):\n-                    assert password is None # Ensure that there is only one rpcpassword line\n+                    assert password is None  # Ensure that there is only one rpcpassword line\n                     password = line.split(\"=\")[1].strip(\"\\n\")\n     if os.path.isfile(os.path.join(datadir, \"regtest\", \".cookie\")):\n         with open(os.path.join(datadir, \"regtest\", \".cookie\"), 'r') as f:\n@@ -213,128 +254,12 @@ def get_auth_cookie(datadir, n):\n         raise ValueError(\"No RPC credentials\")\n     return user, password\n \n-def rpc_url(datadir, i, rpchost=None):\n-    rpc_u, rpc_p = get_auth_cookie(datadir, i)\n-    host = '127.0.0.1'\n-    port = rpc_port(i)\n-    if rpchost:\n-        parts = rpchost.split(':')\n-        if len(parts) == 2:\n-            host, port = parts\n-        else:\n-            host = rpchost\n-    return \"http://%s:%s@%s:%d\" % (rpc_u, rpc_p, host, int(port))\n-\n-def wait_for_bitcoind_start(process, datadir, i, rpchost=None):\n-    '''\n-    Wait for bitcoind to start. This means that RPC is accessible and fully initialized.\n-    Raise an exception if bitcoind exits during initialization.\n-    '''\n-    while True:\n-        if process.poll() is not None:\n-            raise Exception('bitcoind exited with status %i during initialization' % process.returncode)\n-        try:\n-            # Check if .cookie file to be created\n-            rpc = get_rpc_proxy(rpc_url(datadir, i, rpchost), i)\n-            blocks = rpc.getblockcount()\n-            break # break out of loop on success\n-        except IOError as e:\n-            if e.errno != errno.ECONNREFUSED: # Port not yet open?\n-                raise # unknown IO error\n-        except JSONRPCException as e: # Initialization phase\n-            if e.error['code'] != -28: # RPC in warmup?\n-                raise # unknown JSON RPC exception\n-        except ValueError as e: # cookie file not found and no rpcuser or rpcassword. bitcoind still starting\n-            if \"No RPC credentials\" not in str(e):\n-                raise\n-        time.sleep(0.25)\n-\n-def wait_for_node_exit(node_index, timeout):\n-    bitcoind_processes[node_index].wait(timeout)\n-\n-def _start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n-    \"\"\"Start a bitcoind and return RPC connection to it\n-\n-    This function should only be called from within test_framework, not by individual test scripts.\"\"\"\n-\n-    datadir = os.path.join(dirname, \"node\"+str(i))\n-    if binary is None:\n-        binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n-    args = [binary, \"-datadir=\" + datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(get_mocktime()), \"-uacomment=testnode%d\" % i]\n-    if extra_args is not None: args.extend(extra_args)\n-    bitcoind_processes[i] = subprocess.Popen(args, stderr=stderr)\n-    logger.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n-    wait_for_bitcoind_start(bitcoind_processes[i], datadir, i, rpchost)\n-    logger.debug(\"initialize_chain: RPC successfully started\")\n-    proxy = get_rpc_proxy(rpc_url(datadir, i, rpchost), i, timeout=timewait)\n-\n-    if COVERAGE_DIR:\n-        coverage.write_all_rpc_commands(COVERAGE_DIR, proxy)\n-\n-    return proxy\n-\n-def assert_start_raises_init_error(i, dirname, extra_args=None, expected_msg=None):\n-    with tempfile.SpooledTemporaryFile(max_size=2**16) as log_stderr:\n-        try:\n-            node = _start_node(i, dirname, extra_args, stderr=log_stderr)\n-            _stop_node(node, i)\n-        except Exception as e:\n-            assert 'bitcoind exited' in str(e) #node must have shutdown\n-            if expected_msg is not None:\n-                log_stderr.seek(0)\n-                stderr = log_stderr.read().decode('utf-8')\n-                if expected_msg not in stderr:\n-                    raise AssertionError(\"Expected error \\\"\" + expected_msg + \"\\\" not found in:\\n\" + stderr)\n-        else:\n-            if expected_msg is None:\n-                assert_msg = \"bitcoind should have exited with an error\"\n-            else:\n-                assert_msg = \"bitcoind should have exited with expected error \" + expected_msg\n-            raise AssertionError(assert_msg)\n-\n-def _start_nodes(num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n-    \"\"\"Start multiple bitcoinds, return RPC connections to them\n-    \n-    This function should only be called from within test_framework, not by individual test scripts.\"\"\"\n-\n-    if extra_args is None: extra_args = [ None for _ in range(num_nodes) ]\n-    if binary is None: binary = [ None for _ in range(num_nodes) ]\n-    assert_equal(len(extra_args), num_nodes)\n-    assert_equal(len(binary), num_nodes)\n-    rpcs = []\n-    try:\n-        for i in range(num_nodes):\n-            rpcs.append(_start_node(i, dirname, extra_args[i], rpchost, timewait=timewait, binary=binary[i]))\n-    except: # If one node failed to start, stop the others\n-        _stop_nodes(rpcs)\n-        raise\n-    return rpcs\n-\n def log_filename(dirname, n_node, logname):\n-    return os.path.join(dirname, \"node\"+str(n_node), \"regtest\", logname)\n-\n-def _stop_node(node, i):\n-    \"\"\"Stop a bitcoind test node\n-\n-    This function should only be called from within test_framework, not by individual test scripts.\"\"\"\n-\n-    logger.debug(\"Stopping node %d\" % i)\n-    try:\n-        node.stop()\n-    except http.client.CannotSendRequest as e:\n-        logger.exception(\"Unable to stop node\")\n-    return_code = bitcoind_processes[i].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n-    del bitcoind_processes[i]\n-    assert_equal(return_code, 0)\n-\n-def _stop_nodes(nodes):\n-    \"\"\"Stop multiple bitcoind test nodes\n-\n-    This function should only be called from within test_framework, not by individual test scripts.\"\"\"\n+    return os.path.join(dirname, \"node\" + str(n_node), \"regtest\", logname)\n \n-    for i, node in enumerate(nodes):\n-        _stop_node(node, i)\n-    assert not bitcoind_processes.values() # All connections must be gone now\n+def get_bip9_status(node, key):\n+    info = node.getblockchaininfo()\n+    return info['bip9_softforks'][key]\n \n def set_node_times(nodes, t):\n     for node in nodes:\n@@ -352,7 +277,7 @@ def disconnect_nodes(from_connection, node_num):\n         raise AssertionError(\"timed out waiting for disconnect\")\n \n def connect_nodes(from_connection, node_num):\n-    ip_port = \"127.0.0.1:\"+str(p2p_port(node_num))\n+    ip_port = \"127.0.0.1:\" + str(p2p_port(node_num))\n     from_connection.addnode(ip_port, \"onetry\")\n     # poll until version handshake complete to avoid race conditions\n     # with transaction relaying\n@@ -363,6 +288,63 @@ def connect_nodes_bi(nodes, a, b):\n     connect_nodes(nodes[a], b)\n     connect_nodes(nodes[b], a)\n \n+def sync_blocks(rpc_connections, *, wait=1, timeout=60):\n+    \"\"\"\n+    Wait until everybody has the same tip.\n+\n+    sync_blocks needs to be called with an rpc_connections set that has least\n+    one node already synced to the latest, stable tip, otherwise there's a\n+    chance it might return before all nodes are stably synced.\n+    \"\"\"\n+    # Use getblockcount() instead of waitforblockheight() to determine the\n+    # initial max height because the two RPCs look at different internal global\n+    # variables (chainActive vs latestBlock) and the former gets updated\n+    # earlier.\n+    maxheight = max(x.getblockcount() for x in rpc_connections)\n+    start_time = cur_time = time.time()\n+    while cur_time <= start_time + timeout:\n+        tips = [r.waitforblockheight(maxheight, int(wait * 1000)) for r in rpc_connections]\n+        if all(t[\"height\"] == maxheight for t in tips):\n+            if all(t[\"hash\"] == tips[0][\"hash\"] for t in tips):\n+                return\n+            raise AssertionError(\"Block sync failed, mismatched block hashes:{}\".format(\n+                                 \"\".join(\"\\n  {!r}\".format(tip) for tip in tips)))\n+        cur_time = time.time()\n+    raise AssertionError(\"Block sync to height {} timed out:{}\".format(\n+                         maxheight, \"\".join(\"\\n  {!r}\".format(tip) for tip in tips)))\n+\n+def sync_chain(rpc_connections, *, wait=1, timeout=60):\n+    \"\"\"\n+    Wait until everybody has the same best block\n+    \"\"\"\n+    while timeout > 0:\n+        best_hash = [x.getbestblockhash() for x in rpc_connections]\n+        if best_hash == [best_hash[0]] * len(best_hash):\n+            return\n+        time.sleep(wait)\n+        timeout -= wait\n+    raise AssertionError(\"Chain sync failed: Best block hashes don't match\")\n+\n+def sync_mempools(rpc_connections, *, wait=1, timeout=60):\n+    \"\"\"\n+    Wait until everybody has the same transactions in their memory\n+    pools\n+    \"\"\"\n+    while timeout > 0:\n+        pool = set(rpc_connections[0].getrawmempool())\n+        num_match = 1\n+        for i in range(1, len(rpc_connections)):\n+            if set(rpc_connections[i].getrawmempool()) == pool:\n+                num_match = num_match + 1\n+        if num_match == len(rpc_connections):\n+            return\n+        time.sleep(wait)\n+        timeout -= wait\n+    raise AssertionError(\"Mempool sync failed\")\n+\n+# Transaction/Block functions\n+#############################\n+\n def find_output(node, txid, amount):\n     \"\"\"\n     Return index to output of txid with value amount\n@@ -372,38 +354,37 @@ def find_output(node, txid, amount):\n     for i in range(len(txdata[\"vout\"])):\n         if txdata[\"vout\"][i][\"value\"] == amount:\n             return i\n-    raise RuntimeError(\"find_output txid %s : %s not found\"%(txid,str(amount)))\n-\n+    raise RuntimeError(\"find_output txid %s : %s not found\" % (txid, str(amount)))\n \n def gather_inputs(from_node, amount_needed, confirmations_required=1):\n     \"\"\"\n     Return a random set of unspent txouts that are enough to pay amount_needed\n     \"\"\"\n-    assert(confirmations_required >=0)\n+    assert(confirmations_required >= 0)\n     utxo = from_node.listunspent(confirmations_required)\n     random.shuffle(utxo)\n     inputs = []\n     total_in = Decimal(\"0.00000000\")\n     while total_in < amount_needed and len(utxo) > 0:\n         t = utxo.pop()\n         total_in += t[\"amount\"]\n-        inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"], \"address\" : t[\"address\"] } )\n+        inputs.append({\"txid\": t[\"txid\"], \"vout\": t[\"vout\"], \"address\": t[\"address\"]})\n     if total_in < amount_needed:\n-        raise RuntimeError(\"Insufficient funds: need %d, have %d\"%(amount_needed, total_in))\n+        raise RuntimeError(\"Insufficient funds: need %d, have %d\" % (amount_needed, total_in))\n     return (total_in, inputs)\n \n def make_change(from_node, amount_in, amount_out, fee):\n     \"\"\"\n     Create change output(s), return them\n     \"\"\"\n     outputs = {}\n-    amount = amount_out+fee\n+    amount = amount_out + fee\n     change = amount_in - amount\n-    if change > amount*2:\n+    if change > amount * 2:\n         # Create an extra change output to break up big inputs\n         change_address = from_node.getnewaddress()\n         # Split change in two, being careful of rounding:\n-        outputs[change_address] = Decimal(change/2).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n+        outputs[change_address] = Decimal(change / 2).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n         change = amount_in - amount - outputs[change_address]\n     if change > 0:\n         outputs[from_node.getnewaddress()] = change\n@@ -416,9 +397,9 @@ def random_transaction(nodes, amount, min_fee, fee_increment, fee_variants):\n     \"\"\"\n     from_node = random.choice(nodes)\n     to_node = random.choice(nodes)\n-    fee = min_fee + fee_increment*random.randint(0,fee_variants)\n+    fee = min_fee + fee_increment * random.randint(0, fee_variants)\n \n-    (total_in, inputs) = gather_inputs(from_node, amount+fee)\n+    (total_in, inputs) = gather_inputs(from_node, amount + fee)\n     outputs = make_change(from_node, total_in, amount, fee)\n     outputs[to_node.getnewaddress()] = float(amount)\n \n@@ -428,123 +409,10 @@ def random_transaction(nodes, amount, min_fee, fee_increment, fee_variants):\n \n     return (txid, signresult[\"hex\"], fee)\n \n-def assert_fee_amount(fee, tx_size, fee_per_kB):\n-    \"\"\"Assert the fee was in range\"\"\"\n-    target_fee = tx_size * fee_per_kB / 1000\n-    if fee < target_fee:\n-        raise AssertionError(\"Fee of %s BTC too low! (Should be %s BTC)\"%(str(fee), str(target_fee)))\n-    # allow the wallet's estimation to be at most 2 bytes off\n-    if fee > (tx_size + 2) * fee_per_kB / 1000:\n-        raise AssertionError(\"Fee of %s BTC too high! (Should be %s BTC)\"%(str(fee), str(target_fee)))\n-\n-def assert_equal(thing1, thing2, *args):\n-    if thing1 != thing2 or any(thing1 != arg for arg in args):\n-        raise AssertionError(\"not(%s)\" % \" == \".join(str(arg) for arg in (thing1, thing2) + args))\n-\n-def assert_greater_than(thing1, thing2):\n-    if thing1 <= thing2:\n-        raise AssertionError(\"%s <= %s\"%(str(thing1),str(thing2)))\n-\n-def assert_greater_than_or_equal(thing1, thing2):\n-    if thing1 < thing2:\n-        raise AssertionError(\"%s < %s\"%(str(thing1),str(thing2)))\n-\n-def assert_raises(exc, fun, *args, **kwds):\n-    assert_raises_message(exc, None, fun, *args, **kwds)\n-\n-def assert_raises_message(exc, message, fun, *args, **kwds):\n-    try:\n-        fun(*args, **kwds)\n-    except exc as e:\n-        if message is not None and message not in e.error['message']:\n-            raise AssertionError(\"Expected substring not found:\"+e.error['message'])\n-    except Exception as e:\n-        raise AssertionError(\"Unexpected exception raised: \"+type(e).__name__)\n-    else:\n-        raise AssertionError(\"No exception raised\")\n-\n-def assert_raises_jsonrpc(code, message, fun, *args, **kwds):\n-    \"\"\"Run an RPC and verify that a specific JSONRPC exception code and message is raised.\n-\n-    Calls function `fun` with arguments `args` and `kwds`. Catches a JSONRPCException\n-    and verifies that the error code and message are as expected. Throws AssertionError if\n-    no JSONRPCException was returned or if the error code/message are not as expected.\n-\n-    Args:\n-        code (int), optional: the error code returned by the RPC call (defined\n-            in src/rpc/protocol.h). Set to None if checking the error code is not required.\n-        message (string), optional: [a substring of] the error string returned by the\n-            RPC call. Set to None if checking the error string is not required\n-        fun (function): the function to call. This should be the name of an RPC.\n-        args*: positional arguments for the function.\n-        kwds**: named arguments for the function.\n-    \"\"\"\n-    try:\n-        fun(*args, **kwds)\n-    except JSONRPCException as e:\n-        # JSONRPCException was thrown as expected. Check the code and message values are correct.\n-        if (code is not None) and (code != e.error[\"code\"]):\n-            raise AssertionError(\"Unexpected JSONRPC error code %i\" % e.error[\"code\"])\n-        if (message is not None) and (message not in e.error['message']):\n-            raise AssertionError(\"Expected substring not found:\"+e.error['message'])\n-    except Exception as e:\n-        raise AssertionError(\"Unexpected exception raised: \"+type(e).__name__)\n-    else:\n-        raise AssertionError(\"No exception raised\")\n-\n-def assert_is_hex_string(string):\n-    try:\n-        int(string, 16)\n-    except Exception as e:\n-        raise AssertionError(\n-            \"Couldn't interpret %r as hexadecimal; raised: %s\" % (string, e))\n-\n-def assert_is_hash_string(string, length=64):\n-    if not isinstance(string, str):\n-        raise AssertionError(\"Expected a string, got type %r\" % type(string))\n-    elif length and len(string) != length:\n-        raise AssertionError(\n-            \"String of length %d expected; got %d\" % (length, len(string)))\n-    elif not re.match('[abcdef0-9]+$', string):\n-        raise AssertionError(\n-            \"String %r contains invalid characters for a hash.\" % string)\n-\n-def assert_array_result(object_array, to_match, expected, should_not_find = False):\n-    \"\"\"\n-        Pass in array of JSON objects, a dictionary with key/value pairs\n-        to match against, and another dictionary with expected key/value\n-        pairs.\n-        If the should_not_find flag is true, to_match should not be found\n-        in object_array\n-        \"\"\"\n-    if should_not_find == True:\n-        assert_equal(expected, { })\n-    num_matched = 0\n-    for item in object_array:\n-        all_match = True\n-        for key,value in to_match.items():\n-            if item[key] != value:\n-                all_match = False\n-        if not all_match:\n-            continue\n-        elif should_not_find == True:\n-            num_matched = num_matched+1\n-        for key,value in expected.items():\n-            if item[key] != value:\n-                raise AssertionError(\"%s : expected %s=%s\"%(str(item), str(key), str(value)))\n-            num_matched = num_matched+1\n-    if num_matched == 0 and should_not_find != True:\n-        raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n-    if num_matched > 0 and should_not_find == True:\n-        raise AssertionError(\"Objects were found %s\"%(str(to_match)))\n-\n-def satoshi_round(amount):\n-    return Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n-\n # Helper to create at least \"count\" utxos\n # Pass in a fee that is sufficient for relay and mining new transactions.\n def create_confirmed_utxos(fee, node, count):\n-    node.generate(int(0.5*count)+101)\n+    node.generate(int(0.5 * count) + 101)\n     utxos = node.listunspent()\n     iterations = count - len(utxos)\n     addr1 = node.getnewaddress()\n@@ -554,14 +422,14 @@ def create_confirmed_utxos(fee, node, count):\n     for i in range(iterations):\n         t = utxos.pop()\n         inputs = []\n-        inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]})\n+        inputs.append({\"txid\": t[\"txid\"], \"vout\": t[\"vout\"]})\n         outputs = {}\n         send_value = t['amount'] - fee\n-        outputs[addr1] = satoshi_round(send_value/2)\n-        outputs[addr2] = satoshi_round(send_value/2)\n+        outputs[addr1] = satoshi_round(send_value / 2)\n+        outputs[addr2] = satoshi_round(send_value / 2)\n         raw_tx = node.createrawtransaction(inputs, outputs)\n         signed_tx = node.signrawtransaction(raw_tx)[\"hex\"]\n-        txid = node.sendrawtransaction(signed_tx)\n+        node.sendrawtransaction(signed_tx)\n \n     while (node.getmempoolinfo()['size'] > 0):\n         node.generate(1)\n@@ -576,8 +444,8 @@ def gen_return_txouts():\n     # Some pre-processing to create a bunch of OP_RETURN txouts to insert into transactions we create\n     # So we have big transactions (and therefore can't fit very many into each block)\n     # create one script_pubkey\n-    script_pubkey = \"6a4d0200\" #OP_RETURN OP_PUSH2 512 bytes\n-    for i in range (512):\n+    script_pubkey = \"6a4d0200\"  # OP_RETURN OP_PUSH2 512 bytes\n+    for i in range(512):\n         script_pubkey = script_pubkey + \"01\"\n     # concatenate 128 txouts of above script_pubkey which we'll insert before the txout for change\n     txouts = \"81\"\n@@ -591,8 +459,8 @@ def gen_return_txouts():\n     return txouts\n \n def create_tx(node, coinbase, to_address, amount):\n-    inputs = [{ \"txid\" : coinbase, \"vout\" : 0}]\n-    outputs = { to_address : amount }\n+    inputs = [{\"txid\": coinbase, \"vout\": 0}]\n+    outputs = {to_address: amount}\n     rawtx = node.createrawtransaction(inputs, outputs)\n     signresult = node.signrawtransaction(rawtx)\n     assert_equal(signresult[\"complete\"], True)\n@@ -605,7 +473,7 @@ def create_lots_of_big_transactions(node, txouts, utxos, num, fee):\n     txids = []\n     for _ in range(num):\n         t = utxos.pop()\n-        inputs=[{ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]}]\n+        inputs = [{\"txid\": t[\"txid\"], \"vout\": t[\"vout\"]}]\n         outputs = {}\n         change = t['amount'] - fee\n         outputs[addr] = satoshi_round(change)\n@@ -630,7 +498,3 @@ def mine_large_block(node, utxos=None):\n     fee = 100 * node.getnetworkinfo()[\"relayfee\"]\n     create_lots_of_big_transactions(node, txouts, utxos, num, fee=fee)\n     node.generate(1)\n-\n-def get_bip9_status(node, key):\n-    info = node.getblockchaininfo()\n-    return info['bip9_softforks'][key]"
      },
      {
        "sha": "569cc46e6cf92cea3c3e3d991673f8710056c825",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65cc7aacfbfc7b747926375280a1d839e88d576b/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65cc7aacfbfc7b747926375280a1d839e88d576b/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=65cc7aacfbfc7b747926375280a1d839e88d576b",
        "patch": "@@ -7,7 +7,7 @@\n import os\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (assert_equal, bitcoind_processes)\n+from test_framework.util import assert_equal\n \n \n def read_dump(file_name, addrs, hd_master_addr_old):\n@@ -95,7 +95,7 @@ def run_test (self):\n \n         #encrypt wallet, restart, unlock and dump\n         self.nodes[0].encryptwallet('test')\n-        bitcoind_processes[0].wait()\n+        self.bitcoind_processes[0].wait()\n         self.nodes[0] = self.start_node(0, self.options.tmpdir, self.extra_args[0])\n         self.nodes[0].walletpassphrase('test', 10)\n         # Should be a no-op:"
      },
      {
        "sha": "ba72918fe1564dcf09153c5711ef9e9e8c373fc4",
        "filename": "test/functional/wallet-encryption.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65cc7aacfbfc7b747926375280a1d839e88d576b/test/functional/wallet-encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65cc7aacfbfc7b747926375280a1d839e88d576b/test/functional/wallet-encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-encryption.py?ref=65cc7aacfbfc7b747926375280a1d839e88d576b",
        "patch": "@@ -6,12 +6,10 @@\n \n import time\n \n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT\n from test_framework.util import (\n     assert_equal,\n     assert_raises_jsonrpc,\n-    bitcoind_processes,\n-    BITCOIND_PROC_WAIT_TIMEOUT,\n )\n \n class WalletEncryptionTest(BitcoinTestFramework):\n@@ -33,7 +31,7 @@ def run_test(self):\n \n         # Encrypt the wallet\n         self.nodes[0].encryptwallet(passphrase)\n-        bitcoind_processes[0].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+        self.bitcoind_processes[0].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n         self.nodes[0] = self.start_node(0, self.options.tmpdir)\n \n         # Test that the wallet is encrypted"
      },
      {
        "sha": "dfd3dc83c523a47ca59a9700ff2051b2238ed7d9",
        "filename": "test/functional/wallet-hd.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65cc7aacfbfc7b747926375280a1d839e88d576b/test/functional/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65cc7aacfbfc7b747926375280a1d839e88d576b/test/functional/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd.py?ref=65cc7aacfbfc7b747926375280a1d839e88d576b",
        "patch": "@@ -8,7 +8,6 @@\n from test_framework.util import (\n     assert_equal,\n     connect_nodes_bi,\n-    assert_start_raises_init_error\n )\n import os\n import shutil\n@@ -27,7 +26,7 @@ def run_test (self):\n \n         # Make sure can't switch off usehd after wallet creation\n         self.stop_node(1)\n-        assert_start_raises_init_error(1, self.options.tmpdir, ['-usehd=0'], 'already existing HD wallet')\n+        self.assert_start_raises_init_error(1, self.options.tmpdir, ['-usehd=0'], 'already existing HD wallet')\n         self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n         connect_nodes_bi(self.nodes, 0, 1)\n "
      },
      {
        "sha": "ff51cba4b3f64f94c6de22081400a97a25e63cd1",
        "filename": "test/functional/walletbackup.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65cc7aacfbfc7b747926375280a1d839e88d576b/test/functional/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65cc7aacfbfc7b747926375280a1d839e88d576b/test/functional/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/walletbackup.py?ref=65cc7aacfbfc7b747926375280a1d839e88d576b",
        "patch": "@@ -30,10 +30,11 @@\n Shutdown again, restore using importwallet,\n and confirm again balances are correct.\n \"\"\"\n+from random import randint\n+import shutil\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from random import randint\n \n class WalletBackupTest(BitcoinTestFramework):\n "
      }
    ]
  },
  {
    "sha": "00cb69bc8655b1c17064a7e42453fd049e555076",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMGNiNjliYzg2NTViMWMxNzA2NGE3ZTQyNDUzZmQwNDllNTU1MDc2",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-06-23T07:32:38Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-06-29T15:48:08Z"
      },
      "message": "[Qt] allow to execute a callback during splashscreen progress",
      "tree": {
        "sha": "e6b4f5be586f06f073c5a35e30f18e4e845f066d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6b4f5be586f06f073c5a35e30f18e4e845f066d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00cb69bc8655b1c17064a7e42453fd049e555076",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAllVITkACgkQHrd2uwPH\nki1dOw/+JUg2JPmEH9nPOyzkL5W9kg3tc1g0XZirmzC8FJgZR5Hq+0Zfy5YDPtRH\ntYOzlxvqfp5TjvKNf5V10nLhyvLSosLvnp0iiep3LThlFHhpTbTySEJd938/BG67\nnnphVzYhZqbe57DDrXhNA5MUf56nUqUzKxM1+IweM9uZxxVBBHY6GMBHUtBxkUne\nOnt8Kzle1ffHKqg68BIeYUXHW0N7LbnR1AhuQrAtM9tQ73qEUjRq24okwr8qmTjo\ncKK9ImIoWtdlxkRAJwH0vFn/+gV1q+69xfLm4VofVTykVMEaXLP4JGgYjPNQ2RHB\ngbj5FBeoJFkEB/kKmUya8jCOwdjGtVGJYOzl7MGjNgCbICYWYkqY57e0ng92tWVz\nJ+5M/ACQJzoMLhtQga4It2ETpT+kbocDBU77rPf57BdYQbyp5F0AQXwxuuw17KfJ\nmBhbBj+1G+baVgirp9eGTMX921ddmp13R9d5JO5wJWg3yJYRRLUYjyQ8q8whrnRJ\n1aEntvpTgBlNwC7WDnLclLD9sfLZVHZDKaa/65JU7zMbXyCSpYUH/cMGRmafNpaL\nJKIGRV290J5/dYTBPo8Ufl3uBwLib01mke/z9AF7Dglz9upgaO2Py4Vd3LUNranQ\nBU2wOAcVaRTg61ZgFNAbHJSpTbpOEKKbVUUNgWTEVt4fQOMcAuw=\n=g4L1\n-----END PGP SIGNATURE-----",
        "payload": "tree e6b4f5be586f06f073c5a35e30f18e4e845f066d\nparent 90a002ea647dcea57a2ed4294eab77897168ba1d\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1498203158 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1498751288 +0200\n\n[Qt] allow to execute a callback during splashscreen progress\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00cb69bc8655b1c17064a7e42453fd049e555076",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/00cb69bc8655b1c17064a7e42453fd049e555076",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00cb69bc8655b1c17064a7e42453fd049e555076/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90a002ea647dcea57a2ed4294eab77897168ba1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90a002ea647dcea57a2ed4294eab77897168ba1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90a002ea647dcea57a2ed4294eab77897168ba1d"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 36,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8a745cadce7d8aa7df069db5578002b5dcf7fb0a",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00cb69bc8655b1c17064a7e42453fd049e555076/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00cb69bc8655b1c17064a7e42453fd049e555076/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=00cb69bc8655b1c17064a7e42453fd049e555076",
        "patch": "@@ -578,6 +578,7 @@ int main(int argc, char *argv[])\n     //   Need to pass name here as CAmount is a typedef (see http://qt-project.org/doc/qt-5/qmetatype.html#qRegisterMetaType)\n     //   IMPORTANT if it is no longer a typedef use the normal variant above\n     qRegisterMetaType< CAmount >(\"CAmount\");\n+    qRegisterMetaType< std::function<void(void)> >(\"std::function<void(void)>\");\n \n     /// 3. Application identification\n     // must be set before OptionsModel is initialized or translations are loaded,"
      },
      {
        "sha": "1b7cc69231c14a648ddb045b84208aa297e4a9af",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00cb69bc8655b1c17064a7e42453fd049e555076/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00cb69bc8655b1c17064a7e42453fd049e555076/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=00cb69bc8655b1c17064a7e42453fd049e555076",
        "patch": "@@ -131,13 +131,24 @@ SplashScreen::SplashScreen(Qt::WindowFlags f, const NetworkStyle *networkStyle)\n     move(QApplication::desktop()->screenGeometry().center() - r.center());\n \n     subscribeToCoreSignals();\n+    installEventFilter(this);\n }\n \n SplashScreen::~SplashScreen()\n {\n     unsubscribeFromCoreSignals();\n }\n \n+bool SplashScreen::eventFilter(QObject * obj, QEvent * ev) {\n+    if (ev->type() == QEvent::KeyPress) {\n+        QKeyEvent *keyEvent = static_cast<QKeyEvent *>(ev);\n+        if(keyEvent->text()[0] == 'q' && breakAction != nullptr) {\n+            breakAction();\n+        }\n+    }\n+    return QObject::eventFilter(obj, ev);\n+}\n+\n void SplashScreen::slotFinish(QWidget *mainWin)\n {\n     Q_UNUSED(mainWin);\n@@ -164,6 +175,18 @@ static void ShowProgress(SplashScreen *splash, const std::string &title, int nPr\n     InitMessage(splash, title + strprintf(\"%d\", nProgress) + \"%\");\n }\n \n+void SplashScreen::setBreakAction(const std::function<void(void)> &action)\n+{\n+    breakAction = action;\n+}\n+\n+static void SetProgressBreakAction(SplashScreen *splash, const std::function<void(void)> &action)\n+{\n+    QMetaObject::invokeMethod(splash, \"setBreakAction\",\n+        Qt::QueuedConnection,\n+        Q_ARG(std::function<void(void)>, action));\n+}\n+\n #ifdef ENABLE_WALLET\n void SplashScreen::ConnectWallet(CWallet* wallet)\n {\n@@ -177,6 +200,7 @@ void SplashScreen::subscribeToCoreSignals()\n     // Connect signals to client\n     uiInterface.InitMessage.connect(boost::bind(InitMessage, this, _1));\n     uiInterface.ShowProgress.connect(boost::bind(ShowProgress, this, _1, _2));\n+    uiInterface.SetProgressBreakAction.connect(boost::bind(SetProgressBreakAction, this, _1));\n #ifdef ENABLE_WALLET\n     uiInterface.LoadWallet.connect(boost::bind(&SplashScreen::ConnectWallet, this, _1));\n #endif"
      },
      {
        "sha": "a88ebb98a87400c8d3f06c74b169158564859e95",
        "filename": "src/qt/splashscreen.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00cb69bc8655b1c17064a7e42453fd049e555076/src/qt/splashscreen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00cb69bc8655b1c17064a7e42453fd049e555076/src/qt/splashscreen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.h?ref=00cb69bc8655b1c17064a7e42453fd049e555076",
        "patch": "@@ -5,6 +5,7 @@\n #ifndef BITCOIN_QT_SPLASHSCREEN_H\n #define BITCOIN_QT_SPLASHSCREEN_H\n \n+#include <functional>\n #include <QSplashScreen>\n \n class CWallet;\n@@ -35,6 +36,11 @@ public Q_SLOTS:\n     /** Show message and progress */\n     void showMessage(const QString &message, int alignment, const QColor &color);\n \n+    /** Sets the break action */\n+    void setBreakAction(const std::function<void(void)> &action);\n+protected:\n+    bool eventFilter(QObject * obj, QEvent * ev);\n+\n private:\n     /** Connect core signals to splash screen */\n     void subscribeToCoreSignals();\n@@ -49,6 +55,8 @@ public Q_SLOTS:\n     int curAlignment;\n \n     QList<CWallet*> connectedWallets;\n+\n+    std::function<void(void)> breakAction;\n };\n \n #endif // BITCOIN_QT_SPLASHSCREEN_H"
      },
      {
        "sha": "762dd19b1904184d471d861835614f37d1102bed",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00cb69bc8655b1c17064a7e42453fd049e555076/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00cb69bc8655b1c17064a7e42453fd049e555076/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=00cb69bc8655b1c17064a7e42453fd049e555076",
        "patch": "@@ -97,6 +97,9 @@ class CClientUIInterface\n     /** Show progress e.g. for verifychain */\n     boost::signals2::signal<void (const std::string &title, int nProgress)> ShowProgress;\n \n+    /** Set progress break action (possible \"cancel button\" triggers that action) */\n+    boost::signals2::signal<void (std::function<void(void)> action)> SetProgressBreakAction;\n+\n     /** New block has been accepted */\n     boost::signals2::signal<void (bool, const CBlockIndex *)> NotifyBlockTip;\n "
      }
    ]
  },
  {
    "sha": "ae09d4583b26251e67fa48216ebafb6bcdf2472b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTA5ZDQ1ODNiMjYyNTFlNjdmYTQ4MjE2ZWJhZmI2YmNkZjI0NzJi",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-06-23T07:33:31Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-06-29T15:48:11Z"
      },
      "message": "Allow to shut down during txdb upgrade",
      "tree": {
        "sha": "e21d6a89dee9ed86302240201eec4a1e41ffda8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e21d6a89dee9ed86302240201eec4a1e41ffda8d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae09d4583b26251e67fa48216ebafb6bcdf2472b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAllVITsACgkQHrd2uwPH\nki3OuA/+PB3WQiPOnxGRFLVuT0qLsw5A5sergBBc1YWdq+tS/k0mPpMIf1IWJW89\n5Z8R/egSsJIPbYgknjr5X8qBbqPZ/2xNgsLAPFQyHQ/AzzUwGEaCA6cbO9BIly+X\n+Sa9F2IwxZ9kZuqEVGJhRdv8Fzn7rYRA5ciCYqSPdENbBMw0fImECdjJgJRvCxl5\nQKNfBeQKS6hvCrnBgxXfX5VyOiiy2DfAE6FGG1VUEAT4nJPeSC6HVDl14B1OT6GR\nJkKIlAWgHtyi4qj1mh1IFk0CtsfUefIHa8rNrYEHkmxPQeaWMyHhU/B6NK/TsVpT\na0KxzfmWjk1JfnvcdEtcLyQpBWPjo0jsm366iA/Xg+AGeLYoAYaL8X01HCNmrgKl\nvQ4dhVNnTc6b88qMxmAUCIWZ+U4ALb+RtqyLl6pVHLCzLpoCQoavgsUlI+m/zuhP\n11dpmdhf0UQ6Wp9nySxsbVhZCwp5HITpWs+CqQWVbh+VwTurMVSBgqIRsIo9VaXm\nVEMifGrPaB7Nb8sSLppqegjDfM6EY1PKSMLdZPG7R9fqJNeaHBNxNr9w8v8oBX9b\n8HNm5T59Fgp2svShcsEiTyNdq2U0G7L0l/+ryDFQpbybrrmjkSwZY/TCZbnr59ZA\nbV31cgLnealcssapgYAxnAgjeCIdb+AAxlm138Xm8WEwBwJeo4U=\n=b437\n-----END PGP SIGNATURE-----",
        "payload": "tree e21d6a89dee9ed86302240201eec4a1e41ffda8d\nparent 00cb69bc8655b1c17064a7e42453fd049e555076\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1498203211 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1498751291 +0200\n\nAllow to shut down during txdb upgrade\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae09d4583b26251e67fa48216ebafb6bcdf2472b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae09d4583b26251e67fa48216ebafb6bcdf2472b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae09d4583b26251e67fa48216ebafb6bcdf2472b/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "00cb69bc8655b1c17064a7e42453fd049e555076",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00cb69bc8655b1c17064a7e42453fd049e555076",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/00cb69bc8655b1c17064a7e42453fd049e555076"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "ec1f18faef88db48c5271672bb82a915072f2853",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae09d4583b26251e67fa48216ebafb6bcdf2472b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae09d4583b26251e67fa48216ebafb6bcdf2472b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ae09d4583b26251e67fa48216ebafb6bcdf2472b",
        "patch": "@@ -1358,7 +1358,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     LogPrintf(\"* Using %.1fMiB for in-memory UTXO set (plus up to %.1fMiB of unused mempool space)\\n\", nCoinCacheUsage * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n \n     bool fLoaded = false;\n-    while (!fLoaded) {\n+    while (!fLoaded && !fRequestShutdown) {\n         bool fReset = fReindex;\n         std::string strLoadError;\n \n@@ -1389,6 +1389,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                         break;\n                     }\n                 }\n+                if (fRequestShutdown) break;\n \n                 if (!LoadBlockIndex(chainparams)) {\n                     strLoadError = _(\"Error loading block database\");\n@@ -1466,7 +1467,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n             fLoaded = true;\n         } while(false);\n \n-        if (!fLoaded) {\n+        if (!fLoaded && !fRequestShutdown) {\n             // first suggest a reindex\n             if (!fReset) {\n                 bool fRet = uiInterface.ThreadSafeQuestion("
      },
      {
        "sha": "3e05683d1e710c91552485937afeb1ff04854eac",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae09d4583b26251e67fa48216ebafb6bcdf2472b/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae09d4583b26251e67fa48216ebafb6bcdf2472b/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=ae09d4583b26251e67fa48216ebafb6bcdf2472b",
        "patch": "@@ -371,6 +371,9 @@ bool CCoinsViewDB::Upgrade() {\n     CDBBatch batch(db);\n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();\n+        if (ShutdownRequested()) {\n+            break;\n+        }\n         std::pair<unsigned char, uint256> key;\n         if (pcursor->GetKey(key) && key.first == DB_COINS) {\n             CCoins old_coins;"
      }
    ]
  },
  {
    "sha": "316fcb5106b90f3dd7a2dced2063e237539e75b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTZmY2I1MTA2YjkwZjNkZDdhMmRjZWQyMDYzZTIzNzUzOWU3NWI0",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-06-23T07:35:24Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-06-29T15:48:12Z"
      },
      "message": "Allow to cancel the txdb upgrade via splashscreen callback",
      "tree": {
        "sha": "14ebde89fd3142ecb820a51857836839b3fe9ab6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14ebde89fd3142ecb820a51857836839b3fe9ab6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/316fcb5106b90f3dd7a2dced2063e237539e75b4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAllVITwACgkQHrd2uwPH\nki3nhg//Re4x7oNDN+2vJ6JfdqvhCAsX+SxSJBz8UfI7r3oWq8r3huMYU2woUrLZ\n/gs+qHqUcyodgAPTk6meoM0LiM2b9B+wCq0u5rNx+M/fSW25GkneYkmXrVe6k5Xk\nI4vhe7aTjMGiH+iJC/J1y2+8nGvmETjaHw30GKQD/LNVofoTbCVw3g6MJbuLOBbT\n7NB0BMwoisi/UoSc5I7yzR+SK08AR435BEmvPlGDOpjdkZfuKYNT5iQLjN2EgS8J\n5EZtuWkvggU6m4JJ9Sk+likIoGeJbmPsvqU+2rLKkracd2JymqyC4d/Y1DCuCSnD\nT6gzMnyrZaz3j0La2wcGgM3iyZFYkyaQRt6wwrPkNdyaHwYVV20zirb3d1fISSvr\n3gkmvz7ME2LO8QfJ4uQP4GFGQ26lbfZcJLT972eE3u/5iARaWf2TGyx493Mw6P8j\nkIU6x1QgZ+86s/li+GJPaficpBnwadHtrN5XrjKSXEzC5c6yTUkZ1MqpTvuDsg8Z\nGyRM6QOOfAeKs7Bg+qjyp1QrPpN9jJwWo2F5ISOLbhLy67rMq9Nha15Buy46ZKyK\nQnogQeYJWYHbGQQQgHH2xBhu+/6L6yS7N5ktDMOQp0RNrk9U2Ij1bBi+dRGV5qGl\n3+CVV4B8UN/JZYJSYVoYVbcRYX+E4luMBMP9r7K4YqCv0qfJvck=\n=JaWj\n-----END PGP SIGNATURE-----",
        "payload": "tree 14ebde89fd3142ecb820a51857836839b3fe9ab6\nparent ae09d4583b26251e67fa48216ebafb6bcdf2472b\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1498203324 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1498751292 +0200\n\nAllow to cancel the txdb upgrade via splashscreen callback\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/316fcb5106b90f3dd7a2dced2063e237539e75b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/316fcb5106b90f3dd7a2dced2063e237539e75b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/316fcb5106b90f3dd7a2dced2063e237539e75b4/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae09d4583b26251e67fa48216ebafb6bcdf2472b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae09d4583b26251e67fa48216ebafb6bcdf2472b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae09d4583b26251e67fa48216ebafb6bcdf2472b"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6f1d4824781d273855dbc131fc0674558896ea69",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/316fcb5106b90f3dd7a2dced2063e237539e75b4/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/316fcb5106b90f3dd7a2dced2063e237539e75b4/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=316fcb5106b90f3dd7a2dced2063e237539e75b4",
        "patch": "@@ -11,6 +11,8 @@\n #include \"pow.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n+#include \"ui_interface.h\"\n+#include \"init.h\"\n \n #include <stdint.h>\n \n@@ -366,16 +368,22 @@ bool CCoinsViewDB::Upgrade() {\n         return true;\n     }\n \n+    int64_t count = 0;\n     LogPrintf(\"Upgrading database...\\n\");\n     size_t batch_size = 1 << 24;\n     CDBBatch batch(db);\n+    uiInterface.SetProgressBreakAction(StartShutdown);\n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();\n         if (ShutdownRequested()) {\n             break;\n         }\n         std::pair<unsigned char, uint256> key;\n         if (pcursor->GetKey(key) && key.first == DB_COINS) {\n+            if (count++ % 256 == 0) {\n+                uint32_t high = 0x100 * *key.second.begin() + *(key.second.begin() + 1);\n+                uiInterface.ShowProgress(_(\"Upgrading UTXO database\") + \"\\n\"+ _(\"(press q to shutdown and continue later)\") + \"\\n\", (int)(high * 100.0 / 65536.0 + 0.5));\n+            }\n             CCoins old_coins;\n             if (!pcursor->GetValue(old_coins)) {\n                 return error(\"%s: cannot parse CCoins record\", __func__);\n@@ -400,5 +408,6 @@ bool CCoinsViewDB::Upgrade() {\n         }\n     }\n     db.WriteBatch(batch);\n+    uiInterface.SetProgressBreakAction(std::function<void(void)>());\n     return true;\n }"
      }
    ]
  },
  {
    "sha": "06c5b6edd33213a410d9f128524e74ba076f7ba0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNmM1YjZlZGQzMzIxM2E0MTBkOWYxMjg1MjRlNzRiYTA3NmY3YmEw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-06-23T07:51:59Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-06-29T15:48:12Z"
      },
      "message": "Show txdb upgrade progress in debug log",
      "tree": {
        "sha": "33dd299eaaa179d6745725d46e4c4bbcd20dc7b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33dd299eaaa179d6745725d46e4c4bbcd20dc7b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/06c5b6edd33213a410d9f128524e74ba076f7ba0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAllVITwACgkQHrd2uwPH\nki1thhAAycMChFisVlTKLj91bi3Bk9CmG6cJEgjE6qMERjKS0/zwXNy11gdlTX2d\nmuF6fgk7PN5fNL7YPBqWcnVvQWytuK8G72HIrEdh5EKbNzVCesm7dltmvIFusSGA\nJ37DEaNrgYEuv43w3b+VCUeWTmQ7lI5J9UZQH+3kr/NpwlvQZKtvcE2jczIGEhUL\nvtj8uzYG8iM94Ej6GyerQEl5/d2eT/i+pU+Cv/BGhrdOqtJrN6vwc+kvBH19a8s7\nLw477dfb572ieQcyg0f5RWDcbvJODxnaxjjX1RNJ8H8MGR2INjg1GRCGIAQEsTKg\nrrU3sxdo8uR5+YdIU+I/mknTmoAkNFLjRXTxZUivCl3/aqP+85hbedsRJTM6jsJv\nwsuNf9C2XpNm6VJLAiKpSotXNothQd9tGgE/+dGWc9CZHwk7Yfr9OtMCFWv9EY0C\nU4dUZY5WUIrJs09oFpvzJQmxaqG4AJSm9urPV9eDtiuM9vCoM0TcvD+T042rI+uo\noa0XokCskpW7EzPdLDhhDw9Wq/mCgfUpFk8SwfoBvy1/3TgFousY6IScLgH9uCxj\nACYbfHC2Z7ErL0McCMhKONNC071Yhf++WymykrOLiR1yyHE56QPvO/QVanfbCuos\nxxMDpN/yV5WusqRyktz/F2yINqM4j8AvFVs6lHaeQ1cyzqW3Ago=\n=3K2q\n-----END PGP SIGNATURE-----",
        "payload": "tree 33dd299eaaa179d6745725d46e4c4bbcd20dc7b8\nparent 316fcb5106b90f3dd7a2dced2063e237539e75b4\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1498204319 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1498751292 +0200\n\nShow txdb upgrade progress in debug log\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06c5b6edd33213a410d9f128524e74ba076f7ba0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/06c5b6edd33213a410d9f128524e74ba076f7ba0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06c5b6edd33213a410d9f128524e74ba076f7ba0/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "316fcb5106b90f3dd7a2dced2063e237539e75b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/316fcb5106b90f3dd7a2dced2063e237539e75b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/316fcb5106b90f3dd7a2dced2063e237539e75b4"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6eff52f0509e8a68841b7dc37ad26279e1a52a01",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06c5b6edd33213a410d9f128524e74ba076f7ba0/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06c5b6edd33213a410d9f128524e74ba076f7ba0/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=06c5b6edd33213a410d9f128524e74ba076f7ba0",
        "patch": "@@ -369,7 +369,8 @@ bool CCoinsViewDB::Upgrade() {\n     }\n \n     int64_t count = 0;\n-    LogPrintf(\"Upgrading database...\\n\");\n+    LogPrintf(\"Upgrading utxo-set database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n     size_t batch_size = 1 << 24;\n     CDBBatch batch(db);\n     uiInterface.SetProgressBreakAction(StartShutdown);\n@@ -383,6 +384,7 @@ bool CCoinsViewDB::Upgrade() {\n             if (count++ % 256 == 0) {\n                 uint32_t high = 0x100 * *key.second.begin() + *(key.second.begin() + 1);\n                 uiInterface.ShowProgress(_(\"Upgrading UTXO database\") + \"\\n\"+ _(\"(press q to shutdown and continue later)\") + \"\\n\", (int)(high * 100.0 / 65536.0 + 0.5));\n+                LogPrintf(\"[%d%%]...\", (int)(high * 100.0 / 65536.0 + 0.5));\n             }\n             CCoins old_coins;\n             if (!pcursor->GetValue(old_coins)) {\n@@ -409,5 +411,6 @@ bool CCoinsViewDB::Upgrade() {\n     }\n     db.WriteBatch(batch);\n     uiInterface.SetProgressBreakAction(std::function<void(void)>());\n+    LogPrintf(\"[DONE].\\n\");\n     return true;\n }"
      }
    ]
  },
  {
    "sha": "83fbea3f25558fa6c72f2100d203b95b4030573e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4M2ZiZWEzZjI1NTU4ZmE2YzcyZjIxMDBkMjAzYjk1YjQwMzA1NzNl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-06-28T19:05:39Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-06-29T15:48:13Z"
      },
      "message": "Report txdb upgrade not more often then every 10%",
      "tree": {
        "sha": "19faef41db85a213ae05b06b4e0042934a5e093f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19faef41db85a213ae05b06b4e0042934a5e093f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83fbea3f25558fa6c72f2100d203b95b4030573e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAllVIT0ACgkQHrd2uwPH\nki1bVA/+NAeZa124sZd45HzRei6kfM/NgR+SuXwNz5JeMEAXs5USvssIyUVPu5RP\na34+2aQp62hM5WwalUMMZW8SfcjlURXf+LnxrBc8xpOdkOVYRR0LzvsmalSaSBAA\nGewTq95GXgU70Dj8vH1TQ05UjuxlDt8AmN/0q5rXf6IhgmXiOmAIIiAJInFr0X4n\nAFvzlX+zEr9kwpl3oaOsSlGUvkmoobnXoolkOtaFhhjxe6KlsVaPjTTwuv+OcIwG\nZE69084QtxY5Ed84o8sbTuxUkSMGU7fojV4GLT/xxqi7LjzikoBOQ+6kL762lBR4\nVVzhbWtG0lsV0cQcoXGrCD2f8/cqh0wR+2lP21ebV947/bmtVsA7zNZYKLQPc0S/\nqYe/L8B7rP3zHJPb5iY5j85LG37k4LEgDciFDQqWd9JB9biX0bZyRF727pqCpNTt\novEC1TBogDLAUT2TTVCLmEjv6lxV/sS+OPq/SJFYhBMzU3VNKWaoveWKv66YxGhy\ni3lp0ztdwJn57lt6lRVoMQR9+sb+F+VGik0f2JTBXnLtLOjCl+nInUu1g8tlHHRq\nkHT0k0BljYfvRLcBNnA0+p3KuBC/xl7IAh6zRYQTRwI3VcjQxu9tjLoqeFtx6oZT\nInuxUMo30mVRPXaCEwt84vDLddXAipkyAqH/+LZD0nWomi7dRB0=\n=a/bI\n-----END PGP SIGNATURE-----",
        "payload": "tree 19faef41db85a213ae05b06b4e0042934a5e093f\nparent 06c5b6edd33213a410d9f128524e74ba076f7ba0\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1498676739 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1498751293 +0200\n\nReport txdb upgrade not more often then every 10%\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83fbea3f25558fa6c72f2100d203b95b4030573e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/83fbea3f25558fa6c72f2100d203b95b4030573e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83fbea3f25558fa6c72f2100d203b95b4030573e/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "06c5b6edd33213a410d9f128524e74ba076f7ba0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06c5b6edd33213a410d9f128524e74ba076f7ba0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/06c5b6edd33213a410d9f128524e74ba076f7ba0"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c62f51cfcee9743696fef2c353f77599c5da849b",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83fbea3f25558fa6c72f2100d203b95b4030573e/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83fbea3f25558fa6c72f2100d203b95b4030573e/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=83fbea3f25558fa6c72f2100d203b95b4030573e",
        "patch": "@@ -374,6 +374,7 @@ bool CCoinsViewDB::Upgrade() {\n     size_t batch_size = 1 << 24;\n     CDBBatch batch(db);\n     uiInterface.SetProgressBreakAction(StartShutdown);\n+    int reportDone = 0;\n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();\n         if (ShutdownRequested()) {\n@@ -383,8 +384,13 @@ bool CCoinsViewDB::Upgrade() {\n         if (pcursor->GetKey(key) && key.first == DB_COINS) {\n             if (count++ % 256 == 0) {\n                 uint32_t high = 0x100 * *key.second.begin() + *(key.second.begin() + 1);\n-                uiInterface.ShowProgress(_(\"Upgrading UTXO database\") + \"\\n\"+ _(\"(press q to shutdown and continue later)\") + \"\\n\", (int)(high * 100.0 / 65536.0 + 0.5));\n-                LogPrintf(\"[%d%%]...\", (int)(high * 100.0 / 65536.0 + 0.5));\n+                int percentageDone = (int)(high * 100.0 / 65536.0 + 0.5);\n+                uiInterface.ShowProgress(_(\"Upgrading UTXO database\") + \"\\n\"+ _(\"(press q to shutdown and continue later)\") + \"\\n\", percentageDone);\n+                if (reportDone < percentageDone/10) {\n+                    // report max. every 10% step\n+                    LogPrintf(\"[%d%%]...\", percentageDone);\n+                    reportDone = percentageDone/10;\n+                }\n             }\n             CCoins old_coins;\n             if (!pcursor->GetValue(old_coins)) {"
      }
    ]
  },
  {
    "sha": "542ce6e24631a22451fabdb85d545add4024f553",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDJjZTZlMjQ2MzFhMjI0NTFmYWJkYjg1ZDU0NWFkZDQwMjRmNTUz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-06-28T19:28:11Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-06-29T15:48:13Z"
      },
      "message": "Report [CANCELLED] instead of [DONE] when shut down during txdb upgrade",
      "tree": {
        "sha": "6e934feba4033c4dc4e5c5a80b065373f5f42abf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e934feba4033c4dc4e5c5a80b065373f5f42abf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/542ce6e24631a22451fabdb85d545add4024f553",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAllVIT0ACgkQHrd2uwPH\nki3PbRAAjk9h6kmnaiqV8K9HeIntBTg9oFKZ+H08lztytggMqGLDBsO0LHWE+xkj\n15sT+V5z2VXelpFvCdO2tYEUMb/S9X2MXXXUmUENT9vMX9ShxeAwSFKs0OiS2Olb\nBSzfVY1vCtnAYvn91QUOZY8e8yp8op7/qcdtpVsCKmiQH1pdddfNdMB1Zk1f9g2i\nPRRe8Xj+BCeG2Vzug2yIm4tGhDbsKem04rKPrukP+ylm1X/wgJRYxEs3XeD0girY\nK9c2PblY6JOgcIQiMphKAMte+BWQ0z7VNe0xY1epXf/rIZJJx35Ik8BTIh6UG7VP\nca4UOhNL6S/HawJplzt6xUx3AbmQtvZcu73n42TY36TiXp2BV6QGLNn4WTv6iHci\nPu8S10yukWrVmyHE6KCb+S031cxhl+IX9P9gnxsPqJBhlKZ+E2sbPs16BT3U4rtL\nG88O8bBKiqDZBXTsW7L4WKi6ICtuNbbM/EGo9pqKTQTU9E6vZomR1xrGMPw/2yFp\nDk0Xx/TQ30UyiZl6NtZJcHFhticsGr63Z5UJ7lnLdTcmHX76X5jCO6VUpX9DP1+X\neIQf/N5ejZN/3uZ8syoIKc1eKqJ6deF+Y1hJHF73ngAGMYS7/imw93yaUii5TA/2\nU/WOFuNAbEIQLfr93sjRokuMoC9NFlY9lHw6h6OUfO586z9SU0E=\n=LfX8\n-----END PGP SIGNATURE-----",
        "payload": "tree 6e934feba4033c4dc4e5c5a80b065373f5f42abf\nparent 83fbea3f25558fa6c72f2100d203b95b4030573e\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1498678091 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1498751293 +0200\n\nReport [CANCELLED] instead of [DONE] when shut down during txdb upgrade\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/542ce6e24631a22451fabdb85d545add4024f553",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/542ce6e24631a22451fabdb85d545add4024f553",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/542ce6e24631a22451fabdb85d545add4024f553/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "83fbea3f25558fa6c72f2100d203b95b4030573e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83fbea3f25558fa6c72f2100d203b95b4030573e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/83fbea3f25558fa6c72f2100d203b95b4030573e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "002f6550bcac7deaeecbdf6e14059353841be0ee",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/542ce6e24631a22451fabdb85d545add4024f553/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/542ce6e24631a22451fabdb85d545add4024f553/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=542ce6e24631a22451fabdb85d545add4024f553",
        "patch": "@@ -417,6 +417,6 @@ bool CCoinsViewDB::Upgrade() {\n     }\n     db.WriteBatch(batch);\n     uiInterface.SetProgressBreakAction(std::function<void(void)>());\n-    LogPrintf(\"[DONE].\\n\");\n+    LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return true;\n }"
      }
    ]
  },
  {
    "sha": "0c3542e5dec34f43e0c2e171eb52cc95d19c070e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzM1NDJlNWRlYzM0ZjQzZTBjMmUxNzFlYjUyY2M5NWQxOWMwNzBl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-29T17:51:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-29T17:55:21Z"
      },
      "message": "Merge #10660: Allow to cancel the txdb upgrade via splashscreen keypress 'q'\n\n542ce6e Report [CANCELLED] instead of [DONE] when shut down during txdb upgrade (Jonas Schnelli)\n83fbea3 Report txdb upgrade not more often then every 10% (Jonas Schnelli)\n06c5b6e Show txdb upgrade progress in debug log (Jonas Schnelli)\n316fcb5 Allow to cancel the txdb upgrade via splashscreen callback (Jonas Schnelli)\nae09d45 Allow to shut down during txdb upgrade (Jonas Schnelli)\n00cb69b [Qt] allow to execute a callback during splashscreen progress (Jonas Schnelli)\n\nTree-SHA512: 23190f23f441bfd60821e49f8b3698a6bef97eb0e0ee659328e4a7395769ecd1616420eacc38aa1fa0ff62b9de5f13a0098dc798cdec6bff649575cefebc0db2",
      "tree": {
        "sha": "b5c8a23b86a37fb30b9c2d97d46e7c7cf0de71b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5c8a23b86a37fb30b9c2d97d46e7c7cf0de71b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c3542e5dec34f43e0c2e171eb52cc95d19c070e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZVT8JAAoJEB5K7WKYbNJd0CYIAKKhxoSliqGaUrlQ21u08h6X\nMppq0+j0MYj0y74AtNq5tN48rr1rgsh/wyWtEf5ax8yhNVuXFm52cy/bF9FYsIGq\nIBJPndjYQ8wo9Ui8D0W7gUSmVKLr7/6aPtq65vGVfdm8+TrLd5ycKld6RjgI+nKW\nw/rk3CpyMcky+5KZPIgF/adRfbX88/suzVBC6vOo0vs4pBfdcY+K/UQKH1+h84QI\nrfn7Ou5tj4TUOPczaJliQvgtoxSj5rk+sNviw8boaUJaezG1Lb4IVviPOTggYeML\n8Df+HVuQEiEGdgpm7DY3ZftKgeBWUVDhtbLwS6CV4RzWMCK5vzZHrejopDShuKc=\n=ryjO\n-----END PGP SIGNATURE-----",
        "payload": "tree b5c8a23b86a37fb30b9c2d97d46e7c7cf0de71b8\nparent 65cc7aacfbfc7b747926375280a1d839e88d576b\nparent 542ce6e24631a22451fabdb85d545add4024f553\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1498758708 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1498758921 +0200\n\nMerge #10660: Allow to cancel the txdb upgrade via splashscreen keypress 'q'\n\n542ce6e Report [CANCELLED] instead of [DONE] when shut down during txdb upgrade (Jonas Schnelli)\n83fbea3 Report txdb upgrade not more often then every 10% (Jonas Schnelli)\n06c5b6e Show txdb upgrade progress in debug log (Jonas Schnelli)\n316fcb5 Allow to cancel the txdb upgrade via splashscreen callback (Jonas Schnelli)\nae09d45 Allow to shut down during txdb upgrade (Jonas Schnelli)\n00cb69b [Qt] allow to execute a callback during splashscreen progress (Jonas Schnelli)\n\nTree-SHA512: 23190f23f441bfd60821e49f8b3698a6bef97eb0e0ee659328e4a7395769ecd1616420eacc38aa1fa0ff62b9de5f13a0098dc798cdec6bff649575cefebc0db2\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c3542e5dec34f43e0c2e171eb52cc95d19c070e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c3542e5dec34f43e0c2e171eb52cc95d19c070e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c3542e5dec34f43e0c2e171eb52cc95d19c070e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65cc7aacfbfc7b747926375280a1d839e88d576b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65cc7aacfbfc7b747926375280a1d839e88d576b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65cc7aacfbfc7b747926375280a1d839e88d576b"
      },
      {
        "sha": "542ce6e24631a22451fabdb85d545add4024f553",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/542ce6e24631a22451fabdb85d545add4024f553",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/542ce6e24631a22451fabdb85d545add4024f553"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 61,
      "deletions": 3
    },
    "files": [
      {
        "sha": "ec1f18faef88db48c5271672bb82a915072f2853",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c3542e5dec34f43e0c2e171eb52cc95d19c070e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c3542e5dec34f43e0c2e171eb52cc95d19c070e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0c3542e5dec34f43e0c2e171eb52cc95d19c070e",
        "patch": "@@ -1358,7 +1358,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     LogPrintf(\"* Using %.1fMiB for in-memory UTXO set (plus up to %.1fMiB of unused mempool space)\\n\", nCoinCacheUsage * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n \n     bool fLoaded = false;\n-    while (!fLoaded) {\n+    while (!fLoaded && !fRequestShutdown) {\n         bool fReset = fReindex;\n         std::string strLoadError;\n \n@@ -1389,6 +1389,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                         break;\n                     }\n                 }\n+                if (fRequestShutdown) break;\n \n                 if (!LoadBlockIndex(chainparams)) {\n                     strLoadError = _(\"Error loading block database\");\n@@ -1466,7 +1467,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n             fLoaded = true;\n         } while(false);\n \n-        if (!fLoaded) {\n+        if (!fLoaded && !fRequestShutdown) {\n             // first suggest a reindex\n             if (!fReset) {\n                 bool fRet = uiInterface.ThreadSafeQuestion("
      },
      {
        "sha": "8a745cadce7d8aa7df069db5578002b5dcf7fb0a",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c3542e5dec34f43e0c2e171eb52cc95d19c070e/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c3542e5dec34f43e0c2e171eb52cc95d19c070e/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=0c3542e5dec34f43e0c2e171eb52cc95d19c070e",
        "patch": "@@ -578,6 +578,7 @@ int main(int argc, char *argv[])\n     //   Need to pass name here as CAmount is a typedef (see http://qt-project.org/doc/qt-5/qmetatype.html#qRegisterMetaType)\n     //   IMPORTANT if it is no longer a typedef use the normal variant above\n     qRegisterMetaType< CAmount >(\"CAmount\");\n+    qRegisterMetaType< std::function<void(void)> >(\"std::function<void(void)>\");\n \n     /// 3. Application identification\n     // must be set before OptionsModel is initialized or translations are loaded,"
      },
      {
        "sha": "1b7cc69231c14a648ddb045b84208aa297e4a9af",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c3542e5dec34f43e0c2e171eb52cc95d19c070e/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c3542e5dec34f43e0c2e171eb52cc95d19c070e/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=0c3542e5dec34f43e0c2e171eb52cc95d19c070e",
        "patch": "@@ -131,13 +131,24 @@ SplashScreen::SplashScreen(Qt::WindowFlags f, const NetworkStyle *networkStyle)\n     move(QApplication::desktop()->screenGeometry().center() - r.center());\n \n     subscribeToCoreSignals();\n+    installEventFilter(this);\n }\n \n SplashScreen::~SplashScreen()\n {\n     unsubscribeFromCoreSignals();\n }\n \n+bool SplashScreen::eventFilter(QObject * obj, QEvent * ev) {\n+    if (ev->type() == QEvent::KeyPress) {\n+        QKeyEvent *keyEvent = static_cast<QKeyEvent *>(ev);\n+        if(keyEvent->text()[0] == 'q' && breakAction != nullptr) {\n+            breakAction();\n+        }\n+    }\n+    return QObject::eventFilter(obj, ev);\n+}\n+\n void SplashScreen::slotFinish(QWidget *mainWin)\n {\n     Q_UNUSED(mainWin);\n@@ -164,6 +175,18 @@ static void ShowProgress(SplashScreen *splash, const std::string &title, int nPr\n     InitMessage(splash, title + strprintf(\"%d\", nProgress) + \"%\");\n }\n \n+void SplashScreen::setBreakAction(const std::function<void(void)> &action)\n+{\n+    breakAction = action;\n+}\n+\n+static void SetProgressBreakAction(SplashScreen *splash, const std::function<void(void)> &action)\n+{\n+    QMetaObject::invokeMethod(splash, \"setBreakAction\",\n+        Qt::QueuedConnection,\n+        Q_ARG(std::function<void(void)>, action));\n+}\n+\n #ifdef ENABLE_WALLET\n void SplashScreen::ConnectWallet(CWallet* wallet)\n {\n@@ -177,6 +200,7 @@ void SplashScreen::subscribeToCoreSignals()\n     // Connect signals to client\n     uiInterface.InitMessage.connect(boost::bind(InitMessage, this, _1));\n     uiInterface.ShowProgress.connect(boost::bind(ShowProgress, this, _1, _2));\n+    uiInterface.SetProgressBreakAction.connect(boost::bind(SetProgressBreakAction, this, _1));\n #ifdef ENABLE_WALLET\n     uiInterface.LoadWallet.connect(boost::bind(&SplashScreen::ConnectWallet, this, _1));\n #endif"
      },
      {
        "sha": "a88ebb98a87400c8d3f06c74b169158564859e95",
        "filename": "src/qt/splashscreen.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c3542e5dec34f43e0c2e171eb52cc95d19c070e/src/qt/splashscreen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c3542e5dec34f43e0c2e171eb52cc95d19c070e/src/qt/splashscreen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.h?ref=0c3542e5dec34f43e0c2e171eb52cc95d19c070e",
        "patch": "@@ -5,6 +5,7 @@\n #ifndef BITCOIN_QT_SPLASHSCREEN_H\n #define BITCOIN_QT_SPLASHSCREEN_H\n \n+#include <functional>\n #include <QSplashScreen>\n \n class CWallet;\n@@ -35,6 +36,11 @@ public Q_SLOTS:\n     /** Show message and progress */\n     void showMessage(const QString &message, int alignment, const QColor &color);\n \n+    /** Sets the break action */\n+    void setBreakAction(const std::function<void(void)> &action);\n+protected:\n+    bool eventFilter(QObject * obj, QEvent * ev);\n+\n private:\n     /** Connect core signals to splash screen */\n     void subscribeToCoreSignals();\n@@ -49,6 +55,8 @@ public Q_SLOTS:\n     int curAlignment;\n \n     QList<CWallet*> connectedWallets;\n+\n+    std::function<void(void)> breakAction;\n };\n \n #endif // BITCOIN_QT_SPLASHSCREEN_H"
      },
      {
        "sha": "002f6550bcac7deaeecbdf6e14059353841be0ee",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 1,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c3542e5dec34f43e0c2e171eb52cc95d19c070e/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c3542e5dec34f43e0c2e171eb52cc95d19c070e/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=0c3542e5dec34f43e0c2e171eb52cc95d19c070e",
        "patch": "@@ -11,6 +11,8 @@\n #include \"pow.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n+#include \"ui_interface.h\"\n+#include \"init.h\"\n \n #include <stdint.h>\n \n@@ -366,13 +368,30 @@ bool CCoinsViewDB::Upgrade() {\n         return true;\n     }\n \n-    LogPrintf(\"Upgrading database...\\n\");\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading utxo-set database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n     size_t batch_size = 1 << 24;\n     CDBBatch batch(db);\n+    uiInterface.SetProgressBreakAction(StartShutdown);\n+    int reportDone = 0;\n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();\n+        if (ShutdownRequested()) {\n+            break;\n+        }\n         std::pair<unsigned char, uint256> key;\n         if (pcursor->GetKey(key) && key.first == DB_COINS) {\n+            if (count++ % 256 == 0) {\n+                uint32_t high = 0x100 * *key.second.begin() + *(key.second.begin() + 1);\n+                int percentageDone = (int)(high * 100.0 / 65536.0 + 0.5);\n+                uiInterface.ShowProgress(_(\"Upgrading UTXO database\") + \"\\n\"+ _(\"(press q to shutdown and continue later)\") + \"\\n\", percentageDone);\n+                if (reportDone < percentageDone/10) {\n+                    // report max. every 10% step\n+                    LogPrintf(\"[%d%%]...\", percentageDone);\n+                    reportDone = percentageDone/10;\n+                }\n+            }\n             CCoins old_coins;\n             if (!pcursor->GetValue(old_coins)) {\n                 return error(\"%s: cannot parse CCoins record\", __func__);\n@@ -397,5 +416,7 @@ bool CCoinsViewDB::Upgrade() {\n         }\n     }\n     db.WriteBatch(batch);\n+    uiInterface.SetProgressBreakAction(std::function<void(void)>());\n+    LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return true;\n }"
      },
      {
        "sha": "762dd19b1904184d471d861835614f37d1102bed",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c3542e5dec34f43e0c2e171eb52cc95d19c070e/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c3542e5dec34f43e0c2e171eb52cc95d19c070e/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=0c3542e5dec34f43e0c2e171eb52cc95d19c070e",
        "patch": "@@ -97,6 +97,9 @@ class CClientUIInterface\n     /** Show progress e.g. for verifychain */\n     boost::signals2::signal<void (const std::string &title, int nProgress)> ShowProgress;\n \n+    /** Set progress break action (possible \"cancel button\" triggers that action) */\n+    boost::signals2::signal<void (std::function<void(void)> action)> SetProgressBreakAction;\n+\n     /** New block has been accepted */\n     boost::signals2::signal<void (bool, const CBlockIndex *)> NotifyBlockTip;\n "
      }
    ]
  },
  {
    "sha": "2935b469ae96a3203bb997a6eddc098903b336ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTM1YjQ2OWFlOTZhMzIwM2JiOTk3YTZlZGRjMDk4OTAzYjMzNmNl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-29T18:04:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-29T18:19:21Z"
      },
      "message": "Merge #10192: Cache full script execution results in addition to signatures\n\ne3f9c05 Add CheckInputs() unit tests (Suhas Daftuar)\na3543af Better document CheckInputs parameter meanings (Matt Corallo)\n309ee1a Update -maxsigcachesize doc clarify init logprints for it (Matt Corallo)\nb014668 Add CheckInputs wrapper CCoinsViewMemPool -> non-consensus-critical (Matt Corallo)\neada04e Do not print soft-fork-script warning with -promiscuousmempool (Matt Corallo)\nb5fea8d Cache full script execution results in addition to signatures (Matt Corallo)\n6d22b2b Pull script verify flags calculation out of ConnectBlock (Matt Corallo)\n\nTree-SHA512: 0c6c3c79c64fcb21e17ab60290c5c96d4fac11624c49f841a4201eec21cb480314c52a07d1e3abd4f9c764785cc57bfd178511f495aa0469addb204e96214fe4",
      "tree": {
        "sha": "d1eed14578449c76e5b623f3e8bd5e3cff278908",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1eed14578449c76e5b623f3e8bd5e3cff278908"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2935b469ae96a3203bb997a6eddc098903b336ce",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZVUSpAAoJEB5K7WKYbNJdxlcIAJjH1QYrwyC9ZvAzRwUQ2M9m\nqEF/oENRPN5elt2GOTbBAeyRcyJuXxvFUHwgYrd6TgLNwXBNmP/migar1DEnIEus\nXYJqTwFOnl6S4r+dYkvRV25sUwBMd+O1+c2DeK/SmMnc/7VhXp3YWhpjxIkFbzH+\n7VHuGPUF3iJInDfcRsjqa24nEqaN4vJmYqwgTZsJfBj4qMCMl2xZw/N2K6T/x3Ib\nZ763+ti/RskspXmRGaMPEkPyETSIlokHx8yvLaxF3yxrZDo6FXIDj795GXxYhV+v\n2/xD1skN7KzAfnyFotQsNK4aZkWREr1OTzrbVYYRsX4hPpwKaWGsg4L26+DHDfw=\n=2cn4\n-----END PGP SIGNATURE-----",
        "payload": "tree d1eed14578449c76e5b623f3e8bd5e3cff278908\nparent 0c3542e5dec34f43e0c2e171eb52cc95d19c070e\nparent e3f9c05b966622146e090f2a01a913516ccb874a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1498759447 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1498760361 +0200\n\nMerge #10192: Cache full script execution results in addition to signatures\n\ne3f9c05 Add CheckInputs() unit tests (Suhas Daftuar)\na3543af Better document CheckInputs parameter meanings (Matt Corallo)\n309ee1a Update -maxsigcachesize doc clarify init logprints for it (Matt Corallo)\nb014668 Add CheckInputs wrapper CCoinsViewMemPool -> non-consensus-critical (Matt Corallo)\neada04e Do not print soft-fork-script warning with -promiscuousmempool (Matt Corallo)\nb5fea8d Cache full script execution results in addition to signatures (Matt Corallo)\n6d22b2b Pull script verify flags calculation out of ConnectBlock (Matt Corallo)\n\nTree-SHA512: 0c6c3c79c64fcb21e17ab60290c5c96d4fac11624c49f841a4201eec21cb480314c52a07d1e3abd4f9c764785cc57bfd178511f495aa0469addb204e96214fe4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2935b469ae96a3203bb997a6eddc098903b336ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2935b469ae96a3203bb997a6eddc098903b336ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2935b469ae96a3203bb997a6eddc098903b336ce/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0c3542e5dec34f43e0c2e171eb52cc95d19c070e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c3542e5dec34f43e0c2e171eb52cc95d19c070e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c3542e5dec34f43e0c2e171eb52cc95d19c070e"
      },
      {
        "sha": "e3f9c05b966622146e090f2a01a913516ccb874a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3f9c05b966622146e090f2a01a913516ccb874a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3f9c05b966622146e090f2a01a913516ccb874a"
      }
    ],
    "stats": {
      "total": 492,
      "additions": 449,
      "deletions": 43
    },
    "files": [
      {
        "sha": "672ef77e80fa64401195a8e3b8f2c2c0a7258eb5",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2935b469ae96a3203bb997a6eddc098903b336ce/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2935b469ae96a3203bb997a6eddc098903b336ce/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2935b469ae96a3203bb997a6eddc098903b336ce",
        "patch": "@@ -447,7 +447,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     {\n         strUsage += HelpMessageOpt(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS));\n         strUsage += HelpMessageOpt(\"-mocktime=<n>\", \"Replace actual time with <n> seconds since epoch (default: 0)\");\n-        strUsage += HelpMessageOpt(\"-maxsigcachesize=<n>\", strprintf(\"Limit size of signature cache to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE));\n+        strUsage += HelpMessageOpt(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE));\n         strUsage += HelpMessageOpt(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE));\n     }\n     strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees (in %s) to use in a single wallet transaction or raw transaction; setting this too low may abort large transactions (default: %s)\"),\n@@ -1191,6 +1191,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     LogPrintf(\"Using at most %i automatic connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n \n     InitSignatureCache();\n+    InitScriptExecutionCache();\n \n     LogPrintf(\"Using %u threads for script verification\\n\", nScriptCheckThreads);\n     if (nScriptCheckThreads) {"
      },
      {
        "sha": "ceb573b2ec565340fa6c1fdabc7aa35b2b136868",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2935b469ae96a3203bb997a6eddc098903b336ce/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2935b469ae96a3203bb997a6eddc098903b336ce/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=2935b469ae96a3203bb997a6eddc098903b336ce",
        "patch": "@@ -74,10 +74,10 @@ void InitSignatureCache()\n {\n     // nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,\n     // setup_bytes creates the minimum possible cache (2 elements).\n-    size_t nMaxCacheSize = std::min(std::max((int64_t)0, GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE)), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n+    size_t nMaxCacheSize = std::min(std::max((int64_t)0, GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n     size_t nElems = signatureCache.setup_bytes(nMaxCacheSize);\n-    LogPrintf(\"Using %zu MiB out of %zu requested for signature cache, able to store %zu elements\\n\",\n-            (nElems*sizeof(uint256)) >>20, nMaxCacheSize>>20, nElems);\n+    LogPrintf(\"Using %zu MiB out of %zu/2 requested for signature cache, able to store %zu elements\\n\",\n+            (nElems*sizeof(uint256)) >>20, (nMaxCacheSize*2)>>20, nElems);\n }\n \n bool CachingTransactionSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const"
      },
      {
        "sha": "579e96524cc59a5b213abb799f35c2d2fe2127b2",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2935b469ae96a3203bb997a6eddc098903b336ce/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2935b469ae96a3203bb997a6eddc098903b336ce/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=2935b469ae96a3203bb997a6eddc098903b336ce",
        "patch": "@@ -38,6 +38,7 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName)\n         SetupEnvironment();\n         SetupNetworking();\n         InitSignatureCache();\n+        InitScriptExecutionCache();\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n         fCheckBlockIndex = true;\n         SelectParams(chainName);"
      },
      {
        "sha": "a74f40251aa3ee1427742e657ce2c3dd98232813",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 284,
        "deletions": 0,
        "changes": 284,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2935b469ae96a3203bb997a6eddc098903b336ce/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2935b469ae96a3203bb997a6eddc098903b336ce/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=2935b469ae96a3203bb997a6eddc098903b336ce",
        "patch": "@@ -10,11 +10,17 @@\n #include \"txmempool.h\"\n #include \"random.h\"\n #include \"script/standard.h\"\n+#include \"script/sign.h\"\n #include \"test/test_bitcoin.h\"\n #include \"utiltime.h\"\n+#include \"core_io.h\"\n+#include \"keystore.h\"\n+#include \"policy/policy.h\"\n \n #include <boost/test/unit_test.hpp>\n \n+bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks);\n+\n BOOST_AUTO_TEST_SUITE(tx_validationcache_tests)\n \n static bool\n@@ -84,4 +90,282 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n     BOOST_CHECK_EQUAL(mempool.size(), 0);\n }\n \n+// Run CheckInputs (using pcoinsTip) on the given transaction, for all script\n+// flags.  Test that CheckInputs passes for all flags that don't overlap with\n+// the failing_flags argument, but otherwise fails.\n+// CHECKLOCKTIMEVERIFY and CHECKSEQUENCEVERIFY (and future NOP codes that may\n+// get reassigned) have an interaction with DISCOURAGE_UPGRADABLE_NOPS: if\n+// the script flags used contain DISCOURAGE_UPGRADABLE_NOPS but don't contain\n+// CHECKLOCKTIMEVERIFY (or CHECKSEQUENCEVERIFY), but the script does contain\n+// OP_CHECKLOCKTIMEVERIFY (or OP_CHECKSEQUENCEVERIFY), then script execution\n+// should fail.\n+// Capture this interaction with the upgraded_nop argument: set it when evaluating\n+// any script flag that is implemented as an upgraded NOP code.\n+void ValidateCheckInputsForAllFlags(CMutableTransaction &tx, uint32_t failing_flags, bool add_to_cache, bool upgraded_nop)\n+{\n+    PrecomputedTransactionData txdata(tx);\n+    // If we add many more flags, this loop can get too expensive, but we can\n+    // rewrite in the future to randomly pick a set of flags to evaluate.\n+    for (uint32_t test_flags=0; test_flags < (1U << 16); test_flags += 1) {\n+        CValidationState state;\n+        // Filter out incompatible flag choices\n+        if ((test_flags & SCRIPT_VERIFY_CLEANSTACK)) {\n+            // CLEANSTACK requires P2SH and WITNESS, see VerifyScript() in\n+            // script/interpreter.cpp\n+            test_flags |= SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS;\n+        }\n+        if ((test_flags & SCRIPT_VERIFY_WITNESS)) {\n+            // WITNESS requires P2SH\n+            test_flags |= SCRIPT_VERIFY_P2SH;\n+        }\n+        bool ret = CheckInputs(tx, state, pcoinsTip, true, test_flags, true, add_to_cache, txdata, nullptr);\n+        // CheckInputs should succeed iff test_flags doesn't intersect with\n+        // failing_flags\n+        bool expected_return_value = !(test_flags & failing_flags);\n+        if (expected_return_value && upgraded_nop) {\n+            // If the script flag being tested corresponds to an upgraded NOP,\n+            // then script execution should fail if DISCOURAGE_UPGRADABLE_NOPS\n+            // is set.\n+            expected_return_value = !(test_flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS);\n+        }\n+        BOOST_CHECK_EQUAL(ret, expected_return_value);\n+\n+        // Test the caching\n+        if (ret && add_to_cache) {\n+            // Check that we get a cache hit if the tx was valid\n+            std::vector<CScriptCheck> scriptchecks;\n+            BOOST_CHECK(CheckInputs(tx, state, pcoinsTip, true, test_flags, true, add_to_cache, txdata, &scriptchecks));\n+            BOOST_CHECK(scriptchecks.empty());\n+        } else {\n+            // Check that we get script executions to check, if the transaction\n+            // was invalid, or we didn't add to cache.\n+            std::vector<CScriptCheck> scriptchecks;\n+            BOOST_CHECK(CheckInputs(tx, state, pcoinsTip, true, test_flags, true, add_to_cache, txdata, &scriptchecks));\n+            BOOST_CHECK_EQUAL(scriptchecks.size(), tx.vin.size());\n+        }\n+    }\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n+{\n+    // Test that passing CheckInputs with one set of script flags doesn't imply\n+    // that we would pass again with a different set of flags.\n+    InitScriptExecutionCache();\n+\n+    CScript p2pk_scriptPubKey = CScript() << ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n+    CScript p2sh_scriptPubKey = GetScriptForDestination(CScriptID(p2pk_scriptPubKey));\n+    CScript p2pkh_scriptPubKey = GetScriptForDestination(coinbaseKey.GetPubKey().GetID());\n+    CScript p2wpkh_scriptPubKey = GetScriptForWitness(p2pkh_scriptPubKey);\n+\n+    CBasicKeyStore keystore;\n+    keystore.AddKey(coinbaseKey);\n+    keystore.AddCScript(p2pk_scriptPubKey);\n+\n+    // flags to test: SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, SCRIPT_VERIFY_CHECKSEQUENCE_VERIFY, SCRIPT_VERIFY_NULLDUMMY, uncompressed pubkey thing\n+\n+    // Create 2 outputs that match the three scripts above, spending the first\n+    // coinbase tx.\n+    CMutableTransaction spend_tx;\n+\n+    spend_tx.nVersion = 1;\n+    spend_tx.vin.resize(1);\n+    spend_tx.vin[0].prevout.hash = coinbaseTxns[0].GetHash();\n+    spend_tx.vin[0].prevout.n = 0;\n+    spend_tx.vout.resize(4);\n+    spend_tx.vout[0].nValue = 11*CENT;\n+    spend_tx.vout[0].scriptPubKey = p2sh_scriptPubKey;\n+    spend_tx.vout[1].nValue = 11*CENT;\n+    spend_tx.vout[1].scriptPubKey = p2wpkh_scriptPubKey;\n+    spend_tx.vout[2].nValue = 11*CENT;\n+    spend_tx.vout[2].scriptPubKey = CScript() << OP_CHECKLOCKTIMEVERIFY << OP_DROP << ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n+    spend_tx.vout[3].nValue = 11*CENT;\n+    spend_tx.vout[3].scriptPubKey = CScript() << OP_CHECKSEQUENCEVERIFY << OP_DROP << ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n+\n+    // Sign, with a non-DER signature\n+    {\n+        std::vector<unsigned char> vchSig;\n+        uint256 hash = SignatureHash(p2pk_scriptPubKey, spend_tx, 0, SIGHASH_ALL, 0, SIGVERSION_BASE);\n+        BOOST_CHECK(coinbaseKey.Sign(hash, vchSig));\n+        vchSig.push_back((unsigned char) 0); // padding byte makes this non-DER\n+        vchSig.push_back((unsigned char)SIGHASH_ALL);\n+        spend_tx.vin[0].scriptSig << vchSig;\n+    }\n+\n+    LOCK(cs_main);\n+\n+    // Test that invalidity under a set of flags doesn't preclude validity\n+    // under other (eg consensus) flags.\n+    // spend_tx is invalid according to DERSIG\n+    CValidationState state;\n+    {\n+        PrecomputedTransactionData ptd_spend_tx(spend_tx);\n+\n+        BOOST_CHECK(!CheckInputs(spend_tx, state, pcoinsTip, true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_DERSIG, true, true, ptd_spend_tx, nullptr));\n+\n+        // If we call again asking for scriptchecks (as happens in\n+        // ConnectBlock), we should add a script check object for this -- we're\n+        // not caching invalidity (if that changes, delete this test case).\n+        std::vector<CScriptCheck> scriptchecks;\n+        BOOST_CHECK(CheckInputs(spend_tx, state, pcoinsTip, true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_DERSIG, true, true, ptd_spend_tx, &scriptchecks));\n+        BOOST_CHECK_EQUAL(scriptchecks.size(), 1);\n+\n+        // Test that CheckInputs returns true iff DERSIG-enforcing flags are\n+        // not present.  Don't add these checks to the cache, so that we can\n+        // test later that block validation works fine in the absence of cached\n+        // successes.\n+        ValidateCheckInputsForAllFlags(spend_tx, SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC, false, false);\n+\n+        // And if we produce a block with this tx, it should be valid (DERSIG not\n+        // enabled yet), even though there's no cache entry.\n+        CBlock block;\n+\n+        block = CreateAndProcessBlock({spend_tx}, p2pk_scriptPubKey);\n+        BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block.GetHash());\n+        BOOST_CHECK(pcoinsTip->GetBestBlock() == block.GetHash());\n+    }\n+\n+    // Test P2SH: construct a transaction that is valid without P2SH, and\n+    // then test validity with P2SH.\n+    {\n+        CMutableTransaction invalid_under_p2sh_tx;\n+        invalid_under_p2sh_tx.nVersion = 1;\n+        invalid_under_p2sh_tx.vin.resize(1);\n+        invalid_under_p2sh_tx.vin[0].prevout.hash = spend_tx.GetHash();\n+        invalid_under_p2sh_tx.vin[0].prevout.n = 0;\n+        invalid_under_p2sh_tx.vout.resize(1);\n+        invalid_under_p2sh_tx.vout[0].nValue = 11*CENT;\n+        invalid_under_p2sh_tx.vout[0].scriptPubKey = p2pk_scriptPubKey;\n+        std::vector<unsigned char> vchSig2(p2pk_scriptPubKey.begin(), p2pk_scriptPubKey.end());\n+        invalid_under_p2sh_tx.vin[0].scriptSig << vchSig2;\n+\n+        ValidateCheckInputsForAllFlags(invalid_under_p2sh_tx, SCRIPT_VERIFY_P2SH, true, false);\n+    }\n+\n+    // Test CHECKLOCKTIMEVERIFY\n+    {\n+        CMutableTransaction invalid_with_cltv_tx;\n+        invalid_with_cltv_tx.nVersion = 1;\n+        invalid_with_cltv_tx.nLockTime = 100;\n+        invalid_with_cltv_tx.vin.resize(1);\n+        invalid_with_cltv_tx.vin[0].prevout.hash = spend_tx.GetHash();\n+        invalid_with_cltv_tx.vin[0].prevout.n = 2;\n+        invalid_with_cltv_tx.vin[0].nSequence = 0;\n+        invalid_with_cltv_tx.vout.resize(1);\n+        invalid_with_cltv_tx.vout[0].nValue = 11*CENT;\n+        invalid_with_cltv_tx.vout[0].scriptPubKey = p2pk_scriptPubKey;\n+\n+        // Sign\n+        std::vector<unsigned char> vchSig;\n+        uint256 hash = SignatureHash(spend_tx.vout[2].scriptPubKey, invalid_with_cltv_tx, 0, SIGHASH_ALL, 0, SIGVERSION_BASE);\n+        BOOST_CHECK(coinbaseKey.Sign(hash, vchSig));\n+        vchSig.push_back((unsigned char)SIGHASH_ALL);\n+        invalid_with_cltv_tx.vin[0].scriptSig = CScript() << vchSig << 101;\n+\n+        ValidateCheckInputsForAllFlags(invalid_with_cltv_tx, SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, true, true);\n+\n+        // Make it valid, and check again\n+        invalid_with_cltv_tx.vin[0].scriptSig = CScript() << vchSig << 100;\n+        CValidationState state;\n+        PrecomputedTransactionData txdata(invalid_with_cltv_tx);\n+        BOOST_CHECK(CheckInputs(invalid_with_cltv_tx, state, pcoinsTip, true, SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, true, true, txdata, nullptr));\n+    }\n+\n+    // TEST CHECKSEQUENCEVERIFY\n+    {\n+        CMutableTransaction invalid_with_csv_tx;\n+        invalid_with_csv_tx.nVersion = 2;\n+        invalid_with_csv_tx.vin.resize(1);\n+        invalid_with_csv_tx.vin[0].prevout.hash = spend_tx.GetHash();\n+        invalid_with_csv_tx.vin[0].prevout.n = 3;\n+        invalid_with_csv_tx.vin[0].nSequence = 100;\n+        invalid_with_csv_tx.vout.resize(1);\n+        invalid_with_csv_tx.vout[0].nValue = 11*CENT;\n+        invalid_with_csv_tx.vout[0].scriptPubKey = p2pk_scriptPubKey;\n+\n+        // Sign\n+        std::vector<unsigned char> vchSig;\n+        uint256 hash = SignatureHash(spend_tx.vout[3].scriptPubKey, invalid_with_csv_tx, 0, SIGHASH_ALL, 0, SIGVERSION_BASE);\n+        BOOST_CHECK(coinbaseKey.Sign(hash, vchSig));\n+        vchSig.push_back((unsigned char)SIGHASH_ALL);\n+        invalid_with_csv_tx.vin[0].scriptSig = CScript() << vchSig << 101;\n+\n+        ValidateCheckInputsForAllFlags(invalid_with_csv_tx, SCRIPT_VERIFY_CHECKSEQUENCEVERIFY, true, true);\n+\n+        // Make it valid, and check again\n+        invalid_with_csv_tx.vin[0].scriptSig = CScript() << vchSig << 100;\n+        CValidationState state;\n+        PrecomputedTransactionData txdata(invalid_with_csv_tx);\n+        BOOST_CHECK(CheckInputs(invalid_with_csv_tx, state, pcoinsTip, true, SCRIPT_VERIFY_CHECKSEQUENCEVERIFY, true, true, txdata, nullptr));\n+    }\n+\n+    // TODO: add tests for remaining script flags\n+\n+    // Test that passing CheckInputs with a valid witness doesn't imply success\n+    // for the same tx with a different witness.\n+    {\n+        CMutableTransaction valid_with_witness_tx;\n+        valid_with_witness_tx.nVersion = 1;\n+        valid_with_witness_tx.vin.resize(1);\n+        valid_with_witness_tx.vin[0].prevout.hash = spend_tx.GetHash();\n+        valid_with_witness_tx.vin[0].prevout.n = 1;\n+        valid_with_witness_tx.vout.resize(1);\n+        valid_with_witness_tx.vout[0].nValue = 11*CENT;\n+        valid_with_witness_tx.vout[0].scriptPubKey = p2pk_scriptPubKey;\n+\n+        // Sign\n+        SignatureData sigdata;\n+        ProduceSignature(MutableTransactionSignatureCreator(&keystore, &valid_with_witness_tx, 0, 11*CENT, SIGHASH_ALL), spend_tx.vout[1].scriptPubKey, sigdata);\n+        UpdateTransaction(valid_with_witness_tx, 0, sigdata);\n+\n+        // This should be valid under all script flags.\n+        ValidateCheckInputsForAllFlags(valid_with_witness_tx, 0, true, false);\n+\n+        // Remove the witness, and check that it is now invalid.\n+        valid_with_witness_tx.vin[0].scriptWitness.SetNull();\n+        ValidateCheckInputsForAllFlags(valid_with_witness_tx, SCRIPT_VERIFY_WITNESS, true, false);\n+    }\n+\n+    {\n+        // Test a transaction with multiple inputs.\n+        CMutableTransaction tx;\n+\n+        tx.nVersion = 1;\n+        tx.vin.resize(2);\n+        tx.vin[0].prevout.hash = spend_tx.GetHash();\n+        tx.vin[0].prevout.n = 0;\n+        tx.vin[1].prevout.hash = spend_tx.GetHash();\n+        tx.vin[1].prevout.n = 1;\n+        tx.vout.resize(1);\n+        tx.vout[0].nValue = 22*CENT;\n+        tx.vout[0].scriptPubKey = p2pk_scriptPubKey;\n+\n+        // Sign\n+        for (int i=0; i<2; ++i) {\n+            SignatureData sigdata;\n+            ProduceSignature(MutableTransactionSignatureCreator(&keystore, &tx, i, 11*CENT, SIGHASH_ALL), spend_tx.vout[i].scriptPubKey, sigdata);\n+            UpdateTransaction(tx, i, sigdata);\n+        }\n+\n+        // This should be valid under all script flags\n+        ValidateCheckInputsForAllFlags(tx, 0, true, false);\n+\n+        // Check that if the second input is invalid, but the first input is\n+        // valid, the transaction is not cached.\n+        // Invalidate vin[1]\n+        tx.vin[1].scriptWitness.SetNull();\n+\n+        CValidationState state;\n+        PrecomputedTransactionData txdata(tx);\n+        // This transaction is now invalid under segwit, because of the second input.\n+        BOOST_CHECK(!CheckInputs(tx, state, pcoinsTip, true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true, true, txdata, nullptr));\n+\n+        std::vector<CScriptCheck> scriptchecks;\n+        // Make sure this transaction was not cached (ie because the first\n+        // input was valid)\n+        BOOST_CHECK(CheckInputs(tx, state, pcoinsTip, true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true, true, txdata, &scriptchecks));\n+        // Should get 2 script checks back -- caching is on a whole-transaction basis.\n+        BOOST_CHECK_EQUAL(scriptchecks.size(), 2);\n+    }\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "975cbcc79ffbbfdf3e8bae49ed57cba013bd39e4",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 156,
        "deletions": 39,
        "changes": 195,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2935b469ae96a3203bb997a6eddc098903b336ce/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2935b469ae96a3203bb997a6eddc098903b336ce/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2935b469ae96a3203bb997a6eddc098903b336ce",
        "patch": "@@ -14,6 +14,7 @@\n #include \"consensus/merkle.h\"\n #include \"consensus/tx_verify.h\"\n #include \"consensus/validation.h\"\n+#include \"cuckoocache.h\"\n #include \"fs.h\"\n #include \"hash.h\"\n #include \"init.h\"\n@@ -189,7 +190,7 @@ enum FlushStateMode {\n static bool FlushStateToDisk(const CChainParams& chainParams, CValidationState &state, FlushStateMode mode, int nManualPruneHeight=0);\n static void FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPruneHeight);\n static void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight);\n-static bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks = NULL);\n+bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks = nullptr);\n static FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n \n bool CheckFinalTx(const CTransaction &tx, int flags)\n@@ -312,6 +313,9 @@ bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp, bool\n     return EvaluateSequenceLocks(index, lockPair);\n }\n \n+// Returns the script flags which should be checked for a given block\n+static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& chainparams);\n+\n static void LimitMempoolSize(CTxMemPool& pool, size_t limit, unsigned long age) {\n     int expired = pool.Expire(GetTime() - age);\n     if (expired != 0) {\n@@ -395,6 +399,42 @@ void UpdateMempoolForReorg(DisconnectedBlockTransactions &disconnectpool, bool f\n     LimitMempoolSize(mempool, GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n }\n \n+// Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n+// were somehow broken and returning the wrong scriptPubKeys\n+static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &view, CTxMemPool& pool,\n+                 unsigned int flags, bool cacheSigStore, PrecomputedTransactionData& txdata) {\n+    AssertLockHeld(cs_main);\n+\n+    // pool.cs should be locked already, but go ahead and re-take the lock here\n+    // to enforce that mempool doesn't change between when we check the view\n+    // and when we actually call through to CheckInputs\n+    LOCK(pool.cs);\n+\n+    assert(!tx.IsCoinBase());\n+    for (const CTxIn& txin : tx.vin) {\n+        const Coin& coin = view.AccessCoin(txin.prevout);\n+\n+        // At this point we haven't actually checked if the coins are all\n+        // available (or shouldn't assume we have, since CheckInputs does).\n+        // So we just return failure if the inputs are not available here,\n+        // and then only have to check equivalence for available inputs.\n+        if (coin.IsSpent()) return false;\n+\n+        const CTransactionRef& txFrom = pool.get(txin.prevout.hash);\n+        if (txFrom) {\n+            assert(txFrom->GetHash() == txin.prevout.hash);\n+            assert(txFrom->vout.size() > txin.prevout.n);\n+            assert(txFrom->vout[txin.prevout.n] == coin.out);\n+        } else {\n+            const Coin& coinFromDisk = pcoinsTip->AccessCoin(txin.prevout);\n+            assert(!coinFromDisk.IsSpent());\n+            assert(coinFromDisk.out == coin.out);\n+        }\n+    }\n+\n+    return CheckInputs(tx, state, view, true, flags, cacheSigStore, true, txdata);\n+}\n+\n static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx, bool fLimitFree,\n                               bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n                               bool fOverrideMempoolLimit, const CAmount& nAbsurdFee, std::vector<COutPoint>& coins_to_uncache)\n@@ -751,32 +791,51 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n         PrecomputedTransactionData txdata(tx);\n-        if (!CheckInputs(tx, state, view, true, scriptVerifyFlags, true, txdata)) {\n+        if (!CheckInputs(tx, state, view, true, scriptVerifyFlags, true, false, txdata)) {\n             // SCRIPT_VERIFY_CLEANSTACK requires SCRIPT_VERIFY_WITNESS, so we\n             // need to turn both off, and compare against just turning off CLEANSTACK\n             // to see if the failure is specifically due to witness validation.\n             CValidationState stateDummy; // Want reported failures to be from first CheckInputs\n-            if (!tx.HasWitness() && CheckInputs(tx, stateDummy, view, true, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true, txdata) &&\n-                !CheckInputs(tx, stateDummy, view, true, scriptVerifyFlags & ~SCRIPT_VERIFY_CLEANSTACK, true, txdata)) {\n+            if (!tx.HasWitness() && CheckInputs(tx, stateDummy, view, true, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true, false, txdata) &&\n+                !CheckInputs(tx, stateDummy, view, true, scriptVerifyFlags & ~SCRIPT_VERIFY_CLEANSTACK, true, false, txdata)) {\n                 // Only the witness is missing, so the transaction itself may be fine.\n                 state.SetCorruptionPossible();\n             }\n             return false; // state filled in by CheckInputs\n         }\n \n-        // Check again against just the consensus-critical mandatory script\n-        // verification flags, in case of bugs in the standard flags that cause\n+        // Check again against the current block tip's script verification\n+        // flags to cache our script execution flags. This is, of course,\n+        // useless if the next block has different script flags from the\n+        // previous one, but because the cache tracks script flags for us it\n+        // will auto-invalidate and we'll just have a few blocks of extra\n+        // misses on soft-fork activation.\n+        //\n+        // This is also useful in case of bugs in the standard flags that cause\n         // transactions to pass as valid when they're actually invalid. For\n         // instance the STRICTENC flag was incorrectly allowing certain\n         // CHECKSIG NOT scripts to pass, even though they were invalid.\n         //\n         // There is a similar check in CreateNewBlock() to prevent creating\n-        // invalid blocks, however allowing such transactions into the mempool\n-        // can be exploited as a DoS attack.\n-        if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS, true, txdata))\n+        // invalid blocks (using TestBlockValidity), however allowing such\n+        // transactions into the mempool can be exploited as a DoS attack.\n+        unsigned int currentBlockScriptVerifyFlags = GetBlockScriptFlags(chainActive.Tip(), Params().GetConsensus());\n+        if (!CheckInputsFromMempoolAndCache(tx, state, view, pool, currentBlockScriptVerifyFlags, true, txdata))\n         {\n-            return error(\"%s: BUG! PLEASE REPORT THIS! ConnectInputs failed against MANDATORY but not STANDARD flags %s, %s\",\n-                __func__, hash.ToString(), FormatStateMessage(state));\n+            // If we're using promiscuousmempoolflags, we may hit this normally\n+            // Check if current block has some flags that scriptVerifyFlags\n+            // does not before printing an ominous warning\n+            if (!(~scriptVerifyFlags & currentBlockScriptVerifyFlags)) {\n+                return error(\"%s: BUG! PLEASE REPORT THIS! ConnectInputs failed against latest-block but not STANDARD flags %s, %s\",\n+                    __func__, hash.ToString(), FormatStateMessage(state));\n+            } else {\n+                if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS, true, false, txdata)) {\n+                    return error(\"%s: ConnectInputs failed against MANDATORY but not STANDARD flags due to promiscuous mempool %s, %s\",\n+                        __func__, hash.ToString(), FormatStateMessage(state));\n+                } else {\n+                    LogPrintf(\"Warning: -promiscuousmempool flags set to not include currently enforced soft forks, this may break mining or otherwise cause instability!\\n\");\n+                }\n+            }\n         }\n \n         // Remove conflicting transactions from the mempool\n@@ -1152,12 +1211,34 @@ int GetSpendHeight(const CCoinsViewCache& inputs)\n     return pindexPrev->nHeight + 1;\n }\n \n+\n+static CuckooCache::cache<uint256, SignatureCacheHasher> scriptExecutionCache;\n+static uint256 scriptExecutionCacheNonce(GetRandHash());\n+\n+void InitScriptExecutionCache() {\n+    // nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,\n+    // setup_bytes creates the minimum possible cache (2 elements).\n+    size_t nMaxCacheSize = std::min(std::max((int64_t)0, GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n+    size_t nElems = scriptExecutionCache.setup_bytes(nMaxCacheSize);\n+    LogPrintf(\"Using %zu MiB out of %zu/2 requested for script execution cache, able to store %zu elements\\n\",\n+            (nElems*sizeof(uint256)) >>20, (nMaxCacheSize*2)>>20, nElems);\n+}\n+\n /**\n  * Check whether all inputs of this transaction are valid (no double spends, scripts & sigs, amounts)\n- * This does not modify the UTXO set. If pvChecks is not NULL, script checks are pushed onto it\n- * instead of being performed inline.\n+ * This does not modify the UTXO set.\n+ *\n+ * If pvChecks is not NULL, script checks are pushed onto it instead of being performed inline. Any\n+ * script checks which are not necessary (eg due to script execution cache hits) are, obviously,\n+ * not pushed onto pvChecks/run.\n+ *\n+ * Setting cacheSigStore/cacheFullScriptStore to false will remove elements from the corresponding cache\n+ * which are matched. This is useful for checking blocks where we will likely never need the cache\n+ * entry again.\n+ *\n+ * Non-static (and re-declared) in src/test/txvalidationcache_tests.cpp\n  */\n-static bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks)\n+bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks)\n {\n     if (!tx.IsCoinBase())\n     {\n@@ -1177,6 +1258,21 @@ static bool CheckInputs(const CTransaction& tx, CValidationState &state, const C\n         // Of course, if an assumed valid block is invalid due to false scriptSigs\n         // this optimization would allow an invalid chain to be accepted.\n         if (fScriptChecks) {\n+            // First check if script executions have been cached with the same\n+            // flags. Note that this assumes that the inputs provided are\n+            // correct (ie that the transaction hash which is in tx's prevouts\n+            // properly commits to the scriptPubKey in the inputs view of that\n+            // transaction).\n+            uint256 hashCacheEntry;\n+            // We only use the first 19 bytes of nonce to avoid a second SHA\n+            // round - giving us 19 + 32 + 4 = 55 bytes (+ 8 + 1 = 64)\n+            static_assert(55 - sizeof(flags) - 32 >= 128/8, \"Want at least 128 bits of nonce for script execution cache\");\n+            CSHA256().Write(scriptExecutionCacheNonce.begin(), 55 - sizeof(flags) - 32).Write(tx.GetWitnessHash().begin(), 32).Write((unsigned char*)&flags, sizeof(flags)).Finalize(hashCacheEntry.begin());\n+            AssertLockHeld(cs_main); //TODO: Remove this requirement by making CuckooCache not require external locks\n+            if (scriptExecutionCache.contains(hashCacheEntry, !cacheFullScriptStore)) {\n+                return true;\n+            }\n+\n             for (unsigned int i = 0; i < tx.vin.size(); i++) {\n                 const COutPoint &prevout = tx.vin[i].prevout;\n                 const Coin& coin = inputs.AccessCoin(prevout);\n@@ -1191,7 +1287,7 @@ static bool CheckInputs(const CTransaction& tx, CValidationState &state, const C\n                 const CAmount amount = coin.out.nValue;\n \n                 // Verify signature\n-                CScriptCheck check(scriptPubKey, amount, tx, i, flags, cacheStore, &txdata);\n+                CScriptCheck check(scriptPubKey, amount, tx, i, flags, cacheSigStore, &txdata);\n                 if (pvChecks) {\n                     pvChecks->push_back(CScriptCheck());\n                     check.swap(pvChecks->back());\n@@ -1204,7 +1300,7 @@ static bool CheckInputs(const CTransaction& tx, CValidationState &state, const C\n                         // avoid splitting the network between upgraded and\n                         // non-upgraded nodes.\n                         CScriptCheck check2(scriptPubKey, amount, tx, i,\n-                                flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS, cacheStore, &txdata);\n+                                flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS, cacheSigStore, &txdata);\n                         if (check2())\n                             return state.Invalid(false, REJECT_NONSTANDARD, strprintf(\"non-mandatory-script-verify-flag (%s)\", ScriptErrorString(check.GetScriptError())));\n                     }\n@@ -1218,6 +1314,12 @@ static bool CheckInputs(const CTransaction& tx, CValidationState &state, const C\n                     return state.DoS(100,false, REJECT_INVALID, strprintf(\"mandatory-script-verify-flag-failed (%s)\", ScriptErrorString(check.GetScriptError())));\n                 }\n             }\n+\n+            if (cacheFullScriptStore && !pvChecks) {\n+                // We executed all of the provided scripts, and were told to\n+                // cache the result. Do so now.\n+                scriptExecutionCache.insert(hashCacheEntry);\n+            }\n         }\n     }\n \n@@ -1481,6 +1583,41 @@ class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n // Protected by cs_main\n static ThresholdConditionCache warningcache[VERSIONBITS_NUM_BITS];\n \n+static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& consensusparams) {\n+    AssertLockHeld(cs_main);\n+\n+    // BIP16 didn't become active until Apr 1 2012\n+    int64_t nBIP16SwitchTime = 1333238400;\n+    bool fStrictPayToScriptHash = (pindex->GetBlockTime() >= nBIP16SwitchTime);\n+\n+    unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n+\n+    // Start enforcing the DERSIG (BIP66) rule\n+    if (pindex->nHeight >= consensusparams.BIP66Height) {\n+        flags |= SCRIPT_VERIFY_DERSIG;\n+    }\n+\n+    // Start enforcing CHECKLOCKTIMEVERIFY (BIP65) rule\n+    if (pindex->nHeight >= consensusparams.BIP65Height) {\n+        flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n+    }\n+\n+    // Start enforcing BIP68 (sequence locks) and BIP112 (CHECKSEQUENCEVERIFY) using versionbits logic.\n+    if (VersionBitsState(pindex->pprev, consensusparams, Consensus::DEPLOYMENT_CSV, versionbitscache) == THRESHOLD_ACTIVE) {\n+        flags |= SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;\n+    }\n+\n+    // Start enforcing WITNESS rules using versionbits logic.\n+    if (IsWitnessEnabled(pindex->pprev, consensusparams)) {\n+        flags |= SCRIPT_VERIFY_WITNESS;\n+        flags |= SCRIPT_VERIFY_NULLDUMMY;\n+    }\n+\n+    return flags;\n+}\n+\n+\n+\n static int64_t nTimeCheck = 0;\n static int64_t nTimeForks = 0;\n static int64_t nTimeVerify = 0;\n@@ -1584,34 +1721,14 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n         }\n     }\n \n-    // BIP16 didn't become active until Apr 1 2012\n-    int64_t nBIP16SwitchTime = 1333238400;\n-    bool fStrictPayToScriptHash = (pindex->GetBlockTime() >= nBIP16SwitchTime);\n-\n-    unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n-\n-    // Start enforcing the DERSIG (BIP66) rule\n-    if (pindex->nHeight >= chainparams.GetConsensus().BIP66Height) {\n-        flags |= SCRIPT_VERIFY_DERSIG;\n-    }\n-\n-    // Start enforcing CHECKLOCKTIMEVERIFY (BIP65) rule\n-    if (pindex->nHeight >= chainparams.GetConsensus().BIP65Height) {\n-        flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n-    }\n-\n     // Start enforcing BIP68 (sequence locks) and BIP112 (CHECKSEQUENCEVERIFY) using versionbits logic.\n     int nLockTimeFlags = 0;\n     if (VersionBitsState(pindex->pprev, chainparams.GetConsensus(), Consensus::DEPLOYMENT_CSV, versionbitscache) == THRESHOLD_ACTIVE) {\n-        flags |= SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;\n         nLockTimeFlags |= LOCKTIME_VERIFY_SEQUENCE;\n     }\n \n-    // Start enforcing WITNESS rules using versionbits logic.\n-    if (IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) {\n-        flags |= SCRIPT_VERIFY_WITNESS;\n-        flags |= SCRIPT_VERIFY_NULLDUMMY;\n-    }\n+    // Get the script flags for this block\n+    unsigned int flags = GetBlockScriptFlags(pindex, chainparams.GetConsensus());\n \n     int64_t nTime2 = GetTimeMicros(); nTimeForks += nTime2 - nTime1;\n     LogPrint(BCLog::BENCH, \"    - Fork checks: %.2fms [%.2fs]\\n\", 0.001 * (nTime2 - nTime1), nTimeForks * 0.000001);\n@@ -1672,7 +1789,7 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n \n             std::vector<CScriptCheck> vChecks;\n             bool fCacheResults = fJustCheck; /* Don't cache results if we're actually connecting blocks (still consult the cache, though) */\n-            if (!CheckInputs(tx, state, view, fScriptChecks, flags, fCacheResults, txdata[i], nScriptCheckThreads ? &vChecks : NULL))\n+            if (!CheckInputs(tx, state, view, fScriptChecks, flags, fCacheResults, fCacheResults, txdata[i], nScriptCheckThreads ? &vChecks : NULL))\n                 return error(\"ConnectBlock(): CheckInputs on %s failed with %s\",\n                     tx.GetHash().ToString(), FormatStateMessage(state));\n             control.Add(vChecks);"
      },
      {
        "sha": "a9f995abb887e873a71c7152e83ff665e3091f82",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2935b469ae96a3203bb997a6eddc098903b336ce/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2935b469ae96a3203bb997a6eddc098903b336ce/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=2935b469ae96a3203bb997a6eddc098903b336ce",
        "patch": "@@ -393,6 +393,9 @@ class CScriptCheck\n     ScriptError GetScriptError() const { return error; }\n };\n \n+/** Initializes the script-execution cache */\n+void InitScriptExecutionCache();\n+\n \n /** Functions for disk access for blocks */\n bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus::Params& consensusParams);"
      }
    ]
  },
  {
    "sha": "b8bb4257fe7b2f077e1c8b4145ff13d1041787e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOGJiNDI1N2ZlN2IyZjA3N2UxYzhiNDE0NWZmMTNkMTA0MTc4N2U4",
    "commit": {
      "author": {
        "name": "Michael Rotarius",
        "email": "michael-rotarius@rotamedia.de",
        "date": "2017-06-08T21:25:53Z"
      },
      "committer": {
        "name": "Michael Rotarius",
        "email": "michael-rotarius@rotamedia.de",
        "date": "2017-06-30T11:21:08Z"
      },
      "message": "REST/RPC example update",
      "tree": {
        "sha": "7d313b0717449dda6612ed6000a95ce8970dbfa4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d313b0717449dda6612ed6000a95ce8970dbfa4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8bb4257fe7b2f077e1c8b4145ff13d1041787e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8bb4257fe7b2f077e1c8b4145ff13d1041787e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b8bb4257fe7b2f077e1c8b4145ff13d1041787e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8bb4257fe7b2f077e1c8b4145ff13d1041787e8/comments",
    "author": {
      "login": "Mirobit",
      "id": 13236924,
      "node_id": "MDQ6VXNlcjEzMjM2OTI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/13236924?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Mirobit",
      "html_url": "https://github.com/Mirobit",
      "followers_url": "https://api.github.com/users/Mirobit/followers",
      "following_url": "https://api.github.com/users/Mirobit/following{/other_user}",
      "gists_url": "https://api.github.com/users/Mirobit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Mirobit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Mirobit/subscriptions",
      "organizations_url": "https://api.github.com/users/Mirobit/orgs",
      "repos_url": "https://api.github.com/users/Mirobit/repos",
      "events_url": "https://api.github.com/users/Mirobit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Mirobit/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Mirobit",
      "id": 13236924,
      "node_id": "MDQ6VXNlcjEzMjM2OTI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/13236924?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Mirobit",
      "html_url": "https://github.com/Mirobit",
      "followers_url": "https://api.github.com/users/Mirobit/followers",
      "following_url": "https://api.github.com/users/Mirobit/following{/other_user}",
      "gists_url": "https://api.github.com/users/Mirobit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Mirobit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Mirobit/subscriptions",
      "organizations_url": "https://api.github.com/users/Mirobit/orgs",
      "repos_url": "https://api.github.com/users/Mirobit/repos",
      "events_url": "https://api.github.com/users/Mirobit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Mirobit/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2935b469ae96a3203bb997a6eddc098903b336ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2935b469ae96a3203bb997a6eddc098903b336ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2935b469ae96a3203bb997a6eddc098903b336ce"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 18,
      "deletions": 15
    },
    "files": [
      {
        "sha": "caf6782886520aa050869489f237a8323b250475",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 16,
        "deletions": 12,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8bb4257fe7b2f077e1c8b4145ff13d1041787e8/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8bb4257fe7b2f077e1c8b4145ff13d1041787e8/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=b8bb4257fe7b2f077e1c8b4145ff13d1041787e8",
        "patch": "@@ -40,11 +40,13 @@ Only supports JSON as output format.\n * headers : (numeric) the current number of headers we have validated\n * bestblockhash : (string) the hash of the currently best block\n * difficulty : (numeric) the current difficulty\n+* mediantime : (numeric) the median time of the 11 blocks before the most recent block on the blockchain\n * verificationprogress : (numeric) estimate of verification progress [0..1]\n * chainwork : (string) total amount of work in active chain, in hexadecimal\n * pruned : (boolean) if the blocks are subject to pruning\n * pruneheight : (numeric) heighest block available\n * softforks : (array) status of softforks in progress\n+* bip9_softforks : (object) status of BIP9 softforks in progress\n \n ####Query UTXO set\n `GET /rest/getutxos/<checkmempool>/<txid>-<n>/<txid>-<n>/.../<txid>-<n>.<bin|hex|json>`\n@@ -57,25 +59,25 @@ Example:\n ```\n $ curl localhost:18332/rest/getutxos/checkmempool/b2cdfd7b89def827ff8af7cd9bff7627ff72e5e8b0f71210f92ea7a4000c5d75-0.json 2>/dev/null | json_pp\n {\n-   \"chaintipHash\" : \"00000000fb01a7f3745a717f8caebee056c484e6e0bfe4a9591c235bb70506fb\",\n    \"chainHeight\" : 325347,\n+   \"chaintipHash\" : \"00000000fb01a7f3745a717f8caebee056c484e6e0bfe4a9591c235bb70506fb\",\n+   \"bitmap\": \"1\",\n    \"utxos\" : [\n       {\n+         \"txvers\" : 1\n+         \"height\" : 2147483647,\n+         \"value\" : 8.8687,\t\t \n          \"scriptPubKey\" : {\n-            \"addresses\" : [\n-               \"mi7as51dvLJsizWnTMurtRmrP8hG2m1XvD\"\n-            ],\n-            \"type\" : \"pubkeyhash\",\n+            \"asm\" : \"OP_DUP OP_HASH160 1c7cebb529b86a04c683dfa87be49de35bcf589e OP_EQUALVERIFY OP_CHECKSIG\",\n             \"hex\" : \"76a9141c7cebb529b86a04c683dfa87be49de35bcf589e88ac\",\n             \"reqSigs\" : 1,\n-            \"asm\" : \"OP_DUP OP_HASH160 1c7cebb529b86a04c683dfa87be49de35bcf589e OP_EQUALVERIFY OP_CHECKSIG\"\n-         },\n-         \"value\" : 8.8687,\n-         \"height\" : 2147483647,\n-         \"txvers\" : 1\n+            \"type\" : \"pubkeyhash\",\n+            \"addresses\" : [\n+               \"mi7as51dvLJsizWnTMurtRmrP8hG2m1XvD\"\n+            ]\n+         }\n       }\n-   ],\n-   \"bitmap\" : \"1\"\n+   ]\n }\n ```\n \n@@ -87,6 +89,8 @@ Only supports JSON as output format.\n * size : (numeric) the number of transactions in the TX mempool\n * bytes : (numeric) size of the TX mempool in bytes\n * usage : (numeric) total TX mempool memory usage\n+* maxmempool : (numeric) maximum memory usage for the mempool in bytes\n+* mempoolminfee : (numeric) minimum feerate (BTC per KB) for tx to be accepted\n \n `GET /rest/mempool/contents.json`\n "
      },
      {
        "sha": "e9d255b17e4813ec585ed79b30ec47d3ebc87b14",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8bb4257fe7b2f077e1c8b4145ff13d1041787e8/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8bb4257fe7b2f077e1c8b4145ff13d1041787e8/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=b8bb4257fe7b2f077e1c8b4145ff13d1041787e8",
        "patch": "@@ -302,9 +302,8 @@ UniValue getaddednodeinfo(const JSONRPCRequest& request)\n             \"  ,...\\n\"\n             \"]\\n\"\n             \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getaddednodeinfo\", \"true\")\n-            + HelpExampleCli(\"getaddednodeinfo\", \"true \\\"192.168.0.201\\\"\")\n-            + HelpExampleRpc(\"getaddednodeinfo\", \"true, \\\"192.168.0.201\\\"\")\n+            + HelpExampleCli(\"getaddednodeinfo\", \"\\\"192.168.0.201\\\"\")\n+            + HelpExampleRpc(\"getaddednodeinfo\", \"\\\"192.168.0.201\\\"\")\n         );\n \n     if(!g_connman)"
      }
    ]
  },
  {
    "sha": "f2f1d0a83e176f5fa105becdaa6398ec993630f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMmYxZDBhODNlMTc2ZjVmYTEwNWJlY2RhYTYzOThlYzk5MzYzMGYw",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-06-27T03:23:48Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-06-30T12:43:23Z"
      },
      "message": "document script-based return fields for validateaddress",
      "tree": {
        "sha": "0a10c9008217d0417d3373f38c0a72b9a27f7f92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a10c9008217d0417d3373f38c0a72b9a27f7f92"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2f1d0a83e176f5fa105becdaa6398ec993630f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2f1d0a83e176f5fa105becdaa6398ec993630f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2f1d0a83e176f5fa105becdaa6398ec993630f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2f1d0a83e176f5fa105becdaa6398ec993630f0/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c2098ad120913776421bf670aadf69b01c534bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c2098ad120913776421bf670aadf69b01c534bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c2098ad120913776421bf670aadf69b01c534bf"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fcbbe1ceed0dfa7706ee33d45547f7d4756d21d2",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2f1d0a83e176f5fa105becdaa6398ec993630f0/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2f1d0a83e176f5fa105becdaa6398ec993630f0/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=f2f1d0a83e176f5fa105becdaa6398ec993630f0",
        "patch": "@@ -174,6 +174,14 @@ UniValue validateaddress(const JSONRPCRequest& request)\n             \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n             \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n             \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"\n+            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n+            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript\\n\"\n+            \"    [\\n\"\n+            \"      \\\"address\\\"\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output\\n\"\n             \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n             \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n             \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. The account associated with the address, \\\"\\\" is the default account\\n\""
      }
    ]
  },
  {
    "sha": "1cc251f50fb2f9cffa762b28e5d8685af4273663",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxY2MyNTFmNTBmYjJmOWNmZmE3NjJiMjhlNWQ4Njg1YWY0MjczNjYz",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2017-07-02T02:48:00Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2017-07-02T02:48:00Z"
      },
      "message": "Explicitly search for bdb5.3.\n\nSome systems do not symlink the major version to the minor version.",
      "tree": {
        "sha": "0538b43f88aba34efc27d782785d23f93c78b25a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0538b43f88aba34efc27d782785d23f93c78b25a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1cc251f50fb2f9cffa762b28e5d8685af4273663",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cc251f50fb2f9cffa762b28e5d8685af4273663",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1cc251f50fb2f9cffa762b28e5d8685af4273663",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cc251f50fb2f9cffa762b28e5d8685af4273663/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2935b469ae96a3203bb997a6eddc098903b336ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2935b469ae96a3203bb997a6eddc098903b336ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2935b469ae96a3203bb997a6eddc098903b336ce"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b9bf7bf46e54971d3f0f3b9353a707fce3ddb4a3",
        "filename": "build-aux/m4/bitcoin_find_bdb48.m4",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cc251f50fb2f9cffa762b28e5d8685af4273663/build-aux/m4/bitcoin_find_bdb48.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cc251f50fb2f9cffa762b28e5d8685af4273663/build-aux/m4/bitcoin_find_bdb48.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_find_bdb48.m4?ref=1cc251f50fb2f9cffa762b28e5d8685af4273663",
        "patch": "@@ -12,7 +12,7 @@ AC_DEFUN([BITCOIN_FIND_BDB48],[\n     bdbpath=X\n     bdb48path=X\n     bdbdirlist=\n-    for _vn in 4.8 48 4 5 ''; do\n+    for _vn in 4.8 48 4 5 5.3 ''; do\n       for _pfx in b lib ''; do\n         bdbdirlist=\"$bdbdirlist ${_pfx}db${_vn}\"\n       done"
      }
    ]
  },
  {
    "sha": "959dd8781ed8982df06b52dd3cecc996cf30f76d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTlkZDg3ODFlZDg5ODJkZjA2YjUyZGQzY2VjYzk5NmNmMzBmNzZk",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-02T19:57:24Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-02T20:00:27Z"
      },
      "message": "Avoid printing incorrect block indexing time due to uninitialized variable\n\nFixes:\n\ninit.cpp: In function \u2018bool AppInitMain(boost::thread_group&, CScheduler&)\u2019:\ninit.cpp:1499:56: warning: \u2018nStart\u2019 may be used uninitialized in this function [-Wmaybe-uninitialized]\n     LogPrintf(\" block index %15dms\\n\", GetTimeMillis() - nStart);\n                                                        ^",
      "tree": {
        "sha": "15b295f8c1b89b55c1f22bd09cb86f9105ce02b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15b295f8c1b89b55c1f22bd09cb86f9105ce02b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/959dd8781ed8982df06b52dd3cecc996cf30f76d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/959dd8781ed8982df06b52dd3cecc996cf30f76d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/959dd8781ed8982df06b52dd3cecc996cf30f76d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/959dd8781ed8982df06b52dd3cecc996cf30f76d/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2935b469ae96a3203bb997a6eddc098903b336ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2935b469ae96a3203bb997a6eddc098903b336ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2935b469ae96a3203bb997a6eddc098903b336ce"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "61b26d3618c8ed7359acf3d4e073c6a310ba3ab4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/959dd8781ed8982df06b52dd3cecc996cf30f76d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/959dd8781ed8982df06b52dd3cecc996cf30f76d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=959dd8781ed8982df06b52dd3cecc996cf30f76d",
        "patch": "@@ -1496,7 +1496,9 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         LogPrintf(\"Shutdown requested. Exiting.\\n\");\n         return false;\n     }\n-    LogPrintf(\" block index %15dms\\n\", GetTimeMillis() - nStart);\n+    if (fLoaded) {\n+        LogPrintf(\" block index %15dms\\n\", GetTimeMillis() - nStart);\n+    }\n \n     fs::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n     CAutoFile est_filein(fsbridge::fopen(est_path, \"rb\"), SER_DISK, CLIENT_VERSION);"
      }
    ]
  },
  {
    "sha": "27c63dc059f17f86bfa2ece0eb456b75340498fe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyN2M2M2RjMDU5ZjE3Zjg2YmZhMmVjZTBlYjQ1NmI3NTM0MDQ5OGZl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-29T13:52:13Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-02T20:55:13Z"
      },
      "message": "[tests] nits in dbcrash.py",
      "tree": {
        "sha": "b94e4f2238c3dd9ad5dade4c5dd6ae751868d692",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b94e4f2238c3dd9ad5dade4c5dd6ae751868d692"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27c63dc059f17f86bfa2ece0eb456b75340498fe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27c63dc059f17f86bfa2ece0eb456b75340498fe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27c63dc059f17f86bfa2ece0eb456b75340498fe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27c63dc059f17f86bfa2ece0eb456b75340498fe/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2935b469ae96a3203bb997a6eddc098903b336ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2935b469ae96a3203bb997a6eddc098903b336ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2935b469ae96a3203bb997a6eddc098903b336ce"
      }
    ],
    "stats": {
      "total": 114,
      "additions": 65,
      "deletions": 49
    },
    "files": [
      {
        "sha": "8339305f5e45250d40540c8aebbfbec3a2c3dccf",
        "filename": "test/functional/dbcrash.py",
        "status": "modified",
        "additions": 61,
        "deletions": 48,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27c63dc059f17f86bfa2ece0eb456b75340498fe/test/functional/dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27c63dc059f17f86bfa2ece0eb456b75340498fe/test/functional/dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/dbcrash.py?ref=27c63dc059f17f86bfa2ece0eb456b75340498fe",
        "patch": "@@ -2,21 +2,7 @@\n # Copyright (c) 2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test recovery from a crash during chainstate writing.\"\"\"\n-\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.script import *\n-from test_framework.mininode import *\n-import random\n-try:\n-    import http.client as httplib\n-except ImportError:\n-    import httplib\n-import errno\n-\n-'''\n-Test structure:\n+\"\"\"Test recovery from a crash during chainstate writing.\n \n - 4 nodes\n   * node0, node1, and node2 will have different dbcrash ratios, and different\n@@ -37,11 +23,26 @@\n        * submit block to node\n        * if node crashed on/after submitting:\n          - restart until recovery succeeds\n-         - check that utxo matches node3 using gettxoutsetinfo\n-'''\n+         - check that utxo matches node3 using gettxoutsetinfo\"\"\"\n \n-class ChainstateWriteCrashTest(BitcoinTestFramework):\n+import errno\n+import http.client\n+import random\n+import sys\n+import time\n+\n+from test_framework.mininode import *\n+from test_framework.script import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+HTTP_DISCONNECT_ERRORS = [http.client.CannotSendRequest]\n+try:\n+    HTTP_DISCONNECT_ERRORS.append(http.client.RemoteDisconnected)\n+except AttributeError:\n+    pass\n \n+class ChainstateWriteCrashTest(BitcoinTestFramework):\n     def __init__(self):\n         super().__init__()\n         self.num_nodes = 4\n@@ -50,32 +51,28 @@ def __init__(self):\n         # Set -maxmempool=0 to turn off mempool memory sharing with dbcache\n         # Set -rpcservertimeout=900 to reduce socket disconnects in this\n         # long-running test\n-        self.base_args = [\"-limitdescendantsize=0\", \"-maxmempool=0\", \"-rpcservertimeout=900\"]\n+        self.base_args = [\"-limitdescendantsize=0\", \"-maxmempool=0\", \"-rpcservertimeout=900\", \"-dbbatchsize=200000\"]\n \n         # Set different crash ratios and cache sizes.  Note that not all of\n         # -dbcache goes to pcoinsTip.\n-        self.node0_args = [\"-dbcrashratio=8\", \"-dbcache=4\", \"-dbbatchsize=200000\"] + self.base_args\n-        self.node1_args = [\"-dbcrashratio=16\", \"-dbcache=8\", \"-dbbatchsize=200000\"] + self.base_args\n-        self.node2_args = [\"-dbcrashratio=24\", \"-dbcache=16\", \"-dbbatchsize=200000\"] + self.base_args\n+        self.node0_args = [\"-dbcrashratio=8\", \"-dbcache=4\"] + self.base_args\n+        self.node1_args = [\"-dbcrashratio=16\", \"-dbcache=8\"] + self.base_args\n+        self.node2_args = [\"-dbcrashratio=24\", \"-dbcache=16\"] + self.base_args\n \n         # Node3 is a normal node with default args, except will mine full blocks\n         self.node3_args = [\"-blockmaxweight=4000000\"]\n         self.extra_args = [self.node0_args, self.node1_args, self.node2_args, self.node3_args]\n \n-        # We'll track some test coverage statistics\n-        self.restart_counts = [0, 0, 0] # Track the restarts for nodes 0-2\n-        self.crashed_on_restart = 0     # Track count of crashes during recovery\n-\n     def setup_network(self):\n         self.setup_nodes()\n         # Leave them unconnected, we'll use submitblock directly in this test\n \n-    # Starts up a given node id, waits for the tip to reach the given block\n-    # hash, and calculates the utxo hash.  Exceptions on startup should\n-    # indicate node crash (due to -dbcrashratio), in which case we try again.\n-    # Give up after 60 seconds.\n-    # Returns the utxo hash of the given node.\n     def restart_node(self, node_index, expected_tip):\n+        \"\"\"Start up a given node id, wait for the tip to reach the given block hash, and calculate the utxo hash.\n+\n+        Exceptions on startup should indicate node crash (due to -dbcrashratio), in which case we try again. Give up\n+        after 60 seconds. Returns the utxo hash of the given node.\"\"\"\n+\n         time_start = time.time()\n         while time.time() - time_start < 60:\n             try:\n@@ -99,14 +96,23 @@ def restart_node(self, node_index, expected_tip):\n         # and make sure that recovery happens.\n         raise AssertionError(\"Unable to successfully restart node %d in allotted time\", node_index)\n \n-    # Try submitting a block to the given node.\n-    # Catch any exceptions that indicate the node has crashed.\n-    # Returns true if the block was submitted successfully; false otherwise.\n     def submit_block_catch_error(self, node_index, block):\n+        \"\"\"Try submitting a block to the given node.\n+\n+        Catch any exceptions that indicate the node has crashed.\n+        Returns true if the block was submitted successfully; false otherwise.\"\"\"\n+\n         try:\n             self.nodes[node_index].submitblock(block)\n             return True\n-        except (httplib.CannotSendRequest, httplib.RemoteDisconnected) as e:\n+        except http.client.BadStatusLine as e:\n+            # Prior to 3.5 BadStatusLine('') was raised for a remote disconnect error.\n+            if sys.version_info[0] == 3 and sys.version_info[1] < 5 and e.line == \"''\":\n+                self.log.debug(\"node %d submitblock raised exception: %s\", node_index, e)\n+                return False\n+            else:\n+                raise\n+        except tuple(HTTP_DISCONNECT_ERRORS) as e:\n             self.log.debug(\"node %d submitblock raised exception: %s\", node_index, e)\n             return False\n         except OSError as e:\n@@ -118,11 +124,13 @@ def submit_block_catch_error(self, node_index, block):\n                 # Unexpected exception, raise\n                 raise\n \n-    # Use submitblock to sync node3's chain with the other nodes\n-    # If submitblock fails, restart the node and get the new utxo hash.\n     def sync_node3blocks(self, block_hashes):\n-        # If any nodes crash while updating, we'll compare utxo hashes to\n-        # ensure recovery was successful.\n+        \"\"\"Use submitblock to sync node3's chain with the other nodes\n+\n+        If submitblock fails, restart the node and get the new utxo hash.\n+        If any nodes crash while updating, we'll compare utxo hashes to\n+        ensure recovery was successful.\"\"\"\n+\n         node3_utxo_hash = self.nodes[3].gettxoutsetinfo()['hash_serialized_2']\n \n         # Retrieve all the blocks from node3\n@@ -161,9 +169,10 @@ def sync_node3blocks(self, block_hashes):\n                 self.log.debug(\"Checking txoutsetinfo matches for node %d\", i)\n                 assert_equal(nodei_utxo_hash, node3_utxo_hash)\n \n-    # Verify that the utxo hash of each node matches node3.\n-    # Restart any nodes that crash while querying.\n     def verify_utxo_hash(self):\n+        \"\"\"Verify that the utxo hash of each node matches node3.\n+\n+        Restart any nodes that crash while querying.\"\"\"\n         node3_utxo_hash = self.nodes[3].gettxoutsetinfo()['hash_serialized_2']\n         self.log.info(\"Verifying utxo hash matches for all nodes\")\n \n@@ -175,9 +184,8 @@ def verify_utxo_hash(self):\n                 nodei_utxo_hash = self.restart_node(i, self.nodes[3].getbestblockhash())\n             assert_equal(nodei_utxo_hash, node3_utxo_hash)\n \n-\n     def generate_small_transactions(self, node, count, utxo_list):\n-        FEE = 1000 # TODO: replace this with node relay fee based calculation\n+        FEE = 1000  # TODO: replace this with node relay fee based calculation\n         num_transactions = 0\n         random.shuffle(utxo_list)\n         while len(utxo_list) >= 2 and num_transactions < count:\n@@ -186,8 +194,8 @@ def generate_small_transactions(self, node, count, utxo_list):\n             for i in range(2):\n                 utxo = utxo_list.pop()\n                 tx.vin.append(CTxIn(COutPoint(int(utxo['txid'], 16), utxo['vout'])))\n-                input_amount += int(utxo['amount']*COIN)\n-            output_amount = (input_amount - FEE)//3\n+                input_amount += int(utxo['amount'] * COIN)\n+            output_amount = (input_amount - FEE) // 3\n \n             if output_amount <= 0:\n                 # Sanity check -- if we chose inputs that are too small, skip\n@@ -202,6 +210,9 @@ def generate_small_transactions(self, node, count, utxo_list):\n             num_transactions += 1\n \n     def run_test(self):\n+        # Track test coverage statistics\n+        self.restart_counts = [0, 0, 0]  # Track the restarts for nodes 0-2\n+        self.crashed_on_restart = 0      # Track count of crashes during recovery\n \n         # Start by creating a lot of utxos on node3\n         initial_height = self.nodes[3].getblockcount()\n@@ -210,7 +221,7 @@ def run_test(self):\n \n         # Sync these blocks with the other nodes\n         block_hashes_to_sync = []\n-        for height in range(initial_height+1, self.nodes[3].getblockcount()+1):\n+        for height in range(initial_height + 1, self.nodes[3].getblockcount() + 1):\n             block_hashes_to_sync.append(self.nodes[3].getblockhash(height))\n \n         self.log.debug(\"Syncing %d blocks with other nodes\", len(block_hashes_to_sync))\n@@ -233,13 +244,15 @@ def run_test(self):\n             if random_height > starting_tip_height:\n                 # Randomly reorg from this point with some probability (1/4 for\n                 # tip, 1/5 for tip-1, ...)\n-                if random.random() < 1.0/(current_height + 4 - random_height):\n+                if random.random() < 1.0 / (current_height + 4 - random_height):\n                     self.log.debug(\"Invalidating block at height %d\", random_height)\n                     self.nodes[3].invalidateblock(self.nodes[3].getblockhash(random_height))\n \n             # Now generate new blocks until we pass the old tip height\n             self.log.debug(\"Mining longer tip\")\n-            block_hashes = self.nodes[3].generate(current_height+1-self.nodes[3].getblockcount())\n+            block_hashes = []\n+            while current_height + 1 > self.nodes[3].getblockcount():\n+                block_hashes.extend(self.nodes[3].generate(min(10, current_height + 1 - self.nodes[3].getblockcount())))\n             self.log.debug(\"Syncing %d new blocks...\", len(block_hashes))\n             self.sync_node3blocks(block_hashes)\n             utxo_list = self.nodes[3].listunspent()"
      },
      {
        "sha": "8a2d8de50ebc826258cea9b654bf290db2ff826a",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27c63dc059f17f86bfa2ece0eb456b75340498fe/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27c63dc059f17f86bfa2ece0eb456b75340498fe/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=27c63dc059f17f86bfa2ece0eb456b75340498fe",
        "patch": "@@ -412,7 +412,10 @@ def random_transaction(nodes, amount, min_fee, fee_increment, fee_variants):\n # Helper to create at least \"count\" utxos\n # Pass in a fee that is sufficient for relay and mining new transactions.\n def create_confirmed_utxos(fee, node, count):\n-    node.generate(int(0.5 * count) + 101)\n+    to_generate = int(0.5 * count) + 101\n+    while to_generate > 0:\n+        node.generate(min(25, to_generate))\n+        to_generate -= 25\n     utxos = node.listunspent()\n     iterations = count - len(utxos)\n     addr1 = node.getnewaddress()"
      }
    ]
  },
  {
    "sha": "ecb4fc382b3467410dc816fe8644bd865aadcf21",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplY2I0ZmMzODJiMzQ2NzQxMGRjODE2ZmU4NjQ0YmQ4NjVhYWRjZjIx",
    "commit": {
      "author": {
        "name": "Akio Nakamura",
        "email": "nakamura@dgtechnologies.co.jp",
        "date": "2017-07-03T07:29:13Z"
      },
      "committer": {
        "name": "Akio Nakamura",
        "email": "nakamura@dgtechnologies.co.jp",
        "date": "2017-07-03T07:29:13Z"
      },
      "message": "fix typo in help text for removeprunedfunds",
      "tree": {
        "sha": "99df05146cc838328e768152dd5e83349f693771",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/99df05146cc838328e768152dd5e83349f693771"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ecb4fc382b3467410dc816fe8644bd865aadcf21",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecb4fc382b3467410dc816fe8644bd865aadcf21",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ecb4fc382b3467410dc816fe8644bd865aadcf21",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecb4fc382b3467410dc816fe8644bd865aadcf21/comments",
    "author": {
      "login": "AkioNak",
      "id": 24285095,
      "node_id": "MDQ6VXNlcjI0Mjg1MDk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24285095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AkioNak",
      "html_url": "https://github.com/AkioNak",
      "followers_url": "https://api.github.com/users/AkioNak/followers",
      "following_url": "https://api.github.com/users/AkioNak/following{/other_user}",
      "gists_url": "https://api.github.com/users/AkioNak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AkioNak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AkioNak/subscriptions",
      "organizations_url": "https://api.github.com/users/AkioNak/orgs",
      "repos_url": "https://api.github.com/users/AkioNak/repos",
      "events_url": "https://api.github.com/users/AkioNak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AkioNak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "AkioNak",
      "id": 24285095,
      "node_id": "MDQ6VXNlcjI0Mjg1MDk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24285095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AkioNak",
      "html_url": "https://github.com/AkioNak",
      "followers_url": "https://api.github.com/users/AkioNak/followers",
      "following_url": "https://api.github.com/users/AkioNak/following{/other_user}",
      "gists_url": "https://api.github.com/users/AkioNak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AkioNak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AkioNak/subscriptions",
      "organizations_url": "https://api.github.com/users/AkioNak/orgs",
      "repos_url": "https://api.github.com/users/AkioNak/repos",
      "events_url": "https://api.github.com/users/AkioNak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AkioNak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2935b469ae96a3203bb997a6eddc098903b336ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2935b469ae96a3203bb997a6eddc098903b336ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2935b469ae96a3203bb997a6eddc098903b336ce"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b4b5e8c255d55d743f08a096d4a62331bbfa43eb",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecb4fc382b3467410dc816fe8644bd865aadcf21/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecb4fc382b3467410dc816fe8644bd865aadcf21/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=ecb4fc382b3467410dc816fe8644bd865aadcf21",
        "patch": "@@ -362,7 +362,7 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"removeprunedfunds\", \"\\\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\\\"\") +\n             \"\\nAs a JSON-RPC call\\n\"\n-            + HelpExampleRpc(\"removprunedfunds\", \"\\\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\\\"\")\n+            + HelpExampleRpc(\"removeprunedfunds\", \"\\\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\\\"\")\n         );\n \n     LOCK2(cs_main, pwallet->cs_wallet);"
      }
    ]
  },
  {
    "sha": "dd07f47b79628668e29cc0143b21e790100ee445",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDA3ZjQ3Yjc5NjI4NjY4ZTI5Y2MwMTQzYjIxZTc5MDEwMGVlNDQ1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-07-03T07:35:31Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-07-03T07:36:31Z"
      },
      "message": "Merge #10704: [tests] nits in dbcrash.py\n\n27c63dc [tests] nits in dbcrash.py (John Newbery)\n\nTree-SHA512: 2a75feeb65e6147e3337200cde982248bea8977a9585d5ee284d62bbc25f6d7c368754da0083aec37338c8f66cf698ee25bbd9e192df14a9fb976b8f75afa986",
      "tree": {
        "sha": "b94e4f2238c3dd9ad5dade4c5dd6ae751868d692",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b94e4f2238c3dd9ad5dade4c5dd6ae751868d692"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd07f47b79628668e29cc0143b21e790100ee445",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZWfP/AAoJENLqSFDnUoslsqUP/AjIKwr9/g3Yiu19Rhk8iSYi\nRyPDbyutM110MBXGoT7iicZUbXA1CmyoCe7R6JKQsg3rlj1CxfGbFCo/C0QDHrWV\n4rMBQXbhsKAV0xoJe/PIGymnb2l5c0LgZIfIrj7zeko8LBtXDTN/FMsKpiBiuhVs\n6lwI4yx8TW+szVu/dLum/AHkxoZtnI1hCOjtmgJGpwqGhxZSTVkLXki0exqH6Dug\nIW+JzwvoOV9duptEi3BK1DJRmdZr3YtDfTFWIuq3eUB2vs3GuzbehDzN8c1m3wRO\nPnyu81Nhkajlh9MKrF+6HHAgixbTgy7Xbe3f8dCn1AMmBSrnbyvRLvNRTlmdwdRI\nTVBVbGZghUGqFdQYnKP6zKXanK2eAtvmnLRwW8UhYSyqk4Ic/a1r/u85XTjv5+CI\nVu4OCL+8fLhVUtbaEHiE6bPl0W+IkfCrWoPENjb1TcW3zl2XOZ/+DaUeQWQUXJSN\nxa3MFVLKT8Cz7E0te2kUS3Za//nNMTHvHX2Hz/Ad+y3qS/OXKNphrOReLPJc+xoK\nbMijJy/PE35NKfg/npVUaX5fhgI1UvLmt44/CBh441fLvq3H8/pOSE52JZbXpSdd\nkQPQpzA6wggUnFww9aS+kUvQly4n4DvGaHezL43Fnui4eOzey8vTrwCrRqHBUIT3\n8N/U3xPV+5j6OLmkq5Gy\n=iya9\n-----END PGP SIGNATURE-----",
        "payload": "tree b94e4f2238c3dd9ad5dade4c5dd6ae751868d692\nparent 2935b469ae96a3203bb997a6eddc098903b336ce\nparent 27c63dc059f17f86bfa2ece0eb456b75340498fe\nauthor MarcoFalke <falke.marco@gmail.com> 1499067331 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1499067391 +0200\n\nMerge #10704: [tests] nits in dbcrash.py\n\n27c63dc [tests] nits in dbcrash.py (John Newbery)\n\nTree-SHA512: 2a75feeb65e6147e3337200cde982248bea8977a9585d5ee284d62bbc25f6d7c368754da0083aec37338c8f66cf698ee25bbd9e192df14a9fb976b8f75afa986\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd07f47b79628668e29cc0143b21e790100ee445",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd07f47b79628668e29cc0143b21e790100ee445",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd07f47b79628668e29cc0143b21e790100ee445/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2935b469ae96a3203bb997a6eddc098903b336ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2935b469ae96a3203bb997a6eddc098903b336ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2935b469ae96a3203bb997a6eddc098903b336ce"
      },
      {
        "sha": "27c63dc059f17f86bfa2ece0eb456b75340498fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27c63dc059f17f86bfa2ece0eb456b75340498fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27c63dc059f17f86bfa2ece0eb456b75340498fe"
      }
    ],
    "stats": {
      "total": 114,
      "additions": 65,
      "deletions": 49
    },
    "files": [
      {
        "sha": "8339305f5e45250d40540c8aebbfbec3a2c3dccf",
        "filename": "test/functional/dbcrash.py",
        "status": "modified",
        "additions": 61,
        "deletions": 48,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd07f47b79628668e29cc0143b21e790100ee445/test/functional/dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd07f47b79628668e29cc0143b21e790100ee445/test/functional/dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/dbcrash.py?ref=dd07f47b79628668e29cc0143b21e790100ee445",
        "patch": "@@ -2,21 +2,7 @@\n # Copyright (c) 2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test recovery from a crash during chainstate writing.\"\"\"\n-\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.script import *\n-from test_framework.mininode import *\n-import random\n-try:\n-    import http.client as httplib\n-except ImportError:\n-    import httplib\n-import errno\n-\n-'''\n-Test structure:\n+\"\"\"Test recovery from a crash during chainstate writing.\n \n - 4 nodes\n   * node0, node1, and node2 will have different dbcrash ratios, and different\n@@ -37,11 +23,26 @@\n        * submit block to node\n        * if node crashed on/after submitting:\n          - restart until recovery succeeds\n-         - check that utxo matches node3 using gettxoutsetinfo\n-'''\n+         - check that utxo matches node3 using gettxoutsetinfo\"\"\"\n \n-class ChainstateWriteCrashTest(BitcoinTestFramework):\n+import errno\n+import http.client\n+import random\n+import sys\n+import time\n+\n+from test_framework.mininode import *\n+from test_framework.script import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+HTTP_DISCONNECT_ERRORS = [http.client.CannotSendRequest]\n+try:\n+    HTTP_DISCONNECT_ERRORS.append(http.client.RemoteDisconnected)\n+except AttributeError:\n+    pass\n \n+class ChainstateWriteCrashTest(BitcoinTestFramework):\n     def __init__(self):\n         super().__init__()\n         self.num_nodes = 4\n@@ -50,32 +51,28 @@ def __init__(self):\n         # Set -maxmempool=0 to turn off mempool memory sharing with dbcache\n         # Set -rpcservertimeout=900 to reduce socket disconnects in this\n         # long-running test\n-        self.base_args = [\"-limitdescendantsize=0\", \"-maxmempool=0\", \"-rpcservertimeout=900\"]\n+        self.base_args = [\"-limitdescendantsize=0\", \"-maxmempool=0\", \"-rpcservertimeout=900\", \"-dbbatchsize=200000\"]\n \n         # Set different crash ratios and cache sizes.  Note that not all of\n         # -dbcache goes to pcoinsTip.\n-        self.node0_args = [\"-dbcrashratio=8\", \"-dbcache=4\", \"-dbbatchsize=200000\"] + self.base_args\n-        self.node1_args = [\"-dbcrashratio=16\", \"-dbcache=8\", \"-dbbatchsize=200000\"] + self.base_args\n-        self.node2_args = [\"-dbcrashratio=24\", \"-dbcache=16\", \"-dbbatchsize=200000\"] + self.base_args\n+        self.node0_args = [\"-dbcrashratio=8\", \"-dbcache=4\"] + self.base_args\n+        self.node1_args = [\"-dbcrashratio=16\", \"-dbcache=8\"] + self.base_args\n+        self.node2_args = [\"-dbcrashratio=24\", \"-dbcache=16\"] + self.base_args\n \n         # Node3 is a normal node with default args, except will mine full blocks\n         self.node3_args = [\"-blockmaxweight=4000000\"]\n         self.extra_args = [self.node0_args, self.node1_args, self.node2_args, self.node3_args]\n \n-        # We'll track some test coverage statistics\n-        self.restart_counts = [0, 0, 0] # Track the restarts for nodes 0-2\n-        self.crashed_on_restart = 0     # Track count of crashes during recovery\n-\n     def setup_network(self):\n         self.setup_nodes()\n         # Leave them unconnected, we'll use submitblock directly in this test\n \n-    # Starts up a given node id, waits for the tip to reach the given block\n-    # hash, and calculates the utxo hash.  Exceptions on startup should\n-    # indicate node crash (due to -dbcrashratio), in which case we try again.\n-    # Give up after 60 seconds.\n-    # Returns the utxo hash of the given node.\n     def restart_node(self, node_index, expected_tip):\n+        \"\"\"Start up a given node id, wait for the tip to reach the given block hash, and calculate the utxo hash.\n+\n+        Exceptions on startup should indicate node crash (due to -dbcrashratio), in which case we try again. Give up\n+        after 60 seconds. Returns the utxo hash of the given node.\"\"\"\n+\n         time_start = time.time()\n         while time.time() - time_start < 60:\n             try:\n@@ -99,14 +96,23 @@ def restart_node(self, node_index, expected_tip):\n         # and make sure that recovery happens.\n         raise AssertionError(\"Unable to successfully restart node %d in allotted time\", node_index)\n \n-    # Try submitting a block to the given node.\n-    # Catch any exceptions that indicate the node has crashed.\n-    # Returns true if the block was submitted successfully; false otherwise.\n     def submit_block_catch_error(self, node_index, block):\n+        \"\"\"Try submitting a block to the given node.\n+\n+        Catch any exceptions that indicate the node has crashed.\n+        Returns true if the block was submitted successfully; false otherwise.\"\"\"\n+\n         try:\n             self.nodes[node_index].submitblock(block)\n             return True\n-        except (httplib.CannotSendRequest, httplib.RemoteDisconnected) as e:\n+        except http.client.BadStatusLine as e:\n+            # Prior to 3.5 BadStatusLine('') was raised for a remote disconnect error.\n+            if sys.version_info[0] == 3 and sys.version_info[1] < 5 and e.line == \"''\":\n+                self.log.debug(\"node %d submitblock raised exception: %s\", node_index, e)\n+                return False\n+            else:\n+                raise\n+        except tuple(HTTP_DISCONNECT_ERRORS) as e:\n             self.log.debug(\"node %d submitblock raised exception: %s\", node_index, e)\n             return False\n         except OSError as e:\n@@ -118,11 +124,13 @@ def submit_block_catch_error(self, node_index, block):\n                 # Unexpected exception, raise\n                 raise\n \n-    # Use submitblock to sync node3's chain with the other nodes\n-    # If submitblock fails, restart the node and get the new utxo hash.\n     def sync_node3blocks(self, block_hashes):\n-        # If any nodes crash while updating, we'll compare utxo hashes to\n-        # ensure recovery was successful.\n+        \"\"\"Use submitblock to sync node3's chain with the other nodes\n+\n+        If submitblock fails, restart the node and get the new utxo hash.\n+        If any nodes crash while updating, we'll compare utxo hashes to\n+        ensure recovery was successful.\"\"\"\n+\n         node3_utxo_hash = self.nodes[3].gettxoutsetinfo()['hash_serialized_2']\n \n         # Retrieve all the blocks from node3\n@@ -161,9 +169,10 @@ def sync_node3blocks(self, block_hashes):\n                 self.log.debug(\"Checking txoutsetinfo matches for node %d\", i)\n                 assert_equal(nodei_utxo_hash, node3_utxo_hash)\n \n-    # Verify that the utxo hash of each node matches node3.\n-    # Restart any nodes that crash while querying.\n     def verify_utxo_hash(self):\n+        \"\"\"Verify that the utxo hash of each node matches node3.\n+\n+        Restart any nodes that crash while querying.\"\"\"\n         node3_utxo_hash = self.nodes[3].gettxoutsetinfo()['hash_serialized_2']\n         self.log.info(\"Verifying utxo hash matches for all nodes\")\n \n@@ -175,9 +184,8 @@ def verify_utxo_hash(self):\n                 nodei_utxo_hash = self.restart_node(i, self.nodes[3].getbestblockhash())\n             assert_equal(nodei_utxo_hash, node3_utxo_hash)\n \n-\n     def generate_small_transactions(self, node, count, utxo_list):\n-        FEE = 1000 # TODO: replace this with node relay fee based calculation\n+        FEE = 1000  # TODO: replace this with node relay fee based calculation\n         num_transactions = 0\n         random.shuffle(utxo_list)\n         while len(utxo_list) >= 2 and num_transactions < count:\n@@ -186,8 +194,8 @@ def generate_small_transactions(self, node, count, utxo_list):\n             for i in range(2):\n                 utxo = utxo_list.pop()\n                 tx.vin.append(CTxIn(COutPoint(int(utxo['txid'], 16), utxo['vout'])))\n-                input_amount += int(utxo['amount']*COIN)\n-            output_amount = (input_amount - FEE)//3\n+                input_amount += int(utxo['amount'] * COIN)\n+            output_amount = (input_amount - FEE) // 3\n \n             if output_amount <= 0:\n                 # Sanity check -- if we chose inputs that are too small, skip\n@@ -202,6 +210,9 @@ def generate_small_transactions(self, node, count, utxo_list):\n             num_transactions += 1\n \n     def run_test(self):\n+        # Track test coverage statistics\n+        self.restart_counts = [0, 0, 0]  # Track the restarts for nodes 0-2\n+        self.crashed_on_restart = 0      # Track count of crashes during recovery\n \n         # Start by creating a lot of utxos on node3\n         initial_height = self.nodes[3].getblockcount()\n@@ -210,7 +221,7 @@ def run_test(self):\n \n         # Sync these blocks with the other nodes\n         block_hashes_to_sync = []\n-        for height in range(initial_height+1, self.nodes[3].getblockcount()+1):\n+        for height in range(initial_height + 1, self.nodes[3].getblockcount() + 1):\n             block_hashes_to_sync.append(self.nodes[3].getblockhash(height))\n \n         self.log.debug(\"Syncing %d blocks with other nodes\", len(block_hashes_to_sync))\n@@ -233,13 +244,15 @@ def run_test(self):\n             if random_height > starting_tip_height:\n                 # Randomly reorg from this point with some probability (1/4 for\n                 # tip, 1/5 for tip-1, ...)\n-                if random.random() < 1.0/(current_height + 4 - random_height):\n+                if random.random() < 1.0 / (current_height + 4 - random_height):\n                     self.log.debug(\"Invalidating block at height %d\", random_height)\n                     self.nodes[3].invalidateblock(self.nodes[3].getblockhash(random_height))\n \n             # Now generate new blocks until we pass the old tip height\n             self.log.debug(\"Mining longer tip\")\n-            block_hashes = self.nodes[3].generate(current_height+1-self.nodes[3].getblockcount())\n+            block_hashes = []\n+            while current_height + 1 > self.nodes[3].getblockcount():\n+                block_hashes.extend(self.nodes[3].generate(min(10, current_height + 1 - self.nodes[3].getblockcount())))\n             self.log.debug(\"Syncing %d new blocks...\", len(block_hashes))\n             self.sync_node3blocks(block_hashes)\n             utxo_list = self.nodes[3].listunspent()"
      },
      {
        "sha": "8a2d8de50ebc826258cea9b654bf290db2ff826a",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd07f47b79628668e29cc0143b21e790100ee445/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd07f47b79628668e29cc0143b21e790100ee445/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=dd07f47b79628668e29cc0143b21e790100ee445",
        "patch": "@@ -412,7 +412,10 @@ def random_transaction(nodes, amount, min_fee, fee_increment, fee_variants):\n # Helper to create at least \"count\" utxos\n # Pass in a fee that is sufficient for relay and mining new transactions.\n def create_confirmed_utxos(fee, node, count):\n-    node.generate(int(0.5 * count) + 101)\n+    to_generate = int(0.5 * count) + 101\n+    while to_generate > 0:\n+        node.generate(min(25, to_generate))\n+        to_generate -= 25\n     utxos = node.listunspent()\n     iterations = count - len(utxos)\n     addr1 = node.getnewaddress()"
      }
    ]
  },
  {
    "sha": "d81bec7666de3faaf2a4f8350eeddf012c8a3970",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODFiZWM3NjY2ZGUzZmFhZjJhNGY4MzUwZWVkZGYwMTJjOGEzOTcw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-03T11:55:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-03T11:59:50Z"
      },
      "message": "Merge #10683: rpc: Move the `generate` RPC call to rpcwallet\n\n2a96283 rpc: Update `generate` for developer notes (Wladimir J. van der Laan)\ndf7e2f0 rpc: Move the `generate` RPC call to rpcwallet (Wladimir J. van der Laan)\n\nTree-SHA512: ec658d6178f8435dc54b9d9c6dd59f873055a8ae0c3f177c02049d77b93107dd5fc17a1ff56d50f051810d52fdf306846eaba2ef4fc8d2a6cfa831f57a1045c4",
      "tree": {
        "sha": "b68a63b1dd5e540660bddfc91d9d5f655d7b66f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b68a63b1dd5e540660bddfc91d9d5f655d7b66f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d81bec7666de3faaf2a4f8350eeddf012c8a3970",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZWjG2AAoJEB5K7WKYbNJdxwcIAKwAdJn3RdtzySiPWoumWX8T\nDYN12lbBFEHUlcUEBbmeJmolOI9NinPEUpk7jrZvsWbUhulXyT66hftPdtOvr3yw\nfRYWwnj2yUrxypn9ldBHxCg/rHPD7RfjNp0RjzMm14XSbQBG4sphKekPgJQWeppp\n48+mGcuVhH7jT7+8THk9f4IYkrW9GO/JcvNIujVHkAfWt54vVr2ICqXKwccuMYb2\niU5Q8a8YJpNjgVij1KuypTmsaMqVBT7xLZeOfbW2H3FNT1R05wF4UTpo0dinR5fG\nlCjiwEE5YuXqVnyw9hacQWOWI3/Wp1N5gVfsr64uXGa697s7k+5kBM7yXhs1ovc=\n=Cox5\n-----END PGP SIGNATURE-----",
        "payload": "tree b68a63b1dd5e540660bddfc91d9d5f655d7b66f4\nparent dd07f47b79628668e29cc0143b21e790100ee445\nparent 2a962834febc9f56126ef06cf1bd5e1b02370278\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1499082920 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1499083190 +0200\n\nMerge #10683: rpc: Move the `generate` RPC call to rpcwallet\n\n2a96283 rpc: Update `generate` for developer notes (Wladimir J. van der Laan)\ndf7e2f0 rpc: Move the `generate` RPC call to rpcwallet (Wladimir J. van der Laan)\n\nTree-SHA512: ec658d6178f8435dc54b9d9c6dd59f873055a8ae0c3f177c02049d77b93107dd5fc17a1ff56d50f051810d52fdf306846eaba2ef4fc8d2a6cfa831f57a1045c4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d81bec7666de3faaf2a4f8350eeddf012c8a3970",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d81bec7666de3faaf2a4f8350eeddf012c8a3970",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d81bec7666de3faaf2a4f8350eeddf012c8a3970/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd07f47b79628668e29cc0143b21e790100ee445",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd07f47b79628668e29cc0143b21e790100ee445",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd07f47b79628668e29cc0143b21e790100ee445"
      },
      {
        "sha": "2a962834febc9f56126ef06cf1bd5e1b02370278",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a962834febc9f56126ef06cf1bd5e1b02370278",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a962834febc9f56126ef06cf1bd5e1b02370278"
      }
    ],
    "stats": {
      "total": 110,
      "additions": 66,
      "deletions": 44
    },
    "files": [
      {
        "sha": "8ecd3918045b672fbdb1fbe014b661d991ef23ae",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d81bec7666de3faaf2a4f8350eeddf012c8a3970/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d81bec7666de3faaf2a4f8350eeddf012c8a3970/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=d81bec7666de3faaf2a4f8350eeddf012c8a3970",
        "patch": "@@ -127,6 +127,7 @@ BITCOIN_CORE_H = \\\n   reverselock.h \\\n   rpc/blockchain.h \\\n   rpc/client.h \\\n+  rpc/mining.h \\\n   rpc/protocol.h \\\n   rpc/server.h \\\n   rpc/register.h \\"
      },
      {
        "sha": "e50742f36e37a57c2103b02427ecc6185d472525",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 37,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d81bec7666de3faaf2a4f8350eeddf012c8a3970/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d81bec7666de3faaf2a4f8350eeddf012c8a3970/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=d81bec7666de3faaf2a4f8350eeddf012c8a3970",
        "patch": "@@ -18,6 +18,7 @@\n #include \"policy/fees.h\"\n #include \"pow.h\"\n #include \"rpc/blockchain.h\"\n+#include \"rpc/mining.h\"\n #include \"rpc/server.h\"\n #include \"txmempool.h\"\n #include \"util.h\"\n@@ -141,42 +142,6 @@ UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGen\n     return blockHashes;\n }\n \n-UniValue generate(const JSONRPCRequest& request)\n-{\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n-            \"generate nblocks ( maxtries )\\n\"\n-            \"\\nMine up to nblocks blocks immediately (before the RPC call returns)\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. nblocks      (numeric, required) How many blocks are generated immediately.\\n\"\n-            \"2. maxtries     (numeric, optional) How many iterations to try (default = 1000000).\\n\"\n-            \"\\nResult:\\n\"\n-            \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n-            \"\\nExamples:\\n\"\n-            \"\\nGenerate 11 blocks\\n\"\n-            + HelpExampleCli(\"generate\", \"11\")\n-        );\n-\n-    int nGenerate = request.params[0].get_int();\n-    uint64_t nMaxTries = 1000000;\n-    if (request.params.size() > 1) {\n-        nMaxTries = request.params[1].get_int();\n-    }\n-\n-    std::shared_ptr<CReserveScript> coinbaseScript;\n-    GetMainSignals().ScriptForMining(coinbaseScript);\n-\n-    // If the keypool is exhausted, no script is returned at all.  Catch this.\n-    if (!coinbaseScript)\n-        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n-\n-    //throw an error if no script was provided\n-    if (coinbaseScript->reserveScript.empty())\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"No coinbase script available (mining requires a wallet)\");\n-\n-    return generateBlocks(coinbaseScript, nGenerate, nMaxTries, true);\n-}\n-\n UniValue generatetoaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n@@ -962,7 +927,6 @@ static const CRPCCommand commands[] =\n     { \"mining\",             \"getblocktemplate\",       &getblocktemplate,       true,  {\"template_request\"} },\n     { \"mining\",             \"submitblock\",            &submitblock,            true,  {\"hexdata\",\"dummy\"} },\n \n-    { \"generating\",         \"generate\",               &generate,               true,  {\"nblocks\",\"maxtries\"} },\n     { \"generating\",         \"generatetoaddress\",      &generatetoaddress,      true,  {\"nblocks\",\"address\",\"maxtries\"} },\n \n     { \"util\",               \"estimatefee\",            &estimatefee,            true,  {\"nblocks\"} },"
      },
      {
        "sha": "a148d851da0000805729a0eacdc4e33c1de4fe62",
        "filename": "src/rpc/mining.h",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d81bec7666de3faaf2a4f8350eeddf012c8a3970/src/rpc/mining.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d81bec7666de3faaf2a4f8350eeddf012c8a3970/src/rpc/mining.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.h?ref=d81bec7666de3faaf2a4f8350eeddf012c8a3970",
        "patch": "@@ -0,0 +1,15 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_MINING_H\n+#define BITCOIN_RPC_MINING_H\n+\n+#include \"script/script.h\"\n+\n+#include <univalue.h>\n+\n+/** Generate blocks (mine) */\n+UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGenerate, uint64_t nMaxTries, bool keepScript);\n+\n+#endif"
      },
      {
        "sha": "be2f20b8635d9f727e65722b4b2c108e48b30385",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d81bec7666de3faaf2a4f8350eeddf012c8a3970/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d81bec7666de3faaf2a4f8350eeddf012c8a3970/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=d81bec7666de3faaf2a4f8350eeddf012c8a3970",
        "patch": "@@ -21,12 +21,10 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n     g_signals.BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n-    g_signals.ScriptForMining.connect(boost::bind(&CValidationInterface::GetScriptForMining, pwalletIn, _1));\n     g_signals.NewPoWValidBlock.connect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n }\n \n void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n-    g_signals.ScriptForMining.disconnect(boost::bind(&CValidationInterface::GetScriptForMining, pwalletIn, _1));\n     g_signals.BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n     g_signals.Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n     g_signals.Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n@@ -39,7 +37,6 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n }\n \n void UnregisterAllValidationInterfaces() {\n-    g_signals.ScriptForMining.disconnect_all_slots();\n     g_signals.BlockChecked.disconnect_all_slots();\n     g_signals.Broadcast.disconnect_all_slots();\n     g_signals.Inventory.disconnect_all_slots();"
      },
      {
        "sha": "17545018df75af6067f2247fd3e3aa2fde0066bf",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d81bec7666de3faaf2a4f8350eeddf012c8a3970/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d81bec7666de3faaf2a4f8350eeddf012c8a3970/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=d81bec7666de3faaf2a4f8350eeddf012c8a3970",
        "patch": "@@ -40,7 +40,6 @@ class CValidationInterface {\n     virtual void Inventory(const uint256 &hash) {}\n     virtual void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) {}\n     virtual void BlockChecked(const CBlock&, const CValidationState&) {}\n-    virtual void GetScriptForMining(std::shared_ptr<CReserveScript>&) {};\n     virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};\n     friend void ::RegisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterValidationInterface(CValidationInterface*);\n@@ -72,8 +71,6 @@ struct CMainSignals {\n      * callback was generated (not necessarily now)\n      */\n     boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n-    /** Notifies listeners that a key for mining is required (coinbase) */\n-    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n     /**\n      * Notifies listeners that a block which builds directly on our current tip\n      * has been received and connected to the headers tree, though not validated yet */"
      },
      {
        "sha": "e0c7ab9f0f98686805fd07883c811576c53960a8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d81bec7666de3faaf2a4f8350eeddf012c8a3970/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d81bec7666de3faaf2a4f8350eeddf012c8a3970/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d81bec7666de3faaf2a4f8350eeddf012c8a3970",
        "patch": "@@ -15,6 +15,7 @@\n #include \"policy/fees.h\"\n #include \"policy/policy.h\"\n #include \"policy/rbf.h\"\n+#include \"rpc/mining.h\"\n #include \"rpc/server.h\"\n #include \"script/sign.h\"\n #include \"timedata.h\"\n@@ -2922,6 +2923,51 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue generate(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"generate nblocks ( maxtries )\\n\"\n+            \"\\nMine up to nblocks blocks immediately (before the RPC call returns) to an address in the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. nblocks      (numeric, required) How many blocks are generated immediately.\\n\"\n+            \"2. maxtries     (numeric, optional) How many iterations to try (default = 1000000).\\n\"\n+            \"\\nResult:\\n\"\n+            \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nGenerate 11 blocks\\n\"\n+            + HelpExampleCli(\"generate\", \"11\")\n+        );\n+    }\n+\n+    int num_generate = request.params[0].get_int();\n+    uint64_t max_tries = 1000000;\n+    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+        max_tries = request.params[1].get_int();\n+    }\n+\n+    std::shared_ptr<CReserveScript> coinbase_script;\n+    pwallet->GetScriptForMining(coinbase_script);\n+\n+    // If the keypool is exhausted, no script is returned at all.  Catch this.\n+    if (!coinbase_script) {\n+        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n+    }\n+\n+    //throw an error if no script was provided\n+    if (coinbase_script->reserveScript.empty()) {\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"No coinbase script available\");\n+    }\n+\n+    return generateBlocks(coinbase_script, num_generate, max_tries, true);\n+}\n+\n extern UniValue abortrescan(const JSONRPCRequest& request); // in rpcdump.cpp\n extern UniValue dumpprivkey(const JSONRPCRequest& request); // in rpcdump.cpp\n extern UniValue importprivkey(const JSONRPCRequest& request);\n@@ -2985,6 +3031,8 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"walletpassphrasechange\",   &walletpassphrasechange,   true,   {\"oldpassphrase\",\"newpassphrase\"} },\n     { \"wallet\",             \"walletpassphrase\",         &walletpassphrase,         true,   {\"passphrase\",\"timeout\"} },\n     { \"wallet\",             \"removeprunedfunds\",        &removeprunedfunds,        true,   {\"txid\"} },\n+\n+    { \"generating\",         \"generate\",                 &generate,                 true,   {\"nblocks\",\"maxtries\"} },\n };\n \n void RegisterWalletRPCCommands(CRPCTable &t)"
      },
      {
        "sha": "4f558adc772531bbb290fdbe331db8e9b6f2e721",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d81bec7666de3faaf2a4f8350eeddf012c8a3970/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d81bec7666de3faaf2a4f8350eeddf012c8a3970/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d81bec7666de3faaf2a4f8350eeddf012c8a3970",
        "patch": "@@ -1025,7 +1025,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         }\n     }\n \n-    void GetScriptForMining(std::shared_ptr<CReserveScript> &script) override;\n+    void GetScriptForMining(std::shared_ptr<CReserveScript> &script);\n     \n     unsigned int GetKeyPoolSize()\n     {"
      }
    ]
  },
  {
    "sha": "7397af9d314dd01ca3699efbe6eec68f62a6ef2b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Mzk3YWY5ZDMxNGRkMDFjYTM2OTllZmJlNmVlYzY4ZjYyYTZlZjJi",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-03T12:20:28Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-03T12:20:42Z"
      },
      "message": "Merge #10728: fix typo in help text for removeprunedfunds\n\necb4fc382 fix typo in help text for removeprunedfunds (Akio Nakamura)\n\nTree-SHA512: 2603851f1ac90bc0b90ced6355b0056e4cb658303cb2cd03ee0827ed0053157ebb87de48076f4d4f556991bfdbdb65d0a68a8dbd275c501cee4c9b5746a9562b",
      "tree": {
        "sha": "1747b25e97a57b1410d7886b815e5935a302f2a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1747b25e97a57b1410d7886b815e5935a302f2a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7397af9d314dd01ca3699efbe6eec68f62a6ef2b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAllaNpoACgkQHrd2uwPH\nki0rtQ//RtIKE7QaO45FGYQcyFd0K4ElUV2oEuyF0UagZLDXTknaAoE/XUAdL63V\nfWy4O/xh2dfOmOhpXUZPwUW44dHUpmJpqjBA+wfx8/2M9VZgICQr55F1VhPtih/P\n5MxxyWn5pO6v0Ut3d1AVWH6O1suVb4Gi5RkfeF1/7r02qAHST6gAh6hit7eHmSph\n7WOknrXWSA9jHwHh078eqMuAFOr/EC6cCsNm2Hq+SEG8FdVfiruZdb3rBd3rv6mQ\nNbBri8BJJ8nSDvucTnIrEBAEXG6cHNER3+e0y41dhsB18iwc3aHbgYccAUtOkWhP\nFhd3pN1m1NmHahorrXcD03pb8YPm14Tp3Uh5DBVMHt5kWAELM/dF62boyQfjAnYe\nMGOA8FESD1AkkI2Y7xfm3qnRCUbcve3gkoujtIj9j76D2bBpM05GNyIMqXp/+xCz\n8zTy/gri21dY1EIZA6qkh81UVqHRZtfPoCsfo7HAnCRn+T5mil+mpdUHCTaA64IJ\n0hilx9lnDdJLH129pnKtfT7RwUnB2RCs9zSIjpUNRS6ai/YWJyR2f3ts0cZy7mHZ\n0lXzJfR/HvE0Y+k9umsQ9veHrky3fgKOm/hyx6zQ7NFjD5jl2bZd3fU3tKjndOpU\nIqwAfAVUwM3Pmhsjw0o9LwTFCe64rhjCG2ohfQWKXaKmD5Q3K0U=\n=/Ugu\n-----END PGP SIGNATURE-----",
        "payload": "tree 1747b25e97a57b1410d7886b815e5935a302f2a5\nparent d81bec7666de3faaf2a4f8350eeddf012c8a3970\nparent ecb4fc382b3467410dc816fe8644bd865aadcf21\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1499084428 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1499084442 +0200\n\nMerge #10728: fix typo in help text for removeprunedfunds\n\necb4fc382 fix typo in help text for removeprunedfunds (Akio Nakamura)\n\nTree-SHA512: 2603851f1ac90bc0b90ced6355b0056e4cb658303cb2cd03ee0827ed0053157ebb87de48076f4d4f556991bfdbdb65d0a68a8dbd275c501cee4c9b5746a9562b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7397af9d314dd01ca3699efbe6eec68f62a6ef2b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7397af9d314dd01ca3699efbe6eec68f62a6ef2b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7397af9d314dd01ca3699efbe6eec68f62a6ef2b/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d81bec7666de3faaf2a4f8350eeddf012c8a3970",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d81bec7666de3faaf2a4f8350eeddf012c8a3970",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d81bec7666de3faaf2a4f8350eeddf012c8a3970"
      },
      {
        "sha": "ecb4fc382b3467410dc816fe8644bd865aadcf21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecb4fc382b3467410dc816fe8644bd865aadcf21",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ecb4fc382b3467410dc816fe8644bd865aadcf21"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b4b5e8c255d55d743f08a096d4a62331bbfa43eb",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7397af9d314dd01ca3699efbe6eec68f62a6ef2b/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7397af9d314dd01ca3699efbe6eec68f62a6ef2b/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=7397af9d314dd01ca3699efbe6eec68f62a6ef2b",
        "patch": "@@ -362,7 +362,7 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"removeprunedfunds\", \"\\\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\\\"\") +\n             \"\\nAs a JSON-RPC call\\n\"\n-            + HelpExampleRpc(\"removprunedfunds\", \"\\\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\\\"\")\n+            + HelpExampleRpc(\"removeprunedfunds\", \"\\\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\\\"\")\n         );\n \n     LOCK2(cs_main, pwallet->cs_wallet);"
      }
    ]
  },
  {
    "sha": "ff6a834fc32b25376e221fefa8c2a2565b4167cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjZhODM0ZmMzMmIyNTM3NmUyMjFmZWZhOGMyYTI1NjViNDE2N2Nj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-27T00:13:24Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-04T00:52:25Z"
      },
      "message": "Use TestingSetup to DRY qt rpcnestedtests",
      "tree": {
        "sha": "6671f326e8f1a34b97f01ee1a87f9944fc4d2816",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6671f326e8f1a34b97f01ee1a87f9944fc4d2816"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff6a834fc32b25376e221fefa8c2a2565b4167cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff6a834fc32b25376e221fefa8c2a2565b4167cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff6a834fc32b25376e221fefa8c2a2565b4167cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff6a834fc32b25376e221fefa8c2a2565b4167cc/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7397af9d314dd01ca3699efbe6eec68f62a6ef2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7397af9d314dd01ca3699efbe6eec68f62a6ef2b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7397af9d314dd01ca3699efbe6eec68f62a6ef2b"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 3,
      "deletions": 19
    },
    "files": [
      {
        "sha": "fbad9e544ae8f00acd2f17d48c54f130d226fcf8",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 19,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff6a834fc32b25376e221fefa8c2a2565b4167cc/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff6a834fc32b25376e221fefa8c2a2565b4167cc/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=ff6a834fc32b25376e221fefa8c2a2565b4167cc",
        "patch": "@@ -12,6 +12,7 @@\n #include \"rpc/server.h\"\n #include \"rpcconsole.h\"\n #include \"test/testutil.h\"\n+#include \"test/test_bitcoin.h\"\n #include \"univalue.h\"\n #include \"util.h\"\n \n@@ -35,24 +36,15 @@ void RPCNestedTests::rpcNestedTests()\n {\n     // do some test setup\n     // could be moved to a more generic place when we add more tests on QT level\n-    const CChainParams& chainparams = Params();\n-    RegisterAllCoreRPCCommands(tableRPC);\n     tableRPC.appendCommand(\"rpcNestedTest\", &vRPCCommands[0]);\n     ClearDatadirCache();\n     std::string path = QDir::tempPath().toStdString() + \"/\" + strprintf(\"test_bitcoin_qt_%lu_%i\", (unsigned long)GetTime(), (int)(GetRand(100000)));\n     QDir dir(QString::fromStdString(path));\n     dir.mkpath(\".\");\n     ForceSetArg(\"-datadir\", path);\n     //mempool.setSanityCheck(1.0);\n-    pblocktree = new CBlockTreeDB(1 << 20, true);\n-    pcoinsdbview = new CCoinsViewDB(1 << 23, true);\n-    pcoinsTip = new CCoinsViewCache(pcoinsdbview);\n-    InitBlockIndex(chainparams);\n-    {\n-        CValidationState state;\n-        bool ok = ActivateBestChain(state, chainparams);\n-        QVERIFY(ok);\n-    }\n+\n+    TestingSetup test;\n \n     SetRPCWarmupFinished();\n \n@@ -145,13 +137,5 @@ void RPCNestedTests::rpcNestedTests()\n     QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest(abc,,)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n #endif\n \n-    UnloadBlockIndex();\n-    delete pcoinsTip;\n-    pcoinsTip = nullptr;\n-    delete pcoinsdbview;\n-    pcoinsdbview = nullptr;\n-    delete pblocktree;\n-    pblocktree = nullptr;\n-\n     fs::remove_all(fs::path(path));\n }"
      }
    ]
  },
  {
    "sha": "3a19fed9db558a5f666d965b6f602f7faf74ab73",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTE5ZmVkOWRiNTU4YTVmNjY2ZDk2NWI2ZjYwMmY3ZmFmNzRhYjcz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-19T21:17:14Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-04T00:54:36Z"
      },
      "message": "Make ValidationInterface signals-type-agnostic\n\n(by hiding boost::signals stuff in the .cpp)\n\nThis allows us to give it a bit more intelligence as we move\nforward, including routing some signals through CScheduler. While\nthe introduction of a \"internals\" pointer in the class is pretty\nugly, the fact that we no longer need to include boost/signals\ndirectly from validationinterface.h is very much worth the loss.",
      "tree": {
        "sha": "140bdbcd44450a12f0a7c290f623e946637999a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/140bdbcd44450a12f0a7c290f623e946637999a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a19fed9db558a5f666d965b6f602f7faf74ab73",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a19fed9db558a5f666d965b6f602f7faf74ab73",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a19fed9db558a5f666d965b6f602f7faf74ab73",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a19fed9db558a5f666d965b6f602f7faf74ab73/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff6a834fc32b25376e221fefa8c2a2565b4167cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff6a834fc32b25376e221fefa8c2a2565b4167cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff6a834fc32b25376e221fefa8c2a2565b4167cc"
      }
    ],
    "stats": {
      "total": 170,
      "additions": 117,
      "deletions": 53
    },
    "files": [
      {
        "sha": "7d0ab756e8ed6c293eb771f2f4a04e311a8a4f7e",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 81,
        "deletions": 27,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a19fed9db558a5f666d965b6f602f7faf74ab73/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a19fed9db558a5f666d965b6f602f7faf74ab73/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=3a19fed9db558a5f666d965b6f602f7faf74ab73",
        "patch": "@@ -5,45 +5,99 @@\n \n #include \"validationinterface.h\"\n \n+#include <boost/signals2/signal.hpp>\n+\n+struct MainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+};\n+\n static CMainSignals g_signals;\n \n+CMainSignals::CMainSignals() {\n+    m_internals.reset(new MainSignalsInstance());\n+}\n+\n CMainSignals& GetMainSignals()\n {\n     return g_signals;\n }\n \n void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n-    g_signals.UpdatedBlockTip.connect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n-    g_signals.TransactionAddedToMempool.connect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n-    g_signals.BlockConnected.connect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n-    g_signals.BlockDisconnected.connect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n-    g_signals.SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n-    g_signals.Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n-    g_signals.Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n-    g_signals.BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n-    g_signals.NewPoWValidBlock.connect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n+    g_signals.m_internals->UpdatedBlockTip.connect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n+    g_signals.m_internals->TransactionAddedToMempool.connect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n+    g_signals.m_internals->BlockConnected.connect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n+    g_signals.m_internals->BlockDisconnected.connect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n+    g_signals.m_internals->SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n+    g_signals.m_internals->Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n+    g_signals.m_internals->Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n+    g_signals.m_internals->BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n+    g_signals.m_internals->NewPoWValidBlock.connect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n }\n \n void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n-    g_signals.BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n-    g_signals.Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n-    g_signals.Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n-    g_signals.SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n-    g_signals.TransactionAddedToMempool.disconnect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n-    g_signals.BlockConnected.disconnect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n-    g_signals.BlockDisconnected.disconnect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n-    g_signals.UpdatedBlockTip.disconnect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n-    g_signals.NewPoWValidBlock.disconnect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n+    g_signals.m_internals->BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n+    g_signals.m_internals->Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n+    g_signals.m_internals->Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n+    g_signals.m_internals->SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n+    g_signals.m_internals->TransactionAddedToMempool.disconnect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n+    g_signals.m_internals->BlockConnected.disconnect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n+    g_signals.m_internals->BlockDisconnected.disconnect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n+    g_signals.m_internals->UpdatedBlockTip.disconnect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n+    g_signals.m_internals->NewPoWValidBlock.disconnect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n }\n \n void UnregisterAllValidationInterfaces() {\n-    g_signals.BlockChecked.disconnect_all_slots();\n-    g_signals.Broadcast.disconnect_all_slots();\n-    g_signals.Inventory.disconnect_all_slots();\n-    g_signals.SetBestChain.disconnect_all_slots();\n-    g_signals.TransactionAddedToMempool.disconnect_all_slots();\n-    g_signals.BlockConnected.disconnect_all_slots();\n-    g_signals.BlockDisconnected.disconnect_all_slots();\n-    g_signals.UpdatedBlockTip.disconnect_all_slots();\n-    g_signals.NewPoWValidBlock.disconnect_all_slots();\n+    g_signals.m_internals->BlockChecked.disconnect_all_slots();\n+    g_signals.m_internals->Broadcast.disconnect_all_slots();\n+    g_signals.m_internals->Inventory.disconnect_all_slots();\n+    g_signals.m_internals->SetBestChain.disconnect_all_slots();\n+    g_signals.m_internals->TransactionAddedToMempool.disconnect_all_slots();\n+    g_signals.m_internals->BlockConnected.disconnect_all_slots();\n+    g_signals.m_internals->BlockDisconnected.disconnect_all_slots();\n+    g_signals.m_internals->UpdatedBlockTip.disconnect_all_slots();\n+    g_signals.m_internals->NewPoWValidBlock.disconnect_all_slots();\n+}\n+\n+void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n+    m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n+}\n+\n+void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n+    m_internals->TransactionAddedToMempool(ptx);\n+}\n+\n+void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n+    m_internals->BlockConnected(pblock, pindex, vtxConflicted);\n+}\n+\n+void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock> &pblock) {\n+    m_internals->BlockDisconnected(pblock);\n+}\n+\n+void CMainSignals::SetBestChain(const CBlockLocator &locator) {\n+    m_internals->SetBestChain(locator);\n+}\n+\n+void CMainSignals::Inventory(const uint256 &hash) {\n+    m_internals->Inventory(hash);\n+}\n+\n+void CMainSignals::Broadcast(int64_t nBestBlockTime, CConnman* connman) {\n+    m_internals->Broadcast(nBestBlockTime, connman);\n+}\n+\n+void CMainSignals::BlockChecked(const CBlock& block, const CValidationState& state) {\n+    m_internals->BlockChecked(block, state);\n+}\n+\n+void CMainSignals::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock> &block) {\n+    m_internals->NewPoWValidBlock(pindex, block);\n }"
      },
      {
        "sha": "c248781a48e0615ef6eec76323d97cfd479e06b3",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 36,
        "deletions": 26,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a19fed9db558a5f666d965b6f602f7faf74ab73/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a19fed9db558a5f666d965b6f602f7faf74ab73/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=3a19fed9db558a5f666d965b6f602f7faf74ab73",
        "patch": "@@ -6,7 +6,6 @@\n #ifndef BITCOIN_VALIDATIONINTERFACE_H\n #define BITCOIN_VALIDATIONINTERFACE_H\n \n-#include <boost/signals2/signal.hpp>\n #include <memory>\n \n #include \"primitives/transaction.h\" // CTransaction(Ref)\n@@ -32,49 +31,60 @@ void UnregisterAllValidationInterfaces();\n \n class CValidationInterface {\n protected:\n-    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n-    virtual void TransactionAddedToMempool(const CTransactionRef &ptxn) {}\n-    virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex, const std::vector<CTransactionRef> &txnConflicted) {}\n-    virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block) {}\n-    virtual void SetBestChain(const CBlockLocator &locator) {}\n-    virtual void Inventory(const uint256 &hash) {}\n-    virtual void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) {}\n-    virtual void BlockChecked(const CBlock&, const CValidationState&) {}\n-    virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};\n-    friend void ::RegisterValidationInterface(CValidationInterface*);\n-    friend void ::UnregisterValidationInterface(CValidationInterface*);\n-    friend void ::UnregisterAllValidationInterfaces();\n-};\n-\n-struct CMainSignals {\n     /** Notifies listeners of updated block chain tip */\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n     /** Notifies listeners of a transaction having been added to mempool. */\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    virtual void TransactionAddedToMempool(const CTransactionRef &ptxn) {}\n     /**\n      * Notifies listeners of a block being connected.\n      * Provides a vector of transactions evicted from the mempool as a result.\n      */\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef> &)> BlockConnected;\n+    virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex, const std::vector<CTransactionRef> &txnConflicted) {}\n     /** Notifies listeners of a block being disconnected */\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n-    /** Notifies listeners of a new active block chain. */\n-    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block) {}\n+    /** Notifies listeners of the new active block chain on-disk. */\n+    virtual void SetBestChain(const CBlockLocator &locator) {}\n     /** Notifies listeners about an inventory item being seen on the network. */\n-    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    virtual void Inventory(const uint256 &hash) {}\n     /** Tells listeners to broadcast their data. */\n-    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    virtual void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) {}\n     /**\n      * Notifies listeners of a block validation result.\n      * If the provided CValidationState IsValid, the provided block\n      * is guaranteed to be the current best block at the time the\n      * callback was generated (not necessarily now)\n      */\n-    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    virtual void BlockChecked(const CBlock&, const CValidationState&) {}\n     /**\n      * Notifies listeners that a block which builds directly on our current tip\n      * has been received and connected to the headers tree, though not validated yet */\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+    virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};\n+    friend void ::RegisterValidationInterface(CValidationInterface*);\n+    friend void ::UnregisterValidationInterface(CValidationInterface*);\n+    friend void ::UnregisterAllValidationInterfaces();\n+};\n+\n+struct MainSignalsInstance;\n+class CMainSignals {\n+private:\n+    std::unique_ptr<MainSignalsInstance> m_internals;\n+\n+    friend void ::RegisterValidationInterface(CValidationInterface*);\n+    friend void ::UnregisterValidationInterface(CValidationInterface*);\n+    friend void ::UnregisterAllValidationInterfaces();\n+public:\n+    CMainSignals();\n+\n+    void UpdatedBlockTip(const CBlockIndex *, const CBlockIndex *, bool fInitialDownload);\n+    void TransactionAddedToMempool(const CTransactionRef &);\n+    void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef> &);\n+    void BlockDisconnected(const std::shared_ptr<const CBlock> &);\n+    void UpdatedTransaction(const uint256 &);\n+    void SetBestChain(const CBlockLocator &);\n+    void Inventory(const uint256 &);\n+    void Broadcast(int64_t nBestBlockTime, CConnman* connman);\n+    void BlockChecked(const CBlock&, const CValidationState&);\n+    void NewPoWValidBlock(const CBlockIndex *, const std::shared_ptr<const CBlock>&);\n };\n \n CMainSignals& GetMainSignals();"
      }
    ]
  },
  {
    "sha": "6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZGJjYzc0YTBlMGE3ZDQ1ZDIwYjAzYmI0ZWI0MWEwMjczOTdhMjFk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-04T11:03:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-04T16:05:18Z"
      },
      "message": "Merge #10193: scripted-diff: Remove #include <boost/foreach.hpp>\n\nb1268a1 clang-format: Delete ForEachMacros (Jorge Tim\u00f3n)\n5995735 scripted-diff: Remove #include <boost/foreach.hpp> (Jorge Tim\u00f3n)\n3eff827 scripted-diff: Remove BOOST_REVERSE_FOREACH (Jorge Tim\u00f3n)\n33aed5b Fix const_reverse_iterator constructor (pass const ptr) (Jorge Tim\u00f3n)\n300851e Introduce src/reverse_iterator.hpp and include it... (Jorge Tim\u00f3n)\n\nTree-SHA512: df3405328e9602d0a433ac134ba59a5c9a6202ef64188df2f94a59b2ce58dec7c988b25d0671c7937de516a96b2e6daeb9d04c82fa363b616ee4cf6e9cb0fac6",
      "tree": {
        "sha": "80f992a6cdd406a89eca4e928decb8b76278a6db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80f992a6cdd406a89eca4e928decb8b76278a6db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZW7y+AAoJEB5K7WKYbNJdxsQH/0Rfh2FVU9nYg55QowUCTfUi\nwAmXtDNpIIMdc/Ctru1O6iKtmm9jO3JaOwV2+CVoKyt1dZZDHKj4+qhoJmrakiLM\nFt6yJkri1q7CX6jzmUU8gGzd9DXHF3d1AqZEVvbb+YQsCfh1+ANu7NpOYJBfzQam\nDKVW1XZshJVC2dGpcE0oh+DQ4FL2xvp+n2PKq/RcMyccuPNHWExdutZnrjplZ9W3\nmcrI3Amtqhlc6ZnXkbm78mpp7ajonLKlvFMVkbO0QDbTaIebMgHXoAz32/cdRUdf\n4xXBrxnP8+8+ZNZmi9vCmRBXS+LnJ4uu0vheGaLRgqIaF9l84T/8PPzMnzoO5Q4=\n=w1i+\n-----END PGP SIGNATURE-----",
        "payload": "tree 80f992a6cdd406a89eca4e928decb8b76278a6db\nparent 7397af9d314dd01ca3699efbe6eec68f62a6ef2b\nparent b1268a19d0b80401339ede2188abbd389f8d7fb0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1499166236 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1499184318 +0200\n\nMerge #10193: scripted-diff: Remove #include <boost/foreach.hpp>\n\nb1268a1 clang-format: Delete ForEachMacros (Jorge Tim\u00f3n)\n5995735 scripted-diff: Remove #include <boost/foreach.hpp> (Jorge Tim\u00f3n)\n3eff827 scripted-diff: Remove BOOST_REVERSE_FOREACH (Jorge Tim\u00f3n)\n33aed5b Fix const_reverse_iterator constructor (pass const ptr) (Jorge Tim\u00f3n)\n300851e Introduce src/reverse_iterator.hpp and include it... (Jorge Tim\u00f3n)\n\nTree-SHA512: df3405328e9602d0a433ac134ba59a5c9a6202ef64188df2f94a59b2ce58dec7c988b25d0671c7937de516a96b2e6daeb9d04c82fa363b616ee4cf6e9cb0fac6\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7397af9d314dd01ca3699efbe6eec68f62a6ef2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7397af9d314dd01ca3699efbe6eec68f62a6ef2b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7397af9d314dd01ca3699efbe6eec68f62a6ef2b"
      },
      {
        "sha": "b1268a19d0b80401339ede2188abbd389f8d7fb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1268a19d0b80401339ede2188abbd389f8d7fb0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b1268a19d0b80401339ede2188abbd389f8d7fb0"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 53,
      "deletions": 39
    },
    "files": [
      {
        "sha": "2d2ee67035991568ce34df826feadb88e0e10f74",
        "filename": "src/.clang-format",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/.clang-format",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/.clang-format",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/.clang-format?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -23,7 +23,6 @@ ContinuationIndentWidth: 4\n Cpp11BracedListStyle: true\n DerivePointerAlignment: false\n DisableFormat:   false\n-ForEachMacros:   [ foreach, Q_FOREACH, BOOST_FOREACH, BOOST_REVERSE_FOREACH ]\n IndentCaseLabels: false\n IndentFunctionDeclarationAfterType: false\n IndentWidth:     4"
      },
      {
        "sha": "06b09404a767fe0bf591e6b07d26b657a881bae7",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -124,6 +124,7 @@ BITCOIN_CORE_H = \\\n   pow.h \\\n   protocol.h \\\n   random.h \\\n+  reverse_iterator.h \\\n   reverselock.h \\\n   rpc/blockchain.h \\\n   rpc/client.h \\"
      },
      {
        "sha": "f8956508f68216fba8b4534419ffafbac62002ff",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -5,7 +5,6 @@\n #include \"bench.h\"\n #include \"wallet/wallet.h\"\n \n-#include <boost/foreach.hpp>\n #include <set>\n \n static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<COutput>& vCoins)"
      },
      {
        "sha": "fa884f0bf32ef5d34a85f5712b6a44aa28d007aa",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -14,7 +14,6 @@\n #include <math.h>\n #include <stdlib.h>\n \n-#include <boost/foreach.hpp>\n \n #define LN2SQUARED 0.4804530139182014246671025263266649717305529515945455\n #define LN2 0.6931471805599453094172321214581765680755001343602552"
      },
      {
        "sha": "e6b5fb72a77ca3328ad9a41b1f8da887e3bcd8f4",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -6,20 +6,20 @@\n \n #include \"chain.h\"\n #include \"chainparams.h\"\n+#include \"reverse_iterator.h\"\n #include \"validation.h\"\n #include \"uint256.h\"\n \n #include <stdint.h>\n \n-#include <boost/foreach.hpp>\n \n namespace Checkpoints {\n \n     CBlockIndex* GetLastCheckpoint(const CCheckpointData& data)\n     {\n         const MapCheckpoints& checkpoints = data.mapCheckpoints;\n \n-        BOOST_REVERSE_FOREACH(const MapCheckpoints::value_type& i, checkpoints)\n+        for (const MapCheckpoints::value_type& i : reverse_iterate(checkpoints))\n         {\n             const uint256& hash = i.second;\n             BlockMap::const_iterator t = mapBlockIndex.find(hash);"
      },
      {
        "sha": "408e278d216271daa09dc22ede258e53b45276ac",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -10,7 +10,6 @@\n #include <algorithm>\n #include <vector>\n \n-#include <boost/foreach.hpp>\n #include <boost/thread/condition_variable.hpp>\n #include <boost/thread/mutex.hpp>\n "
      },
      {
        "sha": "7f38e9e565a29bb5450744aa216295cb1d3396b1",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -15,7 +15,6 @@\n #include \"utilmoneystr.h\"\n #include \"utilstrencodings.h\"\n \n-#include <boost/foreach.hpp>\n \n std::string FormatScript(const CScript& script)\n {"
      },
      {
        "sha": "a207d5ece45185c410deab6234370ff7e5701d40",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -18,7 +18,6 @@\n #include <stdio.h>\n \n #include <boost/algorithm/string.hpp> // boost::trim\n-#include <boost/foreach.hpp>\n \n /** WWW-Authenticate to present with 401 Unauthorized response */\n static const char* WWW_AUTH_HEADER_DATA = \"Basic realm=\\\"jsonrpc\\\"\";"
      },
      {
        "sha": "93fd6a0eb5b30c1e73cccb2fe4e0644be2f455af",
        "filename": "src/memusage.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/memusage.h?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -15,7 +15,6 @@\n #include <unordered_map>\n #include <unordered_set>\n \n-#include <boost/foreach.hpp>\n \n namespace memusage\n {"
      },
      {
        "sha": "b9a11c62f2123f63eaae4e03ed25e21cb113347d",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -33,7 +33,6 @@\n #include <arpa/inet.h>\n #endif\n \n-#include <boost/foreach.hpp>\n #include <boost/signals2/signal.hpp>\n \n class CScheduler;"
      },
      {
        "sha": "a743f04dd155f5ddc7eb7801d5ba2d01c8ac4cdc",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -22,6 +22,7 @@\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n #include \"random.h\"\n+#include \"reverse_iterator.h\"\n #include \"tinyformat.h\"\n #include \"txmempool.h\"\n #include \"ui_interface.h\"\n@@ -827,7 +828,7 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n         // Relay inventory, but don't relay old inventory during initial block download.\n         connman->ForEachNode([nNewHeight, &vHashes](CNode* pnode) {\n             if (nNewHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : 0)) {\n-                BOOST_REVERSE_FOREACH(const uint256& hash, vHashes) {\n+                for (const uint256& hash : reverse_iterate(vHashes)) {\n                     pnode->PushBlockHash(hash);\n                 }\n             }\n@@ -2338,7 +2339,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             } else {\n                 std::vector<CInv> vGetData;\n                 // Download as much as possible, from earliest to latest.\n-                BOOST_REVERSE_FOREACH(const CBlockIndex *pindex, vToFetch) {\n+                for (const CBlockIndex *pindex : reverse_iterate(vToFetch)) {\n                     if (nodestate->nBlocksInFlight >= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n                         // Can't download any more from this peer\n                         break;"
      },
      {
        "sha": "2f78d2f3474fba662def78d1a37f220db41e9f8e",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -13,7 +13,6 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n-#include <boost/foreach.hpp>\n \n CAmount GetDustThreshold(const CTxOut& txout, const CFeeRate& dustRelayFeeIn)\n {"
      },
      {
        "sha": "02d860bb00e5f85358350eea6d22eeb5799c667a",
        "filename": "src/prevector.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/prevector.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/prevector.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/prevector.h?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -132,7 +132,7 @@ class prevector {\n         typedef const T* pointer;\n         typedef const T& reference;\n         typedef std::bidirectional_iterator_tag iterator_category;\n-        const_reverse_iterator(T* ptr_) : ptr(ptr_) {}\n+        const_reverse_iterator(const T* ptr_) : ptr(ptr_) {}\n         const_reverse_iterator(reverse_iterator x) : ptr(&(*x)) {}\n         const T& operator*() const { return *ptr; }\n         const T* operator->() const { return ptr; }"
      },
      {
        "sha": "2fa032abdc44a10a08f8444b8c7d81aa1fa438e8",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -10,7 +10,6 @@\n #include \"base58.h\"\n #include \"wallet/wallet.h\"\n \n-#include <boost/foreach.hpp>\n \n #include <QFont>\n #include <QDebug>"
      },
      {
        "sha": "4e88c8802c2b8a12caa2bcbd4b0ddb2963a0b738",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -11,7 +11,6 @@\n #include \"clientversion.h\"\n #include \"streams.h\"\n \n-#include <boost/foreach.hpp>\n \n RecentRequestsTableModel::RecentRequestsTableModel(CWallet *wallet, WalletModel *parent) :\n     QAbstractTableModel(parent), walletModel(parent)"
      },
      {
        "sha": "03fd734e9293402c7f885d6766e51b1a3ebb7bc3",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -12,7 +12,6 @@\n \n #include <stdint.h>\n \n-#include <boost/foreach.hpp>\n \n /* Return positive answer if transaction should be shown in list.\n  */"
      },
      {
        "sha": "7eff783fe84136204824c7d0b95acdb636c6f175",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -34,7 +34,6 @@\n #include <QSet>\n #include <QTimer>\n \n-#include <boost/foreach.hpp>\n \n WalletModel::WalletModel(const PlatformStyle *platformStyle, CWallet *_wallet, OptionsModel *_optionsModel, QObject *parent) :\n     QObject(parent), wallet(_wallet), optionsModel(_optionsModel), addressTableModel(0),"
      },
      {
        "sha": "409f895ce062f0db78a991de833522e227d51e1c",
        "filename": "src/reverse_iterator.h",
        "status": "added",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/reverse_iterator.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/reverse_iterator.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/reverse_iterator.h?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -0,0 +1,39 @@\n+// Taken from https://gist.github.com/arvidsson/7231973\n+\n+#ifndef BITCOIN_REVERSE_ITERATOR_HPP\n+#define BITCOIN_REVERSE_ITERATOR_HPP\n+\n+/**\n+ * Template used for reverse iteration in C++11 range-based for loops.\n+ * \n+ *   std::vector<int> v = {1, 2, 3, 4, 5};\n+ *   for (auto x : reverse_iterate(v))\n+ *       std::cout << x << \" \";\n+ */\n+\n+template <typename T>\n+class reverse_range\n+{\n+    T &x;\n+    \n+public:\n+    reverse_range(T &x) : x(x) {}\n+    \n+    auto begin() const -> decltype(this->x.rbegin())\n+    {\n+        return x.rbegin();\n+    }\n+    \n+    auto end() const -> decltype(this->x.rend())\n+    {\n+        return x.rend();\n+    }\n+};\n+ \n+template <typename T>\n+reverse_range<T> reverse_iterate(T &x)\n+{\n+    return reverse_range<T>(x);\n+}\n+\n+#endif // BITCOIN_REVERSE_ITERATOR_HPP"
      },
      {
        "sha": "89e0c5dbc563cb6d399c49dca91f94b14d2584b8",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -19,7 +19,6 @@\n #include \"utilstrencodings.h\"\n #include \"version.h\"\n \n-#include <boost/foreach.hpp>\n \n #include <univalue.h>\n "
      },
      {
        "sha": "63e4e9c630be3a0f9e271b64768f10f52e84f40c",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -17,7 +17,6 @@\n #include <univalue.h>\n \n #include <boost/bind.hpp>\n-#include <boost/foreach.hpp>\n #include <boost/signals2/signal.hpp>\n #include <boost/algorithm/string/case_conv.hpp> // for to_upper()\n #include <boost/algorithm/string/classification.hpp>"
      },
      {
        "sha": "0a39619734cfeaa12d3b69829ecf3c66f805355d",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -11,7 +11,6 @@\n #include \"script/standard.h\"\n #include \"script/sign.h\"\n \n-#include <boost/foreach.hpp>\n \n typedef std::vector<unsigned char> valtype;\n "
      },
      {
        "sha": "dc50467d3f13f985cbb8a081ff9fb37a5b0cfcb3",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -12,7 +12,6 @@\n #include \"script/standard.h\"\n #include \"uint256.h\"\n \n-#include <boost/foreach.hpp>\n \n typedef std::vector<unsigned char> valtype;\n "
      },
      {
        "sha": "760a5305e506be3833264458723dc12059c2ccb8",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -10,7 +10,6 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n-#include <boost/foreach.hpp>\n \n typedef std::vector<unsigned char> valtype;\n "
      },
      {
        "sha": "c359e8220b60417086ad7ba835649f6b27e5e966",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -9,7 +9,6 @@\n \n #include <stdio.h>\n \n-#include <boost/foreach.hpp>\n #include <boost/thread.hpp>\n \n #ifdef DEBUG_LOCKCONTENTION"
      },
      {
        "sha": "c79675f5a6dd1a3b848187fcd1744f4980b45218",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -9,7 +9,6 @@\n #include <vector>\n \n #include <boost/algorithm/string.hpp>\n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n BOOST_FIXTURE_TEST_SUITE(getarg_tests, BasicTestingSetup)"
      },
      {
        "sha": "c686f679c28c1ed381be87207f11e72c7f639217",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -14,7 +14,6 @@\n #include \"test/test_bitcoin.h\"\n \n \n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n typedef std::vector<unsigned char> valtype;"
      },
      {
        "sha": "345c4a2148c91bf780ec0256d371c7370767d0d7",
        "filename": "src/test/prevector_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/test/prevector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/test/prevector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/prevector_tests.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -5,6 +5,7 @@\n #include <vector>\n #include \"prevector.h\"\n \n+#include \"reverse_iterator.h\"\n #include \"serialize.h\"\n #include \"streams.h\"\n \n@@ -56,13 +57,13 @@ class prevector_tester {\n         for (const T& v : pre_vector) {\n              local_check(v == real_vector[pos++]);\n         }\n-        BOOST_REVERSE_FOREACH(const T& v, pre_vector) {\n+        for (const T& v : reverse_iterate(pre_vector)) {\n              local_check(v == real_vector[--pos]);\n         }\n         for (const T& v : const_pre_vector) {\n              local_check(v == real_vector[pos++]);\n         }\n-        BOOST_REVERSE_FOREACH(const T& v, const_pre_vector) {\n+        for (const T& v : reverse_iterate(const_pre_vector)) {\n              local_check(v == real_vector[--pos]);\n         }\n         CDataStream ss1(SER_DISK, 0);"
      },
      {
        "sha": "a18471588adf63ffaa21b6e4d30c2513d363bea2",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -24,7 +24,6 @@\n #include <string>\n #include <vector>\n \n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n #include <univalue.h>"
      },
      {
        "sha": "39f9f58604159fe439c6bdd2c799c9bb30ae9386",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -27,7 +27,6 @@\n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/split.hpp>\n #include <boost/test/unit_test.hpp>\n-#include <boost/foreach.hpp>\n \n #include <univalue.h>\n "
      },
      {
        "sha": "099ed7f04259e325c8df9eae81af4262a753f094",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -15,7 +15,6 @@\n #include \"utilstrencodings.h\"\n #include \"warnings.h\"\n \n-#include <boost/foreach.hpp>\n \n static CCriticalSection cs_nTimeOffset;\n static int64_t nTimeOffset = 0;"
      },
      {
        "sha": "3665e7e770a97d50ce0b28d50f1c9d18de3ddaa3",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -17,7 +17,6 @@\n \n #include <boost/bind.hpp>\n #include <boost/signals2/signal.hpp>\n-#include <boost/foreach.hpp>\n #include <boost/algorithm/string/split.hpp>\n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/replace.hpp>"
      },
      {
        "sha": "4a81055231b008e8bd74ce99010712be9cbce58d",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -11,6 +11,7 @@\n #include \"validation.h\"\n #include \"policy/policy.h\"\n #include \"policy/fees.h\"\n+#include \"reverse_iterator.h\"\n #include \"streams.h\"\n #include \"timedata.h\"\n #include \"util.h\"\n@@ -127,7 +128,7 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     // This maximizes the benefit of the descendant cache and guarantees that\n     // setMemPoolChildren will be updated, an assumption made in\n     // UpdateForDescendants.\n-    BOOST_REVERSE_FOREACH(const uint256 &hash, vHashesToUpdate) {\n+    for (const uint256 &hash : reverse_iterate(vHashesToUpdate)) {\n         // we cache the in-mempool children to avoid duplicate updates\n         setEntries setChildren;\n         // calculate children from mapNextTx"
      },
      {
        "sha": "09288be1ca49a3f81b1b564fa90f652d88ad13ce",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -24,6 +24,7 @@\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n #include \"random.h\"\n+#include \"reverse_iterator.h\"\n #include \"script/script.h\"\n #include \"script/sigcache.h\"\n #include \"script/standard.h\"\n@@ -2340,7 +2341,7 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n         nHeight = nTargetHeight;\n \n         // Connect new blocks.\n-        BOOST_REVERSE_FOREACH(CBlockIndex *pindexConnect, vpindexToConnect) {\n+        for (CBlockIndex *pindexConnect : reverse_iterate(vpindexToConnect)) {\n             if (!ConnectTip(state, chainparams, pindexConnect, pindexConnect == pindexMostWork ? pblock : std::shared_ptr<const CBlock>(), connectTrace, disconnectpool)) {\n                 if (state.IsInvalid()) {\n                     // The block violates a consensus rule."
      },
      {
        "sha": "dcce88cedc7e1b628c21ef48de10323ed9d45945",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -12,7 +12,6 @@\n \n #include <string>\n #include <vector>\n-#include <boost/foreach.hpp>\n \n int CCrypter::BytesToKeySHA512AES(const std::vector<unsigned char>& chSalt, const SecureString& strKeyData, int count, unsigned char *key,unsigned char *iv) const\n {"
      },
      {
        "sha": "da2d1807563bcb2e89c0b1afb5239d5960744ff9",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -18,7 +18,6 @@\n #include <sys/stat.h>\n #endif\n \n-#include <boost/foreach.hpp>\n #include <boost/thread.hpp>\n \n //"
      },
      {
        "sha": "9f42b1f2661afbe976f9e73224dbbef8819dfa00",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -26,7 +26,6 @@\n \n #include <univalue.h>\n \n-#include <boost/foreach.hpp>\n \n std::string static EncodeDumpTime(int64_t nTime) {\n     return DateTimeStrFormat(\"%Y-%m-%dT%H:%M:%SZ\", nTime);"
      },
      {
        "sha": "330878ceb585a793a19cbeed7c0b4192cc97acbd",
        "filename": "src/wallet/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/wallet/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/wallet/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/accounting_tests.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -8,7 +8,6 @@\n \n #include <stdint.h>\n \n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n extern CWallet* pwalletMain;"
      },
      {
        "sha": "deb09a477101b6c9dc3715a6005ae5f50e7531da",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "patch": "@@ -18,7 +18,6 @@\n \n #include <atomic>\n \n-#include <boost/foreach.hpp>\n #include <boost/thread.hpp>\n \n //"
      }
    ]
  },
  {
    "sha": "bd00fa52a1818f125c32d9759c3ddf506310271a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDAwZmE1MmExODE4ZjEyNWMzMmQ5NzU5YzNkZGY1MDYzMTAyNzFh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-04T16:27:46Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-04T16:27:46Z"
      },
      "message": "[test] don't run dbcrash.py on Travis",
      "tree": {
        "sha": "903b6f1d6ea419b3c558c836578a3a6bbba03989",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/903b6f1d6ea419b3c558c836578a3a6bbba03989"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd00fa52a1818f125c32d9759c3ddf506310271a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd00fa52a1818f125c32d9759c3ddf506310271a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd00fa52a1818f125c32d9759c3ddf506310271a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd00fa52a1818f125c32d9759c3ddf506310271a/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7397af9d314dd01ca3699efbe6eec68f62a6ef2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7397af9d314dd01ca3699efbe6eec68f62a6ef2b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7397af9d314dd01ca3699efbe6eec68f62a6ef2b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a79428fc17a1f6bd85e7e014b9976eb53f1415b2",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd00fa52a1818f125c32d9759c3ddf506310271a/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd00fa52a1818f125c32d9759c3ddf506310271a/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=bd00fa52a1818f125c32d9759c3ddf506310271a",
        "patch": "@@ -68,7 +68,7 @@ script:\n     - make $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && make $GOAL V=1 ; false )\n     - export LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib\n     - if [ \"$RUN_TESTS\" = \"true\" ]; then travis_wait 30 make $MAKEJOBS check VERBOSE=1; fi\n-    - if [ \"$TRAVIS_EVENT_TYPE\" = \"cron\" ]; then extended=\"--extended --exclude pruning\"; fi\n+    - if [ \"$TRAVIS_EVENT_TYPE\" = \"cron\" ]; then extended=\"--extended --exclude pruning,dbcrash\"; fi\n     - if [ \"$RUN_TESTS\" = \"true\" ]; then test/functional/test_runner.py --coverage --quiet ${extended}; fi\n after_script:\n     - echo $TRAVIS_COMMIT_RANGE"
      }
    ]
  },
  {
    "sha": "9bbf60047ea3300ebaffbe8cdc7c71e984418c20",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YmJmNjAwNDdlYTMzMDBlYmFmZmJlOGNkYzdjNzFlOTg0NDE4YzIw",
    "commit": {
      "author": {
        "name": "darksh1ne",
        "email": "microspam@list.ru",
        "date": "2017-07-04T19:22:53Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-07-04T19:22:53Z"
      },
      "message": "Use method name from __func__ macro\n\nUse __func__ macro in std::runtime_exception to:\r\n1. fix method name in CWalletTx::GetAvailableWatchOnlyCredit()\r\n2. refactor CWalletTx::GetAvailableCredit()",
      "tree": {
        "sha": "363355234ae3df06a1c716df7d400202805e4f94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/363355234ae3df06a1c716df7d400202805e4f94"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9bbf60047ea3300ebaffbe8cdc7c71e984418c20",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bbf60047ea3300ebaffbe8cdc7c71e984418c20",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9bbf60047ea3300ebaffbe8cdc7c71e984418c20",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bbf60047ea3300ebaffbe8cdc7c71e984418c20/comments",
    "author": {
      "login": "darksh1ne",
      "id": 4938960,
      "node_id": "MDQ6VXNlcjQ5Mzg5NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4938960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darksh1ne",
      "html_url": "https://github.com/darksh1ne",
      "followers_url": "https://api.github.com/users/darksh1ne/followers",
      "following_url": "https://api.github.com/users/darksh1ne/following{/other_user}",
      "gists_url": "https://api.github.com/users/darksh1ne/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darksh1ne/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darksh1ne/subscriptions",
      "organizations_url": "https://api.github.com/users/darksh1ne/orgs",
      "repos_url": "https://api.github.com/users/darksh1ne/repos",
      "events_url": "https://api.github.com/users/darksh1ne/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darksh1ne/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f5d9b33accb6e615011d4bdacc346b453ea860d7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bbf60047ea3300ebaffbe8cdc7c71e984418c20/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bbf60047ea3300ebaffbe8cdc7c71e984418c20/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9bbf60047ea3300ebaffbe8cdc7c71e984418c20",
        "patch": "@@ -1718,7 +1718,7 @@ CAmount CWalletTx::GetAvailableCredit(bool fUseCache) const\n             const CTxOut &txout = tx->vout[i];\n             nCredit += pwallet->GetCredit(txout, ISMINE_SPENDABLE);\n             if (!MoneyRange(nCredit))\n-                throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n+                throw std::runtime_error(std::string(__func__) + \" : value out of range\");\n         }\n     }\n \n@@ -1761,7 +1761,7 @@ CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool& fUseCache) const\n             const CTxOut &txout = tx->vout[i];\n             nCredit += pwallet->GetCredit(txout, ISMINE_WATCH_ONLY);\n             if (!MoneyRange(nCredit))\n-                throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n+                throw std::runtime_error(std::string(__func__) + \": value out of range\");\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "58e9864083118b538a46124f034c18dd582f4209",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OGU5ODY0MDgzMTE4YjUzOGE0NjEyNGYwMzRjMThkZDU4MmY0MjA5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-05T11:09:58Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-05T11:09:58Z"
      },
      "message": "[rpc] fix verbose argument for getblock in bitcoin-cli",
      "tree": {
        "sha": "f7797d7e417edb33a9ecf8af7228255e8015e4d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7797d7e417edb33a9ecf8af7228255e8015e4d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58e9864083118b538a46124f034c18dd582f4209",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58e9864083118b538a46124f034c18dd582f4209",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/58e9864083118b538a46124f034c18dd582f4209",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58e9864083118b538a46124f034c18dd582f4209/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7397af9d314dd01ca3699efbe6eec68f62a6ef2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7397af9d314dd01ca3699efbe6eec68f62a6ef2b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7397af9d314dd01ca3699efbe6eec68f62a6ef2b"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e87210003bb02c923a43624a82765593bf795887",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58e9864083118b538a46124f034c18dd582f4209/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58e9864083118b538a46124f034c18dd582f4209/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=58e9864083118b538a46124f034c18dd582f4209",
        "patch": "@@ -79,6 +79,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"listunspent\", 3, \"include_unsafe\" },\n     { \"listunspent\", 4, \"query_options\" },\n     { \"getblock\", 1, \"verbosity\" },\n+    { \"getblock\", 1, \"verbose\" },\n     { \"getblockheader\", 1, \"verbose\" },\n     { \"getchaintxstats\", 0, \"nblocks\" },\n     { \"gettransaction\", 1, \"include_watchonly\" },"
      }
    ]
  },
  {
    "sha": "928c6811f22fa857958782a994089523104d89d1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjhjNjgxMWYyMmZhODU3OTU4NzgyYTk5NDA4OTUyMzEwNGQ4OWQx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-06-28T21:49:04Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-05T22:11:19Z"
      },
      "message": "Use \"replaceable\" instead of \"optintorbf\" in createrawtransaction.\n\nTo be consistent with other places (and add the missing named\nargs entry for it).",
      "tree": {
        "sha": "575e7c0d8c961fe0fa81c5a5286c0737a5643c66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/575e7c0d8c961fe0fa81c5a5286c0737a5643c66"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/928c6811f22fa857958782a994089523104d89d1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/928c6811f22fa857958782a994089523104d89d1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/928c6811f22fa857958782a994089523104d89d1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/928c6811f22fa857958782a994089523104d89d1/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90a002ea647dcea57a2ed4294eab77897168ba1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90a002ea647dcea57a2ed4294eab77897168ba1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90a002ea647dcea57a2ed4294eab77897168ba1d"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "a3ea5390eec2d2ca522a9950b636e8ef2387d628",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/928c6811f22fa857958782a994089523104d89d1/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/928c6811f22fa857958782a994089523104d89d1/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=928c6811f22fa857958782a994089523104d89d1",
        "patch": "@@ -86,7 +86,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"createrawtransaction\", 0, \"inputs\" },\n     { \"createrawtransaction\", 1, \"outputs\" },\n     { \"createrawtransaction\", 2, \"locktime\" },\n-    { \"createrawtransaction\", 3, \"optintorbf\" },\n+    { \"createrawtransaction\", 3, \"replaceable\" },\n     { \"signrawtransaction\", 1, \"prevtxs\" },\n     { \"signrawtransaction\", 2, \"privkeys\" },\n     { \"sendrawtransaction\", 1, \"allowhighfees\" },"
      },
      {
        "sha": "b878624df8779f9c9293dcbbdc7a15300ac4612d",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/928c6811f22fa857958782a994089523104d89d1/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/928c6811f22fa857958782a994089523104d89d1/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=928c6811f22fa857958782a994089523104d89d1",
        "patch": "@@ -294,7 +294,7 @@ UniValue createrawtransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n         throw std::runtime_error(\n-            \"createrawtransaction [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n},...] {\\\"address\\\":amount,\\\"data\\\":\\\"hex\\\",...} ( locktime ) ( optintorbf )\\n\"\n+            \"createrawtransaction [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n},...] {\\\"address\\\":amount,\\\"data\\\":\\\"hex\\\",...} ( locktime ) ( replaceable )\\n\"\n             \"\\nCreate a transaction spending the given inputs and creating new outputs.\\n\"\n             \"Outputs can be addresses or data.\\n\"\n             \"Returns hex-encoded raw transaction.\\n\"\n@@ -318,7 +318,8 @@ UniValue createrawtransaction(const JSONRPCRequest& request)\n             \"      ,...\\n\"\n             \"    }\\n\"\n             \"3. locktime                  (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs\\n\"\n-            \"4. optintorbf                (boolean, optional, default=false) Allow this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\\n\"\n+            \"4. replaceable               (boolean, optional, default=false) Marks this transaction as BIP125 replaceable.\\n\"\n+            \"                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"transaction\\\"              (string) hex string of the transaction\\n\"\n \n@@ -412,7 +413,7 @@ UniValue createrawtransaction(const JSONRPCRequest& request)\n     }\n \n     if (request.params.size() > 3 && rbfOptIn != SignalsOptInRBF(rawTx)) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter combination: Sequence number(s) contradict optintorbf option\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter combination: Sequence number(s) contradict replaceable option\");\n     }\n \n     return EncodeHexTx(rawTx);\n@@ -900,7 +901,7 @@ static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         okSafeMode\n   //  --------------------- ------------------------  -----------------------  ----------\n     { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true,  {\"txid\",\"verbose\"} },\n-    { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   true,  {\"inputs\",\"outputs\",\"locktime\"} },\n+    { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   true,  {\"inputs\",\"outputs\",\"locktime\",\"replaceable\"} },\n     { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   true,  {\"hexstring\"} },\n     { \"rawtransactions\",    \"decodescript\",           &decodescript,           true,  {\"hexstring\"} },\n     { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false, {\"hexstring\",\"allowhighfees\"} },"
      }
    ]
  },
  {
    "sha": "fb915d5b183adb915c72bb11c6f3b418841e3512",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjkxNWQ1YjE4M2FkYjkxNWM3MmJiMTFjNmYzYjQxODg0MWUzNTEy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-06-28T21:53:06Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-05T22:11:22Z"
      },
      "message": "Use \"replaceable\" instead of \"optIntoRbf\" in fundrawtransaction.\n\nTo be consistent with other RPCs",
      "tree": {
        "sha": "1cfcb69e58ce25c66355efcbd3b55ddab10f356e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1cfcb69e58ce25c66355efcbd3b55ddab10f356e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb915d5b183adb915c72bb11c6f3b418841e3512",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb915d5b183adb915c72bb11c6f3b418841e3512",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb915d5b183adb915c72bb11c6f3b418841e3512",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb915d5b183adb915c72bb11c6f3b418841e3512/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "928c6811f22fa857958782a994089523104d89d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/928c6811f22fa857958782a994089523104d89d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/928c6811f22fa857958782a994089523104d89d1"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "ebbde59972c406aa07d8aad0349c6806d5ca814b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb915d5b183adb915c72bb11c6f3b418841e3512/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb915d5b183adb915c72bb11c6f3b418841e3512/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fb915d5b183adb915c72bb11c6f3b418841e3512",
        "patch": "@@ -2655,7 +2655,8 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n                             \"                              If no outputs are specified here, the sender pays the fee.\\n\"\n                             \"                                  [vout_index,...]\\n\"\n-                            \"     \\\"optIntoRbf\\\"             (boolean, optional) Allow this transaction to be replaced by a transaction with higher fees\\n\"\n+                            \"     \\\"replaceable\\\"            (boolean, optional) Marks this transaction as BIP125 replaceable.\\n\"\n+                            \"                              Allows this transaction to be replaced by a transaction with higher fees\\n\"\n                             \"   }\\n\"\n                             \"                         for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\\n\"\n                             \"\\nResult:\\n\"\n@@ -2707,7 +2708,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                 {\"reserveChangeKey\", UniValueType(UniValue::VBOOL)},\n                 {\"feeRate\", UniValueType()}, // will be checked below\n                 {\"subtractFeeFromOutputs\", UniValueType(UniValue::VARR)},\n-                {\"optIntoRbf\", UniValueType(UniValue::VBOOL)},\n+                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n             },\n             true, true);\n \n@@ -2741,8 +2742,8 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n         if (options.exists(\"subtractFeeFromOutputs\"))\n             subtractFeeFromOutputs = options[\"subtractFeeFromOutputs\"].get_array();\n \n-        if (options.exists(\"optIntoRbf\")) {\n-            coinControl.signalRbf = options[\"optIntoRbf\"].get_bool();\n+        if (options.exists(\"replaceable\")) {\n+            coinControl.signalRbf = options[\"replaceable\"].get_bool();\n         }\n       }\n     }"
      }
    ]
  },
  {
    "sha": "73c942ecd300c72f1e267e783c18eed93100a313",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3M2M5NDJlY2QzMDBjNzJmMWUyNjdlNzgzYzE4ZWVkOTMxMDBhMzEz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-06-28T21:53:44Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-05T22:11:22Z"
      },
      "message": "Use \"replaceable\" instead of \"rbfoptin\" in bitcoin-tx.\n\nTo be consistent with RPC naming",
      "tree": {
        "sha": "e5993e9025e153a743dd246c982ccf1dd8abf486",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5993e9025e153a743dd246c982ccf1dd8abf486"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/73c942ecd300c72f1e267e783c18eed93100a313",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73c942ecd300c72f1e267e783c18eed93100a313",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/73c942ecd300c72f1e267e783c18eed93100a313",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73c942ecd300c72f1e267e783c18eed93100a313/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb915d5b183adb915c72bb11c6f3b418841e3512",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb915d5b183adb915c72bb11c6f3b418841e3512",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb915d5b183adb915c72bb11c6f3b418841e3512"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c6d5db786e7037c9c45dacf5c25976077ffea70d",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73c942ecd300c72f1e267e783c18eed93100a313/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73c942ecd300c72f1e267e783c18eed93100a313/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=73c942ecd300c72f1e267e783c18eed93100a313",
        "patch": "@@ -77,7 +77,7 @@ static int AppInitRawTx(int argc, char* argv[])\n         strUsage += HelpMessageOpt(\"in=TXID:VOUT(:SEQUENCE_NUMBER)\", _(\"Add input to TX\"));\n         strUsage += HelpMessageOpt(\"locktime=N\", _(\"Set TX lock time to N\"));\n         strUsage += HelpMessageOpt(\"nversion=N\", _(\"Set TX version to N\"));\n-        strUsage += HelpMessageOpt(\"rbfoptin(=N)\", _(\"Set RBF opt-in sequence number for input N (if not provided, opt-in all available inputs)\"));\n+        strUsage += HelpMessageOpt(\"replaceable(=N)\", _(\"Set RBF opt-in sequence number for input N (if not provided, opt-in all available inputs)\"));\n         strUsage += HelpMessageOpt(\"outaddr=VALUE:ADDRESS\", _(\"Add address-based output to TX\"));\n         strUsage += HelpMessageOpt(\"outpubkey=VALUE:PUBKEY[:FLAGS]\", _(\"Add pay-to-pubkey output to TX\") + \". \" +\n             _(\"Optionally add the \\\"W\\\" flag to produce a pay-to-witness-pubkey-hash output\") + \". \" +\n@@ -673,7 +673,7 @@ static void MutateTx(CMutableTransaction& tx, const std::string& command,\n         MutateTxVersion(tx, commandVal);\n     else if (command == \"locktime\")\n         MutateTxLocktime(tx, commandVal);\n-    else if (command == \"rbfoptin\") {\n+    else if (command == \"replaceable\") {\n         MutateTxRBFOptIn(tx, commandVal);\n     }\n "
      }
    ]
  },
  {
    "sha": "191d12b07377393c9eb67770ff5cb8e9a1c5cd7c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOTFkMTJiMDczNzczOTNjOWViNjc3NzBmZjVjYjhlOWExYzVjZDdj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-06T07:43:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-06T07:43:05Z"
      },
      "message": "qt: First translations update for 0.15",
      "tree": {
        "sha": "a86f91a9e90319d0e9bcc68b8e6579c94967024a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a86f91a9e90319d0e9bcc68b8e6579c94967024a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/191d12b07377393c9eb67770ff5cb8e9a1c5cd7c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZXeocAAoJEB5K7WKYbNJdjL4IAIL6AuBy8OKNIEY/yOGQHSWt\nNLhD3fKWsB0Ns5R9qlonWarSdYJQxgyS0iCkLa/DDiE3ua+U9Ijpm/3Kt+GUdsmS\nBzBUi4nAr+L84YPB1lvgGSPWP5FHxXufJ8SPTpQpxixAkBZ12Be28TLZe8ok73QF\nZydOvquh4kPMTYmyoHp8PU/vV0Tq4gkeSV0mlfmGDyr7PbmjdlippA0SXxCK1jys\njM5Y3Ntfoluc3Dq3ZmPXDaIodUOS5pohncSaf7vc993rr65jgVINdopSEkx7ieoU\nb8nL4wlYpBs6+8Zyuc//qT2K2OWCpbgvcIEqdLFYYFH02l+Y5ty0df1uJHY5sRc=\n=V7YZ\n-----END PGP SIGNATURE-----",
        "payload": "tree a86f91a9e90319d0e9bcc68b8e6579c94967024a\nparent 6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1499326985 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1499326985 +0200\n\nqt: First translations update for 0.15\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/191d12b07377393c9eb67770ff5cb8e9a1c5cd7c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/191d12b07377393c9eb67770ff5cb8e9a1c5cd7c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/191d12b07377393c9eb67770ff5cb8e9a1c5cd7c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d"
      }
    ],
    "stats": {
      "total": 643,
      "additions": 419,
      "deletions": 224
    },
    "files": [
      {
        "sha": "b3d2cf1d55c04c54a6d58c38d9bddccd66fe3538",
        "filename": "src/qt/bitcoinstrings.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 18,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/191d12b07377393c9eb67770ff5cb8e9a1c5cd7c/src/qt/bitcoinstrings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/191d12b07377393c9eb67770ff5cb8e9a1c5cd7c/src/qt/bitcoinstrings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinstrings.cpp?ref=191d12b07377393c9eb67770ff5cb8e9a1c5cd7c",
        "patch": "@@ -21,9 +21,6 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"A fee rate (in %s/kB) that will be used when fee estimation has insufficient \"\n \"data (default: %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Accept connections from outside (default: 1 if no -proxy or -connect/-\"\n-\"noconnect)\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Accept relayed transactions received from whitelisted peers even when not \"\n \"relaying transactions (default: %d)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n@@ -37,14 +34,16 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Bind to given address and whitelist peers connecting to it. Use [host]:port \"\n \"notation for IPv6\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Bind to given address to listen for JSON-RPC connections. Use [host]:port \"\n-\"notation for IPv6. This option can be specified multiple times (default: \"\n-\"bind to all interfaces)\"),\n+\"Bind to given address to listen for JSON-RPC connections. This option is \"\n+\"ignored unless -rpcallowip is also passed. Port is optional and overrides -\"\n+\"rpcport. Use [host]:port notation for IPv6. This option can be specified \"\n+\"multiple times (default: 127.0.0.1 and ::1 i.e., localhost, or if -\"\n+\"rpcallowip has been specified, 0.0.0.0 and :: i.e., all addresses)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Cannot obtain a lock on data directory %s. %s is probably already running.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Connect only to the specified node(s); -noconnect or -connect=0 alone to \"\n-\"disable automatic connections\"),\n+\"Connect only to the specified node(s); -connect=0 disables automatic \"\n+\"connections\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Create new files with system default permissions, instead of umask 077 (only \"\n \"effective with disabled wallet functionality)\"),\n@@ -62,13 +61,17 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Error loading %s: You can't enable HD on a already existing non-HD wallet\"),\n+\"Error loading %s: You can't enable HD on an already existing non-HD wallet\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Error reading %s! All keys read correctly, but transaction data or address \"\n \"book entries might be missing or incorrect.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Error: Listening for incoming connections failed (listen returned error %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"Exclude debugging information for a category. Can be used in conjunction \"\n+\"with -debug=1 to output debug logs for all categories except one or more \"\n+\"specified categories.\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Execute command when a relevant alert is received or we see a really long \"\n \"fork (%s in cmd is replaced by message)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n@@ -134,7 +137,7 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"reindex (download the whole blockchain again in case of pruned node)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Query for peer addresses via DNS lookup, if low on addresses (default: 1 \"\n-\"unless -connect/-noconnect)\"),\n+\"unless -connect used)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Randomize credentials for every proxy connection. This enables Tor stream \"\n \"isolation (default: %u)\"),\n@@ -154,8 +157,6 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Set lowest fee rate (in %s/kB) for transactions to be included in block \"\n \"creation. (default: %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Set maximum size of high-priority/low-fee transactions in bytes (default: %d)\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Set the number of script verification threads (%u to %d, 0 = auto, <0 = \"\n \"leave that many cores free, default: %d)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n@@ -186,6 +187,9 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = \"\n \"no limit (default: %d)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"Unable to replay blocks. You will need to rebuild the database using -\"\n+\"reindex-chainstate.\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Unable to rewind the database to a pre-fork state. You will need to \"\n \"redownload the blockchain\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n@@ -225,6 +229,8 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Warning: We do not appear to fully agree with our peers! You may need to \"\n \"upgrade, or other nodes may need to upgrade.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"Whether to save the mempool on shutdown and load on restart (default: %u)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or CIDR \"\n \"notated network (e.g. 1.2.3.0/24). Can be specified multiple times.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n@@ -235,13 +241,17 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"mode.  This will redownload the entire blockchain\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"You need to rebuild the database using -reindex-chainstate to change -txindex\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"%d of last 100 blocks have unexpected version\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"%s corrupt, salvage failed\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"%s is set very high!\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"(default: %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"(default: %u)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"(press q to shutdown and continue later)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"-maxmempool must be at least %d MB\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"-wallet parameter must only specify a filename (not a path)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"<category> can be:\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Accept command line and JSON-RPC commands\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Accept connections from outside (default: 1 if no -proxy or -connect)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Accept public REST requests (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Add a node to connect to and attempt to keep the connection open\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Allow DNS lookups for -addnode, -seednode and -connect\"),\n@@ -274,10 +284,11 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error initializing wallet database environmen\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error loading %s\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error loading %s: Wallet corrupted\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error loading %s: Wallet requires newer version of %s\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error loading %s: You can't disable HD on a already existing HD wallet\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error loading %s: You can't disable HD on an already existing HD wallet\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error loading block database\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error opening block database\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error reading from database, shutting down.\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error upgrading chainstate database\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: A fatal internal error occurred, see debug.log for details\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Disk space is low!\"),\n@@ -291,18 +302,19 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Incorrect or no genesis block found. Wrong da\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Information\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Initialization sanity check failed. %s is shutting down.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Insufficient funds\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid -onion address: '%s'\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid -proxy address: '%s'\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid -onion address or hostname: '%s'\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid -proxy address or hostname: '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid amount for -%s=<amount>: '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid amount for -fallbackfee=<amount>: '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid characters in -wallet filename\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid netmask specified in -whitelist: '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Keep at most <n> unconnectable transactions in memory (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Keep the transaction memory pool below <n> megabytes (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Keypool ran out, please call keypoolrefill first\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Listen for connections on <port> (default: %u or testnet: %u)\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Loading addresses...\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Loading P2P addresses...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Loading banlist...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Loading block index...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Loading wallet...\"),\n@@ -329,12 +341,12 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Rebuild chain state from the currently indexe\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Reducing -maxconnections from %d to %d, because of system limitations.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Relay and mine data carrier transactions (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Relay non-P2SH multisig (default: %u)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Replaying blocks...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Rescan the block chain for missing wallet transactions on startup\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Rescanning...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Rewinding blocks...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Run in the background as a daemon and accept commands\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Send trace/debug info to console instead of debug.log file\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Send transactions as zero-fee transactions if possible (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Send transactions with full-RBF opt-in enabled (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Set database cache size in megabytes (%d to %d, default: %d)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Set key pool size to <n> (default: %u)\"),\n@@ -374,13 +386,15 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unknown network specified in -onlynet: '%s'\")\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unsupported argument -benchmark ignored, use -debug=bench.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unsupported argument -debugnet ignored, use -debug=net.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unsupported argument -tor found, use -onion.\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unsupported logging category %s=%s.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Upgrade wallet to latest format on startup\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Upgrading UTXO database\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Use UPnP to map the listening port (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Use the test chain\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"User Agent comment (%s) contains unsafe characters.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Username for JSON-RPC connections\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Verifying blocks...\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Verifying wallet...\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Verifying wallet(s)...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Wallet %s resides outside data directory %s\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Wallet debugging/testing options:\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Wallet needed to be rewritten: restart %s to complete\"),"
      },
      {
        "sha": "91830750671d1556ac48e8afa8c3dcbba36b72eb",
        "filename": "src/qt/locale/bitcoin_en.ts",
        "status": "modified",
        "additions": 387,
        "deletions": 206,
        "changes": 593,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/191d12b07377393c9eb67770ff5cb8e9a1c5cd7c/src/qt/locale/bitcoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/191d12b07377393c9eb67770ff5cb8e9a1c5cd7c/src/qt/locale/bitcoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.ts?ref=191d12b07377393c9eb67770ff5cb8e9a1c5cd7c",
        "patch": "@@ -127,7 +127,7 @@\n <context>\n     <name>AddressTableModel</name>\n     <message>\n-        <location filename=\"../addresstablemodel.cpp\" line=\"+170\"/>\n+        <location filename=\"../addresstablemodel.cpp\" line=\"+169\"/>\n         <source>Label</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -304,12 +304,12 @@\n         <translation>Sign &amp;message...</translation>\n     </message>\n     <message>\n-        <location line=\"+427\"/>\n+        <location line=\"+429\"/>\n         <source>Synchronizing with network...</source>\n         <translation>Synchronizing with network...</translation>\n     </message>\n     <message>\n-        <location line=\"-505\"/>\n+        <location line=\"-507\"/>\n         <source>&amp;Overview</source>\n         <translation>&amp;Overview</translation>\n     </message>\n@@ -404,7 +404,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+357\"/>\n+        <location line=\"+359\"/>\n         <source>Click to disable network activity.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -429,7 +429,7 @@\n         <translation>Reindexing blocks on disk...</translation>\n     </message>\n     <message>\n-        <location line=\"-508\"/>\n+        <location line=\"-510\"/>\n         <source>Send coins to a Bitcoin address</source>\n         <translation>Send coins to a Bitcoin address</translation>\n     </message>\n@@ -459,12 +459,12 @@\n         <translation>&amp;Verify message...</translation>\n     </message>\n     <message>\n-        <location line=\"+514\"/>\n+        <location line=\"+516\"/>\n         <source>Bitcoin</source>\n         <translation>Bitcoin</translation>\n     </message>\n     <message>\n-        <location line=\"-739\"/>\n+        <location line=\"-741\"/>\n         <source>Wallet</source>\n         <translation>Wallet</translation>\n     </message>\n@@ -549,7 +549,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message numerus=\"yes\">\n-        <location line=\"+354\"/>\n+        <location line=\"+356\"/>\n         <source>%n active connection(s) to Bitcoin network</source>\n         <translation>\n             <numerusform>%n active connection to Bitcoin network</numerusform>\n@@ -610,12 +610,12 @@\n         <translation>Up to date</translation>\n     </message>\n     <message>\n-        <location line=\"-438\"/>\n+        <location line=\"-440\"/>\n         <source>Show the %1 help message to get a list with possible Bitcoin command-line options</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+197\"/>\n+        <location line=\"+199\"/>\n         <source>%1 client</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -690,7 +690,7 @@\n         <translation>Wallet is &lt;b&gt;encrypted&lt;/b&gt; and currently &lt;b&gt;locked&lt;/b&gt;</translation>\n     </message>\n     <message>\n-        <location filename=\"../bitcoin.cpp\" line=\"+518\"/>\n+        <location filename=\"../bitcoin.cpp\" line=\"+524\"/>\n         <source>A fatal error occurred. Bitcoin can no longer continue safely and will quit.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -783,7 +783,7 @@\n         <translation type=\"unfinished\">Confirmed</translation>\n     </message>\n     <message>\n-        <location filename=\"../coincontroldialog.cpp\" line=\"+55\"/>\n+        <location filename=\"../coincontroldialog.cpp\" line=\"+54\"/>\n         <source>Copy address</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -849,7 +849,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+183\"/>\n+        <location line=\"+155\"/>\n         <source>yes</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -956,7 +956,7 @@\n <context>\n     <name>FreespaceChecker</name>\n     <message>\n-        <location filename=\"../intro.cpp\" line=\"+78\"/>\n+        <location filename=\"../intro.cpp\" line=\"+76\"/>\n         <source>A new data directory will be created.</source>\n         <translation>A new data directory will be created.</translation>\n     </message>\n@@ -1067,13 +1067,23 @@\n         <source>As this is the first time the program is launched, you can choose where %1 will store its data.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+157\"/>\n+        <source>When you click OK, %1 will begin to download and process the full %4 block chain (%2GB) starting with the earliest transactions in %3 when %4 initially launched.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+10\"/>\n-        <source>%1 will download and store a copy of the Bitcoin block chain. At least %2GB of data will be stored in this directory, and it will grow over time. The wallet will also be stored in this directory.</source>\n+        <source>This initial synchronisation is very demanding, and may expose hardware problems with your computer that had previously gone unnoticed. Each time you run %1, it will continue downloading where it left off.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+10\"/>\n+        <source>If you have chosen to limit block chain storage (pruning), the historical data must still be downloaded and processed, but will be deleted afterward to keep your disk usage low.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"-160\"/>\n         <source>Use the default data directory</source>\n         <translation>Use the default data directory</translation>\n     </message>\n@@ -1083,7 +1093,32 @@\n         <translation>Use a custom data directory:</translation>\n     </message>\n     <message>\n-        <location filename=\"../intro.cpp\" line=\"+94\"/>\n+        <location filename=\"../intro.cpp\" line=\"+20\"/>\n+        <source>Bitcoin</source>\n+        <translation type=\"unfinished\">Bitcoin</translation>\n+    </message>\n+    <message>\n+        <location line=\"+6\"/>\n+        <source>At least %1 GB of data will be stored in this directory, and it will grow over time.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+5\"/>\n+        <source>Approximately %1 GB of data will be stored in this directory.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+8\"/>\n+        <source>%1 will download and store a copy of the Bitcoin block chain.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+2\"/>\n+        <source>The wallet will also be stored in this directory.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+70\"/>\n         <source>Error: Specified data directory &quot;%1&quot; cannot be created.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1257,7 +1292,14 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+94\"/>\n+        <location line=\"-118\"/>\n+        <location line=\"+23\"/>\n+        <location line=\"+23\"/>\n+        <source>Shows if the supplied default SOCKS5 proxy is used to reach peers via this network type.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+166\"/>\n         <source>Minimize instead of exit the application when the window is closed. When this option is enabled, the application will be closed only after selecting Exit in the menu.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1278,7 +1320,17 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+43\"/>\n+        <location line=\"+45\"/>\n+        <source>Open the %1 configuration file from the working directory.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n+        <source>Open Configuration File</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+10\"/>\n         <source>Reset all client options to default.</source>\n         <translation>Reset all client options to default.</translation>\n     </message>\n@@ -1288,7 +1340,7 @@\n         <translation>&amp;Reset Options</translation>\n     </message>\n     <message>\n-        <location line=\"-514\"/>\n+        <location line=\"-529\"/>\n         <source>&amp;Network</source>\n         <translation>&amp;Network</translation>\n     </message>\n@@ -1366,14 +1418,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+13\"/>\n         <location line=\"+23\"/>\n-        <location line=\"+23\"/>\n-        <source>Shows, if the supplied default SOCKS5 proxy is used to reach peers via this network type.</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"-36\"/>\n         <source>IPv4</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1458,7 +1503,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+612\"/>\n+        <location line=\"+646\"/>\n         <source>&amp;OK</source>\n         <translation>&amp;OK</translation>\n     </message>\n@@ -1468,7 +1513,7 @@\n         <translation>&amp;Cancel</translation>\n     </message>\n     <message>\n-        <location filename=\"../optionsdialog.cpp\" line=\"+86\"/>\n+        <location filename=\"../optionsdialog.cpp\" line=\"+84\"/>\n         <source>default</source>\n         <translation>default</translation>\n     </message>\n@@ -1484,22 +1529,42 @@\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <location line=\"+43\"/>\n+        <location line=\"+55\"/>\n         <source>Client restart required to activate changes.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-43\"/>\n+        <location line=\"-55\"/>\n         <source>Client will be shut down. Do you want to proceed?</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+47\"/>\n+        <location line=\"+15\"/>\n+        <source>Configuration options</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>The configuration file is used to specify advanced user options which override GUI settings. Additionally, any command-line options will override this configuration file.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+5\"/>\n+        <source>Error</source>\n+        <translation type=\"unfinished\">Error</translation>\n+    </message>\n+    <message>\n+        <location line=\"+0\"/>\n+        <source>The configuration file could not be opened.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+38\"/>\n         <source>This change would require a client restart.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+25\"/>\n+        <location line=\"+28\"/>\n         <source>The supplied proxy address is invalid.</source>\n         <translation>The supplied proxy address is invalid.</translation>\n     </message>\n@@ -1755,12 +1820,12 @@\n         <translation type=\"unfinished\">Amount</translation>\n     </message>\n     <message>\n-        <location filename=\"../guiutil.cpp\" line=\"+136\"/>\n+        <location filename=\"../guiutil.cpp\" line=\"+130\"/>\n         <source>Enter a Bitcoin address (e.g. %1)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+759\"/>\n+        <location line=\"+766\"/>\n         <source>%1 d</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1850,7 +1915,7 @@\n         </translation>\n     </message>\n     <message>\n-        <location filename=\"../bitcoin.cpp\" line=\"+172\"/>\n+        <location filename=\"../bitcoin.cpp\" line=\"+173\"/>\n         <source>%1 didn&apos;t yet exit safely...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2007,7 +2072,12 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+404\"/>\n+        <location line=\"+324\"/>\n+        <source>&amp;Reset</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+80\"/>\n         <location line=\"+558\"/>\n         <source>Received</source>\n         <translation type=\"unfinished\"></translation>\n@@ -2030,8 +2100,8 @@\n     </message>\n     <message>\n         <location line=\"+60\"/>\n-        <location filename=\"../rpcconsole.cpp\" line=\"+456\"/>\n-        <location line=\"+719\"/>\n+        <location filename=\"../rpcconsole.cpp\" line=\"+458\"/>\n+        <location line=\"+728\"/>\n         <source>Select a peer to view detailed information.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2157,12 +2227,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+52\"/>\n-        <source>&amp;Clear</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+16\"/>\n+        <location line=\"+68\"/>\n         <source>Totals</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2187,7 +2252,7 @@\n         <translation>Clear console</translation>\n     </message>\n     <message>\n-        <location filename=\"../rpcconsole.cpp\" line=\"-214\"/>\n+        <location filename=\"../rpcconsole.cpp\" line=\"-223\"/>\n         <source>1 &amp;hour</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2225,23 +2290,23 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+126\"/>\n+        <location line=\"+135\"/>\n         <source>Welcome to the %1 RPC console.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n-        <source>Use up and down arrows to navigate history, and &lt;b&gt;Ctrl-L&lt;/b&gt; to clear screen.</source>\n-        <translation>Use up and down arrows to navigate history, and &lt;b&gt;Ctrl-L&lt;/b&gt; to clear screen.</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n+        <location line=\"+2\"/>\n         <source>Type &lt;b&gt;help&lt;/b&gt; for an overview of available commands.</source>\n         <translation>Type &lt;b&gt;help&lt;/b&gt; for an overview of available commands.</translation>\n     </message>\n     <message>\n-        <location line=\"+2\"/>\n-        <source>WARNING: Scammers have been active, telling users to type commands here, stealing their wallet contents. Do not use this console without fully understanding the ramification of a command.</source>\n+        <location line=\"-1\"/>\n+        <source>Use up and down arrows to navigate history, and %1 to clear screen.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n+        <source>WARNING: Scammers have been active, telling users to type commands here, stealing their wallet contents. Do not use this console without fully understanding the ramifications of a command.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n@@ -2494,7 +2559,7 @@\n <context>\n     <name>RecentRequestsTableModel</name>\n     <message>\n-        <location filename=\"../recentrequeststablemodel.cpp\" line=\"+29\"/>\n+        <location filename=\"../recentrequeststablemodel.cpp\" line=\"+28\"/>\n         <source>Date</source>\n         <translation type=\"unfinished\">Date</translation>\n     </message>\n@@ -2509,7 +2574,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+40\"/>\n+        <location line=\"+39\"/>\n         <source>(no label)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2533,7 +2598,7 @@\n     <name>SendCoinsDialog</name>\n     <message>\n         <location filename=\"../forms/sendcoinsdialog.ui\" line=\"+14\"/>\n-        <location filename=\"../sendcoinsdialog.cpp\" line=\"+554\"/>\n+        <location filename=\"../sendcoinsdialog.cpp\" line=\"+565\"/>\n         <source>Send Coins</source>\n         <translation>Send Coins</translation>\n     </message>\n@@ -2608,7 +2673,17 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+37\"/>\n+        <location line=\"+24\"/>\n+        <source>Using the fallbackfee can result in sending a transaction that will take several hours or days (or never) to confirm. Consider choosing your fee manually or wait until your have validated the complete chain.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+9\"/>\n+        <source>Warning: Fee estimation is currently not possible.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+26\"/>\n         <source>collapse fee-settings</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2619,22 +2694,16 @@\n     </message>\n     <message>\n         <location line=\"-3\"/>\n-        <location line=\"+16\"/>\n         <source>If the custom fee is set to 1000 satoshis and the transaction is only 250 bytes, then &quot;per kilobyte&quot; only pays 250 satoshis in fee, while &quot;total at least&quot; pays 1000 satoshis. For transactions bigger than a kilobyte both pay by kilobyte.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-64\"/>\n+        <location line=\"-48\"/>\n         <source>Hide</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+67\"/>\n-        <source>total at least</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+30\"/>\n+        <location line=\"+84\"/>\n         <location line=\"+13\"/>\n         <source>Paying only the minimum fee is just fine as long as there is less transaction volume than space in the blocks. But be aware that this can end up in a never confirming transaction once there is more demand for bitcoin transactions than the network can process.</source>\n         <translation type=\"unfinished\"></translation>\n@@ -2670,7 +2739,17 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+102\"/>\n+        <location line=\"+30\"/>\n+        <source>Request Replace-By-Fee</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n+        <source>Indicates that the sender may wish to replace this transaction with a new one paying higher fees (prior to being confirmed).</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+79\"/>\n         <source>Send to multiple recipients at once</source>\n         <translation>Send to multiple recipients at once</translation>\n     </message>\n@@ -2685,17 +2764,17 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-876\"/>\n+        <location line=\"-895\"/>\n         <source>Dust:</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+691\"/>\n+        <location line=\"+700\"/>\n         <source>Confirmation time target:</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+188\"/>\n+        <location line=\"+198\"/>\n         <source>Clear &amp;All</source>\n         <translation>Clear &amp;All</translation>\n     </message>\n@@ -2715,7 +2794,7 @@\n         <translation>S&amp;end</translation>\n     </message>\n     <message>\n-        <location filename=\"../sendcoinsdialog.cpp\" line=\"-486\"/>\n+        <location filename=\"../sendcoinsdialog.cpp\" line=\"-497\"/>\n         <source>Copy quantity</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2750,7 +2829,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+205\"/>\n+        <location line=\"+209\"/>\n         <location line=\"+5\"/>\n         <location line=\"+5\"/>\n         <location line=\"+4\"/>\n@@ -2778,7 +2857,12 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+2\"/>\n+        <location line=\"+5\"/>\n+        <source>This transaction signals replaceability (optin-RBF).</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+4\"/>\n         <source>Confirm send coins</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2828,28 +2912,28 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message numerus=\"yes\">\n-        <location line=\"+67\"/>\n+        <location line=\"+63\"/>\n         <source>%n block(s)</source>\n         <translation>\n             <numerusform>%n block</numerusform>\n             <numerusform>%n blocks</numerusform>\n         </translation>\n     </message>\n     <message>\n-        <location line=\"+28\"/>\n+        <location line=\"+24\"/>\n         <source>Pay only the required fee of %1</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message numerus=\"yes\">\n-        <location line=\"+25\"/>\n+        <location line=\"+30\"/>\n         <source>Estimated to begin confirmation within %n block(s).</source>\n         <translation>\n             <numerusform>Estimated to begin confirmation within %n block.</numerusform>\n             <numerusform>Estimated to begin confirmation within %n blocks.</numerusform>\n         </translation>\n     </message>\n     <message>\n-        <location line=\"+102\"/>\n+        <location line=\"+103\"/>\n         <source>Warning: Invalid Bitcoin address</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2986,7 +3070,7 @@\n <context>\n     <name>SendConfirmationDialog</name>\n     <message>\n-        <location filename=\"../sendcoinsdialog.cpp\" line=\"+95\"/>\n+        <location filename=\"../sendcoinsdialog.cpp\" line=\"+86\"/>\n         <location line=\"+5\"/>\n         <source>Yes</source>\n         <translation type=\"unfinished\"></translation>\n@@ -3198,7 +3282,7 @@\n <context>\n     <name>TrafficGraphWidget</name>\n     <message>\n-        <location filename=\"../trafficgraphwidget.cpp\" line=\"+79\"/>\n+        <location filename=\"../trafficgraphwidget.cpp\" line=\"+80\"/>\n         <source>KB/s</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3427,7 +3511,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+21\"/>\n+        <location line=\"+20\"/>\n         <source>Amount</source>\n         <translation type=\"unfinished\">Amount</translation>\n     </message>\n@@ -3460,7 +3544,7 @@\n <context>\n     <name>TransactionTableModel</name>\n     <message>\n-        <location filename=\"../transactiontablemodel.cpp\" line=\"+246\"/>\n+        <location filename=\"../transactiontablemodel.cpp\" line=\"+248\"/>\n         <source>Date</source>\n         <translation type=\"unfinished\">Date</translation>\n     </message>\n@@ -3606,7 +3690,7 @@\n <context>\n     <name>TransactionView</name>\n     <message>\n-        <location filename=\"../transactionview.cpp\" line=\"+69\"/>\n+        <location filename=\"../transactionview.cpp\" line=\"+70\"/>\n         <location line=\"+16\"/>\n         <source>All</source>\n         <translation type=\"unfinished\"></translation>\n@@ -3677,12 +3761,17 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+36\"/>\n+        <location line=\"+37\"/>\n         <source>Abandon transaction</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n+        <source>Increase transaction fee</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+2\"/>\n         <source>Copy address</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3722,7 +3811,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+186\"/>\n+        <location line=\"+193\"/>\n         <source>Export Transaction History</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3787,7 +3876,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+147\"/>\n+        <location line=\"+166\"/>\n         <source>Range:</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3816,10 +3905,57 @@\n <context>\n     <name>WalletModel</name>\n     <message>\n-        <location filename=\"../walletmodel.cpp\" line=\"+291\"/>\n+        <location filename=\"../walletmodel.cpp\" line=\"+289\"/>\n         <source>Send Coins</source>\n         <translation type=\"unfinished\">Send Coins</translation>\n     </message>\n+    <message>\n+        <location line=\"+385\"/>\n+        <location line=\"+46\"/>\n+        <location line=\"+9\"/>\n+        <source>Fee bump error</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"-55\"/>\n+        <source>Increasing transaction fee failed</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+6\"/>\n+        <source>Do you want to increase the fee?</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+6\"/>\n+        <source>Current fee:</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+4\"/>\n+        <source>Increase:</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+4\"/>\n+        <source>New fee:</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+4\"/>\n+        <source>Confirm fee bump</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+22\"/>\n+        <source>Can&apos;t sign transaction.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+9\"/>\n+        <source>Could not commit transaction</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n </context>\n <context>\n     <name>WalletView</name>\n@@ -3867,7 +4003,7 @@\n <context>\n     <name>bitcoin-core</name>\n     <message>\n-        <location filename=\"../bitcoinstrings.cpp\" line=\"+318\"/>\n+        <location filename=\"../bitcoinstrings.cpp\" line=\"+330\"/>\n         <source>Options:</source>\n         <translation>Options:</translation>\n     </message>\n@@ -3877,37 +4013,27 @@\n         <translation>Specify data directory</translation>\n     </message>\n     <message>\n-        <location line=\"-90\"/>\n+        <location line=\"-92\"/>\n         <source>Connect to a node to retrieve peer addresses, and disconnect</source>\n         <translation>Connect to a node to retrieve peer addresses, and disconnect</translation>\n     </message>\n     <message>\n-        <location line=\"+93\"/>\n+        <location line=\"+95\"/>\n         <source>Specify your own public address</source>\n         <translation>Specify your own public address</translation>\n     </message>\n     <message>\n-        <location line=\"-108\"/>\n+        <location line=\"-111\"/>\n         <source>Accept command line and JSON-RPC commands</source>\n         <translation>Accept command line and JSON-RPC commands</translation>\n     </message>\n     <message>\n-        <location line=\"-221\"/>\n-        <source>Accept connections from outside (default: 1 if no -proxy or -connect/-noconnect)</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+22\"/>\n-        <source>Connect only to the specified node(s); -noconnect or -connect=0 alone to disable automatic connections</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+12\"/>\n+        <location line=\"-197\"/>\n         <source>Distributed under the MIT software license, see the accompanying file %s or %s</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+37\"/>\n+        <location line=\"+41\"/>\n         <source>If &lt;category&gt; is not supplied or if &lt;category&gt; = 1, output all debugging information.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3927,7 +4053,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+132\"/>\n+        <location line=\"+140\"/>\n         <source>Error: A fatal internal error occurred, see debug.log for details</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3937,22 +4063,22 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+40\"/>\n+        <location line=\"+41\"/>\n         <source>Pruning blockstore...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+10\"/>\n+        <location line=\"+11\"/>\n         <source>Run in the background as a daemon and accept commands</source>\n         <translation>Run in the background as a daemon and accept commands</translation>\n     </message>\n     <message>\n-        <location line=\"+37\"/>\n+        <location line=\"+36\"/>\n         <source>Unable to start HTTP server. See debug log for details.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-360\"/>\n+        <location line=\"-372\"/>\n         <source>Bitcoin Core</source>\n         <translation type=\"unfinished\">Bitcoin Core</translation>\n     </message>\n@@ -3967,7 +4093,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+6\"/>\n+        <location line=\"+3\"/>\n         <source>Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3977,7 +4103,7 @@\n         <translation>Bind to given address and always listen on it. Use [host]:port notation for IPv6</translation>\n     </message>\n     <message>\n-        <location line=\"+10\"/>\n+        <location line=\"+12\"/>\n         <source>Cannot obtain a lock on data directory %s. %s is probably already running.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3987,17 +4113,17 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+13\"/>\n-        <source>Error loading %s: You can&apos;t enable HD on a already existing non-HD wallet</source>\n+        <location line=\"+15\"/>\n+        <source>Error reading %s! All keys read correctly, but transaction data or address book entries might be missing or incorrect.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+2\"/>\n-        <source>Error reading %s! All keys read correctly, but transaction data or address book entries might be missing or incorrect.</source>\n+        <location line=\"+5\"/>\n+        <source>Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+8\"/>\n+        <location line=\"+7\"/>\n         <source>Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)</source>\n         <translation>Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)</translation>\n     </message>\n@@ -4032,7 +4158,12 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+14\"/>\n+        <location line=\"+8\"/>\n+        <source>Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+6\"/>\n         <source>Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, &gt;%u = automatically prune block files to stay under the specified target size in MiB)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4042,7 +4173,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+5\"/>\n+        <location line=\"+3\"/>\n         <source>Set the number of script verification threads (%u to %d, 0 = auto, &lt;0 = leave that many cores free, default: %d)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4058,6 +4189,11 @@\n     </message>\n     <message>\n         <location line=\"+15\"/>\n+        <source>Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n         <source>Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4087,27 +4223,52 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+12\"/>\n+        <location line=\"+3\"/>\n+        <source>Whether to save the mempool on shutdown and load on restart (default: %u)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+11\"/>\n         <source>You need to rebuild the database using -reindex-chainstate to change -txindex</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+2\"/>\n+        <source>%d of last 100 blocks have unexpected version</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+1\"/>\n         <source>%s corrupt, salvage failed</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+4\"/>\n+        <source>(press q to shutdown and continue later)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+1\"/>\n         <source>-maxmempool must be at least %d MB</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>-wallet parameter must only specify a filename (not a path)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+1\"/>\n         <source>&lt;category&gt; can be:</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+6\"/>\n+        <location line=\"+2\"/>\n+        <source>Accept connections from outside (default: 1 if no -proxy or -connect)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+5\"/>\n         <source>Append comment to the user agent string</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4217,12 +4378,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n-        <source>Error loading %s: You can&apos;t disable HD on a already existing HD wallet</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n+        <location line=\"+2\"/>\n         <source>Error loading block database</source>\n         <translation>Error loading block database</translation>\n     </message>\n@@ -4232,7 +4388,7 @@\n         <translation>Error opening block database</translation>\n     </message>\n     <message>\n-        <location line=\"+4\"/>\n+        <location line=\"+5\"/>\n         <source>Error: Disk space is low!</source>\n         <translation>Error: Disk space is low!</translation>\n     </message>\n@@ -4257,27 +4413,32 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+2\"/>\n-        <source>Invalid -onion address: &apos;%s&apos;</source>\n+        <location line=\"+4\"/>\n+        <source>Invalid amount for -%s=&lt;amount&gt;: &apos;%s&apos;</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>Invalid amount for -fallbackfee=&lt;amount&gt;: &apos;%s&apos;</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+2\"/>\n-        <source>Invalid amount for -%s=&lt;amount&gt;: &apos;%s&apos;</source>\n+        <source>Invalid characters in -wallet filename</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n-        <source>Invalid amount for -fallbackfee=&lt;amount&gt;: &apos;%s&apos;</source>\n+        <location line=\"+3\"/>\n+        <source>Keep the transaction memory pool below &lt;n&gt; megabytes (default: %u)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+4\"/>\n-        <source>Keep the transaction memory pool below &lt;n&gt; megabytes (default: %u)</source>\n+        <source>Loading P2P addresses...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+5\"/>\n+        <location line=\"+1\"/>\n         <source>Loading banlist...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4327,12 +4488,17 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+6\"/>\n+        <location line=\"+4\"/>\n+        <source>Replaying blocks...</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n         <source>Rewinding blocks...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+5\"/>\n+        <location line=\"+4\"/>\n         <source>Set database cache size in megabytes (%d to %d, default: %d)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4371,8 +4537,18 @@\n         <source>Unsupported argument -tor found, use -onion.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>Unsupported logging category %s=%s.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+2\"/>\n+        <source>Upgrading UTXO database</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+1\"/>\n         <source>Use UPnP to map the listening port (default: %u)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4392,12 +4568,7 @@\n         <translation>Verifying blocks...</translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n-        <source>Verifying wallet...</source>\n-        <translation>Verifying wallet...</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n+        <location line=\"+2\"/>\n         <source>Wallet %s resides outside data directory %s</source>\n         <translation>Wallet %s resides outside data directory %s</translation>\n     </message>\n@@ -4417,7 +4588,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-358\"/>\n+        <location line=\"-375\"/>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4427,12 +4598,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+3\"/>\n-        <source>Bind to given address to listen for JSON-RPC connections. Use [host]:port notation for IPv6. This option can be specified multiple times (default: bind to all interfaces)</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+9\"/>\n+        <location line=\"+14\"/>\n         <source>Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4447,7 +4613,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+2\"/>\n+        <location line=\"+6\"/>\n         <source>Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)</source>\n         <translation>Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)</translation>\n     </message>\n@@ -4477,22 +4643,17 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+18\"/>\n-        <source>Set maximum size of high-priority/low-fee transactions in bytes (default: %d)</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+15\"/>\n+        <location line=\"+31\"/>\n         <source>The transaction amount is too small to send after the fee has been deducted</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+28\"/>\n+        <location line=\"+31\"/>\n         <source>Use hierarchical deterministic key generation (HD) after BIP32. Only has effect during wallet creation/first start</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+31\"/>\n+        <location line=\"+33\"/>\n         <source>Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4502,12 +4663,12 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+8\"/>\n+        <location line=\"+9\"/>\n         <source>(default: %u)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+4\"/>\n+        <location line=\"+7\"/>\n         <source>Accept public REST requests (default: %u)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4522,10 +4683,20 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+22\"/>\n+        <location line=\"+19\"/>\n+        <source>Error loading %s: You can&apos;t disable HD on an already existing HD wallet</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n         <source>Error reading from database, shutting down.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>Error upgrading chainstate database</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+8\"/>\n         <source>Imports blocks from external blk000??.dat file on startup</source>\n@@ -4537,12 +4708,22 @@\n         <translation>Information</translation>\n     </message>\n     <message>\n-        <location line=\"+7\"/>\n-        <source>Invalid amount for -paytxfee=&lt;amount&gt;: &apos;%s&apos; (must be at least %s)</source>\n+        <location line=\"+3\"/>\n+        <source>Invalid -onion address or hostname: &apos;%s&apos;</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n+        <source>Invalid -proxy address or hostname: &apos;%s&apos;</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n+        <source>Invalid amount for -paytxfee=&lt;amount&gt;: &apos;%s&apos; (must be at least %s)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+2\"/>\n         <source>Invalid netmask specified in -whitelist: &apos;%s&apos;</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4572,7 +4753,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+3\"/>\n+        <location line=\"+4\"/>\n         <source>Rescan the block chain for missing wallet transactions on startup</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4581,11 +4762,6 @@\n         <source>Send trace/debug info to console instead of debug.log file</source>\n         <translation>Send trace/debug info to console instead of debug.log file</translation>\n     </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Send transactions as zero-fee transactions if possible (default: %u)</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n     <message>\n         <location line=\"+7\"/>\n         <source>Show all debugging options (usage: --help -help-debug)</source>\n@@ -4642,17 +4818,22 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+7\"/>\n+        <location line=\"+8\"/>\n         <source>Upgrade wallet to latest format on startup</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+4\"/>\n+        <location line=\"+5\"/>\n         <source>Username for JSON-RPC connections</source>\n         <translation>Username for JSON-RPC connections</translation>\n     </message>\n     <message>\n-        <location line=\"+7\"/>\n+        <location line=\"+2\"/>\n+        <source>Verifying wallet(s)...</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+5\"/>\n         <source>Warning</source>\n         <translation>Warning</translation>\n     </message>\n@@ -4677,27 +4858,22 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-73\"/>\n+        <location line=\"-75\"/>\n         <source>Password for JSON-RPC connections</source>\n         <translation>Password for JSON-RPC connections</translation>\n     </message>\n     <message>\n-        <location line=\"-242\"/>\n+        <location line=\"-251\"/>\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Execute command when the best block changes (%s in cmd is replaced by block hash)</translation>\n     </message>\n     <message>\n-        <location line=\"+170\"/>\n+        <location line=\"+177\"/>\n         <source>Allow DNS lookups for -addnode, -seednode and -connect</source>\n         <translation>Allow DNS lookups for -addnode, -seednode and -connect</translation>\n     </message>\n     <message>\n-        <location line=\"+58\"/>\n-        <source>Loading addresses...</source>\n-        <translation>Loading addresses...</translation>\n-    </message>\n-    <message>\n-        <location line=\"-291\"/>\n+        <location line=\"-243\"/>\n         <source>(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4707,7 +4883,17 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+43\"/>\n+        <location line=\"+19\"/>\n+        <source>Bind to given address to listen for JSON-RPC connections. This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost, or if -rpcallowip has been specified, 0.0.0.0 and :: i.e., all addresses)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+8\"/>\n+        <source>Connect only to the specified node(s); -connect=0 disables automatic connections</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+15\"/>\n         <source>Do not keep transactions in the mempool longer than &lt;n&gt; hours (default: %u)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4717,7 +4903,12 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+24\"/>\n+        <location line=\"+2\"/>\n+        <source>Error loading %s: You can&apos;t enable HD on an already existing non-HD wallet</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+26\"/>\n         <source>Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4747,12 +4938,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+13\"/>\n-        <source>Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect/-noconnect)</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+26\"/>\n+        <location line=\"+37\"/>\n         <source>Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4782,7 +4968,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+6\"/>\n+        <location line=\"+9\"/>\n         <source>Unsupported argument -socks found. Setting SOCKS version isn&apos;t possible anymore, only SOCKS5 proxies are supported.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4807,12 +4993,12 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+7\"/>\n+        <location line=\"+9\"/>\n         <source>Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple times.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+12\"/>\n+        <location line=\"+13\"/>\n         <source>%s is set very high!</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4822,12 +5008,12 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+8\"/>\n+        <location line=\"+11\"/>\n         <source>Always query for peer addresses via DNS lookup (default: %u)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+38\"/>\n+        <location line=\"+39\"/>\n         <source>How many blocks to check at startup (default: %u, 0 = all)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4837,12 +5023,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+6\"/>\n-        <source>Invalid -proxy address: &apos;%s&apos;</source>\n-        <translation>Invalid -proxy address: &apos;%s&apos;</translation>\n-    </message>\n-    <message>\n-        <location line=\"+7\"/>\n+        <location line=\"+14\"/>\n         <source>Keypool ran out, please call keypoolrefill first</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4977,27 +5158,27 @@\n         <translation>Unknown network specified in -onlynet: &apos;%s&apos;</translation>\n     </message>\n     <message>\n-        <location line=\"-80\"/>\n+        <location line=\"-81\"/>\n         <source>Insufficient funds</source>\n         <translation>Insufficient funds</translation>\n     </message>\n     <message>\n-        <location line=\"+14\"/>\n+        <location line=\"+15\"/>\n         <source>Loading block index...</source>\n         <translation>Loading block index...</translation>\n     </message>\n     <message>\n-        <location line=\"-61\"/>\n+        <location line=\"-63\"/>\n         <source>Add a node to connect to and attempt to keep the connection open</source>\n         <translation>Add a node to connect to and attempt to keep the connection open</translation>\n     </message>\n     <message>\n-        <location line=\"+62\"/>\n+        <location line=\"+64\"/>\n         <source>Loading wallet...</source>\n         <translation>Loading wallet...</translation>\n     </message>\n     <message>\n-        <location line=\"-55\"/>\n+        <location line=\"-57\"/>\n         <source>Cannot downgrade wallet</source>\n         <translation>Cannot downgrade wallet</translation>\n     </message>\n@@ -5007,17 +5188,17 @@\n         <translation>Cannot write default address</translation>\n     </message>\n     <message>\n-        <location line=\"+78\"/>\n+        <location line=\"+81\"/>\n         <source>Rescanning...</source>\n         <translation>Rescanning...</translation>\n     </message>\n     <message>\n-        <location line=\"-67\"/>\n+        <location line=\"-70\"/>\n         <source>Done loading</source>\n         <translation>Done loading</translation>\n     </message>\n     <message>\n-        <location line=\"+15\"/>\n+        <location line=\"+16\"/>\n         <source>Error</source>\n         <translation>Error</translation>\n     </message>"
      }
    ]
  },
  {
    "sha": "a5cd829a0b51b69a2e7d5e93f55196f7d67a7462",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNWNkODI5YTBiNTFiNjlhMmU3ZDVlOTNmNTUxOTZmN2Q2N2E3NDYy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-06T09:56:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-06T09:58:23Z"
      },
      "message": "Merge branch qt-translations into master\n\nForgot the Tree-SHA512 on last commit, so add a merge commit to include\nit.\n\nTree-SHA512: 3d8d644f1ef3f272a34ac5b1fc724ea23cdfa260e13bc1d3b8bd4a89bf841377771be2173bad96ee05be6bb64bb5ff13e6166a1de1b88d80feea09a3fa96179f",
      "tree": {
        "sha": "a86f91a9e90319d0e9bcc68b8e6579c94967024a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a86f91a9e90319d0e9bcc68b8e6579c94967024a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a5cd829a0b51b69a2e7d5e93f55196f7d67a7462",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZXgnAAAoJEB5K7WKYbNJdPN4H/RJa97+G/68T055DLU9M35dW\nmn0E8uq3zrhyFW7GrOtZrYO4BN5BSDFi4o9n+IQN9wZxE7k8A1pohaMAvuUq9L1O\nyeRn1+5TJ4vMdIClNOp98WDiqZhlpqOJZo7DyFuPgFndTlzb5Bd502QoMfJJcgCa\n5Zk/xzFy092wU+TUvXptDSZFDEvr/JZcLsCWYa+IbpDUcg7ufblNsABslrr/+EJv\nDGR36jHYdypes2FsEVU4mJLJkF/ewQdEMZLRQCyvYUv3QNQBzdqT7TwxZus/h4dx\ng9TGeQ2s+1FphIcNksnxuPO7Uz5fF16QpEmWp+h9P5ck/IsG5vBZg/z7tUMRdME=\n=CDdk\n-----END PGP SIGNATURE-----",
        "payload": "tree a86f91a9e90319d0e9bcc68b8e6579c94967024a\nparent 6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d\nparent 191d12b07377393c9eb67770ff5cb8e9a1c5cd7c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1499335010 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1499335103 +0200\n\nMerge branch qt-translations into master\n\nForgot the Tree-SHA512 on last commit, so add a merge commit to include\nit.\n\nTree-SHA512: 3d8d644f1ef3f272a34ac5b1fc724ea23cdfa260e13bc1d3b8bd4a89bf841377771be2173bad96ee05be6bb64bb5ff13e6166a1de1b88d80feea09a3fa96179f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5cd829a0b51b69a2e7d5e93f55196f7d67a7462",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a5cd829a0b51b69a2e7d5e93f55196f7d67a7462",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5cd829a0b51b69a2e7d5e93f55196f7d67a7462/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d"
      },
      {
        "sha": "191d12b07377393c9eb67770ff5cb8e9a1c5cd7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/191d12b07377393c9eb67770ff5cb8e9a1c5cd7c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/191d12b07377393c9eb67770ff5cb8e9a1c5cd7c"
      }
    ],
    "stats": {
      "total": 643,
      "additions": 419,
      "deletions": 224
    },
    "files": [
      {
        "sha": "b3d2cf1d55c04c54a6d58c38d9bddccd66fe3538",
        "filename": "src/qt/bitcoinstrings.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 18,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5cd829a0b51b69a2e7d5e93f55196f7d67a7462/src/qt/bitcoinstrings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5cd829a0b51b69a2e7d5e93f55196f7d67a7462/src/qt/bitcoinstrings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinstrings.cpp?ref=a5cd829a0b51b69a2e7d5e93f55196f7d67a7462",
        "patch": "@@ -21,9 +21,6 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"A fee rate (in %s/kB) that will be used when fee estimation has insufficient \"\n \"data (default: %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Accept connections from outside (default: 1 if no -proxy or -connect/-\"\n-\"noconnect)\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Accept relayed transactions received from whitelisted peers even when not \"\n \"relaying transactions (default: %d)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n@@ -37,14 +34,16 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Bind to given address and whitelist peers connecting to it. Use [host]:port \"\n \"notation for IPv6\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Bind to given address to listen for JSON-RPC connections. Use [host]:port \"\n-\"notation for IPv6. This option can be specified multiple times (default: \"\n-\"bind to all interfaces)\"),\n+\"Bind to given address to listen for JSON-RPC connections. This option is \"\n+\"ignored unless -rpcallowip is also passed. Port is optional and overrides -\"\n+\"rpcport. Use [host]:port notation for IPv6. This option can be specified \"\n+\"multiple times (default: 127.0.0.1 and ::1 i.e., localhost, or if -\"\n+\"rpcallowip has been specified, 0.0.0.0 and :: i.e., all addresses)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Cannot obtain a lock on data directory %s. %s is probably already running.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Connect only to the specified node(s); -noconnect or -connect=0 alone to \"\n-\"disable automatic connections\"),\n+\"Connect only to the specified node(s); -connect=0 disables automatic \"\n+\"connections\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Create new files with system default permissions, instead of umask 077 (only \"\n \"effective with disabled wallet functionality)\"),\n@@ -62,13 +61,17 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Error loading %s: You can't enable HD on a already existing non-HD wallet\"),\n+\"Error loading %s: You can't enable HD on an already existing non-HD wallet\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Error reading %s! All keys read correctly, but transaction data or address \"\n \"book entries might be missing or incorrect.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Error: Listening for incoming connections failed (listen returned error %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"Exclude debugging information for a category. Can be used in conjunction \"\n+\"with -debug=1 to output debug logs for all categories except one or more \"\n+\"specified categories.\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Execute command when a relevant alert is received or we see a really long \"\n \"fork (%s in cmd is replaced by message)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n@@ -134,7 +137,7 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"reindex (download the whole blockchain again in case of pruned node)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Query for peer addresses via DNS lookup, if low on addresses (default: 1 \"\n-\"unless -connect/-noconnect)\"),\n+\"unless -connect used)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Randomize credentials for every proxy connection. This enables Tor stream \"\n \"isolation (default: %u)\"),\n@@ -154,8 +157,6 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Set lowest fee rate (in %s/kB) for transactions to be included in block \"\n \"creation. (default: %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Set maximum size of high-priority/low-fee transactions in bytes (default: %d)\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Set the number of script verification threads (%u to %d, 0 = auto, <0 = \"\n \"leave that many cores free, default: %d)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n@@ -186,6 +187,9 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = \"\n \"no limit (default: %d)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"Unable to replay blocks. You will need to rebuild the database using -\"\n+\"reindex-chainstate.\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Unable to rewind the database to a pre-fork state. You will need to \"\n \"redownload the blockchain\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n@@ -225,6 +229,8 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Warning: We do not appear to fully agree with our peers! You may need to \"\n \"upgrade, or other nodes may need to upgrade.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"Whether to save the mempool on shutdown and load on restart (default: %u)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or CIDR \"\n \"notated network (e.g. 1.2.3.0/24). Can be specified multiple times.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n@@ -235,13 +241,17 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"mode.  This will redownload the entire blockchain\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"You need to rebuild the database using -reindex-chainstate to change -txindex\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"%d of last 100 blocks have unexpected version\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"%s corrupt, salvage failed\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"%s is set very high!\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"(default: %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"(default: %u)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"(press q to shutdown and continue later)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"-maxmempool must be at least %d MB\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"-wallet parameter must only specify a filename (not a path)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"<category> can be:\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Accept command line and JSON-RPC commands\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Accept connections from outside (default: 1 if no -proxy or -connect)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Accept public REST requests (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Add a node to connect to and attempt to keep the connection open\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Allow DNS lookups for -addnode, -seednode and -connect\"),\n@@ -274,10 +284,11 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error initializing wallet database environmen\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error loading %s\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error loading %s: Wallet corrupted\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error loading %s: Wallet requires newer version of %s\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error loading %s: You can't disable HD on a already existing HD wallet\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error loading %s: You can't disable HD on an already existing HD wallet\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error loading block database\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error opening block database\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error reading from database, shutting down.\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error upgrading chainstate database\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: A fatal internal error occurred, see debug.log for details\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Disk space is low!\"),\n@@ -291,18 +302,19 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Incorrect or no genesis block found. Wrong da\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Information\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Initialization sanity check failed. %s is shutting down.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Insufficient funds\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid -onion address: '%s'\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid -proxy address: '%s'\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid -onion address or hostname: '%s'\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid -proxy address or hostname: '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid amount for -%s=<amount>: '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid amount for -fallbackfee=<amount>: '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid characters in -wallet filename\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid netmask specified in -whitelist: '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Keep at most <n> unconnectable transactions in memory (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Keep the transaction memory pool below <n> megabytes (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Keypool ran out, please call keypoolrefill first\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Listen for connections on <port> (default: %u or testnet: %u)\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Loading addresses...\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Loading P2P addresses...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Loading banlist...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Loading block index...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Loading wallet...\"),\n@@ -329,12 +341,12 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Rebuild chain state from the currently indexe\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Reducing -maxconnections from %d to %d, because of system limitations.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Relay and mine data carrier transactions (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Relay non-P2SH multisig (default: %u)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Replaying blocks...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Rescan the block chain for missing wallet transactions on startup\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Rescanning...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Rewinding blocks...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Run in the background as a daemon and accept commands\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Send trace/debug info to console instead of debug.log file\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Send transactions as zero-fee transactions if possible (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Send transactions with full-RBF opt-in enabled (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Set database cache size in megabytes (%d to %d, default: %d)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Set key pool size to <n> (default: %u)\"),\n@@ -374,13 +386,15 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unknown network specified in -onlynet: '%s'\")\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unsupported argument -benchmark ignored, use -debug=bench.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unsupported argument -debugnet ignored, use -debug=net.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unsupported argument -tor found, use -onion.\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unsupported logging category %s=%s.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Upgrade wallet to latest format on startup\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Upgrading UTXO database\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Use UPnP to map the listening port (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Use the test chain\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"User Agent comment (%s) contains unsafe characters.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Username for JSON-RPC connections\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Verifying blocks...\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Verifying wallet...\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Verifying wallet(s)...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Wallet %s resides outside data directory %s\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Wallet debugging/testing options:\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Wallet needed to be rewritten: restart %s to complete\"),"
      },
      {
        "sha": "91830750671d1556ac48e8afa8c3dcbba36b72eb",
        "filename": "src/qt/locale/bitcoin_en.ts",
        "status": "modified",
        "additions": 387,
        "deletions": 206,
        "changes": 593,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5cd829a0b51b69a2e7d5e93f55196f7d67a7462/src/qt/locale/bitcoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5cd829a0b51b69a2e7d5e93f55196f7d67a7462/src/qt/locale/bitcoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.ts?ref=a5cd829a0b51b69a2e7d5e93f55196f7d67a7462",
        "patch": "@@ -127,7 +127,7 @@\n <context>\n     <name>AddressTableModel</name>\n     <message>\n-        <location filename=\"../addresstablemodel.cpp\" line=\"+170\"/>\n+        <location filename=\"../addresstablemodel.cpp\" line=\"+169\"/>\n         <source>Label</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -304,12 +304,12 @@\n         <translation>Sign &amp;message...</translation>\n     </message>\n     <message>\n-        <location line=\"+427\"/>\n+        <location line=\"+429\"/>\n         <source>Synchronizing with network...</source>\n         <translation>Synchronizing with network...</translation>\n     </message>\n     <message>\n-        <location line=\"-505\"/>\n+        <location line=\"-507\"/>\n         <source>&amp;Overview</source>\n         <translation>&amp;Overview</translation>\n     </message>\n@@ -404,7 +404,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+357\"/>\n+        <location line=\"+359\"/>\n         <source>Click to disable network activity.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -429,7 +429,7 @@\n         <translation>Reindexing blocks on disk...</translation>\n     </message>\n     <message>\n-        <location line=\"-508\"/>\n+        <location line=\"-510\"/>\n         <source>Send coins to a Bitcoin address</source>\n         <translation>Send coins to a Bitcoin address</translation>\n     </message>\n@@ -459,12 +459,12 @@\n         <translation>&amp;Verify message...</translation>\n     </message>\n     <message>\n-        <location line=\"+514\"/>\n+        <location line=\"+516\"/>\n         <source>Bitcoin</source>\n         <translation>Bitcoin</translation>\n     </message>\n     <message>\n-        <location line=\"-739\"/>\n+        <location line=\"-741\"/>\n         <source>Wallet</source>\n         <translation>Wallet</translation>\n     </message>\n@@ -549,7 +549,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message numerus=\"yes\">\n-        <location line=\"+354\"/>\n+        <location line=\"+356\"/>\n         <source>%n active connection(s) to Bitcoin network</source>\n         <translation>\n             <numerusform>%n active connection to Bitcoin network</numerusform>\n@@ -610,12 +610,12 @@\n         <translation>Up to date</translation>\n     </message>\n     <message>\n-        <location line=\"-438\"/>\n+        <location line=\"-440\"/>\n         <source>Show the %1 help message to get a list with possible Bitcoin command-line options</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+197\"/>\n+        <location line=\"+199\"/>\n         <source>%1 client</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -690,7 +690,7 @@\n         <translation>Wallet is &lt;b&gt;encrypted&lt;/b&gt; and currently &lt;b&gt;locked&lt;/b&gt;</translation>\n     </message>\n     <message>\n-        <location filename=\"../bitcoin.cpp\" line=\"+518\"/>\n+        <location filename=\"../bitcoin.cpp\" line=\"+524\"/>\n         <source>A fatal error occurred. Bitcoin can no longer continue safely and will quit.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -783,7 +783,7 @@\n         <translation type=\"unfinished\">Confirmed</translation>\n     </message>\n     <message>\n-        <location filename=\"../coincontroldialog.cpp\" line=\"+55\"/>\n+        <location filename=\"../coincontroldialog.cpp\" line=\"+54\"/>\n         <source>Copy address</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -849,7 +849,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+183\"/>\n+        <location line=\"+155\"/>\n         <source>yes</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -956,7 +956,7 @@\n <context>\n     <name>FreespaceChecker</name>\n     <message>\n-        <location filename=\"../intro.cpp\" line=\"+78\"/>\n+        <location filename=\"../intro.cpp\" line=\"+76\"/>\n         <source>A new data directory will be created.</source>\n         <translation>A new data directory will be created.</translation>\n     </message>\n@@ -1067,13 +1067,23 @@\n         <source>As this is the first time the program is launched, you can choose where %1 will store its data.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+157\"/>\n+        <source>When you click OK, %1 will begin to download and process the full %4 block chain (%2GB) starting with the earliest transactions in %3 when %4 initially launched.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+10\"/>\n-        <source>%1 will download and store a copy of the Bitcoin block chain. At least %2GB of data will be stored in this directory, and it will grow over time. The wallet will also be stored in this directory.</source>\n+        <source>This initial synchronisation is very demanding, and may expose hardware problems with your computer that had previously gone unnoticed. Each time you run %1, it will continue downloading where it left off.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+10\"/>\n+        <source>If you have chosen to limit block chain storage (pruning), the historical data must still be downloaded and processed, but will be deleted afterward to keep your disk usage low.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"-160\"/>\n         <source>Use the default data directory</source>\n         <translation>Use the default data directory</translation>\n     </message>\n@@ -1083,7 +1093,32 @@\n         <translation>Use a custom data directory:</translation>\n     </message>\n     <message>\n-        <location filename=\"../intro.cpp\" line=\"+94\"/>\n+        <location filename=\"../intro.cpp\" line=\"+20\"/>\n+        <source>Bitcoin</source>\n+        <translation type=\"unfinished\">Bitcoin</translation>\n+    </message>\n+    <message>\n+        <location line=\"+6\"/>\n+        <source>At least %1 GB of data will be stored in this directory, and it will grow over time.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+5\"/>\n+        <source>Approximately %1 GB of data will be stored in this directory.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+8\"/>\n+        <source>%1 will download and store a copy of the Bitcoin block chain.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+2\"/>\n+        <source>The wallet will also be stored in this directory.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+70\"/>\n         <source>Error: Specified data directory &quot;%1&quot; cannot be created.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1257,7 +1292,14 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+94\"/>\n+        <location line=\"-118\"/>\n+        <location line=\"+23\"/>\n+        <location line=\"+23\"/>\n+        <source>Shows if the supplied default SOCKS5 proxy is used to reach peers via this network type.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+166\"/>\n         <source>Minimize instead of exit the application when the window is closed. When this option is enabled, the application will be closed only after selecting Exit in the menu.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1278,7 +1320,17 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+43\"/>\n+        <location line=\"+45\"/>\n+        <source>Open the %1 configuration file from the working directory.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n+        <source>Open Configuration File</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+10\"/>\n         <source>Reset all client options to default.</source>\n         <translation>Reset all client options to default.</translation>\n     </message>\n@@ -1288,7 +1340,7 @@\n         <translation>&amp;Reset Options</translation>\n     </message>\n     <message>\n-        <location line=\"-514\"/>\n+        <location line=\"-529\"/>\n         <source>&amp;Network</source>\n         <translation>&amp;Network</translation>\n     </message>\n@@ -1366,14 +1418,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+13\"/>\n         <location line=\"+23\"/>\n-        <location line=\"+23\"/>\n-        <source>Shows, if the supplied default SOCKS5 proxy is used to reach peers via this network type.</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"-36\"/>\n         <source>IPv4</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1458,7 +1503,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+612\"/>\n+        <location line=\"+646\"/>\n         <source>&amp;OK</source>\n         <translation>&amp;OK</translation>\n     </message>\n@@ -1468,7 +1513,7 @@\n         <translation>&amp;Cancel</translation>\n     </message>\n     <message>\n-        <location filename=\"../optionsdialog.cpp\" line=\"+86\"/>\n+        <location filename=\"../optionsdialog.cpp\" line=\"+84\"/>\n         <source>default</source>\n         <translation>default</translation>\n     </message>\n@@ -1484,22 +1529,42 @@\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <location line=\"+43\"/>\n+        <location line=\"+55\"/>\n         <source>Client restart required to activate changes.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-43\"/>\n+        <location line=\"-55\"/>\n         <source>Client will be shut down. Do you want to proceed?</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+47\"/>\n+        <location line=\"+15\"/>\n+        <source>Configuration options</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>The configuration file is used to specify advanced user options which override GUI settings. Additionally, any command-line options will override this configuration file.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+5\"/>\n+        <source>Error</source>\n+        <translation type=\"unfinished\">Error</translation>\n+    </message>\n+    <message>\n+        <location line=\"+0\"/>\n+        <source>The configuration file could not be opened.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+38\"/>\n         <source>This change would require a client restart.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+25\"/>\n+        <location line=\"+28\"/>\n         <source>The supplied proxy address is invalid.</source>\n         <translation>The supplied proxy address is invalid.</translation>\n     </message>\n@@ -1755,12 +1820,12 @@\n         <translation type=\"unfinished\">Amount</translation>\n     </message>\n     <message>\n-        <location filename=\"../guiutil.cpp\" line=\"+136\"/>\n+        <location filename=\"../guiutil.cpp\" line=\"+130\"/>\n         <source>Enter a Bitcoin address (e.g. %1)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+759\"/>\n+        <location line=\"+766\"/>\n         <source>%1 d</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1850,7 +1915,7 @@\n         </translation>\n     </message>\n     <message>\n-        <location filename=\"../bitcoin.cpp\" line=\"+172\"/>\n+        <location filename=\"../bitcoin.cpp\" line=\"+173\"/>\n         <source>%1 didn&apos;t yet exit safely...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2007,7 +2072,12 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+404\"/>\n+        <location line=\"+324\"/>\n+        <source>&amp;Reset</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+80\"/>\n         <location line=\"+558\"/>\n         <source>Received</source>\n         <translation type=\"unfinished\"></translation>\n@@ -2030,8 +2100,8 @@\n     </message>\n     <message>\n         <location line=\"+60\"/>\n-        <location filename=\"../rpcconsole.cpp\" line=\"+456\"/>\n-        <location line=\"+719\"/>\n+        <location filename=\"../rpcconsole.cpp\" line=\"+458\"/>\n+        <location line=\"+728\"/>\n         <source>Select a peer to view detailed information.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2157,12 +2227,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+52\"/>\n-        <source>&amp;Clear</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+16\"/>\n+        <location line=\"+68\"/>\n         <source>Totals</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2187,7 +2252,7 @@\n         <translation>Clear console</translation>\n     </message>\n     <message>\n-        <location filename=\"../rpcconsole.cpp\" line=\"-214\"/>\n+        <location filename=\"../rpcconsole.cpp\" line=\"-223\"/>\n         <source>1 &amp;hour</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2225,23 +2290,23 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+126\"/>\n+        <location line=\"+135\"/>\n         <source>Welcome to the %1 RPC console.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n-        <source>Use up and down arrows to navigate history, and &lt;b&gt;Ctrl-L&lt;/b&gt; to clear screen.</source>\n-        <translation>Use up and down arrows to navigate history, and &lt;b&gt;Ctrl-L&lt;/b&gt; to clear screen.</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n+        <location line=\"+2\"/>\n         <source>Type &lt;b&gt;help&lt;/b&gt; for an overview of available commands.</source>\n         <translation>Type &lt;b&gt;help&lt;/b&gt; for an overview of available commands.</translation>\n     </message>\n     <message>\n-        <location line=\"+2\"/>\n-        <source>WARNING: Scammers have been active, telling users to type commands here, stealing their wallet contents. Do not use this console without fully understanding the ramification of a command.</source>\n+        <location line=\"-1\"/>\n+        <source>Use up and down arrows to navigate history, and %1 to clear screen.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n+        <source>WARNING: Scammers have been active, telling users to type commands here, stealing their wallet contents. Do not use this console without fully understanding the ramifications of a command.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n@@ -2494,7 +2559,7 @@\n <context>\n     <name>RecentRequestsTableModel</name>\n     <message>\n-        <location filename=\"../recentrequeststablemodel.cpp\" line=\"+29\"/>\n+        <location filename=\"../recentrequeststablemodel.cpp\" line=\"+28\"/>\n         <source>Date</source>\n         <translation type=\"unfinished\">Date</translation>\n     </message>\n@@ -2509,7 +2574,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+40\"/>\n+        <location line=\"+39\"/>\n         <source>(no label)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2533,7 +2598,7 @@\n     <name>SendCoinsDialog</name>\n     <message>\n         <location filename=\"../forms/sendcoinsdialog.ui\" line=\"+14\"/>\n-        <location filename=\"../sendcoinsdialog.cpp\" line=\"+554\"/>\n+        <location filename=\"../sendcoinsdialog.cpp\" line=\"+565\"/>\n         <source>Send Coins</source>\n         <translation>Send Coins</translation>\n     </message>\n@@ -2608,7 +2673,17 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+37\"/>\n+        <location line=\"+24\"/>\n+        <source>Using the fallbackfee can result in sending a transaction that will take several hours or days (or never) to confirm. Consider choosing your fee manually or wait until your have validated the complete chain.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+9\"/>\n+        <source>Warning: Fee estimation is currently not possible.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+26\"/>\n         <source>collapse fee-settings</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2619,22 +2694,16 @@\n     </message>\n     <message>\n         <location line=\"-3\"/>\n-        <location line=\"+16\"/>\n         <source>If the custom fee is set to 1000 satoshis and the transaction is only 250 bytes, then &quot;per kilobyte&quot; only pays 250 satoshis in fee, while &quot;total at least&quot; pays 1000 satoshis. For transactions bigger than a kilobyte both pay by kilobyte.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-64\"/>\n+        <location line=\"-48\"/>\n         <source>Hide</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+67\"/>\n-        <source>total at least</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+30\"/>\n+        <location line=\"+84\"/>\n         <location line=\"+13\"/>\n         <source>Paying only the minimum fee is just fine as long as there is less transaction volume than space in the blocks. But be aware that this can end up in a never confirming transaction once there is more demand for bitcoin transactions than the network can process.</source>\n         <translation type=\"unfinished\"></translation>\n@@ -2670,7 +2739,17 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+102\"/>\n+        <location line=\"+30\"/>\n+        <source>Request Replace-By-Fee</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n+        <source>Indicates that the sender may wish to replace this transaction with a new one paying higher fees (prior to being confirmed).</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+79\"/>\n         <source>Send to multiple recipients at once</source>\n         <translation>Send to multiple recipients at once</translation>\n     </message>\n@@ -2685,17 +2764,17 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-876\"/>\n+        <location line=\"-895\"/>\n         <source>Dust:</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+691\"/>\n+        <location line=\"+700\"/>\n         <source>Confirmation time target:</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+188\"/>\n+        <location line=\"+198\"/>\n         <source>Clear &amp;All</source>\n         <translation>Clear &amp;All</translation>\n     </message>\n@@ -2715,7 +2794,7 @@\n         <translation>S&amp;end</translation>\n     </message>\n     <message>\n-        <location filename=\"../sendcoinsdialog.cpp\" line=\"-486\"/>\n+        <location filename=\"../sendcoinsdialog.cpp\" line=\"-497\"/>\n         <source>Copy quantity</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2750,7 +2829,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+205\"/>\n+        <location line=\"+209\"/>\n         <location line=\"+5\"/>\n         <location line=\"+5\"/>\n         <location line=\"+4\"/>\n@@ -2778,7 +2857,12 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+2\"/>\n+        <location line=\"+5\"/>\n+        <source>This transaction signals replaceability (optin-RBF).</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+4\"/>\n         <source>Confirm send coins</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2828,28 +2912,28 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message numerus=\"yes\">\n-        <location line=\"+67\"/>\n+        <location line=\"+63\"/>\n         <source>%n block(s)</source>\n         <translation>\n             <numerusform>%n block</numerusform>\n             <numerusform>%n blocks</numerusform>\n         </translation>\n     </message>\n     <message>\n-        <location line=\"+28\"/>\n+        <location line=\"+24\"/>\n         <source>Pay only the required fee of %1</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message numerus=\"yes\">\n-        <location line=\"+25\"/>\n+        <location line=\"+30\"/>\n         <source>Estimated to begin confirmation within %n block(s).</source>\n         <translation>\n             <numerusform>Estimated to begin confirmation within %n block.</numerusform>\n             <numerusform>Estimated to begin confirmation within %n blocks.</numerusform>\n         </translation>\n     </message>\n     <message>\n-        <location line=\"+102\"/>\n+        <location line=\"+103\"/>\n         <source>Warning: Invalid Bitcoin address</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2986,7 +3070,7 @@\n <context>\n     <name>SendConfirmationDialog</name>\n     <message>\n-        <location filename=\"../sendcoinsdialog.cpp\" line=\"+95\"/>\n+        <location filename=\"../sendcoinsdialog.cpp\" line=\"+86\"/>\n         <location line=\"+5\"/>\n         <source>Yes</source>\n         <translation type=\"unfinished\"></translation>\n@@ -3198,7 +3282,7 @@\n <context>\n     <name>TrafficGraphWidget</name>\n     <message>\n-        <location filename=\"../trafficgraphwidget.cpp\" line=\"+79\"/>\n+        <location filename=\"../trafficgraphwidget.cpp\" line=\"+80\"/>\n         <source>KB/s</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3427,7 +3511,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+21\"/>\n+        <location line=\"+20\"/>\n         <source>Amount</source>\n         <translation type=\"unfinished\">Amount</translation>\n     </message>\n@@ -3460,7 +3544,7 @@\n <context>\n     <name>TransactionTableModel</name>\n     <message>\n-        <location filename=\"../transactiontablemodel.cpp\" line=\"+246\"/>\n+        <location filename=\"../transactiontablemodel.cpp\" line=\"+248\"/>\n         <source>Date</source>\n         <translation type=\"unfinished\">Date</translation>\n     </message>\n@@ -3606,7 +3690,7 @@\n <context>\n     <name>TransactionView</name>\n     <message>\n-        <location filename=\"../transactionview.cpp\" line=\"+69\"/>\n+        <location filename=\"../transactionview.cpp\" line=\"+70\"/>\n         <location line=\"+16\"/>\n         <source>All</source>\n         <translation type=\"unfinished\"></translation>\n@@ -3677,12 +3761,17 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+36\"/>\n+        <location line=\"+37\"/>\n         <source>Abandon transaction</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n+        <source>Increase transaction fee</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+2\"/>\n         <source>Copy address</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3722,7 +3811,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+186\"/>\n+        <location line=\"+193\"/>\n         <source>Export Transaction History</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3787,7 +3876,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+147\"/>\n+        <location line=\"+166\"/>\n         <source>Range:</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3816,10 +3905,57 @@\n <context>\n     <name>WalletModel</name>\n     <message>\n-        <location filename=\"../walletmodel.cpp\" line=\"+291\"/>\n+        <location filename=\"../walletmodel.cpp\" line=\"+289\"/>\n         <source>Send Coins</source>\n         <translation type=\"unfinished\">Send Coins</translation>\n     </message>\n+    <message>\n+        <location line=\"+385\"/>\n+        <location line=\"+46\"/>\n+        <location line=\"+9\"/>\n+        <source>Fee bump error</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"-55\"/>\n+        <source>Increasing transaction fee failed</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+6\"/>\n+        <source>Do you want to increase the fee?</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+6\"/>\n+        <source>Current fee:</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+4\"/>\n+        <source>Increase:</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+4\"/>\n+        <source>New fee:</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+4\"/>\n+        <source>Confirm fee bump</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+22\"/>\n+        <source>Can&apos;t sign transaction.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+9\"/>\n+        <source>Could not commit transaction</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n </context>\n <context>\n     <name>WalletView</name>\n@@ -3867,7 +4003,7 @@\n <context>\n     <name>bitcoin-core</name>\n     <message>\n-        <location filename=\"../bitcoinstrings.cpp\" line=\"+318\"/>\n+        <location filename=\"../bitcoinstrings.cpp\" line=\"+330\"/>\n         <source>Options:</source>\n         <translation>Options:</translation>\n     </message>\n@@ -3877,37 +4013,27 @@\n         <translation>Specify data directory</translation>\n     </message>\n     <message>\n-        <location line=\"-90\"/>\n+        <location line=\"-92\"/>\n         <source>Connect to a node to retrieve peer addresses, and disconnect</source>\n         <translation>Connect to a node to retrieve peer addresses, and disconnect</translation>\n     </message>\n     <message>\n-        <location line=\"+93\"/>\n+        <location line=\"+95\"/>\n         <source>Specify your own public address</source>\n         <translation>Specify your own public address</translation>\n     </message>\n     <message>\n-        <location line=\"-108\"/>\n+        <location line=\"-111\"/>\n         <source>Accept command line and JSON-RPC commands</source>\n         <translation>Accept command line and JSON-RPC commands</translation>\n     </message>\n     <message>\n-        <location line=\"-221\"/>\n-        <source>Accept connections from outside (default: 1 if no -proxy or -connect/-noconnect)</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+22\"/>\n-        <source>Connect only to the specified node(s); -noconnect or -connect=0 alone to disable automatic connections</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+12\"/>\n+        <location line=\"-197\"/>\n         <source>Distributed under the MIT software license, see the accompanying file %s or %s</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+37\"/>\n+        <location line=\"+41\"/>\n         <source>If &lt;category&gt; is not supplied or if &lt;category&gt; = 1, output all debugging information.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3927,7 +4053,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+132\"/>\n+        <location line=\"+140\"/>\n         <source>Error: A fatal internal error occurred, see debug.log for details</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3937,22 +4063,22 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+40\"/>\n+        <location line=\"+41\"/>\n         <source>Pruning blockstore...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+10\"/>\n+        <location line=\"+11\"/>\n         <source>Run in the background as a daemon and accept commands</source>\n         <translation>Run in the background as a daemon and accept commands</translation>\n     </message>\n     <message>\n-        <location line=\"+37\"/>\n+        <location line=\"+36\"/>\n         <source>Unable to start HTTP server. See debug log for details.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-360\"/>\n+        <location line=\"-372\"/>\n         <source>Bitcoin Core</source>\n         <translation type=\"unfinished\">Bitcoin Core</translation>\n     </message>\n@@ -3967,7 +4093,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+6\"/>\n+        <location line=\"+3\"/>\n         <source>Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3977,7 +4103,7 @@\n         <translation>Bind to given address and always listen on it. Use [host]:port notation for IPv6</translation>\n     </message>\n     <message>\n-        <location line=\"+10\"/>\n+        <location line=\"+12\"/>\n         <source>Cannot obtain a lock on data directory %s. %s is probably already running.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3987,17 +4113,17 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+13\"/>\n-        <source>Error loading %s: You can&apos;t enable HD on a already existing non-HD wallet</source>\n+        <location line=\"+15\"/>\n+        <source>Error reading %s! All keys read correctly, but transaction data or address book entries might be missing or incorrect.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+2\"/>\n-        <source>Error reading %s! All keys read correctly, but transaction data or address book entries might be missing or incorrect.</source>\n+        <location line=\"+5\"/>\n+        <source>Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+8\"/>\n+        <location line=\"+7\"/>\n         <source>Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)</source>\n         <translation>Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)</translation>\n     </message>\n@@ -4032,7 +4158,12 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+14\"/>\n+        <location line=\"+8\"/>\n+        <source>Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+6\"/>\n         <source>Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, &gt;%u = automatically prune block files to stay under the specified target size in MiB)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4042,7 +4173,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+5\"/>\n+        <location line=\"+3\"/>\n         <source>Set the number of script verification threads (%u to %d, 0 = auto, &lt;0 = leave that many cores free, default: %d)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4058,6 +4189,11 @@\n     </message>\n     <message>\n         <location line=\"+15\"/>\n+        <source>Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n         <source>Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4087,27 +4223,52 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+12\"/>\n+        <location line=\"+3\"/>\n+        <source>Whether to save the mempool on shutdown and load on restart (default: %u)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+11\"/>\n         <source>You need to rebuild the database using -reindex-chainstate to change -txindex</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+2\"/>\n+        <source>%d of last 100 blocks have unexpected version</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+1\"/>\n         <source>%s corrupt, salvage failed</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+4\"/>\n+        <source>(press q to shutdown and continue later)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+1\"/>\n         <source>-maxmempool must be at least %d MB</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>-wallet parameter must only specify a filename (not a path)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+1\"/>\n         <source>&lt;category&gt; can be:</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+6\"/>\n+        <location line=\"+2\"/>\n+        <source>Accept connections from outside (default: 1 if no -proxy or -connect)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+5\"/>\n         <source>Append comment to the user agent string</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4217,12 +4378,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n-        <source>Error loading %s: You can&apos;t disable HD on a already existing HD wallet</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n+        <location line=\"+2\"/>\n         <source>Error loading block database</source>\n         <translation>Error loading block database</translation>\n     </message>\n@@ -4232,7 +4388,7 @@\n         <translation>Error opening block database</translation>\n     </message>\n     <message>\n-        <location line=\"+4\"/>\n+        <location line=\"+5\"/>\n         <source>Error: Disk space is low!</source>\n         <translation>Error: Disk space is low!</translation>\n     </message>\n@@ -4257,27 +4413,32 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+2\"/>\n-        <source>Invalid -onion address: &apos;%s&apos;</source>\n+        <location line=\"+4\"/>\n+        <source>Invalid amount for -%s=&lt;amount&gt;: &apos;%s&apos;</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>Invalid amount for -fallbackfee=&lt;amount&gt;: &apos;%s&apos;</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+2\"/>\n-        <source>Invalid amount for -%s=&lt;amount&gt;: &apos;%s&apos;</source>\n+        <source>Invalid characters in -wallet filename</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n-        <source>Invalid amount for -fallbackfee=&lt;amount&gt;: &apos;%s&apos;</source>\n+        <location line=\"+3\"/>\n+        <source>Keep the transaction memory pool below &lt;n&gt; megabytes (default: %u)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+4\"/>\n-        <source>Keep the transaction memory pool below &lt;n&gt; megabytes (default: %u)</source>\n+        <source>Loading P2P addresses...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+5\"/>\n+        <location line=\"+1\"/>\n         <source>Loading banlist...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4327,12 +4488,17 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+6\"/>\n+        <location line=\"+4\"/>\n+        <source>Replaying blocks...</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n         <source>Rewinding blocks...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+5\"/>\n+        <location line=\"+4\"/>\n         <source>Set database cache size in megabytes (%d to %d, default: %d)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4371,8 +4537,18 @@\n         <source>Unsupported argument -tor found, use -onion.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>Unsupported logging category %s=%s.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+2\"/>\n+        <source>Upgrading UTXO database</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+1\"/>\n         <source>Use UPnP to map the listening port (default: %u)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4392,12 +4568,7 @@\n         <translation>Verifying blocks...</translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n-        <source>Verifying wallet...</source>\n-        <translation>Verifying wallet...</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n+        <location line=\"+2\"/>\n         <source>Wallet %s resides outside data directory %s</source>\n         <translation>Wallet %s resides outside data directory %s</translation>\n     </message>\n@@ -4417,7 +4588,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-358\"/>\n+        <location line=\"-375\"/>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4427,12 +4598,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+3\"/>\n-        <source>Bind to given address to listen for JSON-RPC connections. Use [host]:port notation for IPv6. This option can be specified multiple times (default: bind to all interfaces)</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+9\"/>\n+        <location line=\"+14\"/>\n         <source>Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4447,7 +4613,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+2\"/>\n+        <location line=\"+6\"/>\n         <source>Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)</source>\n         <translation>Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)</translation>\n     </message>\n@@ -4477,22 +4643,17 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+18\"/>\n-        <source>Set maximum size of high-priority/low-fee transactions in bytes (default: %d)</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+15\"/>\n+        <location line=\"+31\"/>\n         <source>The transaction amount is too small to send after the fee has been deducted</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+28\"/>\n+        <location line=\"+31\"/>\n         <source>Use hierarchical deterministic key generation (HD) after BIP32. Only has effect during wallet creation/first start</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+31\"/>\n+        <location line=\"+33\"/>\n         <source>Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4502,12 +4663,12 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+8\"/>\n+        <location line=\"+9\"/>\n         <source>(default: %u)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+4\"/>\n+        <location line=\"+7\"/>\n         <source>Accept public REST requests (default: %u)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4522,10 +4683,20 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+22\"/>\n+        <location line=\"+19\"/>\n+        <source>Error loading %s: You can&apos;t disable HD on an already existing HD wallet</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n         <source>Error reading from database, shutting down.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>Error upgrading chainstate database</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+8\"/>\n         <source>Imports blocks from external blk000??.dat file on startup</source>\n@@ -4537,12 +4708,22 @@\n         <translation>Information</translation>\n     </message>\n     <message>\n-        <location line=\"+7\"/>\n-        <source>Invalid amount for -paytxfee=&lt;amount&gt;: &apos;%s&apos; (must be at least %s)</source>\n+        <location line=\"+3\"/>\n+        <source>Invalid -onion address or hostname: &apos;%s&apos;</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n+        <source>Invalid -proxy address or hostname: &apos;%s&apos;</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n+        <source>Invalid amount for -paytxfee=&lt;amount&gt;: &apos;%s&apos; (must be at least %s)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+2\"/>\n         <source>Invalid netmask specified in -whitelist: &apos;%s&apos;</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4572,7 +4753,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+3\"/>\n+        <location line=\"+4\"/>\n         <source>Rescan the block chain for missing wallet transactions on startup</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4581,11 +4762,6 @@\n         <source>Send trace/debug info to console instead of debug.log file</source>\n         <translation>Send trace/debug info to console instead of debug.log file</translation>\n     </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Send transactions as zero-fee transactions if possible (default: %u)</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n     <message>\n         <location line=\"+7\"/>\n         <source>Show all debugging options (usage: --help -help-debug)</source>\n@@ -4642,17 +4818,22 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+7\"/>\n+        <location line=\"+8\"/>\n         <source>Upgrade wallet to latest format on startup</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+4\"/>\n+        <location line=\"+5\"/>\n         <source>Username for JSON-RPC connections</source>\n         <translation>Username for JSON-RPC connections</translation>\n     </message>\n     <message>\n-        <location line=\"+7\"/>\n+        <location line=\"+2\"/>\n+        <source>Verifying wallet(s)...</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+5\"/>\n         <source>Warning</source>\n         <translation>Warning</translation>\n     </message>\n@@ -4677,27 +4858,22 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-73\"/>\n+        <location line=\"-75\"/>\n         <source>Password for JSON-RPC connections</source>\n         <translation>Password for JSON-RPC connections</translation>\n     </message>\n     <message>\n-        <location line=\"-242\"/>\n+        <location line=\"-251\"/>\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Execute command when the best block changes (%s in cmd is replaced by block hash)</translation>\n     </message>\n     <message>\n-        <location line=\"+170\"/>\n+        <location line=\"+177\"/>\n         <source>Allow DNS lookups for -addnode, -seednode and -connect</source>\n         <translation>Allow DNS lookups for -addnode, -seednode and -connect</translation>\n     </message>\n     <message>\n-        <location line=\"+58\"/>\n-        <source>Loading addresses...</source>\n-        <translation>Loading addresses...</translation>\n-    </message>\n-    <message>\n-        <location line=\"-291\"/>\n+        <location line=\"-243\"/>\n         <source>(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4707,7 +4883,17 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+43\"/>\n+        <location line=\"+19\"/>\n+        <source>Bind to given address to listen for JSON-RPC connections. This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost, or if -rpcallowip has been specified, 0.0.0.0 and :: i.e., all addresses)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+8\"/>\n+        <source>Connect only to the specified node(s); -connect=0 disables automatic connections</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+15\"/>\n         <source>Do not keep transactions in the mempool longer than &lt;n&gt; hours (default: %u)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4717,7 +4903,12 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+24\"/>\n+        <location line=\"+2\"/>\n+        <source>Error loading %s: You can&apos;t enable HD on an already existing non-HD wallet</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+26\"/>\n         <source>Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4747,12 +4938,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+13\"/>\n-        <source>Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect/-noconnect)</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+26\"/>\n+        <location line=\"+37\"/>\n         <source>Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4782,7 +4968,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+6\"/>\n+        <location line=\"+9\"/>\n         <source>Unsupported argument -socks found. Setting SOCKS version isn&apos;t possible anymore, only SOCKS5 proxies are supported.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4807,12 +4993,12 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+7\"/>\n+        <location line=\"+9\"/>\n         <source>Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple times.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+12\"/>\n+        <location line=\"+13\"/>\n         <source>%s is set very high!</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4822,12 +5008,12 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+8\"/>\n+        <location line=\"+11\"/>\n         <source>Always query for peer addresses via DNS lookup (default: %u)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+38\"/>\n+        <location line=\"+39\"/>\n         <source>How many blocks to check at startup (default: %u, 0 = all)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4837,12 +5023,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+6\"/>\n-        <source>Invalid -proxy address: &apos;%s&apos;</source>\n-        <translation>Invalid -proxy address: &apos;%s&apos;</translation>\n-    </message>\n-    <message>\n-        <location line=\"+7\"/>\n+        <location line=\"+14\"/>\n         <source>Keypool ran out, please call keypoolrefill first</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4977,27 +5158,27 @@\n         <translation>Unknown network specified in -onlynet: &apos;%s&apos;</translation>\n     </message>\n     <message>\n-        <location line=\"-80\"/>\n+        <location line=\"-81\"/>\n         <source>Insufficient funds</source>\n         <translation>Insufficient funds</translation>\n     </message>\n     <message>\n-        <location line=\"+14\"/>\n+        <location line=\"+15\"/>\n         <source>Loading block index...</source>\n         <translation>Loading block index...</translation>\n     </message>\n     <message>\n-        <location line=\"-61\"/>\n+        <location line=\"-63\"/>\n         <source>Add a node to connect to and attempt to keep the connection open</source>\n         <translation>Add a node to connect to and attempt to keep the connection open</translation>\n     </message>\n     <message>\n-        <location line=\"+62\"/>\n+        <location line=\"+64\"/>\n         <source>Loading wallet...</source>\n         <translation>Loading wallet...</translation>\n     </message>\n     <message>\n-        <location line=\"-55\"/>\n+        <location line=\"-57\"/>\n         <source>Cannot downgrade wallet</source>\n         <translation>Cannot downgrade wallet</translation>\n     </message>\n@@ -5007,17 +5188,17 @@\n         <translation>Cannot write default address</translation>\n     </message>\n     <message>\n-        <location line=\"+78\"/>\n+        <location line=\"+81\"/>\n         <source>Rescanning...</source>\n         <translation>Rescanning...</translation>\n     </message>\n     <message>\n-        <location line=\"-67\"/>\n+        <location line=\"-70\"/>\n         <source>Done loading</source>\n         <translation>Done loading</translation>\n     </message>\n     <message>\n-        <location line=\"+15\"/>\n+        <location line=\"+16\"/>\n         <source>Error</source>\n         <translation>Error</translation>\n     </message>"
      }
    ]
  },
  {
    "sha": "be824984626fde54ea8e64f4ac51872f23c634f6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTgyNDk4NDYyNmZkZTU0ZWE4ZTY0ZjRhYzUxODcyZjIzYzYzNGY2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-06T13:55:02Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-06T13:55:11Z"
      },
      "message": "Merge #10743: [test] don't run dbcrash.py on Travis\n\nbd00fa5 [test] don't run dbcrash.py on Travis (John Newbery)\n\nTree-SHA512: 396c064e4e596c4c1d7d98f13a6e777fe247791debcead2c58a746445eba49d00b44733917b8b80c9ee56ebf75ec179e63581957a5691ceb3a2acab7758d4fc1",
      "tree": {
        "sha": "f3b6a17526db6246895e75a63de951a0c4ca5eb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f3b6a17526db6246895e75a63de951a0c4ca5eb0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be824984626fde54ea8e64f4ac51872f23c634f6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZXkE/AAoJEB5K7WKYbNJdfRwIAJchJPWnCicyi9is/6d2QDBI\n4p3tFKySDiU0UnAts6YAR1Qf2/qqzkU/D7KQ1L2BtZht2+lsj6m78FNrlLejNfTQ\nbwkTHdkQnDErabkP0iXZNayK71xgxT0mf4nUsVt98WxdhZcWStLUs3Lri5b6UXUv\n7fEsqxZcJG7cfnd312ScWdSNZxot1k7yhfE3BGiiuDuyoXIgz95g6tCLyv4JveJA\nJXhVRi9KHixZmfjTYXp/C2SdUNAPf0acCIS6I/mhHNCxbS/I+ph9k/R0bm/yr3Mm\nWm3XBtw+lo6v/RDQPJZFOUygs9kg1855OvhZttzn1puxJV460JehhvtYX6HpOk8=\n=MB5G\n-----END PGP SIGNATURE-----",
        "payload": "tree f3b6a17526db6246895e75a63de951a0c4ca5eb0\nparent a5cd829a0b51b69a2e7d5e93f55196f7d67a7462\nparent bd00fa52a1818f125c32d9759c3ddf506310271a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1499349302 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1499349311 +0200\n\nMerge #10743: [test] don't run dbcrash.py on Travis\n\nbd00fa5 [test] don't run dbcrash.py on Travis (John Newbery)\n\nTree-SHA512: 396c064e4e596c4c1d7d98f13a6e777fe247791debcead2c58a746445eba49d00b44733917b8b80c9ee56ebf75ec179e63581957a5691ceb3a2acab7758d4fc1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be824984626fde54ea8e64f4ac51872f23c634f6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be824984626fde54ea8e64f4ac51872f23c634f6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be824984626fde54ea8e64f4ac51872f23c634f6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a5cd829a0b51b69a2e7d5e93f55196f7d67a7462",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5cd829a0b51b69a2e7d5e93f55196f7d67a7462",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5cd829a0b51b69a2e7d5e93f55196f7d67a7462"
      },
      {
        "sha": "bd00fa52a1818f125c32d9759c3ddf506310271a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd00fa52a1818f125c32d9759c3ddf506310271a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd00fa52a1818f125c32d9759c3ddf506310271a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a79428fc17a1f6bd85e7e014b9976eb53f1415b2",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be824984626fde54ea8e64f4ac51872f23c634f6/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be824984626fde54ea8e64f4ac51872f23c634f6/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=be824984626fde54ea8e64f4ac51872f23c634f6",
        "patch": "@@ -68,7 +68,7 @@ script:\n     - make $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && make $GOAL V=1 ; false )\n     - export LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib\n     - if [ \"$RUN_TESTS\" = \"true\" ]; then travis_wait 30 make $MAKEJOBS check VERBOSE=1; fi\n-    - if [ \"$TRAVIS_EVENT_TYPE\" = \"cron\" ]; then extended=\"--extended --exclude pruning\"; fi\n+    - if [ \"$TRAVIS_EVENT_TYPE\" = \"cron\" ]; then extended=\"--extended --exclude pruning,dbcrash\"; fi\n     - if [ \"$RUN_TESTS\" = \"true\" ]; then test/functional/test_runner.py --coverage --quiet ${extended}; fi\n after_script:\n     - echo $TRAVIS_COMMIT_RANGE"
      }
    ]
  },
  {
    "sha": "30bc0f67262632d70d7124d962902e142476812f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMGJjMGY2NzI2MjYzMmQ3MGQ3MTI0ZDk2MjkwMmUxNDI0NzY4MTJm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-06T16:11:49Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-06T16:17:51Z"
      },
      "message": "Merge #10710: REST/RPC example update\n\nb8bb425 REST/RPC example update (Michael Rotarius)\n\nTree-SHA512: 3a7003f5996f58d9881e7b7a9155f8b1c233faea2977cd02c481567b60fa47105433184da3d887ef3ec28775ad33719b779bff2753d64b775b29d8a7a6214fda",
      "tree": {
        "sha": "55fd9863371f044cdd6571792187ffd1d29d6971",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/55fd9863371f044cdd6571792187ffd1d29d6971"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30bc0f67262632d70d7124d962902e142476812f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZXmKvAAoJEB5K7WKYbNJd+R4H/1gevp0FgLATfeZthSXxHVY9\nowjLSQ2lMwe7FJH5624DPTWHh+ltDws8kImc5Fn20GWsVPVSmvqEMjCUrL4j4qqt\npefqs429BUvWXJ9OSFGuGTWswy570w3dkqASKj+uiFe0UQrYqkGdnCFegnfonpgY\nq671vzpBvLyWf2OiXSX7kAqd20jO/GilEFqMu/ujI+m4X+w6z+Er15LY/j0NuKvI\nF0I96mkHJn93/7x4m6E3WQCTNB5w5cqfGFixnTymG8ux7ZNfUp+VrgshVeKhFZ6A\nq13FmG8T/oIAYJZdtJ/8dXV7bkpfqHhFYT6yEoaO7Y7tXPG0/f1kDq2xwFuOHhY=\n=fEd7\n-----END PGP SIGNATURE-----",
        "payload": "tree 55fd9863371f044cdd6571792187ffd1d29d6971\nparent be824984626fde54ea8e64f4ac51872f23c634f6\nparent b8bb4257fe7b2f077e1c8b4145ff13d1041787e8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1499357509 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1499357871 +0200\n\nMerge #10710: REST/RPC example update\n\nb8bb425 REST/RPC example update (Michael Rotarius)\n\nTree-SHA512: 3a7003f5996f58d9881e7b7a9155f8b1c233faea2977cd02c481567b60fa47105433184da3d887ef3ec28775ad33719b779bff2753d64b775b29d8a7a6214fda\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30bc0f67262632d70d7124d962902e142476812f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/30bc0f67262632d70d7124d962902e142476812f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30bc0f67262632d70d7124d962902e142476812f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be824984626fde54ea8e64f4ac51872f23c634f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be824984626fde54ea8e64f4ac51872f23c634f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be824984626fde54ea8e64f4ac51872f23c634f6"
      },
      {
        "sha": "b8bb4257fe7b2f077e1c8b4145ff13d1041787e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8bb4257fe7b2f077e1c8b4145ff13d1041787e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b8bb4257fe7b2f077e1c8b4145ff13d1041787e8"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 18,
      "deletions": 15
    },
    "files": [
      {
        "sha": "caf6782886520aa050869489f237a8323b250475",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 16,
        "deletions": 12,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30bc0f67262632d70d7124d962902e142476812f/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30bc0f67262632d70d7124d962902e142476812f/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=30bc0f67262632d70d7124d962902e142476812f",
        "patch": "@@ -40,11 +40,13 @@ Only supports JSON as output format.\n * headers : (numeric) the current number of headers we have validated\n * bestblockhash : (string) the hash of the currently best block\n * difficulty : (numeric) the current difficulty\n+* mediantime : (numeric) the median time of the 11 blocks before the most recent block on the blockchain\n * verificationprogress : (numeric) estimate of verification progress [0..1]\n * chainwork : (string) total amount of work in active chain, in hexadecimal\n * pruned : (boolean) if the blocks are subject to pruning\n * pruneheight : (numeric) heighest block available\n * softforks : (array) status of softforks in progress\n+* bip9_softforks : (object) status of BIP9 softforks in progress\n \n ####Query UTXO set\n `GET /rest/getutxos/<checkmempool>/<txid>-<n>/<txid>-<n>/.../<txid>-<n>.<bin|hex|json>`\n@@ -57,25 +59,25 @@ Example:\n ```\n $ curl localhost:18332/rest/getutxos/checkmempool/b2cdfd7b89def827ff8af7cd9bff7627ff72e5e8b0f71210f92ea7a4000c5d75-0.json 2>/dev/null | json_pp\n {\n-   \"chaintipHash\" : \"00000000fb01a7f3745a717f8caebee056c484e6e0bfe4a9591c235bb70506fb\",\n    \"chainHeight\" : 325347,\n+   \"chaintipHash\" : \"00000000fb01a7f3745a717f8caebee056c484e6e0bfe4a9591c235bb70506fb\",\n+   \"bitmap\": \"1\",\n    \"utxos\" : [\n       {\n+         \"txvers\" : 1\n+         \"height\" : 2147483647,\n+         \"value\" : 8.8687,\t\t \n          \"scriptPubKey\" : {\n-            \"addresses\" : [\n-               \"mi7as51dvLJsizWnTMurtRmrP8hG2m1XvD\"\n-            ],\n-            \"type\" : \"pubkeyhash\",\n+            \"asm\" : \"OP_DUP OP_HASH160 1c7cebb529b86a04c683dfa87be49de35bcf589e OP_EQUALVERIFY OP_CHECKSIG\",\n             \"hex\" : \"76a9141c7cebb529b86a04c683dfa87be49de35bcf589e88ac\",\n             \"reqSigs\" : 1,\n-            \"asm\" : \"OP_DUP OP_HASH160 1c7cebb529b86a04c683dfa87be49de35bcf589e OP_EQUALVERIFY OP_CHECKSIG\"\n-         },\n-         \"value\" : 8.8687,\n-         \"height\" : 2147483647,\n-         \"txvers\" : 1\n+            \"type\" : \"pubkeyhash\",\n+            \"addresses\" : [\n+               \"mi7as51dvLJsizWnTMurtRmrP8hG2m1XvD\"\n+            ]\n+         }\n       }\n-   ],\n-   \"bitmap\" : \"1\"\n+   ]\n }\n ```\n \n@@ -87,6 +89,8 @@ Only supports JSON as output format.\n * size : (numeric) the number of transactions in the TX mempool\n * bytes : (numeric) size of the TX mempool in bytes\n * usage : (numeric) total TX mempool memory usage\n+* maxmempool : (numeric) maximum memory usage for the mempool in bytes\n+* mempoolminfee : (numeric) minimum feerate (BTC per KB) for tx to be accepted\n \n `GET /rest/mempool/contents.json`\n "
      },
      {
        "sha": "ed452fcb0218fb7fa1f48ac5df96933e34de975e",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30bc0f67262632d70d7124d962902e142476812f/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30bc0f67262632d70d7124d962902e142476812f/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=30bc0f67262632d70d7124d962902e142476812f",
        "patch": "@@ -301,9 +301,8 @@ UniValue getaddednodeinfo(const JSONRPCRequest& request)\n             \"  ,...\\n\"\n             \"]\\n\"\n             \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getaddednodeinfo\", \"true\")\n-            + HelpExampleCli(\"getaddednodeinfo\", \"true \\\"192.168.0.201\\\"\")\n-            + HelpExampleRpc(\"getaddednodeinfo\", \"true, \\\"192.168.0.201\\\"\")\n+            + HelpExampleCli(\"getaddednodeinfo\", \"\\\"192.168.0.201\\\"\")\n+            + HelpExampleRpc(\"getaddednodeinfo\", \"\\\"192.168.0.201\\\"\")\n         );\n \n     if(!g_connman)"
      }
    ]
  },
  {
    "sha": "5af6572534986bf85f6806e2cc66c1f1f8e3c56c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YWY2NTcyNTM0OTg2YmY4NWY2ODA2ZTJjYzY2YzFmMWY4ZTNjNTZj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-06T18:34:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-06T18:37:40Z"
      },
      "message": "Merge #10698: Be consistent in calling transactions \"replaceable\" for Opt-In RBF\n\n73c942e Use \"replaceable\" instead of \"rbfoptin\" in bitcoin-tx. (Matt Corallo)\nfb915d5 Use \"replaceable\" instead of \"optIntoRbf\" in fundrawtransaction. (Matt Corallo)\n928c681 Use \"replaceable\" instead of \"optintorbf\" in createrawtransaction. (Matt Corallo)\n\nTree-SHA512: 8922451c00abb63aaa08b4a9e314e89c22233b32f207259fbc25367f7d5b67efbaccc7e2a4958c18611ad498da302296242860c7be965a0e996dcde3e89efa07",
      "tree": {
        "sha": "3dc072246bf0211f3972e6ba8e1190eaf873cd79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3dc072246bf0211f3972e6ba8e1190eaf873cd79"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5af6572534986bf85f6806e2cc66c1f1f8e3c56c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZXoN0AAoJEB5K7WKYbNJdi8YH/jCn7CrvKAh3gOeSZy92TC+Y\nzVPNEat+NA8cEPhJwkYt3JV40OYbaB83+OSvXaeAeSlhffNOakIeu8qmMmc5LhQ9\nYnNdBhZDrzlXpAtjWjSg8/tnJSlamCDqutO6DysyyWqgtCkCklEKVo1NX1h0lnaM\nVumLRgKiq8DlL+DYr1aAqwfgWw/jNx1f+S/7Td0YvJb2iIj6LaA3YX5LGFurj4VW\nVlXWiSH9xBb3aH/G6SmomgTNArZRgmes0k8n+7W1r2iOJu2A/4LqcODzP6HjEF1B\nM6EJ8LZGQYD34kAli9WqTXYb/VS9gx/CPjSxpufcjfDqy2jMsPhquI3wKwM7sTk=\n=H7Uc\n-----END PGP SIGNATURE-----",
        "payload": "tree 3dc072246bf0211f3972e6ba8e1190eaf873cd79\nparent 30bc0f67262632d70d7124d962902e142476812f\nparent 73c942ecd300c72f1e267e783c18eed93100a313\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1499366090 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1499366260 +0200\n\nMerge #10698: Be consistent in calling transactions \"replaceable\" for Opt-In RBF\n\n73c942e Use \"replaceable\" instead of \"rbfoptin\" in bitcoin-tx. (Matt Corallo)\nfb915d5 Use \"replaceable\" instead of \"optIntoRbf\" in fundrawtransaction. (Matt Corallo)\n928c681 Use \"replaceable\" instead of \"optintorbf\" in createrawtransaction. (Matt Corallo)\n\nTree-SHA512: 8922451c00abb63aaa08b4a9e314e89c22233b32f207259fbc25367f7d5b67efbaccc7e2a4958c18611ad498da302296242860c7be965a0e996dcde3e89efa07\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5af6572534986bf85f6806e2cc66c1f1f8e3c56c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5af6572534986bf85f6806e2cc66c1f1f8e3c56c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5af6572534986bf85f6806e2cc66c1f1f8e3c56c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "30bc0f67262632d70d7124d962902e142476812f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30bc0f67262632d70d7124d962902e142476812f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30bc0f67262632d70d7124d962902e142476812f"
      },
      {
        "sha": "73c942ecd300c72f1e267e783c18eed93100a313",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73c942ecd300c72f1e267e783c18eed93100a313",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/73c942ecd300c72f1e267e783c18eed93100a313"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 13,
      "deletions": 11
    },
    "files": [
      {
        "sha": "c6d5db786e7037c9c45dacf5c25976077ffea70d",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5af6572534986bf85f6806e2cc66c1f1f8e3c56c/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5af6572534986bf85f6806e2cc66c1f1f8e3c56c/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=5af6572534986bf85f6806e2cc66c1f1f8e3c56c",
        "patch": "@@ -77,7 +77,7 @@ static int AppInitRawTx(int argc, char* argv[])\n         strUsage += HelpMessageOpt(\"in=TXID:VOUT(:SEQUENCE_NUMBER)\", _(\"Add input to TX\"));\n         strUsage += HelpMessageOpt(\"locktime=N\", _(\"Set TX lock time to N\"));\n         strUsage += HelpMessageOpt(\"nversion=N\", _(\"Set TX version to N\"));\n-        strUsage += HelpMessageOpt(\"rbfoptin(=N)\", _(\"Set RBF opt-in sequence number for input N (if not provided, opt-in all available inputs)\"));\n+        strUsage += HelpMessageOpt(\"replaceable(=N)\", _(\"Set RBF opt-in sequence number for input N (if not provided, opt-in all available inputs)\"));\n         strUsage += HelpMessageOpt(\"outaddr=VALUE:ADDRESS\", _(\"Add address-based output to TX\"));\n         strUsage += HelpMessageOpt(\"outpubkey=VALUE:PUBKEY[:FLAGS]\", _(\"Add pay-to-pubkey output to TX\") + \". \" +\n             _(\"Optionally add the \\\"W\\\" flag to produce a pay-to-witness-pubkey-hash output\") + \". \" +\n@@ -673,7 +673,7 @@ static void MutateTx(CMutableTransaction& tx, const std::string& command,\n         MutateTxVersion(tx, commandVal);\n     else if (command == \"locktime\")\n         MutateTxLocktime(tx, commandVal);\n-    else if (command == \"rbfoptin\") {\n+    else if (command == \"replaceable\") {\n         MutateTxRBFOptIn(tx, commandVal);\n     }\n "
      },
      {
        "sha": "a3ea5390eec2d2ca522a9950b636e8ef2387d628",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5af6572534986bf85f6806e2cc66c1f1f8e3c56c/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5af6572534986bf85f6806e2cc66c1f1f8e3c56c/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=5af6572534986bf85f6806e2cc66c1f1f8e3c56c",
        "patch": "@@ -86,7 +86,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"createrawtransaction\", 0, \"inputs\" },\n     { \"createrawtransaction\", 1, \"outputs\" },\n     { \"createrawtransaction\", 2, \"locktime\" },\n-    { \"createrawtransaction\", 3, \"optintorbf\" },\n+    { \"createrawtransaction\", 3, \"replaceable\" },\n     { \"signrawtransaction\", 1, \"prevtxs\" },\n     { \"signrawtransaction\", 2, \"privkeys\" },\n     { \"sendrawtransaction\", 1, \"allowhighfees\" },"
      },
      {
        "sha": "b878624df8779f9c9293dcbbdc7a15300ac4612d",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5af6572534986bf85f6806e2cc66c1f1f8e3c56c/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5af6572534986bf85f6806e2cc66c1f1f8e3c56c/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=5af6572534986bf85f6806e2cc66c1f1f8e3c56c",
        "patch": "@@ -294,7 +294,7 @@ UniValue createrawtransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n         throw std::runtime_error(\n-            \"createrawtransaction [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n},...] {\\\"address\\\":amount,\\\"data\\\":\\\"hex\\\",...} ( locktime ) ( optintorbf )\\n\"\n+            \"createrawtransaction [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n},...] {\\\"address\\\":amount,\\\"data\\\":\\\"hex\\\",...} ( locktime ) ( replaceable )\\n\"\n             \"\\nCreate a transaction spending the given inputs and creating new outputs.\\n\"\n             \"Outputs can be addresses or data.\\n\"\n             \"Returns hex-encoded raw transaction.\\n\"\n@@ -318,7 +318,8 @@ UniValue createrawtransaction(const JSONRPCRequest& request)\n             \"      ,...\\n\"\n             \"    }\\n\"\n             \"3. locktime                  (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs\\n\"\n-            \"4. optintorbf                (boolean, optional, default=false) Allow this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\\n\"\n+            \"4. replaceable               (boolean, optional, default=false) Marks this transaction as BIP125 replaceable.\\n\"\n+            \"                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"transaction\\\"              (string) hex string of the transaction\\n\"\n \n@@ -412,7 +413,7 @@ UniValue createrawtransaction(const JSONRPCRequest& request)\n     }\n \n     if (request.params.size() > 3 && rbfOptIn != SignalsOptInRBF(rawTx)) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter combination: Sequence number(s) contradict optintorbf option\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter combination: Sequence number(s) contradict replaceable option\");\n     }\n \n     return EncodeHexTx(rawTx);\n@@ -900,7 +901,7 @@ static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         okSafeMode\n   //  --------------------- ------------------------  -----------------------  ----------\n     { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true,  {\"txid\",\"verbose\"} },\n-    { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   true,  {\"inputs\",\"outputs\",\"locktime\"} },\n+    { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   true,  {\"inputs\",\"outputs\",\"locktime\",\"replaceable\"} },\n     { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   true,  {\"hexstring\"} },\n     { \"rawtransactions\",    \"decodescript\",           &decodescript,           true,  {\"hexstring\"} },\n     { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false, {\"hexstring\",\"allowhighfees\"} },"
      },
      {
        "sha": "867ccd42444ee6bb1fbbafab658456f2fca932e6",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5af6572534986bf85f6806e2cc66c1f1f8e3c56c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5af6572534986bf85f6806e2cc66c1f1f8e3c56c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=5af6572534986bf85f6806e2cc66c1f1f8e3c56c",
        "patch": "@@ -2656,7 +2656,8 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n                             \"                              If no outputs are specified here, the sender pays the fee.\\n\"\n                             \"                                  [vout_index,...]\\n\"\n-                            \"     \\\"optIntoRbf\\\"             (boolean, optional) Allow this transaction to be replaced by a transaction with higher fees\\n\"\n+                            \"     \\\"replaceable\\\"            (boolean, optional) Marks this transaction as BIP125 replaceable.\\n\"\n+                            \"                              Allows this transaction to be replaced by a transaction with higher fees\\n\"\n                             \"   }\\n\"\n                             \"                         for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\\n\"\n                             \"\\nResult:\\n\"\n@@ -2708,7 +2709,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                 {\"reserveChangeKey\", UniValueType(UniValue::VBOOL)},\n                 {\"feeRate\", UniValueType()}, // will be checked below\n                 {\"subtractFeeFromOutputs\", UniValueType(UniValue::VARR)},\n-                {\"optIntoRbf\", UniValueType(UniValue::VBOOL)},\n+                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n             },\n             true, true);\n \n@@ -2742,8 +2743,8 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n         if (options.exists(\"subtractFeeFromOutputs\"))\n             subtractFeeFromOutputs = options[\"subtractFeeFromOutputs\"].get_array();\n \n-        if (options.exists(\"optIntoRbf\")) {\n-            coinControl.signalRbf = options[\"optIntoRbf\"].get_bool();\n+        if (options.exists(\"replaceable\")) {\n+            coinControl.signalRbf = options[\"replaceable\"].get_bool();\n         }\n       }\n     }"
      }
    ]
  },
  {
    "sha": "bc7d1032f8bcf7d5fc807ec0df6fe76410732d97",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzdkMTAzMmY4YmNmN2Q1ZmM4MDdlYzBkZjZmZTc2NDEwNzMyZDk3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-07T02:04:46Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-07T02:04:46Z"
      },
      "message": "Fix multi_rpc test for hosts that dont default to utf8\n\nOtherwise the utf8 written to bitcoin.conf throws an exception when\nread from get_auth_cookie",
      "tree": {
        "sha": "6e48cef35d8b9bb204e474ca6ad587df2374e263",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e48cef35d8b9bb204e474ca6ad587df2374e263"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc7d1032f8bcf7d5fc807ec0df6fe76410732d97",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc7d1032f8bcf7d5fc807ec0df6fe76410732d97",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc7d1032f8bcf7d5fc807ec0df6fe76410732d97",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc7d1032f8bcf7d5fc807ec0df6fe76410732d97/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5af6572534986bf85f6806e2cc66c1f1f8e3c56c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5af6572534986bf85f6806e2cc66c1f1f8e3c56c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5af6572534986bf85f6806e2cc66c1f1f8e3c56c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "acca72aa86e177dc71809d5878e8f0302d93e3b2",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc7d1032f8bcf7d5fc807ec0df6fe76410732d97/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc7d1032f8bcf7d5fc807ec0df6fe76410732d97/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=bc7d1032f8bcf7d5fc807ec0df6fe76410732d97",
        "patch": "@@ -236,7 +236,7 @@ def get_auth_cookie(datadir, n):\n     user = None\n     password = None\n     if os.path.isfile(os.path.join(datadir, \"bitcoin.conf\")):\n-        with open(os.path.join(datadir, \"bitcoin.conf\"), 'r') as f:\n+        with open(os.path.join(datadir, \"bitcoin.conf\"), 'r', encoding='utf8') as f:\n             for line in f:\n                 if line.startswith(\"rpcuser=\"):\n                     assert user is None  # Ensure that there is only one rpcuser line"
      }
    ]
  },
  {
    "sha": "cfaef69ace6c52aeb4ce347597c6dae61bdce744",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZmFlZjY5YWNlNmM1MmFlYjRjZTM0NzU5N2M2ZGFlNjFiZGNlNzQ0",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-13T14:41:14Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-07T02:20:23Z"
      },
      "message": "remove default argument from GetMinimumFee",
      "tree": {
        "sha": "5acacb04a9644b98183c99fa9548d292fed1112d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5acacb04a9644b98183c99fa9548d292fed1112d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfaef69ace6c52aeb4ce347597c6dae61bdce744",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfaef69ace6c52aeb4ce347597c6dae61bdce744",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cfaef69ace6c52aeb4ce347597c6dae61bdce744",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfaef69ace6c52aeb4ce347597c6dae61bdce744/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5af6572534986bf85f6806e2cc66c1f1f8e3c56c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5af6572534986bf85f6806e2cc66c1f1f8e3c56c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5af6572534986bf85f6806e2cc66c1f1f8e3c56c"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "10a8d6b887302903dd8082c26df64a971f8180e9",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfaef69ace6c52aeb4ce347597c6dae61bdce744/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfaef69ace6c52aeb4ce347597c6dae61bdce744/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=cfaef69ace6c52aeb4ce347597c6dae61bdce744",
        "patch": "@@ -510,7 +510,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n                 nBytes -= 34;\n \n         // Fee\n-        nPayFee = CWallet::GetMinimumFee(nBytes, coinControl->nConfirmTarget, ::mempool, ::feeEstimator);\n+        nPayFee = CWallet::GetMinimumFee(nBytes, coinControl->nConfirmTarget, ::mempool, ::feeEstimator, nullptr /* FeeCalculation */, false /* ignoreGlobalPayTxFee */);\n \n         if (nPayAmount > 0)\n         {"
      },
      {
        "sha": "4b00404d2aeb0255b34c6bb21f55bbed65ced24d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfaef69ace6c52aeb4ce347597c6dae61bdce744/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfaef69ace6c52aeb4ce347597c6dae61bdce744/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=cfaef69ace6c52aeb4ce347597c6dae61bdce744",
        "patch": "@@ -2724,7 +2724,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 if (coinControl && coinControl->nConfirmTarget > 0)\n                     currentConfirmationTarget = coinControl->nConfirmTarget;\n \n-                CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, ::mempool, ::feeEstimator, &feeCalc);\n+                CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, ::mempool, ::feeEstimator, &feeCalc, false /* ignoreGlobalPayTxFee */);\n                 if (coinControl && coinControl->fOverrideFeeRate)\n                     nFeeNeeded = coinControl->nFeeRate.GetFee(nBytes);\n "
      },
      {
        "sha": "232673a2f76dd1985763bf749b10b8be3aad9d49",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfaef69ace6c52aeb4ce347597c6dae61bdce744/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfaef69ace6c52aeb4ce347597c6dae61bdce744/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=cfaef69ace6c52aeb4ce347597c6dae61bdce744",
        "patch": "@@ -963,7 +963,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Estimate the minimum fee considering user set parameters\n      * and the required fee\n      */\n-    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc = nullptr, bool ignoreGlobalPayTxFee = false);\n+    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc, bool ignoreGlobalPayTxFee);\n     /**\n      * Return the minimum required fee taking into account the\n      * floating relay fee and user set minimum transaction fee"
      }
    ]
  },
  {
    "sha": "d507c301bc49c72ed7303658a309e7d204134f80",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTA3YzMwMWJjNDljNzJlZDczMDM2NThhMzA5ZTdkMjA0MTM0Zjgw",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-13T15:28:30Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-07T02:20:23Z"
      },
      "message": "Introduce a fee estimate mode.\n\nGetMinimumFee now passes the conservative argument into estimateSmartFee.\nCall CalculateEstimateType(mode) before calling GetMinimumFee or estimateSmartFee to determine the value of this argument.\nCCoinControl can now be used to control this mode.",
      "tree": {
        "sha": "33e3d8fed65c98f105bf80bcfb2dfb3f32c98cf9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33e3d8fed65c98f105bf80bcfb2dfb3f32c98cf9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d507c301bc49c72ed7303658a309e7d204134f80",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d507c301bc49c72ed7303658a309e7d204134f80",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d507c301bc49c72ed7303658a309e7d204134f80",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d507c301bc49c72ed7303658a309e7d204134f80/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cfaef69ace6c52aeb4ce347597c6dae61bdce744",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfaef69ace6c52aeb4ce347597c6dae61bdce744",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cfaef69ace6c52aeb4ce347597c6dae61bdce744"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 42,
      "deletions": 8
    },
    "files": [
      {
        "sha": "8a98e55520812233642a37adaa126cd311c068a0",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d507c301bc49c72ed7303658a309e7d204134f80/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d507c301bc49c72ed7303658a309e7d204134f80/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=d507c301bc49c72ed7303658a309e7d204134f80",
        "patch": "@@ -90,6 +90,13 @@ enum class FeeReason {\n \n std::string StringForFeeReason(FeeReason reason);\n \n+/* Used to determine type of fee estimation requested */\n+enum class FeeEstimateMode {\n+    UNSET,        //! Use default settings based on other criteria\n+    ECONOMICAL,   //! Force estimateSmartFee to use non-conservative estimates\n+    CONSERVATIVE, //! Force estimateSmartFee to use conservative estimates\n+};\n+\n /* Used to return detailed information about a feerate bucket */\n struct EstimatorBucket\n {"
      },
      {
        "sha": "477cee1c0411cfe2435790e7b62d027f8933fc0d",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d507c301bc49c72ed7303658a309e7d204134f80/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d507c301bc49c72ed7303658a309e7d204134f80/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=d507c301bc49c72ed7303658a309e7d204134f80",
        "patch": "@@ -490,6 +490,8 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         else nBytesInputs += 148;\n     }\n \n+    bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET);\n+\n     // calculation\n     if (nQuantity > 0)\n     {\n@@ -510,7 +512,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n                 nBytes -= 34;\n \n         // Fee\n-        nPayFee = CWallet::GetMinimumFee(nBytes, coinControl->nConfirmTarget, ::mempool, ::feeEstimator, nullptr /* FeeCalculation */, false /* ignoreGlobalPayTxFee */);\n+        nPayFee = CWallet::GetMinimumFee(nBytes, coinControl->nConfirmTarget, ::mempool, ::feeEstimator, nullptr /* FeeCalculation */, false /* ignoreGlobalPayTxFee */, conservative_estimate);\n \n         if (nPayAmount > 0)\n         {\n@@ -585,7 +587,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     if (payTxFee.GetFeePerK() > 0)\n         dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), payTxFee.GetFeePerK()) / 1000;\n     else {\n-        dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), ::feeEstimator.estimateSmartFee(coinControl->nConfirmTarget, NULL, ::mempool).GetFeePerK()) / 1000;\n+        dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), ::feeEstimator.estimateSmartFee(coinControl->nConfirmTarget, NULL, ::mempool, conservative_estimate).GetFeePerK()) / 1000;\n     }\n     QString toolTip4 = tr(\"Can vary +/- %1 satoshi(s) per input.\").arg(dFeeVary);\n "
      },
      {
        "sha": "d9439fe248c41dcce600211a88bb7bc74e629d76",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d507c301bc49c72ed7303658a309e7d204134f80/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d507c301bc49c72ed7303658a309e7d204134f80/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=d507c301bc49c72ed7303658a309e7d204134f80",
        "patch": "@@ -652,7 +652,8 @@ void SendCoinsDialog::updateSmartFeeLabel()\n \n     int nBlocksToConfirm = ui->sliderSmartFee->maximum() - ui->sliderSmartFee->value() + 2;\n     FeeCalculation feeCalc;\n-    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocksToConfirm, &feeCalc, ::mempool);\n+    bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET);\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocksToConfirm, &feeCalc, ::mempool, conservative_estimate);\n     if (feeRate <= CFeeRate(0)) // not enough data => minfee\n     {\n         ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(),"
      },
      {
        "sha": "354225090f77761f715db2f476e36bc8295c241f",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d507c301bc49c72ed7303658a309e7d204134f80/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d507c301bc49c72ed7303658a309e7d204134f80/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=d507c301bc49c72ed7303658a309e7d204134f80",
        "patch": "@@ -19,6 +19,7 @@\n #include \"keystore.h\"\n #include \"validation.h\"\n #include \"net.h\" // for g_connman\n+#include \"policy/fees.h\"\n #include \"policy/rbf.h\"\n #include \"sync.h\"\n #include \"ui_interface.h\""
      },
      {
        "sha": "bdd01bec12acd3fb58786a5fa0b82c56d5bc1bb7",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d507c301bc49c72ed7303658a309e7d204134f80/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d507c301bc49c72ed7303658a309e7d204134f80/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=d507c301bc49c72ed7303658a309e7d204134f80",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_WALLET_COINCONTROL_H\n \n #include \"policy/feerate.h\"\n+#include \"policy/fees.h\"\n #include \"primitives/transaction.h\"\n #include \"wallet/wallet.h\"\n \n@@ -26,6 +27,8 @@ class CCoinControl\n     int nConfirmTarget;\n     //! Signal BIP-125 replace by fee.\n     bool signalRbf;\n+    //! Fee estimation mode to control arguments to estimateSmartFee\n+    FeeEstimateMode m_fee_mode;\n \n     CCoinControl()\n     {\n@@ -42,6 +45,7 @@ class CCoinControl\n         fOverrideFeeRate = false;\n         nConfirmTarget = 0;\n         signalRbf = fWalletRbf;\n+        m_fee_mode = FeeEstimateMode::UNSET;\n     }\n \n     bool HasSelected() const"
      },
      {
        "sha": "a36f6798f0f48b97e75fc7855f0c288572dcb7f0",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d507c301bc49c72ed7303658a309e7d204134f80/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d507c301bc49c72ed7303658a309e7d204134f80/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=d507c301bc49c72ed7303658a309e7d204134f80",
        "patch": "@@ -165,7 +165,8 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n         nNewFee = totalFee;\n         nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n     } else {\n-        nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, ::feeEstimator, nullptr, ignoreGlobalPayTxFee);\n+        bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET);\n+        nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, ::feeEstimator, nullptr /* FeeCalculation */, ignoreGlobalPayTxFee, conservative_estimate);\n         nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n \n         // New fee rate must be at least old rate + minimum incremental relay rate"
      },
      {
        "sha": "a43b5398e04c60bae6471f535b5f2667f830a179",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 3,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d507c301bc49c72ed7303658a309e7d204134f80/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d507c301bc49c72ed7303658a309e7d204134f80/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d507c301bc49c72ed7303658a309e7d204134f80",
        "patch": "@@ -2724,7 +2724,10 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 if (coinControl && coinControl->nConfirmTarget > 0)\n                     currentConfirmationTarget = coinControl->nConfirmTarget;\n \n-                CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, ::mempool, ::feeEstimator, &feeCalc, false /* ignoreGlobalPayTxFee */);\n+                // Allow to override the default fee estimate mode over the CoinControl instance\n+                bool conservative_estimate = CalculateEstimateType(coinControl ? coinControl->m_fee_mode : FeeEstimateMode::UNSET);\n+\n+                CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, ::mempool, ::feeEstimator, &feeCalc, false /* ignoreGlobalPayTxFee */, conservative_estimate);\n                 if (coinControl && coinControl->fOverrideFeeRate)\n                     nFeeNeeded = coinControl->nFeeRate.GetFee(nBytes);\n \n@@ -2905,13 +2908,13 @@ CAmount CWallet::GetRequiredFee(unsigned int nTxBytes)\n     return std::max(minTxFee.GetFee(nTxBytes), ::minRelayTxFee.GetFee(nTxBytes));\n }\n \n-CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc, bool ignoreGlobalPayTxFee)\n+CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc, bool ignoreGlobalPayTxFee, bool conservative_estimate)\n {\n     // payTxFee is the user-set global for desired feerate\n     CAmount nFeeNeeded = payTxFee.GetFee(nTxBytes);\n     // User didn't set: use -txconfirmtarget to estimate...\n     if (nFeeNeeded == 0 || ignoreGlobalPayTxFee) {\n-        nFeeNeeded = estimator.estimateSmartFee(nConfirmTarget, feeCalc, pool, true).GetFee(nTxBytes);\n+        nFeeNeeded = estimator.estimateSmartFee(nConfirmTarget, feeCalc, pool, conservative_estimate).GetFee(nTxBytes);\n         // ... unless we don't have enough mempool data for estimatefee, then use fallbackFee\n         if (nFeeNeeded == 0) {\n             nFeeNeeded = fallbackFee.GetFee(nTxBytes);\n@@ -4154,3 +4157,14 @@ bool CMerkleTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState&\n {\n     return ::AcceptToMemoryPool(mempool, state, tx, true, NULL, NULL, false, nAbsurdFee);\n }\n+\n+bool CalculateEstimateType(FeeEstimateMode mode) {\n+    switch (mode) {\n+    case FeeEstimateMode::UNSET:\n+    case FeeEstimateMode::CONSERVATIVE:\n+        return true;\n+    case FeeEstimateMode::ECONOMICAL:\n+        return false;\n+    }\n+    return true;\n+}"
      },
      {
        "sha": "813bf530acf3d658fb2b4a5f8c11cdd019214e8a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d507c301bc49c72ed7303658a309e7d204134f80/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d507c301bc49c72ed7303658a309e7d204134f80/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d507c301bc49c72ed7303658a309e7d204134f80",
        "patch": "@@ -80,6 +80,7 @@ class CTxMemPool;\n class CBlockPolicyEstimator;\n class CWalletTx;\n struct FeeCalculation;\n+enum class FeeEstimateMode;\n \n /** (client) version numbers for particular wallet features */\n enum WalletFeature\n@@ -963,7 +964,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Estimate the minimum fee considering user set parameters\n      * and the required fee\n      */\n-    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc, bool ignoreGlobalPayTxFee);\n+    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc, bool ignoreGlobalPayTxFee, bool conservative_estimate);\n     /**\n      * Return the minimum required fee taking into account the\n      * floating relay fee and user set minimum transaction fee\n@@ -1211,4 +1212,7 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins\n     }\n     return true;\n }\n+\n+bool CalculateEstimateType(FeeEstimateMode mode);\n+\n #endif // BITCOIN_WALLET_WALLET_H"
      }
    ]
  },
  {
    "sha": "e0738e3d319ab50466bf76c95841bb7275ad4d22",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDczOGUzZDMxOWFiNTA0NjZiZjc2Yzk1ODQxYmI3Mjc1YWQ0ZDIy",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-13T17:44:52Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-07T02:20:23Z"
      },
      "message": "remove default argument from estimateSmartFee",
      "tree": {
        "sha": "8b7ea639c1024426e5fe0e465f911568e5c007c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b7ea639c1024426e5fe0e465f911568e5c007c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0738e3d319ab50466bf76c95841bb7275ad4d22",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0738e3d319ab50466bf76c95841bb7275ad4d22",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0738e3d319ab50466bf76c95841bb7275ad4d22",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0738e3d319ab50466bf76c95841bb7275ad4d22/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d507c301bc49c72ed7303658a309e7d204134f80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d507c301bc49c72ed7303658a309e7d204134f80",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d507c301bc49c72ed7303658a309e7d204134f80"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "059415418dd630a52a82bbec126a3cdfe2647c56",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0738e3d319ab50466bf76c95841bb7275ad4d22/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0738e3d319ab50466bf76c95841bb7275ad4d22/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=e0738e3d319ab50466bf76c95841bb7275ad4d22",
        "patch": "@@ -204,7 +204,7 @@ class CBlockPolicyEstimator\n      *  the closest target where one can be given.  'conservative' estimates are\n      *  valid over longer time horizons also.\n      */\n-    CFeeRate estimateSmartFee(int confTarget, FeeCalculation *feeCalc, const CTxMemPool& pool, bool conservative = true) const;\n+    CFeeRate estimateSmartFee(int confTarget, FeeCalculation *feeCalc, const CTxMemPool& pool, bool conservative) const;\n \n     /** Return a specific fee estimate calculation with a given success\n      * threshold and time horizon, and optionally return detailed data about"
      },
      {
        "sha": "8cdd392109633bff26cfb35f66d5f09bc8e8b0e9",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0738e3d319ab50466bf76c95841bb7275ad4d22/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0738e3d319ab50466bf76c95841bb7275ad4d22/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=e0738e3d319ab50466bf76c95841bb7275ad4d22",
        "patch": "@@ -184,8 +184,8 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     mpool.TrimToSize(1);\n     BOOST_CHECK(mpool.GetMinFee(1).GetFeePerK() > feeV[5]);\n     for (int i = 1; i < 10; i++) {\n-        BOOST_CHECK(feeEst.estimateSmartFee(i, NULL, mpool).GetFeePerK() >= feeEst.estimateRawFee(i, 0.85, FeeEstimateHorizon::MED_HALFLIFE).GetFeePerK());\n-        BOOST_CHECK(feeEst.estimateSmartFee(i, NULL, mpool).GetFeePerK() >= mpool.GetMinFee(1).GetFeePerK());\n+        BOOST_CHECK(feeEst.estimateSmartFee(i, NULL, mpool, true).GetFeePerK() >= feeEst.estimateRawFee(i, 0.85, FeeEstimateHorizon::MED_HALFLIFE).GetFeePerK());\n+        BOOST_CHECK(feeEst.estimateSmartFee(i, NULL, mpool, true).GetFeePerK() >= mpool.GetMinFee(1).GetFeePerK());\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "f0bf33da8357bd6aff100bbe5b84a7f01937e379",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMGJmMzNkYTgzNTdiZDZhZmYxMDBiYmU1Yjg0YTdmMDE5MzdlMzc5",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-13T18:02:55Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-07T02:20:23Z"
      },
      "message": "Change default fee estimation mode.\n\nFee estimates will default to be non-conservative if the transaction in question is opt-in-RBF.",
      "tree": {
        "sha": "7fe52cd82773d8bd31f35fc74489d1527784c53b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7fe52cd82773d8bd31f35fc74489d1527784c53b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0bf33da8357bd6aff100bbe5b84a7f01937e379",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0bf33da8357bd6aff100bbe5b84a7f01937e379",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0bf33da8357bd6aff100bbe5b84a7f01937e379",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0bf33da8357bd6aff100bbe5b84a7f01937e379/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0738e3d319ab50466bf76c95841bb7275ad4d22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0738e3d319ab50466bf76c95841bb7275ad4d22",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0738e3d319ab50466bf76c95841bb7275ad4d22"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 10,
      "deletions": 6
    },
    "files": [
      {
        "sha": "c19420beb5614c5d8982609ad753fc3c656e12f8",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0bf33da8357bd6aff100bbe5b84a7f01937e379/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0bf33da8357bd6aff100bbe5b84a7f01937e379/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=f0bf33da8357bd6aff100bbe5b84a7f01937e379",
        "patch": "@@ -490,7 +490,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         else nBytesInputs += 148;\n     }\n \n-    bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET);\n+    bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET, coinControl->signalRbf);\n \n     // calculation\n     if (nQuantity > 0)"
      },
      {
        "sha": "27634eb179ba0b9fe2d86fb389128da62d5fa568",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0bf33da8357bd6aff100bbe5b84a7f01937e379/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0bf33da8357bd6aff100bbe5b84a7f01937e379/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=f0bf33da8357bd6aff100bbe5b84a7f01937e379",
        "patch": "@@ -166,6 +166,8 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(updateFeeSectionControls()));\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(updateGlobalFeeVariables()));\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(coinControlUpdateLabels()));\n+        connect(ui->optInRBF, SIGNAL(stateChanged(int)), this, SLOT(updateSmartFeeLabel()));\n+        connect(ui->optInRBF, SIGNAL(stateChanged(int)), this, SLOT(coinControlUpdateLabels()));\n         ui->customFee->setSingleStep(CWallet::GetRequiredFee(1000));\n         updateFeeSectionControls();\n         updateMinFeeLabel();\n@@ -652,7 +654,7 @@ void SendCoinsDialog::updateSmartFeeLabel()\n \n     int nBlocksToConfirm = ui->sliderSmartFee->maximum() - ui->sliderSmartFee->value() + 2;\n     FeeCalculation feeCalc;\n-    bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET);\n+    bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET, ui->optInRBF->isChecked());\n     CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocksToConfirm, &feeCalc, ::mempool, conservative_estimate);\n     if (feeRate <= CFeeRate(0)) // not enough data => minfee\n     {\n@@ -828,6 +830,7 @@ void SendCoinsDialog::coinControlUpdateLabels()\n     } else {\n         CoinControlDialog::coinControl->nConfirmTarget = model->getDefaultConfirmTarget();\n     }\n+    CoinControlDialog::coinControl->signalRbf = ui->optInRBF->isChecked();\n \n     for(int i = 0; i < ui->entries->count(); ++i)\n     {"
      },
      {
        "sha": "a25530d8bdbc99b3f6f945a4d791d7c904fb64c1",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0bf33da8357bd6aff100bbe5b84a7f01937e379/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0bf33da8357bd6aff100bbe5b84a7f01937e379/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=f0bf33da8357bd6aff100bbe5b84a7f01937e379",
        "patch": "@@ -165,7 +165,7 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n         nNewFee = totalFee;\n         nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n     } else {\n-        bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET);\n+        bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET, newTxReplaceable);\n         nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, ::feeEstimator, nullptr /* FeeCalculation */, ignoreGlobalPayTxFee, conservative_estimate);\n         nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n "
      },
      {
        "sha": "9a5f6b279194c694a4ffd0e1239c8826d72934af",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0bf33da8357bd6aff100bbe5b84a7f01937e379/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0bf33da8357bd6aff100bbe5b84a7f01937e379/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f0bf33da8357bd6aff100bbe5b84a7f01937e379",
        "patch": "@@ -2725,7 +2725,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                     currentConfirmationTarget = coinControl->nConfirmTarget;\n \n                 // Allow to override the default fee estimate mode over the CoinControl instance\n-                bool conservative_estimate = CalculateEstimateType(coinControl ? coinControl->m_fee_mode : FeeEstimateMode::UNSET);\n+                bool conservative_estimate = CalculateEstimateType(coinControl ? coinControl->m_fee_mode : FeeEstimateMode::UNSET, rbf);\n \n                 CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, ::mempool, ::feeEstimator, &feeCalc, false /* ignoreGlobalPayTxFee */, conservative_estimate);\n                 if (coinControl && coinControl->fOverrideFeeRate)\n@@ -4158,9 +4158,10 @@ bool CMerkleTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState&\n     return ::AcceptToMemoryPool(mempool, state, tx, true, NULL, NULL, false, nAbsurdFee);\n }\n \n-bool CalculateEstimateType(FeeEstimateMode mode) {\n+bool CalculateEstimateType(FeeEstimateMode mode, bool opt_in_rbf) {\n     switch (mode) {\n     case FeeEstimateMode::UNSET:\n+        return !opt_in_rbf; // Allow for lower fees if RBF is an option\n     case FeeEstimateMode::CONSERVATIVE:\n         return true;\n     case FeeEstimateMode::ECONOMICAL:"
      },
      {
        "sha": "e3715cdf376d356a4791ee53c6d6b84eafb1285c",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0bf33da8357bd6aff100bbe5b84a7f01937e379/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0bf33da8357bd6aff100bbe5b84a7f01937e379/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f0bf33da8357bd6aff100bbe5b84a7f01937e379",
        "patch": "@@ -1213,6 +1213,6 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins\n     return true;\n }\n \n-bool CalculateEstimateType(FeeEstimateMode mode);\n+bool CalculateEstimateType(FeeEstimateMode mode, bool opt_in_rbf);\n \n #endif // BITCOIN_WALLET_WALLET_H"
      }
    ]
  },
  {
    "sha": "301fd51b9e75efda2da3f6e4872c6cff876100ba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDFmZDUxYjllNzVlZmRhMmRhM2Y2ZTQ4NzJjNmNmZjg3NjEwMGJh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-07T07:41:25Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-07T07:41:31Z"
      },
      "message": "[tests] fix replace_by_fee.py\n\nfb915d5b183adb915c72bb11c6f3b418841e3512 changed the optIntoRbf field in\nfundrawtransaction to replaceable. This commit fixes up\nreplace-by-fee.py to use the new option name.",
      "tree": {
        "sha": "2f615a8692870bc38de98f1f1cde8b3561c4e51a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2f615a8692870bc38de98f1f1cde8b3561c4e51a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/301fd51b9e75efda2da3f6e4872c6cff876100ba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/301fd51b9e75efda2da3f6e4872c6cff876100ba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/301fd51b9e75efda2da3f6e4872c6cff876100ba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/301fd51b9e75efda2da3f6e4872c6cff876100ba/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5af6572534986bf85f6806e2cc66c1f1f8e3c56c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5af6572534986bf85f6806e2cc66c1f1f8e3c56c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5af6572534986bf85f6806e2cc66c1f1f8e3c56c"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "bc6765498750dc27df3a9b59e5a5a063777f1fbf",
        "filename": "test/functional/replace-by-fee.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/301fd51b9e75efda2da3f6e4872c6cff876100ba/test/functional/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/301fd51b9e75efda2da3f6e4872c6cff876100ba/test/functional/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/replace-by-fee.py?ref=301fd51b9e75efda2da3f6e4872c6cff876100ba",
        "patch": "@@ -531,8 +531,8 @@ def test_rpc(self):\n         assert_equal(json1[\"vin\"][0][\"sequence\"], 4294967295)\n \n         rawtx2 = self.nodes[0].createrawtransaction([], outs)\n-        frawtx2a = self.nodes[0].fundrawtransaction(rawtx2, {\"optIntoRbf\": True})\n-        frawtx2b = self.nodes[0].fundrawtransaction(rawtx2, {\"optIntoRbf\": False})\n+        frawtx2a = self.nodes[0].fundrawtransaction(rawtx2, {\"replaceable\": True})\n+        frawtx2b = self.nodes[0].fundrawtransaction(rawtx2, {\"replaceable\": False})\n \n         json0  = self.nodes[0].decoderawtransaction(frawtx2a['hex'])\n         json1  = self.nodes[0].decoderawtransaction(frawtx2b['hex'])"
      }
    ]
  },
  {
    "sha": "ed88e3194c4bc43aeafef929da7b419d03dea1ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDg4ZTMxOTRjNGJjNDNhZWFmZWY5MjlkYTdiNDE5ZDAzZGVhMWFk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-07-07T11:13:41Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-07-07T11:13:45Z"
      },
      "message": "Merge #10744: Use method name via __func__ macro\n\n9bbf600 Use method name from __func__ macro (darksh1ne)\n\nTree-SHA512: da6d0714f458b538189bbc2b53252ba353dcc1ef15fa780cb7f690a034b58ab0dbaa3a89f83f044c746241ee265a70fc092449f1cc7be4f190775423fbca5fc5",
      "tree": {
        "sha": "2374e6a5bcd4f8e19216dfbe99e0b37b22a9ac63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2374e6a5bcd4f8e19216dfbe99e0b37b22a9ac63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed88e3194c4bc43aeafef929da7b419d03dea1ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZX2zpAAoJENLqSFDnUoslYkoP/1l2yqeTEolMN7ckEvOh+fdV\nQCMHjivsSWSfYvtPGq4vE+UjNM/fcr0/2BR64yauziTL7Lny+JfS8PN9UbzVBrc6\nHD17HgMXN8VditRSuMB+s/IXVeNSvU8pN+qyGfJJvC1KPZYgHnpMJ/TE3BTnlOjp\nqULD3feYNLyQCTP7M39LQcjvLDEbh4R3W5XgnY4YqGF+HguOEItTUQThdrnnUGiu\n1LQ4agmmWwFNpSYDj94wHc26CaM3b6e/rojWfyID9zeQFNY3fT8ML/KEkwBvFw5K\nr+yoGAMK4dbH8zJzn91KXlQ3DfFFeIimW0O4Xsw1vLxIY5DFgTcrmv/f2jW9XZzv\nC6wTbZ13aOAHA6FkpUovV3MBbMNPSCl8+e8vtXxd8lyaw4Sl65i/cTmhPgc4w36M\nrtj8IS6d9DYt2ZpUXm5QxRWow+/MylI/SLE5ccuWX8Uv3+oR6o6o89cEFWAO+z8d\nWsW95qVmfkFLAEu7gTsjXNDgKFl8R7KnOIjtjG6W7DEfcHp4suSNk+Alj7x2OTt2\nAx8n+L1okNB8xgO0iRD1D9eZ1+1mIWnjZ291jfAuglSy+Iiyi8CZxz1lqhOHlDeO\nygjD0uNQzLXCC1iXcBa4eUEFuaxVCn1I1rWF8gKLDRlRSJ1nleNKD+gVlU3PGO8v\n0FHH83frhL86xwCtrAE/\n=lzrM\n-----END PGP SIGNATURE-----",
        "payload": "tree 2374e6a5bcd4f8e19216dfbe99e0b37b22a9ac63\nparent 5af6572534986bf85f6806e2cc66c1f1f8e3c56c\nparent 9bbf60047ea3300ebaffbe8cdc7c71e984418c20\nauthor MarcoFalke <falke.marco@gmail.com> 1499426021 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1499426025 +0200\n\nMerge #10744: Use method name via __func__ macro\n\n9bbf600 Use method name from __func__ macro (darksh1ne)\n\nTree-SHA512: da6d0714f458b538189bbc2b53252ba353dcc1ef15fa780cb7f690a034b58ab0dbaa3a89f83f044c746241ee265a70fc092449f1cc7be4f190775423fbca5fc5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed88e3194c4bc43aeafef929da7b419d03dea1ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed88e3194c4bc43aeafef929da7b419d03dea1ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed88e3194c4bc43aeafef929da7b419d03dea1ad/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5af6572534986bf85f6806e2cc66c1f1f8e3c56c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5af6572534986bf85f6806e2cc66c1f1f8e3c56c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5af6572534986bf85f6806e2cc66c1f1f8e3c56c"
      },
      {
        "sha": "9bbf60047ea3300ebaffbe8cdc7c71e984418c20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bbf60047ea3300ebaffbe8cdc7c71e984418c20",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bbf60047ea3300ebaffbe8cdc7c71e984418c20"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f5d9b33accb6e615011d4bdacc346b453ea860d7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed88e3194c4bc43aeafef929da7b419d03dea1ad/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed88e3194c4bc43aeafef929da7b419d03dea1ad/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ed88e3194c4bc43aeafef929da7b419d03dea1ad",
        "patch": "@@ -1718,7 +1718,7 @@ CAmount CWalletTx::GetAvailableCredit(bool fUseCache) const\n             const CTxOut &txout = tx->vout[i];\n             nCredit += pwallet->GetCredit(txout, ISMINE_SPENDABLE);\n             if (!MoneyRange(nCredit))\n-                throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n+                throw std::runtime_error(std::string(__func__) + \" : value out of range\");\n         }\n     }\n \n@@ -1761,7 +1761,7 @@ CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool& fUseCache) const\n             const CTxOut &txout = tx->vout[i];\n             nCredit += pwallet->GetCredit(txout, ISMINE_WATCH_ONLY);\n             if (!MoneyRange(nCredit))\n-                throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n+                throw std::runtime_error(std::string(__func__) + \": value out of range\");\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "d3b58704d1d325875fc605580c1c02b825c1bbcc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkM2I1ODcwNGQxZDMyNTg3NWZjNjA1NTgwYzFjMDJiODI1YzFiYmNj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-07-07T11:25:30Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-07-07T11:25:40Z"
      },
      "message": "Merge #10761: [tests] fix replace_by_fee.py\n\n301fd51 [tests] fix replace_by_fee.py (John Newbery)\n\nTree-SHA512: 716ae20ab1f0a5fcb38160cb3a03f83f950f3020e3ed1ad0acf94d7aff71d34ab13c57d2bff83d3afcad206d98e8d1617c1a6b58bae47e2ed28f1f247ca8187d",
      "tree": {
        "sha": "606a7346c20e5f76c34bfb8b8a3fee7ae4750159",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/606a7346c20e5f76c34bfb8b8a3fee7ae4750159"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3b58704d1d325875fc605580c1c02b825c1bbcc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZX2+0AAoJENLqSFDnUoslSQ0P/iaTsrSE3kkKV3MtQk6gva+m\nQmninfqhnV74ixpOC4j5MkIgPpC97F5ptdKysYU3YGPosuqUb9Qxq3MOGxn7nGcN\nydxQUL8At+HAKMIrm0vH0KM9Qumk4+O6wkf+MieHMVijdmm47BgeIFm1OLAOhWmP\nLkzrEvjZ3L04QlpKZfkcEgHv+YBvH3Bbyk+aot6Snnjo9Z2X2BYwu7owafADicou\nK7AkUd065+hE2/oFJrYKpp+NIAHIbqh1IylVPPrmoVhzZJXV3FACegqAnEtjKk0h\n9DvHxlv+aK+BpiHMNGNxq1SgV/xyarlBdQyWgbpJoBiM4X6SHmtxhRADSDDjWQbX\ncrpdH+r0Dq/t6HiPN3OCZKF6Yqh9uWT7vdPxmZOhaFeGKm/rllVdp+bMTq0zTiuI\nz4rELo2eIbt9oyYXgaDkatj0b5OKcxmOUI2JppHM54YvdTrqReJjUQMO+jrmE8wf\nV8jJ+9jy5SKX71JWgI4Kz4LoQBqJO237icGIuPErePcfzNEZE/4W/7iM/kJG/p/0\nCKT0zqFGoMhlZ1E7nR0d3+xuClhJ9Bg1R0x6X6YEZ1/xsNf+dx4GZ7sNUiwhHN4K\niZe4/8FSIH7YD/Y7Yw4pG5Z4o7i7Q2iTzUAK+UF6ETlN7FhESEBgGB3Iacl+5GHp\nsYhfV9IEOVvWjTYBiUfl\n=HYon\n-----END PGP SIGNATURE-----",
        "payload": "tree 606a7346c20e5f76c34bfb8b8a3fee7ae4750159\nparent ed88e3194c4bc43aeafef929da7b419d03dea1ad\nparent 301fd51b9e75efda2da3f6e4872c6cff876100ba\nauthor MarcoFalke <falke.marco@gmail.com> 1499426730 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1499426740 +0200\n\nMerge #10761: [tests] fix replace_by_fee.py\n\n301fd51 [tests] fix replace_by_fee.py (John Newbery)\n\nTree-SHA512: 716ae20ab1f0a5fcb38160cb3a03f83f950f3020e3ed1ad0acf94d7aff71d34ab13c57d2bff83d3afcad206d98e8d1617c1a6b58bae47e2ed28f1f247ca8187d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3b58704d1d325875fc605580c1c02b825c1bbcc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3b58704d1d325875fc605580c1c02b825c1bbcc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3b58704d1d325875fc605580c1c02b825c1bbcc/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed88e3194c4bc43aeafef929da7b419d03dea1ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed88e3194c4bc43aeafef929da7b419d03dea1ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed88e3194c4bc43aeafef929da7b419d03dea1ad"
      },
      {
        "sha": "301fd51b9e75efda2da3f6e4872c6cff876100ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/301fd51b9e75efda2da3f6e4872c6cff876100ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/301fd51b9e75efda2da3f6e4872c6cff876100ba"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "bc6765498750dc27df3a9b59e5a5a063777f1fbf",
        "filename": "test/functional/replace-by-fee.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3b58704d1d325875fc605580c1c02b825c1bbcc/test/functional/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3b58704d1d325875fc605580c1c02b825c1bbcc/test/functional/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/replace-by-fee.py?ref=d3b58704d1d325875fc605580c1c02b825c1bbcc",
        "patch": "@@ -531,8 +531,8 @@ def test_rpc(self):\n         assert_equal(json1[\"vin\"][0][\"sequence\"], 4294967295)\n \n         rawtx2 = self.nodes[0].createrawtransaction([], outs)\n-        frawtx2a = self.nodes[0].fundrawtransaction(rawtx2, {\"optIntoRbf\": True})\n-        frawtx2b = self.nodes[0].fundrawtransaction(rawtx2, {\"optIntoRbf\": False})\n+        frawtx2a = self.nodes[0].fundrawtransaction(rawtx2, {\"replaceable\": True})\n+        frawtx2b = self.nodes[0].fundrawtransaction(rawtx2, {\"replaceable\": False})\n \n         json0  = self.nodes[0].decoderawtransaction(frawtx2a['hex'])\n         json1  = self.nodes[0].decoderawtransaction(frawtx2b['hex'])"
      }
    ]
  },
  {
    "sha": "1d4805ce04645f3203b0cfd3d66ea710e7433eb4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDQ4MDVjZTA0NjQ1ZjMyMDNiMGNmZDNkNjZlYTcxMGU3NDMzZWI0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-07-07T11:28:44Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-07-07T11:28:47Z"
      },
      "message": "Merge #10759: Fix multi_rpc test for hosts that dont default to utf8\n\nbc7d103 Fix multi_rpc test for hosts that dont default to utf8 (Matt Corallo)\n\nTree-SHA512: 7644b1f50d4010a08aed5d1c87ab7326af9c109ac05dfbfc4bb6d5a19ace7997ef9cdd64d4301072f1106225de6d3aacccb17f53043b55ba61f5723c2b65af30",
      "tree": {
        "sha": "d4b2753c8867278c7e8703e8dfc6e9fa03fccf0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4b2753c8867278c7e8703e8dfc6e9fa03fccf0c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d4805ce04645f3203b0cfd3d66ea710e7433eb4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZX3BvAAoJENLqSFDnUosl8CAQALA0E8qaY9E8a2S/J57QSIwc\ntZyCRlwPxyR3GlVzWi0RT17mNjbvUWnONn8x9R4RO9VygFyTh0uk+TO1zWjiCMxW\nXwis+g1y/oSb3KZ4BmxPY0NLbk6HBdNIP0+P8c2b8ZQXqJT+3pBpfrjaL4qonPX5\nOswoDHeeuAA9fwWCMjqKFeKQawcl5C3J0XjeBeOlDZvrVpwXOJidMvflLWrn7rdX\noAIhAnRhIfC5AGkAvJNXkwBKrh0wLkK3Q6lheGxXDXAJmikFXsk3ee0CnHyrq3k3\nvdrBkK9W0YR5iYGdEMMoweXzGGhIhA7tcGauPbDKmnFiN5l8tA/19oYgAuILQJTi\nuL5HFCRlLTvri9v2fhKImCRPDymc2c1H39m9uYlrTE2AXcbCZkluPfia+EvDOH7w\nqMUJuibNO3+mpuxfdGA9zy/DT4OAotDYod8d7bgJnjqtaKXtSgWtjamPPMvIRz3/\nba5JQP/OSH1VSZgnk78wFzsWjepo4yXzjqZdLvosdiYf00hz5o9HbZ0kDAuQgEt7\nP/zOk4cfWfqxLa5DkPs54TlLUFSkz8TJM5mfvoRuBx6r3YNtu6Y0vSdvYMULTeXK\ncw/o0Pp7shh3gNfR67dlo5miV70VD4MztDQEqKigpFA7AJocGi6jr0a6+doBlIZD\nVzs9efruq+SEZi5wjcIC\n=aHIz\n-----END PGP SIGNATURE-----",
        "payload": "tree d4b2753c8867278c7e8703e8dfc6e9fa03fccf0c\nparent d3b58704d1d325875fc605580c1c02b825c1bbcc\nparent bc7d1032f8bcf7d5fc807ec0df6fe76410732d97\nauthor MarcoFalke <falke.marco@gmail.com> 1499426924 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1499426927 +0200\n\nMerge #10759: Fix multi_rpc test for hosts that dont default to utf8\n\nbc7d103 Fix multi_rpc test for hosts that dont default to utf8 (Matt Corallo)\n\nTree-SHA512: 7644b1f50d4010a08aed5d1c87ab7326af9c109ac05dfbfc4bb6d5a19ace7997ef9cdd64d4301072f1106225de6d3aacccb17f53043b55ba61f5723c2b65af30\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d4805ce04645f3203b0cfd3d66ea710e7433eb4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d4805ce04645f3203b0cfd3d66ea710e7433eb4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d4805ce04645f3203b0cfd3d66ea710e7433eb4/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d3b58704d1d325875fc605580c1c02b825c1bbcc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3b58704d1d325875fc605580c1c02b825c1bbcc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3b58704d1d325875fc605580c1c02b825c1bbcc"
      },
      {
        "sha": "bc7d1032f8bcf7d5fc807ec0df6fe76410732d97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc7d1032f8bcf7d5fc807ec0df6fe76410732d97",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc7d1032f8bcf7d5fc807ec0df6fe76410732d97"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "acca72aa86e177dc71809d5878e8f0302d93e3b2",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d4805ce04645f3203b0cfd3d66ea710e7433eb4/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d4805ce04645f3203b0cfd3d66ea710e7433eb4/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=1d4805ce04645f3203b0cfd3d66ea710e7433eb4",
        "patch": "@@ -236,7 +236,7 @@ def get_auth_cookie(datadir, n):\n     user = None\n     password = None\n     if os.path.isfile(os.path.join(datadir, \"bitcoin.conf\")):\n-        with open(os.path.join(datadir, \"bitcoin.conf\"), 'r') as f:\n+        with open(os.path.join(datadir, \"bitcoin.conf\"), 'r', encoding='utf8') as f:\n             for line in f:\n                 if line.startswith(\"rpcuser=\"):\n                     assert user is None  # Ensure that there is only one rpcuser line"
      }
    ]
  },
  {
    "sha": "cda1429d5bfee129a0d1f6f1c65962b30251bafb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZGExNDI5ZDViZmVlMTI5YTBkMWY2ZjFjNjU5NjJiMzAyNTFiYWZi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-19T21:49:22Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-07T15:33:18Z"
      },
      "message": "Give CMainSignals a reference to the global scheduler\n\n...so that it can run some signals in the background later",
      "tree": {
        "sha": "5625a6b2d9e5fd5cfe23c453ebbd6e1f34f362a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5625a6b2d9e5fd5cfe23c453ebbd6e1f34f362a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cda1429d5bfee129a0d1f6f1c65962b30251bafb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cda1429d5bfee129a0d1f6f1c65962b30251bafb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cda1429d5bfee129a0d1f6f1c65962b30251bafb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cda1429d5bfee129a0d1f6f1c65962b30251bafb/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a19fed9db558a5f666d965b6f602f7faf74ab73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a19fed9db558a5f666d965b6f602f7faf74ab73",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a19fed9db558a5f666d965b6f602f7faf74ab73"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 32,
      "deletions": 0
    },
    "files": [
      {
        "sha": "94bba6820e49763cb9e73d0e3722d963667621e4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cda1429d5bfee129a0d1f6f1c65962b30251bafb/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cda1429d5bfee129a0d1f6f1c65962b30251bafb/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=cda1429d5bfee129a0d1f6f1c65962b30251bafb",
        "patch": "@@ -251,6 +251,7 @@ void Shutdown()\n     }\n #endif\n     UnregisterAllValidationInterfaces();\n+    GetMainSignals().UnregisterBackgroundSignalScheduler();\n #ifdef ENABLE_WALLET\n     for (CWalletRef pwallet : vpwallets) {\n         delete pwallet;\n@@ -1203,6 +1204,8 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     CScheduler::Function serviceLoop = boost::bind(&CScheduler::serviceQueue, &scheduler);\n     threadGroup.create_thread(boost::bind(&TraceThread<CScheduler::Function>, \"scheduler\", serviceLoop));\n \n+    GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n+\n     /* Start the RPC server already.  It will be started in \"warmup\" mode\n      * and not really process calls already (but it will signify connections\n      * that the server is there and will be ready later).  Warmup mode will"
      },
      {
        "sha": "e6a8cc779dbf219282419423cdd28120c4067da4",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cda1429d5bfee129a0d1f6f1c65962b30251bafb/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cda1429d5bfee129a0d1f6f1c65962b30251bafb/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=cda1429d5bfee129a0d1f6f1c65962b30251bafb",
        "patch": "@@ -62,6 +62,12 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n         pathTemp = GetTempPath() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(InsecureRandRange(100000)));\n         fs::create_directories(pathTemp);\n         ForceSetArg(\"-datadir\", pathTemp.string());\n+\n+        // Note that because we don't bother running a scheduler thread here,\n+        // callbacks via CValidationInterface are unreliable, but that's OK,\n+        // our unit tests aren't testing multiple parts of the code at once.\n+        GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n+\n         mempool.setSanityCheck(1.0);\n         pblocktree = new CBlockTreeDB(1 << 20, true);\n         pcoinsdbview = new CCoinsViewDB(1 << 23, true);\n@@ -88,6 +94,7 @@ TestingSetup::~TestingSetup()\n         UnregisterNodeSignals(GetNodeSignals());\n         threadGroup.interrupt_all();\n         threadGroup.join_all();\n+        GetMainSignals().UnregisterBackgroundSignalScheduler();\n         UnloadBlockIndex();\n         delete pcoinsTip;\n         delete pcoinsdbview;"
      },
      {
        "sha": "dd3b13c8c8944d80e3ece2e3e9e57bd907c31bb7",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cda1429d5bfee129a0d1f6f1c65962b30251bafb/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cda1429d5bfee129a0d1f6f1c65962b30251bafb/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=cda1429d5bfee129a0d1f6f1c65962b30251bafb",
        "patch": "@@ -10,6 +10,7 @@\n #include \"key.h\"\n #include \"pubkey.h\"\n #include \"random.h\"\n+#include \"scheduler.h\"\n #include \"txdb.h\"\n #include \"txmempool.h\"\n \n@@ -53,6 +54,7 @@ struct TestingSetup: public BasicTestingSetup {\n     fs::path pathTemp;\n     boost::thread_group threadGroup;\n     CConnman* connman;\n+    CScheduler scheduler;\n \n     TestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n     ~TestingSetup();"
      },
      {
        "sha": "a17a08eee2ad88c87256986754fe8d7b34ee5029",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cda1429d5bfee129a0d1f6f1c65962b30251bafb/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cda1429d5bfee129a0d1f6f1c65962b30251bafb/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=cda1429d5bfee129a0d1f6f1c65962b30251bafb",
        "patch": "@@ -4,6 +4,8 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+#include \"init.h\"\n+#include \"scheduler.h\"\n \n #include <boost/signals2/signal.hpp>\n \n@@ -17,6 +19,8 @@ struct MainSignalsInstance {\n     boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n     boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+\n+    CScheduler *m_scheduler = NULL;\n };\n \n static CMainSignals g_signals;\n@@ -25,6 +29,15 @@ CMainSignals::CMainSignals() {\n     m_internals.reset(new MainSignalsInstance());\n }\n \n+void CMainSignals::RegisterBackgroundSignalScheduler(CScheduler& scheduler) {\n+    assert(!m_internals->m_scheduler);\n+    m_internals->m_scheduler = &scheduler;\n+}\n+\n+void CMainSignals::UnregisterBackgroundSignalScheduler() {\n+    m_internals->m_scheduler = NULL;\n+}\n+\n CMainSignals& GetMainSignals()\n {\n     return g_signals;"
      },
      {
        "sha": "8cae3c6db4e4a6bc275b8243b3b46490c0f4c267",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cda1429d5bfee129a0d1f6f1c65962b30251bafb/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cda1429d5bfee129a0d1f6f1c65962b30251bafb/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=cda1429d5bfee129a0d1f6f1c65962b30251bafb",
        "patch": "@@ -19,6 +19,7 @@ class CReserveScript;\n class CValidationInterface;\n class CValidationState;\n class uint256;\n+class CScheduler;\n \n // These functions dispatch to one or all registered wallets\n \n@@ -72,9 +73,15 @@ class CMainSignals {\n     friend void ::RegisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterAllValidationInterfaces();\n+\n public:\n     CMainSignals();\n \n+    /** Register a CScheduler to give callbacks which should run in the background (may only be called once) */\n+    void RegisterBackgroundSignalScheduler(CScheduler& scheduler);\n+    /** Unregister a CScheduler to give callbacks which should run in the background - these callbacks will now be dropped! */\n+    void UnregisterBackgroundSignalScheduler();\n+\n     void UpdatedBlockTip(const CBlockIndex *, const CBlockIndex *, bool fInitialDownload);\n     void TransactionAddedToMempool(const CTransactionRef &);\n     void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef> &);"
      }
    ]
  },
  {
    "sha": "2fbf2dbe151e135586cc1bb05b891f2c8ab6c817",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZmJmMmRiZTE1MWUxMzU1ODZjYzFiYjA1Yjg5MWYyYzhhYjZjODE3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-20T20:10:43Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-07T15:33:18Z"
      },
      "message": "Add default arg to CScheduler to schedule() a callback now",
      "tree": {
        "sha": "6e338cd312bd30b1da98951af48aa885bb922d07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e338cd312bd30b1da98951af48aa885bb922d07"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2fbf2dbe151e135586cc1bb05b891f2c8ab6c817",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fbf2dbe151e135586cc1bb05b891f2c8ab6c817",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2fbf2dbe151e135586cc1bb05b891f2c8ab6c817",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fbf2dbe151e135586cc1bb05b891f2c8ab6c817/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cda1429d5bfee129a0d1f6f1c65962b30251bafb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cda1429d5bfee129a0d1f6f1c65962b30251bafb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cda1429d5bfee129a0d1f6f1c65962b30251bafb"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5da6e6f69f15a7d888eb19f8e6fa100eb11cedc3",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fbf2dbe151e135586cc1bb05b891f2c8ab6c817/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fbf2dbe151e135586cc1bb05b891f2c8ab6c817/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=2fbf2dbe151e135586cc1bb05b891f2c8ab6c817",
        "patch": "@@ -41,7 +41,7 @@ class CScheduler\n     typedef std::function<void(void)> Function;\n \n     // Call func at/after time t\n-    void schedule(Function f, boost::chrono::system_clock::time_point t);\n+    void schedule(Function f, boost::chrono::system_clock::time_point t=boost::chrono::system_clock::now());\n \n     // Convenience method: call f once deltaSeconds from now\n     void scheduleFromNow(Function f, int64_t deltaMilliSeconds);"
      }
    ]
  },
  {
    "sha": "08096bbbc6d6fef86943ca8ce5e6de18744d58ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODA5NmJiYmM2ZDZmZWY4Njk0M2NhOGNlNWU2ZGUxODc0NGQ1OGVh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-10T18:55:49Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-07T15:33:18Z"
      },
      "message": "Support more than one CScheduler thread for serial clients\n\nThis will be used by CValidationInterface soon.\n\nThis requires a bit of work as we need to ensure that most of our\ncallbacks happen in-order (to avoid synchronization issues in\nwallet) - we keep our own internal queue and push things onto it,\nscheduling a queue-draining function immediately upon new\ncallbacks.",
      "tree": {
        "sha": "b1199ad23ceb259db07d8f3fb3b6dbe4c996fefa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1199ad23ceb259db07d8f3fb3b6dbe4c996fefa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08096bbbc6d6fef86943ca8ce5e6de18744d58ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08096bbbc6d6fef86943ca8ce5e6de18744d58ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08096bbbc6d6fef86943ca8ce5e6de18744d58ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08096bbbc6d6fef86943ca8ce5e6de18744d58ea/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2fbf2dbe151e135586cc1bb05b891f2c8ab6c817",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fbf2dbe151e135586cc1bb05b891f2c8ab6c817",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2fbf2dbe151e135586cc1bb05b891f2c8ab6c817"
      }
    ],
    "stats": {
      "total": 100,
      "additions": 90,
      "deletions": 10
    },
    "files": [
      {
        "sha": "a76a87e10a6bac85605653009bd108d656563460",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08096bbbc6d6fef86943ca8ce5e6de18744d58ea/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08096bbbc6d6fef86943ca8ce5e6de18744d58ea/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=08096bbbc6d6fef86943ca8ce5e6de18744d58ea",
        "patch": "@@ -139,3 +139,55 @@ size_t CScheduler::getQueueInfo(boost::chrono::system_clock::time_point &first,\n     }\n     return result;\n }\n+\n+\n+void SingleThreadedSchedulerClient::MaybeScheduleProcessQueue() {\n+    {\n+        LOCK(m_cs_callbacks_pending);\n+        // Try to avoid scheduling too many copies here, but if we\n+        // accidentally have two ProcessQueue's scheduled at once its\n+        // not a big deal.\n+        if (m_are_callbacks_running) return;\n+        if (m_callbacks_pending.empty()) return;\n+    }\n+    m_pscheduler->schedule(std::bind(&SingleThreadedSchedulerClient::ProcessQueue, this));\n+}\n+\n+void SingleThreadedSchedulerClient::ProcessQueue() {\n+    std::function<void (void)> callback;\n+    {\n+        LOCK(m_cs_callbacks_pending);\n+        if (m_are_callbacks_running) return;\n+        if (m_callbacks_pending.empty()) return;\n+        m_are_callbacks_running = true;\n+\n+        callback = std::move(m_callbacks_pending.front());\n+        m_callbacks_pending.pop_front();\n+    }\n+\n+    // RAII the setting of fCallbacksRunning and calling MaybeScheduleProcessQueue\n+    // to ensure both happen safely even if callback() throws.\n+    struct RAIICallbacksRunning {\n+        SingleThreadedSchedulerClient* instance;\n+        RAIICallbacksRunning(SingleThreadedSchedulerClient* _instance) : instance(_instance) {}\n+        ~RAIICallbacksRunning() {\n+            {\n+                LOCK(instance->m_cs_callbacks_pending);\n+                instance->m_are_callbacks_running = false;\n+            }\n+            instance->MaybeScheduleProcessQueue();\n+        }\n+    } raiicallbacksrunning(this);\n+\n+    callback();\n+}\n+\n+void SingleThreadedSchedulerClient::AddToProcessQueue(std::function<void (void)> func) {\n+    assert(m_pscheduler);\n+\n+    {\n+        LOCK(m_cs_callbacks_pending);\n+        m_callbacks_pending.emplace_back(std::move(func));\n+    }\n+    MaybeScheduleProcessQueue();\n+}"
      },
      {
        "sha": "82036afdf02225185d2510a66a0597eb11414313",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08096bbbc6d6fef86943ca8ce5e6de18744d58ea/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08096bbbc6d6fef86943ca8ce5e6de18744d58ea/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=08096bbbc6d6fef86943ca8ce5e6de18744d58ea",
        "patch": "@@ -14,6 +14,8 @@\n #include <boost/thread.hpp>\n #include <map>\n \n+#include \"sync.h\"\n+\n //\n // Simple class for background tasks that should be run\n // periodically or once \"after a while\"\n@@ -79,4 +81,26 @@ class CScheduler\n     bool shouldStop() { return stopRequested || (stopWhenEmpty && taskQueue.empty()); }\n };\n \n+/**\n+ * Class used by CScheduler clients which may schedule multiple jobs\n+ * which are required to be run serially. Does not require such jobs\n+ * to be executed on the same thread, but no two jobs will be executed\n+ * at the same time.\n+ */\n+class SingleThreadedSchedulerClient {\n+private:\n+    CScheduler *m_pscheduler;\n+\n+    CCriticalSection m_cs_callbacks_pending;\n+    std::list<std::function<void (void)>> m_callbacks_pending;\n+    bool m_are_callbacks_running = false;\n+\n+    void MaybeScheduleProcessQueue();\n+    void ProcessQueue();\n+\n+public:\n+    SingleThreadedSchedulerClient(CScheduler *pschedulerIn) : m_pscheduler(pschedulerIn) {}\n+    void AddToProcessQueue(std::function<void (void)> func);\n+};\n+\n #endif"
      },
      {
        "sha": "8edc7c398dae6b64bd90c9b176723ea67c54bb3a",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 8,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08096bbbc6d6fef86943ca8ce5e6de18744d58ea/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08096bbbc6d6fef86943ca8ce5e6de18744d58ea/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=08096bbbc6d6fef86943ca8ce5e6de18744d58ea",
        "patch": "@@ -6,6 +6,11 @@\n #include \"validationinterface.h\"\n #include \"init.h\"\n #include \"scheduler.h\"\n+#include \"sync.h\"\n+#include \"util.h\"\n+\n+#include <list>\n+#include <atomic>\n \n #include <boost/signals2/signal.hpp>\n \n@@ -20,22 +25,23 @@ struct MainSignalsInstance {\n     boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n-    CScheduler *m_scheduler = NULL;\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    SingleThreadedSchedulerClient m_schedulerClient;\n+\n+    MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n };\n \n static CMainSignals g_signals;\n \n-CMainSignals::CMainSignals() {\n-    m_internals.reset(new MainSignalsInstance());\n-}\n-\n void CMainSignals::RegisterBackgroundSignalScheduler(CScheduler& scheduler) {\n-    assert(!m_internals->m_scheduler);\n-    m_internals->m_scheduler = &scheduler;\n+    assert(!m_internals);\n+    m_internals.reset(new MainSignalsInstance(&scheduler));\n }\n \n void CMainSignals::UnregisterBackgroundSignalScheduler() {\n-    m_internals->m_scheduler = NULL;\n+    m_internals.reset(nullptr);\n }\n \n CMainSignals& GetMainSignals()"
      },
      {
        "sha": "fbfe273b10c8f59966e8f3f924959a980ce0a0dd",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08096bbbc6d6fef86943ca8ce5e6de18744d58ea/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08096bbbc6d6fef86943ca8ce5e6de18744d58ea/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=08096bbbc6d6fef86943ca8ce5e6de18744d58ea",
        "patch": "@@ -75,8 +75,6 @@ class CMainSignals {\n     friend void ::UnregisterAllValidationInterfaces();\n \n public:\n-    CMainSignals();\n-\n     /** Register a CScheduler to give callbacks which should run in the background (may only be called once) */\n     void RegisterBackgroundSignalScheduler(CScheduler& scheduler);\n     /** Unregister a CScheduler to give callbacks which should run in the background - these callbacks will now be dropped! */"
      }
    ]
  },
  {
    "sha": "3192975f1d177aa9f0bbd823c6387cfbfa943610",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTkyOTc1ZjFkMTc3YWE5ZjBiYmQ4MjNjNjM4N2NmYmZhOTQzNjEw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-06-27T23:07:52Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-07T16:55:57Z"
      },
      "message": "Flush CValidationInterface callbacks prior to destruction\n\nNote that the CScheduler thread cant be running at this point,\nit has already been stopped with the rest of the init threadgroup.\nThus, just calling any remaining loose callbacks during Shutdown()\nis sane.",
      "tree": {
        "sha": "c14016ecb6fc50d7fc33b002368348efa8e12745",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c14016ecb6fc50d7fc33b002368348efa8e12745"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3192975f1d177aa9f0bbd823c6387cfbfa943610",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3192975f1d177aa9f0bbd823c6387cfbfa943610",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3192975f1d177aa9f0bbd823c6387cfbfa943610",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3192975f1d177aa9f0bbd823c6387cfbfa943610/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "08096bbbc6d6fef86943ca8ce5e6de18744d58ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08096bbbc6d6fef86943ca8ce5e6de18744d58ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08096bbbc6d6fef86943ca8ce5e6de18744d58ea"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 32,
      "deletions": 0
    },
    "files": [
      {
        "sha": "12f29a4ca877f05bf6a0c63fd28823f62deff576",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3192975f1d177aa9f0bbd823c6387cfbfa943610/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3192975f1d177aa9f0bbd823c6387cfbfa943610/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3192975f1d177aa9f0bbd823c6387cfbfa943610",
        "patch": "@@ -215,6 +215,19 @@ void Shutdown()\n         fFeeEstimatesInitialized = false;\n     }\n \n+    // FlushStateToDisk generates a SetBestChain callback, which we should avoid missing\n+    FlushStateToDisk();\n+\n+    // After there are no more peers/RPC left to give us new data which may generate\n+    // CValidationInterface callbacks, flush them...\n+    GetMainSignals().FlushBackgroundCallbacks();\n+\n+    // Any future callbacks will be dropped. This should absolutely be safe - if\n+    // missing a callback results in an unrecoverable situation, unclean shutdown\n+    // would too. The only reason to do the above flushes is to let the wallet catch\n+    // up with our current chain to avoid any strange pruning edge cases and make\n+    // next startup faster by avoiding rescan.\n+\n     {\n         LOCK(cs_main);\n         if (pcoinsTip != NULL) {"
      },
      {
        "sha": "35bf0da4becac8282f0b890a774fce43bbf822fc",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3192975f1d177aa9f0bbd823c6387cfbfa943610/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3192975f1d177aa9f0bbd823c6387cfbfa943610/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=3192975f1d177aa9f0bbd823c6387cfbfa943610",
        "patch": "@@ -191,3 +191,12 @@ void SingleThreadedSchedulerClient::AddToProcessQueue(std::function<void (void)>\n     }\n     MaybeScheduleProcessQueue();\n }\n+\n+void SingleThreadedSchedulerClient::EmptyQueue() {\n+    bool should_continue = true;\n+    while (should_continue) {\n+        ProcessQueue();\n+        LOCK(m_cs_callbacks_pending);\n+        should_continue = !m_callbacks_pending.empty();\n+    }\n+}"
      },
      {
        "sha": "6a079f7749e8d31daf282469cff446f116d0b1a6",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3192975f1d177aa9f0bbd823c6387cfbfa943610/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3192975f1d177aa9f0bbd823c6387cfbfa943610/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=3192975f1d177aa9f0bbd823c6387cfbfa943610",
        "patch": "@@ -101,6 +101,9 @@ class SingleThreadedSchedulerClient {\n public:\n     SingleThreadedSchedulerClient(CScheduler *pschedulerIn) : m_pscheduler(pschedulerIn) {}\n     void AddToProcessQueue(std::function<void (void)> func);\n+\n+    // Processes all remaining queue members on the calling thread, blocking until queue is empty\n+    void EmptyQueue();\n };\n \n #endif"
      },
      {
        "sha": "3ba81ed17b5e7ed53582aff9df7e8e3eb981844d",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3192975f1d177aa9f0bbd823c6387cfbfa943610/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3192975f1d177aa9f0bbd823c6387cfbfa943610/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=3192975f1d177aa9f0bbd823c6387cfbfa943610",
        "patch": "@@ -94,6 +94,7 @@ TestingSetup::~TestingSetup()\n         UnregisterNodeSignals(GetNodeSignals());\n         threadGroup.interrupt_all();\n         threadGroup.join_all();\n+        GetMainSignals().FlushBackgroundCallbacks();\n         GetMainSignals().UnregisterBackgroundSignalScheduler();\n         UnloadBlockIndex();\n         delete pcoinsTip;"
      },
      {
        "sha": "bf20d606f833bf033df5787f210b606b8209dae2",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3192975f1d177aa9f0bbd823c6387cfbfa943610/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3192975f1d177aa9f0bbd823c6387cfbfa943610/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=3192975f1d177aa9f0bbd823c6387cfbfa943610",
        "patch": "@@ -44,6 +44,10 @@ void CMainSignals::UnregisterBackgroundSignalScheduler() {\n     m_internals.reset(nullptr);\n }\n \n+void CMainSignals::FlushBackgroundCallbacks() {\n+    m_internals->m_schedulerClient.EmptyQueue();\n+}\n+\n CMainSignals& GetMainSignals()\n {\n     return g_signals;"
      },
      {
        "sha": "568da66df283c002c17b2ab8c46608c76980e9d5",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3192975f1d177aa9f0bbd823c6387cfbfa943610/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3192975f1d177aa9f0bbd823c6387cfbfa943610/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=3192975f1d177aa9f0bbd823c6387cfbfa943610",
        "patch": "@@ -79,6 +79,8 @@ class CMainSignals {\n     void RegisterBackgroundSignalScheduler(CScheduler& scheduler);\n     /** Unregister a CScheduler to give callbacks which should run in the background - these callbacks will now be dropped! */\n     void UnregisterBackgroundSignalScheduler();\n+    /** Call any remaining callbacks on the calling thread */\n+    void FlushBackgroundCallbacks();\n \n     void UpdatedBlockTip(const CBlockIndex *, const CBlockIndex *, bool fInitialDownload);\n     void TransactionAddedToMempool(const CTransactionRef &);"
      }
    ]
  },
  {
    "sha": "0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYWFkYzExZmQ4OGIyOThjN2FmMmRmYjY5NzYzYjJjNjdkYzZiN2Iw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-07T07:54:42Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-07T17:45:31Z"
      },
      "message": "Avoid dereference-of-casted-pointer",
      "tree": {
        "sha": "02bb833749f472a916c9ff5f585af9e94b5326b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/02bb833749f472a916c9ff5f585af9e94b5326b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5af6572534986bf85f6806e2cc66c1f1f8e3c56c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5af6572534986bf85f6806e2cc66c1f1f8e3c56c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5af6572534986bf85f6806e2cc66c1f1f8e3c56c"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 26,
      "deletions": 18
    },
    "files": [
      {
        "sha": "f038e7b15487471566295dce78d24a6f903c83ab",
        "filename": "src/core_memusage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/core_memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/core_memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_memusage.h?ref=0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0",
        "patch": "@@ -10,7 +10,7 @@\n #include \"memusage.h\"\n \n static inline size_t RecursiveDynamicUsage(const CScript& script) {\n-    return memusage::DynamicUsage(*static_cast<const CScriptBase*>(&script));\n+    return memusage::DynamicUsage(script);\n }\n \n static inline size_t RecursiveDynamicUsage(const COutPoint& out) {"
      },
      {
        "sha": "f1b5e59373aeb58c8c3acb8e288c8c9830b7a220",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0",
        "patch": "@@ -107,7 +107,7 @@ class CTxIn\n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(prevout);\n-        READWRITE(*(CScriptBase*)(&scriptSig));\n+        READWRITE(scriptSig);\n         READWRITE(nSequence);\n     }\n \n@@ -147,7 +147,7 @@ class CTxOut\n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(nValue);\n-        READWRITE(*(CScriptBase*)(&scriptPubKey));\n+        READWRITE(scriptPubKey);\n     }\n \n     void SetNull()"
      },
      {
        "sha": "6178a1c7ab1c44447f4e8f90e7e09918b8affe86",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0",
        "patch": "@@ -798,7 +798,7 @@ static void ApplyStats(CCoinsStats &stats, CHashWriter& ss, const uint256& hash,\n     stats.nTransactions++;\n     for (const auto output : outputs) {\n         ss << VARINT(output.first + 1);\n-        ss << *(const CScriptBase*)(&output.second.out.scriptPubKey);\n+        ss << output.second.out.scriptPubKey;\n         ss << VARINT(output.second.out.nValue);\n         stats.nTransactionOutputs++;\n         stats.nTotalAmount += output.second.out.nValue;"
      },
      {
        "sha": "8a121774a040e7ef3a2359c805e4e0fd3513a3fd",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0",
        "patch": "@@ -1099,7 +1099,7 @@ class CTransactionSignatureSerializer {\n         // Serialize the script\n         if (nInput != nIn)\n             // Blank out other inputs' signatures\n-            ::Serialize(s, CScriptBase());\n+            ::Serialize(s, CScript());\n         else\n             SerializeScriptCode(s);\n         // Serialize the nSequence\n@@ -1207,7 +1207,7 @@ uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsig\n         // The prevout may already be contained in hashPrevout, and the nSequence\n         // may already be contain in hashSequence.\n         ss << txTo.vin[nIn].prevout;\n-        ss << static_cast<const CScriptBase&>(scriptCode);\n+        ss << scriptCode;\n         ss << amount;\n         ss << txTo.vin[nIn].nSequence;\n         // Outputs (none/one/all, depending on flags)"
      },
      {
        "sha": "d16bfd0e00eaa8868e299d728f72f68ef649f936",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0",
        "patch": "@@ -8,6 +8,7 @@\n \n #include \"crypto/common.h\"\n #include \"prevector.h\"\n+#include \"serialize.h\"\n \n #include <assert.h>\n #include <climits>\n@@ -404,6 +405,13 @@ class CScript : public CScriptBase\n     CScript(std::vector<unsigned char>::const_iterator pbegin, std::vector<unsigned char>::const_iterator pend) : CScriptBase(pbegin, pend) { }\n     CScript(const unsigned char* pbegin, const unsigned char* pend) : CScriptBase(pbegin, pend) { }\n \n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(static_cast<CScriptBase&>(*this));\n+    }\n+\n     CScript& operator+=(const CScript& b)\n     {\n         insert(end(), b.begin(), b.end());"
      },
      {
        "sha": "093509e61c563cf98223869d4442f117fa6e907f",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0",
        "patch": "@@ -95,7 +95,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n         uint256 in2 = InsecureRand256();\n         BOOST_CHECK(dbw.Write(key2, in2));\n \n-        std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper*>(&dbw)->NewIterator());\n+        std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper&>(dbw).NewIterator());\n \n         // Be sure to seek past the obfuscation key (if it exists)\n         it->Seek(key);\n@@ -210,7 +210,7 @@ BOOST_AUTO_TEST_CASE(iterator_ordering)\n         BOOST_CHECK(dbw.Write(key, value));\n     }\n \n-    std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper*>(&dbw)->NewIterator());\n+    std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper&>(dbw).NewIterator());\n     for (int c=0; c<2; ++c) {\n         int seek_start;\n         if (c == 0)\n@@ -286,7 +286,7 @@ BOOST_AUTO_TEST_CASE(iterator_string_ordering)\n         }\n     }\n \n-    std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper*>(&dbw)->NewIterator());\n+    std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper&>(dbw).NewIterator());\n     for (int c=0; c<2; ++c) {\n         int seek_start;\n         if (c == 0)"
      },
      {
        "sha": "aa0b73a41748badb54dd84c8d795681909864924",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0",
        "patch": "@@ -172,7 +172,7 @@ bool CBlockTreeDB::ReadLastBlockFile(int &nFile) {\n \n CCoinsViewCursor *CCoinsViewDB::Cursor() const\n {\n-    CCoinsViewDBCursor *i = new CCoinsViewDBCursor(const_cast<CDBWrapper*>(&db)->NewIterator(), GetBestBlock());\n+    CCoinsViewDBCursor *i = new CCoinsViewDBCursor(const_cast<CDBWrapper&>(db).NewIterator(), GetBestBlock());\n     /* It seems that there are no \"const iterators\" for LevelDB.  Since we\n        only need read operations on it, use a const-cast to get around\n        that restriction.  */"
      },
      {
        "sha": "d2072f6e79580263f81ecf47b0860513a3806a8c",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0",
        "patch": "@@ -94,23 +94,23 @@ bool CWalletDB::WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey)\n \n bool CWalletDB::WriteCScript(const uint160& hash, const CScript& redeemScript)\n {\n-    return WriteIC(std::make_pair(std::string(\"cscript\"), hash), *(const CScriptBase*)(&redeemScript), false);\n+    return WriteIC(std::make_pair(std::string(\"cscript\"), hash), redeemScript, false);\n }\n \n bool CWalletDB::WriteWatchOnly(const CScript &dest, const CKeyMetadata& keyMeta)\n {\n-    if (!WriteIC(std::make_pair(std::string(\"watchmeta\"), *(const CScriptBase*)(&dest)), keyMeta)) {\n+    if (!WriteIC(std::make_pair(std::string(\"watchmeta\"), dest), keyMeta)) {\n         return false;\n     }\n-    return WriteIC(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)), '1');\n+    return WriteIC(std::make_pair(std::string(\"watchs\"), dest), '1');\n }\n \n bool CWalletDB::EraseWatchOnly(const CScript &dest)\n {\n-    if (!EraseIC(std::make_pair(std::string(\"watchmeta\"), *(const CScriptBase*)(&dest)))) {\n+    if (!EraseIC(std::make_pair(std::string(\"watchmeta\"), dest))) {\n         return false;\n     }\n-    return EraseIC(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)));\n+    return EraseIC(std::make_pair(std::string(\"watchs\"), dest));\n }\n \n bool CWalletDB::WriteBestBlock(const CBlockLocator& locator)\n@@ -323,7 +323,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         {\n             wss.nWatchKeys++;\n             CScript script;\n-            ssKey >> *(CScriptBase*)(&script);\n+            ssKey >> script;\n             char fYes;\n             ssValue >> fYes;\n             if (fYes == '1')\n@@ -440,7 +440,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             else if (strType == \"watchmeta\")\n             {\n               CScript script;\n-              ssKey >> *(CScriptBase*)(&script);\n+              ssKey >> script;\n               keyID = CScriptID(script);\n             }\n \n@@ -474,7 +474,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             uint160 hash;\n             ssKey >> hash;\n             CScript script;\n-            ssValue >> *(CScriptBase*)(&script);\n+            ssValue >> script;\n             if (!pwallet->LoadCScript(script))\n             {\n                 strErr = \"Error reading wallet database: LoadCScript failed\";"
      }
    ]
  },
  {
    "sha": "5618b7d1ad3f2a258d46cf67b732ffddd3f34cb6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NjE4YjdkMWFkM2YyYTI1OGQ0NmNmNjdiNzMyZmZkZGQzZjM0Y2I2",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2017-07-04T08:08:43Z"
      },
      "committer": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2017-07-08T07:30:35Z"
      },
      "message": "Do not shadow upper local variable `state`.",
      "tree": {
        "sha": "0e059da8c78c2bcd6c89b1b9d99f2816fb0534bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e059da8c78c2bcd6c89b1b9d99f2816fb0534bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5618b7d1ad3f2a258d46cf67b732ffddd3f34cb6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5618b7d1ad3f2a258d46cf67b732ffddd3f34cb6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5618b7d1ad3f2a258d46cf67b732ffddd3f34cb6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5618b7d1ad3f2a258d46cf67b732ffddd3f34cb6/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d4805ce04645f3203b0cfd3d66ea710e7433eb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d4805ce04645f3203b0cfd3d66ea710e7433eb4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d4805ce04645f3203b0cfd3d66ea710e7433eb4"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f609cb1af4e0f046189f675cde02c715e6d2787b",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5618b7d1ad3f2a258d46cf67b732ffddd3f34cb6/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5618b7d1ad3f2a258d46cf67b732ffddd3f34cb6/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=5618b7d1ad3f2a258d46cf67b732ffddd3f34cb6",
        "patch": "@@ -196,8 +196,8 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n     // Test that invalidity under a set of flags doesn't preclude validity\n     // under other (eg consensus) flags.\n     // spend_tx is invalid according to DERSIG\n-    CValidationState state;\n     {\n+        CValidationState state;\n         PrecomputedTransactionData ptd_spend_tx(spend_tx);\n \n         BOOST_CHECK(!CheckInputs(spend_tx, state, pcoinsTip, true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_DERSIG, true, true, ptd_spend_tx, nullptr));"
      }
    ]
  },
  {
    "sha": "e0451e3e2af64cc975dd76389dc3ea4f8b9c2a62",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDQ1MWUzZTJhZjY0Y2M5NzVkZDc2Mzg5ZGMzZWE0ZjhiOWMyYTYy",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-02-19T18:18:04Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-07-08T20:31:47Z"
      },
      "message": "Fix subscript[0] bug in net.cpp if GetGroup returns a 0-sized vector",
      "tree": {
        "sha": "cc4517d114d57436167929e05804f6548a87fb52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc4517d114d57436167929e05804f6548a87fb52"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0451e3e2af64cc975dd76389dc3ea4f8b9c2a62",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0451e3e2af64cc975dd76389dc3ea4f8b9c2a62",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0451e3e2af64cc975dd76389dc3ea4f8b9c2a62",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0451e3e2af64cc975dd76389dc3ea4f8b9c2a62/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d4805ce04645f3203b0cfd3d66ea710e7433eb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d4805ce04645f3203b0cfd3d66ea710e7433eb4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d4805ce04645f3203b0cfd3d66ea710e7433eb4"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5bf3af7ea3755cb423d7ad37cd13b3b0de3cc09d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0451e3e2af64cc975dd76389dc3ea4f8b9c2a62/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0451e3e2af64cc975dd76389dc3ea4f8b9c2a62/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=e0451e3e2af64cc975dd76389dc3ea4f8b9c2a62",
        "patch": "@@ -2876,5 +2876,5 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n {\n     std::vector<unsigned char> vchNetGroup(ad.GetGroup());\n \n-    return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(&vchNetGroup[0], vchNetGroup.size()).Finalize();\n+    return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }"
      }
    ]
  },
  {
    "sha": "500710bd291e0b9f269ef20677a4a849fb76fc06",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDA3MTBiZDI5MWUwYjlmMjY5ZWYyMDY3N2E0YTg0OWZiNzZmYzA2",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-02-19T18:27:10Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-07-08T20:31:47Z"
      },
      "message": "Fix 2 subscript[0] bugs in pubkey.cpp, and eliminate one extra size check",
      "tree": {
        "sha": "08d3fc711f6852fbbec03b97d544a74fc329dd06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08d3fc711f6852fbbec03b97d544a74fc329dd06"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/500710bd291e0b9f269ef20677a4a849fb76fc06",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/500710bd291e0b9f269ef20677a4a849fb76fc06",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/500710bd291e0b9f269ef20677a4a849fb76fc06",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/500710bd291e0b9f269ef20677a4a849fb76fc06/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0451e3e2af64cc975dd76389dc3ea4f8b9c2a62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0451e3e2af64cc975dd76389dc3ea4f8b9c2a62",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0451e3e2af64cc975dd76389dc3ea4f8b9c2a62"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 2,
      "deletions": 5
    },
    "files": [
      {
        "sha": "91af4e56f2d63e22d971134e89947b420440e9d6",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/500710bd291e0b9f269ef20677a4a849fb76fc06/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/500710bd291e0b9f269ef20677a4a849fb76fc06/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=500710bd291e0b9f269ef20677a4a849fb76fc06",
        "patch": "@@ -172,10 +172,7 @@ bool CPubKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchS\n     if (!secp256k1_ec_pubkey_parse(secp256k1_context_verify, &pubkey, &(*this)[0], size())) {\n         return false;\n     }\n-    if (vchSig.size() == 0) {\n-        return false;\n-    }\n-    if (!ecdsa_signature_parse_der_lax(secp256k1_context_verify, &sig, &vchSig[0], vchSig.size())) {\n+    if (!ecdsa_signature_parse_der_lax(secp256k1_context_verify, &sig, vchSig.data(), vchSig.size())) {\n         return false;\n     }\n     /* libsecp256k1's ECDSA verification requires lower-S signatures, which have\n@@ -274,7 +271,7 @@ bool CExtPubKey::Derive(CExtPubKey &out, unsigned int _nChild) const {\n \n /* static */ bool CPubKey::CheckLowS(const std::vector<unsigned char>& vchSig) {\n     secp256k1_ecdsa_signature sig;\n-    if (!ecdsa_signature_parse_der_lax(secp256k1_context_verify, &sig, &vchSig[0], vchSig.size())) {\n+    if (!ecdsa_signature_parse_der_lax(secp256k1_context_verify, &sig, vchSig.data(), vchSig.size())) {\n         return false;\n     }\n     return (!secp256k1_ecdsa_signature_normalize(secp256k1_context_verify, NULL, &sig));"
      }
    ]
  },
  {
    "sha": "96f2119e6c391617f0c7f27ce5af44604a7af937",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NmYyMTE5ZTZjMzkxNjE3ZjBjN2YyN2NlNWFmNDQ2MDRhN2FmOTM3",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-02-19T17:39:51Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-07-08T20:33:01Z"
      },
      "message": "Fix subscript[0] in compressor.cpp",
      "tree": {
        "sha": "6dece987bda0103dd3949e7cc45c908eca76d366",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6dece987bda0103dd3949e7cc45c908eca76d366"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96f2119e6c391617f0c7f27ce5af44604a7af937",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96f2119e6c391617f0c7f27ce5af44604a7af937",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/96f2119e6c391617f0c7f27ce5af44604a7af937",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96f2119e6c391617f0c7f27ce5af44604a7af937/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "500710bd291e0b9f269ef20677a4a849fb76fc06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/500710bd291e0b9f269ef20677a4a849fb76fc06",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/500710bd291e0b9f269ef20677a4a849fb76fc06"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "f4c12f38d2d1fc7494669adbc3c3191978743db0",
        "filename": "src/compressor.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96f2119e6c391617f0c7f27ce5af44604a7af937/src/compressor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96f2119e6c391617f0c7f27ce5af44604a7af937/src/compressor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.cpp?ref=96f2119e6c391617f0c7f27ce5af44604a7af937",
        "patch": "@@ -93,30 +93,30 @@ bool CScriptCompressor::Decompress(unsigned int nSize, const std::vector<unsigne\n         script[0] = OP_DUP;\n         script[1] = OP_HASH160;\n         script[2] = 20;\n-        memcpy(&script[3], &in[0], 20);\n+        memcpy(&script[3], in.data(), 20);\n         script[23] = OP_EQUALVERIFY;\n         script[24] = OP_CHECKSIG;\n         return true;\n     case 0x01:\n         script.resize(23);\n         script[0] = OP_HASH160;\n         script[1] = 20;\n-        memcpy(&script[2], &in[0], 20);\n+        memcpy(&script[2], in.data(), 20);\n         script[22] = OP_EQUAL;\n         return true;\n     case 0x02:\n     case 0x03:\n         script.resize(35);\n         script[0] = 33;\n         script[1] = nSize;\n-        memcpy(&script[2], &in[0], 32);\n+        memcpy(&script[2], in.data(), 32);\n         script[34] = OP_CHECKSIG;\n         return true;\n     case 0x04:\n     case 0x05:\n         unsigned char vch[33] = {};\n         vch[0] = nSize - 2;\n-        memcpy(&vch[1], &in[0], 32);\n+        memcpy(&vch[1], in.data(), 32);\n         CPubKey pubkey(&vch[0], &vch[33]);\n         if (!pubkey.Decompress())\n             return false;"
      }
    ]
  },
  {
    "sha": "6896dbf16996402cc9820e345605716a3dc60482",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODk2ZGJmMTY5OTY0MDJjYzk4MjBlMzQ1NjA1NzE2YTNkYzYwNDgy",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-02-19T18:11:44Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-07-08T20:33:01Z"
      },
      "message": "Cleanup (safe, it was checked) subscript[0] in MurmurHash3 (and cleanup MurmurHash3 to be more clear).",
      "tree": {
        "sha": "753e7fd85d98f59024dc3059e5eb3ed0d48724d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/753e7fd85d98f59024dc3059e5eb3ed0d48724d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6896dbf16996402cc9820e345605716a3dc60482",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6896dbf16996402cc9820e345605716a3dc60482",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6896dbf16996402cc9820e345605716a3dc60482",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6896dbf16996402cc9820e345605716a3dc60482/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "96f2119e6c391617f0c7f27ce5af44604a7af937",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96f2119e6c391617f0c7f27ce5af44604a7af937",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96f2119e6c391617f0c7f27ce5af44604a7af937"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 20,
      "deletions": 23
    },
    "files": [
      {
        "sha": "5a15600be55e82dc595f3fee61e398431a4c219e",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 23,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6896dbf16996402cc9820e345605716a3dc60482/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6896dbf16996402cc9820e345605716a3dc60482/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=6896dbf16996402cc9820e345605716a3dc60482",
        "patch": "@@ -17,36 +17,34 @@ unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char\n {\n     // The following is MurmurHash3 (x86_32), see http://code.google.com/p/smhasher/source/browse/trunk/MurmurHash3.cpp\n     uint32_t h1 = nHashSeed;\n-    if (vDataToHash.size() > 0)\n-    {\n-        const uint32_t c1 = 0xcc9e2d51;\n-        const uint32_t c2 = 0x1b873593;\n+    const uint32_t c1 = 0xcc9e2d51;\n+    const uint32_t c2 = 0x1b873593;\n \n-        const int nblocks = vDataToHash.size() / 4;\n+    const int nblocks = vDataToHash.size() / 4;\n \n-        //----------\n-        // body\n-        const uint8_t* blocks = &vDataToHash[0] + nblocks * 4;\n+    //----------\n+    // body\n+    const uint8_t* blocks = vDataToHash.data();\n \n-        for (int i = -nblocks; i; i++) {\n-            uint32_t k1 = ReadLE32(blocks + i*4);\n+    for (int i = 0; i < nblocks; ++i) {\n+        uint32_t k1 = ReadLE32(blocks + i*4);\n \n-            k1 *= c1;\n-            k1 = ROTL32(k1, 15);\n-            k1 *= c2;\n+        k1 *= c1;\n+        k1 = ROTL32(k1, 15);\n+        k1 *= c2;\n \n-            h1 ^= k1;\n-            h1 = ROTL32(h1, 13);\n-            h1 = h1 * 5 + 0xe6546b64;\n-        }\n+        h1 ^= k1;\n+        h1 = ROTL32(h1, 13);\n+        h1 = h1 * 5 + 0xe6546b64;\n+    }\n \n-        //----------\n-        // tail\n-        const uint8_t* tail = (const uint8_t*)(&vDataToHash[0] + nblocks * 4);\n+    //----------\n+    // tail\n+    const uint8_t* tail = vDataToHash.data() + nblocks * 4;\n \n-        uint32_t k1 = 0;\n+    uint32_t k1 = 0;\n \n-        switch (vDataToHash.size() & 3) {\n+    switch (vDataToHash.size() & 3) {\n         case 3:\n             k1 ^= tail[2] << 16;\n         case 2:\n@@ -57,7 +55,6 @@ unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char\n             k1 = ROTL32(k1, 15);\n             k1 *= c2;\n             h1 ^= k1;\n-        }\n     }\n \n     //----------"
      }
    ]
  },
  {
    "sha": "361d95265a78c9bcdfbb70c4c0e5b43ff2d8adc3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjFkOTUyNjVhNzhjOWJjZGZiYjcwYzRjMGU1YjQzZmYyZDhhZGMz",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-02-19T18:41:13Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-07-08T20:33:01Z"
      },
      "message": "Fix subscript[0] in base58.cpp",
      "tree": {
        "sha": "3e546a9992ce8c2b1a1a21a4c8e016787bc74ae7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e546a9992ce8c2b1a1a21a4c8e016787bc74ae7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/361d95265a78c9bcdfbb70c4c0e5b43ff2d8adc3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/361d95265a78c9bcdfbb70c4c0e5b43ff2d8adc3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/361d95265a78c9bcdfbb70c4c0e5b43ff2d8adc3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/361d95265a78c9bcdfbb70c4c0e5b43ff2d8adc3/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6896dbf16996402cc9820e345605716a3dc60482",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6896dbf16996402cc9820e345605716a3dc60482",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6896dbf16996402cc9820e345605716a3dc60482"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "17022a6bc161f084e4672882ce4f6e1060fe3d61",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/361d95265a78c9bcdfbb70c4c0e5b43ff2d8adc3/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/361d95265a78c9bcdfbb70c4c0e5b43ff2d8adc3/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=361d95265a78c9bcdfbb70c4c0e5b43ff2d8adc3",
        "patch": "@@ -110,7 +110,7 @@ std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)\n \n std::string EncodeBase58(const std::vector<unsigned char>& vch)\n {\n-    return EncodeBase58(&vch[0], &vch[0] + vch.size());\n+    return EncodeBase58(vch.data(), vch.data() + vch.size());\n }\n \n bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet)\n@@ -160,7 +160,7 @@ void CBase58Data::SetData(const std::vector<unsigned char>& vchVersionIn, const\n     vchVersion = vchVersionIn;\n     vchData.resize(nSize);\n     if (!vchData.empty())\n-        memcpy(&vchData[0], pdata, nSize);\n+        memcpy(vchData.data(), pdata, nSize);\n }\n \n void CBase58Data::SetData(const std::vector<unsigned char>& vchVersionIn, const unsigned char* pbegin, const unsigned char* pend)\n@@ -180,8 +180,8 @@ bool CBase58Data::SetString(const char* psz, unsigned int nVersionBytes)\n     vchVersion.assign(vchTemp.begin(), vchTemp.begin() + nVersionBytes);\n     vchData.resize(vchTemp.size() - nVersionBytes);\n     if (!vchData.empty())\n-        memcpy(&vchData[0], &vchTemp[nVersionBytes], vchData.size());\n-    memory_cleanse(&vchTemp[0], vchTemp.size());\n+        memcpy(vchData.data(), vchTemp.data() + nVersionBytes, vchData.size());\n+    memory_cleanse(vchTemp.data(), vchTemp.size());\n     return true;\n }\n \n@@ -262,7 +262,7 @@ CTxDestination CBitcoinAddress::Get() const\n     if (!IsValid())\n         return CNoDestination();\n     uint160 id;\n-    memcpy(&id, &vchData[0], 20);\n+    memcpy(&id, vchData.data(), 20);\n     if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n         return CKeyID(id);\n     else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n@@ -276,7 +276,7 @@ bool CBitcoinAddress::GetKeyID(CKeyID& keyID) const\n     if (!IsValid() || vchVersion != Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n         return false;\n     uint160 id;\n-    memcpy(&id, &vchData[0], 20);\n+    memcpy(&id, vchData.data(), 20);\n     keyID = CKeyID(id);\n     return true;\n }"
      },
      {
        "sha": "4de5cc6ce5f9f3e4b8738bfa399743f5a8284b9d",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/361d95265a78c9bcdfbb70c4c0e5b43ff2d8adc3/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/361d95265a78c9bcdfbb70c4c0e5b43ff2d8adc3/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=361d95265a78c9bcdfbb70c4c0e5b43ff2d8adc3",
        "patch": "@@ -148,7 +148,7 @@ template<typename K, int Size, CChainParams::Base58Type Type> class CBitcoinExtK\n         K ret;\n         if (vchData.size() == Size) {\n             // If base58 encoded data does not hold an ext key, return a !IsValid() key\n-            ret.Decode(&vchData[0]);\n+            ret.Decode(vchData.data());\n         }\n         return ret;\n     }"
      }
    ]
  },
  {
    "sha": "b6856ebedcd3a1c3cfed5397f477f869688a715b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjg1NmViZWRjZDNhMWMzY2ZlZDUzOTdmNDc3Zjg2OTY4OGE3MTVi",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-02-19T18:43:46Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-07-08T20:33:01Z"
      },
      "message": "Fix subscript[0] in netaddress.cpp",
      "tree": {
        "sha": "be667100c018c68635ae154348de824a32cc27a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be667100c018c68635ae154348de824a32cc27a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6856ebedcd3a1c3cfed5397f477f869688a715b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6856ebedcd3a1c3cfed5397f477f869688a715b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6856ebedcd3a1c3cfed5397f477f869688a715b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6856ebedcd3a1c3cfed5397f477f869688a715b/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "361d95265a78c9bcdfbb70c4c0e5b43ff2d8adc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/361d95265a78c9bcdfbb70c4c0e5b43ff2d8adc3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/361d95265a78c9bcdfbb70c4c0e5b43ff2d8adc3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "110e778fbd81766dac4fb71cfb5a62d9c1c57a04",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6856ebedcd3a1c3cfed5397f477f869688a715b/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6856ebedcd3a1c3cfed5397f477f869688a715b/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=b6856ebedcd3a1c3cfed5397f477f869688a715b",
        "patch": "@@ -573,7 +573,7 @@ std::vector<unsigned char> CService::GetKey() const\n {\n      std::vector<unsigned char> vKey;\n      vKey.resize(18);\n-     memcpy(&vKey[0], ip, 16);\n+     memcpy(vKey.data(), ip, 16);\n      vKey[16] = port / 0x100;\n      vKey[17] = port & 0x0FF;\n      return vKey;"
      }
    ]
  },
  {
    "sha": "ac658e55ff75ed5689f87060087f2ed815c34fe0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYzY1OGU1NWZmNzVlZDU2ODlmODcwNjAwODdmMmVkODE1YzM0ZmUw",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-02-19T18:44:01Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-07-08T20:33:01Z"
      },
      "message": "Fix subscript[0] in torcontrol",
      "tree": {
        "sha": "5109d48599afebee1365ba275b6afe0c6927559c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5109d48599afebee1365ba275b6afe0c6927559c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac658e55ff75ed5689f87060087f2ed815c34fe0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac658e55ff75ed5689f87060087f2ed815c34fe0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ac658e55ff75ed5689f87060087f2ed815c34fe0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac658e55ff75ed5689f87060087f2ed815c34fe0/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6856ebedcd3a1c3cfed5397f477f869688a715b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6856ebedcd3a1c3cfed5397f477f869688a715b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6856ebedcd3a1c3cfed5397f477f869688a715b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ac13f73e705ea42256391619a1b28109bf4ebfec",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac658e55ff75ed5689f87060087f2ed815c34fe0/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac658e55ff75ed5689f87060087f2ed815c34fe0/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=ac658e55ff75ed5689f87060087f2ed815c34fe0",
        "patch": "@@ -662,7 +662,7 @@ void TorController::protocolinfo_cb(TorControlConnection& _conn, const TorContro\n                 // _conn.Command(\"AUTHENTICATE \" + HexStr(status_cookie.second), boost::bind(&TorController::auth_cb, this, _1, _2));\n                 cookie = std::vector<uint8_t>(status_cookie.second.begin(), status_cookie.second.end());\n                 clientNonce = std::vector<uint8_t>(TOR_NONCE_SIZE, 0);\n-                GetRandBytes(&clientNonce[0], TOR_NONCE_SIZE);\n+                GetRandBytes(clientNonce.data(), TOR_NONCE_SIZE);\n                 _conn.Command(\"AUTHCHALLENGE SAFECOOKIE \" + HexStr(clientNonce), boost::bind(&TorController::authchallenge_cb, this, _1, _2));\n             } else {\n                 if (status_cookie.first) {"
      }
    ]
  },
  {
    "sha": "4cac0d1e041db1d7c7eebd6f022f120d08a1610f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Y2FjMGQxZTA0MWRiMWQ3YzdlZWJkNmYwMjJmMTIwZDA4YTE2MTBm",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-03-28T15:37:06Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-07-08T20:33:01Z"
      },
      "message": "Fix subscript[0] in validation.cpp",
      "tree": {
        "sha": "e77bdd57a58013f64cacc029cf8314e8b183169b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e77bdd57a58013f64cacc029cf8314e8b183169b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4cac0d1e041db1d7c7eebd6f022f120d08a1610f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cac0d1e041db1d7c7eebd6f022f120d08a1610f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4cac0d1e041db1d7c7eebd6f022f120d08a1610f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cac0d1e041db1d7c7eebd6f022f120d08a1610f/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ac658e55ff75ed5689f87060087f2ed815c34fe0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac658e55ff75ed5689f87060087f2ed815c34fe0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac658e55ff75ed5689f87060087f2ed815c34fe0"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "8b86a07a7676a6fa77d05fc155dcb2fd38996301",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cac0d1e041db1d7c7eebd6f022f120d08a1610f/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cac0d1e041db1d7c7eebd6f022f120d08a1610f/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=4cac0d1e041db1d7c7eebd6f022f120d08a1610f",
        "patch": "@@ -450,15 +450,15 @@ class LimitedString\n         }\n         string.resize(size);\n         if (size != 0)\n-            s.read((char*)&string[0], size);\n+            s.read((char*)string.data(), size);\n     }\n \n     template<typename Stream>\n     void Serialize(Stream& s) const\n     {\n         WriteCompactSize(s, string.size());\n         if (!string.empty())\n-            s.write((char*)&string[0], string.size());\n+            s.write((char*)string.data(), string.size());\n     }\n };\n \n@@ -556,7 +556,7 @@ void Serialize(Stream& os, const std::basic_string<C>& str)\n {\n     WriteCompactSize(os, str.size());\n     if (!str.empty())\n-        os.write((char*)&str[0], str.size() * sizeof(str[0]));\n+        os.write((char*)str.data(), str.size() * sizeof(C));\n }\n \n template<typename Stream, typename C>\n@@ -565,7 +565,7 @@ void Unserialize(Stream& is, std::basic_string<C>& str)\n     unsigned int nSize = ReadCompactSize(is);\n     str.resize(nSize);\n     if (nSize != 0)\n-        is.read((char*)&str[0], nSize * sizeof(str[0]));\n+        is.read((char*)str.data(), nSize * sizeof(C));\n }\n \n \n@@ -578,7 +578,7 @@ void Serialize_impl(Stream& os, const prevector<N, T>& v, const unsigned char&)\n {\n     WriteCompactSize(os, v.size());\n     if (!v.empty())\n-        os.write((char*)&v[0], v.size() * sizeof(T));\n+        os.write((char*)v.data(), v.size() * sizeof(T));\n }\n \n template<typename Stream, unsigned int N, typename T, typename V>\n@@ -646,7 +646,7 @@ void Serialize_impl(Stream& os, const std::vector<T, A>& v, const unsigned char&\n {\n     WriteCompactSize(os, v.size());\n     if (!v.empty())\n-        os.write((char*)&v[0], v.size() * sizeof(T));\n+        os.write((char*)v.data(), v.size() * sizeof(T));\n }\n \n template<typename Stream, typename T, typename A, typename V>"
      },
      {
        "sha": "a21367848b3c5218eaa12e91671abfe1e5c21330",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cac0d1e041db1d7c7eebd6f022f120d08a1610f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cac0d1e041db1d7c7eebd6f022f120d08a1610f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4cac0d1e041db1d7c7eebd6f022f120d08a1610f",
        "patch": "@@ -2890,7 +2890,7 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n     if (consensusParams.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout != 0) {\n         if (commitpos == -1) {\n             uint256 witnessroot = BlockWitnessMerkleRoot(block, NULL);\n-            CHash256().Write(witnessroot.begin(), 32).Write(&ret[0], 32).Finalize(witnessroot.begin());\n+            CHash256().Write(witnessroot.begin(), 32).Write(ret.data(), 32).Finalize(witnessroot.begin());\n             CTxOut out;\n             out.nValue = 0;\n             out.scriptPubKey.resize(38);"
      }
    ]
  },
  {
    "sha": "bc2e7fd984bd669195bf330520f48f55faf81e88",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzJlN2ZkOTg0YmQ2NjkxOTViZjMzMDUyMGY0OGY1NWZhZjgxZTg4",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-03-28T15:35:51Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-07-08T20:33:01Z"
      },
      "message": "Fix subscript[0] in streams.h",
      "tree": {
        "sha": "c936dc1567857ae7ce1b6f32e9b225f0a66e7781",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c936dc1567857ae7ce1b6f32e9b225f0a66e7781"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc2e7fd984bd669195bf330520f48f55faf81e88",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc2e7fd984bd669195bf330520f48f55faf81e88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc2e7fd984bd669195bf330520f48f55faf81e88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc2e7fd984bd669195bf330520f48f55faf81e88/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4cac0d1e041db1d7c7eebd6f022f120d08a1610f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cac0d1e041db1d7c7eebd6f022f120d08a1610f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4cac0d1e041db1d7c7eebd6f022f120d08a1610f"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "245fb9cd8fdfc2ec965abce7e0d85332a4c494a1",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc2e7fd984bd669195bf330520f48f55faf81e88/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc2e7fd984bd669195bf330520f48f55faf81e88/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=bc2e7fd984bd669195bf330520f48f55faf81e88",
        "patch": "@@ -389,7 +389,7 @@ class CDataStream\n     {\n         // Special case: stream << stream concatenates like stream += stream\n         if (!vch.empty())\n-            s.write((char*)&vch[0], vch.size() * sizeof(vch[0]));\n+            s.write((char*)vch.data(), vch.size() * sizeof(value_type));\n     }\n \n     template<typename T>"
      }
    ]
  },
  {
    "sha": "e19db7b5ad6af770d803e7120e21fba4b436e8be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTlkYjdiNWFkNmFmNzcwZDgwM2U3MTIwZTIxZmJhNGI0MzZlOGJl",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-02-19T18:46:19Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-07-08T20:33:01Z"
      },
      "message": "Fix subscript[0] in utilstrencodings.cpp",
      "tree": {
        "sha": "b8c99ded85cfec145ae984dbe7774eae9feb55ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8c99ded85cfec145ae984dbe7774eae9feb55ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e19db7b5ad6af770d803e7120e21fba4b436e8be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e19db7b5ad6af770d803e7120e21fba4b436e8be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e19db7b5ad6af770d803e7120e21fba4b436e8be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e19db7b5ad6af770d803e7120e21fba4b436e8be/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc2e7fd984bd669195bf330520f48f55faf81e88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc2e7fd984bd669195bf330520f48f55faf81e88",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc2e7fd984bd669195bf330520f48f55faf81e88"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "feaf1a5e8bb118a912ccc3a47c927b0d84651602",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e19db7b5ad6af770d803e7120e21fba4b436e8be/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e19db7b5ad6af770d803e7120e21fba4b436e8be/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=e19db7b5ad6af770d803e7120e21fba4b436e8be",
        "patch": "@@ -228,7 +228,7 @@ std::vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid)\n std::string DecodeBase64(const std::string& str)\n {\n     std::vector<unsigned char> vchRet = DecodeBase64(str.c_str());\n-    return (vchRet.size() == 0) ? std::string() : std::string((const char*)&vchRet[0], vchRet.size());\n+    return (vchRet.size() == 0) ? std::string() : std::string((const char*)vchRet.data(), vchRet.size());\n }\n \n std::string EncodeBase32(const unsigned char* pch, size_t len)\n@@ -415,7 +415,7 @@ std::vector<unsigned char> DecodeBase32(const char* p, bool* pfInvalid)\n std::string DecodeBase32(const std::string& str)\n {\n     std::vector<unsigned char> vchRet = DecodeBase32(str.c_str());\n-    return (vchRet.size() == 0) ? std::string() : std::string((const char*)&vchRet[0], vchRet.size());\n+    return (vchRet.size() == 0) ? std::string() : std::string((const char*) vchRet.data(), vchRet.size());\n }\n \n static bool ParsePrechecks(const std::string& str)"
      }
    ]
  },
  {
    "sha": "4b1c0f2e2e870a3285811bd7b68e14c2edd6a827",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YjFjMGYyZTJlODcwYTMyODU4MTFiZDdiNjhlMTRjMmVkZDZhODI3",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-03-28T15:17:07Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-07-08T20:33:01Z"
      },
      "message": "Remove unnecessary branches in utilstrencodings string constructors.",
      "tree": {
        "sha": "c955f56037107e3a4a84d425f7490b8a3b78f2bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c955f56037107e3a4a84d425f7490b8a3b78f2bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b1c0f2e2e870a3285811bd7b68e14c2edd6a827",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b1c0f2e2e870a3285811bd7b68e14c2edd6a827",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b1c0f2e2e870a3285811bd7b68e14c2edd6a827",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b1c0f2e2e870a3285811bd7b68e14c2edd6a827/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e19db7b5ad6af770d803e7120e21fba4b436e8be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e19db7b5ad6af770d803e7120e21fba4b436e8be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e19db7b5ad6af770d803e7120e21fba4b436e8be"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "2fabb8cf7a39b772a054e49047a6129f4e6f1f12",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b1c0f2e2e870a3285811bd7b68e14c2edd6a827/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b1c0f2e2e870a3285811bd7b68e14c2edd6a827/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=4b1c0f2e2e870a3285811bd7b68e14c2edd6a827",
        "patch": "@@ -228,7 +228,7 @@ std::vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid)\n std::string DecodeBase64(const std::string& str)\n {\n     std::vector<unsigned char> vchRet = DecodeBase64(str.c_str());\n-    return (vchRet.size() == 0) ? std::string() : std::string((const char*)vchRet.data(), vchRet.size());\n+    return std::string((const char*)vchRet.data(), vchRet.size());\n }\n \n std::string EncodeBase32(const unsigned char* pch, size_t len)\n@@ -415,7 +415,7 @@ std::vector<unsigned char> DecodeBase32(const char* p, bool* pfInvalid)\n std::string DecodeBase32(const std::string& str)\n {\n     std::vector<unsigned char> vchRet = DecodeBase32(str.c_str());\n-    return (vchRet.size() == 0) ? std::string() : std::string((const char*) vchRet.data(), vchRet.size());\n+    return std::string((const char*)vchRet.data(), vchRet.size());\n }\n \n static bool ParsePrechecks(const std::string& str)"
      }
    ]
  },
  {
    "sha": "30ac7688e398bbe5400a48ecf0726b679ffb845d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMGFjNzY4OGUzOThiYmU1NDAwYTQ4ZWNmMDcyNmI2NzlmZmI4NDVk",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-02-19T18:35:49Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-07-08T20:37:06Z"
      },
      "message": "Fix subscript[0] potential bugs in key.cpp",
      "tree": {
        "sha": "72ab676fcdde02bf69b020ea8775715edc2c786e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/72ab676fcdde02bf69b020ea8775715edc2c786e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30ac7688e398bbe5400a48ecf0726b679ffb845d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30ac7688e398bbe5400a48ecf0726b679ffb845d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/30ac7688e398bbe5400a48ecf0726b679ffb845d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30ac7688e398bbe5400a48ecf0726b679ffb845d/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b1c0f2e2e870a3285811bd7b68e14c2edd6a827",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b1c0f2e2e870a3285811bd7b68e14c2edd6a827",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b1c0f2e2e870a3285811bd7b68e14c2edd6a827"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "5a991fc1d2911cdf27309fe7ccb2aca65fdf1368",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30ac7688e398bbe5400a48ecf0726b679ffb845d/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30ac7688e398bbe5400a48ecf0726b679ffb845d/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=30ac7688e398bbe5400a48ecf0726b679ffb845d",
        "patch": "@@ -138,7 +138,7 @@ CPrivKey CKey::GetPrivKey() const {\n     size_t privkeylen;\n     privkey.resize(279);\n     privkeylen = 279;\n-    ret = ec_privkey_export_der(secp256k1_context_sign, (unsigned char*)&privkey[0], &privkeylen, begin(), fCompressed ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED);\n+    ret = ec_privkey_export_der(secp256k1_context_sign, (unsigned char*) privkey.data(), &privkeylen, begin(), fCompressed ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED);\n     assert(ret);\n     privkey.resize(privkeylen);\n     return privkey;\n@@ -167,7 +167,7 @@ bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_\n     secp256k1_ecdsa_signature sig;\n     int ret = secp256k1_ecdsa_sign(secp256k1_context_sign, &sig, hash.begin(), begin(), secp256k1_nonce_function_rfc6979, test_case ? extra_entropy : NULL);\n     assert(ret);\n-    secp256k1_ecdsa_signature_serialize_der(secp256k1_context_sign, (unsigned char*)&vchSig[0], &nSigLen, &sig);\n+    secp256k1_ecdsa_signature_serialize_der(secp256k1_context_sign, (unsigned char*)vchSig.data(), &nSigLen, &sig);\n     vchSig.resize(nSigLen);\n     return true;\n }\n@@ -202,7 +202,7 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n }\n \n bool CKey::Load(CPrivKey &privkey, CPubKey &vchPubKey, bool fSkipCheck=false) {\n-    if (!ec_privkey_import_der(secp256k1_context_sign, (unsigned char*)begin(), &privkey[0], privkey.size()))\n+    if (!ec_privkey_import_der(secp256k1_context_sign, (unsigned char*)begin(), privkey.data(), privkey.size()))\n         return false;\n     fCompressed = vchPubKey.IsCompressed();\n     fValid = true;\n@@ -245,8 +245,8 @@ void CExtKey::SetMaster(const unsigned char *seed, unsigned int nSeedLen) {\n     static const unsigned char hashkey[] = {'B','i','t','c','o','i','n',' ','s','e','e','d'};\n     std::vector<unsigned char, secure_allocator<unsigned char>> vout(64);\n     CHMAC_SHA512(hashkey, sizeof(hashkey)).Write(seed, nSeedLen).Finalize(vout.data());\n-    key.Set(&vout[0], &vout[32], true);\n-    memcpy(chaincode.begin(), &vout[32], 32);\n+    key.Set(vout.data(), vout.data() + 32, true);\n+    memcpy(chaincode.begin(), vout.data() + 32, 32);\n     nDepth = 0;\n     nChild = 0;\n     memset(vchFingerprint, 0, sizeof(vchFingerprint));"
      }
    ]
  },
  {
    "sha": "1e3a3200afd74b22fdbb5d9425722b0c031e7453",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTNhMzIwMGFmZDc0YjIyZmRiYjVkOTQyNTcyMmIwYzAzMWU3NDUz",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-09T11:35:39Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-09T11:39:58Z"
      },
      "message": "Simplify \"!foo || (foo && bar)\" as \"!foo || bar\"",
      "tree": {
        "sha": "786e3fa33f8e7ef7e34030f1e727125cbe02875a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/786e3fa33f8e7ef7e34030f1e727125cbe02875a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e3a3200afd74b22fdbb5d9425722b0c031e7453",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e3a3200afd74b22fdbb5d9425722b0c031e7453",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e3a3200afd74b22fdbb5d9425722b0c031e7453",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e3a3200afd74b22fdbb5d9425722b0c031e7453/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d4805ce04645f3203b0cfd3d66ea710e7433eb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d4805ce04645f3203b0cfd3d66ea710e7433eb4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d4805ce04645f3203b0cfd3d66ea710e7433eb4"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6aa50a4da0c0d07ea70d21de22db44733e80d5f7",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e3a3200afd74b22fdbb5d9425722b0c031e7453/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e3a3200afd74b22fdbb5d9425722b0c031e7453/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=1e3a3200afd74b22fdbb5d9425722b0c031e7453",
        "patch": "@@ -1141,7 +1141,7 @@ static void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip)\n     // or a chain that is entirely longer than ours and invalid (note that this should be detected by both)\n     // We define it this way because it allows us to only store the highest fork tip (+ base) which meets\n     // the 7-block condition and from this always have the most-likely-to-cause-warning fork\n-    if (pfork && (!pindexBestForkTip || (pindexBestForkTip && pindexNewForkTip->nHeight > pindexBestForkTip->nHeight)) &&\n+    if (pfork && (!pindexBestForkTip || pindexNewForkTip->nHeight > pindexBestForkTip->nHeight) &&\n             pindexNewForkTip->nChainWork - pfork->nChainWork > (GetBlockProof(*pfork) * 7) &&\n             chainActive.Height() - pindexNewForkTip->nHeight < 72)\n     {"
      }
    ]
  },
  {
    "sha": "9edda0c5f5f20bc6b302ad51fa5ec40ed9da184d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZWRkYTBjNWY1ZjIwYmM2YjMwMmFkNTFmYTVlYzQwZWQ5ZGExODRk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-10T15:50:01Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-10T15:50:21Z"
      },
      "message": "Merge #10747: [rpc] fix verbose argument for getblock in bitcoin-cli\n\n58e9864 [rpc] fix verbose argument for getblock in bitcoin-cli (John Newbery)\n\nTree-SHA512: 7f176e1ddd9f3f7722ea0d268549629567ecf0c30bebf368824997566df0bfa01d31cf761abc9ca355e48c0bf0cb06d49d15a02b858999fcb7472dc7df2fbbf2",
      "tree": {
        "sha": "eadb542ca07d3e0e12f0a9e81cb290654fb3c757",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eadb542ca07d3e0e12f0a9e81cb290654fb3c757"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9edda0c5f5f20bc6b302ad51fa5ec40ed9da184d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZY6I9AAoJEB5K7WKYbNJdAlgH/jq2WVkoahnywlvf2p4fR8f3\nuDjj+tSIKx619vR2pqQHqTShSoPxH+jEuRb6KpFNxFoc63ifPSqH9xmkteaPsa/w\n5Npn6BMDJ5akbdq4pHZkY2Pi042VENiavxiSfC/AgD91i/KW483kDG+hlEjDJDQ/\nfImLTnMB7J4PFpUYP0ImLR0qaVfG3vA0fOttJKSksJsU25HzlBVmBgkoujn+jQaL\nNy7XQhkrBxoVAX31KZczofl6GHBqKx0Lpb/qxdsSLcYROypz9hvX6geur/Sd+Xc7\nzJ7D+46VOCp91nZL4QfS3CPDoYbwA0CHkYHV3tYXTe70fET+naZscsI/GS8mslU=\n=OtD5\n-----END PGP SIGNATURE-----",
        "payload": "tree eadb542ca07d3e0e12f0a9e81cb290654fb3c757\nparent 1d4805ce04645f3203b0cfd3d66ea710e7433eb4\nparent 58e9864083118b538a46124f034c18dd582f4209\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1499701801 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1499701821 +0200\n\nMerge #10747: [rpc] fix verbose argument for getblock in bitcoin-cli\n\n58e9864 [rpc] fix verbose argument for getblock in bitcoin-cli (John Newbery)\n\nTree-SHA512: 7f176e1ddd9f3f7722ea0d268549629567ecf0c30bebf368824997566df0bfa01d31cf761abc9ca355e48c0bf0cb06d49d15a02b858999fcb7472dc7df2fbbf2\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9edda0c5f5f20bc6b302ad51fa5ec40ed9da184d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9edda0c5f5f20bc6b302ad51fa5ec40ed9da184d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9edda0c5f5f20bc6b302ad51fa5ec40ed9da184d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d4805ce04645f3203b0cfd3d66ea710e7433eb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d4805ce04645f3203b0cfd3d66ea710e7433eb4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d4805ce04645f3203b0cfd3d66ea710e7433eb4"
      },
      {
        "sha": "58e9864083118b538a46124f034c18dd582f4209",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58e9864083118b538a46124f034c18dd582f4209",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/58e9864083118b538a46124f034c18dd582f4209"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8fac8af3ec64f8d4a145874a0cc8bcbd377c4c1f",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9edda0c5f5f20bc6b302ad51fa5ec40ed9da184d/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9edda0c5f5f20bc6b302ad51fa5ec40ed9da184d/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=9edda0c5f5f20bc6b302ad51fa5ec40ed9da184d",
        "patch": "@@ -79,6 +79,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"listunspent\", 3, \"include_unsafe\" },\n     { \"listunspent\", 4, \"query_options\" },\n     { \"getblock\", 1, \"verbosity\" },\n+    { \"getblock\", 1, \"verbose\" },\n     { \"getblockheader\", 1, \"verbose\" },\n     { \"getchaintxstats\", 0, \"nblocks\" },\n     { \"gettransaction\", 1, \"include_watchonly\" },"
      }
    ]
  },
  {
    "sha": "f135923ee2cf1a1a9a436626dc5b9219f8ad97da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTM1OTIzZWUyY2YxYTFhOWE0MzY2MjZkYzViOTIxOWY4YWQ5N2Rh",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-14T19:15:40Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-10T16:40:02Z"
      },
      "message": "Add RPC options for RBF, confirmation target, and conservative fee estimation.\n\nAdd support for setting each of these attributes on a per RPC call basis to sendtoaddress, sendmany, fundrawtransaction (already had RBF), and bumpfee (already had RBF and conf target).",
      "tree": {
        "sha": "adde79ee8ba6dc1a97167c2b8686b7d59654f9e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/adde79ee8ba6dc1a97167c2b8686b7d59654f9e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f135923ee2cf1a1a9a436626dc5b9219f8ad97da",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f135923ee2cf1a1a9a436626dc5b9219f8ad97da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f135923ee2cf1a1a9a436626dc5b9219f8ad97da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f135923ee2cf1a1a9a436626dc5b9219f8ad97da/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f0bf33da8357bd6aff100bbe5b84a7f01937e379",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0bf33da8357bd6aff100bbe5b84a7f01937e379",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0bf33da8357bd6aff100bbe5b84a7f01937e379"
      }
    ],
    "stats": {
      "total": 127,
      "additions": 109,
      "deletions": 18
    },
    "files": [
      {
        "sha": "c39a2d55c383405e8ab1db4580e919594051bcae",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f135923ee2cf1a1a9a436626dc5b9219f8ad97da/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f135923ee2cf1a1a9a436626dc5b9219f8ad97da/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=f135923ee2cf1a1a9a436626dc5b9219f8ad97da",
        "patch": "@@ -36,6 +36,20 @@ std::string StringForFeeReason(FeeReason reason) {\n     return reason_string->second;\n }\n \n+bool FeeModeFromString(const std::string& mode_string, FeeEstimateMode& fee_estimate_mode) {\n+    static const std::map<std::string, FeeEstimateMode> fee_modes = {\n+        {\"UNSET\", FeeEstimateMode::UNSET},\n+        {\"ECONOMICAL\", FeeEstimateMode::ECONOMICAL},\n+        {\"CONSERVATIVE\", FeeEstimateMode::CONSERVATIVE},\n+    };\n+    auto mode = fee_modes.find(mode_string);\n+\n+    if (mode == fee_modes.end()) return false;\n+\n+    fee_estimate_mode = mode->second;\n+    return true;\n+}\n+\n /**\n  * We will instantiate an instance of this class to track transactions that were\n  * included in a block. We will lump transactions into a bucket according to their"
      },
      {
        "sha": "fea279e47785e87a9ff9fb3ce286bd16c696ac71",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f135923ee2cf1a1a9a436626dc5b9219f8ad97da/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f135923ee2cf1a1a9a436626dc5b9219f8ad97da/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=f135923ee2cf1a1a9a436626dc5b9219f8ad97da",
        "patch": "@@ -97,6 +97,8 @@ enum class FeeEstimateMode {\n     CONSERVATIVE, //! Force estimateSmartFee to use conservative estimates\n };\n \n+bool FeeModeFromString(const std::string& mode_string, FeeEstimateMode& fee_estimate_mode);\n+\n /* Used to return detailed information about a feerate bucket */\n struct EstimatorBucket\n {"
      },
      {
        "sha": "60b55da3e70f22ec905a9d3db52810d67091763f",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f135923ee2cf1a1a9a436626dc5b9219f8ad97da/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f135923ee2cf1a1a9a436626dc5b9219f8ad97da/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=f135923ee2cf1a1a9a436626dc5b9219f8ad97da",
        "patch": "@@ -668,7 +668,7 @@ bool WalletModel::bumpFee(uint256 hash)\n     std::unique_ptr<CFeeBumper> feeBump;\n     {\n         LOCK2(cs_main, wallet->cs_wallet);\n-        feeBump.reset(new CFeeBumper(wallet, hash, nTxConfirmTarget, false, 0, true));\n+        feeBump.reset(new CFeeBumper(wallet, hash, nTxConfirmTarget, false, 0, true, FeeEstimateMode::UNSET));\n     }\n     if (feeBump->getResult() != BumpFeeResult::OK)\n     {"
      },
      {
        "sha": "81390d7e4779a2a7a4978876306818afb43b2bb5",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f135923ee2cf1a1a9a436626dc5b9219f8ad97da/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f135923ee2cf1a1a9a436626dc5b9219f8ad97da/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=f135923ee2cf1a1a9a436626dc5b9219f8ad97da",
        "patch": "@@ -37,6 +37,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getnetworkhashps\", 1, \"height\" },\n     { \"sendtoaddress\", 1, \"amount\" },\n     { \"sendtoaddress\", 4, \"subtractfeefromamount\" },\n+    { \"sendtoaddress\", 5 , \"replaceable\" },\n+    { \"sendtoaddress\", 6 , \"conf_target\" },\n     { \"settxfee\", 0, \"amount\" },\n     { \"getreceivedbyaddress\", 1, \"minconf\" },\n     { \"getreceivedbyaccount\", 1, \"minconf\" },\n@@ -69,6 +71,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"sendmany\", 1, \"amounts\" },\n     { \"sendmany\", 2, \"minconf\" },\n     { \"sendmany\", 4, \"subtractfeefrom\" },\n+    { \"sendmany\", 5 , \"replaceable\" },\n+    { \"sendmany\", 6 , \"conf_target\" },\n     { \"addmultisigaddress\", 0, \"nrequired\" },\n     { \"addmultisigaddress\", 1, \"keys\" },\n     { \"createmultisig\", 0, \"nrequired\" },"
      },
      {
        "sha": "607ecf4182b79129cd976f7df0049623cc6af96e",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f135923ee2cf1a1a9a436626dc5b9219f8ad97da/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f135923ee2cf1a1a9a436626dc5b9219f8ad97da/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=f135923ee2cf1a1a9a436626dc5b9219f8ad97da",
        "patch": "@@ -66,7 +66,7 @@ bool CFeeBumper::preconditionChecks(const CWallet *pWallet, const CWalletTx& wtx\n     return true;\n }\n \n-CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConfirmTarget, bool ignoreGlobalPayTxFee, CAmount totalFee, bool newTxReplaceable)\n+CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConfirmTarget, bool ignoreGlobalPayTxFee, CAmount totalFee, bool newTxReplaceable, FeeEstimateMode fee_mode)\n     :\n     txid(std::move(txidIn)),\n     nOldFee(0),\n@@ -165,7 +165,7 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n         nNewFee = totalFee;\n         nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n     } else {\n-        bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET, newTxReplaceable);\n+        bool conservative_estimate = CalculateEstimateType(fee_mode, newTxReplaceable);\n         nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, ::feeEstimator, nullptr /* FeeCalculation */, ignoreGlobalPayTxFee, conservative_estimate);\n         nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n "
      },
      {
        "sha": "11e2f5f95373df7d1cd19ce223921b70950ea3e4",
        "filename": "src/wallet/feebumper.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f135923ee2cf1a1a9a436626dc5b9219f8ad97da/src/wallet/feebumper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f135923ee2cf1a1a9a436626dc5b9219f8ad97da/src/wallet/feebumper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.h?ref=f135923ee2cf1a1a9a436626dc5b9219f8ad97da",
        "patch": "@@ -10,6 +10,7 @@\n class CWallet;\n class CWalletTx;\n class uint256;\n+enum class FeeEstimateMode;\n \n enum class BumpFeeResult\n {\n@@ -24,7 +25,7 @@ enum class BumpFeeResult\n class CFeeBumper\n {\n public:\n-    CFeeBumper(const CWallet *pWalletIn, const uint256 txidIn, int newConfirmTarget, bool ignoreGlobalPayTxFee, CAmount totalFee, bool newTxReplaceable);\n+    CFeeBumper(const CWallet *pWalletIn, const uint256 txidIn, int newConfirmTarget, bool ignoreGlobalPayTxFee, CAmount totalFee, bool newTxReplaceable, FeeEstimateMode fee_mode);\n     BumpFeeResult getResult() const { return currentResult; }\n     const std::vector<std::string>& getErrors() const { return vErrors; }\n     CAmount getOldFee() const { return nOldFee; }"
      },
      {
        "sha": "5f72e3b6f598bb90bbbe0eed377e482eae916d39",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 84,
        "deletions": 14,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f135923ee2cf1a1a9a436626dc5b9219f8ad97da/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f135923ee2cf1a1a9a436626dc5b9219f8ad97da/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f135923ee2cf1a1a9a436626dc5b9219f8ad97da",
        "patch": "@@ -356,7 +356,7 @@ UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n     return ret;\n }\n \n-static void SendMoney(CWallet * const pwallet, const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew)\n+static void SendMoney(CWallet * const pwallet, const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew, CCoinControl *coin_control = nullptr)\n {\n     CAmount curBalance = pwallet->GetBalance();\n \n@@ -382,7 +382,7 @@ static void SendMoney(CWallet * const pwallet, const CTxDestination &address, CA\n     int nChangePosRet = -1;\n     CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n     vecSend.push_back(recipient);\n-    if (!pwallet->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError)) {\n+    if (!pwallet->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError, coin_control)) {\n         if (!fSubtractFeeFromAmount && nValue + nFeeRequired > curBalance)\n             strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s\", FormatMoney(nFeeRequired));\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n@@ -401,9 +401,9 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 5)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 8)\n         throw std::runtime_error(\n-            \"sendtoaddress \\\"address\\\" amount ( \\\"comment\\\" \\\"comment_to\\\" subtractfeefromamount )\\n\"\n+            \"sendtoaddress \\\"address\\\" amount ( \\\"comment\\\" \\\"comment_to\\\" subtractfeefromamount replaceable conf_target \\\"estimate_mode\\\")\\n\"\n             \"\\nSend an amount to a given address.\\n\"\n             + HelpRequiringPassphrase(pwallet) +\n             \"\\nArguments:\\n\"\n@@ -416,6 +416,12 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n             \"                             transaction, just kept in your wallet.\\n\"\n             \"5. subtractfeefromamount  (boolean, optional, default=false) The fee will be deducted from the amount being sent.\\n\"\n             \"                             The recipient will receive less bitcoins than you enter in the amount field.\\n\"\n+            \"6. replaceable            (boolean, optional) Allow this transaction to be replaced by a transaction with higher fees via BIP 125\\n\"\n+            \"7. conf_target            (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"8. \\\"estimate_mode\\\"      (string, optional, default=UNSET) The fee estimate mode, must be one of:\\n\"\n+            \"       \\\"UNSET\\\"\\n\"\n+            \"       \\\"ECONOMICAL\\\"\\n\"\n+            \"       \\\"CONSERVATIVE\\\"\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"txid\\\"                  (string) The transaction id.\\n\"\n             \"\\nExamples:\\n\"\n@@ -444,12 +450,29 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n         wtx.mapValue[\"to\"]      = request.params[3].get_str();\n \n     bool fSubtractFeeFromAmount = false;\n-    if (request.params.size() > 4)\n+    if (request.params.size() > 4 && !request.params[4].isNull()) {\n         fSubtractFeeFromAmount = request.params[4].get_bool();\n+    }\n+\n+    CCoinControl coin_control;\n+    if (request.params.size() > 5 && !request.params[5].isNull()) {\n+        coin_control.signalRbf = request.params[5].get_bool();\n+    }\n+\n+    if (request.params.size() > 6 && !request.params[6].isNull()) {\n+        coin_control.nConfirmTarget = request.params[6].get_int();\n+    }\n+\n+    if (request.params.size() > 7 && !request.params[7].isNull()) {\n+        if (!FeeModeFromString(request.params[7].get_str(), coin_control.m_fee_mode)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n+        }\n+    }\n+\n \n     EnsureWalletIsUnlocked(pwallet);\n \n-    SendMoney(pwallet, address.Get(), nAmount, fSubtractFeeFromAmount, wtx);\n+    SendMoney(pwallet, address.Get(), nAmount, fSubtractFeeFromAmount, wtx, &coin_control);\n \n     return wtx.GetHash().GetHex();\n }\n@@ -888,9 +911,9 @@ UniValue sendmany(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 5)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 8)\n         throw std::runtime_error(\n-            \"sendmany \\\"fromaccount\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] )\\n\"\n+            \"sendmany \\\"fromaccount\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] replaceable conf_target \\\"estimate_mode\\\")\\n\"\n             \"\\nSend multiple times. Amounts are double-precision floating point numbers.\"\n             + HelpRequiringPassphrase(pwallet) + \"\\n\"\n             \"\\nArguments:\\n\"\n@@ -910,7 +933,13 @@ UniValue sendmany(const JSONRPCRequest& request)\n             \"      \\\"address\\\"          (string) Subtract fee from this address\\n\"\n             \"      ,...\\n\"\n             \"    ]\\n\"\n-            \"\\nResult:\\n\"\n+            \"6. replaceable            (boolean, optional) Allow this transaction to be replaced by a transaction with higher fees via BIP 125\\n\"\n+            \"7. conf_target            (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"8. \\\"estimate_mode\\\"      (string, optional, default=UNSET) The fee estimate mode, must be one of:\\n\"\n+            \"       \\\"UNSET\\\"\\n\"\n+            \"       \\\"ECONOMICAL\\\"\\n\"\n+            \"       \\\"CONSERVATIVE\\\"\\n\"\n+             \"\\nResult:\\n\"\n             \"\\\"txid\\\"                   (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n             \"                                    the number of addresses.\\n\"\n             \"\\nExamples:\\n\"\n@@ -942,9 +971,24 @@ UniValue sendmany(const JSONRPCRequest& request)\n         wtx.mapValue[\"comment\"] = request.params[3].get_str();\n \n     UniValue subtractFeeFromAmount(UniValue::VARR);\n-    if (request.params.size() > 4)\n+    if (request.params.size() > 4 && !request.params[4].isNull())\n         subtractFeeFromAmount = request.params[4].get_array();\n \n+    CCoinControl coin_control;\n+    if (request.params.size() > 5 && !request.params[5].isNull()) {\n+        coin_control.signalRbf = request.params[5].get_bool();\n+    }\n+\n+    if (request.params.size() > 6 && !request.params[6].isNull()) {\n+        coin_control.nConfirmTarget = request.params[6].get_int();\n+    }\n+\n+    if (request.params.size() > 7 && !request.params[7].isNull()) {\n+        if (!FeeModeFromString(request.params[7].get_str(), coin_control.m_fee_mode)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n+        }\n+    }\n+\n     std::set<CBitcoinAddress> setAddress;\n     std::vector<CRecipient> vecSend;\n \n@@ -989,7 +1033,7 @@ UniValue sendmany(const JSONRPCRequest& request)\n     CAmount nFeeRequired = 0;\n     int nChangePosRet = -1;\n     std::string strFailReason;\n-    bool fCreated = pwallet->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, nChangePosRet, strFailReason);\n+    bool fCreated = pwallet->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, nChangePosRet, strFailReason, &coin_control);\n     if (!fCreated)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n     CValidationState state;\n@@ -2658,6 +2702,11 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             \"                                  [vout_index,...]\\n\"\n                             \"     \\\"replaceable\\\"            (boolean, optional) Marks this transaction as BIP125 replaceable.\\n\"\n                             \"                              Allows this transaction to be replaced by a transaction with higher fees\\n\"\n+                            \"     \\\"conf_target\\\"            (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"estimate_mode\\\"          (string, optional, default=UNSET) The fee estimate mode, must be one of:\\n\"\n+                            \"         \\\"UNSET\\\"\\n\"\n+                            \"         \\\"ECONOMICAL\\\"\\n\"\n+                            \"         \\\"CONSERVATIVE\\\"\\n\"\n                             \"   }\\n\"\n                             \"                         for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\\n\"\n                             \"\\nResult:\\n\"\n@@ -2710,6 +2759,8 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                 {\"feeRate\", UniValueType()}, // will be checked below\n                 {\"subtractFeeFromOutputs\", UniValueType(UniValue::VARR)},\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+                {\"conf_target\", UniValueType(UniValue::VNUM)},\n+                {\"estimate_mode\", UniValueType(UniValue::VSTR)},\n             },\n             true, true);\n \n@@ -2746,6 +2797,14 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n         if (options.exists(\"replaceable\")) {\n             coinControl.signalRbf = options[\"replaceable\"].get_bool();\n         }\n+        if (options.exists(\"conf_target\")) {\n+            coinControl.nConfirmTarget = options[\"conf_target\"].get_int();\n+        }\n+        if (options.exists(\"estimate_mode\")) {\n+            if (!FeeModeFromString(options[\"estimate_mode\"].get_str(), coinControl.m_fee_mode)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n+            }\n+        }\n       }\n     }\n \n@@ -2823,6 +2882,10 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n             \"                         still be replaceable in practice, for example if it has unconfirmed ancestors which\\n\"\n             \"                         are replaceable).\\n\"\n+            \"     \\\"estimate_mode\\\"     (string, optional, default=UNSET) The fee estimate mode, must be one of:\\n\"\n+            \"         \\\"UNSET\\\"\\n\"\n+            \"         \\\"ECONOMICAL\\\"\\n\"\n+            \"         \\\"CONSERVATIVE\\\"\\n\"\n             \"   }\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n@@ -2845,13 +2908,15 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     int newConfirmTarget = nTxConfirmTarget;\n     CAmount totalFee = 0;\n     bool replaceable = true;\n+    FeeEstimateMode fee_mode = FeeEstimateMode::UNSET;\n     if (request.params.size() > 1) {\n         UniValue options = request.params[1];\n         RPCTypeCheckObj(options,\n             {\n                 {\"confTarget\", UniValueType(UniValue::VNUM)},\n                 {\"totalFee\", UniValueType(UniValue::VNUM)},\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+                {\"estimate_mode\", UniValueType(UniValue::VSTR)},\n             },\n             true, true);\n \n@@ -2876,12 +2941,17 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         if (options.exists(\"replaceable\")) {\n             replaceable = options[\"replaceable\"].get_bool();\n         }\n+        if (options.exists(\"estimate_mode\")) {\n+            if (!FeeModeFromString(options[\"estimate_mode\"].get_str(), fee_mode)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n+            }\n+        }\n     }\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n     EnsureWalletIsUnlocked(pwallet);\n \n-    CFeeBumper feeBump(pwallet, hash, newConfirmTarget, ignoreGlobalPayTxFee, totalFee, replaceable);\n+    CFeeBumper feeBump(pwallet, hash, newConfirmTarget, ignoreGlobalPayTxFee, totalFee, replaceable, fee_mode);\n     BumpFeeResult res = feeBump.getResult();\n     if (res != BumpFeeResult::OK)\n     {\n@@ -3023,8 +3093,8 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"lockunspent\",              &lockunspent,              true,   {\"unlock\",\"transactions\"} },\n     { \"wallet\",             \"move\",                     &movecmd,                  false,  {\"fromaccount\",\"toaccount\",\"amount\",\"minconf\",\"comment\"} },\n     { \"wallet\",             \"sendfrom\",                 &sendfrom,                 false,  {\"fromaccount\",\"toaddress\",\"amount\",\"minconf\",\"comment\",\"comment_to\"} },\n-    { \"wallet\",             \"sendmany\",                 &sendmany,                 false,  {\"fromaccount\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\"} },\n-    { \"wallet\",             \"sendtoaddress\",            &sendtoaddress,            false,  {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\"} },\n+    { \"wallet\",             \"sendmany\",                 &sendmany,                 false,  {\"fromaccount\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n+    { \"wallet\",             \"sendtoaddress\",            &sendtoaddress,            false,  {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n     { \"wallet\",             \"setaccount\",               &setaccount,               true,   {\"address\",\"account\"} },\n     { \"wallet\",             \"settxfee\",                 &settxfee,                 true,   {\"amount\"} },\n     { \"wallet\",             \"signmessage\",              &signmessage,              true,   {\"address\",\"message\"} },"
      }
    ]
  },
  {
    "sha": "475c08cb446371dd75fb37e067613effc0572442",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzVjMDhjYjQ0NjM3MWRkNzVmYjM3ZTA2NzYxM2VmZmMwNTcyNDQy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-10T19:44:13Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-10T20:18:31Z"
      },
      "message": "Add PR description to merge commit in github-merge.py",
      "tree": {
        "sha": "600b4ddd895e915d97ee5d4b42e76d1dada3f811",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/600b4ddd895e915d97ee5d4b42e76d1dada3f811"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/475c08cb446371dd75fb37e067613effc0572442",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/475c08cb446371dd75fb37e067613effc0572442",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/475c08cb446371dd75fb37e067613effc0572442",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/475c08cb446371dd75fb37e067613effc0572442/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9edda0c5f5f20bc6b302ad51fa5ec40ed9da184d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9edda0c5f5f20bc6b302ad51fa5ec40ed9da184d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9edda0c5f5f20bc6b302ad51fa5ec40ed9da184d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c664cf81fa9f63ac3fb4a32a19840442927b7450",
        "filename": "contrib/devtools/github-merge.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/475c08cb446371dd75fb37e067613effc0572442/contrib/devtools/github-merge.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/475c08cb446371dd75fb37e067613effc0572442/contrib/devtools/github-merge.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/github-merge.py?ref=475c08cb446371dd75fb37e067613effc0572442",
        "patch": "@@ -175,6 +175,7 @@ def main():\n     if info is None:\n         exit(1)\n     title = info['title'].strip()\n+    body = info['body'].strip()\n     # precedence order for destination branch argument:\n     #   - command line argument\n     #   - githubmerge.branch setting\n@@ -229,6 +230,7 @@ def main():\n             firstline = 'Merge #%s' % (pull,)\n         message = firstline + '\\n\\n'\n         message += subprocess.check_output([GIT,'log','--no-merges','--topo-order','--pretty=format:%h %s (%an)',base_branch+'..'+head_branch]).decode('utf-8')\n+        message += '\\n\\nPull request description:\\n\\n  ' + body.replace('\\n', '\\n  ') + '\\n'\n         try:\n             subprocess.check_call([GIT,'merge','-q','--commit','--no-edit','--no-ff','-m',message.encode('utf-8'),head_branch])\n         except subprocess.CalledProcessError as e:"
      }
    ]
  },
  {
    "sha": "9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Yzg1YjkxZGMxNTY2ZjdjMjdjNWI4YTFhOWM3YWViZTBlM2E4M2Nm",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-06T17:08:27Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-11T00:07:13Z"
      },
      "message": "Change API to estimaterawfee\n\nReport results for all 3 possible time horizons instead of specifying time horizon as an argument.",
      "tree": {
        "sha": "a9cda413863908f2ccf954958e469b31964ca678",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9cda413863908f2ccf954958e469b31964ca678"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9edda0c5f5f20bc6b302ad51fa5ec40ed9da184d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9edda0c5f5f20bc6b302ad51fa5ec40ed9da184d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9edda0c5f5f20bc6b302ad51fa5ec40ed9da184d"
      }
    ],
    "stats": {
      "total": 117,
      "additions": 67,
      "deletions": 50
    },
    "files": [
      {
        "sha": "565da6c1541e9d8edec25109f31dee25cc35ed0a",
        "filename": "src/policy/feerate.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf/src/policy/feerate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf/src/policy/feerate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.h?ref=9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf",
        "patch": "@@ -40,6 +40,7 @@ class CFeeRate\n     friend bool operator==(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK == b.nSatoshisPerK; }\n     friend bool operator<=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK <= b.nSatoshisPerK; }\n     friend bool operator>=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK >= b.nSatoshisPerK; }\n+    friend bool operator!=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK != b.nSatoshisPerK; }\n     CFeeRate& operator+=(const CFeeRate& a) { nSatoshisPerK += a.nSatoshisPerK; return *this; }\n     std::string ToString() const;\n "
      },
      {
        "sha": "859a2e7804f6f3079eb7f51d9625e706629913ca",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf",
        "patch": "@@ -16,6 +16,19 @@\n \n static constexpr double INF_FEERATE = 1e99;\n \n+std::string StringForFeeEstimateHorizon(FeeEstimateHorizon horizon) {\n+    static const std::map<FeeEstimateHorizon, std::string> horizon_strings = {\n+        {FeeEstimateHorizon::SHORT_HALFLIFE, \"short\"},\n+        {FeeEstimateHorizon::MED_HALFLIFE, \"medium\"},\n+        {FeeEstimateHorizon::LONG_HALFLIFE, \"long\"},\n+    };\n+    auto horizon_string = horizon_strings.find(horizon);\n+\n+    if (horizon_string == horizon_strings.end()) return \"unknown\";\n+\n+    return horizon_string->second;\n+}\n+\n std::string StringForFeeReason(FeeReason reason) {\n     static const std::map<FeeReason, std::string> fee_reason_strings = {\n         {FeeReason::NONE, \"None\"},"
      },
      {
        "sha": "86f143b23381d707a7f6f040b774fe4f5b9bf912",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf",
        "patch": "@@ -74,6 +74,8 @@ enum FeeEstimateHorizon {\n     LONG_HALFLIFE = 2\n };\n \n+std::string StringForFeeEstimateHorizon(FeeEstimateHorizon horizon);\n+\n /* Enumeration of reason for returned fee estimate */\n enum class FeeReason {\n     NONE,"
      },
      {
        "sha": "4c5eb6dc69b7187412026a0c80511590e55018c9",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf",
        "patch": "@@ -113,7 +113,6 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"estimatesmartfee\", 1, \"conservative\" },\n     { \"estimaterawfee\", 0, \"nblocks\" },\n     { \"estimaterawfee\", 1, \"threshold\" },\n-    { \"estimaterawfee\", 2, \"horizon\" },\n     { \"prioritisetransaction\", 1, \"dummy\" },\n     { \"prioritisetransaction\", 2, \"fee_delta\" },\n     { \"setban\", 2, \"bantime\" },"
      },
      {
        "sha": "a15931386b9b846d5fc5b5ad2820ea754fa55cf3",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 49,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf",
        "patch": "@@ -838,9 +838,9 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n \n UniValue estimaterawfee(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1|| request.params.size() > 3)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"estimaterawfee nblocks (threshold horizon)\\n\"\n+            \"estimaterawfee nblocks (threshold)\\n\"\n             \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n             \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n             \"         implementation of fee estimation. The parameters it can be called with\\n\"\n@@ -853,68 +853,70 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n-            \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"short\\\" : {            (json object) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      },\\n\"\n+            \"      \\\"fail\\\" : { ... },        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  },\\n\"\n+            \"  \\\"medium\\\" : { ... },      (json object) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }      (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n             \"A negative feerate is returned if no answer can be given.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+        CFeeRate feeRate;\n+        EstimationResult buckets;\n+        feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n+\n+        UniValue horizon_result(UniValue::VOBJ);\n+        horizon_result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n+        if (!(feeRate == CFeeRate(0))) {\n+            horizon_result.push_back(Pair(\"decay\", buckets.decay));\n+            horizon_result.push_back(Pair(\"scale\", (int)buckets.scale));\n+            UniValue passbucket(UniValue::VOBJ);\n+            passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n+            passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n+            passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n+            passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n+            passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n+            passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n+            horizon_result.push_back(Pair(\"pass\", passbucket));\n+            UniValue failbucket(UniValue::VOBJ);\n+            failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n+            failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n+            failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n+            failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n+            failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n+            failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n+            horizon_result.push_back(Pair(\"fail\", failbucket));\n+        }\n+        result.push_back(Pair(StringForFeeEstimateHorizon(horizon), horizon_result));\n+    }\n     return result;\n }\n \n@@ -932,7 +934,7 @@ static const CRPCCommand commands[] =\n     { \"util\",               \"estimatefee\",            &estimatefee,            true,  {\"nblocks\"} },\n     { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       true,  {\"nblocks\", \"conservative\"} },\n \n-    { \"hidden\",             \"estimaterawfee\",         &estimaterawfee,         true,  {\"nblocks\", \"threshold\", \"horizon\"} },\n+    { \"hidden\",             \"estimaterawfee\",         &estimaterawfee,         true,  {\"nblocks\", \"threshold\"} },\n };\n \n void RegisterMiningRPCCommands(CRPCTable &t)"
      }
    ]
  },
  {
    "sha": "1fafd704dac73594f69de5f9c15f697217653d7a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZmFmZDcwNGRhYzczNTk0ZjY5ZGU1ZjljMTVmNjk3MjE3NjUzZDdh",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-28T14:03:00Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-11T00:07:17Z"
      },
      "message": "Add function to report highest estimate target tracked per horizon",
      "tree": {
        "sha": "fd914a07648e24c037a395ed3a355478a6a3c76b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd914a07648e24c037a395ed3a355478a6a3c76b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1fafd704dac73594f69de5f9c15f697217653d7a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fafd704dac73594f69de5f9c15f697217653d7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1fafd704dac73594f69de5f9c15f697217653d7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fafd704dac73594f69de5f9c15f697217653d7a/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 22,
      "deletions": 1
    },
    "files": [
      {
        "sha": "51e11ea20efaa3be598944e05f25947a06b7e984",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fafd704dac73594f69de5f9c15f697217653d7a/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fafd704dac73594f69de5f9c15f697217653d7a/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=1fafd704dac73594f69de5f9c15f697217653d7a",
        "patch": "@@ -684,7 +684,7 @@ CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThr\n         break;\n     }\n     default: {\n-        return CFeeRate(0);\n+        throw std::out_of_range(\"CBlockPoicyEstimator::estimateRawFee unknown FeeEstimateHorizon\");\n     }\n     }\n \n@@ -703,6 +703,24 @@ CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThr\n     return CFeeRate(median);\n }\n \n+unsigned int CBlockPolicyEstimator::HighestTargetTracked(FeeEstimateHorizon horizon) const\n+{\n+    switch (horizon) {\n+    case FeeEstimateHorizon::SHORT_HALFLIFE: {\n+        return shortStats->GetMaxConfirms();\n+    }\n+    case FeeEstimateHorizon::MED_HALFLIFE: {\n+        return feeStats->GetMaxConfirms();\n+    }\n+    case FeeEstimateHorizon::LONG_HALFLIFE: {\n+        return longStats->GetMaxConfirms();\n+    }\n+    default: {\n+        throw std::out_of_range(\"CBlockPoicyEstimator::HighestTargetTracked unknown FeeEstimateHorizon\");\n+    }\n+    }\n+}\n+\n unsigned int CBlockPolicyEstimator::BlockSpan() const\n {\n     if (firstRecordedHeight == 0) return 0;"
      },
      {
        "sha": "a04dbe492445b0bfc9d33c120f5438329eedb96c",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fafd704dac73594f69de5f9c15f697217653d7a/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fafd704dac73594f69de5f9c15f697217653d7a/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=1fafd704dac73594f69de5f9c15f697217653d7a",
        "patch": "@@ -216,6 +216,9 @@ class CBlockPolicyEstimator\n     /** Empty mempool transactions on shutdown to record failure to confirm for txs still in mempool */\n     void FlushUnconfirmed(CTxMemPool& pool);\n \n+    /** Calculation of highest target that estimates are tracked for */\n+    unsigned int HighestTargetTracked(FeeEstimateHorizon horizon) const;\n+\n private:\n     unsigned int nBestSeenHeight;\n     unsigned int firstRecordedHeight;"
      }
    ]
  },
  {
    "sha": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZTNiN2I1Njg2ZDMyNjgxNGM0MGU1YjcwZGE2Njk3OTcxZDI3MDky",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-28T14:50:32Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-11T00:07:17Z"
      },
      "message": "Improve error reporting for estimaterawfee",
      "tree": {
        "sha": "f828c4f6790edb389e2d8c04d15bf29785ed8f67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f828c4f6790edb389e2d8c04d15bf29785ed8f67"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e3b7b5686d326814c40e5b70da6697971d27092",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e3b7b5686d326814c40e5b70da6697971d27092",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e3b7b5686d326814c40e5b70da6697971d27092",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e3b7b5686d326814c40e5b70da6697971d27092/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1fafd704dac73594f69de5f9c15f697217653d7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fafd704dac73594f69de5f9c15f697217653d7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1fafd704dac73594f69de5f9c15f697217653d7a"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 46,
      "deletions": 25
    },
    "files": [
      {
        "sha": "046c85a76eb5d677394c369012e640a66f54607d",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 25,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e3b7b5686d326814c40e5b70da6697971d27092/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e3b7b5686d326814c40e5b70da6697971d27092/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=5e3b7b5686d326814c40e5b70da6697971d27092",
        "patch": "@@ -849,71 +849,92 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"short\\\" : {            (json object) estimate for short time horizon\\n\"\n-            \"      \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n             \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n             \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"      \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n             \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n             \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n             \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n             \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n             \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n             \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n             \"      },\\n\"\n-            \"      \\\"fail\\\" : { ... },        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"fail\\\" : { ... },       (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n             \"  },\\n\"\n-            \"  \\\"medium\\\" : { ... },      (json object) estimate for medium time horizon\\n\"\n-            \"  \\\"long\\\" : { ... }      (json object) estimate for long time horizon\\n\"\n+            \"  \\\"medium\\\" : { ... },    (json object, optional) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n             \"\\nExample:\\n\"\n             + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     double threshold = 0.95;\n     if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n     }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n \n     UniValue result(UniValue::VOBJ);\n \n     for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n         CFeeRate feeRate;\n         EstimationResult buckets;\n-        feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n+        // Only output results for horizons which track the target\n+        if ((unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(horizon)) continue;\n+\n+        feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n         UniValue horizon_result(UniValue::VOBJ);\n-        horizon_result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-        if (!(feeRate == CFeeRate(0))) {\n+        UniValue errors(UniValue::VARR);\n+        UniValue passbucket(UniValue::VOBJ);\n+        passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n+        passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n+        passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n+        passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n+        passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n+        passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n+        UniValue failbucket(UniValue::VOBJ);\n+        failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n+        failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n+        failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n+        failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n+        failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n+        failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n+\n+        // CFeeRate(0) is used to indicate error as a return value from estimateRawFee\n+        if (feeRate != CFeeRate(0)) {\n+            horizon_result.push_back(Pair(\"feerate\", ValueFromAmount(feeRate.GetFeePerK())));\n             horizon_result.push_back(Pair(\"decay\", buckets.decay));\n             horizon_result.push_back(Pair(\"scale\", (int)buckets.scale));\n-            UniValue passbucket(UniValue::VOBJ);\n-            passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-            passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-            passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-            passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-            passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-            passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n             horizon_result.push_back(Pair(\"pass\", passbucket));\n-            UniValue failbucket(UniValue::VOBJ);\n-            failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-            failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-            failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-            failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-            failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-            failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n+            // buckets.fail.start == -1 indicates that all buckets passed, there is no fail bucket to output\n+            if (buckets.fail.start != -1) horizon_result.push_back(Pair(\"fail\", failbucket));\n+        } else {\n+            // Output only information that is still meaningful in the event of error\n+            horizon_result.push_back(Pair(\"decay\", buckets.decay));\n+            horizon_result.push_back(Pair(\"scale\", (int)buckets.scale));\n             horizon_result.push_back(Pair(\"fail\", failbucket));\n+            errors.push_back(\"Insufficient data or no feerate found which meets threshold\");\n+            horizon_result.push_back(Pair(\"errors\",errors));\n         }\n         result.push_back(Pair(StringForFeeEstimateHorizon(horizon), horizon_result));\n     }"
      }
    ]
  },
  {
    "sha": "1f668b646806f94acd851acdbd9939c24e0492d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjY2OGI2NDY4MDZmOTRhY2Q4NTFhY2RiZDk5MzljMjRlMDQ5MmQz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-11T01:08:19Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-11T01:08:19Z"
      },
      "message": "Expose if CScheduler is being serviced, assert its not in EmptyQueue",
      "tree": {
        "sha": "c771b63f06207f18c7956ca5c40d2924972ba92b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c771b63f06207f18c7956ca5c40d2924972ba92b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f668b646806f94acd851acdbd9939c24e0492d3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f668b646806f94acd851acdbd9939c24e0492d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f668b646806f94acd851acdbd9939c24e0492d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f668b646806f94acd851acdbd9939c24e0492d3/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3192975f1d177aa9f0bbd823c6387cfbfa943610",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3192975f1d177aa9f0bbd823c6387cfbfa943610",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3192975f1d177aa9f0bbd823c6387cfbfa943610"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "36a6d5110d940dd973562324a863c760eb3c76c2",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f668b646806f94acd851acdbd9939c24e0492d3/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f668b646806f94acd851acdbd9939c24e0492d3/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=1f668b646806f94acd851acdbd9939c24e0492d3",
        "patch": "@@ -140,6 +140,10 @@ size_t CScheduler::getQueueInfo(boost::chrono::system_clock::time_point &first,\n     return result;\n }\n \n+bool CScheduler::AreThreadsServicingQueue() const {\n+    return nThreadsServicingQueue;\n+}\n+\n \n void SingleThreadedSchedulerClient::MaybeScheduleProcessQueue() {\n     {\n@@ -193,6 +197,7 @@ void SingleThreadedSchedulerClient::AddToProcessQueue(std::function<void (void)>\n }\n \n void SingleThreadedSchedulerClient::EmptyQueue() {\n+    assert(!m_pscheduler->AreThreadsServicingQueue());\n     bool should_continue = true;\n     while (should_continue) {\n         ProcessQueue();"
      },
      {
        "sha": "0365d668b209b85eeedb6e1d51e60649d6b57692",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f668b646806f94acd851acdbd9939c24e0492d3/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f668b646806f94acd851acdbd9939c24e0492d3/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=1f668b646806f94acd851acdbd9939c24e0492d3",
        "patch": "@@ -71,6 +71,9 @@ class CScheduler\n     size_t getQueueInfo(boost::chrono::system_clock::time_point &first,\n                         boost::chrono::system_clock::time_point &last) const;\n \n+    // Returns true if there are threads actively running in serviceQueue()\n+    bool AreThreadsServicingQueue() const;\n+\n private:\n     std::multimap<boost::chrono::system_clock::time_point, Function> taskQueue;\n     boost::condition_variable newTaskScheduled;\n@@ -103,6 +106,7 @@ class SingleThreadedSchedulerClient {\n     void AddToProcessQueue(std::function<void (void)> func);\n \n     // Processes all remaining queue members on the calling thread, blocking until queue is empty\n+    // Must be called after the CScheduler has no remaining processing threads!\n     void EmptyQueue();\n };\n "
      }
    ]
  },
  {
    "sha": "21ed30a314cf2118bd4719c6a09985f69fd25dbf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMWVkMzBhMzE0Y2YyMTE4YmQ0NzE5YzZhMDk5ODVmNjlmZDI1ZGJm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-11T07:30:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-11T07:38:51Z"
      },
      "message": "Merge #10179: Give CValidationInterface Support for calling notifications on the CScheduler Thread\n\n1f668b6 Expose if CScheduler is being serviced, assert its not in EmptyQueue (Matt Corallo)\n3192975 Flush CValidationInterface callbacks prior to destruction (Matt Corallo)\n08096bb Support more than one CScheduler thread for serial clients (Matt Corallo)\n2fbf2db Add default arg to CScheduler to schedule() a callback now (Matt Corallo)\ncda1429 Give CMainSignals a reference to the global scheduler (Matt Corallo)\n3a19fed Make ValidationInterface signals-type-agnostic (Matt Corallo)\nff6a834 Use TestingSetup to DRY qt rpcnestedtests (Matt Corallo)\n\nTree-SHA512: fab91e34e30b080ed4d0a6d8c1214910e383c45440676e37be61d0bde6ae98d61e8903d22b846e95ba4e73a6ce788798350266feba246d8a2ab357e8523e4ac5",
      "tree": {
        "sha": "71266d8ba79005cb0d515cd3787ca7552a5bba04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71266d8ba79005cb0d515cd3787ca7552a5bba04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/21ed30a314cf2118bd4719c6a09985f69fd25dbf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZZICMAAoJEB5K7WKYbNJd2ncH/3vpBTrCqxPIKDp18PF6qNg3\n2z2IktoKtldhdWCMODwtNwUVMCTBxMAT1+JY+2V4vbrbrHqi5gvi81cGC5oqB6HC\nwFIMrzSTYzoR2hxb8WzfQuxq8xg+V6uK5p/oAWGSz0f50Mr9OBGEv9OMzez/j3T5\np/5GCozO6qeOuEIRLAI7Aab4N0tts8qFMrkuuv1tvqb/Yo6uoz81bVnl5abcJAHx\nX82H2KcJOUoWqhETIn54mIpAb/diHVibiyx+bI7EMt98+DXSZ7anw1YqccutpvIc\nv13c9G4pMuLMTbBralGeZiRrRycRLwp/QhcsjgPVrXTVFFyWb18vLDU4MGyouec=\n=laE+\n-----END PGP SIGNATURE-----",
        "payload": "tree 71266d8ba79005cb0d515cd3787ca7552a5bba04\nparent 9edda0c5f5f20bc6b302ad51fa5ec40ed9da184d\nparent 1f668b646806f94acd851acdbd9939c24e0492d3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1499758236 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1499758731 +0200\n\nMerge #10179: Give CValidationInterface Support for calling notifications on the CScheduler Thread\n\n1f668b6 Expose if CScheduler is being serviced, assert its not in EmptyQueue (Matt Corallo)\n3192975 Flush CValidationInterface callbacks prior to destruction (Matt Corallo)\n08096bb Support more than one CScheduler thread for serial clients (Matt Corallo)\n2fbf2db Add default arg to CScheduler to schedule() a callback now (Matt Corallo)\ncda1429 Give CMainSignals a reference to the global scheduler (Matt Corallo)\n3a19fed Make ValidationInterface signals-type-agnostic (Matt Corallo)\nff6a834 Use TestingSetup to DRY qt rpcnestedtests (Matt Corallo)\n\nTree-SHA512: fab91e34e30b080ed4d0a6d8c1214910e383c45440676e37be61d0bde6ae98d61e8903d22b846e95ba4e73a6ce788798350266feba246d8a2ab357e8523e4ac5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21ed30a314cf2118bd4719c6a09985f69fd25dbf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/21ed30a314cf2118bd4719c6a09985f69fd25dbf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21ed30a314cf2118bd4719c6a09985f69fd25dbf/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9edda0c5f5f20bc6b302ad51fa5ec40ed9da184d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9edda0c5f5f20bc6b302ad51fa5ec40ed9da184d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9edda0c5f5f20bc6b302ad51fa5ec40ed9da184d"
      },
      {
        "sha": "1f668b646806f94acd851acdbd9939c24e0492d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f668b646806f94acd851acdbd9939c24e0492d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f668b646806f94acd851acdbd9939c24e0492d3"
      }
    ],
    "stats": {
      "total": 347,
      "additions": 274,
      "deletions": 73
    },
    "files": [
      {
        "sha": "12f29a4ca877f05bf6a0c63fd28823f62deff576",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21ed30a314cf2118bd4719c6a09985f69fd25dbf/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21ed30a314cf2118bd4719c6a09985f69fd25dbf/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=21ed30a314cf2118bd4719c6a09985f69fd25dbf",
        "patch": "@@ -215,6 +215,19 @@ void Shutdown()\n         fFeeEstimatesInitialized = false;\n     }\n \n+    // FlushStateToDisk generates a SetBestChain callback, which we should avoid missing\n+    FlushStateToDisk();\n+\n+    // After there are no more peers/RPC left to give us new data which may generate\n+    // CValidationInterface callbacks, flush them...\n+    GetMainSignals().FlushBackgroundCallbacks();\n+\n+    // Any future callbacks will be dropped. This should absolutely be safe - if\n+    // missing a callback results in an unrecoverable situation, unclean shutdown\n+    // would too. The only reason to do the above flushes is to let the wallet catch\n+    // up with our current chain to avoid any strange pruning edge cases and make\n+    // next startup faster by avoiding rescan.\n+\n     {\n         LOCK(cs_main);\n         if (pcoinsTip != NULL) {\n@@ -251,6 +264,7 @@ void Shutdown()\n     }\n #endif\n     UnregisterAllValidationInterfaces();\n+    GetMainSignals().UnregisterBackgroundSignalScheduler();\n #ifdef ENABLE_WALLET\n     for (CWalletRef pwallet : vpwallets) {\n         delete pwallet;\n@@ -1203,6 +1217,8 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     CScheduler::Function serviceLoop = boost::bind(&CScheduler::serviceQueue, &scheduler);\n     threadGroup.create_thread(boost::bind(&TraceThread<CScheduler::Function>, \"scheduler\", serviceLoop));\n \n+    GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n+\n     /* Start the RPC server already.  It will be started in \"warmup\" mode\n      * and not really process calls already (but it will signify connections\n      * that the server is there and will be ready later).  Warmup mode will"
      },
      {
        "sha": "fbad9e544ae8f00acd2f17d48c54f130d226fcf8",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 19,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21ed30a314cf2118bd4719c6a09985f69fd25dbf/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21ed30a314cf2118bd4719c6a09985f69fd25dbf/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=21ed30a314cf2118bd4719c6a09985f69fd25dbf",
        "patch": "@@ -12,6 +12,7 @@\n #include \"rpc/server.h\"\n #include \"rpcconsole.h\"\n #include \"test/testutil.h\"\n+#include \"test/test_bitcoin.h\"\n #include \"univalue.h\"\n #include \"util.h\"\n \n@@ -35,24 +36,15 @@ void RPCNestedTests::rpcNestedTests()\n {\n     // do some test setup\n     // could be moved to a more generic place when we add more tests on QT level\n-    const CChainParams& chainparams = Params();\n-    RegisterAllCoreRPCCommands(tableRPC);\n     tableRPC.appendCommand(\"rpcNestedTest\", &vRPCCommands[0]);\n     ClearDatadirCache();\n     std::string path = QDir::tempPath().toStdString() + \"/\" + strprintf(\"test_bitcoin_qt_%lu_%i\", (unsigned long)GetTime(), (int)(GetRand(100000)));\n     QDir dir(QString::fromStdString(path));\n     dir.mkpath(\".\");\n     ForceSetArg(\"-datadir\", path);\n     //mempool.setSanityCheck(1.0);\n-    pblocktree = new CBlockTreeDB(1 << 20, true);\n-    pcoinsdbview = new CCoinsViewDB(1 << 23, true);\n-    pcoinsTip = new CCoinsViewCache(pcoinsdbview);\n-    InitBlockIndex(chainparams);\n-    {\n-        CValidationState state;\n-        bool ok = ActivateBestChain(state, chainparams);\n-        QVERIFY(ok);\n-    }\n+\n+    TestingSetup test;\n \n     SetRPCWarmupFinished();\n \n@@ -145,13 +137,5 @@ void RPCNestedTests::rpcNestedTests()\n     QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest(abc,,)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n #endif\n \n-    UnloadBlockIndex();\n-    delete pcoinsTip;\n-    pcoinsTip = nullptr;\n-    delete pcoinsdbview;\n-    pcoinsdbview = nullptr;\n-    delete pblocktree;\n-    pblocktree = nullptr;\n-\n     fs::remove_all(fs::path(path));\n }"
      },
      {
        "sha": "36a6d5110d940dd973562324a863c760eb3c76c2",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 0,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21ed30a314cf2118bd4719c6a09985f69fd25dbf/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21ed30a314cf2118bd4719c6a09985f69fd25dbf/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=21ed30a314cf2118bd4719c6a09985f69fd25dbf",
        "patch": "@@ -139,3 +139,69 @@ size_t CScheduler::getQueueInfo(boost::chrono::system_clock::time_point &first,\n     }\n     return result;\n }\n+\n+bool CScheduler::AreThreadsServicingQueue() const {\n+    return nThreadsServicingQueue;\n+}\n+\n+\n+void SingleThreadedSchedulerClient::MaybeScheduleProcessQueue() {\n+    {\n+        LOCK(m_cs_callbacks_pending);\n+        // Try to avoid scheduling too many copies here, but if we\n+        // accidentally have two ProcessQueue's scheduled at once its\n+        // not a big deal.\n+        if (m_are_callbacks_running) return;\n+        if (m_callbacks_pending.empty()) return;\n+    }\n+    m_pscheduler->schedule(std::bind(&SingleThreadedSchedulerClient::ProcessQueue, this));\n+}\n+\n+void SingleThreadedSchedulerClient::ProcessQueue() {\n+    std::function<void (void)> callback;\n+    {\n+        LOCK(m_cs_callbacks_pending);\n+        if (m_are_callbacks_running) return;\n+        if (m_callbacks_pending.empty()) return;\n+        m_are_callbacks_running = true;\n+\n+        callback = std::move(m_callbacks_pending.front());\n+        m_callbacks_pending.pop_front();\n+    }\n+\n+    // RAII the setting of fCallbacksRunning and calling MaybeScheduleProcessQueue\n+    // to ensure both happen safely even if callback() throws.\n+    struct RAIICallbacksRunning {\n+        SingleThreadedSchedulerClient* instance;\n+        RAIICallbacksRunning(SingleThreadedSchedulerClient* _instance) : instance(_instance) {}\n+        ~RAIICallbacksRunning() {\n+            {\n+                LOCK(instance->m_cs_callbacks_pending);\n+                instance->m_are_callbacks_running = false;\n+            }\n+            instance->MaybeScheduleProcessQueue();\n+        }\n+    } raiicallbacksrunning(this);\n+\n+    callback();\n+}\n+\n+void SingleThreadedSchedulerClient::AddToProcessQueue(std::function<void (void)> func) {\n+    assert(m_pscheduler);\n+\n+    {\n+        LOCK(m_cs_callbacks_pending);\n+        m_callbacks_pending.emplace_back(std::move(func));\n+    }\n+    MaybeScheduleProcessQueue();\n+}\n+\n+void SingleThreadedSchedulerClient::EmptyQueue() {\n+    assert(!m_pscheduler->AreThreadsServicingQueue());\n+    bool should_continue = true;\n+    while (should_continue) {\n+        ProcessQueue();\n+        LOCK(m_cs_callbacks_pending);\n+        should_continue = !m_callbacks_pending.empty();\n+    }\n+}"
      },
      {
        "sha": "0365d668b209b85eeedb6e1d51e60649d6b57692",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 32,
        "deletions": 1,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21ed30a314cf2118bd4719c6a09985f69fd25dbf/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21ed30a314cf2118bd4719c6a09985f69fd25dbf/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=21ed30a314cf2118bd4719c6a09985f69fd25dbf",
        "patch": "@@ -14,6 +14,8 @@\n #include <boost/thread.hpp>\n #include <map>\n \n+#include \"sync.h\"\n+\n //\n // Simple class for background tasks that should be run\n // periodically or once \"after a while\"\n@@ -41,7 +43,7 @@ class CScheduler\n     typedef std::function<void(void)> Function;\n \n     // Call func at/after time t\n-    void schedule(Function f, boost::chrono::system_clock::time_point t);\n+    void schedule(Function f, boost::chrono::system_clock::time_point t=boost::chrono::system_clock::now());\n \n     // Convenience method: call f once deltaSeconds from now\n     void scheduleFromNow(Function f, int64_t deltaMilliSeconds);\n@@ -69,6 +71,9 @@ class CScheduler\n     size_t getQueueInfo(boost::chrono::system_clock::time_point &first,\n                         boost::chrono::system_clock::time_point &last) const;\n \n+    // Returns true if there are threads actively running in serviceQueue()\n+    bool AreThreadsServicingQueue() const;\n+\n private:\n     std::multimap<boost::chrono::system_clock::time_point, Function> taskQueue;\n     boost::condition_variable newTaskScheduled;\n@@ -79,4 +84,30 @@ class CScheduler\n     bool shouldStop() { return stopRequested || (stopWhenEmpty && taskQueue.empty()); }\n };\n \n+/**\n+ * Class used by CScheduler clients which may schedule multiple jobs\n+ * which are required to be run serially. Does not require such jobs\n+ * to be executed on the same thread, but no two jobs will be executed\n+ * at the same time.\n+ */\n+class SingleThreadedSchedulerClient {\n+private:\n+    CScheduler *m_pscheduler;\n+\n+    CCriticalSection m_cs_callbacks_pending;\n+    std::list<std::function<void (void)>> m_callbacks_pending;\n+    bool m_are_callbacks_running = false;\n+\n+    void MaybeScheduleProcessQueue();\n+    void ProcessQueue();\n+\n+public:\n+    SingleThreadedSchedulerClient(CScheduler *pschedulerIn) : m_pscheduler(pschedulerIn) {}\n+    void AddToProcessQueue(std::function<void (void)> func);\n+\n+    // Processes all remaining queue members on the calling thread, blocking until queue is empty\n+    // Must be called after the CScheduler has no remaining processing threads!\n+    void EmptyQueue();\n+};\n+\n #endif"
      },
      {
        "sha": "3ba81ed17b5e7ed53582aff9df7e8e3eb981844d",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21ed30a314cf2118bd4719c6a09985f69fd25dbf/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21ed30a314cf2118bd4719c6a09985f69fd25dbf/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=21ed30a314cf2118bd4719c6a09985f69fd25dbf",
        "patch": "@@ -62,6 +62,12 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n         pathTemp = GetTempPath() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(InsecureRandRange(100000)));\n         fs::create_directories(pathTemp);\n         ForceSetArg(\"-datadir\", pathTemp.string());\n+\n+        // Note that because we don't bother running a scheduler thread here,\n+        // callbacks via CValidationInterface are unreliable, but that's OK,\n+        // our unit tests aren't testing multiple parts of the code at once.\n+        GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n+\n         mempool.setSanityCheck(1.0);\n         pblocktree = new CBlockTreeDB(1 << 20, true);\n         pcoinsdbview = new CCoinsViewDB(1 << 23, true);\n@@ -88,6 +94,8 @@ TestingSetup::~TestingSetup()\n         UnregisterNodeSignals(GetNodeSignals());\n         threadGroup.interrupt_all();\n         threadGroup.join_all();\n+        GetMainSignals().FlushBackgroundCallbacks();\n+        GetMainSignals().UnregisterBackgroundSignalScheduler();\n         UnloadBlockIndex();\n         delete pcoinsTip;\n         delete pcoinsdbview;"
      },
      {
        "sha": "dd3b13c8c8944d80e3ece2e3e9e57bd907c31bb7",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21ed30a314cf2118bd4719c6a09985f69fd25dbf/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21ed30a314cf2118bd4719c6a09985f69fd25dbf/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=21ed30a314cf2118bd4719c6a09985f69fd25dbf",
        "patch": "@@ -10,6 +10,7 @@\n #include \"key.h\"\n #include \"pubkey.h\"\n #include \"random.h\"\n+#include \"scheduler.h\"\n #include \"txdb.h\"\n #include \"txmempool.h\"\n \n@@ -53,6 +54,7 @@ struct TestingSetup: public BasicTestingSetup {\n     fs::path pathTemp;\n     boost::thread_group threadGroup;\n     CConnman* connman;\n+    CScheduler scheduler;\n \n     TestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n     ~TestingSetup();"
      },
      {
        "sha": "bf20d606f833bf033df5787f210b606b8209dae2",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 104,
        "deletions": 27,
        "changes": 131,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21ed30a314cf2118bd4719c6a09985f69fd25dbf/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21ed30a314cf2118bd4719c6a09985f69fd25dbf/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=21ed30a314cf2118bd4719c6a09985f69fd25dbf",
        "patch": "@@ -4,46 +4,123 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+#include \"init.h\"\n+#include \"scheduler.h\"\n+#include \"sync.h\"\n+#include \"util.h\"\n+\n+#include <list>\n+#include <atomic>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+struct MainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    SingleThreadedSchedulerClient m_schedulerClient;\n+\n+    MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+};\n \n static CMainSignals g_signals;\n \n+void CMainSignals::RegisterBackgroundSignalScheduler(CScheduler& scheduler) {\n+    assert(!m_internals);\n+    m_internals.reset(new MainSignalsInstance(&scheduler));\n+}\n+\n+void CMainSignals::UnregisterBackgroundSignalScheduler() {\n+    m_internals.reset(nullptr);\n+}\n+\n+void CMainSignals::FlushBackgroundCallbacks() {\n+    m_internals->m_schedulerClient.EmptyQueue();\n+}\n+\n CMainSignals& GetMainSignals()\n {\n     return g_signals;\n }\n \n void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n-    g_signals.UpdatedBlockTip.connect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n-    g_signals.TransactionAddedToMempool.connect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n-    g_signals.BlockConnected.connect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n-    g_signals.BlockDisconnected.connect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n-    g_signals.SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n-    g_signals.Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n-    g_signals.Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n-    g_signals.BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n-    g_signals.NewPoWValidBlock.connect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n+    g_signals.m_internals->UpdatedBlockTip.connect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n+    g_signals.m_internals->TransactionAddedToMempool.connect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n+    g_signals.m_internals->BlockConnected.connect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n+    g_signals.m_internals->BlockDisconnected.connect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n+    g_signals.m_internals->SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n+    g_signals.m_internals->Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n+    g_signals.m_internals->Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n+    g_signals.m_internals->BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n+    g_signals.m_internals->NewPoWValidBlock.connect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n }\n \n void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n-    g_signals.BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n-    g_signals.Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n-    g_signals.Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n-    g_signals.SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n-    g_signals.TransactionAddedToMempool.disconnect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n-    g_signals.BlockConnected.disconnect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n-    g_signals.BlockDisconnected.disconnect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n-    g_signals.UpdatedBlockTip.disconnect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n-    g_signals.NewPoWValidBlock.disconnect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n+    g_signals.m_internals->BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n+    g_signals.m_internals->Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n+    g_signals.m_internals->Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n+    g_signals.m_internals->SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n+    g_signals.m_internals->TransactionAddedToMempool.disconnect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n+    g_signals.m_internals->BlockConnected.disconnect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n+    g_signals.m_internals->BlockDisconnected.disconnect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n+    g_signals.m_internals->UpdatedBlockTip.disconnect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n+    g_signals.m_internals->NewPoWValidBlock.disconnect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n }\n \n void UnregisterAllValidationInterfaces() {\n-    g_signals.BlockChecked.disconnect_all_slots();\n-    g_signals.Broadcast.disconnect_all_slots();\n-    g_signals.Inventory.disconnect_all_slots();\n-    g_signals.SetBestChain.disconnect_all_slots();\n-    g_signals.TransactionAddedToMempool.disconnect_all_slots();\n-    g_signals.BlockConnected.disconnect_all_slots();\n-    g_signals.BlockDisconnected.disconnect_all_slots();\n-    g_signals.UpdatedBlockTip.disconnect_all_slots();\n-    g_signals.NewPoWValidBlock.disconnect_all_slots();\n+    g_signals.m_internals->BlockChecked.disconnect_all_slots();\n+    g_signals.m_internals->Broadcast.disconnect_all_slots();\n+    g_signals.m_internals->Inventory.disconnect_all_slots();\n+    g_signals.m_internals->SetBestChain.disconnect_all_slots();\n+    g_signals.m_internals->TransactionAddedToMempool.disconnect_all_slots();\n+    g_signals.m_internals->BlockConnected.disconnect_all_slots();\n+    g_signals.m_internals->BlockDisconnected.disconnect_all_slots();\n+    g_signals.m_internals->UpdatedBlockTip.disconnect_all_slots();\n+    g_signals.m_internals->NewPoWValidBlock.disconnect_all_slots();\n+}\n+\n+void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n+    m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n+}\n+\n+void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n+    m_internals->TransactionAddedToMempool(ptx);\n+}\n+\n+void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n+    m_internals->BlockConnected(pblock, pindex, vtxConflicted);\n+}\n+\n+void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock> &pblock) {\n+    m_internals->BlockDisconnected(pblock);\n+}\n+\n+void CMainSignals::SetBestChain(const CBlockLocator &locator) {\n+    m_internals->SetBestChain(locator);\n+}\n+\n+void CMainSignals::Inventory(const uint256 &hash) {\n+    m_internals->Inventory(hash);\n+}\n+\n+void CMainSignals::Broadcast(int64_t nBestBlockTime, CConnman* connman) {\n+    m_internals->Broadcast(nBestBlockTime, connman);\n+}\n+\n+void CMainSignals::BlockChecked(const CBlock& block, const CValidationState& state) {\n+    m_internals->BlockChecked(block, state);\n+}\n+\n+void CMainSignals::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock> &block) {\n+    m_internals->NewPoWValidBlock(pindex, block);\n }"
      },
      {
        "sha": "568da66df283c002c17b2ab8c46608c76980e9d5",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 43,
        "deletions": 26,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21ed30a314cf2118bd4719c6a09985f69fd25dbf/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21ed30a314cf2118bd4719c6a09985f69fd25dbf/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=21ed30a314cf2118bd4719c6a09985f69fd25dbf",
        "patch": "@@ -6,7 +6,6 @@\n #ifndef BITCOIN_VALIDATIONINTERFACE_H\n #define BITCOIN_VALIDATIONINTERFACE_H\n \n-#include <boost/signals2/signal.hpp>\n #include <memory>\n \n #include \"primitives/transaction.h\" // CTransaction(Ref)\n@@ -20,6 +19,7 @@ class CReserveScript;\n class CValidationInterface;\n class CValidationState;\n class uint256;\n+class CScheduler;\n \n // These functions dispatch to one or all registered wallets\n \n@@ -32,49 +32,66 @@ void UnregisterAllValidationInterfaces();\n \n class CValidationInterface {\n protected:\n-    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n-    virtual void TransactionAddedToMempool(const CTransactionRef &ptxn) {}\n-    virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex, const std::vector<CTransactionRef> &txnConflicted) {}\n-    virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block) {}\n-    virtual void SetBestChain(const CBlockLocator &locator) {}\n-    virtual void Inventory(const uint256 &hash) {}\n-    virtual void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) {}\n-    virtual void BlockChecked(const CBlock&, const CValidationState&) {}\n-    virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};\n-    friend void ::RegisterValidationInterface(CValidationInterface*);\n-    friend void ::UnregisterValidationInterface(CValidationInterface*);\n-    friend void ::UnregisterAllValidationInterfaces();\n-};\n-\n-struct CMainSignals {\n     /** Notifies listeners of updated block chain tip */\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n     /** Notifies listeners of a transaction having been added to mempool. */\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    virtual void TransactionAddedToMempool(const CTransactionRef &ptxn) {}\n     /**\n      * Notifies listeners of a block being connected.\n      * Provides a vector of transactions evicted from the mempool as a result.\n      */\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef> &)> BlockConnected;\n+    virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex, const std::vector<CTransactionRef> &txnConflicted) {}\n     /** Notifies listeners of a block being disconnected */\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n-    /** Notifies listeners of a new active block chain. */\n-    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block) {}\n+    /** Notifies listeners of the new active block chain on-disk. */\n+    virtual void SetBestChain(const CBlockLocator &locator) {}\n     /** Notifies listeners about an inventory item being seen on the network. */\n-    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    virtual void Inventory(const uint256 &hash) {}\n     /** Tells listeners to broadcast their data. */\n-    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    virtual void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) {}\n     /**\n      * Notifies listeners of a block validation result.\n      * If the provided CValidationState IsValid, the provided block\n      * is guaranteed to be the current best block at the time the\n      * callback was generated (not necessarily now)\n      */\n-    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    virtual void BlockChecked(const CBlock&, const CValidationState&) {}\n     /**\n      * Notifies listeners that a block which builds directly on our current tip\n      * has been received and connected to the headers tree, though not validated yet */\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+    virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};\n+    friend void ::RegisterValidationInterface(CValidationInterface*);\n+    friend void ::UnregisterValidationInterface(CValidationInterface*);\n+    friend void ::UnregisterAllValidationInterfaces();\n+};\n+\n+struct MainSignalsInstance;\n+class CMainSignals {\n+private:\n+    std::unique_ptr<MainSignalsInstance> m_internals;\n+\n+    friend void ::RegisterValidationInterface(CValidationInterface*);\n+    friend void ::UnregisterValidationInterface(CValidationInterface*);\n+    friend void ::UnregisterAllValidationInterfaces();\n+\n+public:\n+    /** Register a CScheduler to give callbacks which should run in the background (may only be called once) */\n+    void RegisterBackgroundSignalScheduler(CScheduler& scheduler);\n+    /** Unregister a CScheduler to give callbacks which should run in the background - these callbacks will now be dropped! */\n+    void UnregisterBackgroundSignalScheduler();\n+    /** Call any remaining callbacks on the calling thread */\n+    void FlushBackgroundCallbacks();\n+\n+    void UpdatedBlockTip(const CBlockIndex *, const CBlockIndex *, bool fInitialDownload);\n+    void TransactionAddedToMempool(const CTransactionRef &);\n+    void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef> &);\n+    void BlockDisconnected(const std::shared_ptr<const CBlock> &);\n+    void UpdatedTransaction(const uint256 &);\n+    void SetBestChain(const CBlockLocator &);\n+    void Inventory(const uint256 &);\n+    void Broadcast(int64_t nBestBlockTime, CConnman* connman);\n+    void BlockChecked(const CBlock&, const CValidationState&);\n+    void NewPoWValidBlock(const CBlockIndex *, const std::shared_ptr<const CBlock>&);\n };\n \n CMainSignals& GetMainSignals();"
      }
    ]
  },
  {
    "sha": "c8e29d7ff0da853d4243c08b34c15fab3dfcc76f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOGUyOWQ3ZmYwZGE4NTNkNDI0M2MwOGIzNGMxNWZhYjNkZmNjNzZm",
    "commit": {
      "author": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2017-07-11T07:37:40Z"
      },
      "committer": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2017-07-11T07:45:42Z"
      },
      "message": "Replace MAX_OPCODE for OP_NOP10.\n\nThat OP_NOP10 is the last executable opcode is a bit of a obscure trivia, and the MAX_OPCODE constant already exists. This merely standardizes use of MAX_OPCODE over OP_NOP10 where it makes sense and is more clear.",
      "tree": {
        "sha": "ba911f0b5dff03e49d7fde7e345b83df39db60c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba911f0b5dff03e49d7fde7e345b83df39db60c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8e29d7ff0da853d4243c08b34c15fab3dfcc76f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8e29d7ff0da853d4243c08b34c15fab3dfcc76f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c8e29d7ff0da853d4243c08b34c15fab3dfcc76f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8e29d7ff0da853d4243c08b34c15fab3dfcc76f/comments",
    "author": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "21ed30a314cf2118bd4719c6a09985f69fd25dbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21ed30a314cf2118bd4719c6a09985f69fd25dbf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/21ed30a314cf2118bd4719c6a09985f69fd25dbf"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "18d02fb913dafa1f70cdec7db7f223f626313598",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8e29d7ff0da853d4243c08b34c15fab3dfcc76f/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8e29d7ff0da853d4243c08b34c15fab3dfcc76f/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=c8e29d7ff0da853d4243c08b34c15fab3dfcc76f",
        "patch": "@@ -27,7 +27,7 @@ CScript ParseScript(const std::string& s)\n \n     if (mapOpNames.empty())\n     {\n-        for (int op = 0; op <= OP_NOP10; op++)\n+        for (int op = 0; op <= MAX_OPCODE; op++)\n         {\n             // Allow OP_RESERVED to get into mapOpNames\n             if (op < OP_NOP && op != OP_RESERVED)"
      },
      {
        "sha": "698e8982312c97a52497ecbcab1e782f1da0bde4",
        "filename": "src/test/data/script_tests.json",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8e29d7ff0da853d4243c08b34c15fab3dfcc76f/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8e29d7ff0da853d4243c08b34c15fab3dfcc76f/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=c8e29d7ff0da853d4243c08b34c15fab3dfcc76f",
        "patch": "@@ -240,7 +240,7 @@\n [\"0\", \"IF NOP10 ENDIF 1\", \"P2SH,STRICTENC,DISCOURAGE_UPGRADABLE_NOPS\", \"OK\",\n  \"Discouraged NOPs are allowed if not executed\"],\n \n-[\"0\", \"IF 0xba ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"OK\", \"opcodes above NOP10 invalid if executed\"],\n+[\"0\", \"IF 0xba ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"OK\", \"opcodes above MAX_OPCODE invalid if executed\"],\n [\"0\", \"IF 0xbb ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"OK\"],\n [\"0\", \"IF 0xbc ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"OK\"],\n [\"0\", \"IF 0xbd ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"OK\"],\n@@ -878,7 +878,7 @@\n  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\", \"Discouraged NOP10 in redeemScript\"],\n \n [\"0x50\",\"1\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"opcode 0x50 is reserved\"],\n-[\"1\", \"IF 0xba ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"opcodes above NOP10 invalid if executed\"],\n+[\"1\", \"IF 0xba ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"opcodes above MAX_OPCODE invalid if executed\"],\n [\"1\", \"IF 0xbb ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n [\"1\", \"IF 0xbc ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n [\"1\", \"IF 0xbd ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n@@ -1001,7 +1001,7 @@\n [\"1\",\"RESERVED\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_RESERVED is reserved\"],\n [\"1\",\"RESERVED1\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_RESERVED1 is reserved\"],\n [\"1\",\"RESERVED2\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_RESERVED2 is reserved\"],\n-[\"1\",\"0xba\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"0xba == OP_NOP10 + 1\"],\n+[\"1\",\"0xba\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"0xba == MAX_OPCODE + 1\"],\n \n [\"2147483648\", \"1ADD 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"We cannot do math on 5-byte integers\"],\n [\"2147483648\", \"NEGATE 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"We cannot do math on 5-byte integers\"],"
      }
    ]
  },
  {
    "sha": "379aed0e53a6cb09d560cc9a159d29cfe0668f67",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNzlhZWQwZTUzYTZjYjA5ZDU2MGNjOWExNTlkMjljZmUwNjY4ZjY3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-11T09:39:53Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-11T09:43:37Z"
      },
      "message": "Merge #10676: document script-based return fields for validateaddress\n\nf2f1d0a document script-based return fields for validateaddress (Gregory Sanders)\n\nTree-SHA512: 3310bb82b63ef20e46dd7ebcc9e15828cc7b6767ef19ddd869eeb5e4ee5b31ee307d21a44a9c81dbfe9d031bd48219e3ee1d330fc7b343d63d5365b68639c062",
      "tree": {
        "sha": "101cf700f5ff93b31628ff35cf5eb4429937f599",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/101cf700f5ff93b31628ff35cf5eb4429937f599"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/379aed0e53a6cb09d560cc9a159d29cfe0668f67",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZZJ3JAAoJEB5K7WKYbNJdpVsH/2vXJNcUeRojCKE3JCX+waFl\nubseQ5T3w52H4ytBHVLmJQJmt268TO3nzc0WJGDIf14ynQ1zTRseOl6cvYNEivb+\nEaHYxRirUN16eBIjr8ZFd46GtOr956JcI7RRlg1ya9tR7HKBmtfrHBrL6urGCzMy\n4/71miip0KASvjZxU5QzCbDoda9rKG6hpU9JhhzkqJo/qwF5UsmvPZaxcazf9VGr\nVyIK7gd4lB68x1DDKtsz8om7az2ZUOutRLsiENUabyHYes6XnYbnO7peW+aJZNCJ\nSSs5xXAzRUAIlLBaSZwoWJXE0KqnlmMqyPEuIpQmrTxhtW71sU4vZeewDGU3yUw=\n=ZVDR\n-----END PGP SIGNATURE-----",
        "payload": "tree 101cf700f5ff93b31628ff35cf5eb4429937f599\nparent 21ed30a314cf2118bd4719c6a09985f69fd25dbf\nparent f2f1d0a83e176f5fa105becdaa6398ec993630f0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1499765993 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1499766217 +0200\n\nMerge #10676: document script-based return fields for validateaddress\n\nf2f1d0a document script-based return fields for validateaddress (Gregory Sanders)\n\nTree-SHA512: 3310bb82b63ef20e46dd7ebcc9e15828cc7b6767ef19ddd869eeb5e4ee5b31ee307d21a44a9c81dbfe9d031bd48219e3ee1d330fc7b343d63d5365b68639c062\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/379aed0e53a6cb09d560cc9a159d29cfe0668f67",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/379aed0e53a6cb09d560cc9a159d29cfe0668f67",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/379aed0e53a6cb09d560cc9a159d29cfe0668f67/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "21ed30a314cf2118bd4719c6a09985f69fd25dbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21ed30a314cf2118bd4719c6a09985f69fd25dbf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/21ed30a314cf2118bd4719c6a09985f69fd25dbf"
      },
      {
        "sha": "f2f1d0a83e176f5fa105becdaa6398ec993630f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2f1d0a83e176f5fa105becdaa6398ec993630f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2f1d0a83e176f5fa105becdaa6398ec993630f0"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fcbbe1ceed0dfa7706ee33d45547f7d4756d21d2",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/379aed0e53a6cb09d560cc9a159d29cfe0668f67/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/379aed0e53a6cb09d560cc9a159d29cfe0668f67/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=379aed0e53a6cb09d560cc9a159d29cfe0668f67",
        "patch": "@@ -174,6 +174,14 @@ UniValue validateaddress(const JSONRPCRequest& request)\n             \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n             \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n             \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"\n+            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n+            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript\\n\"\n+            \"    [\\n\"\n+            \"      \\\"address\\\"\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output\\n\"\n             \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n             \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n             \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. The account associated with the address, \\\"\\\" is the default account\\n\""
      }
    ]
  },
  {
    "sha": "104f5f21dc2413254dc9ae3651e10a5c0730c951",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDRmNWYyMWRjMjQxMzI1NGRjOWFlMzY1MWUxMGE1YzA3MzBjOTUx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-11T09:57:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-11T09:58:02Z"
      },
      "message": "Merge #10589: More economical fee estimates for RBF and RPC options to control\n\nf135923 Add RPC options for RBF, confirmation target, and conservative fee estimation. (Alex Morcos)\nf0bf33d Change default fee estimation mode. (Alex Morcos)\ne0738e3 remove default argument from estimateSmartFee (Alex Morcos)\nd507c30 Introduce a fee estimate mode. (Alex Morcos)\ncfaef69 remove default argument from GetMinimumFee (Alex Morcos)\n\nTree-SHA512: 49c3a49a6893790a7e8b4e93a48f123dd5307af26c2017800683b76b4df8fc904ba73402917878676242c7440e3e04288d0c1ff3c2c907418724efc03cedab50",
      "tree": {
        "sha": "b0d3c7fccbf83db686143c351acd75b6fcf480d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b0d3c7fccbf83db686143c351acd75b6fcf480d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/104f5f21dc2413254dc9ae3651e10a5c0730c951",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZZKEqAAoJEB5K7WKYbNJdfpwH/3bAW4/ZubUiy3EPYip6sFVb\nnosZ29T3qMqa0dqACO8CeX1SiIdEDURGnXjkGz7tLJbIjT50WZkOMhyrjLc3dEAu\ny21/ciABdhKEZTteCNvpC4WdyfDXAyGdVgIOkVVW2brQwSmB+naqbw4cS2G6qURe\nRqprN4bHtXV+13BjN3HETBc5mYWGvw6czA3gw4cFk3jqWREZiONBHkAZWTdY4zAm\nRrhfusA6V6K/e3ac8Tc90BcFHhzEi9UH3hjtVy8d8zITOEGREcJmfO/JYgbIP+Yg\nZ6Q1Vd3YTFfp/O0sY5DPruNDjfBAy8Wca6PbjGCDxx5izyWZXTqHCd0QaQXVoeg=\n=RjWX\n-----END PGP SIGNATURE-----",
        "payload": "tree b0d3c7fccbf83db686143c351acd75b6fcf480d0\nparent 379aed0e53a6cb09d560cc9a159d29cfe0668f67\nparent f135923ee2cf1a1a9a436626dc5b9219f8ad97da\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1499767044 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1499767082 +0200\n\nMerge #10589: More economical fee estimates for RBF and RPC options to control\n\nf135923 Add RPC options for RBF, confirmation target, and conservative fee estimation. (Alex Morcos)\nf0bf33d Change default fee estimation mode. (Alex Morcos)\ne0738e3 remove default argument from estimateSmartFee (Alex Morcos)\nd507c30 Introduce a fee estimate mode. (Alex Morcos)\ncfaef69 remove default argument from GetMinimumFee (Alex Morcos)\n\nTree-SHA512: 49c3a49a6893790a7e8b4e93a48f123dd5307af26c2017800683b76b4df8fc904ba73402917878676242c7440e3e04288d0c1ff3c2c907418724efc03cedab50\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/104f5f21dc2413254dc9ae3651e10a5c0730c951",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/104f5f21dc2413254dc9ae3651e10a5c0730c951",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/104f5f21dc2413254dc9ae3651e10a5c0730c951/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "379aed0e53a6cb09d560cc9a159d29cfe0668f67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/379aed0e53a6cb09d560cc9a159d29cfe0668f67",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/379aed0e53a6cb09d560cc9a159d29cfe0668f67"
      },
      {
        "sha": "f135923ee2cf1a1a9a436626dc5b9219f8ad97da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f135923ee2cf1a1a9a436626dc5b9219f8ad97da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f135923ee2cf1a1a9a436626dc5b9219f8ad97da"
      }
    ],
    "stats": {
      "total": 185,
      "additions": 157,
      "deletions": 28
    },
    "files": [
      {
        "sha": "c39a2d55c383405e8ab1db4580e919594051bcae",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/104f5f21dc2413254dc9ae3651e10a5c0730c951/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/104f5f21dc2413254dc9ae3651e10a5c0730c951/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=104f5f21dc2413254dc9ae3651e10a5c0730c951",
        "patch": "@@ -36,6 +36,20 @@ std::string StringForFeeReason(FeeReason reason) {\n     return reason_string->second;\n }\n \n+bool FeeModeFromString(const std::string& mode_string, FeeEstimateMode& fee_estimate_mode) {\n+    static const std::map<std::string, FeeEstimateMode> fee_modes = {\n+        {\"UNSET\", FeeEstimateMode::UNSET},\n+        {\"ECONOMICAL\", FeeEstimateMode::ECONOMICAL},\n+        {\"CONSERVATIVE\", FeeEstimateMode::CONSERVATIVE},\n+    };\n+    auto mode = fee_modes.find(mode_string);\n+\n+    if (mode == fee_modes.end()) return false;\n+\n+    fee_estimate_mode = mode->second;\n+    return true;\n+}\n+\n /**\n  * We will instantiate an instance of this class to track transactions that were\n  * included in a block. We will lump transactions into a bucket according to their"
      },
      {
        "sha": "fea279e47785e87a9ff9fb3ce286bd16c696ac71",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/104f5f21dc2413254dc9ae3651e10a5c0730c951/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/104f5f21dc2413254dc9ae3651e10a5c0730c951/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=104f5f21dc2413254dc9ae3651e10a5c0730c951",
        "patch": "@@ -90,6 +90,15 @@ enum class FeeReason {\n \n std::string StringForFeeReason(FeeReason reason);\n \n+/* Used to determine type of fee estimation requested */\n+enum class FeeEstimateMode {\n+    UNSET,        //! Use default settings based on other criteria\n+    ECONOMICAL,   //! Force estimateSmartFee to use non-conservative estimates\n+    CONSERVATIVE, //! Force estimateSmartFee to use conservative estimates\n+};\n+\n+bool FeeModeFromString(const std::string& mode_string, FeeEstimateMode& fee_estimate_mode);\n+\n /* Used to return detailed information about a feerate bucket */\n struct EstimatorBucket\n {\n@@ -197,7 +206,7 @@ class CBlockPolicyEstimator\n      *  the closest target where one can be given.  'conservative' estimates are\n      *  valid over longer time horizons also.\n      */\n-    CFeeRate estimateSmartFee(int confTarget, FeeCalculation *feeCalc, const CTxMemPool& pool, bool conservative = true) const;\n+    CFeeRate estimateSmartFee(int confTarget, FeeCalculation *feeCalc, const CTxMemPool& pool, bool conservative) const;\n \n     /** Return a specific fee estimate calculation with a given success\n      * threshold and time horizon, and optionally return detailed data about"
      },
      {
        "sha": "c19420beb5614c5d8982609ad753fc3c656e12f8",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/104f5f21dc2413254dc9ae3651e10a5c0730c951/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/104f5f21dc2413254dc9ae3651e10a5c0730c951/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=104f5f21dc2413254dc9ae3651e10a5c0730c951",
        "patch": "@@ -490,6 +490,8 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         else nBytesInputs += 148;\n     }\n \n+    bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET, coinControl->signalRbf);\n+\n     // calculation\n     if (nQuantity > 0)\n     {\n@@ -510,7 +512,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n                 nBytes -= 34;\n \n         // Fee\n-        nPayFee = CWallet::GetMinimumFee(nBytes, coinControl->nConfirmTarget, ::mempool, ::feeEstimator);\n+        nPayFee = CWallet::GetMinimumFee(nBytes, coinControl->nConfirmTarget, ::mempool, ::feeEstimator, nullptr /* FeeCalculation */, false /* ignoreGlobalPayTxFee */, conservative_estimate);\n \n         if (nPayAmount > 0)\n         {\n@@ -585,7 +587,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     if (payTxFee.GetFeePerK() > 0)\n         dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), payTxFee.GetFeePerK()) / 1000;\n     else {\n-        dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), ::feeEstimator.estimateSmartFee(coinControl->nConfirmTarget, NULL, ::mempool).GetFeePerK()) / 1000;\n+        dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), ::feeEstimator.estimateSmartFee(coinControl->nConfirmTarget, NULL, ::mempool, conservative_estimate).GetFeePerK()) / 1000;\n     }\n     QString toolTip4 = tr(\"Can vary +/- %1 satoshi(s) per input.\").arg(dFeeVary);\n "
      },
      {
        "sha": "27634eb179ba0b9fe2d86fb389128da62d5fa568",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/104f5f21dc2413254dc9ae3651e10a5c0730c951/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/104f5f21dc2413254dc9ae3651e10a5c0730c951/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=104f5f21dc2413254dc9ae3651e10a5c0730c951",
        "patch": "@@ -166,6 +166,8 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(updateFeeSectionControls()));\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(updateGlobalFeeVariables()));\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(coinControlUpdateLabels()));\n+        connect(ui->optInRBF, SIGNAL(stateChanged(int)), this, SLOT(updateSmartFeeLabel()));\n+        connect(ui->optInRBF, SIGNAL(stateChanged(int)), this, SLOT(coinControlUpdateLabels()));\n         ui->customFee->setSingleStep(CWallet::GetRequiredFee(1000));\n         updateFeeSectionControls();\n         updateMinFeeLabel();\n@@ -652,7 +654,8 @@ void SendCoinsDialog::updateSmartFeeLabel()\n \n     int nBlocksToConfirm = ui->sliderSmartFee->maximum() - ui->sliderSmartFee->value() + 2;\n     FeeCalculation feeCalc;\n-    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocksToConfirm, &feeCalc, ::mempool);\n+    bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET, ui->optInRBF->isChecked());\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocksToConfirm, &feeCalc, ::mempool, conservative_estimate);\n     if (feeRate <= CFeeRate(0)) // not enough data => minfee\n     {\n         ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(),\n@@ -827,6 +830,7 @@ void SendCoinsDialog::coinControlUpdateLabels()\n     } else {\n         CoinControlDialog::coinControl->nConfirmTarget = model->getDefaultConfirmTarget();\n     }\n+    CoinControlDialog::coinControl->signalRbf = ui->optInRBF->isChecked();\n \n     for(int i = 0; i < ui->entries->count(); ++i)\n     {"
      },
      {
        "sha": "60b55da3e70f22ec905a9d3db52810d67091763f",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/104f5f21dc2413254dc9ae3651e10a5c0730c951/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/104f5f21dc2413254dc9ae3651e10a5c0730c951/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=104f5f21dc2413254dc9ae3651e10a5c0730c951",
        "patch": "@@ -19,6 +19,7 @@\n #include \"keystore.h\"\n #include \"validation.h\"\n #include \"net.h\" // for g_connman\n+#include \"policy/fees.h\"\n #include \"policy/rbf.h\"\n #include \"sync.h\"\n #include \"ui_interface.h\"\n@@ -667,7 +668,7 @@ bool WalletModel::bumpFee(uint256 hash)\n     std::unique_ptr<CFeeBumper> feeBump;\n     {\n         LOCK2(cs_main, wallet->cs_wallet);\n-        feeBump.reset(new CFeeBumper(wallet, hash, nTxConfirmTarget, false, 0, true));\n+        feeBump.reset(new CFeeBumper(wallet, hash, nTxConfirmTarget, false, 0, true, FeeEstimateMode::UNSET));\n     }\n     if (feeBump->getResult() != BumpFeeResult::OK)\n     {"
      },
      {
        "sha": "278c4ecc2d101c5240a4303d65c56caaf0b10996",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/104f5f21dc2413254dc9ae3651e10a5c0730c951/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/104f5f21dc2413254dc9ae3651e10a5c0730c951/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=104f5f21dc2413254dc9ae3651e10a5c0730c951",
        "patch": "@@ -37,6 +37,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getnetworkhashps\", 1, \"height\" },\n     { \"sendtoaddress\", 1, \"amount\" },\n     { \"sendtoaddress\", 4, \"subtractfeefromamount\" },\n+    { \"sendtoaddress\", 5 , \"replaceable\" },\n+    { \"sendtoaddress\", 6 , \"conf_target\" },\n     { \"settxfee\", 0, \"amount\" },\n     { \"getreceivedbyaddress\", 1, \"minconf\" },\n     { \"getreceivedbyaccount\", 1, \"minconf\" },\n@@ -69,6 +71,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"sendmany\", 1, \"amounts\" },\n     { \"sendmany\", 2, \"minconf\" },\n     { \"sendmany\", 4, \"subtractfeefrom\" },\n+    { \"sendmany\", 5 , \"replaceable\" },\n+    { \"sendmany\", 6 , \"conf_target\" },\n     { \"addmultisigaddress\", 0, \"nrequired\" },\n     { \"addmultisigaddress\", 1, \"keys\" },\n     { \"createmultisig\", 0, \"nrequired\" },"
      },
      {
        "sha": "8cdd392109633bff26cfb35f66d5f09bc8e8b0e9",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/104f5f21dc2413254dc9ae3651e10a5c0730c951/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/104f5f21dc2413254dc9ae3651e10a5c0730c951/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=104f5f21dc2413254dc9ae3651e10a5c0730c951",
        "patch": "@@ -184,8 +184,8 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     mpool.TrimToSize(1);\n     BOOST_CHECK(mpool.GetMinFee(1).GetFeePerK() > feeV[5]);\n     for (int i = 1; i < 10; i++) {\n-        BOOST_CHECK(feeEst.estimateSmartFee(i, NULL, mpool).GetFeePerK() >= feeEst.estimateRawFee(i, 0.85, FeeEstimateHorizon::MED_HALFLIFE).GetFeePerK());\n-        BOOST_CHECK(feeEst.estimateSmartFee(i, NULL, mpool).GetFeePerK() >= mpool.GetMinFee(1).GetFeePerK());\n+        BOOST_CHECK(feeEst.estimateSmartFee(i, NULL, mpool, true).GetFeePerK() >= feeEst.estimateRawFee(i, 0.85, FeeEstimateHorizon::MED_HALFLIFE).GetFeePerK());\n+        BOOST_CHECK(feeEst.estimateSmartFee(i, NULL, mpool, true).GetFeePerK() >= mpool.GetMinFee(1).GetFeePerK());\n     }\n }\n "
      },
      {
        "sha": "bdd01bec12acd3fb58786a5fa0b82c56d5bc1bb7",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/104f5f21dc2413254dc9ae3651e10a5c0730c951/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/104f5f21dc2413254dc9ae3651e10a5c0730c951/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=104f5f21dc2413254dc9ae3651e10a5c0730c951",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_WALLET_COINCONTROL_H\n \n #include \"policy/feerate.h\"\n+#include \"policy/fees.h\"\n #include \"primitives/transaction.h\"\n #include \"wallet/wallet.h\"\n \n@@ -26,6 +27,8 @@ class CCoinControl\n     int nConfirmTarget;\n     //! Signal BIP-125 replace by fee.\n     bool signalRbf;\n+    //! Fee estimation mode to control arguments to estimateSmartFee\n+    FeeEstimateMode m_fee_mode;\n \n     CCoinControl()\n     {\n@@ -42,6 +45,7 @@ class CCoinControl\n         fOverrideFeeRate = false;\n         nConfirmTarget = 0;\n         signalRbf = fWalletRbf;\n+        m_fee_mode = FeeEstimateMode::UNSET;\n     }\n \n     bool HasSelected() const"
      },
      {
        "sha": "607ecf4182b79129cd976f7df0049623cc6af96e",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/104f5f21dc2413254dc9ae3651e10a5c0730c951/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/104f5f21dc2413254dc9ae3651e10a5c0730c951/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=104f5f21dc2413254dc9ae3651e10a5c0730c951",
        "patch": "@@ -66,7 +66,7 @@ bool CFeeBumper::preconditionChecks(const CWallet *pWallet, const CWalletTx& wtx\n     return true;\n }\n \n-CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConfirmTarget, bool ignoreGlobalPayTxFee, CAmount totalFee, bool newTxReplaceable)\n+CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConfirmTarget, bool ignoreGlobalPayTxFee, CAmount totalFee, bool newTxReplaceable, FeeEstimateMode fee_mode)\n     :\n     txid(std::move(txidIn)),\n     nOldFee(0),\n@@ -165,7 +165,8 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n         nNewFee = totalFee;\n         nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n     } else {\n-        nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, ::feeEstimator, nullptr, ignoreGlobalPayTxFee);\n+        bool conservative_estimate = CalculateEstimateType(fee_mode, newTxReplaceable);\n+        nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, ::feeEstimator, nullptr /* FeeCalculation */, ignoreGlobalPayTxFee, conservative_estimate);\n         nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n \n         // New fee rate must be at least old rate + minimum incremental relay rate"
      },
      {
        "sha": "11e2f5f95373df7d1cd19ce223921b70950ea3e4",
        "filename": "src/wallet/feebumper.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/104f5f21dc2413254dc9ae3651e10a5c0730c951/src/wallet/feebumper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/104f5f21dc2413254dc9ae3651e10a5c0730c951/src/wallet/feebumper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.h?ref=104f5f21dc2413254dc9ae3651e10a5c0730c951",
        "patch": "@@ -10,6 +10,7 @@\n class CWallet;\n class CWalletTx;\n class uint256;\n+enum class FeeEstimateMode;\n \n enum class BumpFeeResult\n {\n@@ -24,7 +25,7 @@ enum class BumpFeeResult\n class CFeeBumper\n {\n public:\n-    CFeeBumper(const CWallet *pWalletIn, const uint256 txidIn, int newConfirmTarget, bool ignoreGlobalPayTxFee, CAmount totalFee, bool newTxReplaceable);\n+    CFeeBumper(const CWallet *pWalletIn, const uint256 txidIn, int newConfirmTarget, bool ignoreGlobalPayTxFee, CAmount totalFee, bool newTxReplaceable, FeeEstimateMode fee_mode);\n     BumpFeeResult getResult() const { return currentResult; }\n     const std::vector<std::string>& getErrors() const { return vErrors; }\n     CAmount getOldFee() const { return nOldFee; }"
      },
      {
        "sha": "5f72e3b6f598bb90bbbe0eed377e482eae916d39",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 84,
        "deletions": 14,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/104f5f21dc2413254dc9ae3651e10a5c0730c951/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/104f5f21dc2413254dc9ae3651e10a5c0730c951/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=104f5f21dc2413254dc9ae3651e10a5c0730c951",
        "patch": "@@ -356,7 +356,7 @@ UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n     return ret;\n }\n \n-static void SendMoney(CWallet * const pwallet, const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew)\n+static void SendMoney(CWallet * const pwallet, const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew, CCoinControl *coin_control = nullptr)\n {\n     CAmount curBalance = pwallet->GetBalance();\n \n@@ -382,7 +382,7 @@ static void SendMoney(CWallet * const pwallet, const CTxDestination &address, CA\n     int nChangePosRet = -1;\n     CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n     vecSend.push_back(recipient);\n-    if (!pwallet->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError)) {\n+    if (!pwallet->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError, coin_control)) {\n         if (!fSubtractFeeFromAmount && nValue + nFeeRequired > curBalance)\n             strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s\", FormatMoney(nFeeRequired));\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n@@ -401,9 +401,9 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 5)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 8)\n         throw std::runtime_error(\n-            \"sendtoaddress \\\"address\\\" amount ( \\\"comment\\\" \\\"comment_to\\\" subtractfeefromamount )\\n\"\n+            \"sendtoaddress \\\"address\\\" amount ( \\\"comment\\\" \\\"comment_to\\\" subtractfeefromamount replaceable conf_target \\\"estimate_mode\\\")\\n\"\n             \"\\nSend an amount to a given address.\\n\"\n             + HelpRequiringPassphrase(pwallet) +\n             \"\\nArguments:\\n\"\n@@ -416,6 +416,12 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n             \"                             transaction, just kept in your wallet.\\n\"\n             \"5. subtractfeefromamount  (boolean, optional, default=false) The fee will be deducted from the amount being sent.\\n\"\n             \"                             The recipient will receive less bitcoins than you enter in the amount field.\\n\"\n+            \"6. replaceable            (boolean, optional) Allow this transaction to be replaced by a transaction with higher fees via BIP 125\\n\"\n+            \"7. conf_target            (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"8. \\\"estimate_mode\\\"      (string, optional, default=UNSET) The fee estimate mode, must be one of:\\n\"\n+            \"       \\\"UNSET\\\"\\n\"\n+            \"       \\\"ECONOMICAL\\\"\\n\"\n+            \"       \\\"CONSERVATIVE\\\"\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"txid\\\"                  (string) The transaction id.\\n\"\n             \"\\nExamples:\\n\"\n@@ -444,12 +450,29 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n         wtx.mapValue[\"to\"]      = request.params[3].get_str();\n \n     bool fSubtractFeeFromAmount = false;\n-    if (request.params.size() > 4)\n+    if (request.params.size() > 4 && !request.params[4].isNull()) {\n         fSubtractFeeFromAmount = request.params[4].get_bool();\n+    }\n+\n+    CCoinControl coin_control;\n+    if (request.params.size() > 5 && !request.params[5].isNull()) {\n+        coin_control.signalRbf = request.params[5].get_bool();\n+    }\n+\n+    if (request.params.size() > 6 && !request.params[6].isNull()) {\n+        coin_control.nConfirmTarget = request.params[6].get_int();\n+    }\n+\n+    if (request.params.size() > 7 && !request.params[7].isNull()) {\n+        if (!FeeModeFromString(request.params[7].get_str(), coin_control.m_fee_mode)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n+        }\n+    }\n+\n \n     EnsureWalletIsUnlocked(pwallet);\n \n-    SendMoney(pwallet, address.Get(), nAmount, fSubtractFeeFromAmount, wtx);\n+    SendMoney(pwallet, address.Get(), nAmount, fSubtractFeeFromAmount, wtx, &coin_control);\n \n     return wtx.GetHash().GetHex();\n }\n@@ -888,9 +911,9 @@ UniValue sendmany(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 5)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 8)\n         throw std::runtime_error(\n-            \"sendmany \\\"fromaccount\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] )\\n\"\n+            \"sendmany \\\"fromaccount\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] replaceable conf_target \\\"estimate_mode\\\")\\n\"\n             \"\\nSend multiple times. Amounts are double-precision floating point numbers.\"\n             + HelpRequiringPassphrase(pwallet) + \"\\n\"\n             \"\\nArguments:\\n\"\n@@ -910,7 +933,13 @@ UniValue sendmany(const JSONRPCRequest& request)\n             \"      \\\"address\\\"          (string) Subtract fee from this address\\n\"\n             \"      ,...\\n\"\n             \"    ]\\n\"\n-            \"\\nResult:\\n\"\n+            \"6. replaceable            (boolean, optional) Allow this transaction to be replaced by a transaction with higher fees via BIP 125\\n\"\n+            \"7. conf_target            (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"8. \\\"estimate_mode\\\"      (string, optional, default=UNSET) The fee estimate mode, must be one of:\\n\"\n+            \"       \\\"UNSET\\\"\\n\"\n+            \"       \\\"ECONOMICAL\\\"\\n\"\n+            \"       \\\"CONSERVATIVE\\\"\\n\"\n+             \"\\nResult:\\n\"\n             \"\\\"txid\\\"                   (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n             \"                                    the number of addresses.\\n\"\n             \"\\nExamples:\\n\"\n@@ -942,9 +971,24 @@ UniValue sendmany(const JSONRPCRequest& request)\n         wtx.mapValue[\"comment\"] = request.params[3].get_str();\n \n     UniValue subtractFeeFromAmount(UniValue::VARR);\n-    if (request.params.size() > 4)\n+    if (request.params.size() > 4 && !request.params[4].isNull())\n         subtractFeeFromAmount = request.params[4].get_array();\n \n+    CCoinControl coin_control;\n+    if (request.params.size() > 5 && !request.params[5].isNull()) {\n+        coin_control.signalRbf = request.params[5].get_bool();\n+    }\n+\n+    if (request.params.size() > 6 && !request.params[6].isNull()) {\n+        coin_control.nConfirmTarget = request.params[6].get_int();\n+    }\n+\n+    if (request.params.size() > 7 && !request.params[7].isNull()) {\n+        if (!FeeModeFromString(request.params[7].get_str(), coin_control.m_fee_mode)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n+        }\n+    }\n+\n     std::set<CBitcoinAddress> setAddress;\n     std::vector<CRecipient> vecSend;\n \n@@ -989,7 +1033,7 @@ UniValue sendmany(const JSONRPCRequest& request)\n     CAmount nFeeRequired = 0;\n     int nChangePosRet = -1;\n     std::string strFailReason;\n-    bool fCreated = pwallet->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, nChangePosRet, strFailReason);\n+    bool fCreated = pwallet->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, nChangePosRet, strFailReason, &coin_control);\n     if (!fCreated)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n     CValidationState state;\n@@ -2658,6 +2702,11 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             \"                                  [vout_index,...]\\n\"\n                             \"     \\\"replaceable\\\"            (boolean, optional) Marks this transaction as BIP125 replaceable.\\n\"\n                             \"                              Allows this transaction to be replaced by a transaction with higher fees\\n\"\n+                            \"     \\\"conf_target\\\"            (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"estimate_mode\\\"          (string, optional, default=UNSET) The fee estimate mode, must be one of:\\n\"\n+                            \"         \\\"UNSET\\\"\\n\"\n+                            \"         \\\"ECONOMICAL\\\"\\n\"\n+                            \"         \\\"CONSERVATIVE\\\"\\n\"\n                             \"   }\\n\"\n                             \"                         for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\\n\"\n                             \"\\nResult:\\n\"\n@@ -2710,6 +2759,8 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                 {\"feeRate\", UniValueType()}, // will be checked below\n                 {\"subtractFeeFromOutputs\", UniValueType(UniValue::VARR)},\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+                {\"conf_target\", UniValueType(UniValue::VNUM)},\n+                {\"estimate_mode\", UniValueType(UniValue::VSTR)},\n             },\n             true, true);\n \n@@ -2746,6 +2797,14 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n         if (options.exists(\"replaceable\")) {\n             coinControl.signalRbf = options[\"replaceable\"].get_bool();\n         }\n+        if (options.exists(\"conf_target\")) {\n+            coinControl.nConfirmTarget = options[\"conf_target\"].get_int();\n+        }\n+        if (options.exists(\"estimate_mode\")) {\n+            if (!FeeModeFromString(options[\"estimate_mode\"].get_str(), coinControl.m_fee_mode)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n+            }\n+        }\n       }\n     }\n \n@@ -2823,6 +2882,10 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n             \"                         still be replaceable in practice, for example if it has unconfirmed ancestors which\\n\"\n             \"                         are replaceable).\\n\"\n+            \"     \\\"estimate_mode\\\"     (string, optional, default=UNSET) The fee estimate mode, must be one of:\\n\"\n+            \"         \\\"UNSET\\\"\\n\"\n+            \"         \\\"ECONOMICAL\\\"\\n\"\n+            \"         \\\"CONSERVATIVE\\\"\\n\"\n             \"   }\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n@@ -2845,13 +2908,15 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     int newConfirmTarget = nTxConfirmTarget;\n     CAmount totalFee = 0;\n     bool replaceable = true;\n+    FeeEstimateMode fee_mode = FeeEstimateMode::UNSET;\n     if (request.params.size() > 1) {\n         UniValue options = request.params[1];\n         RPCTypeCheckObj(options,\n             {\n                 {\"confTarget\", UniValueType(UniValue::VNUM)},\n                 {\"totalFee\", UniValueType(UniValue::VNUM)},\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+                {\"estimate_mode\", UniValueType(UniValue::VSTR)},\n             },\n             true, true);\n \n@@ -2876,12 +2941,17 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         if (options.exists(\"replaceable\")) {\n             replaceable = options[\"replaceable\"].get_bool();\n         }\n+        if (options.exists(\"estimate_mode\")) {\n+            if (!FeeModeFromString(options[\"estimate_mode\"].get_str(), fee_mode)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n+            }\n+        }\n     }\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n     EnsureWalletIsUnlocked(pwallet);\n \n-    CFeeBumper feeBump(pwallet, hash, newConfirmTarget, ignoreGlobalPayTxFee, totalFee, replaceable);\n+    CFeeBumper feeBump(pwallet, hash, newConfirmTarget, ignoreGlobalPayTxFee, totalFee, replaceable, fee_mode);\n     BumpFeeResult res = feeBump.getResult();\n     if (res != BumpFeeResult::OK)\n     {\n@@ -3023,8 +3093,8 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"lockunspent\",              &lockunspent,              true,   {\"unlock\",\"transactions\"} },\n     { \"wallet\",             \"move\",                     &movecmd,                  false,  {\"fromaccount\",\"toaccount\",\"amount\",\"minconf\",\"comment\"} },\n     { \"wallet\",             \"sendfrom\",                 &sendfrom,                 false,  {\"fromaccount\",\"toaddress\",\"amount\",\"minconf\",\"comment\",\"comment_to\"} },\n-    { \"wallet\",             \"sendmany\",                 &sendmany,                 false,  {\"fromaccount\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\"} },\n-    { \"wallet\",             \"sendtoaddress\",            &sendtoaddress,            false,  {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\"} },\n+    { \"wallet\",             \"sendmany\",                 &sendmany,                 false,  {\"fromaccount\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n+    { \"wallet\",             \"sendtoaddress\",            &sendtoaddress,            false,  {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n     { \"wallet\",             \"setaccount\",               &setaccount,               true,   {\"address\",\"account\"} },\n     { \"wallet\",             \"settxfee\",                 &settxfee,                 true,   {\"amount\"} },\n     { \"wallet\",             \"signmessage\",              &signmessage,              true,   {\"address\",\"message\"} },"
      },
      {
        "sha": "a1b4eb106eef5649228a93b96bf542f61feab44d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 3,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/104f5f21dc2413254dc9ae3651e10a5c0730c951/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/104f5f21dc2413254dc9ae3651e10a5c0730c951/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=104f5f21dc2413254dc9ae3651e10a5c0730c951",
        "patch": "@@ -2724,7 +2724,10 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 if (coinControl && coinControl->nConfirmTarget > 0)\n                     currentConfirmationTarget = coinControl->nConfirmTarget;\n \n-                CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, ::mempool, ::feeEstimator, &feeCalc);\n+                // Allow to override the default fee estimate mode over the CoinControl instance\n+                bool conservative_estimate = CalculateEstimateType(coinControl ? coinControl->m_fee_mode : FeeEstimateMode::UNSET, rbf);\n+\n+                CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, ::mempool, ::feeEstimator, &feeCalc, false /* ignoreGlobalPayTxFee */, conservative_estimate);\n                 if (coinControl && coinControl->fOverrideFeeRate)\n                     nFeeNeeded = coinControl->nFeeRate.GetFee(nBytes);\n \n@@ -2905,13 +2908,13 @@ CAmount CWallet::GetRequiredFee(unsigned int nTxBytes)\n     return std::max(minTxFee.GetFee(nTxBytes), ::minRelayTxFee.GetFee(nTxBytes));\n }\n \n-CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc, bool ignoreGlobalPayTxFee)\n+CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc, bool ignoreGlobalPayTxFee, bool conservative_estimate)\n {\n     // payTxFee is the user-set global for desired feerate\n     CAmount nFeeNeeded = payTxFee.GetFee(nTxBytes);\n     // User didn't set: use -txconfirmtarget to estimate...\n     if (nFeeNeeded == 0 || ignoreGlobalPayTxFee) {\n-        nFeeNeeded = estimator.estimateSmartFee(nConfirmTarget, feeCalc, pool, true).GetFee(nTxBytes);\n+        nFeeNeeded = estimator.estimateSmartFee(nConfirmTarget, feeCalc, pool, conservative_estimate).GetFee(nTxBytes);\n         // ... unless we don't have enough mempool data for estimatefee, then use fallbackFee\n         if (nFeeNeeded == 0) {\n             nFeeNeeded = fallbackFee.GetFee(nTxBytes);\n@@ -4154,3 +4157,15 @@ bool CMerkleTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState&\n {\n     return ::AcceptToMemoryPool(mempool, state, tx, true, NULL, NULL, false, nAbsurdFee);\n }\n+\n+bool CalculateEstimateType(FeeEstimateMode mode, bool opt_in_rbf) {\n+    switch (mode) {\n+    case FeeEstimateMode::UNSET:\n+        return !opt_in_rbf; // Allow for lower fees if RBF is an option\n+    case FeeEstimateMode::CONSERVATIVE:\n+        return true;\n+    case FeeEstimateMode::ECONOMICAL:\n+        return false;\n+    }\n+    return true;\n+}"
      },
      {
        "sha": "e3715cdf376d356a4791ee53c6d6b84eafb1285c",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/104f5f21dc2413254dc9ae3651e10a5c0730c951/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/104f5f21dc2413254dc9ae3651e10a5c0730c951/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=104f5f21dc2413254dc9ae3651e10a5c0730c951",
        "patch": "@@ -80,6 +80,7 @@ class CTxMemPool;\n class CBlockPolicyEstimator;\n class CWalletTx;\n struct FeeCalculation;\n+enum class FeeEstimateMode;\n \n /** (client) version numbers for particular wallet features */\n enum WalletFeature\n@@ -963,7 +964,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Estimate the minimum fee considering user set parameters\n      * and the required fee\n      */\n-    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc = nullptr, bool ignoreGlobalPayTxFee = false);\n+    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc, bool ignoreGlobalPayTxFee, bool conservative_estimate);\n     /**\n      * Return the minimum required fee taking into account the\n      * floating relay fee and user set minimum transaction fee\n@@ -1211,4 +1212,7 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins\n     }\n     return true;\n }\n+\n+bool CalculateEstimateType(FeeEstimateMode mode, bool opt_in_rbf);\n+\n #endif // BITCOIN_WALLET_WALLET_H"
      }
    ]
  },
  {
    "sha": "e4f226a133d02f2a564bb4ccd886bdb3c0588c16",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNGYyMjZhMTMzZDAyZjJhNTY0YmI0Y2NkODg2YmRiM2MwNTg4YzE2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-11T13:16:38Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-11T13:21:26Z"
      },
      "message": "Merge #10190: [tests] mining functional tests (including regression test for submitblock)\n\n11ba8e9 [tests] rename getblocktemplate_proposals.py to mining.py (John Newbery)\nb29dd41 [tests] add test for submit block (John Newbery)\n9bf0d80 [tests] run successful test in getblocktemplate first (John Newbery)\n82dc597 [tests] don't build blocks manually in getblocktemplate test (John Newbery)\nf82c709 [tests] clarify assertions in getblocktemplate test (John Newbery)\n66c570a [tests] Don't build the coinbase manually in getblocktemplate test (John Newbery)\n38b38cd [tests] getblocktemplate_proposals.py: add logging (John Newbery)\n0a3a5ff [tests] Fix flake8 warnings in getblocktemplate tests (John Newbery)\n32cffe6 [tests] Fix import order in getblocktemplate test (John Newbery)\n\nTree-SHA512: a51a57314fa1c4c4b8a7896492ec6e677b6bed12387060def34a62e9dfbee7961f71bb5553fbd70028be61ae32eccf13fd255fa9651f908e9a5e64c28f43f00e",
      "tree": {
        "sha": "d8ae1afb26e57923ca37841e6e76ed17a5b031da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8ae1afb26e57923ca37841e6e76ed17a5b031da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4f226a133d02f2a564bb4ccd886bdb3c0588c16",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZZNDWAAoJEB5K7WKYbNJdNWsIAJJJeRgfwTPMuEi/js0rY1Cy\nSa2O455ZUiqhAnpCXdrTXTBD4gRBMpzuZr0Zkv3o9usYIysc6rmYB1Lizfi3QAnV\nlb6aS/E6Hm1dfvm6/+/o4I5KeuRu/shOTPRA5d8B6fFZMJBE35QuJ2BIB2mK6A2N\n++frRNqA1hLWQaQZV7Wd5fP7bMxUmd6KOOUpzNPFDNrxJbhjYL0KP7ssrpiEwhSF\n+rPU1Y3mAlclmNGQogtd/LDJpp5dssa7vWvVK01jRj5m6NBLctOSYdmRkmzLWTDG\nF048m4KaT0CInGTImM/Uk5epM3Gl3URPYowt5Y9/Ssm2rkwbqONhWtPvfItY/Zw=\n=ACNL\n-----END PGP SIGNATURE-----",
        "payload": "tree d8ae1afb26e57923ca37841e6e76ed17a5b031da\nparent 104f5f21dc2413254dc9ae3651e10a5c0730c951\nparent 11ba8e9cdd2652835c650b9f72d8421ea10f4116\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1499778998 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1499779286 +0200\n\nMerge #10190: [tests] mining functional tests (including regression test for submitblock)\n\n11ba8e9 [tests] rename getblocktemplate_proposals.py to mining.py (John Newbery)\nb29dd41 [tests] add test for submit block (John Newbery)\n9bf0d80 [tests] run successful test in getblocktemplate first (John Newbery)\n82dc597 [tests] don't build blocks manually in getblocktemplate test (John Newbery)\nf82c709 [tests] clarify assertions in getblocktemplate test (John Newbery)\n66c570a [tests] Don't build the coinbase manually in getblocktemplate test (John Newbery)\n38b38cd [tests] getblocktemplate_proposals.py: add logging (John Newbery)\n0a3a5ff [tests] Fix flake8 warnings in getblocktemplate tests (John Newbery)\n32cffe6 [tests] Fix import order in getblocktemplate test (John Newbery)\n\nTree-SHA512: a51a57314fa1c4c4b8a7896492ec6e677b6bed12387060def34a62e9dfbee7961f71bb5553fbd70028be61ae32eccf13fd255fa9651f908e9a5e64c28f43f00e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4f226a133d02f2a564bb4ccd886bdb3c0588c16",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e4f226a133d02f2a564bb4ccd886bdb3c0588c16",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4f226a133d02f2a564bb4ccd886bdb3c0588c16/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "104f5f21dc2413254dc9ae3651e10a5c0730c951",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/104f5f21dc2413254dc9ae3651e10a5c0730c951",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/104f5f21dc2413254dc9ae3651e10a5c0730c951"
      },
      {
        "sha": "11ba8e9cdd2652835c650b9f72d8421ea10f4116",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11ba8e9cdd2652835c650b9f72d8421ea10f4116",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11ba8e9cdd2652835c650b9f72d8421ea10f4116"
      }
    ],
    "stats": {
      "total": 283,
      "additions": 125,
      "deletions": 158
    },
    "files": [
      {
        "sha": "fca99c7df5715a767e30a31e7946d8ba993b79f5",
        "filename": "test/functional/getblocktemplate_proposals.py",
        "status": "removed",
        "additions": 0,
        "deletions": 157,
        "changes": 157,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/104f5f21dc2413254dc9ae3651e10a5c0730c951/test/functional/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/104f5f21dc2413254dc9ae3651e10a5c0730c951/test/functional/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getblocktemplate_proposals.py?ref=104f5f21dc2413254dc9ae3651e10a5c0730c951",
        "patch": "@@ -1,157 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2014-2016 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test block proposals with getblocktemplate.\"\"\"\n-\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-\n-from binascii import a2b_hex, b2a_hex\n-from hashlib import sha256\n-from struct import pack\n-\n-def b2x(b):\n-    return b2a_hex(b).decode('ascii')\n-\n-# NOTE: This does not work for signed numbers (set the high bit) or zero (use b'\\0')\n-def encodeUNum(n):\n-    s = bytearray(b'\\1')\n-    while n > 127:\n-        s[0] += 1\n-        s.append(n % 256)\n-        n //= 256\n-    s.append(n)\n-    return bytes(s)\n-\n-def varlenEncode(n):\n-    if n < 0xfd:\n-        return pack('<B', n)\n-    if n <= 0xffff:\n-        return b'\\xfd' + pack('<H', n)\n-    if n <= 0xffffffff:\n-        return b'\\xfe' + pack('<L', n)\n-    return b'\\xff' + pack('<Q', n)\n-\n-def dblsha(b):\n-    return sha256(sha256(b).digest()).digest()\n-\n-def genmrklroot(leaflist):\n-    cur = leaflist\n-    while len(cur) > 1:\n-        n = []\n-        if len(cur) & 1:\n-            cur.append(cur[-1])\n-        for i in range(0, len(cur), 2):\n-            n.append(dblsha(cur[i] + cur[i+1]))\n-        cur = n\n-    return cur[0]\n-\n-def template_to_bytearray(tmpl, txlist):\n-    blkver = pack('<L', tmpl['version'])\n-    mrklroot = genmrklroot(list(dblsha(a) for a in txlist))\n-    timestamp = pack('<L', tmpl['curtime'])\n-    nonce = b'\\0\\0\\0\\0'\n-    blk = blkver + a2b_hex(tmpl['previousblockhash'])[::-1] + mrklroot + timestamp + a2b_hex(tmpl['bits'])[::-1] + nonce\n-    blk += varlenEncode(len(txlist))\n-    for tx in txlist:\n-        blk += tx\n-    return bytearray(blk)\n-\n-def template_to_hex(tmpl, txlist):\n-    return b2x(template_to_bytearray(tmpl, txlist))\n-\n-def assert_template(node, tmpl, txlist, expect):\n-    rsp = node.getblocktemplate({'data':template_to_hex(tmpl, txlist),'mode':'proposal'})\n-    if rsp != expect:\n-        raise AssertionError('unexpected: %s' % (rsp,))\n-\n-class GetBlockTemplateProposalTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.num_nodes = 2\n-        self.setup_clean_chain = False\n-\n-    def run_test(self):\n-        node = self.nodes[0]\n-        node.generate(1) # Mine a block to leave initial block download\n-        tmpl = node.getblocktemplate()\n-        if 'coinbasetxn' not in tmpl:\n-            rawcoinbase = encodeUNum(tmpl['height'])\n-            rawcoinbase += b'\\x01-'\n-            hexcoinbase = b2x(rawcoinbase)\n-            hexoutval = b2x(pack('<Q', tmpl['coinbasevalue']))\n-            tmpl['coinbasetxn'] = {'data': '01000000' + '01' + '0000000000000000000000000000000000000000000000000000000000000000ffffffff' + ('%02x' % (len(rawcoinbase),)) + hexcoinbase + 'fffffffe' + '01' + hexoutval + '00' + '00000000'}\n-        txlist = list(bytearray(a2b_hex(a['data'])) for a in (tmpl['coinbasetxn'],) + tuple(tmpl['transactions']))\n-\n-        # Test 0: Capability advertised\n-        assert('proposal' in tmpl['capabilities'])\n-\n-        # NOTE: This test currently FAILS (regtest mode doesn't enforce block height in coinbase)\n-        ## Test 1: Bad height in coinbase\n-        #txlist[0][4+1+36+1+1] += 1\n-        #assert_template(node, tmpl, txlist, 'FIXME')\n-        #txlist[0][4+1+36+1+1] -= 1\n-\n-        # Test 2: Bad input hash for gen tx\n-        txlist[0][4+1] += 1\n-        assert_template(node, tmpl, txlist, 'bad-cb-missing')\n-        txlist[0][4+1] -= 1\n-\n-        # Test 3: Truncated final tx\n-        lastbyte = txlist[-1].pop()\n-        assert_raises_jsonrpc(-22, \"Block decode failed\", assert_template, node, tmpl, txlist, 'n/a')\n-        txlist[-1].append(lastbyte)\n-\n-        # Test 4: Add an invalid tx to the end (duplicate of gen tx)\n-        txlist.append(txlist[0])\n-        assert_template(node, tmpl, txlist, 'bad-txns-duplicate')\n-        txlist.pop()\n-\n-        # Test 5: Add an invalid tx to the end (non-duplicate)\n-        txlist.append(bytearray(txlist[0]))\n-        txlist[-1][4+1] = 0xff\n-        assert_template(node, tmpl, txlist, 'bad-txns-inputs-missingorspent')\n-        txlist.pop()\n-\n-        # Test 6: Future tx lock time\n-        txlist[0][-4:] = b'\\xff\\xff\\xff\\xff'\n-        assert_template(node, tmpl, txlist, 'bad-txns-nonfinal')\n-        txlist[0][-4:] = b'\\0\\0\\0\\0'\n-\n-        # Test 7: Bad tx count\n-        txlist.append(b'')\n-        assert_raises_jsonrpc(-22, 'Block decode failed', assert_template, node, tmpl, txlist, 'n/a')\n-        txlist.pop()\n-\n-        # Test 8: Bad bits\n-        realbits = tmpl['bits']\n-        tmpl['bits'] = '1c0000ff'  # impossible in the real world\n-        assert_template(node, tmpl, txlist, 'bad-diffbits')\n-        tmpl['bits'] = realbits\n-\n-        # Test 9: Bad merkle root\n-        rawtmpl = template_to_bytearray(tmpl, txlist)\n-        rawtmpl[4+32] = (rawtmpl[4+32] + 1) % 0x100\n-        rsp = node.getblocktemplate({'data':b2x(rawtmpl),'mode':'proposal'})\n-        if rsp != 'bad-txnmrklroot':\n-            raise AssertionError('unexpected: %s' % (rsp,))\n-\n-        # Test 10: Bad timestamps\n-        realtime = tmpl['curtime']\n-        tmpl['curtime'] = 0x7fffffff\n-        assert_template(node, tmpl, txlist, 'time-too-new')\n-        tmpl['curtime'] = 0\n-        assert_template(node, tmpl, txlist, 'time-too-old')\n-        tmpl['curtime'] = realtime\n-\n-        # Test 11: Valid block\n-        assert_template(node, tmpl, txlist, None)\n-\n-        # Test 12: Orphan block\n-        tmpl['previousblockhash'] = 'ff00' * 16\n-        assert_template(node, tmpl, txlist, 'inconclusive-not-best-prevblk')\n-\n-if __name__ == '__main__':\n-    GetBlockTemplateProposalTest().main()"
      },
      {
        "sha": "dbd4e29ecae80cb92f40b1964eee2a2863b69b4d",
        "filename": "test/functional/mining.py",
        "status": "added",
        "additions": 124,
        "deletions": 0,
        "changes": 124,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4f226a133d02f2a564bb4ccd886bdb3c0588c16/test/functional/mining.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4f226a133d02f2a564bb4ccd886bdb3c0588c16/test/functional/mining.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining.py?ref=e4f226a133d02f2a564bb4ccd886bdb3c0588c16",
        "patch": "@@ -0,0 +1,124 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mining RPCs\n+\n+- getblocktemplate proposal mode\n+- submitblock\"\"\"\n+\n+from binascii import b2a_hex\n+import copy\n+\n+from test_framework.blocktools import create_coinbase\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import CBlock\n+from test_framework.util import *\n+\n+def b2x(b):\n+    return b2a_hex(b).decode('ascii')\n+\n+def assert_template(node, block, expect, rehash=True):\n+    if rehash:\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+    rsp = node.getblocktemplate({'data': b2x(block.serialize()), 'mode': 'proposal'})\n+    assert_equal(rsp, expect)\n+\n+class MiningTest(BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 2\n+        self.setup_clean_chain = False\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        # Mine a block to leave initial block download\n+        node.generate(1)\n+        tmpl = node.getblocktemplate()\n+        self.log.info(\"getblocktemplate: Test capability advertised\")\n+        assert 'proposal' in tmpl['capabilities']\n+        assert 'coinbasetxn' not in tmpl\n+\n+        coinbase_tx = create_coinbase(height=int(tmpl[\"height\"]) + 1)\n+        # sequence numbers must not be max for nLockTime to have effect\n+        coinbase_tx.vin[0].nSequence = 2 ** 32 - 2\n+        coinbase_tx.rehash()\n+\n+        block = CBlock()\n+        block.nVersion = tmpl[\"version\"]\n+        block.hashPrevBlock = int(tmpl[\"previousblockhash\"], 16)\n+        block.nTime = tmpl[\"curtime\"]\n+        block.nBits = int(tmpl[\"bits\"], 16)\n+        block.nNonce = 0\n+        block.vtx = [coinbase_tx]\n+\n+        self.log.info(\"getblocktemplate: Test valid block\")\n+        assert_template(node, block, None)\n+\n+        self.log.info(\"submitblock: Test block decode failure\")\n+        assert_raises_jsonrpc(-22, \"Block decode failed\", node.submitblock, b2x(block.serialize()[:-15]))\n+\n+        self.log.info(\"getblocktemplate: Test bad input hash for coinbase transaction\")\n+        bad_block = copy.deepcopy(block)\n+        bad_block.vtx[0].vin[0].prevout.hash += 1\n+        bad_block.vtx[0].rehash()\n+        assert_template(node, bad_block, 'bad-cb-missing')\n+\n+        self.log.info(\"submitblock: Test invalid coinbase transaction\")\n+        assert_raises_jsonrpc(-22, \"Block does not start with a coinbase\", node.submitblock, b2x(bad_block.serialize()))\n+\n+        self.log.info(\"getblocktemplate: Test truncated final transaction\")\n+        assert_raises_jsonrpc(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(block.serialize()[:-1]), 'mode': 'proposal'})\n+\n+        self.log.info(\"getblocktemplate: Test duplicate transaction\")\n+        bad_block = copy.deepcopy(block)\n+        bad_block.vtx.append(bad_block.vtx[0])\n+        assert_template(node, bad_block, 'bad-txns-duplicate')\n+\n+        self.log.info(\"getblocktemplate: Test invalid transaction\")\n+        bad_block = copy.deepcopy(block)\n+        bad_tx = copy.deepcopy(bad_block.vtx[0])\n+        bad_tx.vin[0].prevout.hash = 255\n+        bad_tx.rehash()\n+        bad_block.vtx.append(bad_tx)\n+        assert_template(node, bad_block, 'bad-txns-inputs-missingorspent')\n+\n+        self.log.info(\"getblocktemplate: Test nonfinal transaction\")\n+        bad_block = copy.deepcopy(block)\n+        bad_block.vtx[0].nLockTime = 2 ** 32 - 1\n+        bad_block.vtx[0].rehash()\n+        assert_template(node, bad_block, 'bad-txns-nonfinal')\n+\n+        self.log.info(\"getblocktemplate: Test bad tx count\")\n+        # The tx count is immediately after the block header\n+        TX_COUNT_OFFSET = 80\n+        bad_block_sn = bytearray(block.serialize())\n+        assert_equal(bad_block_sn[TX_COUNT_OFFSET], 1)\n+        bad_block_sn[TX_COUNT_OFFSET] += 1\n+        assert_raises_jsonrpc(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(bad_block_sn), 'mode': 'proposal'})\n+\n+        self.log.info(\"getblocktemplate: Test bad bits\")\n+        bad_block = copy.deepcopy(block)\n+        bad_block.nBits = 469762303  # impossible in the real world\n+        assert_template(node, bad_block, 'bad-diffbits')\n+\n+        self.log.info(\"getblocktemplate: Test bad merkle root\")\n+        bad_block = copy.deepcopy(block)\n+        bad_block.hashMerkleRoot += 1\n+        assert_template(node, bad_block, 'bad-txnmrklroot', False)\n+\n+        self.log.info(\"getblocktemplate: Test bad timestamps\")\n+        bad_block = copy.deepcopy(block)\n+        bad_block.nTime = 2 ** 31 - 1\n+        assert_template(node, bad_block, 'time-too-new')\n+        bad_block.nTime = 0\n+        assert_template(node, bad_block, 'time-too-old')\n+\n+        self.log.info(\"getblocktemplate: Test not best block\")\n+        bad_block = copy.deepcopy(block)\n+        bad_block.hashPrevBlock = 123\n+        assert_template(node, bad_block, 'inconclusive-not-best-prevblk')\n+\n+if __name__ == '__main__':\n+    MiningTest().main()"
      },
      {
        "sha": "b7bc6e841b04f5da5786462daa0add2833d593c3",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4f226a133d02f2a564bb4ccd886bdb3c0588c16/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4f226a133d02f2a564bb4ccd886bdb3c0588c16/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=e4f226a133d02f2a564bb4ccd886bdb3c0588c16",
        "patch": "@@ -108,6 +108,7 @@\n     'signmessages.py',\n     'nulldummy.py',\n     'import-rescan.py',\n+    'mining.py',\n     'bumpfee.py',\n     'rpcnamedargs.py',\n     'listsinceblock.py',\n@@ -141,7 +142,6 @@\n     'bipdersig-p2p.py',\n     'bipdersig.py',\n     'example_test.py',\n-    'getblocktemplate_proposals.py',\n     'txn_doublespend.py',\n     'txn_clone.py --mineblock',\n     'forknotify.py',"
      }
    ]
  },
  {
    "sha": "badd81bd318530ebef3161a613a5f1a458f168d6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYWRkODFiZDMxODUzMGViZWYzMTYxYTYxM2E1ZjFhNDU4ZjE2OGQ2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-11T13:23:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-11T13:24:11Z"
      },
      "message": "Merge #10792: Replace MAX_OPCODE for OP_NOP10.\n\nc8e29d7 Replace MAX_OPCODE for OP_NOP10. (Mark Friedenbach)\n\nTree-SHA512: f6a4129db24fe3feb044acaec3b94194cc4fa909de3d0a45a664b32f886a7d8ab997c9cb6ff0870c4aee66d8e038cf0453dbbb518316829d15e84da9882f3e69",
      "tree": {
        "sha": "fbf867b5e7e9f90905c02cf31fd676618e1614d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fbf867b5e7e9f90905c02cf31fd676618e1614d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/badd81bd318530ebef3161a613a5f1a458f168d6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZZNF7AAoJEB5K7WKYbNJdKRcIAKIOA8nbBeVLmQflb3WYeS71\nppup1o3xnyhfCdkBjySjZQ9FUv/2N+ZLkKhiRXGxJOxMZTxSIA0GtpF6QE8K/vWX\nNKkV209KJpKMpLDEstOQeFWrdcjOFIYNjDshA8LldaDPZZJgqG1H1lWx0k8KRjnH\n6EMDgqJLUkvWDxCUpjf4WP7VE/S1hNhueW0cVUhikb46oJCuHoUyM4u1/xpsNDny\n6tMYR2WN04WupPQ55gRSQbIyjoi3DhfBwB1HkB32Seo7I+iioIJ+scrJYVJMdjzj\njqtf9DBB6vBKMd+oj+MI2Z1Ot6uu58VRoY6g8Wae8CCd3FKGnqsXR6MkMEQnm0A=\n=HZJT\n-----END PGP SIGNATURE-----",
        "payload": "tree fbf867b5e7e9f90905c02cf31fd676618e1614d8\nparent e4f226a133d02f2a564bb4ccd886bdb3c0588c16\nparent c8e29d7ff0da853d4243c08b34c15fab3dfcc76f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1499779422 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1499779451 +0200\n\nMerge #10792: Replace MAX_OPCODE for OP_NOP10.\n\nc8e29d7 Replace MAX_OPCODE for OP_NOP10. (Mark Friedenbach)\n\nTree-SHA512: f6a4129db24fe3feb044acaec3b94194cc4fa909de3d0a45a664b32f886a7d8ab997c9cb6ff0870c4aee66d8e038cf0453dbbb518316829d15e84da9882f3e69\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/badd81bd318530ebef3161a613a5f1a458f168d6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/badd81bd318530ebef3161a613a5f1a458f168d6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/badd81bd318530ebef3161a613a5f1a458f168d6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e4f226a133d02f2a564bb4ccd886bdb3c0588c16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4f226a133d02f2a564bb4ccd886bdb3c0588c16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4f226a133d02f2a564bb4ccd886bdb3c0588c16"
      },
      {
        "sha": "c8e29d7ff0da853d4243c08b34c15fab3dfcc76f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8e29d7ff0da853d4243c08b34c15fab3dfcc76f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8e29d7ff0da853d4243c08b34c15fab3dfcc76f"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "18d02fb913dafa1f70cdec7db7f223f626313598",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/badd81bd318530ebef3161a613a5f1a458f168d6/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/badd81bd318530ebef3161a613a5f1a458f168d6/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=badd81bd318530ebef3161a613a5f1a458f168d6",
        "patch": "@@ -27,7 +27,7 @@ CScript ParseScript(const std::string& s)\n \n     if (mapOpNames.empty())\n     {\n-        for (int op = 0; op <= OP_NOP10; op++)\n+        for (int op = 0; op <= MAX_OPCODE; op++)\n         {\n             // Allow OP_RESERVED to get into mapOpNames\n             if (op < OP_NOP && op != OP_RESERVED)"
      },
      {
        "sha": "698e8982312c97a52497ecbcab1e782f1da0bde4",
        "filename": "src/test/data/script_tests.json",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/badd81bd318530ebef3161a613a5f1a458f168d6/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/badd81bd318530ebef3161a613a5f1a458f168d6/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=badd81bd318530ebef3161a613a5f1a458f168d6",
        "patch": "@@ -240,7 +240,7 @@\n [\"0\", \"IF NOP10 ENDIF 1\", \"P2SH,STRICTENC,DISCOURAGE_UPGRADABLE_NOPS\", \"OK\",\n  \"Discouraged NOPs are allowed if not executed\"],\n \n-[\"0\", \"IF 0xba ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"OK\", \"opcodes above NOP10 invalid if executed\"],\n+[\"0\", \"IF 0xba ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"OK\", \"opcodes above MAX_OPCODE invalid if executed\"],\n [\"0\", \"IF 0xbb ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"OK\"],\n [\"0\", \"IF 0xbc ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"OK\"],\n [\"0\", \"IF 0xbd ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"OK\"],\n@@ -878,7 +878,7 @@\n  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\", \"Discouraged NOP10 in redeemScript\"],\n \n [\"0x50\",\"1\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"opcode 0x50 is reserved\"],\n-[\"1\", \"IF 0xba ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"opcodes above NOP10 invalid if executed\"],\n+[\"1\", \"IF 0xba ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"opcodes above MAX_OPCODE invalid if executed\"],\n [\"1\", \"IF 0xbb ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n [\"1\", \"IF 0xbc ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n [\"1\", \"IF 0xbd ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n@@ -1001,7 +1001,7 @@\n [\"1\",\"RESERVED\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_RESERVED is reserved\"],\n [\"1\",\"RESERVED1\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_RESERVED1 is reserved\"],\n [\"1\",\"RESERVED2\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_RESERVED2 is reserved\"],\n-[\"1\",\"0xba\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"0xba == OP_NOP10 + 1\"],\n+[\"1\",\"0xba\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"0xba == MAX_OPCODE + 1\"],\n \n [\"2147483648\", \"1ADD 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"We cannot do math on 5-byte integers\"],\n [\"2147483648\", \"NEGATE 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"We cannot do math on 5-byte integers\"],"
      }
    ]
  },
  {
    "sha": "cef4b5ccaa37564ddff53bd21e905191362908fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWY0YjVjY2FhMzc1NjRkZGZmNTNiZDIxZTkwNTE5MTM2MjkwOGZj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-11T13:25:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-11T13:25:10Z"
      },
      "message": "Merge #10651: Verify binaries from bitcoincore.org and bitcoin.org\n\n6270d62 Verify binaries from bitcoincore.org and bitcoin.org (Matt Corallo)\n\nTree-SHA512: 39e99ce9be3e7c99d17b296749c0af53c867039bc95fd5b03572593c812817decea75e7296bb66e89ba460518210d84114b7bdc22465df621340319b47bd4303",
      "tree": {
        "sha": "9159a4bbfb7b390242f8e1fa8478b54e8bbab29c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9159a4bbfb7b390242f8e1fa8478b54e8bbab29c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cef4b5ccaa37564ddff53bd21e905191362908fc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZZNG2AAoJEB5K7WKYbNJdIIoH/A0WIn0PAog7uoCR8jY7lyll\nZ7W8xL0FoBRNGx0CK/AgYs8YkAY51SUzvOAvrgT5w4PyZF0pQTcGJmME51ERUkWc\nb2ccCGc1BkDOGfHX4/nZwdJcst2NCAH9RqXQ7D3eFMVt8RjWP4T6iFGBTJ9fvjwv\nBmBjMKJm8ax2mTvtNB3uMSPmPeOTd4OC8V6ZNWu/8aYTcUNQFnvIQ088L28ejjyC\n85bXmH2oYjK2VQCiaQddLz4gZHKkQMqlUvo4JWKbOdpO7iOiw6LuFx78i0VjcQee\nDLDPgqaWLzxNDSbCLMCxQi/blHB6UbqV0ymZalYGG/Rhnx/BYPKSTqQdBskZcYY=\n=rjAc\n-----END PGP SIGNATURE-----",
        "payload": "tree 9159a4bbfb7b390242f8e1fa8478b54e8bbab29c\nparent badd81bd318530ebef3161a613a5f1a458f168d6\nparent 6270d624cf6bc235b3e47bbbf5d49039fe1e172a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1499779505 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1499779510 +0200\n\nMerge #10651: Verify binaries from bitcoincore.org and bitcoin.org\n\n6270d62 Verify binaries from bitcoincore.org and bitcoin.org (Matt Corallo)\n\nTree-SHA512: 39e99ce9be3e7c99d17b296749c0af53c867039bc95fd5b03572593c812817decea75e7296bb66e89ba460518210d84114b7bdc22465df621340319b47bd4303\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cef4b5ccaa37564ddff53bd21e905191362908fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cef4b5ccaa37564ddff53bd21e905191362908fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cef4b5ccaa37564ddff53bd21e905191362908fc/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "badd81bd318530ebef3161a613a5f1a458f168d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/badd81bd318530ebef3161a613a5f1a458f168d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/badd81bd318530ebef3161a613a5f1a458f168d6"
      },
      {
        "sha": "6270d624cf6bc235b3e47bbbf5d49039fe1e172a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6270d624cf6bc235b3e47bbbf5d49039fe1e172a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6270d624cf6bc235b3e47bbbf5d49039fe1e172a"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 25,
      "deletions": 6
    },
    "files": [
      {
        "sha": "409f517c9fb2691549a8ff280461d14d1b2e9dd7",
        "filename": "contrib/verifybinaries/verify.sh",
        "status": "modified",
        "additions": 25,
        "deletions": 6,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cef4b5ccaa37564ddff53bd21e905191362908fc/contrib/verifybinaries/verify.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cef4b5ccaa37564ddff53bd21e905191362908fc/contrib/verifybinaries/verify.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.sh?ref=cef4b5ccaa37564ddff53bd21e905191362908fc",
        "patch": "@@ -3,7 +3,8 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-###   This script attempts to download the signature file SHA256SUMS.asc from bitcoin.org\n+###   This script attempts to download the signature file SHA256SUMS.asc from\n+###   bitcoincore.org and bitcoin.org and compares them.\n ###   It first checks if the signature passes, and then downloads the files specified in\n ###   the file, and checks if the hashes of these files match those that are specified\n ###   in the signature file.\n@@ -22,7 +23,9 @@ TMPFILE=\"hashes.tmp\"\n \n SIGNATUREFILENAME=\"SHA256SUMS.asc\"\n RCSUBDIR=\"test\"\n-BASEDIR=\"https://bitcoin.org/bin/\"\n+HOST1=\"https://bitcoincore.org\"\n+HOST2=\"https://bitcoin.org\"\n+BASEDIR=\"/bin/\"\n VERSIONPREFIX=\"bitcoin-core-\"\n RCVERSIONSTRING=\"rc\"\n \n@@ -81,7 +84,7 @@ else\n fi\n \n #first we fetch the file containing the signature\n-WGETOUT=$(wget -N \"$BASEDIR$SIGNATUREFILENAME\" 2>&1)\n+WGETOUT=$(wget -N \"$HOST1$BASEDIR$SIGNATUREFILENAME\" 2>&1)\n \n #and then see if wget completed successfully\n if [ $? -ne 0 ]; then\n@@ -92,6 +95,22 @@ if [ $? -ne 0 ]; then\n    exit 2\n fi\n \n+WGETOUT=$(wget -N -O \"$SIGNATUREFILENAME.2\" \"$HOST2$BASEDIR$SIGNATUREFILENAME\" 2>&1)\n+if [ $? -ne 0 ]; then\n+   echo \"bitcoin.org failed to provide signature file, but bitcoincore.org did?\"\n+   echo \"wget output:\"\n+   echo \"$WGETOUT\"|sed 's/^/\\t/g'\n+   clean_up $SIGNATUREFILENAME\n+   exit 3\n+fi\n+\n+SIGFILEDIFFS=\"$(diff $SIGNATUREFILENAME $SIGNATUREFILENAME.2)\"\n+if [ \"$SIGFILEDIFFS\" != \"\" ]; then\n+   echo \"bitcoin.org and bitcoincore.org signature files were not equal?\"\n+   clean_up $SIGNATUREFILENAME $SIGNATUREFILENAME.2\n+   exit 4\n+fi\n+\n #then we check it\n GPGOUT=$(gpg --yes --decrypt --output \"$TMPFILE\" \"$SIGNATUREFILENAME\" 2>&1)\n \n@@ -111,7 +130,7 @@ if [ $RET -ne 0 ]; then\n \n    echo \"gpg output:\"\n    echo \"$GPGOUT\"|sed 's/^/\\t/g'\n-   clean_up $SIGNATUREFILENAME $TMPFILE\n+   clean_up $SIGNATUREFILENAME $SIGNATUREFILENAME.2 $TMPFILE\n    exit \"$RET\"\n fi\n \n@@ -131,7 +150,7 @@ FILES=$(awk '{print $2}' \"$TMPFILE\")\n for file in $FILES\n do\n    echo \"Downloading $file\"\n-   wget --quiet -N \"$BASEDIR$file\"\n+   wget --quiet -N \"$HOST1$BASEDIR$file\"\n done\n \n #check hashes\n@@ -149,7 +168,7 @@ fi\n \n if [ -n \"$2\" ]; then\n    echo \"Clean up the binaries\"\n-   clean_up $FILES $SIGNATUREFILENAME $TMPFILE\n+   clean_up $FILES $SIGNATUREFILENAME $SIGNATUREFILENAME.2 $TMPFILE\n else\n    echo \"Keep the binaries in $WORKINGDIR\"\n    clean_up $TMPFILE"
      }
    ]
  },
  {
    "sha": "b27b004532dbd91803784cb6beccdfd1aac1b378",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjdiMDA0NTMyZGJkOTE4MDM3ODRjYjZiZWNjZGZkMWFhYzFiMzc4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-11T13:28:28Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-11T13:36:56Z"
      },
      "message": "Merge #10543: Change API to estimaterawfee\n\n5e3b7b5 Improve error reporting for estimaterawfee (Alex Morcos)\n1fafd70 Add function to report highest estimate target tracked per horizon (Alex Morcos)\n9c85b91 Change API to estimaterawfee (Alex Morcos)\n\nTree-SHA512: e624c6e7967e9e48abe49f5818bd674e5710e571cc093029d2f90d39fdfba3c1f30e83bf89f6dce97052b59a7d9636a64642ccfb26effd149c417d0afbed0c0b",
      "tree": {
        "sha": "7673049a136981f734952918a3589331a77a4a0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7673049a136981f734952918a3589331a77a4a0f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b27b004532dbd91803784cb6beccdfd1aac1b378",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZZNR4AAoJEB5K7WKYbNJdtQ4H/i6l6Tk1JtnfFeYJL3ROg23E\nhWp+KEuU7J0ZrYk1npar70TkFZsYv4HAK9Kx8kmpK7qPgT3XFSLyF7qvpqMe1Ap5\nl7O/4BGjO3/nLtnxQoF7atU7U04B9nSBgjWIGbXSzPkj+cqi5vS19gnVmvzy/yyL\niaavf7Fc+rn/FDRO3ajcqMyEzln2Muay4N6fvhsAo+gt1C6qeotZhM7qJmQdi6Ew\na6KF03e7EHkg3TVhpClDso1lNK7Bv4tmgzHqv+hch8ZY37pu0iCN6IPnrOWMFC8f\nY1n9laPK9nJax7+3f/2p0ZsZotdWLMElKg++a1bIvRHQg33yDXvJij/2WAYvgTg=\n=5Vvl\n-----END PGP SIGNATURE-----",
        "payload": "tree 7673049a136981f734952918a3589331a77a4a0f\nparent cef4b5ccaa37564ddff53bd21e905191362908fc\nparent 5e3b7b5686d326814c40e5b70da6697971d27092\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1499779708 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1499780216 +0200\n\nMerge #10543: Change API to estimaterawfee\n\n5e3b7b5 Improve error reporting for estimaterawfee (Alex Morcos)\n1fafd70 Add function to report highest estimate target tracked per horizon (Alex Morcos)\n9c85b91 Change API to estimaterawfee (Alex Morcos)\n\nTree-SHA512: e624c6e7967e9e48abe49f5818bd674e5710e571cc093029d2f90d39fdfba3c1f30e83bf89f6dce97052b59a7d9636a64642ccfb26effd149c417d0afbed0c0b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b27b004532dbd91803784cb6beccdfd1aac1b378",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b27b004532dbd91803784cb6beccdfd1aac1b378",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b27b004532dbd91803784cb6beccdfd1aac1b378/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cef4b5ccaa37564ddff53bd21e905191362908fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cef4b5ccaa37564ddff53bd21e905191362908fc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cef4b5ccaa37564ddff53bd21e905191362908fc"
      },
      {
        "sha": "5e3b7b5686d326814c40e5b70da6697971d27092",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e3b7b5686d326814c40e5b70da6697971d27092",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e3b7b5686d326814c40e5b70da6697971d27092"
      }
    ],
    "stats": {
      "total": 165,
      "additions": 112,
      "deletions": 53
    },
    "files": [
      {
        "sha": "565da6c1541e9d8edec25109f31dee25cc35ed0a",
        "filename": "src/policy/feerate.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b27b004532dbd91803784cb6beccdfd1aac1b378/src/policy/feerate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b27b004532dbd91803784cb6beccdfd1aac1b378/src/policy/feerate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.h?ref=b27b004532dbd91803784cb6beccdfd1aac1b378",
        "patch": "@@ -40,6 +40,7 @@ class CFeeRate\n     friend bool operator==(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK == b.nSatoshisPerK; }\n     friend bool operator<=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK <= b.nSatoshisPerK; }\n     friend bool operator>=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK >= b.nSatoshisPerK; }\n+    friend bool operator!=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK != b.nSatoshisPerK; }\n     CFeeRate& operator+=(const CFeeRate& a) { nSatoshisPerK += a.nSatoshisPerK; return *this; }\n     std::string ToString() const;\n "
      },
      {
        "sha": "03fe11a0d80bb573bbda67e9d9083efc75c21f61",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 1,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b27b004532dbd91803784cb6beccdfd1aac1b378/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b27b004532dbd91803784cb6beccdfd1aac1b378/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=b27b004532dbd91803784cb6beccdfd1aac1b378",
        "patch": "@@ -16,6 +16,19 @@\n \n static constexpr double INF_FEERATE = 1e99;\n \n+std::string StringForFeeEstimateHorizon(FeeEstimateHorizon horizon) {\n+    static const std::map<FeeEstimateHorizon, std::string> horizon_strings = {\n+        {FeeEstimateHorizon::SHORT_HALFLIFE, \"short\"},\n+        {FeeEstimateHorizon::MED_HALFLIFE, \"medium\"},\n+        {FeeEstimateHorizon::LONG_HALFLIFE, \"long\"},\n+    };\n+    auto horizon_string = horizon_strings.find(horizon);\n+\n+    if (horizon_string == horizon_strings.end()) return \"unknown\";\n+\n+    return horizon_string->second;\n+}\n+\n std::string StringForFeeReason(FeeReason reason) {\n     static const std::map<FeeReason, std::string> fee_reason_strings = {\n         {FeeReason::NONE, \"None\"},\n@@ -685,7 +698,7 @@ CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThr\n         break;\n     }\n     default: {\n-        return CFeeRate(0);\n+        throw std::out_of_range(\"CBlockPoicyEstimator::estimateRawFee unknown FeeEstimateHorizon\");\n     }\n     }\n \n@@ -704,6 +717,24 @@ CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThr\n     return CFeeRate(median);\n }\n \n+unsigned int CBlockPolicyEstimator::HighestTargetTracked(FeeEstimateHorizon horizon) const\n+{\n+    switch (horizon) {\n+    case FeeEstimateHorizon::SHORT_HALFLIFE: {\n+        return shortStats->GetMaxConfirms();\n+    }\n+    case FeeEstimateHorizon::MED_HALFLIFE: {\n+        return feeStats->GetMaxConfirms();\n+    }\n+    case FeeEstimateHorizon::LONG_HALFLIFE: {\n+        return longStats->GetMaxConfirms();\n+    }\n+    default: {\n+        throw std::out_of_range(\"CBlockPoicyEstimator::HighestTargetTracked unknown FeeEstimateHorizon\");\n+    }\n+    }\n+}\n+\n unsigned int CBlockPolicyEstimator::BlockSpan() const\n {\n     if (firstRecordedHeight == 0) return 0;"
      },
      {
        "sha": "4c80371c5c54fe4e55d078a39af61ba03ba693d4",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b27b004532dbd91803784cb6beccdfd1aac1b378/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b27b004532dbd91803784cb6beccdfd1aac1b378/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=b27b004532dbd91803784cb6beccdfd1aac1b378",
        "patch": "@@ -74,6 +74,8 @@ enum FeeEstimateHorizon {\n     LONG_HALFLIFE = 2\n };\n \n+std::string StringForFeeEstimateHorizon(FeeEstimateHorizon horizon);\n+\n /* Enumeration of reason for returned fee estimate */\n enum class FeeReason {\n     NONE,\n@@ -223,6 +225,9 @@ class CBlockPolicyEstimator\n     /** Empty mempool transactions on shutdown to record failure to confirm for txs still in mempool */\n     void FlushUnconfirmed(CTxMemPool& pool);\n \n+    /** Calculation of highest target that estimates are tracked for */\n+    unsigned int HighestTargetTracked(FeeEstimateHorizon horizon) const;\n+\n private:\n     unsigned int nBestSeenHeight;\n     unsigned int firstRecordedHeight;"
      },
      {
        "sha": "775ad4b6c9aa4483f0f85356572dd807814a27d5",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b27b004532dbd91803784cb6beccdfd1aac1b378/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b27b004532dbd91803784cb6beccdfd1aac1b378/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=b27b004532dbd91803784cb6beccdfd1aac1b378",
        "patch": "@@ -117,7 +117,6 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"estimatesmartfee\", 1, \"conservative\" },\n     { \"estimaterawfee\", 0, \"nblocks\" },\n     { \"estimaterawfee\", 1, \"threshold\" },\n-    { \"estimaterawfee\", 2, \"horizon\" },\n     { \"prioritisetransaction\", 1, \"dummy\" },\n     { \"prioritisetransaction\", 2, \"fee_delta\" },\n     { \"setban\", 2, \"bantime\" },"
      },
      {
        "sha": "046c85a76eb5d677394c369012e640a66f54607d",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 74,
        "deletions": 51,
        "changes": 125,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b27b004532dbd91803784cb6beccdfd1aac1b378/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b27b004532dbd91803784cb6beccdfd1aac1b378/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=b27b004532dbd91803784cb6beccdfd1aac1b378",
        "patch": "@@ -838,9 +838,9 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n \n UniValue estimaterawfee(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1|| request.params.size() > 3)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"estimaterawfee nblocks (threshold horizon)\\n\"\n+            \"estimaterawfee nblocks (threshold)\\n\"\n             \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n             \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n             \"         implementation of fee estimation. The parameters it can be called with\\n\"\n@@ -849,72 +849,95 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n-            \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      },\\n\"\n+            \"      \\\"fail\\\" : { ... },       (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n+            \"  },\\n\"\n+            \"  \\\"medium\\\" : { ... },    (json object, optional) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+        CFeeRate feeRate;\n+        EstimationResult buckets;\n+\n+        // Only output results for horizons which track the target\n+        if ((unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(horizon)) continue;\n+\n+        feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n+        UniValue horizon_result(UniValue::VOBJ);\n+        UniValue errors(UniValue::VARR);\n+        UniValue passbucket(UniValue::VOBJ);\n+        passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n+        passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n+        passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n+        passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n+        passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n+        passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n+        UniValue failbucket(UniValue::VOBJ);\n+        failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n+        failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n+        failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n+        failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n+        failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n+        failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n+\n+        // CFeeRate(0) is used to indicate error as a return value from estimateRawFee\n+        if (feeRate != CFeeRate(0)) {\n+            horizon_result.push_back(Pair(\"feerate\", ValueFromAmount(feeRate.GetFeePerK())));\n+            horizon_result.push_back(Pair(\"decay\", buckets.decay));\n+            horizon_result.push_back(Pair(\"scale\", (int)buckets.scale));\n+            horizon_result.push_back(Pair(\"pass\", passbucket));\n+            // buckets.fail.start == -1 indicates that all buckets passed, there is no fail bucket to output\n+            if (buckets.fail.start != -1) horizon_result.push_back(Pair(\"fail\", failbucket));\n+        } else {\n+            // Output only information that is still meaningful in the event of error\n+            horizon_result.push_back(Pair(\"decay\", buckets.decay));\n+            horizon_result.push_back(Pair(\"scale\", (int)buckets.scale));\n+            horizon_result.push_back(Pair(\"fail\", failbucket));\n+            errors.push_back(\"Insufficient data or no feerate found which meets threshold\");\n+            horizon_result.push_back(Pair(\"errors\",errors));\n+        }\n+        result.push_back(Pair(StringForFeeEstimateHorizon(horizon), horizon_result));\n+    }\n     return result;\n }\n \n@@ -932,7 +955,7 @@ static const CRPCCommand commands[] =\n     { \"util\",               \"estimatefee\",            &estimatefee,            true,  {\"nblocks\"} },\n     { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       true,  {\"nblocks\", \"conservative\"} },\n \n-    { \"hidden\",             \"estimaterawfee\",         &estimaterawfee,         true,  {\"nblocks\", \"threshold\", \"horizon\"} },\n+    { \"hidden\",             \"estimaterawfee\",         &estimaterawfee,         true,  {\"nblocks\", \"threshold\"} },\n };\n \n void RegisterMiningRPCCommands(CRPCTable &t)"
      }
    ]
  },
  {
    "sha": "ca4c545cc7e8c06bc8d9d4db1dd2d8f5fe011902",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTRjNTQ1Y2M3ZThjMDZiYzhkOWQ0ZGIxZGQyZDhmNWZlMDExOTAy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-11T13:39:55Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-11T13:40:08Z"
      },
      "message": "Merge #10786: Add PR description to merge commit in github-merge.py\n\n475c08c Add PR description to merge commit in github-merge.py (Pieter Wuille)\n\nPull request description:\n\n  There is often some context given in PR descriptions that is missing from commits, and it may be worthwhile to retain that information in our history in git. This PR adds that information to the merge commit when created through `github-merge.py`.\n\n  We should also encourage people to provide as much information as possible in the PR commits themselves, but I believe that is an orthogonal issue. Individual commits don't need to have a description of the overall goal of a PR.\n\nTree-SHA512: cbae46ec24ce911744e11a07e5d51895d3acc79659db306d8124304ef8e422bba99001ee2a741b08c92a5eb39d9c3f6b723622b20d6553ca5cfa0a8de866194c",
      "tree": {
        "sha": "a1f2ab55214fc0946f8f52c2c89d38d45d0709c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1f2ab55214fc0946f8f52c2c89d38d45d0709c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca4c545cc7e8c06bc8d9d4db1dd2d8f5fe011902",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZZNU4AAoJEB5K7WKYbNJdKWsIAJ3r3ql8KiMgBAwyHLNhOQAd\nQfb8X9+ZRk3YBEq+iH3iFx9CW14YiKlzTIVTOi5cg6+rXokFlXxd3+1/oQZVkvW9\nTM6zbgLWv5hF/S28e0cT+HDiVmooPynRKAI6DoHNGp1+sy34utr0i8rwsVXSkqLg\nZxbSpydVKeObTJqSwObb0HF5QHdwKQvdV2AeaLtCmlcCRotZeGBN8jxD+75uchlT\nTGMpCC71r7XROlx4nH+p5MglRC+948B13kRb/t2T21dJsTaH09KlKMS16iPtdHAG\n0YSIxzAhXdflfHbvR4tocz0rPBYRujWS4n/KbIXSm7KNOGim+MvjjUDBk/Qepso=\n=ihrH\n-----END PGP SIGNATURE-----",
        "payload": "tree a1f2ab55214fc0946f8f52c2c89d38d45d0709c1\nparent b27b004532dbd91803784cb6beccdfd1aac1b378\nparent 475c08cb446371dd75fb37e067613effc0572442\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1499780395 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1499780408 +0200\n\nMerge #10786: Add PR description to merge commit in github-merge.py\n\n475c08c Add PR description to merge commit in github-merge.py (Pieter Wuille)\n\nPull request description:\n\n  There is often some context given in PR descriptions that is missing from commits, and it may be worthwhile to retain that information in our history in git. This PR adds that information to the merge commit when created through `github-merge.py`.\n\n  We should also encourage people to provide as much information as possible in the PR commits themselves, but I believe that is an orthogonal issue. Individual commits don't need to have a description of the overall goal of a PR.\n\nTree-SHA512: cbae46ec24ce911744e11a07e5d51895d3acc79659db306d8124304ef8e422bba99001ee2a741b08c92a5eb39d9c3f6b723622b20d6553ca5cfa0a8de866194c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca4c545cc7e8c06bc8d9d4db1dd2d8f5fe011902",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca4c545cc7e8c06bc8d9d4db1dd2d8f5fe011902",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca4c545cc7e8c06bc8d9d4db1dd2d8f5fe011902/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b27b004532dbd91803784cb6beccdfd1aac1b378",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b27b004532dbd91803784cb6beccdfd1aac1b378",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b27b004532dbd91803784cb6beccdfd1aac1b378"
      },
      {
        "sha": "475c08cb446371dd75fb37e067613effc0572442",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/475c08cb446371dd75fb37e067613effc0572442",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/475c08cb446371dd75fb37e067613effc0572442"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c664cf81fa9f63ac3fb4a32a19840442927b7450",
        "filename": "contrib/devtools/github-merge.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4c545cc7e8c06bc8d9d4db1dd2d8f5fe011902/contrib/devtools/github-merge.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4c545cc7e8c06bc8d9d4db1dd2d8f5fe011902/contrib/devtools/github-merge.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/github-merge.py?ref=ca4c545cc7e8c06bc8d9d4db1dd2d8f5fe011902",
        "patch": "@@ -175,6 +175,7 @@ def main():\n     if info is None:\n         exit(1)\n     title = info['title'].strip()\n+    body = info['body'].strip()\n     # precedence order for destination branch argument:\n     #   - command line argument\n     #   - githubmerge.branch setting\n@@ -229,6 +230,7 @@ def main():\n             firstline = 'Merge #%s' % (pull,)\n         message = firstline + '\\n\\n'\n         message += subprocess.check_output([GIT,'log','--no-merges','--topo-order','--pretty=format:%h %s (%an)',base_branch+'..'+head_branch]).decode('utf-8')\n+        message += '\\n\\nPull request description:\\n\\n  ' + body.replace('\\n', '\\n  ') + '\\n'\n         try:\n             subprocess.check_call([GIT,'merge','-q','--commit','--no-edit','--no-ff','-m',message.encode('utf-8'),head_branch])\n         except subprocess.CalledProcessError as e:"
      }
    ]
  },
  {
    "sha": "253cd7ec4fc9324d2c2c3bc6f32794ded2455eb7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTNjZDdlYzRmYzkzMjRkMmMyYzNiYzZmMzI3OTRkZWQyNDU1ZWI3",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-30T16:53:29Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-11T16:17:56Z"
      },
      "message": "Only reserve key for scriptChange once in CreateTransaction\n\nThis does not affect behavior but allows us to have access to an output to\nscriptChange even if we currently do not have change in the transaction.",
      "tree": {
        "sha": "1f4ccc84e640a0406b36fa8e2aed282da425f32b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f4ccc84e640a0406b36fa8e2aed282da425f32b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/253cd7ec4fc9324d2c2c3bc6f32794ded2455eb7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/253cd7ec4fc9324d2c2c3bc6f32794ded2455eb7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/253cd7ec4fc9324d2c2c3bc6f32794ded2455eb7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/253cd7ec4fc9324d2c2c3bc6f32794ded2455eb7/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca4c545cc7e8c06bc8d9d4db1dd2d8f5fe011902",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca4c545cc7e8c06bc8d9d4db1dd2d8f5fe011902",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca4c545cc7e8c06bc8d9d4db1dd2d8f5fe011902"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 34,
      "deletions": 33
    },
    "files": [
      {
        "sha": "53f39cf8e3e399e244fd3a8973f8fd9ee7fd6ab6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 33,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/253cd7ec4fc9324d2c2c3bc6f32794ded2455eb7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/253cd7ec4fc9324d2c2c3bc6f32794ded2455eb7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=253cd7ec4fc9324d2c2c3bc6f32794ded2455eb7",
        "patch": "@@ -2569,6 +2569,38 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n             std::vector<COutput> vAvailableCoins;\n             AvailableCoins(vAvailableCoins, true, coinControl);\n \n+            // Create change script that will be used if we need change\n+            // TODO: pass in scriptChange instead of reservekey so\n+            // change transaction isn't always pay-to-bitcoin-address\n+            CScript scriptChange;\n+\n+            // coin control: send change to custom address\n+            if (coinControl && !boost::get<CNoDestination>(&coinControl->destChange))\n+                scriptChange = GetScriptForDestination(coinControl->destChange);\n+\n+            // no coin control: send change to newly generated address\n+            else\n+            {\n+                // Note: We use a new key here to keep it from being obvious which side is the change.\n+                //  The drawback is that by not reusing a previous key, the change may be lost if a\n+                //  backup is restored, if the backup doesn't have the new private key for the change.\n+                //  If we reused the old key, it would be possible to add code to look for and\n+                //  rediscover unknown transactions that were written with keys of ours to recover\n+                //  post-backup change.\n+\n+                // Reserve a new key pair from key pool\n+                CPubKey vchPubKey;\n+                bool ret;\n+                ret = reservekey.GetReservedKey(vchPubKey, true);\n+                if (!ret)\n+                {\n+                    strFailReason = _(\"Keypool ran out, please call keypoolrefill first\");\n+                    return false;\n+                }\n+\n+                scriptChange = GetScriptForDestination(vchPubKey.GetID());\n+            }\n+\n             nFeeRet = 0;\n             // Start with no fee and loop until there is enough fee\n             while (true)\n@@ -2627,37 +2659,6 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 if (nChange > 0)\n                 {\n                     // Fill a vout to ourself\n-                    // TODO: pass in scriptChange instead of reservekey so\n-                    // change transaction isn't always pay-to-bitcoin-address\n-                    CScript scriptChange;\n-\n-                    // coin control: send change to custom address\n-                    if (coinControl && !boost::get<CNoDestination>(&coinControl->destChange))\n-                        scriptChange = GetScriptForDestination(coinControl->destChange);\n-\n-                    // no coin control: send change to newly generated address\n-                    else\n-                    {\n-                        // Note: We use a new key here to keep it from being obvious which side is the change.\n-                        //  The drawback is that by not reusing a previous key, the change may be lost if a\n-                        //  backup is restored, if the backup doesn't have the new private key for the change.\n-                        //  If we reused the old key, it would be possible to add code to look for and\n-                        //  rediscover unknown transactions that were written with keys of ours to recover\n-                        //  post-backup change.\n-\n-                        // Reserve a new key pair from key pool\n-                        CPubKey vchPubKey;\n-                        bool ret;\n-                        ret = reservekey.GetReservedKey(vchPubKey, true);\n-                        if (!ret)\n-                        {\n-                            strFailReason = _(\"Keypool ran out, please call keypoolrefill first\");\n-                            return false;\n-                        }\n-\n-                        scriptChange = GetScriptForDestination(vchPubKey.GetID());\n-                    }\n-\n                     CTxOut newTxOut(nChange, scriptChange);\n \n                     // Never create dust outputs; if we would, just\n@@ -2666,7 +2667,6 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                     {\n                         nChangePosInOut = -1;\n                         nFeeRet += nChange;\n-                        reservekey.ReturnKey();\n                     }\n                     else\n                     {\n@@ -2685,7 +2685,6 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                         txNew.vout.insert(position, newTxOut);\n                     }\n                 } else {\n-                    reservekey.ReturnKey();\n                     nChangePosInOut = -1;\n                 }\n \n@@ -2777,6 +2776,8 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n             }\n         }\n \n+        if (nChangePosInOut == -1) reservekey.ReturnKey(); // Return any reserved key if we don't have change\n+\n         if (sign)\n         {\n             CTransaction txNewConst(txNew);"
      }
    ]
  },
  {
    "sha": "0f402b9263b0579b29aa0f841fc64ad58d3efba6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjQwMmI5MjYzYjA1NzliMjlhYTBmODQxZmM2NGFkNThkM2VmYmE2",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-30T17:16:53Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-11T16:20:41Z"
      },
      "message": "Fix rare edge case of paying too many fees when transaction has no change.\n\nDue to the iterative process of selecting new coins in each loop a new fee is\ncalculated that needs to be met each time.  In the typical case if the most\nrecent iteration of the loop produced a much smaller transaction and we have now\ngathered inputs with too many fees, we can just reduce the change.  However in\nthe case where there is no change output, it is possible to end up with a\ntransaction which drastically overpays fees.  This commit addresses that case,\nby creating a change output if the overpayment is large enough to support it,\nthis is accomplished by rerunning the transaction creation loop without\nselecting new coins.\n\nThanks to instagibbs for working on this as well",
      "tree": {
        "sha": "e81471d049bb641e3d4dd6700b028c48269225ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e81471d049bb641e3d4dd6700b028c48269225ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f402b9263b0579b29aa0f841fc64ad58d3efba6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f402b9263b0579b29aa0f841fc64ad58d3efba6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f402b9263b0579b29aa0f841fc64ad58d3efba6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f402b9263b0579b29aa0f841fc64ad58d3efba6/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "253cd7ec4fc9324d2c2c3bc6f32794ded2455eb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/253cd7ec4fc9324d2c2c3bc6f32794ded2455eb7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/253cd7ec4fc9324d2c2c3bc6f32794ded2455eb7"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 40,
      "deletions": 13
    },
    "files": [
      {
        "sha": "5e9701c71cde87b3febb32685cedfd15722185bd",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 13,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f402b9263b0579b29aa0f841fc64ad58d3efba6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f402b9263b0579b29aa0f841fc64ad58d3efba6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0f402b9263b0579b29aa0f841fc64ad58d3efba6",
        "patch": "@@ -2600,8 +2600,12 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n \n                 scriptChange = GetScriptForDestination(vchPubKey.GetID());\n             }\n+            CTxOut change_prototype_txout(0, scriptChange);\n+            size_t change_prototype_size = GetSerializeSize(change_prototype_txout, SER_DISK, 0);\n \n             nFeeRet = 0;\n+            bool pick_new_inputs = true;\n+            CAmount nValueIn = 0;\n             // Start with no fee and loop until there is enough fee\n             while (true)\n             {\n@@ -2647,15 +2651,18 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 }\n \n                 // Choose coins to use\n-                CAmount nValueIn = 0;\n-                setCoins.clear();\n-                if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coinControl))\n-                {\n-                    strFailReason = _(\"Insufficient funds\");\n-                    return false;\n+                if (pick_new_inputs) {\n+                    nValueIn = 0;\n+                    setCoins.clear();\n+                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coinControl))\n+                    {\n+                        strFailReason = _(\"Insufficient funds\");\n+                        return false;\n+                    }\n                 }\n \n                 const CAmount nChange = nValueIn - nValueToSelect;\n+\n                 if (nChange > 0)\n                 {\n                     // Fill a vout to ourself\n@@ -2739,16 +2746,30 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 }\n \n                 if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if we have change\n-                    // output to increase.  This prevents potential overpayment\n-                    // in fees if the coins selected to meet nFeeNeeded result\n-                    // in a transaction that requires less fee than the prior\n-                    // iteration.\n+                    // Reduce fee to only the needed amount if possible. This\n+                    // prevents potential overpayment in fees if the coins\n+                    // selected to meet nFeeNeeded result in a transaction that\n+                    // requires less fee than the prior iteration.\n+\n                     // TODO: The case where nSubtractFeeFromAmount > 0 remains\n                     // to be addressed because it requires returning the fee to\n                     // the payees and not the change output.\n-                    // TODO: The case where there is no change output remains\n-                    // to be addressed so we avoid creating too small an output.\n+\n+                    // If we have no change and a big enough excess fee, then\n+                    // try to construct transaction again only without picking\n+                    // new inputs. We now know we only need the smaller fee\n+                    // (because of reduced tx size) and so we should add a\n+                    // change output. Only try this once.\n+                    CAmount fee_needed_for_change = GetMinimumFee(change_prototype_size, currentConfirmationTarget, ::mempool, ::feeEstimator, nullptr, false /* ignoreGlobalPayTxFee */, conservative_estimate);\n+                    CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, ::dustRelayFee);\n+                    CAmount max_excess_fee = fee_needed_for_change + minimum_value_for_change;\n+                    if (nFeeRet > nFeeNeeded + max_excess_fee && nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n+                        pick_new_inputs = false;\n+                        nFeeRet = nFeeNeeded + fee_needed_for_change;\n+                        continue;\n+                    }\n+\n+                    // If we have change output already, just increase it\n                     if (nFeeRet > nFeeNeeded && nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n                         CAmount extraFeePaid = nFeeRet - nFeeNeeded;\n                         std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n@@ -2757,6 +2778,12 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                     }\n                     break; // Done, enough fee included.\n                 }\n+                else if (!pick_new_inputs) {\n+                    // This shouldn't happen, we should have had enough excess\n+                    // fee to pay for the new output and still meet nFeeNeeded\n+                    strFailReason = _(\"Transaction fee and change calculation failed\");\n+                    return false;\n+                }\n \n                 // Try to reduce change to include necessary fee\n                 if (nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {"
      }
    ]
  },
  {
    "sha": "e8b95239eeb052b122786d9cca6bc58106837599",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOGI5NTIzOWVlYjA1MmIxMjI3ODZkOWNjYTZiYzU4MTA2ODM3NTk5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-11T16:34:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-11T17:03:41Z"
      },
      "message": "Merge #10712: Add change output if necessary to reduce excess fee\n\n0f402b9 Fix rare edge case of paying too many fees when transaction has no change. (Alex Morcos)\n253cd7e Only reserve key for scriptChange once in CreateTransaction (Alex Morcos)\n\nPull request description:\n\n  This is an alternative to #10333\n\n  See commit messages.\n\n  The first commit is mostly code move, it just moves the change creation code out of the loop.\n\n  @instagibbs\n\nTree-SHA512: f16287ae0f0c6f09cf8b1f0db5880bb567ffa74a50898e3d1ef549ba592c6309ae1a9b251739f63a8bb622d48f03ce2dff9e7a57a6bac4afb4b95b0a86613ea8",
      "tree": {
        "sha": "e81471d049bb641e3d4dd6700b028c48269225ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e81471d049bb641e3d4dd6700b028c48269225ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8b95239eeb052b122786d9cca6bc58106837599",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZZQTtAAoJEB5K7WKYbNJdlyIH/jkur8EksmikDN1OYRh8xF6h\nCzitQ57F2d5VRcrkBkS6XwdU1kZE21t1aMplytVHsSpvCXU3GMBoL9TUKiAEZcp8\ndvTu5HKRvRYqSlG0WtzE/XJmUVxaEhrrnudKuaHMNuPpbS/n7DXS5fyzHtnXP0Sf\nCnt1Z7fWqELPKYtw0xG2mgaVDdVdDuzSBLK+rOwFTei+lpMxBkfI81MnUfQ57/ae\nHko9Xjr5Baw/0ZRa9YPgtkxQrUMhq0EEXpUHeguVhun4W99fhBB6Wv4aMleo9hSh\ntaMTslTPFPT6qkWPMVOArPpHKZTbgJXa/XV8MW/sP1LKUmyp0ovGA0+lKJvNnmQ=\n=P16d\n-----END PGP SIGNATURE-----",
        "payload": "tree e81471d049bb641e3d4dd6700b028c48269225ca\nparent ca4c545cc7e8c06bc8d9d4db1dd2d8f5fe011902\nparent 0f402b9263b0579b29aa0f841fc64ad58d3efba6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1499790886 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1499792621 +0200\n\nMerge #10712: Add change output if necessary to reduce excess fee\n\n0f402b9 Fix rare edge case of paying too many fees when transaction has no change. (Alex Morcos)\n253cd7e Only reserve key for scriptChange once in CreateTransaction (Alex Morcos)\n\nPull request description:\n\n  This is an alternative to #10333\n\n  See commit messages.\n\n  The first commit is mostly code move, it just moves the change creation code out of the loop.\n\n  @instagibbs\n\nTree-SHA512: f16287ae0f0c6f09cf8b1f0db5880bb567ffa74a50898e3d1ef549ba592c6309ae1a9b251739f63a8bb622d48f03ce2dff9e7a57a6bac4afb4b95b0a86613ea8\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8b95239eeb052b122786d9cca6bc58106837599",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8b95239eeb052b122786d9cca6bc58106837599",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8b95239eeb052b122786d9cca6bc58106837599/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca4c545cc7e8c06bc8d9d4db1dd2d8f5fe011902",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca4c545cc7e8c06bc8d9d4db1dd2d8f5fe011902",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca4c545cc7e8c06bc8d9d4db1dd2d8f5fe011902"
      },
      {
        "sha": "0f402b9263b0579b29aa0f841fc64ad58d3efba6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f402b9263b0579b29aa0f841fc64ad58d3efba6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f402b9263b0579b29aa0f841fc64ad58d3efba6"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 74,
      "deletions": 46
    },
    "files": [
      {
        "sha": "5e9701c71cde87b3febb32685cedfd15722185bd",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 74,
        "deletions": 46,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8b95239eeb052b122786d9cca6bc58106837599/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8b95239eeb052b122786d9cca6bc58106837599/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e8b95239eeb052b122786d9cca6bc58106837599",
        "patch": "@@ -2569,7 +2569,43 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n             std::vector<COutput> vAvailableCoins;\n             AvailableCoins(vAvailableCoins, true, coinControl);\n \n+            // Create change script that will be used if we need change\n+            // TODO: pass in scriptChange instead of reservekey so\n+            // change transaction isn't always pay-to-bitcoin-address\n+            CScript scriptChange;\n+\n+            // coin control: send change to custom address\n+            if (coinControl && !boost::get<CNoDestination>(&coinControl->destChange))\n+                scriptChange = GetScriptForDestination(coinControl->destChange);\n+\n+            // no coin control: send change to newly generated address\n+            else\n+            {\n+                // Note: We use a new key here to keep it from being obvious which side is the change.\n+                //  The drawback is that by not reusing a previous key, the change may be lost if a\n+                //  backup is restored, if the backup doesn't have the new private key for the change.\n+                //  If we reused the old key, it would be possible to add code to look for and\n+                //  rediscover unknown transactions that were written with keys of ours to recover\n+                //  post-backup change.\n+\n+                // Reserve a new key pair from key pool\n+                CPubKey vchPubKey;\n+                bool ret;\n+                ret = reservekey.GetReservedKey(vchPubKey, true);\n+                if (!ret)\n+                {\n+                    strFailReason = _(\"Keypool ran out, please call keypoolrefill first\");\n+                    return false;\n+                }\n+\n+                scriptChange = GetScriptForDestination(vchPubKey.GetID());\n+            }\n+            CTxOut change_prototype_txout(0, scriptChange);\n+            size_t change_prototype_size = GetSerializeSize(change_prototype_txout, SER_DISK, 0);\n+\n             nFeeRet = 0;\n+            bool pick_new_inputs = true;\n+            CAmount nValueIn = 0;\n             // Start with no fee and loop until there is enough fee\n             while (true)\n             {\n@@ -2615,49 +2651,21 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 }\n \n                 // Choose coins to use\n-                CAmount nValueIn = 0;\n-                setCoins.clear();\n-                if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coinControl))\n-                {\n-                    strFailReason = _(\"Insufficient funds\");\n-                    return false;\n+                if (pick_new_inputs) {\n+                    nValueIn = 0;\n+                    setCoins.clear();\n+                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coinControl))\n+                    {\n+                        strFailReason = _(\"Insufficient funds\");\n+                        return false;\n+                    }\n                 }\n \n                 const CAmount nChange = nValueIn - nValueToSelect;\n+\n                 if (nChange > 0)\n                 {\n                     // Fill a vout to ourself\n-                    // TODO: pass in scriptChange instead of reservekey so\n-                    // change transaction isn't always pay-to-bitcoin-address\n-                    CScript scriptChange;\n-\n-                    // coin control: send change to custom address\n-                    if (coinControl && !boost::get<CNoDestination>(&coinControl->destChange))\n-                        scriptChange = GetScriptForDestination(coinControl->destChange);\n-\n-                    // no coin control: send change to newly generated address\n-                    else\n-                    {\n-                        // Note: We use a new key here to keep it from being obvious which side is the change.\n-                        //  The drawback is that by not reusing a previous key, the change may be lost if a\n-                        //  backup is restored, if the backup doesn't have the new private key for the change.\n-                        //  If we reused the old key, it would be possible to add code to look for and\n-                        //  rediscover unknown transactions that were written with keys of ours to recover\n-                        //  post-backup change.\n-\n-                        // Reserve a new key pair from key pool\n-                        CPubKey vchPubKey;\n-                        bool ret;\n-                        ret = reservekey.GetReservedKey(vchPubKey, true);\n-                        if (!ret)\n-                        {\n-                            strFailReason = _(\"Keypool ran out, please call keypoolrefill first\");\n-                            return false;\n-                        }\n-\n-                        scriptChange = GetScriptForDestination(vchPubKey.GetID());\n-                    }\n-\n                     CTxOut newTxOut(nChange, scriptChange);\n \n                     // Never create dust outputs; if we would, just\n@@ -2666,7 +2674,6 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                     {\n                         nChangePosInOut = -1;\n                         nFeeRet += nChange;\n-                        reservekey.ReturnKey();\n                     }\n                     else\n                     {\n@@ -2685,7 +2692,6 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                         txNew.vout.insert(position, newTxOut);\n                     }\n                 } else {\n-                    reservekey.ReturnKey();\n                     nChangePosInOut = -1;\n                 }\n \n@@ -2740,16 +2746,30 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 }\n \n                 if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if we have change\n-                    // output to increase.  This prevents potential overpayment\n-                    // in fees if the coins selected to meet nFeeNeeded result\n-                    // in a transaction that requires less fee than the prior\n-                    // iteration.\n+                    // Reduce fee to only the needed amount if possible. This\n+                    // prevents potential overpayment in fees if the coins\n+                    // selected to meet nFeeNeeded result in a transaction that\n+                    // requires less fee than the prior iteration.\n+\n                     // TODO: The case where nSubtractFeeFromAmount > 0 remains\n                     // to be addressed because it requires returning the fee to\n                     // the payees and not the change output.\n-                    // TODO: The case where there is no change output remains\n-                    // to be addressed so we avoid creating too small an output.\n+\n+                    // If we have no change and a big enough excess fee, then\n+                    // try to construct transaction again only without picking\n+                    // new inputs. We now know we only need the smaller fee\n+                    // (because of reduced tx size) and so we should add a\n+                    // change output. Only try this once.\n+                    CAmount fee_needed_for_change = GetMinimumFee(change_prototype_size, currentConfirmationTarget, ::mempool, ::feeEstimator, nullptr, false /* ignoreGlobalPayTxFee */, conservative_estimate);\n+                    CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, ::dustRelayFee);\n+                    CAmount max_excess_fee = fee_needed_for_change + minimum_value_for_change;\n+                    if (nFeeRet > nFeeNeeded + max_excess_fee && nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n+                        pick_new_inputs = false;\n+                        nFeeRet = nFeeNeeded + fee_needed_for_change;\n+                        continue;\n+                    }\n+\n+                    // If we have change output already, just increase it\n                     if (nFeeRet > nFeeNeeded && nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n                         CAmount extraFeePaid = nFeeRet - nFeeNeeded;\n                         std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n@@ -2758,6 +2778,12 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                     }\n                     break; // Done, enough fee included.\n                 }\n+                else if (!pick_new_inputs) {\n+                    // This shouldn't happen, we should have had enough excess\n+                    // fee to pay for the new output and still meet nFeeNeeded\n+                    strFailReason = _(\"Transaction fee and change calculation failed\");\n+                    return false;\n+                }\n \n                 // Try to reduce change to include necessary fee\n                 if (nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n@@ -2777,6 +2803,8 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n             }\n         }\n \n+        if (nChangePosInOut == -1) reservekey.ReturnKey(); // Return any reserved key if we don't have change\n+\n         if (sign)\n         {\n             CTransaction txNewConst(txNew);"
      }
    ]
  },
  {
    "sha": "8276e70de15c5c3a7525471ad619edd1237b424a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Mjc2ZTcwZGUxNWM1YzNhNzUyNTQ3MWFkNjE5ZWRkMTIzN2I0MjRh",
    "commit": {
      "author": {
        "name": "Chris Stewart",
        "email": "stewart.chris1234@gmail.com",
        "date": "2017-04-07T01:28:19Z"
      },
      "committer": {
        "name": "Chris Stewart",
        "email": "stewart.chris1234@gmail.com",
        "date": "2017-07-12T15:48:37Z"
      },
      "message": "Adding assert to avoid a memory access violation inside of PartialMerkleTree::CalcHash()\n\nAdding comment to assert in PartialMerkleTree::CalcHash()\n\nAdding comment on CMerkleBlock indicating it calls something that contains an assert\n\nRemoving EOL whitespace",
      "tree": {
        "sha": "2a64138670f3166868cc565b8f739c2cf5b11f61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a64138670f3166868cc565b8f739c2cf5b11f61"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8276e70de15c5c3a7525471ad619edd1237b424a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8276e70de15c5c3a7525471ad619edd1237b424a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8276e70de15c5c3a7525471ad619edd1237b424a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8276e70de15c5c3a7525471ad619edd1237b424a/comments",
    "author": {
      "login": "Christewart",
      "id": 3514957,
      "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Christewart",
      "html_url": "https://github.com/Christewart",
      "followers_url": "https://api.github.com/users/Christewart/followers",
      "following_url": "https://api.github.com/users/Christewart/following{/other_user}",
      "gists_url": "https://api.github.com/users/Christewart/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Christewart/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
      "organizations_url": "https://api.github.com/users/Christewart/orgs",
      "repos_url": "https://api.github.com/users/Christewart/repos",
      "events_url": "https://api.github.com/users/Christewart/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Christewart/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Christewart",
      "id": 3514957,
      "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Christewart",
      "html_url": "https://github.com/Christewart",
      "followers_url": "https://api.github.com/users/Christewart/followers",
      "following_url": "https://api.github.com/users/Christewart/following{/other_user}",
      "gists_url": "https://api.github.com/users/Christewart/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Christewart/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
      "organizations_url": "https://api.github.com/users/Christewart/orgs",
      "repos_url": "https://api.github.com/users/Christewart/repos",
      "events_url": "https://api.github.com/users/Christewart/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Christewart/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8b95239eeb052b122786d9cca6bc58106837599",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8b95239eeb052b122786d9cca6bc58106837599",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8b95239eeb052b122786d9cca6bc58106837599"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "55f899b649e30d39a110731bd9f0905905d34489",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8276e70de15c5c3a7525471ad619edd1237b424a/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8276e70de15c5c3a7525471ad619edd1237b424a/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=8276e70de15c5c3a7525471ad619edd1237b424a",
        "patch": "@@ -59,6 +59,9 @@ CMerkleBlock::CMerkleBlock(const CBlock& block, const std::set<uint256>& txids)\n }\n \n uint256 CPartialMerkleTree::CalcHash(int height, unsigned int pos, const std::vector<uint256> &vTxid) {\n+    //we can never have zero txs in a merkle block, we always need the coinbase tx\n+    //if we do not have this assert, we can hit a memory access violation when indexing into vTxid\n+    assert(vTxid.size() != 0);\n     if (height == 0) {\n         // hash at height 0 is the txids themself\n         return vTxid[pos];"
      },
      {
        "sha": "f590c487dee0f70d668cf725ffa38560b80a6827",
        "filename": "src/merkleblock.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8276e70de15c5c3a7525471ad619edd1237b424a/src/merkleblock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8276e70de15c5c3a7525471ad619edd1237b424a/src/merkleblock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.h?ref=8276e70de15c5c3a7525471ad619edd1237b424a",
        "patch": "@@ -121,6 +121,8 @@ class CPartialMerkleTree\n /**\n  * Used to relay blocks as header + vector<merkle branch>\n  * to filtered nodes.\n+ *\n+ * NOTE: The class assumes that the given CBlock has *at least* 1 transaction. If the CBlock has 0 txs, it will hit an assertion.\n  */\n class CMerkleBlock\n {"
      }
    ]
  },
  {
    "sha": "1016dacfaca5014c6af377ca787c36cf5dea88e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDE2ZGFjZmFjYTUwMTRjNmFmMzc3Y2E3ODdjMzZjZjVkZWE4OGU4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-12T18:03:42Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-12T18:03:42Z"
      },
      "message": "Fix signed/unsigned comparison warning introduced in c8e29d7ff0.",
      "tree": {
        "sha": "3f564440c9b85354eac210cbe1313d1b8775103b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3f564440c9b85354eac210cbe1313d1b8775103b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1016dacfaca5014c6af377ca787c36cf5dea88e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1016dacfaca5014c6af377ca787c36cf5dea88e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1016dacfaca5014c6af377ca787c36cf5dea88e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1016dacfaca5014c6af377ca787c36cf5dea88e8/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8b95239eeb052b122786d9cca6bc58106837599",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8b95239eeb052b122786d9cca6bc58106837599",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8b95239eeb052b122786d9cca6bc58106837599"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7018131a134ad08042c41ae1441594211448325c",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1016dacfaca5014c6af377ca787c36cf5dea88e8/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1016dacfaca5014c6af377ca787c36cf5dea88e8/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=1016dacfaca5014c6af377ca787c36cf5dea88e8",
        "patch": "@@ -27,7 +27,7 @@ CScript ParseScript(const std::string& s)\n \n     if (mapOpNames.empty())\n     {\n-        for (int op = 0; op <= MAX_OPCODE; op++)\n+        for (unsigned int op = 0; op <= MAX_OPCODE; op++)\n         {\n             // Allow OP_RESERVED to get into mapOpNames\n             if (op < OP_NOP && op != OP_RESERVED)"
      }
    ]
  },
  {
    "sha": "228987d84c352de691315474649475f3fbc5de28",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjg5ODdkODRjMzUyZGU2OTEzMTU0NzQ2NDk0NzVmM2ZiYzVkZTI4",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-07-12T18:40:02Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-07-12T18:40:02Z"
      },
      "message": "getbalance example covers at least 6 confirms",
      "tree": {
        "sha": "d0b9991ebd56a0681310c5db0ee2b537990f9a88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0b9991ebd56a0681310c5db0ee2b537990f9a88"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/228987d84c352de691315474649475f3fbc5de28",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/228987d84c352de691315474649475f3fbc5de28",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/228987d84c352de691315474649475f3fbc5de28",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/228987d84c352de691315474649475f3fbc5de28/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cef4b5ccaa37564ddff53bd21e905191362908fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cef4b5ccaa37564ddff53bd21e905191362908fc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cef4b5ccaa37564ddff53bd21e905191362908fc"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "873542a966862ac79eb3a869d66a52be774482cf",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/228987d84c352de691315474649475f3fbc5de28/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/228987d84c352de691315474649475f3fbc5de28/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=228987d84c352de691315474649475f3fbc5de28",
        "patch": "@@ -740,9 +740,9 @@ UniValue getbalance(const JSONRPCRequest& request)\n             \"\\nResult:\\n\"\n             \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this account.\\n\"\n             \"\\nExamples:\\n\"\n-            \"\\nThe total amount in the wallet\\n\"\n+            \"\\nThe total amount in the wallet with 1 or more confirmations\\n\"\n             + HelpExampleCli(\"getbalance\", \"\") +\n-            \"\\nThe total amount in the wallet at least 5 blocks confirmed\\n\"\n+            \"\\nThe total amount in the wallet at least 6 blocks confirmed\\n\"\n             + HelpExampleCli(\"getbalance\", \"\\\"*\\\" 6\") +\n             \"\\nAs a json rpc call\\n\"\n             + HelpExampleRpc(\"getbalance\", \"\\\"*\\\", 6\")"
      }
    ]
  },
  {
    "sha": "fe4fabaf12b74782ea99821ed8108f17e582060d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZTRmYWJhZjEyYjc0NzgyZWE5OTgyMWVkODEwOGYxN2U1ODIwNjBk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-12T20:55:28Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-12T21:06:15Z"
      },
      "message": "[refactor] move SplitHostPort() into utilstrencodings\n\nThis moves SplitHostPort from libbitcoin_common to libbitcoin_util so it\nis available to bitcoin-cli.",
      "tree": {
        "sha": "ba72abdf42d6c2975788cb5e48d377f22756c00f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba72abdf42d6c2975788cb5e48d377f22756c00f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe4fabaf12b74782ea99821ed8108f17e582060d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe4fabaf12b74782ea99821ed8108f17e582060d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe4fabaf12b74782ea99821ed8108f17e582060d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe4fabaf12b74782ea99821ed8108f17e582060d/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca4c545cc7e8c06bc8d9d4db1dd2d8f5fe011902",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca4c545cc7e8c06bc8d9d4db1dd2d8f5fe011902",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca4c545cc7e8c06bc8d9d4db1dd2d8f5fe011902"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 22,
      "deletions": 20
    },
    "files": [
      {
        "sha": "290a2efca2b4e86afd1c4362baeea4a4f528c5b0",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4fabaf12b74782ea99821ed8108f17e582060d/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4fabaf12b74782ea99821ed8108f17e582060d/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=fe4fabaf12b74782ea99821ed8108f17e582060d",
        "patch": "@@ -7,6 +7,7 @@\n #include \"chainparamsbase.h\"\n #include \"compat.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n #include \"netbase.h\"\n #include \"rpc/protocol.h\" // For HTTP status codes\n #include \"sync.h\""
      },
      {
        "sha": "84e1d8228df9b28612d50247edd3268719d824e2",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 19,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4fabaf12b74782ea99821ed8108f17e582060d/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4fabaf12b74782ea99821ed8108f17e582060d/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=fe4fabaf12b74782ea99821ed8108f17e582060d",
        "patch": "@@ -58,25 +58,6 @@ std::string GetNetworkName(enum Network net) {\n     }\n }\n \n-void SplitHostPort(std::string in, int &portOut, std::string &hostOut) {\n-    size_t colon = in.find_last_of(':');\n-    // if a : is found, and it either follows a [...], or no other : is in the string, treat it as port separator\n-    bool fHaveColon = colon != in.npos;\n-    bool fBracketed = fHaveColon && (in[0]=='[' && in[colon-1]==']'); // if there is a colon, and in[0]=='[', colon is not 0, so in[colon-1] is safe\n-    bool fMultiColon = fHaveColon && (in.find_last_of(':',colon-1) != in.npos);\n-    if (fHaveColon && (colon==0 || fBracketed || !fMultiColon)) {\n-        int32_t n;\n-        if (ParseInt32(in.substr(colon + 1), &n) && n > 0 && n < 0x10000) {\n-            in = in.substr(0, colon);\n-            portOut = n;\n-        }\n-    }\n-    if (in.size()>0 && in[0] == '[' && in[in.size()-1] == ']')\n-        hostOut = in.substr(1, in.size()-2);\n-    else\n-        hostOut = in;\n-}\n-\n bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)\n {\n     vIP.clear();"
      },
      {
        "sha": "fd4b34c8f1e6e987fdbec98850d8f11fe4729a91",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4fabaf12b74782ea99821ed8108f17e582060d/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4fabaf12b74782ea99821ed8108f17e582060d/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=fe4fabaf12b74782ea99821ed8108f17e582060d",
        "patch": "@@ -39,7 +39,6 @@ class proxyType\n \n enum Network ParseNetwork(std::string net);\n std::string GetNetworkName(enum Network net);\n-void SplitHostPort(std::string in, int &portOut, std::string &hostOut);\n bool SetProxy(enum Network net, const proxyType &addrProxy);\n bool GetProxy(enum Network net, proxyType &proxyInfoOut);\n bool IsProxy(const CNetAddr &addr);"
      },
      {
        "sha": "1baf7643e544618448053a3732d109f4db422923",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4fabaf12b74782ea99821ed8108f17e582060d/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4fabaf12b74782ea99821ed8108f17e582060d/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=fe4fabaf12b74782ea99821ed8108f17e582060d",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"netbase.h\"\n #include \"test/test_bitcoin.h\"\n+#include \"utilstrencodings.h\"\n \n #include <string>\n "
      },
      {
        "sha": "6a15186b67abcdb453fee74209edc81af9e4d2d5",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4fabaf12b74782ea99821ed8108f17e582060d/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4fabaf12b74782ea99821ed8108f17e582060d/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=fe4fabaf12b74782ea99821ed8108f17e582060d",
        "patch": "@@ -91,6 +91,25 @@ std::vector<unsigned char> ParseHex(const std::string& str)\n     return ParseHex(str.c_str());\n }\n \n+void SplitHostPort(std::string in, int &portOut, std::string &hostOut) {\n+    size_t colon = in.find_last_of(':');\n+    // if a : is found, and it either follows a [...], or no other : is in the string, treat it as port separator\n+    bool fHaveColon = colon != in.npos;\n+    bool fBracketed = fHaveColon && (in[0]=='[' && in[colon-1]==']'); // if there is a colon, and in[0]=='[', colon is not 0, so in[colon-1] is safe\n+    bool fMultiColon = fHaveColon && (in.find_last_of(':',colon-1) != in.npos);\n+    if (fHaveColon && (colon==0 || fBracketed || !fMultiColon)) {\n+        int32_t n;\n+        if (ParseInt32(in.substr(colon + 1), &n) && n > 0 && n < 0x10000) {\n+            in = in.substr(0, colon);\n+            portOut = n;\n+        }\n+    }\n+    if (in.size()>0 && in[0] == '[' && in[in.size()-1] == ']')\n+        hostOut = in.substr(1, in.size()-2);\n+    else\n+        hostOut = in;\n+}\n+\n std::string EncodeBase64(const unsigned char* pch, size_t len)\n {\n     static const char *pbase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";"
      },
      {
        "sha": "707fdaad169b17f83104ad45ad70819f53ae83b3",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4fabaf12b74782ea99821ed8108f17e582060d/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4fabaf12b74782ea99821ed8108f17e582060d/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=fe4fabaf12b74782ea99821ed8108f17e582060d",
        "patch": "@@ -48,6 +48,7 @@ std::string DecodeBase32(const std::string& str);\n std::string EncodeBase32(const unsigned char* pch, size_t len);\n std::string EncodeBase32(const std::string& str);\n \n+void SplitHostPort(std::string in, int &portOut, std::string &hostOut);\n std::string i64tostr(int64_t n);\n std::string itostr(int n);\n int64_t atoi64(const char* psz);"
      }
    ]
  },
  {
    "sha": "2a09a3891fde052a585dc019eea9fba26d42445d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTA5YTM4OTFmZGUwNTJhNTg1ZGMwMTllZWE5ZmJhMjZkNDI0NDVk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-12T22:14:22Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-12T22:17:24Z"
      },
      "message": "Merge #10714: Avoid printing incorrect block indexing time due to uninitialized variable\n\n959dd8781 Avoid printing incorrect block indexing time due to uninitialized variable (practicalswift)\n\nTree-SHA512: a76e43c3ffa734ed5c7eadf363f345f268aa0e6ce775aba8f856fe3bbc82f240dc7c734c5ca3ac500a12eb41fae00623413e79f484d5acf809b6e400851d771d",
      "tree": {
        "sha": "c551356edd2d2baf7976f65fc79e052983041a45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c551356edd2d2baf7976f65fc79e052983041a45"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a09a3891fde052a585dc019eea9fba26d42445d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZZp/0AAoJEKY26XYx92fgVgYP/icy9VeTZdi5nOH3ajmqK55l\nLHweoh9WFxlEdymXw6c4zA5To/3INW95RErP6AitJr6u8dROqvU7CfA9Yed45o2B\nEZsZ/M2YAc4VBaTi3Nr+ExXw1rswYyfFfgy2oyn7qiwmUaPS4WRQE+kxoELy13O3\n9PFvCGHTrS0vmJa4JjYGNKDQVDLnurwGHTG+34Wf+lJgLTklrjYRZ2H+Mj5HF18x\nDIYRNZjwV2JPq4nOYKEOqEk16oTajthzJ7+ckPINHy4EEwuGXIwFTimCw3xiT6We\nJOw6EZmsgMdFqxKywgScBugV5uQt9IgLr8yYWkeBRcGfhgdVUOlUnOxrwcbPfkyP\n2ZEtpjsmlIIdDkiCLmNnDZ6yW3Z0j1mNxZEu/Ael9r8vSfIAvjMxpDviHfGUAYJE\nciaUAVDvSDw5yopG0O08arYS/rrVh3LzxycEkKzoK+vIbBkkSuv5YQdUcebpBkdl\n/CFRm2w8lsGDJ8kziNRRbfrtUU6THh4nmod2wc7wehh1abdfTmMNnQJ3uPIcpNKH\nz+26oCvPWoRY1KEw5NgI0PfvVj5MzM8IrbPmqCzHdikvoTAo06PRvxyh9CSHVDUR\nb8kTi7ciHyHc86x6sf8VOlimzkyP9Du9aocpPu389hIXunvEUgSbVjmPcSG9nMw3\nqzj3WzLEHT7rVdPCP82t\n=ssUh\n-----END PGP SIGNATURE-----",
        "payload": "tree c551356edd2d2baf7976f65fc79e052983041a45\nparent e8b95239eeb052b122786d9cca6bc58106837599\nparent 959dd8781ed8982df06b52dd3cecc996cf30f76d\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1499897662 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1499897844 -0700\n\nMerge #10714: Avoid printing incorrect block indexing time due to uninitialized variable\n\n959dd8781 Avoid printing incorrect block indexing time due to uninitialized variable (practicalswift)\n\nTree-SHA512: a76e43c3ffa734ed5c7eadf363f345f268aa0e6ce775aba8f856fe3bbc82f240dc7c734c5ca3ac500a12eb41fae00623413e79f484d5acf809b6e400851d771d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a09a3891fde052a585dc019eea9fba26d42445d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a09a3891fde052a585dc019eea9fba26d42445d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a09a3891fde052a585dc019eea9fba26d42445d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8b95239eeb052b122786d9cca6bc58106837599",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8b95239eeb052b122786d9cca6bc58106837599",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8b95239eeb052b122786d9cca6bc58106837599"
      },
      {
        "sha": "959dd8781ed8982df06b52dd3cecc996cf30f76d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/959dd8781ed8982df06b52dd3cecc996cf30f76d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/959dd8781ed8982df06b52dd3cecc996cf30f76d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1e85642019ce48922c062989c0c08087990bff7a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a09a3891fde052a585dc019eea9fba26d42445d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a09a3891fde052a585dc019eea9fba26d42445d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2a09a3891fde052a585dc019eea9fba26d42445d",
        "patch": "@@ -1512,7 +1512,9 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         LogPrintf(\"Shutdown requested. Exiting.\\n\");\n         return false;\n     }\n-    LogPrintf(\" block index %15dms\\n\", GetTimeMillis() - nStart);\n+    if (fLoaded) {\n+        LogPrintf(\" block index %15dms\\n\", GetTimeMillis() - nStart);\n+    }\n \n     fs::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n     CAutoFile est_filein(fsbridge::fopen(est_path, \"rb\"), SER_DISK, CLIENT_VERSION);"
      }
    ]
  },
  {
    "sha": "479afa0f8486146a35f1fb96be1826061ecbcf23",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzlhZmEwZjg0ODYxNDZhMzVmMWZiOTZiZTE4MjYwNjFlY2JjZjIz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-12T23:23:59Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-12T23:29:48Z"
      },
      "message": "Merge #9804: Fixes subscript 0 (&var[0]) where should use (var.data()) instead.\n\n30ac7688e Fix subscript[0] potential bugs in key.cpp (Jeremy Rubin)\n4b1c0f2e2 Remove unnecessary branches in utilstrencodings string constructors. (Jeremy Rubin)\ne19db7b5a Fix subscript[0] in utilstrencodings.cpp (Jeremy Rubin)\nbc2e7fd98 Fix subscript[0] in streams.h (Jeremy Rubin)\n4cac0d1e0 Fix subscript[0] in validation.cpp (Jeremy Rubin)\nac658e55f Fix subscript[0] in torcontrol (Jeremy Rubin)\nb6856ebed Fix subscript[0] in netaddress.cpp (Jeremy Rubin)\n361d95265 Fix subscript[0] in base58.cpp (Jeremy Rubin)\n6896dbf16 Cleanup (safe, it was checked) subscript[0] in MurmurHash3 (and cleanup MurmurHash3 to be more clear). (Jeremy Rubin)\n96f2119e6 Fix subscript[0] in compressor.cpp (Jeremy Rubin)\n500710bd2 Fix 2 subscript[0] bugs in pubkey.cpp, and eliminate one extra size check (Jeremy Rubin)\ne0451e3e2 Fix subscript[0] bug in net.cpp if GetGroup returns a 0-sized vector (Jeremy Rubin)\n\nTree-SHA512: 5b9103652cf8c615bd8f4f32b3573d291d6b67c39e0308ce00100bc6625f346e8e016b4c999f4f34f5c37ae059490a83c3b513deb21f838af785227d06e02362",
      "tree": {
        "sha": "ec44d307a80093d6efb13a71439f17f90781080f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec44d307a80093d6efb13a71439f17f90781080f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/479afa0f8486146a35f1fb96be1826061ecbcf23",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZZrDsAAoJEKY26XYx92fg8fsP/0tUsgoWt97shFW58EZu1kF9\nbudcN6HTVGGjkEcdWtyv37GIA7zt7iuHnzFlXJwaEFcPoPCpQ/U12jzhMDxUzBav\n/knOwyIbmw5vp9OftAfuNn1wyKYjuOfaCnn3cqPnw5tvrE1+W6VMmV6e7kBpWOmK\not8zB58jBmRNpuhJ3qTP0VFiVYlZ7jUNJzgd6FpOpOlD3wOmuTmWWE5W66+/81Ay\nYUeHkptfqhTgboQUPjYay7SHtFPvuNUeLTAHYnvkv//m974eP/aOE3mpHfv3kQaz\n9AAxwzbAB0Q/3QQ2KnfEASXZGZQkEFS7Cu3NOeV1qKhSqboAXsL0yb7IX/BkMeUT\nIxe86drz6+Y4gPSg+gbbdm92a77cnUnNuVkujtO4oEz9LIqUcBg/rBCFtN8jsRUF\nmmkd0/7AxsC7Hli6u0wW8/qQS3oqf5dpR2CGFTefH5KnmkFcmDyvNt8IW46juCno\nQF5nOx26+lffOIuPUgQE3eFZUxqIRQUa9GP5QZgq8e08rrwY8Qn4ax5UDEHy8AOs\nRbrVW69rB85AOx+pJE4t/wzcBQM/G9lCbbuZZDjYATMUu9FvqjQSuyuffQ9FBRmX\nPulC7KmZ6+mYiMQv/LSnPbDCJEot0CiEuq8YTkVc3TxrBmN1Z6BBw5z0RwrrTThb\n4nen6Ce37kxAB6sv1J+w\n=BkG4\n-----END PGP SIGNATURE-----",
        "payload": "tree ec44d307a80093d6efb13a71439f17f90781080f\nparent 2a09a3891fde052a585dc019eea9fba26d42445d\nparent 30ac7688e398bbe5400a48ecf0726b679ffb845d\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1499901839 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1499902188 -0700\n\nMerge #9804: Fixes subscript 0 (&var[0]) where should use (var.data()) instead.\n\n30ac7688e Fix subscript[0] potential bugs in key.cpp (Jeremy Rubin)\n4b1c0f2e2 Remove unnecessary branches in utilstrencodings string constructors. (Jeremy Rubin)\ne19db7b5a Fix subscript[0] in utilstrencodings.cpp (Jeremy Rubin)\nbc2e7fd98 Fix subscript[0] in streams.h (Jeremy Rubin)\n4cac0d1e0 Fix subscript[0] in validation.cpp (Jeremy Rubin)\nac658e55f Fix subscript[0] in torcontrol (Jeremy Rubin)\nb6856ebed Fix subscript[0] in netaddress.cpp (Jeremy Rubin)\n361d95265 Fix subscript[0] in base58.cpp (Jeremy Rubin)\n6896dbf16 Cleanup (safe, it was checked) subscript[0] in MurmurHash3 (and cleanup MurmurHash3 to be more clear). (Jeremy Rubin)\n96f2119e6 Fix subscript[0] in compressor.cpp (Jeremy Rubin)\n500710bd2 Fix 2 subscript[0] bugs in pubkey.cpp, and eliminate one extra size check (Jeremy Rubin)\ne0451e3e2 Fix subscript[0] bug in net.cpp if GetGroup returns a 0-sized vector (Jeremy Rubin)\n\nTree-SHA512: 5b9103652cf8c615bd8f4f32b3573d291d6b67c39e0308ce00100bc6625f346e8e016b4c999f4f34f5c37ae059490a83c3b513deb21f838af785227d06e02362\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/479afa0f8486146a35f1fb96be1826061ecbcf23",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/479afa0f8486146a35f1fb96be1826061ecbcf23",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/479afa0f8486146a35f1fb96be1826061ecbcf23/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a09a3891fde052a585dc019eea9fba26d42445d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a09a3891fde052a585dc019eea9fba26d42445d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a09a3891fde052a585dc019eea9fba26d42445d"
      },
      {
        "sha": "30ac7688e398bbe5400a48ecf0726b679ffb845d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30ac7688e398bbe5400a48ecf0726b679ffb845d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30ac7688e398bbe5400a48ecf0726b679ffb845d"
      }
    ],
    "stats": {
      "total": 108,
      "additions": 51,
      "deletions": 57
    },
    "files": [
      {
        "sha": "17022a6bc161f084e4672882ce4f6e1060fe3d61",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/479afa0f8486146a35f1fb96be1826061ecbcf23/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/479afa0f8486146a35f1fb96be1826061ecbcf23/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=479afa0f8486146a35f1fb96be1826061ecbcf23",
        "patch": "@@ -110,7 +110,7 @@ std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)\n \n std::string EncodeBase58(const std::vector<unsigned char>& vch)\n {\n-    return EncodeBase58(&vch[0], &vch[0] + vch.size());\n+    return EncodeBase58(vch.data(), vch.data() + vch.size());\n }\n \n bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet)\n@@ -160,7 +160,7 @@ void CBase58Data::SetData(const std::vector<unsigned char>& vchVersionIn, const\n     vchVersion = vchVersionIn;\n     vchData.resize(nSize);\n     if (!vchData.empty())\n-        memcpy(&vchData[0], pdata, nSize);\n+        memcpy(vchData.data(), pdata, nSize);\n }\n \n void CBase58Data::SetData(const std::vector<unsigned char>& vchVersionIn, const unsigned char* pbegin, const unsigned char* pend)\n@@ -180,8 +180,8 @@ bool CBase58Data::SetString(const char* psz, unsigned int nVersionBytes)\n     vchVersion.assign(vchTemp.begin(), vchTemp.begin() + nVersionBytes);\n     vchData.resize(vchTemp.size() - nVersionBytes);\n     if (!vchData.empty())\n-        memcpy(&vchData[0], &vchTemp[nVersionBytes], vchData.size());\n-    memory_cleanse(&vchTemp[0], vchTemp.size());\n+        memcpy(vchData.data(), vchTemp.data() + nVersionBytes, vchData.size());\n+    memory_cleanse(vchTemp.data(), vchTemp.size());\n     return true;\n }\n \n@@ -262,7 +262,7 @@ CTxDestination CBitcoinAddress::Get() const\n     if (!IsValid())\n         return CNoDestination();\n     uint160 id;\n-    memcpy(&id, &vchData[0], 20);\n+    memcpy(&id, vchData.data(), 20);\n     if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n         return CKeyID(id);\n     else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n@@ -276,7 +276,7 @@ bool CBitcoinAddress::GetKeyID(CKeyID& keyID) const\n     if (!IsValid() || vchVersion != Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n         return false;\n     uint160 id;\n-    memcpy(&id, &vchData[0], 20);\n+    memcpy(&id, vchData.data(), 20);\n     keyID = CKeyID(id);\n     return true;\n }"
      },
      {
        "sha": "4de5cc6ce5f9f3e4b8738bfa399743f5a8284b9d",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/479afa0f8486146a35f1fb96be1826061ecbcf23/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/479afa0f8486146a35f1fb96be1826061ecbcf23/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=479afa0f8486146a35f1fb96be1826061ecbcf23",
        "patch": "@@ -148,7 +148,7 @@ template<typename K, int Size, CChainParams::Base58Type Type> class CBitcoinExtK\n         K ret;\n         if (vchData.size() == Size) {\n             // If base58 encoded data does not hold an ext key, return a !IsValid() key\n-            ret.Decode(&vchData[0]);\n+            ret.Decode(vchData.data());\n         }\n         return ret;\n     }"
      },
      {
        "sha": "f4c12f38d2d1fc7494669adbc3c3191978743db0",
        "filename": "src/compressor.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/479afa0f8486146a35f1fb96be1826061ecbcf23/src/compressor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/479afa0f8486146a35f1fb96be1826061ecbcf23/src/compressor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.cpp?ref=479afa0f8486146a35f1fb96be1826061ecbcf23",
        "patch": "@@ -93,30 +93,30 @@ bool CScriptCompressor::Decompress(unsigned int nSize, const std::vector<unsigne\n         script[0] = OP_DUP;\n         script[1] = OP_HASH160;\n         script[2] = 20;\n-        memcpy(&script[3], &in[0], 20);\n+        memcpy(&script[3], in.data(), 20);\n         script[23] = OP_EQUALVERIFY;\n         script[24] = OP_CHECKSIG;\n         return true;\n     case 0x01:\n         script.resize(23);\n         script[0] = OP_HASH160;\n         script[1] = 20;\n-        memcpy(&script[2], &in[0], 20);\n+        memcpy(&script[2], in.data(), 20);\n         script[22] = OP_EQUAL;\n         return true;\n     case 0x02:\n     case 0x03:\n         script.resize(35);\n         script[0] = 33;\n         script[1] = nSize;\n-        memcpy(&script[2], &in[0], 32);\n+        memcpy(&script[2], in.data(), 32);\n         script[34] = OP_CHECKSIG;\n         return true;\n     case 0x04:\n     case 0x05:\n         unsigned char vch[33] = {};\n         vch[0] = nSize - 2;\n-        memcpy(&vch[1], &in[0], 32);\n+        memcpy(&vch[1], in.data(), 32);\n         CPubKey pubkey(&vch[0], &vch[33]);\n         if (!pubkey.Decompress())\n             return false;"
      },
      {
        "sha": "5a15600be55e82dc595f3fee61e398431a4c219e",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 23,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/479afa0f8486146a35f1fb96be1826061ecbcf23/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/479afa0f8486146a35f1fb96be1826061ecbcf23/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=479afa0f8486146a35f1fb96be1826061ecbcf23",
        "patch": "@@ -17,36 +17,34 @@ unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char\n {\n     // The following is MurmurHash3 (x86_32), see http://code.google.com/p/smhasher/source/browse/trunk/MurmurHash3.cpp\n     uint32_t h1 = nHashSeed;\n-    if (vDataToHash.size() > 0)\n-    {\n-        const uint32_t c1 = 0xcc9e2d51;\n-        const uint32_t c2 = 0x1b873593;\n+    const uint32_t c1 = 0xcc9e2d51;\n+    const uint32_t c2 = 0x1b873593;\n \n-        const int nblocks = vDataToHash.size() / 4;\n+    const int nblocks = vDataToHash.size() / 4;\n \n-        //----------\n-        // body\n-        const uint8_t* blocks = &vDataToHash[0] + nblocks * 4;\n+    //----------\n+    // body\n+    const uint8_t* blocks = vDataToHash.data();\n \n-        for (int i = -nblocks; i; i++) {\n-            uint32_t k1 = ReadLE32(blocks + i*4);\n+    for (int i = 0; i < nblocks; ++i) {\n+        uint32_t k1 = ReadLE32(blocks + i*4);\n \n-            k1 *= c1;\n-            k1 = ROTL32(k1, 15);\n-            k1 *= c2;\n+        k1 *= c1;\n+        k1 = ROTL32(k1, 15);\n+        k1 *= c2;\n \n-            h1 ^= k1;\n-            h1 = ROTL32(h1, 13);\n-            h1 = h1 * 5 + 0xe6546b64;\n-        }\n+        h1 ^= k1;\n+        h1 = ROTL32(h1, 13);\n+        h1 = h1 * 5 + 0xe6546b64;\n+    }\n \n-        //----------\n-        // tail\n-        const uint8_t* tail = (const uint8_t*)(&vDataToHash[0] + nblocks * 4);\n+    //----------\n+    // tail\n+    const uint8_t* tail = vDataToHash.data() + nblocks * 4;\n \n-        uint32_t k1 = 0;\n+    uint32_t k1 = 0;\n \n-        switch (vDataToHash.size() & 3) {\n+    switch (vDataToHash.size() & 3) {\n         case 3:\n             k1 ^= tail[2] << 16;\n         case 2:\n@@ -57,7 +55,6 @@ unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char\n             k1 = ROTL32(k1, 15);\n             k1 *= c2;\n             h1 ^= k1;\n-        }\n     }\n \n     //----------"
      },
      {
        "sha": "5a991fc1d2911cdf27309fe7ccb2aca65fdf1368",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/479afa0f8486146a35f1fb96be1826061ecbcf23/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/479afa0f8486146a35f1fb96be1826061ecbcf23/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=479afa0f8486146a35f1fb96be1826061ecbcf23",
        "patch": "@@ -138,7 +138,7 @@ CPrivKey CKey::GetPrivKey() const {\n     size_t privkeylen;\n     privkey.resize(279);\n     privkeylen = 279;\n-    ret = ec_privkey_export_der(secp256k1_context_sign, (unsigned char*)&privkey[0], &privkeylen, begin(), fCompressed ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED);\n+    ret = ec_privkey_export_der(secp256k1_context_sign, (unsigned char*) privkey.data(), &privkeylen, begin(), fCompressed ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED);\n     assert(ret);\n     privkey.resize(privkeylen);\n     return privkey;\n@@ -167,7 +167,7 @@ bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_\n     secp256k1_ecdsa_signature sig;\n     int ret = secp256k1_ecdsa_sign(secp256k1_context_sign, &sig, hash.begin(), begin(), secp256k1_nonce_function_rfc6979, test_case ? extra_entropy : NULL);\n     assert(ret);\n-    secp256k1_ecdsa_signature_serialize_der(secp256k1_context_sign, (unsigned char*)&vchSig[0], &nSigLen, &sig);\n+    secp256k1_ecdsa_signature_serialize_der(secp256k1_context_sign, (unsigned char*)vchSig.data(), &nSigLen, &sig);\n     vchSig.resize(nSigLen);\n     return true;\n }\n@@ -202,7 +202,7 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n }\n \n bool CKey::Load(CPrivKey &privkey, CPubKey &vchPubKey, bool fSkipCheck=false) {\n-    if (!ec_privkey_import_der(secp256k1_context_sign, (unsigned char*)begin(), &privkey[0], privkey.size()))\n+    if (!ec_privkey_import_der(secp256k1_context_sign, (unsigned char*)begin(), privkey.data(), privkey.size()))\n         return false;\n     fCompressed = vchPubKey.IsCompressed();\n     fValid = true;\n@@ -245,8 +245,8 @@ void CExtKey::SetMaster(const unsigned char *seed, unsigned int nSeedLen) {\n     static const unsigned char hashkey[] = {'B','i','t','c','o','i','n',' ','s','e','e','d'};\n     std::vector<unsigned char, secure_allocator<unsigned char>> vout(64);\n     CHMAC_SHA512(hashkey, sizeof(hashkey)).Write(seed, nSeedLen).Finalize(vout.data());\n-    key.Set(&vout[0], &vout[32], true);\n-    memcpy(chaincode.begin(), &vout[32], 32);\n+    key.Set(vout.data(), vout.data() + 32, true);\n+    memcpy(chaincode.begin(), vout.data() + 32, 32);\n     nDepth = 0;\n     nChild = 0;\n     memset(vchFingerprint, 0, sizeof(vchFingerprint));"
      },
      {
        "sha": "5bf3af7ea3755cb423d7ad37cd13b3b0de3cc09d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/479afa0f8486146a35f1fb96be1826061ecbcf23/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/479afa0f8486146a35f1fb96be1826061ecbcf23/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=479afa0f8486146a35f1fb96be1826061ecbcf23",
        "patch": "@@ -2876,5 +2876,5 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n {\n     std::vector<unsigned char> vchNetGroup(ad.GetGroup());\n \n-    return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(&vchNetGroup[0], vchNetGroup.size()).Finalize();\n+    return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }"
      },
      {
        "sha": "110e778fbd81766dac4fb71cfb5a62d9c1c57a04",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/479afa0f8486146a35f1fb96be1826061ecbcf23/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/479afa0f8486146a35f1fb96be1826061ecbcf23/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=479afa0f8486146a35f1fb96be1826061ecbcf23",
        "patch": "@@ -573,7 +573,7 @@ std::vector<unsigned char> CService::GetKey() const\n {\n      std::vector<unsigned char> vKey;\n      vKey.resize(18);\n-     memcpy(&vKey[0], ip, 16);\n+     memcpy(vKey.data(), ip, 16);\n      vKey[16] = port / 0x100;\n      vKey[17] = port & 0x0FF;\n      return vKey;"
      },
      {
        "sha": "91af4e56f2d63e22d971134e89947b420440e9d6",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/479afa0f8486146a35f1fb96be1826061ecbcf23/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/479afa0f8486146a35f1fb96be1826061ecbcf23/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=479afa0f8486146a35f1fb96be1826061ecbcf23",
        "patch": "@@ -172,10 +172,7 @@ bool CPubKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchS\n     if (!secp256k1_ec_pubkey_parse(secp256k1_context_verify, &pubkey, &(*this)[0], size())) {\n         return false;\n     }\n-    if (vchSig.size() == 0) {\n-        return false;\n-    }\n-    if (!ecdsa_signature_parse_der_lax(secp256k1_context_verify, &sig, &vchSig[0], vchSig.size())) {\n+    if (!ecdsa_signature_parse_der_lax(secp256k1_context_verify, &sig, vchSig.data(), vchSig.size())) {\n         return false;\n     }\n     /* libsecp256k1's ECDSA verification requires lower-S signatures, which have\n@@ -274,7 +271,7 @@ bool CExtPubKey::Derive(CExtPubKey &out, unsigned int _nChild) const {\n \n /* static */ bool CPubKey::CheckLowS(const std::vector<unsigned char>& vchSig) {\n     secp256k1_ecdsa_signature sig;\n-    if (!ecdsa_signature_parse_der_lax(secp256k1_context_verify, &sig, &vchSig[0], vchSig.size())) {\n+    if (!ecdsa_signature_parse_der_lax(secp256k1_context_verify, &sig, vchSig.data(), vchSig.size())) {\n         return false;\n     }\n     return (!secp256k1_ecdsa_signature_normalize(secp256k1_context_verify, NULL, &sig));"
      },
      {
        "sha": "8b86a07a7676a6fa77d05fc155dcb2fd38996301",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/479afa0f8486146a35f1fb96be1826061ecbcf23/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/479afa0f8486146a35f1fb96be1826061ecbcf23/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=479afa0f8486146a35f1fb96be1826061ecbcf23",
        "patch": "@@ -450,15 +450,15 @@ class LimitedString\n         }\n         string.resize(size);\n         if (size != 0)\n-            s.read((char*)&string[0], size);\n+            s.read((char*)string.data(), size);\n     }\n \n     template<typename Stream>\n     void Serialize(Stream& s) const\n     {\n         WriteCompactSize(s, string.size());\n         if (!string.empty())\n-            s.write((char*)&string[0], string.size());\n+            s.write((char*)string.data(), string.size());\n     }\n };\n \n@@ -556,7 +556,7 @@ void Serialize(Stream& os, const std::basic_string<C>& str)\n {\n     WriteCompactSize(os, str.size());\n     if (!str.empty())\n-        os.write((char*)&str[0], str.size() * sizeof(str[0]));\n+        os.write((char*)str.data(), str.size() * sizeof(C));\n }\n \n template<typename Stream, typename C>\n@@ -565,7 +565,7 @@ void Unserialize(Stream& is, std::basic_string<C>& str)\n     unsigned int nSize = ReadCompactSize(is);\n     str.resize(nSize);\n     if (nSize != 0)\n-        is.read((char*)&str[0], nSize * sizeof(str[0]));\n+        is.read((char*)str.data(), nSize * sizeof(C));\n }\n \n \n@@ -578,7 +578,7 @@ void Serialize_impl(Stream& os, const prevector<N, T>& v, const unsigned char&)\n {\n     WriteCompactSize(os, v.size());\n     if (!v.empty())\n-        os.write((char*)&v[0], v.size() * sizeof(T));\n+        os.write((char*)v.data(), v.size() * sizeof(T));\n }\n \n template<typename Stream, unsigned int N, typename T, typename V>\n@@ -646,7 +646,7 @@ void Serialize_impl(Stream& os, const std::vector<T, A>& v, const unsigned char&\n {\n     WriteCompactSize(os, v.size());\n     if (!v.empty())\n-        os.write((char*)&v[0], v.size() * sizeof(T));\n+        os.write((char*)v.data(), v.size() * sizeof(T));\n }\n \n template<typename Stream, typename T, typename A, typename V>"
      },
      {
        "sha": "245fb9cd8fdfc2ec965abce7e0d85332a4c494a1",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/479afa0f8486146a35f1fb96be1826061ecbcf23/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/479afa0f8486146a35f1fb96be1826061ecbcf23/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=479afa0f8486146a35f1fb96be1826061ecbcf23",
        "patch": "@@ -389,7 +389,7 @@ class CDataStream\n     {\n         // Special case: stream << stream concatenates like stream += stream\n         if (!vch.empty())\n-            s.write((char*)&vch[0], vch.size() * sizeof(vch[0]));\n+            s.write((char*)vch.data(), vch.size() * sizeof(value_type));\n     }\n \n     template<typename T>"
      },
      {
        "sha": "ac13f73e705ea42256391619a1b28109bf4ebfec",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/479afa0f8486146a35f1fb96be1826061ecbcf23/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/479afa0f8486146a35f1fb96be1826061ecbcf23/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=479afa0f8486146a35f1fb96be1826061ecbcf23",
        "patch": "@@ -662,7 +662,7 @@ void TorController::protocolinfo_cb(TorControlConnection& _conn, const TorContro\n                 // _conn.Command(\"AUTHENTICATE \" + HexStr(status_cookie.second), boost::bind(&TorController::auth_cb, this, _1, _2));\n                 cookie = std::vector<uint8_t>(status_cookie.second.begin(), status_cookie.second.end());\n                 clientNonce = std::vector<uint8_t>(TOR_NONCE_SIZE, 0);\n-                GetRandBytes(&clientNonce[0], TOR_NONCE_SIZE);\n+                GetRandBytes(clientNonce.data(), TOR_NONCE_SIZE);\n                 _conn.Command(\"AUTHCHALLENGE SAFECOOKIE \" + HexStr(clientNonce), boost::bind(&TorController::authchallenge_cb, this, _1, _2));\n             } else {\n                 if (status_cookie.first) {"
      },
      {
        "sha": "2fabb8cf7a39b772a054e49047a6129f4e6f1f12",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/479afa0f8486146a35f1fb96be1826061ecbcf23/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/479afa0f8486146a35f1fb96be1826061ecbcf23/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=479afa0f8486146a35f1fb96be1826061ecbcf23",
        "patch": "@@ -228,7 +228,7 @@ std::vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid)\n std::string DecodeBase64(const std::string& str)\n {\n     std::vector<unsigned char> vchRet = DecodeBase64(str.c_str());\n-    return (vchRet.size() == 0) ? std::string() : std::string((const char*)&vchRet[0], vchRet.size());\n+    return std::string((const char*)vchRet.data(), vchRet.size());\n }\n \n std::string EncodeBase32(const unsigned char* pch, size_t len)\n@@ -415,7 +415,7 @@ std::vector<unsigned char> DecodeBase32(const char* p, bool* pfInvalid)\n std::string DecodeBase32(const std::string& str)\n {\n     std::vector<unsigned char> vchRet = DecodeBase32(str.c_str());\n-    return (vchRet.size() == 0) ? std::string() : std::string((const char*)&vchRet[0], vchRet.size());\n+    return std::string((const char*)vchRet.data(), vchRet.size());\n }\n \n static bool ParsePrechecks(const std::string& str)"
      },
      {
        "sha": "a21367848b3c5218eaa12e91671abfe1e5c21330",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/479afa0f8486146a35f1fb96be1826061ecbcf23/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/479afa0f8486146a35f1fb96be1826061ecbcf23/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=479afa0f8486146a35f1fb96be1826061ecbcf23",
        "patch": "@@ -2890,7 +2890,7 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n     if (consensusParams.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout != 0) {\n         if (commitpos == -1) {\n             uint256 witnessroot = BlockWitnessMerkleRoot(block, NULL);\n-            CHash256().Write(witnessroot.begin(), 32).Write(&ret[0], 32).Finalize(witnessroot.begin());\n+            CHash256().Write(witnessroot.begin(), 32).Write(ret.data(), 32).Finalize(witnessroot.begin());\n             CTxOut out;\n             out.nValue = 0;\n             out.scriptPubKey.resize(38);"
      }
    ]
  },
  {
    "sha": "69a4339ef509da633e83fa9968ac646c58b95390",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OWE0MzM5ZWY1MDlkYTYzM2U4M2ZhOTk2OGFjNjQ2YzU4Yjk1Mzkw",
    "commit": {
      "author": {
        "name": "Lawrence Nahum",
        "email": "lawrence@greenaddress.it",
        "date": "2017-07-12T22:02:10Z"
      },
      "committer": {
        "name": "Lawrence Nahum",
        "email": "lawrence@greenaddress.it",
        "date": "2017-07-12T23:36:39Z"
      },
      "message": "missing white space in function arg",
      "tree": {
        "sha": "31cca75278e0d8a723b0aeae23ee511644811d55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31cca75278e0d8a723b0aeae23ee511644811d55"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69a4339ef509da633e83fa9968ac646c58b95390",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEs3VJeyGdexbujr8sF6uLwyCxUdgFAllmsocACgkQF6uLwyCx\nUdiyHgf/TOeXnIF0BOVUX0ROtkwrmwGI67kx9t1JBOzSSvdW3/CPB8a8BX6CJ8lk\n3rTex4A4EZByJllbTaBaQ46j9biqPz3+dCQq4C5RzXescFiErA3VUQ5Cr9m9PMwY\nB8xM9fv5XTlNtPiGSiEH//mfsMEVxNGuacYlAI44bWNBmMr7pMg4SVkYuWBt5bsO\nsU5LU9Gnj36bJOmBtJkv9uzbwNsETqA3Br+SkdoezVosRzzthAy5+jbQ1J/vTGDR\n0sActaq8pYmTrDDUzo2dgtr25DniDB2L2TLkg/FHDpfuIFAG3ofIEcbrMWpkFjd4\nn2VXVHJxqvH6k8FjXrjgn9O1/mMMdQ==\n=rH+i\n-----END PGP SIGNATURE-----",
        "payload": "tree 31cca75278e0d8a723b0aeae23ee511644811d55\nparent 479afa0f8486146a35f1fb96be1826061ecbcf23\nauthor Lawrence Nahum <lawrence@greenaddress.it> 1499896930 +0200\ncommitter Lawrence Nahum <lawrence@greenaddress.it> 1499902599 +0200\n\nmissing white space in function arg\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69a4339ef509da633e83fa9968ac646c58b95390",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69a4339ef509da633e83fa9968ac646c58b95390",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69a4339ef509da633e83fa9968ac646c58b95390/comments",
    "author": {
      "login": "greenaddress",
      "id": 5269298,
      "node_id": "MDQ6VXNlcjUyNjkyOTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5269298?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/greenaddress",
      "html_url": "https://github.com/greenaddress",
      "followers_url": "https://api.github.com/users/greenaddress/followers",
      "following_url": "https://api.github.com/users/greenaddress/following{/other_user}",
      "gists_url": "https://api.github.com/users/greenaddress/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/greenaddress/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/greenaddress/subscriptions",
      "organizations_url": "https://api.github.com/users/greenaddress/orgs",
      "repos_url": "https://api.github.com/users/greenaddress/repos",
      "events_url": "https://api.github.com/users/greenaddress/events{/privacy}",
      "received_events_url": "https://api.github.com/users/greenaddress/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "greenaddress",
      "id": 5269298,
      "node_id": "MDQ6VXNlcjUyNjkyOTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5269298?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/greenaddress",
      "html_url": "https://github.com/greenaddress",
      "followers_url": "https://api.github.com/users/greenaddress/followers",
      "following_url": "https://api.github.com/users/greenaddress/following{/other_user}",
      "gists_url": "https://api.github.com/users/greenaddress/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/greenaddress/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/greenaddress/subscriptions",
      "organizations_url": "https://api.github.com/users/greenaddress/orgs",
      "repos_url": "https://api.github.com/users/greenaddress/repos",
      "events_url": "https://api.github.com/users/greenaddress/events{/privacy}",
      "received_events_url": "https://api.github.com/users/greenaddress/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "479afa0f8486146a35f1fb96be1826061ecbcf23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/479afa0f8486146a35f1fb96be1826061ecbcf23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/479afa0f8486146a35f1fb96be1826061ecbcf23"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8ef90b6ae89afa9f85e29293c7ebf352d0174e48",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69a4339ef509da633e83fa9968ac646c58b95390/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69a4339ef509da633e83fa9968ac646c58b95390/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=69a4339ef509da633e83fa9968ac646c58b95390",
        "patch": "@@ -455,7 +455,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n \n     // Reject transactions with witness before segregated witness activates (override with -prematurewitness)\n     bool witnessEnabled = IsWitnessEnabled(chainActive.Tip(), chainparams.GetConsensus());\n-    if (!GetBoolArg(\"-prematurewitness\",false) && tx.HasWitness() && !witnessEnabled) {\n+    if (!GetBoolArg(\"-prematurewitness\", false) && tx.HasWitness() && !witnessEnabled) {\n         return state.DoS(0, false, REJECT_NONSTANDARD, \"no-witness-yet\", true);\n     }\n "
      }
    ]
  },
  {
    "sha": "e4fcbf797ed3b472d352ac3794ec82f581209c50",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNGZjYmY3OTdlZDNiNDcyZDM1MmFjMzc5NGVjODJmNTgxMjA5YzUw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-13T01:23:30Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-13T01:25:35Z"
      },
      "message": "Merge #10780: Simplify \"!foo || (foo && bar)\" as \"!foo || bar\"\n\n1e3a3200a Simplify \"!foo || (foo && bar)\" as \"!foo || bar\" (practicalswift)\n\nTree-SHA512: d5ce6d7a9f3741e7abe8542b840268aa683e276aac7587041d32385a4c1273e20c236bec7590e27540dde72defb3f879d4695822bb7bfdb092cc20d9aefa64c1",
      "tree": {
        "sha": "d99cb734d149476b03b6ea719305f64bf609eb64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d99cb734d149476b03b6ea719305f64bf609eb64"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4fcbf797ed3b472d352ac3794ec82f581209c50",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZZswPAAoJEKY26XYx92fgoZUP/1UdiJc00h04SqSUzYyKhuag\n1ER7FWmd+MCuDBqClpbjjT78l83rATfGyxumvS/Ua1RnAs8t546sJrRdhAGZ7r/D\nKwOPdRIHK/U+TE1s6mrGJ2SObL6bYjZAUeLwkQdfIfmrxsft8Q6m7AQvNOLaLjkI\naI4POGtwjQgoVfwTVSHXOGnQtiuMq9jCF9li9fY6T5a3qoBsvx3gRH+maZuSVFD7\nXIAFPg/MwuUoCTgNGqMSbSFw1maGHK5fkjkfioKZh6X0fja5iNoAAN9ImiuFUZ1A\n9IZjbfHDJ1i1vyGH4DmPkt87VPBEtQX6N5o6FR3UX3PUdh9UM0cR1rgcgEu/Mz62\nUTyFcvvQupqX8mQ/4HJkvBVFpFOSqiNwnHwCiiuL5Z9ft32aUz8bwhMQT+15hqrv\n0KfuEGwHwj3gJRJ3eJhRyNN4ERjcwEk6+/XJcnXT+57+/jRGRESjf9I4ghA5VXGG\nYQSsy7HJCe/D9hOs9VUA1aXr2l4h5mDYIM2rMfFJjEs9sKhsetNvjDrgC7uWLtHy\ng7L2fA2AQkIJ/B9D2mAUcvizdzY/EiTnQ3xGV5372pNt8xuScxZ3SAjbcP6cndZ0\nJiEEtmMQNo8cZsv/5NRgYlIJjHNdv5pNr8bK9MUYNveDPEVDLcsaqAEum292tn4K\nHQgp07qX9lIDVDLeTtke\n=Skwg\n-----END PGP SIGNATURE-----",
        "payload": "tree d99cb734d149476b03b6ea719305f64bf609eb64\nparent 479afa0f8486146a35f1fb96be1826061ecbcf23\nparent 1e3a3200afd74b22fdbb5d9425722b0c031e7453\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1499909010 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1499909135 -0700\n\nMerge #10780: Simplify \"!foo || (foo && bar)\" as \"!foo || bar\"\n\n1e3a3200a Simplify \"!foo || (foo && bar)\" as \"!foo || bar\" (practicalswift)\n\nTree-SHA512: d5ce6d7a9f3741e7abe8542b840268aa683e276aac7587041d32385a4c1273e20c236bec7590e27540dde72defb3f879d4695822bb7bfdb092cc20d9aefa64c1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4fcbf797ed3b472d352ac3794ec82f581209c50",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e4fcbf797ed3b472d352ac3794ec82f581209c50",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4fcbf797ed3b472d352ac3794ec82f581209c50/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "479afa0f8486146a35f1fb96be1826061ecbcf23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/479afa0f8486146a35f1fb96be1826061ecbcf23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/479afa0f8486146a35f1fb96be1826061ecbcf23"
      },
      {
        "sha": "1e3a3200afd74b22fdbb5d9425722b0c031e7453",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e3a3200afd74b22fdbb5d9425722b0c031e7453",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e3a3200afd74b22fdbb5d9425722b0c031e7453"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "16d11529b0176927dfc630c2c0d79ab70e57e2bd",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4fcbf797ed3b472d352ac3794ec82f581209c50/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4fcbf797ed3b472d352ac3794ec82f581209c50/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e4fcbf797ed3b472d352ac3794ec82f581209c50",
        "patch": "@@ -1141,7 +1141,7 @@ static void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip)\n     // or a chain that is entirely longer than ours and invalid (note that this should be detected by both)\n     // We define it this way because it allows us to only store the highest fork tip (+ base) which meets\n     // the 7-block condition and from this always have the most-likely-to-cause-warning fork\n-    if (pfork && (!pindexBestForkTip || (pindexBestForkTip && pindexNewForkTip->nHeight > pindexBestForkTip->nHeight)) &&\n+    if (pfork && (!pindexBestForkTip || pindexNewForkTip->nHeight > pindexBestForkTip->nHeight) &&\n             pindexNewForkTip->nChainWork - pfork->nChainWork > (GetBlockProof(*pfork) * 7) &&\n             chainActive.Height() - pindexNewForkTip->nHeight < 72)\n     {"
      }
    ]
  },
  {
    "sha": "7666250ffb4e8fc5c98556e2c8e121c72d6fe54c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjY2MjUwZmZiNGU4ZmM1Yzk4NTU2ZTJjOGUxMjFjNzJkNmZlNTRj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-13T07:21:08Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-13T07:21:14Z"
      },
      "message": "Merge #10810: missing white space in function arg\n\n69a4339ef missing white space in function arg (Lawrence Nahum)\n\nPull request description:\n\nTree-SHA512: 94d832eca0b5429cf48c7c1d4489942b53182c5b7ad9f24264867e7631301173c23a48f7b2e8fd22ff1b3137bafacb3f9d4320f4df235668c9096aaefff7afe8",
      "tree": {
        "sha": "868839ad4033b99ea83d6c32a2c1894d4b77dd12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/868839ad4033b99ea83d6c32a2c1894d4b77dd12"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7666250ffb4e8fc5c98556e2c8e121c72d6fe54c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAllnH2oACgkQHrd2uwPH\nki1E0w//UUZFk92sEUOTjeIJ1Og7qJIHJ+cKlkw1Cdyca6dyhpMqfO8OGJ1ULV3h\nLTtjYBFkepo7UNc2XrOAU2i8b6J83ykgcCfj/m0cIIF+Ap3liI6Q4n9ZOvMEz3TV\n+MduIBbGN3F9g8uxm6qKrmsDrvY5a1ZuaDE+JzCE7l6xKp+ak3O0hH+TDu29dz2m\nCcR5vHqHngn8LA7kLnjAwDAZtXdn7t5KvJcm4UcfQ6drnTpC9z25HvutF+Efuisx\n/9/JhbhamMV6a4FjmJKiBCv5mOsIavqP2gAOjx1bj//gIVC/2c2PNSD/pMkeQRis\niBnXylcP6f9I6ril5UXc7T1QN9fi3m//ndCE5JlN2Idpc57H5bG6P+qOc84wQJIE\nQ1RIwMVdR227tF3HAxMRYB8Q++pb+Zyz0KcifJ0rRpt6PwWk3bhfYveivFX+dXVB\njRXQuFLh5dQfv5oABoqNn1WBkY1eny+AxJ/lzhIx5hflxyBJcDLCIQARbWFkFlYB\nLMQWsZSK2nX/lv3B3BQ3nw7Daxf9sVXUdbLq4EJS0Mk/Q4VSATqeTclx5KJCIoFq\nyhSR+B/RBpjx6o3FnzcecJlAcYxwN0eoXnjMvZ8MEgle5iXB8SYFb+V9u4nDEO8c\nypXP60j3uTvp5BSFcG2znlVA9PohG3l03GWVg81EBMlQIe1PlWE=\n=2hbI\n-----END PGP SIGNATURE-----",
        "payload": "tree 868839ad4033b99ea83d6c32a2c1894d4b77dd12\nparent e4fcbf797ed3b472d352ac3794ec82f581209c50\nparent 69a4339ef509da633e83fa9968ac646c58b95390\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1499930468 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1499930474 +0200\n\nMerge #10810: missing white space in function arg\n\n69a4339ef missing white space in function arg (Lawrence Nahum)\n\nPull request description:\n\nTree-SHA512: 94d832eca0b5429cf48c7c1d4489942b53182c5b7ad9f24264867e7631301173c23a48f7b2e8fd22ff1b3137bafacb3f9d4320f4df235668c9096aaefff7afe8\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7666250ffb4e8fc5c98556e2c8e121c72d6fe54c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7666250ffb4e8fc5c98556e2c8e121c72d6fe54c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7666250ffb4e8fc5c98556e2c8e121c72d6fe54c/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e4fcbf797ed3b472d352ac3794ec82f581209c50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4fcbf797ed3b472d352ac3794ec82f581209c50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4fcbf797ed3b472d352ac3794ec82f581209c50"
      },
      {
        "sha": "69a4339ef509da633e83fa9968ac646c58b95390",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69a4339ef509da633e83fa9968ac646c58b95390",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/69a4339ef509da633e83fa9968ac646c58b95390"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ddc8b1b964a4072f2ec5ab84425a8313abc2100c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7666250ffb4e8fc5c98556e2c8e121c72d6fe54c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7666250ffb4e8fc5c98556e2c8e121c72d6fe54c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7666250ffb4e8fc5c98556e2c8e121c72d6fe54c",
        "patch": "@@ -455,7 +455,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n \n     // Reject transactions with witness before segregated witness activates (override with -prematurewitness)\n     bool witnessEnabled = IsWitnessEnabled(chainActive.Tip(), chainparams.GetConsensus());\n-    if (!GetBoolArg(\"-prematurewitness\",false) && tx.HasWitness() && !witnessEnabled) {\n+    if (!GetBoolArg(\"-prematurewitness\", false) && tx.HasWitness() && !witnessEnabled) {\n         return state.DoS(0, false, REJECT_NONSTANDARD, \"no-witness-yet\", true);\n     }\n "
      }
    ]
  },
  {
    "sha": "bc1be90e377a7a9258ce6b39cac0f183b41f0e51",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzFiZTkwZTM3N2E3YTkyNThjZTZiMzljYWMwZjE4M2I0MWYwZTUx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-07T20:03:49Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-13T10:20:09Z"
      },
      "message": "[Qt] replace fee slider with a Dropdown, extend conf. targets",
      "tree": {
        "sha": "5cececa469861feff7067f114a86f13b62299e80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5cececa469861feff7067f114a86f13b62299e80"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc1be90e377a7a9258ce6b39cac0f183b41f0e51",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAllnSV0ACgkQHrd2uwPH\nki3wdQ/9FneeT+nNNX9NQd2rp1P+2+rvZ1TH7RLFwIIj/wuMGKKWwjWjp+nWXdl+\n2wbMpJvEhbOF455kziwhoJ6o65dap3wSpnwYH8J+TseOCTwiRb2fd0sA1FkZHL3A\nruYlU+QL4Z/muUj3t2NiqnWgLiBGaXKrs5sWLbIQqMzphfL6iboLeyHBDCCoQYu+\nRk/XeQp//L5q4/VDax6VB4UUod9k11oLQk8vHTElXLPVRlD0HjucFwGH0CaN96CF\n0OkHLa3OeO62DtZ3l7rYuwGz/sdqlCN0L7K8ioBxHSgoJZ5dqmeYHM8AJKbeqWE3\nUnl5xe2tIO4jpUDRQHUrKxZt16jwx4prvMzndyFT0mEBgr/kTkKRRBGIoQFuBnDC\nwoNiQPorZJ/ibt4BfuEVb+tu1YhNYQHFgYPkTIg3D76YBq1y+Oozdm3Z1npKMRMc\nNgiJRVNue1mK4eEG0c0LwiEalxYgET7w8Wt7pnbVJaDNqy1jHEHAXVWfl0GDsBQ6\nlhUZAdAXT840JynQhWrRokI7ZJKsSumMQMDbj8OgwtrCE6nYhP7FxxcSSjkr5Nlc\nangubfrrxxDwGU3lRmj3TM670kRwaHuj4lOqULG0y3pvlk3YdkLhgtg6NfvM5tEa\nC1C+XcDQqfTL768zSrr3dbrZrfViLxxm0VDOSwe0JbiHwCsdrdg=\n=ZZ27\n-----END PGP SIGNATURE-----",
        "payload": "tree 5cececa469861feff7067f114a86f13b62299e80\nparent 1d4805ce04645f3203b0cfd3d66ea710e7433eb4\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1499457829 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1499941209 +0200\n\n[Qt] replace fee slider with a Dropdown, extend conf. targets\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc1be90e377a7a9258ce6b39cac0f183b41f0e51",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc1be90e377a7a9258ce6b39cac0f183b41f0e51",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc1be90e377a7a9258ce6b39cac0f183b41f0e51/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d4805ce04645f3203b0cfd3d66ea710e7433eb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d4805ce04645f3203b0cfd3d66ea710e7433eb4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d4805ce04645f3203b0cfd3d66ea710e7433eb4"
      }
    ],
    "stats": {
      "total": 115,
      "additions": 37,
      "deletions": 78
    },
    "files": [
      {
        "sha": "e82a3c1533e3353546b0d21b669847d859484797",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 4,
        "deletions": 60,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc1be90e377a7a9258ce6b39cac0f183b41f0e51/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc1be90e377a7a9258ce6b39cac0f183b41f0e51/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=bc1be90e377a7a9258ce6b39cac0f183b41f0e51",
        "patch": "@@ -1068,44 +1068,15 @@\n                     <number>30</number>\n                    </property>\n                    <item>\n-                    <widget class=\"QSlider\" name=\"sliderSmartFee\">\n-                     <property name=\"minimum\">\n+                    <layout class=\"QHBoxLayout\" name=\"horizontalLayoutConfTarget\">\n+                     <property name=\"bottomMargin\">\n                       <number>0</number>\n                      </property>\n-                     <property name=\"maximum\">\n-                      <number>23</number>\n-                     </property>\n-                     <property name=\"pageStep\">\n-                      <number>1</number>\n-                     </property>\n-                     <property name=\"value\">\n-                      <number>0</number>\n-                     </property>\n-                     <property name=\"orientation\">\n-                      <enum>Qt::Horizontal</enum>\n-                     </property>\n-                     <property name=\"invertedAppearance\">\n-                      <bool>false</bool>\n-                     </property>\n-                     <property name=\"invertedControls\">\n-                      <bool>false</bool>\n-                     </property>\n-                     <property name=\"tickPosition\">\n-                      <enum>QSlider::NoTicks</enum>\n-                     </property>\n-                    </widget>\n-                   </item>\n-                   <item>\n-                    <layout class=\"QHBoxLayout\" name=\"horizontalLayoutFee10\">\n                      <item>\n-                      <widget class=\"QLabel\" name=\"labelSmartFeeNormal\">\n-                       <property name=\"text\">\n-                        <string>normal</string>\n-                       </property>\n-                      </widget>\n+                      <widget class=\"QComboBox\" name=\"confTargetSelector\"/>\n                      </item>\n                      <item>\n-                      <spacer name=\"horizontalSpacer_7\">\n+                      <spacer name=\"horizontalSpacerConfTarget\">\n                        <property name=\"orientation\">\n                         <enum>Qt::Horizontal</enum>\n                        </property>\n@@ -1117,33 +1088,6 @@\n                        </property>\n                       </spacer>\n                      </item>\n-                     <item>\n-                      <widget class=\"QLabel\" name=\"confirmationTargetLabel\">\n-                       <property name=\"text\">\n-                        <string notr=\"true\">(count)</string>\n-                       </property>\n-                      </widget>\n-                     </item>\n-                     <item>\n-                      <spacer name=\"horizontalSpacer_3\">\n-                       <property name=\"orientation\">\n-                        <enum>Qt::Horizontal</enum>\n-                       </property>\n-                       <property name=\"sizeHint\" stdset=\"0\">\n-                        <size>\n-                         <width>40</width>\n-                         <height>20</height>\n-                        </size>\n-                       </property>\n-                      </spacer>\n-                     </item>\n-                     <item>\n-                      <widget class=\"QLabel\" name=\"labelSmartFeeFast\">\n-                       <property name=\"text\">\n-                        <string>fast</string>\n-                       </property>\n-                      </widget>\n-                     </item>\n                     </layout>\n                    </item>\n                   </layout>"
      },
      {
        "sha": "bb54c584e10d3a217364536c475bae80b1bcb93a",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 18,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc1be90e377a7a9258ce6b39cac0f183b41f0e51/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc1be90e377a7a9258ce6b39cac0f183b41f0e51/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=bc1be90e377a7a9258ce6b39cac0f183b41f0e51",
        "patch": "@@ -31,6 +31,25 @@\n #include <QTextDocument>\n #include <QTimer>\n \n+static const std::array<int, 9> confTargets = { {2, 4, 6, 12, 24, 48, 144, 504, 1008} };\n+int getConfTargetForIndex(int index) {\n+    if (index+1 > static_cast<int>(confTargets.size())) {\n+        return confTargets.back();\n+    }\n+    if (index < 0) {\n+        return confTargets[0];\n+    }\n+    return confTargets[index];\n+}\n+int getIndexForConfTarget(int target) {\n+    for (unsigned int i = 0; i < confTargets.size(); i++) {\n+        if (confTargets[i] >= target) {\n+            return i;\n+        }\n+    }\n+    return confTargets.size() - 1;\n+}\n+\n SendCoinsDialog::SendCoinsDialog(const PlatformStyle *_platformStyle, QWidget *parent) :\n     QDialog(parent),\n     ui(new Ui::SendCoinsDialog),\n@@ -152,9 +171,12 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n         coinControlUpdateLabels();\n \n         // fee section\n-        connect(ui->sliderSmartFee, SIGNAL(valueChanged(int)), this, SLOT(updateSmartFeeLabel()));\n-        connect(ui->sliderSmartFee, SIGNAL(valueChanged(int)), this, SLOT(updateGlobalFeeVariables()));\n-        connect(ui->sliderSmartFee, SIGNAL(valueChanged(int)), this, SLOT(coinControlUpdateLabels()));\n+        for (const int &n : confTargets) {\n+            ui->confTargetSelector->addItem(tr(\"%1 (%2 blocks)\").arg(GUIUtil::formatNiceTimeOffset(n*Params().GetConsensus().nPowTargetSpacing)).arg(n));\n+        }\n+        connect(ui->confTargetSelector, SIGNAL(currentIndexChanged(int)), this, SLOT(updateSmartFeeLabel()));\n+        connect(ui->confTargetSelector, SIGNAL(currentIndexChanged(int)), this, SLOT(updateGlobalFeeVariables()));\n+        connect(ui->confTargetSelector, SIGNAL(currentIndexChanged(int)), this, SLOT(coinControlUpdateLabels()));\n         connect(ui->groupFee, SIGNAL(buttonClicked(int)), this, SLOT(updateFeeSectionControls()));\n         connect(ui->groupFee, SIGNAL(buttonClicked(int)), this, SLOT(updateGlobalFeeVariables()));\n         connect(ui->groupFee, SIGNAL(buttonClicked(int)), this, SLOT(coinControlUpdateLabels()));\n@@ -177,10 +199,10 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n \n         // set the smartfee-sliders default value (wallets default conf.target or last stored value)\n         QSettings settings;\n-        if (settings.value(\"nSmartFeeSliderPosition\").toInt() == 0)\n-            ui->sliderSmartFee->setValue(ui->sliderSmartFee->maximum() - model->getDefaultConfirmTarget() + 2);\n+        if (settings.value(\"nConfTarget\").toInt() == 0)\n+            ui->confTargetSelector->setCurrentIndex(getIndexForConfTarget(model->getDefaultConfirmTarget()));\n         else\n-            ui->sliderSmartFee->setValue(settings.value(\"nSmartFeeSliderPosition\").toInt());\n+            ui->confTargetSelector->setCurrentIndex(getIndexForConfTarget(settings.value(\"nConfTarget\").toInt()));\n     }\n }\n \n@@ -190,7 +212,7 @@ SendCoinsDialog::~SendCoinsDialog()\n     settings.setValue(\"fFeeSectionMinimized\", fFeeMinimized);\n     settings.setValue(\"nFeeRadio\", ui->groupFee->checkedId());\n     settings.setValue(\"nCustomFeeRadio\", ui->groupCustomFee->checkedId());\n-    settings.setValue(\"nSmartFeeSliderPosition\", ui->sliderSmartFee->value());\n+    settings.setValue(\"nConfTarget\", getConfTargetForIndex(ui->confTargetSelector->currentIndex()));\n     settings.setValue(\"nTransactionFee\", (qint64)ui->customFee->value());\n     settings.setValue(\"fPayOnlyMinFee\", ui->checkBoxMinimumFee->isChecked());\n \n@@ -244,7 +266,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n     if (model->getOptionsModel()->getCoinControlFeatures())\n         ctrl = *CoinControlDialog::coinControl;\n     if (ui->radioSmartFee->isChecked())\n-        ctrl.nConfirmTarget = ui->sliderSmartFee->maximum() - ui->sliderSmartFee->value() + 2;\n+        ctrl.nConfirmTarget = getConfTargetForIndex(ui->confTargetSelector->currentIndex());\n     else\n         ctrl.nConfirmTarget = 0;\n \n@@ -594,14 +616,11 @@ void SendCoinsDialog::setMinimumFee()\n \n void SendCoinsDialog::updateFeeSectionControls()\n {\n-    ui->sliderSmartFee          ->setEnabled(ui->radioSmartFee->isChecked());\n+    ui->confTargetSelector      ->setEnabled(ui->radioSmartFee->isChecked());\n     ui->labelSmartFee           ->setEnabled(ui->radioSmartFee->isChecked());\n     ui->labelSmartFee2          ->setEnabled(ui->radioSmartFee->isChecked());\n     ui->labelSmartFee3          ->setEnabled(ui->radioSmartFee->isChecked());\n     ui->labelFeeEstimation      ->setEnabled(ui->radioSmartFee->isChecked());\n-    ui->labelSmartFeeNormal     ->setEnabled(ui->radioSmartFee->isChecked());\n-    ui->labelSmartFeeFast       ->setEnabled(ui->radioSmartFee->isChecked());\n-    ui->confirmationTargetLabel ->setEnabled(ui->radioSmartFee->isChecked());\n     ui->checkBoxMinimumFee      ->setEnabled(ui->radioCustomFee->isChecked());\n     ui->labelMinFeeWarning      ->setEnabled(ui->radioCustomFee->isChecked());\n     ui->radioCustomPerKilobyte  ->setEnabled(ui->radioCustomFee->isChecked() && !ui->checkBoxMinimumFee->isChecked());\n@@ -612,11 +631,7 @@ void SendCoinsDialog::updateGlobalFeeVariables()\n {\n     if (ui->radioSmartFee->isChecked())\n     {\n-        int nConfirmTarget = ui->sliderSmartFee->maximum() - ui->sliderSmartFee->value() + 2;\n         payTxFee = CFeeRate(0);\n-\n-        // show the estimated required time for confirmation\n-        ui->confirmationTargetLabel->setText(GUIUtil::formatDurationStr(nConfirmTarget * Params().GetConsensus().nPowTargetSpacing) + \" / \" + tr(\"%n block(s)\", \"\", nConfirmTarget));\n     }\n     else\n     {\n@@ -650,7 +665,7 @@ void SendCoinsDialog::updateSmartFeeLabel()\n     if(!model || !model->getOptionsModel())\n         return;\n \n-    int nBlocksToConfirm = ui->sliderSmartFee->maximum() - ui->sliderSmartFee->value() + 2;\n+    int nBlocksToConfirm = getConfTargetForIndex(ui->confTargetSelector->currentIndex());\n     FeeCalculation feeCalc;\n     CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocksToConfirm, &feeCalc, ::mempool);\n     if (feeRate <= CFeeRate(0)) // not enough data => minfee\n@@ -823,7 +838,7 @@ void SendCoinsDialog::coinControlUpdateLabels()\n     CoinControlDialog::payAmounts.clear();\n     CoinControlDialog::fSubtractFeeFromAmount = false;\n     if (ui->radioSmartFee->isChecked()) {\n-        CoinControlDialog::coinControl->nConfirmTarget = ui->sliderSmartFee->maximum() - ui->sliderSmartFee->value() + 2;\n+        CoinControlDialog::coinControl->nConfirmTarget = getConfTargetForIndex(ui->confTargetSelector->currentIndex());\n     } else {\n         CoinControlDialog::coinControl->nConfirmTarget = model->getDefaultConfirmTarget();\n     }"
      }
    ]
  },
  {
    "sha": "2aef1f18296fcd3aa3c91afdf152add8a8e80bd4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYWVmMWYxODI5NmZjZDNhYTNjOTFhZmRmMTUyYWRkOGE4ZTgwYmQ0",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-13T10:19:17Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-13T10:21:22Z"
      },
      "message": "[Qt] migrate old fee slider value to new dropbown\nAlways round up (conservative)",
      "tree": {
        "sha": "39878c21e9f527d534fc653bbed0b3c292ab20ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39878c21e9f527d534fc653bbed0b3c292ab20ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2aef1f18296fcd3aa3c91afdf152add8a8e80bd4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAllnSaMACgkQHrd2uwPH\nki2Tbw//ektObfoEyu/75+AkdYVndA6SMr8vu/GyjVZcCQYp/fO9HaEVNJnd0s4/\nOYFhBwYXYWkJgzqwXevh26yjN+SldIe7H/YZPk5IG4kHVoEnmk1/FK//ee/CrbG3\nDRCXI9YyVPwyGqMpC5J2U9rNMkAxVfbKqfj74m+SOnDCL78Wyux+CXVZzY8Fg5/6\n/TIa8TWYjBcTBkbwPuw3mF3aEph1s37zDUZhAjySdkS1pGTg12M8oFBtEm11+Bt9\nzwYyX+6W0+E4UjWvd+dVpjiaXmh5HTE8lQ4PKdxV/OFoym43G8wgrsfIsjULfj5N\neMldqnT/x2r1ligrKYLgIVT6FUGa2Yji/YMvavwAfpTjpFDB58Orx4TES0M37+p4\nEpRoc/wHWNhxJuPiITO/V3IRPNr3CgfD0VavAOodFrPWmRWMMyYFH7xJSf8ZgCBx\nH96iWANvn8VoTYkx3269crzOxJdfJGj+KWetYXkuQMMgDQyS94DwB43Co+gvIwGS\nOQjNrgyCjdyyIj7juevAv77Zv7b/6KvryfKnO0NwGY01WVGrUSG5lFXRAeh6tN3A\nP9Inu/RcJ0g0M+z1wYWnm3Lgn4LwX4/c5LORc/U8jgVQiX3FJ2ZLaGl/zPEbbpol\nXq4GJbv//5yQyyOAwDqt8axLPjTRZLlMxbE7xrTXI7lX3amrzzw=\n=eoaq\n-----END PGP SIGNATURE-----",
        "payload": "tree 39878c21e9f527d534fc653bbed0b3c292ab20ca\nparent bc1be90e377a7a9258ce6b39cac0f183b41f0e51\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1499941157 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1499941282 +0200\n\n[Qt] migrate old fee slider value to new dropbown\nAlways round up (conservative)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aef1f18296fcd3aa3c91afdf152add8a8e80bd4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2aef1f18296fcd3aa3c91afdf152add8a8e80bd4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aef1f18296fcd3aa3c91afdf152add8a8e80bd4/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc1be90e377a7a9258ce6b39cac0f183b41f0e51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc1be90e377a7a9258ce6b39cac0f183b41f0e51",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc1be90e377a7a9258ce6b39cac0f183b41f0e51"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c69a29daccf83c9e0d4a2263a6c78752d4826b9f",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aef1f18296fcd3aa3c91afdf152add8a8e80bd4/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aef1f18296fcd3aa3c91afdf152add8a8e80bd4/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=2aef1f18296fcd3aa3c91afdf152add8a8e80bd4",
        "patch": "@@ -199,6 +199,13 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n \n         // set the smartfee-sliders default value (wallets default conf.target or last stored value)\n         QSettings settings;\n+        if (settings.value(\"nSmartFeeSliderPosition\").toInt() != 0) {\n+            // migrate nSmartFeeSliderPosition to nConfTarget\n+            // nConfTarget is available since 0.15 (replaced nSmartFeeSliderPosition)\n+            int nConfirmTarget = 25 - settings.value(\"nSmartFeeSliderPosition\").toInt(); // 25 == old slider range\n+            settings.setValue(\"nConfTarget\", nConfirmTarget);\n+            settings.remove(\"nSmartFeeSliderPosition\");\n+        }\n         if (settings.value(\"nConfTarget\").toInt() == 0)\n             ui->confTargetSelector->setCurrentIndex(getIndexForConfTarget(model->getDefaultConfirmTarget()));\n         else"
      }
    ]
  },
  {
    "sha": "d34d77a51b846a2459e4447762edcb2b66c95550",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzRkNzdhNTFiODQ2YTI0NTllNDQ0Nzc2MmVkY2IyYjY2Yzk1NTUw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-07-12T16:58:20Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-07-13T16:49:05Z"
      },
      "message": "build: verify that the assembler can handle crc32 functions\n\nAlso, enable crc32 even if -msse4.2 wasn't added by us, as long as it works.\nThis allows custom flags (such as -march=native) to work as expected.",
      "tree": {
        "sha": "9bd474ca5e6394be1d86703196b53ad497f779dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9bd474ca5e6394be1d86703196b53ad497f779dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d34d77a51b846a2459e4447762edcb2b66c95550",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d34d77a51b846a2459e4447762edcb2b66c95550",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d34d77a51b846a2459e4447762edcb2b66c95550",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d34d77a51b846a2459e4447762edcb2b66c95550/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8b95239eeb052b122786d9cca6bc58106837599",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8b95239eeb052b122786d9cca6bc58106837599",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8b95239eeb052b122786d9cca6bc58106837599"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 26,
      "deletions": 3
    },
    "files": [
      {
        "sha": "6b5d891fa5498f88eefb3a4908e94247021dd3b2",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 25,
        "deletions": 2,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d34d77a51b846a2459e4447762edcb2b66c95550/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d34d77a51b846a2459e4447762edcb2b66c95550/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=d34d77a51b846a2459e4447762edcb2b66c95550",
        "patch": "@@ -246,9 +246,32 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   # Check for optional instruction set support. Enabling these does _not_ imply that all code will\n   # be compiled with them, rather that specific objects/libs may use them after checking for runtime\n   # compatibility.\n-  AX_CHECK_COMPILE_FLAG([-msse4.2],[[enable_sse42=yes; SSE42_CXXFLAGS=\"-msse4.2\"]],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-msse4.2],[[SSE42_CXXFLAGS=\"-msse4.2\"]],,[[$CXXFLAG_WERROR]])\n \n fi\n+\n+TEMP_CXXFLAGS=\"$CXXFLAGS\"\n+CXXFLAGS=\"$CXXFLAGS $SSE42_CXXFLAGS\"\n+AC_MSG_CHECKING(for assembler crc32 support)\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+    #include <stdint.h>\n+    #if defined(_MSC_VER)\n+    #include <intrin.h>\n+    #elif defined(__GNUC__) && defined(__SSE4_2__)\n+    #include <nmmintrin.h>\n+    #endif\n+  ]],[[\n+    uint64_t l = 0;\n+    l = _mm_crc32_u8(l, 0);\n+    l = _mm_crc32_u32(l, 0);\n+    l = _mm_crc32_u64(l, 0);\n+    return l;\n+  ]])],\n+ [ AC_MSG_RESULT(yes); enable_hwcrc32=yes],\n+ [ AC_MSG_RESULT(no)]\n+)\n+CXXFLAGS=\"$TEMP_CXXFLAGS\"\n+\n CPPFLAGS=\"$CPPFLAGS -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\"\n \n AC_ARG_WITH([utils],\n@@ -1132,7 +1155,7 @@ AM_CONDITIONAL([USE_QRCODE], [test x$use_qr = xyes])\n AM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\n AM_CONDITIONAL([GLIBC_BACK_COMPAT],[test x$use_glibc_compat = xyes])\n AM_CONDITIONAL([HARDEN],[test x$use_hardening = xyes])\n-AM_CONDITIONAL([ENABLE_SSE42],[test x$enable_sse42 = xyes])\n+AM_CONDITIONAL([ENABLE_HWCRC32],[test x$enable_hwcrc32 = xyes])\n \n AC_DEFINE(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR, [Major version])\n AC_DEFINE(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR, [Minor version])"
      },
      {
        "sha": "833f3d2a10cac9465c72045bc244e3efc76156c8",
        "filename": "src/Makefile.leveldb.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d34d77a51b846a2459e4447762edcb2b66c95550/src/Makefile.leveldb.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d34d77a51b846a2459e4447762edcb2b66c95550/src/Makefile.leveldb.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.leveldb.include?ref=d34d77a51b846a2459e4447762edcb2b66c95550",
        "patch": "@@ -142,7 +142,7 @@ leveldb_libmemenv_a_SOURCES += leveldb/helpers/memenv/memenv.h\n \n leveldb_libleveldb_sse42_a_CPPFLAGS = $(leveldb_libleveldb_a_CPPFLAGS)\n leveldb_libleveldb_sse42_a_CXXFLAGS = $(leveldb_libleveldb_a_CXXFLAGS)\n-if ENABLE_SSE42\n+if ENABLE_HWCRC32\n leveldb_libleveldb_sse42_a_CPPFLAGS += -DLEVELDB_PLATFORM_POSIX_SSE\n leveldb_libleveldb_sse42_a_CXXFLAGS += $(SSE42_CXXFLAGS)\n endif"
      }
    ]
  },
  {
    "sha": "dd97a529ad23169f346aa042a808adf702ce8450",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDk3YTUyOWFkMjMxNjlmMzQ2YWEwNDJhODA4YWRmNzAyY2U4NDUw",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-13T17:48:28Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-13T17:48:28Z"
      },
      "message": "Properly forbid -salvagewallet and -zapwallettxes for multi wallet.",
      "tree": {
        "sha": "a913c2289a8588f73dff19b1da9259596bee3145",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a913c2289a8588f73dff19b1da9259596bee3145"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd97a529ad23169f346aa042a808adf702ce8450",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd97a529ad23169f346aa042a808adf702ce8450",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd97a529ad23169f346aa042a808adf702ce8450",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd97a529ad23169f346aa042a808adf702ce8450/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7666250ffb4e8fc5c98556e2c8e121c72d6fe54c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7666250ffb4e8fc5c98556e2c8e121c72d6fe54c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7666250ffb4e8fc5c98556e2c8e121c72d6fe54c"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 8,
      "deletions": 4
    },
    "files": [
      {
        "sha": "07b7f58a6419bff246e29b9c010964f16934d00a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd97a529ad23169f346aa042a808adf702ce8450/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd97a529ad23169f346aa042a808adf702ce8450/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=dd97a529ad23169f346aa042a808adf702ce8450",
        "patch": "@@ -4033,20 +4033,24 @@ bool CWallet::ParameterInteraction()\n         LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -walletbroadcast=0\\n\", __func__);\n     }\n \n-    if (GetBoolArg(\"-salvagewallet\", false) && SoftSetBoolArg(\"-rescan\", true)) {\n+    if (GetBoolArg(\"-salvagewallet\", false)) {\n         if (is_multiwallet) {\n             return InitError(strprintf(\"%s is only allowed with a single wallet file\", \"-salvagewallet\"));\n         }\n         // Rewrite just private keys: rescan to find transactions\n-        LogPrintf(\"%s: parameter interaction: -salvagewallet=1 -> setting -rescan=1\\n\", __func__);\n+        if (SoftSetBoolArg(\"-rescan\", true)) {\n+            LogPrintf(\"%s: parameter interaction: -salvagewallet=1 -> setting -rescan=1\\n\", __func__);\n+        }\n     }\n \n     // -zapwallettx implies a rescan\n-    if (GetBoolArg(\"-zapwallettxes\", false) && SoftSetBoolArg(\"-rescan\", true)) {\n+    if (GetBoolArg(\"-zapwallettxes\", false)) {\n         if (is_multiwallet) {\n             return InitError(strprintf(\"%s is only allowed with a single wallet file\", \"-zapwallettxes\"));\n         }\n-        LogPrintf(\"%s: parameter interaction: -zapwallettxes=<mode> -> setting -rescan=1\\n\", __func__);\n+        if (SoftSetBoolArg(\"-rescan\", true)) {\n+            LogPrintf(\"%s: parameter interaction: -zapwallettxes=<mode> -> setting -rescan=1\\n\", __func__);\n+        }\n     }\n \n     if (is_multiwallet) {"
      }
    ]
  },
  {
    "sha": "5c643241e5d98992c0d5487b65e9c7b6d8005d1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YzY0MzI0MWU1ZDk4OTkyYzBkNTQ4N2I2NWU5YzdiNmQ4MDA1ZDFh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-12T20:59:09Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-13T21:15:36Z"
      },
      "message": "[utils] allow square brackets for ipv6 addresses in bitcoin-cli\n\n-rpcconnect can now accept ipv6 addresses with and without square\nbrackets.",
      "tree": {
        "sha": "3f976f056d92f576e87e1d0ad96af871d0982595",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3f976f056d92f576e87e1d0ad96af871d0982595"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c643241e5d98992c0d5487b65e9c7b6d8005d1a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c643241e5d98992c0d5487b65e9c7b6d8005d1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c643241e5d98992c0d5487b65e9c7b6d8005d1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c643241e5d98992c0d5487b65e9c7b6d8005d1a/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe4fabaf12b74782ea99821ed8108f17e582060d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe4fabaf12b74782ea99821ed8108f17e582060d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe4fabaf12b74782ea99821ed8108f17e582060d"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 9,
      "deletions": 2
    },
    "files": [
      {
        "sha": "92f6a21ebbd72a406711a3048822c40870efc54a",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c643241e5d98992c0d5487b65e9c7b6d8005d1a/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c643241e5d98992c0d5487b65e9c7b6d8005d1a/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=5c643241e5d98992c0d5487b65e9c7b6d8005d1a",
        "patch": "@@ -10,6 +10,7 @@\n #include \"chainparamsbase.h\"\n #include \"clientversion.h\"\n #include \"fs.h\"\n+#include \"utilstrencodings.h\"\n #include \"rpc/client.h\"\n #include \"rpc/protocol.h\"\n #include \"util.h\"\n@@ -191,8 +192,14 @@ static void http_error_cb(enum evhttp_request_error err, void *ctx)\n \n UniValue CallRPC(const std::string& strMethod, const UniValue& params)\n {\n-    std::string host = GetArg(\"-rpcconnect\", DEFAULT_RPCCONNECT);\n-    int port = GetArg(\"-rpcport\", BaseParams().RPCPort());\n+    std::string host;\n+    // In preference order, we choose the following for the port:\n+    //     1. -rpcport\n+    //     2. port in -rpcconnect (ie following : in ipv4 or ]: in ipv6)\n+    //     3. default port for chain\n+    int port = BaseParams().RPCPort();\n+    SplitHostPort(GetArg(\"-rpcconnect\", DEFAULT_RPCCONNECT), port, host);\n+    port = GetArg(\"-rpcport\", port);\n \n     // Obtain event base\n     raii_event_base base = obtain_event_base();"
      }
    ]
  },
  {
    "sha": "4652791141f0a8a977b324147ccf1a2360b69ca4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NjUyNzkxMTQxZjBhOGE5NzdiMzI0MTQ3Y2NmMWEyMzYwYjY5Y2E0",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-07-13T22:25:56Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-07-13T22:25:56Z"
      },
      "message": "Fix uninitialized atomic variables",
      "tree": {
        "sha": "8c37c93c53baf1f7fa942028302d4d539c96739d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c37c93c53baf1f7fa942028302d4d539c96739d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4652791141f0a8a977b324147ccf1a2360b69ca4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4652791141f0a8a977b324147ccf1a2360b69ca4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4652791141f0a8a977b324147ccf1a2360b69ca4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4652791141f0a8a977b324147ccf1a2360b69ca4/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7666250ffb4e8fc5c98556e2c8e121c72d6fe54c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7666250ffb4e8fc5c98556e2c8e121c72d6fe54c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7666250ffb4e8fc5c98556e2c8e121c72d6fe54c"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "3fb1c18f0308a453573b42b82d86e8ae24cc6e4e",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4652791141f0a8a977b324147ccf1a2360b69ca4/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4652791141f0a8a977b324147ccf1a2360b69ca4/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=4652791141f0a8a977b324147ccf1a2360b69ca4",
        "patch": "@@ -563,7 +563,7 @@ static bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDe\n     // do socks negotiation\n     if (proxy.randomize_credentials) {\n         ProxyCredentials random_auth;\n-        static std::atomic_int counter;\n+        static std::atomic_int counter(0);\n         random_auth.username = random_auth.password = strprintf(\"%i\", counter++);\n         if (!Socks5(strDest, (unsigned short)port, &random_auth, hSocket))\n             return false;"
      },
      {
        "sha": "4f3ad0c42dee66bbf90fc0a6adb7e858c95ed7b1",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4652791141f0a8a977b324147ccf1a2360b69ca4/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4652791141f0a8a977b324147ccf1a2360b69ca4/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=4652791141f0a8a977b324147ccf1a2360b69ca4",
        "patch": "@@ -95,13 +95,13 @@ class CWalletDBWrapper\n     friend class CDB;\n public:\n     /** Create dummy DB handle */\n-    CWalletDBWrapper() : nLastSeen(0), nLastFlushed(0), nLastWalletUpdate(0), env(nullptr)\n+    CWalletDBWrapper() : nUpdateCounter(0), nLastSeen(0), nLastFlushed(0), nLastWalletUpdate(0), env(nullptr)\n     {\n     }\n \n     /** Create DB handle to real database */\n     CWalletDBWrapper(CDBEnv *env_in, const std::string &strFile_in) :\n-        nLastSeen(0), nLastFlushed(0), nLastWalletUpdate(0), env(env_in), strFile(strFile_in)\n+        nUpdateCounter(0), nLastSeen(0), nLastFlushed(0), nLastWalletUpdate(0), env(env_in), strFile(strFile_in)\n     {\n     }\n "
      },
      {
        "sha": "2a33dca240c3b827a258c2714a54a6b61055d4c2",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4652791141f0a8a977b324147ccf1a2360b69ca4/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4652791141f0a8a977b324147ccf1a2360b69ca4/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=4652791141f0a8a977b324147ccf1a2360b69ca4",
        "patch": "@@ -747,7 +747,7 @@ DBErrors CWalletDB::ZapWalletTx(std::vector<CWalletTx>& vWtx)\n \n void MaybeCompactWalletDB()\n {\n-    static std::atomic<bool> fOneThread;\n+    static std::atomic<bool> fOneThread(false);\n     if (fOneThread.exchange(true)) {\n         return;\n     }"
      }
    ]
  },
  {
    "sha": "a9e82f6512662054f64ed2bde590b2bb0831fc9d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOWU4MmY2NTEyNjYyMDU0ZjY0ZWQyYmRlNTkwYjJiYjA4MzFmYzlk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-13T23:43:05Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-13T23:43:05Z"
      },
      "message": "Use cpuid intrinsics instead of asm code",
      "tree": {
        "sha": "06f3ff5605cfab45dbc736b917397deef91004e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/06f3ff5605cfab45dbc736b917397deef91004e9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9e82f6512662054f64ed2bde590b2bb0831fc9d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9e82f6512662054f64ed2bde590b2bb0831fc9d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9e82f6512662054f64ed2bde590b2bb0831fc9d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9e82f6512662054f64ed2bde590b2bb0831fc9d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7666250ffb4e8fc5c98556e2c8e121c72d6fe54c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7666250ffb4e8fc5c98556e2c8e121c72d6fe54c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7666250ffb4e8fc5c98556e2c8e121c72d6fe54c"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 6,
      "deletions": 11
    },
    "files": [
      {
        "sha": "bb463aae82deb3dafe3306e6f34a12f76f61dd8a",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 11,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9e82f6512662054f64ed2bde590b2bb0831fc9d/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9e82f6512662054f64ed2bde590b2bb0831fc9d/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=a9e82f6512662054f64ed2bde590b2bb0831fc9d",
        "patch": "@@ -36,6 +36,10 @@\n \n #include <mutex>\n \n+#if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n+#include <cpuid.h>\n+#endif\n+\n #include <openssl/err.h>\n #include <openssl/rand.h>\n \n@@ -72,17 +76,8 @@ static bool rdrand_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n static void RDRandInit()\n {\n-    uint32_t eax, ecx, edx;\n-#if defined(__i386__) && ( defined(__PIC__) || defined(__PIE__))\n-    // Avoid clobbering ebx, as that is used for PIC on x86.\n-    uint32_t tmp;\n-    __asm__ (\"mov %%ebx, %1; cpuid; mov %1, %%ebx\": \"=a\"(eax), \"=g\"(tmp), \"=c\"(ecx), \"=d\"(edx) : \"a\"(1));\n-#else\n-    uint32_t ebx;\n-    __asm__ (\"cpuid\": \"=a\"(eax), \"=b\"(ebx), \"=c\"(ecx), \"=d\"(edx) : \"a\"(1));\n-#endif\n-    //! When calling cpuid function #1, ecx register will have this set if RDRAND is available.\n-    if (ecx & CPUID_F1_ECX_RDRAND) {\n+    uint32_t eax, ebx, ecx, edx;\n+    if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & CPUID_F1_ECX_RDRAND)) {\n         LogPrintf(\"Using RdRand as entropy source\\n\");\n         rdrand_supported = true;\n     }"
      }
    ]
  },
  {
    "sha": "db825d293be8134505187352ec5844b70f37a43f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjgyNWQyOTNiZTgxMzQ1MDUxODczNTJlYzU4NDRiNzBmMzdhNDNm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-14T07:23:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-14T07:23:59Z"
      },
      "message": "Merge #10806: build: verify that the assembler can handle crc32 functions\n\nd34d77a build: verify that the assembler can handle crc32 functions (Cory Fields)\n\nPull request description:\n\n  Also, enable crc32 even if -msse4.2 wasn't added by us, as long as it works. This allows custom flags (such as -march=native) to work as expected.\n\n  Addresses #10670.\n\nTree-SHA512: e1a41a87b078d270bc645814315b229ad9c16556a4d14fb66b27a65b28d0caf9bf324f8c1e221854992aa17f53466eece06faebbf74d59b3d4ff2e6db6c614a4",
      "tree": {
        "sha": "ff4f415d9b15258ab881742a954922b42fde638b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff4f415d9b15258ab881742a954922b42fde638b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db825d293be8134505187352ec5844b70f37a43f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZaHGQAAoJEB5K7WKYbNJdFPIIAIZKBQ/89FMrEnf/zxRekLeq\nb54uYxzanFRqS3ne1xcjEWYDaobgwKy+qJihgR6ckqg9jdbR/6mqvtYRWhrRVsj0\nrm70Y5dJmx+mYnAyoh33uNrEeuWuB8F6gA2y++y9q+bTHQqhblnvtm/cHTZbPw7S\n/fQe0DZ6bjou8TXMPlc/bQoIRv8ZdKxJqNUlJ8c0yWdAFGBBGPrmb4u08ts+zVAB\ncEbiYKiqui1dz/E0cMy8B97rawDyu7fjtDN2oXi12suNiJgfhwwUo+B5Csut1fbz\nYwGoAULAmiDU+5CcqQcvRldCNrUgpGld5iM3dThsGnzcH0OTaLSJ/Tsx8o6yJ4E=\n=uvcK\n-----END PGP SIGNATURE-----",
        "payload": "tree ff4f415d9b15258ab881742a954922b42fde638b\nparent 7666250ffb4e8fc5c98556e2c8e121c72d6fe54c\nparent d34d77a51b846a2459e4447762edcb2b66c95550\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1500017036 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1500017039 +0200\n\nMerge #10806: build: verify that the assembler can handle crc32 functions\n\nd34d77a build: verify that the assembler can handle crc32 functions (Cory Fields)\n\nPull request description:\n\n  Also, enable crc32 even if -msse4.2 wasn't added by us, as long as it works. This allows custom flags (such as -march=native) to work as expected.\n\n  Addresses #10670.\n\nTree-SHA512: e1a41a87b078d270bc645814315b229ad9c16556a4d14fb66b27a65b28d0caf9bf324f8c1e221854992aa17f53466eece06faebbf74d59b3d4ff2e6db6c614a4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db825d293be8134505187352ec5844b70f37a43f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db825d293be8134505187352ec5844b70f37a43f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db825d293be8134505187352ec5844b70f37a43f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7666250ffb4e8fc5c98556e2c8e121c72d6fe54c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7666250ffb4e8fc5c98556e2c8e121c72d6fe54c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7666250ffb4e8fc5c98556e2c8e121c72d6fe54c"
      },
      {
        "sha": "d34d77a51b846a2459e4447762edcb2b66c95550",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d34d77a51b846a2459e4447762edcb2b66c95550",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d34d77a51b846a2459e4447762edcb2b66c95550"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 26,
      "deletions": 3
    },
    "files": [
      {
        "sha": "6b5d891fa5498f88eefb3a4908e94247021dd3b2",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 25,
        "deletions": 2,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db825d293be8134505187352ec5844b70f37a43f/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db825d293be8134505187352ec5844b70f37a43f/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=db825d293be8134505187352ec5844b70f37a43f",
        "patch": "@@ -246,9 +246,32 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   # Check for optional instruction set support. Enabling these does _not_ imply that all code will\n   # be compiled with them, rather that specific objects/libs may use them after checking for runtime\n   # compatibility.\n-  AX_CHECK_COMPILE_FLAG([-msse4.2],[[enable_sse42=yes; SSE42_CXXFLAGS=\"-msse4.2\"]],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-msse4.2],[[SSE42_CXXFLAGS=\"-msse4.2\"]],,[[$CXXFLAG_WERROR]])\n \n fi\n+\n+TEMP_CXXFLAGS=\"$CXXFLAGS\"\n+CXXFLAGS=\"$CXXFLAGS $SSE42_CXXFLAGS\"\n+AC_MSG_CHECKING(for assembler crc32 support)\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+    #include <stdint.h>\n+    #if defined(_MSC_VER)\n+    #include <intrin.h>\n+    #elif defined(__GNUC__) && defined(__SSE4_2__)\n+    #include <nmmintrin.h>\n+    #endif\n+  ]],[[\n+    uint64_t l = 0;\n+    l = _mm_crc32_u8(l, 0);\n+    l = _mm_crc32_u32(l, 0);\n+    l = _mm_crc32_u64(l, 0);\n+    return l;\n+  ]])],\n+ [ AC_MSG_RESULT(yes); enable_hwcrc32=yes],\n+ [ AC_MSG_RESULT(no)]\n+)\n+CXXFLAGS=\"$TEMP_CXXFLAGS\"\n+\n CPPFLAGS=\"$CPPFLAGS -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\"\n \n AC_ARG_WITH([utils],\n@@ -1132,7 +1155,7 @@ AM_CONDITIONAL([USE_QRCODE], [test x$use_qr = xyes])\n AM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\n AM_CONDITIONAL([GLIBC_BACK_COMPAT],[test x$use_glibc_compat = xyes])\n AM_CONDITIONAL([HARDEN],[test x$use_hardening = xyes])\n-AM_CONDITIONAL([ENABLE_SSE42],[test x$enable_sse42 = xyes])\n+AM_CONDITIONAL([ENABLE_HWCRC32],[test x$enable_hwcrc32 = xyes])\n \n AC_DEFINE(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR, [Major version])\n AC_DEFINE(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR, [Minor version])"
      },
      {
        "sha": "833f3d2a10cac9465c72045bc244e3efc76156c8",
        "filename": "src/Makefile.leveldb.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db825d293be8134505187352ec5844b70f37a43f/src/Makefile.leveldb.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db825d293be8134505187352ec5844b70f37a43f/src/Makefile.leveldb.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.leveldb.include?ref=db825d293be8134505187352ec5844b70f37a43f",
        "patch": "@@ -142,7 +142,7 @@ leveldb_libmemenv_a_SOURCES += leveldb/helpers/memenv/memenv.h\n \n leveldb_libleveldb_sse42_a_CPPFLAGS = $(leveldb_libleveldb_a_CPPFLAGS)\n leveldb_libleveldb_sse42_a_CXXFLAGS = $(leveldb_libleveldb_a_CXXFLAGS)\n-if ENABLE_SSE42\n+if ENABLE_HWCRC32\n leveldb_libleveldb_sse42_a_CPPFLAGS += -DLEVELDB_PLATFORM_POSIX_SSE\n leveldb_libleveldb_sse42_a_CXXFLAGS += $(SSE42_CXXFLAGS)\n endif"
      }
    ]
  },
  {
    "sha": "66270a416edb1610f276124483feceef9cba93ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjI3MGE0MTZlZGIxNjEwZjI3NjEyNDQ4M2ZlY2VlZjljYmE5M2Zm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-14T18:54:09Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-14T18:54:50Z"
      },
      "message": "Merge #10557: Make check to distinguish between orphan txs and old txs more efficient.\n\n18bacec6c Make check to distinguish between orphan txs and old txs more efficient. (Alex Morcos)\n\nTree-SHA512: b6b4bad89aa561975dce7b68b2fdad5623af5ebcb9c38fd6a72b5f6d0544ed441df4865591ac018f7ae0df9b5c60820cb4d9e55664f5667c9268458df70fd554",
      "tree": {
        "sha": "71fa45b458185654114525187df5db8edfa2675d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71fa45b458185654114525187df5db8edfa2675d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66270a416edb1610f276124483feceef9cba93ff",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZaRN7AAoJEKY26XYx92fg4OcQAK3TW1tUfVKzPst0bchcLogF\n//SauKUYwIs9dWiy7JoZNlf2uYGkt9X37M07QKJkqxD3REKD4HI+0lniFvV36d6a\nK/Nr8bwTNwrDnvHO0nOOUcQlCDkEajpjdJSWKuUOa5zLQkLi4CUFciLPQTSZ1RUn\ndte5vr4V/BJp4oPo4e6lM7hgK48Pu+JC3S5B9nY0L8Z/UFgW1dsvAgb5O7qpcwY7\njFiQPtwTokCNrv9TfL3B8K2HO5f1xMdinJuACGkoAm43BlD8XE0iZ1vkAjXO0i1s\n474IEjlaivM5CcbqSrFVUKqMupQDnG9Sh5otzwQUVPRNFK29T5Fj7uGx1JurBbcC\nyT5DD3QmYwMaz54fds7QHNscsELg+K5YIR2cYH10IIcRBWIAWdZNLgBOeezHBVVQ\nT+y66yq7yqam9slojT8U3NIto9+bWQBLJeT1U+rND2TyJGxrokXlUxDmrxARuzk5\nEhYF+rG4EQ5uB/XWP0fdnl1/Pe26i0g5IPHTiD64Kq0Jeo77kHtVJksSI9VOjQQH\nXAt9EdDluHty2e6JLss3Va/Kus/dMWyW9UzYN2pL5EaW6krZ9APcRxdPxiemmPtw\nkh34zbTTk7J06gDQpQnmD1yJnqHcqrQEbWD3cLHVBdIgPcCKS4leO22FvI2vHzrm\nFNUlVxEQMutYLWpQ4UHi\n=Vs74\n-----END PGP SIGNATURE-----",
        "payload": "tree 71fa45b458185654114525187df5db8edfa2675d\nparent db825d293be8134505187352ec5844b70f37a43f\nparent 18bacec6c2c8493fd6b7011778446b3c7473bb25\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1500058449 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1500058490 -0700\n\nMerge #10557: Make check to distinguish between orphan txs and old txs more efficient.\n\n18bacec6c Make check to distinguish between orphan txs and old txs more efficient. (Alex Morcos)\n\nTree-SHA512: b6b4bad89aa561975dce7b68b2fdad5623af5ebcb9c38fd6a72b5f6d0544ed441df4865591ac018f7ae0df9b5c60820cb4d9e55664f5667c9268458df70fd554\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66270a416edb1610f276124483feceef9cba93ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/66270a416edb1610f276124483feceef9cba93ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66270a416edb1610f276124483feceef9cba93ff/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db825d293be8134505187352ec5844b70f37a43f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db825d293be8134505187352ec5844b70f37a43f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db825d293be8134505187352ec5844b70f37a43f"
      },
      {
        "sha": "18bacec6c2c8493fd6b7011778446b3c7473bb25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18bacec6c2c8493fd6b7011778446b3c7473bb25",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/18bacec6c2c8493fd6b7011778446b3c7473bb25"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 8,
      "deletions": 12
    },
    "files": [
      {
        "sha": "bcc158c5049a29921bf7044624704a284db16a77",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 12,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66270a416edb1610f276124483feceef9cba93ff/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66270a416edb1610f276124483feceef9cba93ff/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=66270a416edb1610f276124483feceef9cba93ff",
        "patch": "@@ -532,24 +532,20 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         CCoinsViewMemPool viewMemPool(pcoinsTip, pool);\n         view.SetBackend(viewMemPool);\n \n-        // do we already have it?\n-        for (size_t out = 0; out < tx.vout.size(); out++) {\n-            COutPoint outpoint(hash, out);\n-            bool had_coin_in_cache = pcoinsTip->HaveCoinInCache(outpoint);\n-            if (view.HaveCoin(outpoint)) {\n-                if (!had_coin_in_cache) {\n-                    coins_to_uncache.push_back(outpoint);\n-                }\n-                return state.Invalid(false, REJECT_DUPLICATE, \"txn-already-known\");\n-            }\n-        }\n-\n         // do all inputs exist?\n         for (const CTxIn txin : tx.vin) {\n             if (!pcoinsTip->HaveCoinInCache(txin.prevout)) {\n                 coins_to_uncache.push_back(txin.prevout);\n             }\n             if (!view.HaveCoin(txin.prevout)) {\n+                // Are inputs missing because we already have the tx?\n+                for (size_t out = 0; out < tx.vout.size(); out++) {\n+                    // Optimistically just do efficient check of cache for outputs\n+                    if (pcoinsTip->HaveCoinInCache(COutPoint(hash, out))) {\n+                        return state.Invalid(false, REJECT_DUPLICATE, \"txn-already-known\");\n+                    }\n+                }\n+                // Otherwise assume this might be an orphan tx for which we just haven't seen parents yet\n                 if (pfMissingInputs) {\n                     *pfMissingInputs = true;\n                 }"
      }
    ]
  },
  {
    "sha": "674848fe1c43fb88870cf5ba16fca4e2524da793",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzQ4NDhmZTFjNDNmYjg4ODcwY2Y1YmExNmZjYTRlMjUyNGRhNzkz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-14T19:17:33Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-14T19:17:33Z"
      },
      "message": "Clarify entropy source",
      "tree": {
        "sha": "72d254436d3d0455b68b2806cd75b343cd106528",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/72d254436d3d0455b68b2806cd75b343cd106528"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/674848fe1c43fb88870cf5ba16fca4e2524da793",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/674848fe1c43fb88870cf5ba16fca4e2524da793",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/674848fe1c43fb88870cf5ba16fca4e2524da793",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/674848fe1c43fb88870cf5ba16fca4e2524da793/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a9e82f6512662054f64ed2bde590b2bb0831fc9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9e82f6512662054f64ed2bde590b2bb0831fc9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9e82f6512662054f64ed2bde590b2bb0831fc9d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1ee6158e4b7c5b514fd23643ab2c0e725cb04997",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/674848fe1c43fb88870cf5ba16fca4e2524da793/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/674848fe1c43fb88870cf5ba16fca4e2524da793/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=674848fe1c43fb88870cf5ba16fca4e2524da793",
        "patch": "@@ -78,7 +78,7 @@ static void RDRandInit()\n {\n     uint32_t eax, ebx, ecx, edx;\n     if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & CPUID_F1_ECX_RDRAND)) {\n-        LogPrintf(\"Using RdRand as entropy source\\n\");\n+        LogPrintf(\"Using RdRand as an additional entropy source\\n\");\n         rdrand_supported = true;\n     }\n     hwrand_initialized.store(true);"
      }
    ]
  },
  {
    "sha": "3babbcb48786372d4b22171674c4cc5a6220c294",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYmFiYmNiNDg3ODYzNzJkNGIyMjE3MTY3NGM0Y2M1YTYyMjBjMjk0",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-06-17T00:18:42Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-07-14T19:24:17Z"
      },
      "message": "Remove confusing MAX_BLOCK_BASE_SIZE.\n\nSome people keep thinking that MAX_BLOCK_BASE_SIZE is a separate\n size limit from the weight limit when it fact it is superfluous,\n and used in early tests before the witness data has been\n validated or just to compute worst case sizes.  The size checks\n that use it would not behave any differently consensus wise\n if they were eliminated completely.\n\nIts correct value is not independently settable but is a function\n of the weight limit and weight formula.\n\nThis patch just eliminates it and uses the scale factor as\n required to compute the worse case constants.\n\nIt also moves the weight factor out of primitives into consensus,\n which is a more logical place for it.",
      "tree": {
        "sha": "099fab1403b69a6da62d222fbf8b2d45f0c12fa7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/099fab1403b69a6da62d222fbf8b2d45f0c12fa7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3babbcb48786372d4b22171674c4cc5a6220c294",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3babbcb48786372d4b22171674c4cc5a6220c294",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3babbcb48786372d4b22171674c4cc5a6220c294",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3babbcb48786372d4b22171674c4cc5a6220c294/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e4fcbf797ed3b472d352ac3794ec82f581209c50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4fcbf797ed3b472d352ac3794ec82f581209c50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4fcbf797ed3b472d352ac3794ec82f581209c50"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 43,
      "deletions": 45
    },
    "files": [
      {
        "sha": "9acb3fd30e9668e18f6cbbf2921646e7f2799d6f",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -239,7 +239,7 @@ static void MutateTxAddInput(CMutableTransaction& tx, const std::string& strInpu\n     uint256 txid(uint256S(strTxid));\n \n     static const unsigned int minTxOutSz = 9;\n-    static const unsigned int maxVout = MAX_BLOCK_BASE_SIZE / minTxOutSz;\n+    static const unsigned int maxVout = MAX_BLOCK_WEIGHT / (WITNESS_SCALE_FACTOR * minTxOutSz);\n \n     // extract and validate vout\n     std::string strVout = vStrInputParts[1];"
      },
      {
        "sha": "7adab586e8f586baf87ec4a5d2f7e0f77ad47c99",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -15,8 +15,6 @@\n \n #include <unordered_map>\n \n-#define MIN_TRANSACTION_BASE_SIZE (::GetSerializeSize(CTransaction(), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS))\n-\n CBlockHeaderAndShortTxIDs::CBlockHeaderAndShortTxIDs(const CBlock& block, bool fUseWTXID) :\n         nonce(GetRand(std::numeric_limits<uint64_t>::max())),\n         shorttxids(block.vtx.size() - 1), prefilledtxn(1), header(block) {\n@@ -50,7 +48,7 @@ uint64_t CBlockHeaderAndShortTxIDs::GetShortID(const uint256& txhash) const {\n ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& cmpctblock, const std::vector<std::pair<uint256, CTransactionRef>>& extra_txn) {\n     if (cmpctblock.header.IsNull() || (cmpctblock.shorttxids.empty() && cmpctblock.prefilledtxn.empty()))\n         return READ_STATUS_INVALID;\n-    if (cmpctblock.shorttxids.size() + cmpctblock.prefilledtxn.size() > MAX_BLOCK_BASE_SIZE / MIN_TRANSACTION_BASE_SIZE)\n+    if (cmpctblock.shorttxids.size() + cmpctblock.prefilledtxn.size() > MAX_BLOCK_WEIGHT / MIN_SERIALIZEABLE_TRANSACTION_WEIGHT)\n         return READ_STATUS_INVALID;\n \n     assert(header.IsNull() && txn_available.empty());"
      },
      {
        "sha": "e30bda930ae6c9e24ea2d121b36ac3157e341745",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -245,7 +245,8 @@ bool CCoinsViewCache::HaveInputs(const CTransaction& tx) const\n     return true;\n }\n \n-static const size_t MAX_OUTPUTS_PER_BLOCK = MAX_BLOCK_BASE_SIZE /  ::GetSerializeSize(CTxOut(), SER_NETWORK, PROTOCOL_VERSION); // TODO: merge with similar definition in undo.h.\n+static const size_t MIN_TRANSACTION_OUTPUT_WEIGHT = WITNESS_SCALE_FACTOR * ::GetSerializeSize(CTxOut(), SER_NETWORK, PROTOCOL_VERSION);\n+static const size_t MAX_OUTPUTS_PER_BLOCK = MAX_BLOCK_WEIGHT / MIN_TRANSACTION_OUTPUT_WEIGHT;\n \n const Coin& AccessByTxid(const CCoinsViewCache& view, const uint256& txid)\n {"
      },
      {
        "sha": "a1bb99a802c0999ab1584b80313da57522eba9b4",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -6,25 +6,23 @@\n #ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n #define BITCOIN_CONSENSUS_CONSENSUS_H\n \n+#include <stdlib.h>\n #include <stdint.h>\n \n /** The maximum allowed size for a serialized block, in bytes (only for buffer size limits) */\n static const unsigned int MAX_BLOCK_SERIALIZED_SIZE = 4000000;\n /** The maximum allowed weight for a block, see BIP 141 (network rule) */\n static const unsigned int MAX_BLOCK_WEIGHT = 4000000;\n-/**\n- * The maximum allowed size for a block excluding witness data, in bytes (network rule).\n- * This parameter is largely superfluous because it is directly implied by the above block\n- *  weight limit, even when BIP 141 is not active.  It continues to exist for use in\n- *  various early tests that run before the witness data has been checked.\n- * All tests related to it could be removed without breaking consensus compatibility.\n- */\n-static const unsigned int MAX_BLOCK_BASE_SIZE = 1000000;\n /** The maximum allowed number of signature check operations in a block (network rule) */\n static const int64_t MAX_BLOCK_SIGOPS_COST = 80000;\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n \n+static const int WITNESS_SCALE_FACTOR = 4;\n+\n+static const size_t MIN_TRANSACTION_WEIGHT = WITNESS_SCALE_FACTOR * 60; // 60 is the lower bound for the size of a valid serialized CTransaction\n+static const size_t MIN_SERIALIZEABLE_TRANSACTION_WEIGHT = WITNESS_SCALE_FACTOR * 10; // 10 is the lower bound for the size of a serialized CTransaction\n+\n /** Flags for nSequence and nLockTime locks */\n enum {\n     /* Interpret sequence numbers as relative lock-time constraints. */"
      },
      {
        "sha": "0a71915d1df129362300fdefe6e5b9b1b51e7ca9",
        "filename": "src/consensus/tx_verify.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/consensus/tx_verify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/consensus/tx_verify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.cpp?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -164,7 +164,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n     if (tx.vout.empty())\n         return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n     // Size limits (this doesn't take the witness into account, as that hasn't been checked for malleability)\n-    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) > MAX_BLOCK_BASE_SIZE)\n+    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT)\n         return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n \n     // Check for negative or overflow output values"
      },
      {
        "sha": "5494ce40eac4204e06026d589958ff42e8f1fc0a",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -7,6 +7,10 @@\n #define BITCOIN_CONSENSUS_VALIDATION_H\n \n #include <string>\n+#include \"version.h\"\n+#include \"consensus/consensus.h\"\n+#include \"primitives/transaction.h\"\n+#include \"primitives/block.h\"\n \n /** \"reject\" message codes */\n static const unsigned char REJECT_MALFORMED = 0x01;\n@@ -85,4 +89,18 @@ class CValidationState {\n     std::string GetDebugMessage() const { return strDebugMessage; }\n };\n \n+static inline int64_t GetTransactionWeight(const CTransaction& tx)\n+{\n+    return ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR -1) + ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n+}\n+\n+static inline int64_t GetBlockWeight(const CBlock& block)\n+{\n+    // This implements the weight = (stripped_size * 4) + witness_size formula,\n+    // using only serialization with and without witness data. As witness_size\n+    // is equal to total_size - stripped_size, this formula is identical to:\n+    // weight = (stripped_size * 3) + total_size.\n+    return ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION);\n+}\n+\n #endif // BITCOIN_CONSENSUS_VALIDATION_H"
      },
      {
        "sha": "a366ef933c344b9e0fca4cf55b2a54ca67a00021",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -5,7 +5,8 @@\n #include \"core_io.h\"\n \n #include \"base58.h\"\n-#include \"primitives/transaction.h\"\n+#include \"consensus/consensus.h\"\n+#include \"consensus/validation.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\"\n #include \"serialize.h\"\n@@ -15,7 +16,6 @@\n #include \"utilmoneystr.h\"\n #include \"utilstrencodings.h\"\n \n-\n std::string FormatScript(const CScript& script)\n {\n     std::string ret;"
      },
      {
        "sha": "ba5f7b400cc343a45613384da0741e9caaae95eb",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -153,7 +153,7 @@ uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch, std::ve\n     if (nTransactions == 0)\n         return uint256();\n     // check for excessively high numbers of transactions\n-    if (nTransactions > MAX_BLOCK_BASE_SIZE / 60) // 60 is the lower bound for the size of a serialized CTransaction\n+    if (nTransactions > MAX_BLOCK_WEIGHT / MIN_TRANSACTION_WEIGHT)\n         return uint256();\n     // there can never be more hashes provided than one for every txid\n     if (vHash.size() > nTransactions)"
      },
      {
        "sha": "9f2d623e769ec4f553d88f6f97372d24abccd026",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"policy/policy.h\"\n \n+#include \"consensus/validation.h\"\n #include \"validation.h\"\n #include \"coins.h\"\n #include \"tinyformat.h\""
      },
      {
        "sha": "24be67c84fbb2dfc17d986b21b4f70202042242f",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -31,12 +31,3 @@ std::string CBlock::ToString() const\n     }\n     return s.str();\n }\n-\n-int64_t GetBlockWeight(const CBlock& block)\n-{\n-    // This implements the weight = (stripped_size * 4) + witness_size formula,\n-    // using only serialization with and without witness data. As witness_size\n-    // is equal to total_size - stripped_size, this formula is identical to:\n-    // weight = (stripped_size * 3) + total_size.\n-    return ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION);\n-}"
      },
      {
        "sha": "c90a1dfa6448631db06e522d3d0876c79a2e4977",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -152,7 +152,4 @@ struct CBlockLocator\n     }\n };\n \n-/** Compute the consensus-critical block weight (see BIP 141). */\n-int64_t GetBlockWeight(const CBlock& tx);\n-\n #endif // BITCOIN_PRIMITIVES_BLOCK_H"
      },
      {
        "sha": "f87934d586881b2e3d64dd88232b6a76aa1fd9cd",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -114,8 +114,3 @@ std::string CTransaction::ToString() const\n         str += \"    \" + vout[i].ToString() + \"\\n\";\n     return str;\n }\n-\n-int64_t GetTransactionWeight(const CTransaction& tx)\n-{\n-    return ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR -1) + ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n-}"
      },
      {
        "sha": "f1dd51b9fd81843385a066f0daf26b9718f5df24",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -6,15 +6,14 @@\n #ifndef BITCOIN_PRIMITIVES_TRANSACTION_H\n #define BITCOIN_PRIMITIVES_TRANSACTION_H\n \n+#include <stdint.h>\n #include \"amount.h\"\n #include \"script/script.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n \n static const int SERIALIZE_TRANSACTION_NO_WITNESS = 0x40000000;\n \n-static const int WITNESS_SCALE_FACTOR = 4;\n-\n /** An outpoint - a combination of a transaction hash and an index n into its vout */\n class COutPoint\n {\n@@ -411,7 +410,4 @@ typedef std::shared_ptr<const CTransaction> CTransactionRef;\n static inline CTransactionRef MakeTransactionRef() { return std::make_shared<const CTransaction>(); }\n template <typename Tx> static inline CTransactionRef MakeTransactionRef(Tx&& txIn) { return std::make_shared<const CTransaction>(std::forward<Tx>(txIn)); }\n \n-/** Compute the weight of a transaction, as defined by BIP 141 */\n-int64_t GetTransactionWeight(const CTransaction &tx);\n-\n #endif // BITCOIN_PRIMITIVES_TRANSACTION_H"
      },
      {
        "sha": "10bb341e54acd138a901f80e198e1a335289b579",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -645,15 +645,16 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     result.push_back(Pair(\"mutable\", aMutable));\n     result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n     int64_t nSigOpLimit = MAX_BLOCK_SIGOPS_COST;\n+    int64_t nSizeLimit = MAX_BLOCK_SERIALIZED_SIZE;\n     if (fPreSegWit) {\n         assert(nSigOpLimit % WITNESS_SCALE_FACTOR == 0);\n         nSigOpLimit /= WITNESS_SCALE_FACTOR;\n+        assert(nSizeLimit % WITNESS_SCALE_FACTOR == 0);\n+        nSizeLimit /= WITNESS_SCALE_FACTOR;\n     }\n     result.push_back(Pair(\"sigoplimit\", nSigOpLimit));\n-    if (fPreSegWit) {\n-        result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_BASE_SIZE));\n-    } else {\n-        result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SERIALIZED_SIZE));\n+    result.push_back(Pair(\"sizelimit\", nSizeLimit));\n+    if (!fPreSegWit) {\n         result.push_back(Pair(\"weightlimit\", (int64_t)MAX_BLOCK_WEIGHT));\n     }\n     result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));"
      },
      {
        "sha": "d3b8b072288b6d1686daa72833654b205e964e78",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"consensus/tx_verify.h\"\n+#include \"consensus/validation.h\"\n #include \"pubkey.h\"\n #include \"key.h\"\n #include \"script/script.h\""
      },
      {
        "sha": "0f9d041bbdc47aadb3745a75a0f2c0cf43f74350",
        "filename": "src/undo.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/undo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/undo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/undo.h?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -60,7 +60,8 @@ class TxInUndoDeserializer\n     TxInUndoDeserializer(Coin* coin) : txout(coin) {}\n };\n \n-static const size_t MAX_INPUTS_PER_BLOCK = MAX_BLOCK_BASE_SIZE / ::GetSerializeSize(CTxIn(), SER_NETWORK, PROTOCOL_VERSION);\n+static const size_t MIN_TRANSACTION_INPUT_WEIGHT = WITNESS_SCALE_FACTOR * ::GetSerializeSize(CTxIn(), SER_NETWORK, PROTOCOL_VERSION);\n+static const size_t MAX_INPUTS_PER_BLOCK = MAX_BLOCK_WEIGHT / MIN_TRANSACTION_INPUT_WEIGHT;\n \n /** Undo information for a CTransaction */\n class CTxUndo"
      },
      {
        "sha": "c101497600c5ff5f223c7d6e0056c6a44908b78d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -2803,7 +2803,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n     // checks that use witness data may be performed here.\n \n     // Size limits\n-    if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_BASE_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) > MAX_BLOCK_BASE_SIZE)\n+    if (block.vtx.empty() || block.vtx.size() * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT)\n         return state.DoS(100, false, REJECT_INVALID, \"bad-blk-length\", false, \"size limits failed\");\n \n     // First transaction must be coinbase, the rest must not be"
      }
    ]
  },
  {
    "sha": "b7d6623c76e1468f2a93db5a3120580e2784d74a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiN2Q2NjIzYzc2ZTE0NjhmMmE5M2RiNWEzMTIwNTgwZTI3ODRkNzRh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-14T21:33:10Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-14T21:54:07Z"
      },
      "message": "Merge #10819: Fix uninitialized atomic variables\n\n465279114 Fix uninitialized atomic variables (Jo\u00e3o Barbosa)\n\nTree-SHA512: 5dd8924bc8743a094abdbc2464b835a0e7fd4948c102ea7c2251c6330bea5615c4459ba322a656fd6ac5f8d695b69d3709d225ddccef226cf8afc7de5e3d3019",
      "tree": {
        "sha": "b29cbe8e06575d6e41bb645bf80070f904c3c001",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b29cbe8e06575d6e41bb645bf80070f904c3c001"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7d6623c76e1468f2a93db5a3120580e2784d74a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZaT1/AAoJEKY26XYx92fgeG4P/Am2JiVtMS9gTM4vjnIpUlEa\n6z/dLElI3ud32tShgR2MqBqQwa4Rf8s6I3BdNFAnr9hLfnuC2SYHjLQ4zLah7y8S\nzZRFWq6ZwxPzXZQ1UpP2ThyBILonHLUoUfA0tYlNlpmpTGuwDZ8Ltt86cYbdGWat\nTomIWoYLEZSWFlRsmDkQVVRZl/0SDOsWBkJWY1Ra68jMtpqZvXqFJyF5+GiCUnFe\nTWKr9DN8hG6mma0agSYUeOiQacZzUVwsh4aD/NVTZ1YQhaCttytdMiCov+Jy0Nhm\nU2TsZ39BgRsjXmrVI+75pS3MmSm6VE1CxY16/ZxbSnvuBgWqRfPZUDd09F16vMxU\nmayO9gFaVHy4FrnSguFVnVO/7B+eTPKWMQpHUPf90MAYYsxnkyR7d6ZURvRYM0JU\nTQgYttWN6Au+yXts2AsdbhRvffjsDlqIYQo+M/v5rqvEC5RV0S9pBrzSBZ/7eWrU\nZpVh6tdjyi/0qrN3AvzzwpkxkbfmdYSY2HHpyMzAYxC0YV8f624slg9vtpSXhCFS\n6wKEtsfWR271qVK7N3mhD81PyjdySLyS8MFIYwsyTifBMqWbBglqfRNsy8tM+gN4\nbjT66uZ7smIlfKUtq5+LGil9L2+Iuwh29ewoXMgalLaB9vFA6/wKqgZ+7I14PGWO\neQZV6TIWCvXiUu59lHhX\n=cRWY\n-----END PGP SIGNATURE-----",
        "payload": "tree b29cbe8e06575d6e41bb645bf80070f904c3c001\nparent 66270a416edb1610f276124483feceef9cba93ff\nparent 4652791141f0a8a977b324147ccf1a2360b69ca4\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1500067990 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1500069247 -0700\n\nMerge #10819: Fix uninitialized atomic variables\n\n465279114 Fix uninitialized atomic variables (Jo\u00e3o Barbosa)\n\nTree-SHA512: 5dd8924bc8743a094abdbc2464b835a0e7fd4948c102ea7c2251c6330bea5615c4459ba322a656fd6ac5f8d695b69d3709d225ddccef226cf8afc7de5e3d3019\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7d6623c76e1468f2a93db5a3120580e2784d74a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7d6623c76e1468f2a93db5a3120580e2784d74a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7d6623c76e1468f2a93db5a3120580e2784d74a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66270a416edb1610f276124483feceef9cba93ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66270a416edb1610f276124483feceef9cba93ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66270a416edb1610f276124483feceef9cba93ff"
      },
      {
        "sha": "4652791141f0a8a977b324147ccf1a2360b69ca4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4652791141f0a8a977b324147ccf1a2360b69ca4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4652791141f0a8a977b324147ccf1a2360b69ca4"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "3fb1c18f0308a453573b42b82d86e8ae24cc6e4e",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7d6623c76e1468f2a93db5a3120580e2784d74a/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7d6623c76e1468f2a93db5a3120580e2784d74a/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=b7d6623c76e1468f2a93db5a3120580e2784d74a",
        "patch": "@@ -563,7 +563,7 @@ static bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDe\n     // do socks negotiation\n     if (proxy.randomize_credentials) {\n         ProxyCredentials random_auth;\n-        static std::atomic_int counter;\n+        static std::atomic_int counter(0);\n         random_auth.username = random_auth.password = strprintf(\"%i\", counter++);\n         if (!Socks5(strDest, (unsigned short)port, &random_auth, hSocket))\n             return false;"
      },
      {
        "sha": "4f3ad0c42dee66bbf90fc0a6adb7e858c95ed7b1",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7d6623c76e1468f2a93db5a3120580e2784d74a/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7d6623c76e1468f2a93db5a3120580e2784d74a/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=b7d6623c76e1468f2a93db5a3120580e2784d74a",
        "patch": "@@ -95,13 +95,13 @@ class CWalletDBWrapper\n     friend class CDB;\n public:\n     /** Create dummy DB handle */\n-    CWalletDBWrapper() : nLastSeen(0), nLastFlushed(0), nLastWalletUpdate(0), env(nullptr)\n+    CWalletDBWrapper() : nUpdateCounter(0), nLastSeen(0), nLastFlushed(0), nLastWalletUpdate(0), env(nullptr)\n     {\n     }\n \n     /** Create DB handle to real database */\n     CWalletDBWrapper(CDBEnv *env_in, const std::string &strFile_in) :\n-        nLastSeen(0), nLastFlushed(0), nLastWalletUpdate(0), env(env_in), strFile(strFile_in)\n+        nUpdateCounter(0), nLastSeen(0), nLastFlushed(0), nLastWalletUpdate(0), env(env_in), strFile(strFile_in)\n     {\n     }\n "
      },
      {
        "sha": "2a33dca240c3b827a258c2714a54a6b61055d4c2",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7d6623c76e1468f2a93db5a3120580e2784d74a/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7d6623c76e1468f2a93db5a3120580e2784d74a/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=b7d6623c76e1468f2a93db5a3120580e2784d74a",
        "patch": "@@ -747,7 +747,7 @@ DBErrors CWalletDB::ZapWalletTx(std::vector<CWalletTx>& vWtx)\n \n void MaybeCompactWalletDB()\n {\n-    static std::atomic<bool> fOneThread;\n+    static std::atomic<bool> fOneThread(false);\n     if (fOneThread.exchange(true)) {\n         return;\n     }"
      }
    ]
  },
  {
    "sha": "f90603ac6d24f5263649675d51233f1fce8b2ecd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOTA2MDNhYzZkMjRmNTI2MzY0OTY3NWQ1MTIzM2YxZmNlOGIyZWNk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-15T00:37:54Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-15T00:49:48Z"
      },
      "message": "Merge #10618: Remove confusing MAX_BLOCK_BASE_SIZE.\n\n3babbcb48 Remove confusing MAX_BLOCK_BASE_SIZE. (Gregory Maxwell)\n\nTree-SHA512: 361293fc4e1e379cd5a0908ed0866a00e1c7a771bdf02fded158fca21b492a29c7a67fea0d13dc40b2a04204c89823bf1836fe5b63a17c9747751b9c845a3527",
      "tree": {
        "sha": "e2e2b4f29859a255db00b479d2dae30b70139d0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2e2b4f29859a255db00b479d2dae30b70139d0c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f90603ac6d24f5263649675d51233f1fce8b2ecd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZaWasAAoJEKY26XYx92fg/ekP/09YP6yBHWyQ0oEG9Pfax2jY\ns09P9osuPuC8ND0948PlqEtjOSz4/bker5i5HG0v4KshlAwB9drNHQoURH0pahur\nLjMYegotEoIvArm4IvvcLqJ+l/xdGdLTLBCHk1ki8iWL3BoqVYVTJILZsIr0aiCH\nIqRdWTFz50ENN6Q3e0kyFpypTmMDLFfwRh376qWxJbpNyiSCq1Ca4ZoQtnc7eqHR\n99AHds/lVqJ/Vr8muqeHmY0eThVWeoOz75at5RKGwYWr3KDMa2bix0iQolhaduIN\ndsTL6sF/m00twqCvLWwunJi5DKnXhkXsQ8ov3vvFkR6bSuNIAVMR/H7elq1bjgVo\nof93DGBPSHxJy7KsvzQfGzGgjwJk9KjFk58RNGJB/Uyl99gbskodBYatlx1gBXoC\nQJI7nvS2UUG9k/6WyqHLINRXUSMUu3ssAKE23znB8oL6m0/Aqcge5CHf2+40ciE3\nP9sFrARuJXHPBZ944lVSKvHWgIScClyllGDk6PnceLtJd+N24EHo0h8/ULqzDH1P\n6nYbDt4xW+yUwSJt+766nqjIyMWii/gt4TFnQOvJMhoi47ucFZQEJGSPci7h2lNi\noMXaV0addaUtCDyszFMLAWlQVj5TKmfvMyUwiCgwyEEE2zbwRANfSmK/QVwkzGP9\nWVCA2QUyrWg3WbsMyEVH\n=z+pC\n-----END PGP SIGNATURE-----",
        "payload": "tree e2e2b4f29859a255db00b479d2dae30b70139d0c\nparent b7d6623c76e1468f2a93db5a3120580e2784d74a\nparent 3babbcb48786372d4b22171674c4cc5a6220c294\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1500079074 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1500079788 -0700\n\nMerge #10618: Remove confusing MAX_BLOCK_BASE_SIZE.\n\n3babbcb48 Remove confusing MAX_BLOCK_BASE_SIZE. (Gregory Maxwell)\n\nTree-SHA512: 361293fc4e1e379cd5a0908ed0866a00e1c7a771bdf02fded158fca21b492a29c7a67fea0d13dc40b2a04204c89823bf1836fe5b63a17c9747751b9c845a3527\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f90603ac6d24f5263649675d51233f1fce8b2ecd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f90603ac6d24f5263649675d51233f1fce8b2ecd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f90603ac6d24f5263649675d51233f1fce8b2ecd/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b7d6623c76e1468f2a93db5a3120580e2784d74a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7d6623c76e1468f2a93db5a3120580e2784d74a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7d6623c76e1468f2a93db5a3120580e2784d74a"
      },
      {
        "sha": "3babbcb48786372d4b22171674c4cc5a6220c294",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3babbcb48786372d4b22171674c4cc5a6220c294",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3babbcb48786372d4b22171674c4cc5a6220c294"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 43,
      "deletions": 45
    },
    "files": [
      {
        "sha": "9acb3fd30e9668e18f6cbbf2921646e7f2799d6f",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=f90603ac6d24f5263649675d51233f1fce8b2ecd",
        "patch": "@@ -239,7 +239,7 @@ static void MutateTxAddInput(CMutableTransaction& tx, const std::string& strInpu\n     uint256 txid(uint256S(strTxid));\n \n     static const unsigned int minTxOutSz = 9;\n-    static const unsigned int maxVout = MAX_BLOCK_BASE_SIZE / minTxOutSz;\n+    static const unsigned int maxVout = MAX_BLOCK_WEIGHT / (WITNESS_SCALE_FACTOR * minTxOutSz);\n \n     // extract and validate vout\n     std::string strVout = vStrInputParts[1];"
      },
      {
        "sha": "7adab586e8f586baf87ec4a5d2f7e0f77ad47c99",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=f90603ac6d24f5263649675d51233f1fce8b2ecd",
        "patch": "@@ -15,8 +15,6 @@\n \n #include <unordered_map>\n \n-#define MIN_TRANSACTION_BASE_SIZE (::GetSerializeSize(CTransaction(), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS))\n-\n CBlockHeaderAndShortTxIDs::CBlockHeaderAndShortTxIDs(const CBlock& block, bool fUseWTXID) :\n         nonce(GetRand(std::numeric_limits<uint64_t>::max())),\n         shorttxids(block.vtx.size() - 1), prefilledtxn(1), header(block) {\n@@ -50,7 +48,7 @@ uint64_t CBlockHeaderAndShortTxIDs::GetShortID(const uint256& txhash) const {\n ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& cmpctblock, const std::vector<std::pair<uint256, CTransactionRef>>& extra_txn) {\n     if (cmpctblock.header.IsNull() || (cmpctblock.shorttxids.empty() && cmpctblock.prefilledtxn.empty()))\n         return READ_STATUS_INVALID;\n-    if (cmpctblock.shorttxids.size() + cmpctblock.prefilledtxn.size() > MAX_BLOCK_BASE_SIZE / MIN_TRANSACTION_BASE_SIZE)\n+    if (cmpctblock.shorttxids.size() + cmpctblock.prefilledtxn.size() > MAX_BLOCK_WEIGHT / MIN_SERIALIZEABLE_TRANSACTION_WEIGHT)\n         return READ_STATUS_INVALID;\n \n     assert(header.IsNull() && txn_available.empty());"
      },
      {
        "sha": "e30bda930ae6c9e24ea2d121b36ac3157e341745",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=f90603ac6d24f5263649675d51233f1fce8b2ecd",
        "patch": "@@ -245,7 +245,8 @@ bool CCoinsViewCache::HaveInputs(const CTransaction& tx) const\n     return true;\n }\n \n-static const size_t MAX_OUTPUTS_PER_BLOCK = MAX_BLOCK_BASE_SIZE /  ::GetSerializeSize(CTxOut(), SER_NETWORK, PROTOCOL_VERSION); // TODO: merge with similar definition in undo.h.\n+static const size_t MIN_TRANSACTION_OUTPUT_WEIGHT = WITNESS_SCALE_FACTOR * ::GetSerializeSize(CTxOut(), SER_NETWORK, PROTOCOL_VERSION);\n+static const size_t MAX_OUTPUTS_PER_BLOCK = MAX_BLOCK_WEIGHT / MIN_TRANSACTION_OUTPUT_WEIGHT;\n \n const Coin& AccessByTxid(const CCoinsViewCache& view, const uint256& txid)\n {"
      },
      {
        "sha": "a1bb99a802c0999ab1584b80313da57522eba9b4",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=f90603ac6d24f5263649675d51233f1fce8b2ecd",
        "patch": "@@ -6,25 +6,23 @@\n #ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n #define BITCOIN_CONSENSUS_CONSENSUS_H\n \n+#include <stdlib.h>\n #include <stdint.h>\n \n /** The maximum allowed size for a serialized block, in bytes (only for buffer size limits) */\n static const unsigned int MAX_BLOCK_SERIALIZED_SIZE = 4000000;\n /** The maximum allowed weight for a block, see BIP 141 (network rule) */\n static const unsigned int MAX_BLOCK_WEIGHT = 4000000;\n-/**\n- * The maximum allowed size for a block excluding witness data, in bytes (network rule).\n- * This parameter is largely superfluous because it is directly implied by the above block\n- *  weight limit, even when BIP 141 is not active.  It continues to exist for use in\n- *  various early tests that run before the witness data has been checked.\n- * All tests related to it could be removed without breaking consensus compatibility.\n- */\n-static const unsigned int MAX_BLOCK_BASE_SIZE = 1000000;\n /** The maximum allowed number of signature check operations in a block (network rule) */\n static const int64_t MAX_BLOCK_SIGOPS_COST = 80000;\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n \n+static const int WITNESS_SCALE_FACTOR = 4;\n+\n+static const size_t MIN_TRANSACTION_WEIGHT = WITNESS_SCALE_FACTOR * 60; // 60 is the lower bound for the size of a valid serialized CTransaction\n+static const size_t MIN_SERIALIZEABLE_TRANSACTION_WEIGHT = WITNESS_SCALE_FACTOR * 10; // 10 is the lower bound for the size of a serialized CTransaction\n+\n /** Flags for nSequence and nLockTime locks */\n enum {\n     /* Interpret sequence numbers as relative lock-time constraints. */"
      },
      {
        "sha": "0a71915d1df129362300fdefe6e5b9b1b51e7ca9",
        "filename": "src/consensus/tx_verify.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/consensus/tx_verify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/consensus/tx_verify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.cpp?ref=f90603ac6d24f5263649675d51233f1fce8b2ecd",
        "patch": "@@ -164,7 +164,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n     if (tx.vout.empty())\n         return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n     // Size limits (this doesn't take the witness into account, as that hasn't been checked for malleability)\n-    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) > MAX_BLOCK_BASE_SIZE)\n+    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT)\n         return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n \n     // Check for negative or overflow output values"
      },
      {
        "sha": "5494ce40eac4204e06026d589958ff42e8f1fc0a",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=f90603ac6d24f5263649675d51233f1fce8b2ecd",
        "patch": "@@ -7,6 +7,10 @@\n #define BITCOIN_CONSENSUS_VALIDATION_H\n \n #include <string>\n+#include \"version.h\"\n+#include \"consensus/consensus.h\"\n+#include \"primitives/transaction.h\"\n+#include \"primitives/block.h\"\n \n /** \"reject\" message codes */\n static const unsigned char REJECT_MALFORMED = 0x01;\n@@ -85,4 +89,18 @@ class CValidationState {\n     std::string GetDebugMessage() const { return strDebugMessage; }\n };\n \n+static inline int64_t GetTransactionWeight(const CTransaction& tx)\n+{\n+    return ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR -1) + ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n+}\n+\n+static inline int64_t GetBlockWeight(const CBlock& block)\n+{\n+    // This implements the weight = (stripped_size * 4) + witness_size formula,\n+    // using only serialization with and without witness data. As witness_size\n+    // is equal to total_size - stripped_size, this formula is identical to:\n+    // weight = (stripped_size * 3) + total_size.\n+    return ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION);\n+}\n+\n #endif // BITCOIN_CONSENSUS_VALIDATION_H"
      },
      {
        "sha": "a366ef933c344b9e0fca4cf55b2a54ca67a00021",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=f90603ac6d24f5263649675d51233f1fce8b2ecd",
        "patch": "@@ -5,7 +5,8 @@\n #include \"core_io.h\"\n \n #include \"base58.h\"\n-#include \"primitives/transaction.h\"\n+#include \"consensus/consensus.h\"\n+#include \"consensus/validation.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\"\n #include \"serialize.h\"\n@@ -15,7 +16,6 @@\n #include \"utilmoneystr.h\"\n #include \"utilstrencodings.h\"\n \n-\n std::string FormatScript(const CScript& script)\n {\n     std::string ret;"
      },
      {
        "sha": "ba5f7b400cc343a45613384da0741e9caaae95eb",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=f90603ac6d24f5263649675d51233f1fce8b2ecd",
        "patch": "@@ -153,7 +153,7 @@ uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch, std::ve\n     if (nTransactions == 0)\n         return uint256();\n     // check for excessively high numbers of transactions\n-    if (nTransactions > MAX_BLOCK_BASE_SIZE / 60) // 60 is the lower bound for the size of a serialized CTransaction\n+    if (nTransactions > MAX_BLOCK_WEIGHT / MIN_TRANSACTION_WEIGHT)\n         return uint256();\n     // there can never be more hashes provided than one for every txid\n     if (vHash.size() > nTransactions)"
      },
      {
        "sha": "9f2d623e769ec4f553d88f6f97372d24abccd026",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=f90603ac6d24f5263649675d51233f1fce8b2ecd",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"policy/policy.h\"\n \n+#include \"consensus/validation.h\"\n #include \"validation.h\"\n #include \"coins.h\"\n #include \"tinyformat.h\""
      },
      {
        "sha": "24be67c84fbb2dfc17d986b21b4f70202042242f",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=f90603ac6d24f5263649675d51233f1fce8b2ecd",
        "patch": "@@ -31,12 +31,3 @@ std::string CBlock::ToString() const\n     }\n     return s.str();\n }\n-\n-int64_t GetBlockWeight(const CBlock& block)\n-{\n-    // This implements the weight = (stripped_size * 4) + witness_size formula,\n-    // using only serialization with and without witness data. As witness_size\n-    // is equal to total_size - stripped_size, this formula is identical to:\n-    // weight = (stripped_size * 3) + total_size.\n-    return ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION);\n-}"
      },
      {
        "sha": "c90a1dfa6448631db06e522d3d0876c79a2e4977",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=f90603ac6d24f5263649675d51233f1fce8b2ecd",
        "patch": "@@ -152,7 +152,4 @@ struct CBlockLocator\n     }\n };\n \n-/** Compute the consensus-critical block weight (see BIP 141). */\n-int64_t GetBlockWeight(const CBlock& tx);\n-\n #endif // BITCOIN_PRIMITIVES_BLOCK_H"
      },
      {
        "sha": "f87934d586881b2e3d64dd88232b6a76aa1fd9cd",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=f90603ac6d24f5263649675d51233f1fce8b2ecd",
        "patch": "@@ -114,8 +114,3 @@ std::string CTransaction::ToString() const\n         str += \"    \" + vout[i].ToString() + \"\\n\";\n     return str;\n }\n-\n-int64_t GetTransactionWeight(const CTransaction& tx)\n-{\n-    return ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR -1) + ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n-}"
      },
      {
        "sha": "f1dd51b9fd81843385a066f0daf26b9718f5df24",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=f90603ac6d24f5263649675d51233f1fce8b2ecd",
        "patch": "@@ -6,15 +6,14 @@\n #ifndef BITCOIN_PRIMITIVES_TRANSACTION_H\n #define BITCOIN_PRIMITIVES_TRANSACTION_H\n \n+#include <stdint.h>\n #include \"amount.h\"\n #include \"script/script.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n \n static const int SERIALIZE_TRANSACTION_NO_WITNESS = 0x40000000;\n \n-static const int WITNESS_SCALE_FACTOR = 4;\n-\n /** An outpoint - a combination of a transaction hash and an index n into its vout */\n class COutPoint\n {\n@@ -411,7 +410,4 @@ typedef std::shared_ptr<const CTransaction> CTransactionRef;\n static inline CTransactionRef MakeTransactionRef() { return std::make_shared<const CTransaction>(); }\n template <typename Tx> static inline CTransactionRef MakeTransactionRef(Tx&& txIn) { return std::make_shared<const CTransaction>(std::forward<Tx>(txIn)); }\n \n-/** Compute the weight of a transaction, as defined by BIP 141 */\n-int64_t GetTransactionWeight(const CTransaction &tx);\n-\n #endif // BITCOIN_PRIMITIVES_TRANSACTION_H"
      },
      {
        "sha": "10bb341e54acd138a901f80e198e1a335289b579",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=f90603ac6d24f5263649675d51233f1fce8b2ecd",
        "patch": "@@ -645,15 +645,16 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     result.push_back(Pair(\"mutable\", aMutable));\n     result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n     int64_t nSigOpLimit = MAX_BLOCK_SIGOPS_COST;\n+    int64_t nSizeLimit = MAX_BLOCK_SERIALIZED_SIZE;\n     if (fPreSegWit) {\n         assert(nSigOpLimit % WITNESS_SCALE_FACTOR == 0);\n         nSigOpLimit /= WITNESS_SCALE_FACTOR;\n+        assert(nSizeLimit % WITNESS_SCALE_FACTOR == 0);\n+        nSizeLimit /= WITNESS_SCALE_FACTOR;\n     }\n     result.push_back(Pair(\"sigoplimit\", nSigOpLimit));\n-    if (fPreSegWit) {\n-        result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_BASE_SIZE));\n-    } else {\n-        result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SERIALIZED_SIZE));\n+    result.push_back(Pair(\"sizelimit\", nSizeLimit));\n+    if (!fPreSegWit) {\n         result.push_back(Pair(\"weightlimit\", (int64_t)MAX_BLOCK_WEIGHT));\n     }\n     result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));"
      },
      {
        "sha": "d3b8b072288b6d1686daa72833654b205e964e78",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=f90603ac6d24f5263649675d51233f1fce8b2ecd",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"consensus/tx_verify.h\"\n+#include \"consensus/validation.h\"\n #include \"pubkey.h\"\n #include \"key.h\"\n #include \"script/script.h\""
      },
      {
        "sha": "0f9d041bbdc47aadb3745a75a0f2c0cf43f74350",
        "filename": "src/undo.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/undo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/undo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/undo.h?ref=f90603ac6d24f5263649675d51233f1fce8b2ecd",
        "patch": "@@ -60,7 +60,8 @@ class TxInUndoDeserializer\n     TxInUndoDeserializer(Coin* coin) : txout(coin) {}\n };\n \n-static const size_t MAX_INPUTS_PER_BLOCK = MAX_BLOCK_BASE_SIZE / ::GetSerializeSize(CTxIn(), SER_NETWORK, PROTOCOL_VERSION);\n+static const size_t MIN_TRANSACTION_INPUT_WEIGHT = WITNESS_SCALE_FACTOR * ::GetSerializeSize(CTxIn(), SER_NETWORK, PROTOCOL_VERSION);\n+static const size_t MAX_INPUTS_PER_BLOCK = MAX_BLOCK_WEIGHT / MIN_TRANSACTION_INPUT_WEIGHT;\n \n /** Undo information for a CTransaction */\n class CTxUndo"
      },
      {
        "sha": "d7d880d24f556393286efad732f185b83d21be9a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f90603ac6d24f5263649675d51233f1fce8b2ecd/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f90603ac6d24f5263649675d51233f1fce8b2ecd",
        "patch": "@@ -2799,7 +2799,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n     // checks that use witness data may be performed here.\n \n     // Size limits\n-    if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_BASE_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) > MAX_BLOCK_BASE_SIZE)\n+    if (block.vtx.empty() || block.vtx.size() * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT)\n         return state.DoS(100, false, REJECT_INVALID, \"bad-blk-length\", false, \"size limits failed\");\n \n     // First transaction must be coinbase, the rest must not be"
      }
    ]
  },
  {
    "sha": "c73b8be2440e424f304fda22e43240e8b90f9b00",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzNiOGJlMjQ0MGU0MjRmMzA0ZmRhMjJlNDMyNDBlOGI5MGY5YjAw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-12T18:45:14Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-15T00:52:38Z"
      },
      "message": "Explicitly initialize prevector::_union to avoid new warning\n\nWarning from gcc 7.1 is ./prevector.h:450:25: warning:\n'*((void*)(&<anonymous>)+8).prevector<28, unsigned char>::_union.prevector<28, unsigned char>::direct_or_indirect::<anonymous>.prevector<28, unsigned char>::direct_or_indirect::<unnamed struct>::indirect'\nmay be used uninitialized in this function [-Wmaybe-uninitialized]",
      "tree": {
        "sha": "c62a40bb6ced14945159775410ccedb48a58d1c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c62a40bb6ced14945159775410ccedb48a58d1c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c73b8be2440e424f304fda22e43240e8b90f9b00",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c73b8be2440e424f304fda22e43240e8b90f9b00",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c73b8be2440e424f304fda22e43240e8b90f9b00",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c73b8be2440e424f304fda22e43240e8b90f9b00/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1016dacfaca5014c6af377ca787c36cf5dea88e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1016dacfaca5014c6af377ca787c36cf5dea88e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1016dacfaca5014c6af377ca787c36cf5dea88e8"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "46640d6fff8434ea5d10e12ebe69917e4a32b984",
        "filename": "src/prevector.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c73b8be2440e424f304fda22e43240e8b90f9b00/src/prevector.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c73b8be2440e424f304fda22e43240e8b90f9b00/src/prevector.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/prevector.h?ref=c73b8be2440e424f304fda22e43240e8b90f9b00",
        "patch": "@@ -220,7 +220,7 @@ class prevector {\n         }\n     }\n \n-    prevector() : _size(0) {}\n+    prevector() : _size(0), _union{{}} {}\n \n     explicit prevector(size_type n) : _size(0) {\n         resize(n);"
      }
    ]
  },
  {
    "sha": "ec8a50b8d786a8cd1192e692ab19b46979add582",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzhhNTBiOGQ3ODZhOGNkMTE5MmU2OTJhYjE5YjQ2OTc5YWRkNTgy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-15T00:55:56Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-15T01:07:59Z"
      },
      "message": "Merge #10808: Avoid some new gcc warnings in 15\n\nc73b8be24 Explicitly initialize prevector::_union to avoid new warning (Matt Corallo)\n1016dacfa Fix signed/unsigned comparison warning introduced in c8e29d7ff0. (Matt Corallo)\n\nTree-SHA512: d1574b0fdc9bfddc3517c382d34418b1d8ed80c81d2f6fd19378c064af8d7704fb84ef8b740ff97f7ec7609bd6de76348921fcc227e1ce97127947a0d22c7887",
      "tree": {
        "sha": "0b64684e5a3efb283a31cb062e1687b365511e25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b64684e5a3efb283a31cb062e1687b365511e25"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec8a50b8d786a8cd1192e692ab19b46979add582",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZaWrvAAoJEKY26XYx92fgZGgP/jHEd8CEAEh/0PQi36EsY+d4\nDuLaj+YRBYM7RCVK9yb73kAZ+OpIXaOqbDRARtc5IsOnQxNq5cM4ICOGnRiubHHB\n3FsnxT4AzfeQE00ZOnf5GizZJJn6jMfPTq2atKCRCXIfkDjEK3zFy9eIuST2kyif\nPqD7JarnkQK9Y5K8hJYGDbuvt8TfqyNS2BI1Gn+jYXfn5E0axR5t6fmL2u6bYLmK\n94JFEJegBRx03H6MIkqtnRN7GneFDicmsMC3aKwyXKueROr9ckhsDkP7U1sPKfGO\nXgF8MlJRWSK1EvFBVhKc31cRXM55tauZBITtRSNty5iEbJ7K+Tq6Fgcv+rfq+t3R\nHhE/5HKDqT8GDn0Rq/nq9RZSFbuPWA3NtWH2ByaISbPBi1BCrL5mWW6ZtegHTFK/\n4IhV0ZI69yZKYJ4i7SZx8ilco8iCWu8RLHrCSWgy4moQ8tfC1/1rH7DziXUWROyr\n6BkWiBp4XZXX9DAIyhqTZi/hlREBlCkEcAvvcAQc4WZOv2ReWzmNPuiBPzJ8p2vz\nZBpPOjeGweYzjZDzGgPoLLyrMepD5aeCoZEsyvBdKAmSejmaUfuPuLV0QY8bLgIc\nMQvXcXJdR7sSClCFOAYQzXG07u1xQablLbcOpNH4eiMW2LpJsLq13rsnTRIgiW32\n1oZwXmKzthwJLn7CE9q8\n=9Bp2\n-----END PGP SIGNATURE-----",
        "payload": "tree 0b64684e5a3efb283a31cb062e1687b365511e25\nparent f90603ac6d24f5263649675d51233f1fce8b2ecd\nparent c73b8be2440e424f304fda22e43240e8b90f9b00\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1500080156 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1500080879 -0700\n\nMerge #10808: Avoid some new gcc warnings in 15\n\nc73b8be24 Explicitly initialize prevector::_union to avoid new warning (Matt Corallo)\n1016dacfa Fix signed/unsigned comparison warning introduced in c8e29d7ff0. (Matt Corallo)\n\nTree-SHA512: d1574b0fdc9bfddc3517c382d34418b1d8ed80c81d2f6fd19378c064af8d7704fb84ef8b740ff97f7ec7609bd6de76348921fcc227e1ce97127947a0d22c7887\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec8a50b8d786a8cd1192e692ab19b46979add582",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec8a50b8d786a8cd1192e692ab19b46979add582",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec8a50b8d786a8cd1192e692ab19b46979add582/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f90603ac6d24f5263649675d51233f1fce8b2ecd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f90603ac6d24f5263649675d51233f1fce8b2ecd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f90603ac6d24f5263649675d51233f1fce8b2ecd"
      },
      {
        "sha": "c73b8be2440e424f304fda22e43240e8b90f9b00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c73b8be2440e424f304fda22e43240e8b90f9b00",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c73b8be2440e424f304fda22e43240e8b90f9b00"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7018131a134ad08042c41ae1441594211448325c",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec8a50b8d786a8cd1192e692ab19b46979add582/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec8a50b8d786a8cd1192e692ab19b46979add582/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=ec8a50b8d786a8cd1192e692ab19b46979add582",
        "patch": "@@ -27,7 +27,7 @@ CScript ParseScript(const std::string& s)\n \n     if (mapOpNames.empty())\n     {\n-        for (int op = 0; op <= MAX_OPCODE; op++)\n+        for (unsigned int op = 0; op <= MAX_OPCODE; op++)\n         {\n             // Allow OP_RESERVED to get into mapOpNames\n             if (op < OP_NOP && op != OP_RESERVED)"
      },
      {
        "sha": "46640d6fff8434ea5d10e12ebe69917e4a32b984",
        "filename": "src/prevector.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec8a50b8d786a8cd1192e692ab19b46979add582/src/prevector.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec8a50b8d786a8cd1192e692ab19b46979add582/src/prevector.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/prevector.h?ref=ec8a50b8d786a8cd1192e692ab19b46979add582",
        "patch": "@@ -220,7 +220,7 @@ class prevector {\n         }\n     }\n \n-    prevector() : _size(0) {}\n+    prevector() : _size(0), _union{{}} {}\n \n     explicit prevector(size_type n) : _size(0) {\n         resize(n);"
      }
    ]
  },
  {
    "sha": "4a3fc35629a2820cecd15898f112fa730e5adcec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTNmYzM1NjI5YTI4MjBjZWNkMTU4OThmMTEyZmE3MzBlNWFkY2Vj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-19T16:55:32Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-15T01:25:21Z"
      },
      "message": "Track keypool entries as internal vs external in memory\n\nThis resolves a super minor performance regressions in several\nkeypool-handling functions",
      "tree": {
        "sha": "189446bca88ad269279c6eb87afa295674fcb25e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/189446bca88ad269279c6eb87afa295674fcb25e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a3fc35629a2820cecd15898f112fa730e5adcec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a3fc35629a2820cecd15898f112fa730e5adcec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a3fc35629a2820cecd15898f112fa730e5adcec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a3fc35629a2820cecd15898f112fa730e5adcec/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d083bd9b9c5249f21b8b7e4abd7aee48a25806b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d083bd9b9c5249f21b8b7e4abd7aee48a25806b1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d083bd9b9c5249f21b8b7e4abd7aee48a25806b1"
      }
    ],
    "stats": {
      "total": 202,
      "additions": 102,
      "deletions": 100
    },
    "files": [
      {
        "sha": "cc4d99d301e7a1baeba8ab54b470d414388cb640",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 89,
        "deletions": 94,
        "changes": 183,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a3fc35629a2820cecd15898f112fa730e5adcec/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a3fc35629a2820cecd15898f112fa730e5adcec/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=4a3fc35629a2820cecd15898f112fa730e5adcec",
        "patch": "@@ -2941,7 +2941,8 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n         if (dbw->Rewrite(\"\\x04pool\"))\n         {\n             LOCK(cs_wallet);\n-            setKeyPool.clear();\n+            setInternalKeyPool.clear();\n+            setExternalKeyPool.clear();\n             // Note: can't top-up keypool here, because wallet is locked.\n             // User will be prompted to unlock wallet the next operation\n             // that requires a new key.\n@@ -2969,7 +2970,8 @@ DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256\n     {\n         if (dbw->Rewrite(\"\\x04pool\"))\n         {\n-            setKeyPool.clear();\n+            setInternalKeyPool.clear();\n+            setExternalKeyPool.clear();\n             // Note: can't top-up keypool here, because wallet is locked.\n             // User will be prompted to unlock wallet the next operation\n             // that requires a new key.\n@@ -2994,7 +2996,8 @@ DBErrors CWallet::ZapWalletTx(std::vector<CWalletTx>& vWtx)\n         if (dbw->Rewrite(\"\\x04pool\"))\n         {\n             LOCK(cs_wallet);\n-            setKeyPool.clear();\n+            setInternalKeyPool.clear();\n+            setExternalKeyPool.clear();\n             // Note: can't top-up keypool here, because wallet is locked.\n             // User will be prompted to unlock wallet the next operation\n             // that requires a new key.\n@@ -3078,9 +3081,12 @@ bool CWallet::NewKeyPool()\n     {\n         LOCK(cs_wallet);\n         CWalletDB walletdb(*dbw);\n-        for (int64_t nIndex : setKeyPool)\n+        for (int64_t nIndex : setInternalKeyPool)\n             walletdb.ErasePool(nIndex);\n-        setKeyPool.clear();\n+        setInternalKeyPool.clear();\n+        BOOST_FOREACH(int64_t nIndex, setExternalKeyPool)\n+            walletdb.ErasePool(nIndex);\n+        setExternalKeyPool.clear();\n \n         if (!TopUpKeyPool()) {\n             return false;\n@@ -3092,25 +3098,8 @@ bool CWallet::NewKeyPool()\n \n size_t CWallet::KeypoolCountExternalKeys()\n {\n-    AssertLockHeld(cs_wallet); // setKeyPool\n-\n-    // immediately return setKeyPool's size if HD or HD_SPLIT is disabled or not supported\n-    if (!IsHDEnabled() || !CanSupportFeature(FEATURE_HD_SPLIT))\n-        return setKeyPool.size();\n-\n-    CWalletDB walletdb(*dbw);\n-\n-    // count amount of external keys\n-    size_t amountE = 0;\n-    for(const int64_t& id : setKeyPool)\n-    {\n-        CKeyPool tmpKeypool;\n-        if (!walletdb.ReadPool(id, tmpKeypool))\n-            throw std::runtime_error(std::string(__func__) + \": read failed\");\n-        amountE += !tmpKeypool.fInternal;\n-    }\n-\n-    return amountE;\n+    AssertLockHeld(cs_wallet); // setExternalKeyPool\n+    return setExternalKeyPool.size();\n }\n \n bool CWallet::TopUpKeyPool(unsigned int kpSize)\n@@ -3130,10 +3119,8 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n \n         // count amount of available keys (internal, external)\n         // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n-        int64_t amountExternal = KeypoolCountExternalKeys();\n-        int64_t amountInternal = setKeyPool.size() - amountExternal;\n-        int64_t missingExternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - amountExternal, (int64_t) 0);\n-        int64_t missingInternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - amountInternal, (int64_t) 0);\n+        int64_t missingExternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - (int64_t)setExternalKeyPool.size(), (int64_t) 0);\n+        int64_t missingInternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - (int64_t)setInternalKeyPool.size(), (int64_t) 0);\n \n         if (!IsHDEnabled() || !CanSupportFeature(FEATURE_HD_SPLIT))\n         {\n@@ -3147,18 +3134,26 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n             int64_t nEnd = 1;\n             if (i < missingInternal)\n                 internal = true;\n-            if (!setKeyPool.empty())\n-                nEnd = *(--setKeyPool.end()) + 1;\n+            if (!setInternalKeyPool.empty())\n+                nEnd = *(--setInternalKeyPool.end()) + 1;\n+            if (!setExternalKeyPool.empty())\n+                nEnd = std::max(nEnd, *(--setExternalKeyPool.end()) + 1);\n+\n             if (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey(internal), internal)))\n                 throw std::runtime_error(std::string(__func__) + \": writing generated key failed\");\n-            setKeyPool.insert(nEnd);\n-            LogPrintf(\"keypool added key %d, size=%u, internal=%d\\n\", nEnd, setKeyPool.size(), internal);\n+\n+            if (internal) {\n+                setInternalKeyPool.insert(nEnd);\n+            } else {\n+                setExternalKeyPool.insert(nEnd);\n+            }\n+            LogPrintf(\"keypool added key %d, size=%u (%u internal), new key is %s\\n\", nEnd, setInternalKeyPool.size() + setExternalKeyPool.size(), setInternalKeyPool.size(), internal ? \"internal\" : \"external\");\n         }\n     }\n     return true;\n }\n \n-void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool internal)\n+void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal)\n {\n     nIndex = -1;\n     keypool.vchPubKey = CPubKey();\n@@ -3168,30 +3163,30 @@ void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool int\n         if (!IsLocked())\n             TopUpKeyPool();\n \n+        bool fReturningInternal = IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT) && fRequestedInternal;\n+        std::set<int64_t>& setKeyPool = fReturningInternal ? setInternalKeyPool : setExternalKeyPool;\n+\n         // Get the oldest key\n         if(setKeyPool.empty())\n             return;\n \n         CWalletDB walletdb(*dbw);\n \n-        // try to find a key that matches the internal/external filter\n-        for(const int64_t& id : setKeyPool)\n-        {\n-            CKeyPool tmpKeypool;\n-            if (!walletdb.ReadPool(id, tmpKeypool))\n-                throw std::runtime_error(std::string(__func__) + \": read failed\");\n-            if (!HaveKey(tmpKeypool.vchPubKey.GetID()))\n-                throw std::runtime_error(std::string(__func__) + \": unknown key in key pool\");\n-            if (!IsHDEnabled() || !CanSupportFeature(FEATURE_HD_SPLIT) || tmpKeypool.fInternal == internal)\n-            {\n-                nIndex = id;\n-                keypool = tmpKeypool;\n-                setKeyPool.erase(id);\n-                assert(keypool.vchPubKey.IsValid());\n-                LogPrintf(\"keypool reserve %d\\n\", nIndex);\n-                return;\n-            }\n+        auto it = setKeyPool.begin();\n+        nIndex = *it;\n+        setKeyPool.erase(it);\n+        if (!walletdb.ReadPool(nIndex, keypool)) {\n+            throw std::runtime_error(std::string(__func__) + \": read failed\");\n         }\n+        if (!HaveKey(keypool.vchPubKey.GetID())) {\n+            throw std::runtime_error(std::string(__func__) + \": unknown key in key pool\");\n+        }\n+        if (keypool.fInternal != fReturningInternal) {\n+            throw std::runtime_error(std::string(__func__) + \": keypool entry misclassified\");\n+        }\n+\n+        assert(keypool.vchPubKey.IsValid());\n+        LogPrintf(\"keypool reserve %d\\n\", nIndex);\n     }\n }\n \n@@ -3203,12 +3198,16 @@ void CWallet::KeepKey(int64_t nIndex)\n     LogPrintf(\"keypool keep %d\\n\", nIndex);\n }\n \n-void CWallet::ReturnKey(int64_t nIndex)\n+void CWallet::ReturnKey(int64_t nIndex, bool fInternal)\n {\n     // Return to key pool\n     {\n         LOCK(cs_wallet);\n-        setKeyPool.insert(nIndex);\n+        if (fInternal) {\n+            setInternalKeyPool.insert(nIndex);\n+        } else {\n+            setExternalKeyPool.insert(nIndex);\n+        }\n     }\n     LogPrintf(\"keypool return %d\\n\", nIndex);\n }\n@@ -3232,48 +3231,34 @@ bool CWallet::GetKeyFromPool(CPubKey& result, bool internal)\n     return true;\n }\n \n-int64_t CWallet::GetOldestKeyPoolTime()\n-{\n-    LOCK(cs_wallet);\n-\n-    // if the keypool is empty, return <NOW>\n-    if (setKeyPool.empty())\n+static int64_t GetOldestKeyTimeInPool(const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n+    if (setKeyPool.empty()) {\n         return GetTime();\n+    }\n \n     CKeyPool keypool;\n-    CWalletDB walletdb(*dbw);\n-\n-    if (IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT))\n-    {\n-        // if HD & HD Chain Split is enabled, response max(oldest-internal-key, oldest-external-key)\n-        int64_t now = GetTime();\n-        int64_t oldest_external = now, oldest_internal = now;\n-\n-        for(const int64_t& id : setKeyPool)\n-        {\n-            if (!walletdb.ReadPool(id, keypool)) {\n-                throw std::runtime_error(std::string(__func__) + \": read failed\");\n-            }\n-            if (keypool.fInternal && keypool.nTime < oldest_internal) {\n-                oldest_internal = keypool.nTime;\n-            }\n-            else if (!keypool.fInternal && keypool.nTime < oldest_external) {\n-                oldest_external = keypool.nTime;\n-            }\n-            if (oldest_internal != now && oldest_external != now) {\n-                break;\n-            }\n-        }\n-        return std::max(oldest_internal, oldest_external);\n-    }\n-    // load oldest key from keypool, get time and return\n     int64_t nIndex = *(setKeyPool.begin());\n     if (!walletdb.ReadPool(nIndex, keypool))\n         throw std::runtime_error(std::string(__func__) + \": read oldest key in keypool failed\");\n     assert(keypool.vchPubKey.IsValid());\n     return keypool.nTime;\n }\n \n+int64_t CWallet::GetOldestKeyPoolTime()\n+{\n+    LOCK(cs_wallet);\n+\n+    CWalletDB walletdb(*dbw);\n+\n+    // load oldest key from keypool, get time and return\n+    int64_t oldestKey = GetOldestKeyTimeInPool(setExternalKeyPool, walletdb);\n+    if (IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT)) {\n+        oldestKey = std::max(GetOldestKeyTimeInPool(setInternalKeyPool, walletdb), oldestKey);\n+    }\n+\n+    return oldestKey;\n+}\n+\n std::map<CTxDestination, CAmount> CWallet::GetAddressBalances()\n {\n     std::map<CTxDestination, CAmount> balances;\n@@ -3432,6 +3417,7 @@ bool CReserveKey::GetReservedKey(CPubKey& pubkey, bool internal)\n         else {\n             return false;\n         }\n+        fInternal = keypool.fInternal;\n     }\n     assert(vchPubKey.IsValid());\n     pubkey = vchPubKey;\n@@ -3449,31 +3435,40 @@ void CReserveKey::KeepKey()\n void CReserveKey::ReturnKey()\n {\n     if (nIndex != -1)\n-        pwallet->ReturnKey(nIndex);\n+        pwallet->ReturnKey(nIndex, fInternal);\n     nIndex = -1;\n     vchPubKey = CPubKey();\n }\n \n-void CWallet::GetAllReserveKeys(std::set<CKeyID>& setAddress) const\n-{\n-    setAddress.clear();\n-\n-    CWalletDB walletdb(*dbw);\n-\n-    LOCK2(cs_main, cs_wallet);\n+static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n     for (const int64_t& id : setKeyPool)\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n             throw std::runtime_error(std::string(__func__) + \": read failed\");\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();\n-        if (!HaveKey(keyID))\n-            throw std::runtime_error(std::string(__func__) + \": unknown key in key pool\");\n         setAddress.insert(keyID);\n     }\n }\n \n+void CWallet::GetAllReserveKeys(std::set<CKeyID>& setAddress) const\n+{\n+    setAddress.clear();\n+\n+    CWalletDB walletdb(*dbw);\n+\n+    LOCK2(cs_main, cs_wallet);\n+    LoadReserveKeysToSet(setAddress, setInternalKeyPool, walletdb);\n+    LoadReserveKeysToSet(setAddress, setExternalKeyPool, walletdb);\n+\n+    for (const CKeyID& keyID : setAddress) {\n+        if (!HaveKey(keyID)) {\n+            throw std::runtime_error(std::string(__func__) + \": unknown key in key pool\");\n+        }\n+    }\n+}\n+\n void CWallet::GetScriptForMining(std::shared_ptr<CReserveScript> &script)\n {\n     std::shared_ptr<CReserveKey> rKey = std::make_shared<CReserveKey>(this);"
      },
      {
        "sha": "c1e05e8611547d7dee0511352c3b424fe1379a5f",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 13,
        "deletions": 6,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a3fc35629a2820cecd15898f112fa730e5adcec/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a3fc35629a2820cecd15898f112fa730e5adcec/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=4a3fc35629a2820cecd15898f112fa730e5adcec",
        "patch": "@@ -696,7 +696,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     /* HD derive new child key (on internal or external chain) */\n     void DeriveNewChildKey(CKeyMetadata& metadata, CKey& secret, bool internal = false);\n \n-    std::set<int64_t> setKeyPool;\n+    std::set<int64_t> setInternalKeyPool;\n+    std::set<int64_t> setExternalKeyPool;\n \n     int64_t nTimeFirstKey;\n \n@@ -741,7 +742,11 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     void LoadKeyPool(int nIndex, const CKeyPool &keypool)\n     {\n-        setKeyPool.insert(nIndex);\n+        if (keypool.fInternal) {\n+            setInternalKeyPool.insert(nIndex);\n+        } else {\n+            setExternalKeyPool.insert(nIndex);\n+        }\n \n         // If no metadata exists yet, create a default with the pool key's\n         // creation time. Note that this may be overwritten by actually\n@@ -970,9 +975,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool NewKeyPool();\n     size_t KeypoolCountExternalKeys();\n     bool TopUpKeyPool(unsigned int kpSize = 0);\n-    void ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool internal);\n+    void ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n     void KeepKey(int64_t nIndex);\n-    void ReturnKey(int64_t nIndex);\n+    void ReturnKey(int64_t nIndex, bool fInternal);\n     bool GetKeyFromPool(CPubKey &key, bool internal = false);\n     int64_t GetOldestKeyPoolTime();\n     void GetAllReserveKeys(std::set<CKeyID>& setAddress) const;\n@@ -1026,8 +1031,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     \n     unsigned int GetKeyPoolSize()\n     {\n-        AssertLockHeld(cs_wallet); // setKeyPool\n-        return setKeyPool.size();\n+        AssertLockHeld(cs_wallet); // set{Ex,In}ternalKeyPool\n+        return setInternalKeyPool.size() + setExternalKeyPool.size();\n     }\n \n     bool SetDefaultKey(const CPubKey &vchPubKey);\n@@ -1131,11 +1136,13 @@ class CReserveKey : public CReserveScript\n     CWallet* pwallet;\n     int64_t nIndex;\n     CPubKey vchPubKey;\n+    bool fInternal;\n public:\n     CReserveKey(CWallet* pwalletIn)\n     {\n         nIndex = -1;\n         pwallet = pwalletIn;\n+        fInternal = false;\n     }\n \n     CReserveKey() = default;"
      }
    ]
  },
  {
    "sha": "28301b9780b05b1d80767835987da1317ce4200a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODMwMWI5NzgwYjA1YjFkODA3Njc4MzU5ODdkYTEzMTdjZTQyMDBh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-19T17:11:16Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-15T01:25:24Z"
      },
      "message": "Meet code style on lines changed in the previous commit",
      "tree": {
        "sha": "729657f7c3e4e329281b15fccb2b6cabf42ba212",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/729657f7c3e4e329281b15fccb2b6cabf42ba212"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28301b9780b05b1d80767835987da1317ce4200a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28301b9780b05b1d80767835987da1317ce4200a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28301b9780b05b1d80767835987da1317ce4200a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28301b9780b05b1d80767835987da1317ce4200a/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a3fc35629a2820cecd15898f112fa730e5adcec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a3fc35629a2820cecd15898f112fa730e5adcec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a3fc35629a2820cecd15898f112fa730e5adcec"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 17,
      "deletions": 7
    },
    "files": [
      {
        "sha": "61d975246037b068513f458c6169bc46ca45dd19",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 7,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28301b9780b05b1d80767835987da1317ce4200a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28301b9780b05b1d80767835987da1317ce4200a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=28301b9780b05b1d80767835987da1317ce4200a",
        "patch": "@@ -3081,11 +3081,15 @@ bool CWallet::NewKeyPool()\n     {\n         LOCK(cs_wallet);\n         CWalletDB walletdb(*dbw);\n-        for (int64_t nIndex : setInternalKeyPool)\n+\n+        for (int64_t nIndex : setInternalKeyPool) {\n             walletdb.ErasePool(nIndex);\n+        }\n         setInternalKeyPool.clear();\n-        BOOST_FOREACH(int64_t nIndex, setExternalKeyPool)\n+\n+        for (int64_t nIndex : setExternalKeyPool) {\n             walletdb.ErasePool(nIndex);\n+        }\n         setExternalKeyPool.clear();\n \n         if (!TopUpKeyPool()) {\n@@ -3132,12 +3136,16 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n         for (int64_t i = missingInternal + missingExternal; i--;)\n         {\n             int64_t nEnd = 1;\n-            if (i < missingInternal)\n+            if (i < missingInternal) {\n                 internal = true;\n-            if (!setInternalKeyPool.empty())\n+            }\n+\n+            if (!setInternalKeyPool.empty()) {\n                 nEnd = *(--setInternalKeyPool.end()) + 1;\n-            if (!setExternalKeyPool.empty())\n+            }\n+            if (!setExternalKeyPool.empty()) {\n                 nEnd = std::max(nEnd, *(--setExternalKeyPool.end()) + 1);\n+            }\n \n             if (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey(internal), internal)))\n                 throw std::runtime_error(std::string(__func__) + \": writing generated key failed\");\n@@ -3238,8 +3246,9 @@ static int64_t GetOldestKeyTimeInPool(const std::set<int64_t>& setKeyPool, CWall\n \n     CKeyPool keypool;\n     int64_t nIndex = *(setKeyPool.begin());\n-    if (!walletdb.ReadPool(nIndex, keypool))\n+    if (!walletdb.ReadPool(nIndex, keypool)) {\n         throw std::runtime_error(std::string(__func__) + \": read oldest key in keypool failed\");\n+    }\n     assert(keypool.vchPubKey.IsValid());\n     return keypool.nTime;\n }\n@@ -3434,8 +3443,9 @@ void CReserveKey::KeepKey()\n \n void CReserveKey::ReturnKey()\n {\n-    if (nIndex != -1)\n+    if (nIndex != -1) {\n         pwallet->ReturnKey(nIndex, fInternal);\n+    }\n     nIndex = -1;\n     vchPubKey = CPubKey();\n }"
      }
    ]
  },
  {
    "sha": "d40a72ccbb71d61b43cbf4d222ca2ab5d3ca7510",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDBhNzJjY2JiNzFkNjFiNDNjYmY0ZDIyMmNhMmFiNWQzY2E3NTEw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-11T16:02:42Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-15T01:25:24Z"
      },
      "message": "Clarify *(--.end()) iterator semantics in CWallet::TopUpKeyPool",
      "tree": {
        "sha": "c82233f12fba4065e08dcdd2753e0adcb79da6e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c82233f12fba4065e08dcdd2753e0adcb79da6e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d40a72ccbb71d61b43cbf4d222ca2ab5d3ca7510",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d40a72ccbb71d61b43cbf4d222ca2ab5d3ca7510",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d40a72ccbb71d61b43cbf4d222ca2ab5d3ca7510",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d40a72ccbb71d61b43cbf4d222ca2ab5d3ca7510/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "28301b9780b05b1d80767835987da1317ce4200a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28301b9780b05b1d80767835987da1317ce4200a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28301b9780b05b1d80767835987da1317ce4200a"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "63d0a3c0c40a9df42112b7eddcc6627d467b79f8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d40a72ccbb71d61b43cbf4d222ca2ab5d3ca7510/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d40a72ccbb71d61b43cbf4d222ca2ab5d3ca7510/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d40a72ccbb71d61b43cbf4d222ca2ab5d3ca7510",
        "patch": "@@ -3141,10 +3141,10 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n             }\n \n             if (!setInternalKeyPool.empty()) {\n-                nEnd = *(--setInternalKeyPool.end()) + 1;\n+                nEnd = *(setInternalKeyPool.rbegin()) + 1;\n             }\n             if (!setExternalKeyPool.empty()) {\n-                nEnd = std::max(nEnd, *(--setExternalKeyPool.end()) + 1);\n+                nEnd = std::max(nEnd, *(setExternalKeyPool.rbegin()) + 1);\n             }\n \n             if (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey(internal), internal)))"
      }
    ]
  },
  {
    "sha": "1c011ff430106b5f727f2eaa0f7f4883cd2122a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzAxMWZmNDMwMTA2YjVmNzI3ZjJlYWEwZjdmNDg4M2NkMjEyMmEz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-15T02:01:17Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-15T02:07:42Z"
      },
      "message": "Merge #10816: Properly forbid -salvagewallet and -zapwallettxes for multi wallet.\n\ndd97a529a Properly forbid -salvagewallet and -zapwallettxes for multi wallet. (Alex Morcos)\n\nTree-SHA512: dcde8f854ae957b4d3af4bcf1b811e0b6e9b93602764f86499e46a28d304cd4ee93ba058c03f6ca74ccb60e1310c83e53b698c64d93e5503115377655b80d44d",
      "tree": {
        "sha": "84b012b1b90aea4c7f5f61655ea40bb9c337e4a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/84b012b1b90aea4c7f5f61655ea40bb9c337e4a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c011ff430106b5f727f2eaa0f7f4883cd2122a3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZaXjuAAoJEKY26XYx92fg9+sQAI2SJ27EZf6xqmDP9KkAwIBd\nfeHTCePHw8U1/wisbma//V35tANi1g7wLuxh8bV93HPMQgX52cLMYn8X3EYs+diM\nXYg9UTC+TwlwxKQqXI5pL9LwcfqypNzP2r5wFgSj5n0wpVvFm92aOBuCerhkbmXk\nwOTgKMZC8uHw+mK/yBFzcFoztUVFbpCQBIICzUN5hB4BKFQtOyNbAIqLwKHQrBki\nlrWCrP4JVwaVp5koA5G+T7yloqw2rccbRPtIEJ4nqUdSpTBnbIxszzG1KznxA2Yo\nueDZWa/YAyQvOrosrywKtJxf2TpxDnm2Gv9Lz19obAdVkHJ+0EjvcmHoO/9DPtV7\n7Fso8tHEWvAw4QvoI1tHlf52gFIwknW9SAfzmBB/hZPkT3jnpQFxn/j7gRfD6fCE\ncUhutsOdM7EsSDMnIy0AdzXWZkno8aSERL0kL3denUD2Vi4U6+uRHIDL9JVkpFn3\n/Rogb4DhRSsiRnknYnHxFuK1wxTePenfNyMhZGWvxS0Vb40bpDWqwBU7qmpiQR2X\nYi/OJGVf9KZ8Y0dTg5MAHnQKxKVVXodDgbbW7BIrQ46Z8isGkqfzvGqEoEWIOZnU\n1hvK9jOMRnF1SJAMvYzMqcyWw8ckBIImQd8uTYiVinz91PnmYe81fKY4mM3LuPum\nQMCF0Q/Lb3odYYr3TAQs\n=+FSq\n-----END PGP SIGNATURE-----",
        "payload": "tree 84b012b1b90aea4c7f5f61655ea40bb9c337e4a2\nparent ec8a50b8d786a8cd1192e692ab19b46979add582\nparent dd97a529ad23169f346aa042a808adf702ce8450\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1500084077 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1500084462 -0700\n\nMerge #10816: Properly forbid -salvagewallet and -zapwallettxes for multi wallet.\n\ndd97a529a Properly forbid -salvagewallet and -zapwallettxes for multi wallet. (Alex Morcos)\n\nTree-SHA512: dcde8f854ae957b4d3af4bcf1b811e0b6e9b93602764f86499e46a28d304cd4ee93ba058c03f6ca74ccb60e1310c83e53b698c64d93e5503115377655b80d44d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c011ff430106b5f727f2eaa0f7f4883cd2122a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1c011ff430106b5f727f2eaa0f7f4883cd2122a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c011ff430106b5f727f2eaa0f7f4883cd2122a3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec8a50b8d786a8cd1192e692ab19b46979add582",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec8a50b8d786a8cd1192e692ab19b46979add582",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec8a50b8d786a8cd1192e692ab19b46979add582"
      },
      {
        "sha": "dd97a529ad23169f346aa042a808adf702ce8450",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd97a529ad23169f346aa042a808adf702ce8450",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd97a529ad23169f346aa042a808adf702ce8450"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 8,
      "deletions": 4
    },
    "files": [
      {
        "sha": "07b7f58a6419bff246e29b9c010964f16934d00a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c011ff430106b5f727f2eaa0f7f4883cd2122a3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c011ff430106b5f727f2eaa0f7f4883cd2122a3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1c011ff430106b5f727f2eaa0f7f4883cd2122a3",
        "patch": "@@ -4033,20 +4033,24 @@ bool CWallet::ParameterInteraction()\n         LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -walletbroadcast=0\\n\", __func__);\n     }\n \n-    if (GetBoolArg(\"-salvagewallet\", false) && SoftSetBoolArg(\"-rescan\", true)) {\n+    if (GetBoolArg(\"-salvagewallet\", false)) {\n         if (is_multiwallet) {\n             return InitError(strprintf(\"%s is only allowed with a single wallet file\", \"-salvagewallet\"));\n         }\n         // Rewrite just private keys: rescan to find transactions\n-        LogPrintf(\"%s: parameter interaction: -salvagewallet=1 -> setting -rescan=1\\n\", __func__);\n+        if (SoftSetBoolArg(\"-rescan\", true)) {\n+            LogPrintf(\"%s: parameter interaction: -salvagewallet=1 -> setting -rescan=1\\n\", __func__);\n+        }\n     }\n \n     // -zapwallettx implies a rescan\n-    if (GetBoolArg(\"-zapwallettxes\", false) && SoftSetBoolArg(\"-rescan\", true)) {\n+    if (GetBoolArg(\"-zapwallettxes\", false)) {\n         if (is_multiwallet) {\n             return InitError(strprintf(\"%s is only allowed with a single wallet file\", \"-zapwallettxes\"));\n         }\n-        LogPrintf(\"%s: parameter interaction: -zapwallettxes=<mode> -> setting -rescan=1\\n\", __func__);\n+        if (SoftSetBoolArg(\"-rescan\", true)) {\n+            LogPrintf(\"%s: parameter interaction: -zapwallettxes=<mode> -> setting -rescan=1\\n\", __func__);\n+        }\n     }\n \n     if (is_multiwallet) {"
      }
    ]
  },
  {
    "sha": "8fdd23a224ba236874ef662c4ca311b002dbcab3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZmRkMjNhMjI0YmEyMzY4NzRlZjY2MmM0Y2EzMTFiMDAyZGJjYWIz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-15T02:11:27Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-15T02:24:09Z"
      },
      "message": "Merge #10769: [Qt] replace fee slider with a Dropdown, extend conf. targets\n\n2aef1f182 [Qt] migrate old fee slider value to new dropbown Always round up (conservative) (Jonas Schnelli)\nbc1be90e3 [Qt] replace fee slider with a Dropdown, extend conf. targets (Jonas Schnelli)\n\nTree-SHA512: 53796cf0b434dd3db5d4680dbeb6231a7df8f15d88187178fd4db8917cd7fc60091ce2c1589fd93668fc94bb13f989aba5b7ef3792fa95ee1f9f21a15709e2d3",
      "tree": {
        "sha": "a79eb657494a3b582245bbd0253a7d4020196047",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a79eb657494a3b582245bbd0253a7d4020196047"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8fdd23a224ba236874ef662c4ca311b002dbcab3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZaXzJAAoJEKY26XYx92fgOSYQAIWrUAAG42K/R/OtqW8Vr+1w\n7ZLDVGzx6Nu72j6/KFxzlqWdTFpRHXKnBuOo8qHTq9i9f9/O4+jrvfL1Dx8Aby9F\nLhi1SNicrsgjsnOxyzIDGqJ2skDhLNzSKWtFDnpvcpDFjHmvvfgEmrAcF/DoezET\nRerO1YR+9ZuLw69tf0Uml6WGe02Kk0ABaMw7zelHRdS/nSAurorzMtIDc3cAmRRo\nVcyglep7Bb8yCZ3X3F48JA1cJLuvml2Dft18lakA1CH+6tsaoUY8HlHTJHq2b2vQ\nRq9R70c3BuqUniO5WQ9EVzk3JnTM0b7K9VAblxJTyfOmVX9/4jphqQfyCW9T0amB\njuyI72U68J6kO02+Lmu9igZFw9GDpNYwac7AemEwyNvH7ZO6qRNALwjja9aDEqnW\nAYAt3m6e+hkuzPzZzMDZBYMZ7C5KGJ5hkM79YyBJ5PmYG2elGCyQq9d5HCeNqFea\nsNbMZrxwlg789VcQbZzzUIKiiwXdhrC1LF03X1/FU0ZNDzM41SH9sOjORA4sZCZa\nFrXQS3m4jZgeH7rSl1bzWkIZPLVBwjkuKjK/qI6+6VKmmwgcGQhH27dPPVPsUlk6\ncbogsQFH7gLIvhlvrH31bMa2ITaWEB9OYZFEs1YE/gb1/ThzSmDCKah/SY4Vtfzb\nGpEA4nr9ualf4ttJAeP2\n=BC7m\n-----END PGP SIGNATURE-----",
        "payload": "tree a79eb657494a3b582245bbd0253a7d4020196047\nparent 1c011ff430106b5f727f2eaa0f7f4883cd2122a3\nparent 2aef1f18296fcd3aa3c91afdf152add8a8e80bd4\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1500084687 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1500085449 -0700\n\nMerge #10769: [Qt] replace fee slider with a Dropdown, extend conf. targets\n\n2aef1f182 [Qt] migrate old fee slider value to new dropbown Always round up (conservative) (Jonas Schnelli)\nbc1be90e3 [Qt] replace fee slider with a Dropdown, extend conf. targets (Jonas Schnelli)\n\nTree-SHA512: 53796cf0b434dd3db5d4680dbeb6231a7df8f15d88187178fd4db8917cd7fc60091ce2c1589fd93668fc94bb13f989aba5b7ef3792fa95ee1f9f21a15709e2d3\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fdd23a224ba236874ef662c4ca311b002dbcab3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8fdd23a224ba236874ef662c4ca311b002dbcab3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fdd23a224ba236874ef662c4ca311b002dbcab3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c011ff430106b5f727f2eaa0f7f4883cd2122a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c011ff430106b5f727f2eaa0f7f4883cd2122a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c011ff430106b5f727f2eaa0f7f4883cd2122a3"
      },
      {
        "sha": "2aef1f18296fcd3aa3c91afdf152add8a8e80bd4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aef1f18296fcd3aa3c91afdf152add8a8e80bd4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2aef1f18296fcd3aa3c91afdf152add8a8e80bd4"
      }
    ],
    "stats": {
      "total": 122,
      "additions": 44,
      "deletions": 78
    },
    "files": [
      {
        "sha": "e82a3c1533e3353546b0d21b669847d859484797",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 4,
        "deletions": 60,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fdd23a224ba236874ef662c4ca311b002dbcab3/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fdd23a224ba236874ef662c4ca311b002dbcab3/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=8fdd23a224ba236874ef662c4ca311b002dbcab3",
        "patch": "@@ -1068,44 +1068,15 @@\n                     <number>30</number>\n                    </property>\n                    <item>\n-                    <widget class=\"QSlider\" name=\"sliderSmartFee\">\n-                     <property name=\"minimum\">\n+                    <layout class=\"QHBoxLayout\" name=\"horizontalLayoutConfTarget\">\n+                     <property name=\"bottomMargin\">\n                       <number>0</number>\n                      </property>\n-                     <property name=\"maximum\">\n-                      <number>23</number>\n-                     </property>\n-                     <property name=\"pageStep\">\n-                      <number>1</number>\n-                     </property>\n-                     <property name=\"value\">\n-                      <number>0</number>\n-                     </property>\n-                     <property name=\"orientation\">\n-                      <enum>Qt::Horizontal</enum>\n-                     </property>\n-                     <property name=\"invertedAppearance\">\n-                      <bool>false</bool>\n-                     </property>\n-                     <property name=\"invertedControls\">\n-                      <bool>false</bool>\n-                     </property>\n-                     <property name=\"tickPosition\">\n-                      <enum>QSlider::NoTicks</enum>\n-                     </property>\n-                    </widget>\n-                   </item>\n-                   <item>\n-                    <layout class=\"QHBoxLayout\" name=\"horizontalLayoutFee10\">\n                      <item>\n-                      <widget class=\"QLabel\" name=\"labelSmartFeeNormal\">\n-                       <property name=\"text\">\n-                        <string>normal</string>\n-                       </property>\n-                      </widget>\n+                      <widget class=\"QComboBox\" name=\"confTargetSelector\"/>\n                      </item>\n                      <item>\n-                      <spacer name=\"horizontalSpacer_7\">\n+                      <spacer name=\"horizontalSpacerConfTarget\">\n                        <property name=\"orientation\">\n                         <enum>Qt::Horizontal</enum>\n                        </property>\n@@ -1117,33 +1088,6 @@\n                        </property>\n                       </spacer>\n                      </item>\n-                     <item>\n-                      <widget class=\"QLabel\" name=\"confirmationTargetLabel\">\n-                       <property name=\"text\">\n-                        <string notr=\"true\">(count)</string>\n-                       </property>\n-                      </widget>\n-                     </item>\n-                     <item>\n-                      <spacer name=\"horizontalSpacer_3\">\n-                       <property name=\"orientation\">\n-                        <enum>Qt::Horizontal</enum>\n-                       </property>\n-                       <property name=\"sizeHint\" stdset=\"0\">\n-                        <size>\n-                         <width>40</width>\n-                         <height>20</height>\n-                        </size>\n-                       </property>\n-                      </spacer>\n-                     </item>\n-                     <item>\n-                      <widget class=\"QLabel\" name=\"labelSmartFeeFast\">\n-                       <property name=\"text\">\n-                        <string>fast</string>\n-                       </property>\n-                      </widget>\n-                     </item>\n                     </layout>\n                    </item>\n                   </layout>"
      },
      {
        "sha": "86401d3bb4b5142793a1de6f2930db3668b2c2a1",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 18,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fdd23a224ba236874ef662c4ca311b002dbcab3/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fdd23a224ba236874ef662c4ca311b002dbcab3/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=8fdd23a224ba236874ef662c4ca311b002dbcab3",
        "patch": "@@ -31,6 +31,25 @@\n #include <QTextDocument>\n #include <QTimer>\n \n+static const std::array<int, 9> confTargets = { {2, 4, 6, 12, 24, 48, 144, 504, 1008} };\n+int getConfTargetForIndex(int index) {\n+    if (index+1 > static_cast<int>(confTargets.size())) {\n+        return confTargets.back();\n+    }\n+    if (index < 0) {\n+        return confTargets[0];\n+    }\n+    return confTargets[index];\n+}\n+int getIndexForConfTarget(int target) {\n+    for (unsigned int i = 0; i < confTargets.size(); i++) {\n+        if (confTargets[i] >= target) {\n+            return i;\n+        }\n+    }\n+    return confTargets.size() - 1;\n+}\n+\n SendCoinsDialog::SendCoinsDialog(const PlatformStyle *_platformStyle, QWidget *parent) :\n     QDialog(parent),\n     ui(new Ui::SendCoinsDialog),\n@@ -152,9 +171,12 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n         coinControlUpdateLabels();\n \n         // fee section\n-        connect(ui->sliderSmartFee, SIGNAL(valueChanged(int)), this, SLOT(updateSmartFeeLabel()));\n-        connect(ui->sliderSmartFee, SIGNAL(valueChanged(int)), this, SLOT(updateGlobalFeeVariables()));\n-        connect(ui->sliderSmartFee, SIGNAL(valueChanged(int)), this, SLOT(coinControlUpdateLabels()));\n+        for (const int &n : confTargets) {\n+            ui->confTargetSelector->addItem(tr(\"%1 (%2 blocks)\").arg(GUIUtil::formatNiceTimeOffset(n*Params().GetConsensus().nPowTargetSpacing)).arg(n));\n+        }\n+        connect(ui->confTargetSelector, SIGNAL(currentIndexChanged(int)), this, SLOT(updateSmartFeeLabel()));\n+        connect(ui->confTargetSelector, SIGNAL(currentIndexChanged(int)), this, SLOT(updateGlobalFeeVariables()));\n+        connect(ui->confTargetSelector, SIGNAL(currentIndexChanged(int)), this, SLOT(coinControlUpdateLabels()));\n         connect(ui->groupFee, SIGNAL(buttonClicked(int)), this, SLOT(updateFeeSectionControls()));\n         connect(ui->groupFee, SIGNAL(buttonClicked(int)), this, SLOT(updateGlobalFeeVariables()));\n         connect(ui->groupFee, SIGNAL(buttonClicked(int)), this, SLOT(coinControlUpdateLabels()));\n@@ -179,10 +201,17 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n \n         // set the smartfee-sliders default value (wallets default conf.target or last stored value)\n         QSettings settings;\n-        if (settings.value(\"nSmartFeeSliderPosition\").toInt() == 0)\n-            ui->sliderSmartFee->setValue(ui->sliderSmartFee->maximum() - model->getDefaultConfirmTarget() + 2);\n+        if (settings.value(\"nSmartFeeSliderPosition\").toInt() != 0) {\n+            // migrate nSmartFeeSliderPosition to nConfTarget\n+            // nConfTarget is available since 0.15 (replaced nSmartFeeSliderPosition)\n+            int nConfirmTarget = 25 - settings.value(\"nSmartFeeSliderPosition\").toInt(); // 25 == old slider range\n+            settings.setValue(\"nConfTarget\", nConfirmTarget);\n+            settings.remove(\"nSmartFeeSliderPosition\");\n+        }\n+        if (settings.value(\"nConfTarget\").toInt() == 0)\n+            ui->confTargetSelector->setCurrentIndex(getIndexForConfTarget(model->getDefaultConfirmTarget()));\n         else\n-            ui->sliderSmartFee->setValue(settings.value(\"nSmartFeeSliderPosition\").toInt());\n+            ui->confTargetSelector->setCurrentIndex(getIndexForConfTarget(settings.value(\"nConfTarget\").toInt()));\n     }\n }\n \n@@ -192,7 +221,7 @@ SendCoinsDialog::~SendCoinsDialog()\n     settings.setValue(\"fFeeSectionMinimized\", fFeeMinimized);\n     settings.setValue(\"nFeeRadio\", ui->groupFee->checkedId());\n     settings.setValue(\"nCustomFeeRadio\", ui->groupCustomFee->checkedId());\n-    settings.setValue(\"nSmartFeeSliderPosition\", ui->sliderSmartFee->value());\n+    settings.setValue(\"nConfTarget\", getConfTargetForIndex(ui->confTargetSelector->currentIndex()));\n     settings.setValue(\"nTransactionFee\", (qint64)ui->customFee->value());\n     settings.setValue(\"fPayOnlyMinFee\", ui->checkBoxMinimumFee->isChecked());\n \n@@ -246,7 +275,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n     if (model->getOptionsModel()->getCoinControlFeatures())\n         ctrl = *CoinControlDialog::coinControl;\n     if (ui->radioSmartFee->isChecked())\n-        ctrl.nConfirmTarget = ui->sliderSmartFee->maximum() - ui->sliderSmartFee->value() + 2;\n+        ctrl.nConfirmTarget = getConfTargetForIndex(ui->confTargetSelector->currentIndex());\n     else\n         ctrl.nConfirmTarget = 0;\n \n@@ -596,14 +625,11 @@ void SendCoinsDialog::setMinimumFee()\n \n void SendCoinsDialog::updateFeeSectionControls()\n {\n-    ui->sliderSmartFee          ->setEnabled(ui->radioSmartFee->isChecked());\n+    ui->confTargetSelector      ->setEnabled(ui->radioSmartFee->isChecked());\n     ui->labelSmartFee           ->setEnabled(ui->radioSmartFee->isChecked());\n     ui->labelSmartFee2          ->setEnabled(ui->radioSmartFee->isChecked());\n     ui->labelSmartFee3          ->setEnabled(ui->radioSmartFee->isChecked());\n     ui->labelFeeEstimation      ->setEnabled(ui->radioSmartFee->isChecked());\n-    ui->labelSmartFeeNormal     ->setEnabled(ui->radioSmartFee->isChecked());\n-    ui->labelSmartFeeFast       ->setEnabled(ui->radioSmartFee->isChecked());\n-    ui->confirmationTargetLabel ->setEnabled(ui->radioSmartFee->isChecked());\n     ui->checkBoxMinimumFee      ->setEnabled(ui->radioCustomFee->isChecked());\n     ui->labelMinFeeWarning      ->setEnabled(ui->radioCustomFee->isChecked());\n     ui->radioCustomPerKilobyte  ->setEnabled(ui->radioCustomFee->isChecked() && !ui->checkBoxMinimumFee->isChecked());\n@@ -614,11 +640,7 @@ void SendCoinsDialog::updateGlobalFeeVariables()\n {\n     if (ui->radioSmartFee->isChecked())\n     {\n-        int nConfirmTarget = ui->sliderSmartFee->maximum() - ui->sliderSmartFee->value() + 2;\n         payTxFee = CFeeRate(0);\n-\n-        // show the estimated required time for confirmation\n-        ui->confirmationTargetLabel->setText(GUIUtil::formatDurationStr(nConfirmTarget * Params().GetConsensus().nPowTargetSpacing) + \" / \" + tr(\"%n block(s)\", \"\", nConfirmTarget));\n     }\n     else\n     {\n@@ -652,7 +674,7 @@ void SendCoinsDialog::updateSmartFeeLabel()\n     if(!model || !model->getOptionsModel())\n         return;\n \n-    int nBlocksToConfirm = ui->sliderSmartFee->maximum() - ui->sliderSmartFee->value() + 2;\n+    int nBlocksToConfirm = getConfTargetForIndex(ui->confTargetSelector->currentIndex());\n     FeeCalculation feeCalc;\n     bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET, ui->optInRBF->isChecked());\n     CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocksToConfirm, &feeCalc, ::mempool, conservative_estimate);\n@@ -826,7 +848,7 @@ void SendCoinsDialog::coinControlUpdateLabels()\n     CoinControlDialog::payAmounts.clear();\n     CoinControlDialog::fSubtractFeeFromAmount = false;\n     if (ui->radioSmartFee->isChecked()) {\n-        CoinControlDialog::coinControl->nConfirmTarget = ui->sliderSmartFee->maximum() - ui->sliderSmartFee->value() + 2;\n+        CoinControlDialog::coinControl->nConfirmTarget = getConfTargetForIndex(ui->confTargetSelector->currentIndex());\n     } else {\n         CoinControlDialog::coinControl->nConfirmTarget = model->getDefaultConfirmTarget();\n     }"
      }
    ]
  },
  {
    "sha": "ecd81dfa3cae4cc1ae3638becfbefc76829ada04",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplY2Q4MWRmYTNjYWU0Y2MxYWUzNjM4YmVjZmJlZmM3NjgyOWFkYTA0",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-28T20:41:55Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-15T03:07:18Z"
      },
      "message": "Make CoinControl a required argument to CreateTransaction",
      "tree": {
        "sha": "a33077879778ef5c84ab332b515d8a440269386e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a33077879778ef5c84ab332b515d8a440269386e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ecd81dfa3cae4cc1ae3638becfbefc76829ada04",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecd81dfa3cae4cc1ae3638becfbefc76829ada04",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ecd81dfa3cae4cc1ae3638becfbefc76829ada04",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecd81dfa3cae4cc1ae3638becfbefc76829ada04/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8fdd23a224ba236874ef662c4ca311b002dbcab3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fdd23a224ba236874ef662c4ca311b002dbcab3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8fdd23a224ba236874ef662c4ca311b002dbcab3"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 27,
      "deletions": 28
    },
    "files": [
      {
        "sha": "1a07d466bfe9e24ed10e684e28b2a9a1b358bd74",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecd81dfa3cae4cc1ae3638becfbefc76829ada04/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecd81dfa3cae4cc1ae3638becfbefc76829ada04/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=ecd81dfa3cae4cc1ae3638becfbefc76829ada04",
        "patch": "@@ -281,7 +281,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n \n     ctrl.signalRbf = ui->optInRBF->isChecked();\n \n-    prepareStatus = model->prepareTransaction(currentTransaction, &ctrl);\n+    prepareStatus = model->prepareTransaction(currentTransaction, ctrl);\n \n     // process prepareStatus and on error generate message shown to user\n     processSendCoinsReturn(prepareStatus,"
      },
      {
        "sha": "3f90860cc1f0524d51e40b03d01e3ca9195c633f",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecd81dfa3cae4cc1ae3638becfbefc76829ada04/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecd81dfa3cae4cc1ae3638becfbefc76829ada04/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=ecd81dfa3cae4cc1ae3638becfbefc76829ada04",
        "patch": "@@ -191,7 +191,7 @@ bool WalletModel::validateAddress(const QString &address)\n     return addressParsed.IsValid();\n }\n \n-WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransaction &transaction, const CCoinControl *coinControl)\n+WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransaction &transaction, const CCoinControl& coinControl)\n {\n     CAmount total = 0;\n     bool fSubtractFeeFromAmount = false;\n@@ -258,7 +258,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n         return DuplicateAddress;\n     }\n \n-    CAmount nBalance = getBalance(coinControl);\n+    CAmount nBalance = getBalance(&coinControl);\n \n     if(total > nBalance)\n     {"
      },
      {
        "sha": "5258dc669939a2b310e9822def01f17e74c7b920",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecd81dfa3cae4cc1ae3638becfbefc76829ada04/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecd81dfa3cae4cc1ae3638becfbefc76829ada04/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=ecd81dfa3cae4cc1ae3638becfbefc76829ada04",
        "patch": "@@ -154,7 +154,7 @@ class WalletModel : public QObject\n     };\n \n     // prepare transaction for getting txfee before sending coins\n-    SendCoinsReturn prepareTransaction(WalletModelTransaction &transaction, const CCoinControl *coinControl = NULL);\n+    SendCoinsReturn prepareTransaction(WalletModelTransaction &transaction, const CCoinControl& coinControl);\n \n     // Send coins to a list of recipients\n     SendCoinsReturn sendCoins(WalletModelTransaction &transaction);"
      },
      {
        "sha": "1916908922099ab7e7a560564cf3e4bc4e8eaefe",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecd81dfa3cae4cc1ae3638becfbefc76829ada04/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecd81dfa3cae4cc1ae3638becfbefc76829ada04/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=ecd81dfa3cae4cc1ae3638becfbefc76829ada04",
        "patch": "@@ -356,7 +356,7 @@ UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n     return ret;\n }\n \n-static void SendMoney(CWallet * const pwallet, const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew, CCoinControl *coin_control = nullptr)\n+static void SendMoney(CWallet * const pwallet, const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew, const CCoinControl& coin_control)\n {\n     CAmount curBalance = pwallet->GetBalance();\n \n@@ -472,7 +472,7 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n \n     EnsureWalletIsUnlocked(pwallet);\n \n-    SendMoney(pwallet, address.Get(), nAmount, fSubtractFeeFromAmount, wtx, &coin_control);\n+    SendMoney(pwallet, address.Get(), nAmount, fSubtractFeeFromAmount, wtx, coin_control);\n \n     return wtx.GetHash().GetHex();\n }\n@@ -898,7 +898,8 @@ UniValue sendfrom(const JSONRPCRequest& request)\n     if (nAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n-    SendMoney(pwallet, address.Get(), nAmount, false, wtx);\n+    CCoinControl no_coin_control; // This is a deprecated API\n+    SendMoney(pwallet, address.Get(), nAmount, false, wtx, no_coin_control);\n \n     return wtx.GetHash().GetHex();\n }\n@@ -1033,7 +1034,7 @@ UniValue sendmany(const JSONRPCRequest& request)\n     CAmount nFeeRequired = 0;\n     int nChangePosRet = -1;\n     std::string strFailReason;\n-    bool fCreated = pwallet->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, nChangePosRet, strFailReason, &coin_control);\n+    bool fCreated = pwallet->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, nChangePosRet, strFailReason, coin_control);\n     if (!fCreated)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n     CValidationState state;"
      },
      {
        "sha": "8176a0017c9fe6824a6be1afa0f7b5f238f709b4",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecd81dfa3cae4cc1ae3638becfbefc76829ada04/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecd81dfa3cae4cc1ae3638becfbefc76829ada04/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=ecd81dfa3cae4cc1ae3638becfbefc76829ada04",
        "patch": "@@ -13,6 +13,7 @@\n #include \"rpc/server.h\"\n #include \"test/test_bitcoin.h\"\n #include \"validation.h\"\n+#include \"wallet/coincontrol.h\"\n #include \"wallet/test/wallet_test_fixture.h\"\n \n #include <boost/test/unit_test.hpp>\n@@ -617,7 +618,8 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         CAmount fee;\n         int changePos = -1;\n         std::string error;\n-        BOOST_CHECK(wallet->CreateTransaction({recipient}, wtx, reservekey, fee, changePos, error));\n+        CCoinControl dummy;\n+        BOOST_CHECK(wallet->CreateTransaction({recipient}, wtx, reservekey, fee, changePos, error, dummy));\n         CValidationState state;\n         BOOST_CHECK(wallet->CommitTransaction(wtx, reservekey, nullptr, state));\n         auto it = wallet->mapWallet.find(wtx.GetHash());"
      },
      {
        "sha": "f69ae5268c80c2f0f406a1d591e166d20025769d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 18,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecd81dfa3cae4cc1ae3638becfbefc76829ada04/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecd81dfa3cae4cc1ae3638becfbefc76829ada04/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ecd81dfa3cae4cc1ae3638becfbefc76829ada04",
        "patch": "@@ -2469,9 +2469,9 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n \n     CReserveKey reservekey(this);\n     CWalletTx wtx;\n-    if (!CreateTransaction(vecSend, wtx, reservekey, nFeeRet, nChangePosInOut, strFailReason, &coinControl, false))\n+    if (!CreateTransaction(vecSend, wtx, reservekey, nFeeRet, nChangePosInOut, strFailReason, coinControl, false)) {\n         return false;\n-\n+    }\n     if (nChangePosInOut != -1)\n         tx.vout.insert(tx.vout.begin() + nChangePosInOut, wtx.tx->vout[nChangePosInOut]);\n \n@@ -2502,7 +2502,7 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n }\n \n bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet,\n-                                int& nChangePosInOut, std::string& strFailReason, const CCoinControl* coinControl, bool sign)\n+                                int& nChangePosInOut, std::string& strFailReason, const CCoinControl& coin_control, bool sign)\n {\n     CAmount nValue = 0;\n     int nChangePosRequest = nChangePosInOut;\n@@ -2567,20 +2567,17 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n         LOCK2(cs_main, cs_wallet);\n         {\n             std::vector<COutput> vAvailableCoins;\n-            AvailableCoins(vAvailableCoins, true, coinControl);\n+            AvailableCoins(vAvailableCoins, true, &coin_control);\n \n             // Create change script that will be used if we need change\n             // TODO: pass in scriptChange instead of reservekey so\n             // change transaction isn't always pay-to-bitcoin-address\n             CScript scriptChange;\n \n             // coin control: send change to custom address\n-            if (coinControl && !boost::get<CNoDestination>(&coinControl->destChange))\n-                scriptChange = GetScriptForDestination(coinControl->destChange);\n-\n-            // no coin control: send change to newly generated address\n-            else\n-            {\n+            if (!boost::get<CNoDestination>(&coin_control.destChange)) {\n+                scriptChange = GetScriptForDestination(coin_control.destChange);\n+            } else { // no coin control: send change to newly generated address\n                 // Note: We use a new key here to keep it from being obvious which side is the change.\n                 //  The drawback is that by not reusing a previous key, the change may be lost if a\n                 //  backup is restored, if the backup doesn't have the new private key for the change.\n@@ -2654,7 +2651,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 if (pick_new_inputs) {\n                     nValueIn = 0;\n                     setCoins.clear();\n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coinControl))\n+                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, &coin_control))\n                     {\n                         strFailReason = _(\"Insufficient funds\");\n                         return false;\n@@ -2705,8 +2702,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 // to avoid conflicting with other possible uses of nSequence,\n                 // and in the spirit of \"smallest possible change from prior\n                 // behavior.\"\n-                bool rbf = coinControl ? coinControl->signalRbf : fWalletRbf;\n-                const uint32_t nSequence = rbf ? MAX_BIP125_RBF_SEQUENCE : (std::numeric_limits<unsigned int>::max() - 1);\n+                const uint32_t nSequence = coin_control.signalRbf ? MAX_BIP125_RBF_SEQUENCE : (std::numeric_limits<unsigned int>::max() - 1);\n                 for (const auto& coin : setCoins)\n                     txNew.vin.push_back(CTxIn(coin.outpoint,CScript(),\n                                               nSequence));\n@@ -2727,15 +2723,15 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n \n                 // Allow to override the default confirmation target over the CoinControl instance\n                 int currentConfirmationTarget = nTxConfirmTarget;\n-                if (coinControl && coinControl->nConfirmTarget > 0)\n-                    currentConfirmationTarget = coinControl->nConfirmTarget;\n+                if (coin_control.nConfirmTarget > 0)\n+                    currentConfirmationTarget = coin_control.nConfirmTarget;\n \n                 // Allow to override the default fee estimate mode over the CoinControl instance\n-                bool conservative_estimate = CalculateEstimateType(coinControl ? coinControl->m_fee_mode : FeeEstimateMode::UNSET, rbf);\n+                bool conservative_estimate = CalculateEstimateType(coin_control.m_fee_mode, coin_control.signalRbf);\n \n                 CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, ::mempool, ::feeEstimator, &feeCalc, false /* ignoreGlobalPayTxFee */, conservative_estimate);\n-                if (coinControl && coinControl->fOverrideFeeRate)\n-                    nFeeNeeded = coinControl->nFeeRate.GetFee(nBytes);\n+                if (coin_control.fOverrideFeeRate)\n+                    nFeeNeeded = coin_control.nFeeRate.GetFee(nBytes);\n \n                 // If we made it here and we aren't even able to meet the relay fee on the next pass, give up\n                 // because we must be at the maximum allowed fee."
      },
      {
        "sha": "d8717ea179f9ee975a5bdeb8bba8f7ac3d62ac93",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecd81dfa3cae4cc1ae3638becfbefc76829ada04/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecd81dfa3cae4cc1ae3638becfbefc76829ada04/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=ecd81dfa3cae4cc1ae3638becfbefc76829ada04",
        "patch": "@@ -949,7 +949,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * @note passing nChangePosInOut as -1 will result in setting a random position\n      */\n     bool CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosInOut,\n-                           std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n+                           std::string& strFailReason, const CCoinControl& coin_control, bool sign = true);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CConnman* connman, CValidationState& state);\n \n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& entries);"
      }
    ]
  },
  {
    "sha": "03ee70116189bb358e7c6224ba0ecb745e8161c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowM2VlNzAxMTYxODliYjM1OGU3YzYyMjRiYTBlY2I3NDVlODE2MWMy",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-28T21:23:46Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-15T03:10:58Z"
      },
      "message": "Refactor to use CoinControl in GetMinimumFee and FeeBumper\n\nImprove parameter precedence in coin_control",
      "tree": {
        "sha": "da101ee895880747adc65a5d2d0d439613ce631a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da101ee895880747adc65a5d2d0d439613ce631a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03ee70116189bb358e7c6224ba0ecb745e8161c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03ee70116189bb358e7c6224ba0ecb745e8161c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/03ee70116189bb358e7c6224ba0ecb745e8161c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03ee70116189bb358e7c6224ba0ecb745e8161c2/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ecd81dfa3cae4cc1ae3638becfbefc76829ada04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecd81dfa3cae4cc1ae3638becfbefc76829ada04",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ecd81dfa3cae4cc1ae3638becfbefc76829ada04"
      }
    ],
    "stats": {
      "total": 152,
      "additions": 79,
      "deletions": 73
    },
    "files": [
      {
        "sha": "7d8ef6571f4d84f8d10c6e4249992fe54df54fab",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=03ee70116189bb358e7c6224ba0ecb745e8161c2",
        "patch": "@@ -512,7 +512,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n                 nBytes -= 34;\n \n         // Fee\n-        nPayFee = CWallet::GetMinimumFee(nBytes, coinControl->nConfirmTarget, ::mempool, ::feeEstimator, nullptr /* FeeCalculation */, false /* ignoreGlobalPayTxFee */, conservative_estimate);\n+        nPayFee = CWallet::GetMinimumFee(nBytes, *coinControl, ::mempool, ::feeEstimator, nullptr /* FeeCalculation */);\n \n         if (nPayAmount > 0)\n         {\n@@ -587,7 +587,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     if (payTxFee.GetFeePerK() > 0)\n         dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), payTxFee.GetFeePerK()) / 1000;\n     else {\n-        dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), ::feeEstimator.estimateSmartFee(coinControl->nConfirmTarget, NULL, ::mempool, conservative_estimate).GetFeePerK()) / 1000;\n+        dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), ::feeEstimator.estimateSmartFee(*coinControl->m_confirm_target, NULL, ::mempool, conservative_estimate).GetFeePerK()) / 1000;\n     }\n     QString toolTip4 = tr(\"Can vary +/- %1 satoshi(s) per input.\").arg(dFeeVary);\n "
      },
      {
        "sha": "92478fcac6d77bfdd21b2f78263dd27b8dbf2066",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=03ee70116189bb358e7c6224ba0ecb745e8161c2",
        "patch": "@@ -274,11 +274,11 @@ void SendCoinsDialog::on_sendButton_clicked()\n     CCoinControl ctrl;\n     if (model->getOptionsModel()->getCoinControlFeatures())\n         ctrl = *CoinControlDialog::coinControl;\n-    if (ui->radioSmartFee->isChecked())\n-        ctrl.nConfirmTarget = getConfTargetForIndex(ui->confTargetSelector->currentIndex());\n-    else\n-        ctrl.nConfirmTarget = 0;\n-\n+    if (ui->radioSmartFee->isChecked()) {\n+        ctrl.m_confirm_target = getConfTargetForIndex(ui->confTargetSelector->currentIndex());\n+    } else {\n+        ctrl.m_confirm_target = boost::none;\n+    }\n     ctrl.signalRbf = ui->optInRBF->isChecked();\n \n     prepareStatus = model->prepareTransaction(currentTransaction, ctrl);\n@@ -848,9 +848,9 @@ void SendCoinsDialog::coinControlUpdateLabels()\n     CoinControlDialog::payAmounts.clear();\n     CoinControlDialog::fSubtractFeeFromAmount = false;\n     if (ui->radioSmartFee->isChecked()) {\n-        CoinControlDialog::coinControl->nConfirmTarget = getConfTargetForIndex(ui->confTargetSelector->currentIndex());\n+        CoinControlDialog::coinControl->m_confirm_target = getConfTargetForIndex(ui->confTargetSelector->currentIndex());\n     } else {\n-        CoinControlDialog::coinControl->nConfirmTarget = model->getDefaultConfirmTarget();\n+        CoinControlDialog::coinControl->m_confirm_target = boost::none;\n     }\n     CoinControlDialog::coinControl->signalRbf = ui->optInRBF->isChecked();\n "
      },
      {
        "sha": "ba0e1da0c787104f303f76050f095b01a490d4fb",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=03ee70116189bb358e7c6224ba0ecb745e8161c2",
        "patch": "@@ -24,6 +24,7 @@\n #include \"sync.h\"\n #include \"ui_interface.h\"\n #include \"util.h\" // for GetBoolArg\n+#include \"wallet/coincontrol.h\"\n #include \"wallet/feebumper.h\"\n #include \"wallet/wallet.h\"\n #include \"wallet/walletdb.h\" // for BackupWallet\n@@ -667,8 +668,10 @@ bool WalletModel::bumpFee(uint256 hash)\n {\n     std::unique_ptr<CFeeBumper> feeBump;\n     {\n+        CCoinControl coin_control;\n+        coin_control.signalRbf = true;\n         LOCK2(cs_main, wallet->cs_wallet);\n-        feeBump.reset(new CFeeBumper(wallet, hash, nTxConfirmTarget, false, 0, true, FeeEstimateMode::UNSET));\n+        feeBump.reset(new CFeeBumper(wallet, hash, coin_control, 0));\n     }\n     if (feeBump->getResult() != BumpFeeResult::OK)\n     {"
      },
      {
        "sha": "40c8b764b96993c4b2c24bee2b572b2d0f547124",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=03ee70116189bb358e7c6224ba0ecb745e8161c2",
        "patch": "@@ -10,6 +10,8 @@\n #include \"primitives/transaction.h\"\n #include \"wallet/wallet.h\"\n \n+#include <boost/optional.hpp>\n+\n /** Coin Control Features. */\n class CCoinControl\n {\n@@ -19,12 +21,12 @@ class CCoinControl\n     bool fAllowOtherInputs;\n     //! Includes watch only addresses which match the ISMINE_WATCH_SOLVABLE criteria\n     bool fAllowWatchOnly;\n-    //! Override estimated feerate\n+    //! Override automatic min/max checks on fee, m_feerate must be set if true\n     bool fOverrideFeeRate;\n-    //! Feerate to use if overrideFeeRate is true\n-    CFeeRate nFeeRate;\n-    //! Override the default confirmation target, 0 = use default\n-    int nConfirmTarget;\n+    //! Override the default payTxFee if set\n+    boost::optional<CFeeRate> m_feerate;\n+    //! Override the default confirmation target if set\n+    boost::optional<unsigned int> m_confirm_target;\n     //! Signal BIP-125 replace by fee.\n     bool signalRbf;\n     //! Fee estimation mode to control arguments to estimateSmartFee\n@@ -41,9 +43,9 @@ class CCoinControl\n         fAllowOtherInputs = false;\n         fAllowWatchOnly = false;\n         setSelected.clear();\n-        nFeeRate = CFeeRate(0);\n+        m_feerate = boost::none;\n         fOverrideFeeRate = false;\n-        nConfirmTarget = 0;\n+        m_confirm_target = boost::none;\n         signalRbf = fWalletRbf;\n         m_fee_mode = FeeEstimateMode::UNSET;\n     }"
      },
      {
        "sha": "4bfd8726a54f771b46c1df7fe478ab964a5415e3",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=03ee70116189bb358e7c6224ba0ecb745e8161c2",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"consensus/validation.h\"\n+#include \"wallet/coincontrol.h\"\n #include \"wallet/feebumper.h\"\n #include \"wallet/wallet.h\"\n #include \"policy/fees.h\"\n@@ -66,7 +67,7 @@ bool CFeeBumper::preconditionChecks(const CWallet *pWallet, const CWalletTx& wtx\n     return true;\n }\n \n-CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConfirmTarget, bool ignoreGlobalPayTxFee, CAmount totalFee, bool newTxReplaceable, FeeEstimateMode fee_mode)\n+CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, const CCoinControl& coin_control, CAmount totalFee)\n     :\n     txid(std::move(txidIn)),\n     nOldFee(0),\n@@ -165,8 +166,7 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n         nNewFee = totalFee;\n         nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n     } else {\n-        bool conservative_estimate = CalculateEstimateType(fee_mode, newTxReplaceable);\n-        nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, ::feeEstimator, nullptr /* FeeCalculation */, ignoreGlobalPayTxFee, conservative_estimate);\n+        nNewFee = CWallet::GetMinimumFee(maxNewTxSize, coin_control, mempool, ::feeEstimator, nullptr /* FeeCalculation */);\n         nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n \n         // New fee rate must be at least old rate + minimum incremental relay rate\n@@ -221,7 +221,7 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n     }\n \n     // Mark new tx not replaceable, if requested.\n-    if (!newTxReplaceable) {\n+    if (!coin_control.signalRbf) {\n         for (auto& input : mtx.vin) {\n             if (input.nSequence < 0xfffffffe) input.nSequence = 0xfffffffe;\n         }"
      },
      {
        "sha": "3d64e53c15c850d4c8e839b0c36ad694eb540385",
        "filename": "src/wallet/feebumper.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/wallet/feebumper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/wallet/feebumper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.h?ref=03ee70116189bb358e7c6224ba0ecb745e8161c2",
        "patch": "@@ -10,6 +10,7 @@\n class CWallet;\n class CWalletTx;\n class uint256;\n+class CCoinControl;\n enum class FeeEstimateMode;\n \n enum class BumpFeeResult\n@@ -25,7 +26,7 @@ enum class BumpFeeResult\n class CFeeBumper\n {\n public:\n-    CFeeBumper(const CWallet *pWalletIn, const uint256 txidIn, int newConfirmTarget, bool ignoreGlobalPayTxFee, CAmount totalFee, bool newTxReplaceable, FeeEstimateMode fee_mode);\n+    CFeeBumper(const CWallet *pWalletIn, const uint256 txidIn, const CCoinControl& coin_control, CAmount totalFee);\n     BumpFeeResult getResult() const { return currentResult; }\n     const std::vector<std::string>& getErrors() const { return vErrors; }\n     CAmount getOldFee() const { return nOldFee; }"
      },
      {
        "sha": "c636fa8114456d2b6a72886beea49771109bc296",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 21,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=03ee70116189bb358e7c6224ba0ecb745e8161c2",
        "patch": "@@ -460,7 +460,7 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n     }\n \n     if (request.params.size() > 6 && !request.params[6].isNull()) {\n-        coin_control.nConfirmTarget = request.params[6].get_int();\n+        coin_control.m_confirm_target = request.params[6].get_int();\n     }\n \n     if (request.params.size() > 7 && !request.params[7].isNull()) {\n@@ -981,7 +981,7 @@ UniValue sendmany(const JSONRPCRequest& request)\n     }\n \n     if (request.params.size() > 6 && !request.params[6].isNull()) {\n-        coin_control.nConfirmTarget = request.params[6].get_int();\n+        coin_control.m_confirm_target = request.params[6].get_int();\n     }\n \n     if (request.params.size() > 7 && !request.params[7].isNull()) {\n@@ -2730,13 +2730,9 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     RPCTypeCheck(request.params, {UniValue::VSTR});\n \n     CCoinControl coinControl;\n-    coinControl.destChange = CNoDestination();\n     int changePosition = -1;\n-    coinControl.fAllowWatchOnly = false;  // include watching\n     bool lockUnspents = false;\n     bool reserveChangeKey = true;\n-    coinControl.nFeeRate = CFeeRate(0);\n-    coinControl.fOverrideFeeRate = false;\n     UniValue subtractFeeFromOutputs;\n     std::set<int> setSubtractFeeFromOutputs;\n \n@@ -2788,7 +2784,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n \n         if (options.exists(\"feeRate\"))\n         {\n-            coinControl.nFeeRate = CFeeRate(AmountFromValue(options[\"feeRate\"]));\n+            coinControl.m_feerate = CFeeRate(AmountFromValue(options[\"feeRate\"]));\n             coinControl.fOverrideFeeRate = true;\n         }\n \n@@ -2799,7 +2795,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n             coinControl.signalRbf = options[\"replaceable\"].get_bool();\n         }\n         if (options.exists(\"conf_target\")) {\n-            coinControl.nConfirmTarget = options[\"conf_target\"].get_int();\n+            coinControl.m_confirm_target = options[\"conf_target\"].get_int();\n         }\n         if (options.exists(\"estimate_mode\")) {\n             if (!FeeModeFromString(options[\"estimate_mode\"].get_str(), coinControl.m_fee_mode)) {\n@@ -2905,11 +2901,9 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     hash.SetHex(request.params[0].get_str());\n \n     // optional parameters\n-    bool ignoreGlobalPayTxFee = false;\n-    int newConfirmTarget = nTxConfirmTarget;\n     CAmount totalFee = 0;\n-    bool replaceable = true;\n-    FeeEstimateMode fee_mode = FeeEstimateMode::UNSET;\n+    CCoinControl coin_control;\n+    coin_control.signalRbf = true;\n     if (request.params.size() > 1) {\n         UniValue options = request.params[1];\n         RPCTypeCheckObj(options,\n@@ -2924,14 +2918,11 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n         } else if (options.exists(\"confTarget\")) {\n-            // If the user has explicitly set a confTarget in this rpc call,\n-            // then override the default logic that uses the global payTxFee\n-            // instead of the confirmation target.\n-            ignoreGlobalPayTxFee = true;\n-            newConfirmTarget = options[\"confTarget\"].get_int();\n-            if (newConfirmTarget <= 0) { // upper-bound will be checked by estimatefee/smartfee\n+            int target = options[\"confTarget\"].get_int();\n+            if (target <= 0) { // FIXME: Check upper bound too\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n             }\n+            coin_control.m_confirm_target = target;\n         } else if (options.exists(\"totalFee\")) {\n             totalFee = options[\"totalFee\"].get_int64();\n             if (totalFee <= 0) {\n@@ -2940,10 +2931,10 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         }\n \n         if (options.exists(\"replaceable\")) {\n-            replaceable = options[\"replaceable\"].get_bool();\n+            coin_control.signalRbf = options[\"replaceable\"].get_bool();\n         }\n         if (options.exists(\"estimate_mode\")) {\n-            if (!FeeModeFromString(options[\"estimate_mode\"].get_str(), fee_mode)) {\n+            if (!FeeModeFromString(options[\"estimate_mode\"].get_str(), coin_control.m_fee_mode)) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n             }\n         }\n@@ -2952,7 +2943,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     LOCK2(cs_main, pwallet->cs_wallet);\n     EnsureWalletIsUnlocked(pwallet);\n \n-    CFeeBumper feeBump(pwallet, hash, newConfirmTarget, ignoreGlobalPayTxFee, totalFee, replaceable, fee_mode);\n+    CFeeBumper feeBump(pwallet, hash, coin_control, totalFee);\n     BumpFeeResult res = feeBump.getResult();\n     if (res != BumpFeeResult::OK)\n     {"
      },
      {
        "sha": "f010ff0ca168863e736de7df7e78448993cbbd09",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 29,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=03ee70116189bb358e7c6224ba0ecb745e8161c2",
        "patch": "@@ -2721,17 +2721,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                     vin.scriptWitness.SetNull();\n                 }\n \n-                // Allow to override the default confirmation target over the CoinControl instance\n-                int currentConfirmationTarget = nTxConfirmTarget;\n-                if (coin_control.nConfirmTarget > 0)\n-                    currentConfirmationTarget = coin_control.nConfirmTarget;\n-\n-                // Allow to override the default fee estimate mode over the CoinControl instance\n-                bool conservative_estimate = CalculateEstimateType(coin_control.m_fee_mode, coin_control.signalRbf);\n-\n-                CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, ::mempool, ::feeEstimator, &feeCalc, false /* ignoreGlobalPayTxFee */, conservative_estimate);\n-                if (coin_control.fOverrideFeeRate)\n-                    nFeeNeeded = coin_control.nFeeRate.GetFee(nBytes);\n+                CAmount nFeeNeeded = GetMinimumFee(nBytes, coin_control, ::mempool, ::feeEstimator, &feeCalc);\n \n                 // If we made it here and we aren't even able to meet the relay fee on the next pass, give up\n                 // because we must be at the maximum allowed fee.\n@@ -2756,7 +2746,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                     // new inputs. We now know we only need the smaller fee\n                     // (because of reduced tx size) and so we should add a\n                     // change output. Only try this once.\n-                    CAmount fee_needed_for_change = GetMinimumFee(change_prototype_size, currentConfirmationTarget, ::mempool, ::feeEstimator, nullptr, false /* ignoreGlobalPayTxFee */, conservative_estimate);\n+                    CAmount fee_needed_for_change = GetMinimumFee(change_prototype_size, coin_control, ::mempool, ::feeEstimator, nullptr);\n                     CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, ::dustRelayFee);\n                     CAmount max_excess_fee = fee_needed_for_change + minimum_value_for_change;\n                     if (nFeeRet > nFeeNeeded + max_excess_fee && nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n@@ -2932,33 +2922,52 @@ CAmount CWallet::GetRequiredFee(unsigned int nTxBytes)\n     return std::max(minTxFee.GetFee(nTxBytes), ::minRelayTxFee.GetFee(nTxBytes));\n }\n \n-CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc, bool ignoreGlobalPayTxFee, bool conservative_estimate)\n+CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc)\n {\n-    // payTxFee is the user-set global for desired feerate\n-    CAmount nFeeNeeded = payTxFee.GetFee(nTxBytes);\n-    // User didn't set: use -txconfirmtarget to estimate...\n-    if (nFeeNeeded == 0 || ignoreGlobalPayTxFee) {\n-        nFeeNeeded = estimator.estimateSmartFee(nConfirmTarget, feeCalc, pool, conservative_estimate).GetFee(nTxBytes);\n-        // ... unless we don't have enough mempool data for estimatefee, then use fallbackFee\n-        if (nFeeNeeded == 0) {\n-            nFeeNeeded = fallbackFee.GetFee(nTxBytes);\n+    /* User control of how to calculate fee uses the following parameter precedence:\n+       1. coin_control.m_feerate\n+       2. coin_control.m_confirm_target\n+       3. payTxFee (user-set global variable)\n+       4. nTxConfirmTarget (user-set global variable)\n+       The first parameter that is set is used.\n+    */\n+    CAmount fee_needed;\n+    if (coin_control.m_feerate) { // 1.\n+        fee_needed = coin_control.m_feerate->GetFee(nTxBytes);\n+        if (feeCalc) feeCalc->reason = FeeReason::PAYTXFEE;\n+        // Allow to override automatic min/max check over coin control instance\n+        if (coin_control.fOverrideFeeRate) return fee_needed;\n+    }\n+    else if (!coin_control.m_confirm_target && ::payTxFee != CFeeRate(0)) { // 3. TODO: remove magic value of 0 for global payTxFee\n+        fee_needed = ::payTxFee.GetFee(nTxBytes);\n+        if (feeCalc) feeCalc->reason = FeeReason::PAYTXFEE;\n+    }\n+    else { // 2. or 4.\n+        // We will use smart fee estimation\n+        unsigned int target = coin_control.m_confirm_target ? *coin_control.m_confirm_target : ::nTxConfirmTarget;\n+        // Allow to override the default fee estimate mode over the CoinControl instance\n+        bool conservative_estimate = CalculateEstimateType(coin_control.m_fee_mode, coin_control.signalRbf);\n+\n+        fee_needed = estimator.estimateSmartFee(target, feeCalc, pool, conservative_estimate).GetFee(nTxBytes);\n+        if (fee_needed == 0) {\n+            // if we don't have enough data for estimateSmartFee, then use fallbackFee\n+            fee_needed = fallbackFee.GetFee(nTxBytes);\n             if (feeCalc) feeCalc->reason = FeeReason::FALLBACK;\n         }\n-    } else {\n-        if (feeCalc) feeCalc->reason = FeeReason::PAYTXFEE;\n     }\n+\n     // prevent user from paying a fee below minRelayTxFee or minTxFee\n-    CAmount requiredFee = GetRequiredFee(nTxBytes);\n-    if (requiredFee > nFeeNeeded) {\n-        nFeeNeeded = requiredFee;\n+    CAmount required_fee = GetRequiredFee(nTxBytes);\n+    if (required_fee > fee_needed) {\n+        fee_needed = required_fee;\n         if (feeCalc) feeCalc->reason = FeeReason::REQUIRED;\n     }\n     // But always obey the maximum\n-    if (nFeeNeeded > maxTxFee) {\n-        nFeeNeeded = maxTxFee;\n+    if (fee_needed > maxTxFee) {\n+        fee_needed = maxTxFee;\n         if (feeCalc) feeCalc->reason = FeeReason::MAXTXFEE;\n     }\n-    return nFeeNeeded;\n+    return fee_needed;\n }\n \n "
      },
      {
        "sha": "3c866776fbc4c1375097c2ead3039bfa8b29af12",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=03ee70116189bb358e7c6224ba0ecb745e8161c2",
        "patch": "@@ -964,7 +964,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Estimate the minimum fee considering user set parameters\n      * and the required fee\n      */\n-    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc, bool ignoreGlobalPayTxFee, bool conservative_estimate);\n+    static CAmount GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc);\n     /**\n      * Return the minimum required fee taking into account the\n      * floating relay fee and user set minimum transaction fee"
      }
    ]
  },
  {
    "sha": "1983ca6cb3d6e741191206b57585a4b88d9ab86e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOTgzY2E2Y2IzZDZlNzQxMTkxMjA2YjU3NTg1YTRiODhkOWFiODZl",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-28T23:24:28Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-15T03:40:33Z"
      },
      "message": "Use CoinControl to pass custom fee setting from QT.\n\nThis fixes buggy behavior where we were temporarily setting and unsetting the\nglobal payTxFee when trying to send a transaction with a custom fee from the\nGUI. The previous behavior was inconsistent depending on the order of using the\nRPC call settxfee and clicking various radio buttons in the sendcoinsdialog.\nThe new behavior is that transactions sent with the GUI will always use either\nthe smartfee slider value or the custom fee set on the GUI and they will not\naffect the global defaults which are only for RPC and initial GUI values.",
      "tree": {
        "sha": "d20778cff042356af12b3eaf8a26b0d4f04f8618",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d20778cff042356af12b3eaf8a26b0d4f04f8618"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1983ca6cb3d6e741191206b57585a4b88d9ab86e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1983ca6cb3d6e741191206b57585a4b88d9ab86e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1983ca6cb3d6e741191206b57585a4b88d9ab86e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1983ca6cb3d6e741191206b57585a4b88d9ab86e/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03ee70116189bb358e7c6224ba0ecb745e8161c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03ee70116189bb358e7c6224ba0ecb745e8161c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03ee70116189bb358e7c6224ba0ecb745e8161c2"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 25,
      "deletions": 37
    },
    "files": [
      {
        "sha": "d48b3753ba1e03509befb5aa5eea1eb9345758c4",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 36,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1983ca6cb3d6e741191206b57585a4b88d9ab86e/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1983ca6cb3d6e741191206b57585a4b88d9ab86e/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=1983ca6cb3d6e741191206b57585a4b88d9ab86e",
        "patch": "@@ -175,26 +175,20 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n             ui->confTargetSelector->addItem(tr(\"%1 (%2 blocks)\").arg(GUIUtil::formatNiceTimeOffset(n*Params().GetConsensus().nPowTargetSpacing)).arg(n));\n         }\n         connect(ui->confTargetSelector, SIGNAL(currentIndexChanged(int)), this, SLOT(updateSmartFeeLabel()));\n-        connect(ui->confTargetSelector, SIGNAL(currentIndexChanged(int)), this, SLOT(updateGlobalFeeVariables()));\n         connect(ui->confTargetSelector, SIGNAL(currentIndexChanged(int)), this, SLOT(coinControlUpdateLabels()));\n         connect(ui->groupFee, SIGNAL(buttonClicked(int)), this, SLOT(updateFeeSectionControls()));\n-        connect(ui->groupFee, SIGNAL(buttonClicked(int)), this, SLOT(updateGlobalFeeVariables()));\n         connect(ui->groupFee, SIGNAL(buttonClicked(int)), this, SLOT(coinControlUpdateLabels()));\n-        connect(ui->groupCustomFee, SIGNAL(buttonClicked(int)), this, SLOT(updateGlobalFeeVariables()));\n         connect(ui->groupCustomFee, SIGNAL(buttonClicked(int)), this, SLOT(coinControlUpdateLabels()));\n-        connect(ui->customFee, SIGNAL(valueChanged()), this, SLOT(updateGlobalFeeVariables()));\n         connect(ui->customFee, SIGNAL(valueChanged()), this, SLOT(coinControlUpdateLabels()));\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(setMinimumFee()));\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(updateFeeSectionControls()));\n-        connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(updateGlobalFeeVariables()));\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(coinControlUpdateLabels()));\n         connect(ui->optInRBF, SIGNAL(stateChanged(int)), this, SLOT(updateSmartFeeLabel()));\n         connect(ui->optInRBF, SIGNAL(stateChanged(int)), this, SLOT(coinControlUpdateLabels()));\n         ui->customFee->setSingleStep(CWallet::GetRequiredFee(1000));\n         updateFeeSectionControls();\n         updateMinFeeLabel();\n         updateSmartFeeLabel();\n-        updateGlobalFeeVariables();\n \n         // set default rbf checkbox state\n         ui->optInRBF->setCheckState(model->getDefaultWalletRbf() ? Qt::Checked : Qt::Unchecked);\n@@ -274,12 +268,8 @@ void SendCoinsDialog::on_sendButton_clicked()\n     CCoinControl ctrl;\n     if (model->getOptionsModel()->getCoinControlFeatures())\n         ctrl = *CoinControlDialog::coinControl;\n-    if (ui->radioSmartFee->isChecked()) {\n-        ctrl.m_confirm_target = getConfTargetForIndex(ui->confTargetSelector->currentIndex());\n-    } else {\n-        ctrl.m_confirm_target = boost::none;\n-    }\n-    ctrl.signalRbf = ui->optInRBF->isChecked();\n+\n+    updateCoinControlState(ctrl);\n \n     prepareStatus = model->prepareTransaction(currentTransaction, ctrl);\n \n@@ -636,18 +626,6 @@ void SendCoinsDialog::updateFeeSectionControls()\n     ui->customFee               ->setEnabled(ui->radioCustomFee->isChecked() && !ui->checkBoxMinimumFee->isChecked());\n }\n \n-void SendCoinsDialog::updateGlobalFeeVariables()\n-{\n-    if (ui->radioSmartFee->isChecked())\n-    {\n-        payTxFee = CFeeRate(0);\n-    }\n-    else\n-    {\n-        payTxFee = CFeeRate(ui->customFee->value());\n-    }\n-}\n-\n void SendCoinsDialog::updateFeeMinimizedLabel()\n {\n     if(!model || !model->getOptionsModel())\n@@ -669,15 +647,30 @@ void SendCoinsDialog::updateMinFeeLabel()\n         );\n }\n \n+void SendCoinsDialog::updateCoinControlState(CCoinControl& ctrl)\n+{\n+    if (ui->radioCustomFee->isChecked()) {\n+        ctrl.m_feerate = CFeeRate(ui->customFee->value());\n+    } else {\n+        ctrl.m_feerate = boost::none;\n+    }\n+    // Avoid using global defaults when sending money from the GUI\n+    // Either custom fee will be used or if not selected, the confirmation target from dropdown box\n+    ctrl.m_confirm_target = getConfTargetForIndex(ui->confTargetSelector->currentIndex());\n+    ctrl.signalRbf = ui->optInRBF->isChecked();\n+}\n+\n void SendCoinsDialog::updateSmartFeeLabel()\n {\n     if(!model || !model->getOptionsModel())\n         return;\n-\n-    int nBlocksToConfirm = getConfTargetForIndex(ui->confTargetSelector->currentIndex());\n+    CCoinControl coin_control;\n+    updateCoinControlState(coin_control);\n+    coin_control.m_feerate = boost::none; // Explicitly use only fee estimation rate for smart fee labels\n     FeeCalculation feeCalc;\n-    bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET, ui->optInRBF->isChecked());\n-    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocksToConfirm, &feeCalc, ::mempool, conservative_estimate);\n+    bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET, coin_control.signalRbf);\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(*coin_control.m_confirm_target, &feeCalc, ::mempool, conservative_estimate);\n+\n     if (feeRate <= CFeeRate(0)) // not enough data => minfee\n     {\n         ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(),\n@@ -752,8 +745,6 @@ void SendCoinsDialog::coinControlFeatureChanged(bool checked)\n     if (!checked && model) // coin control features disabled\n         CoinControlDialog::coinControl->SetNull();\n \n-    // make sure we set back the confirmation target\n-    updateGlobalFeeVariables();\n     coinControlUpdateLabels();\n }\n \n@@ -844,15 +835,11 @@ void SendCoinsDialog::coinControlUpdateLabels()\n     if (!model || !model->getOptionsModel())\n         return;\n \n+    updateCoinControlState(*CoinControlDialog::coinControl);\n+\n     // set pay amounts\n     CoinControlDialog::payAmounts.clear();\n     CoinControlDialog::fSubtractFeeFromAmount = false;\n-    if (ui->radioSmartFee->isChecked()) {\n-        CoinControlDialog::coinControl->m_confirm_target = getConfTargetForIndex(ui->confTargetSelector->currentIndex());\n-    } else {\n-        CoinControlDialog::coinControl->m_confirm_target = boost::none;\n-    }\n-    CoinControlDialog::coinControl->signalRbf = ui->optInRBF->isChecked();\n \n     for(int i = 0; i < ui->entries->count(); ++i)\n     {"
      },
      {
        "sha": "70b4aa5a03ab3080bfd0924db680604971049db2",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1983ca6cb3d6e741191206b57585a4b88d9ab86e/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1983ca6cb3d6e741191206b57585a4b88d9ab86e/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=1983ca6cb3d6e741191206b57585a4b88d9ab86e",
        "patch": "@@ -68,6 +68,8 @@ public Q_SLOTS:\n     void processSendCoinsReturn(const WalletModel::SendCoinsReturn &sendCoinsReturn, const QString &msgArg = QString());\n     void minimizeFeeSection(bool fMinimize);\n     void updateFeeMinimizedLabel();\n+    // Update the passed in CCoinControl with state from the GUI\n+    void updateCoinControlState(CCoinControl& ctrl);\n \n private Q_SLOTS:\n     void on_sendButton_clicked();\n@@ -91,7 +93,6 @@ private Q_SLOTS:\n     void updateFeeSectionControls();\n     void updateMinFeeLabel();\n     void updateSmartFeeLabel();\n-    void updateGlobalFeeVariables();\n \n Q_SIGNALS:\n     // Fired when a message should be reported to the user"
      }
    ]
  },
  {
    "sha": "2fffaa97381f741786fff2e6ff25f4b9a74037fe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZmZmYWE5NzM4MWY3NDE3ODZmZmYyZTZmZjI1ZjRiOWE3NDAzN2Zl",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-29T15:29:34Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-15T03:41:37Z"
      },
      "message": "Make QT fee displays use GetMinimumFee instead of estimateSmartFee\n\nRemove helper function (CalculateEstimateType) for determining whether\nestimates should be conservative or not, now that this is only called\nonce from GetMinimumFee and incorporate the logic directly there.",
      "tree": {
        "sha": "f6163fb7a56b3f73bc8858ad1c336db9efb77aac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6163fb7a56b3f73bc8858ad1c336db9efb77aac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2fffaa97381f741786fff2e6ff25f4b9a74037fe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fffaa97381f741786fff2e6ff25f4b9a74037fe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2fffaa97381f741786fff2e6ff25f4b9a74037fe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fffaa97381f741786fff2e6ff25f4b9a74037fe/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1983ca6cb3d6e741191206b57585a4b88d9ab86e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1983ca6cb3d6e741191206b57585a4b88d9ab86e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1983ca6cb3d6e741191206b57585a4b88d9ab86e"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 14,
      "deletions": 35
    },
    "files": [
      {
        "sha": "f3ee0fbe393aeace65b734393481a58623d164f7",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fffaa97381f741786fff2e6ff25f4b9a74037fe/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fffaa97381f741786fff2e6ff25f4b9a74037fe/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=2fffaa97381f741786fff2e6ff25f4b9a74037fe",
        "patch": "@@ -490,8 +490,6 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         else nBytesInputs += 148;\n     }\n \n-    bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET, coinControl->signalRbf);\n-\n     // calculation\n     if (nQuantity > 0)\n     {\n@@ -583,12 +581,8 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     QString toolTipDust = tr(\"This label turns red if any recipient receives an amount smaller than the current dust threshold.\");\n \n     // how many satoshis the estimated fee can vary per byte we guess wrong\n-    double dFeeVary;\n-    if (payTxFee.GetFeePerK() > 0)\n-        dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), payTxFee.GetFeePerK()) / 1000;\n-    else {\n-        dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), ::feeEstimator.estimateSmartFee(*coinControl->m_confirm_target, NULL, ::mempool, conservative_estimate).GetFeePerK()) / 1000;\n-    }\n+    double dFeeVary = (double)nPayFee / nBytes;\n+\n     QString toolTip4 = tr(\"Can vary +/- %1 satoshi(s) per input.\").arg(dFeeVary);\n \n     l3->setToolTip(toolTip4);"
      },
      {
        "sha": "a01886c3ea8aefbe9026e04e9c2d3d06e3781700",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 10,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fffaa97381f741786fff2e6ff25f4b9a74037fe/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fffaa97381f741786fff2e6ff25f4b9a74037fe/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=2fffaa97381f741786fff2e6ff25f4b9a74037fe",
        "patch": "@@ -652,7 +652,7 @@ void SendCoinsDialog::updateCoinControlState(CCoinControl& ctrl)\n     if (ui->radioCustomFee->isChecked()) {\n         ctrl.m_feerate = CFeeRate(ui->customFee->value());\n     } else {\n-        ctrl.m_feerate = boost::none;\n+        ctrl.m_feerate.reset();\n     }\n     // Avoid using global defaults when sending money from the GUI\n     // Either custom fee will be used or if not selected, the confirmation target from dropdown box\n@@ -666,15 +666,13 @@ void SendCoinsDialog::updateSmartFeeLabel()\n         return;\n     CCoinControl coin_control;\n     updateCoinControlState(coin_control);\n-    coin_control.m_feerate = boost::none; // Explicitly use only fee estimation rate for smart fee labels\n+    coin_control.m_feerate.reset(); // Explicitly use only fee estimation rate for smart fee labels\n     FeeCalculation feeCalc;\n-    bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET, coin_control.signalRbf);\n-    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(*coin_control.m_confirm_target, &feeCalc, ::mempool, conservative_estimate);\n+    CFeeRate feeRate = CFeeRate(CWallet::GetMinimumFee(1000, coin_control, ::mempool, ::feeEstimator, &feeCalc));\n \n-    if (feeRate <= CFeeRate(0)) // not enough data => minfee\n-    {\n-        ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(),\n-                                                                std::max(CWallet::fallbackFee.GetFeePerK(), CWallet::GetRequiredFee(1000))) + \"/kB\");\n+    ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), feeRate.GetFeePerK()) + \"/kB\");\n+\n+    if (feeCalc.reason == FeeReason::FALLBACK) {\n         ui->labelSmartFee2->show(); // (Smart fee not initialized yet. This usually takes a few blocks...)\n         ui->labelFeeEstimation->setText(\"\");\n         ui->fallbackFeeWarningLabel->setVisible(true);\n@@ -685,8 +683,6 @@ void SendCoinsDialog::updateSmartFeeLabel()\n     }\n     else\n     {\n-        ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(),\n-                                                                std::max(feeRate.GetFeePerK(), CWallet::GetRequiredFee(1000))) + \"/kB\");\n         ui->labelSmartFee2->hide();\n         ui->labelFeeEstimation->setText(tr(\"Estimated to begin confirmation within %n block(s).\", \"\", feeCalc.returnedTarget));\n         ui->fallbackFeeWarningLabel->setVisible(false);"
      },
      {
        "sha": "fc0e7c519ed012637f301e7dd8e692848d1f57f2",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fffaa97381f741786fff2e6ff25f4b9a74037fe/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fffaa97381f741786fff2e6ff25f4b9a74037fe/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=2fffaa97381f741786fff2e6ff25f4b9a74037fe",
        "patch": "@@ -43,9 +43,9 @@ class CCoinControl\n         fAllowOtherInputs = false;\n         fAllowWatchOnly = false;\n         setSelected.clear();\n-        m_feerate = boost::none;\n+        m_feerate.reset();\n         fOverrideFeeRate = false;\n-        m_confirm_target = boost::none;\n+        m_confirm_target.reset();\n         signalRbf = fWalletRbf;\n         m_fee_mode = FeeEstimateMode::UNSET;\n     }"
      },
      {
        "sha": "f7f296bd5213cc2bd81733b9103cae684512e4f3",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 13,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fffaa97381f741786fff2e6ff25f4b9a74037fe/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fffaa97381f741786fff2e6ff25f4b9a74037fe/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2fffaa97381f741786fff2e6ff25f4b9a74037fe",
        "patch": "@@ -2945,8 +2945,11 @@ CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_c\n     else { // 2. or 4.\n         // We will use smart fee estimation\n         unsigned int target = coin_control.m_confirm_target ? *coin_control.m_confirm_target : ::nTxConfirmTarget;\n+        // By default estimates are economical iff we are signaling opt-in-RBF\n+        bool conservative_estimate = !coin_control.signalRbf;\n         // Allow to override the default fee estimate mode over the CoinControl instance\n-        bool conservative_estimate = CalculateEstimateType(coin_control.m_fee_mode, coin_control.signalRbf);\n+        if (coin_control.m_fee_mode == FeeEstimateMode::CONSERVATIVE) conservative_estimate = true;\n+        else if (coin_control.m_fee_mode == FeeEstimateMode::ECONOMICAL) conservative_estimate = false;\n \n         fee_needed = estimator.estimateSmartFee(target, feeCalc, pool, conservative_estimate).GetFee(nTxBytes);\n         if (fee_needed == 0) {\n@@ -4194,15 +4197,3 @@ bool CMerkleTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState&\n {\n     return ::AcceptToMemoryPool(mempool, state, tx, true, NULL, NULL, false, nAbsurdFee);\n }\n-\n-bool CalculateEstimateType(FeeEstimateMode mode, bool opt_in_rbf) {\n-    switch (mode) {\n-    case FeeEstimateMode::UNSET:\n-        return !opt_in_rbf; // Allow for lower fees if RBF is an option\n-    case FeeEstimateMode::CONSERVATIVE:\n-        return true;\n-    case FeeEstimateMode::ECONOMICAL:\n-        return false;\n-    }\n-    return true;\n-}"
      },
      {
        "sha": "bb9d146a206d78d6692c8fe397c528180623f1f2",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fffaa97381f741786fff2e6ff25f4b9a74037fe/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fffaa97381f741786fff2e6ff25f4b9a74037fe/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=2fffaa97381f741786fff2e6ff25f4b9a74037fe",
        "patch": "@@ -1213,6 +1213,4 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins\n     return true;\n }\n \n-bool CalculateEstimateType(FeeEstimateMode mode, bool opt_in_rbf);\n-\n #endif // BITCOIN_WALLET_WALLET_H"
      }
    ]
  },
  {
    "sha": "fd29d3df299bd06c0e6bb218863e0c855b3b91af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDI5ZDNkZjI5OWJkMDZjMGU2YmIyMTg4NjNlMGM4NTViM2I5MWFm",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-29T17:13:23Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-15T03:41:40Z"
      },
      "message": "Remove checking of mempool min fee from estimateSmartFee.\n\nThis check has been moved to the wallet logic GetMinimumFee. The rpc call to\nestimatesmartfee will now no longer return a result maxed with the mempool min\nfee, but automated fee calculations from the wallet will produce the same result\nas before and coincontrol and sendcoins dialogs in the GUI will correctly\ndisplay the right prospective fee.\n\nchanges to policy/fees.cpp include a big whitespace indentation change.",
      "tree": {
        "sha": "d0f352d9fcf19a7268586b92a3930a5916eef43b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0f352d9fcf19a7268586b92a3930a5916eef43b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd29d3df299bd06c0e6bb218863e0c855b3b91af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd29d3df299bd06c0e6bb218863e0c855b3b91af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd29d3df299bd06c0e6bb218863e0c855b3b91af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd29d3df299bd06c0e6bb218863e0c855b3b91af/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2fffaa97381f741786fff2e6ff25f4b9a74037fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fffaa97381f741786fff2e6ff25f4b9a74037fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2fffaa97381f741786fff2e6ff25f4b9a74037fe"
      }
    ],
    "stats": {
      "total": 133,
      "additions": 60,
      "deletions": 73
    },
    "files": [
      {
        "sha": "45f97652319a4062d889541b1dc9bc5328a6aa48",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 59,
        "changes": 110,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd29d3df299bd06c0e6bb218863e0c855b3b91af/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd29d3df299bd06c0e6bb218863e0c855b3b91af/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=fd29d3df299bd06c0e6bb218863e0c855b3b91af",
        "patch": "@@ -826,89 +826,81 @@ double CBlockPolicyEstimator::estimateConservativeFee(unsigned int doubleTarget,\n  * estimates, however, required the 95% threshold at 2 * target be met for any\n  * longer time horizons also.\n  */\n-CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, FeeCalculation *feeCalc, const CTxMemPool& pool, bool conservative) const\n+CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, FeeCalculation *feeCalc, bool conservative) const\n {\n+    LOCK(cs_feeEstimator);\n+\n     if (feeCalc) {\n         feeCalc->desiredTarget = confTarget;\n         feeCalc->returnedTarget = confTarget;\n     }\n \n     double median = -1;\n     EstimationResult tempResult;\n-    {\n-        LOCK(cs_feeEstimator);\n \n-        // Return failure if trying to analyze a target we're not tracking\n-        if (confTarget <= 0 || (unsigned int)confTarget > longStats->GetMaxConfirms())\n-            return CFeeRate(0);\n+    // Return failure if trying to analyze a target we're not tracking\n+    if (confTarget <= 0 || (unsigned int)confTarget > longStats->GetMaxConfirms())\n+        return CFeeRate(0);\n \n-        // It's not possible to get reasonable estimates for confTarget of 1\n-        if (confTarget == 1)\n-            confTarget = 2;\n+    // It's not possible to get reasonable estimates for confTarget of 1\n+    if (confTarget == 1)\n+        confTarget = 2;\n \n-        unsigned int maxUsableEstimate = MaxUsableEstimate();\n-        if (maxUsableEstimate <= 1)\n-            return CFeeRate(0);\n+    unsigned int maxUsableEstimate = MaxUsableEstimate();\n+    if (maxUsableEstimate <= 1)\n+        return CFeeRate(0);\n \n-        if ((unsigned int)confTarget > maxUsableEstimate) {\n-            confTarget = maxUsableEstimate;\n-        }\n+    if ((unsigned int)confTarget > maxUsableEstimate) {\n+        confTarget = maxUsableEstimate;\n+    }\n \n-        assert(confTarget > 0); //estimateCombinedFee and estimateConservativeFee take unsigned ints\n-        /** true is passed to estimateCombined fee for target/2 and target so\n-         * that we check the max confirms for shorter time horizons as well.\n-         * This is necessary to preserve monotonically increasing estimates.\n-         * For non-conservative estimates we do the same thing for 2*target, but\n-         * for conservative estimates we want to skip these shorter horizons\n-         * checks for 2*target because we are taking the max over all time\n-         * horizons so we already have monotonically increasing estimates and\n-         * the purpose of conservative estimates is not to let short term\n-         * fluctuations lower our estimates by too much.\n-         */\n-        double halfEst = estimateCombinedFee(confTarget/2, HALF_SUCCESS_PCT, true, &tempResult);\n+    assert(confTarget > 0); //estimateCombinedFee and estimateConservativeFee take unsigned ints\n+    /** true is passed to estimateCombined fee for target/2 and target so\n+     * that we check the max confirms for shorter time horizons as well.\n+     * This is necessary to preserve monotonically increasing estimates.\n+     * For non-conservative estimates we do the same thing for 2*target, but\n+     * for conservative estimates we want to skip these shorter horizons\n+     * checks for 2*target because we are taking the max over all time\n+     * horizons so we already have monotonically increasing estimates and\n+     * the purpose of conservative estimates is not to let short term\n+     * fluctuations lower our estimates by too much.\n+     */\n+    double halfEst = estimateCombinedFee(confTarget/2, HALF_SUCCESS_PCT, true, &tempResult);\n+    if (feeCalc) {\n+        feeCalc->est = tempResult;\n+        feeCalc->reason = FeeReason::HALF_ESTIMATE;\n+    }\n+    median = halfEst;\n+    double actualEst = estimateCombinedFee(confTarget, SUCCESS_PCT, true, &tempResult);\n+    if (actualEst > median) {\n+        median = actualEst;\n         if (feeCalc) {\n             feeCalc->est = tempResult;\n-            feeCalc->reason = FeeReason::HALF_ESTIMATE;\n+            feeCalc->reason = FeeReason::FULL_ESTIMATE;\n         }\n-        median = halfEst;\n-        double actualEst = estimateCombinedFee(confTarget, SUCCESS_PCT, true, &tempResult);\n-        if (actualEst > median) {\n-            median = actualEst;\n-            if (feeCalc) {\n-                feeCalc->est = tempResult;\n-                feeCalc->reason = FeeReason::FULL_ESTIMATE;\n-            }\n+    }\n+    double doubleEst = estimateCombinedFee(2 * confTarget, DOUBLE_SUCCESS_PCT, !conservative, &tempResult);\n+    if (doubleEst > median) {\n+        median = doubleEst;\n+        if (feeCalc) {\n+            feeCalc->est = tempResult;\n+            feeCalc->reason = FeeReason::DOUBLE_ESTIMATE;\n         }\n-        double doubleEst = estimateCombinedFee(2 * confTarget, DOUBLE_SUCCESS_PCT, !conservative, &tempResult);\n-        if (doubleEst > median) {\n-            median = doubleEst;\n+    }\n+\n+    if (conservative || median == -1) {\n+        double consEst =  estimateConservativeFee(2 * confTarget, &tempResult);\n+        if (consEst > median) {\n+            median = consEst;\n             if (feeCalc) {\n                 feeCalc->est = tempResult;\n-                feeCalc->reason = FeeReason::DOUBLE_ESTIMATE;\n+                feeCalc->reason = FeeReason::CONSERVATIVE;\n             }\n         }\n-\n-        if (conservative || median == -1) {\n-            double consEst =  estimateConservativeFee(2 * confTarget, &tempResult);\n-            if (consEst > median) {\n-                median = consEst;\n-                if (feeCalc) {\n-                    feeCalc->est = tempResult;\n-                    feeCalc->reason = FeeReason::CONSERVATIVE;\n-                }\n-            }\n-        }\n-    } // Must unlock cs_feeEstimator before taking mempool locks\n+    }\n \n     if (feeCalc) feeCalc->returnedTarget = confTarget;\n \n-    // If mempool is limiting txs , return at least the min feerate from the mempool\n-    CAmount minPoolFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n-    if (minPoolFee > 0 && minPoolFee > median) {\n-        if (feeCalc) feeCalc->reason = FeeReason::MEMPOOL_MIN;\n-        return CFeeRate(minPoolFee);\n-    }\n-\n     if (median < 0)\n         return CFeeRate(0);\n "
      },
      {
        "sha": "f4ef793643076ca22ac8fb726b1717f31304c094",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd29d3df299bd06c0e6bb218863e0c855b3b91af/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd29d3df299bd06c0e6bb218863e0c855b3b91af/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=fd29d3df299bd06c0e6bb218863e0c855b3b91af",
        "patch": "@@ -208,7 +208,7 @@ class CBlockPolicyEstimator\n      *  the closest target where one can be given.  'conservative' estimates are\n      *  valid over longer time horizons also.\n      */\n-    CFeeRate estimateSmartFee(int confTarget, FeeCalculation *feeCalc, const CTxMemPool& pool, bool conservative) const;\n+    CFeeRate estimateSmartFee(int confTarget, FeeCalculation *feeCalc, bool conservative) const;\n \n     /** Return a specific fee estimate calculation with a given success\n      * threshold and time horizon, and optionally return detailed data about"
      },
      {
        "sha": "5dc468e111bed391e24491b17dd46ed386b441d0",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd29d3df299bd06c0e6bb218863e0c855b3b91af/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd29d3df299bd06c0e6bb218863e0c855b3b91af/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fd29d3df299bd06c0e6bb218863e0c855b3b91af",
        "patch": "@@ -815,7 +815,6 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n             \"\\n\"\n             \"A negative value is returned if not enough transactions and blocks\\n\"\n             \"have been observed to make an estimate for any number of blocks.\\n\"\n-            \"However it will not return a value below the mempool reject fee.\\n\"\n             \"\\nExample:\\n\"\n             + HelpExampleCli(\"estimatesmartfee\", \"6\")\n             );\n@@ -831,7 +830,7 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n \n     UniValue result(UniValue::VOBJ);\n     FeeCalculation feeCalc;\n-    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &feeCalc, ::mempool, conservative);\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &feeCalc, conservative);\n     result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n     result.push_back(Pair(\"blocks\", feeCalc.returnedTarget));\n     return result;"
      },
      {
        "sha": "fd8f7191f4fafbf24e13be6ddbc817c19220953d",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd29d3df299bd06c0e6bb218863e0c855b3b91af/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd29d3df299bd06c0e6bb218863e0c855b3b91af/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=fd29d3df299bd06c0e6bb218863e0c855b3b91af",
        "patch": "@@ -177,16 +177,6 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     for (int i = 2; i < 9; i++) { // At 9, the original estimate was already at the bottom (b/c scale = 2)\n         BOOST_CHECK(feeEst.estimateFee(i).GetFeePerK() < origFeeEst[i-1] - deltaFee);\n     }\n-\n-    // Test that if the mempool is limited, estimateSmartFee won't return a value below the mempool min fee\n-    mpool.addUnchecked(tx.GetHash(),  entry.Fee(feeV[5]).Time(GetTime()).Height(blocknum).FromTx(tx));\n-    // evict that transaction which should set a mempool min fee of minRelayTxFee + feeV[5]\n-    mpool.TrimToSize(1);\n-    BOOST_CHECK(mpool.GetMinFee(1).GetFeePerK() > feeV[5]);\n-    for (int i = 1; i < 10; i++) {\n-        BOOST_CHECK(feeEst.estimateSmartFee(i, NULL, mpool, true).GetFeePerK() >= feeEst.estimateRawFee(i, 0.85, FeeEstimateHorizon::MED_HALFLIFE).GetFeePerK());\n-        BOOST_CHECK(feeEst.estimateSmartFee(i, NULL, mpool, true).GetFeePerK() >= mpool.GetMinFee(1).GetFeePerK());\n-    }\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "8c4f637306c53c5b25bc80811041f87465707027",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd29d3df299bd06c0e6bb218863e0c855b3b91af/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd29d3df299bd06c0e6bb218863e0c855b3b91af/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fd29d3df299bd06c0e6bb218863e0c855b3b91af",
        "patch": "@@ -2951,12 +2951,18 @@ CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_c\n         if (coin_control.m_fee_mode == FeeEstimateMode::CONSERVATIVE) conservative_estimate = true;\n         else if (coin_control.m_fee_mode == FeeEstimateMode::ECONOMICAL) conservative_estimate = false;\n \n-        fee_needed = estimator.estimateSmartFee(target, feeCalc, pool, conservative_estimate).GetFee(nTxBytes);\n+        fee_needed = estimator.estimateSmartFee(target, feeCalc, conservative_estimate).GetFee(nTxBytes);\n         if (fee_needed == 0) {\n             // if we don't have enough data for estimateSmartFee, then use fallbackFee\n             fee_needed = fallbackFee.GetFee(nTxBytes);\n             if (feeCalc) feeCalc->reason = FeeReason::FALLBACK;\n         }\n+        // Obey mempool min fee when using smart fee estimation\n+        CAmount min_mempool_fee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nTxBytes);\n+        if (fee_needed < min_mempool_fee) {\n+            fee_needed = min_mempool_fee;\n+            if (feeCalc) feeCalc->reason = FeeReason::MEMPOOL_MIN;\n+        }\n     }\n \n     // prevent user from paying a fee below minRelayTxFee or minTxFee"
      }
    ]
  },
  {
    "sha": "11590d39b9888403ead8354302e308eca139ba17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTU5MGQzOWI5ODg4NDAzZWFkODM1NDMwMmUzMDhlY2ExMzliYTE3",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-12T18:42:57Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-15T03:41:40Z"
      },
      "message": "Properly bound check conf_target in wallet RPC calls",
      "tree": {
        "sha": "8b4a12b1209b00dc08ec71ef2e8db4573842ecd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b4a12b1209b00dc08ec71ef2e8db4573842ecd9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11590d39b9888403ead8354302e308eca139ba17",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11590d39b9888403ead8354302e308eca139ba17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11590d39b9888403ead8354302e308eca139ba17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11590d39b9888403ead8354302e308eca139ba17/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd29d3df299bd06c0e6bb218863e0c855b3b91af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd29d3df299bd06c0e6bb218863e0c855b3b91af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd29d3df299bd06c0e6bb218863e0c855b3b91af"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 18,
      "deletions": 9
    },
    "files": [
      {
        "sha": "b8c94d32ecf6a74453364f08198abe10f096d532",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11590d39b9888403ead8354302e308eca139ba17/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11590d39b9888403ead8354302e308eca139ba17/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=11590d39b9888403ead8354302e308eca139ba17",
        "patch": "@@ -30,6 +30,16 @@\n \n #include <univalue.h>\n \n+unsigned int ParseConfirmTarget(const UniValue& value)\n+{\n+    int target = value.get_int();\n+    unsigned int max_target = ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n+    if (target < 1 || (unsigned int)target > max_target) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid conf_target, must be between %u - %u\", 1, max_target));\n+    }\n+    return (unsigned int)target;\n+}\n+\n /**\n  * Return average network hashes per second based on the last 'lookup' blocks,\n  * or from the last difficulty change if 'lookup' is nonpositive."
      },
      {
        "sha": "868d7002b5ff465f1c317cc6a5b01e723c5cd28d",
        "filename": "src/rpc/mining.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11590d39b9888403ead8354302e308eca139ba17/src/rpc/mining.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11590d39b9888403ead8354302e308eca139ba17/src/rpc/mining.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.h?ref=11590d39b9888403ead8354302e308eca139ba17",
        "patch": "@@ -12,4 +12,7 @@\n /** Generate blocks (mine) */\n UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGenerate, uint64_t nMaxTries, bool keepScript);\n \n+/** Check bounds on a command line confirm target */\n+unsigned int ParseConfirmTarget(const UniValue& value);\n+\n #endif"
      },
      {
        "sha": "f983a61a9f701cf104df292f76449fbb65ce9d66",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 9,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11590d39b9888403ead8354302e308eca139ba17/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11590d39b9888403ead8354302e308eca139ba17/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=11590d39b9888403ead8354302e308eca139ba17",
        "patch": "@@ -460,7 +460,7 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n     }\n \n     if (request.params.size() > 6 && !request.params[6].isNull()) {\n-        coin_control.m_confirm_target = request.params[6].get_int();\n+        coin_control.m_confirm_target = ParseConfirmTarget(request.params[6]);\n     }\n \n     if (request.params.size() > 7 && !request.params[7].isNull()) {\n@@ -981,7 +981,7 @@ UniValue sendmany(const JSONRPCRequest& request)\n     }\n \n     if (request.params.size() > 6 && !request.params[6].isNull()) {\n-        coin_control.m_confirm_target = request.params[6].get_int();\n+        coin_control.m_confirm_target = ParseConfirmTarget(request.params[6]);\n     }\n \n     if (request.params.size() > 7 && !request.params[7].isNull()) {\n@@ -2795,7 +2795,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n             coinControl.signalRbf = options[\"replaceable\"].get_bool();\n         }\n         if (options.exists(\"conf_target\")) {\n-            coinControl.m_confirm_target = options[\"conf_target\"].get_int();\n+            coinControl.m_confirm_target = ParseConfirmTarget(options[\"conf_target\"]);\n         }\n         if (options.exists(\"estimate_mode\")) {\n             if (!FeeModeFromString(options[\"estimate_mode\"].get_str(), coinControl.m_fee_mode)) {\n@@ -2917,12 +2917,8 @@ UniValue bumpfee(const JSONRPCRequest& request)\n \n         if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n-        } else if (options.exists(\"confTarget\")) {\n-            int target = options[\"confTarget\"].get_int();\n-            if (target <= 0) { // FIXME: Check upper bound too\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n-            }\n-            coin_control.m_confirm_target = target;\n+        } else if (options.exists(\"confTarget\")) { // TODO: alias this to conf_target\n+            coin_control.m_confirm_target = ParseConfirmTarget(options[\"confTarget\"]);\n         } else if (options.exists(\"totalFee\")) {\n             totalFee = options[\"totalFee\"].get_int64();\n             if (totalFee <= 0) {"
      }
    ]
  },
  {
    "sha": "6835cb0ab26c913423cc2307c989579d05aabdcb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODM1Y2IwYWIyNmM5MTM0MjNjYzIzMDdjOTg5NTc5ZDA1YWFiZGNi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-03T15:46:43Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-15T12:26:50Z"
      },
      "message": "Avoid static analyzer warnings regarding uninitialized arguments\n\nAvoid static analyzer warnings regarding \"Function call argument\nis a pointer to uninitialized value\" in cases where we are\nintentionally using such arguments.\n\nThis is achieved by using ...\n\n`f(b.begin(), b.end())` (`std::array<char, N>`)\n\n... instead of ...\n\n`f(b, b + N)` (`char b[N]`)\n\nRationale:\n* Reduce false positives by guiding static analyzers regarding our\n  intentions.\n\nBefore this commit:\n\n```\n$ clang-tidy-3.5 -checks=* src/bench/base58.cpp\nbench/base58.cpp:23:9: warning: Function call argument is a pointer to uninitialized value [clang-analyzer-core.CallAndMessage]\n        EncodeBase58(b, b + 32);\n        ^\n$ clang-tidy-3.5 -checks=* src/bench/verify_script.cpp\nbench/verify_script.cpp:59:5: warning: Function call argument is a pointer to uninitialized value [clang-analyzer-core.CallAndMessage]\n    key.Set(vchKey, vchKey + 32, false);\n    ^\n$\n```\n\nAfter this commit:\n\n```\n$ clang-tidy-3.5 -checks=* src/bench/base58.cpp\n$ clang-tidy-3.5 -checks=* src/bench/verify_script.cpp\n$\n```",
      "tree": {
        "sha": "f624c3b4de8d9c619c99e1f5cbb3aaba6afada59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f624c3b4de8d9c619c99e1f5cbb3aaba6afada59"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6835cb0ab26c913423cc2307c989579d05aabdcb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6835cb0ab26c913423cc2307c989579d05aabdcb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6835cb0ab26c913423cc2307c989579d05aabdcb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6835cb0ab26c913423cc2307c989579d05aabdcb/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8fdd23a224ba236874ef662c4ca311b002dbcab3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fdd23a224ba236874ef662c4ca311b002dbcab3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8fdd23a224ba236874ef662c4ca311b002dbcab3"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 23,
      "deletions": 14
    },
    "files": [
      {
        "sha": "65e27a615d9344c765068a95676691a19314504a",
        "filename": "src/bench/base58.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 12,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6835cb0ab26c913423cc2307c989579d05aabdcb/src/bench/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6835cb0ab26c913423cc2307c989579d05aabdcb/src/bench/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/base58.cpp?ref=6835cb0ab26c913423cc2307c989579d05aabdcb",
        "patch": "@@ -7,34 +7,37 @@\n #include \"validation.h\"\n #include \"base58.h\"\n \n+#include <array>\n #include <vector>\n #include <string>\n \n \n static void Base58Encode(benchmark::State& state)\n {\n-    unsigned char buff[32] = {\n-        17, 79, 8, 99, 150, 189, 208, 162, 22, 23, 203, 163, 36, 58, 147,\n-        227, 139, 2, 215, 100, 91, 38, 11, 141, 253, 40, 117, 21, 16, 90,\n-        200, 24\n+    static const std::array<unsigned char, 32> buff = {\n+        {\n+            17, 79, 8, 99, 150, 189, 208, 162, 22, 23, 203, 163, 36, 58, 147,\n+            227, 139, 2, 215, 100, 91, 38, 11, 141, 253, 40, 117, 21, 16, 90,\n+            200, 24\n+        }\n     };\n-    unsigned char* b = buff;\n     while (state.KeepRunning()) {\n-        EncodeBase58(b, b + 32);\n+        EncodeBase58(buff.begin(), buff.end());\n     }\n }\n \n \n static void Base58CheckEncode(benchmark::State& state)\n {\n-    unsigned char buff[32] = {\n-        17, 79, 8, 99, 150, 189, 208, 162, 22, 23, 203, 163, 36, 58, 147,\n-        227, 139, 2, 215, 100, 91, 38, 11, 141, 253, 40, 117, 21, 16, 90,\n-        200, 24\n+    static const std::array<unsigned char, 32> buff = {\n+        {\n+            17, 79, 8, 99, 150, 189, 208, 162, 22, 23, 203, 163, 36, 58, 147,\n+            227, 139, 2, 215, 100, 91, 38, 11, 141, 253, 40, 117, 21, 16, 90,\n+            200, 24\n+        }\n     };\n-    unsigned char* b = buff;\n     std::vector<unsigned char> vch;\n-    vch.assign(b, b + 32);\n+    vch.assign(buff.begin(), buff.end());\n     while (state.KeepRunning()) {\n         EncodeBase58Check(vch);\n     }"
      },
      {
        "sha": "ef7381c1201db0d37438c7de10ca1d17e221333b",
        "filename": "src/bench/verify_script.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6835cb0ab26c913423cc2307c989579d05aabdcb/src/bench/verify_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6835cb0ab26c913423cc2307c989579d05aabdcb/src/bench/verify_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/verify_script.cpp?ref=6835cb0ab26c913423cc2307c989579d05aabdcb",
        "patch": "@@ -11,6 +11,8 @@\n #include \"script/sign.h\"\n #include \"streams.h\"\n \n+#include <array>\n+\n // FIXME: Dedup with BuildCreditingTransaction in test/script_tests.cpp.\n static CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)\n {\n@@ -55,8 +57,12 @@ static void VerifyScriptBench(benchmark::State& state)\n \n     // Keypair.\n     CKey key;\n-    const unsigned char vchKey[32] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1};\n-    key.Set(vchKey, vchKey + 32, false);\n+    static const std::array<unsigned char, 32> vchKey = {\n+        {\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1\n+        }\n+    };\n+    key.Set(vchKey.begin(), vchKey.end(), false);\n     CPubKey pubkey = key.GetPubKey();\n     uint160 pubkeyHash;\n     CHash160().Write(pubkey.begin(), pubkey.size()).Finalize(pubkeyHash.begin());"
      }
    ]
  },
  {
    "sha": "0189d8ed19eb435f7b355bb482ec748195a2c0b3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTg5ZDhlZDE5ZWI0MzVmN2IzNTViYjQ4MmVjNzQ4MTk1YTJjMGIz",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-15T12:28:40Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-15T12:28:40Z"
      },
      "message": "Fix typos",
      "tree": {
        "sha": "f57312242388d35e3223457508214fcf4ea52d4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f57312242388d35e3223457508214fcf4ea52d4e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0189d8ed19eb435f7b355bb482ec748195a2c0b3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0189d8ed19eb435f7b355bb482ec748195a2c0b3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0189d8ed19eb435f7b355bb482ec748195a2c0b3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0189d8ed19eb435f7b355bb482ec748195a2c0b3/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8fdd23a224ba236874ef662c4ca311b002dbcab3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fdd23a224ba236874ef662c4ca311b002dbcab3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8fdd23a224ba236874ef662c4ca311b002dbcab3"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "6f27b7b9dc5dff082ab3c773a99786789ae315de",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0189d8ed19eb435f7b355bb482ec748195a2c0b3/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0189d8ed19eb435f7b355bb482ec748195a2c0b3/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=0189d8ed19eb435f7b355bb482ec748195a2c0b3",
        "patch": "@@ -48,7 +48,7 @@ uint64_t CBlockHeaderAndShortTxIDs::GetShortID(const uint256& txhash) const {\n ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& cmpctblock, const std::vector<std::pair<uint256, CTransactionRef>>& extra_txn) {\n     if (cmpctblock.header.IsNull() || (cmpctblock.shorttxids.empty() && cmpctblock.prefilledtxn.empty()))\n         return READ_STATUS_INVALID;\n-    if (cmpctblock.shorttxids.size() + cmpctblock.prefilledtxn.size() > MAX_BLOCK_WEIGHT / MIN_SERIALIZEABLE_TRANSACTION_WEIGHT)\n+    if (cmpctblock.shorttxids.size() + cmpctblock.prefilledtxn.size() > MAX_BLOCK_WEIGHT / MIN_SERIALIZABLE_TRANSACTION_WEIGHT)\n         return READ_STATUS_INVALID;\n \n     assert(header.IsNull() && txn_available.empty());"
      },
      {
        "sha": "ddd4ee9fab489977a5d5f36a89f37ebdec767f9d",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0189d8ed19eb435f7b355bb482ec748195a2c0b3/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0189d8ed19eb435f7b355bb482ec748195a2c0b3/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=0189d8ed19eb435f7b355bb482ec748195a2c0b3",
        "patch": "@@ -21,7 +21,7 @@ static const int COINBASE_MATURITY = 100;\n static const int WITNESS_SCALE_FACTOR = 4;\n \n static const size_t MIN_TRANSACTION_WEIGHT = WITNESS_SCALE_FACTOR * 60; // 60 is the lower bound for the size of a valid serialized CTransaction\n-static const size_t MIN_SERIALIZEABLE_TRANSACTION_WEIGHT = WITNESS_SCALE_FACTOR * 10; // 10 is the lower bound for the size of a serialized CTransaction\n+static const size_t MIN_SERIALIZABLE_TRANSACTION_WEIGHT = WITNESS_SCALE_FACTOR * 10; // 10 is the lower bound for the size of a serialized CTransaction\n \n /** Flags for nSequence and nLockTime locks */\n enum {"
      },
      {
        "sha": "b0a6a2e3d800010adb94830c5006c19952eeabcf",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0189d8ed19eb435f7b355bb482ec748195a2c0b3/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0189d8ed19eb435f7b355bb482ec748195a2c0b3/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=0189d8ed19eb435f7b355bb482ec748195a2c0b3",
        "patch": "@@ -698,7 +698,7 @@ CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThr\n         break;\n     }\n     default: {\n-        throw std::out_of_range(\"CBlockPoicyEstimator::estimateRawFee unknown FeeEstimateHorizon\");\n+        throw std::out_of_range(\"CBlockPolicyEstimator::estimateRawFee unknown FeeEstimateHorizon\");\n     }\n     }\n \n@@ -730,7 +730,7 @@ unsigned int CBlockPolicyEstimator::HighestTargetTracked(FeeEstimateHorizon hori\n         return longStats->GetMaxConfirms();\n     }\n     default: {\n-        throw std::out_of_range(\"CBlockPoicyEstimator::HighestTargetTracked unknown FeeEstimateHorizon\");\n+        throw std::out_of_range(\"CBlockPolicyEstimator::HighestTargetTracked unknown FeeEstimateHorizon\");\n     }\n     }\n }"
      }
    ]
  },
  {
    "sha": "505955052e60e0681865f3064e005ca0d3aa90bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDU5NTUwNTJlNjBlMDY4MTg2NWYzMDY0ZTAwNWNhMGQzYWE5MGJm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-15T17:58:23Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-15T18:01:52Z"
      },
      "message": "Merge #10833: Fix typos\n\n0189d8ed1 Fix typos (practicalswift)\n\nTree-SHA512: bac96ab13964e7579c93d63fc7550eb091c316767cc33f2a52c18cd786537650668799603414d418680a5e04516abf1e304b10d5f4ad48a5dcba24b3f09a0387",
      "tree": {
        "sha": "f57312242388d35e3223457508214fcf4ea52d4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f57312242388d35e3223457508214fcf4ea52d4e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/505955052e60e0681865f3064e005ca0d3aa90bf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZaliQAAoJEKY26XYx92fgn90P/Ag1jQeol7b2NBpOCPtuIHTn\neFOPwXCbUD5rraww2H8PHUdmFgSeT9M8s6kOpDO/uy7Oyx449w8042R5DC0CKscY\nHnyZ/YBWSVJeyqmcCLl1QczFoh8YaQKCBOaHnAUddnoyUJO3UokQvaAsjqGPjDO6\nCNLsVZ52iGsNeyQlKW/jeKlpsVULU9npiTHV7bL2wv1pspdc3/lRUHVe1xCP2gvZ\niZxqCI8/17FkPesq8Z4dTBex999sFuZiUjIx4ZzQZOPJC/WAFk67VLbLKhpHhkZQ\nNLE2gBWpP7cRI6hT5qvYssJfBeciuUVKxbS3mPIvxnBn2A3jvxfHlFg7ddWQ628O\n9NW/+go6LspAFhdgRYhz8GXrfac8ILWDKDW3zQoKg1iZt/ugYpM1XCkzWN4Y/scv\nQJBV4LNtc4DO85YTZA/WoSeOW4j38Ym2MTeBf6q5wJjkCdNku2tP+pI2mbUwYYU9\nP4KR+PttI3Pp0+29OGuTIIXRd1getP3DDp4GgWOaoxC9ngBOO9vPecGjzBLdkcUO\nBfDfu8FoFk2Ay4KPHthee+zGEmL1PiJKp7wIwzN7sh2i4b5s5z7WjHZIA6XYXYwt\n+Cdo87k8YyrkxrBpguQH6dusU/S5wc1ucdBB2NPQHF02SemGarCg1kIl5M+EANiY\nF7XAL/hDiHlSBjQtEK+K\n=4axq\n-----END PGP SIGNATURE-----",
        "payload": "tree f57312242388d35e3223457508214fcf4ea52d4e\nparent 8fdd23a224ba236874ef662c4ca311b002dbcab3\nparent 0189d8ed19eb435f7b355bb482ec748195a2c0b3\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1500141503 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1500141712 -0700\n\nMerge #10833: Fix typos\n\n0189d8ed1 Fix typos (practicalswift)\n\nTree-SHA512: bac96ab13964e7579c93d63fc7550eb091c316767cc33f2a52c18cd786537650668799603414d418680a5e04516abf1e304b10d5f4ad48a5dcba24b3f09a0387\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/505955052e60e0681865f3064e005ca0d3aa90bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/505955052e60e0681865f3064e005ca0d3aa90bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/505955052e60e0681865f3064e005ca0d3aa90bf/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8fdd23a224ba236874ef662c4ca311b002dbcab3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fdd23a224ba236874ef662c4ca311b002dbcab3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8fdd23a224ba236874ef662c4ca311b002dbcab3"
      },
      {
        "sha": "0189d8ed19eb435f7b355bb482ec748195a2c0b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0189d8ed19eb435f7b355bb482ec748195a2c0b3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0189d8ed19eb435f7b355bb482ec748195a2c0b3"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "6f27b7b9dc5dff082ab3c773a99786789ae315de",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/505955052e60e0681865f3064e005ca0d3aa90bf/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/505955052e60e0681865f3064e005ca0d3aa90bf/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=505955052e60e0681865f3064e005ca0d3aa90bf",
        "patch": "@@ -48,7 +48,7 @@ uint64_t CBlockHeaderAndShortTxIDs::GetShortID(const uint256& txhash) const {\n ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& cmpctblock, const std::vector<std::pair<uint256, CTransactionRef>>& extra_txn) {\n     if (cmpctblock.header.IsNull() || (cmpctblock.shorttxids.empty() && cmpctblock.prefilledtxn.empty()))\n         return READ_STATUS_INVALID;\n-    if (cmpctblock.shorttxids.size() + cmpctblock.prefilledtxn.size() > MAX_BLOCK_WEIGHT / MIN_SERIALIZEABLE_TRANSACTION_WEIGHT)\n+    if (cmpctblock.shorttxids.size() + cmpctblock.prefilledtxn.size() > MAX_BLOCK_WEIGHT / MIN_SERIALIZABLE_TRANSACTION_WEIGHT)\n         return READ_STATUS_INVALID;\n \n     assert(header.IsNull() && txn_available.empty());"
      },
      {
        "sha": "ddd4ee9fab489977a5d5f36a89f37ebdec767f9d",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/505955052e60e0681865f3064e005ca0d3aa90bf/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/505955052e60e0681865f3064e005ca0d3aa90bf/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=505955052e60e0681865f3064e005ca0d3aa90bf",
        "patch": "@@ -21,7 +21,7 @@ static const int COINBASE_MATURITY = 100;\n static const int WITNESS_SCALE_FACTOR = 4;\n \n static const size_t MIN_TRANSACTION_WEIGHT = WITNESS_SCALE_FACTOR * 60; // 60 is the lower bound for the size of a valid serialized CTransaction\n-static const size_t MIN_SERIALIZEABLE_TRANSACTION_WEIGHT = WITNESS_SCALE_FACTOR * 10; // 10 is the lower bound for the size of a serialized CTransaction\n+static const size_t MIN_SERIALIZABLE_TRANSACTION_WEIGHT = WITNESS_SCALE_FACTOR * 10; // 10 is the lower bound for the size of a serialized CTransaction\n \n /** Flags for nSequence and nLockTime locks */\n enum {"
      },
      {
        "sha": "b0a6a2e3d800010adb94830c5006c19952eeabcf",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/505955052e60e0681865f3064e005ca0d3aa90bf/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/505955052e60e0681865f3064e005ca0d3aa90bf/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=505955052e60e0681865f3064e005ca0d3aa90bf",
        "patch": "@@ -698,7 +698,7 @@ CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThr\n         break;\n     }\n     default: {\n-        throw std::out_of_range(\"CBlockPoicyEstimator::estimateRawFee unknown FeeEstimateHorizon\");\n+        throw std::out_of_range(\"CBlockPolicyEstimator::estimateRawFee unknown FeeEstimateHorizon\");\n     }\n     }\n \n@@ -730,7 +730,7 @@ unsigned int CBlockPolicyEstimator::HighestTargetTracked(FeeEstimateHorizon hori\n         return longStats->GetMaxConfirms();\n     }\n     default: {\n-        throw std::out_of_range(\"CBlockPoicyEstimator::HighestTargetTracked unknown FeeEstimateHorizon\");\n+        throw std::out_of_range(\"CBlockPolicyEstimator::HighestTargetTracked unknown FeeEstimateHorizon\");\n     }\n     }\n }"
      }
    ]
  },
  {
    "sha": "e061d8d7abb66c234786ea1c855d4cbb1b9b22ef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDYxZDhkN2FiYjY2YzIzNDc4NmVhMWM4NTVkNGNiYjFiOWIyMmVm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-15T18:04:04Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-15T18:04:04Z"
      },
      "message": "Remove declaration of unused function: void UpdatedTransaction(const uint256 &)",
      "tree": {
        "sha": "36815aa43aadb7472672ec5b25d0336a47121142",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36815aa43aadb7472672ec5b25d0336a47121142"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e061d8d7abb66c234786ea1c855d4cbb1b9b22ef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e061d8d7abb66c234786ea1c855d4cbb1b9b22ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e061d8d7abb66c234786ea1c855d4cbb1b9b22ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e061d8d7abb66c234786ea1c855d4cbb1b9b22ef/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8fdd23a224ba236874ef662c4ca311b002dbcab3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fdd23a224ba236874ef662c4ca311b002dbcab3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8fdd23a224ba236874ef662c4ca311b002dbcab3"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d6da2bc1fd2d28444ad925416af5f20136990e68",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e061d8d7abb66c234786ea1c855d4cbb1b9b22ef/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e061d8d7abb66c234786ea1c855d4cbb1b9b22ef/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=e061d8d7abb66c234786ea1c855d4cbb1b9b22ef",
        "patch": "@@ -86,7 +86,6 @@ class CMainSignals {\n     void TransactionAddedToMempool(const CTransactionRef &);\n     void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef> &);\n     void BlockDisconnected(const std::shared_ptr<const CBlock> &);\n-    void UpdatedTransaction(const uint256 &);\n     void SetBestChain(const CBlockLocator &);\n     void Inventory(const uint256 &);\n     void Broadcast(int64_t nBestBlockTime, CConnman* connman);"
      }
    ]
  },
  {
    "sha": "afd2fca911c4a5e3a4d1f0993a226d40f250aff4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZmQyZmNhOTExYzRhNWUzYTRkMWYwOTkzYTIyNmQ0MGYyNTBhZmY0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-15T18:10:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-15T18:12:24Z"
      },
      "message": "Merge #10807: getbalance example covers at least 6 confirms\n\n228987d84 getbalance example covers at least 6 confirms (Gregory Sanders)\n\nTree-SHA512: 328d60b007ee75d809f4d28a7d9e5537d3c1446bd30c4c2ae57c690b8e83f6287cbcd3d8c955e8ba07ab62e27f9d27497c55219ff14fd5af7759dec465673fa2",
      "tree": {
        "sha": "1156acf58c3b413a3aa2fb9574f295d04a73ba06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1156acf58c3b413a3aa2fb9574f295d04a73ba06"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afd2fca911c4a5e3a4d1f0993a226d40f250aff4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZalsIAAoJEKY26XYx92fgiTUP/R6O/lXFVpyt3r8YPnGWj4B2\nSMSCx9AxgIa63dHblOB3/6MWXrBiz35l7KmWxPKEoe6xOGYzbuaSbI9r7/1Hgfi4\n2BwGo64WLB1tiBHghubFMQeaVvJZ8nvx30JrKw22VxodoNPtHiDMS552HElxkLry\nHc68N+IAIlOUEYTjW5/kr+t372+bDN9QMqjOKOOqjSslU9lZyo54KGXKkT9RVMdm\nFLU8EcMilO/pCTdTDaW3V2KT++Lffq1gAVE1VhTWiVjPkHIfSNExf+hVljur3uLx\n1lshpgS9aQFq10RfRYrMEGntCjQqNi4/5kT4jy8uBaTDNQxmkKHOD7jRpRacIVxt\nggmT7mwQwJTMRB1oYXvwsxqtlppyPof1Afv2TcqhSPhSfl+8o8hq92KodWGeUeWn\n/oc9RnD/kGo/jbCUP/Uh9b1jMebUVO1vVeKASQpVWxHY/ewP7guzKkW8/HvunLxG\nIP9KH513emM2B8JEBYUUvR0nPjUleueZPjkMdlBdXT3jFFgYGW0HVTneA/haYFMq\n+j0r+4GC/pstOMa49iOZty9LPZXtgW3yHQ/vdJBlayDcFuSP5zVod2XwE/SiC2w9\nRTycn7O/DCeJFS0Y5I2+qe8Anzrd9zuitBSuhHW8GyLnjim2JQbebwm7iZG3MzKg\neFgCM4XUcBijWU1bn2h8\n=+00F\n-----END PGP SIGNATURE-----",
        "payload": "tree 1156acf58c3b413a3aa2fb9574f295d04a73ba06\nparent 505955052e60e0681865f3064e005ca0d3aa90bf\nparent 228987d84c352de691315474649475f3fbc5de28\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1500142231 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1500142344 -0700\n\nMerge #10807: getbalance example covers at least 6 confirms\n\n228987d84 getbalance example covers at least 6 confirms (Gregory Sanders)\n\nTree-SHA512: 328d60b007ee75d809f4d28a7d9e5537d3c1446bd30c4c2ae57c690b8e83f6287cbcd3d8c955e8ba07ab62e27f9d27497c55219ff14fd5af7759dec465673fa2\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afd2fca911c4a5e3a4d1f0993a226d40f250aff4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/afd2fca911c4a5e3a4d1f0993a226d40f250aff4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afd2fca911c4a5e3a4d1f0993a226d40f250aff4/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "505955052e60e0681865f3064e005ca0d3aa90bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/505955052e60e0681865f3064e005ca0d3aa90bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/505955052e60e0681865f3064e005ca0d3aa90bf"
      },
      {
        "sha": "228987d84c352de691315474649475f3fbc5de28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/228987d84c352de691315474649475f3fbc5de28",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/228987d84c352de691315474649475f3fbc5de28"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "873542a966862ac79eb3a869d66a52be774482cf",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afd2fca911c4a5e3a4d1f0993a226d40f250aff4/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afd2fca911c4a5e3a4d1f0993a226d40f250aff4/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=afd2fca911c4a5e3a4d1f0993a226d40f250aff4",
        "patch": "@@ -740,9 +740,9 @@ UniValue getbalance(const JSONRPCRequest& request)\n             \"\\nResult:\\n\"\n             \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this account.\\n\"\n             \"\\nExamples:\\n\"\n-            \"\\nThe total amount in the wallet\\n\"\n+            \"\\nThe total amount in the wallet with 1 or more confirmations\\n\"\n             + HelpExampleCli(\"getbalance\", \"\") +\n-            \"\\nThe total amount in the wallet at least 5 blocks confirmed\\n\"\n+            \"\\nThe total amount in the wallet at least 6 blocks confirmed\\n\"\n             + HelpExampleCli(\"getbalance\", \"\\\"*\\\" 6\") +\n             \"\\nAs a json rpc call\\n\"\n             + HelpExampleRpc(\"getbalance\", \"\\\"*\\\", 6\")"
      }
    ]
  },
  {
    "sha": "ff7365e780624a1ef66c12a6d7b61448a3f9294c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjczNjVlNzgwNjI0YTFlZjY2YzEyYTZkN2I2MTQ0OGEzZjkyOTRj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-05-03T15:49:58Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-15T19:15:25Z"
      },
      "message": "[tests] fix flake8 warnings in zapwallettxes.py",
      "tree": {
        "sha": "8910b6b467f9f887b1ae7da077e8010d56d50346",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8910b6b467f9f887b1ae7da077e8010d56d50346"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff7365e780624a1ef66c12a6d7b61448a3f9294c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff7365e780624a1ef66c12a6d7b61448a3f9294c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff7365e780624a1ef66c12a6d7b61448a3f9294c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff7365e780624a1ef66c12a6d7b61448a3f9294c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "afd2fca911c4a5e3a4d1f0993a226d40f250aff4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afd2fca911c4a5e3a4d1f0993a226d40f250aff4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afd2fca911c4a5e3a4d1f0993a226d40f250aff4"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 26,
      "deletions": 22
    },
    "files": [
      {
        "sha": "afe944132b407ef1d2b8f4723f0100837f40a47f",
        "filename": "test/functional/zapwallettxes.py",
        "status": "modified",
        "additions": 26,
        "deletions": 22,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff7365e780624a1ef66c12a6d7b61448a3f9294c/test/functional/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff7365e780624a1ef66c12a6d7b61448a3f9294c/test/functional/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zapwallettxes.py?ref=ff7365e780624a1ef66c12a6d7b61448a3f9294c",
        "patch": "@@ -13,8 +13,12 @@\n   available, but that the unconfirmed transaction has been zapped.\n \"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-\n+from test_framework.util import (assert_equal,\n+                                 assert_raises,\n+                                 bitcoind_processes,\n+                                 connect_nodes_bi,\n+                                 JSONRPCException,\n+                                 )\n \n class ZapWalletTXesTest (BitcoinTestFramework):\n \n@@ -25,56 +29,56 @@ def __init__(self):\n \n     def setup_network(self):\n         super().setup_network()\n-        connect_nodes_bi(self.nodes,0,2)\n+        connect_nodes_bi(self.nodes, 0, 2)\n \n-    def run_test (self):\n+    def run_test(self):\n         self.log.info(\"Mining blocks...\")\n         self.nodes[0].generate(1)\n         self.sync_all()\n         self.nodes[1].generate(101)\n         self.sync_all()\n-        \n+\n         assert_equal(self.nodes[0].getbalance(), 50)\n-        \n+\n         txid0 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11)\n         txid1 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 10)\n         self.sync_all()\n         self.nodes[0].generate(1)\n         self.sync_all()\n-        \n+\n         txid2 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11)\n         txid3 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 10)\n-        \n+\n         tx0 = self.nodes[0].gettransaction(txid0)\n-        assert_equal(tx0['txid'], txid0) #tx0 must be available (confirmed)\n-        \n+        assert_equal(tx0['txid'], txid0)  # tx0 must be available (confirmed)\n+\n         tx1 = self.nodes[0].gettransaction(txid1)\n-        assert_equal(tx1['txid'], txid1) #tx1 must be available (confirmed)\n-        \n+        assert_equal(tx1['txid'], txid1)  # tx1 must be available (confirmed)\n+\n         tx2 = self.nodes[0].gettransaction(txid2)\n-        assert_equal(tx2['txid'], txid2) #tx2 must be available (unconfirmed)\n-        \n+        assert_equal(tx2['txid'], txid2)  # tx2 must be available (unconfirmed)\n+\n         tx3 = self.nodes[0].gettransaction(txid3)\n-        assert_equal(tx3['txid'], txid3) #tx3 must be available (unconfirmed)\n-        \n+        assert_equal(tx3['txid'], txid3)  # tx3 must be available (unconfirmed)\n+\n         #restart bitcoind\n         self.stop_node(0)\n         self.nodes[0] = self.start_node(0,self.options.tmpdir)\n         \n         tx3 = self.nodes[0].gettransaction(txid3)\n-        assert_equal(tx3['txid'], txid3) #tx must be available (unconfirmed)\n-        \n+        assert_equal(tx3['txid'], txid3)  # tx must be available (unconfirmed)\n+\n         self.stop_node(0)\n         \n         #restart bitcoind with zapwallettxes\n         self.nodes[0] = self.start_node(0,self.options.tmpdir, [\"-zapwallettxes=1\"])\n-        \n+\n         assert_raises(JSONRPCException, self.nodes[0].gettransaction, [txid3])\n-        #there must be an exception because the unconfirmed wallettx0 must be gone by now\n+        # there must be an exception because the unconfirmed wallettx0 must be gone by now\n \n         tx0 = self.nodes[0].gettransaction(txid0)\n-        assert_equal(tx0['txid'], txid0) #tx0 (confirmed) must still be available because it was confirmed\n+        assert_equal(tx0['txid'], txid0)  # tx0 (confirmed) must still be available because it was confirmed\n \n \n if __name__ == '__main__':\n-    ZapWalletTXesTest ().main ()\n+    ZapWalletTXesTest().main()"
      }
    ]
  },
  {
    "sha": "e7a2181b49774f2cc29839ebbdc206bcdb715a7f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplN2EyMTgxYjQ5Nzc0ZjJjYzI5ODM5ZWJiZGMyMDZiY2RiNzE1YTdm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-05-03T17:36:13Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-15T19:15:25Z"
      },
      "message": "[wallet] fix zapwallettxes interaction with persistent mempool\n\nzapwallettxes previously did not interact well with persistent mempool.\nzapwallettxes would cause wallet transactions to be zapped, but they\nwould then be reloaded from the mempool on startup. This commit softsets\npersistmempool to false if zapwallettxes is enabled so transactions are\nactually zapped.",
      "tree": {
        "sha": "08933e8a3d37a1f35ee45ccc8313540aa8d16c0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08933e8a3d37a1f35ee45ccc8313540aa8d16c0f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7a2181b49774f2cc29839ebbdc206bcdb715a7f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7a2181b49774f2cc29839ebbdc206bcdb715a7f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e7a2181b49774f2cc29839ebbdc206bcdb715a7f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7a2181b49774f2cc29839ebbdc206bcdb715a7f/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff7365e780624a1ef66c12a6d7b61448a3f9294c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff7365e780624a1ef66c12a6d7b61448a3f9294c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff7365e780624a1ef66c12a6d7b61448a3f9294c"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 41,
      "deletions": 44
    },
    "files": [
      {
        "sha": "4366428f5c706681a1a6d25a8da5e655c7df166b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7a2181b49774f2cc29839ebbdc206bcdb715a7f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7a2181b49774f2cc29839ebbdc206bcdb715a7f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e7a2181b49774f2cc29839ebbdc206bcdb715a7f",
        "patch": "@@ -4043,6 +4043,11 @@ bool CWallet::ParameterInteraction()\n         }\n     }\n \n+    // -zapwallettx implies dropping the mempool on startup\n+    if (GetBoolArg(\"-zapwallettxes\", false) && SoftSetBoolArg(\"-persistmempool\", false)) {\n+        LogPrintf(\"%s: parameter interaction: -zapwallettxes=<mode> -> setting -persistmempool=0\\n\", __func__);\n+    }\n+\n     // -zapwallettx implies a rescan\n     if (GetBoolArg(\"-zapwallettxes\", false)) {\n         if (is_multiwallet) {"
      },
      {
        "sha": "af867d7a52c772e50917b7cc63faa1a57ad32be8",
        "filename": "test/functional/zapwallettxes.py",
        "status": "modified",
        "additions": 36,
        "deletions": 44,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7a2181b49774f2cc29839ebbdc206bcdb715a7f/test/functional/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7a2181b49774f2cc29839ebbdc206bcdb715a7f/test/functional/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zapwallettxes.py?ref=e7a2181b49774f2cc29839ebbdc206bcdb715a7f",
        "patch": "@@ -4,81 +4,73 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the zapwallettxes functionality.\n \n-- start three bitcoind nodes\n-- create four transactions on node 0 - two are confirmed and two are\n-  unconfirmed.\n-- restart node 1 and verify that both the confirmed and the unconfirmed\n+- start two bitcoind nodes\n+- create two transactions on node 0 - one is confirmed and one is unconfirmed.\n+- restart node 0 and verify that both the confirmed and the unconfirmed\n   transactions are still available.\n-- restart node 0 and verify that the confirmed transactions are still\n-  available, but that the unconfirmed transaction has been zapped.\n+- restart node 0 with zapwallettxes and persistmempool, and verify that both\n+  the confirmed and the unconfirmed transactions are still available.\n+- restart node 0 with just zapwallettxed and verify that the confirmed\n+  transactions are still available, but that the unconfirmed transaction has\n+  been zapped.\n \"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (assert_equal,\n-                                 assert_raises,\n-                                 bitcoind_processes,\n-                                 connect_nodes_bi,\n-                                 JSONRPCException,\n+                                 assert_raises_jsonrpc,\n                                  )\n \n class ZapWalletTXesTest (BitcoinTestFramework):\n \n     def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n-        self.num_nodes = 3\n-\n-    def setup_network(self):\n-        super().setup_network()\n-        connect_nodes_bi(self.nodes, 0, 2)\n+        self.num_nodes = 2\n \n     def run_test(self):\n         self.log.info(\"Mining blocks...\")\n         self.nodes[0].generate(1)\n         self.sync_all()\n-        self.nodes[1].generate(101)\n+        self.nodes[1].generate(100)\n         self.sync_all()\n \n-        assert_equal(self.nodes[0].getbalance(), 50)\n+        # This transaction will be confirmed\n+        txid1 = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 10)\n \n-        txid0 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11)\n-        txid1 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 10)\n-        self.sync_all()\n         self.nodes[0].generate(1)\n         self.sync_all()\n \n-        txid2 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11)\n-        txid3 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 10)\n-\n-        tx0 = self.nodes[0].gettransaction(txid0)\n-        assert_equal(tx0['txid'], txid0)  # tx0 must be available (confirmed)\n+        # This transaction will not be confirmed\n+        txid2 = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 20)\n \n-        tx1 = self.nodes[0].gettransaction(txid1)\n-        assert_equal(tx1['txid'], txid1)  # tx1 must be available (confirmed)\n+        # Confirmed and unconfirmed transactions are now in the wallet.\n+        assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n+        assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n \n-        tx2 = self.nodes[0].gettransaction(txid2)\n-        assert_equal(tx2['txid'], txid2)  # tx2 must be available (unconfirmed)\n+        # Stop-start node0. Both confirmed and unconfirmed transactions remain in the wallet.\n+        self.stop_node(0)\n+        self.nodes[0] = self.start_node(0, self.options.tmpdir)\n \n-        tx3 = self.nodes[0].gettransaction(txid3)\n-        assert_equal(tx3['txid'], txid3)  # tx3 must be available (unconfirmed)\n+        assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n+        assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n \n-        #restart bitcoind\n+        # Stop node0 and restart with zapwallettxes and persistmempool. The unconfirmed\n+        # transaction is zapped from the wallet, but is re-added when the mempool is reloaded.\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0,self.options.tmpdir)\n-        \n-        tx3 = self.nodes[0].gettransaction(txid3)\n-        assert_equal(tx3['txid'], txid3)  # tx must be available (unconfirmed)\n+        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-persistmempool=1\", \"-zapwallettxes=2\"])\n \n-        self.stop_node(0)\n-        \n-        #restart bitcoind with zapwallettxes\n-        self.nodes[0] = self.start_node(0,self.options.tmpdir, [\"-zapwallettxes=1\"])\n+        assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n+        assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n \n-        assert_raises(JSONRPCException, self.nodes[0].gettransaction, [txid3])\n-        # there must be an exception because the unconfirmed wallettx0 must be gone by now\n+        # Stop node0 and restart with zapwallettxes, but not persistmempool.\n+        # The unconfirmed transaction is zapped and is no longer in the wallet.\n+        self.stop_node(0)\n+        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-zapwallettxes=2\"])\n \n-        tx0 = self.nodes[0].gettransaction(txid0)\n-        assert_equal(tx0['txid'], txid0)  # tx0 (confirmed) must still be available because it was confirmed\n+        # tx1 is still be available because it was confirmed\n+        assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n \n+        # This will raise an exception because the unconfirmed transaction has been zapped\n+        assert_raises_jsonrpc(-5, 'Invalid or non-wallet transaction id', self.nodes[0].gettransaction, txid2)\n \n if __name__ == '__main__':\n     ZapWalletTXesTest().main()"
      }
    ]
  },
  {
    "sha": "10b22e3141a603ec891d2cfc7100c29c7409aabe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGIyMmUzMTQxYTYwM2VjODkxZDJjZmM3MTAwYzI5Yzc0MDlhYWJl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-15T19:06:13Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-15T19:22:50Z"
      },
      "message": "Merge #10760: Avoid dereference-of-casted-pointer\n\n0aadc11fd Avoid dereference-of-casted-pointer (Pieter Wuille)\n\nPull request description:\n\n  And prefer a static_cast to the intended reference type.\n\nTree-SHA512: e83b20023a4dca6029b46f7040a8a6fd54e1b42112ec0c87c3c3b567ed641de97a9e2335b57a2efb075491f641e5b977bc226a474276bea0c3c3c71d8d6ac54d",
      "tree": {
        "sha": "6659c1b76b6371b6ec453f77dfee463b28407384",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6659c1b76b6371b6ec453f77dfee463b28407384"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10b22e3141a603ec891d2cfc7100c29c7409aabe",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZamuKAAoJEKY26XYx92fgBZEP/itFI6P+vUdVPplToXDUzg0q\ngxx/IxwnTwVL6UOWol0yKeW/G8rP/+aJBtYIQ+NKGz3pIV6AelwnvSlDbIweCJx0\n4n6riM1h0zefj4vzTfrtyK1kN9md/mJFjnwYijXMQsFXhSXlCeF8IUoYJ/6sb8tC\nuLnSsNEvtBArGD/XbPup3JFl/qGPtCrKNaOVb4VXW1rjUGOsOVgeaxXNVN49wt+z\nEyYglEoF2LHrKTqa6r9afpgB0CxfSNfZPJBDthQAnwVES1OcHO5KXYSLHoxVL/7x\nKKVT77tW4FBRlwl+W4kLxXykH5mPwi7LSA2QfsUGTBu/iZVMbBXOrPEypzji9rSM\n8CT6WET5jk9NJZ2X9JOtUyZglXnDFxhkqS/cQoSCpP0pelMKXl5aiU9DgUDq8lCp\nvcVrpb+4oF4Gr5EKvhLUFYPM+XY5w/sA4zzy78ig5iseX2pOuLJifY2l6bnOgHe3\nD2uir9BafDS9bqQ3VeF6Qwk03BiF711pASZS2vcwhX6CYv8Q4vJla9ta0cqoqppE\n9tX6mMSrZUbg0M2xc8pYInsrF+74CPqdJPmj22Mlt08Zi5WurcELnH73atRvX0dE\n8JLgYbKfeVFXRNvTun7wlrIZGTBgtmeu/P2Ij5BScvVTgq3fPLv9Uze5Yy6Oqc+c\nR7m3PAo0fOgr6RvHmbFq\n=DgY7\n-----END PGP SIGNATURE-----",
        "payload": "tree 6659c1b76b6371b6ec453f77dfee463b28407384\nparent afd2fca911c4a5e3a4d1f0993a226d40f250aff4\nparent 0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1500145573 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1500146570 -0700\n\nMerge #10760: Avoid dereference-of-casted-pointer\n\n0aadc11fd Avoid dereference-of-casted-pointer (Pieter Wuille)\n\nPull request description:\n\n  And prefer a static_cast to the intended reference type.\n\nTree-SHA512: e83b20023a4dca6029b46f7040a8a6fd54e1b42112ec0c87c3c3b567ed641de97a9e2335b57a2efb075491f641e5b977bc226a474276bea0c3c3c71d8d6ac54d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10b22e3141a603ec891d2cfc7100c29c7409aabe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10b22e3141a603ec891d2cfc7100c29c7409aabe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10b22e3141a603ec891d2cfc7100c29c7409aabe/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "afd2fca911c4a5e3a4d1f0993a226d40f250aff4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afd2fca911c4a5e3a4d1f0993a226d40f250aff4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afd2fca911c4a5e3a4d1f0993a226d40f250aff4"
      },
      {
        "sha": "0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 26,
      "deletions": 18
    },
    "files": [
      {
        "sha": "f038e7b15487471566295dce78d24a6f903c83ab",
        "filename": "src/core_memusage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10b22e3141a603ec891d2cfc7100c29c7409aabe/src/core_memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10b22e3141a603ec891d2cfc7100c29c7409aabe/src/core_memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_memusage.h?ref=10b22e3141a603ec891d2cfc7100c29c7409aabe",
        "patch": "@@ -10,7 +10,7 @@\n #include \"memusage.h\"\n \n static inline size_t RecursiveDynamicUsage(const CScript& script) {\n-    return memusage::DynamicUsage(*static_cast<const CScriptBase*>(&script));\n+    return memusage::DynamicUsage(script);\n }\n \n static inline size_t RecursiveDynamicUsage(const COutPoint& out) {"
      },
      {
        "sha": "041034bb8b6f78ed03c995ff8e2877639ffad659",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10b22e3141a603ec891d2cfc7100c29c7409aabe/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10b22e3141a603ec891d2cfc7100c29c7409aabe/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=10b22e3141a603ec891d2cfc7100c29c7409aabe",
        "patch": "@@ -106,7 +106,7 @@ class CTxIn\n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(prevout);\n-        READWRITE(*(CScriptBase*)(&scriptSig));\n+        READWRITE(scriptSig);\n         READWRITE(nSequence);\n     }\n \n@@ -146,7 +146,7 @@ class CTxOut\n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(nValue);\n-        READWRITE(*(CScriptBase*)(&scriptPubKey));\n+        READWRITE(scriptPubKey);\n     }\n \n     void SetNull()"
      },
      {
        "sha": "6178a1c7ab1c44447f4e8f90e7e09918b8affe86",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10b22e3141a603ec891d2cfc7100c29c7409aabe/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10b22e3141a603ec891d2cfc7100c29c7409aabe/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=10b22e3141a603ec891d2cfc7100c29c7409aabe",
        "patch": "@@ -798,7 +798,7 @@ static void ApplyStats(CCoinsStats &stats, CHashWriter& ss, const uint256& hash,\n     stats.nTransactions++;\n     for (const auto output : outputs) {\n         ss << VARINT(output.first + 1);\n-        ss << *(const CScriptBase*)(&output.second.out.scriptPubKey);\n+        ss << output.second.out.scriptPubKey;\n         ss << VARINT(output.second.out.nValue);\n         stats.nTransactionOutputs++;\n         stats.nTotalAmount += output.second.out.nValue;"
      },
      {
        "sha": "8a121774a040e7ef3a2359c805e4e0fd3513a3fd",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10b22e3141a603ec891d2cfc7100c29c7409aabe/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10b22e3141a603ec891d2cfc7100c29c7409aabe/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=10b22e3141a603ec891d2cfc7100c29c7409aabe",
        "patch": "@@ -1099,7 +1099,7 @@ class CTransactionSignatureSerializer {\n         // Serialize the script\n         if (nInput != nIn)\n             // Blank out other inputs' signatures\n-            ::Serialize(s, CScriptBase());\n+            ::Serialize(s, CScript());\n         else\n             SerializeScriptCode(s);\n         // Serialize the nSequence\n@@ -1207,7 +1207,7 @@ uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsig\n         // The prevout may already be contained in hashPrevout, and the nSequence\n         // may already be contain in hashSequence.\n         ss << txTo.vin[nIn].prevout;\n-        ss << static_cast<const CScriptBase&>(scriptCode);\n+        ss << scriptCode;\n         ss << amount;\n         ss << txTo.vin[nIn].nSequence;\n         // Outputs (none/one/all, depending on flags)"
      },
      {
        "sha": "d16bfd0e00eaa8868e299d728f72f68ef649f936",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10b22e3141a603ec891d2cfc7100c29c7409aabe/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10b22e3141a603ec891d2cfc7100c29c7409aabe/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=10b22e3141a603ec891d2cfc7100c29c7409aabe",
        "patch": "@@ -8,6 +8,7 @@\n \n #include \"crypto/common.h\"\n #include \"prevector.h\"\n+#include \"serialize.h\"\n \n #include <assert.h>\n #include <climits>\n@@ -404,6 +405,13 @@ class CScript : public CScriptBase\n     CScript(std::vector<unsigned char>::const_iterator pbegin, std::vector<unsigned char>::const_iterator pend) : CScriptBase(pbegin, pend) { }\n     CScript(const unsigned char* pbegin, const unsigned char* pend) : CScriptBase(pbegin, pend) { }\n \n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(static_cast<CScriptBase&>(*this));\n+    }\n+\n     CScript& operator+=(const CScript& b)\n     {\n         insert(end(), b.begin(), b.end());"
      },
      {
        "sha": "093509e61c563cf98223869d4442f117fa6e907f",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10b22e3141a603ec891d2cfc7100c29c7409aabe/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10b22e3141a603ec891d2cfc7100c29c7409aabe/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=10b22e3141a603ec891d2cfc7100c29c7409aabe",
        "patch": "@@ -95,7 +95,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n         uint256 in2 = InsecureRand256();\n         BOOST_CHECK(dbw.Write(key2, in2));\n \n-        std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper*>(&dbw)->NewIterator());\n+        std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper&>(dbw).NewIterator());\n \n         // Be sure to seek past the obfuscation key (if it exists)\n         it->Seek(key);\n@@ -210,7 +210,7 @@ BOOST_AUTO_TEST_CASE(iterator_ordering)\n         BOOST_CHECK(dbw.Write(key, value));\n     }\n \n-    std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper*>(&dbw)->NewIterator());\n+    std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper&>(dbw).NewIterator());\n     for (int c=0; c<2; ++c) {\n         int seek_start;\n         if (c == 0)\n@@ -286,7 +286,7 @@ BOOST_AUTO_TEST_CASE(iterator_string_ordering)\n         }\n     }\n \n-    std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper*>(&dbw)->NewIterator());\n+    std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper&>(dbw).NewIterator());\n     for (int c=0; c<2; ++c) {\n         int seek_start;\n         if (c == 0)"
      },
      {
        "sha": "aa0b73a41748badb54dd84c8d795681909864924",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10b22e3141a603ec891d2cfc7100c29c7409aabe/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10b22e3141a603ec891d2cfc7100c29c7409aabe/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=10b22e3141a603ec891d2cfc7100c29c7409aabe",
        "patch": "@@ -172,7 +172,7 @@ bool CBlockTreeDB::ReadLastBlockFile(int &nFile) {\n \n CCoinsViewCursor *CCoinsViewDB::Cursor() const\n {\n-    CCoinsViewDBCursor *i = new CCoinsViewDBCursor(const_cast<CDBWrapper*>(&db)->NewIterator(), GetBestBlock());\n+    CCoinsViewDBCursor *i = new CCoinsViewDBCursor(const_cast<CDBWrapper&>(db).NewIterator(), GetBestBlock());\n     /* It seems that there are no \"const iterators\" for LevelDB.  Since we\n        only need read operations on it, use a const-cast to get around\n        that restriction.  */"
      },
      {
        "sha": "65a28af46dc24ddeaf5927abfa89198fc6a69249",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10b22e3141a603ec891d2cfc7100c29c7409aabe/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10b22e3141a603ec891d2cfc7100c29c7409aabe/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=10b22e3141a603ec891d2cfc7100c29c7409aabe",
        "patch": "@@ -94,23 +94,23 @@ bool CWalletDB::WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey)\n \n bool CWalletDB::WriteCScript(const uint160& hash, const CScript& redeemScript)\n {\n-    return WriteIC(std::make_pair(std::string(\"cscript\"), hash), *(const CScriptBase*)(&redeemScript), false);\n+    return WriteIC(std::make_pair(std::string(\"cscript\"), hash), redeemScript, false);\n }\n \n bool CWalletDB::WriteWatchOnly(const CScript &dest, const CKeyMetadata& keyMeta)\n {\n-    if (!WriteIC(std::make_pair(std::string(\"watchmeta\"), *(const CScriptBase*)(&dest)), keyMeta)) {\n+    if (!WriteIC(std::make_pair(std::string(\"watchmeta\"), dest), keyMeta)) {\n         return false;\n     }\n-    return WriteIC(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)), '1');\n+    return WriteIC(std::make_pair(std::string(\"watchs\"), dest), '1');\n }\n \n bool CWalletDB::EraseWatchOnly(const CScript &dest)\n {\n-    if (!EraseIC(std::make_pair(std::string(\"watchmeta\"), *(const CScriptBase*)(&dest)))) {\n+    if (!EraseIC(std::make_pair(std::string(\"watchmeta\"), dest))) {\n         return false;\n     }\n-    return EraseIC(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)));\n+    return EraseIC(std::make_pair(std::string(\"watchs\"), dest));\n }\n \n bool CWalletDB::WriteBestBlock(const CBlockLocator& locator)\n@@ -323,7 +323,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         {\n             wss.nWatchKeys++;\n             CScript script;\n-            ssKey >> *(CScriptBase*)(&script);\n+            ssKey >> script;\n             char fYes;\n             ssValue >> fYes;\n             if (fYes == '1')\n@@ -440,7 +440,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             else if (strType == \"watchmeta\")\n             {\n               CScript script;\n-              ssKey >> *(CScriptBase*)(&script);\n+              ssKey >> script;\n               keyID = CScriptID(script);\n             }\n \n@@ -474,7 +474,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             uint160 hash;\n             ssKey >> hash;\n             CScript script;\n-            ssValue >> *(CScriptBase*)(&script);\n+            ssValue >> script;\n             if (!pwallet->LoadCScript(script))\n             {\n                 strErr = \"Error reading wallet database: LoadCScript failed\";"
      }
    ]
  },
  {
    "sha": "4c3b538c61532dc68d79bbe34729759a13b73f0c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YzNiNTM4YzYxNTMyZGM2OGQ3OWJiZTM0NzI5NzU5YTEzYjczZjBj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-14T22:17:27Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-15T19:31:26Z"
      },
      "message": "[logs] fix zapwallettxes startup logs",
      "tree": {
        "sha": "ca9d0e5be4244f6df3da3146613219fa23d0b795",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca9d0e5be4244f6df3da3146613219fa23d0b795"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c3b538c61532dc68d79bbe34729759a13b73f0c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c3b538c61532dc68d79bbe34729759a13b73f0c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c3b538c61532dc68d79bbe34729759a13b73f0c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c3b538c61532dc68d79bbe34729759a13b73f0c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e7a2181b49774f2cc29839ebbdc206bcdb715a7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7a2181b49774f2cc29839ebbdc206bcdb715a7f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e7a2181b49774f2cc29839ebbdc206bcdb715a7f"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 7,
      "deletions": 6
    },
    "files": [
      {
        "sha": "7aa2e31743dff7d4c905f58515d3c884a62a14f1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c3b538c61532dc68d79bbe34729759a13b73f0c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c3b538c61532dc68d79bbe34729759a13b73f0c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=4c3b538c61532dc68d79bbe34729759a13b73f0c",
        "patch": "@@ -4043,18 +4043,19 @@ bool CWallet::ParameterInteraction()\n         }\n     }\n \n-    // -zapwallettx implies dropping the mempool on startup\n-    if (GetBoolArg(\"-zapwallettxes\", false) && SoftSetBoolArg(\"-persistmempool\", false)) {\n-        LogPrintf(\"%s: parameter interaction: -zapwallettxes=<mode> -> setting -persistmempool=0\\n\", __func__);\n+    int zapwallettxes = GetArg(\"-zapwallettxes\", 0);\n+    // -zapwallettxes implies dropping the mempool on startup\n+    if (zapwallettxes != 0 && SoftSetBoolArg(\"-persistmempool\", false)) {\n+        LogPrintf(\"%s: parameter interaction: -zapwallettxes=%s -> setting -persistmempool=0\\n\", __func__, zapwallettxes);\n     }\n \n-    // -zapwallettx implies a rescan\n-    if (GetBoolArg(\"-zapwallettxes\", false)) {\n+    // -zapwallettxes implies a rescan\n+    if (zapwallettxes != 0) {\n         if (is_multiwallet) {\n             return InitError(strprintf(\"%s is only allowed with a single wallet file\", \"-zapwallettxes\"));\n         }\n         if (SoftSetBoolArg(\"-rescan\", true)) {\n-            LogPrintf(\"%s: parameter interaction: -zapwallettxes=<mode> -> setting -rescan=1\\n\", __func__);\n+            LogPrintf(\"%s: parameter interaction: -zapwallettxes=%s -> setting -rescan=1\\n\", __func__, zapwallettxes);\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "a8ae0b252a2007568e77f5aca1c7fa3ec5941b72",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOGFlMGIyNTJhMjAwNzU2OGU3N2Y1YWNhMWM3ZmEzZWM1OTQxYjcy",
    "commit": {
      "author": {
        "name": "Dag Robole",
        "email": "dag.robole@gmail.com",
        "date": "2017-07-15T19:34:52Z"
      },
      "committer": {
        "name": "Dag Robole",
        "email": "dag.robole@gmail.com",
        "date": "2017-07-15T19:34:52Z"
      },
      "message": "Fix resource leak",
      "tree": {
        "sha": "0f0739c76541ba6918f9e0fdb06ad774ce161aa2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f0739c76541ba6918f9e0fdb06ad774ce161aa2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8ae0b252a2007568e77f5aca1c7fa3ec5941b72",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8ae0b252a2007568e77f5aca1c7fa3ec5941b72",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8ae0b252a2007568e77f5aca1c7fa3ec5941b72",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8ae0b252a2007568e77f5aca1c7fa3ec5941b72/comments",
    "author": {
      "login": "bytting",
      "id": 1276717,
      "node_id": "MDQ6VXNlcjEyNzY3MTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1276717?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bytting",
      "html_url": "https://github.com/bytting",
      "followers_url": "https://api.github.com/users/bytting/followers",
      "following_url": "https://api.github.com/users/bytting/following{/other_user}",
      "gists_url": "https://api.github.com/users/bytting/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bytting/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bytting/subscriptions",
      "organizations_url": "https://api.github.com/users/bytting/orgs",
      "repos_url": "https://api.github.com/users/bytting/repos",
      "events_url": "https://api.github.com/users/bytting/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bytting/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "bytting",
      "id": 1276717,
      "node_id": "MDQ6VXNlcjEyNzY3MTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1276717?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bytting",
      "html_url": "https://github.com/bytting",
      "followers_url": "https://api.github.com/users/bytting/followers",
      "following_url": "https://api.github.com/users/bytting/following{/other_user}",
      "gists_url": "https://api.github.com/users/bytting/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bytting/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bytting/subscriptions",
      "organizations_url": "https://api.github.com/users/bytting/orgs",
      "repos_url": "https://api.github.com/users/bytting/repos",
      "events_url": "https://api.github.com/users/bytting/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bytting/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10b22e3141a603ec891d2cfc7100c29c7409aabe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10b22e3141a603ec891d2cfc7100c29c7409aabe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10b22e3141a603ec891d2cfc7100c29c7409aabe"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6c39d98c56817a9f7e939736944432f8feae12c7",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8ae0b252a2007568e77f5aca1c7fa3ec5941b72/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8ae0b252a2007568e77f5aca1c7fa3ec5941b72/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=a8ae0b252a2007568e77f5aca1c7fa3ec5941b72",
        "patch": "@@ -191,6 +191,7 @@ void GetDevURandom(unsigned char *ent32)\n     do {\n         ssize_t n = read(f, ent32 + have, NUM_OS_RANDOM_BYTES - have);\n         if (n <= 0 || n + have > NUM_OS_RANDOM_BYTES) {\n+            close(f);\n             RandFailure();\n         }\n         have += n;"
      }
    ]
  },
  {
    "sha": "c5904e871479514b2e2e18b4fdbbe468c4e5ec8e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTkwNGU4NzE0Nzk1MTRiMmUyZTE4YjRmZGJiZTQ2OGM0ZTVlYzhl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-15T20:16:56Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-15T20:26:49Z"
      },
      "message": "Merge #10812: [utils] Allow bitcoin-cli's -rpcconnect option to be used with square brackets\n\n5c643241e [utils] allow square brackets for ipv6 addresses in bitcoin-cli (John Newbery)\nfe4fabaf1 [refactor] move SplitHostPort() into utilstrencodings (John Newbery)\n\nPull request description:\n\n  bitcoin-cli's `-rpcconnect` can accept ipv6 addresses (as long as the libevent version is new enough), but fails to parse ipv6 with square brackets. This PR makes `bitcoin-cli` parse ipv6 in square brackets correctly.\n\n  `bitcoin-cli -rpcconnect=[::1] <command>`\n\n  should now be equivalent to\n\n  `bitcoin-cli -rpcconnect=::1 <command>`\n\n  This is useful so the `bitcoin-cli` option can now be in the same format as the `bitcoind` option.\n\n  Doesn't include tests. I have a branch that fully tests `bitcoin-cli`, but that's queued behind several intermediate PRs.\n\n  - first commit moves `SplitHostPort()` from libbitcoin_common into libbitcoin_util\n  - second commit adds proper ipv6 parsing to bitcoin-cli\n\nTree-SHA512: 249d409f10360c989474283341f458cc97364a56a7d004ae6d5f13d8bffe3a51b5dc2484d42218848e2d42cd9c0b13a1b92e94ea19b209f7e91c875c208d8409",
      "tree": {
        "sha": "3951c04875361305a281e6dd66b8f622fac6ca4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3951c04875361305a281e6dd66b8f622fac6ca4e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5904e871479514b2e2e18b4fdbbe468c4e5ec8e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZanqKAAoJEKY26XYx92fgxKsP/2AySAUJjt8mKQ+5OCa6YM97\nVwyGpG3i+m4WwxNYfzUIbcyGjq1uMaE1gOcbXWsiGLkKet1/DlZkpKlIpJhQMuZ2\n6WQu3dsnXIo0P388UrhLDdvGRDVhV0QAukyZt1kovD9MWmTyo3jYjyWCr1v8dgkP\nnBcRkTfadSWSyumC7U+VQX9t0ROW7jM0+DW+ZPY10DMnnPwp3LCEd8bmtwxURSP7\nwzOo6YQ1Mm5utsenHPF2fNPrbA2dAn036ScwTC7DL90bh/J7aPpEimaZTOESfBfs\nF7gUPOoixJ4IEtmbbyIes1yUuyDnbaM7RDDRA70yy2KX5g9XnmTJhafim5ANbce4\nW3uVoFIc/3Lw21UcjOPkyEVLnVKzYwcIAqWbEZ+w4onZ+tZZjZB96o02EelKi1qB\ntYrtcIiGsrpzHporg8crxYKCe0O4kbs80wnuy2Zpva/eGYw8QXrFGUYIFyJmBHN8\nT1omnI5pwbV3NcvRyQKqWeHEYFCWjfHUrmuFYkTe1XfyHrJqcnu92KKHVvk0YKWA\ncZHBwPuS5LmJNE2JbFTTcQCDBty0GDsizNYVoT6qms/rRwwa4xJYA/IcxUVx8ok4\nSa/ZEGeHoWBYx2KnApq+3Dn/Y6Uj6loBJINOMRspdFLIZQiHVDnEJ8Sc0UdV+2+z\nQ8GxW9W8uET0BBA57h0B\n=oDiA\n-----END PGP SIGNATURE-----",
        "payload": "tree 3951c04875361305a281e6dd66b8f622fac6ca4e\nparent 10b22e3141a603ec891d2cfc7100c29c7409aabe\nparent 5c643241e5d98992c0d5487b65e9c7b6d8005d1a\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1500149816 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1500150409 -0700\n\nMerge #10812: [utils] Allow bitcoin-cli's -rpcconnect option to be used with square brackets\n\n5c643241e [utils] allow square brackets for ipv6 addresses in bitcoin-cli (John Newbery)\nfe4fabaf1 [refactor] move SplitHostPort() into utilstrencodings (John Newbery)\n\nPull request description:\n\n  bitcoin-cli's `-rpcconnect` can accept ipv6 addresses (as long as the libevent version is new enough), but fails to parse ipv6 with square brackets. This PR makes `bitcoin-cli` parse ipv6 in square brackets correctly.\n\n  `bitcoin-cli -rpcconnect=[::1] <command>`\n\n  should now be equivalent to\n\n  `bitcoin-cli -rpcconnect=::1 <command>`\n\n  This is useful so the `bitcoin-cli` option can now be in the same format as the `bitcoind` option.\n\n  Doesn't include tests. I have a branch that fully tests `bitcoin-cli`, but that's queued behind several intermediate PRs.\n\n  - first commit moves `SplitHostPort()` from libbitcoin_common into libbitcoin_util\n  - second commit adds proper ipv6 parsing to bitcoin-cli\n\nTree-SHA512: 249d409f10360c989474283341f458cc97364a56a7d004ae6d5f13d8bffe3a51b5dc2484d42218848e2d42cd9c0b13a1b92e94ea19b209f7e91c875c208d8409\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5904e871479514b2e2e18b4fdbbe468c4e5ec8e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5904e871479514b2e2e18b4fdbbe468c4e5ec8e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5904e871479514b2e2e18b4fdbbe468c4e5ec8e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10b22e3141a603ec891d2cfc7100c29c7409aabe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10b22e3141a603ec891d2cfc7100c29c7409aabe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10b22e3141a603ec891d2cfc7100c29c7409aabe"
      },
      {
        "sha": "5c643241e5d98992c0d5487b65e9c7b6d8005d1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c643241e5d98992c0d5487b65e9c7b6d8005d1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c643241e5d98992c0d5487b65e9c7b6d8005d1a"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 31,
      "deletions": 22
    },
    "files": [
      {
        "sha": "92f6a21ebbd72a406711a3048822c40870efc54a",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5904e871479514b2e2e18b4fdbbe468c4e5ec8e/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5904e871479514b2e2e18b4fdbbe468c4e5ec8e/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=c5904e871479514b2e2e18b4fdbbe468c4e5ec8e",
        "patch": "@@ -10,6 +10,7 @@\n #include \"chainparamsbase.h\"\n #include \"clientversion.h\"\n #include \"fs.h\"\n+#include \"utilstrencodings.h\"\n #include \"rpc/client.h\"\n #include \"rpc/protocol.h\"\n #include \"util.h\"\n@@ -191,8 +192,14 @@ static void http_error_cb(enum evhttp_request_error err, void *ctx)\n \n UniValue CallRPC(const std::string& strMethod, const UniValue& params)\n {\n-    std::string host = GetArg(\"-rpcconnect\", DEFAULT_RPCCONNECT);\n-    int port = GetArg(\"-rpcport\", BaseParams().RPCPort());\n+    std::string host;\n+    // In preference order, we choose the following for the port:\n+    //     1. -rpcport\n+    //     2. port in -rpcconnect (ie following : in ipv4 or ]: in ipv6)\n+    //     3. default port for chain\n+    int port = BaseParams().RPCPort();\n+    SplitHostPort(GetArg(\"-rpcconnect\", DEFAULT_RPCCONNECT), port, host);\n+    port = GetArg(\"-rpcport\", port);\n \n     // Obtain event base\n     raii_event_base base = obtain_event_base();"
      },
      {
        "sha": "290a2efca2b4e86afd1c4362baeea4a4f528c5b0",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5904e871479514b2e2e18b4fdbbe468c4e5ec8e/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5904e871479514b2e2e18b4fdbbe468c4e5ec8e/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=c5904e871479514b2e2e18b4fdbbe468c4e5ec8e",
        "patch": "@@ -7,6 +7,7 @@\n #include \"chainparamsbase.h\"\n #include \"compat.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n #include \"netbase.h\"\n #include \"rpc/protocol.h\" // For HTTP status codes\n #include \"sync.h\""
      },
      {
        "sha": "1f668a5d4c9ac28b82c79b35e8cec84491ce9923",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 19,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5904e871479514b2e2e18b4fdbbe468c4e5ec8e/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5904e871479514b2e2e18b4fdbbe468c4e5ec8e/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=c5904e871479514b2e2e18b4fdbbe468c4e5ec8e",
        "patch": "@@ -58,25 +58,6 @@ std::string GetNetworkName(enum Network net) {\n     }\n }\n \n-void SplitHostPort(std::string in, int &portOut, std::string &hostOut) {\n-    size_t colon = in.find_last_of(':');\n-    // if a : is found, and it either follows a [...], or no other : is in the string, treat it as port separator\n-    bool fHaveColon = colon != in.npos;\n-    bool fBracketed = fHaveColon && (in[0]=='[' && in[colon-1]==']'); // if there is a colon, and in[0]=='[', colon is not 0, so in[colon-1] is safe\n-    bool fMultiColon = fHaveColon && (in.find_last_of(':',colon-1) != in.npos);\n-    if (fHaveColon && (colon==0 || fBracketed || !fMultiColon)) {\n-        int32_t n;\n-        if (ParseInt32(in.substr(colon + 1), &n) && n > 0 && n < 0x10000) {\n-            in = in.substr(0, colon);\n-            portOut = n;\n-        }\n-    }\n-    if (in.size()>0 && in[0] == '[' && in[in.size()-1] == ']')\n-        hostOut = in.substr(1, in.size()-2);\n-    else\n-        hostOut = in;\n-}\n-\n bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)\n {\n     vIP.clear();"
      },
      {
        "sha": "fd4b34c8f1e6e987fdbec98850d8f11fe4729a91",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5904e871479514b2e2e18b4fdbbe468c4e5ec8e/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5904e871479514b2e2e18b4fdbbe468c4e5ec8e/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=c5904e871479514b2e2e18b4fdbbe468c4e5ec8e",
        "patch": "@@ -39,7 +39,6 @@ class proxyType\n \n enum Network ParseNetwork(std::string net);\n std::string GetNetworkName(enum Network net);\n-void SplitHostPort(std::string in, int &portOut, std::string &hostOut);\n bool SetProxy(enum Network net, const proxyType &addrProxy);\n bool GetProxy(enum Network net, proxyType &proxyInfoOut);\n bool IsProxy(const CNetAddr &addr);"
      },
      {
        "sha": "1baf7643e544618448053a3732d109f4db422923",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5904e871479514b2e2e18b4fdbbe468c4e5ec8e/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5904e871479514b2e2e18b4fdbbe468c4e5ec8e/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=c5904e871479514b2e2e18b4fdbbe468c4e5ec8e",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"netbase.h\"\n #include \"test/test_bitcoin.h\"\n+#include \"utilstrencodings.h\"\n \n #include <string>\n "
      },
      {
        "sha": "9ee14070a219c3588320612944a17c12487e90f4",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5904e871479514b2e2e18b4fdbbe468c4e5ec8e/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5904e871479514b2e2e18b4fdbbe468c4e5ec8e/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=c5904e871479514b2e2e18b4fdbbe468c4e5ec8e",
        "patch": "@@ -91,6 +91,25 @@ std::vector<unsigned char> ParseHex(const std::string& str)\n     return ParseHex(str.c_str());\n }\n \n+void SplitHostPort(std::string in, int &portOut, std::string &hostOut) {\n+    size_t colon = in.find_last_of(':');\n+    // if a : is found, and it either follows a [...], or no other : is in the string, treat it as port separator\n+    bool fHaveColon = colon != in.npos;\n+    bool fBracketed = fHaveColon && (in[0]=='[' && in[colon-1]==']'); // if there is a colon, and in[0]=='[', colon is not 0, so in[colon-1] is safe\n+    bool fMultiColon = fHaveColon && (in.find_last_of(':',colon-1) != in.npos);\n+    if (fHaveColon && (colon==0 || fBracketed || !fMultiColon)) {\n+        int32_t n;\n+        if (ParseInt32(in.substr(colon + 1), &n) && n > 0 && n < 0x10000) {\n+            in = in.substr(0, colon);\n+            portOut = n;\n+        }\n+    }\n+    if (in.size()>0 && in[0] == '[' && in[in.size()-1] == ']')\n+        hostOut = in.substr(1, in.size()-2);\n+    else\n+        hostOut = in;\n+}\n+\n std::string EncodeBase64(const unsigned char* pch, size_t len)\n {\n     static const char *pbase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";"
      },
      {
        "sha": "707fdaad169b17f83104ad45ad70819f53ae83b3",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5904e871479514b2e2e18b4fdbbe468c4e5ec8e/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5904e871479514b2e2e18b4fdbbe468c4e5ec8e/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=c5904e871479514b2e2e18b4fdbbe468c4e5ec8e",
        "patch": "@@ -48,6 +48,7 @@ std::string DecodeBase32(const std::string& str);\n std::string EncodeBase32(const unsigned char* pch, size_t len);\n std::string EncodeBase32(const std::string& str);\n \n+void SplitHostPort(std::string in, int &portOut, std::string &hostOut);\n std::string i64tostr(int64_t n);\n std::string itostr(int n);\n int64_t atoi64(const char* psz);"
      }
    ]
  },
  {
    "sha": "912da1dcc8e52228582f36b0010b498ebc76754b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTJkYTFkY2M4ZTUyMjI4NTgyZjM2YjAwMTBiNDk4ZWJjNzY3NTRi",
    "commit": {
      "author": {
        "name": "Ren\u00e9 Nyffenegger",
        "email": "mail@renenyffenegger.ch",
        "date": "2017-07-07T14:54:11Z"
      },
      "committer": {
        "name": "Ren\u00e9 Nyffenegger",
        "email": "mail@renenyffenegger.ch",
        "date": "2017-07-15T20:30:58Z"
      },
      "message": "Use AC_ARG_VAR to set ARFLAGS.\n\nThe user can set ARFLAGS in the ./configure step with\n  ./configure ARFLAGS=...\nIf he chooses not to do so, ARFLAGS will be set to cr.",
      "tree": {
        "sha": "454f14d953737c49588a7081095d3dcab39f5938",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/454f14d953737c49588a7081095d3dcab39f5938"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/912da1dcc8e52228582f36b0010b498ebc76754b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/912da1dcc8e52228582f36b0010b498ebc76754b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/912da1dcc8e52228582f36b0010b498ebc76754b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/912da1dcc8e52228582f36b0010b498ebc76754b/comments",
    "author": {
      "login": "ReneNyffenegger",
      "id": 1092660,
      "node_id": "MDQ6VXNlcjEwOTI2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1092660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ReneNyffenegger",
      "html_url": "https://github.com/ReneNyffenegger",
      "followers_url": "https://api.github.com/users/ReneNyffenegger/followers",
      "following_url": "https://api.github.com/users/ReneNyffenegger/following{/other_user}",
      "gists_url": "https://api.github.com/users/ReneNyffenegger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ReneNyffenegger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ReneNyffenegger/subscriptions",
      "organizations_url": "https://api.github.com/users/ReneNyffenegger/orgs",
      "repos_url": "https://api.github.com/users/ReneNyffenegger/repos",
      "events_url": "https://api.github.com/users/ReneNyffenegger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ReneNyffenegger/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ReneNyffenegger",
      "id": 1092660,
      "node_id": "MDQ6VXNlcjEwOTI2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1092660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ReneNyffenegger",
      "html_url": "https://github.com/ReneNyffenegger",
      "followers_url": "https://api.github.com/users/ReneNyffenegger/followers",
      "following_url": "https://api.github.com/users/ReneNyffenegger/following{/other_user}",
      "gists_url": "https://api.github.com/users/ReneNyffenegger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ReneNyffenegger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ReneNyffenegger/subscriptions",
      "organizations_url": "https://api.github.com/users/ReneNyffenegger/orgs",
      "repos_url": "https://api.github.com/users/ReneNyffenegger/repos",
      "events_url": "https://api.github.com/users/ReneNyffenegger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ReneNyffenegger/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d3b58704d1d325875fc605580c1c02b825c1bbcc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3b58704d1d325875fc605580c1c02b825c1bbcc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3b58704d1d325875fc605580c1c02b825c1bbcc"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e8a8b134b89f0fde2efd31ab5f7509013ba0fafd",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/912da1dcc8e52228582f36b0010b498ebc76754b/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/912da1dcc8e52228582f36b0010b498ebc76754b/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=912da1dcc8e52228582f36b0010b498ebc76754b",
        "patch": "@@ -19,6 +19,12 @@ BITCOIN_GUI_NAME=bitcoin-qt\n BITCOIN_CLI_NAME=bitcoin-cli\n BITCOIN_TX_NAME=bitcoin-tx\n \n+dnl Unless the user specified ARFLAGS, force it to be cr\n+AC_ARG_VAR(ARFLAGS, [Flags for the archiver, defaults to <cr> if not set])\n+if test \"x${ARFLAGS+set}\" != \"xset\"; then\n+  ARFLAGS=\"cr\"\n+fi\n+\n AC_CANONICAL_HOST\n \n AH_TOP([#ifndef BITCOIN_CONFIG_H])\n@@ -1262,4 +1268,5 @@ echo \"  CPPFLAGS      = $CPPFLAGS\"\n echo \"  CXX           = $CXX\"\n echo \"  CXXFLAGS      = $CXXFLAGS\"\n echo \"  LDFLAGS       = $LDFLAGS\"\n+echo \"  ARFLAGS       = $ARFLAGS\"\n echo "
      }
    ]
  },
  {
    "sha": "5cfdda2503c995cdd563b1a2a29162ac298d173d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Y2ZkZGEyNTAzYzk5NWNkZDU2M2IxYTJhMjkxNjJhYzI5OGQxNzNk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-15T20:30:48Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-15T21:02:05Z"
      },
      "message": "Merge #10235: Track keypool entries as internal vs external in memory\n\nd40a72ccb Clarify *(--.end()) iterator semantics in CWallet::TopUpKeyPool (Matt Corallo)\n28301b978 Meet code style on lines changed in the previous commit (Matt Corallo)\n4a3fc3562 Track keypool entries as internal vs external in memory (Matt Corallo)\n\nPull request description:\n\n  This is an alternative version of #10184. As @jonasschnelli points out there, the performance regressions are pretty minimal, but given that this is a pretty simple, mechanical change, its probably worth doing.\n\nTree-SHA512: e83f9ebf2998f8164d1b2eebe5e6dcdeadea8c30b7612861f830758c08bf4093cd6a67b3bcfa9cfcb139e5e0b106fc8898a975fc69f334981aefc756568ab613",
      "tree": {
        "sha": "8454d0ec86b4d8807eb17d411e38c24021723467",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8454d0ec86b4d8807eb17d411e38c24021723467"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5cfdda2503c995cdd563b1a2a29162ac298d173d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZaoLNAAoJEKY26XYx92fg+X4QAJIdnDquuHTNc5A8D+Ot2pw7\nxnqXFbKn1d0e2YYdnTa7Iq2Oa3NnZT7aj1u9wt8jrb2e35aEspnBgZk+UGCMjWUP\noz0/LFP4zVE//Omt8DqftWMWq/31ZU8+rwwvKG52GGjMUCcslQDlTlRCctRa1/cP\n9ydVGPi7WzDOsFkVf9Bk2ep0CkyQAYv97TEaNbLXpHhHSdhMRWZZPZWA+ZzUxaDH\nJnhf1ytKNEhWPCCS8CRHynAf+1OtArVQCuji3yrflHpK1/o7TQX9gvP4jK3kRpAI\nAryWKMavc//1UqHFlSgkH+7AISkE2IWSVtAjM8R/nUaki+kL0jKmVXPDLhu5C4eg\njGWqny7yDNHRemo8oy9prOVHCm9TlWsZfHeRXlaHEurteY0XU8xp/KtDhOiRBGIH\nbVT754e4X5RVxQVLsUA2U4Nn9hw8j7Zljr9LMUUIyd3KAr2tVOjyrpKX4XMlgny+\nc7Ob1XwDjk3rPBIMzyuoQ9i56iCEiB+tiOH9HLGnUOphiPMysSgILcdBcRcmxB3n\n5Hc49TI1AAjvVs0VgsQq8u8iw4DATKFIDH43UQN3s9E7j7TJV/SUJjAyccBHR5Po\nb7OvLrjDNcqpymgQVFjcqD7llHase5nQdRaxW8/MHKP3EXOkzfmNzTXSIlfx4eR6\n7yP7f1Aps53m4IrycGvk\n=hs/S\n-----END PGP SIGNATURE-----",
        "payload": "tree 8454d0ec86b4d8807eb17d411e38c24021723467\nparent c5904e871479514b2e2e18b4fdbbe468c4e5ec8e\nparent d40a72ccbb71d61b43cbf4d222ca2ab5d3ca7510\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1500150648 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1500152525 -0700\n\nMerge #10235: Track keypool entries as internal vs external in memory\n\nd40a72ccb Clarify *(--.end()) iterator semantics in CWallet::TopUpKeyPool (Matt Corallo)\n28301b978 Meet code style on lines changed in the previous commit (Matt Corallo)\n4a3fc3562 Track keypool entries as internal vs external in memory (Matt Corallo)\n\nPull request description:\n\n  This is an alternative version of #10184. As @jonasschnelli points out there, the performance regressions are pretty minimal, but given that this is a pretty simple, mechanical change, its probably worth doing.\n\nTree-SHA512: e83f9ebf2998f8164d1b2eebe5e6dcdeadea8c30b7612861f830758c08bf4093cd6a67b3bcfa9cfcb139e5e0b106fc8898a975fc69f334981aefc756568ab613\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cfdda2503c995cdd563b1a2a29162ac298d173d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5cfdda2503c995cdd563b1a2a29162ac298d173d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cfdda2503c995cdd563b1a2a29162ac298d173d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5904e871479514b2e2e18b4fdbbe468c4e5ec8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5904e871479514b2e2e18b4fdbbe468c4e5ec8e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5904e871479514b2e2e18b4fdbbe468c4e5ec8e"
      },
      {
        "sha": "d40a72ccbb71d61b43cbf4d222ca2ab5d3ca7510",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d40a72ccbb71d61b43cbf4d222ca2ab5d3ca7510",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d40a72ccbb71d61b43cbf4d222ca2ab5d3ca7510"
      }
    ],
    "stats": {
      "total": 218,
      "additions": 115,
      "deletions": 103
    },
    "files": [
      {
        "sha": "5689cc7b0cd9db70eda52b51a47725a9d8683058",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 102,
        "deletions": 97,
        "changes": 199,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cfdda2503c995cdd563b1a2a29162ac298d173d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cfdda2503c995cdd563b1a2a29162ac298d173d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5cfdda2503c995cdd563b1a2a29162ac298d173d",
        "patch": "@@ -2977,7 +2977,8 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n         if (dbw->Rewrite(\"\\x04pool\"))\n         {\n             LOCK(cs_wallet);\n-            setKeyPool.clear();\n+            setInternalKeyPool.clear();\n+            setExternalKeyPool.clear();\n             // Note: can't top-up keypool here, because wallet is locked.\n             // User will be prompted to unlock wallet the next operation\n             // that requires a new key.\n@@ -3005,7 +3006,8 @@ DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256\n     {\n         if (dbw->Rewrite(\"\\x04pool\"))\n         {\n-            setKeyPool.clear();\n+            setInternalKeyPool.clear();\n+            setExternalKeyPool.clear();\n             // Note: can't top-up keypool here, because wallet is locked.\n             // User will be prompted to unlock wallet the next operation\n             // that requires a new key.\n@@ -3030,7 +3032,8 @@ DBErrors CWallet::ZapWalletTx(std::vector<CWalletTx>& vWtx)\n         if (dbw->Rewrite(\"\\x04pool\"))\n         {\n             LOCK(cs_wallet);\n-            setKeyPool.clear();\n+            setInternalKeyPool.clear();\n+            setExternalKeyPool.clear();\n             // Note: can't top-up keypool here, because wallet is locked.\n             // User will be prompted to unlock wallet the next operation\n             // that requires a new key.\n@@ -3114,9 +3117,16 @@ bool CWallet::NewKeyPool()\n     {\n         LOCK(cs_wallet);\n         CWalletDB walletdb(*dbw);\n-        for (int64_t nIndex : setKeyPool)\n+\n+        for (int64_t nIndex : setInternalKeyPool) {\n+            walletdb.ErasePool(nIndex);\n+        }\n+        setInternalKeyPool.clear();\n+\n+        for (int64_t nIndex : setExternalKeyPool) {\n             walletdb.ErasePool(nIndex);\n-        setKeyPool.clear();\n+        }\n+        setExternalKeyPool.clear();\n \n         if (!TopUpKeyPool()) {\n             return false;\n@@ -3128,25 +3138,8 @@ bool CWallet::NewKeyPool()\n \n size_t CWallet::KeypoolCountExternalKeys()\n {\n-    AssertLockHeld(cs_wallet); // setKeyPool\n-\n-    // immediately return setKeyPool's size if HD or HD_SPLIT is disabled or not supported\n-    if (!IsHDEnabled() || !CanSupportFeature(FEATURE_HD_SPLIT))\n-        return setKeyPool.size();\n-\n-    CWalletDB walletdb(*dbw);\n-\n-    // count amount of external keys\n-    size_t amountE = 0;\n-    for(const int64_t& id : setKeyPool)\n-    {\n-        CKeyPool tmpKeypool;\n-        if (!walletdb.ReadPool(id, tmpKeypool))\n-            throw std::runtime_error(std::string(__func__) + \": read failed\");\n-        amountE += !tmpKeypool.fInternal;\n-    }\n-\n-    return amountE;\n+    AssertLockHeld(cs_wallet); // setExternalKeyPool\n+    return setExternalKeyPool.size();\n }\n \n bool CWallet::TopUpKeyPool(unsigned int kpSize)\n@@ -3166,10 +3159,8 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n \n         // count amount of available keys (internal, external)\n         // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n-        int64_t amountExternal = KeypoolCountExternalKeys();\n-        int64_t amountInternal = setKeyPool.size() - amountExternal;\n-        int64_t missingExternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - amountExternal, (int64_t) 0);\n-        int64_t missingInternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - amountInternal, (int64_t) 0);\n+        int64_t missingExternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - (int64_t)setExternalKeyPool.size(), (int64_t) 0);\n+        int64_t missingInternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - (int64_t)setInternalKeyPool.size(), (int64_t) 0);\n \n         if (!IsHDEnabled() || !CanSupportFeature(FEATURE_HD_SPLIT))\n         {\n@@ -3181,20 +3172,32 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n         for (int64_t i = missingInternal + missingExternal; i--;)\n         {\n             int64_t nEnd = 1;\n-            if (i < missingInternal)\n+            if (i < missingInternal) {\n                 internal = true;\n-            if (!setKeyPool.empty())\n-                nEnd = *(--setKeyPool.end()) + 1;\n+            }\n+\n+            if (!setInternalKeyPool.empty()) {\n+                nEnd = *(setInternalKeyPool.rbegin()) + 1;\n+            }\n+            if (!setExternalKeyPool.empty()) {\n+                nEnd = std::max(nEnd, *(setExternalKeyPool.rbegin()) + 1);\n+            }\n+\n             if (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey(internal), internal)))\n                 throw std::runtime_error(std::string(__func__) + \": writing generated key failed\");\n-            setKeyPool.insert(nEnd);\n-            LogPrintf(\"keypool added key %d, size=%u, internal=%d\\n\", nEnd, setKeyPool.size(), internal);\n+\n+            if (internal) {\n+                setInternalKeyPool.insert(nEnd);\n+            } else {\n+                setExternalKeyPool.insert(nEnd);\n+            }\n+            LogPrintf(\"keypool added key %d, size=%u (%u internal), new key is %s\\n\", nEnd, setInternalKeyPool.size() + setExternalKeyPool.size(), setInternalKeyPool.size(), internal ? \"internal\" : \"external\");\n         }\n     }\n     return true;\n }\n \n-void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool internal)\n+void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal)\n {\n     nIndex = -1;\n     keypool.vchPubKey = CPubKey();\n@@ -3204,30 +3207,30 @@ void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool int\n         if (!IsLocked())\n             TopUpKeyPool();\n \n+        bool fReturningInternal = IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT) && fRequestedInternal;\n+        std::set<int64_t>& setKeyPool = fReturningInternal ? setInternalKeyPool : setExternalKeyPool;\n+\n         // Get the oldest key\n         if(setKeyPool.empty())\n             return;\n \n         CWalletDB walletdb(*dbw);\n \n-        // try to find a key that matches the internal/external filter\n-        for(const int64_t& id : setKeyPool)\n-        {\n-            CKeyPool tmpKeypool;\n-            if (!walletdb.ReadPool(id, tmpKeypool))\n-                throw std::runtime_error(std::string(__func__) + \": read failed\");\n-            if (!HaveKey(tmpKeypool.vchPubKey.GetID()))\n-                throw std::runtime_error(std::string(__func__) + \": unknown key in key pool\");\n-            if (!IsHDEnabled() || !CanSupportFeature(FEATURE_HD_SPLIT) || tmpKeypool.fInternal == internal)\n-            {\n-                nIndex = id;\n-                keypool = tmpKeypool;\n-                setKeyPool.erase(id);\n-                assert(keypool.vchPubKey.IsValid());\n-                LogPrintf(\"keypool reserve %d\\n\", nIndex);\n-                return;\n-            }\n+        auto it = setKeyPool.begin();\n+        nIndex = *it;\n+        setKeyPool.erase(it);\n+        if (!walletdb.ReadPool(nIndex, keypool)) {\n+            throw std::runtime_error(std::string(__func__) + \": read failed\");\n+        }\n+        if (!HaveKey(keypool.vchPubKey.GetID())) {\n+            throw std::runtime_error(std::string(__func__) + \": unknown key in key pool\");\n         }\n+        if (keypool.fInternal != fReturningInternal) {\n+            throw std::runtime_error(std::string(__func__) + \": keypool entry misclassified\");\n+        }\n+\n+        assert(keypool.vchPubKey.IsValid());\n+        LogPrintf(\"keypool reserve %d\\n\", nIndex);\n     }\n }\n \n@@ -3239,12 +3242,16 @@ void CWallet::KeepKey(int64_t nIndex)\n     LogPrintf(\"keypool keep %d\\n\", nIndex);\n }\n \n-void CWallet::ReturnKey(int64_t nIndex)\n+void CWallet::ReturnKey(int64_t nIndex, bool fInternal)\n {\n     // Return to key pool\n     {\n         LOCK(cs_wallet);\n-        setKeyPool.insert(nIndex);\n+        if (fInternal) {\n+            setInternalKeyPool.insert(nIndex);\n+        } else {\n+            setExternalKeyPool.insert(nIndex);\n+        }\n     }\n     LogPrintf(\"keypool return %d\\n\", nIndex);\n }\n@@ -3268,48 +3275,35 @@ bool CWallet::GetKeyFromPool(CPubKey& result, bool internal)\n     return true;\n }\n \n-int64_t CWallet::GetOldestKeyPoolTime()\n-{\n-    LOCK(cs_wallet);\n-\n-    // if the keypool is empty, return <NOW>\n-    if (setKeyPool.empty())\n+static int64_t GetOldestKeyTimeInPool(const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n+    if (setKeyPool.empty()) {\n         return GetTime();\n+    }\n \n     CKeyPool keypool;\n-    CWalletDB walletdb(*dbw);\n-\n-    if (IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT))\n-    {\n-        // if HD & HD Chain Split is enabled, response max(oldest-internal-key, oldest-external-key)\n-        int64_t now = GetTime();\n-        int64_t oldest_external = now, oldest_internal = now;\n-\n-        for(const int64_t& id : setKeyPool)\n-        {\n-            if (!walletdb.ReadPool(id, keypool)) {\n-                throw std::runtime_error(std::string(__func__) + \": read failed\");\n-            }\n-            if (keypool.fInternal && keypool.nTime < oldest_internal) {\n-                oldest_internal = keypool.nTime;\n-            }\n-            else if (!keypool.fInternal && keypool.nTime < oldest_external) {\n-                oldest_external = keypool.nTime;\n-            }\n-            if (oldest_internal != now && oldest_external != now) {\n-                break;\n-            }\n-        }\n-        return std::max(oldest_internal, oldest_external);\n-    }\n-    // load oldest key from keypool, get time and return\n     int64_t nIndex = *(setKeyPool.begin());\n-    if (!walletdb.ReadPool(nIndex, keypool))\n+    if (!walletdb.ReadPool(nIndex, keypool)) {\n         throw std::runtime_error(std::string(__func__) + \": read oldest key in keypool failed\");\n+    }\n     assert(keypool.vchPubKey.IsValid());\n     return keypool.nTime;\n }\n \n+int64_t CWallet::GetOldestKeyPoolTime()\n+{\n+    LOCK(cs_wallet);\n+\n+    CWalletDB walletdb(*dbw);\n+\n+    // load oldest key from keypool, get time and return\n+    int64_t oldestKey = GetOldestKeyTimeInPool(setExternalKeyPool, walletdb);\n+    if (IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT)) {\n+        oldestKey = std::max(GetOldestKeyTimeInPool(setInternalKeyPool, walletdb), oldestKey);\n+    }\n+\n+    return oldestKey;\n+}\n+\n std::map<CTxDestination, CAmount> CWallet::GetAddressBalances()\n {\n     std::map<CTxDestination, CAmount> balances;\n@@ -3468,6 +3462,7 @@ bool CReserveKey::GetReservedKey(CPubKey& pubkey, bool internal)\n         else {\n             return false;\n         }\n+        fInternal = keypool.fInternal;\n     }\n     assert(vchPubKey.IsValid());\n     pubkey = vchPubKey;\n@@ -3484,32 +3479,42 @@ void CReserveKey::KeepKey()\n \n void CReserveKey::ReturnKey()\n {\n-    if (nIndex != -1)\n-        pwallet->ReturnKey(nIndex);\n+    if (nIndex != -1) {\n+        pwallet->ReturnKey(nIndex, fInternal);\n+    }\n     nIndex = -1;\n     vchPubKey = CPubKey();\n }\n \n-void CWallet::GetAllReserveKeys(std::set<CKeyID>& setAddress) const\n-{\n-    setAddress.clear();\n-\n-    CWalletDB walletdb(*dbw);\n-\n-    LOCK2(cs_main, cs_wallet);\n+static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n     for (const int64_t& id : setKeyPool)\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n             throw std::runtime_error(std::string(__func__) + \": read failed\");\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();\n-        if (!HaveKey(keyID))\n-            throw std::runtime_error(std::string(__func__) + \": unknown key in key pool\");\n         setAddress.insert(keyID);\n     }\n }\n \n+void CWallet::GetAllReserveKeys(std::set<CKeyID>& setAddress) const\n+{\n+    setAddress.clear();\n+\n+    CWalletDB walletdb(*dbw);\n+\n+    LOCK2(cs_main, cs_wallet);\n+    LoadReserveKeysToSet(setAddress, setInternalKeyPool, walletdb);\n+    LoadReserveKeysToSet(setAddress, setExternalKeyPool, walletdb);\n+\n+    for (const CKeyID& keyID : setAddress) {\n+        if (!HaveKey(keyID)) {\n+            throw std::runtime_error(std::string(__func__) + \": unknown key in key pool\");\n+        }\n+    }\n+}\n+\n void CWallet::GetScriptForMining(std::shared_ptr<CReserveScript> &script)\n {\n     std::shared_ptr<CReserveKey> rKey = std::make_shared<CReserveKey>(this);"
      },
      {
        "sha": "8848448682ea3168c3ef8db64b7fcec038b39071",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 13,
        "deletions": 6,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cfdda2503c995cdd563b1a2a29162ac298d173d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cfdda2503c995cdd563b1a2a29162ac298d173d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=5cfdda2503c995cdd563b1a2a29162ac298d173d",
        "patch": "@@ -699,7 +699,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     /* HD derive new child key (on internal or external chain) */\n     void DeriveNewChildKey(CKeyMetadata& metadata, CKey& secret, bool internal = false);\n \n-    std::set<int64_t> setKeyPool;\n+    std::set<int64_t> setInternalKeyPool;\n+    std::set<int64_t> setExternalKeyPool;\n \n     int64_t nTimeFirstKey;\n \n@@ -744,7 +745,11 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     void LoadKeyPool(int nIndex, const CKeyPool &keypool)\n     {\n-        setKeyPool.insert(nIndex);\n+        if (keypool.fInternal) {\n+            setInternalKeyPool.insert(nIndex);\n+        } else {\n+            setExternalKeyPool.insert(nIndex);\n+        }\n \n         // If no metadata exists yet, create a default with the pool key's\n         // creation time. Note that this may be overwritten by actually\n@@ -974,9 +979,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool NewKeyPool();\n     size_t KeypoolCountExternalKeys();\n     bool TopUpKeyPool(unsigned int kpSize = 0);\n-    void ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool internal);\n+    void ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n     void KeepKey(int64_t nIndex);\n-    void ReturnKey(int64_t nIndex);\n+    void ReturnKey(int64_t nIndex, bool fInternal);\n     bool GetKeyFromPool(CPubKey &key, bool internal = false);\n     int64_t GetOldestKeyPoolTime();\n     void GetAllReserveKeys(std::set<CKeyID>& setAddress) const;\n@@ -1030,8 +1035,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     \n     unsigned int GetKeyPoolSize()\n     {\n-        AssertLockHeld(cs_wallet); // setKeyPool\n-        return setKeyPool.size();\n+        AssertLockHeld(cs_wallet); // set{Ex,In}ternalKeyPool\n+        return setInternalKeyPool.size() + setExternalKeyPool.size();\n     }\n \n     bool SetDefaultKey(const CPubKey &vchPubKey);\n@@ -1135,11 +1140,13 @@ class CReserveKey : public CReserveScript\n     CWallet* pwallet;\n     int64_t nIndex;\n     CPubKey vchPubKey;\n+    bool fInternal;\n public:\n     CReserveKey(CWallet* pwalletIn)\n     {\n         nIndex = -1;\n         pwallet = pwalletIn;\n+        fInternal = false;\n     }\n \n     CReserveKey() = default;"
      }
    ]
  },
  {
    "sha": "3a53f19718a2207f0d74c32a611ae91703d9da8d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTUzZjE5NzE4YTIyMDdmMGQ3NGMzMmE2MTFhZTkxNzAzZDlkYThk",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-07-14T22:36:58Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-07-16T00:11:31Z"
      },
      "message": "Pushdown walletdb object through GenerateNewKey/DeriveNewChildKey.\n\nThis is needed but not sufficient for batching the wallet flushing\n when topping up the keypool.",
      "tree": {
        "sha": "5c4ceaa486b6fa63f1960d32c50c0fa5fcbb1e9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c4ceaa486b6fa63f1960d32c50c0fa5fcbb1e9d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a53f19718a2207f0d74c32a611ae91703d9da8d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a53f19718a2207f0d74c32a611ae91703d9da8d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a53f19718a2207f0d74c32a611ae91703d9da8d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a53f19718a2207f0d74c32a611ae91703d9da8d/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5cfdda2503c995cdd563b1a2a29162ac298d173d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cfdda2503c995cdd563b1a2a29162ac298d173d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5cfdda2503c995cdd563b1a2a29162ac298d173d"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 10,
      "deletions": 8
    },
    "files": [
      {
        "sha": "b3b3c1c10a318710328fa9b1e2488d0688f3a942",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a53f19718a2207f0d74c32a611ae91703d9da8d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a53f19718a2207f0d74c32a611ae91703d9da8d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3a53f19718a2207f0d74c32a611ae91703d9da8d",
        "patch": "@@ -87,7 +87,7 @@ const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const\n     return &(it->second);\n }\n \n-CPubKey CWallet::GenerateNewKey(bool internal)\n+CPubKey CWallet::GenerateNewKey(CWalletDB &walletdb, bool internal)\n {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n@@ -100,7 +100,7 @@ CPubKey CWallet::GenerateNewKey(bool internal)\n \n     // use HD key derivation if HD was enabled during wallet creation\n     if (IsHDEnabled()) {\n-        DeriveNewChildKey(metadata, secret, (CanSupportFeature(FEATURE_HD_SPLIT) ? internal : false));\n+        DeriveNewChildKey(walletdb, metadata, secret, (CanSupportFeature(FEATURE_HD_SPLIT) ? internal : false));\n     } else {\n         secret.MakeNewKey(fCompressed);\n     }\n@@ -120,7 +120,7 @@ CPubKey CWallet::GenerateNewKey(bool internal)\n     return pubkey;\n }\n \n-void CWallet::DeriveNewChildKey(CKeyMetadata& metadata, CKey& secret, bool internal)\n+void CWallet::DeriveNewChildKey(CWalletDB &walletdb, CKeyMetadata& metadata, CKey& secret, bool internal)\n {\n     // for now we use a fixed keypath scheme of m/0'/0'/k\n     CKey key;                      //master key seed (256bit)\n@@ -162,7 +162,7 @@ void CWallet::DeriveNewChildKey(CKeyMetadata& metadata, CKey& secret, bool inter\n     secret = childKey.key;\n     metadata.hdMasterKeyID = hdChain.masterKeyID;\n     // update the chain model in the database\n-    if (!CWalletDB(*dbw).WriteHDChain(hdChain))\n+    if (!walletdb.WriteHDChain(hdChain))\n         throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n }\n \n@@ -3183,8 +3183,9 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n                 nEnd = std::max(nEnd, *(setExternalKeyPool.rbegin()) + 1);\n             }\n \n-            if (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey(internal), internal)))\n+            if (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey(walletdb, internal), internal))) {\n                 throw std::runtime_error(std::string(__func__) + \": writing generated key failed\");\n+            }\n \n             if (internal) {\n                 setInternalKeyPool.insert(nEnd);\n@@ -3266,7 +3267,8 @@ bool CWallet::GetKeyFromPool(CPubKey& result, bool internal)\n         if (nIndex == -1)\n         {\n             if (IsLocked()) return false;\n-            result = GenerateNewKey(internal);\n+            CWalletDB walletdb(*dbw);\n+            result = GenerateNewKey(walletdb, internal);\n             return true;\n         }\n         KeepKey(nIndex);"
      },
      {
        "sha": "e91a6effd3cd9852208faea2804755b79b2fb07c",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a53f19718a2207f0d74c32a611ae91703d9da8d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a53f19718a2207f0d74c32a611ae91703d9da8d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=3a53f19718a2207f0d74c32a611ae91703d9da8d",
        "patch": "@@ -697,7 +697,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CHDChain hdChain;\n \n     /* HD derive new child key (on internal or external chain) */\n-    void DeriveNewChildKey(CKeyMetadata& metadata, CKey& secret, bool internal = false);\n+    void DeriveNewChildKey(CWalletDB &walletdb, CKeyMetadata& metadata, CKey& secret, bool internal = false);\n \n     std::set<int64_t> setInternalKeyPool;\n     std::set<int64_t> setExternalKeyPool;\n@@ -866,7 +866,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * keystore implementation\n      * Generate a new key\n      */\n-    CPubKey GenerateNewKey(bool internal = false);\n+    CPubKey GenerateNewKey(CWalletDB& walletdb, bool internal = false);\n     //! Adds a key to the store, and saves it to disk.\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)"
      }
    ]
  },
  {
    "sha": "c53369cc24276b64b43636ae0868de9d41ca8b00",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTMzNjljYzI0Mjc2YjY0YjQzNjM2YWUwODY4ZGU5ZDQxY2E4YjAw",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-16T00:25:25Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-16T00:25:25Z"
      },
      "message": "Remove duplicate include",
      "tree": {
        "sha": "4e858fd774cbe4db814f5b5496671a655a24db16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e858fd774cbe4db814f5b5496671a655a24db16"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c53369cc24276b64b43636ae0868de9d41ca8b00",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c53369cc24276b64b43636ae0868de9d41ca8b00",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c53369cc24276b64b43636ae0868de9d41ca8b00",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c53369cc24276b64b43636ae0868de9d41ca8b00/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5cfdda2503c995cdd563b1a2a29162ac298d173d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cfdda2503c995cdd563b1a2a29162ac298d173d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5cfdda2503c995cdd563b1a2a29162ac298d173d"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8b48c7f8e42a50ed4c0109aed689c7e7e1042bf6",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c53369cc24276b64b43636ae0868de9d41ca8b00/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c53369cc24276b64b43636ae0868de9d41ca8b00/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=c53369cc24276b64b43636ae0868de9d41ca8b00",
        "patch": "@@ -10,7 +10,6 @@\n #include \"chainparamsbase.h\"\n #include \"clientversion.h\"\n #include \"fs.h\"\n-#include \"utilstrencodings.h\"\n #include \"rpc/client.h\"\n #include \"rpc/protocol.h\"\n #include \"util.h\""
      }
    ]
  },
  {
    "sha": "d0413c670b4e5dc79d5cc1bc35571fca745c9a24",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDQxM2M2NzBiNGU1ZGM3OWQ1Y2MxYmMzNTU3MWZjYTc0NWM5YTI0",
    "commit": {
      "author": {
        "name": "Ren\u00e9 Nyffenegger",
        "email": "mail@renenyffenegger.ch",
        "date": "2017-07-16T13:52:19Z"
      },
      "committer": {
        "name": "Ren\u00e9 Nyffenegger",
        "email": "mail@renenyffenegger.ch",
        "date": "2017-07-16T15:03:33Z"
      },
      "message": "Use range based for loop\n\nInstead of iterating over 0 .. 1 and then deciding on an actual desired\nvalue, use a range based for loop for the desired value.",
      "tree": {
        "sha": "39934e1b9e9dda42af89cebacd54021235d8e557",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39934e1b9e9dda42af89cebacd54021235d8e557"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0413c670b4e5dc79d5cc1bc35571fca745c9a24",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0413c670b4e5dc79d5cc1bc35571fca745c9a24",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d0413c670b4e5dc79d5cc1bc35571fca745c9a24",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0413c670b4e5dc79d5cc1bc35571fca745c9a24/comments",
    "author": {
      "login": "ReneNyffenegger",
      "id": 1092660,
      "node_id": "MDQ6VXNlcjEwOTI2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1092660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ReneNyffenegger",
      "html_url": "https://github.com/ReneNyffenegger",
      "followers_url": "https://api.github.com/users/ReneNyffenegger/followers",
      "following_url": "https://api.github.com/users/ReneNyffenegger/following{/other_user}",
      "gists_url": "https://api.github.com/users/ReneNyffenegger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ReneNyffenegger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ReneNyffenegger/subscriptions",
      "organizations_url": "https://api.github.com/users/ReneNyffenegger/orgs",
      "repos_url": "https://api.github.com/users/ReneNyffenegger/repos",
      "events_url": "https://api.github.com/users/ReneNyffenegger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ReneNyffenegger/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ReneNyffenegger",
      "id": 1092660,
      "node_id": "MDQ6VXNlcjEwOTI2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1092660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ReneNyffenegger",
      "html_url": "https://github.com/ReneNyffenegger",
      "followers_url": "https://api.github.com/users/ReneNyffenegger/followers",
      "following_url": "https://api.github.com/users/ReneNyffenegger/following{/other_user}",
      "gists_url": "https://api.github.com/users/ReneNyffenegger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ReneNyffenegger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ReneNyffenegger/subscriptions",
      "organizations_url": "https://api.github.com/users/ReneNyffenegger/orgs",
      "repos_url": "https://api.github.com/users/ReneNyffenegger/repos",
      "events_url": "https://api.github.com/users/ReneNyffenegger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ReneNyffenegger/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5cfdda2503c995cdd563b1a2a29162ac298d173d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cfdda2503c995cdd563b1a2a29162ac298d173d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5cfdda2503c995cdd563b1a2a29162ac298d173d"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 5,
      "deletions": 18
    },
    "files": [
      {
        "sha": "6ed6e7744e3ed0064c06d005ac14447599c2a06a",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 18,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0413c670b4e5dc79d5cc1bc35571fca745c9a24/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0413c670b4e5dc79d5cc1bc35571fca745c9a24/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=d0413c670b4e5dc79d5cc1bc35571fca745c9a24",
        "patch": "@@ -24,8 +24,7 @@ BOOST_FIXTURE_TEST_SUITE(dbwrapper_tests, BasicTestingSetup)\n BOOST_AUTO_TEST_CASE(dbwrapper)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n-    for (int i = 0; i < 2; i++) {\n-        bool obfuscate = (bool)i;\n+    for (bool obfuscate : {false, true}) {\n         fs::path ph = fs::temp_directory_path() / fs::unique_path();\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n         char key = 'k';\n@@ -45,8 +44,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n BOOST_AUTO_TEST_CASE(dbwrapper_batch)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n-    for (int i = 0; i < 2; i++) {\n-        bool obfuscate = (bool)i;\n+    for (bool obfuscate : {false, true}) {\n         fs::path ph = fs::temp_directory_path() / fs::unique_path();\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n@@ -82,8 +80,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_batch)\n BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n-    for (int i = 0; i < 2; i++) {\n-        bool obfuscate = (bool)i;\n+    for (bool obfuscate : {false, true}) {\n         fs::path ph = fs::temp_directory_path() / fs::unique_path();\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n@@ -211,12 +208,7 @@ BOOST_AUTO_TEST_CASE(iterator_ordering)\n     }\n \n     std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper&>(dbw).NewIterator());\n-    for (int c=0; c<2; ++c) {\n-        int seek_start;\n-        if (c == 0)\n-            seek_start = 0x00;\n-        else\n-            seek_start = 0x80;\n+    for (int seek_start : {0x00, 0x80}) {\n         it->Seek((uint8_t)seek_start);\n         for (int x=seek_start; x<256; ++x) {\n             uint8_t key;\n@@ -287,12 +279,7 @@ BOOST_AUTO_TEST_CASE(iterator_string_ordering)\n     }\n \n     std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper&>(dbw).NewIterator());\n-    for (int c=0; c<2; ++c) {\n-        int seek_start;\n-        if (c == 0)\n-            seek_start = 0;\n-        else\n-            seek_start = 5;\n+    for (int seek_start : {0, 5}) {\n         snprintf(buf, sizeof(buf), \"%d\", seek_start);\n         StringContentsSerializer seek_key(buf);\n         it->Seek(seek_key);"
      }
    ]
  },
  {
    "sha": "ef37f2033c4ae104585cd980141262f95d33166e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjM3ZjIwMzNjNGFlMTA0NTg1Y2Q5ODAxNDEyNjJmOTVkMzMxNjZl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-16T18:49:45Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-16T18:50:49Z"
      },
      "message": "Merge #10820: Use cpuid intrinsics instead of asm code\n\n674848fe1 Clarify entropy source (Pieter Wuille)\na9e82f651 Use cpuid intrinsics instead of asm code (Pieter Wuille)\n\nPull request description:\n\n  Less platform-specific code is better.\n\nTree-SHA512: 14f1b9accd9882859acdf516d2ada7ccb0ad92a3b3edf95b9cb8a8e514d4b1748d4555bcfb560779792c4f664f920d681ae42e9cebd0e6410f13f94c3a8729a0",
      "tree": {
        "sha": "ac85cde527c515fbc9ca34e50ff424c5507804ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac85cde527c515fbc9ca34e50ff424c5507804ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef37f2033c4ae104585cd980141262f95d33166e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZa7WJAAoJEKY26XYx92fgPEYP/A30DRBRybnSvsJzu7pzUbnB\nsN1xjBlHeiT1WqQChFC6IAEM03hlAAIEuJXk+6egrYf1CoFe+7B/lXEpcHwRs+qR\nNjX9yKWLyuJh5EVqGuhHojClvbNUMRc/jjJJdcOCR0DlogGhLKFswMnNAasWYX1V\nYl61yKMS/i8pCslW2/Pp51hoMe3Ai2/1mn76G8BVVVy/XNhxLX2RihnMhhgjF4Bp\n3vW5wall0Tqikmb2kjJEK7uL/+2LC+jUpi+p4tJXkAzkdkizoYcFSy6ByzhvEMdo\nSxc5XCkUSQPkFrLbCf+VXezgADwgLPtNoaIBUuF3DLeBX+z1391ZvU5hF0GsLLTV\nvhXbAi2UVEeLG0vHrGoGoUuWBMIede3bbntV1pcIHMRzZG0tf0BzcWTTgtROr4b/\nPVQSyXUEdwahJfAJ/jkEphbSgmoXIAHScG7Yf2Ih1P1AFxRA5Aalbz39qHsDXkHs\nzuOpVgkNUZHpNjEcKy2t6T6MfeMMstWF3H/V+/bpwShN3YASx2HN2fJGiXsnXdht\nk2SmVM1R5b5XYHa/nuPiUiBAxPtApEMx7rxIuNT4KcmuKXxfw6c+hEIHsnKrOk5Z\n8TgjsDkJ5qmxBBrE7PmIX8A74HzZqiVi2gWv8C5SALDrhgDTQMnFChkWCPcvRxQi\noZPyqZ7Ffva9MRZvIakp\n=AiFl\n-----END PGP SIGNATURE-----",
        "payload": "tree ac85cde527c515fbc9ca34e50ff424c5507804ff\nparent 5cfdda2503c995cdd563b1a2a29162ac298d173d\nparent 674848fe1c43fb88870cf5ba16fca4e2524da793\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1500230985 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1500231049 -0700\n\nMerge #10820: Use cpuid intrinsics instead of asm code\n\n674848fe1 Clarify entropy source (Pieter Wuille)\na9e82f651 Use cpuid intrinsics instead of asm code (Pieter Wuille)\n\nPull request description:\n\n  Less platform-specific code is better.\n\nTree-SHA512: 14f1b9accd9882859acdf516d2ada7ccb0ad92a3b3edf95b9cb8a8e514d4b1748d4555bcfb560779792c4f664f920d681ae42e9cebd0e6410f13f94c3a8729a0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef37f2033c4ae104585cd980141262f95d33166e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef37f2033c4ae104585cd980141262f95d33166e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef37f2033c4ae104585cd980141262f95d33166e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5cfdda2503c995cdd563b1a2a29162ac298d173d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cfdda2503c995cdd563b1a2a29162ac298d173d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5cfdda2503c995cdd563b1a2a29162ac298d173d"
      },
      {
        "sha": "674848fe1c43fb88870cf5ba16fca4e2524da793",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/674848fe1c43fb88870cf5ba16fca4e2524da793",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/674848fe1c43fb88870cf5ba16fca4e2524da793"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 7,
      "deletions": 12
    },
    "files": [
      {
        "sha": "1ee6158e4b7c5b514fd23643ab2c0e725cb04997",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 12,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef37f2033c4ae104585cd980141262f95d33166e/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef37f2033c4ae104585cd980141262f95d33166e/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=ef37f2033c4ae104585cd980141262f95d33166e",
        "patch": "@@ -36,6 +36,10 @@\n \n #include <mutex>\n \n+#if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n+#include <cpuid.h>\n+#endif\n+\n #include <openssl/err.h>\n #include <openssl/rand.h>\n \n@@ -72,18 +76,9 @@ static bool rdrand_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n static void RDRandInit()\n {\n-    uint32_t eax, ecx, edx;\n-#if defined(__i386__) && ( defined(__PIC__) || defined(__PIE__))\n-    // Avoid clobbering ebx, as that is used for PIC on x86.\n-    uint32_t tmp;\n-    __asm__ (\"mov %%ebx, %1; cpuid; mov %1, %%ebx\": \"=a\"(eax), \"=g\"(tmp), \"=c\"(ecx), \"=d\"(edx) : \"a\"(1));\n-#else\n-    uint32_t ebx;\n-    __asm__ (\"cpuid\": \"=a\"(eax), \"=b\"(ebx), \"=c\"(ecx), \"=d\"(edx) : \"a\"(1));\n-#endif\n-    //! When calling cpuid function #1, ecx register will have this set if RDRAND is available.\n-    if (ecx & CPUID_F1_ECX_RDRAND) {\n-        LogPrintf(\"Using RdRand as entropy source\\n\");\n+    uint32_t eax, ebx, ecx, edx;\n+    if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & CPUID_F1_ECX_RDRAND)) {\n+        LogPrintf(\"Using RdRand as an additional entropy source\\n\");\n         rdrand_supported = true;\n     }\n     hwrand_initialized.store(true);"
      }
    ]
  },
  {
    "sha": "b4d03be3cac04da8b5d5fa17e29c5220b75d970b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNGQwM2JlM2NhYzA0ZGE4YjVkNWZhMTdlMjljNTIyMGI3NWQ5NzBi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-16T18:55:57Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-16T18:56:13Z"
      },
      "message": "Merge #10766: Building Environment: Set ARFLAGS to cr\n\n912da1dcc Use AC_ARG_VAR to set ARFLAGS. (Ren\u00e9 Nyffenegger)\n\nPull request description:\n\n  Override the default of ARFLAGS of `cru` to `cr`.\n\n  When building, ar produces a warning for each archive, for example\n  ```\n    AR       libbitcoin_server.a\n  /usr/bin/ar: `u' modifier ignored since `D' is the default (see `U')\n\n  ```\n  Since `u` is the default anyway, it cannot hurt to remove it.\n\nTree-SHA512: 7466764f847b70f0f67db25dac87a7794477abf1997cb946682f394fe80ae86ac3ed52cbadb35f0c18a87467755bde5a5158430444cd26fb60fa363cc7bd486d",
      "tree": {
        "sha": "f059913cc36d587c7224bc705c88bf2faf6584ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f059913cc36d587c7224bc705c88bf2faf6584ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4d03be3cac04da8b5d5fa17e29c5220b75d970b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZa7bNAAoJEKY26XYx92fg3pwP/RGrcOxDpnvA9wl28sI4rkQU\n7AUgjMjN3nY74O60QdiwuqDY0RTQxIjeOJFuithz7D1VPuXa/sh7oXxcIb0aLZAl\nWFXNmPl41kZkY8B2mU/GCaqRsJVK4t9IfpdeyN0ITeXLOq1fhqGGn3swoOCKaOBo\nwEVgJu2kb5NKNSHtplzzxSf2SRrkP4lT1Ccn1cNEamb1zZhpGRxRFj+Pzb3Plshv\nMcLk7EAughp131Bi9WVHFm2exGuTb6L/esJpp4S5lK1Rdl3k59mEHXCCe6cX3iux\nQGQxTWFTFKP6mhZgwJ/CEK8hp6vU3Y+gH+lOZeeT2BzrvDj5XI99EYNXf7DtNOej\n544zOFFR9/E7HxZ63JdzmQyqtvctRK66QDwLqfoel7ye6afkyHS71seyGPU1Xm2/\nd+P/6wusH1a83xZuXNRNoR65/GBIB7DaU4EOAYWaeFbMYs2q86XtX2DahPc7Js/s\nJMiPl8GhTHgkABjbudRgvu6zP/8oF09aM8jyRtIsBIMoO+lwhDO50ql1mBhOWrc6\n5Qe3jxHhBwjL2XAAXgMdCzw48bHXxZx/1t3JaagK4uTOO16EN6AM7Tgtcntpvq7K\nMleVR2722uVqCPMkjXDG37m1tFNQa8x2rAtTB//ZGeL83y31GELJFPoHyUmRATsu\neolEN5XuUlfdw9MvFNrp\n=ZAW6\n-----END PGP SIGNATURE-----",
        "payload": "tree f059913cc36d587c7224bc705c88bf2faf6584ad\nparent ef37f2033c4ae104585cd980141262f95d33166e\nparent 912da1dcc8e52228582f36b0010b498ebc76754b\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1500231357 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1500231373 -0700\n\nMerge #10766: Building Environment: Set ARFLAGS to cr\n\n912da1dcc Use AC_ARG_VAR to set ARFLAGS. (Ren\u00e9 Nyffenegger)\n\nPull request description:\n\n  Override the default of ARFLAGS of `cru` to `cr`.\n\n  When building, ar produces a warning for each archive, for example\n  ```\n    AR       libbitcoin_server.a\n  /usr/bin/ar: `u' modifier ignored since `D' is the default (see `U')\n\n  ```\n  Since `u` is the default anyway, it cannot hurt to remove it.\n\nTree-SHA512: 7466764f847b70f0f67db25dac87a7794477abf1997cb946682f394fe80ae86ac3ed52cbadb35f0c18a87467755bde5a5158430444cd26fb60fa363cc7bd486d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4d03be3cac04da8b5d5fa17e29c5220b75d970b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b4d03be3cac04da8b5d5fa17e29c5220b75d970b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4d03be3cac04da8b5d5fa17e29c5220b75d970b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef37f2033c4ae104585cd980141262f95d33166e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef37f2033c4ae104585cd980141262f95d33166e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef37f2033c4ae104585cd980141262f95d33166e"
      },
      {
        "sha": "912da1dcc8e52228582f36b0010b498ebc76754b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/912da1dcc8e52228582f36b0010b498ebc76754b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/912da1dcc8e52228582f36b0010b498ebc76754b"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "835dcdbf570c8d82ad5d99802276f3a6d8e70412",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4d03be3cac04da8b5d5fa17e29c5220b75d970b/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4d03be3cac04da8b5d5fa17e29c5220b75d970b/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=b4d03be3cac04da8b5d5fa17e29c5220b75d970b",
        "patch": "@@ -19,6 +19,12 @@ BITCOIN_GUI_NAME=bitcoin-qt\n BITCOIN_CLI_NAME=bitcoin-cli\n BITCOIN_TX_NAME=bitcoin-tx\n \n+dnl Unless the user specified ARFLAGS, force it to be cr\n+AC_ARG_VAR(ARFLAGS, [Flags for the archiver, defaults to <cr> if not set])\n+if test \"x${ARFLAGS+set}\" != \"xset\"; then\n+  ARFLAGS=\"cr\"\n+fi\n+\n AC_CANONICAL_HOST\n \n AH_TOP([#ifndef BITCOIN_CONFIG_H])\n@@ -1285,4 +1291,5 @@ echo \"  CPPFLAGS      = $CPPFLAGS\"\n echo \"  CXX           = $CXX\"\n echo \"  CXXFLAGS      = $CXXFLAGS\"\n echo \"  LDFLAGS       = $LDFLAGS\"\n+echo \"  ARFLAGS       = $ARFLAGS\"\n echo "
      }
    ]
  },
  {
    "sha": "99c7db8731cc77f143b52f544b3fdd93033ed20d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OWM3ZGI4NzMxY2M3N2YxNDNiNTJmNTQ0YjNmZGQ5MzAzM2VkMjBk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-16T18:58:37Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-16T19:00:19Z"
      },
      "message": "Merge #10840: Remove duplicate include\n\nc53369cc2 Remove duplicate include (practicalswift)\n\nPull request description:\n\n  Remove duplicate include.\n\n  Introduced in 5c643241e5d98992c0d5487b65e9c7b6d8005d1a.\n\nTree-SHA512: c273cb60824b3a2b2bdebdc4fc84b309d66042d616ccfc9a7b1ee55380af0ab7d1ae059391b3b46063847087a1985e2491d4ce203a31a2b1c586e8fd531d9336",
      "tree": {
        "sha": "6b964c9030d1a4b0c75451840a520d2c65dc0ff3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b964c9030d1a4b0c75451840a520d2c65dc0ff3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99c7db8731cc77f143b52f544b3fdd93033ed20d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZa7fDAAoJEKY26XYx92fgLiAP/i7MhPBF50GJXVgP61qFkodh\nAsNl+uurGqeBdHQcLEU6RIOHv2mfeklgzEHyD98AN7bBvu7CoIF9kJIdJ1+P/+jc\nKYw/0s24gCKe41AtDrn9ou+9zVJZEeMM+7jylZ39Cyt4/Jnv6sOefDopqDE6ppo7\nvjTGo2utkepEmgee+0Md7jlAeNL69lfoz770RbkSlpiCjkYdOEAAofkW9DQdFQ3L\nPfRTmqIY7/x4J5WiLT8q6XwclHG629TA+vLsxvBQ8dEVg+Y7pqgL9YHmBfSSl53J\nfoAdknIKKHCPmi4FilMRmdqnqpiezOG01jSroqdcHmw5QG+mo29T/3W90+2Hv/Zo\nwg6xOYTEB13h6GGCeD/aQB4RCqC+N80mvqGsRRYNhzlPQ6+VQWvxP6bkAtvptYQL\n67y1ItRYTHDHcPTTeTBCdJySI0fqk06DjbTCgN87XxZpsrSmZq9oSkhvGF/T8fkg\nRV/2SKpjbTSf+gQDEuMhHEaMl1m4GqHcYxSMeV6sRRk8X1DwQPbYvJTcO5/ltVda\n2TqjZTyWbnF7SXcVQH7U7jthexjiq3BkEMpuFVTydCiN8YCLIb7ii+g6btjKPJEf\nvw0YLT2udWVKPXMVrvoGZ6wQyYa30UnIgzOWWVHHVLdnEBIhnbvKC8ZjVs5vFzP3\nvjx6wQNftX65kqMKMQrE\n=AbVP\n-----END PGP SIGNATURE-----",
        "payload": "tree 6b964c9030d1a4b0c75451840a520d2c65dc0ff3\nparent b4d03be3cac04da8b5d5fa17e29c5220b75d970b\nparent c53369cc24276b64b43636ae0868de9d41ca8b00\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1500231517 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1500231619 -0700\n\nMerge #10840: Remove duplicate include\n\nc53369cc2 Remove duplicate include (practicalswift)\n\nPull request description:\n\n  Remove duplicate include.\n\n  Introduced in 5c643241e5d98992c0d5487b65e9c7b6d8005d1a.\n\nTree-SHA512: c273cb60824b3a2b2bdebdc4fc84b309d66042d616ccfc9a7b1ee55380af0ab7d1ae059391b3b46063847087a1985e2491d4ce203a31a2b1c586e8fd531d9336\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99c7db8731cc77f143b52f544b3fdd93033ed20d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/99c7db8731cc77f143b52f544b3fdd93033ed20d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99c7db8731cc77f143b52f544b3fdd93033ed20d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b4d03be3cac04da8b5d5fa17e29c5220b75d970b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4d03be3cac04da8b5d5fa17e29c5220b75d970b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4d03be3cac04da8b5d5fa17e29c5220b75d970b"
      },
      {
        "sha": "c53369cc24276b64b43636ae0868de9d41ca8b00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c53369cc24276b64b43636ae0868de9d41ca8b00",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c53369cc24276b64b43636ae0868de9d41ca8b00"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8b48c7f8e42a50ed4c0109aed689c7e7e1042bf6",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99c7db8731cc77f143b52f544b3fdd93033ed20d/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99c7db8731cc77f143b52f544b3fdd93033ed20d/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=99c7db8731cc77f143b52f544b3fdd93033ed20d",
        "patch": "@@ -10,7 +10,6 @@\n #include \"chainparamsbase.h\"\n #include \"clientversion.h\"\n #include \"fs.h\"\n-#include \"utilstrencodings.h\"\n #include \"rpc/client.h\"\n #include \"rpc/protocol.h\"\n #include \"util.h\""
      }
    ]
  },
  {
    "sha": "ad6fce67b9bb6eee864c8431ad3291aebaa2e5d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDZmY2U2N2I5YmI2ZWVlODY0Yzg0MzFhZDMyOTFhZWJhYTJlNWQy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-16T19:01:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-16T19:03:30Z"
      },
      "message": "Merge #10844: Use range based for loop\n\nd0413c670 Use range based for loop (Ren\u00e9 Nyffenegger)\n\nPull request description:\n\n  Instead of iterating over 0 .. 1 and then deciding on an actual desired\n  value, use a range based for loop for the desired value.\n\nTree-SHA512: 0a7a4a80516c9f16cf97fa7d257088b8386360e19b93c4deac3d745b6270ea452c513821686d7d14a159a235763e034f9b14eef222ca15f7eb71c37bd1c2c380",
      "tree": {
        "sha": "97bba9eb6f3cb36f5d54929080695290e1b4fd3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/97bba9eb6f3cb36f5d54929080695290e1b4fd3f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad6fce67b9bb6eee864c8431ad3291aebaa2e5d2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZa7iCAAoJEKY26XYx92fgXk4P/2Wo0i2LrpHizltUZA2+fhZI\nD6xv5N9tNQ+oETM6K2AKm7F+HoxhPMpkp+zuSs+EAL7rJ+B3GD+16FS8OY8NRffj\n3r+GJ7zgwAhYSKVfz7F7RPVpmRO8ZVknXaPxPx++q5CXjA3ceVvW15pwDOzvZc7s\n27IZWE/l9YuB2aFdszzMi3n53ryPAeua1je/i2RNkBhZsXZYvA5l/dVY6dcCHnBa\ngIDYEge7K4of8jO4HBgKD0HyDL1uTAgxeQXCe1pv1mCeNAb+YGBgk3SiYuQwfuhB\ntl2L4ncM3AwACuwISnTHY4LWjiXm6+WAjNx7ZiVKAmsqGR1Bam6o8oIjL+U6lqO8\nY7vQ4P9R5kVIiTt43I8+tMWO8p6/Hp6eBs+tZ+niz6lmKJt/XH4ZWQHWFTXr9bqZ\nrAfrkEhsHuumlH/G9AdIn6bXK8sbORQfmnFpMsaVo0g+uM3QV9vzLxkVca3a7Jxz\nIA/yOBmU30ok0X/39J1p1NA3oKapxEMWnq2liAWPds7McXla2Zh5HI9gjGwe/Adn\nssIS6qmyjNAe98fd3UNxk/zANI1Whui9lQRGj7ws7DVp/OGk5Jpl65sIBJ2OTwHe\nJhSo1hnNN/d6sE9pLj7vjZxkKTcSP/Wzrob462OknosGfKWYq+V+VnCFKLh3jctA\npPwJMErsCc5BI6SLrCui\n=w1Ru\n-----END PGP SIGNATURE-----",
        "payload": "tree 97bba9eb6f3cb36f5d54929080695290e1b4fd3f\nparent 99c7db8731cc77f143b52f544b3fdd93033ed20d\nparent d0413c670b4e5dc79d5cc1bc35571fca745c9a24\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1500231691 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1500231810 -0700\n\nMerge #10844: Use range based for loop\n\nd0413c670 Use range based for loop (Ren\u00e9 Nyffenegger)\n\nPull request description:\n\n  Instead of iterating over 0 .. 1 and then deciding on an actual desired\n  value, use a range based for loop for the desired value.\n\nTree-SHA512: 0a7a4a80516c9f16cf97fa7d257088b8386360e19b93c4deac3d745b6270ea452c513821686d7d14a159a235763e034f9b14eef222ca15f7eb71c37bd1c2c380\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad6fce67b9bb6eee864c8431ad3291aebaa2e5d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad6fce67b9bb6eee864c8431ad3291aebaa2e5d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad6fce67b9bb6eee864c8431ad3291aebaa2e5d2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "99c7db8731cc77f143b52f544b3fdd93033ed20d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99c7db8731cc77f143b52f544b3fdd93033ed20d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/99c7db8731cc77f143b52f544b3fdd93033ed20d"
      },
      {
        "sha": "d0413c670b4e5dc79d5cc1bc35571fca745c9a24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0413c670b4e5dc79d5cc1bc35571fca745c9a24",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0413c670b4e5dc79d5cc1bc35571fca745c9a24"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 5,
      "deletions": 18
    },
    "files": [
      {
        "sha": "6ed6e7744e3ed0064c06d005ac14447599c2a06a",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 18,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad6fce67b9bb6eee864c8431ad3291aebaa2e5d2/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad6fce67b9bb6eee864c8431ad3291aebaa2e5d2/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=ad6fce67b9bb6eee864c8431ad3291aebaa2e5d2",
        "patch": "@@ -24,8 +24,7 @@ BOOST_FIXTURE_TEST_SUITE(dbwrapper_tests, BasicTestingSetup)\n BOOST_AUTO_TEST_CASE(dbwrapper)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n-    for (int i = 0; i < 2; i++) {\n-        bool obfuscate = (bool)i;\n+    for (bool obfuscate : {false, true}) {\n         fs::path ph = fs::temp_directory_path() / fs::unique_path();\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n         char key = 'k';\n@@ -45,8 +44,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n BOOST_AUTO_TEST_CASE(dbwrapper_batch)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n-    for (int i = 0; i < 2; i++) {\n-        bool obfuscate = (bool)i;\n+    for (bool obfuscate : {false, true}) {\n         fs::path ph = fs::temp_directory_path() / fs::unique_path();\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n@@ -82,8 +80,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_batch)\n BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n-    for (int i = 0; i < 2; i++) {\n-        bool obfuscate = (bool)i;\n+    for (bool obfuscate : {false, true}) {\n         fs::path ph = fs::temp_directory_path() / fs::unique_path();\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n@@ -211,12 +208,7 @@ BOOST_AUTO_TEST_CASE(iterator_ordering)\n     }\n \n     std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper&>(dbw).NewIterator());\n-    for (int c=0; c<2; ++c) {\n-        int seek_start;\n-        if (c == 0)\n-            seek_start = 0x00;\n-        else\n-            seek_start = 0x80;\n+    for (int seek_start : {0x00, 0x80}) {\n         it->Seek((uint8_t)seek_start);\n         for (int x=seek_start; x<256; ++x) {\n             uint8_t key;\n@@ -287,12 +279,7 @@ BOOST_AUTO_TEST_CASE(iterator_string_ordering)\n     }\n \n     std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper&>(dbw).NewIterator());\n-    for (int c=0; c<2; ++c) {\n-        int seek_start;\n-        if (c == 0)\n-            seek_start = 0;\n-        else\n-            seek_start = 5;\n+    for (int seek_start : {0, 5}) {\n         snprintf(buf, sizeof(buf), \"%d\", seek_start);\n         StringContentsSerializer seek_key(buf);\n         it->Seek(seek_key);"
      }
    ]
  },
  {
    "sha": "565494619d809655fa94d274bb2202d25553e485",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NjU0OTQ2MTlkODA5NjU1ZmE5NGQyNzRiYjIyMDJkMjU1NTNlNDg1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-16T19:07:34Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-16T19:15:11Z"
      },
      "message": "Merge #10735: Avoid static analyzer warnings regarding uninitialized arguments\n\n6835cb0ab Avoid static analyzer warnings regarding uninitialized arguments (practicalswift)\n\nPull request description:\n\n  Avoid static analyzer warnings regarding _\"Function call argument is a pointer to uninitialized value\"_ in cases where we are intentionally using such arguments.\n\n  This is achieved by using `f(b.begin(), b.end())` (`std::array<char, N>`) instead of `f(b, b + N)` (`char b[N]`).\n\n  Rationale:\n  * Reduce false positives by guiding static analyzers regarding our intentions.\n\n  Before this commit:\n\n  ```shell\n  $ clang-tidy-3.5 -checks=* src/bench/base58.cpp\n  bench/base58.cpp:23:9: warning: Function call argument is a pointer to uninitialized value [clang-analyzer-core.CallAndMessage]\n          EncodeBase58(b, b + 32);\n          ^\n  $ clang-tidy-3.5 -checks=* src/bench/verify_script.cpp\n  bench/verify_script.cpp:59:5: warning: Function call argument is a pointer to uninitialized value [clang-analyzer-core.CallAndMessage]\n      key.Set(vchKey, vchKey + 32, false);\n      ^\n  $\n  ```\n\n  After this commit:\n\n  ```shell\n  $ clang-tidy-3.5 -checks=* src/bench/base58.cpp\n  $ clang-tidy-3.5 -checks=* src/bench/verify_script.cpp\n  $\n  ```\n\nTree-SHA512: 5814a320ca8b959d0954bb64393424bcad73f942d2e988de1cd6788f39153b93900325532f2e340de02d740a3953385d212ae08e7ec72bb4c394a40475f251df",
      "tree": {
        "sha": "9fc0e1eb206225773d936d380040141f4d5e2375",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9fc0e1eb206225773d936d380040141f4d5e2375"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/565494619d809655fa94d274bb2202d25553e485",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZa7s/AAoJEKY26XYx92fgu/IP/RBasxkPGSJkwiuTCKxHogNt\nNAiwM8REsERBIwpfqu5i9kfQ6gmUY2c08VHah5hqLfCFoJ97PA2dMKTbiZ0x3hhA\nUbuY5QbgFOeZNE5Zgap7rnIRlktUuMIi34jHCCmgpOXG6xgn4KLHDkVnwtyM0Lum\n9KNgTUdQfD8kFEe2lZuKVrq/2fGO5Ara4WVJjta1MlnRsue+uoIXrBRxRh12TQ6K\nUovgOiAu1lpqpMgH6KIA4SEd7HbyuyhAVcCEf+bomTbk4wkKTAEOD2CNDc/UhhYm\nspRYn4Er2rGfaiA43GVxDb/S8Bn34rb0HFVEsVakosPpHYcWBFW2vEtuKfxVM7fg\nXrI8fwR052++BGp+kY3OFHfc58vh8fmA+OBCW8txG/U7RmaYuPXumnQ5mHwdYc3K\n/zdfLFG6vxi5/eCUvj9WYO8JeXSk3fhITqxKzWrGH/1T7GlHbE5QAOt4cME+geN6\nLAnkbPlY+VTB0ONWnX4YczGSnuJVpA9kkX+bMg5S5hmipJD7znlssavX5p0213K5\nyyR0uJ/3bdWsNi4oQjP9mhFCIXR5GuPJNEHZTy4uv8bh4R2PaOrgCQFVCB5ELIze\n3UWvV+TXwUKsDwEv1HQ0PGF3qUzvlIWJktIr8zOhEDjzp9BnWyu49qSecHdSmO/B\n1JllzH3pq/8HtydKnoIH\n=yGAH\n-----END PGP SIGNATURE-----",
        "payload": "tree 9fc0e1eb206225773d936d380040141f4d5e2375\nparent ad6fce67b9bb6eee864c8431ad3291aebaa2e5d2\nparent 6835cb0ab26c913423cc2307c989579d05aabdcb\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1500232054 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1500232511 -0700\n\nMerge #10735: Avoid static analyzer warnings regarding uninitialized arguments\n\n6835cb0ab Avoid static analyzer warnings regarding uninitialized arguments (practicalswift)\n\nPull request description:\n\n  Avoid static analyzer warnings regarding _\"Function call argument is a pointer to uninitialized value\"_ in cases where we are intentionally using such arguments.\n\n  This is achieved by using `f(b.begin(), b.end())` (`std::array<char, N>`) instead of `f(b, b + N)` (`char b[N]`).\n\n  Rationale:\n  * Reduce false positives by guiding static analyzers regarding our intentions.\n\n  Before this commit:\n\n  ```shell\n  $ clang-tidy-3.5 -checks=* src/bench/base58.cpp\n  bench/base58.cpp:23:9: warning: Function call argument is a pointer to uninitialized value [clang-analyzer-core.CallAndMessage]\n          EncodeBase58(b, b + 32);\n          ^\n  $ clang-tidy-3.5 -checks=* src/bench/verify_script.cpp\n  bench/verify_script.cpp:59:5: warning: Function call argument is a pointer to uninitialized value [clang-analyzer-core.CallAndMessage]\n      key.Set(vchKey, vchKey + 32, false);\n      ^\n  $\n  ```\n\n  After this commit:\n\n  ```shell\n  $ clang-tidy-3.5 -checks=* src/bench/base58.cpp\n  $ clang-tidy-3.5 -checks=* src/bench/verify_script.cpp\n  $\n  ```\n\nTree-SHA512: 5814a320ca8b959d0954bb64393424bcad73f942d2e988de1cd6788f39153b93900325532f2e340de02d740a3953385d212ae08e7ec72bb4c394a40475f251df\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/565494619d809655fa94d274bb2202d25553e485",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/565494619d809655fa94d274bb2202d25553e485",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/565494619d809655fa94d274bb2202d25553e485/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad6fce67b9bb6eee864c8431ad3291aebaa2e5d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad6fce67b9bb6eee864c8431ad3291aebaa2e5d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad6fce67b9bb6eee864c8431ad3291aebaa2e5d2"
      },
      {
        "sha": "6835cb0ab26c913423cc2307c989579d05aabdcb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6835cb0ab26c913423cc2307c989579d05aabdcb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6835cb0ab26c913423cc2307c989579d05aabdcb"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 23,
      "deletions": 14
    },
    "files": [
      {
        "sha": "65e27a615d9344c765068a95676691a19314504a",
        "filename": "src/bench/base58.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 12,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/565494619d809655fa94d274bb2202d25553e485/src/bench/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/565494619d809655fa94d274bb2202d25553e485/src/bench/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/base58.cpp?ref=565494619d809655fa94d274bb2202d25553e485",
        "patch": "@@ -7,34 +7,37 @@\n #include \"validation.h\"\n #include \"base58.h\"\n \n+#include <array>\n #include <vector>\n #include <string>\n \n \n static void Base58Encode(benchmark::State& state)\n {\n-    unsigned char buff[32] = {\n-        17, 79, 8, 99, 150, 189, 208, 162, 22, 23, 203, 163, 36, 58, 147,\n-        227, 139, 2, 215, 100, 91, 38, 11, 141, 253, 40, 117, 21, 16, 90,\n-        200, 24\n+    static const std::array<unsigned char, 32> buff = {\n+        {\n+            17, 79, 8, 99, 150, 189, 208, 162, 22, 23, 203, 163, 36, 58, 147,\n+            227, 139, 2, 215, 100, 91, 38, 11, 141, 253, 40, 117, 21, 16, 90,\n+            200, 24\n+        }\n     };\n-    unsigned char* b = buff;\n     while (state.KeepRunning()) {\n-        EncodeBase58(b, b + 32);\n+        EncodeBase58(buff.begin(), buff.end());\n     }\n }\n \n \n static void Base58CheckEncode(benchmark::State& state)\n {\n-    unsigned char buff[32] = {\n-        17, 79, 8, 99, 150, 189, 208, 162, 22, 23, 203, 163, 36, 58, 147,\n-        227, 139, 2, 215, 100, 91, 38, 11, 141, 253, 40, 117, 21, 16, 90,\n-        200, 24\n+    static const std::array<unsigned char, 32> buff = {\n+        {\n+            17, 79, 8, 99, 150, 189, 208, 162, 22, 23, 203, 163, 36, 58, 147,\n+            227, 139, 2, 215, 100, 91, 38, 11, 141, 253, 40, 117, 21, 16, 90,\n+            200, 24\n+        }\n     };\n-    unsigned char* b = buff;\n     std::vector<unsigned char> vch;\n-    vch.assign(b, b + 32);\n+    vch.assign(buff.begin(), buff.end());\n     while (state.KeepRunning()) {\n         EncodeBase58Check(vch);\n     }"
      },
      {
        "sha": "ef7381c1201db0d37438c7de10ca1d17e221333b",
        "filename": "src/bench/verify_script.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/565494619d809655fa94d274bb2202d25553e485/src/bench/verify_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/565494619d809655fa94d274bb2202d25553e485/src/bench/verify_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/verify_script.cpp?ref=565494619d809655fa94d274bb2202d25553e485",
        "patch": "@@ -11,6 +11,8 @@\n #include \"script/sign.h\"\n #include \"streams.h\"\n \n+#include <array>\n+\n // FIXME: Dedup with BuildCreditingTransaction in test/script_tests.cpp.\n static CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)\n {\n@@ -55,8 +57,12 @@ static void VerifyScriptBench(benchmark::State& state)\n \n     // Keypair.\n     CKey key;\n-    const unsigned char vchKey[32] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1};\n-    key.Set(vchKey, vchKey + 32, false);\n+    static const std::array<unsigned char, 32> vchKey = {\n+        {\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1\n+        }\n+    };\n+    key.Set(vchKey.begin(), vchKey.end(), false);\n     CPubKey pubkey = key.GetPubKey();\n     uint160 pubkeyHash;\n     CHash160().Write(pubkey.begin(), pubkey.size()).Finalize(pubkeyHash.begin());"
      }
    ]
  },
  {
    "sha": "2c2e90d1d4768a7842b2fa840496cea567a8e995",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzJlOTBkMWQ0NzY4YTc4NDJiMmZhODQwNDk2Y2VhNTY3YThlOTk1",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-16T10:20:49Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-16T19:22:05Z"
      },
      "message": "Fix incorrect Doxygen tag (@ince \u2192 @since). Make Doxygen parameter names match actual parameter names.",
      "tree": {
        "sha": "90b707a071314561f02fad31b7c81cb1b02afd64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/90b707a071314561f02fad31b7c81cb1b02afd64"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c2e90d1d4768a7842b2fa840496cea567a8e995",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c2e90d1d4768a7842b2fa840496cea567a8e995",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c2e90d1d4768a7842b2fa840496cea567a8e995",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c2e90d1d4768a7842b2fa840496cea567a8e995/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5cfdda2503c995cdd563b1a2a29162ac298d173d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cfdda2503c995cdd563b1a2a29162ac298d173d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5cfdda2503c995cdd563b1a2a29162ac298d173d"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "dbdc5013f0e0ba93a01dadd10dfbad820ecc5b69",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c2e90d1d4768a7842b2fa840496cea567a8e995/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c2e90d1d4768a7842b2fa840496cea567a8e995/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=2c2e90d1d4768a7842b2fa840496cea567a8e995",
        "patch": "@@ -117,7 +117,7 @@ class TxConfirmStats\n      * Create new TxConfirmStats. This is called by BlockPolicyEstimator's\n      * constructor with default values.\n      * @param defaultBuckets contains the upper limits for the bucket boundaries\n-     * @param maxConfirms max number of confirms to track\n+     * @param maxPeriods max number of periods to track\n      * @param decay how much to decay the historical moving average per block\n      */\n     TxConfirmStats(const std::vector<double>& defaultBuckets, const std::map<double, unsigned int>& defaultBucketMap,"
      },
      {
        "sha": "7890bb627de36ccb4f8b48fc657c319f194c7273",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c2e90d1d4768a7842b2fa840496cea567a8e995/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c2e90d1d4768a7842b2fa840496cea567a8e995/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=2c2e90d1d4768a7842b2fa840496cea567a8e995",
        "patch": "@@ -163,7 +163,7 @@ extern const char *PONG;\n /**\n  * The notfound message is a reply to a getdata message which requested an\n  * object the receiving node does not have available for relay.\n- * @ince protocol version 70001.\n+ * @since protocol version 70001.\n  * @see https://bitcoin.org/en/developer-reference#notfound\n  */\n extern const char *NOTFOUND;"
      },
      {
        "sha": "e1bdfb1988fc0096fefb435387df596eeb5540e4",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c2e90d1d4768a7842b2fa840496cea567a8e995/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c2e90d1d4768a7842b2fa840496cea567a8e995/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=2c2e90d1d4768a7842b2fa840496cea567a8e995",
        "patch": "@@ -215,7 +215,7 @@ class ArgsManager\n      * Return string argument or default value\n      *\n      * @param strArg Argument to get (e.g. \"-foo\")\n-     * @param default (e.g. \"1\")\n+     * @param strDefault (e.g. \"1\")\n      * @return command-line argument or default value\n      */\n     std::string GetArg(const std::string& strArg, const std::string& strDefault);\n@@ -224,7 +224,7 @@ class ArgsManager\n      * Return integer argument or default value\n      *\n      * @param strArg Argument to get (e.g. \"-foo\")\n-     * @param default (e.g. 1)\n+     * @param nDefault (e.g. 1)\n      * @return command-line argument (0 if invalid number) or default value\n      */\n     int64_t GetArg(const std::string& strArg, int64_t nDefault);\n@@ -233,7 +233,7 @@ class ArgsManager\n      * Return boolean argument or default value\n      *\n      * @param strArg Argument to get (e.g. \"-foo\")\n-     * @param default (true or false)\n+     * @param fDefault (true or false)\n      * @return command-line argument or default value\n      */\n     bool GetBoolArg(const std::string& strArg, bool fDefault);"
      },
      {
        "sha": "31e2f6a69994dfabd3e06f8dc59b31bbb44f8b91",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c2e90d1d4768a7842b2fa840496cea567a8e995/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c2e90d1d4768a7842b2fa840496cea567a8e995/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=2c2e90d1d4768a7842b2fa840496cea567a8e995",
        "patch": "@@ -16,7 +16,7 @@ void RegisterWalletRPCCommands(CRPCTable &t);\n  * @param[in] request JSONRPCRequest that wishes to access a wallet\n  * @return NULL if no wallet should be used, or a pointer to the CWallet\n  */\n-CWallet *GetWalletForJSONRPCRequest(const JSONRPCRequest&);\n+CWallet *GetWalletForJSONRPCRequest(const JSONRPCRequest& request);\n \n std::string HelpRequiringPassphrase(CWallet *);\n void EnsureWalletIsUnlocked(CWallet *);"
      }
    ]
  },
  {
    "sha": "1fc783fc08bc078239537535f174ab8a489772c0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZmM3ODNmYzA4YmMwNzgyMzk1Mzc1MzVmMTc0YWI4YTQ4OTc3MmMw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-07-16T20:47:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-07-16T20:47:33Z"
      },
      "message": "Merge #10739: test: Move variable `state` down where it is used\n\n5618b7d Do not shadow upper local variable `state`. (Pavel Jan\u00edk)\n\nPull request description:\n\n  Tests added in #10192 emit few shadowing warnings:\n\n  ```\n  test/txvalidationcache_tests.cpp:268:26: warning: declaration shadows a local variable [-Wshadow]\n  test/txvalidationcache_tests.cpp:296:26: warning: declaration shadows a local variable [-Wshadow]\n  test/txvalidationcache_tests.cpp:357:26: warning: declaration shadows a local variable [-Wshadow]\n  ```\n\n  Remove shadowing declarations and reuse the upper local declaration as in other already present test cases.\n\nTree-SHA512: 1e3c52cf963f8f33e729900c8ecdcd5cc6fe28caa441ba53c4636df9cc3d1a351ca231966d36384589f1340ae8ddd447424c2ee3e8527d334d0412f0d1a10c8f",
      "tree": {
        "sha": "bc3bd9109763af85b906c087846e4f82ea2a48b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc3bd9109763af85b906c087846e4f82ea2a48b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1fc783fc08bc078239537535f174ab8a489772c0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZa9DlAAoJENLqSFDnUoslVJYP/i2Rt6mtt3drzvtLemoYT9q5\nUPH9TsKGw1xrwxvl7/am0slHdZRyIjpAtIrjeUW5v+z4lEyNZFsNBsD4LYT5i0YK\nYSq2kD7G2wjUtjZQuWYYvyCE2449kCS5Rloi4K50MsSz1ySHAI7GH5Eiw85PTA6u\n9R0xF0nX5MHx/YzCioxv3uUy4JKeB7NxDfPCGh/zL2mpUgTfYjmicUDa0vXTxVkQ\nXSfmkiNLV3igjzLaqcby8gF8ZK4VxOL+KUq9ueQLkjik7x5g+8uPluhQRlT9m3vn\nOYBInXFA7SBFcJbX3gRA7NOzSqfXTFFfP/LH+nONvYhYuN+WkXbO3/1zaraizBBv\nKicNX/s8df8FqmymUpX4M2XqyBn9MYC6ry9D/wOcgDkGC4iPP+IYkRbiW6YdC9PJ\nIwEPlIlbKHCvEF/e9XCgPEOl9dJwLLl4vx4xMD0wLS03QNVb2U8UC1QP2o9TqdJR\nMwGwOW7/pWzSdw4iTAIVQPdI4Enpttlp6Rf2w8LsMAMt8qmpf8DvQa6D5vF9+Box\n1CkE4G3a2km9uV19bLRHyqLo9LMh5hADWyChaGJyc6z+P4HjzOzeoCihUxtL/s2G\nhzeinApv/iDPIfg3PC6axLBqdCTwzrsF0fKSjEQITETrOGREI7KKJxo4Vx+lmtvj\nAeVPB3x4dCuCGuYFcrj2\n=nhDI\n-----END PGP SIGNATURE-----",
        "payload": "tree bc3bd9109763af85b906c087846e4f82ea2a48b6\nparent 565494619d809655fa94d274bb2202d25553e485\nparent 5618b7d1ad3f2a258d46cf67b732ffddd3f34cb6\nauthor MarcoFalke <falke.marco@gmail.com> 1500238041 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1500238053 +0200\n\nMerge #10739: test: Move variable `state` down where it is used\n\n5618b7d Do not shadow upper local variable `state`. (Pavel Jan\u00edk)\n\nPull request description:\n\n  Tests added in #10192 emit few shadowing warnings:\n\n  ```\n  test/txvalidationcache_tests.cpp:268:26: warning: declaration shadows a local variable [-Wshadow]\n  test/txvalidationcache_tests.cpp:296:26: warning: declaration shadows a local variable [-Wshadow]\n  test/txvalidationcache_tests.cpp:357:26: warning: declaration shadows a local variable [-Wshadow]\n  ```\n\n  Remove shadowing declarations and reuse the upper local declaration as in other already present test cases.\n\nTree-SHA512: 1e3c52cf963f8f33e729900c8ecdcd5cc6fe28caa441ba53c4636df9cc3d1a351ca231966d36384589f1340ae8ddd447424c2ee3e8527d334d0412f0d1a10c8f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fc783fc08bc078239537535f174ab8a489772c0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1fc783fc08bc078239537535f174ab8a489772c0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fc783fc08bc078239537535f174ab8a489772c0/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "565494619d809655fa94d274bb2202d25553e485",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/565494619d809655fa94d274bb2202d25553e485",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/565494619d809655fa94d274bb2202d25553e485"
      },
      {
        "sha": "5618b7d1ad3f2a258d46cf67b732ffddd3f34cb6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5618b7d1ad3f2a258d46cf67b732ffddd3f34cb6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5618b7d1ad3f2a258d46cf67b732ffddd3f34cb6"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f609cb1af4e0f046189f675cde02c715e6d2787b",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fc783fc08bc078239537535f174ab8a489772c0/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fc783fc08bc078239537535f174ab8a489772c0/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=1fc783fc08bc078239537535f174ab8a489772c0",
        "patch": "@@ -196,8 +196,8 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n     // Test that invalidity under a set of flags doesn't preclude validity\n     // under other (eg consensus) flags.\n     // spend_tx is invalid according to DERSIG\n-    CValidationState state;\n     {\n+        CValidationState state;\n         PrecomputedTransactionData ptd_spend_tx(spend_tx);\n \n         BOOST_CHECK(!CheckInputs(spend_tx, state, pcoinsTip, true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_DERSIG, true, true, ptd_spend_tx, nullptr));"
      }
    ]
  },
  {
    "sha": "3895e25a77363ae8b49358fb793f50fa8b271e2d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODk1ZTI1YTc3MzYzYWU4YjQ5MzU4ZmI3OTNmNTBmYThiMjcxZTJk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-07-16T21:41:24Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-07-16T21:41:58Z"
      },
      "message": "Merge #10842: Fix incorrect Doxygen tag (@ince \u2192 @since). Doxygen parameter name matching.\n\n2c2e90d Fix incorrect Doxygen tag (@ince \u2192 @since). Make Doxygen parameter names match actual parameter names. (practicalswift)\n\nPull request description:\n\n  Doxygen fixes:\n  * Fix incorrect Doxygen tag (`@ince` \u2192 `@since`).\n  * Make Doxygen parameter names match actual parameter names.\n\nTree-SHA512: cb1d37a7d15a90d24affaf5c2bcf462663f0b0c13868bb25401e5d8cb303fcb41e53fdeee8012b2271a509112ef98fc0c070b4194f42cd55361f7e6bc7996342",
      "tree": {
        "sha": "04e228deee71f0aa8b92aeac3a4427e52d1bed31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04e228deee71f0aa8b92aeac3a4427e52d1bed31"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3895e25a77363ae8b49358fb793f50fa8b271e2d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZa92mAAoJENLqSFDnUoslsZQP+gIx01Kxskv+MNygcSZN5NE5\nzB/cmwZ661VBIP+6RS/rwBLnKJDdyNk76wnM1fuCKkKVLBsUHXMWeM37SiLnapqC\nlzZYjCrRHTR0K2lNEgdnlSyWHsaVLYNJs2iasCTRCoegH1vhaF4WOo+vlofOAL8d\npccpnZq9Xpzju/IUwBWjUDRW2pacNWM+KDoxoP+pOMwjtlYlpHiYcQuDWnocE7TR\npG02uRv1OMvBq85sU/nUAe3oBxJ1SXuXSg0bQVKU1Hrspt5+FzVky93FX04jwfG7\nlXxftjTZmDcFRgyPaIL8P8h29p2GJvO0lZdkZy8dbjKHM+TX1tpck9ZIFBoh6fxE\naSm8Oqq/nalkqb1mHunq9TEJHX4q+Vhhl+rLVbQi67mXe5Px2mB0F/8+flHrIR2m\nJB5L+X1Tu98Dr7nPCD1dp9gwzDNnTU1zbYBNSXRKrm62o7iWwviucflDbjjDYzJj\nsVV2a4kWq/vlcQJjPShcmRldGMw7/NMcohgbl3zkvmIQV8WTH0B3pTCfcBVrn25z\nZ4L+bx7Ro6MSSnU8v0ljDxKukAxyfDaxBoVIlkeKEMzQ18jKabL/dJ18PL/6WI3Y\nzel33LYwtjcACqpRO2u697p4LeAmZt5JEPsIc8LV0Gc5du0qAsEdVLAkwa2YYHCU\nz1gsbD5gHlBVSuMYPWJ9\n=py+C\n-----END PGP SIGNATURE-----",
        "payload": "tree 04e228deee71f0aa8b92aeac3a4427e52d1bed31\nparent 1fc783fc08bc078239537535f174ab8a489772c0\nparent 2c2e90d1d4768a7842b2fa840496cea567a8e995\nauthor MarcoFalke <falke.marco@gmail.com> 1500241284 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1500241318 +0200\n\nMerge #10842: Fix incorrect Doxygen tag (@ince \u2192 @since). Doxygen parameter name matching.\n\n2c2e90d Fix incorrect Doxygen tag (@ince \u2192 @since). Make Doxygen parameter names match actual parameter names. (practicalswift)\n\nPull request description:\n\n  Doxygen fixes:\n  * Fix incorrect Doxygen tag (`@ince` \u2192 `@since`).\n  * Make Doxygen parameter names match actual parameter names.\n\nTree-SHA512: cb1d37a7d15a90d24affaf5c2bcf462663f0b0c13868bb25401e5d8cb303fcb41e53fdeee8012b2271a509112ef98fc0c070b4194f42cd55361f7e6bc7996342\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3895e25a77363ae8b49358fb793f50fa8b271e2d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3895e25a77363ae8b49358fb793f50fa8b271e2d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3895e25a77363ae8b49358fb793f50fa8b271e2d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1fc783fc08bc078239537535f174ab8a489772c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fc783fc08bc078239537535f174ab8a489772c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1fc783fc08bc078239537535f174ab8a489772c0"
      },
      {
        "sha": "2c2e90d1d4768a7842b2fa840496cea567a8e995",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c2e90d1d4768a7842b2fa840496cea567a8e995",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c2e90d1d4768a7842b2fa840496cea567a8e995"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "dbdc5013f0e0ba93a01dadd10dfbad820ecc5b69",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3895e25a77363ae8b49358fb793f50fa8b271e2d/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3895e25a77363ae8b49358fb793f50fa8b271e2d/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=3895e25a77363ae8b49358fb793f50fa8b271e2d",
        "patch": "@@ -117,7 +117,7 @@ class TxConfirmStats\n      * Create new TxConfirmStats. This is called by BlockPolicyEstimator's\n      * constructor with default values.\n      * @param defaultBuckets contains the upper limits for the bucket boundaries\n-     * @param maxConfirms max number of confirms to track\n+     * @param maxPeriods max number of periods to track\n      * @param decay how much to decay the historical moving average per block\n      */\n     TxConfirmStats(const std::vector<double>& defaultBuckets, const std::map<double, unsigned int>& defaultBucketMap,"
      },
      {
        "sha": "7890bb627de36ccb4f8b48fc657c319f194c7273",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3895e25a77363ae8b49358fb793f50fa8b271e2d/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3895e25a77363ae8b49358fb793f50fa8b271e2d/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=3895e25a77363ae8b49358fb793f50fa8b271e2d",
        "patch": "@@ -163,7 +163,7 @@ extern const char *PONG;\n /**\n  * The notfound message is a reply to a getdata message which requested an\n  * object the receiving node does not have available for relay.\n- * @ince protocol version 70001.\n+ * @since protocol version 70001.\n  * @see https://bitcoin.org/en/developer-reference#notfound\n  */\n extern const char *NOTFOUND;"
      },
      {
        "sha": "e1bdfb1988fc0096fefb435387df596eeb5540e4",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3895e25a77363ae8b49358fb793f50fa8b271e2d/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3895e25a77363ae8b49358fb793f50fa8b271e2d/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=3895e25a77363ae8b49358fb793f50fa8b271e2d",
        "patch": "@@ -215,7 +215,7 @@ class ArgsManager\n      * Return string argument or default value\n      *\n      * @param strArg Argument to get (e.g. \"-foo\")\n-     * @param default (e.g. \"1\")\n+     * @param strDefault (e.g. \"1\")\n      * @return command-line argument or default value\n      */\n     std::string GetArg(const std::string& strArg, const std::string& strDefault);\n@@ -224,7 +224,7 @@ class ArgsManager\n      * Return integer argument or default value\n      *\n      * @param strArg Argument to get (e.g. \"-foo\")\n-     * @param default (e.g. 1)\n+     * @param nDefault (e.g. 1)\n      * @return command-line argument (0 if invalid number) or default value\n      */\n     int64_t GetArg(const std::string& strArg, int64_t nDefault);\n@@ -233,7 +233,7 @@ class ArgsManager\n      * Return boolean argument or default value\n      *\n      * @param strArg Argument to get (e.g. \"-foo\")\n-     * @param default (true or false)\n+     * @param fDefault (true or false)\n      * @return command-line argument or default value\n      */\n     bool GetBoolArg(const std::string& strArg, bool fDefault);"
      },
      {
        "sha": "31e2f6a69994dfabd3e06f8dc59b31bbb44f8b91",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3895e25a77363ae8b49358fb793f50fa8b271e2d/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3895e25a77363ae8b49358fb793f50fa8b271e2d/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=3895e25a77363ae8b49358fb793f50fa8b271e2d",
        "patch": "@@ -16,7 +16,7 @@ void RegisterWalletRPCCommands(CRPCTable &t);\n  * @param[in] request JSONRPCRequest that wishes to access a wallet\n  * @return NULL if no wallet should be used, or a pointer to the CWallet\n  */\n-CWallet *GetWalletForJSONRPCRequest(const JSONRPCRequest&);\n+CWallet *GetWalletForJSONRPCRequest(const JSONRPCRequest& request);\n \n std::string HelpRequiringPassphrase(CWallet *);\n void EnsureWalletIsUnlocked(CWallet *);"
      }
    ]
  },
  {
    "sha": "bf0a08be281dc42241e7f264c2a20515eb4781bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjBhMDhiZTI4MWRjNDIyNDFlN2YyNjRjMmEyMDUxNWViNDc4MWJi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-07-17T02:23:20Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-07-17T02:23:52Z"
      },
      "message": "Merge #10330: [wallet] fix zapwallettxes interaction with persistent mempool\n\n4c3b538 [logs] fix zapwallettxes startup logs (John Newbery)\ne7a2181 [wallet] fix zapwallettxes interaction with persistent mempool (John Newbery)\nff7365e [tests] fix flake8 warnings in zapwallettxes.py (John Newbery)\n\nPull request description:\n\n  zapwallettxes previously did not interact well with persistent mempool.\n  zapwallettxes would cause wallet transactions to be zapped, but they\n  would then be reloaded from the mempool on startup. This commit softsets\n  persistmempool to false if zapwallettxes is enabled so transactions are\n  actually zapped.\n\n  This PR also fixes the zapwallettxes.py functional test, which did not properly test this feature. The test line:\n\n  ```py\n       assert_raises(JSONRPCException, self.nodes[0].gettransaction, [txid3])\n       #there must be a expection because the unconfirmed wallettx0 must be gone by now\n  ```\n  is not actually testing the presence of the transaction since the RPC is being called incorrectly (with an array instead of a string). The `assert_raises()` passes since an assert is raised, but it's not the one the test writer had in mind!\n\n  Fixes #9710 .\n\nTree-SHA512: e3236efc7a2fd2b3bf1d9e2e8a7726d470c57f5d95cf41b7bde264edc8817bd36a6f3feff52f8de8db0ef64b7247c88b24e7ff7cefaa706cba86fe4e2135a508",
      "tree": {
        "sha": "87e7f6a61016181a40b7195b25f282305e465647",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87e7f6a61016181a40b7195b25f282305e465647"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf0a08be281dc42241e7f264c2a20515eb4781bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZbB+4AAoJENLqSFDnUoslCWYP/3lbqvYlD3aNw7Vd9GhlZcOq\nVy1cTRIrPtZBAb0eHQRJ6SgT7IgqyTPKKSpBMsq8uJU9DClmqK9CzuprW5zh2/vO\nHfMbpXb4B6aOVbFMGxutwfI5fJiBJEt12Ag9+ilRdrmWuV8MtXVJ7izL0hkxPzBa\npz8MoqblhOI6ME66LCNOZJ+zhIACR77FOsqWnP0Nre7iVDR5cz173XXpI12PvcJv\ntD7w4KXs0C7fwL32y67luEYf4mqmMrlt7+QK/pzU76gSa21IGeG/StQxuDmDnuE+\nJuYQ+qHNn+29UeJqSEBC6K+0Cubirf1TuJOHq5zHL3yWwonUWBz7H3ZtO8j2MneC\ngpUXlhrUjVRSmUpIkYQkBBBRZ+q4QZ//BzljkUbVlHWqC2tp5geGjqjvkJkJzxKg\ndzmlRrNUgLjSvCYIxXP1AHFvRifwnFEitOg42FCt1r7sNOOddv/JEPa2mAvIQXkj\ncdFdP+e6/vPYcuEgOngr5sSdVUlcbYqiG0GxnB2bnwDrD6dCmm/VlOJA7mdm+qgM\nyZodd6v454rZLqJCyem332H5Iqoy+MaXi3c2v/z+Idu+djf8plbZUjbNa6Qnv9ZU\nQ6mAe7o7S24LEGoF54X/y6JrQybjj7grvSy+uCpfSFiTMwbXn+983q1QJxnJOlpz\nPqs+jT56s0j0L5MFq68g\n=AVY5\n-----END PGP SIGNATURE-----",
        "payload": "tree 87e7f6a61016181a40b7195b25f282305e465647\nparent 3895e25a77363ae8b49358fb793f50fa8b271e2d\nparent 4c3b538c61532dc68d79bbe34729759a13b73f0c\nauthor MarcoFalke <falke.marco@gmail.com> 1500258200 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1500258232 +0200\n\nMerge #10330: [wallet] fix zapwallettxes interaction with persistent mempool\n\n4c3b538 [logs] fix zapwallettxes startup logs (John Newbery)\ne7a2181 [wallet] fix zapwallettxes interaction with persistent mempool (John Newbery)\nff7365e [tests] fix flake8 warnings in zapwallettxes.py (John Newbery)\n\nPull request description:\n\n  zapwallettxes previously did not interact well with persistent mempool.\n  zapwallettxes would cause wallet transactions to be zapped, but they\n  would then be reloaded from the mempool on startup. This commit softsets\n  persistmempool to false if zapwallettxes is enabled so transactions are\n  actually zapped.\n\n  This PR also fixes the zapwallettxes.py functional test, which did not properly test this feature. The test line:\n\n  ```py\n       assert_raises(JSONRPCException, self.nodes[0].gettransaction, [txid3])\n       #there must be a expection because the unconfirmed wallettx0 must be gone by now\n  ```\n  is not actually testing the presence of the transaction since the RPC is being called incorrectly (with an array instead of a string). The `assert_raises()` passes since an assert is raised, but it's not the one the test writer had in mind!\n\n  Fixes #9710 .\n\nTree-SHA512: e3236efc7a2fd2b3bf1d9e2e8a7726d470c57f5d95cf41b7bde264edc8817bd36a6f3feff52f8de8db0ef64b7247c88b24e7ff7cefaa706cba86fe4e2135a508\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf0a08be281dc42241e7f264c2a20515eb4781bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf0a08be281dc42241e7f264c2a20515eb4781bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf0a08be281dc42241e7f264c2a20515eb4781bb/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3895e25a77363ae8b49358fb793f50fa8b271e2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3895e25a77363ae8b49358fb793f50fa8b271e2d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3895e25a77363ae8b49358fb793f50fa8b271e2d"
      },
      {
        "sha": "4c3b538c61532dc68d79bbe34729759a13b73f0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c3b538c61532dc68d79bbe34729759a13b73f0c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c3b538c61532dc68d79bbe34729759a13b73f0c"
      }
    ],
    "stats": {
      "total": 112,
      "additions": 57,
      "deletions": 55
    },
    "files": [
      {
        "sha": "6cf4c53da5e6e2241d646900e2ec99969ed61577",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf0a08be281dc42241e7f264c2a20515eb4781bb/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf0a08be281dc42241e7f264c2a20515eb4781bb/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bf0a08be281dc42241e7f264c2a20515eb4781bb",
        "patch": "@@ -4048,13 +4048,19 @@ bool CWallet::ParameterInteraction()\n         }\n     }\n \n-    // -zapwallettx implies a rescan\n-    if (GetBoolArg(\"-zapwallettxes\", false)) {\n+    int zapwallettxes = GetArg(\"-zapwallettxes\", 0);\n+    // -zapwallettxes implies dropping the mempool on startup\n+    if (zapwallettxes != 0 && SoftSetBoolArg(\"-persistmempool\", false)) {\n+        LogPrintf(\"%s: parameter interaction: -zapwallettxes=%s -> setting -persistmempool=0\\n\", __func__, zapwallettxes);\n+    }\n+\n+    // -zapwallettxes implies a rescan\n+    if (zapwallettxes != 0) {\n         if (is_multiwallet) {\n             return InitError(strprintf(\"%s is only allowed with a single wallet file\", \"-zapwallettxes\"));\n         }\n         if (SoftSetBoolArg(\"-rescan\", true)) {\n-            LogPrintf(\"%s: parameter interaction: -zapwallettxes=<mode> -> setting -rescan=1\\n\", __func__);\n+            LogPrintf(\"%s: parameter interaction: -zapwallettxes=%s -> setting -rescan=1\\n\", __func__, zapwallettxes);\n         }\n     }\n "
      },
      {
        "sha": "af867d7a52c772e50917b7cc63faa1a57ad32be8",
        "filename": "test/functional/zapwallettxes.py",
        "status": "modified",
        "additions": 48,
        "deletions": 52,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf0a08be281dc42241e7f264c2a20515eb4781bb/test/functional/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf0a08be281dc42241e7f264c2a20515eb4781bb/test/functional/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zapwallettxes.py?ref=bf0a08be281dc42241e7f264c2a20515eb4781bb",
        "patch": "@@ -4,77 +4,73 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the zapwallettxes functionality.\n \n-- start three bitcoind nodes\n-- create four transactions on node 0 - two are confirmed and two are\n-  unconfirmed.\n-- restart node 1 and verify that both the confirmed and the unconfirmed\n+- start two bitcoind nodes\n+- create two transactions on node 0 - one is confirmed and one is unconfirmed.\n+- restart node 0 and verify that both the confirmed and the unconfirmed\n   transactions are still available.\n-- restart node 0 and verify that the confirmed transactions are still\n-  available, but that the unconfirmed transaction has been zapped.\n+- restart node 0 with zapwallettxes and persistmempool, and verify that both\n+  the confirmed and the unconfirmed transactions are still available.\n+- restart node 0 with just zapwallettxed and verify that the confirmed\n+  transactions are still available, but that the unconfirmed transaction has\n+  been zapped.\n \"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-\n+from test_framework.util import (assert_equal,\n+                                 assert_raises_jsonrpc,\n+                                 )\n \n class ZapWalletTXesTest (BitcoinTestFramework):\n \n     def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n-        self.num_nodes = 3\n-\n-    def setup_network(self):\n-        super().setup_network()\n-        connect_nodes_bi(self.nodes,0,2)\n+        self.num_nodes = 2\n \n-    def run_test (self):\n+    def run_test(self):\n         self.log.info(\"Mining blocks...\")\n         self.nodes[0].generate(1)\n         self.sync_all()\n-        self.nodes[1].generate(101)\n-        self.sync_all()\n-        \n-        assert_equal(self.nodes[0].getbalance(), 50)\n-        \n-        txid0 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11)\n-        txid1 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 10)\n+        self.nodes[1].generate(100)\n         self.sync_all()\n+\n+        # This transaction will be confirmed\n+        txid1 = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 10)\n+\n         self.nodes[0].generate(1)\n         self.sync_all()\n-        \n-        txid2 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11)\n-        txid3 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 10)\n-        \n-        tx0 = self.nodes[0].gettransaction(txid0)\n-        assert_equal(tx0['txid'], txid0) #tx0 must be available (confirmed)\n-        \n-        tx1 = self.nodes[0].gettransaction(txid1)\n-        assert_equal(tx1['txid'], txid1) #tx1 must be available (confirmed)\n-        \n-        tx2 = self.nodes[0].gettransaction(txid2)\n-        assert_equal(tx2['txid'], txid2) #tx2 must be available (unconfirmed)\n-        \n-        tx3 = self.nodes[0].gettransaction(txid3)\n-        assert_equal(tx3['txid'], txid3) #tx3 must be available (unconfirmed)\n-        \n-        #restart bitcoind\n+\n+        # This transaction will not be confirmed\n+        txid2 = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 20)\n+\n+        # Confirmed and unconfirmed transactions are now in the wallet.\n+        assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n+        assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n+\n+        # Stop-start node0. Both confirmed and unconfirmed transactions remain in the wallet.\n+        self.stop_node(0)\n+        self.nodes[0] = self.start_node(0, self.options.tmpdir)\n+\n+        assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n+        assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n+\n+        # Stop node0 and restart with zapwallettxes and persistmempool. The unconfirmed\n+        # transaction is zapped from the wallet, but is re-added when the mempool is reloaded.\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0,self.options.tmpdir)\n-        \n-        tx3 = self.nodes[0].gettransaction(txid3)\n-        assert_equal(tx3['txid'], txid3) #tx must be available (unconfirmed)\n-        \n+        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-persistmempool=1\", \"-zapwallettxes=2\"])\n+\n+        assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n+        assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n+\n+        # Stop node0 and restart with zapwallettxes, but not persistmempool.\n+        # The unconfirmed transaction is zapped and is no longer in the wallet.\n         self.stop_node(0)\n-        \n-        #restart bitcoind with zapwallettxes\n-        self.nodes[0] = self.start_node(0,self.options.tmpdir, [\"-zapwallettxes=1\"])\n-        \n-        assert_raises(JSONRPCException, self.nodes[0].gettransaction, [txid3])\n-        #there must be an exception because the unconfirmed wallettx0 must be gone by now\n+        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-zapwallettxes=2\"])\n \n-        tx0 = self.nodes[0].gettransaction(txid0)\n-        assert_equal(tx0['txid'], txid0) #tx0 (confirmed) must still be available because it was confirmed\n+        # tx1 is still be available because it was confirmed\n+        assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n \n+        # This will raise an exception because the unconfirmed transaction has been zapped\n+        assert_raises_jsonrpc(-5, 'Invalid or non-wallet transaction id', self.nodes[0].gettransaction, txid2)\n \n if __name__ == '__main__':\n-    ZapWalletTXesTest ().main ()\n+    ZapWalletTXesTest().main()"
      }
    ]
  },
  {
    "sha": "6859ad2936bf431cd745b6763b62051319435742",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODU5YWQyOTM2YmY0MzFjZDc0NWI2NzYzYjYyMDUxMzE5NDM1NzQy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-17T06:51:41Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-17T07:25:33Z"
      },
      "message": "Merge #10706: Improve wallet fee logic and fix GUI bugs\n\n11590d3 Properly bound check conf_target in wallet RPC calls (Alex Morcos)\nfd29d3d Remove checking of mempool min fee from estimateSmartFee. (Alex Morcos)\n2fffaa9 Make QT fee displays use GetMinimumFee instead of estimateSmartFee (Alex Morcos)\n1983ca6 Use CoinControl to pass custom fee setting from QT. (Alex Morcos)\n03ee701 Refactor to use CoinControl in GetMinimumFee and FeeBumper (Alex Morcos)\necd81df Make CoinControl a required argument to CreateTransaction (Alex Morcos)\n\nPull request description:\n\n  This builds on #10589  (first 5 commits from that PR, last 5 commits are new)\n\n  The first couple commits refactor to use the CCoinControl class to pass fee calculation parameters around.\n\n  This allows for fixing the buggy interaction in QT between the global payTxFee which can be modified by the RPC call settxfee or temporarily modified by the QT custom fee settings.  Before these changes the GUI could sometimes send a transaction with a recently set payTxFee and not respect the settings displayed in the GUI.   After these changes, using the GUI does not involve the global transaction confirm target or payTxFee.\n\n  The prospective fee displays in the smart fee slider and the coin control dialog are changed to use the fee calculation from GetMinimumFee, this simplifies the code and makes them slightly more correct in edge cases.\n\n  Maxing the fee calculation with the mempool min fee is move from estimateSmartFee to GetMinimumFee.\n\n  This fixes a long standing bug, and should be tagged for 0.15 as it is holding up finalizing the estimatesmartfee RPC API before release.\n\nTree-SHA512: 4d36a1bd5934aa62f3806d380fcafbef73e9fe5bdf190fc5259a3e3a13349e5ce796e50e7068c46dc630ccf56d061bce5804f0bfe2e082bb01ca725b63efd4c1",
      "tree": {
        "sha": "f6bc17fe9525f89343cc1cc873202742fe26b29e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6bc17fe9525f89343cc1cc873202742fe26b29e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6859ad2936bf431cd745b6763b62051319435742",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZbGZtAAoJEB5K7WKYbNJdtPsIALgjiHrQxYoRLH5T4luU1uE/\nbczOd+a2BNFoNYopFjSOSPI616rmHBWPdhmqam8hzkD2LU6J0CztG59JxRpw2XMP\nD7/MixncEa6MIyfI23cBmEpNBibgKOgxKYGlsfTeOh6YFoEOzkQlg14VaGPtpUNi\nQLjH9SeEYXFyPgj9OtKV4NVX9ekco3v9RsfLvozQT/2bdRrhSgfYx8tS2TERz5n/\ntqjkokRfKTxrHFHqzW/mkiWq1jQsT+AQHMcAbSN3bgIWsImh7xOLd72cwuVfPauJ\nWdaYvjV7SI2LxJohXfbbKc1WCB8PpBpdeSHWw5C7RlBkqHYtkKIpbtvbbuPX6Bk=\n=uVMl\n-----END PGP SIGNATURE-----",
        "payload": "tree f6bc17fe9525f89343cc1cc873202742fe26b29e\nparent bf0a08be281dc42241e7f264c2a20515eb4781bb\nparent 11590d39b9888403ead8354302e308eca139ba17\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1500274301 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1500276333 +0200\n\nMerge #10706: Improve wallet fee logic and fix GUI bugs\n\n11590d3 Properly bound check conf_target in wallet RPC calls (Alex Morcos)\nfd29d3d Remove checking of mempool min fee from estimateSmartFee. (Alex Morcos)\n2fffaa9 Make QT fee displays use GetMinimumFee instead of estimateSmartFee (Alex Morcos)\n1983ca6 Use CoinControl to pass custom fee setting from QT. (Alex Morcos)\n03ee701 Refactor to use CoinControl in GetMinimumFee and FeeBumper (Alex Morcos)\necd81df Make CoinControl a required argument to CreateTransaction (Alex Morcos)\n\nPull request description:\n\n  This builds on #10589  (first 5 commits from that PR, last 5 commits are new)\n\n  The first couple commits refactor to use the CCoinControl class to pass fee calculation parameters around.\n\n  This allows for fixing the buggy interaction in QT between the global payTxFee which can be modified by the RPC call settxfee or temporarily modified by the QT custom fee settings.  Before these changes the GUI could sometimes send a transaction with a recently set payTxFee and not respect the settings displayed in the GUI.   After these changes, using the GUI does not involve the global transaction confirm target or payTxFee.\n\n  The prospective fee displays in the smart fee slider and the coin control dialog are changed to use the fee calculation from GetMinimumFee, this simplifies the code and makes them slightly more correct in edge cases.\n\n  Maxing the fee calculation with the mempool min fee is move from estimateSmartFee to GetMinimumFee.\n\n  This fixes a long standing bug, and should be tagged for 0.15 as it is holding up finalizing the estimatesmartfee RPC API before release.\n\nTree-SHA512: 4d36a1bd5934aa62f3806d380fcafbef73e9fe5bdf190fc5259a3e3a13349e5ce796e50e7068c46dc630ccf56d061bce5804f0bfe2e082bb01ca725b63efd4c1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6859ad2936bf431cd745b6763b62051319435742",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6859ad2936bf431cd745b6763b62051319435742",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6859ad2936bf431cd745b6763b62051319435742/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf0a08be281dc42241e7f264c2a20515eb4781bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf0a08be281dc42241e7f264c2a20515eb4781bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf0a08be281dc42241e7f264c2a20515eb4781bb"
      },
      {
        "sha": "11590d39b9888403ead8354302e308eca139ba17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11590d39b9888403ead8354302e308eca139ba17",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11590d39b9888403ead8354302e308eca139ba17"
      }
    ],
    "stats": {
      "total": 422,
      "additions": 195,
      "deletions": 227
    },
    "files": [
      {
        "sha": "0f186fa84572e0c1664a8bf42424a640554de52c",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 59,
        "changes": 110,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6859ad2936bf431cd745b6763b62051319435742/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6859ad2936bf431cd745b6763b62051319435742/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=6859ad2936bf431cd745b6763b62051319435742",
        "patch": "@@ -826,89 +826,81 @@ double CBlockPolicyEstimator::estimateConservativeFee(unsigned int doubleTarget,\n  * estimates, however, required the 95% threshold at 2 * target be met for any\n  * longer time horizons also.\n  */\n-CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, FeeCalculation *feeCalc, const CTxMemPool& pool, bool conservative) const\n+CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, FeeCalculation *feeCalc, bool conservative) const\n {\n+    LOCK(cs_feeEstimator);\n+\n     if (feeCalc) {\n         feeCalc->desiredTarget = confTarget;\n         feeCalc->returnedTarget = confTarget;\n     }\n \n     double median = -1;\n     EstimationResult tempResult;\n-    {\n-        LOCK(cs_feeEstimator);\n \n-        // Return failure if trying to analyze a target we're not tracking\n-        if (confTarget <= 0 || (unsigned int)confTarget > longStats->GetMaxConfirms())\n-            return CFeeRate(0);\n+    // Return failure if trying to analyze a target we're not tracking\n+    if (confTarget <= 0 || (unsigned int)confTarget > longStats->GetMaxConfirms())\n+        return CFeeRate(0);\n \n-        // It's not possible to get reasonable estimates for confTarget of 1\n-        if (confTarget == 1)\n-            confTarget = 2;\n+    // It's not possible to get reasonable estimates for confTarget of 1\n+    if (confTarget == 1)\n+        confTarget = 2;\n \n-        unsigned int maxUsableEstimate = MaxUsableEstimate();\n-        if (maxUsableEstimate <= 1)\n-            return CFeeRate(0);\n+    unsigned int maxUsableEstimate = MaxUsableEstimate();\n+    if (maxUsableEstimate <= 1)\n+        return CFeeRate(0);\n \n-        if ((unsigned int)confTarget > maxUsableEstimate) {\n-            confTarget = maxUsableEstimate;\n-        }\n+    if ((unsigned int)confTarget > maxUsableEstimate) {\n+        confTarget = maxUsableEstimate;\n+    }\n \n-        assert(confTarget > 0); //estimateCombinedFee and estimateConservativeFee take unsigned ints\n-        /** true is passed to estimateCombined fee for target/2 and target so\n-         * that we check the max confirms for shorter time horizons as well.\n-         * This is necessary to preserve monotonically increasing estimates.\n-         * For non-conservative estimates we do the same thing for 2*target, but\n-         * for conservative estimates we want to skip these shorter horizons\n-         * checks for 2*target because we are taking the max over all time\n-         * horizons so we already have monotonically increasing estimates and\n-         * the purpose of conservative estimates is not to let short term\n-         * fluctuations lower our estimates by too much.\n-         */\n-        double halfEst = estimateCombinedFee(confTarget/2, HALF_SUCCESS_PCT, true, &tempResult);\n+    assert(confTarget > 0); //estimateCombinedFee and estimateConservativeFee take unsigned ints\n+    /** true is passed to estimateCombined fee for target/2 and target so\n+     * that we check the max confirms for shorter time horizons as well.\n+     * This is necessary to preserve monotonically increasing estimates.\n+     * For non-conservative estimates we do the same thing for 2*target, but\n+     * for conservative estimates we want to skip these shorter horizons\n+     * checks for 2*target because we are taking the max over all time\n+     * horizons so we already have monotonically increasing estimates and\n+     * the purpose of conservative estimates is not to let short term\n+     * fluctuations lower our estimates by too much.\n+     */\n+    double halfEst = estimateCombinedFee(confTarget/2, HALF_SUCCESS_PCT, true, &tempResult);\n+    if (feeCalc) {\n+        feeCalc->est = tempResult;\n+        feeCalc->reason = FeeReason::HALF_ESTIMATE;\n+    }\n+    median = halfEst;\n+    double actualEst = estimateCombinedFee(confTarget, SUCCESS_PCT, true, &tempResult);\n+    if (actualEst > median) {\n+        median = actualEst;\n         if (feeCalc) {\n             feeCalc->est = tempResult;\n-            feeCalc->reason = FeeReason::HALF_ESTIMATE;\n+            feeCalc->reason = FeeReason::FULL_ESTIMATE;\n         }\n-        median = halfEst;\n-        double actualEst = estimateCombinedFee(confTarget, SUCCESS_PCT, true, &tempResult);\n-        if (actualEst > median) {\n-            median = actualEst;\n-            if (feeCalc) {\n-                feeCalc->est = tempResult;\n-                feeCalc->reason = FeeReason::FULL_ESTIMATE;\n-            }\n+    }\n+    double doubleEst = estimateCombinedFee(2 * confTarget, DOUBLE_SUCCESS_PCT, !conservative, &tempResult);\n+    if (doubleEst > median) {\n+        median = doubleEst;\n+        if (feeCalc) {\n+            feeCalc->est = tempResult;\n+            feeCalc->reason = FeeReason::DOUBLE_ESTIMATE;\n         }\n-        double doubleEst = estimateCombinedFee(2 * confTarget, DOUBLE_SUCCESS_PCT, !conservative, &tempResult);\n-        if (doubleEst > median) {\n-            median = doubleEst;\n+    }\n+\n+    if (conservative || median == -1) {\n+        double consEst =  estimateConservativeFee(2 * confTarget, &tempResult);\n+        if (consEst > median) {\n+            median = consEst;\n             if (feeCalc) {\n                 feeCalc->est = tempResult;\n-                feeCalc->reason = FeeReason::DOUBLE_ESTIMATE;\n+                feeCalc->reason = FeeReason::CONSERVATIVE;\n             }\n         }\n-\n-        if (conservative || median == -1) {\n-            double consEst =  estimateConservativeFee(2 * confTarget, &tempResult);\n-            if (consEst > median) {\n-                median = consEst;\n-                if (feeCalc) {\n-                    feeCalc->est = tempResult;\n-                    feeCalc->reason = FeeReason::CONSERVATIVE;\n-                }\n-            }\n-        }\n-    } // Must unlock cs_feeEstimator before taking mempool locks\n+    }\n \n     if (feeCalc) feeCalc->returnedTarget = confTarget;\n \n-    // If mempool is limiting txs , return at least the min feerate from the mempool\n-    CAmount minPoolFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n-    if (minPoolFee > 0 && minPoolFee > median) {\n-        if (feeCalc) feeCalc->reason = FeeReason::MEMPOOL_MIN;\n-        return CFeeRate(minPoolFee);\n-    }\n-\n     if (median < 0)\n         return CFeeRate(0);\n "
      },
      {
        "sha": "f4ef793643076ca22ac8fb726b1717f31304c094",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6859ad2936bf431cd745b6763b62051319435742/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6859ad2936bf431cd745b6763b62051319435742/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=6859ad2936bf431cd745b6763b62051319435742",
        "patch": "@@ -208,7 +208,7 @@ class CBlockPolicyEstimator\n      *  the closest target where one can be given.  'conservative' estimates are\n      *  valid over longer time horizons also.\n      */\n-    CFeeRate estimateSmartFee(int confTarget, FeeCalculation *feeCalc, const CTxMemPool& pool, bool conservative) const;\n+    CFeeRate estimateSmartFee(int confTarget, FeeCalculation *feeCalc, bool conservative) const;\n \n     /** Return a specific fee estimate calculation with a given success\n      * threshold and time horizon, and optionally return detailed data about"
      },
      {
        "sha": "f3ee0fbe393aeace65b734393481a58623d164f7",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 9,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6859ad2936bf431cd745b6763b62051319435742/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6859ad2936bf431cd745b6763b62051319435742/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=6859ad2936bf431cd745b6763b62051319435742",
        "patch": "@@ -490,8 +490,6 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         else nBytesInputs += 148;\n     }\n \n-    bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET, coinControl->signalRbf);\n-\n     // calculation\n     if (nQuantity > 0)\n     {\n@@ -512,7 +510,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n                 nBytes -= 34;\n \n         // Fee\n-        nPayFee = CWallet::GetMinimumFee(nBytes, coinControl->nConfirmTarget, ::mempool, ::feeEstimator, nullptr /* FeeCalculation */, false /* ignoreGlobalPayTxFee */, conservative_estimate);\n+        nPayFee = CWallet::GetMinimumFee(nBytes, *coinControl, ::mempool, ::feeEstimator, nullptr /* FeeCalculation */);\n \n         if (nPayAmount > 0)\n         {\n@@ -583,12 +581,8 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     QString toolTipDust = tr(\"This label turns red if any recipient receives an amount smaller than the current dust threshold.\");\n \n     // how many satoshis the estimated fee can vary per byte we guess wrong\n-    double dFeeVary;\n-    if (payTxFee.GetFeePerK() > 0)\n-        dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), payTxFee.GetFeePerK()) / 1000;\n-    else {\n-        dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), ::feeEstimator.estimateSmartFee(coinControl->nConfirmTarget, NULL, ::mempool, conservative_estimate).GetFeePerK()) / 1000;\n-    }\n+    double dFeeVary = (double)nPayFee / nBytes;\n+\n     QString toolTip4 = tr(\"Can vary +/- %1 satoshi(s) per input.\").arg(dFeeVary);\n \n     l3->setToolTip(toolTip4);"
      },
      {
        "sha": "a01886c3ea8aefbe9026e04e9c2d3d06e3781700",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 42,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6859ad2936bf431cd745b6763b62051319435742/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6859ad2936bf431cd745b6763b62051319435742/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=6859ad2936bf431cd745b6763b62051319435742",
        "patch": "@@ -175,26 +175,20 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n             ui->confTargetSelector->addItem(tr(\"%1 (%2 blocks)\").arg(GUIUtil::formatNiceTimeOffset(n*Params().GetConsensus().nPowTargetSpacing)).arg(n));\n         }\n         connect(ui->confTargetSelector, SIGNAL(currentIndexChanged(int)), this, SLOT(updateSmartFeeLabel()));\n-        connect(ui->confTargetSelector, SIGNAL(currentIndexChanged(int)), this, SLOT(updateGlobalFeeVariables()));\n         connect(ui->confTargetSelector, SIGNAL(currentIndexChanged(int)), this, SLOT(coinControlUpdateLabels()));\n         connect(ui->groupFee, SIGNAL(buttonClicked(int)), this, SLOT(updateFeeSectionControls()));\n-        connect(ui->groupFee, SIGNAL(buttonClicked(int)), this, SLOT(updateGlobalFeeVariables()));\n         connect(ui->groupFee, SIGNAL(buttonClicked(int)), this, SLOT(coinControlUpdateLabels()));\n-        connect(ui->groupCustomFee, SIGNAL(buttonClicked(int)), this, SLOT(updateGlobalFeeVariables()));\n         connect(ui->groupCustomFee, SIGNAL(buttonClicked(int)), this, SLOT(coinControlUpdateLabels()));\n-        connect(ui->customFee, SIGNAL(valueChanged()), this, SLOT(updateGlobalFeeVariables()));\n         connect(ui->customFee, SIGNAL(valueChanged()), this, SLOT(coinControlUpdateLabels()));\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(setMinimumFee()));\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(updateFeeSectionControls()));\n-        connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(updateGlobalFeeVariables()));\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(coinControlUpdateLabels()));\n         connect(ui->optInRBF, SIGNAL(stateChanged(int)), this, SLOT(updateSmartFeeLabel()));\n         connect(ui->optInRBF, SIGNAL(stateChanged(int)), this, SLOT(coinControlUpdateLabels()));\n         ui->customFee->setSingleStep(CWallet::GetRequiredFee(1000));\n         updateFeeSectionControls();\n         updateMinFeeLabel();\n         updateSmartFeeLabel();\n-        updateGlobalFeeVariables();\n \n         // set default rbf checkbox state\n         ui->optInRBF->setCheckState(model->getDefaultWalletRbf() ? Qt::Checked : Qt::Unchecked);\n@@ -274,14 +268,10 @@ void SendCoinsDialog::on_sendButton_clicked()\n     CCoinControl ctrl;\n     if (model->getOptionsModel()->getCoinControlFeatures())\n         ctrl = *CoinControlDialog::coinControl;\n-    if (ui->radioSmartFee->isChecked())\n-        ctrl.nConfirmTarget = getConfTargetForIndex(ui->confTargetSelector->currentIndex());\n-    else\n-        ctrl.nConfirmTarget = 0;\n \n-    ctrl.signalRbf = ui->optInRBF->isChecked();\n+    updateCoinControlState(ctrl);\n \n-    prepareStatus = model->prepareTransaction(currentTransaction, &ctrl);\n+    prepareStatus = model->prepareTransaction(currentTransaction, ctrl);\n \n     // process prepareStatus and on error generate message shown to user\n     processSendCoinsReturn(prepareStatus,\n@@ -636,18 +626,6 @@ void SendCoinsDialog::updateFeeSectionControls()\n     ui->customFee               ->setEnabled(ui->radioCustomFee->isChecked() && !ui->checkBoxMinimumFee->isChecked());\n }\n \n-void SendCoinsDialog::updateGlobalFeeVariables()\n-{\n-    if (ui->radioSmartFee->isChecked())\n-    {\n-        payTxFee = CFeeRate(0);\n-    }\n-    else\n-    {\n-        payTxFee = CFeeRate(ui->customFee->value());\n-    }\n-}\n-\n void SendCoinsDialog::updateFeeMinimizedLabel()\n {\n     if(!model || !model->getOptionsModel())\n@@ -669,19 +647,32 @@ void SendCoinsDialog::updateMinFeeLabel()\n         );\n }\n \n+void SendCoinsDialog::updateCoinControlState(CCoinControl& ctrl)\n+{\n+    if (ui->radioCustomFee->isChecked()) {\n+        ctrl.m_feerate = CFeeRate(ui->customFee->value());\n+    } else {\n+        ctrl.m_feerate.reset();\n+    }\n+    // Avoid using global defaults when sending money from the GUI\n+    // Either custom fee will be used or if not selected, the confirmation target from dropdown box\n+    ctrl.m_confirm_target = getConfTargetForIndex(ui->confTargetSelector->currentIndex());\n+    ctrl.signalRbf = ui->optInRBF->isChecked();\n+}\n+\n void SendCoinsDialog::updateSmartFeeLabel()\n {\n     if(!model || !model->getOptionsModel())\n         return;\n-\n-    int nBlocksToConfirm = getConfTargetForIndex(ui->confTargetSelector->currentIndex());\n+    CCoinControl coin_control;\n+    updateCoinControlState(coin_control);\n+    coin_control.m_feerate.reset(); // Explicitly use only fee estimation rate for smart fee labels\n     FeeCalculation feeCalc;\n-    bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET, ui->optInRBF->isChecked());\n-    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocksToConfirm, &feeCalc, ::mempool, conservative_estimate);\n-    if (feeRate <= CFeeRate(0)) // not enough data => minfee\n-    {\n-        ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(),\n-                                                                std::max(CWallet::fallbackFee.GetFeePerK(), CWallet::GetRequiredFee(1000))) + \"/kB\");\n+    CFeeRate feeRate = CFeeRate(CWallet::GetMinimumFee(1000, coin_control, ::mempool, ::feeEstimator, &feeCalc));\n+\n+    ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), feeRate.GetFeePerK()) + \"/kB\");\n+\n+    if (feeCalc.reason == FeeReason::FALLBACK) {\n         ui->labelSmartFee2->show(); // (Smart fee not initialized yet. This usually takes a few blocks...)\n         ui->labelFeeEstimation->setText(\"\");\n         ui->fallbackFeeWarningLabel->setVisible(true);\n@@ -692,8 +683,6 @@ void SendCoinsDialog::updateSmartFeeLabel()\n     }\n     else\n     {\n-        ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(),\n-                                                                std::max(feeRate.GetFeePerK(), CWallet::GetRequiredFee(1000))) + \"/kB\");\n         ui->labelSmartFee2->hide();\n         ui->labelFeeEstimation->setText(tr(\"Estimated to begin confirmation within %n block(s).\", \"\", feeCalc.returnedTarget));\n         ui->fallbackFeeWarningLabel->setVisible(false);\n@@ -752,8 +741,6 @@ void SendCoinsDialog::coinControlFeatureChanged(bool checked)\n     if (!checked && model) // coin control features disabled\n         CoinControlDialog::coinControl->SetNull();\n \n-    // make sure we set back the confirmation target\n-    updateGlobalFeeVariables();\n     coinControlUpdateLabels();\n }\n \n@@ -844,15 +831,11 @@ void SendCoinsDialog::coinControlUpdateLabels()\n     if (!model || !model->getOptionsModel())\n         return;\n \n+    updateCoinControlState(*CoinControlDialog::coinControl);\n+\n     // set pay amounts\n     CoinControlDialog::payAmounts.clear();\n     CoinControlDialog::fSubtractFeeFromAmount = false;\n-    if (ui->radioSmartFee->isChecked()) {\n-        CoinControlDialog::coinControl->nConfirmTarget = getConfTargetForIndex(ui->confTargetSelector->currentIndex());\n-    } else {\n-        CoinControlDialog::coinControl->nConfirmTarget = model->getDefaultConfirmTarget();\n-    }\n-    CoinControlDialog::coinControl->signalRbf = ui->optInRBF->isChecked();\n \n     for(int i = 0; i < ui->entries->count(); ++i)\n     {"
      },
      {
        "sha": "70b4aa5a03ab3080bfd0924db680604971049db2",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6859ad2936bf431cd745b6763b62051319435742/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6859ad2936bf431cd745b6763b62051319435742/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=6859ad2936bf431cd745b6763b62051319435742",
        "patch": "@@ -68,6 +68,8 @@ public Q_SLOTS:\n     void processSendCoinsReturn(const WalletModel::SendCoinsReturn &sendCoinsReturn, const QString &msgArg = QString());\n     void minimizeFeeSection(bool fMinimize);\n     void updateFeeMinimizedLabel();\n+    // Update the passed in CCoinControl with state from the GUI\n+    void updateCoinControlState(CCoinControl& ctrl);\n \n private Q_SLOTS:\n     void on_sendButton_clicked();\n@@ -91,7 +93,6 @@ private Q_SLOTS:\n     void updateFeeSectionControls();\n     void updateMinFeeLabel();\n     void updateSmartFeeLabel();\n-    void updateGlobalFeeVariables();\n \n Q_SIGNALS:\n     // Fired when a message should be reported to the user"
      },
      {
        "sha": "ba0e1da0c787104f303f76050f095b01a490d4fb",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6859ad2936bf431cd745b6763b62051319435742/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6859ad2936bf431cd745b6763b62051319435742/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=6859ad2936bf431cd745b6763b62051319435742",
        "patch": "@@ -24,6 +24,7 @@\n #include \"sync.h\"\n #include \"ui_interface.h\"\n #include \"util.h\" // for GetBoolArg\n+#include \"wallet/coincontrol.h\"\n #include \"wallet/feebumper.h\"\n #include \"wallet/wallet.h\"\n #include \"wallet/walletdb.h\" // for BackupWallet\n@@ -191,7 +192,7 @@ bool WalletModel::validateAddress(const QString &address)\n     return addressParsed.IsValid();\n }\n \n-WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransaction &transaction, const CCoinControl *coinControl)\n+WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransaction &transaction, const CCoinControl& coinControl)\n {\n     CAmount total = 0;\n     bool fSubtractFeeFromAmount = false;\n@@ -258,7 +259,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n         return DuplicateAddress;\n     }\n \n-    CAmount nBalance = getBalance(coinControl);\n+    CAmount nBalance = getBalance(&coinControl);\n \n     if(total > nBalance)\n     {\n@@ -667,8 +668,10 @@ bool WalletModel::bumpFee(uint256 hash)\n {\n     std::unique_ptr<CFeeBumper> feeBump;\n     {\n+        CCoinControl coin_control;\n+        coin_control.signalRbf = true;\n         LOCK2(cs_main, wallet->cs_wallet);\n-        feeBump.reset(new CFeeBumper(wallet, hash, nTxConfirmTarget, false, 0, true, FeeEstimateMode::UNSET));\n+        feeBump.reset(new CFeeBumper(wallet, hash, coin_control, 0));\n     }\n     if (feeBump->getResult() != BumpFeeResult::OK)\n     {"
      },
      {
        "sha": "5258dc669939a2b310e9822def01f17e74c7b920",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6859ad2936bf431cd745b6763b62051319435742/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6859ad2936bf431cd745b6763b62051319435742/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=6859ad2936bf431cd745b6763b62051319435742",
        "patch": "@@ -154,7 +154,7 @@ class WalletModel : public QObject\n     };\n \n     // prepare transaction for getting txfee before sending coins\n-    SendCoinsReturn prepareTransaction(WalletModelTransaction &transaction, const CCoinControl *coinControl = NULL);\n+    SendCoinsReturn prepareTransaction(WalletModelTransaction &transaction, const CCoinControl& coinControl);\n \n     // Send coins to a list of recipients\n     SendCoinsReturn sendCoins(WalletModelTransaction &transaction);"
      },
      {
        "sha": "b8c94d32ecf6a74453364f08198abe10f096d532",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6859ad2936bf431cd745b6763b62051319435742/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6859ad2936bf431cd745b6763b62051319435742/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=6859ad2936bf431cd745b6763b62051319435742",
        "patch": "@@ -30,6 +30,16 @@\n \n #include <univalue.h>\n \n+unsigned int ParseConfirmTarget(const UniValue& value)\n+{\n+    int target = value.get_int();\n+    unsigned int max_target = ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n+    if (target < 1 || (unsigned int)target > max_target) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid conf_target, must be between %u - %u\", 1, max_target));\n+    }\n+    return (unsigned int)target;\n+}\n+\n /**\n  * Return average network hashes per second based on the last 'lookup' blocks,\n  * or from the last difficulty change if 'lookup' is nonpositive.\n@@ -815,7 +825,6 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n             \"\\n\"\n             \"A negative value is returned if not enough transactions and blocks\\n\"\n             \"have been observed to make an estimate for any number of blocks.\\n\"\n-            \"However it will not return a value below the mempool reject fee.\\n\"\n             \"\\nExample:\\n\"\n             + HelpExampleCli(\"estimatesmartfee\", \"6\")\n             );\n@@ -831,7 +840,7 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n \n     UniValue result(UniValue::VOBJ);\n     FeeCalculation feeCalc;\n-    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &feeCalc, ::mempool, conservative);\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &feeCalc, conservative);\n     result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n     result.push_back(Pair(\"blocks\", feeCalc.returnedTarget));\n     return result;"
      },
      {
        "sha": "868d7002b5ff465f1c317cc6a5b01e723c5cd28d",
        "filename": "src/rpc/mining.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6859ad2936bf431cd745b6763b62051319435742/src/rpc/mining.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6859ad2936bf431cd745b6763b62051319435742/src/rpc/mining.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.h?ref=6859ad2936bf431cd745b6763b62051319435742",
        "patch": "@@ -12,4 +12,7 @@\n /** Generate blocks (mine) */\n UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGenerate, uint64_t nMaxTries, bool keepScript);\n \n+/** Check bounds on a command line confirm target */\n+unsigned int ParseConfirmTarget(const UniValue& value);\n+\n #endif"
      },
      {
        "sha": "fd8f7191f4fafbf24e13be6ddbc817c19220953d",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6859ad2936bf431cd745b6763b62051319435742/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6859ad2936bf431cd745b6763b62051319435742/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=6859ad2936bf431cd745b6763b62051319435742",
        "patch": "@@ -177,16 +177,6 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     for (int i = 2; i < 9; i++) { // At 9, the original estimate was already at the bottom (b/c scale = 2)\n         BOOST_CHECK(feeEst.estimateFee(i).GetFeePerK() < origFeeEst[i-1] - deltaFee);\n     }\n-\n-    // Test that if the mempool is limited, estimateSmartFee won't return a value below the mempool min fee\n-    mpool.addUnchecked(tx.GetHash(),  entry.Fee(feeV[5]).Time(GetTime()).Height(blocknum).FromTx(tx));\n-    // evict that transaction which should set a mempool min fee of minRelayTxFee + feeV[5]\n-    mpool.TrimToSize(1);\n-    BOOST_CHECK(mpool.GetMinFee(1).GetFeePerK() > feeV[5]);\n-    for (int i = 1; i < 10; i++) {\n-        BOOST_CHECK(feeEst.estimateSmartFee(i, NULL, mpool, true).GetFeePerK() >= feeEst.estimateRawFee(i, 0.85, FeeEstimateHorizon::MED_HALFLIFE).GetFeePerK());\n-        BOOST_CHECK(feeEst.estimateSmartFee(i, NULL, mpool, true).GetFeePerK() >= mpool.GetMinFee(1).GetFeePerK());\n-    }\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "fc0e7c519ed012637f301e7dd8e692848d1f57f2",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6859ad2936bf431cd745b6763b62051319435742/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6859ad2936bf431cd745b6763b62051319435742/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=6859ad2936bf431cd745b6763b62051319435742",
        "patch": "@@ -10,6 +10,8 @@\n #include \"primitives/transaction.h\"\n #include \"wallet/wallet.h\"\n \n+#include <boost/optional.hpp>\n+\n /** Coin Control Features. */\n class CCoinControl\n {\n@@ -19,12 +21,12 @@ class CCoinControl\n     bool fAllowOtherInputs;\n     //! Includes watch only addresses which match the ISMINE_WATCH_SOLVABLE criteria\n     bool fAllowWatchOnly;\n-    //! Override estimated feerate\n+    //! Override automatic min/max checks on fee, m_feerate must be set if true\n     bool fOverrideFeeRate;\n-    //! Feerate to use if overrideFeeRate is true\n-    CFeeRate nFeeRate;\n-    //! Override the default confirmation target, 0 = use default\n-    int nConfirmTarget;\n+    //! Override the default payTxFee if set\n+    boost::optional<CFeeRate> m_feerate;\n+    //! Override the default confirmation target if set\n+    boost::optional<unsigned int> m_confirm_target;\n     //! Signal BIP-125 replace by fee.\n     bool signalRbf;\n     //! Fee estimation mode to control arguments to estimateSmartFee\n@@ -41,9 +43,9 @@ class CCoinControl\n         fAllowOtherInputs = false;\n         fAllowWatchOnly = false;\n         setSelected.clear();\n-        nFeeRate = CFeeRate(0);\n+        m_feerate.reset();\n         fOverrideFeeRate = false;\n-        nConfirmTarget = 0;\n+        m_confirm_target.reset();\n         signalRbf = fWalletRbf;\n         m_fee_mode = FeeEstimateMode::UNSET;\n     }"
      },
      {
        "sha": "4bfd8726a54f771b46c1df7fe478ab964a5415e3",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6859ad2936bf431cd745b6763b62051319435742/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6859ad2936bf431cd745b6763b62051319435742/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=6859ad2936bf431cd745b6763b62051319435742",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"consensus/validation.h\"\n+#include \"wallet/coincontrol.h\"\n #include \"wallet/feebumper.h\"\n #include \"wallet/wallet.h\"\n #include \"policy/fees.h\"\n@@ -66,7 +67,7 @@ bool CFeeBumper::preconditionChecks(const CWallet *pWallet, const CWalletTx& wtx\n     return true;\n }\n \n-CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConfirmTarget, bool ignoreGlobalPayTxFee, CAmount totalFee, bool newTxReplaceable, FeeEstimateMode fee_mode)\n+CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, const CCoinControl& coin_control, CAmount totalFee)\n     :\n     txid(std::move(txidIn)),\n     nOldFee(0),\n@@ -165,8 +166,7 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n         nNewFee = totalFee;\n         nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n     } else {\n-        bool conservative_estimate = CalculateEstimateType(fee_mode, newTxReplaceable);\n-        nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, ::feeEstimator, nullptr /* FeeCalculation */, ignoreGlobalPayTxFee, conservative_estimate);\n+        nNewFee = CWallet::GetMinimumFee(maxNewTxSize, coin_control, mempool, ::feeEstimator, nullptr /* FeeCalculation */);\n         nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n \n         // New fee rate must be at least old rate + minimum incremental relay rate\n@@ -221,7 +221,7 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n     }\n \n     // Mark new tx not replaceable, if requested.\n-    if (!newTxReplaceable) {\n+    if (!coin_control.signalRbf) {\n         for (auto& input : mtx.vin) {\n             if (input.nSequence < 0xfffffffe) input.nSequence = 0xfffffffe;\n         }"
      },
      {
        "sha": "3d64e53c15c850d4c8e839b0c36ad694eb540385",
        "filename": "src/wallet/feebumper.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6859ad2936bf431cd745b6763b62051319435742/src/wallet/feebumper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6859ad2936bf431cd745b6763b62051319435742/src/wallet/feebumper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.h?ref=6859ad2936bf431cd745b6763b62051319435742",
        "patch": "@@ -10,6 +10,7 @@\n class CWallet;\n class CWalletTx;\n class uint256;\n+class CCoinControl;\n enum class FeeEstimateMode;\n \n enum class BumpFeeResult\n@@ -25,7 +26,7 @@ enum class BumpFeeResult\n class CFeeBumper\n {\n public:\n-    CFeeBumper(const CWallet *pWalletIn, const uint256 txidIn, int newConfirmTarget, bool ignoreGlobalPayTxFee, CAmount totalFee, bool newTxReplaceable, FeeEstimateMode fee_mode);\n+    CFeeBumper(const CWallet *pWalletIn, const uint256 txidIn, const CCoinControl& coin_control, CAmount totalFee);\n     BumpFeeResult getResult() const { return currentResult; }\n     const std::vector<std::string>& getErrors() const { return vErrors; }\n     CAmount getOldFee() const { return nOldFee; }"
      },
      {
        "sha": "ee8c7548fc61f2309698730b0835e9aed63dac8c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 28,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6859ad2936bf431cd745b6763b62051319435742/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6859ad2936bf431cd745b6763b62051319435742/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=6859ad2936bf431cd745b6763b62051319435742",
        "patch": "@@ -356,7 +356,7 @@ UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n     return ret;\n }\n \n-static void SendMoney(CWallet * const pwallet, const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew, CCoinControl *coin_control = nullptr)\n+static void SendMoney(CWallet * const pwallet, const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew, const CCoinControl& coin_control)\n {\n     CAmount curBalance = pwallet->GetBalance();\n \n@@ -460,7 +460,7 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n     }\n \n     if (request.params.size() > 6 && !request.params[6].isNull()) {\n-        coin_control.nConfirmTarget = request.params[6].get_int();\n+        coin_control.m_confirm_target = ParseConfirmTarget(request.params[6]);\n     }\n \n     if (request.params.size() > 7 && !request.params[7].isNull()) {\n@@ -472,7 +472,7 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n \n     EnsureWalletIsUnlocked(pwallet);\n \n-    SendMoney(pwallet, address.Get(), nAmount, fSubtractFeeFromAmount, wtx, &coin_control);\n+    SendMoney(pwallet, address.Get(), nAmount, fSubtractFeeFromAmount, wtx, coin_control);\n \n     return wtx.GetHash().GetHex();\n }\n@@ -898,7 +898,8 @@ UniValue sendfrom(const JSONRPCRequest& request)\n     if (nAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n-    SendMoney(pwallet, address.Get(), nAmount, false, wtx);\n+    CCoinControl no_coin_control; // This is a deprecated API\n+    SendMoney(pwallet, address.Get(), nAmount, false, wtx, no_coin_control);\n \n     return wtx.GetHash().GetHex();\n }\n@@ -980,7 +981,7 @@ UniValue sendmany(const JSONRPCRequest& request)\n     }\n \n     if (request.params.size() > 6 && !request.params[6].isNull()) {\n-        coin_control.nConfirmTarget = request.params[6].get_int();\n+        coin_control.m_confirm_target = ParseConfirmTarget(request.params[6]);\n     }\n \n     if (request.params.size() > 7 && !request.params[7].isNull()) {\n@@ -1033,7 +1034,7 @@ UniValue sendmany(const JSONRPCRequest& request)\n     CAmount nFeeRequired = 0;\n     int nChangePosRet = -1;\n     std::string strFailReason;\n-    bool fCreated = pwallet->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, nChangePosRet, strFailReason, &coin_control);\n+    bool fCreated = pwallet->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, nChangePosRet, strFailReason, coin_control);\n     if (!fCreated)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n     CValidationState state;\n@@ -2729,13 +2730,9 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     RPCTypeCheck(request.params, {UniValue::VSTR});\n \n     CCoinControl coinControl;\n-    coinControl.destChange = CNoDestination();\n     int changePosition = -1;\n-    coinControl.fAllowWatchOnly = false;  // include watching\n     bool lockUnspents = false;\n     bool reserveChangeKey = true;\n-    coinControl.nFeeRate = CFeeRate(0);\n-    coinControl.fOverrideFeeRate = false;\n     UniValue subtractFeeFromOutputs;\n     std::set<int> setSubtractFeeFromOutputs;\n \n@@ -2787,7 +2784,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n \n         if (options.exists(\"feeRate\"))\n         {\n-            coinControl.nFeeRate = CFeeRate(AmountFromValue(options[\"feeRate\"]));\n+            coinControl.m_feerate = CFeeRate(AmountFromValue(options[\"feeRate\"]));\n             coinControl.fOverrideFeeRate = true;\n         }\n \n@@ -2798,7 +2795,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n             coinControl.signalRbf = options[\"replaceable\"].get_bool();\n         }\n         if (options.exists(\"conf_target\")) {\n-            coinControl.nConfirmTarget = options[\"conf_target\"].get_int();\n+            coinControl.m_confirm_target = ParseConfirmTarget(options[\"conf_target\"]);\n         }\n         if (options.exists(\"estimate_mode\")) {\n             if (!FeeModeFromString(options[\"estimate_mode\"].get_str(), coinControl.m_fee_mode)) {\n@@ -2904,11 +2901,9 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     hash.SetHex(request.params[0].get_str());\n \n     // optional parameters\n-    bool ignoreGlobalPayTxFee = false;\n-    int newConfirmTarget = nTxConfirmTarget;\n     CAmount totalFee = 0;\n-    bool replaceable = true;\n-    FeeEstimateMode fee_mode = FeeEstimateMode::UNSET;\n+    CCoinControl coin_control;\n+    coin_control.signalRbf = true;\n     if (request.params.size() > 1) {\n         UniValue options = request.params[1];\n         RPCTypeCheckObj(options,\n@@ -2922,15 +2917,8 @@ UniValue bumpfee(const JSONRPCRequest& request)\n \n         if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n-        } else if (options.exists(\"confTarget\")) {\n-            // If the user has explicitly set a confTarget in this rpc call,\n-            // then override the default logic that uses the global payTxFee\n-            // instead of the confirmation target.\n-            ignoreGlobalPayTxFee = true;\n-            newConfirmTarget = options[\"confTarget\"].get_int();\n-            if (newConfirmTarget <= 0) { // upper-bound will be checked by estimatefee/smartfee\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n-            }\n+        } else if (options.exists(\"confTarget\")) { // TODO: alias this to conf_target\n+            coin_control.m_confirm_target = ParseConfirmTarget(options[\"confTarget\"]);\n         } else if (options.exists(\"totalFee\")) {\n             totalFee = options[\"totalFee\"].get_int64();\n             if (totalFee <= 0) {\n@@ -2939,10 +2927,10 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         }\n \n         if (options.exists(\"replaceable\")) {\n-            replaceable = options[\"replaceable\"].get_bool();\n+            coin_control.signalRbf = options[\"replaceable\"].get_bool();\n         }\n         if (options.exists(\"estimate_mode\")) {\n-            if (!FeeModeFromString(options[\"estimate_mode\"].get_str(), fee_mode)) {\n+            if (!FeeModeFromString(options[\"estimate_mode\"].get_str(), coin_control.m_fee_mode)) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n             }\n         }\n@@ -2951,7 +2939,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     LOCK2(cs_main, pwallet->cs_wallet);\n     EnsureWalletIsUnlocked(pwallet);\n \n-    CFeeBumper feeBump(pwallet, hash, newConfirmTarget, ignoreGlobalPayTxFee, totalFee, replaceable, fee_mode);\n+    CFeeBumper feeBump(pwallet, hash, coin_control, totalFee);\n     BumpFeeResult res = feeBump.getResult();\n     if (res != BumpFeeResult::OK)\n     {"
      },
      {
        "sha": "8176a0017c9fe6824a6be1afa0f7b5f238f709b4",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6859ad2936bf431cd745b6763b62051319435742/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6859ad2936bf431cd745b6763b62051319435742/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=6859ad2936bf431cd745b6763b62051319435742",
        "patch": "@@ -13,6 +13,7 @@\n #include \"rpc/server.h\"\n #include \"test/test_bitcoin.h\"\n #include \"validation.h\"\n+#include \"wallet/coincontrol.h\"\n #include \"wallet/test/wallet_test_fixture.h\"\n \n #include <boost/test/unit_test.hpp>\n@@ -617,7 +618,8 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         CAmount fee;\n         int changePos = -1;\n         std::string error;\n-        BOOST_CHECK(wallet->CreateTransaction({recipient}, wtx, reservekey, fee, changePos, error));\n+        CCoinControl dummy;\n+        BOOST_CHECK(wallet->CreateTransaction({recipient}, wtx, reservekey, fee, changePos, error, dummy));\n         CValidationState state;\n         BOOST_CHECK(wallet->CommitTransaction(wtx, reservekey, nullptr, state));\n         auto it = wallet->mapWallet.find(wtx.GetHash());"
      },
      {
        "sha": "13da7bb2c2f08f91afa4df616e18f96300f19e31",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 54,
        "changes": 110,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6859ad2936bf431cd745b6763b62051319435742/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6859ad2936bf431cd745b6763b62051319435742/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6859ad2936bf431cd745b6763b62051319435742",
        "patch": "@@ -2469,9 +2469,9 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n \n     CReserveKey reservekey(this);\n     CWalletTx wtx;\n-    if (!CreateTransaction(vecSend, wtx, reservekey, nFeeRet, nChangePosInOut, strFailReason, &coinControl, false))\n+    if (!CreateTransaction(vecSend, wtx, reservekey, nFeeRet, nChangePosInOut, strFailReason, coinControl, false)) {\n         return false;\n-\n+    }\n     if (nChangePosInOut != -1)\n         tx.vout.insert(tx.vout.begin() + nChangePosInOut, wtx.tx->vout[nChangePosInOut]);\n \n@@ -2502,7 +2502,7 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n }\n \n bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet,\n-                                int& nChangePosInOut, std::string& strFailReason, const CCoinControl* coinControl, bool sign)\n+                                int& nChangePosInOut, std::string& strFailReason, const CCoinControl& coin_control, bool sign)\n {\n     CAmount nValue = 0;\n     int nChangePosRequest = nChangePosInOut;\n@@ -2567,20 +2567,17 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n         LOCK2(cs_main, cs_wallet);\n         {\n             std::vector<COutput> vAvailableCoins;\n-            AvailableCoins(vAvailableCoins, true, coinControl);\n+            AvailableCoins(vAvailableCoins, true, &coin_control);\n \n             // Create change script that will be used if we need change\n             // TODO: pass in scriptChange instead of reservekey so\n             // change transaction isn't always pay-to-bitcoin-address\n             CScript scriptChange;\n \n             // coin control: send change to custom address\n-            if (coinControl && !boost::get<CNoDestination>(&coinControl->destChange))\n-                scriptChange = GetScriptForDestination(coinControl->destChange);\n-\n-            // no coin control: send change to newly generated address\n-            else\n-            {\n+            if (!boost::get<CNoDestination>(&coin_control.destChange)) {\n+                scriptChange = GetScriptForDestination(coin_control.destChange);\n+            } else { // no coin control: send change to newly generated address\n                 // Note: We use a new key here to keep it from being obvious which side is the change.\n                 //  The drawback is that by not reusing a previous key, the change may be lost if a\n                 //  backup is restored, if the backup doesn't have the new private key for the change.\n@@ -2654,7 +2651,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 if (pick_new_inputs) {\n                     nValueIn = 0;\n                     setCoins.clear();\n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coinControl))\n+                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, &coin_control))\n                     {\n                         strFailReason = _(\"Insufficient funds\");\n                         return false;\n@@ -2705,8 +2702,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 // to avoid conflicting with other possible uses of nSequence,\n                 // and in the spirit of \"smallest possible change from prior\n                 // behavior.\"\n-                bool rbf = coinControl ? coinControl->signalRbf : fWalletRbf;\n-                const uint32_t nSequence = rbf ? MAX_BIP125_RBF_SEQUENCE : (std::numeric_limits<unsigned int>::max() - 1);\n+                const uint32_t nSequence = coin_control.signalRbf ? MAX_BIP125_RBF_SEQUENCE : (std::numeric_limits<unsigned int>::max() - 1);\n                 for (const auto& coin : setCoins)\n                     txNew.vin.push_back(CTxIn(coin.outpoint,CScript(),\n                                               nSequence));\n@@ -2725,17 +2721,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                     vin.scriptWitness.SetNull();\n                 }\n \n-                // Allow to override the default confirmation target over the CoinControl instance\n-                int currentConfirmationTarget = nTxConfirmTarget;\n-                if (coinControl && coinControl->nConfirmTarget > 0)\n-                    currentConfirmationTarget = coinControl->nConfirmTarget;\n-\n-                // Allow to override the default fee estimate mode over the CoinControl instance\n-                bool conservative_estimate = CalculateEstimateType(coinControl ? coinControl->m_fee_mode : FeeEstimateMode::UNSET, rbf);\n-\n-                CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, ::mempool, ::feeEstimator, &feeCalc, false /* ignoreGlobalPayTxFee */, conservative_estimate);\n-                if (coinControl && coinControl->fOverrideFeeRate)\n-                    nFeeNeeded = coinControl->nFeeRate.GetFee(nBytes);\n+                CAmount nFeeNeeded = GetMinimumFee(nBytes, coin_control, ::mempool, ::feeEstimator, &feeCalc);\n \n                 // If we made it here and we aren't even able to meet the relay fee on the next pass, give up\n                 // because we must be at the maximum allowed fee.\n@@ -2760,7 +2746,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                     // new inputs. We now know we only need the smaller fee\n                     // (because of reduced tx size) and so we should add a\n                     // change output. Only try this once.\n-                    CAmount fee_needed_for_change = GetMinimumFee(change_prototype_size, currentConfirmationTarget, ::mempool, ::feeEstimator, nullptr, false /* ignoreGlobalPayTxFee */, conservative_estimate);\n+                    CAmount fee_needed_for_change = GetMinimumFee(change_prototype_size, coin_control, ::mempool, ::feeEstimator, nullptr);\n                     CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, ::dustRelayFee);\n                     CAmount max_excess_fee = fee_needed_for_change + minimum_value_for_change;\n                     if (nFeeRet > nFeeNeeded + max_excess_fee && nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n@@ -2936,33 +2922,61 @@ CAmount CWallet::GetRequiredFee(unsigned int nTxBytes)\n     return std::max(minTxFee.GetFee(nTxBytes), ::minRelayTxFee.GetFee(nTxBytes));\n }\n \n-CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc, bool ignoreGlobalPayTxFee, bool conservative_estimate)\n+CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc)\n {\n-    // payTxFee is the user-set global for desired feerate\n-    CAmount nFeeNeeded = payTxFee.GetFee(nTxBytes);\n-    // User didn't set: use -txconfirmtarget to estimate...\n-    if (nFeeNeeded == 0 || ignoreGlobalPayTxFee) {\n-        nFeeNeeded = estimator.estimateSmartFee(nConfirmTarget, feeCalc, pool, conservative_estimate).GetFee(nTxBytes);\n-        // ... unless we don't have enough mempool data for estimatefee, then use fallbackFee\n-        if (nFeeNeeded == 0) {\n-            nFeeNeeded = fallbackFee.GetFee(nTxBytes);\n+    /* User control of how to calculate fee uses the following parameter precedence:\n+       1. coin_control.m_feerate\n+       2. coin_control.m_confirm_target\n+       3. payTxFee (user-set global variable)\n+       4. nTxConfirmTarget (user-set global variable)\n+       The first parameter that is set is used.\n+    */\n+    CAmount fee_needed;\n+    if (coin_control.m_feerate) { // 1.\n+        fee_needed = coin_control.m_feerate->GetFee(nTxBytes);\n+        if (feeCalc) feeCalc->reason = FeeReason::PAYTXFEE;\n+        // Allow to override automatic min/max check over coin control instance\n+        if (coin_control.fOverrideFeeRate) return fee_needed;\n+    }\n+    else if (!coin_control.m_confirm_target && ::payTxFee != CFeeRate(0)) { // 3. TODO: remove magic value of 0 for global payTxFee\n+        fee_needed = ::payTxFee.GetFee(nTxBytes);\n+        if (feeCalc) feeCalc->reason = FeeReason::PAYTXFEE;\n+    }\n+    else { // 2. or 4.\n+        // We will use smart fee estimation\n+        unsigned int target = coin_control.m_confirm_target ? *coin_control.m_confirm_target : ::nTxConfirmTarget;\n+        // By default estimates are economical iff we are signaling opt-in-RBF\n+        bool conservative_estimate = !coin_control.signalRbf;\n+        // Allow to override the default fee estimate mode over the CoinControl instance\n+        if (coin_control.m_fee_mode == FeeEstimateMode::CONSERVATIVE) conservative_estimate = true;\n+        else if (coin_control.m_fee_mode == FeeEstimateMode::ECONOMICAL) conservative_estimate = false;\n+\n+        fee_needed = estimator.estimateSmartFee(target, feeCalc, conservative_estimate).GetFee(nTxBytes);\n+        if (fee_needed == 0) {\n+            // if we don't have enough data for estimateSmartFee, then use fallbackFee\n+            fee_needed = fallbackFee.GetFee(nTxBytes);\n             if (feeCalc) feeCalc->reason = FeeReason::FALLBACK;\n         }\n-    } else {\n-        if (feeCalc) feeCalc->reason = FeeReason::PAYTXFEE;\n+        // Obey mempool min fee when using smart fee estimation\n+        CAmount min_mempool_fee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nTxBytes);\n+        if (fee_needed < min_mempool_fee) {\n+            fee_needed = min_mempool_fee;\n+            if (feeCalc) feeCalc->reason = FeeReason::MEMPOOL_MIN;\n+        }\n     }\n+\n     // prevent user from paying a fee below minRelayTxFee or minTxFee\n-    CAmount requiredFee = GetRequiredFee(nTxBytes);\n-    if (requiredFee > nFeeNeeded) {\n-        nFeeNeeded = requiredFee;\n+    CAmount required_fee = GetRequiredFee(nTxBytes);\n+    if (required_fee > fee_needed) {\n+        fee_needed = required_fee;\n         if (feeCalc) feeCalc->reason = FeeReason::REQUIRED;\n     }\n     // But always obey the maximum\n-    if (nFeeNeeded > maxTxFee) {\n-        nFeeNeeded = maxTxFee;\n+    if (fee_needed > maxTxFee) {\n+        fee_needed = maxTxFee;\n         if (feeCalc) feeCalc->reason = FeeReason::MAXTXFEE;\n     }\n-    return nFeeNeeded;\n+    return fee_needed;\n }\n \n \n@@ -4200,15 +4214,3 @@ bool CMerkleTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState&\n {\n     return ::AcceptToMemoryPool(mempool, state, tx, true, NULL, NULL, false, nAbsurdFee);\n }\n-\n-bool CalculateEstimateType(FeeEstimateMode mode, bool opt_in_rbf) {\n-    switch (mode) {\n-    case FeeEstimateMode::UNSET:\n-        return !opt_in_rbf; // Allow for lower fees if RBF is an option\n-    case FeeEstimateMode::CONSERVATIVE:\n-        return true;\n-    case FeeEstimateMode::ECONOMICAL:\n-        return false;\n-    }\n-    return true;\n-}"
      },
      {
        "sha": "b716e46a7d88158267ccd3031329031dc80937c2",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6859ad2936bf431cd745b6763b62051319435742/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6859ad2936bf431cd745b6763b62051319435742/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6859ad2936bf431cd745b6763b62051319435742",
        "patch": "@@ -954,7 +954,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * @note passing nChangePosInOut as -1 will result in setting a random position\n      */\n     bool CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosInOut,\n-                           std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n+                           std::string& strFailReason, const CCoinControl& coin_control, bool sign = true);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CConnman* connman, CValidationState& state);\n \n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& entries);\n@@ -969,7 +969,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Estimate the minimum fee considering user set parameters\n      * and the required fee\n      */\n-    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc, bool ignoreGlobalPayTxFee, bool conservative_estimate);\n+    static CAmount GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc);\n     /**\n      * Return the minimum required fee taking into account the\n      * floating relay fee and user set minimum transaction fee\n@@ -1220,6 +1220,4 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins\n     return true;\n }\n \n-bool CalculateEstimateType(FeeEstimateMode mode, bool opt_in_rbf);\n-\n #endif // BITCOIN_WALLET_WALLET_H"
      }
    ]
  },
  {
    "sha": "91edda8f3c81ba5a69f44485f20d74f85ec9cee1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MWVkZGE4ZjNjODFiYTVhNjlmNDQ0ODVmMjBkNzRmODVlYzljZWUx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-17T07:49:23Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-17T07:49:30Z"
      },
      "message": "Merge #10803: Explicitly search for bdb5.3.\n\n1cc251f Explicitly search for bdb5.3. (Patrick Strateman)\n\nPull request description:\n\n  Some systems do not symlink the major version to the minor version.\n\nTree-SHA512: 09c030f08442cbe54928a6d20bec31aae2662facf60b859ff9febd84f0711f68d7f920b84fb015764585b305d48faf74c5fe9c3c6a713a0809b78ec066187dd9",
      "tree": {
        "sha": "d7fb4e1cd72c74f23b9e9ddc82c1b816b5710297",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7fb4e1cd72c74f23b9e9ddc82c1b816b5710297"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91edda8f3c81ba5a69f44485f20d74f85ec9cee1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZbGwKAAoJEB5K7WKYbNJd28MH/iPjBUoZRkqemrAG2GU4Kuvy\nnGkz1W5dkFpMRlJ2ql7uL4kQX95k3AwHIBpnfNc/j7T/GHbrFWqpN36fU1+xi5mO\n9sIxk4RqDEut+rCG2W50g597Q2fRGpVGMXCVj+wZtuaHsagLCf0TwFmL9T+ASJfa\nqQ8mLfLTOrV20Pgt4Kp7eChn56NXW5ZbIZWTpMwlex0hs+Pk751mUMa1zRAU7oQd\nXoq0W8gxRtTBot/DdSF62TQrauEyIHWeLzUpuEBiIm1mrhKdXTu4fGsU+TlVVurc\nTC9YipZgu5UJ84P6uv5aCpFOAPy2OUVPDZ1YqCZEs6urJRxQCuVi1rg7gwaMht0=\n=KEjO\n-----END PGP SIGNATURE-----",
        "payload": "tree d7fb4e1cd72c74f23b9e9ddc82c1b816b5710297\nparent 6859ad2936bf431cd745b6763b62051319435742\nparent 1cc251f50fb2f9cffa762b28e5d8685af4273663\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1500277763 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1500277770 +0200\n\nMerge #10803: Explicitly search for bdb5.3.\n\n1cc251f Explicitly search for bdb5.3. (Patrick Strateman)\n\nPull request description:\n\n  Some systems do not symlink the major version to the minor version.\n\nTree-SHA512: 09c030f08442cbe54928a6d20bec31aae2662facf60b859ff9febd84f0711f68d7f920b84fb015764585b305d48faf74c5fe9c3c6a713a0809b78ec066187dd9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91edda8f3c81ba5a69f44485f20d74f85ec9cee1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91edda8f3c81ba5a69f44485f20d74f85ec9cee1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91edda8f3c81ba5a69f44485f20d74f85ec9cee1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6859ad2936bf431cd745b6763b62051319435742",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6859ad2936bf431cd745b6763b62051319435742",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6859ad2936bf431cd745b6763b62051319435742"
      },
      {
        "sha": "1cc251f50fb2f9cffa762b28e5d8685af4273663",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cc251f50fb2f9cffa762b28e5d8685af4273663",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1cc251f50fb2f9cffa762b28e5d8685af4273663"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b9bf7bf46e54971d3f0f3b9353a707fce3ddb4a3",
        "filename": "build-aux/m4/bitcoin_find_bdb48.m4",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91edda8f3c81ba5a69f44485f20d74f85ec9cee1/build-aux/m4/bitcoin_find_bdb48.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91edda8f3c81ba5a69f44485f20d74f85ec9cee1/build-aux/m4/bitcoin_find_bdb48.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_find_bdb48.m4?ref=91edda8f3c81ba5a69f44485f20d74f85ec9cee1",
        "patch": "@@ -12,7 +12,7 @@ AC_DEFUN([BITCOIN_FIND_BDB48],[\n     bdbpath=X\n     bdb48path=X\n     bdbdirlist=\n-    for _vn in 4.8 48 4 5 ''; do\n+    for _vn in 4.8 48 4 5 5.3 ''; do\n       for _pfx in b lib ''; do\n         bdbdirlist=\"$bdbdirlist ${_pfx}db${_vn}\"\n       done"
      }
    ]
  },
  {
    "sha": "dd2185c291a72e2d685746c97d6eb7c22f87226d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDIxODVjMjkxYTcyZTJkNjg1NzQ2Yzk3ZDZlYjdjMjJmODcyMjZk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-17T09:56:00Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-17T09:56:00Z"
      },
      "message": "Register wallet endpoint",
      "tree": {
        "sha": "d4e4e36eefa91048f6cb7150b5d89d0e97a613ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4e4e36eefa91048f6cb7150b5d89d0e97a613ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd2185c291a72e2d685746c97d6eb7c22f87226d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAllsibQACgkQHrd2uwPH\nki0lrxAAhxZNwJMUTUzQ7YvvVpKMuyIpA2BTywTcEQuxsEe1NvWWI7DG4eVcA9D7\nFe/DxodBszbkfWa7/zFfoHC8uUayLEXEHxu615R8k31qLk2PhUKFK2W4u1k+iVfH\nGd6TKwEi2+A46PGh9Ub1CxLu9Q1JwVvo7LozhxqxSgMrF+xdaLLg4pGuyMBXoZiW\nxpLUjNN5OHERTkplut12j1/V1bOj77rfsMXoruF9AWdSuIpd+j5nUATa+Kn4PFRO\nqDUsqyTdECAnFikZ/Xu5XHGDRYeUvTc0WZqNyE1EECjs+hKvKU57pkB/kfwSbB8m\n+QRWe7tVdq1bdc17ARyO0JI1cHMXWzOjpVxdQfNWiCBlE9/AFOmKyUm6IMgWCI85\nIW7vy1uWd770RxyJ9zeoC2cik0n+5Z37L02lzFwj1D995K70tBn3iuS5uT+b0fhG\nsKQH2wd47WB1umFOl10Y32FgIPLz5DSntawFeNOc1U73wPkSmQr2abYQp7QIXHu2\np3rdfvjDwlLbVwlZIccrsAFlEhaJu3L1WhqC1hYoheZcuWCA5HdUkqcBKAzyLThu\nySj2jn9C4YgvgMAHGNq05UfwfssIBzCHgxcgGqxEw/DZgIKdEqz5Wgm44k1DQbX4\nVk90I4XdlJTW6tkxdUckEhAVQzd6Dr4Ba9vNtebFwg8H9SxQAl8=\n=SG3B\n-----END PGP SIGNATURE-----",
        "payload": "tree d4e4e36eefa91048f6cb7150b5d89d0e97a613ff\nparent 91edda8f3c81ba5a69f44485f20d74f85ec9cee1\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1500285360 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1500285360 +0200\n\nRegister wallet endpoint\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd2185c291a72e2d685746c97d6eb7c22f87226d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd2185c291a72e2d685746c97d6eb7c22f87226d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd2185c291a72e2d685746c97d6eb7c22f87226d/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91edda8f3c81ba5a69f44485f20d74f85ec9cee1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91edda8f3c81ba5a69f44485f20d74f85ec9cee1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91edda8f3c81ba5a69f44485f20d74f85ec9cee1"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "69c3e3f49f606ee808c11bd79f6e9d9e8072a8dc",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd2185c291a72e2d685746c97d6eb7c22f87226d/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd2185c291a72e2d685746c97d6eb7c22f87226d/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=dd2185c291a72e2d685746c97d6eb7c22f87226d",
        "patch": "@@ -233,7 +233,10 @@ bool StartHTTPRPC()\n         return false;\n \n     RegisterHTTPHandler(\"/\", true, HTTPReq_JSONRPC);\n-\n+#ifdef ENABLE_WALLET\n+    // ifdef can be removed once we switch to better endpoint support and API versioning\n+    RegisterHTTPHandler(\"/wallet/\", false, HTTPReq_JSONRPC);\n+#endif\n     assert(EventBase());\n     httpRPCTimerInterface = new HTTPRPCTimerInterface(EventBase());\n     RPCSetTimerInterface(httpRPCTimerInterface);"
      }
    ]
  },
  {
    "sha": "8bc6d1f179a0f51f86b78b9b394b4ba5c2543e93",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YmM2ZDFmMTc5YTBmNTFmODZiNzhiOWIzOTRiNGJhNWMyNTQzZTkz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-17T11:10:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-17T11:14:09Z"
      },
      "message": "Merge #10837: Fix resource leak on error in GetDevURandom\n\na8ae0b2 Fix resource leak (Dag Robole)\n\nPull request description:\n\n  Fixes a potential file handle leak when size of entropy is invalid\n\nTree-SHA512: 692d24daaf370bba1f842925b037275126f9494f54769650bcf5829c794a0fb8561a86f42347bdf088a484e4f107bce7fa14cd7bdbfb4ecfbeb51968953da3ae",
      "tree": {
        "sha": "fcff12cb44d0625601be8e26b84a5ac411c2dfb6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fcff12cb44d0625601be8e26b84a5ac411c2dfb6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8bc6d1f179a0f51f86b78b9b394b4ba5c2543e93",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZbJwBAAoJEB5K7WKYbNJdEkgH/2ylLvsDq5ywWqB8ZaG8Vn9R\naRwjrsQaUgFkzFYL7gIREvN4/D5x4dOUTATKLOC5A+ivt5DqEaGk50Hys4+F8jGW\nByccFvFi8vXE5UmCYlzdZoTEnO/LRc20uFCJWlu1wyswkBhSFo9lUC5jvcIRbVkc\n3rAFFRBgf4eVBWp1mqnwPJOKwz7/c9hZpGl36/cVQuzSDhu3V4xiEdn6Ps8RFjOm\nmbMjVSBJIy5Q/SOyXpKDMGkDfEVOb6XUB/lhbk7Mh8+5jFR5LN7i09E5/zro+hcW\nOOiMY2m4LYMiEAMLlIqFGCchYwfyz0oYvfqYa6SKotulKztqzOmeeariMjnoT0o=\n=GXxv\n-----END PGP SIGNATURE-----",
        "payload": "tree fcff12cb44d0625601be8e26b84a5ac411c2dfb6\nparent 91edda8f3c81ba5a69f44485f20d74f85ec9cee1\nparent a8ae0b252a2007568e77f5aca1c7fa3ec5941b72\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1500289850 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1500290049 +0200\n\nMerge #10837: Fix resource leak on error in GetDevURandom\n\na8ae0b2 Fix resource leak (Dag Robole)\n\nPull request description:\n\n  Fixes a potential file handle leak when size of entropy is invalid\n\nTree-SHA512: 692d24daaf370bba1f842925b037275126f9494f54769650bcf5829c794a0fb8561a86f42347bdf088a484e4f107bce7fa14cd7bdbfb4ecfbeb51968953da3ae\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bc6d1f179a0f51f86b78b9b394b4ba5c2543e93",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8bc6d1f179a0f51f86b78b9b394b4ba5c2543e93",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bc6d1f179a0f51f86b78b9b394b4ba5c2543e93/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91edda8f3c81ba5a69f44485f20d74f85ec9cee1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91edda8f3c81ba5a69f44485f20d74f85ec9cee1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91edda8f3c81ba5a69f44485f20d74f85ec9cee1"
      },
      {
        "sha": "a8ae0b252a2007568e77f5aca1c7fa3ec5941b72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8ae0b252a2007568e77f5aca1c7fa3ec5941b72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a8ae0b252a2007568e77f5aca1c7fa3ec5941b72"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3226abb69e39c4071e218fa6bf0a72962ce10e9e",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8bc6d1f179a0f51f86b78b9b394b4ba5c2543e93/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8bc6d1f179a0f51f86b78b9b394b4ba5c2543e93/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=8bc6d1f179a0f51f86b78b9b394b4ba5c2543e93",
        "patch": "@@ -186,6 +186,7 @@ void GetDevURandom(unsigned char *ent32)\n     do {\n         ssize_t n = read(f, ent32 + have, NUM_OS_RANDOM_BYTES - have);\n         if (n <= 0 || n + have > NUM_OS_RANDOM_BYTES) {\n+            close(f);\n             RandFailure();\n         }\n         have += n;"
      }
    ]
  },
  {
    "sha": "dba485d65168794d8be39bd5e8de8777e7085434",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmE0ODVkNjUxNjg3OTRkOGJlMzliZDVlOGRlODc3N2U3MDg1NDM0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-15T08:46:06Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-17T12:56:52Z"
      },
      "message": "init: Factor out AppInitLockDataDirectory\n\nAlternative to #10818, alternative solution to #10815.\n\nAfter this change: All the AppInit steps before and inclusive\nAppInitLockDataDirectory must not have Shutdown() called in case of\nfailure. Only when AppInitMain fails, Shutdown should be called.\n\nChanges the GUI and bitcoind code to consistently do this.",
      "tree": {
        "sha": "8d5436757050d19f9cfe850ec968c83ac664f62a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d5436757050d19f9cfe850ec968c83ac664f62a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dba485d65168794d8be39bd5e8de8777e7085434",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZbLQWAAoJEB5K7WKYbNJdesEIAJ9Og6vY69s02QB0CSoTu+p5\n+R1wagZnKOsqP9Ib1L1cmbyCsvG/ThB9Y2rLmzkjJeh1Qq2uAT8qc7p7GGRLNvYN\n3vRBUyiZU5g+tR2szSGzcuq4M+ItcIAosXMdRAgO/5pxp/OLn8ZCRJo3NsNb6JJA\nfmzVmXWGczLUDUhGab2DJeK4j1GZvP+pxcXxh/i5snmDN4Xiphz/SRbV8I9fsQk7\ndgpgtxB9W3hFXlBFU4mQYWpugJJgNS4zdA3qfjXHmiuPfrrqXlLjSTDqQCmZER2w\nxHgG5xvTFr4R2UcpgEKC2h+a52cG7zrZct5WTowHUIoBN0KQPBwWcHWeeWifrDk=\n=IL24\n-----END PGP SIGNATURE-----",
        "payload": "tree 8d5436757050d19f9cfe850ec968c83ac664f62a\nparent 8fdd23a224ba236874ef662c4ca311b002dbcab3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1500108366 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1500296212 +0200\n\ninit: Factor out AppInitLockDataDirectory\n\nAlternative to #10818, alternative solution to #10815.\n\nAfter this change: All the AppInit steps before and inclusive\nAppInitLockDataDirectory must not have Shutdown() called in case of\nfailure. Only when AppInitMain fails, Shutdown should be called.\n\nChanges the GUI and bitcoind code to consistently do this.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dba485d65168794d8be39bd5e8de8777e7085434",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dba485d65168794d8be39bd5e8de8777e7085434",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dba485d65168794d8be39bd5e8de8777e7085434/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8fdd23a224ba236874ef662c4ca311b002dbcab3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fdd23a224ba236874ef662c4ca311b002dbcab3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8fdd23a224ba236874ef662c4ca311b002dbcab3"
      }
    ],
    "stats": {
      "total": 97,
      "additions": 67,
      "deletions": 30
    },
    "files": [
      {
        "sha": "f3844e9d479a9ad093a842a0016a45e985995f38",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dba485d65168794d8be39bd5e8de8777e7085434/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dba485d65168794d8be39bd5e8de8777e7085434/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=dba485d65168794d8be39bd5e8de8777e7085434",
        "patch": "@@ -159,7 +159,12 @@ bool AppInit(int argc, char* argv[])\n             return false;\n #endif // HAVE_DECL_DAEMON\n         }\n-\n+        // Lock data directory after daemonization\n+        if (!AppInitLockDataDirectory())\n+        {\n+            // If locking the data directory failed, exit immediately\n+            exit(EXIT_FAILURE);\n+        }\n         fRet = AppInitMain(threadGroup, scheduler);\n     }\n     catch (const std::exception& e) {"
      },
      {
        "sha": "d9b98be739d8fe6fcf3ca3417c9e7a2ee49d4f84",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dba485d65168794d8be39bd5e8de8777e7085434/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dba485d65168794d8be39bd5e8de8777e7085434/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=dba485d65168794d8be39bd5e8de8777e7085434",
        "patch": "@@ -1170,21 +1170,27 @@ bool AppInitSanityChecks()\n         return InitError(strprintf(_(\"Initialization sanity check failed. %s is shutting down.\"), _(PACKAGE_NAME)));\n \n     // Probe the data directory lock to give an early error message, if possible\n+    // We cannot hold the data directory lock here, as the forking for daemon() hasn't yet happened,\n+    // and a fork will cause weird behavior to it.\n     return LockDataDirectory(true);\n }\n \n-bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n+bool AppInitLockDataDirectory()\n {\n-    const CChainParams& chainparams = Params();\n-    // ********************************************************* Step 4a: application initialization\n     // After daemonization get the data directory lock again and hold on to it until exit\n     // This creates a slight window for a race condition to happen, however this condition is harmless: it\n     // will at most make us exit without printing a message to console.\n     if (!LockDataDirectory(false)) {\n         // Detailed error printed inside LockDataDirectory\n         return false;\n     }\n+    return true;\n+}\n \n+bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n+{\n+    const CChainParams& chainparams = Params();\n+    // ********************************************************* Step 4a: application initialization\n #ifndef WIN32\n     CreatePidFile(GetPidFile(), getpid());\n #endif"
      },
      {
        "sha": "a0a824738cfe723ce68bbf0d1f01e3f508e1f85c",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dba485d65168794d8be39bd5e8de8777e7085434/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dba485d65168794d8be39bd5e8de8777e7085434/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=dba485d65168794d8be39bd5e8de8777e7085434",
        "patch": "@@ -27,27 +27,33 @@ void InitLogging();\n void InitParameterInteraction();\n \n /** Initialize bitcoin core: Basic context setup.\n- *  @note This can be done before daemonization.\n+ *  @note This can be done before daemonization. Do not call Shutdown() if this function fails.\n  *  @pre Parameters should be parsed and config file should be read.\n  */\n bool AppInitBasicSetup();\n /**\n  * Initialization: parameter interaction.\n- * @note This can be done before daemonization.\n+ * @note This can be done before daemonization. Do not call Shutdown() if this function fails.\n  * @pre Parameters should be parsed and config file should be read, AppInitBasicSetup should have been called.\n  */\n bool AppInitParameterInteraction();\n /**\n  * Initialization sanity checks: ecc init, sanity checks, dir lock.\n- * @note This can be done before daemonization.\n+ * @note This can be done before daemonization. Do not call Shutdown() if this function fails.\n  * @pre Parameters should be parsed and config file should be read, AppInitParameterInteraction should have been called.\n  */\n bool AppInitSanityChecks();\n /**\n- * Bitcoin core main initialization.\n- * @note This should only be done after daemonization.\n+ * Lock bitcoin core data directory.\n+ * @note This should only be done after daemonization. Do not call Shutdown() if this function fails.\n  * @pre Parameters should be parsed and config file should be read, AppInitSanityChecks should have been called.\n  */\n+bool AppInitLockDataDirectory();\n+/**\n+ * Bitcoin core main initialization.\n+ * @note This should only be done after daemonization. Call Shutdown() if this function fails.\n+ * @pre Parameters should be parsed and config file should be read, AppInitLockDataDirectory should have been called.\n+ */\n bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler);\n \n /** The help message mode determines what help message to show */"
      },
      {
        "sha": "4a4116c67024cc4bf2f927b708d9f06fcad9345b",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 21,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dba485d65168794d8be39bd5e8de8777e7085434/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dba485d65168794d8be39bd5e8de8777e7085434/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=dba485d65168794d8be39bd5e8de8777e7085434",
        "patch": "@@ -178,6 +178,10 @@ class BitcoinCore: public QObject\n     Q_OBJECT\n public:\n     explicit BitcoinCore();\n+    /** Basic initialization, before starting initialization/shutdown thread.\n+     * Return true on success.\n+     */\n+    static bool baseInitialize();\n \n public Q_SLOTS:\n     void initialize();\n@@ -270,26 +274,32 @@ void BitcoinCore::handleRunawayException(const std::exception *e)\n     Q_EMIT runawayException(QString::fromStdString(GetWarnings(\"gui\")));\n }\n \n+bool BitcoinCore::baseInitialize()\n+{\n+    if (!AppInitBasicSetup())\n+    {\n+        return false;\n+    }\n+    if (!AppInitParameterInteraction())\n+    {\n+        return false;\n+    }\n+    if (!AppInitSanityChecks())\n+    {\n+        return false;\n+    }\n+    if (!AppInitLockDataDirectory())\n+    {\n+        return false;\n+    }\n+    return true;\n+}\n+\n void BitcoinCore::initialize()\n {\n     try\n     {\n         qDebug() << __func__ << \": Running initialization in thread\";\n-        if (!AppInitBasicSetup())\n-        {\n-            Q_EMIT initializeResult(false);\n-            return;\n-        }\n-        if (!AppInitParameterInteraction())\n-        {\n-            Q_EMIT initializeResult(false);\n-            return;\n-        }\n-        if (!AppInitSanityChecks())\n-        {\n-            Q_EMIT initializeResult(false);\n-            return;\n-        }\n         bool rv = AppInitMain(threadGroup, scheduler);\n         Q_EMIT initializeResult(rv);\n     } catch (const std::exception& e) {\n@@ -689,23 +699,33 @@ int main(int argc, char *argv[])\n     if (GetBoolArg(\"-splash\", DEFAULT_SPLASHSCREEN) && !GetBoolArg(\"-min\", false))\n         app.createSplashScreen(networkStyle.data());\n \n+    int rv = EXIT_SUCCESS;\n     try\n     {\n         app.createWindow(networkStyle.data());\n-        app.requestInitialize();\n+        // Perform base initialization before spinning up initialization/shutdown thread\n+        // This is acceptable because this function only contains steps that are quick to execute,\n+        // so the GUI thread won't be held up.\n+        if (BitcoinCore::baseInitialize()) {\n+            app.requestInitialize();\n #if defined(Q_OS_WIN) && QT_VERSION >= 0x050000\n-        WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely...\").arg(QObject::tr(PACKAGE_NAME)), (HWND)app.getMainWinId());\n+            WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely...\").arg(QObject::tr(PACKAGE_NAME)), (HWND)app.getMainWinId());\n #endif\n-        app.exec();\n-        app.requestShutdown();\n-        app.exec();\n+            app.exec();\n+            app.requestShutdown();\n+            app.exec();\n+            rv = app.getReturnValue();\n+        } else {\n+            // A dialog with detailed error will have been shown by InitError()\n+            rv = EXIT_FAILURE;\n+        }\n     } catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"Runaway exception\");\n         app.handleRunawayException(QString::fromStdString(GetWarnings(\"gui\")));\n     } catch (...) {\n         PrintExceptionContinue(NULL, \"Runaway exception\");\n         app.handleRunawayException(QString::fromStdString(GetWarnings(\"gui\")));\n     }\n-    return app.getReturnValue();\n+    return rv;\n }\n #endif // BITCOIN_QT_TEST"
      }
    ]
  },
  {
    "sha": "2b0179d8a9b75397937126b36114df0dddeab40c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjAxNzlkOGE5Yjc1Mzk3OTM3MTI2YjM2MTE0ZGYwZGRkZWFiNDBj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-07-17T13:03:29Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-07-17T13:03:33Z"
      },
      "message": "Merge #10834: Remove declaration of unused method: void UpdatedTransaction(const uint256 &)\n\ne061d8d Remove declaration of unused function: void UpdatedTransaction(const uint256 &) (practicalswift)\n\nPull request description:\n\n  Remove declaration of unused method: `void UpdatedTransaction(const uint256 &)`\n\n  Removed in 9fececb2cbabc52cc375b84bf840fac018cc8121.\n\nTree-SHA512: a328e00ccecc2a31cda7e204ab8c29ea34811afc2090f3dfd88d6d58543761dba8a289585d30b98e05236c67b1a04844e556a3b05d6e8e706233bc502f31af1d",
      "tree": {
        "sha": "764cf2081d0e53d6f317af890e1d51623bb8c896",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/764cf2081d0e53d6f317af890e1d51623bb8c896"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b0179d8a9b75397937126b36114df0dddeab40c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZbLWlAAoJENLqSFDnUoslWGsQAKHzU97ZcZRNdEX30ydDLRXs\n6TchalZuCfaBcXWeVR+wxb2XGNrCBkIzTO6cu5tc292+fSfxvQqC2a3xh72WPzzg\nFJybF9ZPeXdqEdbkVdDdfFJgaZmovtRrDKYUY+z0K03gZBoND+1lJ+/aRrkoXVlP\nLaYAenzrPfiELjmlABDJ/b0jz+H86Qzex3atSkTKQv7aamXQCqZ/LOJDTrTpctHo\nkD284GmPLOnu05RZwa0QTQh/p1bLkFDp5cw2Pl9dMThqdhSu45If08Y3UcYSnCjZ\nv61spsql9bb8QvOQTt5dGHIjwepkZjy29hSu2Y9aRyjJIgbz+qo3Ymjjw3J3Nfmm\nyvwBrNtS7rJ8lCf4KxMv5hztlK6CEs584OMGt10FuTn/3xZg58nSH5Yvn5iRezDU\nxWpEr8f2mj95rFKiJSy+pdvVa1SdTY863ZGSINPqEZzwgaRk/DVluBabCp+vDlim\nmhpKqFjiZB6o7RSjIaSjsW1hWQcxWP6jJ+VeM/yb6oRGwvOcoKhO5qEE7Qo99hS5\nbkIMQMn9X3qIA5NQgZIwow7VdhuJ9Ve5f6tFiSFtanS1U3SvkDVOPZG7H/N31Uup\n4NH4RY7w2UlMjTJgfg/Ecf3Yl34L7wNez6KQcf2b2PWKokVr6u5wTSs7fFWja4vR\nrzXW/pVmm6P33gi2O4pY\n=L2b4\n-----END PGP SIGNATURE-----",
        "payload": "tree 764cf2081d0e53d6f317af890e1d51623bb8c896\nparent 8bc6d1f179a0f51f86b78b9b394b4ba5c2543e93\nparent e061d8d7abb66c234786ea1c855d4cbb1b9b22ef\nauthor MarcoFalke <falke.marco@gmail.com> 1500296609 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1500296613 +0200\n\nMerge #10834: Remove declaration of unused method: void UpdatedTransaction(const uint256 &)\n\ne061d8d Remove declaration of unused function: void UpdatedTransaction(const uint256 &) (practicalswift)\n\nPull request description:\n\n  Remove declaration of unused method: `void UpdatedTransaction(const uint256 &)`\n\n  Removed in 9fececb2cbabc52cc375b84bf840fac018cc8121.\n\nTree-SHA512: a328e00ccecc2a31cda7e204ab8c29ea34811afc2090f3dfd88d6d58543761dba8a289585d30b98e05236c67b1a04844e556a3b05d6e8e706233bc502f31af1d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b0179d8a9b75397937126b36114df0dddeab40c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2b0179d8a9b75397937126b36114df0dddeab40c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b0179d8a9b75397937126b36114df0dddeab40c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8bc6d1f179a0f51f86b78b9b394b4ba5c2543e93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bc6d1f179a0f51f86b78b9b394b4ba5c2543e93",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8bc6d1f179a0f51f86b78b9b394b4ba5c2543e93"
      },
      {
        "sha": "e061d8d7abb66c234786ea1c855d4cbb1b9b22ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e061d8d7abb66c234786ea1c855d4cbb1b9b22ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e061d8d7abb66c234786ea1c855d4cbb1b9b22ef"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d6da2bc1fd2d28444ad925416af5f20136990e68",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b0179d8a9b75397937126b36114df0dddeab40c/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b0179d8a9b75397937126b36114df0dddeab40c/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=2b0179d8a9b75397937126b36114df0dddeab40c",
        "patch": "@@ -86,7 +86,6 @@ class CMainSignals {\n     void TransactionAddedToMempool(const CTransactionRef &);\n     void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef> &);\n     void BlockDisconnected(const std::shared_ptr<const CBlock> &);\n-    void UpdatedTransaction(const uint256 &);\n     void SetBestChain(const CBlockLocator &);\n     void Inventory(const uint256 &);\n     void Broadcast(int64_t nBestBlockTime, CConnman* connman);"
      }
    ]
  },
  {
    "sha": "30d8f3a18e7d927459e409a38ee1c0d1ddf054ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMGQ4ZjNhMThlN2Q5Mjc0NTllNDA5YTM4ZWUxYzBkMWRkZjA1NGFk",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-07-15T01:00:30Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-07-17T13:46:07Z"
      },
      "message": "Pushdown walletdb though CWallet::AddKeyPubKey to avoid flushes.\n\nThis prevents the wallet from being flushed between each and\n every key during top-up.  This results in a >10x speed-up\n for the top-up.",
      "tree": {
        "sha": "82256aa871d5204c641b624703674bac6cda7a21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/82256aa871d5204c641b624703674bac6cda7a21"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30d8f3a18e7d927459e409a38ee1c0d1ddf054ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30d8f3a18e7d927459e409a38ee1c0d1ddf054ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/30d8f3a18e7d927459e409a38ee1c0d1ddf054ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30d8f3a18e7d927459e409a38ee1c0d1ddf054ad/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a53f19718a2207f0d74c32a611ae91703d9da8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a53f19718a2207f0d74c32a611ae91703d9da8d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a53f19718a2207f0d74c32a611ae91703d9da8d"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 29,
      "deletions": 7
    },
    "files": [
      {
        "sha": "d8c1dd94fcb9c2441d2895e7e5ffb8b9c91f4a88",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 7,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30d8f3a18e7d927459e409a38ee1c0d1ddf054ad/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30d8f3a18e7d927459e409a38ee1c0d1ddf054ad/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=30d8f3a18e7d927459e409a38ee1c0d1ddf054ad",
        "patch": "@@ -106,17 +106,19 @@ CPubKey CWallet::GenerateNewKey(CWalletDB &walletdb, bool internal)\n     }\n \n     // Compressed public keys were introduced in version 0.6.0\n-    if (fCompressed)\n+    if (fCompressed) {\n         SetMinVersion(FEATURE_COMPRPUBKEY);\n+    }\n \n     CPubKey pubkey = secret.GetPubKey();\n     assert(secret.VerifyPubKey(pubkey));\n \n     mapKeyMetadata[pubkey.GetID()] = metadata;\n     UpdateTimeFirstKey(nCreationTime);\n \n-    if (!AddKeyPubKey(secret, pubkey))\n+    if (!AddKeyPubKeyWithDB(walletdb, secret, pubkey)) {\n         throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n+    }\n     return pubkey;\n }\n \n@@ -166,29 +168,48 @@ void CWallet::DeriveNewChildKey(CWalletDB &walletdb, CKeyMetadata& metadata, CKe\n         throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n }\n \n-bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)\n+bool CWallet::AddKeyPubKeyWithDB(CWalletDB &walletdb, const CKey& secret, const CPubKey &pubkey)\n {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n-    if (!CCryptoKeyStore::AddKeyPubKey(secret, pubkey))\n+\n+    // CCryptoKeyStore has no concept of wallet databases, but calls AddCryptedKey\n+    // which is overridden below.  To avoid flushes, the database handle is\n+    // tunneled through to it.\n+    bool needsDB = !pwalletdbEncryption;\n+    if (needsDB) {\n+        pwalletdbEncryption = &walletdb;\n+    }\n+    if (!CCryptoKeyStore::AddKeyPubKey(secret, pubkey)) {\n+        if (needsDB) pwalletdbEncryption = NULL;\n         return false;\n+    }\n+    if (needsDB) pwalletdbEncryption = NULL;\n \n     // check if we need to remove from watch-only\n     CScript script;\n     script = GetScriptForDestination(pubkey.GetID());\n-    if (HaveWatchOnly(script))\n+    if (HaveWatchOnly(script)) {\n         RemoveWatchOnly(script);\n+    }\n     script = GetScriptForRawPubKey(pubkey);\n-    if (HaveWatchOnly(script))\n+    if (HaveWatchOnly(script)) {\n         RemoveWatchOnly(script);\n+    }\n \n     if (!IsCrypted()) {\n-        return CWalletDB(*dbw).WriteKey(pubkey,\n+        return walletdb.WriteKey(pubkey,\n                                                  secret.GetPrivKey(),\n                                                  mapKeyMetadata[pubkey.GetID()]);\n     }\n     return true;\n }\n \n+bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)\n+{\n+    CWalletDB walletdb(*dbw);\n+    return CWallet::AddKeyPubKeyWithDB(walletdb, secret, pubkey);\n+}\n+\n bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,\n                             const std::vector<unsigned char> &vchCryptedSecret)\n {"
      },
      {
        "sha": "0bf6ccf722ec7291e3b263390795b75105a7e23e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30d8f3a18e7d927459e409a38ee1c0d1ddf054ad/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30d8f3a18e7d927459e409a38ee1c0d1ddf054ad/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=30d8f3a18e7d927459e409a38ee1c0d1ddf054ad",
        "patch": "@@ -869,6 +869,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CPubKey GenerateNewKey(CWalletDB& walletdb, bool internal = false);\n     //! Adds a key to the store, and saves it to disk.\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n+    bool AddKeyPubKeyWithDB(CWalletDB &walletdb,const CKey& key, const CPubKey &pubkey);\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }\n     //! Load metadata (used by LoadWallet)"
      }
    ]
  },
  {
    "sha": "41dc1635878766e4a810e6a7c57637d079fced64",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MWRjMTYzNTg3ODc2NmU0YTgxMGU2YTdjNTc2MzdkMDc5ZmNlZDY0",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-07-15T01:09:10Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-07-17T13:46:14Z"
      },
      "message": "Increase wallet default keypool size to 1000.",
      "tree": {
        "sha": "88803993152289beabd6b7c5904434d4e4afd6d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88803993152289beabd6b7c5904434d4e4afd6d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41dc1635878766e4a810e6a7c57637d079fced64",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41dc1635878766e4a810e6a7c57637d079fced64",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41dc1635878766e4a810e6a7c57637d079fced64",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41dc1635878766e4a810e6a7c57637d079fced64/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "30d8f3a18e7d927459e409a38ee1c0d1ddf054ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30d8f3a18e7d927459e409a38ee1c0d1ddf054ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30d8f3a18e7d927459e409a38ee1c0d1ddf054ad"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9e687c4bfd065777736bee12af8a8b9ef6d387ef",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41dc1635878766e4a810e6a7c57637d079fced64/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41dc1635878766e4a810e6a7c57637d079fced64/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=41dc1635878766e4a810e6a7c57637d079fced64",
        "patch": "@@ -40,7 +40,7 @@ extern unsigned int nTxConfirmTarget;\n extern bool bSpendZeroConfChange;\n extern bool fWalletRbf;\n \n-static const unsigned int DEFAULT_KEYPOOL_SIZE = 100;\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n //! -paytxfee default\n static const CAmount DEFAULT_TRANSACTION_FEE = 0;\n //! -fallbackfee default"
      }
    ]
  },
  {
    "sha": "b0e8e2de8408cbaed9d70914c67b4c9f11397cb7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMGU4ZTJkZTg0MDhjYmFlZDlkNzA5MTRjNjdiNGM5ZjExMzk3Y2I3",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-07-17T08:16:36Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-07-17T13:46:15Z"
      },
      "message": "Print one log message per keypool top-up, not one per key.",
      "tree": {
        "sha": "47397eb7104b1408d27baa3631123ea1eb5d7828",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47397eb7104b1408d27baa3631123ea1eb5d7828"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b0e8e2de8408cbaed9d70914c67b4c9f11397cb7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0e8e2de8408cbaed9d70914c67b4c9f11397cb7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b0e8e2de8408cbaed9d70914c67b4c9f11397cb7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0e8e2de8408cbaed9d70914c67b4c9f11397cb7/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41dc1635878766e4a810e6a7c57637d079fced64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41dc1635878766e4a810e6a7c57637d079fced64",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41dc1635878766e4a810e6a7c57637d079fced64"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5db13ef02ff3701d237f701ff845f82ba0b796fc",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0e8e2de8408cbaed9d70914c67b4c9f11397cb7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0e8e2de8408cbaed9d70914c67b4c9f11397cb7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b0e8e2de8408cbaed9d70914c67b4c9f11397cb7",
        "patch": "@@ -3213,7 +3213,9 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n             } else {\n                 setExternalKeyPool.insert(nEnd);\n             }\n-            LogPrintf(\"keypool added key %d, size=%u (%u internal), new key is %s\\n\", nEnd, setInternalKeyPool.size() + setExternalKeyPool.size(), setInternalKeyPool.size(), internal ? \"internal\" : \"external\");\n+        }\n+        if (missingInternal + missingExternal > 0) {\n+            LogPrintf(\"keypool added %d keys (%d internal), size=%u (%u internal)\\n\", missingInternal + missingExternal, missingInternal, setInternalKeyPool.size() + setExternalKeyPool.size(), setInternalKeyPool.size());\n         }\n     }\n     return true;"
      }
    ]
  },
  {
    "sha": "439c4e8ad5871f59d87ae2ab77fe01aa6fe41414",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzljNGU4YWQ1ODcxZjU5ZDg3YWUyYWI3N2ZlMDFhYTZmZTQxNDE0",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-29T17:57:33Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-17T14:52:14Z"
      },
      "message": "Improve api to estimatesmartfee\n\nChange parameter for conservative estimates to be an estimate_mode string.\nChange to never return a -1 for failure but to instead omit the feerate and\nreturn an error string.  Throw JSONRPC error on invalid nblocks parameter.",
      "tree": {
        "sha": "f2233305929505927b54e090be38488417df8b5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2233305929505927b54e090be38488417df8b5d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/439c4e8ad5871f59d87ae2ab77fe01aa6fe41414",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/439c4e8ad5871f59d87ae2ab77fe01aa6fe41414",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/439c4e8ad5871f59d87ae2ab77fe01aa6fe41414",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/439c4e8ad5871f59d87ae2ab77fe01aa6fe41414/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91edda8f3c81ba5a69f44485f20d74f85ec9cee1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91edda8f3c81ba5a69f44485f20d74f85ec9cee1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91edda8f3c81ba5a69f44485f20d74f85ec9cee1"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 43,
      "deletions": 27
    },
    "files": [
      {
        "sha": "73cc0b4a5e7bceadaac396a9ae0dbe7b3d3e48c5",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 11,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/439c4e8ad5871f59d87ae2ab77fe01aa6fe41414/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/439c4e8ad5871f59d87ae2ab77fe01aa6fe41414/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=439c4e8ad5871f59d87ae2ab77fe01aa6fe41414",
        "patch": "@@ -839,20 +839,20 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, FeeCalculation\n     EstimationResult tempResult;\n \n     // Return failure if trying to analyze a target we're not tracking\n-    if (confTarget <= 0 || (unsigned int)confTarget > longStats->GetMaxConfirms())\n-        return CFeeRate(0);\n+    if (confTarget <= 0 || (unsigned int)confTarget > longStats->GetMaxConfirms()) {\n+        return CFeeRate(0);  // error conditon\n+    }\n \n     // It's not possible to get reasonable estimates for confTarget of 1\n-    if (confTarget == 1)\n-        confTarget = 2;\n+    if (confTarget == 1) confTarget = 2;\n \n     unsigned int maxUsableEstimate = MaxUsableEstimate();\n-    if (maxUsableEstimate <= 1)\n-        return CFeeRate(0);\n-\n     if ((unsigned int)confTarget > maxUsableEstimate) {\n         confTarget = maxUsableEstimate;\n     }\n+    if (feeCalc) feeCalc->returnedTarget = confTarget;\n+\n+    if (confTarget <= 1) return CFeeRate(0); // error conditon\n \n     assert(confTarget > 0); //estimateCombinedFee and estimateConservativeFee take unsigned ints\n     /** true is passed to estimateCombined fee for target/2 and target so\n@@ -899,10 +899,7 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, FeeCalculation\n         }\n     }\n \n-    if (feeCalc) feeCalc->returnedTarget = confTarget;\n-\n-    if (median < 0)\n-        return CFeeRate(0);\n+    if (median < 0) return CFeeRate(0); // error conditon\n \n     return CFeeRate(median);\n }"
      },
      {
        "sha": "1ab195612427b6e103df94ff502145f8d4c0feee",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/439c4e8ad5871f59d87ae2ab77fe01aa6fe41414/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/439c4e8ad5871f59d87ae2ab77fe01aa6fe41414/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=439c4e8ad5871f59d87ae2ab77fe01aa6fe41414",
        "patch": "@@ -114,7 +114,6 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getrawmempool\", 0, \"verbose\" },\n     { \"estimatefee\", 0, \"nblocks\" },\n     { \"estimatesmartfee\", 0, \"nblocks\" },\n-    { \"estimatesmartfee\", 1, \"conservative\" },\n     { \"estimaterawfee\", 0, \"nblocks\" },\n     { \"estimaterawfee\", 1, \"threshold\" },\n     { \"prioritisetransaction\", 1, \"dummy\" },"
      },
      {
        "sha": "caad788591fbbf30a0bbc56d858564e7ea3676e6",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 15,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/439c4e8ad5871f59d87ae2ab77fe01aa6fe41414/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/439c4e8ad5871f59d87ae2ab77fe01aa6fe41414/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=439c4e8ad5871f59d87ae2ab77fe01aa6fe41414",
        "patch": "@@ -806,42 +806,62 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"estimatesmartfee nblocks (conservative)\\n\"\n+            \"estimatesmartfee nblocks (\\\"estimate_mode\\\")\\n\"\n             \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n             \"confirmation within nblocks blocks if possible and return the number of blocks\\n\"\n             \"for which the estimate is valid. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks       (numeric)\\n\"\n-            \"2. conservative  (bool, optional, default=true) Whether to return a more conservative estimate which\\n\"\n-            \"                 also satisfies a longer history. A conservative estimate potentially returns a higher\\n\"\n-            \"                 feerate and is more likely to be sufficient for the desired target, but is not as\\n\"\n-            \"                 responsive to short term drops in the prevailing fee market\\n\"\n+            \"1. nblocks         (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n+            \"2. \\\"estimate_mode\\\" (string, optional, default=CONSERVATIVE) The fee estimate mode.\\n\"\n+            \"                   Whether to return a more conservative estimate which also satisfies\\n\"\n+            \"                   a longer history. A conservative estimate potentially returns a\\n\"\n+            \"                   higher feerate and is more likely to be sufficient for the desired\\n\"\n+            \"                   target, but is not as responsive to short term drops in the\\n\"\n+            \"                   prevailing fee market.  Must be one of:\\n\"\n+            \"       \\\"UNSET\\\" (defaults to CONSERVATIVE)\\n\"\n+            \"       \\\"ECONOMICAL\\\"\\n\"\n+            \"       \\\"CONSERVATIVE\\\"\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,     (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"  \\\"feerate\\\" : x.x,     (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"  \\\"errors\\\": [ str... ] (json array of strings, optional) Errors encountered during processing\\n\"\n             \"  \\\"blocks\\\" : n         (numeric) block number where estimate was found\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative value is returned if not enough transactions and blocks\\n\"\n+            \"The request target will be clamped between 2 and the highest target\\n\"\n+            \"fee estimation is able to return based on how long it has been running.\\n\"\n+            \"An error is returned if not enough transactions and blocks\\n\"\n             \"have been observed to make an estimate for any number of blocks.\\n\"\n             \"\\nExample:\\n\"\n             + HelpExampleCli(\"estimatesmartfee\", \"6\")\n             );\n \n-    RPCTypeCheck(request.params, {UniValue::VNUM});\n-\n+    RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VSTR});\n+    RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     bool conservative = true;\n     if (request.params.size() > 1 && !request.params[1].isNull()) {\n-        RPCTypeCheckArgument(request.params[1], UniValue::VBOOL);\n-        conservative = request.params[1].get_bool();\n+        FeeEstimateMode fee_mode;\n+        if (!FeeModeFromString(request.params[1].get_str(), fee_mode)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n+        }\n+        if (fee_mode == FeeEstimateMode::ECONOMICAL) conservative = false;\n     }\n \n     UniValue result(UniValue::VOBJ);\n+    UniValue errors(UniValue::VARR);\n     FeeCalculation feeCalc;\n     CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &feeCalc, conservative);\n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n+    if (feeRate != CFeeRate(0)) {\n+        result.push_back(Pair(\"feerate\", ValueFromAmount(feeRate.GetFeePerK())));\n+    } else {\n+        errors.push_back(\"Insufficient data or no feerate found\");\n+        result.push_back(Pair(\"errors\", errors));\n+    }\n     result.push_back(Pair(\"blocks\", feeCalc.returnedTarget));\n     return result;\n }\n@@ -889,7 +909,7 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n-    RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n+    RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n     if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n@@ -963,7 +983,7 @@ static const CRPCCommand commands[] =\n     { \"generating\",         \"generatetoaddress\",      &generatetoaddress,      true,  {\"nblocks\",\"address\",\"maxtries\"} },\n \n     { \"util\",               \"estimatefee\",            &estimatefee,            true,  {\"nblocks\"} },\n-    { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       true,  {\"nblocks\", \"conservative\"} },\n+    { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       true,  {\"nblocks\", \"estimate_mode\"} },\n \n     { \"hidden\",             \"estimaterawfee\",         &estimaterawfee,         true,  {\"nblocks\", \"threshold\"} },\n };"
      }
    ]
  },
  {
    "sha": "06bcdb8da64502a64df03f3c89fbc6ccb72cd349",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNmJjZGI4ZGE2NDUwMmE2NGRmMDNmM2M4OWZiYzZjY2I3MmNkMzQ5",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-12T19:10:16Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-17T14:52:14Z"
      },
      "message": "Convert named argument from nblocks to conf_target\n\nin estimatesmartfee and estimaterawfee.  Also reuse existing bounds checking.",
      "tree": {
        "sha": "ae6f407891827b825df577d33a6c0bb1901fbbb8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae6f407891827b825df577d33a6c0bb1901fbbb8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/06bcdb8da64502a64df03f3c89fbc6ccb72cd349",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06bcdb8da64502a64df03f3c89fbc6ccb72cd349",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/06bcdb8da64502a64df03f3c89fbc6ccb72cd349",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06bcdb8da64502a64df03f3c89fbc6ccb72cd349/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "439c4e8ad5871f59d87ae2ab77fe01aa6fe41414",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/439c4e8ad5871f59d87ae2ab77fe01aa6fe41414",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/439c4e8ad5871f59d87ae2ab77fe01aa6fe41414"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 15,
      "deletions": 21
    },
    "files": [
      {
        "sha": "4fd632dfc5514496f50f0b860dacfa81c9ea653e",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 21,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06bcdb8da64502a64df03f3c89fbc6ccb72cd349/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06bcdb8da64502a64df03f3c89fbc6ccb72cd349/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=06bcdb8da64502a64df03f3c89fbc6ccb72cd349",
        "patch": "@@ -806,13 +806,13 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"estimatesmartfee nblocks (\\\"estimate_mode\\\")\\n\"\n+            \"estimatesmartfee conf_target (\\\"estimate_mode\\\")\\n\"\n             \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n-            \"confirmation within nblocks blocks if possible and return the number of blocks\\n\"\n+            \"confirmation within conf_target blocks if possible and return the number of blocks\\n\"\n             \"for which the estimate is valid. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks         (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n+            \"1. conf_target     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. \\\"estimate_mode\\\" (string, optional, default=CONSERVATIVE) The fee estimate mode.\\n\"\n             \"                   Whether to return a more conservative estimate which also satisfies\\n\"\n             \"                   a longer history. A conservative estimate potentially returns a\\n\"\n@@ -839,10 +839,7 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VSTR});\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n-    int nBlocks = request.params[0].get_int();\n-    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n-    }\n+    unsigned int conf_target = ParseConfirmTarget(request.params[0]);\n     bool conservative = true;\n     if (request.params.size() > 1 && !request.params[1].isNull()) {\n         FeeEstimateMode fee_mode;\n@@ -855,7 +852,7 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     UniValue result(UniValue::VOBJ);\n     UniValue errors(UniValue::VARR);\n     FeeCalculation feeCalc;\n-    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &feeCalc, conservative);\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(conf_target, &feeCalc, conservative);\n     if (feeRate != CFeeRate(0)) {\n         result.push_back(Pair(\"feerate\", ValueFromAmount(feeRate.GetFeePerK())));\n     } else {\n@@ -870,18 +867,18 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"estimaterawfee nblocks (threshold)\\n\"\n+            \"estimaterawfee conf_target (threshold)\\n\"\n             \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n             \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n             \"         implementation of fee estimation. The parameters it can be called with\\n\"\n             \"         and the results it returns will change if the internal implementation changes.\\n\"\n             \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n-            \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n-            \"in BIP 141 (witness data is discounted).\\n\"\n+            \"confirmation within conf_target blocks if possible. Uses virtual transaction size as\\n\"\n+            \"defined in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n+            \"1. conf_target (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n-            \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n+            \"               confirmed within conf_target in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n@@ -911,10 +908,7 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n-    int nBlocks = request.params[0].get_int();\n-    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n-    }\n+    unsigned int conf_target = ParseConfirmTarget(request.params[0]);\n     double threshold = 0.95;\n     if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n@@ -930,9 +924,9 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n         EstimationResult buckets;\n \n         // Only output results for horizons which track the target\n-        if ((unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(horizon)) continue;\n+        if (conf_target > ::feeEstimator.HighestTargetTracked(horizon)) continue;\n \n-        feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n+        feeRate = ::feeEstimator.estimateRawFee(conf_target, threshold, horizon, &buckets);\n         UniValue horizon_result(UniValue::VOBJ);\n         UniValue errors(UniValue::VARR);\n         UniValue passbucket(UniValue::VOBJ);\n@@ -983,9 +977,9 @@ static const CRPCCommand commands[] =\n     { \"generating\",         \"generatetoaddress\",      &generatetoaddress,      true,  {\"nblocks\",\"address\",\"maxtries\"} },\n \n     { \"util\",               \"estimatefee\",            &estimatefee,            true,  {\"nblocks\"} },\n-    { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       true,  {\"nblocks\", \"estimate_mode\"} },\n+    { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       true,  {\"conf_target\", \"estimate_mode\"} },\n \n-    { \"hidden\",             \"estimaterawfee\",         &estimaterawfee,         true,  {\"nblocks\", \"threshold\"} },\n+    { \"hidden\",             \"estimaterawfee\",         &estimaterawfee,         true,  {\"conf_target\", \"threshold\"} },\n };\n \n void RegisterMiningRPCCommands(CRPCTable &t)"
      }
    ]
  },
  {
    "sha": "89bb0365b97af7a6f46b010ceb9ff31627a8f9db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OWJiMDM2NWI5N2FmN2E2ZjQ2YjAxMGNlYjlmZjMxNjI3YThmOWRi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-17T15:12:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-17T15:13:11Z"
      },
      "message": "Merge #10832: init: Factor out AppInitLockDataDirectory and fix startup core dump issue\n\ndba485d init: Factor out AppInitLockDataDirectory (Wladimir J. van der Laan)\n\nPull request description:\n\n  Alternative to #10818, alternative solution to #10815.\n\n  After this change: All the AppInit steps before and inclusive AppInitLockDataDirectory must not have Shutdown() called in case of failure. Only when AppInitMain fails, Shutdown should be called.\n\n  Changes the GUI and bitcoind code to consistently do this.\n\nTree-SHA512: 393e1a0ae05eb8e791025069e3ac4f6f3cdeb459ec63feda85d01cf6696ab3fed7632b6a0ac3641b8c7015af51d46756b5bba77f5e5f0c446f0c2dea58bbc92e",
      "tree": {
        "sha": "55e3db7b60363ffb039988a1e6d312cd246ab274",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/55e3db7b60363ffb039988a1e6d312cd246ab274"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89bb0365b97af7a6f46b010ceb9ff31627a8f9db",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZbNQHAAoJEB5K7WKYbNJdqCAIALQF3E/POoYjQniAyuKfA18J\n+9v+60t5fa2be9h5Yvua2hoHA4TbOez4SDQ1VTeVBt3TuQlPf5ShdO2xp0KhBdWO\naGYipzhabwcracBII9FKNqHaAKeb2U0mMsUx0A7E8PQN+doHogR1nkPkaULCwiJL\nVud75oNLfHxaE8LiHStt2Q//EK/A0mA12WW+gC/LjsmTb2nQjqSAgM7e6Ct25/Bu\nQ4l6X6eImt6PdRPGdJyWIlR2XbCineANUnhj2s0bGmixNq+wNHAfEvVgfDD3eVIS\nUmPDIB/BlC0dEmEVx28IK/qsl/w6KKBpca6yovo06GjIMxdnLCCXGa2gPQBg+aY=\n=8JR1\n-----END PGP SIGNATURE-----",
        "payload": "tree 55e3db7b60363ffb039988a1e6d312cd246ab274\nparent 2b0179d8a9b75397937126b36114df0dddeab40c\nparent dba485d65168794d8be39bd5e8de8777e7085434\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1500304320 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1500304391 +0200\n\nMerge #10832: init: Factor out AppInitLockDataDirectory and fix startup core dump issue\n\ndba485d init: Factor out AppInitLockDataDirectory (Wladimir J. van der Laan)\n\nPull request description:\n\n  Alternative to #10818, alternative solution to #10815.\n\n  After this change: All the AppInit steps before and inclusive AppInitLockDataDirectory must not have Shutdown() called in case of failure. Only when AppInitMain fails, Shutdown should be called.\n\n  Changes the GUI and bitcoind code to consistently do this.\n\nTree-SHA512: 393e1a0ae05eb8e791025069e3ac4f6f3cdeb459ec63feda85d01cf6696ab3fed7632b6a0ac3641b8c7015af51d46756b5bba77f5e5f0c446f0c2dea58bbc92e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89bb0365b97af7a6f46b010ceb9ff31627a8f9db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/89bb0365b97af7a6f46b010ceb9ff31627a8f9db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89bb0365b97af7a6f46b010ceb9ff31627a8f9db/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2b0179d8a9b75397937126b36114df0dddeab40c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b0179d8a9b75397937126b36114df0dddeab40c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2b0179d8a9b75397937126b36114df0dddeab40c"
      },
      {
        "sha": "dba485d65168794d8be39bd5e8de8777e7085434",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dba485d65168794d8be39bd5e8de8777e7085434",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dba485d65168794d8be39bd5e8de8777e7085434"
      }
    ],
    "stats": {
      "total": 97,
      "additions": 67,
      "deletions": 30
    },
    "files": [
      {
        "sha": "f3844e9d479a9ad093a842a0016a45e985995f38",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89bb0365b97af7a6f46b010ceb9ff31627a8f9db/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89bb0365b97af7a6f46b010ceb9ff31627a8f9db/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=89bb0365b97af7a6f46b010ceb9ff31627a8f9db",
        "patch": "@@ -159,7 +159,12 @@ bool AppInit(int argc, char* argv[])\n             return false;\n #endif // HAVE_DECL_DAEMON\n         }\n-\n+        // Lock data directory after daemonization\n+        if (!AppInitLockDataDirectory())\n+        {\n+            // If locking the data directory failed, exit immediately\n+            exit(EXIT_FAILURE);\n+        }\n         fRet = AppInitMain(threadGroup, scheduler);\n     }\n     catch (const std::exception& e) {"
      },
      {
        "sha": "d9b98be739d8fe6fcf3ca3417c9e7a2ee49d4f84",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89bb0365b97af7a6f46b010ceb9ff31627a8f9db/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89bb0365b97af7a6f46b010ceb9ff31627a8f9db/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=89bb0365b97af7a6f46b010ceb9ff31627a8f9db",
        "patch": "@@ -1170,21 +1170,27 @@ bool AppInitSanityChecks()\n         return InitError(strprintf(_(\"Initialization sanity check failed. %s is shutting down.\"), _(PACKAGE_NAME)));\n \n     // Probe the data directory lock to give an early error message, if possible\n+    // We cannot hold the data directory lock here, as the forking for daemon() hasn't yet happened,\n+    // and a fork will cause weird behavior to it.\n     return LockDataDirectory(true);\n }\n \n-bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n+bool AppInitLockDataDirectory()\n {\n-    const CChainParams& chainparams = Params();\n-    // ********************************************************* Step 4a: application initialization\n     // After daemonization get the data directory lock again and hold on to it until exit\n     // This creates a slight window for a race condition to happen, however this condition is harmless: it\n     // will at most make us exit without printing a message to console.\n     if (!LockDataDirectory(false)) {\n         // Detailed error printed inside LockDataDirectory\n         return false;\n     }\n+    return true;\n+}\n \n+bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n+{\n+    const CChainParams& chainparams = Params();\n+    // ********************************************************* Step 4a: application initialization\n #ifndef WIN32\n     CreatePidFile(GetPidFile(), getpid());\n #endif"
      },
      {
        "sha": "a0a824738cfe723ce68bbf0d1f01e3f508e1f85c",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89bb0365b97af7a6f46b010ceb9ff31627a8f9db/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89bb0365b97af7a6f46b010ceb9ff31627a8f9db/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=89bb0365b97af7a6f46b010ceb9ff31627a8f9db",
        "patch": "@@ -27,27 +27,33 @@ void InitLogging();\n void InitParameterInteraction();\n \n /** Initialize bitcoin core: Basic context setup.\n- *  @note This can be done before daemonization.\n+ *  @note This can be done before daemonization. Do not call Shutdown() if this function fails.\n  *  @pre Parameters should be parsed and config file should be read.\n  */\n bool AppInitBasicSetup();\n /**\n  * Initialization: parameter interaction.\n- * @note This can be done before daemonization.\n+ * @note This can be done before daemonization. Do not call Shutdown() if this function fails.\n  * @pre Parameters should be parsed and config file should be read, AppInitBasicSetup should have been called.\n  */\n bool AppInitParameterInteraction();\n /**\n  * Initialization sanity checks: ecc init, sanity checks, dir lock.\n- * @note This can be done before daemonization.\n+ * @note This can be done before daemonization. Do not call Shutdown() if this function fails.\n  * @pre Parameters should be parsed and config file should be read, AppInitParameterInteraction should have been called.\n  */\n bool AppInitSanityChecks();\n /**\n- * Bitcoin core main initialization.\n- * @note This should only be done after daemonization.\n+ * Lock bitcoin core data directory.\n+ * @note This should only be done after daemonization. Do not call Shutdown() if this function fails.\n  * @pre Parameters should be parsed and config file should be read, AppInitSanityChecks should have been called.\n  */\n+bool AppInitLockDataDirectory();\n+/**\n+ * Bitcoin core main initialization.\n+ * @note This should only be done after daemonization. Call Shutdown() if this function fails.\n+ * @pre Parameters should be parsed and config file should be read, AppInitLockDataDirectory should have been called.\n+ */\n bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler);\n \n /** The help message mode determines what help message to show */"
      },
      {
        "sha": "4a4116c67024cc4bf2f927b708d9f06fcad9345b",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 21,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89bb0365b97af7a6f46b010ceb9ff31627a8f9db/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89bb0365b97af7a6f46b010ceb9ff31627a8f9db/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=89bb0365b97af7a6f46b010ceb9ff31627a8f9db",
        "patch": "@@ -178,6 +178,10 @@ class BitcoinCore: public QObject\n     Q_OBJECT\n public:\n     explicit BitcoinCore();\n+    /** Basic initialization, before starting initialization/shutdown thread.\n+     * Return true on success.\n+     */\n+    static bool baseInitialize();\n \n public Q_SLOTS:\n     void initialize();\n@@ -270,26 +274,32 @@ void BitcoinCore::handleRunawayException(const std::exception *e)\n     Q_EMIT runawayException(QString::fromStdString(GetWarnings(\"gui\")));\n }\n \n+bool BitcoinCore::baseInitialize()\n+{\n+    if (!AppInitBasicSetup())\n+    {\n+        return false;\n+    }\n+    if (!AppInitParameterInteraction())\n+    {\n+        return false;\n+    }\n+    if (!AppInitSanityChecks())\n+    {\n+        return false;\n+    }\n+    if (!AppInitLockDataDirectory())\n+    {\n+        return false;\n+    }\n+    return true;\n+}\n+\n void BitcoinCore::initialize()\n {\n     try\n     {\n         qDebug() << __func__ << \": Running initialization in thread\";\n-        if (!AppInitBasicSetup())\n-        {\n-            Q_EMIT initializeResult(false);\n-            return;\n-        }\n-        if (!AppInitParameterInteraction())\n-        {\n-            Q_EMIT initializeResult(false);\n-            return;\n-        }\n-        if (!AppInitSanityChecks())\n-        {\n-            Q_EMIT initializeResult(false);\n-            return;\n-        }\n         bool rv = AppInitMain(threadGroup, scheduler);\n         Q_EMIT initializeResult(rv);\n     } catch (const std::exception& e) {\n@@ -689,23 +699,33 @@ int main(int argc, char *argv[])\n     if (GetBoolArg(\"-splash\", DEFAULT_SPLASHSCREEN) && !GetBoolArg(\"-min\", false))\n         app.createSplashScreen(networkStyle.data());\n \n+    int rv = EXIT_SUCCESS;\n     try\n     {\n         app.createWindow(networkStyle.data());\n-        app.requestInitialize();\n+        // Perform base initialization before spinning up initialization/shutdown thread\n+        // This is acceptable because this function only contains steps that are quick to execute,\n+        // so the GUI thread won't be held up.\n+        if (BitcoinCore::baseInitialize()) {\n+            app.requestInitialize();\n #if defined(Q_OS_WIN) && QT_VERSION >= 0x050000\n-        WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely...\").arg(QObject::tr(PACKAGE_NAME)), (HWND)app.getMainWinId());\n+            WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely...\").arg(QObject::tr(PACKAGE_NAME)), (HWND)app.getMainWinId());\n #endif\n-        app.exec();\n-        app.requestShutdown();\n-        app.exec();\n+            app.exec();\n+            app.requestShutdown();\n+            app.exec();\n+            rv = app.getReturnValue();\n+        } else {\n+            // A dialog with detailed error will have been shown by InitError()\n+            rv = EXIT_FAILURE;\n+        }\n     } catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"Runaway exception\");\n         app.handleRunawayException(QString::fromStdString(GetWarnings(\"gui\")));\n     } catch (...) {\n         PrintExceptionContinue(NULL, \"Runaway exception\");\n         app.handleRunawayException(QString::fromStdString(GetWarnings(\"gui\")));\n     }\n-    return app.getReturnValue();\n+    return rv;\n }\n #endif // BITCOIN_QT_TEST"
      }
    ]
  },
  {
    "sha": "0b019357ff09e7a522307fc271d6b60562a7b890",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjAxOTM1N2ZmMDllN2E1MjIzMDdmYzI3MWQ2YjYwNTYyYTdiODkw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-17T15:16:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-17T15:16:12Z"
      },
      "message": "Merge #10831: Batch flushing operations to the walletdb during top up and increase keypool size.\n\nb0e8e2d Print one log message per keypool top-up, not one per key. (Gregory Maxwell)\n41dc163 Increase wallet default keypool size to 1000. (Gregory Maxwell)\n30d8f3a Pushdown walletdb though CWallet::AddKeyPubKey to avoid flushes. (Gregory Maxwell)\n3a53f19 Pushdown walletdb object through GenerateNewKey/DeriveNewChildKey. (Gregory Maxwell)\n\nPull request description:\n\n  This carries the walletdb object from top-up through GenerateNewKey/DeriveNewChildKey/CWallet::AddKeyPubKey, which allows us to avoid the flush on destruction until the top up finishes instead of flushing the wallet for every key.\n\n  This speeds up adding keys by well over 10x on my laptop (actually something like 17x), I wouldn't be surprised if it were an even bigger speedup on spinning rust.\n\n  Then it increases the keypool size to 1000. I would have preferred to use 10,000 but in the case where the user creates a new wallet and then turns on encryption it seems kind of dumb to have >400KB of marked-used born unencrypted keys just laying around.\n\n  (Thanks to Matt for cluesticking me on how to bypass the crypter spaghetti)\n\nTree-SHA512: 868303de38fce4c3f67d7fe133f765f15435c94b39d252d7450b5fee5c607a3cc2f5e531861a69d8c8877bf130e0ff4c539f97500a6bc0ff6d67e4a42c9385c7",
      "tree": {
        "sha": "553c4968c81ba459fdc909520c5649b0da9ff877",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/553c4968c81ba459fdc909520c5649b0da9ff877"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b019357ff09e7a522307fc271d6b60562a7b890",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZbNS8AAoJEB5K7WKYbNJdYLYIAJRnd0iXR429fKL9noD4JfwN\nstYvFz3dqxOVOgddpj3EgHlmFom+VxNTeVVzeLsXnGkZyE/43v+mDjdaguuJ+efB\nStKZDOWTH15rYiEognc870ASx6Gd79NknL+3aMSdBUFpFq9LLhJsrvCGkv+VjKi8\nPZyknDqLKMdP9sxBoi/iqEP5mz5NlEoWbOwkHcX4fvnM3QlIUH1YJ8l9pJb/nQMB\njv/wVofuzJ4T6X7JapJiIx8TrsbuWvJAig4LJK6gOi7raexSnyK9YbJagPMRqvsW\nVb5VhiVKEhZUJBWZDzi8PZRhf69+tMkxckO1h/HsdNZKHrBuCCcJAfmqKhPwA60=\n=d1VF\n-----END PGP SIGNATURE-----",
        "payload": "tree 553c4968c81ba459fdc909520c5649b0da9ff877\nparent 89bb0365b97af7a6f46b010ceb9ff31627a8f9db\nparent b0e8e2de8408cbaed9d70914c67b4c9f11397cb7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1500304560 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1500304572 +0200\n\nMerge #10831: Batch flushing operations to the walletdb during top up and increase keypool size.\n\nb0e8e2d Print one log message per keypool top-up, not one per key. (Gregory Maxwell)\n41dc163 Increase wallet default keypool size to 1000. (Gregory Maxwell)\n30d8f3a Pushdown walletdb though CWallet::AddKeyPubKey to avoid flushes. (Gregory Maxwell)\n3a53f19 Pushdown walletdb object through GenerateNewKey/DeriveNewChildKey. (Gregory Maxwell)\n\nPull request description:\n\n  This carries the walletdb object from top-up through GenerateNewKey/DeriveNewChildKey/CWallet::AddKeyPubKey, which allows us to avoid the flush on destruction until the top up finishes instead of flushing the wallet for every key.\n\n  This speeds up adding keys by well over 10x on my laptop (actually something like 17x), I wouldn't be surprised if it were an even bigger speedup on spinning rust.\n\n  Then it increases the keypool size to 1000. I would have preferred to use 10,000 but in the case where the user creates a new wallet and then turns on encryption it seems kind of dumb to have >400KB of marked-used born unencrypted keys just laying around.\n\n  (Thanks to Matt for cluesticking me on how to bypass the crypter spaghetti)\n\nTree-SHA512: 868303de38fce4c3f67d7fe133f765f15435c94b39d252d7450b5fee5c607a3cc2f5e531861a69d8c8877bf130e0ff4c539f97500a6bc0ff6d67e4a42c9385c7\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b019357ff09e7a522307fc271d6b60562a7b890",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b019357ff09e7a522307fc271d6b60562a7b890",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b019357ff09e7a522307fc271d6b60562a7b890/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89bb0365b97af7a6f46b010ceb9ff31627a8f9db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89bb0365b97af7a6f46b010ceb9ff31627a8f9db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89bb0365b97af7a6f46b010ceb9ff31627a8f9db"
      },
      {
        "sha": "b0e8e2de8408cbaed9d70914c67b4c9f11397cb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0e8e2de8408cbaed9d70914c67b4c9f11397cb7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b0e8e2de8408cbaed9d70914c67b4c9f11397cb7"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 43,
      "deletions": 17
    },
    "files": [
      {
        "sha": "6f1894d4307e94feeba3166d80ffdb2bbfc06285",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 14,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b019357ff09e7a522307fc271d6b60562a7b890/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b019357ff09e7a522307fc271d6b60562a7b890/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0b019357ff09e7a522307fc271d6b60562a7b890",
        "patch": "@@ -87,7 +87,7 @@ const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const\n     return &(it->second);\n }\n \n-CPubKey CWallet::GenerateNewKey(bool internal)\n+CPubKey CWallet::GenerateNewKey(CWalletDB &walletdb, bool internal)\n {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n@@ -100,27 +100,29 @@ CPubKey CWallet::GenerateNewKey(bool internal)\n \n     // use HD key derivation if HD was enabled during wallet creation\n     if (IsHDEnabled()) {\n-        DeriveNewChildKey(metadata, secret, (CanSupportFeature(FEATURE_HD_SPLIT) ? internal : false));\n+        DeriveNewChildKey(walletdb, metadata, secret, (CanSupportFeature(FEATURE_HD_SPLIT) ? internal : false));\n     } else {\n         secret.MakeNewKey(fCompressed);\n     }\n \n     // Compressed public keys were introduced in version 0.6.0\n-    if (fCompressed)\n+    if (fCompressed) {\n         SetMinVersion(FEATURE_COMPRPUBKEY);\n+    }\n \n     CPubKey pubkey = secret.GetPubKey();\n     assert(secret.VerifyPubKey(pubkey));\n \n     mapKeyMetadata[pubkey.GetID()] = metadata;\n     UpdateTimeFirstKey(nCreationTime);\n \n-    if (!AddKeyPubKey(secret, pubkey))\n+    if (!AddKeyPubKeyWithDB(walletdb, secret, pubkey)) {\n         throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n+    }\n     return pubkey;\n }\n \n-void CWallet::DeriveNewChildKey(CKeyMetadata& metadata, CKey& secret, bool internal)\n+void CWallet::DeriveNewChildKey(CWalletDB &walletdb, CKeyMetadata& metadata, CKey& secret, bool internal)\n {\n     // for now we use a fixed keypath scheme of m/0'/0'/k\n     CKey key;                      //master key seed (256bit)\n@@ -162,33 +164,52 @@ void CWallet::DeriveNewChildKey(CKeyMetadata& metadata, CKey& secret, bool inter\n     secret = childKey.key;\n     metadata.hdMasterKeyID = hdChain.masterKeyID;\n     // update the chain model in the database\n-    if (!CWalletDB(*dbw).WriteHDChain(hdChain))\n+    if (!walletdb.WriteHDChain(hdChain))\n         throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n }\n \n-bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)\n+bool CWallet::AddKeyPubKeyWithDB(CWalletDB &walletdb, const CKey& secret, const CPubKey &pubkey)\n {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n-    if (!CCryptoKeyStore::AddKeyPubKey(secret, pubkey))\n+\n+    // CCryptoKeyStore has no concept of wallet databases, but calls AddCryptedKey\n+    // which is overridden below.  To avoid flushes, the database handle is\n+    // tunneled through to it.\n+    bool needsDB = !pwalletdbEncryption;\n+    if (needsDB) {\n+        pwalletdbEncryption = &walletdb;\n+    }\n+    if (!CCryptoKeyStore::AddKeyPubKey(secret, pubkey)) {\n+        if (needsDB) pwalletdbEncryption = NULL;\n         return false;\n+    }\n+    if (needsDB) pwalletdbEncryption = NULL;\n \n     // check if we need to remove from watch-only\n     CScript script;\n     script = GetScriptForDestination(pubkey.GetID());\n-    if (HaveWatchOnly(script))\n+    if (HaveWatchOnly(script)) {\n         RemoveWatchOnly(script);\n+    }\n     script = GetScriptForRawPubKey(pubkey);\n-    if (HaveWatchOnly(script))\n+    if (HaveWatchOnly(script)) {\n         RemoveWatchOnly(script);\n+    }\n \n     if (!IsCrypted()) {\n-        return CWalletDB(*dbw).WriteKey(pubkey,\n+        return walletdb.WriteKey(pubkey,\n                                                  secret.GetPrivKey(),\n                                                  mapKeyMetadata[pubkey.GetID()]);\n     }\n     return true;\n }\n \n+bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)\n+{\n+    CWalletDB walletdb(*dbw);\n+    return CWallet::AddKeyPubKeyWithDB(walletdb, secret, pubkey);\n+}\n+\n bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,\n                             const std::vector<unsigned char> &vchCryptedSecret)\n {\n@@ -3197,15 +3218,18 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n                 nEnd = std::max(nEnd, *(setExternalKeyPool.rbegin()) + 1);\n             }\n \n-            if (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey(internal), internal)))\n+            if (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey(walletdb, internal), internal))) {\n                 throw std::runtime_error(std::string(__func__) + \": writing generated key failed\");\n+            }\n \n             if (internal) {\n                 setInternalKeyPool.insert(nEnd);\n             } else {\n                 setExternalKeyPool.insert(nEnd);\n             }\n-            LogPrintf(\"keypool added key %d, size=%u (%u internal), new key is %s\\n\", nEnd, setInternalKeyPool.size() + setExternalKeyPool.size(), setInternalKeyPool.size(), internal ? \"internal\" : \"external\");\n+        }\n+        if (missingInternal + missingExternal > 0) {\n+            LogPrintf(\"keypool added %d keys (%d internal), size=%u (%u internal)\\n\", missingInternal + missingExternal, missingInternal, setInternalKeyPool.size() + setExternalKeyPool.size(), setInternalKeyPool.size());\n         }\n     }\n     return true;\n@@ -3280,7 +3304,8 @@ bool CWallet::GetKeyFromPool(CPubKey& result, bool internal)\n         if (nIndex == -1)\n         {\n             if (IsLocked()) return false;\n-            result = GenerateNewKey(internal);\n+            CWalletDB walletdb(*dbw);\n+            result = GenerateNewKey(walletdb, internal);\n             return true;\n         }\n         KeepKey(nIndex);"
      },
      {
        "sha": "06937566b0f5337a80e9ce0c372d733e55e2a9a3",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b019357ff09e7a522307fc271d6b60562a7b890/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b019357ff09e7a522307fc271d6b60562a7b890/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=0b019357ff09e7a522307fc271d6b60562a7b890",
        "patch": "@@ -40,7 +40,7 @@ extern unsigned int nTxConfirmTarget;\n extern bool bSpendZeroConfChange;\n extern bool fWalletRbf;\n \n-static const unsigned int DEFAULT_KEYPOOL_SIZE = 100;\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n //! -paytxfee default\n static const CAmount DEFAULT_TRANSACTION_FEE = 0;\n //! -fallbackfee default\n@@ -697,7 +697,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CHDChain hdChain;\n \n     /* HD derive new child key (on internal or external chain) */\n-    void DeriveNewChildKey(CKeyMetadata& metadata, CKey& secret, bool internal = false);\n+    void DeriveNewChildKey(CWalletDB &walletdb, CKeyMetadata& metadata, CKey& secret, bool internal = false);\n \n     std::set<int64_t> setInternalKeyPool;\n     std::set<int64_t> setExternalKeyPool;\n@@ -866,9 +866,10 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * keystore implementation\n      * Generate a new key\n      */\n-    CPubKey GenerateNewKey(bool internal = false);\n+    CPubKey GenerateNewKey(CWalletDB& walletdb, bool internal = false);\n     //! Adds a key to the store, and saves it to disk.\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n+    bool AddKeyPubKeyWithDB(CWalletDB &walletdb,const CKey& key, const CPubKey &pubkey);\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }\n     //! Load metadata (used by LoadWallet)"
      }
    ]
  },
  {
    "sha": "31e07203bd98d69be476cbff105ad659b4efa862",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMWUwNzIwM2JkOThkNjliZTQ3NmNiZmYxMDVhZDY1OWI0ZWZhODYy",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-13T15:06:27Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-17T15:42:09Z"
      },
      "message": "Add wallet endpoint support to bitcoin-cli (-usewallet)",
      "tree": {
        "sha": "3a253cbb5503d25dd100d9755b6529061deb3bee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a253cbb5503d25dd100d9755b6529061deb3bee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31e07203bd98d69be476cbff105ad659b4efa862",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlls2tIACgkQHrd2uwPH\nki1kRg//b9d0NBvZ2nyHc01rDUaLzd7ocxJ4t+yJOmqU6wVcI18AuenDg9JR70Wz\nQh+23lUZ1LQrAx8XqE49geO0+RLdeLU7PEwxOIEbYa5Z8HH4WDqgux7RZSpPSo49\n4ndRWP7DP6NfuzqGSOnlmYpyA+Lz1Go4DEPsw1TcWfRNDgFwwLUlFJzrGpP2vjd/\nry395GD6RsZ9C+r+/X/JV12ITIKDr0DQo7r7aADU2gT+Bt3qNxhl1ggFlFyXlvJV\nk6HdTWB4CXZZd1L21EeiTTgHkdxYqRnmrg5ikH2V1Qsn9CKqjVbGBFtCqB9X3nCg\n+jIuM02Twe69PH0WiJvHilHILzEBtuaJmqSVy3g5N7WhFgnYraepQymclptvl/V2\nASAdZk7LJlmTioTs9DgG5/7vRT5q+uPzwRC06Bb9/r27pZH3Y7ZYbpqdJzP74qKK\ndGT88irJJiFrugFIa/RalRX9GW5MeYdyMbH/6YLChhhM4KWFgPKtfGRvqlBWqB5B\nuV3Xk8IVijDMUa47bpF9pQfPh3k6AZ9Qr8ANUvH67npKTwbfK6kXu/HuMxI2SMha\nCSyQ+A2rkVqoaZv5IznFQ7+n5cZ0nfJl1ZUqBA+WoIZ247t23b3pmMvWucIXpbDo\nQZuAbb8UAJSrIFKsEWphjnKM7OiT42IlbhxYe3X39pmXOm/9zNw=\n=vlWY\n-----END PGP SIGNATURE-----",
        "payload": "tree 3a253cbb5503d25dd100d9755b6529061deb3bee\nparent dd2185c291a72e2d685746c97d6eb7c22f87226d\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1499958387 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1500306129 +0200\n\nAdd wallet endpoint support to bitcoin-cli (-usewallet)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31e07203bd98d69be476cbff105ad659b4efa862",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31e07203bd98d69be476cbff105ad659b4efa862",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31e07203bd98d69be476cbff105ad659b4efa862/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd2185c291a72e2d685746c97d6eb7c22f87226d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd2185c291a72e2d685746c97d6eb7c22f87226d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd2185c291a72e2d685746c97d6eb7c22f87226d"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 28,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c2bc15584f0b133984c4ca173804dc6a125b3c01",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31e07203bd98d69be476cbff105ad659b4efa862/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31e07203bd98d69be476cbff105ad659b4efa862/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=31e07203bd98d69be476cbff105ad659b4efa862",
        "patch": "@@ -46,6 +46,7 @@ std::string HelpMessageCli()\n     strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcclienttimeout=<n>\", strprintf(_(\"Timeout in seconds during HTTP requests, or 0 for no timeout. (default: %d)\"), DEFAULT_HTTP_CLIENT_TIMEOUT));\n     strUsage += HelpMessageOpt(\"-stdin\", _(\"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases)\"));\n+    strUsage += HelpMessageOpt(\"-usewallet=<walletname>\", _(\"Send RPC for non-default wallet on RPC server (argument is wallet filename in bitcoind directory, required if bitcoind/-Qt runs with multiple wallets)\"));\n \n     return strUsage;\n }\n@@ -241,7 +242,20 @@ UniValue CallRPC(const std::string& strMethod, const UniValue& params)\n     assert(output_buffer);\n     evbuffer_add(output_buffer, strRequest.data(), strRequest.size());\n \n-    int r = evhttp_make_request(evcon.get(), req.get(), EVHTTP_REQ_POST, \"/\");\n+    // check if we should use a special wallet endpoint\n+    std::string endpoint = \"/\";\n+    std::string walletName = GetArg(\"-usewallet\", \"\");\n+    if (!walletName.empty()) {\n+        char *encodedURI = evhttp_uriencode(walletName.c_str(), walletName.size(), false);\n+        if (encodedURI) {\n+            endpoint = \"/wallet/\"+ std::string(encodedURI);\n+            free(encodedURI);\n+        }\n+        else {\n+            throw CConnectionFailed(\"uri-encode failed\");\n+        }\n+    }\n+    int r = evhttp_make_request(evcon.get(), req.get(), EVHTTP_REQ_POST, endpoint.c_str());\n     req.release(); // ownership moved to evcon in above call\n     if (r != 0) {\n         throw CConnectionFailed(\"send http request failed\");"
      },
      {
        "sha": "ba012554006a461dd75f450cf0dd0f013d759c29",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31e07203bd98d69be476cbff105ad659b4efa862/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31e07203bd98d69be476cbff105ad659b4efa862/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=31e07203bd98d69be476cbff105ad659b4efa862",
        "patch": "@@ -666,3 +666,14 @@ void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n     }\n }\n \n+std::string urlDecode(const std::string &urlEncoded) {\n+    std::string res;\n+    if (!urlEncoded.empty()) {\n+        char *decoded = evhttp_uridecode(urlEncoded.c_str(), false, NULL);\n+        if (decoded) {\n+            res = std::string(decoded);\n+            free(decoded);\n+        }\n+    }\n+    return res;\n+}"
      },
      {
        "sha": "3e434bf0a0b263ae1a26924710f29f2c5a33bf79",
        "filename": "src/httpserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31e07203bd98d69be476cbff105ad659b4efa862/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31e07203bd98d69be476cbff105ad659b4efa862/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=31e07203bd98d69be476cbff105ad659b4efa862",
        "patch": "@@ -148,4 +148,6 @@ class HTTPEvent\n     struct event* ev;\n };\n \n+std::string urlDecode(const std::string &urlEncoded);\n+\n #endif // BITCOIN_HTTPSERVER_H"
      }
    ]
  },
  {
    "sha": "32c9710c50b7e9255c81c7083cbfdfddc813b01f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMmM5NzEwYzUwYjdlOTI1NWM4MWM3MDgzY2JmZGZkZGM4MTNiMDFm",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-07T14:03:24Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-17T15:42:21Z"
      },
      "message": "Fix test_bitcoin circular dependency issue",
      "tree": {
        "sha": "77b51dca46ab398fde9b0c2837201f89b976f172",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77b51dca46ab398fde9b0c2837201f89b976f172"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32c9710c50b7e9255c81c7083cbfdfddc813b01f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlls2t0ACgkQHrd2uwPH\nki2SyBAAtQ/ai0cWpTlANC6Cn3v4RS1ZZIWG4aBX7W4FfFjuDSurM9xY2eQ1LRNz\n0RRh4ZjJFPGmJkG+JDkZHvaJ1BsYGFrJ+GjWJuS+bXT0cvj4uLMFDSFNsYkbpH8n\n1zIkcMRmtEzfLrX+NAYZemQybnhj8V9eaMexRDH5i1x3M4MLA2LXEUqM54u32llI\nXAtLPTcM5rnvnwLqx7bpDUIYFmnB3/247sAOn3z8nEgSFsLwRdukL9QRPv2UTebX\nLq4uo83+e0IGjAdVZ1Jl3pNOYFpp3hqW3o3jhx/6KX+oQWOV73sBSroOhNeAcQdO\nsIbD5wA9eSE0hh06yKU4bm4nryNw1zvQZMqayJ19TAVSwdmaUPWkBBZKR0U3MS3/\nqKwELgOq5zap+7QQJb1lV+8rF8hV3F78ENReAnFwpZ/1nw/sS1WhGRGrXEwKSpq+\ncLSckyCMSac27zaE9t29tYJXwml34f9i71V4UiKxqGxqsUiqnOe2Us0O2l6a8WC4\nTlpyJhpyiov0KkydTIr7W2LbfTl+cJjgUMuT3ZLccH62oVEBYFI7/ekRlRZNznNj\n5p9Mjqx9fd2VoMCZZt9xb2y3JzdcsC2C3ttlkhsLnNZmyAzYwTp57ZJOZE36b9j3\nBLRpZbFJDEDr4UqLAcVHy6E7sfj2B1KFOVfmVv9Luh6EJW20MLA=\n=ajDP\n-----END PGP SIGNATURE-----",
        "payload": "tree 77b51dca46ab398fde9b0c2837201f89b976f172\nparent 31e07203bd98d69be476cbff105ad659b4efa862\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1499436204 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1500306141 +0200\n\nFix test_bitcoin circular dependency issue\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32c9710c50b7e9255c81c7083cbfdfddc813b01f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32c9710c50b7e9255c81c7083cbfdfddc813b01f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32c9710c50b7e9255c81c7083cbfdfddc813b01f/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31e07203bd98d69be476cbff105ad659b4efa862",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31e07203bd98d69be476cbff105ad659b4efa862",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31e07203bd98d69be476cbff105ad659b4efa862"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "6415b3d2e3399fa9971e017e979bd9a84bf8f96c",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32c9710c50b7e9255c81c7083cbfdfddc813b01f/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32c9710c50b7e9255c81c7083cbfdfddc813b01f/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=32c9710c50b7e9255c81c7083cbfdfddc813b01f",
        "patch": "@@ -96,12 +96,13 @@ endif\n \n test_test_bitcoin_SOURCES = $(BITCOIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)\n test_test_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -I$(builddir)/test/ $(TESTDEFS) $(EVENT_CFLAGS)\n-test_test_bitcoin_LDADD = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) \\\n-  $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1) $(EVENT_LIBS) $(EVENT_PTHREADS_LIBS)\n-test_test_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_test_bitcoin_LDADD =\n if ENABLE_WALLET\n test_test_bitcoin_LDADD += $(LIBBITCOIN_WALLET)\n endif\n+test_test_bitcoin_LDADD += $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) \\\n+  $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1) $(EVENT_LIBS) $(EVENT_PTHREADS_LIBS)\n+test_test_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n \n test_test_bitcoin_LDADD += $(LIBBITCOIN_CONSENSUS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)\n test_test_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -static"
      }
    ]
  },
  {
    "sha": "76603b132513266065235d686b82aaa6a2968303",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjYwM2IxMzI1MTMyNjYwNjUyMzVkNjg2YjgyYWFhNmEyOTY4MzAz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-17T10:10:23Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-17T15:42:21Z"
      },
      "message": "Select wallet based on the given endpoint",
      "tree": {
        "sha": "f56050703797963d1b43a586009eea087503273d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f56050703797963d1b43a586009eea087503273d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76603b132513266065235d686b82aaa6a2968303",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlls2t0ACgkQHrd2uwPH\nki3zaBAAxm395mS6+BO/AgwtJvlyXT0PZ+Tj9JLnf+huMKIWtGTKZWFGGXwZ8fbN\n2D+75dV3f0xuHnVYMICLXTRZCUMeqGurZJieka800DvSYDmenpzdRQDzzQypz/C7\nerwfuxRQbsLObwNQyprNYTxrW+odNXXEKblaynWGHwEalc0UkjPeWBzWYVVY59dq\n44weODxW1kzU294Rv3Us3QBVCnJMYCromUFc8Vm9LKKQ/cyq76k935QrakSU2RDn\n12hRU20fLywlVRNbexr8C/kdOPdRCg8rpw8DL+40pnW2UHgcIvns+shDOevJvonV\nQDxe42YwSo2k4wuT53np58YT1pIBC0zdbPlSS1eF5Ea7/NdX9PIeYm2IkVHymzUU\nvQfaM5aWxPDhWKfMedrWUq8chN8Lqf8Trs+PET8/BNKXw/E0ueeZ/5UAPmbt9QOe\nJoEeBgyZBmzONv9tc1XngwZpc0R4U15y7vBNt919BERVIa4VlzVoK8QYG0GAUmZx\nNpSAce2ZsorzcHiewB73NtW0RrrvVTsP2oiPcGJz6EWQoWnnWMkkiVcejZBStyk5\n+1YUh0tFdChOUXPSyfBCxZ4tVPmE5NOK8+Q6kbJOU/iggAOQ+LI9Z0nhY2hdaoGF\nvROSKeegDuasqS+nUgDnuBH4n06uh7RIGZvdohUNWv9J7r5Nw1g=\n=3Niv\n-----END PGP SIGNATURE-----",
        "payload": "tree f56050703797963d1b43a586009eea087503273d\nparent 32c9710c50b7e9255c81c7083cbfdfddc813b01f\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1500286223 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1500306141 +0200\n\nSelect wallet based on the given endpoint\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76603b132513266065235d686b82aaa6a2968303",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/76603b132513266065235d686b82aaa6a2968303",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76603b132513266065235d686b82aaa6a2968303/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "32c9710c50b7e9255c81c7083cbfdfddc813b01f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32c9710c50b7e9255c81c7083cbfdfddc813b01f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32c9710c50b7e9255c81c7083cbfdfddc813b01f"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 14,
      "deletions": 2
    },
    "files": [
      {
        "sha": "ef96742a3cab1ebc8ce9c5d0ac450b8be7f723fc",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76603b132513266065235d686b82aaa6a2968303/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76603b132513266065235d686b82aaa6a2968303/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=76603b132513266065235d686b82aaa6a2968303",
        "patch": "@@ -9,6 +9,7 @@\n #include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n+#include \"httpserver.h\"\n #include \"validation.h\"\n #include \"net.h\"\n #include \"policy/feerate.h\"\n@@ -30,10 +31,21 @@\n \n #include <univalue.h>\n \n+static const std::string WALLET_ENDPOINT_BASE = \"/wallet/\";\n+\n CWallet *GetWalletForJSONRPCRequest(const JSONRPCRequest& request)\n {\n-    // TODO: Some way to access secondary wallets\n-    return vpwallets.empty() ? nullptr : vpwallets[0];\n+    if (request.URI.substr(0, WALLET_ENDPOINT_BASE.size()) == WALLET_ENDPOINT_BASE) {\n+        // wallet endpoint was used\n+        std::string requestedWallet = urlDecode(request.URI.substr(WALLET_ENDPOINT_BASE.size()));\n+        for (CWalletRef pwallet : ::vpwallets) {\n+            if (pwallet->GetName() == requestedWallet) {\n+                return pwallet;\n+            }\n+        }\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Requested wallet does not exist or is not loaded\");\n+    }\n+    return ::vpwallets.size() == 1 || (request.fHelp && ::vpwallets.size() > 0) ? ::vpwallets[0] : nullptr;\n }\n \n std::string HelpRequiringPassphrase(CWallet * const pwallet)"
      }
    ]
  },
  {
    "sha": "979d0b8a6533de58b6352666d90fff33841db63d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NzlkMGI4YTY1MzNkZTU4YjYzNTI2NjZkOTBmZmYzMzg0MWRiNjNk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-13T14:53:42Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-17T15:42:21Z"
      },
      "message": "[tests] [wallet] Add wallet endpoint support to authproxy",
      "tree": {
        "sha": "cb4bb336fee10fb319d67a88dfa5385e75686217",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb4bb336fee10fb319d67a88dfa5385e75686217"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/979d0b8a6533de58b6352666d90fff33841db63d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlls2t0ACgkQHrd2uwPH\nki3qBg/9Gt+opGGPze5W3uF1KCONz6fB+iT8Sr/Dz1gN6x/zzfOpQI0clJyw0aKH\nVJw3qP0TXnbQ7SwaQrkzrMw87n5sx9dRaykADLan/X2uWHsgRNIcAbpoTDGGe5XJ\ne1mG3DY4bImfNfiCmbQhOoW6KQCNZU2uTQMnJwHNW0jRUHG9oOguv4hMIiAxZ5Rf\nE3rdM/jZlNNRbr9JxQKgAZxWKdi6CYD5sv5Cc6uEtYp0mfYlqs6/ShvLRQ6/0XKb\n3lrON6SCo6ECNv8PUlN64sKtWujNgvxvX+TKOkYhc+UixwJZUPsRbaDqDDjvl97m\nQU4Fkqcz4yCP7k31INizGCjhdv2iZlEfVQip1z669ZJRnVuy99GNpNJwpv0Mtqi9\nXWnx3BoJ8V9QbrEAiiuTJUT1yn/i97NAtSsxm2SQqblQSZ0lXXrkozCOiKvi/VrU\nULJsHSloQR32fcoyvh9iq+sIbzgp1DQvlVIqP+yVpvIGya0eXNCLyl7Sfylib4dz\n2Y9IjqeLlhMs2UG+q7z0VjfA0ye28mXb3fA1JJsiLJie3nljloY67ErSDr7wzu9t\nCyZNvz8WqvZtXYXVZStQu6YvgG09HAsJAFL5uB7OS65wXu89084mqrd+V0bQRDiA\nUPTA/PRvPEhWjhOGE1rGUGgCKfMtk47/1weLxJt9W1XaHgoUtxg=\n=qZcu\n-----END PGP SIGNATURE-----",
        "payload": "tree cb4bb336fee10fb319d67a88dfa5385e75686217\nparent 76603b132513266065235d686b82aaa6a2968303\nauthor John Newbery <john@johnnewbery.com> 1499957622 -0400\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1500306141 +0200\n\n[tests] [wallet] Add wallet endpoint support to authproxy\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/979d0b8a6533de58b6352666d90fff33841db63d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/979d0b8a6533de58b6352666d90fff33841db63d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/979d0b8a6533de58b6352666d90fff33841db63d/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "76603b132513266065235d686b82aaa6a2968303",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76603b132513266065235d686b82aaa6a2968303",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/76603b132513266065235d686b82aaa6a2968303"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b3671cbdc51ed3ed272c9c84d0119060b6e62d98",
        "filename": "test/functional/test_framework/authproxy.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/979d0b8a6533de58b6352666d90fff33841db63d/test/functional/test_framework/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/979d0b8a6533de58b6352666d90fff33841db63d/test/functional/test_framework/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/authproxy.py?ref=979d0b8a6533de58b6352666d90fff33841db63d",
        "patch": "@@ -191,3 +191,6 @@ def _get_response(self):\n         else:\n             log.debug(\"<-- [%.6f] %s\"%(elapsed,responsedata))\n         return response\n+\n+    def __truediv__(self, relative_uri):\n+        return AuthServiceProxy(\"{}/{}\".format(self.__service_url, relative_uri), self._service_name, connection=self.__conn)"
      },
      {
        "sha": "227b1a17afbea0dee0ffef49ef5c84adb1e06133",
        "filename": "test/functional/test_framework/coverage.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/979d0b8a6533de58b6352666d90fff33841db63d/test/functional/test_framework/coverage.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/979d0b8a6533de58b6352666d90fff33841db63d/test/functional/test_framework/coverage.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/coverage.py?ref=979d0b8a6533de58b6352666d90fff33841db63d",
        "patch": "@@ -56,6 +56,8 @@ def __call__(self, *args, **kwargs):\n     def url(self):\n         return self.auth_service_proxy_instance.url\n \n+    def __truediv__(self, relative_uri):\n+        return AuthServiceProxyWrapper(self.auth_service_proxy_instance / relative_uri)\n \n def get_filename(dirname, n_node):\n     \"\"\""
      }
    ]
  },
  {
    "sha": "6b9faf747003995417d6a66fad64d2537c371092",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjlmYWY3NDcwMDM5OTU0MTdkNmE2NmZhZDY0ZDI1MzdjMzcxMDky",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-13T15:49:46Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-17T15:42:22Z"
      },
      "message": "[QA] add basic multiwallet test",
      "tree": {
        "sha": "4871c18907e1130b69658be0357db02ac65cacec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4871c18907e1130b69658be0357db02ac65cacec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b9faf747003995417d6a66fad64d2537c371092",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlls2t4ACgkQHrd2uwPH\nki3Zwg/7BMw2E8JeOlEN1dZXpSeEtuIwxANNY84WX+lWwGVzKohwxe0UymEJRkiS\n3Fl+rkSHJ4V0tT//v1V++0Hru7dnEfEHv5Y8yaf9CwexkHoidT8L76AFF/FOE46d\nuoFL290p/ph5Qp+u6DkOnjdG2wL05Nmgw86KDwObOeXhv1icDJ3YmVHGqpMsnZF9\n4ztKNr8RIaA/gdsDLBQ9BlmwvEs+2GAjPlPRZtHuw3jzQ148qpBO+wYPzO97NhoI\nihqBEkI+aWZ36DUQOuIzpklC2qcBQJ3HgTlbgfbPkNaOcwJa8+JKPRaCGkBvlLV4\n8IdlWRUWWxu7vkmRA/C10VMZJNUKWYbLEqeLRqHvIRo87Yy3MMbWBxLSKonPx2XC\nrY4ZR/4nVydkCe3nC2dI07GAWEbLfYr7L8AOd4Za+PbeLcLUDTEtHviCj3nE4AUj\nCCdZnva/q7IRCpo6JGkhRBsnBSp8jujRvCW11vhgI161R0vtxzZEBUhVmzRtL72N\nevYDtPPi5wgBbmaC4xv57v+puvwuTlRnug4eQnNNHOrUD9c97agbsjVtjQybQ7qU\nzB1/yO1wjo+bIkoqn++7iX+Jo6izlhgAuO4NELlUbWIC8MUQHzcDclxxCeNWyrtj\nVD1/zYB/wUCuwWMuDVMiPSZs598PhjwCDz/Mej8YbWh/q/VG7dk=\n=wrLc\n-----END PGP SIGNATURE-----",
        "payload": "tree 4871c18907e1130b69658be0357db02ac65cacec\nparent 979d0b8a6533de58b6352666d90fff33841db63d\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1499960986 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1500306142 +0200\n\n[QA] add basic multiwallet test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b9faf747003995417d6a66fad64d2537c371092",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b9faf747003995417d6a66fad64d2537c371092",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b9faf747003995417d6a66fad64d2537c371092/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "979d0b8a6533de58b6352666d90fff33841db63d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/979d0b8a6533de58b6352666d90fff33841db63d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/979d0b8a6533de58b6352666d90fff33841db63d"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 48,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2b4dd2d3e7db5a4a22e75ab730f53d8d3b4baf52",
        "filename": "test/functional/multiwallet.py",
        "status": "added",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b9faf747003995417d6a66fad64d2537c371092/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b9faf747003995417d6a66fad64d2537c371092/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=6b9faf747003995417d6a66fad64d2537c371092",
        "patch": "@@ -0,0 +1,47 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test multiwallet.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class MultiWalletTest(BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [['-wallet=w1', '-wallet=w2', '-wallet=w3']]\n+\n+    def run_test(self):\n+        w1 = self.nodes[0] / \"wallet/w1\"\n+        w1.generate(1)\n+\n+        #accessing wallet RPC without using wallet endpoint fails\n+        assert_raises_jsonrpc(-32601, \"Method not found\", self.nodes[0].getwalletinfo)\n+\n+        #check w1 wallet balance\n+        walletinfo = w1.getwalletinfo()\n+        assert_equal(walletinfo['immature_balance'], 50)\n+\n+        #check w1 wallet balance\n+        w2 = self.nodes[0] / \"wallet/w2\"\n+        walletinfo = w2.getwalletinfo()\n+        assert_equal(walletinfo['immature_balance'], 0)\n+\n+        w3 = self.nodes[0] / \"wallet/w3\"\n+        \n+        w1.generate(101)\n+        assert_equal(w1.getbalance(), 100)\n+        assert_equal(w2.getbalance(), 0)\n+        assert_equal(w3.getbalance(), 0)\n+\n+        w1.sendtoaddress(w2.getnewaddress(), 1)\n+        w1.sendtoaddress(w3.getnewaddress(), 2)\n+        w1.generate(1)\n+        assert_equal(w2.getbalance(), 1)\n+        assert_equal(w3.getbalance(), 2)\n+\n+if __name__ == '__main__':\n+    MultiWalletTest().main()"
      },
      {
        "sha": "51577589fe0843fcd8ac5a94073aa697411a49a4",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b9faf747003995417d6a66fad64d2537c371092/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b9faf747003995417d6a66fad64d2537c371092/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=6b9faf747003995417d6a66fad64d2537c371092",
        "patch": "@@ -63,6 +63,7 @@\n     'segwit.py',\n     # vv Tests less than 2m vv\n     'wallet.py',\n+    'multiwallet.py',\n     'wallet-accounts.py',\n     'p2p-segwit.py',\n     'wallet-dump.py',"
      }
    ]
  },
  {
    "sha": "1fc8c3de0cff2971cc1f9903bfc3d03a982f2fab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZmM4YzNkZTBjZmYyOTcxY2MxZjk5MDNiZmMzZDAzYTk4MmYyZmFi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-11T16:15:02Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-17T16:12:48Z"
      },
      "message": "No longer ever reuse keypool indexes\n\nThis fixes an issue where you could reserve a keypool entry, then\ntop up the keypool, writing out a new key at the given index, then\nreturn they key from the pool. This isnt likely to cause issues,\nbut given there is no reason to ever re-use keypool indexes\n(they're 64 bits...), best to avoid it alltogether.",
      "tree": {
        "sha": "90ef1ee9bbdcc8f90231635a71b63b9234e2a7d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/90ef1ee9bbdcc8f90231635a71b63b9234e2a7d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1fc8c3de0cff2971cc1f9903bfc3d03a982f2fab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fc8c3de0cff2971cc1f9903bfc3d03a982f2fab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1fc8c3de0cff2971cc1f9903bfc3d03a982f2fab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fc8c3de0cff2971cc1f9903bfc3d03a982f2fab/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b019357ff09e7a522307fc271d6b60562a7b890",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b019357ff09e7a522307fc271d6b60562a7b890",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b019357ff09e7a522307fc271d6b60562a7b890"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 9,
      "deletions": 10
    },
    "files": [
      {
        "sha": "53175025890b0d20fb3f5c8d55f4b6c72667a66d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 9,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fc8c3de0cff2971cc1f9903bfc3d03a982f2fab/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fc8c3de0cff2971cc1f9903bfc3d03a982f2fab/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1fc8c3de0cff2971cc1f9903bfc3d03a982f2fab",
        "patch": "@@ -3211,21 +3211,17 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n                 internal = true;\n             }\n \n-            if (!setInternalKeyPool.empty()) {\n-                nEnd = *(setInternalKeyPool.rbegin()) + 1;\n-            }\n-            if (!setExternalKeyPool.empty()) {\n-                nEnd = std::max(nEnd, *(setExternalKeyPool.rbegin()) + 1);\n-            }\n+            assert(m_max_keypool_index < std::numeric_limits<int64_t>::max()); // How in the hell did you use so many keys?\n+            int64_t index = ++m_max_keypool_index;\n \n-            if (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey(walletdb, internal), internal))) {\n+            if (!walletdb.WritePool(index, CKeyPool(GenerateNewKey(walletdb, internal), internal))) {\n                 throw std::runtime_error(std::string(__func__) + \": writing generated key failed\");\n             }\n \n             if (internal) {\n-                setInternalKeyPool.insert(nEnd);\n+                setInternalKeyPool.insert(index);\n             } else {\n-                setExternalKeyPool.insert(nEnd);\n+                setExternalKeyPool.insert(index);\n             }\n         }\n         if (missingInternal + missingExternal > 0) {"
      },
      {
        "sha": "574fd8710d3fafb0c6c5d1f1534e5dbca983aa91",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fc8c3de0cff2971cc1f9903bfc3d03a982f2fab/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fc8c3de0cff2971cc1f9903bfc3d03a982f2fab/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=1fc8c3de0cff2971cc1f9903bfc3d03a982f2fab",
        "patch": "@@ -701,6 +701,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     std::set<int64_t> setInternalKeyPool;\n     std::set<int64_t> setExternalKeyPool;\n+    int64_t m_max_keypool_index;\n \n     int64_t nTimeFirstKey;\n \n@@ -743,13 +744,14 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         }\n     }\n \n-    void LoadKeyPool(int nIndex, const CKeyPool &keypool)\n+    void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool)\n     {\n         if (keypool.fInternal) {\n             setInternalKeyPool.insert(nIndex);\n         } else {\n             setExternalKeyPool.insert(nIndex);\n         }\n+        m_max_keypool_index = std::max(m_max_keypool_index, nIndex);\n \n         // If no metadata exists yet, create a default with the pool key's\n         // creation time. Note that this may be overwritten by actually\n@@ -795,6 +797,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         nAccountingEntryNumber = 0;\n         nNextResend = 0;\n         nLastResend = 0;\n+        m_max_keypool_index = 0;\n         nTimeFirstKey = 0;\n         fBroadcastTransactions = false;\n         nRelockTime = 0;"
      }
    ]
  },
  {
    "sha": "077d01f2fcc305809f084ccc34badc531ae2f30a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzdkMDFmMmZjYzMwNTgwOWYwODRjY2MzNGJhZGM1MzFhZTJmMzBh",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-07-17T17:14:53Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-07-17T17:14:53Z"
      },
      "message": "random: only use getentropy on openbsd",
      "tree": {
        "sha": "ea2a54eae81db2802bfb552a5ca2565c9227f8ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea2a54eae81db2802bfb552a5ca2565c9227f8ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/077d01f2fcc305809f084ccc34badc531ae2f30a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/077d01f2fcc305809f084ccc34badc531ae2f30a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/077d01f2fcc305809f084ccc34badc531ae2f30a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/077d01f2fcc305809f084ccc34badc531ae2f30a/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b019357ff09e7a522307fc271d6b60562a7b890",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b019357ff09e7a522307fc271d6b60562a7b890",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b019357ff09e7a522307fc271d6b60562a7b890"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b308e8f4a1dec93d0e183dd51fe82174a32218bd",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/077d01f2fcc305809f084ccc34badc531ae2f30a/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/077d01f2fcc305809f084ccc34badc531ae2f30a/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=077d01f2fcc305809f084ccc34badc531ae2f30a",
        "patch": "@@ -227,10 +227,12 @@ void GetOSRand(unsigned char *ent32)\n             RandFailure();\n         }\n     }\n-#elif defined(HAVE_GETENTROPY)\n+#elif defined(HAVE_GETENTROPY) && defined(__OpenBSD__)\n     /* On OpenBSD this can return up to 256 bytes of entropy, will return an\n      * error if more are requested.\n      * The call cannot return less than the requested number of bytes.\n+       getentropy is explicitly limited to openbsd here, as a similar (but not\n+       the same) function may exist on other platforms via glibc.\n      */\n     if (getentropy(ent32, NUM_OS_RANDOM_BYTES) != 0) {\n         RandFailure();"
      }
    ]
  },
  {
    "sha": "fee0d803fb55c8d85b5cd1ff69d799c5ad522e18",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZWUwZDgwM2ZiNTVjOGQ4NWI1Y2QxZmY2OWQ3OTljNWFkNTIyZTE4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-17T18:00:40Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-17T22:12:39Z"
      },
      "message": "Merge #9980: Fix mem access violation merkleblock\n\n8276e70de Adding assert to avoid a memory access violation inside of PartialMerkleTree::CalcHash() (Chris Stewart)\n\nPull request description:\n\n  Fixing a possible memory access violation in CPartialMerkleTree::CalcHash().\n\n  This can happen if we some how a merkle tree with zero txids. I don't think this can happen in practice as we only send merkle block messages on the p2p network as of now -- we cannot receive them.\n\n  This was found with #8469, specifically using this [generator](https://github.com/Christewart/bitcoin/blob/rapidcheck/src/test/gen/merkleblock_gen.h#L52-L77) which will cause a memory access violation on [this test case](https://github.com/Christewart/bitcoin/blob/rapidcheck/src/test/merkleblock_properties.cpp#L48).\n\nTree-SHA512: b95904ec45ea3f082c7722161d93ee06b24c706fbffa909a6e995ed14788aed2830f91b626da6f0347660c45874a0735dab61c9440b59c949c690af4165c83fb",
      "tree": {
        "sha": "09ea2c2d3e2ae0c7973a9e90c7f62c73b6edc995",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09ea2c2d3e2ae0c7973a9e90c7f62c73b6edc995"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fee0d803fb55c8d85b5cd1ff69d799c5ad522e18",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZbTZXAAoJEKY26XYx92fg6EwP/1DmGuhX2sjDsIceiwpKM3MS\nX6BlKeDkGhjuIh4HnpDnWeZQG/ZC+9HyNMKNiLTvtpin+DfgHdqC3GsHlGFMS11t\nQyTdYtlSKvzeqfLR+jyA3vbtrGJQ+MMlNTmChi3HmDCCAF8cSuJMoNkbJia7QoXS\nHFwUruY4u8da9hKEnhT9sO3JgPOi2xxkq5q7hExQicxBae1KpJdQzID1SmFcxk9o\nxbmxedZCZJHevqOtR5qPs9Xi1nHORIjtIMpf4Wvk+R+2ptq+QjEok+c+QAcv+xuE\nIkqYAU/UQwN5l8SUrN2d/hO/mY5yLKGIayBpQWKSBkak+TyRGf+dhh0IQwmRUfu0\n92LOss1hZLSQpIYPfg87uG3z4A1Xal1LUXkQQYQ/+3mm7dPC8s56vL0VRd/rGOLa\npMMmhY0tAeQnVdExUIYPcmpGeTE9OkCSjmAknBJS8rXfZKho1xDCrRM8dCCHvACE\n/GnF9PvTtEGPfsDzrfmsZvmus8SZ81vMoZARt0XvYWVScz7W4GE3RaGnltWCYAjQ\nGMVp2BIFfbXmUD+RIy3k4RM40oHcKPD5nlGDCDBS9aN3oY4zlS8hUyjhSJZ0j2JB\nmze50xbXPgQU19V62+gsuYoD66pS/GybBq3bIFpbygoLJiNvg0VJxwyjEUe9B4Jv\n4B7Yk027+8qzRx2Ym20P\n=rXvH\n-----END PGP SIGNATURE-----",
        "payload": "tree 09ea2c2d3e2ae0c7973a9e90c7f62c73b6edc995\nparent 0b019357ff09e7a522307fc271d6b60562a7b890\nparent 8276e70de15c5c3a7525471ad619edd1237b424a\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1500314440 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1500329559 -0700\n\nMerge #9980: Fix mem access violation merkleblock\n\n8276e70de Adding assert to avoid a memory access violation inside of PartialMerkleTree::CalcHash() (Chris Stewart)\n\nPull request description:\n\n  Fixing a possible memory access violation in CPartialMerkleTree::CalcHash().\n\n  This can happen if we some how a merkle tree with zero txids. I don't think this can happen in practice as we only send merkle block messages on the p2p network as of now -- we cannot receive them.\n\n  This was found with #8469, specifically using this [generator](https://github.com/Christewart/bitcoin/blob/rapidcheck/src/test/gen/merkleblock_gen.h#L52-L77) which will cause a memory access violation on [this test case](https://github.com/Christewart/bitcoin/blob/rapidcheck/src/test/merkleblock_properties.cpp#L48).\n\nTree-SHA512: b95904ec45ea3f082c7722161d93ee06b24c706fbffa909a6e995ed14788aed2830f91b626da6f0347660c45874a0735dab61c9440b59c949c690af4165c83fb\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fee0d803fb55c8d85b5cd1ff69d799c5ad522e18",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fee0d803fb55c8d85b5cd1ff69d799c5ad522e18",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fee0d803fb55c8d85b5cd1ff69d799c5ad522e18/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b019357ff09e7a522307fc271d6b60562a7b890",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b019357ff09e7a522307fc271d6b60562a7b890",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b019357ff09e7a522307fc271d6b60562a7b890"
      },
      {
        "sha": "8276e70de15c5c3a7525471ad619edd1237b424a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8276e70de15c5c3a7525471ad619edd1237b424a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8276e70de15c5c3a7525471ad619edd1237b424a"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f0abea0611b9314c2e150bc8382bdd08172e786f",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fee0d803fb55c8d85b5cd1ff69d799c5ad522e18/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fee0d803fb55c8d85b5cd1ff69d799c5ad522e18/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=fee0d803fb55c8d85b5cd1ff69d799c5ad522e18",
        "patch": "@@ -59,6 +59,9 @@ CMerkleBlock::CMerkleBlock(const CBlock& block, const std::set<uint256>& txids)\n }\n \n uint256 CPartialMerkleTree::CalcHash(int height, unsigned int pos, const std::vector<uint256> &vTxid) {\n+    //we can never have zero txs in a merkle block, we always need the coinbase tx\n+    //if we do not have this assert, we can hit a memory access violation when indexing into vTxid\n+    assert(vTxid.size() != 0);\n     if (height == 0) {\n         // hash at height 0 is the txids themself\n         return vTxid[pos];"
      },
      {
        "sha": "f590c487dee0f70d668cf725ffa38560b80a6827",
        "filename": "src/merkleblock.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fee0d803fb55c8d85b5cd1ff69d799c5ad522e18/src/merkleblock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fee0d803fb55c8d85b5cd1ff69d799c5ad522e18/src/merkleblock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.h?ref=fee0d803fb55c8d85b5cd1ff69d799c5ad522e18",
        "patch": "@@ -121,6 +121,8 @@ class CPartialMerkleTree\n /**\n  * Used to relay blocks as header + vector<merkle branch>\n  * to filtered nodes.\n+ *\n+ * NOTE: The class assumes that the given CBlock has *at least* 1 transaction. If the CBlock has 0 txs, it will hit an assertion.\n  */\n class CMerkleBlock\n {"
      }
    ]
  },
  {
    "sha": "75b5643c47c3b382ed97a9f5e2bdc883a0f98709",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NWI1NjQzYzQ3YzNiMzgyZWQ5N2E5ZjVlMmJkYzg4M2EwZjk4NzA5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-17T23:33:29Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-17T23:54:20Z"
      },
      "message": "Merge #10707: Better API for estimatesmartfee RPC\n\n06bcdb8da Convert named argument from nblocks to conf_target (Alex Morcos)\n439c4e8ad Improve api to estimatesmartfee (Alex Morcos)\n\nPull request description:\n\n  Through 0.14 branch, the estimatesmartfee API was tagged \"WARNING: This interface is unstable and may disappear or change!\" and this warning is removed for 0.15, so any wanted API updates should happen now.\n\n  The changes here are to make the additional parameter for conservative estimates a more general estimate_mode string , to omit the feerate and include an error string instead of returning -1 on error, and to do better parameter checking initially.\n\n  ~It is only the last 2 commits, but it's built on #10706 and #10543~.\n\n  See https://github.com/bitcoin/bitcoin/pull/10707#issuecomment-314869251 for renaming of nblocks argument to conf_target.  Will need to be included before string freeze.\n\n  PR description edited for clarity\n\nTree-SHA512: 6d8ebee8bb410e2950ffd59663eebfed8d1611d995dc935bb91e430d9da7e2f306796f45631458376027d26341c660f09e825e61748103d2f2736ec6dc3df3ae",
      "tree": {
        "sha": "f2e7a6fdd47cf67d6f3524cca1b7646e3acacd1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2e7a6fdd47cf67d6f3524cca1b7646e3acacd1b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75b5643c47c3b382ed97a9f5e2bdc883a0f98709",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZbU4sAAoJEKY26XYx92fgUIsQAJEePOp+4Si0xx7g1nwinvjh\nDZdzY3I4Hmcl5DVTypHEBXtWZhvzcqQiCjKxuyaKFtLcWuZqzqlLfnmffdYsIPoC\nIhLHWrmyGnadkkWbr+0upfDYjsR0vVeR5rKP7RgVY4sToFmmv4fwCVMN1Lfpc60i\nPkXOczbmTIl0UrziGCY94n1JAkL4NtW0jW/nZqcFWNfKrWaZyyztupJIIlA8nQX2\nWR5M2MCt8kP/VuFUIMGsVxTtwgSNDaSq/G/Utd5QnjxQAwSY8T8JDt6hTvqUNKTX\nHNbezE7181dt+oG3rNU/6URMMzA8d5X+e9AdZb7zUzOvvwuUOOOsMhTCUkuQv4jC\nqxP4pRkvp4Q+vcAj0ldrBcNk7mhV+7cegXI4MyLMOG0j79Zll3YiI/YwYeyxmkC1\n5VcNutbloCINh7Y7eg0jkWKuP2nliZC7FvW5kYt1E+Rdup1jHCClYI7v8T1mePAV\nFEOUxLezYr+1VcQz3SJOSg8FRjJ1z6EVEVmunZj92pRnBSUOn5QhZrWOh1uSDJZ5\n/ZVV2EIEiQiKOVd02Odt/DCPg/MfA33+BcjwlEFBIjEd6+kr/LyP6RP0CQx7Hm4A\nhwafXwX2+KXjd0UYIEJ3ld88A5BcHYxogtSPXDJhPOZsYsT48G3iTX8hxjKPmf18\nAXK4ID8ymE+rKLhws24r\n=132x\n-----END PGP SIGNATURE-----",
        "payload": "tree f2e7a6fdd47cf67d6f3524cca1b7646e3acacd1b\nparent fee0d803fb55c8d85b5cd1ff69d799c5ad522e18\nparent 06bcdb8da64502a64df03f3c89fbc6ccb72cd349\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1500334409 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1500335660 -0700\n\nMerge #10707: Better API for estimatesmartfee RPC\n\n06bcdb8da Convert named argument from nblocks to conf_target (Alex Morcos)\n439c4e8ad Improve api to estimatesmartfee (Alex Morcos)\n\nPull request description:\n\n  Through 0.14 branch, the estimatesmartfee API was tagged \"WARNING: This interface is unstable and may disappear or change!\" and this warning is removed for 0.15, so any wanted API updates should happen now.\n\n  The changes here are to make the additional parameter for conservative estimates a more general estimate_mode string , to omit the feerate and include an error string instead of returning -1 on error, and to do better parameter checking initially.\n\n  ~It is only the last 2 commits, but it's built on #10706 and #10543~.\n\n  See https://github.com/bitcoin/bitcoin/pull/10707#issuecomment-314869251 for renaming of nblocks argument to conf_target.  Will need to be included before string freeze.\n\n  PR description edited for clarity\n\nTree-SHA512: 6d8ebee8bb410e2950ffd59663eebfed8d1611d995dc935bb91e430d9da7e2f306796f45631458376027d26341c660f09e825e61748103d2f2736ec6dc3df3ae\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75b5643c47c3b382ed97a9f5e2bdc883a0f98709",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/75b5643c47c3b382ed97a9f5e2bdc883a0f98709",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75b5643c47c3b382ed97a9f5e2bdc883a0f98709/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fee0d803fb55c8d85b5cd1ff69d799c5ad522e18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fee0d803fb55c8d85b5cd1ff69d799c5ad522e18",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fee0d803fb55c8d85b5cd1ff69d799c5ad522e18"
      },
      {
        "sha": "06bcdb8da64502a64df03f3c89fbc6ccb72cd349",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06bcdb8da64502a64df03f3c89fbc6ccb72cd349",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/06bcdb8da64502a64df03f3c89fbc6ccb72cd349"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 52,
      "deletions": 42
    },
    "files": [
      {
        "sha": "73cc0b4a5e7bceadaac396a9ae0dbe7b3d3e48c5",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 11,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75b5643c47c3b382ed97a9f5e2bdc883a0f98709/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75b5643c47c3b382ed97a9f5e2bdc883a0f98709/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=75b5643c47c3b382ed97a9f5e2bdc883a0f98709",
        "patch": "@@ -839,20 +839,20 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, FeeCalculation\n     EstimationResult tempResult;\n \n     // Return failure if trying to analyze a target we're not tracking\n-    if (confTarget <= 0 || (unsigned int)confTarget > longStats->GetMaxConfirms())\n-        return CFeeRate(0);\n+    if (confTarget <= 0 || (unsigned int)confTarget > longStats->GetMaxConfirms()) {\n+        return CFeeRate(0);  // error conditon\n+    }\n \n     // It's not possible to get reasonable estimates for confTarget of 1\n-    if (confTarget == 1)\n-        confTarget = 2;\n+    if (confTarget == 1) confTarget = 2;\n \n     unsigned int maxUsableEstimate = MaxUsableEstimate();\n-    if (maxUsableEstimate <= 1)\n-        return CFeeRate(0);\n-\n     if ((unsigned int)confTarget > maxUsableEstimate) {\n         confTarget = maxUsableEstimate;\n     }\n+    if (feeCalc) feeCalc->returnedTarget = confTarget;\n+\n+    if (confTarget <= 1) return CFeeRate(0); // error conditon\n \n     assert(confTarget > 0); //estimateCombinedFee and estimateConservativeFee take unsigned ints\n     /** true is passed to estimateCombined fee for target/2 and target so\n@@ -899,10 +899,7 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, FeeCalculation\n         }\n     }\n \n-    if (feeCalc) feeCalc->returnedTarget = confTarget;\n-\n-    if (median < 0)\n-        return CFeeRate(0);\n+    if (median < 0) return CFeeRate(0); // error conditon\n \n     return CFeeRate(median);\n }"
      },
      {
        "sha": "1ab195612427b6e103df94ff502145f8d4c0feee",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75b5643c47c3b382ed97a9f5e2bdc883a0f98709/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75b5643c47c3b382ed97a9f5e2bdc883a0f98709/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=75b5643c47c3b382ed97a9f5e2bdc883a0f98709",
        "patch": "@@ -114,7 +114,6 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getrawmempool\", 0, \"verbose\" },\n     { \"estimatefee\", 0, \"nblocks\" },\n     { \"estimatesmartfee\", 0, \"nblocks\" },\n-    { \"estimatesmartfee\", 1, \"conservative\" },\n     { \"estimaterawfee\", 0, \"nblocks\" },\n     { \"estimaterawfee\", 1, \"threshold\" },\n     { \"prioritisetransaction\", 1, \"dummy\" },"
      },
      {
        "sha": "4fd632dfc5514496f50f0b860dacfa81c9ea653e",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 30,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75b5643c47c3b382ed97a9f5e2bdc883a0f98709/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75b5643c47c3b382ed97a9f5e2bdc883a0f98709/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=75b5643c47c3b382ed97a9f5e2bdc883a0f98709",
        "patch": "@@ -806,42 +806,59 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"estimatesmartfee nblocks (conservative)\\n\"\n+            \"estimatesmartfee conf_target (\\\"estimate_mode\\\")\\n\"\n             \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n-            \"confirmation within nblocks blocks if possible and return the number of blocks\\n\"\n+            \"confirmation within conf_target blocks if possible and return the number of blocks\\n\"\n             \"for which the estimate is valid. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks       (numeric)\\n\"\n-            \"2. conservative  (bool, optional, default=true) Whether to return a more conservative estimate which\\n\"\n-            \"                 also satisfies a longer history. A conservative estimate potentially returns a higher\\n\"\n-            \"                 feerate and is more likely to be sufficient for the desired target, but is not as\\n\"\n-            \"                 responsive to short term drops in the prevailing fee market\\n\"\n+            \"1. conf_target     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n+            \"2. \\\"estimate_mode\\\" (string, optional, default=CONSERVATIVE) The fee estimate mode.\\n\"\n+            \"                   Whether to return a more conservative estimate which also satisfies\\n\"\n+            \"                   a longer history. A conservative estimate potentially returns a\\n\"\n+            \"                   higher feerate and is more likely to be sufficient for the desired\\n\"\n+            \"                   target, but is not as responsive to short term drops in the\\n\"\n+            \"                   prevailing fee market.  Must be one of:\\n\"\n+            \"       \\\"UNSET\\\" (defaults to CONSERVATIVE)\\n\"\n+            \"       \\\"ECONOMICAL\\\"\\n\"\n+            \"       \\\"CONSERVATIVE\\\"\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,     (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"  \\\"feerate\\\" : x.x,     (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"  \\\"errors\\\": [ str... ] (json array of strings, optional) Errors encountered during processing\\n\"\n             \"  \\\"blocks\\\" : n         (numeric) block number where estimate was found\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative value is returned if not enough transactions and blocks\\n\"\n+            \"The request target will be clamped between 2 and the highest target\\n\"\n+            \"fee estimation is able to return based on how long it has been running.\\n\"\n+            \"An error is returned if not enough transactions and blocks\\n\"\n             \"have been observed to make an estimate for any number of blocks.\\n\"\n             \"\\nExample:\\n\"\n             + HelpExampleCli(\"estimatesmartfee\", \"6\")\n             );\n \n-    RPCTypeCheck(request.params, {UniValue::VNUM});\n-\n-    int nBlocks = request.params[0].get_int();\n+    RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VSTR});\n+    RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n+    unsigned int conf_target = ParseConfirmTarget(request.params[0]);\n     bool conservative = true;\n     if (request.params.size() > 1 && !request.params[1].isNull()) {\n-        RPCTypeCheckArgument(request.params[1], UniValue::VBOOL);\n-        conservative = request.params[1].get_bool();\n+        FeeEstimateMode fee_mode;\n+        if (!FeeModeFromString(request.params[1].get_str(), fee_mode)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n+        }\n+        if (fee_mode == FeeEstimateMode::ECONOMICAL) conservative = false;\n     }\n \n     UniValue result(UniValue::VOBJ);\n+    UniValue errors(UniValue::VARR);\n     FeeCalculation feeCalc;\n-    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &feeCalc, conservative);\n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(conf_target, &feeCalc, conservative);\n+    if (feeRate != CFeeRate(0)) {\n+        result.push_back(Pair(\"feerate\", ValueFromAmount(feeRate.GetFeePerK())));\n+    } else {\n+        errors.push_back(\"Insufficient data or no feerate found\");\n+        result.push_back(Pair(\"errors\", errors));\n+    }\n     result.push_back(Pair(\"blocks\", feeCalc.returnedTarget));\n     return result;\n }\n@@ -850,18 +867,18 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"estimaterawfee nblocks (threshold)\\n\"\n+            \"estimaterawfee conf_target (threshold)\\n\"\n             \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n             \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n             \"         implementation of fee estimation. The parameters it can be called with\\n\"\n             \"         and the results it returns will change if the internal implementation changes.\\n\"\n             \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n-            \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n-            \"in BIP 141 (witness data is discounted).\\n\"\n+            \"confirmation within conf_target blocks if possible. Uses virtual transaction size as\\n\"\n+            \"defined in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n+            \"1. conf_target (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n-            \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n+            \"               confirmed within conf_target in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n@@ -889,12 +906,9 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n-    RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n+    RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n-    int nBlocks = request.params[0].get_int();\n-    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n-    }\n+    unsigned int conf_target = ParseConfirmTarget(request.params[0]);\n     double threshold = 0.95;\n     if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n@@ -910,9 +924,9 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n         EstimationResult buckets;\n \n         // Only output results for horizons which track the target\n-        if ((unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(horizon)) continue;\n+        if (conf_target > ::feeEstimator.HighestTargetTracked(horizon)) continue;\n \n-        feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n+        feeRate = ::feeEstimator.estimateRawFee(conf_target, threshold, horizon, &buckets);\n         UniValue horizon_result(UniValue::VOBJ);\n         UniValue errors(UniValue::VARR);\n         UniValue passbucket(UniValue::VOBJ);\n@@ -963,9 +977,9 @@ static const CRPCCommand commands[] =\n     { \"generating\",         \"generatetoaddress\",      &generatetoaddress,      true,  {\"nblocks\",\"address\",\"maxtries\"} },\n \n     { \"util\",               \"estimatefee\",            &estimatefee,            true,  {\"nblocks\"} },\n-    { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       true,  {\"nblocks\", \"conservative\"} },\n+    { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       true,  {\"conf_target\", \"estimate_mode\"} },\n \n-    { \"hidden\",             \"estimaterawfee\",         &estimaterawfee,         true,  {\"nblocks\", \"threshold\"} },\n+    { \"hidden\",             \"estimaterawfee\",         &estimaterawfee,         true,  {\"conf_target\", \"threshold\"} },\n };\n \n void RegisterMiningRPCCommands(CRPCTable &t)"
      }
    ]
  },
  {
    "sha": "81560b07ce8a14fb3a965a8f231545f05d8d7768",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTU2MGIwN2NlOGExNGZiM2E5NjVhOGYyMzE1NDVmMDVkOGQ3NzY4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-18T06:24:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-18T06:29:35Z"
      },
      "message": "Merge #10855: random: only use getentropy on openbsd\n\n077d01f random: only use getentropy on openbsd (Cory Fields)\n\nPull request description:\n\n  Follow-up from #10335. I can confirm that this fixes my issue when building against a new glibc + old linux headers for back-compat.\n\nTree-SHA512: a0fcf26995fbd3636f970e729a172c6e1d7c0de371e703f0653cd9776600f438ec43acd2b1eb92f2678a011968da8fbbeef8a54599434851f4c6ffe78291c172",
      "tree": {
        "sha": "14b8ac9e9673687339f423efc90b592c91640855",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14b8ac9e9673687339f423efc90b592c91640855"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81560b07ce8a14fb3a965a8f231545f05d8d7768",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZbarPAAoJEB5K7WKYbNJdsYQIAK8DwS5UxtWvlSvd/q8AUdHt\nOdWCag5z4iuf8Mvo9+VAM285auPMTvdljVPl0xBHuM/A06CO2SParbol2xPRBBeY\nH1k+C7SvQwikCk/WCj+lZsNBvaOZnbrkPIpmoMpClFhSk4kUTw6Ih6llQ02Kx30l\n31oBQprCNoSIJu1FikhhncEBAoyCUJ2uCCKsgXWuKgdM9hgMj14QIQf2tpy6DVdt\n/PSROpFMWDkF0WTWJ+1pcmCjvM+WLDfALtrOHIFTZcu08V6QOuMOIhyvJ8IF2Msg\nzEc4ZunsVh90GmFslKDQmZkFfT/yy01MdWYEwIrAensoBrHBOqBWUtFPWuNF+Aw=\n=03/B\n-----END PGP SIGNATURE-----",
        "payload": "tree 14b8ac9e9673687339f423efc90b592c91640855\nparent 75b5643c47c3b382ed97a9f5e2bdc883a0f98709\nparent 077d01f2fcc305809f084ccc34badc531ae2f30a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1500359080 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1500359375 +0200\n\nMerge #10855: random: only use getentropy on openbsd\n\n077d01f random: only use getentropy on openbsd (Cory Fields)\n\nPull request description:\n\n  Follow-up from #10335. I can confirm that this fixes my issue when building against a new glibc + old linux headers for back-compat.\n\nTree-SHA512: a0fcf26995fbd3636f970e729a172c6e1d7c0de371e703f0653cd9776600f438ec43acd2b1eb92f2678a011968da8fbbeef8a54599434851f4c6ffe78291c172\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81560b07ce8a14fb3a965a8f231545f05d8d7768",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/81560b07ce8a14fb3a965a8f231545f05d8d7768",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81560b07ce8a14fb3a965a8f231545f05d8d7768/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "75b5643c47c3b382ed97a9f5e2bdc883a0f98709",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75b5643c47c3b382ed97a9f5e2bdc883a0f98709",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/75b5643c47c3b382ed97a9f5e2bdc883a0f98709"
      },
      {
        "sha": "077d01f2fcc305809f084ccc34badc531ae2f30a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/077d01f2fcc305809f084ccc34badc531ae2f30a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/077d01f2fcc305809f084ccc34badc531ae2f30a"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b308e8f4a1dec93d0e183dd51fe82174a32218bd",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81560b07ce8a14fb3a965a8f231545f05d8d7768/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81560b07ce8a14fb3a965a8f231545f05d8d7768/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=81560b07ce8a14fb3a965a8f231545f05d8d7768",
        "patch": "@@ -227,10 +227,12 @@ void GetOSRand(unsigned char *ent32)\n             RandFailure();\n         }\n     }\n-#elif defined(HAVE_GETENTROPY)\n+#elif defined(HAVE_GETENTROPY) && defined(__OpenBSD__)\n     /* On OpenBSD this can return up to 256 bytes of entropy, will return an\n      * error if more are requested.\n      * The call cannot return less than the requested number of bytes.\n+       getentropy is explicitly limited to openbsd here, as a similar (but not\n+       the same) function may exist on other platforms via glibc.\n      */\n     if (getentropy(ent32, NUM_OS_RANDOM_BYTES) != 0) {\n         RandFailure();"
      }
    ]
  },
  {
    "sha": "7b6e8bc4424006119dc537699c8b3b3121e0b3c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YjZlOGJjNDQyNDAwNjExOWRjNTM3Njk5YzhiM2IzMTIxZTBiM2Mz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-18T07:30:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-18T07:30:33Z"
      },
      "message": "Merge #10795: No longer ever reuse keypool indexes\n\n1fc8c3d No longer ever reuse keypool indexes (Matt Corallo)\n\nPull request description:\n\n  This fixes an issue where you could reserve a keypool entry, then\n  top up the keypool, writing out a new key at the given index, then\n  return they key from the pool. This isnt likely to cause issues,\n  but given there is no reason to ever re-use keypool indexes\n  (they're 64 bits...), best to avoid it alltogether.\n\n  Builds on #10235, should probably get a 15 tag.\n\nTree-SHA512: c13a18a90f1076fb74307f2d64e9d80149811524c6bda259698ff2c65adaf8c6c3f2a3a07a5f4bf03251bc942ba8f5fd33a4427aa4256748c40b062991682caf",
      "tree": {
        "sha": "3a507702c01d8c7f89a9414c625e9fd6c2d5337f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a507702c01d8c7f89a9414c625e9fd6c2d5337f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b6e8bc4424006119dc537699c8b3b3121e0b3c3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEbBAABCgAGBQJZbbkaAAoJEB5K7WKYbNJdhGgH93y8fOzC2jQ7A35FSF0q3UHn\ntnWPdccJaF4btvt7OiehIMaoF7bJYatrY0ue5IljMQskbPaL8siBntnupYZ8WqKt\nbvuOnjWjT22yUN6Eoqgn64j6KsqB2/VfCuBMDCA5c7P+xNmZSQVIuWKTRBTe70Gi\nMean0RUTrazGF5/GNcGWyyt07pi/KWJYoqLuHZfR6yDzF5dQkTu0ncSL5dw1Nyk8\n7YS2y/W0rjCfQ8XTdxoO5Bgn0+ILLeZhycqPzWPm2yvzkvqK6ufHiW1KHl5HAQgz\nI8UpdixtFd9dFq65R3J7sgH7q33vOOrkyx9IEMH6j+0coa4ZUbTrjERmIcBVqw==\n=pvkQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 3a507702c01d8c7f89a9414c625e9fd6c2d5337f\nparent 81560b07ce8a14fb3a965a8f231545f05d8d7768\nparent 1fc8c3de0cff2971cc1f9903bfc3d03a982f2fab\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1500363024 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1500363033 +0200\n\nMerge #10795: No longer ever reuse keypool indexes\n\n1fc8c3d No longer ever reuse keypool indexes (Matt Corallo)\n\nPull request description:\n\n  This fixes an issue where you could reserve a keypool entry, then\n  top up the keypool, writing out a new key at the given index, then\n  return they key from the pool. This isnt likely to cause issues,\n  but given there is no reason to ever re-use keypool indexes\n  (they're 64 bits...), best to avoid it alltogether.\n\n  Builds on #10235, should probably get a 15 tag.\n\nTree-SHA512: c13a18a90f1076fb74307f2d64e9d80149811524c6bda259698ff2c65adaf8c6c3f2a3a07a5f4bf03251bc942ba8f5fd33a4427aa4256748c40b062991682caf\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b6e8bc4424006119dc537699c8b3b3121e0b3c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7b6e8bc4424006119dc537699c8b3b3121e0b3c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b6e8bc4424006119dc537699c8b3b3121e0b3c3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "81560b07ce8a14fb3a965a8f231545f05d8d7768",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81560b07ce8a14fb3a965a8f231545f05d8d7768",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/81560b07ce8a14fb3a965a8f231545f05d8d7768"
      },
      {
        "sha": "1fc8c3de0cff2971cc1f9903bfc3d03a982f2fab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fc8c3de0cff2971cc1f9903bfc3d03a982f2fab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1fc8c3de0cff2971cc1f9903bfc3d03a982f2fab"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 9,
      "deletions": 10
    },
    "files": [
      {
        "sha": "53175025890b0d20fb3f5c8d55f4b6c72667a66d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 9,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b6e8bc4424006119dc537699c8b3b3121e0b3c3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b6e8bc4424006119dc537699c8b3b3121e0b3c3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7b6e8bc4424006119dc537699c8b3b3121e0b3c3",
        "patch": "@@ -3211,21 +3211,17 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n                 internal = true;\n             }\n \n-            if (!setInternalKeyPool.empty()) {\n-                nEnd = *(setInternalKeyPool.rbegin()) + 1;\n-            }\n-            if (!setExternalKeyPool.empty()) {\n-                nEnd = std::max(nEnd, *(setExternalKeyPool.rbegin()) + 1);\n-            }\n+            assert(m_max_keypool_index < std::numeric_limits<int64_t>::max()); // How in the hell did you use so many keys?\n+            int64_t index = ++m_max_keypool_index;\n \n-            if (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey(walletdb, internal), internal))) {\n+            if (!walletdb.WritePool(index, CKeyPool(GenerateNewKey(walletdb, internal), internal))) {\n                 throw std::runtime_error(std::string(__func__) + \": writing generated key failed\");\n             }\n \n             if (internal) {\n-                setInternalKeyPool.insert(nEnd);\n+                setInternalKeyPool.insert(index);\n             } else {\n-                setExternalKeyPool.insert(nEnd);\n+                setExternalKeyPool.insert(index);\n             }\n         }\n         if (missingInternal + missingExternal > 0) {"
      },
      {
        "sha": "574fd8710d3fafb0c6c5d1f1534e5dbca983aa91",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b6e8bc4424006119dc537699c8b3b3121e0b3c3/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b6e8bc4424006119dc537699c8b3b3121e0b3c3/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=7b6e8bc4424006119dc537699c8b3b3121e0b3c3",
        "patch": "@@ -701,6 +701,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     std::set<int64_t> setInternalKeyPool;\n     std::set<int64_t> setExternalKeyPool;\n+    int64_t m_max_keypool_index;\n \n     int64_t nTimeFirstKey;\n \n@@ -743,13 +744,14 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         }\n     }\n \n-    void LoadKeyPool(int nIndex, const CKeyPool &keypool)\n+    void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool)\n     {\n         if (keypool.fInternal) {\n             setInternalKeyPool.insert(nIndex);\n         } else {\n             setExternalKeyPool.insert(nIndex);\n         }\n+        m_max_keypool_index = std::max(m_max_keypool_index, nIndex);\n \n         // If no metadata exists yet, create a default with the pool key's\n         // creation time. Note that this may be overwritten by actually\n@@ -795,6 +797,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         nAccountingEntryNumber = 0;\n         nNextResend = 0;\n         nLastResend = 0;\n+        m_max_keypool_index = 0;\n         nTimeFirstKey = 0;\n         fBroadcastTransactions = false;\n         nRelockTime = 0;"
      }
    ]
  },
  {
    "sha": "bde4f937aebc421dd7e37729928105a2014bfc83",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZGU0ZjkzN2FlYmM0MjFkZDdlMzc3Mjk5MjgxMDVhMjAxNGJmYzgz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-18T15:15:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-18T15:18:49Z"
      },
      "message": "Merge #10849: Multiwallet: simplest endpoint support\n\n6b9faf7 [QA] add basic multiwallet test (Jonas Schnelli)\n979d0b8 [tests] [wallet] Add wallet endpoint support to authproxy (John Newbery)\n76603b1 Select wallet based on the given endpoint (Jonas Schnelli)\n32c9710 Fix test_bitcoin circular dependency issue (Jonas Schnelli)\n31e0720 Add wallet endpoint support to bitcoin-cli (-usewallet) (Jonas Schnelli)\ndd2185c Register wallet endpoint (Jonas Schnelli)\n\nPull request description:\n\n  Alternative for #10829 and #10650.\n  It adds the most simplest form of wallet based endpoint support (`/wallet/<filename>`).\n  No v1 and no node/wallet endpoint split.\n\nTree-SHA512: 23de1fd2f9b48d94682928b582fb6909e16ca507c2ee19e1f989d5a4f3aa706194c4b1fe8854d1d79ba531b7092434239776cae1ae715ff536e829424f59f9be",
      "tree": {
        "sha": "b533cb8b6d8aec651b76b68916fe528f9583a1f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b533cb8b6d8aec651b76b68916fe528f9583a1f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bde4f937aebc421dd7e37729928105a2014bfc83",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZbibZAAoJEB5K7WKYbNJdsOYH/RL3FD89pxydcJAq+XZ1LW0a\n01MqhSXyqIUaWOYx+LECesaD1nMpqVaiLHl9HQ9nGBpT+yTYWUkYE7ZX34aFssQB\n9+63kI5316mobQxNkeyr5SZrH8U6CLipFPzA1i74VbEBVYZ+s58gLh3EKTINyvR/\nLyRmqPpOVDuocxV5Jz8grv3M9pdSiG+toPp539iZrNTpFDhfECP4vNZblsC8KEhR\nbb22pW9dDGMg9uZsk+UPyBQ0fLmXNXoTEyzDPUrMFjn5jNitqufEz0rfJscOLYx7\nhC360HBTIG1pVdRoB0eq6+mxu5BYSg1A9JQ+9zbqxqtBodOW9xrMmWAfhEU3uB0=\n=MKFb\n-----END PGP SIGNATURE-----",
        "payload": "tree b533cb8b6d8aec651b76b68916fe528f9583a1f2\nparent 7b6e8bc4424006119dc537699c8b3b3121e0b3c3\nparent 6b9faf747003995417d6a66fad64d2537c371092\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1500390946 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1500391129 +0200\n\nMerge #10849: Multiwallet: simplest endpoint support\n\n6b9faf7 [QA] add basic multiwallet test (Jonas Schnelli)\n979d0b8 [tests] [wallet] Add wallet endpoint support to authproxy (John Newbery)\n76603b1 Select wallet based on the given endpoint (Jonas Schnelli)\n32c9710 Fix test_bitcoin circular dependency issue (Jonas Schnelli)\n31e0720 Add wallet endpoint support to bitcoin-cli (-usewallet) (Jonas Schnelli)\ndd2185c Register wallet endpoint (Jonas Schnelli)\n\nPull request description:\n\n  Alternative for #10829 and #10650.\n  It adds the most simplest form of wallet based endpoint support (`/wallet/<filename>`).\n  No v1 and no node/wallet endpoint split.\n\nTree-SHA512: 23de1fd2f9b48d94682928b582fb6909e16ca507c2ee19e1f989d5a4f3aa706194c4b1fe8854d1d79ba531b7092434239776cae1ae715ff536e829424f59f9be\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bde4f937aebc421dd7e37729928105a2014bfc83",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bde4f937aebc421dd7e37729928105a2014bfc83",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bde4f937aebc421dd7e37729928105a2014bfc83/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7b6e8bc4424006119dc537699c8b3b3121e0b3c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b6e8bc4424006119dc537699c8b3b3121e0b3c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b6e8bc4424006119dc537699c8b3b3121e0b3c3"
      },
      {
        "sha": "6b9faf747003995417d6a66fad64d2537c371092",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b9faf747003995417d6a66fad64d2537c371092",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b9faf747003995417d6a66fad64d2537c371092"
      }
    ],
    "stats": {
      "total": 110,
      "additions": 103,
      "deletions": 7
    },
    "files": [
      {
        "sha": "6415b3d2e3399fa9971e017e979bd9a84bf8f96c",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bde4f937aebc421dd7e37729928105a2014bfc83/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bde4f937aebc421dd7e37729928105a2014bfc83/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=bde4f937aebc421dd7e37729928105a2014bfc83",
        "patch": "@@ -96,12 +96,13 @@ endif\n \n test_test_bitcoin_SOURCES = $(BITCOIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)\n test_test_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -I$(builddir)/test/ $(TESTDEFS) $(EVENT_CFLAGS)\n-test_test_bitcoin_LDADD = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) \\\n-  $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1) $(EVENT_LIBS) $(EVENT_PTHREADS_LIBS)\n-test_test_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_test_bitcoin_LDADD =\n if ENABLE_WALLET\n test_test_bitcoin_LDADD += $(LIBBITCOIN_WALLET)\n endif\n+test_test_bitcoin_LDADD += $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) \\\n+  $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1) $(EVENT_LIBS) $(EVENT_PTHREADS_LIBS)\n+test_test_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n \n test_test_bitcoin_LDADD += $(LIBBITCOIN_CONSENSUS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)\n test_test_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -static"
      },
      {
        "sha": "c2bc15584f0b133984c4ca173804dc6a125b3c01",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bde4f937aebc421dd7e37729928105a2014bfc83/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bde4f937aebc421dd7e37729928105a2014bfc83/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=bde4f937aebc421dd7e37729928105a2014bfc83",
        "patch": "@@ -46,6 +46,7 @@ std::string HelpMessageCli()\n     strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcclienttimeout=<n>\", strprintf(_(\"Timeout in seconds during HTTP requests, or 0 for no timeout. (default: %d)\"), DEFAULT_HTTP_CLIENT_TIMEOUT));\n     strUsage += HelpMessageOpt(\"-stdin\", _(\"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases)\"));\n+    strUsage += HelpMessageOpt(\"-usewallet=<walletname>\", _(\"Send RPC for non-default wallet on RPC server (argument is wallet filename in bitcoind directory, required if bitcoind/-Qt runs with multiple wallets)\"));\n \n     return strUsage;\n }\n@@ -241,7 +242,20 @@ UniValue CallRPC(const std::string& strMethod, const UniValue& params)\n     assert(output_buffer);\n     evbuffer_add(output_buffer, strRequest.data(), strRequest.size());\n \n-    int r = evhttp_make_request(evcon.get(), req.get(), EVHTTP_REQ_POST, \"/\");\n+    // check if we should use a special wallet endpoint\n+    std::string endpoint = \"/\";\n+    std::string walletName = GetArg(\"-usewallet\", \"\");\n+    if (!walletName.empty()) {\n+        char *encodedURI = evhttp_uriencode(walletName.c_str(), walletName.size(), false);\n+        if (encodedURI) {\n+            endpoint = \"/wallet/\"+ std::string(encodedURI);\n+            free(encodedURI);\n+        }\n+        else {\n+            throw CConnectionFailed(\"uri-encode failed\");\n+        }\n+    }\n+    int r = evhttp_make_request(evcon.get(), req.get(), EVHTTP_REQ_POST, endpoint.c_str());\n     req.release(); // ownership moved to evcon in above call\n     if (r != 0) {\n         throw CConnectionFailed(\"send http request failed\");"
      },
      {
        "sha": "69c3e3f49f606ee808c11bd79f6e9d9e8072a8dc",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bde4f937aebc421dd7e37729928105a2014bfc83/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bde4f937aebc421dd7e37729928105a2014bfc83/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=bde4f937aebc421dd7e37729928105a2014bfc83",
        "patch": "@@ -233,7 +233,10 @@ bool StartHTTPRPC()\n         return false;\n \n     RegisterHTTPHandler(\"/\", true, HTTPReq_JSONRPC);\n-\n+#ifdef ENABLE_WALLET\n+    // ifdef can be removed once we switch to better endpoint support and API versioning\n+    RegisterHTTPHandler(\"/wallet/\", false, HTTPReq_JSONRPC);\n+#endif\n     assert(EventBase());\n     httpRPCTimerInterface = new HTTPRPCTimerInterface(EventBase());\n     RPCSetTimerInterface(httpRPCTimerInterface);"
      },
      {
        "sha": "ba012554006a461dd75f450cf0dd0f013d759c29",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bde4f937aebc421dd7e37729928105a2014bfc83/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bde4f937aebc421dd7e37729928105a2014bfc83/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=bde4f937aebc421dd7e37729928105a2014bfc83",
        "patch": "@@ -666,3 +666,14 @@ void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n     }\n }\n \n+std::string urlDecode(const std::string &urlEncoded) {\n+    std::string res;\n+    if (!urlEncoded.empty()) {\n+        char *decoded = evhttp_uridecode(urlEncoded.c_str(), false, NULL);\n+        if (decoded) {\n+            res = std::string(decoded);\n+            free(decoded);\n+        }\n+    }\n+    return res;\n+}"
      },
      {
        "sha": "3e434bf0a0b263ae1a26924710f29f2c5a33bf79",
        "filename": "src/httpserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bde4f937aebc421dd7e37729928105a2014bfc83/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bde4f937aebc421dd7e37729928105a2014bfc83/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=bde4f937aebc421dd7e37729928105a2014bfc83",
        "patch": "@@ -148,4 +148,6 @@ class HTTPEvent\n     struct event* ev;\n };\n \n+std::string urlDecode(const std::string &urlEncoded);\n+\n #endif // BITCOIN_HTTPSERVER_H"
      },
      {
        "sha": "ef96742a3cab1ebc8ce9c5d0ac450b8be7f723fc",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bde4f937aebc421dd7e37729928105a2014bfc83/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bde4f937aebc421dd7e37729928105a2014bfc83/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=bde4f937aebc421dd7e37729928105a2014bfc83",
        "patch": "@@ -9,6 +9,7 @@\n #include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n+#include \"httpserver.h\"\n #include \"validation.h\"\n #include \"net.h\"\n #include \"policy/feerate.h\"\n@@ -30,10 +31,21 @@\n \n #include <univalue.h>\n \n+static const std::string WALLET_ENDPOINT_BASE = \"/wallet/\";\n+\n CWallet *GetWalletForJSONRPCRequest(const JSONRPCRequest& request)\n {\n-    // TODO: Some way to access secondary wallets\n-    return vpwallets.empty() ? nullptr : vpwallets[0];\n+    if (request.URI.substr(0, WALLET_ENDPOINT_BASE.size()) == WALLET_ENDPOINT_BASE) {\n+        // wallet endpoint was used\n+        std::string requestedWallet = urlDecode(request.URI.substr(WALLET_ENDPOINT_BASE.size()));\n+        for (CWalletRef pwallet : ::vpwallets) {\n+            if (pwallet->GetName() == requestedWallet) {\n+                return pwallet;\n+            }\n+        }\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Requested wallet does not exist or is not loaded\");\n+    }\n+    return ::vpwallets.size() == 1 || (request.fHelp && ::vpwallets.size() > 0) ? ::vpwallets[0] : nullptr;\n }\n \n std::string HelpRequiringPassphrase(CWallet * const pwallet)"
      },
      {
        "sha": "2b4dd2d3e7db5a4a22e75ab730f53d8d3b4baf52",
        "filename": "test/functional/multiwallet.py",
        "status": "added",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bde4f937aebc421dd7e37729928105a2014bfc83/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bde4f937aebc421dd7e37729928105a2014bfc83/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=bde4f937aebc421dd7e37729928105a2014bfc83",
        "patch": "@@ -0,0 +1,47 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test multiwallet.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class MultiWalletTest(BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [['-wallet=w1', '-wallet=w2', '-wallet=w3']]\n+\n+    def run_test(self):\n+        w1 = self.nodes[0] / \"wallet/w1\"\n+        w1.generate(1)\n+\n+        #accessing wallet RPC without using wallet endpoint fails\n+        assert_raises_jsonrpc(-32601, \"Method not found\", self.nodes[0].getwalletinfo)\n+\n+        #check w1 wallet balance\n+        walletinfo = w1.getwalletinfo()\n+        assert_equal(walletinfo['immature_balance'], 50)\n+\n+        #check w1 wallet balance\n+        w2 = self.nodes[0] / \"wallet/w2\"\n+        walletinfo = w2.getwalletinfo()\n+        assert_equal(walletinfo['immature_balance'], 0)\n+\n+        w3 = self.nodes[0] / \"wallet/w3\"\n+        \n+        w1.generate(101)\n+        assert_equal(w1.getbalance(), 100)\n+        assert_equal(w2.getbalance(), 0)\n+        assert_equal(w3.getbalance(), 0)\n+\n+        w1.sendtoaddress(w2.getnewaddress(), 1)\n+        w1.sendtoaddress(w3.getnewaddress(), 2)\n+        w1.generate(1)\n+        assert_equal(w2.getbalance(), 1)\n+        assert_equal(w3.getbalance(), 2)\n+\n+if __name__ == '__main__':\n+    MultiWalletTest().main()"
      },
      {
        "sha": "b3671cbdc51ed3ed272c9c84d0119060b6e62d98",
        "filename": "test/functional/test_framework/authproxy.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bde4f937aebc421dd7e37729928105a2014bfc83/test/functional/test_framework/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bde4f937aebc421dd7e37729928105a2014bfc83/test/functional/test_framework/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/authproxy.py?ref=bde4f937aebc421dd7e37729928105a2014bfc83",
        "patch": "@@ -191,3 +191,6 @@ def _get_response(self):\n         else:\n             log.debug(\"<-- [%.6f] %s\"%(elapsed,responsedata))\n         return response\n+\n+    def __truediv__(self, relative_uri):\n+        return AuthServiceProxy(\"{}/{}\".format(self.__service_url, relative_uri), self._service_name, connection=self.__conn)"
      },
      {
        "sha": "227b1a17afbea0dee0ffef49ef5c84adb1e06133",
        "filename": "test/functional/test_framework/coverage.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bde4f937aebc421dd7e37729928105a2014bfc83/test/functional/test_framework/coverage.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bde4f937aebc421dd7e37729928105a2014bfc83/test/functional/test_framework/coverage.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/coverage.py?ref=bde4f937aebc421dd7e37729928105a2014bfc83",
        "patch": "@@ -56,6 +56,8 @@ def __call__(self, *args, **kwargs):\n     def url(self):\n         return self.auth_service_proxy_instance.url\n \n+    def __truediv__(self, relative_uri):\n+        return AuthServiceProxyWrapper(self.auth_service_proxy_instance / relative_uri)\n \n def get_filename(dirname, n_node):\n     \"\"\""
      },
      {
        "sha": "51577589fe0843fcd8ac5a94073aa697411a49a4",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bde4f937aebc421dd7e37729928105a2014bfc83/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bde4f937aebc421dd7e37729928105a2014bfc83/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=bde4f937aebc421dd7e37729928105a2014bfc83",
        "patch": "@@ -63,6 +63,7 @@\n     'segwit.py',\n     # vv Tests less than 2m vv\n     'wallet.py',\n+    'multiwallet.py',\n     'wallet-accounts.py',\n     'p2p-segwit.py',\n     'wallet-dump.py',"
      }
    ]
  },
  {
    "sha": "cf82a9e704f56d245cf512d76ba9d0e6b178f3b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjgyYTllNzA0ZjU2ZDI0NWNmNTEyZDc2YmE5ZDBlNmIxNzhmM2Iw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-10T18:29:06Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-18T15:20:47Z"
      },
      "message": "Do not allow users to get keys from keypool without reserving them\n\nfundrawtransaction allows users to add a change output and then\nnot have it removed from keypool. While it would be nice to have\nusers follow the normal CreateTransaction/CommitTransaction process\nwe use internally, there isnt much benefit in exposing this option,\nespecially with HD wallets, while there is ample room for users to\nmisunderstand or misuse this option.\n\nThis could be particularly nasty in some use-cases (especially\npre-HD-split) - eg a user might fundrawtransaction, then call\ngetnewaddress, hand out the address for someone to pay them, then\nsendrawtransaction. This may result in the user thinking they have\nreceived payment, even though it was really just their own change!\n\nThis could obviously result in needless key-reuse.",
      "tree": {
        "sha": "fa413cbf28fae3f278a28a6ef72582930b9d50c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa413cbf28fae3f278a28a6ef72582930b9d50c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf82a9e704f56d245cf512d76ba9d0e6b178f3b0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf82a9e704f56d245cf512d76ba9d0e6b178f3b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf82a9e704f56d245cf512d76ba9d0e6b178f3b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf82a9e704f56d245cf512d76ba9d0e6b178f3b0/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7b6e8bc4424006119dc537699c8b3b3121e0b3c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b6e8bc4424006119dc537699c8b3b3121e0b3c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b6e8bc4424006119dc537699c8b3b3121e0b3c3"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 13,
      "deletions": 27
    },
    "files": [
      {
        "sha": "26fcfea95cecb663b115a1913e31acec7687a6b1",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf82a9e704f56d245cf512d76ba9d0e6b178f3b0/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf82a9e704f56d245cf512d76ba9d0e6b178f3b0/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=cf82a9e704f56d245cf512d76ba9d0e6b178f3b0",
        "patch": "@@ -2693,7 +2693,6 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             \"     \\\"changePosition\\\"         (numeric, optional, default random) The index of the change output\\n\"\n                             \"     \\\"includeWatching\\\"        (boolean, optional, default false) Also select inputs which are watch only\\n\"\n                             \"     \\\"lockUnspents\\\"           (boolean, optional, default false) Lock selected unspent outputs\\n\"\n-                            \"     \\\"reserveChangeKey\\\"       (boolean, optional, default true) Reserves the change output key from the keypool\\n\"\n                             \"     \\\"feeRate\\\"                (numeric, optional, default not set: makes wallet determine the fee) Set a specific feerate (\" + CURRENCY_UNIT + \" per KB)\\n\"\n                             \"     \\\"subtractFeeFromOutputs\\\" (array, optional) A json array of integers.\\n\"\n                             \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n@@ -2732,7 +2731,6 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     CCoinControl coinControl;\n     int changePosition = -1;\n     bool lockUnspents = false;\n-    bool reserveChangeKey = true;\n     UniValue subtractFeeFromOutputs;\n     std::set<int> setSubtractFeeFromOutputs;\n \n@@ -2752,7 +2750,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                 {\"changePosition\", UniValueType(UniValue::VNUM)},\n                 {\"includeWatching\", UniValueType(UniValue::VBOOL)},\n                 {\"lockUnspents\", UniValueType(UniValue::VBOOL)},\n-                {\"reserveChangeKey\", UniValueType(UniValue::VBOOL)},\n+                {\"reserveChangeKey\", UniValueType(UniValue::VBOOL)}, // DEPRECATED (and ignored), should be removed in 0.16 or so.\n                 {\"feeRate\", UniValueType()}, // will be checked below\n                 {\"subtractFeeFromOutputs\", UniValueType(UniValue::VARR)},\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},\n@@ -2779,9 +2777,6 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n         if (options.exists(\"lockUnspents\"))\n             lockUnspents = options[\"lockUnspents\"].get_bool();\n \n-        if (options.exists(\"reserveChangeKey\"))\n-            reserveChangeKey = options[\"reserveChangeKey\"].get_bool();\n-\n         if (options.exists(\"feeRate\"))\n         {\n             coinControl.m_feerate = CFeeRate(AmountFromValue(options[\"feeRate\"]));\n@@ -2830,7 +2825,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     CAmount nFeeOut;\n     std::string strFailReason;\n \n-    if (!pwallet->FundTransaction(tx, nFeeOut, changePosition, strFailReason, lockUnspents, setSubtractFeeFromOutputs, coinControl, reserveChangeKey)) {\n+    if (!pwallet->FundTransaction(tx, nFeeOut, changePosition, strFailReason, lockUnspents, setSubtractFeeFromOutputs, coinControl)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, strFailReason);\n     }\n "
      },
      {
        "sha": "c56fd05d7ed0d377d848e136797a17832627c22c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf82a9e704f56d245cf512d76ba9d0e6b178f3b0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf82a9e704f56d245cf512d76ba9d0e6b178f3b0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=cf82a9e704f56d245cf512d76ba9d0e6b178f3b0",
        "patch": "@@ -2471,7 +2471,7 @@ bool CWallet::SignTransaction(CMutableTransaction &tx)\n     return true;\n }\n \n-bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl coinControl, bool keepReserveKey)\n+bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl coinControl)\n {\n     std::vector<CRecipient> vecSend;\n \n@@ -2493,8 +2493,13 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n     if (!CreateTransaction(vecSend, wtx, reservekey, nFeeRet, nChangePosInOut, strFailReason, coinControl, false)) {\n         return false;\n     }\n-    if (nChangePosInOut != -1)\n+\n+    if (nChangePosInOut != -1) {\n         tx.vout.insert(tx.vout.begin() + nChangePosInOut, wtx.tx->vout[nChangePosInOut]);\n+        // we dont have the normal Create/Commit cycle, and dont want to risk reusing change,\n+        // so just remove the key from the keypool here.\n+        reservekey.KeepKey();\n+    }\n \n     // Copy output sizes from new transaction; they may have had the fee subtracted from them\n     for (unsigned int idx = 0; idx < tx.vout.size(); idx++)\n@@ -2515,9 +2520,6 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n         }\n     }\n \n-    // optionally keep the change output key\n-    if (keepReserveKey)\n-        reservekey.KeepKey();\n \n     return true;\n }"
      },
      {
        "sha": "bf09b040f6de3c4209d3f455ec2eb27c218a754b",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf82a9e704f56d245cf512d76ba9d0e6b178f3b0/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf82a9e704f56d245cf512d76ba9d0e6b178f3b0/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=cf82a9e704f56d245cf512d76ba9d0e6b178f3b0",
        "patch": "@@ -949,7 +949,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Insert additional inputs into the transaction by\n      * calling CreateTransaction();\n      */\n-    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl, bool keepReserveKey = true);\n+    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl);\n     bool SignTransaction(CMutableTransaction& tx);\n \n     /**"
      },
      {
        "sha": "e52e773918b01253eba4acbe2791a8eb38bd8633",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 14,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf82a9e704f56d245cf512d76ba9d0e6b178f3b0/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf82a9e704f56d245cf512d76ba9d0e6b178f3b0/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=cf82a9e704f56d245cf512d76ba9d0e6b178f3b0",
        "patch": "@@ -636,20 +636,9 @@ def run_test(self):\n         assert_fee_amount(result2['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n         assert_fee_amount(result3['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n \n-        #############################\n-        # Test address reuse option #\n-        #############################\n-\n-        result3 = self.nodes[3].fundrawtransaction(rawtx, {\"reserveChangeKey\": False})\n-        res_dec = self.nodes[0].decoderawtransaction(result3[\"hex\"])\n-        changeaddress = \"\"\n-        for out in res_dec['vout']:\n-            if out['value'] > 1.0:\n-                changeaddress += out['scriptPubKey']['addresses'][0]\n-        assert(changeaddress != \"\")\n-        nextaddr = self.nodes[3].getrawchangeaddress()\n-        # frt should not have removed the key from the keypool\n-        assert(changeaddress == nextaddr)\n+        ################################\n+        # Test no address reuse occurs #\n+        ################################\n \n         result3 = self.nodes[3].fundrawtransaction(rawtx)\n         res_dec = self.nodes[0].decoderawtransaction(result3[\"hex\"])"
      }
    ]
  },
  {
    "sha": "9e8d6a3fb43a2433ef46aaf95511650e3888f730",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZThkNmEzZmI0M2EyNDMzZWY0NmFhZjk1NTExNjUwZTM4ODhmNzMw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-18T15:28:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-18T15:31:06Z"
      },
      "message": "Merge #10784: Do not allow users to get keys from keypool without reserving them\n\ncf82a9e Do not allow users to get keys from keypool without reserving them (Matt Corallo)\n\nPull request description:\n\n  fundrawtransaction allows users to add a change output and then\n  not have it removed from keypool. While it would be nice to have\n  users follow the normal CreateTransaction/CommitTransaction process\n  we use internally, there isnt much benefit in exposing this option,\n  especially with HD wallets, while there is ample room for users to\n  misunderstand or misuse this option.\n\n  This partially reverts #9377. Would be nice to get this for 15 since its kinda crazy we have this option to begin with IMO, will need release notes as an RPC option is now ignored.\n\nTree-SHA512: 72b5ee9c4a229b84d799dfb00c56fe80d8bba914ce81a433c3f5ab325bf9bf2b839ee658c261734f0ee183ab19435039481014d09c41dbe155e6323e63beb01d",
      "tree": {
        "sha": "cf68ed1b3a0b337de7de92eb246666c82f387850",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf68ed1b3a0b337de7de92eb246666c82f387850"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e8d6a3fb43a2433ef46aaf95511650e3888f730",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZbim6AAoJEB5K7WKYbNJdfYEIAJc4/x2Dj+EWTwN2xPlvqNxk\neHyB0FG9F6aWVgeaExrhwg87v/OR7jA6MpwLnIRRQgE9yZjHeaSHRoDgsptp+Ano\np9YOL3f/PYrpY/hZDOMjjIDjf0kHaPGp/Zx21opDUPnlS1D8XHojgNvUULH5ZXSP\ncACVzF3A8DXYXGzmJMpW3suX8C9P56g4VUlNhRR4KGIb2svhODrZPwvTWJrau2AE\n18g1QECBVyXu5LWeuBKx0LquKzOiCg7RiL4Qw4rdeIf5nEEyQ7XS8lErWPBycInL\ndmkTBzVCqnsiTQuX2uYrw3iaFvMOQT6K0E6IPEl7NincKeoYFRAWGJZ9PkXxIKE=\n=BbjE\n-----END PGP SIGNATURE-----",
        "payload": "tree cf68ed1b3a0b337de7de92eb246666c82f387850\nparent bde4f937aebc421dd7e37729928105a2014bfc83\nparent cf82a9e704f56d245cf512d76ba9d0e6b178f3b0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1500391731 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1500391866 +0200\n\nMerge #10784: Do not allow users to get keys from keypool without reserving them\n\ncf82a9e Do not allow users to get keys from keypool without reserving them (Matt Corallo)\n\nPull request description:\n\n  fundrawtransaction allows users to add a change output and then\n  not have it removed from keypool. While it would be nice to have\n  users follow the normal CreateTransaction/CommitTransaction process\n  we use internally, there isnt much benefit in exposing this option,\n  especially with HD wallets, while there is ample room for users to\n  misunderstand or misuse this option.\n\n  This partially reverts #9377. Would be nice to get this for 15 since its kinda crazy we have this option to begin with IMO, will need release notes as an RPC option is now ignored.\n\nTree-SHA512: 72b5ee9c4a229b84d799dfb00c56fe80d8bba914ce81a433c3f5ab325bf9bf2b839ee658c261734f0ee183ab19435039481014d09c41dbe155e6323e63beb01d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e8d6a3fb43a2433ef46aaf95511650e3888f730",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e8d6a3fb43a2433ef46aaf95511650e3888f730",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e8d6a3fb43a2433ef46aaf95511650e3888f730/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bde4f937aebc421dd7e37729928105a2014bfc83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bde4f937aebc421dd7e37729928105a2014bfc83",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bde4f937aebc421dd7e37729928105a2014bfc83"
      },
      {
        "sha": "cf82a9e704f56d245cf512d76ba9d0e6b178f3b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf82a9e704f56d245cf512d76ba9d0e6b178f3b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf82a9e704f56d245cf512d76ba9d0e6b178f3b0"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 13,
      "deletions": 27
    },
    "files": [
      {
        "sha": "f63ce1bb48cac65d06c4299df5276aa241b32766",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e8d6a3fb43a2433ef46aaf95511650e3888f730/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e8d6a3fb43a2433ef46aaf95511650e3888f730/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9e8d6a3fb43a2433ef46aaf95511650e3888f730",
        "patch": "@@ -2705,7 +2705,6 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             \"     \\\"changePosition\\\"         (numeric, optional, default random) The index of the change output\\n\"\n                             \"     \\\"includeWatching\\\"        (boolean, optional, default false) Also select inputs which are watch only\\n\"\n                             \"     \\\"lockUnspents\\\"           (boolean, optional, default false) Lock selected unspent outputs\\n\"\n-                            \"     \\\"reserveChangeKey\\\"       (boolean, optional, default true) Reserves the change output key from the keypool\\n\"\n                             \"     \\\"feeRate\\\"                (numeric, optional, default not set: makes wallet determine the fee) Set a specific feerate (\" + CURRENCY_UNIT + \" per KB)\\n\"\n                             \"     \\\"subtractFeeFromOutputs\\\" (array, optional) A json array of integers.\\n\"\n                             \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n@@ -2744,7 +2743,6 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     CCoinControl coinControl;\n     int changePosition = -1;\n     bool lockUnspents = false;\n-    bool reserveChangeKey = true;\n     UniValue subtractFeeFromOutputs;\n     std::set<int> setSubtractFeeFromOutputs;\n \n@@ -2764,7 +2762,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                 {\"changePosition\", UniValueType(UniValue::VNUM)},\n                 {\"includeWatching\", UniValueType(UniValue::VBOOL)},\n                 {\"lockUnspents\", UniValueType(UniValue::VBOOL)},\n-                {\"reserveChangeKey\", UniValueType(UniValue::VBOOL)},\n+                {\"reserveChangeKey\", UniValueType(UniValue::VBOOL)}, // DEPRECATED (and ignored), should be removed in 0.16 or so.\n                 {\"feeRate\", UniValueType()}, // will be checked below\n                 {\"subtractFeeFromOutputs\", UniValueType(UniValue::VARR)},\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},\n@@ -2791,9 +2789,6 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n         if (options.exists(\"lockUnspents\"))\n             lockUnspents = options[\"lockUnspents\"].get_bool();\n \n-        if (options.exists(\"reserveChangeKey\"))\n-            reserveChangeKey = options[\"reserveChangeKey\"].get_bool();\n-\n         if (options.exists(\"feeRate\"))\n         {\n             coinControl.m_feerate = CFeeRate(AmountFromValue(options[\"feeRate\"]));\n@@ -2842,7 +2837,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     CAmount nFeeOut;\n     std::string strFailReason;\n \n-    if (!pwallet->FundTransaction(tx, nFeeOut, changePosition, strFailReason, lockUnspents, setSubtractFeeFromOutputs, coinControl, reserveChangeKey)) {\n+    if (!pwallet->FundTransaction(tx, nFeeOut, changePosition, strFailReason, lockUnspents, setSubtractFeeFromOutputs, coinControl)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, strFailReason);\n     }\n "
      },
      {
        "sha": "c56fd05d7ed0d377d848e136797a17832627c22c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e8d6a3fb43a2433ef46aaf95511650e3888f730/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e8d6a3fb43a2433ef46aaf95511650e3888f730/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9e8d6a3fb43a2433ef46aaf95511650e3888f730",
        "patch": "@@ -2471,7 +2471,7 @@ bool CWallet::SignTransaction(CMutableTransaction &tx)\n     return true;\n }\n \n-bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl coinControl, bool keepReserveKey)\n+bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl coinControl)\n {\n     std::vector<CRecipient> vecSend;\n \n@@ -2493,8 +2493,13 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n     if (!CreateTransaction(vecSend, wtx, reservekey, nFeeRet, nChangePosInOut, strFailReason, coinControl, false)) {\n         return false;\n     }\n-    if (nChangePosInOut != -1)\n+\n+    if (nChangePosInOut != -1) {\n         tx.vout.insert(tx.vout.begin() + nChangePosInOut, wtx.tx->vout[nChangePosInOut]);\n+        // we dont have the normal Create/Commit cycle, and dont want to risk reusing change,\n+        // so just remove the key from the keypool here.\n+        reservekey.KeepKey();\n+    }\n \n     // Copy output sizes from new transaction; they may have had the fee subtracted from them\n     for (unsigned int idx = 0; idx < tx.vout.size(); idx++)\n@@ -2515,9 +2520,6 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n         }\n     }\n \n-    // optionally keep the change output key\n-    if (keepReserveKey)\n-        reservekey.KeepKey();\n \n     return true;\n }"
      },
      {
        "sha": "bf09b040f6de3c4209d3f455ec2eb27c218a754b",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e8d6a3fb43a2433ef46aaf95511650e3888f730/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e8d6a3fb43a2433ef46aaf95511650e3888f730/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=9e8d6a3fb43a2433ef46aaf95511650e3888f730",
        "patch": "@@ -949,7 +949,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Insert additional inputs into the transaction by\n      * calling CreateTransaction();\n      */\n-    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl, bool keepReserveKey = true);\n+    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl);\n     bool SignTransaction(CMutableTransaction& tx);\n \n     /**"
      },
      {
        "sha": "e52e773918b01253eba4acbe2791a8eb38bd8633",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 14,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e8d6a3fb43a2433ef46aaf95511650e3888f730/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e8d6a3fb43a2433ef46aaf95511650e3888f730/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=9e8d6a3fb43a2433ef46aaf95511650e3888f730",
        "patch": "@@ -636,20 +636,9 @@ def run_test(self):\n         assert_fee_amount(result2['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n         assert_fee_amount(result3['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n \n-        #############################\n-        # Test address reuse option #\n-        #############################\n-\n-        result3 = self.nodes[3].fundrawtransaction(rawtx, {\"reserveChangeKey\": False})\n-        res_dec = self.nodes[0].decoderawtransaction(result3[\"hex\"])\n-        changeaddress = \"\"\n-        for out in res_dec['vout']:\n-            if out['value'] > 1.0:\n-                changeaddress += out['scriptPubKey']['addresses'][0]\n-        assert(changeaddress != \"\")\n-        nextaddr = self.nodes[3].getrawchangeaddress()\n-        # frt should not have removed the key from the keypool\n-        assert(changeaddress == nextaddr)\n+        ################################\n+        # Test no address reuse occurs #\n+        ################################\n \n         result3 = self.nodes[3].fundrawtransaction(rawtx)\n         res_dec = self.nodes[0].decoderawtransaction(result3[\"hex\"])"
      }
    ]
  }
]