[
  {
    "sha": "08de928528b6d324708fecb6a1ff3d598cef23a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOGRlOTI4NTI4YjZkMzI0NzA4ZmVjYjZhMWZmM2Q1OThjZWYyM2Ez",
    "commit": {
      "author": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2014-03-11T08:34:29Z"
      },
      "committer": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2014-03-11T08:34:29Z"
      },
      "message": "Add a method for removing a single wallet tx",
      "tree": {
        "sha": "fe27d75e8494947ef206e3434f4d5cf1e62141cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe27d75e8494947ef206e3434f4d5cf1e62141cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08de928528b6d324708fecb6a1ff3d598cef23a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08de928528b6d324708fecb6a1ff3d598cef23a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08de928528b6d324708fecb6a1ff3d598cef23a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08de928528b6d324708fecb6a1ff3d598cef23a3/comments",
    "author": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a63f8b7b36e39722024a0ba061ca214f00a8f1bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a63f8b7b36e39722024a0ba061ca214f00a8f1bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a63f8b7b36e39722024a0ba061ca214f00a8f1bd"
      }
    ],
    "stats": {
      "total": 252,
      "additions": 241,
      "deletions": 11
    },
    "files": [
      {
        "sha": "c376c9b6b5b5740c9620fffe16534bbd22b9d8c7",
        "filename": "qa/rpc-tests/util.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08de928528b6d324708fecb6a1ff3d598cef23a3/qa/rpc-tests/util.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08de928528b6d324708fecb6a1ff3d598cef23a3/qa/rpc-tests/util.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/util.sh?ref=08de928528b6d324708fecb6a1ff3d598cef23a3",
        "patch": "@@ -61,7 +61,7 @@ function Send {\n   to=$2\n   amount=$3\n   address=$(Address $to)\n-  txid=$( ${SENDANDWAIT} $CLI $from sendtoaddress $address $amount )\n+  ${SENDANDWAIT} $CLI $from sendtoaddress $address $amount\n }\n \n # Use: Unspent <datadir> <n'th-last-unspent> <var>"
      },
      {
        "sha": "26ba3633a804b135975d55d98180741e7d452cef",
        "filename": "qa/rpc-tests/zapwallettx.sh",
        "status": "added",
        "additions": 104,
        "deletions": 0,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08de928528b6d324708fecb6a1ff3d598cef23a3/qa/rpc-tests/zapwallettx.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08de928528b6d324708fecb6a1ff3d598cef23a3/qa/rpc-tests/zapwallettx.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zapwallettx.sh?ref=08de928528b6d324708fecb6a1ff3d598cef23a3",
        "patch": "@@ -0,0 +1,104 @@\n+#!/usr/bin/env bash\n+\n+# Test zapping a single wallet transaction\n+\n+if [ $# -lt 1 ]; then\n+        echo \"Usage: $0 path_to_binaries\"\n+        echo \"e.g. $0 ../../src\"\n+        exit 1\n+fi\n+\n+set -f\n+\n+BITCOIND=${1}/bitcoind\n+CLI=${1}/bitcoin-cli\n+\n+DIR=\"${BASH_SOURCE%/*}\"\n+SENDANDWAIT=\"${DIR}/send.sh\"\n+if [[ ! -d \"$DIR\" ]]; then DIR=\"$PWD\"; fi\n+. \"$DIR/util.sh\"\n+\n+D=$(mktemp -d test.XXXXX)\n+\n+D1=${D}/node1\n+CreateDataDir \"$D1\" port=11000 rpcport=11001\n+B1ARGS=\"-datadir=$D1\"\n+$BITCOIND $B1ARGS &\n+B1PID=$!\n+\n+D2=${D}/node2\n+CreateDataDir \"$D2\" port=11010 rpcport=11011 connect=127.0.0.1:11000\n+B2ARGS=\"-datadir=$D2\"\n+$BITCOIND $B2ARGS &\n+B2PID=$!\n+\n+D3=${D}/node3\n+CreateDataDir \"$D3\" port=11020 rpcport=11021 connect=127.0.0.1:11000\n+B3ARGS=\"-datadir=$D3\"\n+$BITCOIND $BITCOINDARGS $B3ARGS &\n+B3PID=$!\n+\n+# Wait until all three nodes are at the same block number\n+function WaitBlocks {\n+    while :\n+    do\n+        sleep 1\n+        declare -i BLOCKS1=$( GetBlocks $B1ARGS )\n+        declare -i BLOCKS2=$( GetBlocks $B2ARGS )\n+        declare -i BLOCKS3=$( GetBlocks $B3ARGS )\n+        if (( BLOCKS1 == BLOCKS2 && BLOCKS2 == BLOCKS3 ))\n+        then\n+            break\n+        fi\n+    done\n+}\n+\n+echo \"Generating test blockchain...\"\n+\n+# 1 block, 50 XBT each == 50 XBT\n+$CLI $B1ARGS setgenerate true 1\n+WaitBlocks\n+# 101 blocks, 1 mature == 50 XBT\n+$CLI $B2ARGS setgenerate true 101\n+WaitBlocks\n+\n+CheckBalance \"$B1ARGS\" 50\n+CheckBalance \"$B2ARGS\" 50\n+\n+echo \"Sending coins from B1 to B3...\"\n+for N in 1 2 3\n+do\n+    # Send N XBT from 1 to 3\n+    TXID[$N]=$(Send $B1ARGS $B3ARGS $N)\n+\n+    # Have B2 mine 10 blocks so B1 transactions are mature:\n+    $CLI $B2ARGS setgenerate true 10\n+    WaitBlocks\n+done\n+\n+# B1 should end up with 50 XBT in block rewards,\n+# minus the 6 (1, 2, 3) XBT sent to B3:\n+CheckBalance \"$B1ARGS\" \"50-1-2-3\"\n+CheckBalance \"$B3ARGS\" \"1+2+3\"\n+\n+# Zap send tx from B1 (TXID[3]), balance now be 47 XBT\n+echo \"Zapping last tx...\"\n+$CLI \"$B1ARGS\" zapwallettx ${TXID[3]}\n+CheckBalance \"$B1ARGS\" \"50-1-2\"\n+\n+# Zap send tx from B1 (TXID[1]), balance should again be 50 XBT\n+# as TDID[2] used an output from TXID[1] and hence also removed\n+echo \"Zapping first tx...\"\n+$CLI \"$B1ARGS\" zapwallettx ${TXID[1]}\n+CheckBalance \"$B1ARGS\" \"50\"\n+\n+$CLI $B3ARGS stop > /dev/null 2>&1\n+wait $B3PID\n+$CLI $B2ARGS stop > /dev/null 2>&1\n+wait $B2PID\n+$CLI $B1ARGS stop > /dev/null 2>&1\n+wait $B1PID\n+\n+echo \"Tests successful, cleaning up\"\n+rm -rf $D\n+exit 0"
      },
      {
        "sha": "18b114989d7fd9333ef2fc58c1e1496d807481f9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 2,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08de928528b6d324708fecb6a1ff3d598cef23a3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08de928528b6d324708fecb6a1ff3d598cef23a3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=08de928528b6d324708fecb6a1ff3d598cef23a3",
        "patch": "@@ -270,6 +270,7 @@ std::string HelpMessage(HelpMessageMode hmm)\n     strUsage += \"  -paytxfee=<amt>        \" + _(\"Fee per kB to add to transactions you send\") + \"\\n\";\n     strUsage += \"  -rescan                \" + _(\"Rescan the block chain for missing wallet transactions\") + \"\\n\";\n     strUsage += \"  -zapwallettxes         \" + _(\"Clear list of wallet transactions (diagnostic tool; implies -rescan)\") + \"\\n\";\n+    strUsage += \"  -zapwallettx=<txid>    \" + _(\"Clear single wallet transaction <txid> (diagnostic tool; implies -rescan)\") + \"\\n\";\n     strUsage += \"  -salvagewallet         \" + _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \"\\n\";\n     strUsage += \"  -upgradewallet         \" + _(\"Upgrade wallet to latest format\") + \"\\n\";\n     strUsage += \"  -wallet=<file>         \" + _(\"Specify wallet file (within data directory)\") + \"\\n\";\n@@ -458,12 +459,18 @@ bool AppInit2(boost::thread_group& threadGroup)\n             LogPrintf(\"AppInit2 : parameter interaction: -salvagewallet=1 -> setting -rescan=1\\n\");\n     }\n \n-    // -zapwallettx implies a rescan\n+    // -zapwallettxes implies a rescan\n     if (GetBoolArg(\"-zapwallettxes\", false)) {\n         if (SoftSetBoolArg(\"-rescan\", true))\n             LogPrintf(\"AppInit2 : parameter interaction: -zapwallettxes=1 -> setting -rescan=1\\n\");\n     }\n \n+    // -zapwallettx implies a rescan\n+    if (mapArgs.count(\"-zapwallettx\")) {\n+        if (SoftSetBoolArg(\"-rescan\", true))\n+            LogPrintf(\"AppInit2 : parameter interaction: -zapwallettx -> setting -rescan=1\\n\");\n+    }\n+\n     // Make sure enough file descriptors are available\n     int nBind = std::max((int)mapArgs.count(\"-bind\"), 1);\n     nMaxConnections = GetArg(\"-maxconnections\", 125);\n@@ -916,7 +923,29 @@ bool AppInit2(boost::thread_group& threadGroup)\n             uiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n \n             pwalletMain = new CWallet(strWalletFile);\n-            DBErrors nZapWalletRet = pwalletMain->ZapWalletTx();\n+            DBErrors nZapWalletRet = pwalletMain->ZapWalletTxes();\n+            if (nZapWalletRet != DB_LOAD_OK) {\n+                uiInterface.InitMessage(_(\"Error loading wallet.dat: Wallet corrupted\"));\n+                return false;\n+            }\n+\n+            delete pwalletMain;\n+            pwalletMain = NULL;\n+        }\n+        if (mapArgs.count(\"-zapwallettx\")) {\n+            uiInterface.InitMessage(_(\"Zapping transaction from wallet...\"));\n+\n+            // txid\n+            uint256 hash;\n+            hash.SetHex(GetArg(\"-zapwallettx\", \"\"));\n+\n+            pwalletMain = new CWallet(strWalletFile);\n+            if (!pwalletMain->mapWallet.count(hash)) {\n+                uiInterface.InitMessage(_(\"Invalid or non-wallet transaction id\"));\n+                return false;\n+            }\n+            const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+            DBErrors nZapWalletRet = pwalletMain->ZapWalletTx(wtx);\n             if (nZapWalletRet != DB_LOAD_OK) {\n                 uiInterface.InitMessage(_(\"Error loading wallet.dat: Wallet corrupted\"));\n                 return false;"
      },
      {
        "sha": "de4e4ffa6eeadd331a34c7cad00f5f35d6098e86",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08de928528b6d324708fecb6a1ff3d598cef23a3/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08de928528b6d324708fecb6a1ff3d598cef23a3/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=08de928528b6d324708fecb6a1ff3d598cef23a3",
        "patch": "@@ -296,6 +296,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"listlockunspent\",        &listlockunspent,        false,     false,      true },\n     { \"settxfee\",               &settxfee,               false,     false,      true },\n     { \"getwalletinfo\",          &getwalletinfo,          true,      false,      true },\n+    { \"zapwallettx\",            &zapwallettx,            false,     false,      true },\n \n     /* Wallet-enabled mining */\n     { \"getgenerate\",            &getgenerate,            true,      false,      false },"
      },
      {
        "sha": "9e8ad6dbe25f986a44d1921b3f378168cb7d4d4b",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08de928528b6d324708fecb6a1ff3d598cef23a3/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08de928528b6d324708fecb6a1ff3d598cef23a3/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=08de928528b6d324708fecb6a1ff3d598cef23a3",
        "patch": "@@ -164,6 +164,7 @@ extern json_spirit::Value encryptwallet(const json_spirit::Array& params, bool f\n extern json_spirit::Value validateaddress(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getinfo(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getwalletinfo(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value zapwallettx(const json_spirit::Array& params, bool fHelp);\n \n extern json_spirit::Value getrawtransaction(const json_spirit::Array& params, bool fHelp); // in rcprawtransaction.cpp\n extern json_spirit::Value listunspent(const json_spirit::Array& params, bool fHelp);"
      },
      {
        "sha": "46902c9f0ed3b19112bba887a4ebde29b5d231ee",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08de928528b6d324708fecb6a1ff3d598cef23a3/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08de928528b6d324708fecb6a1ff3d598cef23a3/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=08de928528b6d324708fecb6a1ff3d598cef23a3",
        "patch": "@@ -727,6 +727,32 @@ Value movecmd(const Array& params, bool fHelp)\n     return true;\n }\n \n+Value zapwallettx(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 1)\n+        throw runtime_error(\n+            \"zapwallettx txid\\n\"\n+            \"\\nRemove a wallet transaction.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid           (string) The transaction id.\\n\"\n+            \"\\nResult\\n\"\n+            \"true|false        (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"zapwallettx\", \"00e3c3ec61422aa4e597beceac7f06c771a8024dee38c5ffa413336341befa72\")\n+            + HelpExampleRpc(\"zapwallettx\", \"00e3c3ec61422aa4e597beceac7f06c771a8024dee38c5ffa413336341befa72\")\n+        );\n+\n+    // txid\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    return pwalletMain->ZapWalletTx(wtx) == DB_LOAD_OK;\n+}\n+\n \n Value sendfrom(const Array& params, bool fHelp)\n {"
      },
      {
        "sha": "3d0406c0a4ffdbfa251b52c2bd96d0a58a370fec",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 2,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08de928528b6d324708fecb6a1ff3d598cef23a3/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08de928528b6d324708fecb6a1ff3d598cef23a3/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=08de928528b6d324708fecb6a1ff3d598cef23a3",
        "patch": "@@ -1491,11 +1491,11 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n }\n \n \n-DBErrors CWallet::ZapWalletTx()\n+DBErrors CWallet::ZapWalletTxes()\n {\n     if (!fFileBacked)\n         return DB_LOAD_OK;\n-    DBErrors nZapWalletTxRet = CWalletDB(strWalletFile,\"cr+\").ZapWalletTx(this);\n+    DBErrors nZapWalletTxRet = CWalletDB(strWalletFile,\"cr+\").ZapWalletTxes(this);\n     if (nZapWalletTxRet == DB_NEED_REWRITE)\n     {\n         if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n@@ -1515,6 +1515,39 @@ DBErrors CWallet::ZapWalletTx()\n }\n \n \n+DBErrors CWallet::ZapWalletTx(const CWalletTx& wtx)\n+{\n+    if (!fFileBacked)\n+        return DB_LOAD_OK;\n+    LOCK(cs_wallet);\n+    vector<CWalletTx> vErasedTxes;\n+    DBErrors nZapWalletTxRet = CWalletDB(strWalletFile,\"cr+\").ZapWalletTx(this, wtx, vErasedTxes);\n+    if (nZapWalletTxRet == DB_NEED_REWRITE)\n+    {\n+        if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n+        {\n+            setKeyPool.clear();\n+            // Note: can't top-up keypool here, because wallet is locked.\n+            // User will be prompted to unlock wallet the next operation\n+            // the requires a new key.\n+        }\n+    }\n+\n+    {\n+        // remove zapped CWalletDB txes from mapWallet also\n+        BOOST_FOREACH(const CWalletTx& tx, vErasedTxes)\n+            mapWallet.erase(tx.GetHash());\n+        // clear tx cache variables\n+        MarkDirty();\n+    }\n+\n+    if (nZapWalletTxRet != DB_LOAD_OK)\n+        return nZapWalletTxRet;\n+\n+    return DB_LOAD_OK;\n+}\n+\n+\n bool CWallet::SetAddressBook(const CTxDestination& address, const string& strName, const string& strPurpose)\n {\n     bool fUpdated = false;"
      },
      {
        "sha": "111f9329757e2533acdfb96ac8267c7f093325e6",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08de928528b6d324708fecb6a1ff3d598cef23a3/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08de928528b6d324708fecb6a1ff3d598cef23a3/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=08de928528b6d324708fecb6a1ff3d598cef23a3",
        "patch": "@@ -337,7 +337,8 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     void SetBestChain(const CBlockLocator& loc);\n \n     DBErrors LoadWallet(bool& fFirstRunRet);\n-    DBErrors ZapWalletTx();\n+    DBErrors ZapWalletTxes();\n+    DBErrors ZapWalletTx(const CWalletTx& wtx);\n \n     bool SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& purpose);\n "
      },
      {
        "sha": "eb33054d776b80ebb4b27a1d00745d47f70317b9",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 3,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08de928528b6d324708fecb6a1ff3d598cef23a3/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08de928528b6d324708fecb6a1ff3d598cef23a3/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=08de928528b6d324708fecb6a1ff3d598cef23a3",
        "patch": "@@ -682,7 +682,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n     return result;\n }\n \n-DBErrors CWalletDB::FindWalletTx(CWallet* pwallet, vector<uint256>& vTxHash)\n+DBErrors CWalletDB::FindWalletTxes(CWallet* pwallet, vector<uint256>& vTxHash)\n {\n     pwallet->vchDefaultKey = CPubKey();\n     CWalletScanState wss;\n@@ -745,11 +745,11 @@ DBErrors CWalletDB::FindWalletTx(CWallet* pwallet, vector<uint256>& vTxHash)\n     return result;\n }\n \n-DBErrors CWalletDB::ZapWalletTx(CWallet* pwallet)\n+DBErrors CWalletDB::ZapWalletTxes(CWallet* pwallet)\n {\n     // build list of wallet TXs\n     vector<uint256> vTxHash;\n-    DBErrors err = FindWalletTx(pwallet, vTxHash);\n+    DBErrors err = FindWalletTxes(pwallet, vTxHash);\n     if (err != DB_LOAD_OK)\n         return err;\n \n@@ -762,6 +762,40 @@ DBErrors CWalletDB::ZapWalletTx(CWallet* pwallet)\n     return DB_LOAD_OK;\n }\n \n+DBErrors CWalletDB::ZapWalletTx(CWallet* pwallet, const CWalletTx& wtx, vector<CWalletTx>& vErasedTxes)\n+{\n+    LogPrintf(\"ZapWalletTx %s\\n\", wtx.GetHash().GetHex());\n+\n+    // erase child TX's\n+    for (unsigned int nVoutIndex = 0; nVoutIndex < wtx.vout.size(); nVoutIndex++)\n+    {\n+        BOOST_FOREACH(PAIRTYPE(uint256, CWalletTx) walletEntry, pwallet->mapWallet)\n+        {\n+            const CWalletTx& wtxPotentialChild = walletEntry.second;\n+            BOOST_FOREACH(const CTxIn& txin, wtxPotentialChild.vin)\n+            {\n+                if (txin.prevout.hash == wtx.GetHash() && txin.prevout.n == nVoutIndex)\n+                {\n+                    LogPrintf(\"ZapWalletTx found child tx %s\\n\", wtxPotentialChild.GetHash().GetHex());\n+                    //TODO: recursion could be a problem if it gets too deep\n+                    DBErrors ret = ZapWalletTx(pwallet, wtxPotentialChild, vErasedTxes);\n+                    if (ret != DB_LOAD_OK)\n+                        return ret;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+    \n+    // erase wallet TX\n+    if (!EraseTx(wtx.GetHash()))\n+        return DB_CORRUPT;\n+    // add to list of erased TX to be cleaned up from pwallet->mapWallet\n+    vErasedTxes.push_back(wtx);\n+\n+    return DB_LOAD_OK;\n+}\n+\n void ThreadFlushWalletDB(const string& strFile)\n {\n     // Make this thread recognisable as the wallet flushing thread"
      },
      {
        "sha": "32a1650d884faf98d7f14b3b4d7dcea7889ca53b",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08de928528b6d324708fecb6a1ff3d598cef23a3/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08de928528b6d324708fecb6a1ff3d598cef23a3/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=08de928528b6d324708fecb6a1ff3d598cef23a3",
        "patch": "@@ -122,8 +122,9 @@ class CWalletDB : public CDB\n \n     DBErrors ReorderTransactions(CWallet*);\n     DBErrors LoadWallet(CWallet* pwallet);\n-    DBErrors FindWalletTx(CWallet* pwallet, std::vector<uint256>& vTxHash);\n-    DBErrors ZapWalletTx(CWallet* pwallet);\n+    DBErrors FindWalletTxes(CWallet* pwallet, std::vector<uint256>& vTxHash);\n+    DBErrors ZapWalletTxes(CWallet* pwallet);\n+    DBErrors ZapWalletTx(CWallet* pwallet, const CWalletTx& wtx, std::vector<CWalletTx>& vErasedTxes);\n     static bool Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys);\n     static bool Recover(CDBEnv& dbenv, std::string filename);\n };"
      }
    ]
  },
  {
    "sha": "c0fd840cec33c9930c786afb22e1b134b9f51131",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMGZkODQwY2VjMzNjOTkzMGM3ODZhZmIyMmUxYjEzNGI5ZjUxMTMx",
    "commit": {
      "author": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2014-03-11T08:44:16Z"
      },
      "committer": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2014-03-11T08:44:16Z"
      },
      "message": "remove zapwallettx command line",
      "tree": {
        "sha": "cf01234dc67c746ee3eaf43c5544daf265cb676a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf01234dc67c746ee3eaf43c5544daf265cb676a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0fd840cec33c9930c786afb22e1b134b9f51131",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0fd840cec33c9930c786afb22e1b134b9f51131",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0fd840cec33c9930c786afb22e1b134b9f51131",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0fd840cec33c9930c786afb22e1b134b9f51131/comments",
    "author": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "08de928528b6d324708fecb6a1ff3d598cef23a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08de928528b6d324708fecb6a1ff3d598cef23a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08de928528b6d324708fecb6a1ff3d598cef23a3"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 0,
      "deletions": 29
    },
    "files": [
      {
        "sha": "6bc9fcbd026e072c09b156e9cce6edc982a876b0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 29,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0fd840cec33c9930c786afb22e1b134b9f51131/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0fd840cec33c9930c786afb22e1b134b9f51131/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c0fd840cec33c9930c786afb22e1b134b9f51131",
        "patch": "@@ -270,7 +270,6 @@ std::string HelpMessage(HelpMessageMode hmm)\n     strUsage += \"  -paytxfee=<amt>        \" + _(\"Fee per kB to add to transactions you send\") + \"\\n\";\n     strUsage += \"  -rescan                \" + _(\"Rescan the block chain for missing wallet transactions\") + \"\\n\";\n     strUsage += \"  -zapwallettxes         \" + _(\"Clear list of wallet transactions (diagnostic tool; implies -rescan)\") + \"\\n\";\n-    strUsage += \"  -zapwallettx=<txid>    \" + _(\"Clear single wallet transaction <txid> (diagnostic tool; implies -rescan)\") + \"\\n\";\n     strUsage += \"  -salvagewallet         \" + _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \"\\n\";\n     strUsage += \"  -upgradewallet         \" + _(\"Upgrade wallet to latest format\") + \"\\n\";\n     strUsage += \"  -wallet=<file>         \" + _(\"Specify wallet file (within data directory)\") + \"\\n\";\n@@ -465,12 +464,6 @@ bool AppInit2(boost::thread_group& threadGroup)\n             LogPrintf(\"AppInit2 : parameter interaction: -zapwallettxes=1 -> setting -rescan=1\\n\");\n     }\n \n-    // -zapwallettx implies a rescan\n-    if (mapArgs.count(\"-zapwallettx\")) {\n-        if (SoftSetBoolArg(\"-rescan\", true))\n-            LogPrintf(\"AppInit2 : parameter interaction: -zapwallettx -> setting -rescan=1\\n\");\n-    }\n-\n     // Make sure enough file descriptors are available\n     int nBind = std::max((int)mapArgs.count(\"-bind\"), 1);\n     nMaxConnections = GetArg(\"-maxconnections\", 125);\n@@ -932,28 +925,6 @@ bool AppInit2(boost::thread_group& threadGroup)\n             delete pwalletMain;\n             pwalletMain = NULL;\n         }\n-        if (mapArgs.count(\"-zapwallettx\")) {\n-            uiInterface.InitMessage(_(\"Zapping transaction from wallet...\"));\n-\n-            // txid\n-            uint256 hash;\n-            hash.SetHex(GetArg(\"-zapwallettx\", \"\"));\n-\n-            pwalletMain = new CWallet(strWalletFile);\n-            if (!pwalletMain->mapWallet.count(hash)) {\n-                uiInterface.InitMessage(_(\"Invalid or non-wallet transaction id\"));\n-                return false;\n-            }\n-            const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n-            DBErrors nZapWalletRet = pwalletMain->ZapWalletTx(wtx);\n-            if (nZapWalletRet != DB_LOAD_OK) {\n-                uiInterface.InitMessage(_(\"Error loading wallet.dat: Wallet corrupted\"));\n-                return false;\n-            }\n-\n-            delete pwalletMain;\n-            pwalletMain = NULL;\n-        }\n \n         uiInterface.InitMessage(_(\"Loading wallet...\"));\n "
      }
    ]
  },
  {
    "sha": "e0d31dd67b29ee6f304386d465cde855dc134234",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGQzMWRkNjdiMjllZTZmMzA0Mzg2ZDQ2NWNkZTg1NWRjMTM0MjM0",
    "commit": {
      "author": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2014-03-11T10:05:35Z"
      },
      "committer": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2014-03-11T10:05:35Z"
      },
      "message": "add rescan (default=true) parameter to zapwallettx rpc",
      "tree": {
        "sha": "8c6ca2ba8e60b6989db428e7513d7e4b8f65b5eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c6ca2ba8e60b6989db428e7513d7e4b8f65b5eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0d31dd67b29ee6f304386d465cde855dc134234",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0d31dd67b29ee6f304386d465cde855dc134234",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0d31dd67b29ee6f304386d465cde855dc134234",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0d31dd67b29ee6f304386d465cde855dc134234/comments",
    "author": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0fd840cec33c9930c786afb22e1b134b9f51131",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0fd840cec33c9930c786afb22e1b134b9f51131",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0fd840cec33c9930c786afb22e1b134b9f51131"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 28,
      "deletions": 6
    },
    "files": [
      {
        "sha": "8e74c9d7d69488dc2b9dd805721f9f451ff026e6",
        "filename": "qa/rpc-tests/zapwallettx.sh",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0d31dd67b29ee6f304386d465cde855dc134234/qa/rpc-tests/zapwallettx.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0d31dd67b29ee6f304386d465cde855dc134234/qa/rpc-tests/zapwallettx.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zapwallettx.sh?ref=e0d31dd67b29ee6f304386d465cde855dc134234",
        "patch": "@@ -83,13 +83,19 @@ CheckBalance \"$B3ARGS\" \"1+2+3\"\n \n # Zap send tx from B1 (TXID[3]), balance now be 47 XBT\n echo \"Zapping last tx...\"\n-$CLI \"$B1ARGS\" zapwallettx ${TXID[3]}\n+$CLI \"$B1ARGS\" zapwallettx ${TXID[3]} false\n CheckBalance \"$B1ARGS\" \"50-1-2\"\n \n+# Zap send tx from B1 (TXID[2]) with rescan, balance should again be 44 XBT\n+# as missing transactions are rescanned from blockchain\n+echo \"Zapping second tx...\"\n+$CLI \"$B1ARGS\" zapwallettx ${TXID[2]} true\n+CheckBalance \"$B1ARGS\" \"50-1-2-3\"\n+\n # Zap send tx from B1 (TXID[1]), balance should again be 50 XBT\n-# as TDID[2] used an output from TXID[1] and hence also removed\n+# as TXID[2 & 3] build on an output from TXID[1] and hence are also removed\n echo \"Zapping first tx...\"\n-$CLI \"$B1ARGS\" zapwallettx ${TXID[1]}\n+$CLI \"$B1ARGS\" zapwallettx ${TXID[1]} false\n CheckBalance \"$B1ARGS\" \"50\"\n \n $CLI $B3ARGS stop > /dev/null 2>&1"
      },
      {
        "sha": "22bdc6eef480e7dd4d0c03df76b70aca88d4288f",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0d31dd67b29ee6f304386d465cde855dc134234/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0d31dd67b29ee6f304386d465cde855dc134234/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=e0d31dd67b29ee6f304386d465cde855dc134234",
        "patch": "@@ -140,6 +140,7 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"listreceivedbyaccount\"  && n > 0) ConvertTo<boost::int64_t>(params[0]);\n     if (strMethod == \"listreceivedbyaccount\"  && n > 1) ConvertTo<bool>(params[1]);\n     if (strMethod == \"getbalance\"             && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"zapwallettx\"            && n > 1) ConvertTo<bool>(params[1]);\n     if (strMethod == \"getblockhash\"           && n > 0) ConvertTo<boost::int64_t>(params[0]);\n     if (strMethod == \"move\"                   && n > 2) ConvertTo<double>(params[2]);\n     if (strMethod == \"move\"                   && n > 3) ConvertTo<boost::int64_t>(params[3]);"
      },
      {
        "sha": "afcc2f154beece288cf53cd641fab3cf19216b22",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 3,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0d31dd67b29ee6f304386d465cde855dc134234/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0d31dd67b29ee6f304386d465cde855dc134234/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=e0d31dd67b29ee6f304386d465cde855dc134234",
        "patch": "@@ -729,12 +729,13 @@ Value movecmd(const Array& params, bool fHelp)\n \n Value zapwallettx(const Array& params, bool fHelp)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 1)\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n-            \"zapwallettx txid\\n\"\n+            \"zapwallettx txid [rescan=true]\\n\"\n             \"\\nRemove a wallet transaction.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. txid           (string) The transaction id.\\n\"\n+            \"2. rescan         (boolean) If true rescan the blockchain for missing transactions.\\n\"\n             \"\\nResult\\n\"\n             \"true|false        (boolean) Returns true if successful\\n\"\n             \"\\nExamples:\\n\"\n@@ -746,11 +747,25 @@ Value zapwallettx(const Array& params, bool fHelp)\n     uint256 hash;\n     hash.SetHex(params[0].get_str());\n \n+    // Whether to perform rescan after tx removal\n+    bool fRescan = true;\n+    if (params.size() > 1)\n+        fRescan = params[1].get_bool();\n+\n     if (!pwalletMain->mapWallet.count(hash))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n     const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n \n-    return pwalletMain->ZapWalletTx(wtx) == DB_LOAD_OK;\n+    if (pwalletMain->ZapWalletTx(wtx) != DB_LOAD_OK)\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error zapping tx from wallet\");\n+\n+    if (fRescan)\n+    {\n+        pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n+        pwalletMain->ReacceptWalletTransactions();\n+    }\n+\n+    return true;\n }\n \n "
      }
    ]
  },
  {
    "sha": "e50b57541cf8fdce7671e065886d8458a78df6eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTBiNTc1NDFjZjhmZGNlNzY3MWUwNjU4ODZkODQ1OGE3OGRmNmVi",
    "commit": {
      "author": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2014-03-12T09:18:39Z"
      },
      "committer": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2014-03-12T09:18:39Z"
      },
      "message": "use queue to avoid recursion",
      "tree": {
        "sha": "d87d99b852f59d55861ab6325fb0a4ece7bf7c4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d87d99b852f59d55861ab6325fb0a4ece7bf7c4e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e50b57541cf8fdce7671e065886d8458a78df6eb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e50b57541cf8fdce7671e065886d8458a78df6eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e50b57541cf8fdce7671e065886d8458a78df6eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e50b57541cf8fdce7671e065886d8458a78df6eb/comments",
    "author": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0d31dd67b29ee6f304386d465cde855dc134234",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0d31dd67b29ee6f304386d465cde855dc134234",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0d31dd67b29ee6f304386d465cde855dc134234"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 32,
      "deletions": 25
    },
    "files": [
      {
        "sha": "89fa44b68ab36d732c2a78280cc999c6ffb7e247",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e50b57541cf8fdce7671e065886d8458a78df6eb/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e50b57541cf8fdce7671e065886d8458a78df6eb/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=e50b57541cf8fdce7671e065886d8458a78df6eb",
        "patch": "@@ -1533,13 +1533,11 @@ DBErrors CWallet::ZapWalletTx(const CWalletTx& wtx)\n         }\n     }\n \n-    {\n-        // remove zapped CWalletDB txes from mapWallet also\n-        BOOST_FOREACH(const CWalletTx& tx, vErasedTxes)\n-            mapWallet.erase(tx.GetHash());\n-        // clear tx cache variables\n-        MarkDirty();\n-    }\n+    // remove zapped CWalletDB txes from mapWallet also\n+    BOOST_FOREACH(const CWalletTx& tx, vErasedTxes)\n+        mapWallet.erase(tx.GetHash());\n+    // clear tx cache variables\n+    MarkDirty();\n \n     if (nZapWalletTxRet != DB_LOAD_OK)\n         return nZapWalletTxRet;"
      },
      {
        "sha": "ce20112115f8e7d4c3557a0dac73078dae82d17c",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 18,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e50b57541cf8fdce7671e065886d8458a78df6eb/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e50b57541cf8fdce7671e065886d8458a78df6eb/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=e50b57541cf8fdce7671e065886d8458a78df6eb",
        "patch": "@@ -13,6 +13,7 @@\n \n #include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>\n+#include <queue>\n \n using namespace std;\n using namespace boost;\n@@ -766,33 +767,41 @@ DBErrors CWalletDB::ZapWalletTx(CWallet* pwallet, const CWalletTx& wtx, vector<C\n {\n     LogPrintf(\"ZapWalletTx %s\\n\", wtx.GetHash().GetHex());\n \n-    // erase child TX's\n-    for (unsigned int nVoutIndex = 0; nVoutIndex < wtx.vout.size(); nVoutIndex++)\n+    // insert initial tx into queue\n+    queue<CWalletTx> txesToErase;\n+    txesToErase.push(wtx);\n+\n+    while (txesToErase.size() > 0)\n     {\n-        BOOST_FOREACH(PAIRTYPE(uint256, CWalletTx) walletEntry, pwallet->mapWallet)\n+        // get first tx from queue\n+        CWalletTx wtx = txesToErase.front();\n+        txesToErase.pop();\n+\n+        // add child tx's to queue\n+        for (unsigned int nVoutIndex = 0; nVoutIndex < wtx.vout.size(); nVoutIndex++)\n         {\n-            const CWalletTx& wtxPotentialChild = walletEntry.second;\n-            BOOST_FOREACH(const CTxIn& txin, wtxPotentialChild.vin)\n+            BOOST_FOREACH(PAIRTYPE(uint256, CWalletTx) walletEntry, pwallet->mapWallet)\n             {\n-                if (txin.prevout.hash == wtx.GetHash() && txin.prevout.n == nVoutIndex)\n+                const CWalletTx& wtxPotentialChild = walletEntry.second;\n+                BOOST_FOREACH(const CTxIn& txin, wtxPotentialChild.vin)\n                 {\n-                    LogPrintf(\"ZapWalletTx found child tx %s\\n\", wtxPotentialChild.GetHash().GetHex());\n-                    //TODO: recursion could be a problem if it gets too deep\n-                    DBErrors ret = ZapWalletTx(pwallet, wtxPotentialChild, vErasedTxes);\n-                    if (ret != DB_LOAD_OK)\n-                        return ret;\n-                    break;\n+                    if (txin.prevout.hash == wtx.GetHash() && txin.prevout.n == nVoutIndex)\n+                    {\n+                        LogPrintf(\"ZapWalletTx found child tx %s\\n\", wtxPotentialChild.GetHash().GetHex());\n+                        txesToErase.push(wtxPotentialChild);\n+                        break;\n+                    }\n                 }\n             }\n         }\n+\n+        // erase current tx\n+        if (!EraseTx(wtx.GetHash()))\n+            return DB_CORRUPT;\n+        // add to list of erased tx to be cleaned up from pwallet->mapWallet\n+        vErasedTxes.push_back(wtx);\n     }\n     \n-    // erase wallet TX\n-    if (!EraseTx(wtx.GetHash()))\n-        return DB_CORRUPT;\n-    // add to list of erased TX to be cleaned up from pwallet->mapWallet\n-    vErasedTxes.push_back(wtx);\n-\n     return DB_LOAD_OK;\n }\n "
      }
    ]
  }
]