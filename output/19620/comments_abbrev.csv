sdaftuar,2020-07-29 15:46:40,"I need to test this still myself, but I wanted to open this as a potential alternative to feeling the need to backport #18044 (as @jnewbery has proposed in #19606) in order to protect older software from wasting bandwidth in the event of taproot activation in the future.\n\nI have a branch where I backported this patch to 0.20 here: https://github.com/sdaftuar/bitcoin/tree/2020-07-reject-unknown",https://github.com/bitcoin/bitcoin/pull/19620#issuecomment-665743887,665743887,
JeremyRubin,2020-07-29 17:44:03,"Concept ACK and lite code review ACK.\n\nIt seems to me that this change won't help that much in the future upgrade case because even though this fixes witness versions things like leaf versions in taproot (which may be upgraded more often) will require a witness dependent check, and can't be txid reject filtered, unless we made it a policy that transactions spending taproots that mix and match ",https://github.com/bitcoin/bitcoin/pull/19620#issuecomment-665805640,665805640,
sdaftuar,2020-07-29 19:48:33,"> It seems to me that this change won't help that much in the future upgrade case [...]\n\n@JeremyRubin I agree, this is a bandaid to help this particular scenario.  Going forward, wtxid-relay + a change to the p2p protocol for announcing/requesting unconfirmed ancestors of a transaction by wtxid seems like the right way to solve this type of problem more generally.",https://github.com/bitcoin/bitcoin/pull/19620#issuecomment-665867016,665867016,
sipa,2020-07-29 19:55:03,"@sdaftuar @naumenkogs Random idea about this: post-Erlay it may make sense to have a message ""i do not have have dependencies of txid `txid`"", at which point both sides add all known direct and indirect unconfirmed parents of txid they know of to their to-be-broadcast set; if erlay is in effect, the overlap will get cancelled out automatically.",https://github.com/bitcoin/bitcoin/pull/19620#issuecomment-665874178,665874178,
sdaftuar,2020-07-30 21:33:44,Updated some comments and also used this same logic when processing orphans. ,https://github.com/bitcoin/bitcoin/pull/19620#issuecomment-666717871,666717871,
DrahtBot,2020-07-31 04:06:21,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19498 (Tidy up ProcessOrphanTx by jnewbery)\n\nIf you consider this pull request important, please also help to review th",https://github.com/bitcoin/bitcoin/pull/19620#issuecomment-666904390,666904390,
sdaftuar,2020-07-31 18:37:48,Happy to include a functional test if anyone is able to put one together for this.,https://github.com/bitcoin/bitcoin/pull/19620#issuecomment-667292616,667292616,
JeremyRubin,2020-07-31 18:47:01,@instagibbs might?,https://github.com/bitcoin/bitcoin/pull/19620#issuecomment-667296340,667296340,
instagibbs,2020-07-31 18:51:36,I think this deserves a test and shouldn't be too bad. I'll take a crack at it this weekend.,https://github.com/bitcoin/bitcoin/pull/19620#issuecomment-667298234,667298234,
sipa,2020-07-31 20:30:36,Code review ACK acdd7f3dda6d6c89e6f91c781bf941bfc66d8ba3. A test would be nice.,https://github.com/bitcoin/bitcoin/pull/19620#issuecomment-667343723,667343723,
instagibbs,2020-07-31 21:17:29,"Yeah might be worth noting that's what it's for. Took me a bit of work.\n\nOn Fri, Jul 31, 2020, 5:16 PM Luke Dashjr <notifications@github.com> wrote:\n\n> *@luke-jr* commented on this pull request.\n> ------------------------------\n>\n> In src/net_processing.cpp\n> <https://github.com/bitcoin/bitcoin/pull/19620#discussion_r463848628>:\n>\n> > @@ -2053,6 +2060,17 @@ void static ProcessOrphanTx(CC",https://github.com/bitcoin/bitcoin/pull/19620#issuecomment-667360468,667360468,
instagibbs,2020-08-03 18:40:41,"Turns out there's already a nice natural spot for the test, feel free to snipe: https://github.com/instagibbs/bitcoin/commit/57f782d29e1a2d2f315bf99762e0aa6ce4e0f1c0",https://github.com/bitcoin/bitcoin/pull/19620#issuecomment-668180158,668180158,
instagibbs,2020-08-03 18:41:37,ACK https://github.com/bitcoin/bitcoin/pull/19620/commits/ada658f7d668b9bb721383af991e0e8bec476d36,https://github.com/bitcoin/bitcoin/pull/19620#issuecomment-668180600,668180600,
sdaftuar,2020-08-03 19:07:11,Thanks @instagibbs!  I added your test change here.,https://github.com/bitcoin/bitcoin/pull/19620#issuecomment-668192153,668192153,
sdaftuar,2020-08-04 17:39:07,Updated with a comment to address @ariard's feedback and tried to fix the test by bumping the timeout to 5 seconds.,https://github.com/bitcoin/bitcoin/pull/19620#issuecomment-668731977,668731977,
naumenkogs,2020-08-05 07:00:21,utACK 9f88ded82b2898ca63d44c08072f1ba52f0e18d7,https://github.com/bitcoin/bitcoin/pull/19620#issuecomment-669018816,669018816,
sdaftuar,2020-08-05 20:01:28,@jonatack Thanks for taking a look -- if I end up re-pushing I'll address the nits.,https://github.com/bitcoin/bitcoin/pull/19620#issuecomment-669467144,669467144,
ariard,2020-08-06 09:04:14,"Code Review/Tested ACK 9f88ded\n\nThanks for the comment on duplicative checks under some flags combination, I agree that alternatives aren't worthy the burden review.",https://github.com/bitcoin/bitcoin/pull/19620#issuecomment-669807357,669807357,
jnewbery,2020-08-06 11:04:34,Code review ACK 9f88ded82b2898ca63d44c08072f1ba52f0e18d7,https://github.com/bitcoin/bitcoin/pull/19620#issuecomment-669862121,669862121,
ajtowns,2020-08-06 18:31:37,ACK 9f88ded82b2898ca63d44c08072f1ba52f0e18d7 - code review,https://github.com/bitcoin/bitcoin/pull/19620#issuecomment-670102686,670102686,
jnewbery,2020-07-29 16:33:28,"Strictly speaking, do we want to move this check above any other check that could return TX_NOT_STANDARD, so transactions with non-standard inputs are guaranteed to be put in the recentrejects filter? I don't think it matters, since upgraded peers won't relay transactions that fail other standardness checks, unless we loosen those checks for some other reason.",https://github.com/bitcoin/bitcoin/pull/19620#discussion_r462433102,462433102,src/validation.cpp
sdaftuar,2020-07-29 16:50:06,"Yeah I agree.  It doesn't seem worth the effort to figure out how to make it so that a tx that would fail in `AreInputsStandard()` will always have its txid go into the rejects filter -- there are a lot of checks that happen before that (including checks that don't depend on looking up the inputs first), which we'd have to move around somehow and complicate the logic.  But, if this proves to be in",https://github.com/bitcoin/bitcoin/pull/19620#discussion_r462442871,462442871,src/validation.cpp
sipa,2020-07-30 21:38:56,"Would it make sense to call this TX_NOWIT_NON_STANDARD instead or so, so that perhaps later it could be extended to cover other forms of nonstandardness that we know are not due to witness data?",https://github.com/bitcoin/bitcoin/pull/19620#discussion_r463286444,463286444,src/consensus/validation.h
sdaftuar,2020-07-30 21:43:55,"Well I didn't expect that we'd ever go to the trouble of even doing this step (wtxid-relay was always the right solution, rather than trying to scatter detection of txid-is-definitely-bad failures through transaction validation), but if you think it's plausible that we would repeat this type of thing in the future, then I agree this would make sense.\n\nWe could also just as easily change this e",https://github.com/bitcoin/bitcoin/pull/19620#discussion_r463288772,463288772,src/consensus/validation.h
jnewbery,2020-07-31 09:39:16,Should be 'via txid',https://github.com/bitcoin/bitcoin/pull/19620#discussion_r463510698,463510698,src/net_processing.cpp
sipa,2020-07-31 17:44:11,"Right, of course. The name can be changed later if it becomes more expansive.",https://github.com/bitcoin/bitcoin/pull/19620#discussion_r463744988,463744988,src/consensus/validation.h
sdaftuar,2020-07-31 18:31:58,"Thanks, fixed.",https://github.com/bitcoin/bitcoin/pull/19620#discussion_r463767379,463767379,src/net_processing.cpp
instagibbs,2020-07-31 20:31:28,nit: since we're touching the line could stand to put brackets on the if statement block,https://github.com/bitcoin/bitcoin/pull/19620#discussion_r463821372,463821372,src/validation.cpp
instagibbs,2020-07-31 20:35:38,"why does `orphanTx.GetWitnessHash() != orphanTx.GetHash()` matter? \n\n",https://github.com/bitcoin/bitcoin/pull/19620#discussion_r463823234,463823234,src/net_processing.cpp
instagibbs,2020-07-31 20:42:11,"Ok, because the wtxid is inserted above already, it would be a redundant entry for a non-witness-having tx?",https://github.com/bitcoin/bitcoin/pull/19620#discussion_r463825818,463825818,src/net_processing.cpp
luke-jr,2020-07-31 21:16:06,"Yes, inserting the same hash twice degrades the filter IIRC",https://github.com/bitcoin/bitcoin/pull/19620#discussion_r463848628,463848628,src/net_processing.cpp
jnewbery,2020-07-31 21:48:56,"Not quite. Adding the same entry is a no-op on the underlying bloom filter (since the same entry hashes to the same values). It does however increment the internal `nEntriesThisGeneration` counter, which means we'll be able to add fewer entries before wiping a previous generation. It effectively lowers the actual capacity of the rolling bloom filter.",https://github.com/bitcoin/bitcoin/pull/19620#discussion_r463861464,463861464,src/net_processing.cpp
ariard,2020-08-01 00:19:22,I think new comment add a bit of ambiguity with regards to name WITNESS_UNKNOWN. Solver() only check the witnessversion to qualify a spent output type as such. Maybe WITNESSVERSION_UNKNOWN ?,https://github.com/bitcoin/bitcoin/pull/19620#discussion_r463894641,463894641,src/policy/policy.cpp
ariard,2020-08-01 00:29:30,"This new check seems to overrule the SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM one in VerifyWitnessProgram() ? AFAICT, we don't have test coverage for this standard script flag.\n\n```\n                                   AssertionError: [node 1] Expected messages ""['non-mandatory-script-verify-flag (Witness version reserved for soft-fork upgrades)']"" does not partially match log:\n  ",https://github.com/bitcoin/bitcoin/pull/19620#discussion_r463896207,463896207,src/policy/policy.cpp
sdaftuar,2020-08-03 17:43:29,Added a comment to explain this.,https://github.com/bitcoin/bitcoin/pull/19620#discussion_r464566239,464566239,src/net_processing.cpp
sdaftuar,2020-08-03 17:46:52,"Not taking this change -- I think this is clear enough, and not worth changing the 15 places in the codebase that enum appears because of its usage in this context.",https://github.com/bitcoin/bitcoin/pull/19620#discussion_r464568033,464568033,src/policy/policy.cpp
sdaftuar,2020-08-03 17:47:43,"I'm not sure I understand whether you're asking for a change, or pointing out a bug, or something else?  Could you explain if anything needs to be done here?",https://github.com/bitcoin/bitcoin/pull/19620#discussion_r464568440,464568440,src/policy/policy.cpp
ariard,2020-08-03 21:38:30,"Ah sorry, previously a segwit v1+ spend would have been rejected by this check : https://github.com/bitcoin/bitcoin/blob/34eb2362581d4d8f0bfd3baa12ba750afaf85c62/src/script/interpreter.cpp#L1552 in `VerifyWitnessProgram`\n\nNow, a segwit v+1 spend is going to be rejected by this new check in `AreInputsStandards`. As linked test confirms if you run it on both master/diff, it's duplicating a polic",https://github.com/bitcoin/bitcoin/pull/19620#discussion_r464676039,464676039,src/policy/policy.cpp
jnewbery,2020-08-04 09:24:37,"If I remove this `reason` parameter, then this test passes on master (i.e. I don't think the line below actually tests any functional change).",https://github.com/bitcoin/bitcoin/pull/19620#discussion_r464919808,464919808,test/functional/p2p_segwit.py
instagibbs,2020-08-04 11:52:24,"Good catch. Increasing the wait to 5 seconds seems to fix it, probably because of INV delay logic? 2 seconds isn't enough time for the INV to get sent out by the node. ",https://github.com/bitcoin/bitcoin/pull/19620#discussion_r464994105,464994105,test/functional/p2p_segwit.py
instagibbs,2020-08-04 11:55:00,I wonder if having a negative log line is better for each negative test case so we don't have to guess what the time required is.,https://github.com/bitcoin/bitcoin/pull/19620#discussion_r464995671,464995671,test/functional/p2p_segwit.py
jnewbery,2020-08-04 12:08:17,You could use `setmocktime` to move time forward and force the node to send out getdata requests.,https://github.com/bitcoin/bitcoin/pull/19620#discussion_r465002279,465002279,test/functional/p2p_segwit.py
instagibbs,2020-08-04 14:25:17,"Ok, I'd suggest just doing 5 seconds for now for both instances of `announce_tx_and_wait_for_getdata` `success=False` in this test. ",https://github.com/bitcoin/bitcoin/pull/19620#discussion_r465090834,465090834,test/functional/p2p_segwit.py
sdaftuar,2020-08-04 17:34:16,Changed this to 5 seconds.,https://github.com/bitcoin/bitcoin/pull/19620#discussion_r465216162,465216162,test/functional/p2p_segwit.py
sdaftuar,2020-08-04 17:38:24,"> Is this the first case where we duplicate policy rule checks ?\n\nFirst, it's not an identical check, because the `AreInputsStandard()` check is only enabled on mainnet and not testnet, via the `fRequireStandard` flag also needing to be set. Whereas the script flag is enabled on all networks. \n\nSecond, I think I'd be pretty surprised if anyone has a mental model of validation where they we",https://github.com/bitcoin/bitcoin/pull/19620#discussion_r465218480,465218480,src/policy/policy.cpp
jonatack,2020-08-05 09:13:28,"For my understanding, is there any reason to not use the existing `const orphanHash` local variable, e.g. (without the assert)\n```diff\n+                assert(orphanHash == orphanTx.GetHash());\n-                if (orphan_state.GetResult() == TxValidationResult::TX_INPUTS_NOT_STANDARD && orphanTx.GetWitnessHash() != orphanTx.GetHash()) {\n+                if (orphan_state.GetResult() == TxV",https://github.com/bitcoin/bitcoin/pull/19620#discussion_r465587019,465587019,src/net_processing.cpp
jonatack,2020-08-05 09:17:24,"Similarly, any reason to not use the existing local variables `txid` and `wtxid` that are set next to `tx`; all three are `const`. Tested running this with asserts:\n```diff\n-                if (state.GetResult() == TxValidationResult::TX_INPUTS_NOT_STANDARD && tx.GetWitnessHash() != tx.GetHash()) {\n-                    recentRejects->insert(tx.GetHash());\n+                if (state.GetResu",https://github.com/bitcoin/bitcoin/pull/19620#discussion_r465589298,465589298,src/net_processing.cpp
jnewbery,2020-08-05 09:33:25,"I don't like that this is testing transaction acceptance by relying on our transaction download logic. It means that changes to transaction download (eg #19184) may cause unrelated tests to fail, or (perhaps worse) make it such that tests are no longer actually testing what we want them to test.\n\nUnfortunately, we have no way to directly query a node's recent rejects filter, so we do need to t",https://github.com/bitcoin/bitcoin/pull/19620#discussion_r465598556,465598556,test/functional/p2p_segwit.py
sdaftuar,2020-08-05 13:39:31,"> Unfortunately, we have no way to directly query a node's recent rejects filter\n\nWould it be better to have a ~unit~ test that calls ATMP and then checks that the txid made it into the reject filter?",https://github.com/bitcoin/bitcoin/pull/19620#discussion_r465733419,465733419,test/functional/p2p_segwit.py
jnewbery,2020-08-05 13:50:56,I'm not sure if that counts as a unit test? ATMP and the reject filter are in different components.,https://github.com/bitcoin/bitcoin/pull/19620#discussion_r465741241,465741241,test/functional/p2p_segwit.py
instagibbs,2020-08-05 14:53:51,"Not sure it's ""better"", I still think the best thing would be to add log lines in case of rejection due to `recentRejects` and scan for that line in logs.",https://github.com/bitcoin/bitcoin/pull/19620#discussion_r465787127,465787127,test/functional/p2p_segwit.py
jnewbery,2020-08-05 15:24:53,"> I still think the best thing would be to add log lines in case of rejection due to recentRejects and scan for that line in logs.\n\nThis seems reasonable, and very easy to implement.",https://github.com/bitcoin/bitcoin/pull/19620#discussion_r465809690,465809690,test/functional/p2p_segwit.py
instagibbs,2020-08-05 16:58:11,"After some noodling/test writing I actually think a simple timeout `average_wait_for_typical_getdata<<n<<GETDATA_TX_INTERVAL` is best, or a ""unit"" test.\n\nI think 5 seconds is ok for now, someone can replace later with something better.",https://github.com/bitcoin/bitcoin/pull/19620#discussion_r465870645,465870645,test/functional/p2p_segwit.py
jnewbery,2020-08-06 10:58:20,"> I actually think a simple timeout\n\nCan you explain why you think that? (I'm not disagreeing, just trying to understand why you think relying on tx download is a better test for this tx acceptance change).\n\nThere seems to be some confusion around the concept of unit tests here. This is higher-level functionality spread across two different components (validation and net_processing). The o",https://github.com/bitcoin/bitcoin/pull/19620#discussion_r466332426,466332426,test/functional/p2p_segwit.py
instagibbs,2020-08-06 13:22:07,"I was mostly annoyed that the various failure cases have to be handled on a case by case basis. One case is `AlreadyHave`, the other is not but the `getdata` is not sent because another peer has already had it requested. I'd rather write something that covers both properly.",https://github.com/bitcoin/bitcoin/pull/19620#discussion_r466407329,466407329,test/functional/p2p_segwit.py
