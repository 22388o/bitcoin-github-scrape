[
  {
    "sha": "7989901c7eb62ca28b3d1e5d5831041a7267e495",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OTg5OTAxYzdlYjYyY2EyOGIzZDFlNWQ1ODMxMDQxYTcyNjdlNDk1",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-07-29T15:07:23Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-08-04T17:29:40Z"
      },
      "message": "Add txids with non-standard inputs to reject filter\n\nOur policy checks for non-standard inputs depend only on the non-witness\nportion of a transaction: we look up the scriptPubKey of the input being\nspent from our UTXO set (which is covered by the input txid), and the p2sh\nchecks only rely on the scriptSig portion of the input.\n\nConsequently it's safe to add txids of transactions that fail these checks to\nthe reject filter, as the witness is irrelevant to the failure. This is helpful\nfor any situation where we might request the transaction again via txid (either\nfrom txid-relay peers, or if we might fetch the transaction via txid due to\nparent-fetching of orphans).\n\nFurther, in preparation for future witness versions being deployed on the\nnetwork, ensure that WITNESS_UNKNOWN transactions are rejected in\nAreInputsStandard(), so that transactions spending v1 (or greater) witness\noutputs will fall into this category of having their txid added to the reject\nfilter.",
      "tree": {
        "sha": "776c823c913377bcd1ddd3093f5952f35f400199",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/776c823c913377bcd1ddd3093f5952f35f400199"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7989901c7eb62ca28b3d1e5d5831041a7267e495",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7989901c7eb62ca28b3d1e5d5831041a7267e495",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7989901c7eb62ca28b3d1e5d5831041a7267e495",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7989901c7eb62ca28b3d1e5d5831041a7267e495/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a41ae68053387567414021228995a485e29ad611",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a41ae68053387567414021228995a485e29ad611",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a41ae68053387567414021228995a485e29ad611"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 45,
      "deletions": 6
    },
    "files": [
      {
        "sha": "2a93a090d6ec98854d02363dbac514cdb32a3429",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7989901c7eb62ca28b3d1e5d5831041a7267e495/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7989901c7eb62ca28b3d1e5d5831041a7267e495/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=7989901c7eb62ca28b3d1e5d5831041a7267e495",
        "patch": "@@ -26,7 +26,8 @@ enum class TxValidationResult {\n      * is uninteresting.\n      */\n     TX_RECENT_CONSENSUS_CHANGE,\n-    TX_NOT_STANDARD,          //!< didn't meet our local policy rules\n+    TX_INPUTS_NOT_STANDARD,   //!< inputs (covered by txid) failed policy rules\n+    TX_NOT_STANDARD,          //!< otherwise didn't meet our local policy rules\n     TX_MISSING_INPUTS,        //!< transaction was missing some of its inputs\n     TX_PREMATURE_SPEND,       //!< transaction spends a coinbase too early, or violates locktime/sequence locks\n     /**"
      },
      {
        "sha": "ef7f486e0b8140f81f18d0dd96e02783c43d61c7",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 2,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7989901c7eb62ca28b3d1e5d5831041a7267e495/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7989901c7eb62ca28b3d1e5d5831041a7267e495/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=7989901c7eb62ca28b3d1e5d5831041a7267e495",
        "patch": "@@ -187,7 +187,7 @@ namespace {\n      * million to make it highly unlikely for users to have issues with this\n      * filter.\n      *\n-     * We only need to add wtxids to this filter. For non-segwit\n+     * We typically only add wtxids to this filter. For non-segwit\n      * transactions, the txid == wtxid, so this only prevents us from\n      * re-downloading non-segwit transactions when communicating with\n      * non-wtxidrelay peers -- which is important for avoiding malleation\n@@ -196,6 +196,12 @@ namespace {\n      * the reject filter store wtxids is exactly what we want to avoid\n      * redownload of a rejected transaction.\n      *\n+     * In cases where we can tell that a segwit transaction will fail\n+     * validation no matter the witness, we may add the txid of such\n+     * transaction to the filter as well. This can be helpful when\n+     * communicating with txid-relay peers or if we were to otherwise fetch a\n+     * transaction via txid (eg in our orphan handling).\n+     *\n      * Memory used: 1.3 MB\n      */\n     std::unique_ptr<CRollingBloomFilter> recentRejects GUARDED_BY(cs_main);\n@@ -1161,6 +1167,7 @@ static bool MaybePunishNodeForTx(NodeId nodeid, const TxValidationState& state,\n         }\n     // Conflicting (but not necessarily invalid) data or different policy:\n     case TxValidationResult::TX_RECENT_CONSENSUS_CHANGE:\n+    case TxValidationResult::TX_INPUTS_NOT_STANDARD:\n     case TxValidationResult::TX_NOT_STANDARD:\n     case TxValidationResult::TX_MISSING_INPUTS:\n     case TxValidationResult::TX_PREMATURE_SPEND:\n@@ -2053,6 +2060,19 @@ void static ProcessOrphanTx(CConnman& connman, CTxMemPool& mempool, std::set<uin\n                 // if we start doing this too early.\n                 assert(recentRejects);\n                 recentRejects->insert(orphanTx.GetWitnessHash());\n+                // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n+                // then we know that the witness was irrelevant to the policy\n+                // failure, since this check depends only on the txid\n+                // (the scriptPubKey being spent is covered by the txid).\n+                // Add the txid to the reject filter to prevent repeated\n+                // processing of this transaction in the event that child\n+                // transactions are later received (resulting in\n+                // parent-fetching by txid via the orphan-handling logic).\n+                if (orphan_state.GetResult() == TxValidationResult::TX_INPUTS_NOT_STANDARD && orphanTx.GetWitnessHash() != orphanTx.GetHash()) {\n+                    // We only add the txid if it differs from the wtxid, to\n+                    // avoid wasting entries in the rolling bloom filter.\n+                    recentRejects->insert(orphanTx.GetHash());\n+                }\n             }\n             EraseOrphanTx(orphanHash);\n             done = true;\n@@ -2940,7 +2960,7 @@ void ProcessMessage(\n \n         // We do the AlreadyHave() check using wtxid, rather than txid - in the\n         // absence of witness malleation, this is strictly better, because the\n-        // recent rejects filter may contain the wtxid but will never contain\n+        // recent rejects filter may contain the wtxid but rarely contains\n         // the txid of a segwit transaction that has been rejected.\n         // In the presence of witness malleation, it's possible that by only\n         // doing the check with wtxid, we could overlook a transaction which\n@@ -3034,6 +3054,17 @@ void ProcessMessage(\n                 // if we start doing this too early.\n                 assert(recentRejects);\n                 recentRejects->insert(tx.GetWitnessHash());\n+                // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n+                // then we know that the witness was irrelevant to the policy\n+                // failure, since this check depends only on the txid\n+                // (the scriptPubKey being spent is covered by the txid).\n+                // Add the txid to the reject filter to prevent repeated\n+                // processing of this transaction in the event that child\n+                // transactions are later received (resulting in\n+                // parent-fetching by txid via the orphan-handling logic).\n+                if (state.GetResult() == TxValidationResult::TX_INPUTS_NOT_STANDARD && tx.GetWitnessHash() != tx.GetHash()) {\n+                    recentRejects->insert(tx.GetHash());\n+                }\n                 if (RecursiveDynamicUsage(*ptx) < 100000) {\n                     AddToCompactExtraTransactions(ptx);\n                 }"
      },
      {
        "sha": "0e9820da1e8b0630d55c3d00dbc03de973993fdd",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7989901c7eb62ca28b3d1e5d5831041a7267e495/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7989901c7eb62ca28b3d1e5d5831041a7267e495/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=7989901c7eb62ca28b3d1e5d5831041a7267e495",
        "patch": "@@ -152,6 +152,8 @@ bool IsStandardTx(const CTransaction& tx, bool permit_bare_multisig, const CFeeR\n  * script can be anything; an attacker could use a very\n  * expensive-to-check-upon-redemption script like:\n  *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n+ *\n+ * Note that only the non-witness portion of the transaction is checked here.\n  */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n {\n@@ -164,7 +166,11 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n \n         std::vector<std::vector<unsigned char> > vSolutions;\n         TxoutType whichType = Solver(prev.scriptPubKey, vSolutions);\n-        if (whichType == TxoutType::NONSTANDARD) {\n+        if (whichType == TxoutType::NONSTANDARD || whichType == TxoutType::WITNESS_UNKNOWN) {\n+            // WITNESS_UNKNOWN failures are typically also caught with a policy\n+            // flag in the script interpreter, but it can be helpful to catch\n+            // this type of NONSTANDARD transaction earlier in transaction\n+            // validation.\n             return false;\n         } else if (whichType == TxoutType::SCRIPTHASH) {\n             std::vector<std::vector<unsigned char> > stack;"
      },
      {
        "sha": "f3e08d333b0d6118342cafda2fddca0663a783a6",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7989901c7eb62ca28b3d1e5d5831041a7267e495/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7989901c7eb62ca28b3d1e5d5831041a7267e495/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7989901c7eb62ca28b3d1e5d5831041a7267e495",
        "patch": "@@ -689,8 +689,9 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n     // Check for non-standard pay-to-script-hash in inputs\n-    if (fRequireStandard && !AreInputsStandard(tx, m_view))\n-        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"bad-txns-nonstandard-inputs\");\n+    if (fRequireStandard && !AreInputsStandard(tx, m_view)) {\n+        return state.Invalid(TxValidationResult::TX_INPUTS_NOT_STANDARD, \"bad-txns-nonstandard-inputs\");\n+    }\n \n     // Check for non-standard witness in P2WSH\n     if (tx.HasWitness() && fRequireStandard && !IsWitnessStandard(tx, m_view))"
      }
    ]
  },
  {
    "sha": "9f88ded82b2898ca63d44c08072f1ba52f0e18d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Zjg4ZGVkODJiMjg5OGNhNjNkNDRjMDgwNzJmMWJhNTJmMGUxOGQ3",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2020-08-03T18:37:58Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-08-04T17:29:40Z"
      },
      "message": "test addition of unknown segwit spends to txid reject filter",
      "tree": {
        "sha": "25bd7b7525b85fbe4aee5c8c096bf18f5f84259b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25bd7b7525b85fbe4aee5c8c096bf18f5f84259b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f88ded82b2898ca63d44c08072f1ba52f0e18d7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f88ded82b2898ca63d44c08072f1ba52f0e18d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f88ded82b2898ca63d44c08072f1ba52f0e18d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f88ded82b2898ca63d44c08072f1ba52f0e18d7/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7989901c7eb62ca28b3d1e5d5831041a7267e495",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7989901c7eb62ca28b3d1e5d5831041a7267e495",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7989901c7eb62ca28b3d1e5d5831041a7267e495"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 10,
      "deletions": 2
    },
    "files": [
      {
        "sha": "519fb0438f8c5bf79df1f30a1f92bfd58513a228",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f88ded82b2898ca63d44c08072f1ba52f0e18d7/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f88ded82b2898ca63d44c08072f1ba52f0e18d7/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=9f88ded82b2898ca63d44c08072f1ba52f0e18d7",
        "patch": "@@ -1418,16 +1418,24 @@ def test_segwit_versions(self):\n         temp_utxo.pop()  # last entry in temp_utxo was the output we just spent\n         temp_utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n \n-        # Spend everything in temp_utxo back to an OP_TRUE output.\n+        # Spend everything in temp_utxo into an segwit v1 output.\n         tx3 = CTransaction()\n         total_value = 0\n         for i in temp_utxo:\n             tx3.vin.append(CTxIn(COutPoint(i.sha256, i.n), b\"\"))\n             tx3.wit.vtxinwit.append(CTxInWitness())\n             total_value += i.nValue\n         tx3.wit.vtxinwit[-1].scriptWitness.stack = [witness_program]\n-        tx3.vout.append(CTxOut(total_value - 1000, CScript([OP_TRUE])))\n+        tx3.vout.append(CTxOut(total_value - 1000, script_pubkey))\n         tx3.rehash()\n+\n+        # First we test this transaction against fRequireStandard=true node\n+        # making sure the txid is added to the reject filter\n+        self.std_node.announce_tx_and_wait_for_getdata(tx3)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx3, with_witness=True, accepted=False, reason=\"bad-txns-nonstandard-inputs\")\n+        # Now the node will no longer ask for getdata of this transaction when advertised by same txid\n+        self.std_node.announce_tx_and_wait_for_getdata(tx3, timeout=5, success=False)\n+\n         # Spending a higher version witness output is not allowed by policy,\n         # even with fRequireStandard=false.\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=False, reason=\"reserved for soft-fork upgrades\")"
      }
    ]
  }
]