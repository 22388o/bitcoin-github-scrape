[
  {
    "sha": "b74e6cf8f3789b599e913e768f88d03b9ef3f726",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzRlNmNmOGYzNzg5YjU5OWU5MTNlNzY4Zjg4ZDAzYjllZjNmNzI2",
    "commit": {
      "author": {
        "name": "shaolinfry",
        "email": "shaolinfry@protonmail.ch",
        "date": "2017-02-02T02:36:58Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-05-27T16:56:10Z"
      },
      "message": "BIP8 implementation\n\nIf flag set, transition to LOCKED_IN on timeout.\n\nAlso Add BIP8 reporting to getblockchaininfo RPC",
      "tree": {
        "sha": "55c8901156d490cd316c15a54c92fcabd52e9eb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/55c8901156d490cd316c15a54c92fcabd52e9eb5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b74e6cf8f3789b599e913e768f88d03b9ef3f726",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZKa+qAAoJEIhmwY6hyUSihC0P/1oMuQclKEYirBnGw6FfNCj4\nxMpWQyyeeDmtspHLkFNACA1Zf6qwerfcAIySdQXSnCgXnd86PNCX4oL8ANh7WSib\nYl5bX4bZjclmKOliHjklGaQC18k03r5iPVR0tgZQWEzSx5xNB5HeL82UG6r67yLi\n5wndYcL9xUhUKsL2/IRvCoXwyRyTdyTGo2jYN3N9DHbaEszMR0/7plTRNONhZecI\nytCrM5s+HWMJfLsCTElTYWSGr5r73RILE+AgaLwkEm+nGUAAkC6+CdopWf7zGxuu\n6xdy/NoogrJR/lNbvFwgGQ85sEV9XS0+NtgE5Uug2b+kk5W/yX+iC/sblnud+5IE\nIaTSPEVt617qNrJPFO4BY7HjPJYOtCzIsQr1bIf4UThuAsFo1GqI2n6N71G3qguu\nb7NX32E3LxeNAtw5HFwA1QVi8RA6wrv72PpZyemtTTmB/P310BarpPP6onXDzY5A\n8hSxsHBwK1tG3OZh5OcZH0RuY6RW65VHUPWJDCIdrWruPEC2XpaBKNrLw0nFeotS\naZLLloJwkxNXigSWBdPThouqSIkxesBYY9GLrKqWwjz7b/TP4trUp1ctBmXPbrLe\n8IHUD70piAU6wKL0QErPx0ImamwakEGhnpApqahmIbJdgM/fnKR4vSba1wnJgFZt\n++JW0T8us/gFLcU19ZMS\n=MRdT\n-----END PGP SIGNATURE-----",
        "payload": "tree 55c8901156d490cd316c15a54c92fcabd52e9eb5\nparent 4314544d46e8e46c3c9da60f1d18297f52f58418\nauthor shaolinfry <shaolinfry@protonmail.ch> 1486003018 +0000\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1495904170 +0200\n\nBIP8 implementation\n\nIf flag set, transition to LOCKED_IN on timeout.\n\nAlso Add BIP8 reporting to getblockchaininfo RPC\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b74e6cf8f3789b599e913e768f88d03b9ef3f726",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b74e6cf8f3789b599e913e768f88d03b9ef3f726",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b74e6cf8f3789b599e913e768f88d03b9ef3f726/comments",
    "author": {
      "login": "shaolinfry",
      "id": 19836615,
      "node_id": "MDQ6VXNlcjE5ODM2NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/19836615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shaolinfry",
      "html_url": "https://github.com/shaolinfry",
      "followers_url": "https://api.github.com/users/shaolinfry/followers",
      "following_url": "https://api.github.com/users/shaolinfry/following{/other_user}",
      "gists_url": "https://api.github.com/users/shaolinfry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shaolinfry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shaolinfry/subscriptions",
      "organizations_url": "https://api.github.com/users/shaolinfry/orgs",
      "repos_url": "https://api.github.com/users/shaolinfry/repos",
      "events_url": "https://api.github.com/users/shaolinfry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shaolinfry/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4314544d46e8e46c3c9da60f1d18297f52f58418",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4314544d46e8e46c3c9da60f1d18297f52f58418",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4314544d46e8e46c3c9da60f1d18297f52f58418"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 62,
      "deletions": 7
    },
    "files": [
      {
        "sha": "fd26feb027b1e3913c1f17cddf1a1363dda564e2",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b74e6cf8f3789b599e913e768f88d03b9ef3f726/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b74e6cf8f3789b599e913e768f88d03b9ef3f726/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=b74e6cf8f3789b599e913e768f88d03b9ef3f726",
        "patch": "@@ -31,6 +31,8 @@ struct BIP9Deployment {\n     int64_t nStartTime;\n     /** Timeout/expiry MedianTime for the deployment attempt. */\n     int64_t nTimeout;\n+    /** If true STARTED->FAILED will become STARTED->LOCKED_IN */\n+    bool fLockInOnTimeout = false;\n };\n \n /**"
      },
      {
        "sha": "d19c2090968f5db2ad0425741ce7e898c5daf1ae",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 5,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b74e6cf8f3789b599e913e768f88d03b9ef3f726/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b74e6cf8f3789b599e913e768f88d03b9ef3f726/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=b74e6cf8f3789b599e913e768f88d03b9ef3f726",
        "patch": "@@ -1056,7 +1056,7 @@ static UniValue SoftForkDesc(const std::string &name, int version, CBlockIndex*\n     return rv;\n }\n \n-static UniValue BIP9SoftForkDesc(const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n+static UniValue VBSoftForkDesc(const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n {\n     UniValue rv(UniValue::VOBJ);\n     const ThresholdState thresholdState = VersionBitsTipState(consensusParams, id);\n@@ -1088,13 +1088,13 @@ static UniValue BIP9SoftForkDesc(const Consensus::Params& consensusParams, Conse\n     return rv;\n }\n \n-void BIP9SoftForkDescPushBack(UniValue& bip9_softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n+void VBSoftForkDescPushBack(UniValue& vb_softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n {\n     // Deployments with timeout value of 0 are hidden.\n     // A timeout value of 0 guarantees a softfork will never be activated.\n     // This is used when softfork codes are merged without specifying the deployment schedule.\n     if (consensusParams.vDeployments[id].nTimeout > 0)\n-        bip9_softforks.push_back(Pair(name, BIP9SoftForkDesc(consensusParams, id)));\n+        vb_softforks.push_back(Pair(name, VBSoftForkDesc(consensusParams, id)));\n }\n \n UniValue getblockchaininfo(const JSONRPCRequest& request)\n@@ -1124,6 +1124,15 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n             \"        },\\n\"\n             \"     }, ...\\n\"\n             \"  ],\\n\"\n+            \"  \\\"bip8_softforks\\\": {          (object) status of BIP9 softforks in progress\\n\"\n+            \"     \\\"xxxx\\\" : {                (string) name of the softfork\\n\"\n+            \"        \\\"status\\\": \\\"xxxx\\\",    (string) one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\\n\"\n+            \"        \\\"bit\\\": xx,             (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\\n\"\n+            \"        \\\"startTime\\\": xx,       (numeric) the minimum median time past of a block at which the bit gains its meaning\\n\"\n+            \"        \\\"timeout\\\": xx,         (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\\n\"\n+            \"        \\\"since\\\": xx            (numeric) height of the first block to which the status applies\\n\"\n+            \"     }\\n\"\n+            \"  },\\n\"\n             \"  \\\"bip9_softforks\\\": {          (object) status of BIP9 softforks in progress\\n\"\n             \"     \\\"xxxx\\\" : {                (string) name of the softfork\\n\"\n             \"        \\\"status\\\": \\\"xxxx\\\",    (string) one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\\n\"\n@@ -1162,13 +1171,15 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     CBlockIndex* tip = chainActive.Tip();\n     UniValue softforks(UniValue::VARR);\n+    UniValue bip8_softforks(UniValue::VOBJ);\n     UniValue bip9_softforks(UniValue::VOBJ);\n     softforks.push_back(SoftForkDesc(\"bip34\", 2, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip66\", 3, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip65\", 4, tip, consensusParams));\n-    BIP9SoftForkDescPushBack(bip9_softforks, \"csv\", consensusParams, Consensus::DEPLOYMENT_CSV);\n-    BIP9SoftForkDescPushBack(bip9_softforks, \"segwit\", consensusParams, Consensus::DEPLOYMENT_SEGWIT);\n+    VBSoftForkDescPushBack(bip9_softforks, \"csv\", consensusParams, Consensus::DEPLOYMENT_CSV);\n+    VBSoftForkDescPushBack(bip9_softforks, \"segwit\", consensusParams, Consensus::DEPLOYMENT_SEGWIT);\n     obj.push_back(Pair(\"softforks\",             softforks));\n+    obj.push_back(Pair(\"bip8_softforks\", bip8_softforks));\n     obj.push_back(Pair(\"bip9_softforks\", bip9_softforks));\n \n     if (fPruneMode)"
      },
      {
        "sha": "83ef7d75d9232fe27e104f839bde0eeea5f5d3e5",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 1,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b74e6cf8f3789b599e913e768f88d03b9ef3f726/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b74e6cf8f3789b599e913e768f88d03b9ef3f726/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=b74e6cf8f3789b599e913e768f88d03b9ef3f726",
        "patch": "@@ -21,13 +21,16 @@ class TestConditionChecker : public AbstractThresholdConditionChecker\n {\n private:\n     mutable ThresholdConditionCache cache;\n+    bool lock_in_on_timeout = false;\n \n public:\n     int64_t BeginTime(const Consensus::Params& params) const { return TestTime(10000); }\n     int64_t EndTime(const Consensus::Params& params) const { return TestTime(20000); }\n+    bool LockInOnTimeout(const Consensus::Params& params) const { return this->lock_in_on_timeout; }\n     int Period(const Consensus::Params& params) const { return 1000; }\n     int Threshold(const Consensus::Params& params) const { return 900; }\n     bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const { return (pindex->nVersion & 0x100); }\n+    void SetLockInOnTimeout(int64_t flag) { this->lock_in_on_timeout = flag; }\n \n     ThresholdState GetStateFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateFor(pindexPrev, paramsDummy, cache); }\n     int GetStateSinceHeightFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateSinceHeightFor(pindexPrev, paramsDummy, cache); }\n@@ -51,6 +54,13 @@ class VersionBitsTester\n public:\n     VersionBitsTester() : num(0) {}\n \n+    VersionBitsTester& SetCheckerLockInOnTimeoutTest(bool flag) {\n+        for (unsigned int  i = 0; i < CHECKERS; i++) {\n+            checker[i].SetLockInOnTimeout(flag);\n+        }\n+        return *this;\n+    }\n+\n     VersionBitsTester& Reset() {\n         for (unsigned int i = 0; i < vpblock.size(); i++) {\n             delete vpblock[i];\n@@ -205,7 +215,31 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n                            .Mine(4000, TestTime(10000), 0).TestStarted().TestStateSinceHeight(3000)\n                            .Mine(5000, TestTime(10000), 0).TestStarted().TestStateSinceHeight(3000)\n                            .Mine(6000, TestTime(20000), 0).TestFailed().TestStateSinceHeight(6000)\n-                           .Mine(7000, TestTime(20000), 0x100).TestFailed().TestStateSinceHeight(6000);\n+                           .Mine(7000, TestTime(20000), 0x100).TestFailed().TestStateSinceHeight(6000)\n+\n+        // DEFINED -> STARTED -> LOCKEDIN -> ACTIVE (mandatory lockin)\n+                           .Reset().SetCheckerLockInOnTimeoutTest(true).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(999, TestTime(999), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(1000, TestTime(1000), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(2000, TestTime(2000), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(3000, TestTime(10000), 0).TestStarted().TestStateSinceHeight(3000)\n+                           .Mine(4000, TestTime(10000), 0).TestStarted().TestStateSinceHeight(3000)\n+                           .Mine(5000, TestTime(10000), 0).TestStarted().TestStateSinceHeight(3000)\n+                           .Mine(6000, TestTime(20000), 0).TestLockedIn().TestStateSinceHeight(6000)\n+                           .Mine(7000, TestTime(20000), 0x100).TestActive().TestStateSinceHeight(7000)\n+\n+        // DEFINED -> STARTED -> LOCKEDIN -> ACTIVE (mandatory lockin but activation by signalling)\n+                           .Reset().SetCheckerLockInOnTimeoutTest(true).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(1, TestTime(1), 0x200).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(1000, TestTime(9999) - 1, 0x200).TestDefined().TestStateSinceHeight(0) // One second more and it would be defined\n+                           .Mine(2000, TestTime(10000), 0x101).TestStarted().TestStateSinceHeight(2000) // So that's what happens the next period\n+                           .Mine(2050, TestTime(10010), 0x200).TestStarted().TestStateSinceHeight(2000) // 50 old blocks\n+                           .Mine(2950, TestTime(10020), 0x100).TestStarted().TestStateSinceHeight(2000) // 900 new blocks\n+                           .Mine(2999, TestTime(11999), 0x200).TestStarted().TestStateSinceHeight(2000) // 49 old blocks\n+                           .Mine(3000, TestTime(12000), 0x200).TestLockedIn().TestStateSinceHeight(3000) // 1 old block (so 900 out of the past 1000)\n+                           .Mine(3999, TestTime(12500), 0).TestLockedIn().TestStateSinceHeight(3000)\n+                           .Mine(4000, TestTime(13000), 0).TestActive().TestStateSinceHeight(4000)\n+        ;\n     }\n \n     // Sanity checks of version bit deployments"
      },
      {
        "sha": "19b649a7694d3818530d42e92d691ba25d310b22",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b74e6cf8f3789b599e913e768f88d03b9ef3f726/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b74e6cf8f3789b599e913e768f88d03b9ef3f726/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b74e6cf8f3789b599e913e768f88d03b9ef3f726",
        "patch": "@@ -1421,6 +1421,7 @@ class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n \n     int64_t BeginTime(const Consensus::Params& params) const { return 0; }\n     int64_t EndTime(const Consensus::Params& params) const { return std::numeric_limits<int64_t>::max(); }\n+    bool LockInOnTimeout(const Consensus::Params& params) const { return false; }\n     int Period(const Consensus::Params& params) const { return params.nMinerConfirmationWindow; }\n     int Threshold(const Consensus::Params& params) const { return params.nRuleChangeActivationThreshold; }\n "
      },
      {
        "sha": "a002d1d156792977b81c72468cea579851116e0e",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b74e6cf8f3789b599e913e768f88d03b9ef3f726/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b74e6cf8f3789b599e913e768f88d03b9ef3f726/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=b74e6cf8f3789b599e913e768f88d03b9ef3f726",
        "patch": "@@ -26,6 +26,7 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n     int nThreshold = Threshold(params);\n     int64_t nTimeStart = BeginTime(params);\n     int64_t nTimeTimeout = EndTime(params);\n+    bool fLockInOnTimeout = LockInOnTimeout(params);\n \n     // A block's state is always the same as that of the first of its period, so it is computed based on a pindexPrev whose height equals a multiple of nPeriod - 1.\n     if (pindexPrev != NULL) {\n@@ -70,7 +71,7 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n             }\n             case THRESHOLD_STARTED: {\n                 if (pindexPrev->GetMedianTimePast() >= nTimeTimeout) {\n-                    stateNext = THRESHOLD_FAILED;\n+                    stateNext = (fLockInOnTimeout == false) ? THRESHOLD_FAILED : THRESHOLD_LOCKED_IN;\n                     break;\n                 }\n                 // We need to count\n@@ -176,6 +177,7 @@ class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {\n protected:\n     int64_t BeginTime(const Consensus::Params& params) const { return params.vDeployments[id].nStartTime; }\n     int64_t EndTime(const Consensus::Params& params) const { return params.vDeployments[id].nTimeout; }\n+    bool LockInOnTimeout(const Consensus::Params& params) const { return params.vDeployments[id].fLockInOnTimeout; }\n     int Period(const Consensus::Params& params) const { return params.nMinerConfirmationWindow; }\n     int Threshold(const Consensus::Params& params) const { return params.nRuleChangeActivationThreshold; }\n "
      },
      {
        "sha": "e55bff550af4c389c31357f99b7634f933e67565",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b74e6cf8f3789b599e913e768f88d03b9ef3f726/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b74e6cf8f3789b599e913e768f88d03b9ef3f726/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=b74e6cf8f3789b599e913e768f88d03b9ef3f726",
        "patch": "@@ -55,6 +55,7 @@ class AbstractThresholdConditionChecker {\n     virtual bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const =0;\n     virtual int64_t BeginTime(const Consensus::Params& params) const =0;\n     virtual int64_t EndTime(const Consensus::Params& params) const =0;\n+    virtual bool LockInOnTimeout(const Consensus::Params& params) const =0;\n     virtual int Period(const Consensus::Params& params) const =0;\n     virtual int Threshold(const Consensus::Params& params) const =0;\n "
      },
      {
        "sha": "173390138d047971b7455fb6f95ce1f6c2468aca",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b74e6cf8f3789b599e913e768f88d03b9ef3f726/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b74e6cf8f3789b599e913e768f88d03b9ef3f726/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=b74e6cf8f3789b599e913e768f88d03b9ef3f726",
        "patch": "@@ -600,3 +600,7 @@ def mine_large_block(node, utxos=None):\n def get_bip9_status(node, key):\n     info = node.getblockchaininfo()\n     return info['bip9_softforks'][key]\n+\n+def get_bip8_status(node, key):\n+    info = node.getblockchaininfo()\n+    return info['bip8_softforks'][key]"
      }
    ]
  },
  {
    "sha": "71a022b3505216ad25c810316b1ac30b34ae56c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MWEwMjJiMzUwNTIxNmFkMjVjODEwMzE2YjFhYzMwYjM0YWU1NmM4",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-05-27T16:37:11Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-05-27T16:59:49Z"
      },
      "message": "BIP8: Separated THRESHOLD_LOCKED_IN_BY_TIMEOUT state",
      "tree": {
        "sha": "7659377f5b3fb5485ef295cef5d56eaa4207ca31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7659377f5b3fb5485ef295cef5d56eaa4207ca31"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71a022b3505216ad25c810316b1ac30b34ae56c8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZKbCFAAoJEIhmwY6hyUSiGRsP/jDr1onrqrvUm3LLnSOF5qSG\nhVszGjW0Bg83f/tibD6GRstnUdOeQQVOYmSjC3IoXU92gwP51jpj3Qnc8OHo5I9a\nffVt3XIRvOv07DCb+hngZdwTkdRLYXhFcPt4xHty75IP2lMZm/BKdMakyh4SX1a0\nq5nUnHJwNPQMW5Og7aCkXmTPq7LNkM35NAKTtYcanbdAHMv4hwOhEjy8vj0yNeAF\nlnx9ewyEdVMhdV7wM0906/vDtsr0OI+DX7LH9ow/Cj9shCBhg9GPmEqlS6SsOmXO\n7ieELDe4dw7R30PTN2YmF+zReVbK2ZxNtfjzkyr9gxRJtOpYQTxFmEicEcaTtLDo\ntqSLvzCQPXJIErZoMr2Sg2ZpC2TCdomEd8srXUjIA6ef4hh2Mf/MLe76oLBSNoDR\n7NsEO82wzqev9tYZVsTSiLes9Pbz12Ho2eHuzrTQ5PZNSmBWVmMDYdad1jKTtIKV\na7LVcr+41+euUptBNQXvqQtvTJeCahx3elmuNwJtcswAWUrwtaTLNubhfbTl8lHl\n5d4nvNDsjXkM/wWmTbrV/BhlDm9rUza27wfS1GoRLvky8zzRAyNoXkrsUgaJt1St\n71xttSdYmsOfcrQ12yvcys77kdaOoA7F7jHfKVos45v3dS94PXVuQr4rfnA3/DJQ\n9fEBnFRz/oG+Z/DH2Clx\n=iY4D\n-----END PGP SIGNATURE-----",
        "payload": "tree 7659377f5b3fb5485ef295cef5d56eaa4207ca31\nparent b74e6cf8f3789b599e913e768f88d03b9ef3f726\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1495903031 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1495904389 +0200\n\nBIP8: Separated THRESHOLD_LOCKED_IN_BY_TIMEOUT state\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71a022b3505216ad25c810316b1ac30b34ae56c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71a022b3505216ad25c810316b1ac30b34ae56c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71a022b3505216ad25c810316b1ac30b34ae56c8/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b74e6cf8f3789b599e913e768f88d03b9ef3f726",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b74e6cf8f3789b599e913e768f88d03b9ef3f726",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b74e6cf8f3789b599e913e768f88d03b9ef3f726"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 9,
      "deletions": 3
    },
    "files": [
      {
        "sha": "fafcb48dc1d4ea34a4ed5e0fda10fa7b554c12fe",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71a022b3505216ad25c810316b1ac30b34ae56c8/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71a022b3505216ad25c810316b1ac30b34ae56c8/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=71a022b3505216ad25c810316b1ac30b34ae56c8",
        "patch": "@@ -1063,6 +1063,7 @@ static UniValue VBSoftForkDesc(const Consensus::Params& consensusParams, Consens\n     switch (thresholdState) {\n     case THRESHOLD_DEFINED: rv.push_back(Pair(\"status\", \"defined\")); break;\n     case THRESHOLD_STARTED: rv.push_back(Pair(\"status\", \"started\")); break;\n+    case THRESHOLD_LOCKED_IN_BY_TIMEOUT: rv.push_back(Pair(\"status\", \"locked_in_by_timeout\")); break;\n     case THRESHOLD_LOCKED_IN: rv.push_back(Pair(\"status\", \"locked_in\")); break;\n     case THRESHOLD_ACTIVE: rv.push_back(Pair(\"status\", \"active\")); break;\n     case THRESHOLD_FAILED: rv.push_back(Pair(\"status\", \"failed\")); break;"
      },
      {
        "sha": "ab2189d18a400e14f6d34d2fc32250ce27227f90",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71a022b3505216ad25c810316b1ac30b34ae56c8/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71a022b3505216ad25c810316b1ac30b34ae56c8/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=71a022b3505216ad25c810316b1ac30b34ae56c8",
        "patch": "@@ -623,6 +623,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n             case THRESHOLD_FAILED:\n                 // Not exposed to GBT at all\n                 break;\n+            case THRESHOLD_LOCKED_IN_BY_TIMEOUT:\n             case THRESHOLD_LOCKED_IN:\n                 // Ensure bit is set in block version\n                 pblock->nVersion |= VersionBitsMask(consensusParams, pos);"
      },
      {
        "sha": "11fffc754eb500df944161d4cca87b512133d917",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71a022b3505216ad25c810316b1ac30b34ae56c8/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71a022b3505216ad25c810316b1ac30b34ae56c8/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=71a022b3505216ad25c810316b1ac30b34ae56c8",
        "patch": "@@ -122,7 +122,9 @@ class VersionBitsTester\n     VersionBitsTester& TestLockedIn() {\n         for (int i = 0; i < CHECKERS; i++) {\n             if ((insecure_rand() & ((1 << i) - 1)) == 0) {\n-                BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? NULL : vpblock.back()) == THRESHOLD_LOCKED_IN, strprintf(\"Test %i for LOCKED_IN\", num));\n+                const ThresholdState thresholdState = checker[i].GetStateFor(vpblock.empty() ? NULL : vpblock.back());\n+                BOOST_CHECK_MESSAGE(thresholdState == THRESHOLD_LOCKED_IN || thresholdState == THRESHOLD_LOCKED_IN_BY_TIMEOUT,\n+                                    strprintf(\"Test %i for LOCKED_IN\", num));\n             }\n         }\n         num++;"
      },
      {
        "sha": "41f8db65d1854f34d3349f6bf1c4b85e229b4e27",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71a022b3505216ad25c810316b1ac30b34ae56c8/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71a022b3505216ad25c810316b1ac30b34ae56c8/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=71a022b3505216ad25c810316b1ac30b34ae56c8",
        "patch": "@@ -1400,7 +1400,7 @@ int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Para\n \n     for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n         ThresholdState state = VersionBitsState(pindexPrev, params, (Consensus::DeploymentPos)i, versionbitscache);\n-        if (state == THRESHOLD_LOCKED_IN || state == THRESHOLD_STARTED) {\n+        if (state == THRESHOLD_LOCKED_IN || state == THRESHOLD_LOCKED_IN_BY_TIMEOUT || state == THRESHOLD_STARTED) {\n             nVersion |= VersionBitsMask(params, (Consensus::DeploymentPos)i);\n         }\n     }"
      },
      {
        "sha": "ae78735df0c500921e982caf77fd0a7f5f83cd1d",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71a022b3505216ad25c810316b1ac30b34ae56c8/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71a022b3505216ad25c810316b1ac30b34ae56c8/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=71a022b3505216ad25c810316b1ac30b34ae56c8",
        "patch": "@@ -71,7 +71,7 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n             }\n             case THRESHOLD_STARTED: {\n                 if (pindexPrev->GetMedianTimePast() >= nTimeTimeout) {\n-                    stateNext = (fLockInOnTimeout == false) ? THRESHOLD_FAILED : THRESHOLD_LOCKED_IN;\n+                    stateNext = (fLockInOnTimeout == false) ? THRESHOLD_FAILED : THRESHOLD_LOCKED_IN_BY_TIMEOUT;\n                     break;\n                 }\n                 // We need to count\n@@ -88,6 +88,7 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n                 }\n                 break;\n             }\n+            case THRESHOLD_LOCKED_IN_BY_TIMEOUT:\n             case THRESHOLD_LOCKED_IN: {\n                 // Always progresses into ACTIVE.\n                 stateNext = THRESHOLD_ACTIVE;"
      },
      {
        "sha": "d7a4f64824ef23a50953a9d8527f6561f60b4357",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71a022b3505216ad25c810316b1ac30b34ae56c8/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71a022b3505216ad25c810316b1ac30b34ae56c8/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=71a022b3505216ad25c810316b1ac30b34ae56c8",
        "patch": "@@ -21,6 +21,7 @@ enum ThresholdState {\n     THRESHOLD_DEFINED,\n     THRESHOLD_STARTED,\n     THRESHOLD_LOCKED_IN,\n+    THRESHOLD_LOCKED_IN_BY_TIMEOUT,\n     THRESHOLD_ACTIVE,\n     THRESHOLD_FAILED,\n };"
      }
    ]
  },
  {
    "sha": "efc1fb4d166702324669e0a36ef118182313cc1c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZmMxZmI0ZDE2NjcwMjMyNDY2OWUwYTM2ZWYxMTgxODIzMTNjYzFj",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-05-27T03:31:04Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-05-27T17:01:55Z"
      },
      "message": "Introduce static DoWarning (simplify UpdateTip)",
      "tree": {
        "sha": "d8d161f918e8cebae6bf4974ba1e546ae7586041",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8d161f918e8cebae6bf4974ba1e546ae7586041"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/efc1fb4d166702324669e0a36ef118182313cc1c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZKbEDAAoJEIhmwY6hyUSiQo8P/RMmUMvNDQ2lYCi1rXENBSF3\nyHI/PriLpNFChUU+uKPXVSsGDvwqBp2o+HCaO8c9z/0bc2qLVXgmo6C2nt8ly0Zq\nekWZgQ8cJIG4L09Loflr+dcDBS6xhYChGUk2i9X2v3Ua3F4l55W25W5QU3GcTkj1\ncL/LoWiLuY3+WhPTlHMLy4JKlv/8JQ6zpTA06ijee1HdaWkQC9qebpOB/T1QlRe/\n+ZF3CPWfN7XrWV+Rfef6oZ5hozl4wuELwbUADoVXI1GIYZYBuj7kBMjj4ig/z7ym\nEvKzzdvX/qef+IPhD6c0DQ9F/h+1a/rd5Tjn1WZumdgY6FaCu4KIiX/mdDohq6UR\nG6v2NbOiWN7KsngNlV6r4BTjc0+YVmZplUt0SfDl1DtCgsPUFmXh8I9R4llNjMvp\nrUzxMLy0kYKfkLCZj3FRKjqYcd8g613b8Y26DFxpJlGyS+0L2D2qFR113/l4QIeZ\nioYsqn2dMIF+7ZpkNU/kZZFjIOM9KFwKpirU2DzhNBU+B0o3zgdo9OF0H/GfmWPF\nvTgo0jA5VP4PtNgnQnyL+Klfj53KKFbwcTb0d78/gzyAqH2MK+nds1vXnWKmu0Kz\nETdqpAyY1M+MDdrkEdaxdr+46RW0DiG+TC/lSh9QBQOwjh8n2YYF5D2rNAoM3X1J\nt6cr1uH19rREiULLk8Mg\n=2aqm\n-----END PGP SIGNATURE-----",
        "payload": "tree d8d161f918e8cebae6bf4974ba1e546ae7586041\nparent 71a022b3505216ad25c810316b1ac30b34ae56c8\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1495855864 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1495904515 +0200\n\nIntroduce static DoWarning (simplify UpdateTip)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efc1fb4d166702324669e0a36ef118182313cc1c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/efc1fb4d166702324669e0a36ef118182313cc1c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efc1fb4d166702324669e0a36ef118182313cc1c/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71a022b3505216ad25c810316b1ac30b34ae56c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71a022b3505216ad25c810316b1ac30b34ae56c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71a022b3505216ad25c810316b1ac30b34ae56c8"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 15,
      "deletions": 14
    },
    "files": [
      {
        "sha": "6b6b0ca7d4c4ac570ea44f6f846ba0c739f3eb1d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 14,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efc1fb4d166702324669e0a36ef118182313cc1c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efc1fb4d166702324669e0a36ef118182313cc1c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=efc1fb4d166702324669e0a36ef118182313cc1c",
        "patch": "@@ -1815,6 +1815,16 @@ void PruneAndFlush() {\n     FlushStateToDisk(state, FLUSH_STATE_NONE);\n }\n \n+static void DoWarning(const std::string& strWarning)\n+{\n+    static bool fWarned = false;\n+    SetMiscWarning(strWarning);\n+    if (!fWarned) {\n+        AlertNotify(strWarning);\n+        fWarned = true;\n+    }\n+}\n+\n /** Update chainActive and related internal data structures. */\n void static UpdateTip(CBlockIndex *pindexNew, const CChainParams& chainParams) {\n     chainActive.SetTip(pindexNew);\n@@ -1824,7 +1834,6 @@ void static UpdateTip(CBlockIndex *pindexNew, const CChainParams& chainParams) {\n \n     cvBlockChange.notify_all();\n \n-    static bool fWarned = false;\n     std::vector<std::string> warningMessages;\n     if (!IsInitialBlockDownload())\n     {\n@@ -1834,15 +1843,11 @@ void static UpdateTip(CBlockIndex *pindexNew, const CChainParams& chainParams) {\n             WarningBitsConditionChecker checker(bit);\n             ThresholdState state = checker.GetStateFor(pindex, chainParams.GetConsensus(), warningcache[bit]);\n             if (state == THRESHOLD_ACTIVE || state == THRESHOLD_LOCKED_IN) {\n+                const std::string strWarning = strprintf(_(\"Warning: unknown new rules activated (versionbit %i)\"), bit);\n                 if (state == THRESHOLD_ACTIVE) {\n-                    std::string strWarning = strprintf(_(\"Warning: unknown new rules activated (versionbit %i)\"), bit);\n-                    SetMiscWarning(strWarning);\n-                    if (!fWarned) {\n-                        AlertNotify(strWarning);\n-                        fWarned = true;\n-                    }\n+                    DoWarning(strWarning);\n                 } else {\n-                    warningMessages.push_back(strprintf(\"unknown new rules are about to activate (versionbit %i)\", bit));\n+                    warningMessages.push_back(strWarning);\n                 }\n             }\n         }\n@@ -1855,16 +1860,12 @@ void static UpdateTip(CBlockIndex *pindexNew, const CChainParams& chainParams) {\n             pindex = pindex->pprev;\n         }\n         if (nUpgraded > 0)\n-            warningMessages.push_back(strprintf(\"%d of last 100 blocks have unexpected version\", nUpgraded));\n+            warningMessages.push_back(strprintf(_(\"%d of last 100 blocks have unexpected version\"), nUpgraded));\n         if (nUpgraded > 100/2)\n         {\n             std::string strWarning = _(\"Warning: Unknown block versions being mined! It's possible unknown rules are in effect\");\n             // notify GetWarnings(), called by Qt and the JSON-RPC code to warn the user:\n-            SetMiscWarning(strWarning);\n-            if (!fWarned) {\n-                AlertNotify(strWarning);\n-                fWarned = true;\n-            }\n+            DoWarning(strWarning);\n         }\n     }\n     LogPrintf(\"%s: new best=%s height=%d version=0x%08x log2_work=%.8g tx=%lu date='%s' progress=%f cache=%.1fMiB(%utx)\", __func__,"
      }
    ]
  },
  {
    "sha": "01148bd4172311affac3aab6a981c16fa4fa56fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTE0OGJkNDE3MjMxMWFmZmFjM2FhYjZhOTgxYzE2ZmE0ZmE1NmZk",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-05-27T04:31:27Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-05-27T17:03:23Z"
      },
      "message": "BIP8: Warn when unkown deployments are locked in by bip8 timeout",
      "tree": {
        "sha": "01dbe1393307a0b22feae0f3dbbc1d40f9a1c10e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/01dbe1393307a0b22feae0f3dbbc1d40f9a1c10e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01148bd4172311affac3aab6a981c16fa4fa56fd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZKbFbAAoJEIhmwY6hyUSihbUQALyABwWGaFfxfoLRAPHECCg6\ndym0WyDGHwUc37CACcZC8UjPMHtu5HkUmtbML4M4rHcrFQMHT40KiNtC7YabEAyO\n6wE98ZwYqz0r3Ru1G4EhDUKUA9Oz7bLpDHhC/6U8D8V3LO1zriPNhSRty7mUlQ5M\nsOQl8xkHyYEMgu47/8JpXjpVNm0DpjhcTy/MAWmCn+xdWlkDd7b9AxLDBIybHyyY\nnkLor5DbzRMxjEBpbxaON1TZ1LgM4JgKjhzvKLVwx8tSgWt6/Tyyy2pWTbOEfXi+\nDDOjisNau0CnyOPJTYiWhhAioR+Z/OF/I84k5+ejQxmaKRjmYCiXqsiDX1ww1xrK\nYerewVwhHYZ1h/isO/YUwZdSW3hgmS7DK7O4+2K1cNjUcJjewElDvLyyVSP9shes\ngbXml3qtux/wYZlkG/501D4AkC7j2xU0LyB8k14fSBAU+rBXBSFwevgqNnzrlZ4q\nynE3WVUMrgXgyZTM1rRm176iY+Lvek4dAOQVyNB0/fwUSf2hTWTH5C3+JRpnFr93\nF77SvIpfkzD8Mu/EJFLRt4nKe062CqQVy52AzudoZQk13Dy4MyNNEtstbMUFgIbV\nnjBWhGCRN3uilazz/hPcR1KamJvjpCmaIunDIh3vLHAZDjIAKW0/uaCL5MuWXNQy\nex1EvfhtQSlsbQVxl1hk\n=oQV+\n-----END PGP SIGNATURE-----",
        "payload": "tree 01dbe1393307a0b22feae0f3dbbc1d40f9a1c10e\nparent efc1fb4d166702324669e0a36ef118182313cc1c\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1495859487 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1495904603 +0200\n\nBIP8: Warn when unkown deployments are locked in by bip8 timeout\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01148bd4172311affac3aab6a981c16fa4fa56fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01148bd4172311affac3aab6a981c16fa4fa56fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01148bd4172311affac3aab6a981c16fa4fa56fd/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "efc1fb4d166702324669e0a36ef118182313cc1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efc1fb4d166702324669e0a36ef118182313cc1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/efc1fb4d166702324669e0a36ef118182313cc1c"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 16,
      "deletions": 1
    },
    "files": [
      {
        "sha": "35b063f64c19c3cf4ad1a8d8a5252091408aea22",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01148bd4172311affac3aab6a981c16fa4fa56fd/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01148bd4172311affac3aab6a981c16fa4fa56fd/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=01148bd4172311affac3aab6a981c16fa4fa56fd",
        "patch": "@@ -1403,6 +1403,9 @@ int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Para\n         if (state == THRESHOLD_LOCKED_IN || state == THRESHOLD_LOCKED_IN_BY_TIMEOUT || state == THRESHOLD_STARTED) {\n             nVersion |= VersionBitsMask(params, (Consensus::DeploymentPos)i);\n         }\n+        if (state == THRESHOLD_LOCKED_IN_BY_TIMEOUT) {\n+            nVersion |= VERSIONBITS_WARNING_LOCKINONTIMEOUT_BITS;\n+        }\n     }\n \n     return nVersion;\n@@ -1839,6 +1842,12 @@ void static UpdateTip(CBlockIndex *pindexNew, const CChainParams& chainParams) {\n     {\n         int nUpgraded = 0;\n         const CBlockIndex* pindex = chainActive.Tip();\n+        if (pindex->nVersion & VERSIONBITS_WARNING_LOCKINONTIMEOUT_BITS) {\n+            // BIP9 always shown warnings with unknown deployments becoming active\n+            const std::string strWarning = _(\"Warning: unknown new rules locked in (versionbits bip8 timeout)\");\n+            DoWarning(strWarning);\n+            warningMessages.push_back(strWarning);\n+        }\n         for (int bit = 0; bit < VERSIONBITS_NUM_BITS; bit++) {\n             WarningBitsConditionChecker checker(bit);\n             ThresholdState state = checker.GetStateFor(pindex, chainParams.GetConsensus(), warningcache[bit]);"
      },
      {
        "sha": "28b3f6d805d9770fdf48919822b636a02938332c",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01148bd4172311affac3aab6a981c16fa4fa56fd/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01148bd4172311affac3aab6a981c16fa4fa56fd/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=01148bd4172311affac3aab6a981c16fa4fa56fd",
        "patch": "@@ -14,8 +14,14 @@ static const int32_t VERSIONBITS_LAST_OLD_BLOCK_VERSION = 4;\n static const int32_t VERSIONBITS_TOP_BITS = 0x20000000UL;\n /** What bitmask determines whether versionbits is in use */\n static const int32_t VERSIONBITS_TOP_MASK = 0xE0000000UL;\n+/**\n+ * It is adviced for block creators to mark this bit after versionbits\n+ * locked_in by timeout so that ready nodes can show warnings on\n+ * unknown deployments, but not required by consensus.\n+ */\n+static const int32_t VERSIONBITS_WARNING_LOCKINONTIMEOUT_BITS = (1U << 29);\n /** Total bits available for versionbits */\n-static const int32_t VERSIONBITS_NUM_BITS = 29;\n+static const int32_t VERSIONBITS_NUM_BITS = 28;\n \n enum ThresholdState {\n     THRESHOLD_DEFINED,"
      }
    ]
  },
  {
    "sha": "2f88e5dcdc6bdd3e6ba4d57eb4ef0dd0fd7726e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZjg4ZTVkY2RjNmJkZDNlNmJhNGQ1N2ViNGVmMGRkMGZkNzcyNmU1",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-05-27T18:12:01Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-05-27T18:12:01Z"
      },
      "message": "f'BIP8: Separated THRESHOLD_LOCKED_IN_BY_TIMEOUT state'",
      "tree": {
        "sha": "31f0f5b238e1685b9a212f6b2ab67e48a4047f52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31f0f5b238e1685b9a212f6b2ab67e48a4047f52"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f88e5dcdc6bdd3e6ba4d57eb4ef0dd0fd7726e5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZKcFxAAoJEIhmwY6hyUSicrcQAM2MzSUFUPKufnT9AE4hdIjK\n1LU9W112wwLMG6bx1iFPbRc8Ng4hyxYR2UhncVntS367kTBnaoIrYhKnj0+SaB5g\n1uGtYQITXMlWZm0rtuNYklPawB3JAP4ilsmIDdZMDyYbI2yQeGyBkc/uSRQ4p5tm\njYgLV2YuVJj+Kn5rQIoHaiD+AokLF2PLwRep0R5w4BqP3nu2ni/j35j4NjeNHiCY\njHJg80mKnutanJ10oH+iVRYBfWLlkw+PVe11F8iDzgwPEPgUbN3oTWN/JgO3MfAh\noMWpJgf+eEYDPSKO8c1cOGsTmRRtRcPmqQNhqTrq/uTbvlSfG+v0XhD+4tcGZ27c\naYA//vqlcvy3FPhxtDQuum8MGCYe/pW2Ji4hqsiI9aU0EpZezmudIlHWWFjzPLcJ\nCTrPWhHN+LBwDf+pk8aTWX5Q9GLQz6tKqTtHPlU7XHDHoB9122G5D1kNWgtvUQ3O\nWUrTMGyQyEKYe5Q0myXqx6uDRJGn/Q4k98/U1M+TymqO/9DV1DUGiU5U389JWq2e\n6rPViLfAMW2S+ypao9fBoQZV7d5JeG69delb0xIaWLsk7VuruPjZx0kInHjd8U5g\nNzqpSPnEqdq+S7wsPUk217o1NUOxlVUVmi4NKw50nOaWe84XECCcQ48XmsLrX0iw\nF5V5jujmXSgW9Gxfy3kk\n=OZHo\n-----END PGP SIGNATURE-----",
        "payload": "tree 31f0f5b238e1685b9a212f6b2ab67e48a4047f52\nparent 01148bd4172311affac3aab6a981c16fa4fa56fd\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1495908721 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1495908721 +0200\n\nf'BIP8: Separated THRESHOLD_LOCKED_IN_BY_TIMEOUT state'\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f88e5dcdc6bdd3e6ba4d57eb4ef0dd0fd7726e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f88e5dcdc6bdd3e6ba4d57eb4ef0dd0fd7726e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f88e5dcdc6bdd3e6ba4d57eb4ef0dd0fd7726e5/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "01148bd4172311affac3aab6a981c16fa4fa56fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01148bd4172311affac3aab6a981c16fa4fa56fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01148bd4172311affac3aab6a981c16fa4fa56fd"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0cd1b1eacd1b4a1b83f2be8c91b6fcd04538a14f",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f88e5dcdc6bdd3e6ba4d57eb4ef0dd0fd7726e5/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f88e5dcdc6bdd3e6ba4d57eb4ef0dd0fd7726e5/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=2f88e5dcdc6bdd3e6ba4d57eb4ef0dd0fd7726e5",
        "patch": "@@ -71,7 +71,7 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n             }\n             case THRESHOLD_STARTED: {\n                 if (pindexPrev->GetMedianTimePast() >= nTimeTimeout) {\n-                    stateNext = (fLockInOnTimeout == false) ? THRESHOLD_FAILED : THRESHOLD_LOCKED_IN_BY_TIMEOUT;\n+                    stateNext = fLockInOnTimeout ? THRESHOLD_LOCKED_IN_BY_TIMEOUT : THRESHOLD_FAILED;\n                     break;\n                 }\n                 // We need to count"
      }
    ]
  }
]