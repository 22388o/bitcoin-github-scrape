[
  {
    "sha": "82dee87933ed0714976ff4eb9657acfc13c6de84",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MmRlZTg3OTMzZWQwNzE0OTc2ZmY0ZWI5NjU3YWNmYzEzYzZkZTg0",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-07-26T11:07:45Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-07-26T11:25:16Z"
      },
      "message": "test: test decodepsbt fee calculation (count input value only once per UTXO)\n\nChecks that the RPC decodepsbt calculates the fee correctly, in particular for\nPSBTs with segwit inputs that have both a witness- and a non-witness-UTXO type\nset. Before commit 75122780e2c46505d977e24c5612dfa9442ab754 (\"Increment input\nvalue sum only once per UTXO in decodepsbt\") the values for those inputs were\ndouble counted.",
      "tree": {
        "sha": "57960ba3575bea25943a38b11bef8a7558065226",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57960ba3575bea25943a38b11bef8a7558065226"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82dee87933ed0714976ff4eb9657acfc13c6de84",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82dee87933ed0714976ff4eb9657acfc13c6de84",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/82dee87933ed0714976ff4eb9657acfc13c6de84",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82dee87933ed0714976ff4eb9657acfc13c6de84/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40a04814d130dfc9131af3f568eb44533e2bcbfc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40a04814d130dfc9131af3f568eb44533e2bcbfc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40a04814d130dfc9131af3f568eb44533e2bcbfc"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4d985dd1b185ecbfeb372df4dc928270b75352a5",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82dee87933ed0714976ff4eb9657acfc13c6de84/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82dee87933ed0714976ff4eb9657acfc13c6de84/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=82dee87933ed0714976ff4eb9657acfc13c6de84",
        "patch": "@@ -155,12 +155,14 @@ def run_test(self):\n                 p2pkh_pos = out['n']\n \n         # spend single key from node 1\n-        rawtx = self.nodes[1].walletcreatefundedpsbt([{\"txid\":txid,\"vout\":p2wpkh_pos},{\"txid\":txid,\"vout\":p2sh_p2wpkh_pos},{\"txid\":txid,\"vout\":p2pkh_pos}], {self.nodes[1].getnewaddress():29.99})['psbt']\n-        walletprocesspsbt_out = self.nodes[1].walletprocesspsbt(rawtx)\n+        created_psbt = self.nodes[1].walletcreatefundedpsbt([{\"txid\":txid,\"vout\":p2wpkh_pos},{\"txid\":txid,\"vout\":p2sh_p2wpkh_pos},{\"txid\":txid,\"vout\":p2pkh_pos}], {self.nodes[1].getnewaddress():29.99})\n+        walletprocesspsbt_out = self.nodes[1].walletprocesspsbt(created_psbt['psbt'])\n         # Make sure it has both types of UTXOs\n         decoded = self.nodes[1].decodepsbt(walletprocesspsbt_out['psbt'])\n         assert 'non_witness_utxo' in decoded['inputs'][0]\n         assert 'witness_utxo' in decoded['inputs'][0]\n+        # Check decodepsbt fee calculation (input values shall only be counted once per UTXO)\n+        assert_equal(decoded['fee'], created_psbt['fee'])\n         assert_equal(walletprocesspsbt_out['complete'], True)\n         self.nodes[1].sendrawtransaction(self.nodes[1].finalizepsbt(walletprocesspsbt_out['psbt'])['hex'])\n "
      }
    ]
  }
]