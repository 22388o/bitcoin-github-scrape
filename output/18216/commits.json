[
  {
    "sha": "df37377e30678ac9b8338ea920e50b7296da6bd5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjM3Mzc3ZTMwNjc4YWM5YjgzMzhlYTkyMGU1MGI3Mjk2ZGE2YmQ1",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2020-02-27T23:20:31Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2020-05-08T18:18:43Z"
      },
      "message": "test: Fix outstanding -Wsign-compare errors",
      "tree": {
        "sha": "71f19d59320fd191f990a9e1b449d60459e17550",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71f19d59320fd191f990a9e1b449d60459e17550"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df37377e30678ac9b8338ea920e50b7296da6bd5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAl61ooQACgkQTYykuhgE\nCQYNGA//SxZQ0OeQBbqf5SiDBQUVUqZFK9r3NsDB9i1xafYePJRTg13JG+1x9War\nDjlDTGqDpD5qKJTM68BQDwm7pjougzZQCrIazcEjA9kSIewDexMpS2hAbp6KcwaY\nRf7Wg0/2xLEA9a2fsPBcKVhAp7XFC4qtFfCEJDoSefP/OBTM53MPhGPfS6IcJV8j\n0M2VulXnu++jjQ5yIPti/hhyfXYzV/SUgxpEF41EWZNvy4rvHwM8YmPKjEevVuMG\nL3q989fxlTt5G1yiyRUMSRqnwgpvYvvV3DtBxtjbKuVr7mdqv/3ZPYvlpqgnLwpB\ntPmEN95kIbxJ74PZWmATc7jgNypZj4IX1j6b1fMYxgDFg4OT+I6KbJj9NyqBpojA\nqNEaZkifMK20YyKs4U9OQ4MmwD4arLWqZK7OpIjZVBcZBPrnZZI5stYec9CfD/6p\n+Y7Jry7koFlFbL61xlTbD3NWa35vLpmAe50HG8JnkMfgzBVAz1SV8n9I3O6feLmH\nNe7qNf36cw1INXVhzzOZTYdnS5li6mdNbZTD+2+oSD/VTgGtWFVbV5beTu2s8pyM\nLy0KPi7oliN/UrR75zu0A9e1fl/AsqGC5UbyrH0PQyDaHBAx8l/ugeZJsFcGwkpM\nBjQ1AZ6yjuZMDvWvCRzm180cRzytJXit+G+dOh/1beZpudmkg+8=\n=EPJT\n-----END PGP SIGNATURE-----",
        "payload": "tree 71f19d59320fd191f990a9e1b449d60459e17550\nparent 5b24f6084ede92d0f493ff416b4726245140b2c1\nauthor Ben Woosley <ben.woosley@gmail.com> 1582845631 -0800\ncommitter Ben Woosley <ben.woosley@gmail.com> 1588961923 -0700\n\ntest: Fix outstanding -Wsign-compare errors\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df37377e30678ac9b8338ea920e50b7296da6bd5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df37377e30678ac9b8338ea920e50b7296da6bd5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df37377e30678ac9b8338ea920e50b7296da6bd5/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b24f6084ede92d0f493ff416b4726245140b2c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b24f6084ede92d0f493ff416b4726245140b2c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b24f6084ede92d0f493ff416b4726245140b2c1"
      }
    ],
    "stats": {
      "total": 149,
      "additions": 75,
      "deletions": 74
    },
    "files": [
      {
        "sha": "e5043f68167b3facc692cb6ff9682c73aa3251ae",
        "filename": "src/test/blockfilter_index_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df37377e30678ac9b8338ea920e50b7296da6bd5/src/test/blockfilter_index_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df37377e30678ac9b8338ea920e50b7296da6bd5/src/test/blockfilter_index_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_index_tests.cpp?ref=df37377e30678ac9b8338ea920e50b7296da6bd5",
        "patch": "@@ -43,8 +43,8 @@ static bool CheckFilterLookups(BlockFilterIndex& filter_index, const CBlockIndex\n     BOOST_CHECK(filter_index.LookupFilterHashRange(block_index->nHeight, block_index,\n                                                    filter_hashes));\n \n-    BOOST_CHECK_EQUAL(filters.size(), 1);\n-    BOOST_CHECK_EQUAL(filter_hashes.size(), 1);\n+    BOOST_CHECK_EQUAL(filters.size(), 1U);\n+    BOOST_CHECK_EQUAL(filter_hashes.size(), 1U);\n \n     BOOST_CHECK_EQUAL(filter.GetHash(), expected_filter.GetHash());\n     BOOST_CHECK_EQUAL(filter_header, expected_filter.ComputeHeader(last_header));\n@@ -255,8 +255,9 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n     BOOST_CHECK(filter_index.LookupFilterRange(0, tip, filters));\n     BOOST_CHECK(filter_index.LookupFilterHashRange(0, tip, filter_hashes));\n \n-    BOOST_CHECK_EQUAL(filters.size(), tip->nHeight + 1);\n-    BOOST_CHECK_EQUAL(filter_hashes.size(), tip->nHeight + 1);\n+    assert(tip->nHeight >= 0);\n+    BOOST_CHECK_EQUAL(filters.size(), tip->nHeight + 1U);\n+    BOOST_CHECK_EQUAL(filter_hashes.size(), tip->nHeight + 1U);\n \n     filters.clear();\n     filter_hashes.clear();"
      },
      {
        "sha": "178c261365fe41f11d78d1622495f9de22b0456c",
        "filename": "src/test/blockfilter_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df37377e30678ac9b8338ea920e50b7296da6bd5/src/test/blockfilter_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df37377e30678ac9b8338ea920e50b7296da6bd5/src/test/blockfilter_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_tests.cpp?ref=df37377e30678ac9b8338ea920e50b7296da6bd5",
        "patch": "@@ -42,14 +42,14 @@ BOOST_AUTO_TEST_CASE(gcsfilter_test)\n BOOST_AUTO_TEST_CASE(gcsfilter_default_constructor)\n {\n     GCSFilter filter;\n-    BOOST_CHECK_EQUAL(filter.GetN(), 0);\n-    BOOST_CHECK_EQUAL(filter.GetEncoded().size(), 1);\n+    BOOST_CHECK_EQUAL(filter.GetN(), 0U);\n+    BOOST_CHECK_EQUAL(filter.GetEncoded().size(), 1U);\n \n     const GCSFilter::Params& params = filter.GetParams();\n-    BOOST_CHECK_EQUAL(params.m_siphash_k0, 0);\n-    BOOST_CHECK_EQUAL(params.m_siphash_k1, 0);\n+    BOOST_CHECK_EQUAL(params.m_siphash_k0, 0U);\n+    BOOST_CHECK_EQUAL(params.m_siphash_k1, 0U);\n     BOOST_CHECK_EQUAL(params.m_P, 0);\n-    BOOST_CHECK_EQUAL(params.m_M, 1);\n+    BOOST_CHECK_EQUAL(params.m_M, 1U);\n }\n \n BOOST_AUTO_TEST_CASE(blockfilter_basic_test)"
      },
      {
        "sha": "736c260eeb3fbbe62e14e49978cb87e81ecd2071",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df37377e30678ac9b8338ea920e50b7296da6bd5/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df37377e30678ac9b8338ea920e50b7296da6bd5/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=df37377e30678ac9b8338ea920e50b7296da6bd5",
        "patch": "@@ -488,7 +488,7 @@ BOOST_AUTO_TEST_CASE(rolling_bloom)\n             ++nHits;\n     }\n     // Expect about 100 hits\n-    BOOST_CHECK_EQUAL(nHits, 75);\n+    BOOST_CHECK_EQUAL(nHits, 75U);\n \n     BOOST_CHECK(rb1.contains(data[DATASIZE-1]));\n     rb1.reset();\n@@ -516,7 +516,7 @@ BOOST_AUTO_TEST_CASE(rolling_bloom)\n             ++nHits;\n     }\n     // Expect about 5 false positives\n-    BOOST_CHECK_EQUAL(nHits, 6);\n+    BOOST_CHECK_EQUAL(nHits, 6U);\n \n     // last-1000-entry, 0.01% false positive:\n     CRollingBloomFilter rb2(1000, 0.001);"
      },
      {
        "sha": "4ddbc8338e96b149ae1e3158561dd63060f59628",
        "filename": "src/test/compress_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df37377e30678ac9b8338ea920e50b7296da6bd5/src/test/compress_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df37377e30678ac9b8338ea920e50b7296da6bd5/src/test/compress_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/compress_tests.cpp?ref=df37377e30678ac9b8338ea920e50b7296da6bd5",
        "patch": "@@ -70,14 +70,14 @@ BOOST_AUTO_TEST_CASE(compress_script_to_ckey_id)\n     CPubKey pubkey = key.GetPubKey();\n \n     CScript script = CScript() << OP_DUP << OP_HASH160 << ToByteVector(pubkey.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n-    BOOST_CHECK_EQUAL(script.size(), 25);\n+    BOOST_CHECK_EQUAL(script.size(), 25U);\n \n     std::vector<unsigned char> out;\n     bool done = CompressScript(script, out);\n     BOOST_CHECK_EQUAL(done, true);\n \n     // Check compressed script\n-    BOOST_CHECK_EQUAL(out.size(), 21);\n+    BOOST_CHECK_EQUAL(out.size(), 21U);\n     BOOST_CHECK_EQUAL(out[0], 0x00);\n     BOOST_CHECK_EQUAL(memcmp(&out[1], &script[3], 20), 0); // compare the 20 relevant chars of the CKeyId in the script\n }\n@@ -87,14 +87,14 @@ BOOST_AUTO_TEST_CASE(compress_script_to_cscript_id)\n     // case CScriptID\n     CScript script, redeemScript;\n     script << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n-    BOOST_CHECK_EQUAL(script.size(), 23);\n+    BOOST_CHECK_EQUAL(script.size(), 23U);\n \n     std::vector<unsigned char> out;\n     bool done = CompressScript(script, out);\n     BOOST_CHECK_EQUAL(done, true);\n \n     // Check compressed script\n-    BOOST_CHECK_EQUAL(out.size(), 21);\n+    BOOST_CHECK_EQUAL(out.size(), 21U);\n     BOOST_CHECK_EQUAL(out[0], 0x01);\n     BOOST_CHECK_EQUAL(memcmp(&out[1], &script[2], 20), 0); // compare the 20 relevant chars of the CScriptId in the script\n }\n@@ -105,14 +105,14 @@ BOOST_AUTO_TEST_CASE(compress_script_to_compressed_pubkey_id)\n     key.MakeNewKey(true); // case compressed PubKeyID\n \n     CScript script = CScript() << ToByteVector(key.GetPubKey()) << OP_CHECKSIG; // COMPRESSED_PUBLIC_KEY_SIZE (33)\n-    BOOST_CHECK_EQUAL(script.size(), 35);\n+    BOOST_CHECK_EQUAL(script.size(), 35U);\n \n     std::vector<unsigned char> out;\n     bool done = CompressScript(script, out);\n     BOOST_CHECK_EQUAL(done, true);\n \n     // Check compressed script\n-    BOOST_CHECK_EQUAL(out.size(), 33);\n+    BOOST_CHECK_EQUAL(out.size(), 33U);\n     BOOST_CHECK_EQUAL(memcmp(&out[0], &script[1], 1), 0);\n     BOOST_CHECK_EQUAL(memcmp(&out[1], &script[2], 32), 0); // compare the 32 chars of the compressed CPubKey\n }\n@@ -122,14 +122,14 @@ BOOST_AUTO_TEST_CASE(compress_script_to_uncompressed_pubkey_id)\n     CKey key;\n     key.MakeNewKey(false); // case uncompressed PubKeyID\n     CScript script =  CScript() << ToByteVector(key.GetPubKey()) << OP_CHECKSIG; // PUBLIC_KEY_SIZE (65)\n-    BOOST_CHECK_EQUAL(script.size(), 67);                   // 1 char code + 65 char pubkey + OP_CHECKSIG\n+    BOOST_CHECK_EQUAL(script.size(), 67U);                   // 1 char code + 65 char pubkey + OP_CHECKSIG\n \n     std::vector<unsigned char> out;\n     bool done = CompressScript(script, out);\n     BOOST_CHECK_EQUAL(done, true);\n \n     // Check compressed script\n-    BOOST_CHECK_EQUAL(out.size(), 33);\n+    BOOST_CHECK_EQUAL(out.size(), 33U);\n     BOOST_CHECK_EQUAL(memcmp(&out[1], &script[2], 32), 0); // first 32 chars of CPubKey are copied into out[1:]\n     BOOST_CHECK_EQUAL(out[0], 0x04 | (script[65] & 0x01)); // least significant bit (lsb) of last char of pubkey is mapped into out[0]\n }"
      },
      {
        "sha": "5f9a78ceb2fa51bb3105088fb0f15ababc8fa79d",
        "filename": "src/test/descriptor_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df37377e30678ac9b8338ea920e50b7296da6bd5/src/test/descriptor_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df37377e30678ac9b8338ea920e50b7296da6bd5/src/test/descriptor_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/descriptor_tests.cpp?ref=df37377e30678ac9b8338ea920e50b7296da6bd5",
        "patch": "@@ -232,7 +232,7 @@ void DoCheck(const std::string& prv, const std::string& pub, int flags, const st\n                 std::vector<CScript> spks_inferred;\n                 FlatSigningProvider provider_inferred;\n                 BOOST_CHECK(inferred->Expand(0, provider_inferred, spks_inferred, provider_inferred));\n-                BOOST_CHECK_EQUAL(spks_inferred.size(), 1);\n+                BOOST_CHECK_EQUAL(spks_inferred.size(), 1U);\n                 BOOST_CHECK(spks_inferred[0] == spks[n]);\n                 BOOST_CHECK_EQUAL(IsSolvable(provider_inferred, spks_inferred[0]), !(flags & UNSOLVABLE));\n                 BOOST_CHECK(provider_inferred.origins == script_provider.origins);"
      },
      {
        "sha": "be7484cd0b414df8f127a3cd5cc399187e3b02a5",
        "filename": "src/test/flatfile_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df37377e30678ac9b8338ea920e50b7296da6bd5/src/test/flatfile_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df37377e30678ac9b8338ea920e50b7296da6bd5/src/test/flatfile_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/flatfile_tests.cpp?ref=df37377e30678ac9b8338ea920e50b7296da6bd5",
        "patch": "@@ -93,16 +93,16 @@ BOOST_AUTO_TEST_CASE(flatfile_allocate)\n \n     bool out_of_space;\n \n-    BOOST_CHECK_EQUAL(seq.Allocate(FlatFilePos(0, 0), 1, out_of_space), 100);\n-    BOOST_CHECK_EQUAL(fs::file_size(seq.FileName(FlatFilePos(0, 0))), 100);\n+    BOOST_CHECK_EQUAL(seq.Allocate(FlatFilePos(0, 0), 1, out_of_space), 100U);\n+    BOOST_CHECK_EQUAL(fs::file_size(seq.FileName(FlatFilePos(0, 0))), 100U);\n     BOOST_CHECK(!out_of_space);\n \n-    BOOST_CHECK_EQUAL(seq.Allocate(FlatFilePos(0, 99), 1, out_of_space), 0);\n-    BOOST_CHECK_EQUAL(fs::file_size(seq.FileName(FlatFilePos(0, 99))), 100);\n+    BOOST_CHECK_EQUAL(seq.Allocate(FlatFilePos(0, 99), 1, out_of_space), 0U);\n+    BOOST_CHECK_EQUAL(fs::file_size(seq.FileName(FlatFilePos(0, 99))), 100U);\n     BOOST_CHECK(!out_of_space);\n \n-    BOOST_CHECK_EQUAL(seq.Allocate(FlatFilePos(0, 99), 2, out_of_space), 101);\n-    BOOST_CHECK_EQUAL(fs::file_size(seq.FileName(FlatFilePos(0, 99))), 200);\n+    BOOST_CHECK_EQUAL(seq.Allocate(FlatFilePos(0, 99), 2, out_of_space), 101U);\n+    BOOST_CHECK_EQUAL(fs::file_size(seq.FileName(FlatFilePos(0, 99))), 200U);\n     BOOST_CHECK(!out_of_space);\n }\n \n@@ -116,11 +116,11 @@ BOOST_AUTO_TEST_CASE(flatfile_flush)\n \n     // Flush without finalize should not truncate file.\n     seq.Flush(FlatFilePos(0, 1));\n-    BOOST_CHECK_EQUAL(fs::file_size(seq.FileName(FlatFilePos(0, 1))), 100);\n+    BOOST_CHECK_EQUAL(fs::file_size(seq.FileName(FlatFilePos(0, 1))), 100U);\n \n     // Flush with finalize should truncate file.\n     seq.Flush(FlatFilePos(0, 1), true);\n-    BOOST_CHECK_EQUAL(fs::file_size(seq.FileName(FlatFilePos(0, 1))), 1);\n+    BOOST_CHECK_EQUAL(fs::file_size(seq.FileName(FlatFilePos(0, 1))), 1U);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "2e1972cc3f7aa6f42de55822e2faf5e5ada6c35b",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df37377e30678ac9b8338ea920e50b7296da6bd5/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df37377e30678ac9b8338ea920e50b7296da6bd5/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=df37377e30678ac9b8338ea920e50b7296da6bd5",
        "patch": "@@ -393,7 +393,7 @@ BOOST_AUTO_TEST_CASE(netpermissions_test)\n     BOOST_CHECK(NetWhitelistPermissions::TryParse(\"bloom,forcerelay,noban,relay,mempool@1.2.3.4/32\", whitelistPermissions, error));\n \n     const auto strings = NetPermissions::ToStrings(PF_ALL);\n-    BOOST_CHECK_EQUAL(strings.size(), 5);\n+    BOOST_CHECK_EQUAL(strings.size(), 5U);\n     BOOST_CHECK(std::find(strings.begin(), strings.end(), \"bloomfilter\") != strings.end());\n     BOOST_CHECK(std::find(strings.begin(), strings.end(), \"forcerelay\") != strings.end());\n     BOOST_CHECK(std::find(strings.begin(), strings.end(), \"relay\") != strings.end());"
      },
      {
        "sha": "d1f60e8972220298fc0e3a7201fb4943cd549611",
        "filename": "src/test/random_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df37377e30678ac9b8338ea920e50b7296da6bd5/src/test/random_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df37377e30678ac9b8338ea920e50b7296da6bd5/src/test/random_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/random_tests.cpp?ref=df37377e30678ac9b8338ea920e50b7296da6bd5",
        "patch": "@@ -127,7 +127,7 @@ BOOST_AUTO_TEST_CASE(shuffle_stat_test)\n     }\n     BOOST_CHECK(chi_score > 58.1411); // 99.9999% confidence interval\n     BOOST_CHECK(chi_score < 210.275);\n-    BOOST_CHECK_EQUAL(sum, 12000);\n+    BOOST_CHECK_EQUAL(sum, 12000U);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "c509a252e0561bf18ec53d97596be122b641eba5",
        "filename": "src/test/streams_tests.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df37377e30678ac9b8338ea920e50b7296da6bd5/src/test/streams_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df37377e30678ac9b8338ea920e50b7296da6bd5/src/test/streams_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/streams_tests.cpp?ref=df37377e30678ac9b8338ea920e50b7296da6bd5",
        "patch": "@@ -72,28 +72,28 @@ BOOST_AUTO_TEST_CASE(streams_vector_reader)\n     std::vector<unsigned char> vch = {1, 255, 3, 4, 5, 6};\n \n     VectorReader reader(SER_NETWORK, INIT_PROTO_VERSION, vch, 0);\n-    BOOST_CHECK_EQUAL(reader.size(), 6);\n+    BOOST_CHECK_EQUAL(reader.size(), 6U);\n     BOOST_CHECK(!reader.empty());\n \n     // Read a single byte as an unsigned char.\n     unsigned char a;\n     reader >> a;\n     BOOST_CHECK_EQUAL(a, 1);\n-    BOOST_CHECK_EQUAL(reader.size(), 5);\n+    BOOST_CHECK_EQUAL(reader.size(), 5U);\n     BOOST_CHECK(!reader.empty());\n \n     // Read a single byte as a signed char.\n     signed char b;\n     reader >> b;\n     BOOST_CHECK_EQUAL(b, -1);\n-    BOOST_CHECK_EQUAL(reader.size(), 4);\n+    BOOST_CHECK_EQUAL(reader.size(), 4U);\n     BOOST_CHECK(!reader.empty());\n \n     // Read a 4 bytes as an unsigned int.\n     unsigned int c;\n     reader >> c;\n-    BOOST_CHECK_EQUAL(c, 100992003); // 3,4,5,6 in little-endian base-256\n-    BOOST_CHECK_EQUAL(reader.size(), 0);\n+    BOOST_CHECK_EQUAL(c, 100992003U); // 3,4,5,6 in little-endian base-256\n+    BOOST_CHECK_EQUAL(reader.size(), 0U);\n     BOOST_CHECK(reader.empty());\n \n     // Reading after end of byte vector throws an error.\n@@ -104,7 +104,7 @@ BOOST_AUTO_TEST_CASE(streams_vector_reader)\n     VectorReader new_reader(SER_NETWORK, INIT_PROTO_VERSION, vch, 0);\n     new_reader >> d;\n     BOOST_CHECK_EQUAL(d, 67370753); // 1,255,3,4 in little-endian base-256\n-    BOOST_CHECK_EQUAL(new_reader.size(), 2);\n+    BOOST_CHECK_EQUAL(new_reader.size(), 2U);\n     BOOST_CHECK(!new_reader.empty());\n \n     // Reading after end of byte vector throws an error even if the reader is\n@@ -136,14 +136,14 @@ BOOST_AUTO_TEST_CASE(bitstream_reader_writer)\n     BOOST_CHECK_EQUAL(serialized_int2, (uint16_t)0x1072); // NOTE: Serialized as LE\n \n     BitStreamReader<CDataStream> bit_reader(data_copy);\n-    BOOST_CHECK_EQUAL(bit_reader.Read(1), 0);\n-    BOOST_CHECK_EQUAL(bit_reader.Read(2), 2);\n-    BOOST_CHECK_EQUAL(bit_reader.Read(3), 6);\n-    BOOST_CHECK_EQUAL(bit_reader.Read(4), 11);\n-    BOOST_CHECK_EQUAL(bit_reader.Read(5), 1);\n-    BOOST_CHECK_EQUAL(bit_reader.Read(6), 32);\n-    BOOST_CHECK_EQUAL(bit_reader.Read(7), 7);\n-    BOOST_CHECK_EQUAL(bit_reader.Read(16), 30497);\n+    BOOST_CHECK_EQUAL(bit_reader.Read(1), 0U);\n+    BOOST_CHECK_EQUAL(bit_reader.Read(2), 2U);\n+    BOOST_CHECK_EQUAL(bit_reader.Read(3), 6U);\n+    BOOST_CHECK_EQUAL(bit_reader.Read(4), 11U);\n+    BOOST_CHECK_EQUAL(bit_reader.Read(5), 1U);\n+    BOOST_CHECK_EQUAL(bit_reader.Read(6), 32U);\n+    BOOST_CHECK_EQUAL(bit_reader.Read(7), 7U);\n+    BOOST_CHECK_EQUAL(bit_reader.Read(16), 30497U);\n     BOOST_CHECK_THROW(bit_reader.Read(8), std::ios_base::failure);\n }\n \n@@ -236,7 +236,7 @@ BOOST_AUTO_TEST_CASE(streams_buffered_file)\n     BOOST_CHECK_EQUAL(i, 1);\n \n     // After reading bytes 0 and 1, we're positioned at 2.\n-    BOOST_CHECK_EQUAL(bf.GetPos(), 2);\n+    BOOST_CHECK_EQUAL(bf.GetPos(), 2U);\n \n     // Rewind to offset 0, ok (within the 10 byte window).\n     BOOST_CHECK(bf.SetPos(0));\n@@ -263,18 +263,18 @@ BOOST_AUTO_TEST_CASE(streams_buffered_file)\n     // The default argument removes the limit completely.\n     BOOST_CHECK(bf.SetLimit());\n     // The read position should still be at 3 (no change).\n-    BOOST_CHECK_EQUAL(bf.GetPos(), 3);\n+    BOOST_CHECK_EQUAL(bf.GetPos(), 3U);\n \n     // Read from current offset, 3, forward until position 10.\n     for (uint8_t j = 3; j < 10; ++j) {\n         bf >> i;\n         BOOST_CHECK_EQUAL(i, j);\n     }\n-    BOOST_CHECK_EQUAL(bf.GetPos(), 10);\n+    BOOST_CHECK_EQUAL(bf.GetPos(), 10U);\n \n     // We're guaranteed (just barely) to be able to rewind to zero.\n     BOOST_CHECK(bf.SetPos(0));\n-    BOOST_CHECK_EQUAL(bf.GetPos(), 0);\n+    BOOST_CHECK_EQUAL(bf.GetPos(), 0U);\n     bf >> i;\n     BOOST_CHECK_EQUAL(i, 0);\n \n@@ -284,12 +284,12 @@ BOOST_AUTO_TEST_CASE(streams_buffered_file)\n     BOOST_CHECK(bf.SetPos(10));\n     bf >> i;\n     BOOST_CHECK_EQUAL(i, 10);\n-    BOOST_CHECK_EQUAL(bf.GetPos(), 11);\n+    BOOST_CHECK_EQUAL(bf.GetPos(), 11U);\n \n     // Now it's only guaranteed that we can rewind to offset 1\n     // (current read position, 11, minus rewind amount, 10).\n     BOOST_CHECK(bf.SetPos(1));\n-    BOOST_CHECK_EQUAL(bf.GetPos(), 1);\n+    BOOST_CHECK_EQUAL(bf.GetPos(), 1U);\n     bf >> i;\n     BOOST_CHECK_EQUAL(i, 1);\n \n@@ -303,7 +303,7 @@ BOOST_AUTO_TEST_CASE(streams_buffered_file)\n             BOOST_CHECK_EQUAL(a[j], 11 + j);\n         }\n     }\n-    BOOST_CHECK_EQUAL(bf.GetPos(), 40);\n+    BOOST_CHECK_EQUAL(bf.GetPos(), 40U);\n \n     // We've read the entire file, the next read should throw.\n     try {\n@@ -317,11 +317,11 @@ BOOST_AUTO_TEST_CASE(streams_buffered_file)\n     BOOST_CHECK(bf.eof());\n \n     // Still at offset 40, we can go back 10, to 30.\n-    BOOST_CHECK_EQUAL(bf.GetPos(), 40);\n+    BOOST_CHECK_EQUAL(bf.GetPos(), 40U);\n     BOOST_CHECK(bf.SetPos(30));\n     bf >> i;\n     BOOST_CHECK_EQUAL(i, 30);\n-    BOOST_CHECK_EQUAL(bf.GetPos(), 31);\n+    BOOST_CHECK_EQUAL(bf.GetPos(), 31U);\n \n     // We're too far to rewind to position zero.\n     BOOST_CHECK(!bf.SetPos(0));"
      },
      {
        "sha": "cf26ca3adbbf7f537a36883763af6867c5ac4c6e",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df37377e30678ac9b8338ea920e50b7296da6bd5/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df37377e30678ac9b8338ea920e50b7296da6bd5/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=df37377e30678ac9b8338ea920e50b7296da6bd5",
        "patch": "@@ -240,9 +240,9 @@ class CheckValueTest : public TestChain100Setup\n         BOOST_CHECK_EQUAL(test.GetSetting(\"-value\").write(), expect.setting.write());\n         auto settings_list = test.GetSettingsList(\"-value\");\n         if (expect.setting.isNull() || expect.setting.isFalse()) {\n-            BOOST_CHECK_EQUAL(settings_list.size(), 0);\n+            BOOST_CHECK_EQUAL(settings_list.size(), 0U);\n         } else {\n-            BOOST_CHECK_EQUAL(settings_list.size(), 1);\n+            BOOST_CHECK_EQUAL(settings_list.size(), 1U);\n             BOOST_CHECK_EQUAL(settings_list[0].write(), expect.setting.write());\n         }\n \n@@ -1911,27 +1911,27 @@ BOOST_AUTO_TEST_CASE(test_spanparsing)\n \n     input = \"xxx\";\n     results = Split(MakeSpan(input), 'x');\n-    BOOST_CHECK_EQUAL(results.size(), 4);\n+    BOOST_CHECK_EQUAL(results.size(), 4U);\n     BOOST_CHECK_EQUAL(SpanToStr(results[0]), \"\");\n     BOOST_CHECK_EQUAL(SpanToStr(results[1]), \"\");\n     BOOST_CHECK_EQUAL(SpanToStr(results[2]), \"\");\n     BOOST_CHECK_EQUAL(SpanToStr(results[3]), \"\");\n \n     input = \"one#two#three\";\n     results = Split(MakeSpan(input), '-');\n-    BOOST_CHECK_EQUAL(results.size(), 1);\n+    BOOST_CHECK_EQUAL(results.size(), 1U);\n     BOOST_CHECK_EQUAL(SpanToStr(results[0]), \"one#two#three\");\n \n     input = \"one#two#three\";\n     results = Split(MakeSpan(input), '#');\n-    BOOST_CHECK_EQUAL(results.size(), 3);\n+    BOOST_CHECK_EQUAL(results.size(), 3U);\n     BOOST_CHECK_EQUAL(SpanToStr(results[0]), \"one\");\n     BOOST_CHECK_EQUAL(SpanToStr(results[1]), \"two\");\n     BOOST_CHECK_EQUAL(SpanToStr(results[2]), \"three\");\n \n     input = \"*foo*bar*\";\n     results = Split(MakeSpan(input), '*');\n-    BOOST_CHECK_EQUAL(results.size(), 4);\n+    BOOST_CHECK_EQUAL(results.size(), 4U);\n     BOOST_CHECK_EQUAL(SpanToStr(results[0]), \"\");\n     BOOST_CHECK_EQUAL(SpanToStr(results[1]), \"foo\");\n     BOOST_CHECK_EQUAL(SpanToStr(results[2]), \"bar\");\n@@ -1990,24 +1990,24 @@ BOOST_AUTO_TEST_CASE(test_tracked_vector)\n     BOOST_CHECK(t3.origin == &t3);\n \n     auto v1 = Vector(t1);\n-    BOOST_CHECK_EQUAL(v1.size(), 1);\n+    BOOST_CHECK_EQUAL(v1.size(), 1U);\n     BOOST_CHECK(v1[0].origin == &t1);\n     BOOST_CHECK_EQUAL(v1[0].copies, 1);\n \n     auto v2 = Vector(std::move(t2));\n-    BOOST_CHECK_EQUAL(v2.size(), 1);\n+    BOOST_CHECK_EQUAL(v2.size(), 1U);\n     BOOST_CHECK(v2[0].origin == &t2);\n     BOOST_CHECK_EQUAL(v2[0].copies, 0);\n \n     auto v3 = Vector(t1, std::move(t2));\n-    BOOST_CHECK_EQUAL(v3.size(), 2);\n+    BOOST_CHECK_EQUAL(v3.size(), 2U);\n     BOOST_CHECK(v3[0].origin == &t1);\n     BOOST_CHECK(v3[1].origin == &t2);\n     BOOST_CHECK_EQUAL(v3[0].copies, 1);\n     BOOST_CHECK_EQUAL(v3[1].copies, 0);\n \n     auto v4 = Vector(std::move(v3[0]), v3[1], std::move(t3));\n-    BOOST_CHECK_EQUAL(v4.size(), 3);\n+    BOOST_CHECK_EQUAL(v4.size(), 3U);\n     BOOST_CHECK(v4[0].origin == &t1);\n     BOOST_CHECK(v4[1].origin == &t2);\n     BOOST_CHECK(v4[2].origin == &t3);\n@@ -2016,7 +2016,7 @@ BOOST_AUTO_TEST_CASE(test_tracked_vector)\n     BOOST_CHECK_EQUAL(v4[2].copies, 0);\n \n     auto v5 = Cat(v1, v4);\n-    BOOST_CHECK_EQUAL(v5.size(), 4);\n+    BOOST_CHECK_EQUAL(v5.size(), 4U);\n     BOOST_CHECK(v5[0].origin == &t1);\n     BOOST_CHECK(v5[1].origin == &t1);\n     BOOST_CHECK(v5[2].origin == &t2);\n@@ -2027,7 +2027,7 @@ BOOST_AUTO_TEST_CASE(test_tracked_vector)\n     BOOST_CHECK_EQUAL(v5[3].copies, 1);\n \n     auto v6 = Cat(std::move(v1), v3);\n-    BOOST_CHECK_EQUAL(v6.size(), 3);\n+    BOOST_CHECK_EQUAL(v6.size(), 3U);\n     BOOST_CHECK(v6[0].origin == &t1);\n     BOOST_CHECK(v6[1].origin == &t1);\n     BOOST_CHECK(v6[2].origin == &t2);\n@@ -2036,7 +2036,7 @@ BOOST_AUTO_TEST_CASE(test_tracked_vector)\n     BOOST_CHECK_EQUAL(v6[2].copies, 1);\n \n     auto v7 = Cat(v2, std::move(v4));\n-    BOOST_CHECK_EQUAL(v7.size(), 4);\n+    BOOST_CHECK_EQUAL(v7.size(), 4U);\n     BOOST_CHECK(v7[0].origin == &t2);\n     BOOST_CHECK(v7[1].origin == &t1);\n     BOOST_CHECK(v7[2].origin == &t2);\n@@ -2047,7 +2047,7 @@ BOOST_AUTO_TEST_CASE(test_tracked_vector)\n     BOOST_CHECK_EQUAL(v7[3].copies, 0);\n \n     auto v8 = Cat(std::move(v2), std::move(v3));\n-    BOOST_CHECK_EQUAL(v8.size(), 3);\n+    BOOST_CHECK_EQUAL(v8.size(), 3U);\n     BOOST_CHECK(v8[0].origin == &t2);\n     BOOST_CHECK(v8[1].origin == &t1);\n     BOOST_CHECK(v8[2].origin == &t2);"
      },
      {
        "sha": "4dcc080b2df785e11b14385d1c1a62c315519a2c",
        "filename": "src/test/util_threadnames_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df37377e30678ac9b8338ea920e50b7296da6bd5/src/test/util_threadnames_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df37377e30678ac9b8338ea920e50b7296da6bd5/src/test/util_threadnames_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_threadnames_tests.cpp?ref=df37377e30678ac9b8338ea920e50b7296da6bd5",
        "patch": "@@ -62,7 +62,7 @@ BOOST_AUTO_TEST_CASE(util_threadnames_test_rename_threaded)\n \n     std::set<std::string> names = RenameEnMasse(100);\n \n-    BOOST_CHECK_EQUAL(names.size(), 100);\n+    BOOST_CHECK_EQUAL(names.size(), 100U);\n \n     // Names \"test_thread.[n]\" should exist for n = [0, 99]\n     for (int i = 0; i < 100; ++i) {"
      },
      {
        "sha": "a863e3a4d547a7617a80a53051d08105701fed63",
        "filename": "src/test/validation_flush_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df37377e30678ac9b8338ea920e50b7296da6bd5/src/test/validation_flush_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df37377e30678ac9b8338ea920e50b7296da6bd5/src/test/validation_flush_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_flush_tests.cpp?ref=df37377e30678ac9b8338ea920e50b7296da6bd5",
        "patch": "@@ -46,7 +46,7 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n     // (prevector<28, unsigned char>) when assigned 56 bytes of data per above.\n     //\n     // See also: Coin::DynamicMemoryUsage().\n-    constexpr int COIN_SIZE = is_64_bit ? 80 : 64;\n+    constexpr unsigned int COIN_SIZE = is_64_bit ? 80 : 64;\n \n     auto print_view_mem_usage = [](CCoinsViewCache& view) {\n         BOOST_TEST_MESSAGE(\"CCoinsViewCache memory usage: \" << view.DynamicMemoryUsage());\n@@ -79,7 +79,7 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n     }\n \n     print_view_mem_usage(view);\n-    BOOST_CHECK_EQUAL(view.DynamicMemoryUsage(), is_64_bit ? 32 : 16);\n+    BOOST_CHECK_EQUAL(view.DynamicMemoryUsage(), is_64_bit ? 32U : 16U);\n \n     // We should be able to add COINS_UNTIL_CRITICAL coins to the cache before going CRITICAL.\n     // This is contingent not only on the dynamic memory usage of the Coins"
      },
      {
        "sha": "d888b8f8424cb2a6658fedd7ac21028f4462d20c",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df37377e30678ac9b8338ea920e50b7296da6bd5/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df37377e30678ac9b8338ea920e50b7296da6bd5/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=df37377e30678ac9b8338ea920e50b7296da6bd5",
        "patch": "@@ -742,8 +742,8 @@ BOOST_FIXTURE_TEST_CASE(CreateWalletFromFile, TestChain100Setup)\n     BOOST_CHECK_EQUAL(addtx_count, 2);\n     {\n         LOCK(wallet->cs_wallet);\n-        BOOST_CHECK_EQUAL(wallet->mapWallet.count(block_tx.GetHash()), 1);\n-        BOOST_CHECK_EQUAL(wallet->mapWallet.count(mempool_tx.GetHash()), 1);\n+        BOOST_CHECK_EQUAL(wallet->mapWallet.count(block_tx.GetHash()), 1U);\n+        BOOST_CHECK_EQUAL(wallet->mapWallet.count(mempool_tx.GetHash()), 1U);\n     }\n \n \n@@ -779,8 +779,8 @@ BOOST_FIXTURE_TEST_CASE(CreateWalletFromFile, TestChain100Setup)\n     BOOST_CHECK_EQUAL(addtx_count, 4);\n     {\n         LOCK(wallet->cs_wallet);\n-        BOOST_CHECK_EQUAL(wallet->mapWallet.count(block_tx.GetHash()), 1);\n-        BOOST_CHECK_EQUAL(wallet->mapWallet.count(mempool_tx.GetHash()), 1);\n+        BOOST_CHECK_EQUAL(wallet->mapWallet.count(block_tx.GetHash()), 1U);\n+        BOOST_CHECK_EQUAL(wallet->mapWallet.count(mempool_tx.GetHash()), 1U);\n     }\n \n "
      }
    ]
  },
  {
    "sha": "eac6a3080d38cfd4eb7204ecd327df213958e51a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYWM2YTMwODBkMzhjZmQ0ZWI3MjA0ZWNkMzI3ZGYyMTM5NThlNTFh",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2020-02-28T01:35:31Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2020-05-09T07:20:00Z"
      },
      "message": "refactor: Rework asmap Interpret to avoid ptrdiff_t",
      "tree": {
        "sha": "847fd15defda06d83404870d88c2f60a51f4c8c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/847fd15defda06d83404870d88c2f60a51f4c8c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eac6a3080d38cfd4eb7204ecd327df213958e51a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAl62WaEACgkQTYykuhgE\nCQY8JQ/9E9XTGLNKF0yUfw2l4DXl3rL4HvaFoqYfS2a1kTUiwBeAnz1QqVshHEsA\nHxKPAaZuyycmLPq0Imil9YtLqIIyOb8yUpFjDnlhBDDsU303s2DiGfrbBxRZR5dQ\nV+vCr7tnY7NRyI3iFIoiysuwn6gc6vAwBzpVt6fGf8Upv3TSHzAPdueDnvSsXbFO\nqTm0d08oNDQj9/WfCBUR0jzvwYFuKkmOewblJvGHVkQpAIRU/Qy/Mvy4oZLUbf+D\njg/Ca1MtRD6tyan2sfnpad0yDbUESJK4f/3k0+8/+mCOEfHL0hAG/zsGosG029zG\n52j0EmJQhJyQzkpMV15aSIIKENG1WJ/2S3olVgo10ff54jJeg8G8Q4uSaH8X3uEi\nSf+lX9E7qj3D+WWlFINLaCxlsDxSSB25BnQ9SRESaY66kSOivMUuyYlPxP0eszo4\nbpU+6lO1r8WY9ixZgN90MTLTsgH3B4ordLtJqB6tczVN6PmXTyqPEWEcEolbtujF\n/kVPd22jH1rbSFvnQ2LY895pAbSZ5SOKSVrq8MiNWCuaryF+iXHMHK6B4RxXteR2\nu8AISe7aRFT3uvHYjGYaodct5443cMySKaAxNB3dNslqttf66+abZmeCa1IqxABT\n12NeyrrFN4NMSonUDQa2oAgqaBt353LtdMQQYkP5vABsIbF67+U=\n=quXG\n-----END PGP SIGNATURE-----",
        "payload": "tree 847fd15defda06d83404870d88c2f60a51f4c8c3\nparent df37377e30678ac9b8338ea920e50b7296da6bd5\nauthor Ben Woosley <ben.woosley@gmail.com> 1582853731 -0800\ncommitter Ben Woosley <ben.woosley@gmail.com> 1589008800 -0700\n\nrefactor: Rework asmap Interpret to avoid ptrdiff_t\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eac6a3080d38cfd4eb7204ecd327df213958e51a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eac6a3080d38cfd4eb7204ecd327df213958e51a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eac6a3080d38cfd4eb7204ecd327df213958e51a/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df37377e30678ac9b8338ea920e50b7296da6bd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df37377e30678ac9b8338ea920e50b7296da6bd5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df37377e30678ac9b8338ea920e50b7296da6bd5"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "bd77d7421850d07631f505402c3e0701eeb55750",
        "filename": "src/util/asmap.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eac6a3080d38cfd4eb7204ecd327df213958e51a/src/util/asmap.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eac6a3080d38cfd4eb7204ecd327df213958e51a/src/util/asmap.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/asmap.cpp?ref=eac6a3080d38cfd4eb7204ecd327df213958e51a",
        "patch": "@@ -93,7 +93,8 @@ uint32_t Interpret(const std::vector<bool> &asmap, const std::vector<bool> &ip)\n             jump = DecodeJump(pos, endpos);\n             if (jump == INVALID) break; // Jump offset straddles EOF\n             if (bits == 0) break; // No input bits left\n-            if (jump >= endpos - pos) break; // Jumping past EOF\n+            if (pos + jump < pos) break; // overflow\n+            if (pos + jump >= endpos) break; // Jumping past EOF\n             if (ip[ip.size() - bits]) {\n                 pos += jump;\n             }\n@@ -155,7 +156,8 @@ bool SanityCheckASMap(const std::vector<bool>& asmap, int bits)\n         } else if (opcode == Instruction::JUMP) {\n             uint32_t jump = DecodeJump(pos, endpos);\n             if (jump == INVALID) return false; // Jump offset straddles EOF\n-            if (jump > endpos - pos) return false; // Jump out of range\n+            if (pos + jump < pos) return false; // overflow\n+            if (pos + jump > endpos) return false; // Jump out of range\n             if (bits == 0) return false; // Consuming bits past the end of the input\n             --bits;\n             uint32_t jump_offset = pos - begin + jump;"
      }
    ]
  },
  {
    "sha": "68537275bd91d1dc14a69609ae443f955bfdbd64",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODUzNzI3NWJkOTFkMWRjMTRhNjk2MDlhZTQ0M2Y5NTViZmRiZDY0",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2020-02-27T23:38:03Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2020-05-09T07:20:09Z"
      },
      "message": "build: Enable -Werror=sign-compare\n\nExplicitly add -Wsign-compare as well - not required for all compilers, as GCC activates it\nunder -Wall, but may impact clang, etc.",
      "tree": {
        "sha": "50c6ab8fd18b258148bb1a82ceaea5a779dc48b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/50c6ab8fd18b258148bb1a82ceaea5a779dc48b3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/68537275bd91d1dc14a69609ae443f955bfdbd64",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAl62WakACgkQTYykuhgE\nCQbLtRAAm4+8lyv5fJ8a7gV8aIlq0M3fTFuAB//0d5YXIw0wpzzt0Afe38O2Y45y\nhLUBH06S0laQe4Pjhv+e6z/c09CJzcgJW7zIFLrG18mFVfR9I2pm4yibEab677J0\nuzINMvwatIjjqAYnoETpDlpWon1tx/FLh8wogC7wK4HF/yNlJ24ypdxOlv3VNU3Q\nUTO1Vw2D+zeXHdMPdaDzVgQyhYGllQTBqhPGAQ73dXDEJTr+75t0TsO+UVOEJjw8\nkgMa+xnr12mptIHMdpDkTEnWfwDlWIQVHg+Z3sWG04zLT/qhKOxY0C/QwehQFN9A\n0gP8la9o544GmQe2g3A1+L+0zInBnAXahaXSiLf2cRl4/Say6MDxEItf8ASkwbiy\nYEqEsKR8yAKsaxQIqBGqhRPyU0nOZkkko/tbI6kXohzz2Sh4l6JXhl3N2aROhYoZ\ntcZ5Q6WPv31YiBRm1VhDZdQEOlRtNzQ4OS1/OU36gt0JiZEBivnuSwEtuoLh4Vm1\npUbS3n1t8etLDjhu8yjfCAG+71pz0Sjy4sr3u7S0TAe/KxrWF81+KVncDVlfvc3r\n0nYFFXIU714cWEYUU0MEkweaxUIjFr/alp8FFa1NR4eb5+FxlvRcqxBOR2Pbk3NK\ngHfY6Lj9SLfFYjBJYsZastT1XL6wVnlXyF3fTwxUin0GYfY1BrQ=\n=JKur\n-----END PGP SIGNATURE-----",
        "payload": "tree 50c6ab8fd18b258148bb1a82ceaea5a779dc48b3\nparent eac6a3080d38cfd4eb7204ecd327df213958e51a\nauthor Ben Woosley <ben.woosley@gmail.com> 1582846683 -0800\ncommitter Ben Woosley <ben.woosley@gmail.com> 1589008809 -0700\n\nbuild: Enable -Werror=sign-compare\n\nExplicitly add -Wsign-compare as well - not required for all compilers, as GCC activates it\nunder -Wall, but may impact clang, etc.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68537275bd91d1dc14a69609ae443f955bfdbd64",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/68537275bd91d1dc14a69609ae443f955bfdbd64",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68537275bd91d1dc14a69609ae443f955bfdbd64/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eac6a3080d38cfd4eb7204ecd327df213958e51a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eac6a3080d38cfd4eb7204ecd327df213958e51a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eac6a3080d38cfd4eb7204ecd327df213958e51a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "569b5a298ea9f8e07beaa2c9afdfe88e1e54266d",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68537275bd91d1dc14a69609ae443f955bfdbd64/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68537275bd91d1dc14a69609ae443f955bfdbd64/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=68537275bd91d1dc14a69609ae443f955bfdbd64",
        "patch": "@@ -367,6 +367,7 @@ if test \"x$enable_werror\" = \"xyes\"; then\n   AX_CHECK_COMPILE_FLAG([-Werror=date-time],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=date-time\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Werror=return-type],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=return-type\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Werror=conditional-uninitialized],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=conditional-uninitialized\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Werror=sign-compare],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=sign-compare\"],,[[$CXXFLAG_WERROR]])\n fi\n \n if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n@@ -383,6 +384,7 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wunused-variable],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wunused-variable\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wdate-time],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wdate-time\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wconditional-uninitialized],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wconditional-uninitialized\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wsign-compare],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wsign-compare\"],,[[$CXXFLAG_WERROR]])\n \n   dnl Some compilers (gcc) ignore unknown -Wno-* options, but warn about all\n   dnl unknown options if any other warning is produced. Test the -Wfoo case, and"
      }
    ]
  }
]