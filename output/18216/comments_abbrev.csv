fanquake,2020-02-28 00:44:08,"This is failing on the [ARM64 Travis build](https://travis-ci.org/bitcoin/bitcoin/jobs/656025562):\n```bash\n  CXX      util/libbitcoin_util_a-asmap.o\n  CXX      util/libbitcoin_util_a-bip32.o\nutil/asmap.cpp: In function ‘uint32_t Interpret(const std::vector<bool>&, const std::vector<bool>&)’:\nutil/asmap.cpp:82:26: error: comparison of integer expressions of different signedness: ‘uint32_t",https://github.com/bitcoin/bitcoin/pull/18216#issuecomment-592252298,592252298,
Empact,2020-02-28 03:07:13,"@fanquake Thanks, addressed with https://github.com/bitcoin/bitcoin/pull/18216/commits/f35268db8308140b4bd94ab73a704bb4aa6fbe05",https://github.com/bitcoin/bitcoin/pull/18216#issuecomment-592288811,592288811,
DrahtBot,2020-02-28 05:06:35,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18857 (build: avoid repetitions when enabling warnings in configure.ac by vasild)\n* #18468 (Span improvements by sipa)\n",https://github.com/bitcoin/bitcoin/pull/18216#issuecomment-592316073,592316073,
practicalswift,2020-02-29 20:12:56,"Thanks for doing this! I'm confident that adding `-Werror=sign-compare` to `--enable-werror` will prevent a non-zero number of bugs hitting `master` in the future: strong concept ACK! :)\n\nI've reviewed the code and my only suggestion is to add `-Wsign-compare` as part of our set of default diagnostics. That way developers will have a chance of resolving any sign-compare issues before PR submis",https://github.com/bitcoin/bitcoin/pull/18216#issuecomment-592989498,592989498,
practicalswift,2020-02-29 20:16:56,"> I'm confident that adding `-Werror=sign-compare` to `--enable-werror` will prevent a non-zero number of bugs hitting `master` in the future: strong concept ACK! :)\n\nFWIW -- [CVE-2017-18350](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-November/017453.html) was signedness related:\n\n_""CVE-2017-18350 is a buffer overflow vulnerability which allows a malicious \nSOCKS proxy ",https://github.com/bitcoin/bitcoin/pull/18216#issuecomment-592989877,592989877,
hebasto,2020-03-10 15:23:48,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/18216#issuecomment-597146755,597146755,
hebasto,2020-03-10 22:28:37,"Tested on macOS 10.15.3:\n```\n% clang --version | head -1  \nApple clang version 11.0.0 (clang-1100.0.33.17)\n% brew info boost | head -1  \nboost: stable 1.72.0 (bottled), HEAD\n% make > /dev/null           \n/Library/Developer/CommandLineTools/usr/bin/ranlib: file: libbitcoin_util.a(libbitcoin_util_a-strnlen.o) has no symbols\n/Library/Developer/CommandLineTools/usr/bin/ranlib: file: li",https://github.com/bitcoin/bitcoin/pull/18216#issuecomment-597351844,597351844,
practicalswift,2020-03-11 06:45:16,ACK acee61494d50d2821003dde6c888b9ed3ed1ddce modulo `assert` - see @hebasto's question above which needs to be addressed :),https://github.com/bitcoin/bitcoin/pull/18216#issuecomment-597470195,597470195,
MarcoFalke,2020-04-22 20:11:26,Can remove some of the lines in `test/sanitizer_suppressions/ubsan` now?,https://github.com/bitcoin/bitcoin/pull/18216#issuecomment-618013453,618013453,
MarcoFalke,2020-04-22 21:25:00,Could also split up the test changes to merge them in the fast track? The Core changes seem controversial for now.,https://github.com/bitcoin/bitcoin/pull/18216#issuecomment-618048754,618048754,
practicalswift,2020-04-23 10:42:34,ACK b8a6a2de910aed711026a8114be5391135beedb3 -- patch looks correct,https://github.com/bitcoin/bitcoin/pull/18216#issuecomment-618327967,618327967,
fjahr,2020-04-23 11:47:10,"tACK b8a6a2de910aed711026a8114be5391135beedb3\n\nThanks for doing this, compiling on macOS will be without warnings again thanks to this (see https://traviszci.org/github/bitcoin/bitcoin/jobs/678210021#L2026 for example). Not sure why these only showed up on macOS and not on Linux previously.",https://github.com/bitcoin/bitcoin/pull/18216#issuecomment-618355369,618355369,
vasild,2020-04-23 18:42:58,"utACK ba1b64a\n\nIt is good to expand the reach of `-Werror=`",https://github.com/bitcoin/bitcoin/pull/18216#issuecomment-618583153,618583153,
Empact,2020-05-08 18:22:35,Rebased for #18512,https://github.com/bitcoin/bitcoin/pull/18216#issuecomment-625951131,625951131,
practicalswift,2020-05-08 20:06:47,"@Empact Looks good, but this one needs to be fixed for the ARM job to succeed :)\n\n```\nutil/asmap.cpp: In function ‘bool SanityCheckASMap(const std::vector<bool>&, int)’:\nutil/asmap.cpp:159:22: error: comparison of integer expressions of different signedness: ‘uint32_t’ {aka ‘unsigned int’} and ‘std::ptrdiff_t’ {aka ‘int’} [-Werror=sign-compare]\n             if (jump > endpos - pos) retur",https://github.com/bitcoin/bitcoin/pull/18216#issuecomment-625995684,625995684,
hebasto,2020-05-09 03:35:19,"> @Empact Looks good, but this one needs to be fixed for the ARM job to succeed :)\n> \n> ```\n> util/asmap.cpp: In function ‘bool SanityCheckASMap(const std::vector<bool>&, int)’:\n> util/asmap.cpp:159:22: error: comparison of integer expressions of different signedness: ‘uint32_t’ {aka ‘unsigned int’} and ‘std::ptrdiff_t’ {aka ‘int’} [-Werror=sign-compare]\n>              if (jump > endpos ",https://github.com/bitcoin/bitcoin/pull/18216#issuecomment-626098805,626098805,
practicalswift,2020-05-09 10:03:48,"ACK 68537275bd91d1dc14a69609ae443f955bfdbd64\n\nAs noted in earlier comments: I'm confident this change will help us catch a non-zero amount of bugs hitting `master` going forward :)",https://github.com/bitcoin/bitcoin/pull/18216#issuecomment-626141369,626141369,
fjahr,2020-05-10 13:49:18,re-ACK 68537275bd91d1dc14a69609ae443f955bfdbd64,https://github.com/bitcoin/bitcoin/pull/18216#issuecomment-626331028,626331028,
MarcoFalke,2021-04-29 06:56:51,"I went ahead and reverted the asmap changes, because they rely on UB: #21802 ",https://github.com/bitcoin/bitcoin/pull/18216#issuecomment-828986910,828986910,
hebasto,2020-03-10 21:34:05,Why this assert is needed here?,https://github.com/bitcoin/bitcoin/pull/18216#discussion_r390624653,390624653,src/util/asmap.cpp
Empact,2020-03-11 17:57:16,"I mean for that to protect against the unlikely case of overflow of `pos + jump` overflowing - if an overflow occurs, `pos + jump` will be less than `pos`.",https://github.com/bitcoin/bitcoin/pull/18216#discussion_r391159914,391159914,src/util/asmap.cpp
practicalswift,2020-03-11 17:59:04,Is the failure condition possible (`pos + jump <= pos`)? If it is possible to reach I'm not certain aborting is the right thing to do :),https://github.com/bitcoin/bitcoin/pull/18216#discussion_r391161012,391161012,src/util/asmap.cpp
laanwj,2020-04-22 13:04:24,"I don't think this should be an assert. It can be caused by incorrect input (an corrupt `asmap` file), not just developer errors. We shouldn't use assert for error handling. Don't we have other ways of reporting an error here?",https://github.com/bitcoin/bitcoin/pull/18216#discussion_r412963356,412963356,src/util/asmap.cpp
Empact,2020-04-23 02:12:44,"Updated to `break` which results in returning `0`, which is not a valid ASN.",https://github.com/bitcoin/bitcoin/pull/18216#discussion_r413457552,413457552,src/util/asmap.cpp
vasild,2020-04-23 11:24:29,"It is not necessary to add `-Wsign-compare` because it is enabled by `-Wall` in gcc and by `-Wextra` in clang. Just a few lines above we enable both `-Wall` and `-Wextra`.\n\nhttps://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wsign-compare\nhttps://clang.llvm.org/docs/DiagnosticsReference.html#wextra\n\nThis was explicitly requested by @practicalswift, but maybe he did not realize ",https://github.com/bitcoin/bitcoin/pull/18216#discussion_r413734029,413734029,configure.ac
vasild,2020-04-23 11:41:43,"Shouldn't the added check for overflow be inside `if (ip[ip.size() - bits])`? If we don't get inside that `if` then we don't care whether it overflows because we would not do the arithmetic that would overflow.\n\nnit: only 2 spaces used for indentation, the rest of the code uses 4.",https://github.com/bitcoin/bitcoin/pull/18216#discussion_r413743911,413743911,src/util/asmap.cpp
Empact,2020-04-23 18:31:20,"Fixed, thanks.",https://github.com/bitcoin/bitcoin/pull/18216#discussion_r414028845,414028845,src/util/asmap.cpp
Empact,2020-04-23 18:32:58,Leaving as it seems harmless to me.,https://github.com/bitcoin/bitcoin/pull/18216#discussion_r414029975,414029975,configure.ac
