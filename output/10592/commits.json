[
  {
    "sha": "78109933357fdc386b75f2629d9345c215f2978f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODEwOTkzMzM1N2ZkYzM4NmI3NWYyNjI5ZDkzNDVjMjE1ZjI5Nzhm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-14T21:13:00Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-14T21:13:00Z"
      },
      "message": "[trivial] fix indentation for ArgsManager class",
      "tree": {
        "sha": "8e36010d5e4fc6500efeaf13f051b99c4d20c8ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e36010d5e4fc6500efeaf13f051b99c4d20c8ef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78109933357fdc386b75f2629d9345c215f2978f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78109933357fdc386b75f2629d9345c215f2978f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78109933357fdc386b75f2629d9345c215f2978f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78109933357fdc386b75f2629d9345c215f2978f/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "228c319a944b0ba7c835b1909ee1c2056c652eb1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/228c319a944b0ba7c835b1909ee1c2056c652eb1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/228c319a944b0ba7c835b1909ee1c2056c652eb1"
      }
    ],
    "stats": {
      "total": 111,
      "additions": 56,
      "deletions": 55
    },
    "files": [
      {
        "sha": "f40db84a10bd5db25624502ca7834b92de061075",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 56,
        "deletions": 55,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78109933357fdc386b75f2629d9345c215f2978f/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78109933357fdc386b75f2629d9345c215f2978f/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=78109933357fdc386b75f2629d9345c215f2978f",
        "patch": "@@ -187,62 +187,63 @@ class ArgsManager\n     void ParseParameters(int argc, const char*const argv[]);\n     void ReadConfigFile(const std::string& confPath);\n     std::vector<std::string> GetArgs(const std::string& strArg);\n-/**\n- * Return true if the given argument has been manually set\n- *\n- * @param strArg Argument to get (e.g. \"-foo\")\n- * @return true if the argument has been set\n- */\n-bool IsArgSet(const std::string& strArg);\n-\n-/**\n- * Return string argument or default value\n- *\n- * @param strArg Argument to get (e.g. \"-foo\")\n- * @param default (e.g. \"1\")\n- * @return command-line argument or default value\n- */\n-std::string GetArg(const std::string& strArg, const std::string& strDefault);\n-\n-/**\n- * Return integer argument or default value\n- *\n- * @param strArg Argument to get (e.g. \"-foo\")\n- * @param default (e.g. 1)\n- * @return command-line argument (0 if invalid number) or default value\n- */\n-int64_t GetArg(const std::string& strArg, int64_t nDefault);\n-\n-/**\n- * Return boolean argument or default value\n- *\n- * @param strArg Argument to get (e.g. \"-foo\")\n- * @param default (true or false)\n- * @return command-line argument or default value\n- */\n-bool GetBoolArg(const std::string& strArg, bool fDefault);\n-\n-/**\n- * Set an argument if it doesn't already have a value\n- *\n- * @param strArg Argument to set (e.g. \"-foo\")\n- * @param strValue Value (e.g. \"1\")\n- * @return true if argument gets set, false if it already had a value\n- */\n-bool SoftSetArg(const std::string& strArg, const std::string& strValue);\n-\n-/**\n- * Set a boolean argument if it doesn't already have a value\n- *\n- * @param strArg Argument to set (e.g. \"-foo\")\n- * @param fValue Value (e.g. false)\n- * @return true if argument gets set, false if it already had a value\n- */\n-bool SoftSetBoolArg(const std::string& strArg, bool fValue);\n \n-// Forces an arg setting. Called by SoftSetArg() if the arg hasn't already\n-// been set. Also called directly in testing.\n-void ForceSetArg(const std::string& strArg, const std::string& strValue);\n+    /**\n+     * Return true if the given argument has been manually set\n+     *\n+     * @param strArg Argument to get (e.g. \"-foo\")\n+     * @return true if the argument has been set\n+     */\n+    bool IsArgSet(const std::string& strArg);\n+\n+    /**\n+     * Return string argument or default value\n+     *\n+     * @param strArg Argument to get (e.g. \"-foo\")\n+     * @param default (e.g. \"1\")\n+     * @return command-line argument or default value\n+     */\n+    std::string GetArg(const std::string& strArg, const std::string& strDefault);\n+\n+    /**\n+     * Return integer argument or default value\n+     *\n+     * @param strArg Argument to get (e.g. \"-foo\")\n+     * @param default (e.g. 1)\n+     * @return command-line argument (0 if invalid number) or default value\n+     */\n+    int64_t GetArg(const std::string& strArg, int64_t nDefault);\n+\n+    /**\n+     * Return boolean argument or default value\n+     *\n+     * @param strArg Argument to get (e.g. \"-foo\")\n+     * @param default (true or false)\n+     * @return command-line argument or default value\n+     */\n+    bool GetBoolArg(const std::string& strArg, bool fDefault);\n+\n+    /**\n+     * Set an argument if it doesn't already have a value\n+     *\n+     * @param strArg Argument to set (e.g. \"-foo\")\n+     * @param strValue Value (e.g. \"1\")\n+     * @return true if argument gets set, false if it already had a value\n+     */\n+    bool SoftSetArg(const std::string& strArg, const std::string& strValue);\n+\n+    /**\n+     * Set a boolean argument if it doesn't already have a value\n+     *\n+     * @param strArg Argument to set (e.g. \"-foo\")\n+     * @param fValue Value (e.g. false)\n+     * @return true if argument gets set, false if it already had a value\n+     */\n+    bool SoftSetBoolArg(const std::string& strArg, bool fValue);\n+\n+    // Forces an arg setting. Called by SoftSetArg() if the arg hasn't already\n+    // been set. Also called directly in testing.\n+    void ForceSetArg(const std::string& strArg, const std::string& strValue);\n };\n \n extern ArgsManager gArgs;"
      }
    ]
  }
]