[
  {
    "sha": "6f1d01eb1561fdfcddb13f09681a6c2946e48f17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjFkMDFlYjE1NjFmZGZjZGRiMTNmMDk2ODFhNmMyOTQ2ZTQ4ZjE3",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-05-31T13:29:40Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-06-06T09:32:46Z"
      },
      "message": "[Qt] prefer CRecipient over std::pair like in walletmodel\n\n- this updates Qt code to core code, where CRecipient is used in wallet\n- also makes things e.g. in paymentserver.cpp much more readable",
      "tree": {
        "sha": "4bd9e299290dfcd32be48bfff097ca17d2042198",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4bd9e299290dfcd32be48bfff097ca17d2042198"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f1d01eb1561fdfcddb13f09681a6c2946e48f17",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f1d01eb1561fdfcddb13f09681a6c2946e48f17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f1d01eb1561fdfcddb13f09681a6c2946e48f17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f1d01eb1561fdfcddb13f09681a6c2946e48f17/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "606ba62d88ff58c7c5f0b3cd619999e03bc4f6a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/606ba62d88ff58c7c5f0b3cd619999e03bc4f6a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/606ba62d88ff58c7c5f0b3cd619999e03bc4f6a2"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 30,
      "deletions": 23
    },
    "files": [
      {
        "sha": "57119e9ed6a635f54cdd84c0228aab3b7de75452",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f1d01eb1561fdfcddb13f09681a6c2946e48f17/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f1d01eb1561fdfcddb13f09681a6c2946e48f17/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=6f1d01eb1561fdfcddb13f09681a6c2946e48f17",
        "patch": "@@ -10,6 +10,7 @@\n #include \"paymentrequestplus.h\"\n \n #include \"util.h\"\n+#include \"wallet/wallet.h\"\n \n #include <stdexcept>\n \n@@ -195,15 +196,15 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n     return fResult;\n }\n \n-QList<std::pair<CScript,CAmount> > PaymentRequestPlus::getPayTo() const\n+QList<CRecipient> PaymentRequestPlus::getPayTo() const\n {\n-    QList<std::pair<CScript,CAmount> > result;\n-    for (int i = 0; i < details.outputs_size(); i++)\n-    {\n+    QList<CRecipient> result;\n+    for (int i = 0; i < details.outputs_size(); i++) {\n         const unsigned char* scriptStr = (const unsigned char*)details.outputs(i).script().data();\n-        CScript s(scriptStr, scriptStr+details.outputs(i).script().size());\n+        CScript s(scriptStr, scriptStr + details.outputs(i).script().size());\n \n-        result.append(make_pair(s, details.outputs(i).amount()));\n+        CRecipient recipient = {s, (CAmount)details.outputs(i).amount(), false};\n+        result.append(recipient);\n     }\n     return result;\n }"
      },
      {
        "sha": "ba2f32b3fc8d73eab4694dd50f56952ca0c87892",
        "filename": "src/qt/paymentrequestplus.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f1d01eb1561fdfcddb13f09681a6c2946e48f17/src/qt/paymentrequestplus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f1d01eb1561fdfcddb13f09681a6c2946e48f17/src/qt/paymentrequestplus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.h?ref=6f1d01eb1561fdfcddb13f09681a6c2946e48f17",
        "patch": "@@ -15,6 +15,8 @@\n #include <QList>\n #include <QString>\n \n+struct CRecipient;\n+\n //\n // Wraps dumb protocol buffer paymentRequest\n // with extra methods\n@@ -34,7 +36,7 @@ class PaymentRequestPlus\n     bool getMerchant(X509_STORE* certStore, QString& merchant) const;\n \n     // Returns list of outputs, amount\n-    QList<std::pair<CScript,CAmount> > getPayTo() const;\n+    QList<CRecipient> getPayTo() const;\n \n     const payments::PaymentDetails& getDetails() const { return details; }\n "
      },
      {
        "sha": "7bb4a714d6d8fae687ee08aedffc10a9e1304b79",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f1d01eb1561fdfcddb13f09681a6c2946e48f17/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f1d01eb1561fdfcddb13f09681a6c2946e48f17/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=6f1d01eb1561fdfcddb13f09681a6c2946e48f17",
        "patch": "@@ -7,6 +7,7 @@\n #include \"bitcoinunits.h\"\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n+#include \"paymentrequestplus.h\"\n \n #include \"base58.h\"\n #include \"chainparams.h\"\n@@ -559,17 +560,16 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n \n     request.getMerchant(PaymentServer::certStore, recipient.authenticatedMerchant);\n \n-    QList<std::pair<CScript, CAmount> > sendingTos = request.getPayTo();\n+    QList<CRecipient> sendingTos = request.getPayTo();\n     QStringList addresses;\n \n-    foreach(const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n+    foreach (const CRecipient& sendingTo, sendingTos) {\n         // Extract and check destination addresses\n         CTxDestination dest;\n-        if (ExtractDestination(sendingTo.first, dest)) {\n+        if (ExtractDestination(sendingTo.scriptPubKey, dest)) {\n             // Append destination address\n             addresses.append(QString::fromStdString(CBitcoinAddress(dest).ToString()));\n-        }\n-        else if (!recipient.authenticatedMerchant.isEmpty()) {\n+        } else if (!recipient.authenticatedMerchant.isEmpty()) {\n             // Unauthenticated payment requests to custom bitcoin addresses are not supported\n             // (there is no good way to tell the user where they are paying in a way they'd\n             // have a chance of understanding).\n@@ -582,22 +582,22 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n         // Bitcoin amounts are stored as (optional) uint64 in the protobuf messages (see paymentrequest.proto),\n         // but CAmount is defined as int64_t. Because of that we need to verify that amounts are in a valid range\n         // and no overflow has happened.\n-        if (!verifyAmount(sendingTo.second)) {\n+        if (!verifyAmount(sendingTo.nAmount)) {\n             emit message(tr(\"Payment request rejected\"), tr(\"Invalid payment request.\"), CClientUIInterface::MSG_ERROR);\n             return false;\n         }\n \n         // Extract and check amounts\n-        CTxOut txOut(sendingTo.second, sendingTo.first);\n+        CTxOut txOut(sendingTo.nAmount, sendingTo.scriptPubKey);\n         if (txOut.IsDust(::minRelayTxFee)) {\n             emit message(tr(\"Payment request error\"), tr(\"Requested payment amount of %1 is too small (considered dust).\")\n-                .arg(BitcoinUnits::formatWithUnit(optionsModel->getDisplayUnit(), sendingTo.second)),\n+                .arg(BitcoinUnits::formatWithUnit(optionsModel->getDisplayUnit(), sendingTo.nAmount)),\n                 CClientUIInterface::MSG_ERROR);\n \n             return false;\n         }\n \n-        recipient.amount += sendingTo.second;\n+        recipient.amount += sendingTo.nAmount;\n         // Also verify that the final amount is still in a valid range after adding additional amounts.\n         if (!verifyAmount(recipient.amount)) {\n             emit message(tr(\"Payment request rejected\"), tr(\"Invalid payment request.\"), CClientUIInterface::MSG_ERROR);"
      },
      {
        "sha": "01fcaa064830d011492ed7295e2aa959c43a0ed7",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f1d01eb1561fdfcddb13f09681a6c2946e48f17/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f1d01eb1561fdfcddb13f09681a6c2946e48f17/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=6f1d01eb1561fdfcddb13f09681a6c2946e48f17",
        "patch": "@@ -32,13 +32,14 @@\n // sends them to the server.\n //\n \n-#include \"paymentrequestplus.h\"\n+#include \"paymentrequest.pb.h\"\n #include \"walletmodel.h\"\n \n #include <QObject>\n #include <QString>\n \n class OptionsModel;\n+class PaymentRequestPlus;\n \n class CWallet;\n "
      },
      {
        "sha": "de91527d7f7b76135049fa9101601f1a876e7e28",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f1d01eb1561fdfcddb13f09681a6c2946e48f17/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f1d01eb1561fdfcddb13f09681a6c2946e48f17/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=6f1d01eb1561fdfcddb13f09681a6c2946e48f17",
        "patch": "@@ -13,6 +13,7 @@\n #include \"script/standard.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n+#include \"wallet/wallet.h\"\n \n #include <openssl/x509.h>\n #include <openssl/x509_vfy.h>\n@@ -194,11 +195,11 @@ void PaymentServerTests::paymentServerTests()\n     // Ensure the request is initialized\n     QVERIFY(r.paymentRequest.IsInitialized());\n     // Extract address and amount from the request\n-    QList<std::pair<CScript, CAmount> > sendingTos = r.paymentRequest.getPayTo();\n-    foreach (const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n+    QList<CRecipient> sendingTos = r.paymentRequest.getPayTo();\n+    foreach (const CRecipient& sendingTo, sendingTos) {\n         CTxDestination dest;\n-        if (ExtractDestination(sendingTo.first, dest))\n-            QCOMPARE(PaymentServer::verifyAmount(sendingTo.second), false);\n+        if (ExtractDestination(sendingTo.scriptPubKey, dest))\n+            QCOMPARE(PaymentServer::verifyAmount(sendingTo.nAmount), false);\n     }\n \n     delete server;"
      },
      {
        "sha": "55b1cad3955989bfcf471383ef469aca6bd1f042",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f1d01eb1561fdfcddb13f09681a6c2946e48f17/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f1d01eb1561fdfcddb13f09681a6c2946e48f17/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=6f1d01eb1561fdfcddb13f09681a6c2946e48f17",
        "patch": "@@ -6,6 +6,7 @@\n \n #include \"bitcoinunits.h\"\n #include \"guiutil.h\"\n+#include \"paymentrequestplus.h\"\n #include \"paymentserver.h\"\n #include \"transactionrecord.h\"\n \n@@ -15,7 +16,6 @@\n #include \"script/script.h\"\n #include \"timedata.h\"\n #include \"util.h\"\n-#include \"wallet/db.h\"\n #include \"wallet/wallet.h\"\n \n #include <stdint.h>"
      },
      {
        "sha": "ad905125883d1b151c7ff3235733b53549370fd5",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f1d01eb1561fdfcddb13f09681a6c2946e48f17/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f1d01eb1561fdfcddb13f09681a6c2946e48f17/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=6f1d01eb1561fdfcddb13f09681a6c2946e48f17",
        "patch": "@@ -4,6 +4,8 @@\n \n #include \"walletmodeltransaction.h\"\n \n+#include \"walletmodel.h\"\n+\n #include \"wallet/wallet.h\"\n \n WalletModelTransaction::WalletModelTransaction(const QList<SendCoinsRecipient> &recipients) :"
      },
      {
        "sha": "19b16fdde9753b05c732dabf9f433825ace19c73",
        "filename": "src/qt/walletmodeltransaction.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f1d01eb1561fdfcddb13f09681a6c2946e48f17/src/qt/walletmodeltransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f1d01eb1561fdfcddb13f09681a6c2946e48f17/src/qt/walletmodeltransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.h?ref=6f1d01eb1561fdfcddb13f09681a6c2946e48f17",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_WALLETMODELTRANSACTION_H\n #define BITCOIN_QT_WALLETMODELTRANSACTION_H\n \n-#include \"walletmodel.h\"\n+#include \"amount.h\"\n \n #include <QObject>\n "
      }
    ]
  }
]