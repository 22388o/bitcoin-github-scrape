[
  {
    "sha": "fa0815c3005c861ba94b96412e7997c25e7f6788",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTA4MTVjMzAwNWM4NjFiYTk0Yjk2NDEyZTc5OTdjMjVlN2Y2Nzg4",
    "commit": {
      "author": {
        "name": "Jon Layton",
        "email": "me@jonl.io",
        "date": "2018-11-13T18:42:36Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-13T19:24:40Z"
      },
      "message": "rpc: Correctly name arguments",
      "tree": {
        "sha": "2208715a790996a7427ee730b1b60fed3d6c69a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2208715a790996a7427ee730b1b60fed3d6c69a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa0815c3005c861ba94b96412e7997c25e7f6788",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJb6yT4AAoJEM4rdWl+aaVIjFoL/3gbiNlJuiI5qFg+K1OBW6Jf\nDQJP5lrArEmfccVhcBP5rq7nRvhWITAXCCA6SpcPrfHkrBACRkWvSDKw9ebsU3H1\nwYmykviFKpY1+AleiGYHJ1OatAf2srEjVVXjSnMbpABifysMrOWhyXZAn9HLCUii\novv4uhsOrtXfbe+ZMH1AI8lGotRBO9ImjkMRQFe6SvZRwYpicwwITH2b+TQ8zYYP\nodjZ7S92LniClzuhaMJYhvE4qG4riDLFFKiueWVgpxYAi0rJF3XS4I1O9PfR9uQV\ns7SLWf7JPRkUOVAaBLXmT7A3w9OgFfSWs7dUcfk5I9lY5qXTOqKgmVHIaMTp7Rbr\ncWPMIyxnZlwovS3vpk2AVR8I1V43h9rM19uRIa8BM6kxtqqvK25q7yIv3f+0czuV\n9ZbsFsOXklWMRanzz3OcOZF7t76jptFA0jlLl1B0gSndQtk7pyI0HLt9sD28g7ND\nRnfbUna2in/6ZXuwzX4xJ1g9otSCz1PTj0wCPxB+rw==\n=JUoc\n-----END PGP SIGNATURE-----",
        "payload": "tree 2208715a790996a7427ee730b1b60fed3d6c69a3\nparent c651265c934c84c683aa054f2a456b12acc41590\nauthor Jon Layton <me@jonl.io> 1542134556 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1542137080 -0500\n\nrpc: Correctly name arguments\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0815c3005c861ba94b96412e7997c25e7f6788",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa0815c3005c861ba94b96412e7997c25e7f6788",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0815c3005c861ba94b96412e7997c25e7f6788/comments",
    "author": {
      "login": "ch4ot1c",
      "id": 2287825,
      "node_id": "MDQ6VXNlcjIyODc4MjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2287825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ch4ot1c",
      "html_url": "https://github.com/ch4ot1c",
      "followers_url": "https://api.github.com/users/ch4ot1c/followers",
      "following_url": "https://api.github.com/users/ch4ot1c/following{/other_user}",
      "gists_url": "https://api.github.com/users/ch4ot1c/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ch4ot1c/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ch4ot1c/subscriptions",
      "organizations_url": "https://api.github.com/users/ch4ot1c/orgs",
      "repos_url": "https://api.github.com/users/ch4ot1c/repos",
      "events_url": "https://api.github.com/users/ch4ot1c/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ch4ot1c/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c651265c934c84c683aa054f2a456b12acc41590",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c651265c934c84c683aa054f2a456b12acc41590",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c651265c934c84c683aa054f2a456b12acc41590"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 33,
      "deletions": 32
    },
    "files": [
      {
        "sha": "95915b548880841df2faecb91a9107b6dfa74492",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0815c3005c861ba94b96412e7997c25e7f6788/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0815c3005c861ba94b96412e7997c25e7f6788/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fa0815c3005c861ba94b96412e7997c25e7f6788",
        "patch": "@@ -287,12 +287,12 @@ static UniValue waitforblockheight(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"waitforblockheight <height> (timeout)\\n\"\n+            \"waitforblockheight height ( timeout )\\n\"\n             \"\\nWaits for (at least) block height and returns the height and hash\\n\"\n             \"of the current tip.\\n\"\n             \"\\nReturns the current block on timeout or exit.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. height  (required, int) Block height to wait for (int)\\n\"\n+            \"1. height  (int, required) Block height to wait for.\\n\"\n             \"2. timeout (int, optional, default=0) Time in milliseconds to wait for a response. 0 indicates no timeout.\\n\"\n             \"\\nResult:\\n\"\n             \"{                           (json object)\\n\"\n@@ -696,11 +696,11 @@ static UniValue getblockheader(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"getblockheader \\\"hash\\\" ( verbose )\\n\"\n+            \"getblockheader \\\"blockhash\\\" ( verbose )\\n\"\n             \"\\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\\n\"\n             \"If verbose is true, returns an Object with information about blockheader <hash>.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"hash\\\"          (string, required) The block hash\\n\"\n+            \"1. \\\"blockhash\\\"     (string, required) The block hash\\n\"\n             \"2. verbose           (boolean, optional, default=true) true for a json object, false for the hex-encoded data\\n\"\n             \"\\nResult (for verbose = true):\\n\"\n             \"{\\n\"\n@@ -926,7 +926,7 @@ static UniValue pruneblockchain(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n-            \"pruneblockchain\\n\"\n+            \"pruneblockchain height\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"height\\\"       (numeric, required) The block height to prune up to. May be set to a discrete height, or a unix timestamp\\n\"\n             \"                  to prune blocks whose block time is at least 2 hours older than the provided timestamp.\\n\"\n@@ -1563,7 +1563,7 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"getchaintxstats ( nblocks blockhash )\\n\"\n+            \"getchaintxstats ( nblocks \\\"blockhash\\\" )\\n\"\n             \"\\nCompute statistics about the total number and rate of transactions in the chain.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. nblocks      (numeric, optional) Size of the window in number of blocks (default: one month).\\n\"\n@@ -2040,7 +2040,7 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"scantxoutset <action> ( <scanobjects> )\\n\"\n+            \"scantxoutset \\\"action\\\" [scanobjects,...]\\n\"\n             \"\\nEXPERIMENTAL warning: this call may be removed or changed in future releases.\\n\"\n             \"\\nScans the unspent transaction output set for entries that match certain output descriptors.\\n\"\n             \"Examples of output descriptors are:\\n\""
      },
      {
        "sha": "4f314ef215ceeb28e0db4d6de5dea958809beb40",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0815c3005c861ba94b96412e7997c25e7f6788/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0815c3005c861ba94b96412e7997c25e7f6788/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fa0815c3005c861ba94b96412e7997c25e7f6788",
        "patch": "@@ -232,7 +232,7 @@ static UniValue prioritisetransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 3)\n         throw std::runtime_error(\n-            \"prioritisetransaction <txid> <dummy value> <fee delta>\\n\"\n+            \"prioritisetransaction \\\"txid\\\" dummy fee_delta\\n\"\n             \"Accepts the transaction into mined blocks at a higher (or lower) priority\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"       (string, required) The transaction id.\\n\"\n@@ -295,7 +295,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n-            \"getblocktemplate ( TemplateRequest )\\n\"\n+            \"getblocktemplate ( \\\"template_request\\\" )\\n\"\n             \"\\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\\n\"\n             \"It returns data needed to construct a block to work on.\\n\"\n             \"For full specification, see BIPs 22, 23, 9, and 145:\\n\""
      },
      {
        "sha": "fc1498a22471a2359000bfb1d6da910ec511a148",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0815c3005c861ba94b96412e7997c25e7f6788/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0815c3005c861ba94b96412e7997c25e7f6788/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=fa0815c3005c861ba94b96412e7997c25e7f6788",
        "patch": "@@ -201,7 +201,7 @@ static UniValue addnode(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 2 ||\n         (strCommand != \"onetry\" && strCommand != \"add\" && strCommand != \"remove\"))\n         throw std::runtime_error(\n-            \"addnode \\\"node\\\" \\\"add|remove|onetry\\\"\\n\"\n+            \"addnode \\\"node\\\" \\\"command\\\"\\n\"\n             \"\\nAttempts to add or remove a node from the addnode list.\\n\"\n             \"Or try a connection to a node once.\\n\"\n             \"Nodes added using addnode (or -connect) are protected from DoS disconnection and are not required to be\\n\"\n@@ -244,13 +244,13 @@ static UniValue disconnectnode(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() == 0 || request.params.size() >= 3)\n         throw std::runtime_error(\n-            \"disconnectnode \\\"[address]\\\" [nodeid]\\n\"\n+            \"disconnectnode ( \\\"address\\\" nodeid )\\n\"\n             \"\\nImmediately disconnects from the specified peer node.\\n\"\n             \"\\nStrictly one out of 'address' and 'nodeid' can be provided to identify the node.\\n\"\n             \"\\nTo disconnect by nodeid, either set 'address' to the empty string, or call using the named 'nodeid' argument only.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"     (string, optional) The IP address/port of the node\\n\"\n-            \"2. \\\"nodeid\\\"      (number, optional) The node ID (see getpeerinfo for node IDs)\\n\"\n+            \"2. nodeid        (number, optional) The node ID (see getpeerinfo for node IDs)\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"disconnectnode\", \"\\\"192.168.0.6:8333\\\"\")\n             + HelpExampleCli(\"disconnectnode\", \"\\\"\\\" 1\")\n@@ -500,7 +500,7 @@ static UniValue setban(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() < 2 ||\n         (strCommand != \"add\" && strCommand != \"remove\"))\n         throw std::runtime_error(\n-                            \"setban \\\"subnet\\\" \\\"add|remove\\\" (bantime) (absolute)\\n\"\n+                            \"setban \\\"subnet\\\" \\\"command\\\" ( bantime absolute )\\n\"\n                             \"\\nAttempts to add or remove an IP/Subnet from the banned list.\\n\"\n                             \"\\nArguments:\\n\"\n                             \"1. \\\"subnet\\\"       (string, required) The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)\\n\"\n@@ -611,7 +611,7 @@ static UniValue setnetworkactive(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1) {\n         throw std::runtime_error(\n-            \"setnetworkactive true|false\\n\"\n+            \"setnetworkactive state\\n\"\n             \"\\nDisable/enable all p2p network activity.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"state\\\"        (boolean, required) true to enable networking, false to disable\\n\""
      },
      {
        "sha": "f890baba516ff3403578f5903ceea66d7051f639",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0815c3005c861ba94b96412e7997c25e7f6788/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0815c3005c861ba94b96412e7997c25e7f6788/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=fa0815c3005c861ba94b96412e7997c25e7f6788",
        "patch": "@@ -235,7 +235,7 @@ UniValue stop(const JSONRPCRequest& jsonRequest)\n \n static UniValue uptime(const JSONRPCRequest& jsonRequest)\n {\n-    if (jsonRequest.fHelp || jsonRequest.params.size() > 1)\n+    if (jsonRequest.fHelp || jsonRequest.params.size() > 0)\n         throw std::runtime_error(\n                 \"uptime\\n\"\n                         \"\\nReturns the total uptime of the server.\\n\""
      },
      {
        "sha": "c8794f32bf21e67f9787c20138c08febc4e1c682",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0815c3005c861ba94b96412e7997c25e7f6788/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0815c3005c861ba94b96412e7997c25e7f6788/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=fa0815c3005c861ba94b96412e7997c25e7f6788",
        "patch": "@@ -348,7 +348,7 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() != 2)\n         throw std::runtime_error(\n-            \"importprunedfunds\\n\"\n+            \"importprunedfunds \\\"rawtransaction\\\" \\\"txoutproof\\\"\\n\"\n             \"\\nImports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"rawtransaction\\\" (string, required) A raw transaction in hex funding an already-existing address in wallet\\n\"\n@@ -1085,8 +1085,8 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     // clang-format off\n     if (mainRequest.fHelp || mainRequest.params.size() < 1 || mainRequest.params.size() > 2)\n         throw std::runtime_error(\n-            \"importmulti \\\"requests\\\" ( \\\"options\\\" )\\n\\n\"\n-            \"Import addresses/scripts (with private or public keys, redeem script (P2SH)), rescanning all addresses in one-shot-only (rescan can be disabled via options). Requires a new wallet backup.\\n\\n\"\n+            \"importmulti \\\"requests\\\" ( \\\"options\\\" )\\n\"\n+            \"\\nImport addresses/scripts (with private or public keys, redeem script (P2SH)), rescanning all addresses in one-shot-only (rescan can be disabled via options). Requires a new wallet backup.\\n\\n\"\n             \"Arguments:\\n\"\n             \"1. requests     (array, required) Data to be imported\\n\"\n             \"  [     (array of json objects)\\n\""
      },
      {
        "sha": "17f33db66611738ab64e8243ed37d9b19b7f6dec",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0815c3005c861ba94b96412e7997c25e7f6788/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0815c3005c861ba94b96412e7997c25e7f6788/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fa0815c3005c861ba94b96412e7997c25e7f6788",
        "patch": "@@ -693,7 +693,7 @@ static UniValue getbalance(const JSONRPCRequest& request)\n \n     if (request.fHelp || (request.params.size() > 3 ))\n         throw std::runtime_error(\n-            \"getbalance ( \\\"(dummy)\\\" minconf include_watchonly )\\n\"\n+            \"getbalance ( \\\"dummy\\\" minconf include_watchonly )\\n\"\n             \"\\nReturns the total available balance.\\n\"\n             \"The available balance is what the wallet considers currently spendable, and is\\n\"\n             \"thus affected by options which limit spendability such as -spendzeroconfchange.\\n\"\n@@ -1352,7 +1352,7 @@ UniValue listtransactions(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() > 4)\n         throw std::runtime_error(\n-            \"listtransactions (dummy count skip include_watchonly)\\n\"\n+            \"listtransactions ( \\\"dummy\\\" count skip include_watchonly)\\n\"\n             \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"dummy\\\"    (string, optional) If set, should be \\\"*\\\" for backwards compatibility.\\n\""
      },
      {
        "sha": "c162f46d63703ef19f4f04b5a2565d95cb40444e",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0815c3005c861ba94b96412e7997c25e7f6788/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0815c3005c861ba94b96412e7997c25e7f6788/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=fa0815c3005c861ba94b96412e7997c25e7f6788",
        "patch": "@@ -249,7 +249,7 @@ def height(index):\n                 return index\n \n         def prune(index, expected_ret=None):\n-            ret = node.pruneblockchain(height(index))\n+            ret = node.pruneblockchain(height=height(index))\n             # Check the return value. When use_timestamp is True, just check\n             # that the return value is less than or equal to the expected\n             # value, because when more than one block is generated per second,"
      },
      {
        "sha": "9f01be064665daaaa6f03fdfacf56664286b06a1",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0815c3005c861ba94b96412e7997c25e7f6788/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0815c3005c861ba94b96412e7997c25e7f6788/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=fa0815c3005c861ba94b96412e7997c25e7f6788",
        "patch": "@@ -30,9 +30,10 @@\n def assert_template(node, block, expect, rehash=True):\n     if rehash:\n         block.hashMerkleRoot = block.calc_merkle_root()\n-    rsp = node.getblocktemplate({'data': b2x(block.serialize()), 'mode': 'proposal'})\n+    rsp = node.getblocktemplate(template_request={'data': b2x(block.serialize()), 'mode': 'proposal'})\n     assert_equal(rsp, expect)\n \n+\n class MiningTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2"
      },
      {
        "sha": "1b11a2a2945d7da310d57aab9ea26da78bbcc399",
        "filename": "test/functional/p2p_disconnect_ban.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0815c3005c861ba94b96412e7997c25e7f6788/test/functional/p2p_disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0815c3005c861ba94b96412e7997c25e7f6788/test/functional/p2p_disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_disconnect_ban.py?ref=fa0815c3005c861ba94b96412e7997c25e7f6788",
        "patch": "@@ -22,7 +22,7 @@ def run_test(self):\n \n         self.log.info(\"setban: successfully ban single IP address\")\n         assert_equal(len(self.nodes[1].getpeerinfo()), 2)  # node1 should have 2 connections to node0 at this point\n-        self.nodes[1].setban(\"127.0.0.1\", \"add\")\n+        self.nodes[1].setban(subnet=\"127.0.0.1\", command=\"add\")\n         wait_until(lambda: len(self.nodes[1].getpeerinfo()) == 0, timeout=10)\n         assert_equal(len(self.nodes[1].getpeerinfo()), 0)  # all nodes must be disconnected at this point\n         assert_equal(len(self.nodes[1].listbanned()), 1)"
      },
      {
        "sha": "31e60f1ceafc5d66ff94b9dd2adf4ce6d808618e",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0815c3005c861ba94b96412e7997c25e7f6788/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0815c3005c861ba94b96412e7997c25e7f6788/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=fa0815c3005c861ba94b96412e7997c25e7f6788",
        "patch": "@@ -133,7 +133,7 @@ def _test_getchaintxstats(self):\n         assert_raises_rpc_error(-8, \"Block is not in main chain\", self.nodes[0].getchaintxstats, blockhash=blockhash)\n         self.nodes[0].reconsiderblock(blockhash)\n \n-        chaintxstats = self.nodes[0].getchaintxstats(1)\n+        chaintxstats = self.nodes[0].getchaintxstats(nblocks=1)\n         # 200 txs plus genesis tx\n         assert_equal(chaintxstats['txcount'], 201)\n         # tx rate should be 1 per 10 minutes, or 1/600\n@@ -211,7 +211,7 @@ def _test_getblockheader(self):\n \n         besthash = node.getbestblockhash()\n         secondbesthash = node.getblockhash(199)\n-        header = node.getblockheader(besthash)\n+        header = node.getblockheader(blockhash=besthash)\n \n         assert_equal(header['hash'], besthash)\n         assert_equal(header['height'], 200)\n@@ -287,7 +287,7 @@ def solve_and_send_block(prevhash, height, time):\n \n         def assert_waitforheight(height, timeout=2):\n             assert_equal(\n-                node.waitforblockheight(height, timeout)['height'],\n+                node.waitforblockheight(height=height, timeout=timeout)['height'],\n                 current_height)\n \n         assert_waitforheight(0)"
      },
      {
        "sha": "0affddcf05d373677fb91e07811c77b19e27d531",
        "filename": "test/functional/rpc_net.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0815c3005c861ba94b96412e7997c25e7f6788/test/functional/rpc_net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0815c3005c861ba94b96412e7997c25e7f6788/test/functional/rpc_net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_net.py?ref=fa0815c3005c861ba94b96412e7997c25e7f6788",
        "patch": "@@ -74,12 +74,12 @@ def _test_getnetworkinginfo(self):\n         assert_equal(self.nodes[0].getnetworkinfo()['networkactive'], True)\n         assert_equal(self.nodes[0].getnetworkinfo()['connections'], 2)\n \n-        self.nodes[0].setnetworkactive(False)\n+        self.nodes[0].setnetworkactive(state=False)\n         assert_equal(self.nodes[0].getnetworkinfo()['networkactive'], False)\n         # Wait a bit for all sockets to close\n         wait_until(lambda: self.nodes[0].getnetworkinfo()['connections'] == 0, timeout=3)\n \n-        self.nodes[0].setnetworkactive(True)\n+        self.nodes[0].setnetworkactive(state=True)\n         connect_nodes_bi(self.nodes, 0, 1)\n         assert_equal(self.nodes[0].getnetworkinfo()['networkactive'], True)\n         assert_equal(self.nodes[0].getnetworkinfo()['connections'], 2)\n@@ -88,7 +88,7 @@ def _test_getaddednodeinfo(self):\n         assert_equal(self.nodes[0].getaddednodeinfo(), [])\n         # add a node (node2) to node0\n         ip_port = \"127.0.0.1:{}\".format(p2p_port(2))\n-        self.nodes[0].addnode(ip_port, 'add')\n+        self.nodes[0].addnode(node=ip_port, command='add')\n         # check that the node has indeed been added\n         added_nodes = self.nodes[0].getaddednodeinfo(ip_port)\n         assert_equal(len(added_nodes), 1)"
      },
      {
        "sha": "28bdd21f20cd98a2e97386266e000ea8342f70b1",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0815c3005c861ba94b96412e7997c25e7f6788/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0815c3005c861ba94b96412e7997c25e7f6788/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=fa0815c3005c861ba94b96412e7997c25e7f6788",
        "patch": "@@ -152,7 +152,7 @@ def run_test (self):\n             \"pubkeys\": [ address['pubkey'] ],\n             \"internal\": True\n         }]\n-        result = self.nodes[1].importmulti(request)\n+        result = self.nodes[1].importmulti(requests=request)\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n@@ -167,7 +167,7 @@ def run_test (self):\n             \"timestamp\": \"now\",\n             \"pubkeys\": [ address['pubkey'] ]\n         }]\n-        result = self.nodes[1].importmulti(request)\n+        result = self.nodes[1].importmulti(requests=request)\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -8)\n         assert_equal(result[0]['error']['message'], 'Internal must be set to true for nonstandard scriptPubKey imports.')"
      },
      {
        "sha": "78426018ef2318895834c99c64504606d6c6679f",
        "filename": "test/functional/wallet_importprunedfunds.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0815c3005c861ba94b96412e7997c25e7f6788/test/functional/wallet_importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0815c3005c861ba94b96412e7997c25e7f6788/test/functional/wallet_importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importprunedfunds.py?ref=fa0815c3005c861ba94b96412e7997c25e7f6788",
        "patch": "@@ -81,7 +81,7 @@ def run_test(self):\n \n         # Import with affiliated address with no rescan\n         self.nodes[1].importaddress(address=address2, rescan=False)\n-        self.nodes[1].importprunedfunds(rawtxn2, proof2)\n+        self.nodes[1].importprunedfunds(rawtransaction=rawtxn2, txoutproof=proof2)\n         assert [tx for tx in self.nodes[1].listtransactions(include_watchonly=True) if tx['txid'] == txnid2]\n \n         # Import with private key with no rescan"
      }
    ]
  }
]