[
  {
    "sha": "e76083b3178a19b5a793f32fb37e0769d314cbc3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNzYwODNiMzE3OGExOWI1YTc5M2YzMmZiMzdlMDc2OWQzMTRjYmMz",
    "commit": {
      "author": {
        "name": "Marcin Jachymiak",
        "email": "marcin.jachymiak1@gmail.com",
        "date": "2019-01-03T22:23:03Z"
      },
      "committer": {
        "name": "Marcin Jachymiak",
        "email": "marcin.jachymiak1@gmail.com",
        "date": "2019-08-10T23:23:38Z"
      },
      "message": "Throw error in importwallet if file empty/invalid\n\nimportwallet now throws an RPC error if input file is empty, or contains\nno valid keys/scripts. Logs warnings if header/footer lines are missing\nfrom wallet dump file.",
      "tree": {
        "sha": "70249a4047772ebee6e104969069fb91de07c1b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70249a4047772ebee6e104969069fb91de07c1b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e76083b3178a19b5a793f32fb37e0769d314cbc3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e76083b3178a19b5a793f32fb37e0769d314cbc3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e76083b3178a19b5a793f32fb37e0769d314cbc3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e76083b3178a19b5a793f32fb37e0769d314cbc3/comments",
    "author": {
      "login": "marcinja",
      "id": 12243734,
      "node_id": "MDQ6VXNlcjEyMjQzNzM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/12243734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marcinja",
      "html_url": "https://github.com/marcinja",
      "followers_url": "https://api.github.com/users/marcinja/followers",
      "following_url": "https://api.github.com/users/marcinja/following{/other_user}",
      "gists_url": "https://api.github.com/users/marcinja/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marcinja/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marcinja/subscriptions",
      "organizations_url": "https://api.github.com/users/marcinja/orgs",
      "repos_url": "https://api.github.com/users/marcinja/repos",
      "events_url": "https://api.github.com/users/marcinja/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marcinja/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "marcinja",
      "id": 12243734,
      "node_id": "MDQ6VXNlcjEyMjQzNzM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/12243734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marcinja",
      "html_url": "https://github.com/marcinja",
      "followers_url": "https://api.github.com/users/marcinja/followers",
      "following_url": "https://api.github.com/users/marcinja/following{/other_user}",
      "gists_url": "https://api.github.com/users/marcinja/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marcinja/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marcinja/subscriptions",
      "organizations_url": "https://api.github.com/users/marcinja/orgs",
      "repos_url": "https://api.github.com/users/marcinja/repos",
      "events_url": "https://api.github.com/users/marcinja/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marcinja/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e47e36cb4975b332a4d9552bc73b031ab8fd6ab1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e47e36cb4975b332a4d9552bc73b031ab8fd6ab1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e47e36cb4975b332a4d9552bc73b031ab8fd6ab1"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 49,
      "deletions": 1
    },
    "files": [
      {
        "sha": "62b8dc5ebc613c51672977eed3c88daf95d32597",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 1,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e76083b3178a19b5a793f32fb37e0769d314cbc3/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e76083b3178a19b5a793f32fb37e0769d314cbc3/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=e76083b3178a19b5a793f32fb37e0769d314cbc3",
        "patch": "@@ -565,6 +565,9 @@ UniValue importwallet(const JSONRPCRequest& request)\n \n     int64_t nTimeBegin = 0;\n     bool fGood = true;\n+    bool has_footer = false; // Set to true if \"# End of dump\" is written in the file.\n+    int num_keys_imported = 0;\n+    int num_scripts_imported = 0;\n     {\n         auto locked_chain = pwallet->chain().lock();\n         LOCK(pwallet->cs_wallet);\n@@ -582,6 +585,17 @@ UniValue importwallet(const JSONRPCRequest& request)\n         int64_t nFilesize = std::max((int64_t)1, (int64_t)file.tellg());\n         file.seekg(0, file.beg);\n \n+        static const std::string HEADER_STRING = \"# Wallet dump created by Bitcoin\";\n+        if (file.good()) {\n+            std::string line;\n+            std::getline(file, line);\n+\n+            // Check that the first line has HEADER_STRING as a prefix.\n+            if (line.compare(0, HEADER_STRING.size(), HEADER_STRING) != 0) {\n+                pwallet->WalletLogPrintf(\"Wallet file missing header line. Make sure input file was created using dumpwallet.\\n\");\n+            }\n+        }\n+\n         // Use uiInterface.ShowProgress instead of pwallet.ShowProgress because pwallet.ShowProgress has a cancel button tied to AbortRescan which\n         // we don't want for this progress bar showing the import progress. uiInterface.ShowProgress does not have a cancel button.\n         pwallet->chain().showProgress(strprintf(\"%s \" + _(\"Importing...\").translated, pwallet->GetDisplayName()), 0, false); // show progress dialog in GUI\n@@ -591,8 +605,13 @@ UniValue importwallet(const JSONRPCRequest& request)\n             pwallet->chain().showProgress(\"\", std::max(1, std::min(50, (int)(((double)file.tellg() / (double)nFilesize) * 100))), false);\n             std::string line;\n             std::getline(file, line);\n-            if (line.empty() || line[0] == '#')\n+            if (line.empty()) continue;\n+\n+            static const std::string FOOTER_STRING = \"# End of dump\";\n+            if (line[0] == '#') {\n+                has_footer |= line == FOOTER_STRING;\n                 continue;\n+            }\n \n             std::vector<std::string> vstr;\n             boost::split(vstr, line, boost::is_any_of(\" \"));\n@@ -655,6 +674,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n \n             nTimeBegin = std::min(nTimeBegin, time);\n             progress++;\n+            num_keys_imported++;\n         }\n         for (const auto& script_pair : scripts) {\n             pwallet->chain().showProgress(\"\", std::max(50, std::min(75, (int)((progress / total) * 100) + 50)), false);\n@@ -671,13 +691,24 @@ UniValue importwallet(const JSONRPCRequest& request)\n             }\n \n             progress++;\n+            num_scripts_imported++;\n         }\n         pwallet->chain().showProgress(\"\", 100, false); // hide progress dialog in GUI\n     }\n     pwallet->chain().showProgress(\"\", 100, false); // hide progress dialog in GUI\n     RescanWallet(*pwallet, reserver, nTimeBegin, false /* update */);\n     pwallet->MarkDirty();\n \n+    if (!has_footer) {\n+        pwallet->WalletLogPrintf(\"Wallet file missing footer line, possibly missing some keys/scripts. Make sure input file was created using dumpwallet.\\n\");\n+    }\n+\n+    pwallet->WalletLogPrintf(\"%d keys and %d scripts imported.\\n\", num_keys_imported, num_scripts_imported);\n+\n+    if (num_keys_imported + num_scripts_imported == 0) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"No keys or scripts imported.  Input must be file created using dumpwallet.\");\n+    }\n+\n     if (!fGood)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding some keys/scripts to wallet\");\n "
      },
      {
        "sha": "c85488c7feeaf748425b31911a4f4a6b8b1c2536",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e76083b3178a19b5a793f32fb37e0769d314cbc3/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e76083b3178a19b5a793f32fb37e0769d314cbc3/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=e76083b3178a19b5a793f32fb37e0769d314cbc3",
        "patch": "@@ -102,6 +102,23 @@ def run_test(self):\n         wallet_unenc_dump = os.path.join(self.nodes[0].datadir, \"wallet.unencrypted.dump\")\n         wallet_enc_dump = os.path.join(self.nodes[0].datadir, \"wallet.encrypted.dump\")\n \n+        # Create a fake wallet dump with no header.\n+        no_header_dump = os.path.join(self.nodes[0].datadir, \"wallet.bad.dump\")\n+        with open(no_header_dump, 'w', encoding='utf8') as f:\n+            f.write(\"# Bad file\")\n+\n+        # Check that opening the bad dump file raises the corresponding RPC error.\n+        assert_raises_rpc_error(-4, \"No keys or scripts imported\", lambda: self.nodes[0].importwallet(no_header_dump))\n+\n+        # Create a fake wallet dump with no keys/scripts.\n+        no_keys_dump = os.path.join(self.nodes[0].datadir, \"wallet.nokeys.dump\")\n+        with open(no_keys_dump, 'w', encoding='utf8') as f:\n+            f.write(\"# Wallet dump created by Bitcoin\\n# No txs\\n#in here\\n\")\n+\n+        # Check that opening the dump file with no keys (but a good header)\n+        # raises the correct RPC error.\n+        assert_raises_rpc_error(-4, \"No keys or scripts imported\", lambda: self.nodes[0].importwallet(no_keys_dump))\n+\n         # generate 30 addresses to compare against the dump\n         # - 10 legacy P2PKH\n         # - 10 P2SH-segwit"
      }
    ]
  }
]