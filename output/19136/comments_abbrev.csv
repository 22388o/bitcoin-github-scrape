DrahtBot,2020-06-02 01:19:04,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19651 (wallet: importdescriptors update existing by S3RK)\n* #19602 (wallet: Migrate legacy wallets to descriptor wallets",https://github.com/bitcoin/bitcoin/pull/19136#issuecomment-637211318,637211318,
Sjors,2020-06-08 11:19:31,Do we need a whole new RPC for this? Why not expand `getaddressinfo`?,https://github.com/bitcoin/bitcoin/pull/19136#issuecomment-640541064,640541064,
meshcollider,2020-07-11 11:39:13,"Agree with Sjors, unless you have plans to somehow build upon this later, I think it might as well just be added to getaddressinfo",https://github.com/bitcoin/bitcoin/pull/19136#issuecomment-657050785,657050785,
achow101,2020-07-21 22:36:03,Changed this to be a new field `parent_desc` in `getaddressinfo`. Also rebased.,https://github.com/bitcoin/bitcoin/pull/19136#issuecomment-662141773,662141773,
Sjors,2020-08-31 12:41:18,Concept ACK. This has a silent merge conflict with either #19373 or #19660: `script/descriptor.cpp:455:34: error: no matching function for call to 'HexStr'`,https://github.com/bitcoin/bitcoin/pull/19136#issuecomment-683753659,683753659,
achow101,2020-08-31 17:12:39,"> Concept ACK. This has a silent merge conflict with either #19373 or #19660: `script/descriptor.cpp:455:34: error: no matching function for call to 'HexStr'`\n\nRebased and fixed.",https://github.com/bitcoin/bitcoin/pull/19136#issuecomment-683911531,683911531,
achow101,2020-09-14 16:46:56,"@S3RK I originally attempted an approach like that but was not able to make it work well. The problem is largely in the same place that the problem with this PR is: nested origin pubkey providers. In both this PR and your proposal, you will still have some weirdness to handle when the bip32 pubkey provider returns an origin pubkey provider, but this itself is already within an origin pubkey provid",https://github.com/bitcoin/bitcoin/pull/19136#issuecomment-692178992,692178992,
S3RK,2020-09-15 08:18:59,"@achow101 I understand that it's an intrinsic part of the logic here. However my point is that we need to strive to make that weird part as easy to understand as possible. And this is why I believe working with objects/structs is better. When you work with `KeyOriginInfo` you don't need to rely on a magic number to strip the info from a string. Even bigger issue is not even the constant itself, bu",https://github.com/bitcoin/bitcoin/pull/19136#issuecomment-692550435,692550435,
achow101,2020-09-15 15:55:47,"@S3RK If you think you have a better solution, feel free to open a PR with it. I can close this one in favor of that if it does look better.",https://github.com/bitcoin/bitcoin/pull/19136#issuecomment-692809717,692809717,
S3RK,2020-10-01 10:21:42,"> @S3RK If you think you have a better solution, feel free to open a PR with it. I can close this one in favor of that if it does look better.\n\nFor history. I tried to implement [alternative version](https://github.com/bitcoin/bitcoin/compare/master...S3RK:normalized_descriptor), and indeed it also has its own problems. Both with nested origin/bip32 providers and also with private key manageme",https://github.com/bitcoin/bitcoin/pull/19136#issuecomment-702039234,702039234,
Sjors,2020-10-09 15:11:36,utACK de6b389d5db7b8426313c5be6fbd290f992c5aa8,https://github.com/bitcoin/bitcoin/pull/19136#issuecomment-706238797,706238797,
S3RK,2021-02-09 08:36:50,"Tested ACK de6b389\n",https://github.com/bitcoin/bitcoin/pull/19136#issuecomment-775765969,775765969,
S3RK,2020-08-31 11:41:00,"I'm not sure I fully understand this part. From what I figured here you're handling a case when we wrap another `OriginPubkeyProvider`. If so, I have a few questions:\n\n1) What do we even expect to happen in such case? I can't think of realistic scenario\n2) Why handle it here if we don't handle it in other methods, like `ToPrivateString` or `ToString()`\n3) Why do you think the origin from w",https://github.com/bitcoin/bitcoin/pull/19136#discussion_r480073542,480073542,src/script/descriptor.cpp
promag,2020-08-31 13:36:33,"```cpp\nif (priv) return ToPrivateString(arg, ret);\nret = ToString();\nreturn true;\n```",https://github.com/bitcoin/bitcoin/pull/19136#discussion_r480135676,480135676,src/script/descriptor.cpp
achow101,2020-08-31 16:07:20,"The goal of `ToNormalizedString` is to create a descriptor that can be imported into another wallet. A descriptor might not be able to be imported because hardened derivation is in use. So for `BIP32PubkeyProvider::ToNormalizedString`, we are deriving the key at the last hardened step and returning that key. As we did additional derivation not present in the original descriptor, we are generating ",https://github.com/bitcoin/bitcoin/pull/19136#discussion_r480232822,480232822,src/script/descriptor.cpp
achow101,2020-08-31 17:05:36,Done,https://github.com/bitcoin/bitcoin/pull/19136#discussion_r480266150,480266150,src/script/descriptor.cpp
S3RK,2020-09-03 05:02:58,"I created and verified a test case to cover this part of code and which would have exposed the bug as well.\nFeel free to add it.\n\n```cpp\nCheck(\n""pkh([01234567/10/20]xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0)"",\n""pkh([01234567/10/20]xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv",https://github.com/bitcoin/bitcoin/pull/19136#discussion_r482705678,482705678,src/script/descriptor.cpp
achow101,2020-09-03 05:21:04,Added this test.,https://github.com/bitcoin/bitcoin/pull/19136#discussion_r482710563,482710563,src/script/descriptor.cpp
Sjors,2020-10-09 08:54:03,"Nit: `fail` -> `fails`\n\nCould document the arguments.",https://github.com/bitcoin/bitcoin/pull/19136#discussion_r502285179,502285179,src/script/descriptor.h
Sjors,2020-10-09 08:55:40,`provier` -> `provider`,https://github.com/bitcoin/bitcoin/pull/19136#discussion_r502286158,502286158,src/script/descriptor.h
Sjors,2020-10-09 09:30:22,"6f5d66d2abfe241df9f27bf2b1e62e6604918034 : I'm confused about what's going on here. I assume related to this comment:\n> you will still have some weirdness to handle when the bip32 pubkey provider returns an origin pubkey provider, but this itself is already within an origin pubkey provider.\n\nMaybe explain the ""weirdness"" in a comment, and add a comment to the relevant test vector.",https://github.com/bitcoin/bitcoin/pull/19136#discussion_r502305915,502305915,src/script/descriptor.cpp
achow101,2020-10-09 13:04:28,Fixed.,https://github.com/bitcoin/bitcoin/pull/19136#discussion_r502412344,502412344,src/script/descriptor.h
achow101,2020-10-09 13:04:34,Fixed.,https://github.com/bitcoin/bitcoin/pull/19136#discussion_r502412398,502412398,src/script/descriptor.h
achow101,2020-10-09 13:05:02,Added a comment.,https://github.com/bitcoin/bitcoin/pull/19136#discussion_r502412664,502412664,src/script/descriptor.cpp
jonatack,2020-12-31 18:08:34,"9be1437c named cast per https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#Res-casts-named\n``` suggestion\n        int i = static_cast<int>(m_path.size()) - 1;\n```",https://github.com/bitcoin/bitcoin/pull/19136#discussion_r550611741,550611741,src/script/descriptor.cpp
jonatack,2020-12-31 18:10:55,"9be1437c49f986e8ed964d5f863b4bbcec340751\n```suggestion\n        const std::string origin_str = HexStr(origin.fingerprint) + FormatHDKeypath(origin.path);\n```",https://github.com/bitcoin/bitcoin/pull/19136#discussion_r550613468,550613468,src/script/descriptor.cpp
jonatack,2020-12-31 18:13:30,"9be1437c49f986e8ed964d5f863b4bbcec340751 here and L218, maybe name the arg `out` rather than `ret` like the header file declaration and the other definitions\n```suggestion\n    bool ToNormalizedString(const SigningProvider& arg, std::string& out, bool priv) const override\n```",https://github.com/bitcoin/bitcoin/pull/19136#discussion_r550615435,550615435,src/script/descriptor.cpp
jonatack,2020-12-31 18:14:59,"e4ac869\n\n- missing period like the neighboring sentences and maybe add a comma\n```suggestion\n                        {RPCResult::Type::STR, ""parent_desc"", /* optional */ true, ""The descriptor used to derive this address, if this is a descriptor wallet.""},\n```\n\n- not sure, but maybe change from:\n\n  ""The descriptor used to derive this address, if this is a descriptor wallet.""\n\n",https://github.com/bitcoin/bitcoin/pull/19136#discussion_r550616623,550616623,src/wallet/rpcwallet.cpp
jonatack,2020-12-31 18:27:32,"de6b389 nit, if iterator is not used in the for-loop block\n```suggestion\n            for _ in range(0, 10):\n```",https://github.com/bitcoin/bitcoin/pull/19136#discussion_r550626144,550626144,test/functional/wallet_descriptor.py
jonatack,2020-12-31 18:30:24,"de6b389 nit, the `if internal...else...assert_equal` logic is repeated 4 times, maybe extract to a helper",https://github.com/bitcoin/bitcoin/pull/19136#discussion_r550628152,550628152,test/functional/wallet_descriptor.py
fjahr,2021-02-01 23:34:38,"in e4ac869a0a0083e2e3af3b56301bd5c8e0cf650b:\n\nBelow, on line 3742, there is another call to `GetScriptPubKeyMan()`. Maybe move that one up here to save one.",https://github.com/bitcoin/bitcoin/pull/19136#discussion_r568216501,568216501,src/wallet/rpcwallet.cpp
