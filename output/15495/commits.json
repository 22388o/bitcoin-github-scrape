[
  {
    "sha": "8f5d9431a36740aa12abc0acea64df48fe32d2a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjVkOTQzMWEzNjc0MGFhMTJhYmMwYWNlYTY0ZGY0OGZlMzJkMmE2",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2019-02-27T14:37:45Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2019-03-01T07:27:14Z"
      },
      "message": "Add regtests for HTTP status codes.\n\nThis adds explicit tests for the returned HTTP status codes to\ninterface_rpc.py (for error cases) and the HTTP JSON-RPC client in\ngeneral for success.\n\nPR 15381 brought up discussion about the HTTP status codes in general,\nand the general opinion was that the current choice may not be ideal\nbut should not be changed to preserve compatibility with existing\nJSON-RPC clients.  Thus it makes sense to actually test the current\nstatus to ensure this desired compatibility is not broken accidentally.",
      "tree": {
        "sha": "b30c6cfe6e36229d5492d100d32bcf6229ed2b80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b30c6cfe6e36229d5492d100d32bcf6229ed2b80"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f5d9431a36740aa12abc0acea64df48fe32d2a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f5d9431a36740aa12abc0acea64df48fe32d2a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f5d9431a36740aa12abc0acea64df48fe32d2a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f5d9431a36740aa12abc0acea64df48fe32d2a6/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a0d4e79b4dbbfda027054c991705313fcf04135c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0d4e79b4dbbfda027054c991705313fcf04135c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a0d4e79b4dbbfda027054c991705313fcf04135c"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 36,
      "deletions": 9
    },
    "files": [
      {
        "sha": "49ae0fb1a999209977352cc0cbf0588d5ccb7594",
        "filename": "test/functional/interface_rpc.py",
        "status": "modified",
        "additions": 18,
        "deletions": 1,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f5d9431a36740aa12abc0acea64df48fe32d2a6/test/functional/interface_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f5d9431a36740aa12abc0acea64df48fe32d2a6/test/functional/interface_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rpc.py?ref=8f5d9431a36740aa12abc0acea64df48fe32d2a6",
        "patch": "@@ -1,12 +1,22 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018 The Bitcoin Core developers\n+# Copyright (c) 2018-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Tests some generic aspects of the RPC interface.\"\"\"\n \n+from test_framework.authproxy import JSONRPCException\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_greater_than_or_equal\n \n+def expect_http_status(expected_http_status, expected_rpc_code,\n+                       fcn, *args):\n+    try:\n+        fcn(*args)\n+        raise AssertionError(\"Expected RPC error %d, got none\" % expected_rpc_code)\n+    except JSONRPCException as exc:\n+        assert_equal(exc.error[\"code\"], expected_rpc_code)\n+        assert_equal(exc.http_status, expected_http_status)\n+\n class RPCInterfaceTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n@@ -48,9 +58,16 @@ def test_batch_request(self):\n         assert_equal(result_by_id[3]['error'], None)\n         assert result_by_id[3]['result'] is not None\n \n+    def test_http_status_codes(self):\n+        self.log.info(\"Testing HTTP status codes for JSON-RPC requests...\")\n+\n+        expect_http_status(404, -32601, self.nodes[0].invalidmethod)\n+        expect_http_status(500, -8, self.nodes[0].getblockhash, 42)\n+\n     def run_test(self):\n         self.test_getrpcinfo()\n         self.test_batch_request()\n+        self.test_http_status_codes()\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "d039f7d6fec9bfacb270b2f451a7786bd163ea62",
        "filename": "test/functional/test_framework/authproxy.py",
        "status": "modified",
        "additions": 18,
        "deletions": 8,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f5d9431a36740aa12abc0acea64df48fe32d2a6/test/functional/test_framework/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f5d9431a36740aa12abc0acea64df48fe32d2a6/test/functional/test_framework/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/authproxy.py?ref=8f5d9431a36740aa12abc0acea64df48fe32d2a6",
        "patch": "@@ -35,6 +35,7 @@\n \n import base64\n import decimal\n+from http import HTTPStatus\n import http.client\n import json\n import logging\n@@ -49,13 +50,14 @@\n log = logging.getLogger(\"BitcoinRPC\")\n \n class JSONRPCException(Exception):\n-    def __init__(self, rpc_error):\n+    def __init__(self, rpc_error, http_status=None):\n         try:\n             errmsg = '%(message)s (%(code)i)' % rpc_error\n         except (KeyError, TypeError):\n             errmsg = ''\n         super().__init__(errmsg)\n         self.error = rpc_error\n+        self.http_status = http_status\n \n \n def EncodeDecimal(o):\n@@ -131,19 +133,26 @@ def get_request(self, *args, **argsn):\n \n     def __call__(self, *args, **argsn):\n         postdata = json.dumps(self.get_request(*args, **argsn), default=EncodeDecimal, ensure_ascii=self.ensure_ascii)\n-        response = self._request('POST', self.__url.path, postdata.encode('utf-8'))\n+        response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))\n         if response['error'] is not None:\n-            raise JSONRPCException(response['error'])\n+            raise JSONRPCException(response['error'], status)\n         elif 'result' not in response:\n             raise JSONRPCException({\n-                'code': -343, 'message': 'missing JSON-RPC result'})\n+                'code': -343, 'message': 'missing JSON-RPC result'}, status)\n+        elif status != HTTPStatus.OK:\n+            raise JSONRPCException({\n+                'code': -342, 'message': 'non-200 HTTP status code but no JSON-RPC error'}, status)\n         else:\n             return response['result']\n \n     def batch(self, rpc_call_list):\n         postdata = json.dumps(list(rpc_call_list), default=EncodeDecimal, ensure_ascii=self.ensure_ascii)\n         log.debug(\"--> \" + postdata)\n-        return self._request('POST', self.__url.path, postdata.encode('utf-8'))\n+        response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))\n+        if status != HTTPStatus.OK:\n+            raise JSONRPCException({\n+                'code': -342, 'message': 'non-200 HTTP status code but no JSON-RPC error'}, status)\n+        return response\n \n     def _get_response(self):\n         req_start_time = time.time()\n@@ -162,8 +171,9 @@ def _get_response(self):\n \n         content_type = http_response.getheader('Content-Type')\n         if content_type != 'application/json':\n-            raise JSONRPCException({\n-                'code': -342, 'message': 'non-JSON HTTP response with \\'%i %s\\' from server' % (http_response.status, http_response.reason)})\n+            raise JSONRPCException(\n+                {'code': -342, 'message': 'non-JSON HTTP response with \\'%i %s\\' from server' % (http_response.status, http_response.reason)},\n+                http_response.status)\n \n         responsedata = http_response.read().decode('utf8')\n         response = json.loads(responsedata, parse_float=decimal.Decimal)\n@@ -172,7 +182,7 @@ def _get_response(self):\n             log.debug(\"<-%s- [%.6f] %s\" % (response[\"id\"], elapsed, json.dumps(response[\"result\"], default=EncodeDecimal, ensure_ascii=self.ensure_ascii)))\n         else:\n             log.debug(\"<-- [%.6f] %s\" % (elapsed, responsedata))\n-        return response\n+        return response, http_response.status\n \n     def __truediv__(self, relative_uri):\n         return AuthServiceProxy(\"{}/{}\".format(self.__service_url, relative_uri), self._service_name, connection=self.__conn)"
      }
    ]
  }
]