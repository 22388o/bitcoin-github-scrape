[
  {
    "sha": "529c1ae4a04248a46a8b4a5a63ecbb12a63ff50e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjljMWFlNGEwNDI0OGE0NmE4YjRhNWE2M2VjYmIxMmE2M2ZmNTBl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-03-22T18:04:15Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-03-27T15:18:58Z"
      },
      "message": "[tests] Add test for wallet rebroadcasts\n\nThe existing wallet_resendwallettransactions.py test only tests the\nresendwallettransactions RPC. It does not test whether transactions are\nactually rebroadcast, or whether the rebroadcast logic is called on a\ntimer.\n\nThis commit updates the test to not use the resendwallettransactions RPC and\ntest that transactions are rebroadcast on a timer.",
      "tree": {
        "sha": "2dfd12c707f9b846700a58fd13d2aa7e30fbcf8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2dfd12c707f9b846700a58fd13d2aa7e30fbcf8c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/529c1ae4a04248a46a8b4a5a63ecbb12a63ff50e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/529c1ae4a04248a46a8b4a5a63ecbb12a63ff50e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/529c1ae4a04248a46a8b4a5a63ecbb12a63ff50e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/529c1ae4a04248a46a8b4a5a63ecbb12a63ff50e/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "abd914ed34f12a5e7773e87e0457b04bcb7d58c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abd914ed34f12a5e7773e87e0457b04bcb7d58c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/abd914ed34f12a5e7773e87e0457b04bcb7d58c4"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 51,
      "deletions": 12
    },
    "files": [
      {
        "sha": "8aafa94c2e096f224d7e128fca3606db7f0b3f19",
        "filename": "test/functional/wallet_resendwallettransactions.py",
        "status": "modified",
        "additions": 51,
        "deletions": 12,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/529c1ae4a04248a46a8b4a5a63ecbb12a63ff50e/test/functional/wallet_resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/529c1ae4a04248a46a8b4a5a63ecbb12a63ff50e/test/functional/wallet_resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_resendwallettransactions.py?ref=529c1ae4a04248a46a8b4a5a63ecbb12a63ff50e",
        "patch": "@@ -2,31 +2,70 @@\n # Copyright (c) 2017-2018 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test resendwallettransactions RPC.\"\"\"\n+\"\"\"Test that the wallet resends transactions periodically.\"\"\"\n+from collections import defaultdict\n+import time\n \n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import ToHex\n+from test_framework.mininode import P2PInterface, mininode_lock\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.util import assert_equal, wait_until\n+\n+class P2PStoreTxInvs(P2PInterface):\n+    def __init__(self):\n+        super().__init__()\n+        self.tx_invs_received = defaultdict(int)\n+\n+    def on_inv(self, message):\n+        # Store how many times invs have been received for each tx.\n+        for i in message.inv:\n+            if i.type == 1:\n+                # save txid\n+                self.tx_invs_received[i.hash] += 1\n \n class ResendWalletTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n-        self.extra_args = [['--walletbroadcast=false']]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        # Should raise RPC_WALLET_ERROR (-4) if walletbroadcast is disabled.\n-        assert_raises_rpc_error(-4, \"Error: Wallet transaction broadcasting is disabled with -walletbroadcast\", self.nodes[0].resendwallettransactions)\n+        node = self.nodes[0]  # alias\n+\n+        node.add_p2p_connection(P2PStoreTxInvs())\n+\n+        self.log.info(\"Create a new transaction and wait until it's broadcast\")\n+        txid = int(node.sendtoaddress(node.getnewaddress(), 1), 16)\n+\n+        # Can take a few seconds due to transaction trickling\n+        wait_until(lambda: node.p2p.tx_invs_received[txid] >= 1, lock=mininode_lock)\n+\n+        # Add a second peer since txs aren't rebroadcast to the same peer (see filterInventoryKnown)\n+        node.add_p2p_connection(P2PStoreTxInvs())\n+\n+        self.log.info(\"Create a block\")\n+        # Create and submit a block without the transaction.\n+        # Transactions are only rebroadcast if there has been a block at least five minutes\n+        # after the last time we tried to broadcast. Use mocktime and give an extra minute to be sure.\n+        block_time = int(time.time()) + 6 * 60\n+        node.setmocktime(block_time)\n+        block = create_block(int(node.getbestblockhash(), 16), create_coinbase(node.getblockchaininfo()['blocks']), block_time)\n+        block.nVersion = 3\n+        block.rehash()\n+        block.solve()\n+        node.submitblock(ToHex(block))\n \n-        # Should return an empty array if there aren't unconfirmed wallet transactions.\n-        self.stop_node(0)\n-        self.start_node(0, extra_args=[])\n-        assert_equal(self.nodes[0].resendwallettransactions(), [])\n+        # Transaction should not be rebroadcast\n+        node.p2ps[1].sync_with_ping()\n+        assert_equal(node.p2ps[1].tx_invs_received[txid], 0)\n \n-        # Should return an array with the unconfirmed wallet transaction.\n-        txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n-        assert_equal(self.nodes[0].resendwallettransactions(), [txid])\n+        self.log.info(\"Transaction should be rebroadcast after 30 minutes\")\n+        # Use mocktime and give an extra 5 minutes to be sure.\n+        rebroadcast_time = int(time.time()) + 41 * 60\n+        node.setmocktime(rebroadcast_time)\n+        wait_until(lambda: node.p2ps[1].tx_invs_received[txid] >= 1, lock=mininode_lock)\n \n if __name__ == '__main__':\n     ResendWalletTransactionsTest().main()"
      }
    ]
  }
]