[
  {
    "sha": "c13d3c31b31a684e8ca560014a08f4cc33e1390d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTNkM2MzMWIzMWE2ODRlOGNhNTYwMDE0YTA4ZjRjYzMzZTEzOTBk",
    "commit": {
      "author": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2020-05-04T15:55:33Z"
      },
      "committer": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2020-05-06T15:30:10Z"
      },
      "message": "rpc: replace raw pointers with shared_ptrs\n\n    Co-authored-by: MarcoFalke <falke.marco@gmail.com>\n    Co-authored-by: Jo\u00e3o Barbosa <joao.paulo.barbosa@gmail.com>",
      "tree": {
        "sha": "9790b5699159d004b4a989f2977a0f6b7b77d462",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9790b5699159d004b4a989f2977a0f6b7b77d462"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c13d3c31b31a684e8ca560014a08f4cc33e1390d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEED2bWxOeRx//n2QOeJiaFvHjtEfsFAl6y2AIACgkQJiaFvHjt\nEftdJggAhpUs0DgKKiKfeQu2XNPYTlPfopKXolqKWkE69ZijVHQJpOe+UyzQ4RHE\n7R6mEyzHYQgKLHB8D9rmdVtS9EKMD9eI4PcU0+lgQCn43wtv+rt2IjxKsdhkUIxK\nqdElbxI33SiE7TfrmfxSF0F5BA5rv+g7yyvMmfl7z+5Ad0IFPxPI1Wk9bmG9ZwBp\nvEovuxgGryVtIABrsfu8vuwIHPewSm8Ru/T3koBLfTyZXcOWqFJiiYkrCCJrkhnB\nvfGHPAoz38nYsIdhGn0cDP0y0aH97GV8D3DkSrqwX93pQRXKQoh68wde8igeQx5P\nQC+5RZcdM67L8t9hbeew7yt7p/gtfA==\n=XoIS\n-----END PGP SIGNATURE-----",
        "payload": "tree 9790b5699159d004b4a989f2977a0f6b7b77d462\nparent 7bcc42b4035b878719d13201286e322989b415c5\nauthor Harris <brakmic@gmail.com> 1588607733 +0200\ncommitter Harris <brakmic@gmail.com> 1588779010 +0200\n\nrpc: replace raw pointers with shared_ptrs\n\n    Co-authored-by: MarcoFalke <falke.marco@gmail.com>\n    Co-authored-by: Jo\u00e3o Barbosa <joao.paulo.barbosa@gmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c13d3c31b31a684e8ca560014a08f4cc33e1390d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c13d3c31b31a684e8ca560014a08f4cc33e1390d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c13d3c31b31a684e8ca560014a08f4cc33e1390d/comments",
    "author": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7bcc42b4035b878719d13201286e322989b415c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bcc42b4035b878719d13201286e322989b415c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7bcc42b4035b878719d13201286e322989b415c5"
      }
    ],
    "stats": {
      "total": 345,
      "additions": 146,
      "deletions": 199
    },
    "files": [
      {
        "sha": "b8553b6d1fed6a1c36b8d61348270bd52380903f",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 53,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c13d3c31b31a684e8ca560014a08f4cc33e1390d/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c13d3c31b31a684e8ca560014a08f4cc33e1390d/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=c13d3c31b31a684e8ca560014a08f4cc33e1390d",
        "patch": "@@ -56,13 +56,13 @@ static std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n-static bool GetWalletAddressesForKey(LegacyScriptPubKeyMan* spk_man, const CWallet* const pwallet, const CKeyID& keyid, std::string& strAddr, std::string& strLabel) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+static bool GetWalletAddressesForKey(LegacyScriptPubKeyMan* spk_man, const CWallet& wallet, const CKeyID& keyid, std::string& strAddr, std::string& strLabel) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n {\n     bool fLabelFound = false;\n     CKey key;\n     spk_man->GetKey(keyid, key);\n     for (const auto& dest : GetAllDestinationsForKey(key.GetPubKey())) {\n-        const auto* address_book_entry = pwallet->FindAddressBookEntry(dest);\n+        const auto* address_book_entry = wallet.FindAddressBookEntry(dest);\n         if (address_book_entry) {\n             if (!strAddr.empty()) {\n                 strAddr += \",\";\n@@ -73,7 +73,7 @@ static bool GetWalletAddressesForKey(LegacyScriptPubKeyMan* spk_man, const CWall\n         }\n     }\n     if (!fLabelFound) {\n-        strAddr = EncodeDestination(GetDestinationForKey(key.GetPubKey(), pwallet->m_default_address_type));\n+        strAddr = EncodeDestination(GetDestinationForKey(key.GetPubKey(), wallet.m_default_address_type));\n     }\n     return fLabelFound;\n }\n@@ -92,8 +92,7 @@ static void RescanWallet(CWallet& wallet, const WalletRescanReserver& reserver,\n \n UniValue importprivkey(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -128,14 +127,14 @@ UniValue importprivkey(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n     }\n \n-    EnsureLegacyScriptPubKeyMan(*wallet, true);\n+    EnsureLegacyScriptPubKeyMan(*pwallet, true);\n \n     WalletRescanReserver reserver(*pwallet);\n     bool fRescan = true;\n     {\n         LOCK(pwallet->cs_wallet);\n \n-        EnsureWalletIsUnlocked(pwallet);\n+        EnsureWalletIsUnlocked(*pwallet);\n \n         std::string strSecret = request.params[0].get_str();\n         std::string strLabel = \"\";\n@@ -195,8 +194,7 @@ UniValue importprivkey(const JSONRPCRequest& request)\n \n UniValue abortrescan(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -223,8 +221,7 @@ UniValue abortrescan(const JSONRPCRequest& request)\n \n UniValue importaddress(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -325,8 +322,7 @@ UniValue importaddress(const JSONRPCRequest& request)\n \n UniValue importprunedfunds(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -383,8 +379,7 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n \n UniValue removeprunedfunds(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -422,8 +417,7 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n \n UniValue importpubkey(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -450,7 +444,7 @@ UniValue importpubkey(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    EnsureLegacyScriptPubKeyMan(*wallet, true);\n+    EnsureLegacyScriptPubKeyMan(*pwallet, true);\n \n     std::string strLabel;\n     if (!request.params[1].isNull())\n@@ -509,8 +503,7 @@ UniValue importpubkey(const JSONRPCRequest& request)\n \n UniValue importwallet(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -532,7 +525,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    EnsureLegacyScriptPubKeyMan(*wallet, true);\n+    EnsureLegacyScriptPubKeyMan(*pwallet, true);\n \n     if (pwallet->chain().havePruned()) {\n         // Exit early and print an error.\n@@ -551,7 +544,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n     {\n         LOCK(pwallet->cs_wallet);\n \n-        EnsureWalletIsUnlocked(pwallet);\n+        EnsureWalletIsUnlocked(*pwallet);\n \n         fsbridge::ifstream file;\n         file.open(request.params[0].get_str(), std::ios::in | std::ios::ate);\n@@ -667,8 +660,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n \n UniValue dumpprivkey(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    const CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -689,11 +681,11 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    LegacyScriptPubKeyMan& spk_man = EnsureLegacyScriptPubKeyMan(*wallet);\n+    LegacyScriptPubKeyMan& spk_man = EnsureLegacyScriptPubKeyMan(*pwallet);\n \n     LOCK2(pwallet->cs_wallet, spk_man.cs_KeyStore);\n \n-    EnsureWalletIsUnlocked(pwallet);\n+    EnsureWalletIsUnlocked(*pwallet);\n \n     std::string strAddress = request.params[0].get_str();\n     CTxDestination dest = DecodeDestination(strAddress);\n@@ -715,7 +707,7 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n UniValue dumpwallet(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -748,7 +740,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n \n     LOCK2(pwallet->cs_wallet, spk_man.cs_KeyStore);\n \n-    EnsureWalletIsUnlocked(&wallet);\n+    EnsureWalletIsUnlocked(wallet);\n \n     fs::path filepath = request.params[0].get_str();\n     filepath = fs::absolute(filepath);\n@@ -810,7 +802,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n         CKey key;\n         if (spk_man.GetKey(keyid, key)) {\n             file << strprintf(\"%s %s \", EncodeSecret(key), strTime);\n-            if (GetWalletAddressesForKey(&spk_man, &wallet, keyid, strAddr, strLabel)) {\n+            if (GetWalletAddressesForKey(&spk_man, *pwallet, keyid, strAddr, strLabel)) {\n                 file << strprintf(\"label=%s\", strLabel);\n             } else if (keyid == seed_id) {\n                 file << \"hdseed=1\";\n@@ -1167,7 +1159,7 @@ static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID\n     return warnings;\n }\n \n-static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+static UniValue ProcessImport(CWallet& wallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n {\n     UniValue warnings(UniValue::VARR);\n     UniValue result(UniValue::VOBJ);\n@@ -1182,7 +1174,7 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n         const bool add_keypool = data.exists(\"keypool\") ? data[\"keypool\"].get_bool() : false;\n \n         // Add to keypool only works with privkeys disabled\n-        if (add_keypool && !pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        if (add_keypool && !wallet.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Keys can only be imported to the keypool when private keys are disabled\");\n         }\n \n@@ -1204,29 +1196,29 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n         }\n \n         // If private keys are disabled, abort if private keys are being imported\n-        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !privkey_map.empty()) {\n+        if (wallet.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !privkey_map.empty()) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n         }\n \n         // Check whether we have any work to do\n         for (const CScript& script : script_pub_keys) {\n-            if (pwallet->IsMine(script) & ISMINE_SPENDABLE) {\n+            if (wallet.IsMine(script) & ISMINE_SPENDABLE) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script (\\\"\" + HexStr(script.begin(), script.end()) + \"\\\")\");\n             }\n         }\n \n         // All good, time to import\n-        pwallet->MarkDirty();\n-        if (!pwallet->ImportScripts(import_data.import_scripts, timestamp)) {\n+        wallet.MarkDirty();\n+        if (!wallet.ImportScripts(import_data.import_scripts, timestamp)) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding script to wallet\");\n         }\n-        if (!pwallet->ImportPrivKeys(privkey_map, timestamp)) {\n+        if (!wallet.ImportPrivKeys(privkey_map, timestamp)) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n         }\n-        if (!pwallet->ImportPubKeys(ordered_pubkeys, pubkey_map, import_data.key_origins, add_keypool, internal, timestamp)) {\n+        if (!wallet.ImportPubKeys(ordered_pubkeys, pubkey_map, import_data.key_origins, add_keypool, internal, timestamp)) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n         }\n-        if (!pwallet->ImportScriptPubKeys(label, script_pub_keys, have_solving_data, !internal, timestamp)) {\n+        if (!wallet.ImportScriptPubKeys(label, script_pub_keys, have_solving_data, !internal, timestamp)) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n         }\n \n@@ -1259,8 +1251,7 @@ static int64_t GetImportTimestamp(const UniValue& data, int64_t now)\n \n UniValue importmulti(const JSONRPCRequest& mainRequest)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(mainRequest);\n-    CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(mainRequest);\n     if (!EnsureWalletIsAvailable(pwallet, mainRequest.fHelp)) {\n         return NullUniValue;\n     }\n@@ -1343,7 +1334,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     RPCTypeCheck(mainRequest.params, {UniValue::VARR, UniValue::VOBJ});\n \n-    EnsureLegacyScriptPubKeyMan(*wallet, true);\n+    EnsureLegacyScriptPubKeyMan(*pwallet, true);\n \n     const UniValue& requests = mainRequest.params[0];\n \n@@ -1369,7 +1360,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     UniValue response(UniValue::VARR);\n     {\n         LOCK(pwallet->cs_wallet);\n-        EnsureWalletIsUnlocked(pwallet);\n+        EnsureWalletIsUnlocked(*pwallet);\n \n         // Verify all timestamps are present before importing any keys.\n         CHECK_NONFATAL(pwallet->chain().findBlock(pwallet->GetLastBlockHash(), FoundBlock().time(nLowestTimestamp).mtpTime(now)));\n@@ -1381,7 +1372,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n         for (const UniValue& data : requests.getValues()) {\n             const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n-            const UniValue result = ProcessImport(pwallet, data, timestamp);\n+            const UniValue result = ProcessImport(*pwallet, data, timestamp);\n             response.push_back(result);\n \n             if (!fRescan) {\n@@ -1446,7 +1437,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     return response;\n }\n \n-static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+static UniValue ProcessDescriptorImport(CWallet& wallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n {\n     UniValue warnings(UniValue::VARR);\n     UniValue result(UniValue::VOBJ);\n@@ -1515,7 +1506,7 @@ static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue&\n         }\n \n         // If the wallet disabled private keys, abort if private keys exist\n-        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !keys.keys.empty()) {\n+        if (wallet.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !keys.keys.empty()) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n         }\n \n@@ -1537,7 +1528,7 @@ static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue&\n         }\n \n         // If private keys are enabled, check some things.\n-        if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        if (!wallet.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n            if (keys.keys.empty()) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import descriptor without private keys to a wallet with private keys enabled\");\n            }\n@@ -1549,7 +1540,7 @@ static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue&\n         WalletDescriptor w_desc(std::move(parsed_desc), timestamp, range_start, range_end, next_index);\n \n         // Check if the wallet already contains the descriptor\n-        auto existing_spk_manager = pwallet->GetDescriptorScriptPubKeyMan(w_desc);\n+        auto existing_spk_manager = wallet.GetDescriptorScriptPubKeyMan(w_desc);\n         if (existing_spk_manager) {\n             LOCK(existing_spk_manager->cs_desc_man);\n             if (range_start > existing_spk_manager->GetWalletDescriptor().range_start) {\n@@ -1558,7 +1549,7 @@ static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue&\n         }\n \n         // Add descriptor to the wallet\n-        auto spk_manager = pwallet->AddWalletDescriptor(w_desc, keys, label);\n+        auto spk_manager = wallet.AddWalletDescriptor(w_desc, keys, label);\n         if (spk_manager == nullptr) {\n             throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Could not add descriptor '%s'\", descriptor));\n         }\n@@ -1568,7 +1559,7 @@ static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue&\n             if (!w_desc.descriptor->GetOutputType()) {\n                 warnings.push_back(\"Unknown output type, cannot set descriptor to active.\");\n             } else {\n-                pwallet->SetActiveScriptPubKeyMan(spk_manager->GetID(), *w_desc.descriptor->GetOutputType(), internal);\n+                wallet.SetActiveScriptPubKeyMan(spk_manager->GetID(), *w_desc.descriptor->GetOutputType(), internal);\n             }\n         }\n \n@@ -1587,8 +1578,8 @@ static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue&\n \n UniValue importdescriptors(const JSONRPCRequest& main_request) {\n     // Acquire the wallet\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(main_request);\n-    CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(main_request);\n+\n     if (!EnsureWalletIsAvailable(pwallet, main_request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -1664,15 +1655,15 @@ UniValue importdescriptors(const JSONRPCRequest& main_request) {\n     UniValue response(UniValue::VARR);\n     {\n         LOCK(pwallet->cs_wallet);\n-        EnsureWalletIsUnlocked(pwallet);\n+        EnsureWalletIsUnlocked(*pwallet);\n \n         CHECK_NONFATAL(pwallet->chain().findBlock(pwallet->GetLastBlockHash(), FoundBlock().time(lowest_timestamp).mtpTime(now)));\n \n         // Get all timestamps and extract the lowest timestamp\n         for (const UniValue& request : requests.getValues()) {\n             // This throws an error if \"timestamp\" doesn't exist\n             const int64_t timestamp = std::max(GetImportTimestamp(request, now), minimum_timestamp);\n-            const UniValue result = ProcessDescriptorImport(pwallet, request, timestamp);\n+            const UniValue result = ProcessDescriptorImport(*pwallet, request, timestamp);\n             response.push_back(result);\n \n             if (lowest_timestamp > timestamp ) {"
      },
      {
        "sha": "52dd84c2cca8cbb18b20c42f3a89e2ef43bd0c4c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 100,
        "deletions": 144,
        "changes": 244,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c13d3c31b31a684e8ca560014a08f4cc33e1390d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c13d3c31b31a684e8ca560014a08f4cc33e1390d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c13d3c31b31a684e8ca560014a08f4cc33e1390d",
        "patch": "@@ -43,8 +43,8 @@ using interfaces::FoundBlock;\n static const std::string WALLET_ENDPOINT_BASE = \"/wallet/\";\n static const std::string HELP_REQUIRING_PASSPHRASE{\"\\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\\n\"};\n \n-static inline bool GetAvoidReuseFlag(const CWallet* const pwallet, const UniValue& param) {\n-    bool can_avoid_reuse = pwallet->IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE);\n+static inline bool GetAvoidReuseFlag(const CWallet& wallet, const UniValue& param) {\n+    bool can_avoid_reuse = wallet.IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE);\n     bool avoid_reuse = param.isNull() ? can_avoid_reuse : param.get_bool();\n \n     if (avoid_reuse && !can_avoid_reuse) {\n@@ -59,11 +59,11 @@ static inline bool GetAvoidReuseFlag(const CWallet* const pwallet, const UniValu\n  *  We default to true for watchonly wallets if include_watchonly isn't\n  *  explicitly set.\n  */\n-static bool ParseIncludeWatchonly(const UniValue& include_watchonly, const CWallet& pwallet)\n+static bool ParseIncludeWatchonly(const UniValue& include_watchonly, const CWallet& wallet)\n {\n     if (include_watchonly.isNull()) {\n         // if include_watchonly isn't explicitly set, then check if we have a watchonly wallet\n-        return pwallet.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n+        return wallet.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n     }\n \n     // otherwise return whatever include_watchonly was set to\n@@ -102,7 +102,7 @@ std::shared_ptr<CWallet> GetWalletForJSONRPCRequest(const JSONRPCRequest& reques\n     return wallets.size() == 1 || (request.fHelp && wallets.size() > 0) ? wallets[0] : nullptr;\n }\n \n-bool EnsureWalletIsAvailable(const CWallet* pwallet, bool avoidException)\n+bool EnsureWalletIsAvailable(const std::shared_ptr<CWallet>& pwallet, bool avoidException)\n {\n     if (pwallet) return true;\n     if (avoidException) return false;\n@@ -114,9 +114,9 @@ bool EnsureWalletIsAvailable(const CWallet* pwallet, bool avoidException)\n         \"Wallet file not specified (must request wallet RPC through /wallet/<filename> uri-path).\");\n }\n \n-void EnsureWalletIsUnlocked(const CWallet* pwallet)\n+void EnsureWalletIsUnlocked(const CWallet& wallet)\n {\n-    if (pwallet->IsLocked()) {\n+    if (wallet.IsLocked()) {\n         throw JSONRPCError(RPC_WALLET_UNLOCK_NEEDED, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n     }\n }\n@@ -185,8 +185,7 @@ static std::string LabelFromValue(const UniValue& value)\n \n static UniValue getnewaddress(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -238,8 +237,7 @@ static UniValue getnewaddress(const JSONRPCRequest& request)\n \n static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -284,8 +282,7 @@ static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n \n static UniValue setlabel(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -323,9 +320,9 @@ static UniValue setlabel(const JSONRPCRequest& request)\n }\n \n \n-static CTransactionRef SendMoney(CWallet* const pwallet, const CTxDestination& address, CAmount nValue, bool fSubtractFeeFromAmount, const CCoinControl& coin_control, mapValue_t mapValue)\n+static CTransactionRef SendMoney(CWallet& wallet, const CTxDestination& address, CAmount nValue, bool fSubtractFeeFromAmount, const CCoinControl& coin_control, mapValue_t mapValue)\n {\n-    CAmount curBalance = pwallet->GetBalance(0, coin_control.m_avoid_address_reuse).m_mine_trusted;\n+    CAmount curBalance = wallet.GetBalance(0, coin_control.m_avoid_address_reuse).m_mine_trusted;\n \n     // Check amount\n     if (nValue <= 0)\n@@ -345,19 +342,18 @@ static CTransactionRef SendMoney(CWallet* const pwallet, const CTxDestination& a\n     CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n     vecSend.push_back(recipient);\n     CTransactionRef tx;\n-    if (!pwallet->CreateTransaction(vecSend, tx, nFeeRequired, nChangePosRet, error, coin_control)) {\n+    if (!wallet.CreateTransaction(vecSend, tx, nFeeRequired, nChangePosRet, error, coin_control)) {\n         if (!fSubtractFeeFromAmount && nValue + nFeeRequired > curBalance)\n             error = strprintf(Untranslated(\"Error: This transaction requires a transaction fee of at least %s\"), FormatMoney(nFeeRequired));\n         throw JSONRPCError(RPC_WALLET_ERROR, error.original);\n     }\n-    pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */);\n+    wallet.CommitTransaction(tx, std::move(mapValue), {} /* orderForm */);\n     return tx;\n }\n \n static UniValue sendtoaddress(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -439,20 +435,19 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n         }\n     }\n \n-    coin_control.m_avoid_address_reuse = GetAvoidReuseFlag(pwallet, request.params[8]);\n+    coin_control.m_avoid_address_reuse = GetAvoidReuseFlag(*pwallet, request.params[8]);\n     // We also enable partial spend avoidance if reuse avoidance is set.\n     coin_control.m_avoid_partial_spends |= coin_control.m_avoid_address_reuse;\n \n-    EnsureWalletIsUnlocked(pwallet);\n+    EnsureWalletIsUnlocked(*pwallet);\n \n-    CTransactionRef tx = SendMoney(pwallet, dest, nAmount, fSubtractFeeFromAmount, coin_control, std::move(mapValue));\n+    CTransactionRef tx = SendMoney(*pwallet, dest, nAmount, fSubtractFeeFromAmount, coin_control, std::move(mapValue));\n     return tx->GetHash().GetHex();\n }\n \n static UniValue listaddressgroupings(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    const CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -513,8 +508,7 @@ static UniValue listaddressgroupings(const JSONRPCRequest& request)\n \n static UniValue signmessage(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    const CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -544,7 +538,7 @@ static UniValue signmessage(const JSONRPCRequest& request)\n \n     LOCK(pwallet->cs_wallet);\n \n-    EnsureWalletIsUnlocked(pwallet);\n+    EnsureWalletIsUnlocked(*pwallet);\n \n     std::string strAddress = request.params[0].get_str();\n     std::string strMessage = request.params[1].get_str();\n@@ -618,8 +612,7 @@ static CAmount GetReceived(const CWallet& wallet, const UniValue& params, bool b\n \n static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    const CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -658,8 +651,7 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n \n static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    const CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -698,8 +690,7 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n \n static UniValue getbalance(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    const CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -746,7 +737,7 @@ static UniValue getbalance(const JSONRPCRequest& request)\n \n     bool include_watchonly = ParseIncludeWatchonly(request.params[2], *pwallet);\n \n-    bool avoid_reuse = GetAvoidReuseFlag(pwallet, request.params[3]);\n+    bool avoid_reuse = GetAvoidReuseFlag(*pwallet, request.params[3]);\n \n     const auto bal = pwallet->GetBalance(min_depth, avoid_reuse);\n \n@@ -755,8 +746,7 @@ static UniValue getbalance(const JSONRPCRequest& request)\n \n static UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    const CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -781,8 +771,7 @@ static UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n \n static UniValue sendmany(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -896,7 +885,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n         vecSend.push_back(recipient);\n     }\n \n-    EnsureWalletIsUnlocked(pwallet);\n+    EnsureWalletIsUnlocked(*pwallet);\n \n     // Shuffle recipient list\n     std::shuffle(vecSend.begin(), vecSend.end(), FastRandomContext());\n@@ -915,8 +904,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n \n static UniValue addmultisigaddress(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -1008,7 +996,7 @@ struct tallyitem\n     }\n };\n \n-static UniValue ListReceived(const CWallet* const pwallet, const UniValue& params, bool by_label) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+static UniValue ListReceived(const CWallet& wallet, const UniValue& params, bool by_label) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n {\n     // Minimum confirmations\n     int nMinDepth = 1;\n@@ -1022,7 +1010,7 @@ static UniValue ListReceived(const CWallet* const pwallet, const UniValue& param\n \n     isminefilter filter = ISMINE_SPENDABLE;\n \n-    if (ParseIncludeWatchonly(params[2], *pwallet)) {\n+    if (ParseIncludeWatchonly(params[2], wallet)) {\n         filter |= ISMINE_WATCH_ONLY;\n     }\n \n@@ -1038,10 +1026,10 @@ static UniValue ListReceived(const CWallet* const pwallet, const UniValue& param\n \n     // Tally\n     std::map<CTxDestination, tallyitem> mapTally;\n-    for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n+    for (const std::pair<const uint256, CWalletTx>& pairWtx : wallet.mapWallet) {\n         const CWalletTx& wtx = pairWtx.second;\n \n-        if (wtx.IsCoinBase() || !pwallet->chain().checkFinalTx(*wtx.tx)) {\n+        if (wtx.IsCoinBase() || !wallet.chain().checkFinalTx(*wtx.tx)) {\n             continue;\n         }\n \n@@ -1059,7 +1047,7 @@ static UniValue ListReceived(const CWallet* const pwallet, const UniValue& param\n                 continue;\n             }\n \n-            isminefilter mine = pwallet->IsMine(address);\n+            isminefilter mine = wallet.IsMine(address);\n             if(!(mine & filter))\n                 continue;\n \n@@ -1078,11 +1066,11 @@ static UniValue ListReceived(const CWallet* const pwallet, const UniValue& param\n \n     // Create m_address_book iterator\n     // If we aren't filtering, go from begin() to end()\n-    auto start = pwallet->m_address_book.begin();\n-    auto end = pwallet->m_address_book.end();\n+    auto start = wallet.m_address_book.begin();\n+    auto end = wallet.m_address_book.end();\n     // If we are filtering, find() the applicable entry\n     if (has_filtered_address) {\n-        start = pwallet->m_address_book.find(filtered_address);\n+        start = wallet.m_address_book.find(filtered_address);\n         if (start != end) {\n             end = std::next(start);\n         }\n@@ -1157,8 +1145,7 @@ static UniValue ListReceived(const CWallet* const pwallet, const UniValue& param\n \n static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    const CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -1203,13 +1190,12 @@ static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n \n     LOCK(pwallet->cs_wallet);\n \n-    return ListReceived(pwallet, request.params, false);\n+    return ListReceived(*pwallet, request.params, false);\n }\n \n static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    const CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -1247,7 +1233,7 @@ static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n \n     LOCK(pwallet->cs_wallet);\n \n-    return ListReceived(pwallet, request.params, true);\n+    return ListReceived(*pwallet, request.params, true);\n }\n \n static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n@@ -1268,7 +1254,7 @@ static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n  * @param  filter_ismine  The \"is mine\" filter flags.\n  * @param  filter_label   Optional label string to filter incoming transactions.\n  */\n-static void ListTransactions(const CWallet* const pwallet, const CWalletTx& wtx, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter_ismine, const std::string* filter_label) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+static void ListTransactions(const CWallet& wallet, const CWalletTx& wtx, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter_ismine, const std::string* filter_label) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n {\n     CAmount nFee;\n     std::list<COutputEntry> listReceived;\n@@ -1284,20 +1270,20 @@ static void ListTransactions(const CWallet* const pwallet, const CWalletTx& wtx,\n         for (const COutputEntry& s : listSent)\n         {\n             UniValue entry(UniValue::VOBJ);\n-            if (involvesWatchonly || (pwallet->IsMine(s.destination) & ISMINE_WATCH_ONLY)) {\n+            if (involvesWatchonly || (wallet.IsMine(s.destination) & ISMINE_WATCH_ONLY)) {\n                 entry.pushKV(\"involvesWatchonly\", true);\n             }\n             MaybePushAddress(entry, s.destination);\n             entry.pushKV(\"category\", \"send\");\n             entry.pushKV(\"amount\", ValueFromAmount(-s.amount));\n-            const auto* address_book_entry = pwallet->FindAddressBookEntry(s.destination);\n+            const auto* address_book_entry = wallet.FindAddressBookEntry(s.destination);\n             if (address_book_entry) {\n                 entry.pushKV(\"label\", address_book_entry->GetLabel());\n             }\n             entry.pushKV(\"vout\", s.vout);\n             entry.pushKV(\"fee\", ValueFromAmount(-nFee));\n             if (fLong)\n-                WalletTxToJSON(pwallet->chain(), wtx, entry);\n+                WalletTxToJSON(wallet.chain(), wtx, entry);\n             entry.pushKV(\"abandoned\", wtx.isAbandoned());\n             ret.push_back(entry);\n         }\n@@ -1308,15 +1294,15 @@ static void ListTransactions(const CWallet* const pwallet, const CWalletTx& wtx,\n         for (const COutputEntry& r : listReceived)\n         {\n             std::string label;\n-            const auto* address_book_entry = pwallet->FindAddressBookEntry(r.destination);\n+            const auto* address_book_entry = wallet.FindAddressBookEntry(r.destination);\n             if (address_book_entry) {\n                 label = address_book_entry->GetLabel();\n             }\n             if (filter_label && label != *filter_label) {\n                 continue;\n             }\n             UniValue entry(UniValue::VOBJ);\n-            if (involvesWatchonly || (pwallet->IsMine(r.destination) & ISMINE_WATCH_ONLY)) {\n+            if (involvesWatchonly || (wallet.IsMine(r.destination) & ISMINE_WATCH_ONLY)) {\n                 entry.pushKV(\"involvesWatchonly\", true);\n             }\n             MaybePushAddress(entry, r.destination);\n@@ -1339,7 +1325,7 @@ static void ListTransactions(const CWallet* const pwallet, const CWalletTx& wtx,\n             }\n             entry.pushKV(\"vout\", r.vout);\n             if (fLong)\n-                WalletTxToJSON(pwallet->chain(), wtx, entry);\n+                WalletTxToJSON(wallet.chain(), wtx, entry);\n             ret.push_back(entry);\n         }\n     }\n@@ -1369,8 +1355,7 @@ static const std::vector<RPCResult> TransactionDescriptionString()\n \n UniValue listtransactions(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    const CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -1462,7 +1447,7 @@ UniValue listtransactions(const JSONRPCRequest& request)\n         for (CWallet::TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n         {\n             CWalletTx *const pwtx = (*it).second;\n-            ListTransactions(pwallet, *pwtx, 0, true, ret, filter, filter_label);\n+            ListTransactions(*pwallet, *pwtx, 0, true, ret, filter, filter_label);\n             if ((int)ret.size() >= (nCount+nFrom)) break;\n         }\n     }\n@@ -1482,8 +1467,7 @@ UniValue listtransactions(const JSONRPCRequest& request)\n \n static UniValue listsinceblock(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    const CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -1586,7 +1570,7 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n         const CWalletTx& tx = pairWtx.second;\n \n         if (depth == -1 || abs(tx.GetDepthInMainChain()) < depth) {\n-            ListTransactions(pwallet, tx, 0, true, transactions, filter, nullptr /* filter_label */);\n+            ListTransactions(*pwallet, tx, 0, true, transactions, filter, nullptr /* filter_label */);\n         }\n     }\n \n@@ -1603,7 +1587,7 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n             if (it != pwallet->mapWallet.end()) {\n                 // We want all transactions regardless of confirmation count to appear here,\n                 // even negative confirmation ones, hence the big negative.\n-                ListTransactions(pwallet, it->second, -100000000, true, removed, filter, nullptr /* filter_label */);\n+                ListTransactions(*pwallet, it->second, -100000000, true, removed, filter, nullptr /* filter_label */);\n             }\n         }\n         blockId = block.hashPrevBlock;\n@@ -1623,8 +1607,7 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n \n static UniValue gettransaction(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    const CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -1719,7 +1702,7 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n     WalletTxToJSON(pwallet->chain(), wtx, entry);\n \n     UniValue details(UniValue::VARR);\n-    ListTransactions(pwallet, wtx, 0, false, details, filter, nullptr /* filter_label */);\n+    ListTransactions(*pwallet, wtx, 0, false, details, filter, nullptr /* filter_label */);\n     entry.pushKV(\"details\", details);\n \n     std::string strHex = EncodeHexTx(*wtx.tx, pwallet->chain().rpcSerializationFlags());\n@@ -1736,8 +1719,7 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n \n static UniValue abandontransaction(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -1780,8 +1762,7 @@ static UniValue abandontransaction(const JSONRPCRequest& request)\n \n static UniValue backupwallet(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    const CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -1816,8 +1797,7 @@ static UniValue backupwallet(const JSONRPCRequest& request)\n \n static UniValue keypoolrefill(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -1850,7 +1830,7 @@ static UniValue keypoolrefill(const JSONRPCRequest& request)\n         kpSize = (unsigned int)request.params[0].get_int();\n     }\n \n-    EnsureWalletIsUnlocked(pwallet);\n+    EnsureWalletIsUnlocked(*pwallet);\n     pwallet->TopUpKeyPool(kpSize);\n \n     if (pwallet->GetKeyPoolSize() < kpSize) {\n@@ -1863,8 +1843,7 @@ static UniValue keypoolrefill(const JSONRPCRequest& request)\n \n static UniValue walletpassphrase(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -1935,11 +1914,11 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n     // can occur. The deadlock would happen when RPCRunLater removes the\n     // previous timer (and waits for the callback to finish if already running)\n     // and the callback locks cs_wallet.\n-    AssertLockNotHeld(wallet->cs_wallet);\n+    AssertLockNotHeld(pwallet->cs_wallet);\n     // Keep a weak pointer to the wallet so that it is possible to unload the\n     // wallet before the following callback is called. If a valid shared pointer\n     // is acquired in the callback then the wallet is still loaded.\n-    std::weak_ptr<CWallet> weak_wallet = wallet;\n+    std::weak_ptr<CWallet> weak_wallet = pwallet;\n     pwallet->chain().rpcRunLater(strprintf(\"lockwallet(%s)\", pwallet->GetName()), [weak_wallet] {\n         if (auto shared_wallet = weak_wallet.lock()) {\n             LOCK(shared_wallet->cs_wallet);\n@@ -1954,8 +1933,7 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n \n static UniValue walletpassphrasechange(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -2004,8 +1982,7 @@ static UniValue walletpassphrasechange(const JSONRPCRequest& request)\n \n static UniValue walletlock(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -2044,8 +2021,7 @@ static UniValue walletlock(const JSONRPCRequest& request)\n \n static UniValue encryptwallet(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -2104,8 +2080,7 @@ static UniValue encryptwallet(const JSONRPCRequest& request)\n \n static UniValue lockunspent(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -2230,8 +2205,7 @@ static UniValue lockunspent(const JSONRPCRequest& request)\n \n static UniValue listlockunspent(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    const CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -2285,8 +2259,7 @@ static UniValue listlockunspent(const JSONRPCRequest& request)\n \n static UniValue settxfee(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -2329,7 +2302,7 @@ static UniValue settxfee(const JSONRPCRequest& request)\n static UniValue getbalances(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const rpc_wallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(rpc_wallet.get(), request.fHelp)) {\n+    if (!EnsureWalletIsAvailable(rpc_wallet, request.fHelp)) {\n         return NullUniValue;\n     }\n     CWallet& wallet = *rpc_wallet;\n@@ -2395,8 +2368,7 @@ static UniValue getbalances(const JSONRPCRequest& request)\n \n static UniValue getwalletinfo(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    const CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -2544,7 +2516,7 @@ static UniValue listwallets(const JSONRPCRequest& request)\n     UniValue obj(UniValue::VARR);\n \n     for (const std::shared_ptr<CWallet>& wallet : GetWallets()) {\n-        if (!EnsureWalletIsAvailable(wallet.get(), request.fHelp)) {\n+        if (!EnsureWalletIsAvailable(wallet, request.fHelp)) {\n             return NullUniValue;\n         }\n \n@@ -2604,8 +2576,7 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n \n static UniValue setwalletflag(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -2785,8 +2756,7 @@ static UniValue unloadwallet(const JSONRPCRequest& request)\n \n static UniValue listunspent(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    const CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -2998,11 +2968,11 @@ static UniValue listunspent(const JSONRPCRequest& request)\n     return results;\n }\n \n-void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& fee_out, int& change_position, UniValue options)\n+void FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& fee_out, int& change_position, UniValue options)\n {\n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n+    wallet.BlockUntilSyncedToCurrentChain();\n \n     CCoinControl coinControl;\n     change_position = -1;\n@@ -3049,13 +3019,13 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n             if (options.exists(\"changeAddress\")) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both changeAddress and address_type options\");\n             }\n-            coinControl.m_change_type = pwallet->m_default_change_type;\n+            coinControl.m_change_type = wallet.m_default_change_type;\n             if (!ParseOutputType(options[\"change_type\"].get_str(), *coinControl.m_change_type)) {\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown change type '%s'\", options[\"change_type\"].get_str()));\n             }\n         }\n \n-        coinControl.fAllowWatchOnly = ParseIncludeWatchonly(options[\"includeWatching\"], *pwallet);\n+        coinControl.fAllowWatchOnly = ParseIncludeWatchonly(options[\"includeWatching\"], wallet);\n \n         if (options.exists(\"lockUnspents\"))\n             lockUnspents = options[\"lockUnspents\"].get_bool();\n@@ -3076,7 +3046,7 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n             if (options.exists(\"feeRate\")) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both conf_target and feeRate\");\n             }\n-            coinControl.m_confirm_target = ParseConfirmTarget(options[\"conf_target\"], pwallet->chain().estimateMaxBlocks());\n+            coinControl.m_confirm_target = ParseConfirmTarget(options[\"conf_target\"], wallet.chain().estimateMaxBlocks());\n         }\n         if (options.exists(\"estimate_mode\")) {\n             if (options.exists(\"feeRate\")) {\n@@ -3089,7 +3059,7 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n       }\n     } else {\n         // if options is null and not a bool\n-        coinControl.fAllowWatchOnly = ParseIncludeWatchonly(NullUniValue, *pwallet);\n+        coinControl.fAllowWatchOnly = ParseIncludeWatchonly(NullUniValue, wallet);\n     }\n \n     if (tx.vout.size() == 0)\n@@ -3111,15 +3081,14 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n \n     bilingual_str error;\n \n-    if (!pwallet->FundTransaction(tx, fee_out, change_position, error, lockUnspents, setSubtractFeeFromOutputs, coinControl)) {\n+    if (!wallet.FundTransaction(tx, fee_out, change_position, error, lockUnspents, setSubtractFeeFromOutputs, coinControl)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, error.original);\n     }\n }\n \n static UniValue fundrawtransaction(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -3206,7 +3175,7 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n \n     CAmount fee;\n     int change_position;\n-    FundTransaction(pwallet, tx, fee, change_position, request.params[1]);\n+    FundTransaction(*pwallet, tx, fee, change_position, request.params[1]);\n \n     UniValue result(UniValue::VOBJ);\n     result.pushKV(\"hex\", EncodeHexTx(CTransaction(tx)));\n@@ -3218,8 +3187,7 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n \n UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    const CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -3287,7 +3255,7 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n \n     // Sign the transaction\n     LOCK(pwallet->cs_wallet);\n-    EnsureWalletIsUnlocked(pwallet);\n+    EnsureWalletIsUnlocked(*pwallet);\n \n     // Fetch previous transactions (inputs):\n     std::map<COutPoint, Coin> coins;\n@@ -3312,9 +3280,7 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n \n static UniValue bumpfee(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n-\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n@@ -3415,7 +3381,7 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n     LOCK(pwallet->cs_wallet);\n-    EnsureWalletIsUnlocked(pwallet);\n+    EnsureWalletIsUnlocked(*pwallet);\n \n \n     std::vector<bilingual_str> errors;\n@@ -3484,8 +3450,7 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n \n UniValue rescanblockchain(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -3656,15 +3621,13 @@ class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n     UniValue operator()(const WitnessUnknown& id) const { return UniValue(UniValue::VOBJ); }\n };\n \n-static UniValue DescribeWalletAddress(const CWallet* const pwallet, const CTxDestination& dest)\n+static UniValue DescribeWalletAddress(const CWallet& wallet, const CTxDestination& dest)\n {\n     UniValue ret(UniValue::VOBJ);\n     UniValue detail = DescribeAddress(dest);\n     CScript script = GetScriptForDestination(dest);\n     std::unique_ptr<SigningProvider> provider = nullptr;\n-    if (pwallet) {\n-        provider = pwallet->GetSolvingProvider(script);\n-    }\n+    provider = wallet.GetSolvingProvider(script);\n     ret.pushKVs(detail);\n     ret.pushKVs(boost::apply_visitor(DescribeWalletAddressVisitor(provider.get()), dest));\n     return ret;\n@@ -3683,8 +3646,7 @@ static UniValue AddressBookDataToJSON(const CAddressBookData& data, const bool v\n \n UniValue getaddressinfo(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    const CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -3779,7 +3741,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n \n     ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n \n-    UniValue detail = DescribeWalletAddress(pwallet, dest);\n+    UniValue detail = DescribeWalletAddress(*pwallet, dest);\n     ret.pushKVs(detail);\n \n     // DEPRECATED: Return label field if existing. Currently only one label can\n@@ -3826,8 +3788,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n \n static UniValue getaddressesbylabel(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    const CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -3886,8 +3847,7 @@ static UniValue getaddressesbylabel(const JSONRPCRequest& request)\n \n static UniValue listlabels(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    const CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -3942,8 +3902,7 @@ static UniValue listlabels(const JSONRPCRequest& request)\n \n UniValue sethdseed(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -3988,7 +3947,7 @@ UniValue sethdseed(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot set a HD seed on a non-HD wallet. Use the upgradewallet RPC in order to upgrade a non-HD wallet to HD\");\n     }\n \n-    EnsureWalletIsUnlocked(pwallet);\n+    EnsureWalletIsUnlocked(*pwallet);\n \n     bool flush_key_pool = true;\n     if (!request.params[0].isNull()) {\n@@ -4019,8 +3978,7 @@ UniValue sethdseed(const JSONRPCRequest& request)\n \n UniValue walletprocesspsbt(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    const CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -4086,8 +4044,7 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n \n UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -4185,7 +4142,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n         rbf = replaceable_arg.isTrue();\n     }\n     CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf);\n-    FundTransaction(pwallet, rawTx, fee, change_position, request.params[3]);\n+    FundTransaction(*pwallet, rawTx, fee, change_position, request.params[3]);\n \n     // Make a blank psbt\n     PartiallySignedTransaction psbtx(rawTx);\n@@ -4211,8 +4168,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n \n static UniValue upgradewallet(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n@@ -4233,7 +4189,7 @@ static UniValue upgradewallet(const JSONRPCRequest& request)\n \n     RPCTypeCheck(request.params, {UniValue::VNUM}, true);\n \n-    EnsureWalletIsUnlocked(pwallet);\n+    EnsureWalletIsUnlocked(*pwallet);\n \n     int version = 0;\n     if (!request.params[0].isNull()) {"
      },
      {
        "sha": "be2545c03fdf1f8d96bd2ea03a1287aefe0ceb49",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c13d3c31b31a684e8ca560014a08f4cc33e1390d/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c13d3c31b31a684e8ca560014a08f4cc33e1390d/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=c13d3c31b31a684e8ca560014a08f4cc33e1390d",
        "patch": "@@ -38,8 +38,8 @@ void RegisterWalletRPCCommands(interfaces::Chain& chain, std::vector<std::unique\n  */\n std::shared_ptr<CWallet> GetWalletForJSONRPCRequest(const JSONRPCRequest& request);\n \n-void EnsureWalletIsUnlocked(const CWallet*);\n-bool EnsureWalletIsAvailable(const CWallet*, bool avoidException);\n+void EnsureWalletIsUnlocked(const CWallet&);\n+bool EnsureWalletIsAvailable(const std::shared_ptr<CWallet>&, bool avoidException);\n LegacyScriptPubKeyMan& EnsureLegacyScriptPubKeyMan(CWallet& wallet, bool also_create = false);\n \n UniValue getaddressinfo(const JSONRPCRequest& request);"
      }
    ]
  }
]