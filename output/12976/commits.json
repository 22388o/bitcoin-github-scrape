[
  {
    "sha": "d8f914cc01837d9db12bcaa98cb509a89279a09a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOGY5MTRjYzAxODM3ZDlkYjEyYmNhYTk4Y2I1MDlhODkyNzlhMDlh",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-04-13T10:54:19Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-04-13T12:05:40Z"
      },
      "message": "Explicitly call SetCorruptionPossible when corruption is possible\n\nThis allows us to remove a rarely-used DoS argument while\nmaking the calls more explict and easily identifiable.",
      "tree": {
        "sha": "de2b93b04e7ea262e9571a0b9bcd2a2b547dd218",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de2b93b04e7ea262e9571a0b9bcd2a2b547dd218"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8f914cc01837d9db12bcaa98cb509a89279a09a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAlrQnR4ACgkQTYykuhgE\nCQauQw//Yj2ExSiCpgzMjIpya2kdbejK0xXU+PQBst6vQG/dWA7oyrEDT6blR2vk\nosgLul5Jf8qw0S4rOmBAlrEieg84ouF637NItbJiDx981jZu0llyj0tZGYVtPSeh\nC2KXYWOYU8x08FeeocRTMmhmak4xBOTuxmAzVwNtSgqLWBx/6hN/akOSntAUInm8\nVTRWFy16GMmTRIxKcALXcqmS8YUkLJ3nx5GxIcJlfIXmwpDjqQ1gxRQtQrk7UkYp\nk/wOYCKeGLjG/pPN0AFJFQZYD9EZhwmn9FvBqIHxBGUbTU0n9/0oMmEOXaR+hVIz\nAGejNa2KCK4SpEPCqjofFGKiLx7eFY3Mdz8LYDqZMunak2DSGKF+p+0NUwyHyriV\npFGnF7SDZrp7fVAFS9QvvcEr+zwKLptJXbeZYtXw5EuoUdGSNO2/rZpN8N7QQIv1\nXluNzotBzd/At1m0or4xa9ALTrzzteibUeSK041FKN+dfdnVPYMKc1na8eBjTQFv\nPxhhGGxo3534D3scHclIgmg6BmYFbDNnaMtppthulf3spIK+IvJKzLTVTG/q4QMb\nAYXpmrW2y4UD/MG6NyOROBNrw2pYeWNSfQxk2MMVu2c2MPVSzNq+aZ5Qf7rVrTnU\n6EGwE3SqEWc72bqoUKuguoqWa7irUqTG/j82Dx20thaIooErU7I=\n=CrQF\n-----END PGP SIGNATURE-----",
        "payload": "tree de2b93b04e7ea262e9571a0b9bcd2a2b547dd218\nparent 5df84de583c900e00fef63bedaef32786f205a33\nauthor Ben Woosley <ben.woosley@gmail.com> 1523616859 -0700\ncommitter Ben Woosley <ben.woosley@gmail.com> 1523621140 -0700\n\nExplicitly call SetCorruptionPossible when corruption is possible\n\nThis allows us to remove a rarely-used DoS argument while\nmaking the calls more explict and easily identifiable.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8f914cc01837d9db12bcaa98cb509a89279a09a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8f914cc01837d9db12bcaa98cb509a89279a09a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8f914cc01837d9db12bcaa98cb509a89279a09a/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5df84de583c900e00fef63bedaef32786f205a33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5df84de583c900e00fef63bedaef32786f205a33",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5df84de583c900e00fef63bedaef32786f205a33"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 43,
      "deletions": 42
    },
    "files": [
      {
        "sha": "dbb23b7fd560e0f7d6f7337a321151137473a212",
        "filename": "src/consensus/tx_verify.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8f914cc01837d9db12bcaa98cb509a89279a09a/src/consensus/tx_verify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8f914cc01837d9db12bcaa98cb509a89279a09a/src/consensus/tx_verify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.cpp?ref=d8f914cc01837d9db12bcaa98cb509a89279a09a",
        "patch": "@@ -209,7 +209,7 @@ bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, c\n {\n     // are the actual inputs available?\n     if (!inputs.HaveInputs(tx)) {\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-missingorspent\", false,\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-missingorspent\",\n                          strprintf(\"%s: inputs missing/spent\", __func__));\n     }\n \n@@ -235,7 +235,7 @@ bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, c\n \n     const CAmount value_out = tx.GetValueOut();\n     if (nValueIn < value_out) {\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-in-belowout\", false,\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-in-belowout\",\n             strprintf(\"value in (%s) < value out (%s)\", FormatMoney(nValueIn), FormatMoney(value_out)));\n     }\n "
      },
      {
        "sha": "30f2552e5fa37cc44fdc286577b6a408b396f768",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8f914cc01837d9db12bcaa98cb509a89279a09a/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8f914cc01837d9db12bcaa98cb509a89279a09a/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=d8f914cc01837d9db12bcaa98cb509a89279a09a",
        "patch": "@@ -37,13 +37,10 @@ class CValidationState {\n     std::string strDebugMessage;\n public:\n     CValidationState() : mode(MODE_VALID), nDoS(0), chRejectCode(0), corruptionPossible(false) {}\n-    bool DoS(int level, bool ret = false,\n-             unsigned int chRejectCodeIn=0, const std::string &strRejectReasonIn=\"\",\n-             bool corruptionIn=false,\n+    bool DoS(int level, bool ret = false, unsigned int chRejectCodeIn=0, const std::string &strRejectReasonIn=\"\",\n              const std::string &strDebugMessageIn=\"\") {\n         chRejectCode = chRejectCodeIn;\n         strRejectReason = strRejectReasonIn;\n-        corruptionPossible = corruptionIn;\n         strDebugMessage = strDebugMessageIn;\n         if (mode == MODE_ERROR)\n             return ret;\n@@ -54,7 +51,7 @@ class CValidationState {\n     bool Invalid(bool ret = false,\n                  unsigned int _chRejectCode=0, const std::string &_strRejectReason=\"\",\n                  const std::string &_strDebugMessage=\"\") {\n-        return DoS(0, ret, _chRejectCode, _strRejectReason, false, _strDebugMessage);\n+        return DoS(0, ret, _chRejectCode, _strRejectReason, _strDebugMessage);\n     }\n     bool Error(const std::string& strRejectReasonIn) {\n         if (mode == MODE_VALID)"
      },
      {
        "sha": "78b57ae32b295303931dddd34dfe1eed8b33866c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 35,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8f914cc01837d9db12bcaa98cb509a89279a09a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8f914cc01837d9db12bcaa98cb509a89279a09a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d8f914cc01837d9db12bcaa98cb509a89279a09a",
        "patch": "@@ -353,7 +353,7 @@ bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp, bool\n \n     CBlockIndex* tip = chainActive.Tip();\n     assert(tip != nullptr);\n-    \n+\n     CBlockIndex index;\n     index.pprev = tip;\n     // CheckSequenceLocks() uses chainActive.Height()+1 to evaluate\n@@ -564,7 +564,8 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n     // Reject transactions with witness before segregated witness activates (override with -prematurewitness)\n     bool witnessEnabled = IsWitnessEnabled(chainActive.Tip(), chainparams.GetConsensus());\n     if (!gArgs.GetBoolArg(\"-prematurewitness\", false) && tx.HasWitness() && !witnessEnabled) {\n-        return state.DoS(0, false, REJECT_NONSTANDARD, \"no-witness-yet\", true);\n+        state.SetCorruptionPossible();\n+        return state.DoS(0, false, REJECT_NONSTANDARD, \"no-witness-yet\");\n     }\n \n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n@@ -679,8 +680,10 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             return state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n \n         // Check for non-standard witness in P2WSH\n-        if (tx.HasWitness() && fRequireStandard && !IsWitnessStandard(tx, view))\n-            return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-witness-nonstandard\", true);\n+        if (tx.HasWitness() && fRequireStandard && !IsWitnessStandard(tx, view)) {\n+            state.SetCorruptionPossible();\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-witness-nonstandard\");\n+        }\n \n         int64_t nSigOpsCost = GetTransactionSigOpCost(tx, view, STANDARD_SCRIPT_VERIFY_FLAGS);\n \n@@ -709,12 +712,12 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         // MAX_BLOCK_SIGOPS; we still consider this an invalid rather than\n         // merely non-standard transaction.\n         if (nSigOpsCost > MAX_STANDARD_TX_SIGOPS_COST)\n-            return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\", false,\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\",\n                 strprintf(\"%d\", nSigOpsCost));\n \n         CAmount mempoolRejectFee = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n         if (!bypass_limits && mempoolRejectFee > 0 && nModifiedFees < mempoolRejectFee) {\n-            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nModifiedFees, mempoolRejectFee));\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", strprintf(\"%d < %d\", nModifiedFees, mempoolRejectFee));\n         }\n \n         // No transactions are allowed below minRelayTxFee except from disconnected blocks\n@@ -735,7 +738,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         size_t nLimitDescendantSize = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000;\n         std::string errString;\n         if (!pool.CalculateMemPoolAncestors(entry, setAncestors, nLimitAncestors, nLimitAncestorSize, nLimitDescendants, nLimitDescendantSize, errString)) {\n-            return state.DoS(0, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", false, errString);\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", errString);\n         }\n \n         // A transaction that spends outputs that would be replaced by it is invalid. Now\n@@ -747,8 +750,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             const uint256 &hashAncestor = ancestorIt->GetTx().GetHash();\n             if (setConflicts.count(hashAncestor))\n             {\n-                return state.DoS(10, false,\n-                                 REJECT_INVALID, \"bad-txns-spends-conflicting-tx\", false,\n+                return state.DoS(10, false, REJECT_INVALID, \"bad-txns-spends-conflicting-tx\",\n                                  strprintf(\"%s spends conflicting transaction %s\",\n                                            hash.ToString(),\n                                            hashAncestor.ToString()));\n@@ -800,8 +802,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n                 CFeeRate oldFeeRate(mi->GetModifiedFee(), mi->GetTxSize());\n                 if (newFeeRate <= oldFeeRate)\n                 {\n-                    return state.DoS(0, false,\n-                            REJECT_INSUFFICIENTFEE, \"insufficient fee\", false,\n+                    return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient fee\",\n                             strprintf(\"rejecting replacement %s; new feerate %s <= old feerate %s\",\n                                   hash.ToString(),\n                                   newFeeRate.ToString(),\n@@ -829,8 +830,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n                     nConflictingSize += it->GetTxSize();\n                 }\n             } else {\n-                return state.DoS(0, false,\n-                        REJECT_NONSTANDARD, \"too many potential replacements\", false,\n+                return state.DoS(0, false, REJECT_NONSTANDARD, \"too many potential replacements\",\n                         strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n                             hash.ToString(),\n                             nConflictingCount,\n@@ -849,8 +849,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n                     // it's cheaper to just check if the new input refers to a\n                     // tx that's in the mempool.\n                     if (pool.mapTx.find(tx.vin[j].prevout.hash) != pool.mapTx.end())\n-                        return state.DoS(0, false,\n-                                         REJECT_NONSTANDARD, \"replacement-adds-unconfirmed\", false,\n+                        return state.DoS(0, false, REJECT_NONSTANDARD, \"replacement-adds-unconfirmed\",\n                                          strprintf(\"replacement %s adds unconfirmed input, idx %d\",\n                                                   hash.ToString(), j));\n                 }\n@@ -861,8 +860,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             // transactions would not be paid for.\n             if (nModifiedFees < nConflictingFees)\n             {\n-                return state.DoS(0, false,\n-                                 REJECT_INSUFFICIENTFEE, \"insufficient fee\", false,\n+                return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient fee\",\n                                  strprintf(\"rejecting replacement %s, less fees than conflicting txs; %s < %s\",\n                                           hash.ToString(), FormatMoney(nModifiedFees), FormatMoney(nConflictingFees)));\n             }\n@@ -872,8 +870,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             CAmount nDeltaFees = nModifiedFees - nConflictingFees;\n             if (nDeltaFees < ::incrementalRelayFee.GetFee(nSize))\n             {\n-                return state.DoS(0, false,\n-                        REJECT_INSUFFICIENTFEE, \"insufficient fee\", false,\n+                return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient fee\",\n                         strprintf(\"rejecting replacement %s, not enough additional fees to relay; %s < %s\",\n                               hash.ToString(),\n                               FormatMoney(nDeltaFees),\n@@ -3025,7 +3022,7 @@ static bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state,\n {\n     // Check proof of work matches claimed amount\n     if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, consensusParams))\n-        return state.DoS(50, false, REJECT_INVALID, \"high-hash\", false, \"proof of work failed\");\n+        return state.DoS(50, false, REJECT_INVALID, \"high-hash\", \"proof of work failed\");\n \n     return true;\n }\n@@ -3046,14 +3043,18 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n     if (fCheckMerkleRoot) {\n         bool mutated;\n         uint256 hashMerkleRoot2 = BlockMerkleRoot(block, &mutated);\n-        if (block.hashMerkleRoot != hashMerkleRoot2)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txnmrklroot\", true, \"hashMerkleRoot mismatch\");\n+        if (block.hashMerkleRoot != hashMerkleRoot2) {\n+            state.SetCorruptionPossible();\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txnmrklroot\", \"hashMerkleRoot mismatch\");\n+        }\n \n         // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n         // of transactions in a block without affecting the merkle root of a block,\n         // while still invalidating it.\n-        if (mutated)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-duplicate\", true, \"duplicate transaction\");\n+        if (mutated) {\n+            state.SetCorruptionPossible();\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-duplicate\", \"duplicate transaction\");\n+        }\n     }\n \n     // All potential-corruption validation must be done before we do any\n@@ -3064,14 +3065,14 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n \n     // Size limits\n     if (block.vtx.empty() || block.vtx.size() * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT)\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-length\", false, \"size limits failed\");\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-length\", \"size limits failed\");\n \n     // First transaction must be coinbase, the rest must not be\n     if (block.vtx.empty() || !block.vtx[0]->IsCoinBase())\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-cb-missing\", false, \"first tx is not coinbase\");\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-cb-missing\", \"first tx is not coinbase\");\n     for (unsigned int i = 1; i < block.vtx.size(); i++)\n         if (block.vtx[i]->IsCoinBase())\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-multiple\", false, \"more than one coinbase\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-multiple\", \"more than one coinbase\");\n \n     // Check transactions\n     for (const auto& tx : block.vtx)\n@@ -3085,7 +3086,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n         nSigOps += GetLegacySigOpCount(*tx);\n     }\n     if (nSigOps * WITNESS_SCALE_FACTOR > MAX_BLOCK_SIGOPS_COST)\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-sigops\", false, \"out-of-bounds SigOpCount\");\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-sigops\", \"out-of-bounds SigOpCount\");\n \n     if (fCheckPOW && fCheckMerkleRoot)\n         block.fChecked = true;\n@@ -3172,7 +3173,7 @@ static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationSta\n     // Check proof of work\n     const Consensus::Params& consensusParams = params.GetConsensus();\n     if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-diffbits\", false, \"incorrect proof of work\");\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-diffbits\", \"incorrect proof of work\");\n \n     // Check against checkpoints\n     if (fCheckpointsEnabled) {\n@@ -3226,7 +3227,7 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n     // Check that all transactions are finalized\n     for (const auto& tx : block.vtx) {\n         if (!IsFinalTx(*tx, nHeight, nLockTimeCutoff)) {\n-            return state.DoS(10, false, REJECT_INVALID, \"bad-txns-nonfinal\", false, \"non-final transaction\");\n+            return state.DoS(10, false, REJECT_INVALID, \"bad-txns-nonfinal\", \"non-final transaction\");\n         }\n     }\n \n@@ -3236,7 +3237,7 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n         CScript expect = CScript() << nHeight;\n         if (block.vtx[0]->vin[0].scriptSig.size() < expect.size() ||\n             !std::equal(expect.begin(), expect.end(), block.vtx[0]->vin[0].scriptSig.begin())) {\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-height\", false, \"block height mismatch in coinbase\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-height\", \"block height mismatch in coinbase\");\n         }\n     }\n \n@@ -3258,11 +3259,13 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n             // already does not permit it, it is impossible to trigger in the\n             // witness tree.\n             if (block.vtx[0]->vin[0].scriptWitness.stack.size() != 1 || block.vtx[0]->vin[0].scriptWitness.stack[0].size() != 32) {\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-witness-nonce-size\", true, strprintf(\"%s : invalid witness reserved value size\", __func__));\n+                state.SetCorruptionPossible();\n+                return state.DoS(100, false, REJECT_INVALID, \"bad-witness-nonce-size\", strprintf(\"%s : invalid witness reserved value size\", __func__));\n             }\n             CHash256().Write(hashWitness.begin(), 32).Write(&block.vtx[0]->vin[0].scriptWitness.stack[0][0], 32).Finalize(hashWitness.begin());\n             if (memcmp(hashWitness.begin(), &block.vtx[0]->vout[commitpos].scriptPubKey[6], 32)) {\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-witness-merkle-match\", true, strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n+                state.SetCorruptionPossible();\n+                return state.DoS(100, false, REJECT_INVALID, \"bad-witness-merkle-match\", strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n             }\n             fHaveWitness = true;\n         }\n@@ -3272,7 +3275,8 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n     if (!fHaveWitness) {\n       for (const auto& tx : block.vtx) {\n             if (tx->HasWitness()) {\n-                return state.DoS(100, false, REJECT_INVALID, \"unexpected-witness\", true, strprintf(\"%s : unexpected witness data found\", __func__));\n+                state.SetCorruptionPossible();\n+                return state.DoS(100, false, REJECT_INVALID, \"unexpected-witness\", strprintf(\"%s : unexpected witness data found\", __func__));\n             }\n         }\n     }\n@@ -3284,7 +3288,7 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n     // the block hash, so we couldn't mark the block as permanently\n     // failed).\n     if (GetBlockWeight(block) > MAX_BLOCK_WEIGHT) {\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-weight\", false, strprintf(\"%s : weight limit failed\", __func__));\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-weight\", strprintf(\"%s : weight limit failed\", __func__));\n     }\n \n     return true;"
      }
    ]
  },
  {
    "sha": "e94e43d3e677372f2bdd5d5de4a9bea12f236d0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOTRlNDNkM2U2NzczNzJmMmJkZDVkNWRlNGE5YmVhMTJmMjM2ZDBk",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-04-12T20:59:59Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-04-13T12:26:39Z"
      },
      "message": "scripted-diff: Replace all calls to CValidationState::Invalid with ::DoS\n\nThis enables simplification of DoS to occur without separately handling\ndifferent call signatures.\n\n-BEGIN VERIFY SCRIPT-\nfind ./src -type f \\( -name *.cpp -o -name *.h \\) -exec sed -i -E 's/\\b\\.Invalid\\(([^)])/\\.DoS\\(0, \\1/' {} \\;\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "267d45c71fe4ea542ee18480f06aca84774f2992",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/267d45c71fe4ea542ee18480f06aca84774f2992"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e94e43d3e677372f2bdd5d5de4a9bea12f236d0d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAlrQogEACgkQTYykuhgE\nCQb3tg//fWvbIp7RIO+hAy/XE+bG98keKICl0MPpKHsOLWfE9MNwESWf1+3BWxRm\nFN6vEeCozPdcT30VtAZDqXT4ndjF96m/FbFKFy4xNfloAhKToIMj1CKs7Tq61wc1\neKnl7xzrv12MFgtw6InTTBtNUpv8h/5w+agN6r9gqDmZp+u5R0bRjtKC1AdMDdHW\nTTWUNxe3I85Ai8/wnnNFAly5AKxDt6AiWT7BzGOAXHyssYryIYB4jd3JFyuCP1uz\n6ddASgSZzrirLDgg694bnbl8R3zQSg3aErPd38GOc+xcdos40qw4H7NiMZqGW/BB\noN7y6seuXuFxcjYCbeZIGcmk1tgxy1X8Ne6wRzRTqgY9RauDUfBfhW/Y/Dq7YDuF\n7PQjQ5QaAG/U3kVITjDjhEpzUXAUv6jd6DG1Mf53iRmMp98roroaEPYDClAuMzr+\nxsReY9hGAyyVwznS+o3NFQQZz52s3g0rGVW11ZnAh6hw6V+nfluywDldxhQkNKCe\nwfHogsF6LvtnrPTtehHGg37P0hWPkToLFYIcEdq/SadSXdwq+QLHqdWsOsWcsYM4\n6XAXNjpsV3XB8sWn9HSXbHNQHH6sx5J5rxa6UlavRPTs9tHNLVfmGHXEg17XoMEn\nkPoxvK+3CqZq2MhPr212WeBQisulAtHCKyMEw0JnsnCryGdQH5Y=\n=Dhik\n-----END PGP SIGNATURE-----",
        "payload": "tree 267d45c71fe4ea542ee18480f06aca84774f2992\nparent d8f914cc01837d9db12bcaa98cb509a89279a09a\nauthor Ben Woosley <ben.woosley@gmail.com> 1523566799 -0700\ncommitter Ben Woosley <ben.woosley@gmail.com> 1523622399 -0700\n\nscripted-diff: Replace all calls to CValidationState::Invalid with ::DoS\n\nThis enables simplification of DoS to occur without separately handling\ndifferent call signatures.\n\n-BEGIN VERIFY SCRIPT-\nfind ./src -type f \\( -name *.cpp -o -name *.h \\) -exec sed -i -E 's/\\b\\.Invalid\\(([^)])/\\.DoS\\(0, \\1/' {} \\;\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e94e43d3e677372f2bdd5d5de4a9bea12f236d0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e94e43d3e677372f2bdd5d5de4a9bea12f236d0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e94e43d3e677372f2bdd5d5de4a9bea12f236d0d/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8f914cc01837d9db12bcaa98cb509a89279a09a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8f914cc01837d9db12bcaa98cb509a89279a09a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8f914cc01837d9db12bcaa98cb509a89279a09a"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "463e30adc327a4040541c2170400a79783dd2186",
        "filename": "src/consensus/tx_verify.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e94e43d3e677372f2bdd5d5de4a9bea12f236d0d/src/consensus/tx_verify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e94e43d3e677372f2bdd5d5de4a9bea12f236d0d/src/consensus/tx_verify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.cpp?ref=e94e43d3e677372f2bdd5d5de4a9bea12f236d0d",
        "patch": "@@ -221,7 +221,7 @@ bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, c\n \n         // If prev is coinbase, check that it's matured\n         if (coin.IsCoinBase() && nSpendHeight - coin.nHeight < COINBASE_MATURITY) {\n-            return state.Invalid(false,\n+            return state.DoS(0, false,\n                 REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\",\n                 strprintf(\"tried to spend coinbase at depth %d\", nSpendHeight - coin.nHeight));\n         }"
      },
      {
        "sha": "99677de1fe07cf47dc1f42de96f288fb6bde6f09",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e94e43d3e677372f2bdd5d5de4a9bea12f236d0d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e94e43d3e677372f2bdd5d5de4a9bea12f236d0d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e94e43d3e677372f2bdd5d5de4a9bea12f236d0d",
        "patch": "@@ -581,7 +581,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n \n     // is it already in the memory pool?\n     if (pool.exists(hash)) {\n-        return state.Invalid(false, REJECT_DUPLICATE, \"txn-already-in-mempool\");\n+        return state.DoS(0, false, REJECT_DUPLICATE, \"txn-already-in-mempool\");\n     }\n \n     // Check for conflicts with in-memory transactions\n@@ -619,7 +619,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n                     }\n                 }\n                 if (fReplacementOptOut) {\n-                    return state.Invalid(false, REJECT_DUPLICATE, \"txn-mempool-conflict\");\n+                    return state.DoS(0, false, REJECT_DUPLICATE, \"txn-mempool-conflict\");\n                 }\n \n                 setConflicts.insert(ptxConflicting->GetHash());\n@@ -645,7 +645,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n                 for (size_t out = 0; out < tx.vout.size(); out++) {\n                     // Optimistically just do efficient check of cache for outputs\n                     if (pcoinsTip->HaveCoinInCache(COutPoint(hash, out))) {\n-                        return state.Invalid(false, REJECT_DUPLICATE, \"txn-already-known\");\n+                        return state.DoS(0, false, REJECT_DUPLICATE, \"txn-already-known\");\n                     }\n                 }\n                 // Otherwise assume this might be an orphan tx for which we just haven't seen parents yet\n@@ -677,7 +677,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n \n         // Check for non-standard pay-to-script-hash in inputs\n         if (fRequireStandard && !AreInputsStandard(tx, view))\n-            return state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n \n         // Check for non-standard witness in P2WSH\n         if (tx.HasWitness() && fRequireStandard && !IsWitnessStandard(tx, view)) {\n@@ -726,7 +726,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         }\n \n         if (nAbsurdFee && nFees > nAbsurdFee)\n-            return state.Invalid(false,\n+            return state.DoS(0, false,\n                 REJECT_HIGHFEE, \"absurdly-high-fee\",\n                 strprintf(\"%d > %d\", nFees, nAbsurdFee));\n \n@@ -1409,7 +1409,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                         CScriptCheck check2(coin.out, tx, i,\n                                 flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS, cacheSigStore, &txdata);\n                         if (check2())\n-                            return state.Invalid(false, REJECT_NONSTANDARD, strprintf(\"non-mandatory-script-verify-flag (%s)\", ScriptErrorString(check.GetScriptError())));\n+                            return state.DoS(0, false, REJECT_NONSTANDARD, strprintf(\"non-mandatory-script-verify-flag (%s)\", ScriptErrorString(check.GetScriptError())));\n                     }\n                     // Failures of other flags indicate a transaction that is\n                     // invalid in new blocks, e.g. an invalid P2SH. We DoS ban\n@@ -3077,7 +3077,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n     // Check transactions\n     for (const auto& tx : block.vtx)\n         if (!CheckTransaction(*tx, state, false))\n-            return state.Invalid(false, state.GetRejectCode(), state.GetRejectReason(),\n+            return state.DoS(0, false, state.GetRejectCode(), state.GetRejectReason(),\n                                  strprintf(\"Transaction check failed (tx hash %s) %s\", tx->GetHash().ToString(), state.GetDebugMessage()));\n \n     unsigned int nSigOps = 0;\n@@ -3187,18 +3187,18 @@ static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationSta\n \n     // Check timestamp against prev\n     if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n-        return state.Invalid(false, REJECT_INVALID, \"time-too-old\", \"block's timestamp is too early\");\n+        return state.DoS(0, false, REJECT_INVALID, \"time-too-old\", \"block's timestamp is too early\");\n \n     // Check timestamp\n     if (block.GetBlockTime() > nAdjustedTime + MAX_FUTURE_BLOCK_TIME)\n-        return state.Invalid(false, REJECT_INVALID, \"time-too-new\", \"block timestamp too far in the future\");\n+        return state.DoS(0, false, REJECT_INVALID, \"time-too-new\", \"block timestamp too far in the future\");\n \n     // Reject outdated version blocks when 95% (75% on testnet) of the network has upgraded:\n     // check for version 2, 3 and 4 upgrades\n     if((block.nVersion < 2 && nHeight >= consensusParams.BIP34Height) ||\n        (block.nVersion < 3 && nHeight >= consensusParams.BIP66Height) ||\n        (block.nVersion < 4 && nHeight >= consensusParams.BIP65Height))\n-            return state.Invalid(false, REJECT_OBSOLETE, strprintf(\"bad-version(0x%08x)\", block.nVersion),\n+            return state.DoS(0, false, REJECT_OBSOLETE, strprintf(\"bad-version(0x%08x)\", block.nVersion),\n                                  strprintf(\"rejected nVersion=0x%08x block\", block.nVersion));\n \n     return true;\n@@ -3308,7 +3308,7 @@ bool CChainState::AcceptBlockHeader(const CBlockHeader& block, CValidationState&\n             if (ppindex)\n                 *ppindex = pindex;\n             if (pindex->nStatus & BLOCK_FAILED_MASK)\n-                return state.Invalid(error(\"%s: block %s is marked invalid\", __func__, hash.ToString()), 0, \"duplicate\");\n+                return state.DoS(0, error(\"%s: block %s is marked invalid\", __func__, hash.ToString()), 0, \"duplicate\");\n             return true;\n         }\n "
      }
    ]
  },
  {
    "sha": "7ba193e4cb57e49abd471e750ed30bd7abd771da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YmExOTNlNGNiNTdlNDlhYmQ0NzFlNzUwZWQzMGJkN2FiZDc3MWRh",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-04-13T10:45:23Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-04-13T12:27:38Z"
      },
      "message": "Don't pass error to DoS\n\nFunctionally, this was just passing through false each time.\nBetter to separate the calls which allows for simplifying DoS.",
      "tree": {
        "sha": "0636f07ffc4be91b359312d5b62bd1858590c04c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0636f07ffc4be91b359312d5b62bd1858590c04c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ba193e4cb57e49abd471e750ed30bd7abd771da",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAlrQojoACgkQTYykuhgE\nCQaJXg/+MCx/wRXkSBmopge9EfOwzRE3kK0xPjBElbayqP36JkMb+V235T0SjfLN\na8a7zUoZ2bJjJ5JQVojbx3maNLHyYQTBS6CpAKM2ztLzmvxkVzog3X9HmiCQvGA/\nH15FC7MidM/l59uEPKxvwpx0m192BfQqUVb9yujJjW01bfe7PWPzCBhhpw7BBnIE\nWyPo9ha1mjhHvcgikf/HTUdQOwqOC51kKJoT4DY8eotpWDyQWg5cjuf4f40VN+Bt\nDze8jUCIlRzXNS58vhFvZNeY3CY3YUse0c90RVXu05OYfpWvrZD88G3gUTAwwQsz\nLAENxxpvEYdmspi5N1/NZeATKhegEGh1WHadZzNydqHZhWIeqvn1bX7pN4KhhDTU\nP2w08P4cJ3dAmBUcWVB2otojJ3WjODtEKgDbyslMFkOOILdejF7ivNYP8+gwVWjd\njhtO6gVCCAFNb0CEJZYrnaL7F449S6YzzHVPwqk2wVGLqW7w58aCr/DR/AWcQUo8\n+bbX+UjBAoKTsneRjCpmOW7nX3+DqdSNWLy2ZDBhQtOzQHAAU7lebCqqOG7TZ2OC\n0mkXyrXbhQS/i0cFM0S8LZDN+nAvUBGZQY64D3R0ZRqcVUSnr3mGwj0QNXTQGkyf\nUxrZ+nOnProrajzXrwu9xGEC7EQKXRb3OEpvikIfWvI7JwViZqE=\n=h9rC\n-----END PGP SIGNATURE-----",
        "payload": "tree 0636f07ffc4be91b359312d5b62bd1858590c04c\nparent e94e43d3e677372f2bdd5d5de4a9bea12f236d0d\nauthor Ben Woosley <ben.woosley@gmail.com> 1523616323 -0700\ncommitter Ben Woosley <ben.woosley@gmail.com> 1523622458 -0700\n\nDon't pass error to DoS\n\nFunctionally, this was just passing through false each time.\nBetter to separate the calls which allows for simplifying DoS.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ba193e4cb57e49abd471e750ed30bd7abd771da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ba193e4cb57e49abd471e750ed30bd7abd771da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ba193e4cb57e49abd471e750ed30bd7abd771da/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e94e43d3e677372f2bdd5d5de4a9bea12f236d0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e94e43d3e677372f2bdd5d5de4a9bea12f236d0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e94e43d3e677372f2bdd5d5de4a9bea12f236d0d"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 39,
      "deletions": 27
    },
    "files": [
      {
        "sha": "d8532ae1b3eb251cd54d6c63fe49795d6f022c43",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 27,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ba193e4cb57e49abd471e750ed30bd7abd771da/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ba193e4cb57e49abd471e750ed30bd7abd771da/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7ba193e4cb57e49abd471e750ed30bd7abd771da",
        "patch": "@@ -1418,7 +1418,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                     // as to the correct behavior - we may want to continue\n                     // peering with non-upgraded nodes even after soft-fork\n                     // super-majority signaling has occurred.\n-                    return state.DoS(100,false, REJECT_INVALID, strprintf(\"mandatory-script-verify-flag-failed (%s)\", ScriptErrorString(check.GetScriptError())));\n+                    return state.DoS(100, false, REJECT_INVALID, strprintf(\"mandatory-script-verify-flag-failed (%s)\", ScriptErrorString(check.GetScriptError())));\n                 }\n             }\n \n@@ -1927,8 +1927,8 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n         for (const auto& tx : block.vtx) {\n             for (size_t o = 0; o < tx->vout.size(); o++) {\n                 if (view.HaveCoin(COutPoint(tx->GetHash(), o))) {\n-                    return state.DoS(100, error(\"ConnectBlock(): tried to overwrite transaction\"),\n-                                     REJECT_INVALID, \"bad-txns-BIP30\");\n+                    error(\"ConnectBlock(): tried to overwrite transaction\");\n+                    return state.DoS(100, false, REJECT_INVALID, \"bad-txns-BIP30\");\n                 }\n             }\n         }\n@@ -1971,8 +1971,8 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n             }\n             nFees += txfee;\n             if (!MoneyRange(nFees)) {\n-                return state.DoS(100, error(\"%s: accumulated fee in the block out of range.\", __func__),\n-                                 REJECT_INVALID, \"bad-txns-accumulated-fee-outofrange\");\n+                error(\"%s: accumulated fee in the block out of range.\", __func__);\n+                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-accumulated-fee-outofrange\");\n             }\n \n             // Check that transaction is BIP68 final\n@@ -1984,8 +1984,8 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n             }\n \n             if (!SequenceLocks(tx, nLockTimeFlags, &prevheights, *pindex)) {\n-                return state.DoS(100, error(\"%s: contains a non-BIP68-final transaction\", __func__),\n-                                 REJECT_INVALID, \"bad-txns-nonfinal\");\n+                error(\"%s: contains a non-BIP68-final transaction\", __func__);\n+                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-nonfinal\");\n             }\n         }\n \n@@ -1994,9 +1994,10 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n         // * p2sh (when P2SH enabled in flags and excludes coinbase)\n         // * witness (when witness enabled in flags and excludes coinbase)\n         nSigOpsCost += GetTransactionSigOpCost(tx, view, flags);\n-        if (nSigOpsCost > MAX_BLOCK_SIGOPS_COST)\n-            return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n-                             REJECT_INVALID, \"bad-blk-sigops\");\n+        if (nSigOpsCost > MAX_BLOCK_SIGOPS_COST) {\n+            error(\"ConnectBlock(): too many sigops\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-blk-sigops\");\n+        }\n \n         txdata.emplace_back(tx);\n         if (!tx.IsCoinBase())\n@@ -2019,14 +2020,16 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n     LogPrint(BCLog::BENCH, \"      - Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin) [%.2fs (%.2fms/blk)]\\n\", (unsigned)block.vtx.size(), MILLI * (nTime3 - nTime2), MILLI * (nTime3 - nTime2) / block.vtx.size(), nInputs <= 1 ? 0 : MILLI * (nTime3 - nTime2) / (nInputs-1), nTimeConnect * MICRO, nTimeConnect * MILLI / nBlocksTotal);\n \n     CAmount blockReward = nFees + GetBlockSubsidy(pindex->nHeight, chainparams.GetConsensus());\n-    if (block.vtx[0]->GetValueOut() > blockReward)\n-        return state.DoS(100,\n-                         error(\"ConnectBlock(): coinbase pays too much (actual=%d vs limit=%d)\",\n-                               block.vtx[0]->GetValueOut(), blockReward),\n-                               REJECT_INVALID, \"bad-cb-amount\");\n-\n-    if (!control.Wait())\n-        return state.DoS(100, error(\"%s: CheckQueue failed\", __func__), REJECT_INVALID, \"block-validation-failed\");\n+    if (block.vtx[0]->GetValueOut() > blockReward) {\n+        error(\"ConnectBlock(): coinbase pays too much (actual=%d vs limit=%d)\",\n+              block.vtx[0]->GetValueOut(), blockReward);\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-cb-amount\");\n+    }\n+\n+    if (!control.Wait()) {\n+        error(\"%s: CheckQueue failed\", __func__);\n+        return state.DoS(100, false, REJECT_INVALID, \"block-validation-failed\");\n+    }\n     int64_t nTime4 = GetTimeMicros(); nTimeVerify += nTime4 - nTime2;\n     LogPrint(BCLog::BENCH, \"    - Verify %u txins: %.2fms (%.3fms/txin) [%.2fs (%.2fms/blk)]\\n\", nInputs - 1, MILLI * (nTime4 - nTime2), nInputs <= 1 ? 0 : MILLI * (nTime4 - nTime2) / (nInputs-1), nTimeVerify * MICRO, nTimeVerify * MILLI / nBlocksTotal);\n \n@@ -3181,8 +3184,10 @@ static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationSta\n         // GetLastCheckpoint finds the last checkpoint in MapCheckpoints that's in our\n         // MapBlockIndex.\n         CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(params.Checkpoints());\n-        if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n-            return state.DoS(100, error(\"%s: forked chain older than last checkpoint (height %d)\", __func__, nHeight), REJECT_CHECKPOINT, \"bad-fork-prior-to-checkpoint\");\n+        if (pcheckpoint && nHeight < pcheckpoint->nHeight) {\n+            error(\"%s: forked chain older than last checkpoint (height %d)\", __func__, nHeight);\n+            return state.DoS(100, false, REJECT_CHECKPOINT, \"bad-fork-prior-to-checkpoint\");\n+        }\n     }\n \n     // Check timestamp against prev\n@@ -3307,8 +3312,10 @@ bool CChainState::AcceptBlockHeader(const CBlockHeader& block, CValidationState&\n             pindex = miSelf->second;\n             if (ppindex)\n                 *ppindex = pindex;\n-            if (pindex->nStatus & BLOCK_FAILED_MASK)\n-                return state.DoS(0, error(\"%s: block %s is marked invalid\", __func__, hash.ToString()), 0, \"duplicate\");\n+            if (pindex->nStatus & BLOCK_FAILED_MASK) {\n+                error(\"%s: block %s is marked invalid\", __func__, hash.ToString());\n+                return state.DoS(0, false, 0, \"duplicate\");\n+            }\n             return true;\n         }\n \n@@ -3318,11 +3325,15 @@ bool CChainState::AcceptBlockHeader(const CBlockHeader& block, CValidationState&\n         // Get prev block index\n         CBlockIndex* pindexPrev = nullptr;\n         BlockMap::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n-        if (mi == mapBlockIndex.end())\n-            return state.DoS(10, error(\"%s: prev block not found\", __func__), 0, \"prev-blk-not-found\");\n+        if (mi == mapBlockIndex.end()) {\n+            error(\"%s: prev block not found\", __func__);\n+            return state.DoS(10, false, 0, \"prev-blk-not-found\");\n+        }\n         pindexPrev = (*mi).second;\n-        if (pindexPrev->nStatus & BLOCK_FAILED_MASK)\n-            return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n+        if (pindexPrev->nStatus & BLOCK_FAILED_MASK) {\n+            error(\"%s: prev block invalid\", __func__);\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-prevblk\");\n+        }\n         if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))\n             return error(\"%s: Consensus::ContextualCheckBlockHeader: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n \n@@ -3336,7 +3347,8 @@ bool CChainState::AcceptBlockHeader(const CBlockHeader& block, CValidationState&\n                         setDirtyBlockIndex.insert(invalid_walk);\n                         invalid_walk = invalid_walk->pprev;\n                     }\n-                    return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n+                    error(\"%s: prev block invalid\", __func__);\n+                    return state.DoS(100, false, REJECT_INVALID, \"bad-prevblk\");\n                 }\n             }\n         }"
      }
    ]
  },
  {
    "sha": "3c16e9835bcf0c6668660c6338cba30a563c69fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzE2ZTk4MzViY2YwYzY2Njg2NjBjNjMzOGNiYTMwYTU2M2M2OWZi",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-04-13T11:07:24Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-04-13T12:31:07Z"
      },
      "message": "Tidy up DoS to return false always, and not have unnecessary default args\n\nAnd removed Invalid, unused since 2 commits back\n\nThis is setting the stage for the next change...",
      "tree": {
        "sha": "17066f297c9b4a35d28e3b2023597844e0143152",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17066f297c9b4a35d28e3b2023597844e0143152"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c16e9835bcf0c6668660c6338cba30a563c69fb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAlrQoyMACgkQTYykuhgE\nCQaQOg/9F6XeHt3twwYVnysJsdZ5S5QtdvD+cbrry4C68skHfJuGPyZ35WP/FknA\nt6tPfAVupPRPlFt+gTMV3Ay0raPYc3wjsovJ9MHSXk2V/a3m+MvP6IPTd6fe5XUX\nVR4owIqxk9FxHJwv+RNFb/VLS8iJJTePIFi2P9H8JDiVSuq1GwPXE+C5paZrsahH\ny9IjVZwsDIwcspl8F2jPIUEuexXTeXrKTBsAZBGN+lDZOyBk2eloRjSFLABPa4zH\nFg/8AzEloDmAvm6QZigCQizYaIaaLYMyOLKibqDRILnu6008jHgoC7cJSFmXPEFQ\nO69sx1+/rn5O/UVbeMMe8VntNU8GWwzbWbmVazTFsbNEqrVEPscE/0n6y/pXwoFY\nEZadimgLpIP3dwp8koYcCluy0eq1Z96zPUR7hV9cs5AeMuseudI8MITUyeAnkv0E\na52BJOFLHxyL9lKoN0Wc18vTqDqjIIuRPjFczeLctxIh2cLwQTzBaxao0Pxiu+3D\n27yeQz8LSiApdxUV5ui6dWkQFYsizvJTttdZ+rMGMOo9xB/Su/x5nsTUamIWwWzD\nxFZPXjy6Mg6TzxsOCXV7puuzwNaauXUfKDuwNHLBonJ/gn/feAgcaovZX+sPBFrr\nQiP2yPLDXJP5ug3SpRSKpFpwVAMuOoSV2UCtxcQqx6nzOpknVAU=\n=/9KQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 17066f297c9b4a35d28e3b2023597844e0143152\nparent 7ba193e4cb57e49abd471e750ed30bd7abd771da\nauthor Ben Woosley <ben.woosley@gmail.com> 1523617644 -0700\ncommitter Ben Woosley <ben.woosley@gmail.com> 1523622667 -0700\n\nTidy up DoS to return false always, and not have unnecessary default args\n\nAnd removed Invalid, unused since 2 commits back\n\nThis is setting the stage for the next change...\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c16e9835bcf0c6668660c6338cba30a563c69fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c16e9835bcf0c6668660c6338cba30a563c69fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c16e9835bcf0c6668660c6338cba30a563c69fb/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7ba193e4cb57e49abd471e750ed30bd7abd771da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ba193e4cb57e49abd471e750ed30bd7abd771da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ba193e4cb57e49abd471e750ed30bd7abd771da"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 10,
      "deletions": 15
    },
    "files": [
      {
        "sha": "69b6fedb980db3a9089adba15dcc5414de2fca26",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 10,
        "deletions": 15,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c16e9835bcf0c6668660c6338cba30a563c69fb/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c16e9835bcf0c6668660c6338cba30a563c69fb/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=3c16e9835bcf0c6668660c6338cba30a563c69fb",
        "patch": "@@ -37,21 +37,16 @@ class CValidationState {\n     std::string strDebugMessage;\n public:\n     CValidationState() : mode(MODE_VALID), nDoS(0), chRejectCode(0), corruptionPossible(false) {}\n-    bool DoS(int level, bool ret = false, unsigned int chRejectCodeIn=0, const std::string &strRejectReasonIn=\"\",\n-             const std::string &strDebugMessageIn=\"\") {\n-        chRejectCode = chRejectCodeIn;\n-        strRejectReason = strRejectReasonIn;\n-        strDebugMessage = strDebugMessageIn;\n-        if (mode == MODE_ERROR)\n-            return ret;\n-        nDoS += level;\n-        mode = MODE_INVALID;\n-        return ret;\n-    }\n-    bool Invalid(bool ret = false,\n-                 unsigned int _chRejectCode=0, const std::string &_strRejectReason=\"\",\n-                 const std::string &_strDebugMessage=\"\") {\n-        return DoS(0, ret, _chRejectCode, _strRejectReason, _strDebugMessage);\n+    bool DoS(int level, bool ret, unsigned int code, const std::string& reason, const std::string& debug_message = \"\")\n+    {\n+        chRejectCode = code;\n+        strRejectReason = reason;\n+        strDebugMessage = debug_message;\n+        if (mode != MODE_ERROR) {\n+            nDoS += level;\n+            mode = MODE_INVALID;\n+        }\n+        return false;\n     }\n     bool Error(const std::string& strRejectReasonIn) {\n         if (mode == MODE_VALID)"
      }
    ]
  },
  {
    "sha": "9a60ac858e6770410039d8f1bd084010b45c2e5c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YTYwYWM4NThlNjc3MDQxMDAzOWQ4ZjFiZDA4NDAxMGI0NWMyZTVj",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-04-13T11:12:58Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-04-13T12:38:29Z"
      },
      "message": "scripted-diff: Rename CValidationState::DoS to ::Reject and drop return argument\n\nRenaming protects against silent merge conflicts, the argument can be dropped because it is always false,\nand was circumvented in the previous commit.\n\n-BEGIN VERIFY SCRIPT-\nfind ./src -type f \\( -name *.cpp -o -name *.h \\) -exec sed -i -E 's/\\bDoS\\(([[:digit:]]+), false,/Reject\\(\\1,/' {} \\;\nfind ./src -type f \\( -name *.cpp -o -name *.h \\) -exec sed -i -E 's/\\bInvalid\\(/Reject\\(/' {} \\;\nsed -i 's/bool DoS(int level, bool ret,/bool Reject(int level,/' src/consensus/validation.h\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "96702b46b2eddc3db6ca4f0c8d59ced97e0a909f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96702b46b2eddc3db6ca4f0c8d59ced97e0a909f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a60ac858e6770410039d8f1bd084010b45c2e5c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAlrQpNAACgkQTYykuhgE\nCQawdA//SbKKfogOyid7AqGOpii5XMEPK4dkuof5s9WRILR+vp+DgBnLqrCByVXd\nqo0WO84dw0Rnjv3k0rdkyTPJ9ZyWRYtT947ZqseStzcxDJjhy8iISz1tKUuyxwAh\nI/DBnIB9zRKz+cj2DvncCpzkDurB2Vc6lrMWdNDx8EzxFxMQV5BMvyVJl/nwGDxe\nQ5VVNpA4iREDUQ7sHQAJWk64IKsiKoehh7tOuq2QDEn4tGTv2y3lRd1iyvmDLWSZ\nJ+rGBSufNoA2S3z4VNb8y97+iynpbdeph2FwqU7Fz1TjUpqHsWxJF9Ryplz1gt8Y\nLS6hoPFpOl3krxALoX8s9i0VCEBQte+k6PgLigaA8PYsb4QiZBhQoGeFb5CQ1NVS\n5h8tyO+NTKSdv07Jf0oRQ/0d074sa6uex9rDAk50uLBZm9DKMwbJgXUj+A1lgNJp\nc9RuWa9fcOx2ZnWRzYM7hCdh1q3bBn/uHQTDK0jFz/Tb0TiJUFM3Ow2jvs9TDdx0\nsTbzrDif/bURcU+V45zR11SCoy8JcNELMno+KhfM1HYJrevj/YgxN4b/ax25A2S9\nZLnf4YQDqVn2Vgg8oeGS8wyO1JmRXKFddF1k/BIHRIpxFFJkzbJQjopemT4Fmoqv\niUdIYCTw2D4uKqYKm8CZdIeRcAte1SUtOYzML+7gkCH2SRDb9xc=\n=nJHB\n-----END PGP SIGNATURE-----",
        "payload": "tree 96702b46b2eddc3db6ca4f0c8d59ced97e0a909f\nparent 3c16e9835bcf0c6668660c6338cba30a563c69fb\nauthor Ben Woosley <ben.woosley@gmail.com> 1523617978 -0700\ncommitter Ben Woosley <ben.woosley@gmail.com> 1523623109 -0700\n\nscripted-diff: Rename CValidationState::DoS to ::Reject and drop return argument\n\nRenaming protects against silent merge conflicts, the argument can be dropped because it is always false,\nand was circumvented in the previous commit.\n\n-BEGIN VERIFY SCRIPT-\nfind ./src -type f \\( -name *.cpp -o -name *.h \\) -exec sed -i -E 's/\\bDoS\\(([[:digit:]]+), false,/Reject\\(\\1,/' {} \\;\nfind ./src -type f \\( -name *.cpp -o -name *.h \\) -exec sed -i -E 's/\\bInvalid\\(/Reject\\(/' {} \\;\nsed -i 's/bool DoS(int level, bool ret,/bool Reject(int level,/' src/consensus/validation.h\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a60ac858e6770410039d8f1bd084010b45c2e5c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a60ac858e6770410039d8f1bd084010b45c2e5c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a60ac858e6770410039d8f1bd084010b45c2e5c/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c16e9835bcf0c6668660c6338cba30a563c69fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c16e9835bcf0c6668660c6338cba30a563c69fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c16e9835bcf0c6668660c6338cba30a563c69fb"
      }
    ],
    "stats": {
      "total": 138,
      "additions": 69,
      "deletions": 69
    },
    "files": [
      {
        "sha": "331bfb055a5cd7a7a1908abff605001910a9efbc",
        "filename": "src/consensus/tx_verify.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a60ac858e6770410039d8f1bd084010b45c2e5c/src/consensus/tx_verify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a60ac858e6770410039d8f1bd084010b45c2e5c/src/consensus/tx_verify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.cpp?ref=9a60ac858e6770410039d8f1bd084010b45c2e5c",
        "patch": "@@ -160,24 +160,24 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n {\n     // Basic checks that don't depend on any context\n     if (tx.vin.empty())\n-        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vin-empty\");\n+        return state.Reject(10, REJECT_INVALID, \"bad-txns-vin-empty\");\n     if (tx.vout.empty())\n-        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n+        return state.Reject(10, REJECT_INVALID, \"bad-txns-vout-empty\");\n     // Size limits (this doesn't take the witness into account, as that hasn't been checked for malleability)\n     if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT)\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n+        return state.Reject(100, REJECT_INVALID, \"bad-txns-oversize\");\n \n     // Check for negative or overflow output values\n     CAmount nValueOut = 0;\n     for (const auto& txout : tx.vout)\n     {\n         if (txout.nValue < 0)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-negative\");\n+            return state.Reject(100, REJECT_INVALID, \"bad-txns-vout-negative\");\n         if (txout.nValue > MAX_MONEY)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-toolarge\");\n+            return state.Reject(100, REJECT_INVALID, \"bad-txns-vout-toolarge\");\n         nValueOut += txout.nValue;\n         if (!MoneyRange(nValueOut))\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n+            return state.Reject(100, REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n     }\n \n     // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n@@ -186,20 +186,20 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n         for (const auto& txin : tx.vin)\n         {\n             if (!vInOutPoints.insert(txin.prevout).second)\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n+                return state.Reject(100, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n         }\n     }\n \n     if (tx.IsCoinBase())\n     {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n+            return state.Reject(100, REJECT_INVALID, \"bad-cb-length\");\n     }\n     else\n     {\n         for (const auto& txin : tx.vin)\n             if (txin.prevout.IsNull())\n-                return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n+                return state.Reject(10, REJECT_INVALID, \"bad-txns-prevout-null\");\n     }\n \n     return true;\n@@ -209,7 +209,7 @@ bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, c\n {\n     // are the actual inputs available?\n     if (!inputs.HaveInputs(tx)) {\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-missingorspent\",\n+        return state.Reject(100, REJECT_INVALID, \"bad-txns-inputs-missingorspent\",\n                          strprintf(\"%s: inputs missing/spent\", __func__));\n     }\n \n@@ -221,28 +221,28 @@ bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, c\n \n         // If prev is coinbase, check that it's matured\n         if (coin.IsCoinBase() && nSpendHeight - coin.nHeight < COINBASE_MATURITY) {\n-            return state.DoS(0, false,\n+            return state.Reject(0,\n                 REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\",\n                 strprintf(\"tried to spend coinbase at depth %d\", nSpendHeight - coin.nHeight));\n         }\n \n         // Check for negative or overflow input values\n         nValueIn += coin.out.nValue;\n         if (!MoneyRange(coin.out.nValue) || !MoneyRange(nValueIn)) {\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n+            return state.Reject(100, REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n         }\n     }\n \n     const CAmount value_out = tx.GetValueOut();\n     if (nValueIn < value_out) {\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-in-belowout\",\n+        return state.Reject(100, REJECT_INVALID, \"bad-txns-in-belowout\",\n             strprintf(\"value in (%s) < value out (%s)\", FormatMoney(nValueIn), FormatMoney(value_out)));\n     }\n \n     // Tally transaction fees\n     const CAmount txfee_aux = nValueIn - value_out;\n     if (!MoneyRange(txfee_aux)) {\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-outofrange\");\n+        return state.Reject(100, REJECT_INVALID, \"bad-txns-fee-outofrange\");\n     }\n \n     txfee = txfee_aux;"
      },
      {
        "sha": "a2d0e5eb26a9ace249269bd42c1ed62f1af701ba",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a60ac858e6770410039d8f1bd084010b45c2e5c/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a60ac858e6770410039d8f1bd084010b45c2e5c/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=9a60ac858e6770410039d8f1bd084010b45c2e5c",
        "patch": "@@ -37,7 +37,7 @@ class CValidationState {\n     std::string strDebugMessage;\n public:\n     CValidationState() : mode(MODE_VALID), nDoS(0), chRejectCode(0), corruptionPossible(false) {}\n-    bool DoS(int level, bool ret, unsigned int code, const std::string& reason, const std::string& debug_message = \"\")\n+    bool Reject(int level, unsigned int code, const std::string& reason, const std::string& debug_message = \"\")\n     {\n         chRejectCode = code;\n         strRejectReason = reason;"
      },
      {
        "sha": "a3bfb57a3a9cbf0281873db0eff70e72e6441120",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 54,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a60ac858e6770410039d8f1bd084010b45c2e5c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a60ac858e6770410039d8f1bd084010b45c2e5c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9a60ac858e6770410039d8f1bd084010b45c2e5c",
        "patch": "@@ -559,29 +559,29 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n \n     // Coinbase is only valid in a block, not as a loose transaction\n     if (tx.IsCoinBase())\n-        return state.DoS(100, false, REJECT_INVALID, \"coinbase\");\n+        return state.Reject(100, REJECT_INVALID, \"coinbase\");\n \n     // Reject transactions with witness before segregated witness activates (override with -prematurewitness)\n     bool witnessEnabled = IsWitnessEnabled(chainActive.Tip(), chainparams.GetConsensus());\n     if (!gArgs.GetBoolArg(\"-prematurewitness\", false) && tx.HasWitness() && !witnessEnabled) {\n         state.SetCorruptionPossible();\n-        return state.DoS(0, false, REJECT_NONSTANDARD, \"no-witness-yet\");\n+        return state.Reject(0, REJECT_NONSTANDARD, \"no-witness-yet\");\n     }\n \n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n     std::string reason;\n     if (fRequireStandard && !IsStandardTx(tx, reason, witnessEnabled))\n-        return state.DoS(0, false, REJECT_NONSTANDARD, reason);\n+        return state.Reject(0, REJECT_NONSTANDARD, reason);\n \n     // Only accept nLockTime-using transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't\n     // be mined yet.\n     if (!CheckFinalTx(tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n-        return state.DoS(0, false, REJECT_NONSTANDARD, \"non-final\");\n+        return state.Reject(0, REJECT_NONSTANDARD, \"non-final\");\n \n     // is it already in the memory pool?\n     if (pool.exists(hash)) {\n-        return state.DoS(0, false, REJECT_DUPLICATE, \"txn-already-in-mempool\");\n+        return state.Reject(0, REJECT_DUPLICATE, \"txn-already-in-mempool\");\n     }\n \n     // Check for conflicts with in-memory transactions\n@@ -619,7 +619,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n                     }\n                 }\n                 if (fReplacementOptOut) {\n-                    return state.DoS(0, false, REJECT_DUPLICATE, \"txn-mempool-conflict\");\n+                    return state.Reject(0, REJECT_DUPLICATE, \"txn-mempool-conflict\");\n                 }\n \n                 setConflicts.insert(ptxConflicting->GetHash());\n@@ -645,14 +645,14 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n                 for (size_t out = 0; out < tx.vout.size(); out++) {\n                     // Optimistically just do efficient check of cache for outputs\n                     if (pcoinsTip->HaveCoinInCache(COutPoint(hash, out))) {\n-                        return state.DoS(0, false, REJECT_DUPLICATE, \"txn-already-known\");\n+                        return state.Reject(0, REJECT_DUPLICATE, \"txn-already-known\");\n                     }\n                 }\n                 // Otherwise assume this might be an orphan tx for which we just haven't seen parents yet\n                 if (pfMissingInputs) {\n                     *pfMissingInputs = true;\n                 }\n-                return false; // fMissingInputs and !state.IsInvalid() is used to detect this condition, don't set state.Invalid()\n+                return false; // fMissingInputs and !state.IsInvalid() is used to detect this condition, don't set state.Reject()\n             }\n         }\n \n@@ -668,7 +668,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         // Must keep pool.cs for this unless we change CheckSequenceLocks to take a\n         // CoinsViewCache instead of create its own\n         if (!CheckSequenceLocks(tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &lp))\n-            return state.DoS(0, false, REJECT_NONSTANDARD, \"non-BIP68-final\");\n+            return state.Reject(0, REJECT_NONSTANDARD, \"non-BIP68-final\");\n \n         CAmount nFees = 0;\n         if (!Consensus::CheckTxInputs(tx, state, view, GetSpendHeight(view), nFees)) {\n@@ -677,12 +677,12 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n \n         // Check for non-standard pay-to-script-hash in inputs\n         if (fRequireStandard && !AreInputsStandard(tx, view))\n-            return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n+            return state.Reject(0, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n \n         // Check for non-standard witness in P2WSH\n         if (tx.HasWitness() && fRequireStandard && !IsWitnessStandard(tx, view)) {\n             state.SetCorruptionPossible();\n-            return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-witness-nonstandard\");\n+            return state.Reject(0, REJECT_NONSTANDARD, \"bad-witness-nonstandard\");\n         }\n \n         int64_t nSigOpsCost = GetTransactionSigOpCost(tx, view, STANDARD_SCRIPT_VERIFY_FLAGS);\n@@ -712,21 +712,21 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         // MAX_BLOCK_SIGOPS; we still consider this an invalid rather than\n         // merely non-standard transaction.\n         if (nSigOpsCost > MAX_STANDARD_TX_SIGOPS_COST)\n-            return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\",\n+            return state.Reject(0, REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\",\n                 strprintf(\"%d\", nSigOpsCost));\n \n         CAmount mempoolRejectFee = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n         if (!bypass_limits && mempoolRejectFee > 0 && nModifiedFees < mempoolRejectFee) {\n-            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", strprintf(\"%d < %d\", nModifiedFees, mempoolRejectFee));\n+            return state.Reject(0, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", strprintf(\"%d < %d\", nModifiedFees, mempoolRejectFee));\n         }\n \n         // No transactions are allowed below minRelayTxFee except from disconnected blocks\n         if (!bypass_limits && nModifiedFees < ::minRelayTxFee.GetFee(nSize)) {\n-            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"min relay fee not met\");\n+            return state.Reject(0, REJECT_INSUFFICIENTFEE, \"min relay fee not met\");\n         }\n \n         if (nAbsurdFee && nFees > nAbsurdFee)\n-            return state.DoS(0, false,\n+            return state.Reject(0,\n                 REJECT_HIGHFEE, \"absurdly-high-fee\",\n                 strprintf(\"%d > %d\", nFees, nAbsurdFee));\n \n@@ -738,7 +738,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         size_t nLimitDescendantSize = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000;\n         std::string errString;\n         if (!pool.CalculateMemPoolAncestors(entry, setAncestors, nLimitAncestors, nLimitAncestorSize, nLimitDescendants, nLimitDescendantSize, errString)) {\n-            return state.DoS(0, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", errString);\n+            return state.Reject(0, REJECT_NONSTANDARD, \"too-long-mempool-chain\", errString);\n         }\n \n         // A transaction that spends outputs that would be replaced by it is invalid. Now\n@@ -750,7 +750,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             const uint256 &hashAncestor = ancestorIt->GetTx().GetHash();\n             if (setConflicts.count(hashAncestor))\n             {\n-                return state.DoS(10, false, REJECT_INVALID, \"bad-txns-spends-conflicting-tx\",\n+                return state.Reject(10, REJECT_INVALID, \"bad-txns-spends-conflicting-tx\",\n                                  strprintf(\"%s spends conflicting transaction %s\",\n                                            hash.ToString(),\n                                            hashAncestor.ToString()));\n@@ -802,7 +802,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n                 CFeeRate oldFeeRate(mi->GetModifiedFee(), mi->GetTxSize());\n                 if (newFeeRate <= oldFeeRate)\n                 {\n-                    return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient fee\",\n+                    return state.Reject(0, REJECT_INSUFFICIENTFEE, \"insufficient fee\",\n                             strprintf(\"rejecting replacement %s; new feerate %s <= old feerate %s\",\n                                   hash.ToString(),\n                                   newFeeRate.ToString(),\n@@ -830,7 +830,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n                     nConflictingSize += it->GetTxSize();\n                 }\n             } else {\n-                return state.DoS(0, false, REJECT_NONSTANDARD, \"too many potential replacements\",\n+                return state.Reject(0, REJECT_NONSTANDARD, \"too many potential replacements\",\n                         strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n                             hash.ToString(),\n                             nConflictingCount,\n@@ -849,7 +849,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n                     // it's cheaper to just check if the new input refers to a\n                     // tx that's in the mempool.\n                     if (pool.mapTx.find(tx.vin[j].prevout.hash) != pool.mapTx.end())\n-                        return state.DoS(0, false, REJECT_NONSTANDARD, \"replacement-adds-unconfirmed\",\n+                        return state.Reject(0, REJECT_NONSTANDARD, \"replacement-adds-unconfirmed\",\n                                          strprintf(\"replacement %s adds unconfirmed input, idx %d\",\n                                                   hash.ToString(), j));\n                 }\n@@ -860,7 +860,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             // transactions would not be paid for.\n             if (nModifiedFees < nConflictingFees)\n             {\n-                return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient fee\",\n+                return state.Reject(0, REJECT_INSUFFICIENTFEE, \"insufficient fee\",\n                                  strprintf(\"rejecting replacement %s, less fees than conflicting txs; %s < %s\",\n                                           hash.ToString(), FormatMoney(nModifiedFees), FormatMoney(nConflictingFees)));\n             }\n@@ -870,7 +870,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             CAmount nDeltaFees = nModifiedFees - nConflictingFees;\n             if (nDeltaFees < ::incrementalRelayFee.GetFee(nSize))\n             {\n-                return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient fee\",\n+                return state.Reject(0, REJECT_INSUFFICIENTFEE, \"insufficient fee\",\n                         strprintf(\"rejecting replacement %s, not enough additional fees to relay; %s < %s\",\n                               hash.ToString(),\n                               FormatMoney(nDeltaFees),\n@@ -964,7 +964,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         if (!bypass_limits) {\n             LimitMempoolSize(pool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n             if (!pool.exists(hash))\n-                return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool full\");\n+                return state.Reject(0, REJECT_INSUFFICIENTFEE, \"mempool full\");\n         }\n     }\n \n@@ -1409,7 +1409,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                         CScriptCheck check2(coin.out, tx, i,\n                                 flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS, cacheSigStore, &txdata);\n                         if (check2())\n-                            return state.DoS(0, false, REJECT_NONSTANDARD, strprintf(\"non-mandatory-script-verify-flag (%s)\", ScriptErrorString(check.GetScriptError())));\n+                            return state.Reject(0, REJECT_NONSTANDARD, strprintf(\"non-mandatory-script-verify-flag (%s)\", ScriptErrorString(check.GetScriptError())));\n                     }\n                     // Failures of other flags indicate a transaction that is\n                     // invalid in new blocks, e.g. an invalid P2SH. We DoS ban\n@@ -1418,7 +1418,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                     // as to the correct behavior - we may want to continue\n                     // peering with non-upgraded nodes even after soft-fork\n                     // super-majority signaling has occurred.\n-                    return state.DoS(100, false, REJECT_INVALID, strprintf(\"mandatory-script-verify-flag-failed (%s)\", ScriptErrorString(check.GetScriptError())));\n+                    return state.Reject(100, REJECT_INVALID, strprintf(\"mandatory-script-verify-flag-failed (%s)\", ScriptErrorString(check.GetScriptError())));\n                 }\n             }\n \n@@ -1928,7 +1928,7 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n             for (size_t o = 0; o < tx->vout.size(); o++) {\n                 if (view.HaveCoin(COutPoint(tx->GetHash(), o))) {\n                     error(\"ConnectBlock(): tried to overwrite transaction\");\n-                    return state.DoS(100, false, REJECT_INVALID, \"bad-txns-BIP30\");\n+                    return state.Reject(100, REJECT_INVALID, \"bad-txns-BIP30\");\n                 }\n             }\n         }\n@@ -1972,7 +1972,7 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n             nFees += txfee;\n             if (!MoneyRange(nFees)) {\n                 error(\"%s: accumulated fee in the block out of range.\", __func__);\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-accumulated-fee-outofrange\");\n+                return state.Reject(100, REJECT_INVALID, \"bad-txns-accumulated-fee-outofrange\");\n             }\n \n             // Check that transaction is BIP68 final\n@@ -1985,7 +1985,7 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n \n             if (!SequenceLocks(tx, nLockTimeFlags, &prevheights, *pindex)) {\n                 error(\"%s: contains a non-BIP68-final transaction\", __func__);\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-nonfinal\");\n+                return state.Reject(100, REJECT_INVALID, \"bad-txns-nonfinal\");\n             }\n         }\n \n@@ -1996,7 +1996,7 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n         nSigOpsCost += GetTransactionSigOpCost(tx, view, flags);\n         if (nSigOpsCost > MAX_BLOCK_SIGOPS_COST) {\n             error(\"ConnectBlock(): too many sigops\");\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-blk-sigops\");\n+            return state.Reject(100, REJECT_INVALID, \"bad-blk-sigops\");\n         }\n \n         txdata.emplace_back(tx);\n@@ -2023,12 +2023,12 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n     if (block.vtx[0]->GetValueOut() > blockReward) {\n         error(\"ConnectBlock(): coinbase pays too much (actual=%d vs limit=%d)\",\n               block.vtx[0]->GetValueOut(), blockReward);\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-cb-amount\");\n+        return state.Reject(100, REJECT_INVALID, \"bad-cb-amount\");\n     }\n \n     if (!control.Wait()) {\n         error(\"%s: CheckQueue failed\", __func__);\n-        return state.DoS(100, false, REJECT_INVALID, \"block-validation-failed\");\n+        return state.Reject(100, REJECT_INVALID, \"block-validation-failed\");\n     }\n     int64_t nTime4 = GetTimeMicros(); nTimeVerify += nTime4 - nTime2;\n     LogPrint(BCLog::BENCH, \"    - Verify %u txins: %.2fms (%.3fms/txin) [%.2fs (%.2fms/blk)]\\n\", nInputs - 1, MILLI * (nTime4 - nTime2), nInputs <= 1 ? 0 : MILLI * (nTime4 - nTime2) / (nInputs-1), nTimeVerify * MICRO, nTimeVerify * MILLI / nBlocksTotal);\n@@ -3025,7 +3025,7 @@ static bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state,\n {\n     // Check proof of work matches claimed amount\n     if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, consensusParams))\n-        return state.DoS(50, false, REJECT_INVALID, \"high-hash\", \"proof of work failed\");\n+        return state.Reject(50, REJECT_INVALID, \"high-hash\", \"proof of work failed\");\n \n     return true;\n }\n@@ -3048,15 +3048,15 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n         uint256 hashMerkleRoot2 = BlockMerkleRoot(block, &mutated);\n         if (block.hashMerkleRoot != hashMerkleRoot2) {\n             state.SetCorruptionPossible();\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txnmrklroot\", \"hashMerkleRoot mismatch\");\n+            return state.Reject(100, REJECT_INVALID, \"bad-txnmrklroot\", \"hashMerkleRoot mismatch\");\n         }\n \n         // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n         // of transactions in a block without affecting the merkle root of a block,\n         // while still invalidating it.\n         if (mutated) {\n             state.SetCorruptionPossible();\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-duplicate\", \"duplicate transaction\");\n+            return state.Reject(100, REJECT_INVALID, \"bad-txns-duplicate\", \"duplicate transaction\");\n         }\n     }\n \n@@ -3068,19 +3068,19 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n \n     // Size limits\n     if (block.vtx.empty() || block.vtx.size() * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT)\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-length\", \"size limits failed\");\n+        return state.Reject(100, REJECT_INVALID, \"bad-blk-length\", \"size limits failed\");\n \n     // First transaction must be coinbase, the rest must not be\n     if (block.vtx.empty() || !block.vtx[0]->IsCoinBase())\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-cb-missing\", \"first tx is not coinbase\");\n+        return state.Reject(100, REJECT_INVALID, \"bad-cb-missing\", \"first tx is not coinbase\");\n     for (unsigned int i = 1; i < block.vtx.size(); i++)\n         if (block.vtx[i]->IsCoinBase())\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-multiple\", \"more than one coinbase\");\n+            return state.Reject(100, REJECT_INVALID, \"bad-cb-multiple\", \"more than one coinbase\");\n \n     // Check transactions\n     for (const auto& tx : block.vtx)\n         if (!CheckTransaction(*tx, state, false))\n-            return state.DoS(0, false, state.GetRejectCode(), state.GetRejectReason(),\n+            return state.Reject(0, state.GetRejectCode(), state.GetRejectReason(),\n                                  strprintf(\"Transaction check failed (tx hash %s) %s\", tx->GetHash().ToString(), state.GetDebugMessage()));\n \n     unsigned int nSigOps = 0;\n@@ -3089,7 +3089,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n         nSigOps += GetLegacySigOpCount(*tx);\n     }\n     if (nSigOps * WITNESS_SCALE_FACTOR > MAX_BLOCK_SIGOPS_COST)\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-sigops\", \"out-of-bounds SigOpCount\");\n+        return state.Reject(100, REJECT_INVALID, \"bad-blk-sigops\", \"out-of-bounds SigOpCount\");\n \n     if (fCheckPOW && fCheckMerkleRoot)\n         block.fChecked = true;\n@@ -3176,7 +3176,7 @@ static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationSta\n     // Check proof of work\n     const Consensus::Params& consensusParams = params.GetConsensus();\n     if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-diffbits\", \"incorrect proof of work\");\n+        return state.Reject(100, REJECT_INVALID, \"bad-diffbits\", \"incorrect proof of work\");\n \n     // Check against checkpoints\n     if (fCheckpointsEnabled) {\n@@ -3186,24 +3186,24 @@ static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationSta\n         CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(params.Checkpoints());\n         if (pcheckpoint && nHeight < pcheckpoint->nHeight) {\n             error(\"%s: forked chain older than last checkpoint (height %d)\", __func__, nHeight);\n-            return state.DoS(100, false, REJECT_CHECKPOINT, \"bad-fork-prior-to-checkpoint\");\n+            return state.Reject(100, REJECT_CHECKPOINT, \"bad-fork-prior-to-checkpoint\");\n         }\n     }\n \n     // Check timestamp against prev\n     if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n-        return state.DoS(0, false, REJECT_INVALID, \"time-too-old\", \"block's timestamp is too early\");\n+        return state.Reject(0, REJECT_INVALID, \"time-too-old\", \"block's timestamp is too early\");\n \n     // Check timestamp\n     if (block.GetBlockTime() > nAdjustedTime + MAX_FUTURE_BLOCK_TIME)\n-        return state.DoS(0, false, REJECT_INVALID, \"time-too-new\", \"block timestamp too far in the future\");\n+        return state.Reject(0, REJECT_INVALID, \"time-too-new\", \"block timestamp too far in the future\");\n \n     // Reject outdated version blocks when 95% (75% on testnet) of the network has upgraded:\n     // check for version 2, 3 and 4 upgrades\n     if((block.nVersion < 2 && nHeight >= consensusParams.BIP34Height) ||\n        (block.nVersion < 3 && nHeight >= consensusParams.BIP66Height) ||\n        (block.nVersion < 4 && nHeight >= consensusParams.BIP65Height))\n-            return state.DoS(0, false, REJECT_OBSOLETE, strprintf(\"bad-version(0x%08x)\", block.nVersion),\n+            return state.Reject(0, REJECT_OBSOLETE, strprintf(\"bad-version(0x%08x)\", block.nVersion),\n                                  strprintf(\"rejected nVersion=0x%08x block\", block.nVersion));\n \n     return true;\n@@ -3232,7 +3232,7 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n     // Check that all transactions are finalized\n     for (const auto& tx : block.vtx) {\n         if (!IsFinalTx(*tx, nHeight, nLockTimeCutoff)) {\n-            return state.DoS(10, false, REJECT_INVALID, \"bad-txns-nonfinal\", \"non-final transaction\");\n+            return state.Reject(10, REJECT_INVALID, \"bad-txns-nonfinal\", \"non-final transaction\");\n         }\n     }\n \n@@ -3242,7 +3242,7 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n         CScript expect = CScript() << nHeight;\n         if (block.vtx[0]->vin[0].scriptSig.size() < expect.size() ||\n             !std::equal(expect.begin(), expect.end(), block.vtx[0]->vin[0].scriptSig.begin())) {\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-height\", \"block height mismatch in coinbase\");\n+            return state.Reject(100, REJECT_INVALID, \"bad-cb-height\", \"block height mismatch in coinbase\");\n         }\n     }\n \n@@ -3265,12 +3265,12 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n             // witness tree.\n             if (block.vtx[0]->vin[0].scriptWitness.stack.size() != 1 || block.vtx[0]->vin[0].scriptWitness.stack[0].size() != 32) {\n                 state.SetCorruptionPossible();\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-witness-nonce-size\", strprintf(\"%s : invalid witness reserved value size\", __func__));\n+                return state.Reject(100, REJECT_INVALID, \"bad-witness-nonce-size\", strprintf(\"%s : invalid witness reserved value size\", __func__));\n             }\n             CHash256().Write(hashWitness.begin(), 32).Write(&block.vtx[0]->vin[0].scriptWitness.stack[0][0], 32).Finalize(hashWitness.begin());\n             if (memcmp(hashWitness.begin(), &block.vtx[0]->vout[commitpos].scriptPubKey[6], 32)) {\n                 state.SetCorruptionPossible();\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-witness-merkle-match\", strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n+                return state.Reject(100, REJECT_INVALID, \"bad-witness-merkle-match\", strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n             }\n             fHaveWitness = true;\n         }\n@@ -3281,7 +3281,7 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n       for (const auto& tx : block.vtx) {\n             if (tx->HasWitness()) {\n                 state.SetCorruptionPossible();\n-                return state.DoS(100, false, REJECT_INVALID, \"unexpected-witness\", strprintf(\"%s : unexpected witness data found\", __func__));\n+                return state.Reject(100, REJECT_INVALID, \"unexpected-witness\", strprintf(\"%s : unexpected witness data found\", __func__));\n             }\n         }\n     }\n@@ -3293,7 +3293,7 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n     // the block hash, so we couldn't mark the block as permanently\n     // failed).\n     if (GetBlockWeight(block) > MAX_BLOCK_WEIGHT) {\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-weight\", strprintf(\"%s : weight limit failed\", __func__));\n+        return state.Reject(100, REJECT_INVALID, \"bad-blk-weight\", strprintf(\"%s : weight limit failed\", __func__));\n     }\n \n     return true;\n@@ -3314,7 +3314,7 @@ bool CChainState::AcceptBlockHeader(const CBlockHeader& block, CValidationState&\n                 *ppindex = pindex;\n             if (pindex->nStatus & BLOCK_FAILED_MASK) {\n                 error(\"%s: block %s is marked invalid\", __func__, hash.ToString());\n-                return state.DoS(0, false, 0, \"duplicate\");\n+                return state.Reject(0, 0, \"duplicate\");\n             }\n             return true;\n         }\n@@ -3327,12 +3327,12 @@ bool CChainState::AcceptBlockHeader(const CBlockHeader& block, CValidationState&\n         BlockMap::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n         if (mi == mapBlockIndex.end()) {\n             error(\"%s: prev block not found\", __func__);\n-            return state.DoS(10, false, 0, \"prev-blk-not-found\");\n+            return state.Reject(10, 0, \"prev-blk-not-found\");\n         }\n         pindexPrev = (*mi).second;\n         if (pindexPrev->nStatus & BLOCK_FAILED_MASK) {\n             error(\"%s: prev block invalid\", __func__);\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-prevblk\");\n+            return state.Reject(100, REJECT_INVALID, \"bad-prevblk\");\n         }\n         if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))\n             return error(\"%s: Consensus::ContextualCheckBlockHeader: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n@@ -3348,7 +3348,7 @@ bool CChainState::AcceptBlockHeader(const CBlockHeader& block, CValidationState&\n                         invalid_walk = invalid_walk->pprev;\n                     }\n                     error(\"%s: prev block invalid\", __func__);\n-                    return state.DoS(100, false, REJECT_INVALID, \"bad-prevblk\");\n+                    return state.Reject(100, REJECT_INVALID, \"bad-prevblk\");\n                 }\n             }\n         }"
      }
    ]
  }
]