[
  {
    "sha": "4f050b91c706181084b9288b8a87b7b637e4e4f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZjA1MGI5MWM3MDYxODEwODRiOTI4OGI4YTg3YjdiNjM3ZTRlNGY3",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-03-27T18:17:13Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-07-22T01:00:31Z"
      },
      "message": "move-onlyish: move CCoinsViewErrorCatcher out of init.cpp\n\nand into coins.cpp. This move is necessary so that we can later include a\nCCoinsViewErrorCatcher instance under CChainState.\n\nCo-authored-by: MarcoFalke <falke.marco@gmail.com>",
      "tree": {
        "sha": "04d89c31739b0fd905dcab774726852d9653f40f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04d89c31739b0fd905dcab774726852d9653f40f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f050b91c706181084b9288b8a87b7b637e4e4f7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f050b91c706181084b9288b8a87b7b637e4e4f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4f050b91c706181084b9288b8a87b7b637e4e4f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f050b91c706181084b9288b8a87b7b637e4e4f7/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2679bb8919b5089f8067ccfd94f766747b8df671",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2679bb8919b5089f8067ccfd94f766747b8df671",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2679bb8919b5089f8067ccfd94f766747b8df671"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 48,
      "deletions": 25
    },
    "files": [
      {
        "sha": "6b85edd01a9c95366068dfe02a3eda3e1f532241",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f050b91c706181084b9288b8a87b7b637e4e4f7/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f050b91c706181084b9288b8a87b7b637e4e4f7/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=4f050b91c706181084b9288b8a87b7b637e4e4f7",
        "patch": "@@ -5,6 +5,7 @@\n #include <coins.h>\n \n #include <consensus/consensus.h>\n+#include <logging.h>\n #include <random.h>\n #include <version.h>\n \n@@ -258,3 +259,19 @@ const Coin& AccessByTxid(const CCoinsViewCache& view, const uint256& txid)\n     }\n     return coinEmpty;\n }\n+\n+bool CCoinsViewErrorCatcher::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n+    try {\n+        return CCoinsViewBacked::GetCoin(outpoint, coin);\n+    } catch(const std::runtime_error& e) {\n+        for (auto f : m_err_callbacks) {\n+            f();\n+        }\n+        LogPrintf(\"Error reading from database: %s\\n\", e.what());\n+        // Starting the shutdown sequence and returning false to the caller would be\n+        // interpreted as 'entry not found' (as opposed to unable to read data), and\n+        // could lead to invalid interpretation. Just exit immediately, as we can't\n+        // continue anyway, and all writes should be atomic.\n+        std::abort();\n+    }\n+}"
      },
      {
        "sha": "dca1beabb6f1ff4945efffd7f8d894eaf1ee1c40",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f050b91c706181084b9288b8a87b7b637e4e4f7/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f050b91c706181084b9288b8a87b7b637e4e4f7/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=4f050b91c706181084b9288b8a87b7b637e4e4f7",
        "patch": "@@ -17,6 +17,7 @@\n #include <assert.h>\n #include <stdint.h>\n \n+#include <functional>\n #include <unordered_map>\n \n /**\n@@ -315,4 +316,28 @@ void AddCoins(CCoinsViewCache& cache, const CTransaction& tx, int nHeight, bool\n //! lookups to database, so it should be used with care.\n const Coin& AccessByTxid(const CCoinsViewCache& cache, const uint256& txid);\n \n+/**\n+ * This is a minimally invasive approach to shutdown on LevelDB read errors from the\n+ * chainstate, while keeping user interface out of the common library, which is shared\n+ * between bitcoind, and bitcoin-qt and non-server tools.\n+ *\n+ * Writes do not need similar protection, as failure to write is handled by the caller.\n+*/\n+class CCoinsViewErrorCatcher final : public CCoinsViewBacked\n+{\n+public:\n+    explicit CCoinsViewErrorCatcher(CCoinsView* view) : CCoinsViewBacked(view) {}\n+\n+    void AddReadErrCallback(std::function<void()> f) {\n+        m_err_callbacks.emplace_back(std::move(f));\n+    }\n+\n+    bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;\n+\n+private:\n+    /** A list of callbacks to execute upon leveldb read error. */\n+    std::vector<std::function<void()>> m_err_callbacks;\n+\n+};\n+\n #endif // BITCOIN_COINS_H"
      },
      {
        "sha": "c506a87adedefacccb63a67e1d203cced06ec0e1",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 25,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f050b91c706181084b9288b8a87b7b637e4e4f7/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f050b91c706181084b9288b8a87b7b637e4e4f7/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4f050b91c706181084b9288b8a87b7b637e4e4f7",
        "patch": "@@ -15,6 +15,7 @@\n #include <blockfilter.h>\n #include <chain.h>\n #include <chainparams.h>\n+#include <coins.h>\n #include <compat/sanity.h>\n #include <consensus/validation.h>\n #include <fs.h>\n@@ -146,31 +147,6 @@ NODISCARD static bool CreatePidFile()\n // shutdown thing.\n //\n \n-/**\n- * This is a minimally invasive approach to shutdown on LevelDB read errors from the\n- * chainstate, while keeping user interface out of the common library, which is shared\n- * between bitcoind, and bitcoin-qt and non-server tools.\n-*/\n-class CCoinsViewErrorCatcher final : public CCoinsViewBacked\n-{\n-public:\n-    explicit CCoinsViewErrorCatcher(CCoinsView* view) : CCoinsViewBacked(view) {}\n-    bool GetCoin(const COutPoint &outpoint, Coin &coin) const override {\n-        try {\n-            return CCoinsViewBacked::GetCoin(outpoint, coin);\n-        } catch(const std::runtime_error& e) {\n-            uiInterface.ThreadSafeMessageBox(_(\"Error reading from database, shutting down.\"), \"\", CClientUIInterface::MSG_ERROR);\n-            LogPrintf(\"Error reading from database: %s\\n\", e.what());\n-            // Starting the shutdown sequence and returning false to the caller would be\n-            // interpreted as 'entry not found' (as opposed to unable to read data), and\n-            // could lead to invalid interpretation. Just exit immediately, as we can't\n-            // continue anyway, and all writes should be atomic.\n-            abort();\n-        }\n-    }\n-    // Writes do not need similar protection, as failure to write is handled by the caller.\n-};\n-\n static std::unique_ptr<CCoinsViewErrorCatcher> pcoinscatcher;\n static std::unique_ptr<ECCVerifyHandle> globalVerifyHandle;\n \n@@ -1542,6 +1518,11 @@ bool AppInitMain(InitInterfaces& interfaces)\n \n                 pcoinsdbview.reset(new CCoinsViewDB(nCoinDBCache, false, fReset || fReindexChainState));\n                 pcoinscatcher.reset(new CCoinsViewErrorCatcher(pcoinsdbview.get()));\n+                pcoinscatcher->AddReadErrCallback([]() {\n+                    uiInterface.ThreadSafeMessageBox(\n+                        _(\"Error reading from database, shutting down.\"),\n+                        \"\", CClientUIInterface::MSG_ERROR);\n+                });\n \n                 // If necessary, upgrade from older database format.\n                 // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate"
      }
    ]
  }
]