[
  {
    "sha": "2ce3447eb1e25ec7aec4b300dabf6c1e394f1906",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyY2UzNDQ3ZWIxZTI1ZWM3YWVjNGIzMDBkYWJmNmMxZTM5NGYxOTA2",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2019-11-19T14:49:35Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-02-14T09:45:40Z"
      },
      "message": "Deduplicate the message verifying code\n\nThe logic of verifying a message was duplicated in 2 places:\n\nsrc/qt/signverifymessagedialog.cpp\n  SignVerifyMessageDialog::on_verifyMessageButton_VM_clicked()\n\nsrc/rpc/misc.cpp\n  verifymessage()\n\nwith the only difference being the result handling. Move the logic into\na dedicated\n\nsrc/util/message.cpp\n  MessageVerify()\n\nwhich returns a set of result codes, call it from the 2 places and just\nhandle the results differently in the callers.",
      "tree": {
        "sha": "34f8785b1b3836e8d8d12b32851f897dd926b1bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34f8785b1b3836e8d8d12b32851f897dd926b1bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ce3447eb1e25ec7aec4b300dabf6c1e394f1906",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl5GbEQACgkQVN8G9ktV\ny7/KbCAAgJeQ2HefBUysDbuG7EwDpoxtj5zau5ppNHs4AS80Eh07te4HOJNermC7\ntMFn2DcJ5YLW/C+gSIGEsexXX9K3G39sZ4uKVagw6pwDgklGkcUlKlSQcmqqLajA\n+QaxPwoNI8qeBMd27S6nyhRC9bXtSXQiY1DLJ9n4w09aTuQ3TW/YziU8UOM6+puF\ndg4ZPJB+B9No3TbeCS4CEL+lAuKba8zDuwiHulNKOJoixmOMUEWAdoozOrW71VGQ\nEc4rE8y5l+ZoxZ2aoFL4MRfQZYaZradsjA3fCZB+gkbNgd1YmP8qGUZqUFRey6EM\nUxXfFg8qnXPj+2hE22NhfXlIdXe4nA/z4AVVdFWxO+Z9HvbfMKhZ5mGmGHV/HOXH\nE+WNKZVbcIp3nY2niKum6yygN1OuvCa7brO1CRIDcFtx43dhMP4yBIjV4zmqux6z\nvRph5Yr6XMQsNxTzfIzchJQo2wejZs5NZrMzgGqvx5dfm1bD8Vxv5s0/PjMdoH+s\nf2t3+vSqfcxepX9Of93FiEKq9Em9tKvmhxZskV9zhkry1pACN9jLxjlIGnLdTyM6\nHZSM7yWOcaMoGl8T9mjIGTyBllEowghnnovfqAs2G3QG1cWzzj5TOLeo4kto/LbL\nnmWpeoFdZTXb/GXiqEoyP0K/E0FeN+2TFPDicD0NmKTnkz7rBtE7dF4KKE4SH/6/\nYH9oKQlziE9TN5z+aRXPiXxLuHaA1UF9zZyBrbb+rrjjJtRyPsoXDZz3F3IOrW+v\nezdiL+U/hQnA04SuCqmUI4Xd29gKzw3wpJ0izLlxd+//ySXKkzt84T5xBIQUeiAh\nmjfEbcmWaYwug7xw3crhICoZ+nDV2+E7EYg85udqqmVC2hp/f+W/YA0CwLipAlOt\ncKOM8TKrQyQiw2PdUPDHlV6KpwejOTbBIh+pB88w1PIGw9en36XCI4zCCaKGVmop\nvbJtAx4CCwqfNRXisA5Y2dkUzJOQh2sIMujx9UAo2vPQ3PDEpMyL5r1O+QQ5Jwoj\nUr+isD8O8Mprht30ngxllNtuOo4q6IV935o6eAwjatJJYjdUaIPLXRJax1fD1o8C\nSXTkYcR17XBCwMIFytVMnoAxHuSsZKyb4zyW/zJfNI4Nvy99S9OQhYzGLybzkL93\np7cupRWNd7bbeblMj6NJ5jSxGJaqv2LyJYrLy6b6ej9a0dpZX1bqjcjveXn162Dl\nIqYCo5Tp4IrbnVEMuU9Hr1Dp63SlA0Bsn9kHndNyH7fNDxygKzijpaBqYnpxy69v\nXDCaz3JXitZB4fB19oYB9HbDdCGJZz+FRdmTA845IZoaTGKQNUS3dmsgq/qALTvo\njrgGsH754/SHCpm8bPqIFbeUXE5YhA==\n=+tbq\n-----END PGP SIGNATURE-----",
        "payload": "tree 34f8785b1b3836e8d8d12b32851f897dd926b1bd\nparent 470664f2b788e2cce9202991d11476a6fef00ef4\nauthor Vasil Dimov <vd@FreeBSD.org> 1574174975 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1581673540 +0100\n\nDeduplicate the message verifying code\n\nThe logic of verifying a message was duplicated in 2 places:\n\nsrc/qt/signverifymessagedialog.cpp\n  SignVerifyMessageDialog::on_verifyMessageButton_VM_clicked()\n\nsrc/rpc/misc.cpp\n  verifymessage()\n\nwith the only difference being the result handling. Move the logic into\na dedicated\n\nsrc/util/message.cpp\n  MessageVerify()\n\nwhich returns a set of result codes, call it from the 2 places and just\nhandle the results differently in the callers.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ce3447eb1e25ec7aec4b300dabf6c1e394f1906",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ce3447eb1e25ec7aec4b300dabf6c1e394f1906",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ce3447eb1e25ec7aec4b300dabf6c1e394f1906/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "470664f2b788e2cce9202991d11476a6fef00ef4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/470664f2b788e2cce9202991d11476a6fef00ef4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/470664f2b788e2cce9202991d11476a6fef00ef4"
      }
    ],
    "stats": {
      "total": 273,
      "additions": 211,
      "deletions": 62
    },
    "files": [
      {
        "sha": "eac7b38e03e90ba58cae64f5d59ee0e5d8f5d707",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce3447eb1e25ec7aec4b300dabf6c1e394f1906/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce3447eb1e25ec7aec4b300dabf6c1e394f1906/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=2ce3447eb1e25ec7aec4b300dabf6c1e394f1906",
        "patch": "@@ -220,6 +220,7 @@ BITCOIN_CORE_H = \\\n   util/system.h \\\n   util/macros.h \\\n   util/memory.h \\\n+  util/message.h \\\n   util/moneystr.h \\\n   util/rbf.h \\\n   util/settings.h \\\n@@ -517,6 +518,7 @@ libbitcoin_util_a_SOURCES = \\\n   util/error.cpp \\\n   util/fees.cpp \\\n   util/system.cpp \\\n+  util/message.cpp \\\n   util/moneystr.cpp \\\n   util/rbf.cpp \\\n   util/settings.cpp \\"
      },
      {
        "sha": "aa8e23f53b9a02e9a41e186ba9cd02181b55b32d",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 36,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce3447eb1e25ec7aec4b300dabf6c1e394f1906/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce3447eb1e25ec7aec4b300dabf6c1e394f1906/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=2ce3447eb1e25ec7aec4b300dabf6c1e394f1906",
        "patch": "@@ -11,7 +11,7 @@\n #include <qt/walletmodel.h>\n \n #include <key_io.h>\n-#include <util/validation.h> // For strMessageMagic\n+#include <util/message.h> // For strMessageMagic, MessageVerify()\n #include <wallet/wallet.h>\n \n #include <vector>\n@@ -189,51 +189,57 @@ void SignVerifyMessageDialog::on_addressBookButton_VM_clicked()\n \n void SignVerifyMessageDialog::on_verifyMessageButton_VM_clicked()\n {\n-    CTxDestination destination = DecodeDestination(ui->addressIn_VM->text().toStdString());\n-    if (!IsValidDestination(destination)) {\n+    const std::string& address = ui->addressIn_VM->text().toStdString();\n+    const std::string& signature = ui->signatureIn_VM->text().toStdString();\n+    const std::string& message = ui->messageIn_VM->document()->toPlainText().toStdString();\n+\n+    const auto result = MessageVerify(address, signature, message);\n+\n+    if (result == MessageVerificationResult::OK) {\n+        ui->statusLabel_VM->setStyleSheet(\"QLabel { color: green; }\");\n+    } else {\n         ui->statusLabel_VM->setStyleSheet(\"QLabel { color: red; }\");\n-        ui->statusLabel_VM->setText(tr(\"The entered address is invalid.\") + QString(\" \") + tr(\"Please check the address and try again.\"));\n-        return;\n     }\n-    if (!boost::get<PKHash>(&destination)) {\n+\n+    switch (result) {\n+    case MessageVerificationResult::OK:\n+        ui->statusLabel_VM->setText(\n+            QString(\"<nobr>\") + tr(\"Message verified.\") + QString(\"</nobr>\")\n+        );\n+        return;\n+    case MessageVerificationResult::ERR_INVALID_ADDRESS:\n+        ui->statusLabel_VM->setText(\n+            tr(\"The entered address is invalid.\") + QString(\" \") +\n+            tr(\"Please check the address and try again.\")\n+        );\n+        return;\n+    case MessageVerificationResult::ERR_ADDRESS_NO_KEY:\n         ui->addressIn_VM->setValid(false);\n-        ui->statusLabel_VM->setStyleSheet(\"QLabel { color: red; }\");\n-        ui->statusLabel_VM->setText(tr(\"The entered address does not refer to a key.\") + QString(\" \") + tr(\"Please check the address and try again.\"));\n+        ui->statusLabel_VM->setText(\n+            tr(\"The entered address does not refer to a key.\") + QString(\" \") +\n+            tr(\"Please check the address and try again.\")\n+        );\n         return;\n-    }\n-\n-    bool fInvalid = false;\n-    std::vector<unsigned char> vchSig = DecodeBase64(ui->signatureIn_VM->text().toStdString().c_str(), &fInvalid);\n-\n-    if (fInvalid)\n-    {\n+    case MessageVerificationResult::ERR_MALFORMED_SIGNATURE:\n         ui->signatureIn_VM->setValid(false);\n-        ui->statusLabel_VM->setStyleSheet(\"QLabel { color: red; }\");\n-        ui->statusLabel_VM->setText(tr(\"The signature could not be decoded.\") + QString(\" \") + tr(\"Please check the signature and try again.\"));\n+        ui->statusLabel_VM->setText(\n+            tr(\"The signature could not be decoded.\") + QString(\" \") +\n+            tr(\"Please check the signature and try again.\")\n+        );\n         return;\n-    }\n-\n-    CHashWriter ss(SER_GETHASH, 0);\n-    ss << strMessageMagic;\n-    ss << ui->messageIn_VM->document()->toPlainText().toStdString();\n-\n-    CPubKey pubkey;\n-    if (!pubkey.RecoverCompact(ss.GetHash(), vchSig))\n-    {\n+    case MessageVerificationResult::ERR_PUBKEY_NOT_RECOVERED:\n         ui->signatureIn_VM->setValid(false);\n-        ui->statusLabel_VM->setStyleSheet(\"QLabel { color: red; }\");\n-        ui->statusLabel_VM->setText(tr(\"The signature did not match the message digest.\") + QString(\" \") + tr(\"Please check the signature and try again.\"));\n+        ui->statusLabel_VM->setText(\n+            tr(\"The signature did not match the message digest.\") + QString(\" \") +\n+            tr(\"Please check the signature and try again.\")\n+        );\n         return;\n-    }\n-\n-    if (!(CTxDestination(PKHash(pubkey)) == destination)) {\n-        ui->statusLabel_VM->setStyleSheet(\"QLabel { color: red; }\");\n-        ui->statusLabel_VM->setText(QString(\"<nobr>\") + tr(\"Message verification failed.\") + QString(\"</nobr>\"));\n+    case MessageVerificationResult::ERR_NOT_SIGNED:\n+        ui->statusLabel_VM->setText(\n+            QString(\"<nobr>\") + tr(\"Message verification failed.\") + QString(\"</nobr>\")\n+        );\n         return;\n     }\n-\n-    ui->statusLabel_VM->setStyleSheet(\"QLabel { color: green; }\");\n-    ui->statusLabel_VM->setText(QString(\"<nobr>\") + tr(\"Message verified.\") + QString(\"</nobr>\"));\n }\n \n void SignVerifyMessageDialog::on_clearButton_VM_clicked()"
      },
      {
        "sha": "9686a111ed5e20a5a86eaf6bf9c95578179bfbab",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 21,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce3447eb1e25ec7aec4b300dabf6c1e394f1906/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce3447eb1e25ec7aec4b300dabf6c1e394f1906/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=2ce3447eb1e25ec7aec4b300dabf6c1e394f1906",
        "patch": "@@ -11,9 +11,9 @@\n #include <rpc/util.h>\n #include <script/descriptor.h>\n #include <util/check.h>\n+#include <util/message.h> // For strMessageMagic, MessageVerify()\n #include <util/strencodings.h>\n #include <util/system.h>\n-#include <util/validation.h>\n \n #include <stdint.h>\n #include <tuple>\n@@ -276,31 +276,21 @@ static UniValue verifymessage(const JSONRPCRequest& request)\n     std::string strSign     = request.params[1].get_str();\n     std::string strMessage  = request.params[2].get_str();\n \n-    CTxDestination destination = DecodeDestination(strAddress);\n-    if (!IsValidDestination(destination)) {\n+    switch (MessageVerify(strAddress, strSign, strMessage)) {\n+    case MessageVerificationResult::ERR_INVALID_ADDRESS:\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid address\");\n-    }\n-\n-    const PKHash *pkhash = boost::get<PKHash>(&destination);\n-    if (!pkhash) {\n+    case MessageVerificationResult::ERR_ADDRESS_NO_KEY:\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");\n-    }\n-\n-    bool fInvalid = false;\n-    std::vector<unsigned char> vchSig = DecodeBase64(strSign.c_str(), &fInvalid);\n-\n-    if (fInvalid)\n+    case MessageVerificationResult::ERR_MALFORMED_SIGNATURE:\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Malformed base64 encoding\");\n-\n-    CHashWriter ss(SER_GETHASH, 0);\n-    ss << strMessageMagic;\n-    ss << strMessage;\n-\n-    CPubKey pubkey;\n-    if (!pubkey.RecoverCompact(ss.GetHash(), vchSig))\n+    case MessageVerificationResult::ERR_PUBKEY_NOT_RECOVERED:\n+    case MessageVerificationResult::ERR_NOT_SIGNED:\n         return false;\n+    case MessageVerificationResult::OK:\n+        return true;\n+    }\n \n-    return (pubkey.GetID() == *pkhash);\n+    return false;\n }\n \n static UniValue signmessagewithprivkey(const JSONRPCRequest& request)"
      },
      {
        "sha": "0b40df0b370bfbc21bdfbeeeb75a6ed90e3a13d6",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce3447eb1e25ec7aec4b300dabf6c1e394f1906/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce3447eb1e25ec7aec4b300dabf6c1e394f1906/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=2ce3447eb1e25ec7aec4b300dabf6c1e394f1906",
        "patch": "@@ -9,6 +9,7 @@\n #include <sync.h>\n #include <test/util/setup_common.h>\n #include <test/util/str.h>\n+#include <util/message.h> // For MessageVerify()\n #include <util/moneystr.h>\n #include <util/strencodings.h>\n #include <util/string.h>\n@@ -2025,4 +2026,56 @@ BOOST_AUTO_TEST_CASE(test_tracked_vector)\n     BOOST_CHECK_EQUAL(v8[2].copies, 0);\n }\n \n+BOOST_AUTO_TEST_CASE(message_verify)\n+{\n+    BOOST_CHECK_EQUAL(\n+        MessageVerify(\n+            \"invalid address\",\n+            \"signature should be irrelevant\",\n+            \"message too\"),\n+        MessageVerificationResult::ERR_INVALID_ADDRESS);\n+\n+    BOOST_CHECK_EQUAL(\n+        MessageVerify(\n+            \"3B5fQsEXEaV8v6U3ejYc8XaKXAkyQj2MjV\",\n+            \"signature should be irrelevant\",\n+            \"message too\"),\n+        MessageVerificationResult::ERR_ADDRESS_NO_KEY);\n+\n+    BOOST_CHECK_EQUAL(\n+        MessageVerify(\n+            \"1KqbBpLy5FARmTPD4VZnDDpYjkUvkr82Pm\",\n+            \"invalid signature, not in base64 encoding\",\n+            \"message should be irrelevant\"),\n+        MessageVerificationResult::ERR_MALFORMED_SIGNATURE);\n+\n+    BOOST_CHECK_EQUAL(\n+        MessageVerify(\n+            \"1KqbBpLy5FARmTPD4VZnDDpYjkUvkr82Pm\",\n+            \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n+            \"message should be irrelevant\"),\n+        MessageVerificationResult::ERR_PUBKEY_NOT_RECOVERED);\n+\n+    BOOST_CHECK_EQUAL(\n+        MessageVerify(\n+            \"15CRxFdyRpGZLW9w8HnHvVduizdL5jKNbs\",\n+            \"IPojfrX2dfPnH26UegfbGQQLrdK844DlHq5157/P6h57WyuS/Qsl+h/WSVGDF4MUi4rWSswW38oimDYfNNUBUOk=\",\n+            \"I never signed this\"),\n+        MessageVerificationResult::ERR_NOT_SIGNED);\n+\n+    BOOST_CHECK_EQUAL(\n+        MessageVerify(\n+            \"15CRxFdyRpGZLW9w8HnHvVduizdL5jKNbs\",\n+            \"IPojfrX2dfPnH26UegfbGQQLrdK844DlHq5157/P6h57WyuS/Qsl+h/WSVGDF4MUi4rWSswW38oimDYfNNUBUOk=\",\n+            \"Trust no one\"),\n+        MessageVerificationResult::OK);\n+\n+    BOOST_CHECK_EQUAL(\n+        MessageVerify(\n+            \"11canuhp9X2NocwCq7xNrQYTmUgZAnLK3\",\n+            \"IIcaIENoYW5jZWxsb3Igb24gYnJpbmsgb2Ygc2Vjb25kIGJhaWxvdXQgZm9yIGJhbmtzIAaHRtbCeDZINyavx14=\",\n+            \"Trust me\"),\n+        MessageVerificationResult::OK);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "33e9c3384b715fdb6c8968913a1e3811d8d18f2b",
        "filename": "src/util/message.cpp",
        "status": "added",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce3447eb1e25ec7aec4b300dabf6c1e394f1906/src/util/message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce3447eb1e25ec7aec4b300dabf6c1e394f1906/src/util/message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/message.cpp?ref=2ce3447eb1e25ec7aec4b300dabf6c1e394f1906",
        "patch": "@@ -0,0 +1,53 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>            // For CHashWriter\n+#include <key_io.h>          // For DecodeDestination()\n+#include <pubkey.h>          // For CPubKey\n+#include <script/standard.h> // For CTxDestination, IsValidDestination(), PKHash\n+#include <serialize.h>       // For SER_GETHASH\n+#include <util/message.h>\n+#include <util/strencodings.h> // For DecodeBase64()\n+\n+#include <string>\n+#include <vector>\n+\n+const std::string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n+\n+MessageVerificationResult MessageVerify(\n+    const std::string& address,\n+    const std::string& signature,\n+    const std::string& message)\n+{\n+    CTxDestination destination = DecodeDestination(address);\n+    if (!IsValidDestination(destination)) {\n+        return MessageVerificationResult::ERR_INVALID_ADDRESS;\n+    }\n+\n+    if (boost::get<PKHash>(&destination) == nullptr) {\n+        return MessageVerificationResult::ERR_ADDRESS_NO_KEY;\n+    }\n+\n+    bool invalid = false;\n+    std::vector<unsigned char> signature_bytes = DecodeBase64(signature.c_str(), &invalid);\n+    if (invalid) {\n+        return MessageVerificationResult::ERR_MALFORMED_SIGNATURE;\n+    }\n+\n+    CHashWriter ss(SER_GETHASH, 0);\n+    ss << strMessageMagic;\n+    ss << message;\n+\n+    CPubKey pubkey;\n+    if (!pubkey.RecoverCompact(ss.GetHash(), signature_bytes)) {\n+        return MessageVerificationResult::ERR_PUBKEY_NOT_RECOVERED;\n+    }\n+\n+    if (!(CTxDestination(PKHash(pubkey)) == destination)) {\n+        return MessageVerificationResult::ERR_NOT_SIGNED;\n+    }\n+\n+    return MessageVerificationResult::OK;\n+}"
      },
      {
        "sha": "6adda5d3ff72215b6e5d7ac9bb2e90de12e028a2",
        "filename": "src/util/message.h",
        "status": "added",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce3447eb1e25ec7aec4b300dabf6c1e394f1906/src/util/message.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce3447eb1e25ec7aec4b300dabf6c1e394f1906/src/util/message.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/message.h?ref=2ce3447eb1e25ec7aec4b300dabf6c1e394f1906",
        "patch": "@@ -0,0 +1,49 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_MESSAGE_H\n+#define BITCOIN_UTIL_MESSAGE_H\n+\n+#include <string>\n+\n+extern const std::string strMessageMagic;\n+\n+/** The result of a signed message verification.\n+ * Message verification takes as an input:\n+ * - address (with whose private key the message is supposed to have been signed)\n+ * - signature\n+ * - message\n+ */\n+enum class MessageVerificationResult {\n+    //! The provided address is invalid.\n+    ERR_INVALID_ADDRESS,\n+\n+    //! The provided address is valid but does not refer to a public key.\n+    ERR_ADDRESS_NO_KEY,\n+\n+    //! The provided signature couldn't be parsed (maybe invalid base64).\n+    ERR_MALFORMED_SIGNATURE,\n+\n+    //! A public key could not be recovered from the provided signature and message.\n+    ERR_PUBKEY_NOT_RECOVERED,\n+\n+    //! The message was not signed with the private key of the provided address.\n+    ERR_NOT_SIGNED,\n+\n+    //! The message verification was successful.\n+    OK\n+};\n+\n+/** Verify a signed message.\n+ * @param[in] address Signer's bitcoin address, it must refer to a public key.\n+ * @param[in] signature The signature in base64 format.\n+ * @param[in] message The message that was signed.\n+ * @return result code */\n+MessageVerificationResult MessageVerify(\n+    const std::string& address,\n+    const std::string& signature,\n+    const std::string& message);\n+\n+#endif // BITCOIN_UTIL_MESSAGE_H"
      },
      {
        "sha": "ffbee21aebf96e2bbab494e471430645fef7d0e4",
        "filename": "src/util/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce3447eb1e25ec7aec4b300dabf6c1e394f1906/src/util/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce3447eb1e25ec7aec4b300dabf6c1e394f1906/src/util/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/validation.cpp?ref=2ce3447eb1e25ec7aec4b300dabf6c1e394f1906",
        "patch": "@@ -21,5 +21,3 @@ std::string FormatStateMessage(const ValidationState &state)\n \n     return state.GetRejectReason();\n }\n-\n-const std::string strMessageMagic = \"Bitcoin Signed Message:\\n\";"
      },
      {
        "sha": "5ee260a055e762815736d7ccaa30bebe7a7caced",
        "filename": "src/util/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce3447eb1e25ec7aec4b300dabf6c1e394f1906/src/util/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce3447eb1e25ec7aec4b300dabf6c1e394f1906/src/util/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/validation.h?ref=2ce3447eb1e25ec7aec4b300dabf6c1e394f1906",
        "patch": "@@ -13,6 +13,4 @@ class ValidationState;\n /** Convert ValidationState to a human-readable message for logging */\n std::string FormatStateMessage(const ValidationState &state);\n \n-extern const std::string strMessageMagic;\n-\n #endif // BITCOIN_UTIL_VALIDATION_H"
      },
      {
        "sha": "e139c6956889a63e252bc474ff4624a0632a2d78",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce3447eb1e25ec7aec4b300dabf6c1e394f1906/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce3447eb1e25ec7aec4b300dabf6c1e394f1906/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=2ce3447eb1e25ec7aec4b300dabf6c1e394f1906",
        "patch": "@@ -19,11 +19,11 @@\n #include <script/sign.h>\n #include <util/bip32.h>\n #include <util/fees.h>\n+#include <util/message.h> // For strMessageMagic\n #include <util/moneystr.h>\n #include <util/string.h>\n #include <util/system.h>\n #include <util/url.h>\n-#include <util/validation.h>\n #include <wallet/coincontrol.h>\n #include <wallet/feebumper.h>\n #include <wallet/psbtwallet.h>"
      }
    ]
  },
  {
    "sha": "f8f0d9893d7969bdaa870fadb94ec5d0dfa8334d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOGYwZDk4OTNkNzk2OWJkYWE4NzBmYWRiOTRlYzVkMGRmYTgzMzRk",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2019-11-22T16:17:29Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-02-14T09:45:40Z"
      },
      "message": "Deduplicate the message signing code\n\nThe logic of signing a message was duplicated in 3 places:\n\nsrc/qt/signverifymessagedialog.cpp\n  SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n\nsrc/rpc/misc.cpp\n  signmessagewithprivkey()\n\nsrc/wallet/rpcwallet.cpp\n  signmessage()\n\nMove the logic into\n\nsrc/util/message.cpp\n  MessageSign()\n\nand call it from all the 3 places.",
      "tree": {
        "sha": "21484d5e11ebf6cf1f707805ce766b397637beba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21484d5e11ebf6cf1f707805ce766b397637beba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8f0d9893d7969bdaa870fadb94ec5d0dfa8334d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl5GbEQACgkQVN8G9ktV\ny7/iAR//c+kzlhcDz7eGZb4YwjEXjVKMvPj9G7mFFaWia2OIg3SPN1494iG01mEv\noZYk4S1nzA+ZKPsh+RF6P8HoEQTstVuKDCLNTwVn+4zb3UV2CgOg4dPGfv90SH7g\nwyjV+g3oPkrEKDFfzv5jIL/YZncNdwAXlgV3j0AoEcdwf4UyrPCgJoHR0246RCxu\njzHDSJjgXADpqmGoi77MAXdlvijpOC772sD1yP5TlNQ7StOFy5yeUOtux9M8d71e\nMclv2nxBA5/F8NUxqmihZyGGgK+eTe4EibzwRDdPg6/WBV3kqDBcIsukMK/TOC2s\nbOz+uRLsk1Xm7JiRQYZC5uWWLiECvO8AzgIwFbjkVKhFCNJAYukkGJ3CTZG2y7lG\n34QVLOBqbPL4wuk6h/PU53C0zOINYO2j3ywa3vb+xu5m7YAuI4DXixKbzi8L0ojt\n7tvZbD0jqwkUPaIhXDgnmC7n/3FuUu8X/lSgvDTQv5TQa6opjCE97w84swSh0Qrd\nIgNq2pyNI9Gr7qzmYyTmTkp6fVyD9ZYgvdOQGXv6GTmaLpTn4h639AiOdc9Zr2AZ\n3mdEi290v/tHEDSl8Uq3rHj57DimUm5q/Q7PdU0DuD3nV5K8+3zintcdzsQFIsAL\nPE9VQIdxE4mRC/ANj/fbf/mtpsUxnRxkiU1e5Rgaafz9lrNY4f37WjYF5ZHbKqFr\nkJ2tB45ZF0qbt0iIpWYe1yQUiVU5GSP0stL0hHqZz1cCntc3JD3MiYc2ESSpJ4LH\n4A9Hd/V0iAkfNa9fitlUhyvyebycf+D0xszvJpUMIcoIU9cvFmIhaX0Q3CBM/No7\nzpHu71QicM8dMSmtYLF7ZHJgnvN1ChaslrAgTa4sbsaYb/M8MCBvuowj2DhQk6o3\nCifU1j7DIeh7SqyF2j9GWffkcPkALIIHA/JYu4IzTCglyCRF8wLFOMrpA3hf+aWA\ngNVIosD/Ddgr4x+wGnojo7ev2HP3JtTnSgxY3xUSeoLtv4slO+bRSLA90+ifPz6X\nIllE+I1NYjJ4aGcEsnjw151VZvlO5Gi8Qhm0EeIolzBQ6LwDfqiGOIY3+T63TOGN\nbao6i7UNOex04DS1J4vRYl1XsJ/wiOgXvF07lIll4pZnnKVhrgvaAyB8u+GtFk1D\nJ+rLnwmfjklVYBfE0LAU+lGidyJBqfRt11Fy8eXRVylu0M5EtFlo1ASOBBecMTYy\nWx+z3o+dewb3mX96fQn457nza0v9JVtjxLIILfoO2cnnZJMjjNO0qUHsOVdomtpF\nERgdlI7G1Fd02YT1r1/HrWqEfdd3ifI1ci7R5ydwMGUsufTmwbr9AsDORZ3nqvcm\n1tISyeA2NAaJVkkaPSdNPyA7byDZ7Q==\n=4IgE\n-----END PGP SIGNATURE-----",
        "payload": "tree 21484d5e11ebf6cf1f707805ce766b397637beba\nparent 2ce3447eb1e25ec7aec4b300dabf6c1e394f1906\nauthor Vasil Dimov <vd@FreeBSD.org> 1574439449 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1581673540 +0100\n\nDeduplicate the message signing code\n\nThe logic of signing a message was duplicated in 3 places:\n\nsrc/qt/signverifymessagedialog.cpp\n  SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n\nsrc/rpc/misc.cpp\n  signmessagewithprivkey()\n\nsrc/wallet/rpcwallet.cpp\n  signmessage()\n\nMove the logic into\n\nsrc/util/message.cpp\n  MessageSign()\n\nand call it from all the 3 places.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8f0d9893d7969bdaa870fadb94ec5d0dfa8334d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8f0d9893d7969bdaa870fadb94ec5d0dfa8334d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8f0d9893d7969bdaa870fadb94ec5d0dfa8334d/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ce3447eb1e25ec7aec4b300dabf6c1e394f1906",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ce3447eb1e25ec7aec4b300dabf6c1e394f1906",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ce3447eb1e25ec7aec4b300dabf6c1e394f1906"
      }
    ],
    "stats": {
      "total": 110,
      "additions": 87,
      "deletions": 23
    },
    "files": [
      {
        "sha": "883dcecf9a1649f22f2eee431bf258a66fca1847",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8f0d9893d7969bdaa870fadb94ec5d0dfa8334d/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8f0d9893d7969bdaa870fadb94ec5d0dfa8334d/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=f8f0d9893d7969bdaa870fadb94ec5d0dfa8334d",
        "patch": "@@ -11,7 +11,7 @@\n #include <qt/walletmodel.h>\n \n #include <key_io.h>\n-#include <util/message.h> // For strMessageMagic, MessageVerify()\n+#include <util/message.h> // For MessageSign(), MessageVerify()\n #include <wallet/wallet.h>\n \n #include <vector>\n@@ -141,13 +141,10 @@ void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n         return;\n     }\n \n-    CHashWriter ss(SER_GETHASH, 0);\n-    ss << strMessageMagic;\n-    ss << ui->messageIn_SM->document()->toPlainText().toStdString();\n+    const std::string& message = ui->messageIn_SM->document()->toPlainText().toStdString();\n+    std::string signature;\n \n-    std::vector<unsigned char> vchSig;\n-    if (!key.SignCompact(ss.GetHash(), vchSig))\n-    {\n+    if (!MessageSign(key, message, signature)) {\n         ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");\n         ui->statusLabel_SM->setText(QString(\"<nobr>\") + tr(\"Message signing failed.\") + QString(\"</nobr>\"));\n         return;\n@@ -156,7 +153,7 @@ void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n     ui->statusLabel_SM->setStyleSheet(\"QLabel { color: green; }\");\n     ui->statusLabel_SM->setText(QString(\"<nobr>\") + tr(\"Message signed.\") + QString(\"</nobr>\"));\n \n-    ui->signatureOut_SM->setText(QString::fromStdString(EncodeBase64(vchSig.data(), vchSig.size())));\n+    ui->signatureOut_SM->setText(QString::fromStdString(signature));\n }\n \n void SignVerifyMessageDialog::on_copySignatureButton_SM_clicked()"
      },
      {
        "sha": "e77dad6bfa28e34a91bda9901b6efdd892c2b698",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8f0d9893d7969bdaa870fadb94ec5d0dfa8334d/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8f0d9893d7969bdaa870fadb94ec5d0dfa8334d/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=f8f0d9893d7969bdaa870fadb94ec5d0dfa8334d",
        "patch": "@@ -11,7 +11,7 @@\n #include <rpc/util.h>\n #include <script/descriptor.h>\n #include <util/check.h>\n-#include <util/message.h> // For strMessageMagic, MessageVerify()\n+#include <util/message.h> // For MessageSign(), MessageVerify()\n #include <util/strencodings.h>\n #include <util/system.h>\n \n@@ -322,15 +322,13 @@ static UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n     }\n \n-    CHashWriter ss(SER_GETHASH, 0);\n-    ss << strMessageMagic;\n-    ss << strMessage;\n+    std::string signature;\n \n-    std::vector<unsigned char> vchSig;\n-    if (!key.SignCompact(ss.GetHash(), vchSig))\n+    if (!MessageSign(key, strMessage, signature)) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Sign failed\");\n+    }\n \n-    return EncodeBase64(vchSig.data(), vchSig.size());\n+    return signature;\n }\n \n static UniValue setmocktime(const JSONRPCRequest& request)"
      },
      {
        "sha": "8a2553617b284b3baeb278bab213ba74578ff08a",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 1,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8f0d9893d7969bdaa870fadb94ec5d0dfa8334d/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8f0d9893d7969bdaa870fadb94ec5d0dfa8334d/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=f8f0d9893d7969bdaa870fadb94ec5d0dfa8334d",
        "patch": "@@ -5,18 +5,20 @@\n #include <util/system.h>\n \n #include <clientversion.h>\n+#include <key.h> // For CKey\n #include <optional.h>\n #include <sync.h>\n #include <test/util/setup_common.h>\n #include <test/util/str.h>\n-#include <util/message.h> // For MessageVerify()\n+#include <util/message.h> // For MessageSign(), MessageVerify()\n #include <util/moneystr.h>\n #include <util/strencodings.h>\n #include <util/string.h>\n #include <util/time.h>\n #include <util/spanparsing.h>\n #include <util/vector.h>\n \n+#include <array>\n #include <stdint.h>\n #include <thread>\n #include <univalue.h>\n@@ -2026,6 +2028,42 @@ BOOST_AUTO_TEST_CASE(test_tracked_vector)\n     BOOST_CHECK_EQUAL(v8[2].copies, 0);\n }\n \n+BOOST_AUTO_TEST_CASE(message_sign)\n+{\n+    const std::array<unsigned char, 32> privkey_bytes = {\n+        // just some random data\n+        // derived address from this private key: 15CRxFdyRpGZLW9w8HnHvVduizdL5jKNbs\n+        0xD9, 0x7F, 0x51, 0x08, 0xF1, 0x1C, 0xDA, 0x6E,\n+        0xEE, 0xBA, 0xAA, 0x42, 0x0F, 0xEF, 0x07, 0x26,\n+        0xB1, 0xF8, 0x98, 0x06, 0x0B, 0x98, 0x48, 0x9F,\n+        0xA3, 0x09, 0x84, 0x63, 0xC0, 0x03, 0x28, 0x66\n+    };\n+\n+    const std::string message = \"Trust no one\";\n+\n+    const std::string expected_signature =\n+        \"IPojfrX2dfPnH26UegfbGQQLrdK844DlHq5157/P6h57WyuS/Qsl+h/WSVGDF4MUi4rWSswW38oimDYfNNUBUOk=\";\n+\n+    CKey privkey;\n+    std::string generated_signature;\n+\n+    BOOST_REQUIRE_MESSAGE(!privkey.IsValid(),\n+        \"Confirm the private key is invalid\");\n+\n+    BOOST_CHECK_MESSAGE(!MessageSign(privkey, message, generated_signature),\n+        \"Sign with an invalid private key\");\n+\n+    privkey.Set(privkey_bytes.begin(), privkey_bytes.end(), true);\n+\n+    BOOST_REQUIRE_MESSAGE(privkey.IsValid(),\n+        \"Confirm the private key is valid\");\n+\n+    BOOST_CHECK_MESSAGE(MessageSign(privkey, message, generated_signature),\n+        \"Sign with a valid private key\");\n+\n+    BOOST_CHECK_EQUAL(expected_signature, generated_signature);\n+}\n+\n BOOST_AUTO_TEST_CASE(message_verify)\n {\n     BOOST_CHECK_EQUAL("
      },
      {
        "sha": "22ace2dd75bc02fd19cffd1f97dd4d3dd992e0aa",
        "filename": "src/util/message.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8f0d9893d7969bdaa870fadb94ec5d0dfa8334d/src/util/message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8f0d9893d7969bdaa870fadb94ec5d0dfa8334d/src/util/message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/message.cpp?ref=f8f0d9893d7969bdaa870fadb94ec5d0dfa8334d",
        "patch": "@@ -4,6 +4,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <hash.h>            // For CHashWriter\n+#include <key.h>             // For CKey\n #include <key_io.h>          // For DecodeDestination()\n #include <pubkey.h>          // For CPubKey\n #include <script/standard.h> // For CTxDestination, IsValidDestination(), PKHash\n@@ -51,3 +52,23 @@ MessageVerificationResult MessageVerify(\n \n     return MessageVerificationResult::OK;\n }\n+\n+bool MessageSign(\n+    const CKey& privkey,\n+    const std::string& message,\n+    std::string& signature)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    ss << strMessageMagic;\n+    ss << message;\n+\n+    std::vector<unsigned char> signature_bytes;\n+\n+    if (!privkey.SignCompact(ss.GetHash(), signature_bytes)) {\n+        return false;\n+    }\n+\n+    signature = EncodeBase64(signature_bytes.data(), signature_bytes.size());\n+\n+    return true;\n+}"
      },
      {
        "sha": "1a1ba88daf7f6f81d887db5180dabafa1ff155e4",
        "filename": "src/util/message.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8f0d9893d7969bdaa870fadb94ec5d0dfa8334d/src/util/message.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8f0d9893d7969bdaa870fadb94ec5d0dfa8334d/src/util/message.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/message.h?ref=f8f0d9893d7969bdaa870fadb94ec5d0dfa8334d",
        "patch": "@@ -6,6 +6,8 @@\n #ifndef BITCOIN_UTIL_MESSAGE_H\n #define BITCOIN_UTIL_MESSAGE_H\n \n+#include <key.h> // For CKey\n+\n #include <string>\n \n extern const std::string strMessageMagic;\n@@ -46,4 +48,14 @@ MessageVerificationResult MessageVerify(\n     const std::string& signature,\n     const std::string& message);\n \n+/** Sign a message.\n+ * @param[in] privkey Private key to sign with.\n+ * @param[in] message The message to sign.\n+ * @param[out] signature Signature, base64 encoded, only set if true is returned.\n+ * @return true if signing was successful. */\n+bool MessageSign(\n+    const CKey& privkey,\n+    const std::string& message,\n+    std::string& signature);\n+\n #endif // BITCOIN_UTIL_MESSAGE_H"
      },
      {
        "sha": "6a42137ddd462afc3d0372f172a8605bfa3e165f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8f0d9893d7969bdaa870fadb94ec5d0dfa8334d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8f0d9893d7969bdaa870fadb94ec5d0dfa8334d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f8f0d9893d7969bdaa870fadb94ec5d0dfa8334d",
        "patch": "@@ -19,7 +19,7 @@\n #include <script/sign.h>\n #include <util/bip32.h>\n #include <util/fees.h>\n-#include <util/message.h> // For strMessageMagic\n+#include <util/message.h> // For MessageSign()\n #include <util/moneystr.h>\n #include <util/string.h>\n #include <util/system.h>\n@@ -576,15 +576,13 @@ static UniValue signmessage(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Private key not available\");\n     }\n \n-    CHashWriter ss(SER_GETHASH, 0);\n-    ss << strMessageMagic;\n-    ss << strMessage;\n+    std::string signature;\n \n-    std::vector<unsigned char> vchSig;\n-    if (!key.SignCompact(ss.GetHash(), vchSig))\n+    if (!MessageSign(key, strMessage, signature)) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Sign failed\");\n+    }\n \n-    return EncodeBase64(vchSig.data(), vchSig.size());\n+    return signature;\n }\n \n static UniValue getreceivedbyaddress(const JSONRPCRequest& request)"
      }
    ]
  },
  {
    "sha": "e193a84fb28068e38d5f54fbfd6208428c5bb655",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTkzYTg0ZmIyODA2OGUzOGQ1ZjU0ZmJmZDYyMDg0MjhjNWJiNjU1",
    "commit": {
      "author": {
        "name": "Jeffrey Czyz",
        "email": "jkczyz@gmail.com",
        "date": "2019-12-07T19:52:38Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-02-14T09:45:41Z"
      },
      "message": "Refactor message hashing into a utility function\n\nAnd add unit test for it.\n\nThe purpose of using a preamble or \"magic\" text as part of signing and\nverifying a message was not given when the code was repeated in a few\nlocations. Make a test showing how it is used to prevent inadvertently\nsigning a transaction.",
      "tree": {
        "sha": "3d9e920c26f874da2d9c06da07843d3fd15f4458",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d9e920c26f874da2d9c06da07843d3fd15f4458"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e193a84fb28068e38d5f54fbfd6208428c5bb655",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl5GbEUACgkQVN8G9ktV\ny78pjCAAndyKWb799GC8wDOwFG2GVdD+jQ4g/kA9Ve2FpU0fVqIn6ij8KMJPCpIA\nYEFNxjEhhwd1xyIkKybxyorYk8Pwr0y90UveoJHps0gysyjcwJgBxoJ6W5xNJigi\nkuliKZ/hKIQJ6MqS+jb9zpGDt5qOaHuiOUxyIAX9KgQn9IUBheptXjvvxWTHTI/v\nz5823VJtGVBc5cQp362h+jNP+bT5Vvps5pJukS9YhgPOMVTxWX4xGpc7sV5xlBLr\n9tbAnB9cL4hG/roE6wVXOoyQSpgIgABWWlGliLtzSUBlujyILjMJgCY6i1Gn+DNX\nha7WkdaQqjhuc/ETvIYQkfJXJ+IP6IqyGZkgaWJcbDaKVQGm6Pi9AveNUR9/CVY8\n+BWWZnmxJjkZ+vVjeBgfyiUmumXSg+C9XE0jYM1lnNvlFU4HqocT7hmoBDmuUtUZ\nJmShkBTPFBkSffl9f4ycZ5yY2w9/RBqmvoxlBW5hy+2NMaC2tzsD8kFzJJKkeyia\nbLL/vTrKF4sFriJEqjpLU04K7HNArgg4QI6l6pwwMiCcFt/+zNT0WB0DLC4PMuCR\nfbKuiZBzWTXqws36LRqjpWFyESEXLYPrjaI+gSf/vnfWyjNmbRtIZuiLz5dYdjCJ\n2udmJeBTAqDCFF6Em5MrD+OxK0ZMQJJjLfO6meER82/2AIiiUQjrgJmzj4y8YAYx\nWQViVnZQbqvpjO0Jtz5KJq+SZ37nvRrMdvSSGfYwZSD/KaEiyCLPHESHX3R8Mm76\nLpvkDaV3VSOh9lpdu/UmL0bCslye0aJJRGLy59ZsQHwLyJzL0wNfYu/FTIfLKVg3\nUA7OFLTEIeIaQu6rOvbfAZvaCbGNUHyQCD4jlhBhM5XmbyRxtxO6uH87KoOWnST4\nVWZl0n244HzoHFCMH8diUdRbO3s2I0WFkqxBb7423PN6Cy6Sw5NcY0vT8i4I4Mh7\nVXeMLaf5VYlHzXNzmbUJ7P0eAvfD0QzMu0lbvvqIQFmpfO9kIll3+Si9tym6ycvU\nzEBKZRRhYWUumfG3D9ymFKDE6bEFgLByLa3SgSDJr7cai1P9xELaKqFFeDLdr8/a\nlMuzZD6owvhJ4E5cOF/RmtJ3sgBRhqjkRvmpP8Ep9GbrwTe8E9bfBODYiAdcYyPq\nENXs9L98OlrRtVWG0i93Pv1YGhMYRdq/x+Q0M3w+pLkdlH3wg0D9jZBOSM5+puou\nfSfAJCm9n/SPlC/GBwYXTtwRQqlCS7OuwhVxiKfWLGorieo8GkJm8Ci8uAE6cSk9\nIXUUIbG73Pyq3wPInODm0//ePgsk+NCYYZlKLsFy5aK7PqAiVH2nTXK9/jUhXzES\nH7MOEb2fOjNo9LGEkBtpna1X82RRZQ==\n=ZcOu\n-----END PGP SIGNATURE-----",
        "payload": "tree 3d9e920c26f874da2d9c06da07843d3fd15f4458\nparent f8f0d9893d7969bdaa870fadb94ec5d0dfa8334d\nauthor Jeffrey Czyz <jkczyz@gmail.com> 1575748358 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1581673541 +0100\n\nRefactor message hashing into a utility function\n\nAnd add unit test for it.\n\nThe purpose of using a preamble or \"magic\" text as part of signing and\nverifying a message was not given when the code was repeated in a few\nlocations. Make a test showing how it is used to prevent inadvertently\nsigning a transaction.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e193a84fb28068e38d5f54fbfd6208428c5bb655",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e193a84fb28068e38d5f54fbfd6208428c5bb655",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e193a84fb28068e38d5f54fbfd6208428c5bb655/comments",
    "author": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8f0d9893d7969bdaa870fadb94ec5d0dfa8334d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8f0d9893d7969bdaa870fadb94ec5d0dfa8334d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8f0d9893d7969bdaa870fadb94ec5d0dfa8334d"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 43,
      "deletions": 13
    },
    "files": [
      {
        "sha": "f86e713676748f6813ea1931d9e1debceb99e10e",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 1,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e193a84fb28068e38d5f54fbfd6208428c5bb655/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e193a84fb28068e38d5f54fbfd6208428c5bb655/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=e193a84fb28068e38d5f54fbfd6208428c5bb655",
        "patch": "@@ -5,12 +5,14 @@\n #include <util/system.h>\n \n #include <clientversion.h>\n+#include <hash.h> // For Hash()\n #include <key.h> // For CKey\n #include <optional.h>\n #include <sync.h>\n #include <test/util/setup_common.h>\n #include <test/util/str.h>\n-#include <util/message.h> // For MessageSign(), MessageVerify()\n+#include <uint256.h>\n+#include <util/message.h> // For MessageSign(), MessageVerify(), MESSAGE_MAGIC\n #include <util/moneystr.h>\n #include <util/strencodings.h>\n #include <util/string.h>\n@@ -2116,4 +2118,21 @@ BOOST_AUTO_TEST_CASE(message_verify)\n         MessageVerificationResult::OK);\n }\n \n+BOOST_AUTO_TEST_CASE(message_hash)\n+{\n+    const std::string unsigned_tx = \"...\";\n+    const std::string prefixed_message =\n+        std::string(1, (char)MESSAGE_MAGIC.length()) +\n+        MESSAGE_MAGIC +\n+        std::string(1, (char)unsigned_tx.length()) +\n+        unsigned_tx;\n+\n+    const uint256 signature_hash = Hash(unsigned_tx.begin(), unsigned_tx.end());\n+    const uint256 message_hash1 = Hash(prefixed_message.begin(), prefixed_message.end());\n+    const uint256 message_hash2 = MessageHash(unsigned_tx);\n+\n+    BOOST_CHECK_EQUAL(message_hash1, message_hash2);\n+    BOOST_CHECK_NE(message_hash1, signature_hash);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "17603a43d2db6fe0d7c271c28c82e80a2c4acbe8",
        "filename": "src/util/message.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 11,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e193a84fb28068e38d5f54fbfd6208428c5bb655/src/util/message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e193a84fb28068e38d5f54fbfd6208428c5bb655/src/util/message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/message.cpp?ref=e193a84fb28068e38d5f54fbfd6208428c5bb655",
        "patch": "@@ -15,7 +15,11 @@\n #include <string>\n #include <vector>\n \n-const std::string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n+/**\n+ * Text used to signify that a signed message follows and to prevent\n+ * inadvertently signing a transaction.\n+ */\n+const std::string MESSAGE_MAGIC = \"Bitcoin Signed Message:\\n\";\n \n MessageVerificationResult MessageVerify(\n     const std::string& address,\n@@ -37,12 +41,8 @@ MessageVerificationResult MessageVerify(\n         return MessageVerificationResult::ERR_MALFORMED_SIGNATURE;\n     }\n \n-    CHashWriter ss(SER_GETHASH, 0);\n-    ss << strMessageMagic;\n-    ss << message;\n-\n     CPubKey pubkey;\n-    if (!pubkey.RecoverCompact(ss.GetHash(), signature_bytes)) {\n+    if (!pubkey.RecoverCompact(MessageHash(message), signature_bytes)) {\n         return MessageVerificationResult::ERR_PUBKEY_NOT_RECOVERED;\n     }\n \n@@ -58,17 +58,21 @@ bool MessageSign(\n     const std::string& message,\n     std::string& signature)\n {\n-    CHashWriter ss(SER_GETHASH, 0);\n-    ss << strMessageMagic;\n-    ss << message;\n-\n     std::vector<unsigned char> signature_bytes;\n \n-    if (!privkey.SignCompact(ss.GetHash(), signature_bytes)) {\n+    if (!privkey.SignCompact(MessageHash(message), signature_bytes)) {\n         return false;\n     }\n \n     signature = EncodeBase64(signature_bytes.data(), signature_bytes.size());\n \n     return true;\n }\n+\n+uint256 MessageHash(const std::string& message)\n+{\n+    CHashWriter hasher(SER_GETHASH, 0);\n+    hasher << MESSAGE_MAGIC << message;\n+\n+    return hasher.GetHash();\n+}"
      },
      {
        "sha": "01fd14ce2dcd58ba5a828d6e9aff347b2a953ebd",
        "filename": "src/util/message.h",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e193a84fb28068e38d5f54fbfd6208428c5bb655/src/util/message.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e193a84fb28068e38d5f54fbfd6208428c5bb655/src/util/message.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/message.h?ref=e193a84fb28068e38d5f54fbfd6208428c5bb655",
        "patch": "@@ -7,10 +7,11 @@\n #define BITCOIN_UTIL_MESSAGE_H\n \n #include <key.h> // For CKey\n+#include <uint256.h>\n \n #include <string>\n \n-extern const std::string strMessageMagic;\n+extern const std::string MESSAGE_MAGIC;\n \n /** The result of a signed message verification.\n  * Message verification takes as an input:\n@@ -58,4 +59,10 @@ bool MessageSign(\n     const std::string& message,\n     std::string& signature);\n \n+/**\n+ * Hashes a message for signing and verification in a manner that prevents\n+ * inadvertently signing a transaction.\n+ */\n+uint256 MessageHash(const std::string& message);\n+\n #endif // BITCOIN_UTIL_MESSAGE_H"
      }
    ]
  }
]