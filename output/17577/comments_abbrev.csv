DrahtBot,2019-11-24 17:11:14,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18202 (refactor: consolidate sendmany and sendtoaddress code by Sjors)\n* #18115 (wallet: Pass in transactions and messag",https://github.com/bitcoin/bitcoin/pull/17577#issuecomment-557908260,557908260,
fanquake,2019-11-24 18:18:49,Looks like this is going to overlap with #17557.,https://github.com/bitcoin/bitcoin/pull/17577#issuecomment-557913865,557913865,
vasild,2019-11-24 20:00:58,"Affairs with conflicting PRs:\n\n* #17557 util: Refactor message hashing into a utility function\nBoth PRs target the same duplicated code! However this PR (#17577) has broader scope as it deduplicates more code.\n\n* #17493 util: Forbid ambiguous repeated assignments in config file\nPurely mechanical conflicts. Both PRs touch neighboring code. Either one can be merged first, the second will",https://github.com/bitcoin/bitcoin/pull/17577#issuecomment-557922446,557922446,
vasild,2019-11-29 20:08:51,@jkczyz What do you think about this PR and its relation to #17557? Merge both in one PR?,https://github.com/bitcoin/bitcoin/pull/17577#issuecomment-559874077,559874077,
jkczyz,2019-12-04 16:29:22,"> @jkczyz What do you think about this PR and its relation to #17557? Merge both in one PR?\n\nI have #17557 based on an outstanding PR (#17399), though I suppose it didn't have to be. The former resulted from a comment in the latter. I deliberately kept the change small so it could hopefully be merged quicker. Though I wanted to add a test to clarify why the ""magic"" string is needed.\n\nThat ",https://github.com/bitcoin/bitcoin/pull/17577#issuecomment-561722994,561722994,
vasild,2019-12-07 20:03:21,"@jkczyz thanks for the feedback! I did cherry-pick the last two commits from https://github.com/bitcoin/bitcoin/pull/17557 into this PR under e3d85bcd5 - the hashing utility function and the unit test for it (to clarify why the ""magic"" string is needed).",https://github.com/bitcoin/bitcoin/pull/17577#issuecomment-562881762,562881762,
vasild,2019-12-07 20:14:05,"> ### Conflicts\n> \n> Reviewers, this pull request conflicts with the following ones:\n> \n>     * [#17593](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17593.html) (test: move more utility functions into test utility library by mzumsande)\n> \n>     * [#17581](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17581.html) (refactor: Remove settings merge reverse precedenc",https://github.com/bitcoin/bitcoin/pull/17577#issuecomment-562882543,562882543,
instagibbs,2019-12-19 16:18:20,"concept ACK, though I'd probably be more pedantic in calling it ""Bitcoin Signed Message Protocol"" or something. Unfortunately there's no BIP to refer to.",https://github.com/bitcoin/bitcoin/pull/17577#issuecomment-567557707,567557707,
vasild,2019-12-24 11:23:59,"@instagibbs Thanks for the review! Where would you put the ""Bitcoin Signed Message Protocol"" label?\n\nWe do message signing and verification now. What about encryption and decryption? Would that be useful feature or just a bloat that is rarely used? If encryption may be added in the future then maybe just ""Bitcoin Message Protocol"" would be a better name, or ""Bitcoin Text Message Protocol"".",https://github.com/bitcoin/bitcoin/pull/17577#issuecomment-568728768,568728768,
laanwj,2020-02-05 15:21:08,"I don't think encryption / decryption in bitcoind is a good idea. It is best to avoid using keys for multiple purposes (e.g. use a signing key for encryption, and vice versa). Also it's scope creep: Bitcoin core is a validating full node. It should do that well, and not try to make a GPG-ish mess of it that tries to do everything with a mash-up of features but nothing particularly well…",https://github.com/bitcoin/bitcoin/pull/17577#issuecomment-582458552,582458552,
Sjors,2020-02-12 08:58:19,See also @achow101's #18115,https://github.com/bitcoin/bitcoin/pull/17577#issuecomment-585100366,585100366,
vasild,2020-02-12 10:45:43,"> See also @achow101's #18115\n\n@Sjors thanks for the notice!\n\nThis PR (https://github.com/bitcoin/bitcoin/pull/17577) deduplicates message signing and message verification code.\n\nI peeked at https://github.com/bitcoin/bitcoin/pull/18115/ and among other things it deduplicates the message signing code from 2 of 3 places and does not deduplicate the message verification code. Assuming it",https://github.com/bitcoin/bitcoin/pull/17577#issuecomment-585145414,585145414,
vasild,2020-02-12 20:08:25,"> I peeked at #18115 and among other things it deduplicates the message signing code from 2 of 3 places and does not deduplicate the message verification code. Assuming it also fixes the 3rd place...\n\nThat was fixed and now #18115 deduplicates all 3 message signing repetitions.\n\n[MessageSign()](https://github.com/bitcoin/bitcoin/pull/17577/files#diff-f7b16fbe87fc15c6f15347e78210e501R24) fr",https://github.com/bitcoin/bitcoin/pull/17577#issuecomment-585394407,585394407,
Sjors,2020-02-13 14:05:10,"tACK ad39c8fd8f2f7752e4f4508ab880873008c7452e, thanks for adding tests as well",https://github.com/bitcoin/bitcoin/pull/17577#issuecomment-585769770,585769770,
achow101,2020-02-13 21:48:04,"I'm seeing a new compiler warning:\n```\nIn file included from ./script/signingprovider.h:13,\n                 from ./outputtype.h:10,\n                 from rpc/misc.cpp:8:\nrpc/misc.cpp: In function ‘UniValue verifymessage(const JSONRPCRequest&)’:\n./sync.h:179:104: warning: control reaches end of non-void function [-Wreturn-type]\n  179 | #define LOCK(cs) DebugLock<decltype(cs)> PASTE2(",https://github.com/bitcoin/bitcoin/pull/17577#issuecomment-585988035,585988035,
Sjors,2020-02-14 12:00:17,re-ACK e193a84fb28068e38d5f54fbfd6208428c5bb655,https://github.com/bitcoin/bitcoin/pull/17577#issuecomment-586259250,586259250,
achow101,2020-02-14 15:37:48,ACK e193a84fb28068e38d5f54fbfd6208428c5bb655,https://github.com/bitcoin/bitcoin/pull/17577#issuecomment-586340491,586340491,
Sjors,2020-02-19 12:11:23,@meshcollider some of this touches the wallet - and #18115 that builds on top of this definitely does - so maybe you can take a look?,https://github.com/bitcoin/bitcoin/pull/17577#issuecomment-588192962,588192962,
vasild,2019-11-24 17:11:40,"For some reason it is possible to use `boost::get()` without including the header that provides it. Probably included from somewhere else, maybe from QT stuff.\n\nJust drop lines 15-20 or somehow silence the lint script to allow this header to be included (a new boost dependency is not added by this patch)?",https://github.com/bitcoin/bitcoin/pull/17577#discussion_r349935319,349935319,src/util/message.cpp
vasild,2019-12-24 11:14:50,I dropped lines 15-20,https://github.com/bitcoin/bitcoin/pull/17577#discussion_r361140767,361140767,src/util/message.cpp
achow101,2020-02-12 19:59:23,"These `ui->statusLabel_VM->setStyleSheet(""QLabel { color: red; }"");`s could be moved out of the `switch` to further reduce duplication. ",https://github.com/bitcoin/bitcoin/pull/17577#discussion_r378481286,378481286,src/qt/signverifymessagedialog.cpp
achow101,2020-02-12 20:09:43,This should be a reference (`std::string&`) instead of pointer.,https://github.com/bitcoin/bitcoin/pull/17577#discussion_r378486170,378486170,src/util/message.cpp
achow101,2020-02-12 20:13:15,I think you should have on additional check here with the full hashed message. i.e. also hash `Bitcoin Signed Message:\n...` and compare that with `message_hash`.,https://github.com/bitcoin/bitcoin/pull/17577#discussion_r378487756,378487756,src/test/util_tests.cpp
achow101,2020-02-12 20:14:11,Renaming this should probably go in the next commit?,https://github.com/bitcoin/bitcoin/pull/17577#discussion_r378488148,378488148,src/util/message.cpp
vasild,2020-02-13 13:06:01,Done.,https://github.com/bitcoin/bitcoin/pull/17577#discussion_r378847170,378847170,src/qt/signverifymessagedialog.cpp
vasild,2020-02-13 13:06:09,Done.,https://github.com/bitcoin/bitcoin/pull/17577#discussion_r378847230,378847230,src/util/message.cpp
vasild,2020-02-13 13:06:23,Done.,https://github.com/bitcoin/bitcoin/pull/17577#discussion_r378847353,378847353,src/test/util_tests.cpp
vasild,2020-02-13 13:06:30,Done.,https://github.com/bitcoin/bitcoin/pull/17577#discussion_r378847416,378847416,src/util/message.cpp
vasild,2020-02-13 13:09:57,"Notice: assuming `CHashWriter hasher(SER_GETHASH, 0);`, then:\n```\nhasher << ""ab"" << ""cd"";\n```\nwould produce a different result than:\n```\nhasher << ""abcd"";\n```",https://github.com/bitcoin/bitcoin/pull/17577#discussion_r378849092,378849092,src/test/util_tests.cpp
achow101,2020-02-13 21:48:53,You need another `return false` statement after this `switch`.,https://github.com/bitcoin/bitcoin/pull/17577#discussion_r379137776,379137776,src/rpc/misc.cpp
Sjors,2020-02-14 09:09:05,Nice catch. I'm not getting that `-Wreturn-type` warning on macOS. Only one of the Travis machines noticed it: https://travis-ci.org/bitcoin/bitcoin/jobs/649943882?utm_medium=notification&utm_source=github_status,https://github.com/bitcoin/bitcoin/pull/17577#discussion_r379318829,379318829,src/rpc/misc.cpp
vasild,2020-02-14 10:47:40,"Added `return false;`, thanks!",https://github.com/bitcoin/bitcoin/pull/17577#discussion_r379365755,379365755,src/rpc/misc.cpp
instagibbs,2020-02-21 15:34:21,nit: I'd prefer actual types used instead of strings for all args.,https://github.com/bitcoin/bitcoin/pull/17577#discussion_r382647553,382647553,src/util/message.h
instagibbs,2020-02-21 15:47:18,this is a non-blocking comment :) let's get this merged,https://github.com/bitcoin/bitcoin/pull/17577#discussion_r382655324,382655324,src/util/message.h
