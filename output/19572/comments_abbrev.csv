instagibbs,2020-07-23 15:57:33,"fixed bug(was pushing to verbose list of transactions)\n\nlooking at another racey looking failure:\n```\n    assert_equal((payment_txid_2, ""A"", seq_num), seq.receive_sequence())\n  File ""/home/travis/build/bitcoin/bitcoin/ci/scratch/build/bitcoin-arm-linux-gnueabihf/test/functional/test_framework/util.py"", line 49, in assert_equal\n    raise AssertionError(""not(%s)"" % "" == "".join(str(arg) f",https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-663088680,663088680,
DrahtBot,2020-07-23 16:57:51,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19967 (test: Replace (dis)?connect_nodes globals with TestFramework methods by robot-dreams)\n* #19652 (Avoid locking CTx",https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-663119211,663119211,
instagibbs,2020-07-23 22:57:13,"From conversations with people who use the notifications already they\nseemed more keen to a solution like this that doesn't require long polling\nsupport. Also it makes wumpus less upset to just improve a current\nnotification system ü§Ø\n\nThat's said they're not necessarily in competition.\n\nOn Thu, Jul 23, 2020, 6:37 PM Jo√£o Barbosa <notifications@github.com> wrote:\n\n> *@promag* commented on ",https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-663271486,663271486,
promag,2020-07-26 10:53:57,"> That's said they're not necessarily in competition.\n\nI wasn't suggesting otherwise üëç ",https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-663972915,663972915,
jonasschnelli,2020-07-27 07:50:19,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-664180551,664180551,
instagibbs,2020-07-27 12:52:34,"I'm running some extensive testing of this PR against testnet and mainnet nodes, tracking expected mempool for a couple weeks using a modified test harness. Once I'm satisfied I'll be updating the test for this PR with the updated logic(if any) and maybe the consumer tool itself.",https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-664377316,664377316,
instagibbs,2020-07-27 15:14:54,"added test showing conflicted tx from block announcement(""R"" shows up before ""C"")",https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-664457841,664457841,
instagibbs,2020-07-27 16:12:59,"Was able to replicate a seeming gap in mempool_sequence values being reported. Pushed a possibly controversial fix(touching mempool logic) showing that it fixes the test case written.\n\nWhile that is a *very* minimal change I can understand it might rub people the wrong way.\n\nThe alternatives are:\n0) Ignore the gaps(print a warning when you see a gap maybe), it doesn't seem to meaningfull",https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-664492533,664492533,
instagibbs,2020-07-31 00:36:09,"Point taken but it also publishes a sequence of block hashes for connects\nand disconnects.\n\nOn Thu, Jul 30, 2020, 8:32 PM Luke Dashjr <notifications@github.com> wrote:\n\n> *@luke-jr* commented on this pull request.\n> ------------------------------\n>\n> In src/init.cpp\n> <https://github.com/bitcoin/bitcoin/pull/19572#discussion_r463343776>:\n>\n> > @@ -483,10 +483,12 @@ void SetupServerArgs(",https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-666831580,666831580,
instagibbs,2020-08-04 01:39:03,"rebased on master.\n\nImproved mempool sync test with code I've been running on mainnet/testnet for a few weeks now, last week with no issues. Added exclusive locks annotation.",https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-668327593,668327593,
instagibbs,2020-08-18 19:07:52,"Updated PR with fixes/cleanups, and changed sequence number to 8 bytes.\n\nDogfooding consumer still running strong after 2+ weeks on testnet/mainnet, no mempool inconsistencies or dropped messages.",https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-675660381,675660381,
jonatack,2020-08-18 19:25:50,"Concept ACK\n\n(You had me at ""dogfooding"")",https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-675668523,675668523,
instagibbs,2020-08-20 15:41:20,"Looks like the consumer logic failed during the recent mainnet reorg of one block https://twitter.com/BitMEXResearch/status/1296431817592057857\n\n`A->D->A` occurred and the mempool sequence number jumped by a couple hundred between the two `A`s which is unexpected based on my assumptions of Core locking. Investigating more. (Note that this worst case means you have to take an additional getrawm",https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-677742812,677742812,
instagibbs,2020-08-25 17:06:34,"After some consideration of the failure detected above, I'm going to stick with the current format, and eat the cost of a single `getrawmempool` call every time an unexpected mempool sequence value is encountered. If all evictions are announced for block inclusion we get dangerously close to blowing out zmq buffers, and in practice is creating more traffic for little gain.\n\nIn other words, ple",https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-680153382,680153382,
instagibbs,2020-09-01 02:44:16,rebased,https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-684159890,684159890,
n-thumann,2020-09-01 18:25:01,"Tested ACK, works as expected on macOS 10.15.6.\nJust two minor hints: I think this should also be added to `doc/zmq.md` and explicitly explain the difference between the already existing sequence number and this new mempool sequence number to prevent confusion. Maybe also add these new notifications to `contrib/zmq_sub.py` with unpacking of message type (Tx addition/removal, Block connect/discon",https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-685052685,685052685,
instagibbs,2020-09-01 18:28:45,"@n-thumann good points, I was unfamiliar with those docs. Will update with an additional commit",https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-685054912,685054912,
instagibbs,2020-09-01 19:19:31,"@n-thumann can you actually get `contrib/zmq/zmq_sub.py` to work? I updated what I think it should look like, but I had trouble running it even with legacy notifications. Try it out?\n\n```\nTask exception was never retrieved\nfuture: <Task finished coro=<ZMQHandler.handle() done, defined at contrib/zmq/zmq_sub.py:54> exception=ValueError('Invalid file object: <zmq.asyncio.Socket object at 0x7",https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-685080502,685080502,
n-thumann,2020-09-01 23:17:02,"> @n-thumann can you actually get `contrib/zmq/zmq_sub.py` to work?\n\nYour updated script runs perfectly fine!\nAnother doc related idea: Should [these lines](https://github.com/bitcoin/bitcoin/blame/6bc7b33008b7974f8866a38cc858822923ce5a22/doc/zmq.md#L114-L118) be changed? This only applies when using `hashblock` or `rawblock` and can be circumvented by using `sequence` topic.\nI think it¬¥s ",https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-685182894,685182894,
instagibbs,2020-09-02 02:05:20,"took your suggestions @n-thumann , added some more information to docs as well as suggested",https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-685239130,685239130,
instagibbs,2020-09-04 16:12:57,"@jonatack I'm keeping https://github.com/bitcoin/bitcoin/pull/19572/commits/003767e7a92e8ae41f5c561a69d7be23e4753f63 in for now out of a real reason(it's changing how the legacy zmq notifications work under the hood) and laziness.\n\nShould have addessed everything. Did some history cleanup as well.\n",https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-687245291,687245291,
instagibbs,2020-09-04 19:47:48,@mruddy in case you're interested(I don't know if you're on IRC),https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-687347592,687347592,
instagibbs,2020-09-05 16:17:47,"rebased, looks like appveyor and one of the cirrus builds is having the sads",https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-687631349,687631349,
MarcoFalke,2020-09-05 17:48:15,"You might have to add a suppression, not sure if the tsan failue is a false positive",https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-687641302,687641302,
instagibbs,2020-09-06 21:01:23,Can't seem to replicate locally with tsan.,https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-687900513,687900513,
instagibbs,2020-09-08 12:55:12,"@n-thumann (can't seem to re-request with your stale review, thanks github)",https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-688846900,688846900,
n-thumann,2020-09-08 17:21:26,"> @n-thumann (can't seem to re-request with your stale review, thanks github)\n\nre-ACK c2f03fd7b9090ac17299190f118511326483f23c ‚úåÔ∏è ",https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-689023091,689023091,
instagibbs,2020-09-08 20:53:45,collapsed the two logic commits since it's not that much code and lots of lines changed twice in a row,https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-689130581,689130581,
jonatack,2020-09-10 14:15:26,"re-ACK 4baaa89d29057e524a38e120512664ffacce413d per `git range-diff 564e1ab 4e1cc1d 4baaa89`, manually re-ran `getrawmempool` and its help for the fun\n\nnew help section\n```\n$ bitcoin-cli -regtest help getrawmempool\n\nResult (for verbose = false and mempool_sequence = true):\n{                            (json object)\n  ""txids"" : [                (json array)\n    ""hex"",             ",https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-690318360,690318360,
0xB10C,2020-09-14 09:38:00,"Had a quick look at the _Bitcoin Core is restarted and transactions are added to the mempool from `mempool.dat`_ case. These are correctly notified, but don't necessary have the same `mempool_sequence` (that's expected). With a `mempool.dat` containing multiple thousand transactions the ZMQ buffer could fill up when using the `DEFAULT_ZMQ_SNDHWM` of 1000 resulting in ZMQ messages being dropped. Th",https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-691941337,691941337,
instagibbs,2020-09-14 13:53:36,"@0xB10C thanks for the review!\n\n> Discussion about dropped messages\n\nYes, this is a general problem that can be mostly avoided, and if not the endpoint logic should basically toss what it thinks it knows and restart its tracking.\n\n> Multipart messages \n\nI'm not sure if the change alone is worth it for current messages. I think it really shines when there are optional messages, of w",https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-692067791,692067791,
instagibbs,2020-09-21 16:01:37,rebased. No functional changes.,https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-696211464,696211464,
n-thumann,2020-09-21 21:29:22,re-ACK https://github.com/bitcoin/bitcoin/commit/877f511d7f1f3c37a86c421e21fc0694c387e69f,https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-696388223,696388223,
instagibbs,2020-09-22 15:36:21,rebased again,https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-696800943,696800943,
laanwj,2020-09-23 11:53:27,"Code review ACK 759d94e70f6844443106404882c7b105f3a4dba7\n\nI see a potential confusion between sequence numbers of the individual packets and the ""mempool sequence"" but this is a matter of documentation, I don't have a suggestion for better naming.",https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-697313899,697313899,
instagibbs,2020-09-23 11:58:08,"> I see a potential confusion between sequence numbers of the individual packets and the ""mempool sequence"" but this is a matter of documentation, I don't have a suggestion for better naming.\n\nWilling to entertain any renaming if people think of something better!",https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-697316021,697316021,
jonatack,2020-09-23 14:02:11,re-ACK 759d94e70f6844443106404882c7b105f3a4dba7,https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-697404259,697404259,
shuckc,2020-09-23 14:34:52,Lovely! Very much look forward to using this.,https://github.com/bitcoin/bitcoin/pull/19572#issuecomment-697455858,697455858,
promag,2020-07-23 22:23:00,"951507c4d1152ceab2a930fb16fdac05504f0056\n\noops üòÖ good catch.",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r459761022,459761022,test/functional/interface_zmq.py
promag,2020-07-23 22:29:18,`EXCLUSIVE_LOCKS_REQUIRED(cs)` instead?,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r459763375,459763375,src/txmempool.h
luke-jr,2020-07-31 00:32:23,"""sequence"" doesn't really express what this does. Maybe ""zmqpubmempool""?",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r463343776,463343776,src/init.cpp
instagibbs,2020-08-04 01:39:16,done,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r464749319,464749319,src/txmempool.h
luke-jr,2020-08-08 18:28:25,Shouldn't this be spelled out?,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r467491610,467491610,src/init.cpp
luke-jr,2020-08-08 18:28:42,Think you need zmqpubsequence in here too,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r467491630,467491630,src/init.cpp
luke-jr,2020-08-09 01:47:31,This shouldn't be initialised here,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r467523879,467523879,src/rpc/blockchain.cpp
luke-jr,2020-08-09 01:50:19,Should throw an exception if `include_mempool_sequence` is true here. (Or support it),https://github.com/bitcoin/bitcoin/pull/19572#discussion_r467524040,467524040,src/rpc/blockchain.cpp
luke-jr,2020-08-09 01:54:03,The code increments it for block inclusion removals too...,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r467524295,467524295,src/txmempool.h
luke-jr,2020-08-09 01:54:58,`m_sequence_number`,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r467524389,467524389,src/txmempool.h
luke-jr,2020-08-09 01:57:12,"Maybe `uint64_t` would be better?\n\nPossibly even a `sequence_number_t` typedef in case it were to ever change.",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r467524521,467524521,src/txmempool.h
luke-jr,2020-08-09 02:01:24,Ugly hack. Just change CZMQNotificationInterface,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r467524813,467524813,src/validationinterface.h
instagibbs,2020-08-10 15:27:42,"Right, stale comment. Will update.",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r467984497,467984497,src/txmempool.h
instagibbs,2020-08-10 15:29:28,"I believe my original theory was that the zmq sequence values themselves were also 32 bit, so I figured not much to be gained since any consumer has to handle this wrap around anyways?",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r467985672,467985672,src/txmempool.h
instagibbs,2020-08-10 15:30:56,"Sorry, change it how specifically? If you mean I should change the legacy notifications too, I disagree? Might be misunderstanding. ",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r467986707,467986707,src/validationinterface.h
instagibbs,2020-08-18 13:36:51,"Offline someone noted that the ZMQ sequence numbers(probably) reset if the connection itself is reset, but the mempool sequence numbers will continue. I think this is a good argument to expand to `uint64_t`. Will do that soon.",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r472202444,472202444,src/txmempool.h
instagibbs,2020-08-18 17:50:22,done,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r472376314,472376314,src/txmempool.h
instagibbs,2020-08-18 17:50:28,done,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r472376370,472376370,src/txmempool.h
instagibbs,2020-08-18 17:50:34,done,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r472376432,472376432,src/txmempool.h
instagibbs,2020-08-18 17:50:43,"done, throws error + test",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r472376548,472376548,src/rpc/blockchain.cpp
instagibbs,2020-08-18 17:50:49,done,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r472376604,472376604,src/rpc/blockchain.cpp
instagibbs,2020-08-18 17:50:55,done,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r472376660,472376660,src/init.cpp
instagibbs,2020-08-18 17:51:00,done,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r472376706,472376706,src/init.cpp
instagibbs,2020-08-18 19:04:40,Figured out what you meant. Done in follow-on commit.,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r472417077,472417077,src/validationinterface.h
n-thumann,2020-09-01 22:21:47,"slightly more consistent wording üòä \n```suggestion\nThe `sequence` topic refers specifically to the mempool sequence\n```",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r481464878,481464878,doc/zmq.md
n-thumann,2020-09-01 23:08:35,"Use bytes instead of string\n```suggestion\n            hash = binascii.hexlify(body[:32])\n```",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r481480761,481480761,contrib/zmq/zmq_sub.py
n-thumann,2020-09-01 23:16:49,"Format looks unnecessary here :)\n```suggestion\n            print(hash, label, mempool_sequence)\n```",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r481483338,481483338,contrib/zmq/zmq_sub.py
jonatack,2020-09-03 14:24:37,"Perhaps import zmq once at the top rather than 4 times in the tests, e.g.:\n```diff\ndiff --git a/test/functional/interface_zmq.py b/test/functional/interface_zmq.py\nindex ef4780cacb..3afab07dbf 100755\n--- a/test/functional/interface_zmq.py\n+++ b/test/functional/interface_zmq.py\n@@ -4,6 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n """"""Test the ZMQ no",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483018183,483018183,test/functional/interface_zmq.py
jonatack,2020-09-03 14:56:24,"here and four other places below in the new code\n```suggestion\n                ++i;\n```",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483043176,483043176,src/zmq/zmqnotificationinterface.cpp
jonatack,2020-09-03 17:18:12,Nice cleanup here.,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483136275,483136275,contrib/zmq/zmq_sub.py
jonatack,2020-09-03 17:18:42,"indentation\n```suggestion\n            sequence = str(struct.unpack('<I', seq)[-1])\n```",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483136569,483136569,contrib/zmq/zmq_sub.py
jonatack,2020-09-03 17:21:45,"nit, sort\n\n```suggestion\nfrom test_framework.util import (\n    assert_equal,\n    assert_raises_rpc_error,\n    connect_nodes,\n)\n```",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483138292,483138292,test/functional/interface_zmq.py
jonatack,2020-09-03 18:08:54,"```suggestion\n            for _ in range(5):\n```",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483163839,483163839,test/functional/interface_zmq.py
jonatack,2020-09-03 18:09:35,"```suggestion\n        for _ in range(num_txs):\n```",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483164177,483164177,test/functional/interface_zmq.py
jonatack,2020-09-03 18:09:59,"```suggestion\n        for _ in range(num_txs):\n```",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483164414,483164414,test/functional/interface_zmq.py
jonatack,2020-09-03 18:10:51,"```suggestion\n        for _ in range(num_txs + 2 + 1 + 1):\n```",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483164909,483164909,test/functional/interface_zmq.py
instagibbs,2020-09-03 19:19:16,is this in the style guide? :P,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483201958,483201958,src/zmq/zmqnotificationinterface.cpp
jonatack,2020-09-03 19:42:51,"yeah, `++i` is preferred over `i++`",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483213259,483213259,src/zmq/zmqnotificationinterface.cpp
jonatack,2020-09-04 11:07:05,"nit proposals, feel free to take or ignore\n```diff\n-Note that for `*block` topics when the block chain tip changes,\n-a reorganisation may occur and just the tip will be notified.\n+Note that for `*block` topics, when the block chain tip changes,\n+a reorganisation may occur and only the tip will be notified.\n It is up to the subscriber to retrieve the chain from the last known\n-block t",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483548722,483548722,doc/zmq.md
jonatack,2020-09-04 11:08:04,"nit suggestions\n```diff\n The `sequence` topic refers specifically to the mempool sequence\n-number which is also published along with all mempool events. This\n-is a different sequence value than in ZMQ itself to allow a total\n+number, which is also published along with all mempool events. This\n+is a different sequence value than in ZMQ itself in order to allow a total\n ordering of mem",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483549110,483549110,doc/zmq.md
jonatack,2020-09-04 12:29:04,s/can not/cannot/,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483584405,483584405,src/rpc/blockchain.cpp
jonatack,2020-09-04 12:31:07,"The behavior of `getrawmempool` with the additional param and its interaction with `verbose` should be covered in a functional test, unless I missed the added assertion somewhere.",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483585408,483585408,src/rpc/blockchain.cpp
instagibbs,2020-09-04 15:42:20,"There is a test line for it:\n`assert_raises_rpc_error(-8, ""Verbose results can not contain mempool sequence values."", self.nodes[0].getrawmempool, True, True)`\n",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483702714,483702714,src/rpc/blockchain.cpp
jonatack,2020-09-04 16:01:04,"Oops, I even tested it manually as well. More like an `assert(""mempool_sequence"" in getrawmempool.keys())` or even checking the value too.",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483713813,483713813,src/rpc/blockchain.cpp
jonatack,2020-09-04 16:02:59,"Never mind, it looks like you covered that.",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483714754,483714754,src/rpc/blockchain.cpp
instagibbs,2020-09-04 16:11:02,done,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483718747,483718747,src/rpc/blockchain.cpp
instagibbs,2020-09-04 16:11:12,done,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483718825,483718825,doc/zmq.md
instagibbs,2020-09-04 16:11:19,took most of this,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483718881,483718881,doc/zmq.md
instagibbs,2020-09-04 16:11:26,done,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483718926,483718926,test/functional/interface_zmq.py
instagibbs,2020-09-04 16:11:32,done,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483718972,483718972,test/functional/interface_zmq.py
instagibbs,2020-09-04 16:11:38,done,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483719030,483719030,test/functional/interface_zmq.py
instagibbs,2020-09-04 16:11:45,done,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483719087,483719087,test/functional/interface_zmq.py
instagibbs,2020-09-04 16:11:51,done,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483719133,483719133,test/functional/interface_zmq.py
instagibbs,2020-09-04 16:11:57,done,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483719187,483719187,contrib/zmq/zmq_sub.py
instagibbs,2020-09-04 16:12:06,done,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483719253,483719253,src/zmq/zmqnotificationinterface.cpp
instagibbs,2020-09-04 16:12:12,done,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483719289,483719289,test/functional/interface_zmq.py
instagibbs,2020-09-04 16:15:07,my string change broke the test of this. See!?!,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483720747,483720747,src/rpc/blockchain.cpp
jonatack,2020-09-04 16:31:06,Proof of test! üòÑ,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483731693,483731693,src/rpc/blockchain.cpp
instagibbs,2020-09-04 19:06:11,found out why: zmq-less functional test builds. Stuck it inside a pass-through try/except block.,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r483800992,483800992,test/functional/interface_zmq.py
jonatack,2020-09-08 19:57:44,"error here while building 712f214\n```\nzmq/zmqnotificationinterface.cpp: In member function ‚Äòvirtual void CZMQNotificationInterface::TransactionAddedToMempool(const CTransactionRef&, uint64_t)‚Äô:\nzmq/zmqnotificationinterface.cpp:167:106: error: no matching function for call to ‚ÄòCZMQAbstractNotifier::NotifyTransactionAcceptance(const CTransaction&, uint64_t&)‚Äô\n  167 |         if (notifier->No",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r485162447,485162447,src/zmq/zmqnotificationinterface.cpp
jonatack,2020-09-08 19:59:08,"error here while building 712f214\n```\nvalidation.cpp: In member function ‚Äòbool {anonymous}::MemPoolAccept::AcceptSingleTransaction(const CTransactionRef&, {anonymous}::MemPoolAccept::ATMPArgs&)‚Äô:\nvalidation.cpp:1055:60: error: ‚Äòclass CTxMemPool‚Äô has no member named ‚ÄòGetAndIncrementSequence‚Äô\n 1055 |     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n   ",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r485163107,485163107,src/validation.cpp
jonatack,2020-09-09 07:50:58,"bb5e3a34 nit sort\n```suggestion\nfrom test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE, ADDRESS_BCRT1_UNSPENDABLE\n```",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r485409125,485409125,test/functional/interface_zmq.py
jonatack,2020-09-09 08:06:47,"885212e could you please inverse the order of `txids` and `mempool_sequence` fields here in the help to be the same as the rpc output\n\n```diff\n                         {\n-                            {RPCResult::Type::NUM, ""mempool_sequence"", ""The mempool sequence value.""},\n                             {RPCResult::Type::ARR, ""txids"", """",\n                             {\n                ",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r485418468,485418468,src/rpc/blockchain.cpp
jonatack,2020-09-09 08:10:58,"99a94fe\n```suggestion\nfrom test_framework.blocktools import add_witness_commitment, create_block, create_coinbase\n```",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r485420962,485420962,test/functional/interface_zmq.py
jonatack,2020-09-09 08:11:28,99a94fe nit sort,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r485421242,485421242,test/functional/interface_zmq.py
instagibbs,2020-09-09 14:17:07,done,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r485648120,485648120,src/rpc/blockchain.cpp
0xB10C,2020-09-14 06:35:21,Why is `mempool_sequence` == 0 here?,https://github.com/bitcoin/bitcoin/pull/19572#discussion_r487680478,487680478,src/wallet/wallet.cpp
instagibbs,2020-09-14 13:55:49,"it's a required chain interface argument, but the wallet doesn't care/have access to about the mempool sequence value.",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r487940262,487940262,src/wallet/wallet.cpp
jonatack,2020-09-21 20:15:18,"pico-nit 68b1e612 extra space in last rebase, ignore unless you have to retouch again\n",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r492320345,492320345,src/zmq/zmqnotificationinterface.cpp
instagibbs,2020-09-22 15:21:27,"you're in luck, rebasing again. done.",https://github.com/bitcoin/bitcoin/pull/19572#discussion_r492824785,492824785,src/zmq/zmqnotificationinterface.cpp
