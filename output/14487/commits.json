[
  {
    "sha": "a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMTEwZmVkM2FiOGM4NThiOGViZjdhMTVjYTYxNTI5YWUzNDRjNGY5",
    "commit": {
      "author": {
        "name": "DesWurstes",
        "email": "DesWurstes@users.noreply.github.com",
        "date": "2018-10-20T10:41:57Z"
      },
      "committer": {
        "name": "DesWurstes",
        "email": "DesWurstes@users.noreply.github.com",
        "date": "2018-10-23T13:39:59Z"
      },
      "message": "Constexprize constants",
      "tree": {
        "sha": "30bd13cf5114d72526bc5b0786ae1567f4e48aff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/30bd13cf5114d72526bc5b0786ae1567f4e48aff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/comments",
    "author": {
      "login": "DesWurstes",
      "id": 23437045,
      "node_id": "MDQ6VXNlcjIzNDM3MDQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23437045?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DesWurstes",
      "html_url": "https://github.com/DesWurstes",
      "followers_url": "https://api.github.com/users/DesWurstes/followers",
      "following_url": "https://api.github.com/users/DesWurstes/following{/other_user}",
      "gists_url": "https://api.github.com/users/DesWurstes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DesWurstes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DesWurstes/subscriptions",
      "organizations_url": "https://api.github.com/users/DesWurstes/orgs",
      "repos_url": "https://api.github.com/users/DesWurstes/repos",
      "events_url": "https://api.github.com/users/DesWurstes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DesWurstes/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "DesWurstes",
      "id": 23437045,
      "node_id": "MDQ6VXNlcjIzNDM3MDQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23437045?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DesWurstes",
      "html_url": "https://github.com/DesWurstes",
      "followers_url": "https://api.github.com/users/DesWurstes/followers",
      "following_url": "https://api.github.com/users/DesWurstes/following{/other_user}",
      "gists_url": "https://api.github.com/users/DesWurstes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DesWurstes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DesWurstes/subscriptions",
      "organizations_url": "https://api.github.com/users/DesWurstes/orgs",
      "repos_url": "https://api.github.com/users/DesWurstes/repos",
      "events_url": "https://api.github.com/users/DesWurstes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DesWurstes/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6746a8951923513590dd241912cb67100f6e0aac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6746a8951923513590dd241912cb67100f6e0aac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6746a8951923513590dd241912cb67100f6e0aac"
      }
    ],
    "stats": {
      "total": 368,
      "additions": 184,
      "deletions": 184
    },
    "files": [
      {
        "sha": "543930b2a50af4132943d4c79d3c432784085c6d",
        "filename": "src/amount.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.h?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -11,7 +11,7 @@\n /** Amount in satoshis (Can be negative) */\n typedef int64_t CAmount;\n \n-static const CAmount COIN = 100000000;\n+static constexpr CAmount COIN = 100000000;\n \n /** No amount larger than this (in satoshi) is valid.\n  *\n@@ -22,7 +22,7 @@ static const CAmount COIN = 100000000;\n  * critical; in unusual circumstances like a(nother) overflow bug that allowed\n  * for the creation of coins out of thin air modification could lead to a fork.\n  * */\n-static const CAmount MAX_MONEY = 21000000 * COIN;\n+static constexpr CAmount MAX_MONEY = 21000000 * COIN;\n inline bool MoneyRange(const CAmount& nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }\n \n #endif //  BITCOIN_AMOUNT_H"
      },
      {
        "sha": "5104d8d8a965947767a10d5bdcd2e8954172f9db",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -11,8 +11,8 @@\n #include <string.h>\n \n /** All alphanumeric characters except for \"0\", \"I\", \"O\", and \"l\" */\n-static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n-static const int8_t mapBase58[256] = {\n+static constexpr const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n+static constexpr int8_t mapBase58[256] = {\n     -1,-1,-1,-1,-1,-1,-1,-1, -1,-1,-1,-1,-1,-1,-1,-1,\n     -1,-1,-1,-1,-1,-1,-1,-1, -1,-1,-1,-1,-1,-1,-1,-1,\n     -1,-1,-1,-1,-1,-1,-1,-1, -1,-1,-1,-1,-1,-1,-1,-1,"
      },
      {
        "sha": "3ced42ac61ab53260dc6512378058e96afa4f175",
        "filename": "src/bech32.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.cpp?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -10,10 +10,10 @@ namespace\n typedef std::vector<uint8_t> data;\n \n /** The Bech32 character set for encoding. */\n-const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+constexpr const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n \n /** The Bech32 character set for decoding. */\n-const int8_t CHARSET_REV[128] = {\n+constexpr int8_t CHARSET_REV[128] = {\n     -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n     -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n     -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,"
      },
      {
        "sha": "e7b5d865db8fbac763aa7132ae5d3cbb9b29df99",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -14,8 +14,8 @@ class CTransaction;\n class uint256;\n \n //! 20,000 items with fp rate < 0.1% or 10,000 items and <0.0001%\n-static const unsigned int MAX_BLOOM_FILTER_SIZE = 36000; // bytes\n-static const unsigned int MAX_HASH_FUNCS = 50;\n+static constexpr unsigned int MAX_BLOOM_FILTER_SIZE = 36000; // bytes\n+static constexpr unsigned int MAX_HASH_FUNCS = 50;\n \n /**\n  * First two bits of nFlags control how much IsRelevantAndUpdate actually updates"
      },
      {
        "sha": "da6e2418fc75f78fdbeb556942304068442b0572",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -18,15 +18,15 @@\n  * Maximum amount of time that a block timestamp is allowed to exceed the\n  * current network-adjusted time before the block will be accepted.\n  */\n-static const int64_t MAX_FUTURE_BLOCK_TIME = 2 * 60 * 60;\n+static constexpr int64_t MAX_FUTURE_BLOCK_TIME = 2 * 60 * 60;\n \n /**\n  * Timestamp window used as a grace period by code that compares external\n  * timestamps (such as timestamps passed to RPCs, or wallet key creation times)\n  * to block timestamps. This should be set at least as high as\n  * MAX_FUTURE_BLOCK_TIME.\n  */\n-static const int64_t TIMESTAMP_WINDOW = MAX_FUTURE_BLOCK_TIME;\n+static constexpr int64_t TIMESTAMP_WINDOW = MAX_FUTURE_BLOCK_TIME;\n \n class CBlockFileInfo\n {"
      },
      {
        "sha": "7df6fd92f1d0cbc516d61ab5b99e713e49032faa",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -10,18 +10,18 @@\n #include <stdint.h>\n \n /** The maximum allowed size for a serialized block, in bytes (only for buffer size limits) */\n-static const unsigned int MAX_BLOCK_SERIALIZED_SIZE = 4000000;\n+static constexpr unsigned int MAX_BLOCK_SERIALIZED_SIZE = 4000000;\n /** The maximum allowed weight for a block, see BIP 141 (network rule) */\n-static const unsigned int MAX_BLOCK_WEIGHT = 4000000;\n+static constexpr unsigned int MAX_BLOCK_WEIGHT = 4000000;\n /** The maximum allowed number of signature check operations in a block (network rule) */\n-static const int64_t MAX_BLOCK_SIGOPS_COST = 80000;\n+static constexpr int64_t MAX_BLOCK_SIGOPS_COST = 80000;\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n-static const int COINBASE_MATURITY = 100;\n+static constexpr int COINBASE_MATURITY = 100;\n \n-static const int WITNESS_SCALE_FACTOR = 4;\n+static constexpr int WITNESS_SCALE_FACTOR = 4;\n \n-static const size_t MIN_TRANSACTION_WEIGHT = WITNESS_SCALE_FACTOR * 60; // 60 is the lower bound for the size of a valid serialized CTransaction\n-static const size_t MIN_SERIALIZABLE_TRANSACTION_WEIGHT = WITNESS_SCALE_FACTOR * 10; // 10 is the lower bound for the size of a serialized CTransaction\n+static constexpr size_t MIN_TRANSACTION_WEIGHT = WITNESS_SCALE_FACTOR * 60; // 60 is the lower bound for the size of a valid serialized CTransaction\n+static constexpr size_t MIN_SERIALIZABLE_TRANSACTION_WEIGHT = WITNESS_SCALE_FACTOR * 10; // 10 is the lower bound for the size of a serialized CTransaction\n \n /** Flags for nSequence and nLockTime locks */\n /** Interpret sequence numbers as relative lock-time constraints. */"
      },
      {
        "sha": "40b51f649300e29b244b0b3e891b5807a5d93f49",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -13,14 +13,14 @@\n #include <primitives/block.h>\n \n /** \"reject\" message codes */\n-static const unsigned char REJECT_MALFORMED = 0x01;\n-static const unsigned char REJECT_INVALID = 0x10;\n-static const unsigned char REJECT_OBSOLETE = 0x11;\n-static const unsigned char REJECT_DUPLICATE = 0x12;\n-static const unsigned char REJECT_NONSTANDARD = 0x40;\n-// static const unsigned char REJECT_DUST = 0x41; // part of BIP 61\n-static const unsigned char REJECT_INSUFFICIENTFEE = 0x42;\n-static const unsigned char REJECT_CHECKPOINT = 0x43;\n+static constexpr unsigned char REJECT_MALFORMED = 0x01;\n+static constexpr unsigned char REJECT_INVALID = 0x10;\n+static constexpr unsigned char REJECT_OBSOLETE = 0x11;\n+static constexpr unsigned char REJECT_DUPLICATE = 0x12;\n+static constexpr unsigned char REJECT_NONSTANDARD = 0x40;\n+// static constexpr unsigned char REJECT_DUST = 0x41; // part of BIP 61\n+static constexpr unsigned char REJECT_INSUFFICIENTFEE = 0x42;\n+static constexpr unsigned char REJECT_CHECKPOINT = 0x43;\n \n /** Capture information about block/transaction validation */\n class CValidationState {"
      },
      {
        "sha": "522f90078280edfe65393f6c6a79b3fc000f3879",
        "filename": "src/crypto/hmac_sha256.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/crypto/hmac_sha256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/crypto/hmac_sha256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/hmac_sha256.h?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -18,7 +18,7 @@ class CHMAC_SHA256\n     CSHA256 inner;\n \n public:\n-    static const size_t OUTPUT_SIZE = 32;\n+    static constexpr size_t OUTPUT_SIZE = 32;\n \n     CHMAC_SHA256(const unsigned char* key, size_t keylen);\n     CHMAC_SHA256& Write(const unsigned char* data, size_t len)"
      },
      {
        "sha": "dce188cf5f00a123eeafccee26165b999d86aedb",
        "filename": "src/crypto/hmac_sha512.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/crypto/hmac_sha512.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/crypto/hmac_sha512.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/hmac_sha512.h?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -18,7 +18,7 @@ class CHMAC_SHA512\n     CSHA512 inner;\n \n public:\n-    static const size_t OUTPUT_SIZE = 64;\n+    static constexpr size_t OUTPUT_SIZE = 64;\n \n     CHMAC_SHA512(const unsigned char* key, size_t keylen);\n     CHMAC_SHA512& Write(const unsigned char* data, size_t len)"
      },
      {
        "sha": "622eb5031770b0eb1cf60867d592d509bc7726fc",
        "filename": "src/crypto/ripemd160.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/crypto/ripemd160.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/crypto/ripemd160.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/ripemd160.h?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -17,7 +17,7 @@ class CRIPEMD160\n     uint64_t bytes;\n \n public:\n-    static const size_t OUTPUT_SIZE = 20;\n+    static constexpr size_t OUTPUT_SIZE = 20;\n \n     CRIPEMD160();\n     CRIPEMD160& Write(const unsigned char* data, size_t len);"
      },
      {
        "sha": "a6d693f666234f78d17c9fdb2f7cbe74271a9cd7",
        "filename": "src/crypto/sha1.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/crypto/sha1.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/crypto/sha1.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha1.h?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -17,7 +17,7 @@ class CSHA1\n     uint64_t bytes;\n \n public:\n-    static const size_t OUTPUT_SIZE = 20;\n+    static constexpr size_t OUTPUT_SIZE = 20;\n \n     CSHA1();\n     CSHA1& Write(const unsigned char* data, size_t len);"
      },
      {
        "sha": "eea75b554c3f65bb181d76a7a369dc4223cc165c",
        "filename": "src/crypto/sha256.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/crypto/sha256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/crypto/sha256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256.h?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -18,7 +18,7 @@ class CSHA256\n     uint64_t bytes;\n \n public:\n-    static const size_t OUTPUT_SIZE = 32;\n+    static constexpr size_t OUTPUT_SIZE = 32;\n \n     CSHA256();\n     CSHA256& Write(const unsigned char* data, size_t len);"
      },
      {
        "sha": "4118ac1b18943d4ed6aa62391be8b4e916f0ec14",
        "filename": "src/crypto/sha512.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/crypto/sha512.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/crypto/sha512.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha512.h?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -17,7 +17,7 @@ class CSHA512\n     uint64_t bytes;\n \n public:\n-    static const size_t OUTPUT_SIZE = 64;\n+    static constexpr size_t OUTPUT_SIZE = 64;\n \n     CSHA512();\n     CSHA512& Write(const unsigned char* data, size_t len);"
      },
      {
        "sha": "c7e1f1615a200dd88ae41171d08a76721d430669",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -16,8 +16,8 @@\n #include <leveldb/db.h>\n #include <leveldb/write_batch.h>\n \n-static const size_t DBWRAPPER_PREALLOC_KEY_SIZE = 64;\n-static const size_t DBWRAPPER_PREALLOC_VALUE_SIZE = 1024;\n+static constexpr size_t DBWRAPPER_PREALLOC_KEY_SIZE = 64;\n+static constexpr size_t DBWRAPPER_PREALLOC_VALUE_SIZE = 1024;\n \n class dbwrapper_error : public std::runtime_error\n {"
      },
      {
        "sha": "03c35307031d648e7dff1a95b11a2dd4d7b9d7fd",
        "filename": "src/httpserver.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -9,9 +9,9 @@\n #include <stdint.h>\n #include <functional>\n \n-static const int DEFAULT_HTTP_THREADS=4;\n-static const int DEFAULT_HTTP_WORKQUEUE=16;\n-static const int DEFAULT_HTTP_SERVER_TIMEOUT=30;\n+static constexpr int DEFAULT_HTTP_THREADS=4;\n+static constexpr int DEFAULT_HTTP_WORKQUEUE=16;\n+static constexpr int DEFAULT_HTTP_SERVER_TIMEOUT=30;\n \n struct evhttp_request;\n struct event_base;"
      },
      {
        "sha": "ff9e09cbeb349f98f887bfbe7acea481201c104f",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -16,9 +16,9 @@\n #include <string>\n #include <vector>\n \n-static const bool DEFAULT_LOGTIMEMICROS = false;\n-static const bool DEFAULT_LOGIPS        = false;\n-static const bool DEFAULT_LOGTIMESTAMPS = true;\n+static constexpr bool DEFAULT_LOGTIMEMICROS = false;\n+static constexpr bool DEFAULT_LOGIPS        = false;\n+static constexpr bool DEFAULT_LOGTIMESTAMPS = true;\n extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;"
      },
      {
        "sha": "d4d2a7a14635bde92d58bc9d5be70e39e967c2d1",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -21,7 +21,7 @@ class CScript;\n \n namespace Consensus { struct Params; };\n \n-static const bool DEFAULT_PRINTPRIORITY = false;\n+static constexpr bool DEFAULT_PRINTPRIORITY = false;\n \n struct CBlockTemplate\n {"
      },
      {
        "sha": "c66e86c93677a5dba210545a7eebf6ec72dd765a",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -38,52 +38,52 @@ class CScheduler;\n class CNode;\n \n /** Time between pings automatically sent out for latency probing and keepalive (in seconds). */\n-static const int PING_INTERVAL = 2 * 60;\n+static constexpr int PING_INTERVAL = 2 * 60;\n /** Time after which to disconnect, after waiting for a ping response (or inactivity). */\n-static const int TIMEOUT_INTERVAL = 20 * 60;\n+static constexpr int TIMEOUT_INTERVAL = 20 * 60;\n /** Run the feeler connection loop once every 2 minutes or 120 seconds. **/\n-static const int FEELER_INTERVAL = 120;\n+static constexpr int FEELER_INTERVAL = 120;\n /** The maximum number of entries in an 'inv' protocol message */\n-static const unsigned int MAX_INV_SZ = 50000;\n+static constexpr unsigned int MAX_INV_SZ = 50000;\n /** The maximum number of entries in a locator */\n-static const unsigned int MAX_LOCATOR_SZ = 101;\n+static constexpr unsigned int MAX_LOCATOR_SZ = 101;\n /** The maximum number of new addresses to accumulate before announcing. */\n-static const unsigned int MAX_ADDR_TO_SEND = 1000;\n+static constexpr unsigned int MAX_ADDR_TO_SEND = 1000;\n /** Maximum length of incoming protocol messages (no message over 4 MB is currently acceptable). */\n-static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 4 * 1000 * 1000;\n+static constexpr unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 4 * 1000 * 1000;\n /** Maximum length of strSubVer in `version` message */\n-static const unsigned int MAX_SUBVERSION_LENGTH = 256;\n+static constexpr unsigned int MAX_SUBVERSION_LENGTH = 256;\n /** Maximum number of automatic outgoing nodes */\n-static const int MAX_OUTBOUND_CONNECTIONS = 8;\n+static constexpr int MAX_OUTBOUND_CONNECTIONS = 8;\n /** Maximum number of addnode outgoing nodes */\n-static const int MAX_ADDNODE_CONNECTIONS = 8;\n+static constexpr int MAX_ADDNODE_CONNECTIONS = 8;\n /** -listen default */\n-static const bool DEFAULT_LISTEN = true;\n+static constexpr bool DEFAULT_LISTEN = true;\n /** -upnp default */\n #ifdef USE_UPNP\n-static const bool DEFAULT_UPNP = USE_UPNP;\n+static constexpr bool DEFAULT_UPNP = USE_UPNP;\n #else\n-static const bool DEFAULT_UPNP = false;\n+static constexpr bool DEFAULT_UPNP = false;\n #endif\n /** The maximum number of entries in mapAskFor */\n-static const size_t MAPASKFOR_MAX_SZ = MAX_INV_SZ;\n+static constexpr size_t MAPASKFOR_MAX_SZ = MAX_INV_SZ;\n /** The maximum number of entries in setAskFor (larger due to getdata latency)*/\n-static const size_t SETASKFOR_MAX_SZ = 2 * MAX_INV_SZ;\n+static constexpr size_t SETASKFOR_MAX_SZ = 2 * MAX_INV_SZ;\n /** The maximum number of peer connections to maintain. */\n-static const unsigned int DEFAULT_MAX_PEER_CONNECTIONS = 125;\n+static constexpr unsigned int DEFAULT_MAX_PEER_CONNECTIONS = 125;\n /** The default for -maxuploadtarget. 0 = Unlimited */\n-static const uint64_t DEFAULT_MAX_UPLOAD_TARGET = 0;\n+static constexpr uint64_t DEFAULT_MAX_UPLOAD_TARGET = 0;\n /** The default timeframe for -maxuploadtarget. 1 day. */\n-static const uint64_t MAX_UPLOAD_TIMEFRAME = 60 * 60 * 24;\n+static constexpr uint64_t MAX_UPLOAD_TIMEFRAME = 60 * 60 * 24;\n /** Default for blocks only*/\n-static const bool DEFAULT_BLOCKSONLY = false;\n+static constexpr bool DEFAULT_BLOCKSONLY = false;\n \n-static const bool DEFAULT_FORCEDNSSEED = false;\n-static const size_t DEFAULT_MAXRECEIVEBUFFER = 5 * 1000;\n-static const size_t DEFAULT_MAXSENDBUFFER    = 1 * 1000;\n+static constexpr bool DEFAULT_FORCEDNSSEED = false;\n+static constexpr size_t DEFAULT_MAXRECEIVEBUFFER = 5 * 1000;\n+static constexpr size_t DEFAULT_MAXSENDBUFFER    = 1 * 1000;\n \n // NOTE: When adjusting this, update rpcnet:setban's help (\"24h\")\n-static const unsigned int DEFAULT_MISBEHAVING_BANTIME = 60 * 60 * 24;  // Default 24-hour ban\n+static constexpr unsigned int DEFAULT_MISBEHAVING_BANTIME = 60 * 60 * 24;  // Default 24-hour ban\n \n typedef int64_t NodeId;\n "
      },
      {
        "sha": "00e5d1856306cde9ce09138e307dcbaaf923a834",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -14,9 +14,9 @@\n extern CCriticalSection cs_main;\n \n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n-static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n+static constexpr unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n /** Default number of orphan+recently-replaced txn to keep around for block reconstruction */\n-static const unsigned int DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN = 100;\n+static constexpr unsigned int DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN = 100;\n /** Default for BIP61 (sending reject messages) */\n static constexpr bool DEFAULT_ENABLE_BIP61{false};\n "
      },
      {
        "sha": "46a34a7ffb5ec5913fb634e011a2418648827a4f",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -8,11 +8,11 @@\n #include <utilstrencodings.h>\n #include <tinyformat.h>\n \n-static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };\n-static const unsigned char pchOnionCat[] = {0xFD,0x87,0xD8,0x7E,0xEB,0x43};\n+static constexpr unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };\n+static constexpr unsigned char pchOnionCat[] = {0xFD,0x87,0xD8,0x7E,0xEB,0x43};\n \n // 0xFD + sha256(\"bitcoin\")[0:5]\n-static const unsigned char g_internal_prefix[] = { 0xFD, 0x6B, 0x88, 0xC0, 0x87, 0x24 };\n+static constexpr unsigned char g_internal_prefix[] = { 0xFD, 0x6B, 0x88, 0xC0, 0x87, 0x24 };\n \n CNetAddr::CNetAddr()\n {\n@@ -135,7 +135,7 @@ bool CNetAddr::IsRFC3964() const\n \n bool CNetAddr::IsRFC6052() const\n {\n-    static const unsigned char pchRFC6052[] = {0,0x64,0xFF,0x9B,0,0,0,0,0,0,0,0};\n+    static constexpr unsigned char pchRFC6052[] = {0,0x64,0xFF,0x9B,0,0,0,0,0,0,0,0};\n     return (memcmp(ip, pchRFC6052, sizeof(pchRFC6052)) == 0);\n }\n \n@@ -146,7 +146,7 @@ bool CNetAddr::IsRFC4380() const\n \n bool CNetAddr::IsRFC4862() const\n {\n-    static const unsigned char pchRFC4862[] = {0xFE,0x80,0,0,0,0,0,0};\n+    static constexpr unsigned char pchRFC4862[] = {0xFE,0x80,0,0,0,0,0,0};\n     return (memcmp(ip, pchRFC4862, sizeof(pchRFC4862)) == 0);\n }\n \n@@ -157,7 +157,7 @@ bool CNetAddr::IsRFC4193() const\n \n bool CNetAddr::IsRFC6145() const\n {\n-    static const unsigned char pchRFC6145[] = {0,0,0,0,0,0,0,0,0xFF,0xFF,0,0};\n+    static constexpr unsigned char pchRFC6145[] = {0,0,0,0,0,0,0,0,0xFF,0xFF,0,0};\n     return (memcmp(ip, pchRFC6145, sizeof(pchRFC6145)) == 0);\n }\n \n@@ -178,7 +178,7 @@ bool CNetAddr::IsLocal() const\n        return true;\n \n    // IPv6 loopback (::1/128)\n-   static const unsigned char pchLocal[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1};\n+   static constexpr unsigned char pchLocal[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1};\n    if (memcmp(ip, pchLocal, 16) == 0)\n        return true;\n \n@@ -392,8 +392,8 @@ uint64_t CNetAddr::GetHash() const\n \n // private extensions to enum Network, only returned by GetExtNetwork,\n // and only used in GetReachabilityFrom\n-static const int NET_UNKNOWN = NET_MAX + 0;\n-static const int NET_TEREDO  = NET_MAX + 1;\n+static constexpr int NET_UNKNOWN = NET_MAX + 0;\n+static constexpr int NET_TEREDO  = NET_MAX + 1;\n int static GetExtNetwork(const CNetAddr *addr)\n {\n     if (addr == nullptr)"
      },
      {
        "sha": "a096f97434031886102ebb58f9bb0c3714f5bbd5",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -17,35 +17,35 @@ class CCoinsViewCache;\n class CTxOut;\n \n /** Default for -blockmaxweight, which controls the range of block weights the mining code will create **/\n-static const unsigned int DEFAULT_BLOCK_MAX_WEIGHT = MAX_BLOCK_WEIGHT - 4000;\n+static constexpr unsigned int DEFAULT_BLOCK_MAX_WEIGHT = MAX_BLOCK_WEIGHT - 4000;\n /** Default for -blockmintxfee, which sets the minimum feerate for a transaction in blocks created by mining code **/\n-static const unsigned int DEFAULT_BLOCK_MIN_TX_FEE = 1000;\n+static constexpr unsigned int DEFAULT_BLOCK_MIN_TX_FEE = 1000;\n /** The maximum weight for transactions we're willing to relay/mine */\n-static const unsigned int MAX_STANDARD_TX_WEIGHT = 400000;\n+static constexpr unsigned int MAX_STANDARD_TX_WEIGHT = 400000;\n /** The minimum non-witness size for transactions we're willing to relay/mine (1 segwit input + 1 P2WPKH output = 82 bytes) */\n-static const unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE = 82;\n+static constexpr unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE = 82;\n /** Maximum number of signature check operations in an IsStandard() P2SH script */\n-static const unsigned int MAX_P2SH_SIGOPS = 15;\n+static constexpr unsigned int MAX_P2SH_SIGOPS = 15;\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n-static const unsigned int MAX_STANDARD_TX_SIGOPS_COST = MAX_BLOCK_SIGOPS_COST/5;\n+static constexpr unsigned int MAX_STANDARD_TX_SIGOPS_COST = MAX_BLOCK_SIGOPS_COST/5;\n /** Default for -maxmempool, maximum megabytes of mempool memory usage */\n-static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n+static constexpr unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n /** Default for -incrementalrelayfee, which sets the minimum feerate increase for mempool limiting or BIP 125 replacement **/\n-static const unsigned int DEFAULT_INCREMENTAL_RELAY_FEE = 1000;\n+static constexpr unsigned int DEFAULT_INCREMENTAL_RELAY_FEE = 1000;\n /** Default for -bytespersigop */\n-static const unsigned int DEFAULT_BYTES_PER_SIGOP = 20;\n+static constexpr unsigned int DEFAULT_BYTES_PER_SIGOP = 20;\n /** The maximum number of witness stack items in a standard P2WSH script */\n-static const unsigned int MAX_STANDARD_P2WSH_STACK_ITEMS = 100;\n+static constexpr unsigned int MAX_STANDARD_P2WSH_STACK_ITEMS = 100;\n /** The maximum size of each witness stack item in a standard P2WSH script */\n-static const unsigned int MAX_STANDARD_P2WSH_STACK_ITEM_SIZE = 80;\n+static constexpr unsigned int MAX_STANDARD_P2WSH_STACK_ITEM_SIZE = 80;\n /** The maximum size of a standard witnessScript */\n-static const unsigned int MAX_STANDARD_P2WSH_SCRIPT_SIZE = 3600;\n+static constexpr unsigned int MAX_STANDARD_P2WSH_SCRIPT_SIZE = 3600;\n /** Min feerate for defining dust. Historically this has been based on the\n  * minRelayTxFee, however changing the dust limit changes which transactions are\n  * standard and should be done with care and ideally rarely. It makes sense to\n  * only increase the dust limit after prior releases were already not creating\n  * outputs below the new threshold */\n-static const unsigned int DUST_RELAY_TX_FEE = 3000;\n+static constexpr unsigned int DUST_RELAY_TX_FEE = 3000;\n /**\n  * Standard script verification flags that standard transactions will comply\n  * with. However scripts violating these flags may still be present in valid"
      },
      {
        "sha": "0b533be3b2fd2f81e346ad49db0670f8fe36869c",
        "filename": "src/policy/rbf.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/policy/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/policy/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.h?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -7,7 +7,7 @@\n \n #include <txmempool.h>\n \n-static const uint32_t MAX_BIP125_RBF_SEQUENCE = 0xfffffffd;\n+static constexpr uint32_t MAX_BIP125_RBF_SEQUENCE = 0xfffffffd;\n \n enum class RBFTransactionState {\n     UNKNOWN,"
      },
      {
        "sha": "ddf6e4bb1ddf56162d1d6e05e68c6d20a49996e6",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -12,7 +12,7 @@\n #include <serialize.h>\n #include <uint256.h>\n \n-static const int SERIALIZE_TRANSACTION_NO_WITNESS = 0x40000000;\n+static constexpr int SERIALIZE_TRANSACTION_NO_WITNESS = 0x40000000;\n \n /** An outpoint - a combination of a transaction hash and an index n into its vout */\n class COutPoint\n@@ -68,21 +68,21 @@ class CTxIn\n \n     /* Setting nSequence to this value for every input in a transaction\n      * disables nLockTime. */\n-    static const uint32_t SEQUENCE_FINAL = 0xffffffff;\n+    static constexpr uint32_t SEQUENCE_FINAL = 0xffffffff;\n \n     /* Below flags apply in the context of BIP 68*/\n     /* If this flag set, CTxIn::nSequence is NOT interpreted as a\n      * relative lock-time. */\n-    static const uint32_t SEQUENCE_LOCKTIME_DISABLE_FLAG = (1U << 31);\n+    static constexpr uint32_t SEQUENCE_LOCKTIME_DISABLE_FLAG = (1U << 31);\n \n     /* If CTxIn::nSequence encodes a relative lock-time and this flag\n      * is set, the relative lock-time has units of 512 seconds,\n      * otherwise it specifies blocks with a granularity of 1. */\n-    static const uint32_t SEQUENCE_LOCKTIME_TYPE_FLAG = (1 << 22);\n+    static constexpr uint32_t SEQUENCE_LOCKTIME_TYPE_FLAG = (1 << 22);\n \n     /* If CTxIn::nSequence encodes a relative lock-time, this mask is\n      * applied to extract that lock-time from the sequence field. */\n-    static const uint32_t SEQUENCE_LOCKTIME_MASK = 0x0000ffff;\n+    static constexpr uint32_t SEQUENCE_LOCKTIME_MASK = 0x0000ffff;\n \n     /* In order to use the same number of bits to encode roughly the\n      * same wall-clock duration, and because blocks are naturally\n@@ -91,7 +91,7 @@ class CTxIn\n      * Converting from CTxIn::nSequence to seconds is performed by\n      * multiplying by 512 = 2^9, or equivalently shifting up by\n      * 9 bits. */\n-    static const int SEQUENCE_LOCKTIME_GRANULARITY = 9;\n+    static constexpr int SEQUENCE_LOCKTIME_GRANULARITY = 9;\n \n     CTxIn()\n     {\n@@ -265,13 +265,13 @@ class CTransaction\n {\n public:\n     // Default transaction version.\n-    static const int32_t CURRENT_VERSION=2;\n+    static constexpr int32_t CURRENT_VERSION=2;\n \n     // Changing the default transaction version requires a two step process: first\n     // adapting relay policy by bumping MAX_STANDARD_VERSION, and then later date\n     // bumping the default CURRENT_VERSION at which point both CURRENT_VERSION and\n     // MAX_STANDARD_VERSION will be equal.\n-    static const int32_t MAX_STANDARD_VERSION=2;\n+    static constexpr int32_t MAX_STANDARD_VERSION=2;\n \n     // The local variables are made const to prevent unintended modification\n     // without updating the cached hash value. However, CTransaction is not"
      },
      {
        "sha": "7777ef733f0a151e13be20d862c565ee2106bfff",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -14,7 +14,7 @@\n #include <stdexcept>\n #include <vector>\n \n-const unsigned int BIP32_EXTKEY_SIZE = 74;\n+constexpr unsigned int BIP32_EXTKEY_SIZE = 74;\n \n /** A reference to a CKey: the Hash160 of its serialized public key */\n class CKeyID : public uint160"
      },
      {
        "sha": "5028affbd8cb344688c105a869e57a2b199d2235",
        "filename": "src/qt/guiconstants.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/qt/guiconstants.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/qt/guiconstants.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiconstants.h?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -6,15 +6,15 @@\n #define BITCOIN_QT_GUICONSTANTS_H\n \n /* Milliseconds between model updates */\n-static const int MODEL_UPDATE_DELAY = 250;\n+static constexpr int MODEL_UPDATE_DELAY = 250;\n \n /* AskPassphraseDialog -- Maximum passphrase length */\n-static const int MAX_PASSPHRASE_SIZE = 1024;\n+static constexpr int MAX_PASSPHRASE_SIZE = 1024;\n \n /* BitcoinGUI -- Size of icons in status bar */\n-static const int STATUSBAR_ICONSIZE = 16;\n+static constexpr int STATUSBAR_ICONSIZE = 16;\n \n-static const bool DEFAULT_SPLASHSCREEN = true;\n+static constexpr bool DEFAULT_SPLASHSCREEN = true;\n \n /* Invalid field background style */\n #define STYLE_INVALID \"background:#FF8080\"\n@@ -35,10 +35,10 @@ static const bool DEFAULT_SPLASHSCREEN = true;\n /* Tooltips longer than this (in characters) are converted into rich text,\n    so that they can be word-wrapped.\n  */\n-static const int TOOLTIP_WRAP_THRESHOLD = 80;\n+static constexpr int TOOLTIP_WRAP_THRESHOLD = 80;\n \n /* Maximum allowed URI length */\n-static const int MAX_URI_LENGTH = 255;\n+static constexpr int MAX_URI_LENGTH = 255;\n \n /* QRCodeDialog -- size of exported QR Code image */\n #define QR_IMAGE_SIZE 300"
      },
      {
        "sha": "3638a45a4d402d54d7754e755d41bf87a3be2d01",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -135,7 +135,7 @@ class FastRandomContext {\n  * sure that the underlying OS APIs for all platforms support the number.\n  * (many cap out at 256 bytes).\n  */\n-static const int NUM_OS_RANDOM_BYTES = 32;\n+static constexpr int NUM_OS_RANDOM_BYTES = 32;\n \n /** Get 32 bytes of system entropy. Do not use this in application code: use\n  * GetStrongRandBytes instead."
      },
      {
        "sha": "420d2d4c75f4bf484d1969c727fc18389bd456f1",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -20,23 +20,23 @@\n #include <vector>\n \n // Maximum number of bytes pushable to the stack\n-static const unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520;\n+static constexpr unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520;\n \n // Maximum number of non-push operations per script\n-static const int MAX_OPS_PER_SCRIPT = 201;\n+static constexpr int MAX_OPS_PER_SCRIPT = 201;\n \n // Maximum number of public keys per multisig\n-static const int MAX_PUBKEYS_PER_MULTISIG = 20;\n+static constexpr int MAX_PUBKEYS_PER_MULTISIG = 20;\n \n // Maximum script length in bytes\n-static const int MAX_SCRIPT_SIZE = 10000;\n+static constexpr int MAX_SCRIPT_SIZE = 10000;\n \n // Maximum number of values on script interpreter stack\n-static const int MAX_STACK_SIZE = 1000;\n+static constexpr int MAX_STACK_SIZE = 1000;\n \n // Threshold for nLockTime: below this value it is interpreted as block number,\n // otherwise as UNIX timestamp.\n-static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n+static constexpr unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n \n template <typename T>\n std::vector<unsigned char> ToByteVector(const T& in)\n@@ -185,7 +185,7 @@ enum opcodetype\n };\n \n // Maximum value that an opcode can be\n-static const unsigned int MAX_OPCODE = OP_NOP10;\n+static constexpr unsigned int MAX_OPCODE = OP_NOP10;\n \n const char* GetOpName(opcodetype opcode);\n "
      },
      {
        "sha": "f3b6251961c4d873ded6208c754b81af27679810",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -24,21 +24,21 @@ class uint256;\n //! No need to periodic flush if at least this much space still available.\n static constexpr int MAX_BLOCK_COINSDB_USAGE = 10;\n //! -dbcache default (MiB)\n-static const int64_t nDefaultDbCache = 450;\n+static constexpr int64_t nDefaultDbCache = 450;\n //! -dbbatchsize default (bytes)\n-static const int64_t nDefaultDbBatchSize = 16 << 20;\n+static constexpr int64_t nDefaultDbBatchSize = 16 << 20;\n //! max. -dbcache (MiB)\n-static const int64_t nMaxDbCache = sizeof(void*) > 4 ? 16384 : 1024;\n+static constexpr int64_t nMaxDbCache = sizeof(void*) > 4 ? 16384 : 1024;\n //! min. -dbcache (MiB)\n-static const int64_t nMinDbCache = 4;\n+static constexpr int64_t nMinDbCache = 4;\n //! Max memory allocated to block tree DB specific cache, if no -txindex (MiB)\n-static const int64_t nMaxBlockDBCache = 2;\n+static constexpr int64_t nMaxBlockDBCache = 2;\n //! Max memory allocated to block tree DB specific cache, if -txindex (MiB)\n // Unlike for the UTXO database, for the txindex scenario the leveldb cache make\n // a meaningful difference: https://github.com/bitcoin/bitcoin/pull/8273#issuecomment-229601991\n-static const int64_t nMaxTxIndexCache = 1024;\n+static constexpr int64_t nMaxTxIndexCache = 1024;\n //! Max memory allocated to coin DB specific cache (MiB)\n-static const int64_t nMaxCoinsDBCache = 8;\n+static constexpr int64_t nMaxCoinsDBCache = 8;\n \n /** CCoinsView backed by the coin database (chainstate/) */\n class CCoinsViewDB final : public CCoinsView"
      },
      {
        "sha": "b22efbece5c65451b160437272db15f04a6dbe36",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 47,
        "deletions": 47,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -47,94 +47,94 @@ struct PrecomputedTransactionData;\n struct LockPoints;\n \n /** Default for -whitelistrelay. */\n-static const bool DEFAULT_WHITELISTRELAY = true;\n+static constexpr bool DEFAULT_WHITELISTRELAY = true;\n /** Default for -whitelistforcerelay. */\n-static const bool DEFAULT_WHITELISTFORCERELAY = true;\n+static constexpr bool DEFAULT_WHITELISTFORCERELAY = true;\n /** Default for -minrelaytxfee, minimum relay fee for transactions */\n-static const unsigned int DEFAULT_MIN_RELAY_TX_FEE = 1000;\n+static constexpr unsigned int DEFAULT_MIN_RELAY_TX_FEE = 1000;\n //! -maxtxfee default\n-static const CAmount DEFAULT_TRANSACTION_MAXFEE = COIN / 10;\n+static constexpr CAmount DEFAULT_TRANSACTION_MAXFEE = COIN / 10;\n //! Discourage users to set fees higher than this amount (in satoshis) per kB\n-static const CAmount HIGH_TX_FEE_PER_KB = COIN / 100;\n+static constexpr CAmount HIGH_TX_FEE_PER_KB = COIN / 100;\n //! -maxtxfee will warn if called with a higher fee than this amount (in satoshis)\n-static const CAmount HIGH_MAX_TX_FEE = 100 * HIGH_TX_FEE_PER_KB;\n+static constexpr CAmount HIGH_MAX_TX_FEE = 100 * HIGH_TX_FEE_PER_KB;\n /** Default for -limitancestorcount, max number of in-mempool ancestors */\n-static const unsigned int DEFAULT_ANCESTOR_LIMIT = 25;\n+static constexpr unsigned int DEFAULT_ANCESTOR_LIMIT = 25;\n /** Default for -limitancestorsize, maximum kilobytes of tx + all in-mempool ancestors */\n-static const unsigned int DEFAULT_ANCESTOR_SIZE_LIMIT = 101;\n+static constexpr unsigned int DEFAULT_ANCESTOR_SIZE_LIMIT = 101;\n /** Default for -limitdescendantcount, max number of in-mempool descendants */\n-static const unsigned int DEFAULT_DESCENDANT_LIMIT = 25;\n+static constexpr unsigned int DEFAULT_DESCENDANT_LIMIT = 25;\n /** Default for -limitdescendantsize, maximum kilobytes of in-mempool descendants */\n-static const unsigned int DEFAULT_DESCENDANT_SIZE_LIMIT = 101;\n+static constexpr unsigned int DEFAULT_DESCENDANT_SIZE_LIMIT = 101;\n /** Default for -mempoolexpiry, expiration time for mempool transactions in hours */\n-static const unsigned int DEFAULT_MEMPOOL_EXPIRY = 336;\n+static constexpr unsigned int DEFAULT_MEMPOOL_EXPIRY = 336;\n /** Maximum kilobytes for transactions to store for processing during reorg */\n-static const unsigned int MAX_DISCONNECTED_TX_POOL_SIZE = 20000;\n+static constexpr unsigned int MAX_DISCONNECTED_TX_POOL_SIZE = 20000;\n /** The maximum size of a blk?????.dat file (since 0.8) */\n-static const unsigned int MAX_BLOCKFILE_SIZE = 0x8000000; // 128 MiB\n+static constexpr unsigned int MAX_BLOCKFILE_SIZE = 0x8000000; // 128 MiB\n /** The pre-allocation chunk size for blk?????.dat files (since 0.8) */\n-static const unsigned int BLOCKFILE_CHUNK_SIZE = 0x1000000; // 16 MiB\n+static constexpr unsigned int BLOCKFILE_CHUNK_SIZE = 0x1000000; // 16 MiB\n /** The pre-allocation chunk size for rev?????.dat files (since 0.8) */\n-static const unsigned int UNDOFILE_CHUNK_SIZE = 0x100000; // 1 MiB\n+static constexpr unsigned int UNDOFILE_CHUNK_SIZE = 0x100000; // 1 MiB\n \n /** Maximum number of script-checking threads allowed */\n-static const int MAX_SCRIPTCHECK_THREADS = 16;\n+static constexpr int MAX_SCRIPTCHECK_THREADS = 16;\n /** -par default (number of script-checking threads, 0 = auto) */\n-static const int DEFAULT_SCRIPTCHECK_THREADS = 0;\n+static constexpr int DEFAULT_SCRIPTCHECK_THREADS = 0;\n /** Number of blocks that can be requested at any given time from a single peer. */\n-static const int MAX_BLOCKS_IN_TRANSIT_PER_PEER = 16;\n+static constexpr int MAX_BLOCKS_IN_TRANSIT_PER_PEER = 16;\n /** Timeout in seconds during which a peer must stall block download progress before being disconnected. */\n-static const unsigned int BLOCK_STALLING_TIMEOUT = 2;\n+static constexpr unsigned int BLOCK_STALLING_TIMEOUT = 2;\n /** Number of headers sent in one getheaders result. We rely on the assumption that if a peer sends\n  *  less than this number, we reached its tip. Changing this value is a protocol upgrade. */\n-static const unsigned int MAX_HEADERS_RESULTS = 2000;\n+static constexpr unsigned int MAX_HEADERS_RESULTS = 2000;\n /** Maximum depth of blocks we're willing to serve as compact blocks to peers\n  *  when requested. For older blocks, a regular BLOCK response will be sent. */\n-static const int MAX_CMPCTBLOCK_DEPTH = 5;\n+static constexpr int MAX_CMPCTBLOCK_DEPTH = 5;\n /** Maximum depth of blocks we're willing to respond to GETBLOCKTXN requests for. */\n-static const int MAX_BLOCKTXN_DEPTH = 10;\n+static constexpr int MAX_BLOCKTXN_DEPTH = 10;\n /** Size of the \"block download window\": how far ahead of our current height do we fetch?\n  *  Larger windows tolerate larger download speed differences between peer, but increase the potential\n  *  degree of disordering of blocks on disk (which make reindexing and pruning harder). We'll probably\n  *  want to make this a per-peer adaptive value at some point. */\n-static const unsigned int BLOCK_DOWNLOAD_WINDOW = 1024;\n+static constexpr unsigned int BLOCK_DOWNLOAD_WINDOW = 1024;\n /** Time to wait (in seconds) between writing blocks/block index to disk. */\n-static const unsigned int DATABASE_WRITE_INTERVAL = 60 * 60;\n+static constexpr unsigned int DATABASE_WRITE_INTERVAL = 60 * 60;\n /** Time to wait (in seconds) between flushing chainstate to disk. */\n-static const unsigned int DATABASE_FLUSH_INTERVAL = 24 * 60 * 60;\n+static constexpr unsigned int DATABASE_FLUSH_INTERVAL = 24 * 60 * 60;\n /** Maximum length of reject messages. */\n-static const unsigned int MAX_REJECT_MESSAGE_LENGTH = 111;\n+static constexpr unsigned int MAX_REJECT_MESSAGE_LENGTH = 111;\n /** Block download timeout base, expressed in millionths of the block interval (i.e. 10 min) */\n-static const int64_t BLOCK_DOWNLOAD_TIMEOUT_BASE = 1000000;\n+static constexpr int64_t BLOCK_DOWNLOAD_TIMEOUT_BASE = 1000000;\n /** Additional block download timeout per parallel downloading peer (i.e. 5 min) */\n-static const int64_t BLOCK_DOWNLOAD_TIMEOUT_PER_PEER = 500000;\n+static constexpr int64_t BLOCK_DOWNLOAD_TIMEOUT_PER_PEER = 500000;\n \n-static const int64_t DEFAULT_MAX_TIP_AGE = 24 * 60 * 60;\n+static constexpr int64_t DEFAULT_MAX_TIP_AGE = 24 * 60 * 60;\n /** Maximum age of our tip in seconds for us to be considered current for fee estimation */\n-static const int64_t MAX_FEE_ESTIMATION_TIP_AGE = 3 * 60 * 60;\n+static constexpr int64_t MAX_FEE_ESTIMATION_TIP_AGE = 3 * 60 * 60;\n \n /** Default for -permitbaremultisig */\n-static const bool DEFAULT_PERMIT_BAREMULTISIG = true;\n-static const bool DEFAULT_CHECKPOINTS_ENABLED = true;\n-static const bool DEFAULT_TXINDEX = false;\n-static const unsigned int DEFAULT_BANSCORE_THRESHOLD = 100;\n+static constexpr bool DEFAULT_PERMIT_BAREMULTISIG = true;\n+static constexpr bool DEFAULT_CHECKPOINTS_ENABLED = true;\n+static constexpr bool DEFAULT_TXINDEX = false;\n+static constexpr unsigned int DEFAULT_BANSCORE_THRESHOLD = 100;\n /** Default for -persistmempool */\n-static const bool DEFAULT_PERSIST_MEMPOOL = true;\n+static constexpr bool DEFAULT_PERSIST_MEMPOOL = true;\n /** Default for -mempoolreplacement */\n-static const bool DEFAULT_ENABLE_REPLACEMENT = true;\n+static constexpr bool DEFAULT_ENABLE_REPLACEMENT = true;\n /** Default for using fee filter */\n-static const bool DEFAULT_FEEFILTER = true;\n+static constexpr bool DEFAULT_FEEFILTER = true;\n \n /** Maximum number of headers to announce when relaying blocks with headers message.*/\n-static const unsigned int MAX_BLOCKS_TO_ANNOUNCE = 8;\n+static constexpr unsigned int MAX_BLOCKS_TO_ANNOUNCE = 8;\n \n /** Maximum number of unconnecting headers announcements before DoS score */\n-static const int MAX_UNCONNECTING_HEADERS = 10;\n+static constexpr int MAX_UNCONNECTING_HEADERS = 10;\n \n-static const bool DEFAULT_PEERBLOOMFILTERS = true;\n+static constexpr bool DEFAULT_PEERBLOOMFILTERS = true;\n \n /** Default for -stopatheight */\n-static const int DEFAULT_STOPATHEIGHT = 0;\n+static constexpr int DEFAULT_STOPATHEIGHT = 0;\n \n struct BlockHasher\n {\n@@ -180,7 +180,7 @@ extern arith_uint256 nMinimumChainWork;\n extern CBlockIndex *pindexBestHeader;\n \n /** Minimum disk space required - used in CheckDiskSpace() */\n-static const uint64_t nMinDiskSpace = 52428800;\n+static constexpr uint64_t nMinDiskSpace = 52428800;\n \n /** Pruning-related variables and constants */\n /** True if any block files have ever been pruned. */\n@@ -190,12 +190,12 @@ extern bool fPruneMode;\n /** Number of MiB of block files that we're trying to stay below. */\n extern uint64_t nPruneTarget;\n /** Block files containing a block-height within MIN_BLOCKS_TO_KEEP of chainActive.Tip() will not be pruned. */\n-static const unsigned int MIN_BLOCKS_TO_KEEP = 288;\n+static constexpr unsigned int MIN_BLOCKS_TO_KEEP = 288;\n /** Minimum blocks required to signal NODE_NETWORK_LIMITED */\n-static const unsigned int NODE_NETWORK_LIMITED_MIN_BLOCKS = 288;\n+static constexpr unsigned int NODE_NETWORK_LIMITED_MIN_BLOCKS = 288;\n \n-static const signed int DEFAULT_CHECKBLOCKS = 6;\n-static const unsigned int DEFAULT_CHECKLEVEL = 3;\n+static constexpr signed int DEFAULT_CHECKBLOCKS = 6;\n+static constexpr unsigned int DEFAULT_CHECKLEVEL = 3;\n \n // Require that user allocate at least 550MB for block & undo files (blk???.dat and rev???.dat)\n // At 1MB per block, 288 blocks = 288MB.\n@@ -205,7 +205,7 @@ static const unsigned int DEFAULT_CHECKLEVEL = 3;\n // full block file chunks, we need the high water mark which triggers the prune to be\n // one 128MB block file + added 15% undo data = 147MB greater for a total of 545MB\n // Setting the target to > than 550MB will make it likely we can respect the target.\n-static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n+static constexpr uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n \n /**\n  * Process an incoming block. This only returns after the best known valid"
      },
      {
        "sha": "5490af5fdb26edbdf6b43d79949be24a7f99fae7",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -9,37 +9,37 @@\n  * network protocol versioning\n  */\n \n-static const int PROTOCOL_VERSION = 70015;\n+static constexpr int PROTOCOL_VERSION = 70015;\n \n //! initial proto version, to be increased after version/verack negotiation\n-static const int INIT_PROTO_VERSION = 209;\n+static constexpr int INIT_PROTO_VERSION = 209;\n \n //! In this version, 'getheaders' was introduced.\n-static const int GETHEADERS_VERSION = 31800;\n+static constexpr int GETHEADERS_VERSION = 31800;\n \n //! disconnect from peers older than this proto version\n-static const int MIN_PEER_PROTO_VERSION = GETHEADERS_VERSION;\n+static constexpr int MIN_PEER_PROTO_VERSION = GETHEADERS_VERSION;\n \n //! nTime field added to CAddress, starting with this version;\n //! if possible, avoid requesting addresses nodes older than this\n-static const int CADDR_TIME_VERSION = 31402;\n+static constexpr int CADDR_TIME_VERSION = 31402;\n \n //! BIP 0031, pong message, is enabled for all versions AFTER this one\n-static const int BIP0031_VERSION = 60000;\n+static constexpr int BIP0031_VERSION = 60000;\n \n //! \"filter*\" commands are disabled without NODE_BLOOM after and including this version\n-static const int NO_BLOOM_VERSION = 70011;\n+static constexpr int NO_BLOOM_VERSION = 70011;\n \n //! \"sendheaders\" command and announcing blocks with headers starts with this version\n-static const int SENDHEADERS_VERSION = 70012;\n+static constexpr int SENDHEADERS_VERSION = 70012;\n \n //! \"feefilter\" tells peers to filter invs to you by fee starts with this version\n-static const int FEEFILTER_VERSION = 70013;\n+static constexpr int FEEFILTER_VERSION = 70013;\n \n //! short-id-based block download starts with this version\n-static const int SHORT_IDS_BLOCKS_VERSION = 70014;\n+static constexpr int SHORT_IDS_BLOCKS_VERSION = 70014;\n \n //! not banning for invalid compact blocks starts with this version\n-static const int INVALID_CB_NO_BAN_VERSION = 70015;\n+static constexpr int INVALID_CB_NO_BAN_VERSION = 70015;\n \n #endif // BITCOIN_VERSION_H"
      },
      {
        "sha": "9a5318953844da73e4a3b53ed382824f843c338b",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -9,13 +9,13 @@\n #include <map>\n \n /** What block version to use for new blocks (pre versionbits) */\n-static const int32_t VERSIONBITS_LAST_OLD_BLOCK_VERSION = 4;\n+static constexpr int32_t VERSIONBITS_LAST_OLD_BLOCK_VERSION = 4;\n /** What bits to set in version for versionbits blocks */\n-static const int32_t VERSIONBITS_TOP_BITS = 0x20000000UL;\n+static constexpr int32_t VERSIONBITS_TOP_BITS = 0x20000000UL;\n /** What bitmask determines whether versionbits is in use */\n-static const int32_t VERSIONBITS_TOP_MASK = 0xE0000000UL;\n+static constexpr int32_t VERSIONBITS_TOP_MASK = 0xE0000000UL;\n /** Total bits available for versionbits */\n-static const int32_t VERSIONBITS_NUM_BITS = 29;\n+static constexpr int32_t VERSIONBITS_NUM_BITS = 29;\n \n enum class ThresholdState {\n     DEFINED,"
      },
      {
        "sha": "9ebfe1e1da6ed00c4b4124ddae0e99769e49de83",
        "filename": "src/zmq/zmqpublishnotifier.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/zmq/zmqpublishnotifier.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a110fed3ab8c858b8ebf7a15ca61529ae344c4f9/src/zmq/zmqpublishnotifier.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqpublishnotifier.cpp?ref=a110fed3ab8c858b8ebf7a15ca61529ae344c4f9",
        "patch": "@@ -12,10 +12,10 @@\n \n static std::multimap<std::string, CZMQAbstractPublishNotifier*> mapPublishNotifiers;\n \n-static const char *MSG_HASHBLOCK = \"hashblock\";\n-static const char *MSG_HASHTX    = \"hashtx\";\n-static const char *MSG_RAWBLOCK  = \"rawblock\";\n-static const char *MSG_RAWTX     = \"rawtx\";\n+static constexpr const char *MSG_HASHBLOCK = \"hashblock\";\n+static constexpr const char *MSG_HASHTX    = \"hashtx\";\n+static constexpr const char *MSG_RAWBLOCK  = \"rawblock\";\n+static constexpr const char *MSG_RAWTX     = \"rawtx\";\n \n // Internal function to send multipart message\n static int zmq_send_multipart(void *sock, const void* data, size_t size, ...)"
      }
    ]
  }
]