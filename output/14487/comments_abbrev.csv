achow101,2018-10-15T17:30:47Z,"Could you add some rationale as to why this is necessary? Code style changes need to significantly improve the developer experience and avoid serious programming bugs. I do not see how this change does either of those things, so NACK",https://github.com/bitcoin/bitcoin/pull/14487#issuecomment-429943132,429943132,
JeremyRubin,2018-10-16T00:19:04Z,Concept Ack -- making these constexpr allows us to add more static_asserts (and similar things) about relationships between constants.,https://github.com/bitcoin/bitcoin/pull/14487#issuecomment-430057954,430057954,
practicalswift,2018-10-16T14:58:04Z,"@JeremyRubin We can already use `static_assert(…)`:s on the integer constants – we don't need `constexpr` for that :-)\n\n```\n[cling]$ const int i = 0;\n[cling]$ static_assert(i == 0, """");\n[cling]$ int j = 0;\n[cling]$ static_assert(j == 0, """");\nerror: static_assert expression is not an integral constant expression\n```",https://github.com/bitcoin/bitcoin/pull/14487#issuecomment-430271172,430271172,
JeremyRubin,2018-10-16T23:09:22Z,"@practicalswift I think that is compiler dependent?\n\nIn any case, you also want to have relations be defined (e.g., constexpr functions).",https://github.com/bitcoin/bitcoin/pull/14487#issuecomment-430432577,430432577,
practicalswift,2018-10-17T06:25:56Z,"@JeremyRubin \n\nActually I think it follows directly from the C++11 standard that we can use `static_assert(…)`:s on integer constants also in the absence of `constexpr` specifier:\n\nThe syntax is ...\n\n```\nstatic_assert(bool_constexpr, message)\n```\n\n... where `bool_constexpr` is contextually converted constant expression of type `bool`.\n\nWhat is a ""contextually converted cons",https://github.com/bitcoin/bitcoin/pull/14487#issuecomment-430504944,430504944,
fanquake,2018-10-19T02:49:40Z,@DesWurstes can you fix up the whitespace issues (and squash your fixup commits) so the tests will run,https://github.com/bitcoin/bitcoin/pull/14487#issuecomment-431228254,431228254,
DrahtBot,2018-10-20T11:03:31Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14733](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14733.html) (P2P: Allow peer timeout to be configurable ",https://github.com/bitcoin/bitcoin/pull/14487#issuecomment-431570634,431570634,
DesWurstes,2018-11-16T07:08:52Z,I understand that it is controversial to constexpr the constants as it's not a part of the code style. Should I open a separate Pull Request that replaces constexprs with consts?,https://github.com/bitcoin/bitcoin/pull/14487#issuecomment-439302331,439302331,
practicalswift,2018-11-16T07:54:33Z,"@DesWurstes AFAIK there are no problems with `constexpr` from a code style perspective: I would say that we prefer `contexpr`:s for constants in new code. Have you gotten any contradicting information? :-)\n\nRegarding this PR I think any objections would be based on the code churn vs benefit trade-off.",https://github.com/bitcoin/bitcoin/pull/14487#issuecomment-439310868,439310868,
laanwj,2018-11-23T09:58:19Z,">I would say that we prefer contexpr:s for constants in new code\n\nThere's no mention of that. Before doing this, the developer notes need to be updated *when* to use `constexpr` and when `const`, along with the rationale. Not everyone is sufficiently up to date with C++11 to know this—is it *always* better to use constexpr? and if so, why does `const` still exist?\n\nThe word `constexpr` doe",https://github.com/bitcoin/bitcoin/pull/14487#issuecomment-441197662,441197662,
MarcoFalke,2018-11-28T16:12:15Z,"There hasn't been a follow-up to address the feedback (Document the new guideline in the developer notes), so I am closing this for now. Please let me know when you start working on this again, so I can reopen.",https://github.com/bitcoin/bitcoin/pull/14487#issuecomment-442504691,442504691,
practicalswift,2018-10-16T07:09:03Z,"Starting with C++11 this conversion is no longer allowed (string literal to `char *const`).\n\nThe intention was probably to make it `static constexpr const char *MSG_HASHBLOCK` or `static constexpr const char MSG_HASHBLOCK[] `? :-)\n\n```\n[cling]$ static const char * MSG_HASHBLOCK_0 = ""hashblock""\n(const char *) ""hashblock""\n[cling]$ static constexpr char *MSG_HASHBLOCK_1 = ""hashblock""\n",https://github.com/bitcoin/bitcoin/pull/14487#discussion_r225419743,225419743,src/zmq/zmqpublishnotifier.cpp
practicalswift,2018-10-16T13:02:49Z,I'm sure Satoshi loves `constexpr` – but this is taking it too far :-),https://github.com/bitcoin/bitcoin/pull/14487#discussion_r225528501,225528501,src/validation.h
DesWurstes,2018-10-16T14:00:23Z,"Thirty minutes before I submitted this Pull Request, I submitted [that](https://github.com/bitcoin/bitcoin/pull/14486) pull request. Maybe I should add it to that one?",https://github.com/bitcoin/bitcoin/pull/14487#discussion_r225552205,225552205,src/zmq/zmqpublishnotifier.cpp
practicalswift,2018-10-16T14:32:24Z,"@DesWurstes I think you might have misunderstood my comment.\n\nMy point was that simply replacing `const` with `constexpr` for `MSG_HASHBLOCK` does not give the result you want to achieve in this case :-)\n\nMore specifically you don't get a read-only string.\n\nWhat you have in `master`:\n\n```\n[cling]$ static const char *MSG_HASHBLOCK = ""hashblock"";\n[cling]$ static_assert(MSG_HASHBL",https://github.com/bitcoin/bitcoin/pull/14487#discussion_r225566102,225566102,src/zmq/zmqpublishnotifier.cpp
