[
  {
    "sha": "0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYWFkYzExZmQ4OGIyOThjN2FmMmRmYjY5NzYzYjJjNjdkYzZiN2Iw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-07T07:54:42Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-07T17:45:31Z"
      },
      "message": "Avoid dereference-of-casted-pointer",
      "tree": {
        "sha": "02bb833749f472a916c9ff5f585af9e94b5326b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/02bb833749f472a916c9ff5f585af9e94b5326b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5af6572534986bf85f6806e2cc66c1f1f8e3c56c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5af6572534986bf85f6806e2cc66c1f1f8e3c56c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5af6572534986bf85f6806e2cc66c1f1f8e3c56c"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 26,
      "deletions": 18
    },
    "files": [
      {
        "sha": "f038e7b15487471566295dce78d24a6f903c83ab",
        "filename": "src/core_memusage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/core_memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/core_memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_memusage.h?ref=0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0",
        "patch": "@@ -10,7 +10,7 @@\n #include \"memusage.h\"\n \n static inline size_t RecursiveDynamicUsage(const CScript& script) {\n-    return memusage::DynamicUsage(*static_cast<const CScriptBase*>(&script));\n+    return memusage::DynamicUsage(script);\n }\n \n static inline size_t RecursiveDynamicUsage(const COutPoint& out) {"
      },
      {
        "sha": "f1b5e59373aeb58c8c3acb8e288c8c9830b7a220",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0",
        "patch": "@@ -107,7 +107,7 @@ class CTxIn\n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(prevout);\n-        READWRITE(*(CScriptBase*)(&scriptSig));\n+        READWRITE(scriptSig);\n         READWRITE(nSequence);\n     }\n \n@@ -147,7 +147,7 @@ class CTxOut\n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(nValue);\n-        READWRITE(*(CScriptBase*)(&scriptPubKey));\n+        READWRITE(scriptPubKey);\n     }\n \n     void SetNull()"
      },
      {
        "sha": "6178a1c7ab1c44447f4e8f90e7e09918b8affe86",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0",
        "patch": "@@ -798,7 +798,7 @@ static void ApplyStats(CCoinsStats &stats, CHashWriter& ss, const uint256& hash,\n     stats.nTransactions++;\n     for (const auto output : outputs) {\n         ss << VARINT(output.first + 1);\n-        ss << *(const CScriptBase*)(&output.second.out.scriptPubKey);\n+        ss << output.second.out.scriptPubKey;\n         ss << VARINT(output.second.out.nValue);\n         stats.nTransactionOutputs++;\n         stats.nTotalAmount += output.second.out.nValue;"
      },
      {
        "sha": "8a121774a040e7ef3a2359c805e4e0fd3513a3fd",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0",
        "patch": "@@ -1099,7 +1099,7 @@ class CTransactionSignatureSerializer {\n         // Serialize the script\n         if (nInput != nIn)\n             // Blank out other inputs' signatures\n-            ::Serialize(s, CScriptBase());\n+            ::Serialize(s, CScript());\n         else\n             SerializeScriptCode(s);\n         // Serialize the nSequence\n@@ -1207,7 +1207,7 @@ uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsig\n         // The prevout may already be contained in hashPrevout, and the nSequence\n         // may already be contain in hashSequence.\n         ss << txTo.vin[nIn].prevout;\n-        ss << static_cast<const CScriptBase&>(scriptCode);\n+        ss << scriptCode;\n         ss << amount;\n         ss << txTo.vin[nIn].nSequence;\n         // Outputs (none/one/all, depending on flags)"
      },
      {
        "sha": "d16bfd0e00eaa8868e299d728f72f68ef649f936",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0",
        "patch": "@@ -8,6 +8,7 @@\n \n #include \"crypto/common.h\"\n #include \"prevector.h\"\n+#include \"serialize.h\"\n \n #include <assert.h>\n #include <climits>\n@@ -404,6 +405,13 @@ class CScript : public CScriptBase\n     CScript(std::vector<unsigned char>::const_iterator pbegin, std::vector<unsigned char>::const_iterator pend) : CScriptBase(pbegin, pend) { }\n     CScript(const unsigned char* pbegin, const unsigned char* pend) : CScriptBase(pbegin, pend) { }\n \n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(static_cast<CScriptBase&>(*this));\n+    }\n+\n     CScript& operator+=(const CScript& b)\n     {\n         insert(end(), b.begin(), b.end());"
      },
      {
        "sha": "093509e61c563cf98223869d4442f117fa6e907f",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0",
        "patch": "@@ -95,7 +95,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n         uint256 in2 = InsecureRand256();\n         BOOST_CHECK(dbw.Write(key2, in2));\n \n-        std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper*>(&dbw)->NewIterator());\n+        std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper&>(dbw).NewIterator());\n \n         // Be sure to seek past the obfuscation key (if it exists)\n         it->Seek(key);\n@@ -210,7 +210,7 @@ BOOST_AUTO_TEST_CASE(iterator_ordering)\n         BOOST_CHECK(dbw.Write(key, value));\n     }\n \n-    std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper*>(&dbw)->NewIterator());\n+    std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper&>(dbw).NewIterator());\n     for (int c=0; c<2; ++c) {\n         int seek_start;\n         if (c == 0)\n@@ -286,7 +286,7 @@ BOOST_AUTO_TEST_CASE(iterator_string_ordering)\n         }\n     }\n \n-    std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper*>(&dbw)->NewIterator());\n+    std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper&>(dbw).NewIterator());\n     for (int c=0; c<2; ++c) {\n         int seek_start;\n         if (c == 0)"
      },
      {
        "sha": "aa0b73a41748badb54dd84c8d795681909864924",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0",
        "patch": "@@ -172,7 +172,7 @@ bool CBlockTreeDB::ReadLastBlockFile(int &nFile) {\n \n CCoinsViewCursor *CCoinsViewDB::Cursor() const\n {\n-    CCoinsViewDBCursor *i = new CCoinsViewDBCursor(const_cast<CDBWrapper*>(&db)->NewIterator(), GetBestBlock());\n+    CCoinsViewDBCursor *i = new CCoinsViewDBCursor(const_cast<CDBWrapper&>(db).NewIterator(), GetBestBlock());\n     /* It seems that there are no \"const iterators\" for LevelDB.  Since we\n        only need read operations on it, use a const-cast to get around\n        that restriction.  */"
      },
      {
        "sha": "d2072f6e79580263f81ecf47b0860513a3806a8c",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=0aadc11fd88b298c7af2dfb69763b2c67dc6b7b0",
        "patch": "@@ -94,23 +94,23 @@ bool CWalletDB::WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey)\n \n bool CWalletDB::WriteCScript(const uint160& hash, const CScript& redeemScript)\n {\n-    return WriteIC(std::make_pair(std::string(\"cscript\"), hash), *(const CScriptBase*)(&redeemScript), false);\n+    return WriteIC(std::make_pair(std::string(\"cscript\"), hash), redeemScript, false);\n }\n \n bool CWalletDB::WriteWatchOnly(const CScript &dest, const CKeyMetadata& keyMeta)\n {\n-    if (!WriteIC(std::make_pair(std::string(\"watchmeta\"), *(const CScriptBase*)(&dest)), keyMeta)) {\n+    if (!WriteIC(std::make_pair(std::string(\"watchmeta\"), dest), keyMeta)) {\n         return false;\n     }\n-    return WriteIC(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)), '1');\n+    return WriteIC(std::make_pair(std::string(\"watchs\"), dest), '1');\n }\n \n bool CWalletDB::EraseWatchOnly(const CScript &dest)\n {\n-    if (!EraseIC(std::make_pair(std::string(\"watchmeta\"), *(const CScriptBase*)(&dest)))) {\n+    if (!EraseIC(std::make_pair(std::string(\"watchmeta\"), dest))) {\n         return false;\n     }\n-    return EraseIC(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)));\n+    return EraseIC(std::make_pair(std::string(\"watchs\"), dest));\n }\n \n bool CWalletDB::WriteBestBlock(const CBlockLocator& locator)\n@@ -323,7 +323,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         {\n             wss.nWatchKeys++;\n             CScript script;\n-            ssKey >> *(CScriptBase*)(&script);\n+            ssKey >> script;\n             char fYes;\n             ssValue >> fYes;\n             if (fYes == '1')\n@@ -440,7 +440,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             else if (strType == \"watchmeta\")\n             {\n               CScript script;\n-              ssKey >> *(CScriptBase*)(&script);\n+              ssKey >> script;\n               keyID = CScriptID(script);\n             }\n \n@@ -474,7 +474,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             uint160 hash;\n             ssKey >> hash;\n             CScript script;\n-            ssValue >> *(CScriptBase*)(&script);\n+            ssValue >> script;\n             if (!pwallet->LoadCScript(script))\n             {\n                 strErr = \"Error reading wallet database: LoadCScript failed\";"
      }
    ]
  }
]