[
  {
    "sha": "3239b85be25de70cbef69c91d126e602efde5a1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjM5Yjg1YmUyNWRlNzBjYmVmNjljOTFkMTI2ZTYwMmVmZGU1YTFh",
    "commit": {
      "author": {
        "name": "Ryan Havar",
        "email": "ryan@moneypot.com",
        "date": "2015-09-07T23:12:25Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-18T12:31:54Z"
      },
      "message": "Default fPayAtLeastCustomFee to false\n\nThis allows for much finer control of the transaction fees per kilobyte\nas it prevent small transactions using a fee that is more appropriate\nfor one that is of a kilobyte.\n\nThis also allows controlling the fee per kilobyte over rpc such that:\n\nbitcoin-cli settxfee `bitcoin-cli estimatefee 2`\n\nwould make sense, while currently it grossly fails often by a factor of x3",
      "tree": {
        "sha": "7fd64893efb56ea52e0de3c31b7730e9ccb5c08e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7fd64893efb56ea52e0de3c31b7730e9ccb5c08e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3239b85be25de70cbef69c91d126e602efde5a1a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3239b85be25de70cbef69c91d126e602efde5a1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3239b85be25de70cbef69c91d126e602efde5a1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3239b85be25de70cbef69c91d126e602efde5a1a/comments",
    "author": null,
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eac53ec992018a14db6f8a65a7ce333a4c8284cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eac53ec992018a14db6f8a65a7ce333a4c8284cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eac53ec992018a14db6f8a65a7ce333a4c8284cc"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "74a36b96188e61f60bd3a90a9261211494324d6f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3239b85be25de70cbef69c91d126e602efde5a1a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3239b85be25de70cbef69c91d126e602efde5a1a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3239b85be25de70cbef69c91d126e602efde5a1a",
        "patch": "@@ -41,7 +41,7 @@ CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n unsigned int nTxConfirmTarget = DEFAULT_TX_CONFIRM_TARGET;\n bool bSpendZeroConfChange = true;\n bool fSendFreeTransactions = false;\n-bool fPayAtLeastCustomFee = true;\n+bool fPayAtLeastCustomFee = false;\n \n /**\n  * Fees smaller than this (in satoshi) are considered zero fee (for transaction creation)"
      }
    ]
  },
  {
    "sha": "4db5df774a3dab2caf76d3cd86feb8e938b1b652",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZGI1ZGY3NzRhM2RhYjJjYWY3NmQzY2Q4NmZlYjhlOTM4YjFiNjUy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-09-14T15:34:11Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-18T12:31:54Z"
      },
      "message": "[trivial] rpcwallet: Clarify what settxfee does",
      "tree": {
        "sha": "300cd34ad441b9a4bc5c8d09e2e395b848edc972",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/300cd34ad441b9a4bc5c8d09e2e395b848edc972"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4db5df774a3dab2caf76d3cd86feb8e938b1b652",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4db5df774a3dab2caf76d3cd86feb8e938b1b652",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4db5df774a3dab2caf76d3cd86feb8e938b1b652",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4db5df774a3dab2caf76d3cd86feb8e938b1b652/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3239b85be25de70cbef69c91d126e602efde5a1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3239b85be25de70cbef69c91d126e602efde5a1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3239b85be25de70cbef69c91d126e602efde5a1a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cc782c466c588295ff8be721513679736a905f88",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4db5df774a3dab2caf76d3cd86feb8e938b1b652/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4db5df774a3dab2caf76d3cd86feb8e938b1b652/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=4db5df774a3dab2caf76d3cd86feb8e938b1b652",
        "patch": "@@ -2175,7 +2175,7 @@ UniValue settxfee(const UniValue& params, bool fHelp)\n     if (fHelp || params.size() < 1 || params.size() > 1)\n         throw runtime_error(\n             \"settxfee amount\\n\"\n-            \"\\nSet the transaction fee per kB.\\n\"\n+            \"\\nSet the transaction fee per kB. (Overwrites the paytxfee parameter)\\n\"\n             \"\\nArguments:\\n\"\n             \"1. amount         (numeric, required) The transaction fee in \" + CURRENCY_UNIT + \"/kB rounded to the nearest 0.00000001\\n\"\n             \"\\nResult\\n\""
      }
    ]
  },
  {
    "sha": "85c9d9037426a3d93507b47da6cb13d94716019f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NWM5ZDkwMzc0MjZhM2Q5MzUwN2I0N2RhNmNiMTNkOTQ3MTYwMTlm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-09-21T10:46:50Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-18T12:31:54Z"
      },
      "message": "[wallet] Add rpc tests to verify fee calculations",
      "tree": {
        "sha": "8100006d57fc7f1c56d431412e5581cb8775210c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8100006d57fc7f1c56d431412e5581cb8775210c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85c9d9037426a3d93507b47da6cb13d94716019f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85c9d9037426a3d93507b47da6cb13d94716019f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/85c9d9037426a3d93507b47da6cb13d94716019f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85c9d9037426a3d93507b47da6cb13d94716019f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4db5df774a3dab2caf76d3cd86feb8e938b1b652",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4db5df774a3dab2caf76d3cd86feb8e938b1b652",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4db5df774a3dab2caf76d3cd86feb8e938b1b652"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 34,
      "deletions": 16
    },
    "files": [
      {
        "sha": "d9d5129f210399d88735d805d8451de08a262942",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85c9d9037426a3d93507b47da6cb13d94716019f/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85c9d9037426a3d93507b47da6cb13d94716019f/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=85c9d9037426a3d93507b47da6cb13d94716019f",
        "patch": "@@ -67,6 +67,9 @@ def check_json_precision():\n     if satoshis != 2000000000000003:\n         raise RuntimeError(\"JSON encode/decode loses precision\")\n \n+def count_bytes(hex_string):\n+    return len(bytearray.fromhex(hex_string))\n+\n def sync_blocks(rpc_connections, wait=1):\n     \"\"\"\n     Wait until everybody has the same block count"
      },
      {
        "sha": "1b8f716907892059658b236230b7e112d63b1f85",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 31,
        "deletions": 16,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85c9d9037426a3d93507b47da6cb13d94716019f/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85c9d9037426a3d93507b47da6cb13d94716019f/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=85c9d9037426a3d93507b47da6cb13d94716019f",
        "patch": "@@ -24,6 +24,17 @@\n \n class WalletTest (BitcoinTestFramework):\n \n+    def check_amount(self, curr_balance, prev_balance, fee_per_byte, tx_size):\n+        \"\"\"Return curr_balance after asserting the fee was in range\"\"\"\n+        actual_fee = prev_balance - curr_balance\n+        target_fee = fee_per_byte * tx_size\n+        if actual_fee < target_fee:\n+            raise AssertionError(\"Fee of %s BTC too low! (Should be %s BTC)\"%(str(actual_fee), str(target_fee)))\n+        # allow the node's estimation to be at most 2 bytes off\n+        if actual_fee > fee_per_byte * (tx_size + 2):\n+            raise AssertionError(\"Fee of %s BTC too high! (Should be %s BTC)\"%(str(actual_fee), str(target_fee)))\n+        return curr_balance\n+\n     def setup_chain(self):\n         print(\"Initializing test directory \"+self.options.tmpdir)\n         initialize_chain_clean(self.options.tmpdir, 4)\n@@ -104,33 +115,37 @@ def run_test (self):\n \n         # Send 10 BTC normal\n         address = self.nodes[0].getnewaddress(\"test\")\n-        self.nodes[2].settxfee(Decimal('0.001'))\n+        fee_per_byte = Decimal('0.001') / 1000\n+        self.nodes[2].settxfee(fee_per_byte * 1000)\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", False)\n         self.nodes[2].generate(1)\n         self.sync_all()\n-        assert_equal(self.nodes[2].getbalance(), Decimal('89.99900000'))\n-        assert_equal(self.nodes[0].getbalance(), Decimal('10.00000000'))\n+        node_2_bal = self.check_amount(self.nodes[2].getbalance(), Decimal('90'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n+        assert_equal(self.nodes[0].getbalance(), Decimal('10'))\n \n         # Send 10 BTC with subtract fee from amount\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", True)\n         self.nodes[2].generate(1)\n         self.sync_all()\n-        assert_equal(self.nodes[2].getbalance(), Decimal('79.99900000'))\n-        assert_equal(self.nodes[0].getbalance(), Decimal('19.99900000'))\n+        node_2_bal -= Decimal('10')\n+        assert_equal(self.nodes[2].getbalance(), node_2_bal)\n+        node_0_bal = self.check_amount(self.nodes[0].getbalance(), Decimal('20'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n \n         # Sendmany 10 BTC\n         txid = self.nodes[2].sendmany('from1', {address: 10}, 0, \"\", [])\n         self.nodes[2].generate(1)\n         self.sync_all()\n-        assert_equal(self.nodes[2].getbalance(), Decimal('69.99800000'))\n-        assert_equal(self.nodes[0].getbalance(), Decimal('29.99900000'))\n+        node_0_bal += Decimal('10')\n+        node_2_bal = self.check_amount(self.nodes[2].getbalance(), node_2_bal - Decimal('10'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n+        assert_equal(self.nodes[0].getbalance(), node_0_bal)\n \n         # Sendmany 10 BTC with subtract fee from amount\n         txid = self.nodes[2].sendmany('from1', {address: 10}, 0, \"\", [address])\n         self.nodes[2].generate(1)\n         self.sync_all()\n-        assert_equal(self.nodes[2].getbalance(), Decimal('59.99800000'))\n-        assert_equal(self.nodes[0].getbalance(), Decimal('39.99800000'))\n+        node_2_bal -= Decimal('10')\n+        assert_equal(self.nodes[2].getbalance(), node_2_bal)\n+        node_0_bal = self.check_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n \n         # Test ResendWalletTransactions:\n         # Create a couple of transactions, then start up a fourth\n@@ -175,7 +190,7 @@ def run_test (self):\n         for uTx in unspentTxs:\n             if uTx['txid'] == zeroValueTxid:\n                 found = True\n-                assert_equal(uTx['amount'], Decimal('0.00000000'));\n+                assert_equal(uTx['amount'], Decimal('0'));\n         assert(found)\n \n         #do some -walletbroadcast tests\n@@ -191,14 +206,14 @@ def run_test (self):\n         txObjNotBroadcasted = self.nodes[0].gettransaction(txIdNotBroadcasted)\n         self.nodes[1].generate(1) #mine a block, tx should not be in there\n         self.sync_all()\n-        assert_equal(self.nodes[2].getbalance(), Decimal('59.99800000')); #should not be changed because tx was not broadcasted\n+        assert_equal(self.nodes[2].getbalance(), node_2_bal); #should not be changed because tx was not broadcasted\n \n         #now broadcast from another node, mine a block, sync, and check the balance\n         self.nodes[1].sendrawtransaction(txObjNotBroadcasted['hex'])\n         self.nodes[1].generate(1)\n         self.sync_all()\n         txObjNotBroadcasted = self.nodes[0].gettransaction(txIdNotBroadcasted)\n-        assert_equal(self.nodes[2].getbalance(), Decimal('61.99800000')); #should not be\n+        assert_equal(self.nodes[2].getbalance(), node_2_bal + Decimal('2')); #should not be\n \n         #create another tx\n         txIdNotBroadcasted  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 2);\n@@ -216,21 +231,21 @@ def run_test (self):\n         sync_blocks(self.nodes)\n \n         #tx should be added to balance because after restarting the nodes tx should be broadcastet\n-        assert_equal(self.nodes[2].getbalance(), Decimal('63.99800000')); #should not be\n+        assert_equal(self.nodes[2].getbalance(), node_2_bal + Decimal('4')); #should not be\n \n         #send a tx with value in a string (PR#6380 +)\n         txId  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), \"2\")\n         txObj = self.nodes[0].gettransaction(txId)\n-        assert_equal(txObj['amount'], Decimal('-2.00000000'))\n+        assert_equal(txObj['amount'], Decimal('-2'))\n \n         txId  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), \"0.0001\")\n         txObj = self.nodes[0].gettransaction(txId)\n-        assert_equal(txObj['amount'], Decimal('-0.00010000'))\n+        assert_equal(txObj['amount'], Decimal('-0.0001'))\n \n         #check if JSON parser can handle scientific notation in strings\n         txId  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), \"1e-4\")\n         txObj = self.nodes[0].gettransaction(txId)\n-        assert_equal(txObj['amount'], Decimal('-0.00010000'))\n+        assert_equal(txObj['amount'], Decimal('-0.0001'))\n \n         #this should fail\n         errorString = \"\""
      }
    ]
  },
  {
    "sha": "66b670d04942729c692aa7677ce77d8879b6b193",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NmI2NzBkMDQ5NDI3MjljNjkyYWE3Njc3Y2U3N2Q4ODc5YjZiMTkz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-20T09:28:51Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-18T12:33:03Z"
      },
      "message": "[wallet] Introduce -payatleastcustomfee",
      "tree": {
        "sha": "0b0127e13669b6fa58626bf2984a4b6e6b701937",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b0127e13669b6fa58626bf2984a4b6e6b701937"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66b670d04942729c692aa7677ce77d8879b6b193",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66b670d04942729c692aa7677ce77d8879b6b193",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/66b670d04942729c692aa7677ce77d8879b6b193",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66b670d04942729c692aa7677ce77d8879b6b193/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "85c9d9037426a3d93507b47da6cb13d94716019f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85c9d9037426a3d93507b47da6cb13d94716019f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/85c9d9037426a3d93507b47da6cb13d94716019f"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a15f3445f2caa4c2dce329cb1a55fff003c8c7f8",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66b670d04942729c692aa7677ce77d8879b6b193/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66b670d04942729c692aa7677ce77d8879b6b193/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=66b670d04942729c692aa7677ce77d8879b6b193",
        "patch": "@@ -391,6 +391,8 @@ std::string HelpMessage(HelpMessageMode mode)\n             CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)));\n     strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(payTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-payatleastcustomfee\", strprintf(_(\"Pay the fee set by paytxfee or settxfee considering at least 1000 bytes or the actual transaction size, whichever is higher (default: %u)\"),\n+        fPayAtLeastCustomFee));\n     strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions on startup\"));\n     strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet.dat on startup\"));\n     strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0));\n@@ -974,6 +976,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     bSpendZeroConfChange = GetBoolArg(\"-spendzeroconfchange\", true);\n     fSendFreeTransactions = GetBoolArg(\"-sendfreetransactions\", false);\n \n+    fPayAtLeastCustomFee = GetBoolArg(\"-payatleastcustomfee\", fPayAtLeastCustomFee);\n+\n     std::string strWalletFile = GetArg(\"-wallet\", \"wallet.dat\");\n #endif // ENABLE_WALLET\n "
      }
    ]
  },
  {
    "sha": "a567e15106e69ac2cd577e8a01ad6ebff673e8d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTY3ZTE1MTA2ZTY5YWMyY2Q1NzdlOGEwMWFkNmViZmY2NzNlOGQ5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-19T13:12:25Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-19T13:12:25Z"
      },
      "message": "fixup! [trivial] Bike shed variable names",
      "tree": {
        "sha": "2613c29780ec187cb09145bc4dbbb6070c22c12e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2613c29780ec187cb09145bc4dbbb6070c22c12e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a567e15106e69ac2cd577e8a01ad6ebff673e8d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a567e15106e69ac2cd577e8a01ad6ebff673e8d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a567e15106e69ac2cd577e8a01ad6ebff673e8d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a567e15106e69ac2cd577e8a01ad6ebff673e8d9/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66b670d04942729c692aa7677ce77d8879b6b193",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66b670d04942729c692aa7677ce77d8879b6b193",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66b670d04942729c692aa7677ce77d8879b6b193"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "bcec6c383dabf3d7cd7b04722c7be9a6bd6f0809",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a567e15106e69ac2cd577e8a01ad6ebff673e8d9/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a567e15106e69ac2cd577e8a01ad6ebff673e8d9/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=a567e15106e69ac2cd577e8a01ad6ebff673e8d9",
        "patch": "@@ -24,15 +24,15 @@\n \n class WalletTest (BitcoinTestFramework):\n \n-    def check_amount(self, curr_balance, prev_balance, fee_per_byte, tx_size):\n+    def check_fee_amount(self, curr_balance, balance_with_fee, fee_per_byte, tx_size):\n         \"\"\"Return curr_balance after asserting the fee was in range\"\"\"\n-        actual_fee = prev_balance - curr_balance\n+        fee = balance_with_fee - curr_balance\n         target_fee = fee_per_byte * tx_size\n-        if actual_fee < target_fee:\n-            raise AssertionError(\"Fee of %s BTC too low! (Should be %s BTC)\"%(str(actual_fee), str(target_fee)))\n+        if fee < target_fee:\n+            raise AssertionError(\"Fee of %s BTC too low! (Should be %s BTC)\"%(str(fee), str(target_fee)))\n         # allow the node's estimation to be at most 2 bytes off\n-        if actual_fee > fee_per_byte * (tx_size + 2):\n-            raise AssertionError(\"Fee of %s BTC too high! (Should be %s BTC)\"%(str(actual_fee), str(target_fee)))\n+        if fee > fee_per_byte * (tx_size + 2):\n+            raise AssertionError(\"Fee of %s BTC too high! (Should be %s BTC)\"%(str(fee), str(target_fee)))\n         return curr_balance\n \n     def setup_chain(self):\n@@ -120,7 +120,7 @@ def run_test (self):\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", False)\n         self.nodes[2].generate(1)\n         self.sync_all()\n-        node_2_bal = self.check_amount(self.nodes[2].getbalance(), Decimal('90'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n+        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), Decimal('90'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n         assert_equal(self.nodes[0].getbalance(), Decimal('10'))\n \n         # Send 10 BTC with subtract fee from amount\n@@ -129,14 +129,14 @@ def run_test (self):\n         self.sync_all()\n         node_2_bal -= Decimal('10')\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n-        node_0_bal = self.check_amount(self.nodes[0].getbalance(), Decimal('20'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n+        node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), Decimal('20'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n \n         # Sendmany 10 BTC\n         txid = self.nodes[2].sendmany('from1', {address: 10}, 0, \"\", [])\n         self.nodes[2].generate(1)\n         self.sync_all()\n         node_0_bal += Decimal('10')\n-        node_2_bal = self.check_amount(self.nodes[2].getbalance(), node_2_bal - Decimal('10'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n+        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), node_2_bal - Decimal('10'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n         assert_equal(self.nodes[0].getbalance(), node_0_bal)\n \n         # Sendmany 10 BTC with subtract fee from amount\n@@ -145,7 +145,7 @@ def run_test (self):\n         self.sync_all()\n         node_2_bal -= Decimal('10')\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n-        node_0_bal = self.check_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n+        node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n \n         # Test ResendWalletTransactions:\n         # Create a couple of transactions, then start up a fourth"
      }
    ]
  }
]