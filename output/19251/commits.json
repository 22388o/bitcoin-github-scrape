[
  {
    "sha": "f8213c05f087e5fbb5d92a291f766b0baebc798f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODIxM2MwNWYwODdlNWZiYjVkOTJhMjkxZjc2NmIwYmFlYmM3OThm",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-09T13:50:45Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-11T12:49:39Z"
      },
      "message": "Add means to handle negative capabilities in thread safety annotations",
      "tree": {
        "sha": "37ef4f10f4c84aca2cec499bb1b268c493a2239b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37ef4f10f4c84aca2cec499bb1b268c493a2239b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8213c05f087e5fbb5d92a291f766b0baebc798f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl7iKGUACgkQQQEIES5+\nqB9kaQ/9E84HU/XoadPx5q+Iqn8JTG3qHuHbHzr6Tkyz4E7rHyUtKn81JAhMADeA\nWg8L0d+ydF9XeMErg3SGDMSHVOMoPlcV9oZ/peZyN0KeEsY+pcKSSBq9iyNhdOeH\npvPgod3vv3LJklOVvenUvXJnnKxm+UEpGOUUsTS1lUTQOLpmKRus3S6JWd5glhbP\nkuT4sPUxw+JiwExlcOnWc3XHFEs26gDKkDeFQdwXwPovETEcS9T6e/INtqY8NhQs\nvRCD5O4/zGBPZaertkQJbmD8yL9TrlCt4WZ5clgmJGABiXTiD5JBt2005XUluWrM\nvuKK7HVcT+ZKa/4+zRJGo89KmzH0ba31RuaVF3t2RzSKkxyz9eXvQkA0O/bCi2e4\nV8QHXiHjXW3Gi1JcY61vn8NMrGATVamSHFUnL39GE/G9h3NZUNP5Mc9lMpdFdKQw\nh8MBVVkFNlfnDlN82L79LqoxttnRk3TyDtTkqpaWhHjkQ+e3xxyiIYEjYAmsB4Vn\n3Tp91YNeUirDmQvPU5Ww0xjBas9Ak9Tv5A5fe2m97WP9D/4/PfUUJ6MxoWmF5Ly1\nee9gulloVIkmrGWj1s5FZ0CXBYR3xExs5VbQnN8gI+b3y6IKVyRWWvX7HtmVybgO\n/E3nbiw2kJbJKyq1Xf9LcI8e3B4i8Qctm/RmJE/Ax1FKyOpcvnw=\n=D5eU\n-----END PGP SIGNATURE-----",
        "payload": "tree 37ef4f10f4c84aca2cec499bb1b268c493a2239b\nparent 45a6811d36fc59ce0d7e2be7a848059a05b0486e\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1591710645 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1591879779 +0300\n\nAdd means to handle negative capabilities in thread safety annotations\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8213c05f087e5fbb5d92a291f766b0baebc798f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8213c05f087e5fbb5d92a291f766b0baebc798f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8213c05f087e5fbb5d92a291f766b0baebc798f/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45a6811d36fc59ce0d7e2be7a848059a05b0486e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45a6811d36fc59ce0d7e2be7a848059a05b0486e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45a6811d36fc59ce0d7e2be7a848059a05b0486e"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "77327d8bfe69f0f5ae65680068e11f335823c97f",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8213c05f087e5fbb5d92a291f766b0baebc798f/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8213c05f087e5fbb5d92a291f766b0baebc798f/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=f8213c05f087e5fbb5d92a291f766b0baebc798f",
        "patch": "@@ -103,6 +103,12 @@ class LOCKABLE AnnotatedMixin : public PARENT\n     }\n \n     using UniqueLock = std::unique_lock<PARENT>;\n+#ifdef __clang__\n+    //! For negative capabilities in the Clang Thread Safety Analysis.\n+    //! A negative requirement uses the EXCLUSIVE_LOCKS_REQUIRED attribute, in conjunction\n+    //! with the ! operator, to indicate that a mutex should not be held.\n+    const AnnotatedMixin& operator!() const { return *this; }\n+#endif // __clang__\n };\n \n /**"
      },
      {
        "sha": "5f2c40bac6274c254473f012ccab042526138a85",
        "filename": "src/threadsafety.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8213c05f087e5fbb5d92a291f766b0baebc798f/src/threadsafety.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8213c05f087e5fbb5d92a291f766b0baebc798f/src/threadsafety.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/threadsafety.h?ref=f8213c05f087e5fbb5d92a291f766b0baebc798f",
        "patch": "@@ -60,6 +60,13 @@\n // and should only be used when sync.h Mutex/LOCK/etc are not usable.\n class LOCKABLE StdMutex : public std::mutex\n {\n+public:\n+#ifdef __clang__\n+    //! For negative capabilities in the Clang Thread Safety Analysis.\n+    //! A negative requirement uses the EXCLUSIVE_LOCKS_REQUIRED attribute, in conjunction\n+    //! with the ! operator, to indicate that a mutex should not be held.\n+    const StdMutex& operator!() const { return *this; }\n+#endif // __clang__\n };\n \n // StdLockGuard provides an annotated version of std::lock_guard for us,"
      }
    ]
  },
  {
    "sha": "5b9af089191e8d8db0ac3cce3f2acb8dd313cfba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjlhZjA4OTE5MWU4ZDhkYjBhYzNjY2UzZjJhY2I4ZGQzMTNjZmJh",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-10T16:55:37Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-11T13:06:39Z"
      },
      "message": "refactor: Add negative thread safety annotations to CAddrMan",
      "tree": {
        "sha": "ec0a65d7d8d6104744e2b4e7c5a9c510916132fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec0a65d7d8d6104744e2b4e7c5a9c510916132fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b9af089191e8d8db0ac3cce3f2acb8dd313cfba",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl7iLGAACgkQQQEIES5+\nqB9H/BAAnrVdYxaexuFFF+xVK+RY2YfR7wbha/afbZScQLylR5xs7gJApRmnXKx3\npQiStiARiHKw1dKVXSquFu2G9G+AM1sxmWobf9qDmk2RUdQSWKoBiWeykSYAVGnH\nbcYb8sefvyLMHStoeSLahhx7HfPXwkOf3E0+eRQUqTwKa8gMKnOo3C/GQAuesNEh\n8OHqFKHFqnb6vI5ubGJZySgtOZxINA8E3PpmSKzKumVEkGN1fLfxBFLM3h5cr6rz\n40RKgjlIzW03gJ3878eBVECz2QYQ9AtjvWE/BQi7+19bvXKkYrkNBbEEuXpjQFMV\n0WQfoKuIyigDwn/fW5ziSfSbuAeqyFjGifQE5WUV90NicwjyQGoTqCkGZIt8FkXA\n500L7m66YD2yhZ2hdlibb1YTJVpgelwXTjj1rTs8oV5qOXL2DsT1LOPtxRuk2jQU\nNbdus5/OZuf2iif/7Hj8FiFc0/HwYkdF1S81lMF9BwDSkQUfcnfbLWqp+fvsAxvM\npEvcDg20BKJQY8HG86ZX1eyBB5Uce3jIbbzcCnSjuHqH8dUQBrLLgWa/Vz9aR3E+\nds22xGrbsn6Y4dLYQZxrRCjRPf5msAumZY4ypAYOXoO7YkBpPxgsSf8CNNfMj3KR\nPXfxsYalAdNiw5W6sGrpqxf7a7XMxnFfHsQBHeRLZhJfkcSpMq8=\n=uhPR\n-----END PGP SIGNATURE-----",
        "payload": "tree ec0a65d7d8d6104744e2b4e7c5a9c510916132fc\nparent f8213c05f087e5fbb5d92a291f766b0baebc798f\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1591808137 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1591880799 +0300\n\nrefactor: Add negative thread safety annotations to CAddrMan\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b9af089191e8d8db0ac3cce3f2acb8dd313cfba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b9af089191e8d8db0ac3cce3f2acb8dd313cfba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b9af089191e8d8db0ac3cce3f2acb8dd313cfba/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8213c05f087e5fbb5d92a291f766b0baebc798f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8213c05f087e5fbb5d92a291f766b0baebc798f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8213c05f087e5fbb5d92a291f766b0baebc798f"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "4126a871a6e1c291107de11f9684923b89a4eb35",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9af089191e8d8db0ac3cce3f2acb8dd313cfba/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9af089191e8d8db0ac3cce3f2acb8dd313cfba/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=5b9af089191e8d8db0ac3cce3f2acb8dd313cfba",
        "patch": "@@ -320,7 +320,7 @@ friend class CAddrManTest;\n      * very little in common.\n      */\n     template<typename Stream>\n-    void Serialize(Stream &s) const\n+    void Serialize(Stream &s) const EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         LOCK(cs);\n \n@@ -377,7 +377,7 @@ friend class CAddrManTest;\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s)\n+    void Unserialize(Stream& s) EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         LOCK(cs);\n \n@@ -554,7 +554,7 @@ friend class CAddrManTest;\n     }\n \n     //! Add a single address.\n-    bool Add(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty = 0)\n+    bool Add(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty = 0) EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         LOCK(cs);\n         bool fRet = false;\n@@ -568,7 +568,7 @@ friend class CAddrManTest;\n     }\n \n     //! Add multiple addresses.\n-    bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty = 0)\n+    bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty = 0) EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         LOCK(cs);\n         int nAdd = 0;\n@@ -583,7 +583,7 @@ friend class CAddrManTest;\n     }\n \n     //! Mark an entry as accessible.\n-    void Good(const CService &addr, bool test_before_evict = true, int64_t nTime = GetAdjustedTime())\n+    void Good(const CService &addr, bool test_before_evict = true, int64_t nTime = GetAdjustedTime()) EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         LOCK(cs);\n         Check();\n@@ -601,7 +601,7 @@ friend class CAddrManTest;\n     }\n \n     //! See if any to-be-evicted tried table entries have been tested and if so resolve the collisions.\n-    void ResolveCollisions()\n+    void ResolveCollisions() EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         LOCK(cs);\n         Check();\n@@ -610,7 +610,7 @@ friend class CAddrManTest;\n     }\n \n     //! Randomly select an address in tried that another address is attempting to evict.\n-    CAddrInfo SelectTriedCollision()\n+    CAddrInfo SelectTriedCollision() EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         CAddrInfo ret;\n         {\n@@ -625,7 +625,7 @@ friend class CAddrManTest;\n     /**\n      * Choose an address to connect to.\n      */\n-    CAddrInfo Select(bool newOnly = false)\n+    CAddrInfo Select(bool newOnly = false) EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         CAddrInfo addrRet;\n         {\n@@ -638,7 +638,7 @@ friend class CAddrManTest;\n     }\n \n     //! Return a bunch of addresses, selected at random.\n-    std::vector<CAddress> GetAddr()\n+    std::vector<CAddress> GetAddr() EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         Check();\n         std::vector<CAddress> vAddr;\n@@ -651,15 +651,15 @@ friend class CAddrManTest;\n     }\n \n     //! Mark an entry as currently-connected-to.\n-    void Connected(const CService &addr, int64_t nTime = GetAdjustedTime())\n+    void Connected(const CService &addr, int64_t nTime = GetAdjustedTime()) EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         LOCK(cs);\n         Check();\n         Connected_(addr, nTime);\n         Check();\n     }\n \n-    void SetServices(const CService &addr, ServiceFlags nServices)\n+    void SetServices(const CService &addr, ServiceFlags nServices) EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         LOCK(cs);\n         Check();"
      }
    ]
  },
  {
    "sha": "9df0993e800843542a048f2d628df1a2bd86375b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZGYwOTkzZTgwMDg0MzU0MmEwNDhmMmQ2MjhkZjFhMmJkODYzNzVi",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-11T14:06:55Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-11T14:06:55Z"
      },
      "message": "refactor: Prevent double lock in CAddrMan::Check()",
      "tree": {
        "sha": "3c77dd4ef6d667beb997faae05a3305a51b7b072",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c77dd4ef6d667beb997faae05a3305a51b7b072"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9df0993e800843542a048f2d628df1a2bd86375b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl7iOn8ACgkQQQEIES5+\nqB/59Q//fA+KVxshEiG6wYs3roPeBcuQr985r6ivZU2Y/g0ARSF9GqulpcgncwUd\n53JySbaCvtu3yblNcmjZiH1S/N/9qRwFMUYnbLVkT/m7aY4V3Dtp3aV9NzDlG6mn\nZrXhqsHFqp0E1u0n/lN6/pxNEaOyGjA8KuDHv1fh2a9wvVw5ybB51iNmsLseQF0C\nHx9CDbE9SLfxk0epLHDVveV0CYfptTIHEZ5OFfFcySKS8H2ckPMBgt0LNq6oYo3t\neb4katlRSP7Jge+ZDZa5B1/cdMsrKfe9TvS7UsIZH6Ob5TnX1Eh8uCfF6e+9eyuz\nb+LB4yr6DGBT9EK4Ksl2G2CAzoduTGJkxEDi/UmnVbg10qgW+5mPoc5s0FelBkJb\nVot0GoCkmBs1ghaDLdZCUbzBTgre0/+anEg4efJ37N9J18D/PwNkaqo70Zu+ZQFk\nUaB2MSzzbxGg6MkKzf0RcPmM2epr+hhnP6V2uSo0A0/c4jzHZ3Qyi43q1nqwciLw\nsZIjRYicmecLuuNP6ITD8jOeaifz5eaFXYjEmZMEEnbejbB2WoxPQ7Hsau9ZbUn4\n6rhTdlax26VkKrEsT9SlrrFi01t2FR4u0RFhcaT+sn6MljPGZzE5RzFRSx9a9hvI\n6jfqhClxJXLy+s1aYl7370zQbN+JWblqNAYNZ26KSfqL3F0uLHA=\n=5FhE\n-----END PGP SIGNATURE-----",
        "payload": "tree 3c77dd4ef6d667beb997faae05a3305a51b7b072\nparent 5b9af089191e8d8db0ac3cce3f2acb8dd313cfba\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1591884415 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1591884415 +0300\n\nrefactor: Prevent double lock in CAddrMan::Check()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9df0993e800843542a048f2d628df1a2bd86375b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9df0993e800843542a048f2d628df1a2bd86375b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9df0993e800843542a048f2d628df1a2bd86375b/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b9af089191e8d8db0ac3cce3f2acb8dd313cfba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b9af089191e8d8db0ac3cce3f2acb8dd313cfba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b9af089191e8d8db0ac3cce3f2acb8dd313cfba"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 34,
      "deletions": 28
    },
    "files": [
      {
        "sha": "5c182aeb370af66098371f35c31c65e4b126390c",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9df0993e800843542a048f2d628df1a2bd86375b/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9df0993e800843542a048f2d628df1a2bd86375b/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=9df0993e800843542a048f2d628df1a2bd86375b",
        "patch": "@@ -477,7 +477,7 @@ int CAddrMan::Check_()\n \n     return 0;\n }\n-#endif\n+#endif // DEBUG_ADDRMAN\n \n void CAddrMan::GetAddr_(std::vector<CAddress>& vAddr)\n {"
      },
      {
        "sha": "6539d0fb53b2b758217fd57c632d637b01b7ac33",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 33,
        "deletions": 27,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9df0993e800843542a048f2d628df1a2bd86375b/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9df0993e800843542a048f2d628df1a2bd86375b/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=9df0993e800843542a048f2d628df1a2bd86375b",
        "patch": "@@ -211,6 +211,16 @@ friend class CAddrManTest;\n     //! Holds addrs inserted into tried table that collide with existing entries. Test-before-evict discipline used to resolve these collisions.\n     std::set<int> m_tried_collisions;\n \n+    void CheckNonLockHelper() EXCLUSIVE_LOCKS_REQUIRED(cs)\n+    {\n+#ifdef DEBUG_ADDRMAN\n+        const int err = Check_();\n+        if (err) {\n+            LogPrintf(\"ADDRMAN CONSISTENCY CHECK FAILED!!! err=%i\\n\", err);\n+        }\n+#endif // DEBUG_ADDRMAN\n+    }\n+\n protected:\n     //! secret key to randomize bucket select with\n     uint256 nKey;\n@@ -496,7 +506,7 @@ friend class CAddrManTest;\n             LogPrint(BCLog::ADDRMAN, \"addrman lost %i new and %i tried addresses due to collisions\\n\", nLostUnk, nLost);\n         }\n \n-        Check();\n+        CheckNonLockHelper();\n     }\n \n     void Clear()\n@@ -541,26 +551,22 @@ friend class CAddrManTest;\n     }\n \n     //! Consistency check\n-    void Check()\n+    void Check() EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n #ifdef DEBUG_ADDRMAN\n-        {\n-            LOCK(cs);\n-            int err;\n-            if ((err=Check_()))\n-                LogPrintf(\"ADDRMAN CONSISTENCY CHECK FAILED!!! err=%i\\n\", err);\n-        }\n-#endif\n+        LOCK(cs);\n+        CheckNonLockHelper();\n+#endif // DEBUG_ADDRMAN\n     }\n \n     //! Add a single address.\n     bool Add(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty = 0) EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         LOCK(cs);\n         bool fRet = false;\n-        Check();\n+        CheckNonLockHelper();\n         fRet |= Add_(addr, source, nTimePenalty);\n-        Check();\n+        CheckNonLockHelper();\n         if (fRet) {\n             LogPrint(BCLog::ADDRMAN, \"Added %s from %s: %i tried, %i new\\n\", addr.ToStringIPPort(), source.ToString(), nTried, nNew);\n         }\n@@ -572,10 +578,10 @@ friend class CAddrManTest;\n     {\n         LOCK(cs);\n         int nAdd = 0;\n-        Check();\n+        CheckNonLockHelper();\n         for (std::vector<CAddress>::const_iterator it = vAddr.begin(); it != vAddr.end(); it++)\n             nAdd += Add_(*it, source, nTimePenalty) ? 1 : 0;\n-        Check();\n+        CheckNonLockHelper();\n         if (nAdd) {\n             LogPrint(BCLog::ADDRMAN, \"Added %i addresses from %s: %i tried, %i new\\n\", nAdd, source.ToString(), nTried, nNew);\n         }\n@@ -586,27 +592,27 @@ friend class CAddrManTest;\n     void Good(const CService &addr, bool test_before_evict = true, int64_t nTime = GetAdjustedTime()) EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         LOCK(cs);\n-        Check();\n+        CheckNonLockHelper();\n         Good_(addr, test_before_evict, nTime);\n-        Check();\n+        CheckNonLockHelper();\n     }\n \n     //! Mark an entry as connection attempted to.\n     void Attempt(const CService &addr, bool fCountFailure, int64_t nTime = GetAdjustedTime())\n     {\n         LOCK(cs);\n-        Check();\n+        CheckNonLockHelper();\n         Attempt_(addr, fCountFailure, nTime);\n-        Check();\n+        CheckNonLockHelper();\n     }\n \n     //! See if any to-be-evicted tried table entries have been tested and if so resolve the collisions.\n     void ResolveCollisions() EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         LOCK(cs);\n-        Check();\n+        CheckNonLockHelper();\n         ResolveCollisions_();\n-        Check();\n+        CheckNonLockHelper();\n     }\n \n     //! Randomly select an address in tried that another address is attempting to evict.\n@@ -615,9 +621,9 @@ friend class CAddrManTest;\n         CAddrInfo ret;\n         {\n             LOCK(cs);\n-            Check();\n+            CheckNonLockHelper();\n             ret = SelectTriedCollision_();\n-            Check();\n+            CheckNonLockHelper();\n         }\n         return ret;\n     }\n@@ -630,9 +636,9 @@ friend class CAddrManTest;\n         CAddrInfo addrRet;\n         {\n             LOCK(cs);\n-            Check();\n+            CheckNonLockHelper();\n             addrRet = Select_(newOnly);\n-            Check();\n+            CheckNonLockHelper();\n         }\n         return addrRet;\n     }\n@@ -654,17 +660,17 @@ friend class CAddrManTest;\n     void Connected(const CService &addr, int64_t nTime = GetAdjustedTime()) EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         LOCK(cs);\n-        Check();\n+        CheckNonLockHelper();\n         Connected_(addr, nTime);\n-        Check();\n+        CheckNonLockHelper();\n     }\n \n     void SetServices(const CService &addr, ServiceFlags nServices) EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         LOCK(cs);\n-        Check();\n+        CheckNonLockHelper();\n         SetServices_(addr, nServices);\n-        Check();\n+        CheckNonLockHelper();\n     }\n \n };"
      }
    ]
  },
  {
    "sha": "6447e9406b0674b962197cae8a745f44a4d1db7a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDQ3ZTk0MDZiMDY3NGI5NjIxOTdjYWU4YTc0NWY0NGE0ZDFkYjdh",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-11T14:07:21Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-11T14:07:21Z"
      },
      "message": "refactor: Prevent double lock in CAddrMan::Clear()",
      "tree": {
        "sha": "f6f4abe79b9b4811f4bdb6265d6d32cfd7fc6c82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6f4abe79b9b4811f4bdb6265d6d32cfd7fc6c82"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6447e9406b0674b962197cae8a745f44a4d1db7a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl7iOpkACgkQQQEIES5+\nqB8uGxAAuY+976lgrbk3ao5hcAOzEYEtJgtQJmWBVIwT2hL0rFOEXgScSVA6yE1x\n05sirbMrtkmzhcWuCKpa2MVLEal8fetrAfcovhOsrzVJjWBWD4Z3Jro6L5GfeW50\nSRmryYwk09fPZYM7dav1BV6gtexakE6BK6USMNcSYzH/fBOxesyFaqjkozon8Sdr\nN7dhpRx8Umzh4alUs6B2C/Ln9wyTf6CnjccNAhnPLGjXffV45oWkK5bTxSVktJmX\nnAYo927q8fW3m64nM6Mye4pWxgLzldrfXNCONXmo5xZ3HGuFAL5n5qhTw+AFV7yy\nDVs7Rzq+fdl4bbN2lUq57/b8tuXzDi1gp52e78WsWw2lBcL9dXzZBrsl9nMf+OuS\nwClunjyJzog3T09JD5X5e0eJmfO8VV1U/fzEK06wT0JRvcTrC1VJsITkmJqScxk1\nOh3Nd5pzwooU+1sEeJly26g2z1CrUjfIU4/zQB1GxT2s9ssbJ3yH/CWYgaYplV1V\nbi/J61VN4RkgUX0jYdgup9avzhmKlEOqE5WOpNbr8jZVYydoC1ca0YCIdAhbfJvd\nfeuNqutdXGB4ebwuQ1388LENsvG0IojrXxfn9vwLXsnUtAJkfsKdMiIkymo1Lt+W\nLZg/wP7RE3l+11M7ac/wXUURI+FTRT2yWfbdDY2wjKX5075d15Q=\n=hQCl\n-----END PGP SIGNATURE-----",
        "payload": "tree f6f4abe79b9b4811f4bdb6265d6d32cfd7fc6c82\nparent 9df0993e800843542a048f2d628df1a2bd86375b\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1591884441 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1591884441 +0300\n\nrefactor: Prevent double lock in CAddrMan::Clear()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6447e9406b0674b962197cae8a745f44a4d1db7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6447e9406b0674b962197cae8a745f44a4d1db7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6447e9406b0674b962197cae8a745f44a4d1db7a/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9df0993e800843542a048f2d628df1a2bd86375b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9df0993e800843542a048f2d628df1a2bd86375b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9df0993e800843542a048f2d628df1a2bd86375b"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 26,
      "deletions": 21
    },
    "files": [
      {
        "sha": "daa22772d3bbdf87b53bf66ef5f46134295edebd",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 26,
        "deletions": 21,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6447e9406b0674b962197cae8a745f44a4d1db7a/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6447e9406b0674b962197cae8a745f44a4d1db7a/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=6447e9406b0674b962197cae8a745f44a4d1db7a",
        "patch": "@@ -221,6 +221,29 @@ friend class CAddrManTest;\n #endif // DEBUG_ADDRMAN\n     }\n \n+    void ClearNonLockHelper() EXCLUSIVE_LOCKS_REQUIRED(cs)\n+    {\n+        std::vector<int>().swap(vRandom);\n+        nKey = insecure_rand.rand256();\n+        for (size_t bucket = 0; bucket < ADDRMAN_NEW_BUCKET_COUNT; bucket++) {\n+            for (size_t entry = 0; entry < ADDRMAN_BUCKET_SIZE; entry++) {\n+                vvNew[bucket][entry] = -1;\n+            }\n+        }\n+        for (size_t bucket = 0; bucket < ADDRMAN_TRIED_BUCKET_COUNT; bucket++) {\n+            for (size_t entry = 0; entry < ADDRMAN_BUCKET_SIZE; entry++) {\n+                vvTried[bucket][entry] = -1;\n+            }\n+        }\n+\n+        nIdCount = 0;\n+        nTried = 0;\n+        nNew = 0;\n+        nLastGood = 1; //Initially at 1 so that \"never\" is strictly worse.\n+        mapInfo.clear();\n+        mapAddr.clear();\n+    }\n+\n protected:\n     //! secret key to randomize bucket select with\n     uint256 nKey;\n@@ -391,7 +414,7 @@ friend class CAddrManTest;\n     {\n         LOCK(cs);\n \n-        Clear();\n+        ClearNonLockHelper();\n         unsigned char nVersion;\n         s >> nVersion;\n         unsigned char nKeySize;\n@@ -509,28 +532,10 @@ friend class CAddrManTest;\n         CheckNonLockHelper();\n     }\n \n-    void Clear()\n+    void Clear() EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         LOCK(cs);\n-        std::vector<int>().swap(vRandom);\n-        nKey = insecure_rand.rand256();\n-        for (size_t bucket = 0; bucket < ADDRMAN_NEW_BUCKET_COUNT; bucket++) {\n-            for (size_t entry = 0; entry < ADDRMAN_BUCKET_SIZE; entry++) {\n-                vvNew[bucket][entry] = -1;\n-            }\n-        }\n-        for (size_t bucket = 0; bucket < ADDRMAN_TRIED_BUCKET_COUNT; bucket++) {\n-            for (size_t entry = 0; entry < ADDRMAN_BUCKET_SIZE; entry++) {\n-                vvTried[bucket][entry] = -1;\n-            }\n-        }\n-\n-        nIdCount = 0;\n-        nTried = 0;\n-        nNew = 0;\n-        nLastGood = 1; //Initially at 1 so that \"never\" is strictly worse.\n-        mapInfo.clear();\n-        mapAddr.clear();\n+        ClearNonLockHelper();\n     }\n \n     CAddrMan()"
      }
    ]
  },
  {
    "sha": "b69f9e4443414ffc3987cf66da25f786c680ebf9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjlmOWU0NDQzNDE0ZmZjMzk4N2NmNjZkYTI1Zjc4NmM2ODBlYmY5",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-11T14:07:47Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-11T14:07:47Z"
      },
      "message": "refactor: Prevent double lock in CAddrMan::size()",
      "tree": {
        "sha": "0418681dc985fe7ee0ec50c23975ab5547db9d65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0418681dc985fe7ee0ec50c23975ab5547db9d65"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b69f9e4443414ffc3987cf66da25f786c680ebf9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl7iOrMACgkQQQEIES5+\nqB+/og/7Bvmcqf/KqvlKJHi8qrQm0SDHQgziME5E5Jnb1+VZmGGbS1xMJGaj+mem\nz36GQIQCCZrJU8aHbj9WYGdtjAdzRoroynLWNZ49Drku6XoMKK+tEfrBtufySWTW\nijBRhe/Pm9XCbrgj4rAVkDZe7nkJP9QzXTHK9BM/fs91TCwC2NgK2HVcubSGdbSC\nrdjb6BS6gXwA97npQYkQ8oXiEWZO5tsPALDquuIKfIKL3BuBL8rHYquztGEeGbw+\n6kIY46MCnPV8XSx43shqnkqodRUnxwO7Uf5lZYrYiaukFlovF7YoIBv1C5Ic9liY\nReyVxYTlfPAtcW0EKOrqbJHNh93c1N7yve9oc4KbcXMdJzJsJeq+dtCmHepW8MaZ\nesnf7eqagej8L40Sa7rmMKmK6/3CAy+js+NzVuHzuz9eJ9/sS2SBMw7qToIzzCbY\nwGc/D+6qzyiHNvR5oEZEsWWjm1INj/P2HxwQrRkZ1p4P1oXtSv1FCEYkl9uBpJeD\n2oWcEUrH2v6ZFR1RantshSRteTYvvCo5YzrRhT5H5FIp18L/o/T5f4tCgvUrx1Tm\nKHkoCu8nTtQTXnZibg+tpLfwcT//6KVrQO8KUMFeOFIkxmJNz+9QJxABjxt9kphz\neY3U2rDUAUEx1FIgIUMxB4KbKXa3u8bgkZk+MKSgQTN9Y66G04c=\n=JlxG\n-----END PGP SIGNATURE-----",
        "payload": "tree 0418681dc985fe7ee0ec50c23975ab5547db9d65\nparent 6447e9406b0674b962197cae8a745f44a4d1db7a\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1591884467 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1591884467 +0300\n\nrefactor: Prevent double lock in CAddrMan::size()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b69f9e4443414ffc3987cf66da25f786c680ebf9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b69f9e4443414ffc3987cf66da25f786c680ebf9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b69f9e4443414ffc3987cf66da25f786c680ebf9/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6447e9406b0674b962197cae8a745f44a4d1db7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6447e9406b0674b962197cae8a745f44a4d1db7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6447e9406b0674b962197cae8a745f44a4d1db7a"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "9b9768475074c6f14010c0796058d21cadb767da",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b69f9e4443414ffc3987cf66da25f786c680ebf9/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b69f9e4443414ffc3987cf66da25f786c680ebf9/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=b69f9e4443414ffc3987cf66da25f786c680ebf9",
        "patch": "@@ -356,7 +356,7 @@ void CAddrMan::Attempt_(const CService& addr, bool fCountFailure, int64_t nTime)\n \n CAddrInfo CAddrMan::Select_(bool newOnly)\n {\n-    if (size() == 0)\n+    if (sizeNonLockerHelper() == 0)\n         return CAddrInfo();\n \n     if (newOnly && nNew == 0)"
      },
      {
        "sha": "3850939eabaf0c31da647c23488edc7af172530e",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b69f9e4443414ffc3987cf66da25f786c680ebf9/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b69f9e4443414ffc3987cf66da25f786c680ebf9/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=b69f9e4443414ffc3987cf66da25f786c680ebf9",
        "patch": "@@ -244,6 +244,11 @@ friend class CAddrManTest;\n         mapAddr.clear();\n     }\n \n+    size_t sizeNonLockerHelper() const EXCLUSIVE_LOCKS_REQUIRED(cs)\n+    {\n+        return vRandom.size();\n+    }\n+\n protected:\n     //! secret key to randomize bucket select with\n     uint256 nKey;\n@@ -549,10 +554,10 @@ friend class CAddrManTest;\n     }\n \n     //! Return the number of (unique) addresses in all tables.\n-    size_t size() const\n+    size_t size() const EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         LOCK(cs); // TODO: Cache this in an atomic to avoid this overhead\n-        return vRandom.size();\n+        return sizeNonLockerHelper();\n     }\n \n     //! Consistency check"
      }
    ]
  },
  {
    "sha": "556b285ccb990f2a032efbcb81d9ce90ed81ce1f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTZiMjg1Y2NiOTkwZjJhMDMyZWZiY2I4MWQ5Y2U5MGVkODFjZTFm",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-11T14:08:03Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-11T14:08:03Z"
      },
      "message": "refactor: Prevent double lock in CAddrMan::Attempt()",
      "tree": {
        "sha": "6e627b946e6f62cfe786ef998d2af330d81d3662",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e627b946e6f62cfe786ef998d2af330d81d3662"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/556b285ccb990f2a032efbcb81d9ce90ed81ce1f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl7iOsMACgkQQQEIES5+\nqB+RrhAAnHPrcbJ90LwxBbtYcLROsMkvCxaX30Fe273XbY9/QYWo7ORazKG0MmlI\noqYz2eS462xTQqHFd/vDccXp1KYHIBblwtRa19bseYVeCwBhRHzva1C4giWwBSut\nPE9xRqPfcVYfEEPKml0lcVE1l7I6jOfgxysnMXF72nsJohr8e1dPJJ36DnQ3n8d/\nZNadcx1NiaULa8zZXIPIopdTXsLAHMSYwxwYTvcUbDJCNQQiRvM1LitywqGUZm7+\nzjPc7SdDv6n+wh1Sakg/itnSn0AUaiSgg/MW+f+R7MtSzvXbLLBJrLOuS099oOg+\nPtSJfawNKlFO8SawOg7Xa8H1uivkzaw+5iQgEwJ2/+Nolk1R1OpdWCe2DfLWbNYe\nHqJkq6u0oTE2SaCYuYZxe8aiX4hYWTMAybtHpcYI2DkLokkcIi+YiDQYsmJVsxwL\nk1OffgY3HJ+RukxrpOMmHJMAF+HKw/GWsH9Cq2zsxYJQA14oggzFho/NIX1fxlDn\niaRfV4Vc04L9JlKsnhzgmp+CddYwyXnD/EjL6ARb3k41phQh4ys94Gs7xhWkaO3b\nv1UqBCIP1LBNmB98Jf4HBtL+QiFa7XwXrnFi6oEzPOxjp5qimZfStXPfQjUMhWzf\nhaISZy2eFJhOshSiv6Jq09DTbs1PbGTSS7aaLh2qL6+hbcVkDYA=\n=Vgdl\n-----END PGP SIGNATURE-----",
        "payload": "tree 6e627b946e6f62cfe786ef998d2af330d81d3662\nparent b69f9e4443414ffc3987cf66da25f786c680ebf9\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1591884483 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1591884483 +0300\n\nrefactor: Prevent double lock in CAddrMan::Attempt()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/556b285ccb990f2a032efbcb81d9ce90ed81ce1f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/556b285ccb990f2a032efbcb81d9ce90ed81ce1f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/556b285ccb990f2a032efbcb81d9ce90ed81ce1f/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b69f9e4443414ffc3987cf66da25f786c680ebf9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b69f9e4443414ffc3987cf66da25f786c680ebf9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b69f9e4443414ffc3987cf66da25f786c680ebf9"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "45469a6bbb9cdd0e7edc2adaaf32ce3bc80e6d7f",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/556b285ccb990f2a032efbcb81d9ce90ed81ce1f/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/556b285ccb990f2a032efbcb81d9ce90ed81ce1f/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=556b285ccb990f2a032efbcb81d9ce90ed81ce1f",
        "patch": "@@ -608,7 +608,7 @@ friend class CAddrManTest;\n     }\n \n     //! Mark an entry as connection attempted to.\n-    void Attempt(const CService &addr, bool fCountFailure, int64_t nTime = GetAdjustedTime())\n+    void Attempt(const CService &addr, bool fCountFailure, int64_t nTime = GetAdjustedTime()) EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         LOCK(cs);\n         CheckNonLockHelper();"
      },
      {
        "sha": "c2feef713a740be357905f4115002740eb3b11a4",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/556b285ccb990f2a032efbcb81d9ce90ed81ce1f/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/556b285ccb990f2a032efbcb81d9ce90ed81ce1f/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=556b285ccb990f2a032efbcb81d9ce90ed81ce1f",
        "patch": "@@ -79,7 +79,7 @@ class CAddrManTest : public CAddrMan\n \n          bool count_failure = false;\n          int64_t nLastTry = GetAdjustedTime()-61;\n-         Attempt(addr, count_failure, nLastTry);\n+         Attempt_(addr, count_failure, nLastTry);\n      }\n \n     void Clear()"
      }
    ]
  },
  {
    "sha": "b6712ece8ada3b1c9230f1264da81cbf11fe4595",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjcxMmVjZThhZGEzYjFjOTIzMGYxMjY0ZGE4MWNiZjExZmU0NTk1",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-11T14:08:15Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-11T14:08:15Z"
      },
      "message": "refactor: Replace RecursiveMutex with Mutex in CAddrMan",
      "tree": {
        "sha": "85b4d5b45dbcfd709bfa91a69fd3bdd750a6b6ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85b4d5b45dbcfd709bfa91a69fd3bdd750a6b6ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6712ece8ada3b1c9230f1264da81cbf11fe4595",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl7iOs8ACgkQQQEIES5+\nqB/4kA/+OYhG5cQMLukQ4a/gY8IQRoCyhcIt0md7IIQGiW4gpj+kxWdMWgp4nwdY\nxYBqeqCYCpEGc1dZ4bvzMgO5ySDK/EJjmsI3d/iDtanKBWJmtUYxaGh0FZ/BEXGs\nh4NWCNp6PQysCtanhije2UIZjXn0RvzaWiKbKG5K3VC2zyP4VI94TdxAkiVYMB/j\nV4TToN5XLJAw6GWdCE4v3qVWnMD8PucQz+XVK1ovCMmo06f2Eadg2IdbLOqb16+X\n2SUWq/Rp1AQbZULd5WPjdNzJgpoweqpR5c6md3+3ukbRu80jWhWloJrrK6jmPlss\nqg9IPqAM5pK6cFim/GYinfAccAKaydM3OebDF5FjmbEmwLrBL7xV3Tb5l6lBef3p\nZAM3whTenpIYQjtu12QnyExxyH+0zsytTtQhe6OKOCzbqUbX02yZW1Jn7s/6qHLy\njiU4uyeccQgO5PpHket4+GQYWUB471EM7xhPoK5kIc8h3rJByJrQROABlieuwXx3\ngFW7g4OV7moDfvQ6YHb7+C39e0ELTfM8LeUYFGs4fvyl4XrhkqO8/1Zhk/DP+00E\n7n3Ct2hOhAMlhoorD3vaBL4KbHTpikVb6IkPvEqa/pFxdUWfyuUkv3lbM3Gy+uKG\nPp2e72uWLiGkApQzUnmz9AjmMAlMdQ5SDIRSJGjVGwHtCeng/zQ=\n=4mLW\n-----END PGP SIGNATURE-----",
        "payload": "tree 85b4d5b45dbcfd709bfa91a69fd3bdd750a6b6ae\nparent 556b285ccb990f2a032efbcb81d9ce90ed81ce1f\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1591884495 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1591884495 +0300\n\nrefactor: Replace RecursiveMutex with Mutex in CAddrMan\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6712ece8ada3b1c9230f1264da81cbf11fe4595",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6712ece8ada3b1c9230f1264da81cbf11fe4595",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6712ece8ada3b1c9230f1264da81cbf11fe4595/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "556b285ccb990f2a032efbcb81d9ce90ed81ce1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/556b285ccb990f2a032efbcb81d9ce90ed81ce1f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/556b285ccb990f2a032efbcb81d9ce90ed81ce1f"
      }
    ],
    "stats": {
      "total": 129,
      "additions": 64,
      "deletions": 65
    },
    "files": [
      {
        "sha": "1a2c53d8102e4494ad2bfb2af2c8c1907eadb2e0",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 59,
        "deletions": 60,
        "changes": 119,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6712ece8ada3b1c9230f1264da81cbf11fe4595/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6712ece8ada3b1c9230f1264da81cbf11fe4595/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=b6712ece8ada3b1c9230f1264da81cbf11fe4595",
        "patch": "@@ -177,41 +177,40 @@ class CAddrMan\n {\n friend class CAddrManTest;\n protected:\n-    //! critical section to protect the inner data structures\n-    mutable RecursiveMutex cs;\n+    mutable Mutex m_addrman_mutex;\n \n private:\n     //! last used nId\n-    int nIdCount GUARDED_BY(cs);\n+    int nIdCount GUARDED_BY(m_addrman_mutex);\n \n     //! table with information about all nIds\n-    std::map<int, CAddrInfo> mapInfo GUARDED_BY(cs);\n+    std::map<int, CAddrInfo> mapInfo GUARDED_BY(m_addrman_mutex);\n \n     //! find an nId based on its network address\n-    std::map<CNetAddr, int> mapAddr GUARDED_BY(cs);\n+    std::map<CNetAddr, int> mapAddr GUARDED_BY(m_addrman_mutex);\n \n     //! randomly-ordered vector of all nIds\n-    std::vector<int> vRandom GUARDED_BY(cs);\n+    std::vector<int> vRandom GUARDED_BY(m_addrman_mutex);\n \n     // number of \"tried\" entries\n-    int nTried GUARDED_BY(cs);\n+    int nTried GUARDED_BY(m_addrman_mutex);\n \n     //! list of \"tried\" buckets\n-    int vvTried[ADDRMAN_TRIED_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs);\n+    int vvTried[ADDRMAN_TRIED_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(m_addrman_mutex);\n \n     //! number of (unique) \"new\" entries\n-    int nNew GUARDED_BY(cs);\n+    int nNew GUARDED_BY(m_addrman_mutex);\n \n     //! list of \"new\" buckets\n-    int vvNew[ADDRMAN_NEW_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs);\n+    int vvNew[ADDRMAN_NEW_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(m_addrman_mutex);\n \n     //! last time Good was called (memory only)\n-    int64_t nLastGood GUARDED_BY(cs);\n+    int64_t nLastGood GUARDED_BY(m_addrman_mutex);\n \n     //! Holds addrs inserted into tried table that collide with existing entries. Test-before-evict discipline used to resolve these collisions.\n     std::set<int> m_tried_collisions;\n \n-    void CheckNonLockHelper() EXCLUSIVE_LOCKS_REQUIRED(cs)\n+    void CheckNonLockHelper() EXCLUSIVE_LOCKS_REQUIRED(m_addrman_mutex)\n     {\n #ifdef DEBUG_ADDRMAN\n         const int err = Check_();\n@@ -221,7 +220,7 @@ friend class CAddrManTest;\n #endif // DEBUG_ADDRMAN\n     }\n \n-    void ClearNonLockHelper() EXCLUSIVE_LOCKS_REQUIRED(cs)\n+    void ClearNonLockHelper() EXCLUSIVE_LOCKS_REQUIRED(m_addrman_mutex)\n     {\n         std::vector<int>().swap(vRandom);\n         nKey = insecure_rand.rand256();\n@@ -244,7 +243,7 @@ friend class CAddrManTest;\n         mapAddr.clear();\n     }\n \n-    size_t sizeNonLockerHelper() const EXCLUSIVE_LOCKS_REQUIRED(cs)\n+    size_t sizeNonLockerHelper() const EXCLUSIVE_LOCKS_REQUIRED(m_addrman_mutex)\n     {\n         return vRandom.size();\n     }\n@@ -257,55 +256,55 @@ friend class CAddrManTest;\n     FastRandomContext insecure_rand;\n \n     //! Find an entry.\n-    CAddrInfo* Find(const CNetAddr& addr, int *pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    CAddrInfo* Find(const CNetAddr& addr, int *pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(m_addrman_mutex);\n \n     //! find an entry, creating it if necessary.\n     //! nTime and nServices of the found node are updated, if necessary.\n-    CAddrInfo* Create(const CAddress &addr, const CNetAddr &addrSource, int *pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    CAddrInfo* Create(const CAddress &addr, const CNetAddr &addrSource, int *pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(m_addrman_mutex);\n \n     //! Swap two elements in vRandom.\n-    void SwapRandom(unsigned int nRandomPos1, unsigned int nRandomPos2) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void SwapRandom(unsigned int nRandomPos1, unsigned int nRandomPos2) EXCLUSIVE_LOCKS_REQUIRED(m_addrman_mutex);\n \n     //! Move an entry from the \"new\" table(s) to the \"tried\" table\n-    void MakeTried(CAddrInfo& info, int nId) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void MakeTried(CAddrInfo& info, int nId) EXCLUSIVE_LOCKS_REQUIRED(m_addrman_mutex);\n \n     //! Delete an entry. It must not be in tried, and have refcount 0.\n-    void Delete(int nId) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void Delete(int nId) EXCLUSIVE_LOCKS_REQUIRED(m_addrman_mutex);\n \n     //! Clear a position in a \"new\" table. This is the only place where entries are actually deleted.\n-    void ClearNew(int nUBucket, int nUBucketPos) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void ClearNew(int nUBucket, int nUBucketPos) EXCLUSIVE_LOCKS_REQUIRED(m_addrman_mutex);\n \n     //! Mark an entry \"good\", possibly moving it from \"new\" to \"tried\".\n-    void Good_(const CService &addr, bool test_before_evict, int64_t time) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void Good_(const CService &addr, bool test_before_evict, int64_t time) EXCLUSIVE_LOCKS_REQUIRED(m_addrman_mutex);\n \n     //! Add an entry to the \"new\" table.\n-    bool Add_(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    bool Add_(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty) EXCLUSIVE_LOCKS_REQUIRED(m_addrman_mutex);\n \n     //! Mark an entry as attempted to connect.\n-    void Attempt_(const CService &addr, bool fCountFailure, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void Attempt_(const CService &addr, bool fCountFailure, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(m_addrman_mutex);\n \n     //! Select an address to connect to, if newOnly is set to true, only the new table is selected from.\n-    CAddrInfo Select_(bool newOnly) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    CAddrInfo Select_(bool newOnly) EXCLUSIVE_LOCKS_REQUIRED(m_addrman_mutex);\n \n     //! See if any to-be-evicted tried table entries have been tested and if so resolve the collisions.\n-    void ResolveCollisions_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void ResolveCollisions_() EXCLUSIVE_LOCKS_REQUIRED(m_addrman_mutex);\n \n     //! Return a random to-be-evicted tried table address.\n-    CAddrInfo SelectTriedCollision_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    CAddrInfo SelectTriedCollision_() EXCLUSIVE_LOCKS_REQUIRED(m_addrman_mutex);\n \n #ifdef DEBUG_ADDRMAN\n     //! Perform consistency check. Returns an error code or zero.\n-    int Check_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    int Check_() EXCLUSIVE_LOCKS_REQUIRED(m_addrman_mutex);\n #endif\n \n     //! Select several addresses at once.\n-    void GetAddr_(std::vector<CAddress> &vAddr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void GetAddr_(std::vector<CAddress> &vAddr) EXCLUSIVE_LOCKS_REQUIRED(m_addrman_mutex);\n \n     //! Mark an entry as currently-connected-to.\n-    void Connected_(const CService &addr, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void Connected_(const CService &addr, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(m_addrman_mutex);\n \n     //! Update an entry's service bits.\n-    void SetServices_(const CService &addr, ServiceFlags nServices) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void SetServices_(const CService &addr, ServiceFlags nServices) EXCLUSIVE_LOCKS_REQUIRED(m_addrman_mutex);\n \n public:\n     // Compressed IP->ASN mapping, loaded from a file when a node starts.\n@@ -358,9 +357,9 @@ friend class CAddrManTest;\n      * very little in common.\n      */\n     template<typename Stream>\n-    void Serialize(Stream &s) const EXCLUSIVE_LOCKS_REQUIRED(!cs)\n+    void Serialize(Stream &s) const EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n+        LOCK(m_addrman_mutex);\n \n         unsigned char nVersion = 2;\n         s << nVersion;\n@@ -415,9 +414,9 @@ friend class CAddrManTest;\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s) EXCLUSIVE_LOCKS_REQUIRED(!cs)\n+    void Unserialize(Stream& s) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n+        LOCK(m_addrman_mutex);\n \n         ClearNonLockHelper();\n         unsigned char nVersion;\n@@ -537,9 +536,9 @@ friend class CAddrManTest;\n         CheckNonLockHelper();\n     }\n \n-    void Clear() EXCLUSIVE_LOCKS_REQUIRED(!cs)\n+    void Clear() EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n+        LOCK(m_addrman_mutex);\n         ClearNonLockHelper();\n     }\n \n@@ -554,25 +553,25 @@ friend class CAddrManTest;\n     }\n \n     //! Return the number of (unique) addresses in all tables.\n-    size_t size() const EXCLUSIVE_LOCKS_REQUIRED(!cs)\n+    size_t size() const EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs); // TODO: Cache this in an atomic to avoid this overhead\n+        LOCK(m_addrman_mutex); // TODO: Cache this in an atomic to avoid this overhead\n         return sizeNonLockerHelper();\n     }\n \n     //! Consistency check\n-    void Check() EXCLUSIVE_LOCKS_REQUIRED(!cs)\n+    void Check() EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n #ifdef DEBUG_ADDRMAN\n-        LOCK(cs);\n+        LOCK(m_addrman_mutex);\n         CheckNonLockHelper();\n #endif // DEBUG_ADDRMAN\n     }\n \n     //! Add a single address.\n-    bool Add(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty = 0) EXCLUSIVE_LOCKS_REQUIRED(!cs)\n+    bool Add(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty = 0) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n+        LOCK(m_addrman_mutex);\n         bool fRet = false;\n         CheckNonLockHelper();\n         fRet |= Add_(addr, source, nTimePenalty);\n@@ -584,9 +583,9 @@ friend class CAddrManTest;\n     }\n \n     //! Add multiple addresses.\n-    bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty = 0) EXCLUSIVE_LOCKS_REQUIRED(!cs)\n+    bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty = 0) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n+        LOCK(m_addrman_mutex);\n         int nAdd = 0;\n         CheckNonLockHelper();\n         for (std::vector<CAddress>::const_iterator it = vAddr.begin(); it != vAddr.end(); it++)\n@@ -599,38 +598,38 @@ friend class CAddrManTest;\n     }\n \n     //! Mark an entry as accessible.\n-    void Good(const CService &addr, bool test_before_evict = true, int64_t nTime = GetAdjustedTime()) EXCLUSIVE_LOCKS_REQUIRED(!cs)\n+    void Good(const CService &addr, bool test_before_evict = true, int64_t nTime = GetAdjustedTime()) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n+        LOCK(m_addrman_mutex);\n         CheckNonLockHelper();\n         Good_(addr, test_before_evict, nTime);\n         CheckNonLockHelper();\n     }\n \n     //! Mark an entry as connection attempted to.\n-    void Attempt(const CService &addr, bool fCountFailure, int64_t nTime = GetAdjustedTime()) EXCLUSIVE_LOCKS_REQUIRED(!cs)\n+    void Attempt(const CService &addr, bool fCountFailure, int64_t nTime = GetAdjustedTime()) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n+        LOCK(m_addrman_mutex);\n         CheckNonLockHelper();\n         Attempt_(addr, fCountFailure, nTime);\n         CheckNonLockHelper();\n     }\n \n     //! See if any to-be-evicted tried table entries have been tested and if so resolve the collisions.\n-    void ResolveCollisions() EXCLUSIVE_LOCKS_REQUIRED(!cs)\n+    void ResolveCollisions() EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n+        LOCK(m_addrman_mutex);\n         CheckNonLockHelper();\n         ResolveCollisions_();\n         CheckNonLockHelper();\n     }\n \n     //! Randomly select an address in tried that another address is attempting to evict.\n-    CAddrInfo SelectTriedCollision() EXCLUSIVE_LOCKS_REQUIRED(!cs)\n+    CAddrInfo SelectTriedCollision() EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n         CAddrInfo ret;\n         {\n-            LOCK(cs);\n+            LOCK(m_addrman_mutex);\n             CheckNonLockHelper();\n             ret = SelectTriedCollision_();\n             CheckNonLockHelper();\n@@ -641,11 +640,11 @@ friend class CAddrManTest;\n     /**\n      * Choose an address to connect to.\n      */\n-    CAddrInfo Select(bool newOnly = false) EXCLUSIVE_LOCKS_REQUIRED(!cs)\n+    CAddrInfo Select(bool newOnly = false) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n         CAddrInfo addrRet;\n         {\n-            LOCK(cs);\n+            LOCK(m_addrman_mutex);\n             CheckNonLockHelper();\n             addrRet = Select_(newOnly);\n             CheckNonLockHelper();\n@@ -654,30 +653,30 @@ friend class CAddrManTest;\n     }\n \n     //! Return a bunch of addresses, selected at random.\n-    std::vector<CAddress> GetAddr() EXCLUSIVE_LOCKS_REQUIRED(!cs)\n+    std::vector<CAddress> GetAddr() EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n         Check();\n         std::vector<CAddress> vAddr;\n         {\n-            LOCK(cs);\n+            LOCK(m_addrman_mutex);\n             GetAddr_(vAddr);\n         }\n         Check();\n         return vAddr;\n     }\n \n     //! Mark an entry as currently-connected-to.\n-    void Connected(const CService &addr, int64_t nTime = GetAdjustedTime()) EXCLUSIVE_LOCKS_REQUIRED(!cs)\n+    void Connected(const CService &addr, int64_t nTime = GetAdjustedTime()) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n+        LOCK(m_addrman_mutex);\n         CheckNonLockHelper();\n         Connected_(addr, nTime);\n         CheckNonLockHelper();\n     }\n \n-    void SetServices(const CService &addr, ServiceFlags nServices) EXCLUSIVE_LOCKS_REQUIRED(!cs)\n+    void SetServices(const CService &addr, ServiceFlags nServices) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n+        LOCK(m_addrman_mutex);\n         CheckNonLockHelper();\n         SetServices_(addr, nServices);\n         CheckNonLockHelper();"
      },
      {
        "sha": "d6260ef064ed580354de4e7e3ec82c11cdf2fa2d",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6712ece8ada3b1c9230f1264da81cbf11fe4595/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6712ece8ada3b1c9230f1264da81cbf11fe4595/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=b6712ece8ada3b1c9230f1264da81cbf11fe4595",
        "patch": "@@ -39,26 +39,26 @@ class CAddrManTest : public CAddrMan\n \n     CAddrInfo* Find(const CNetAddr& addr, int* pnId = nullptr)\n     {\n-        LOCK(cs);\n+        LOCK(m_addrman_mutex);\n         return CAddrMan::Find(addr, pnId);\n     }\n \n     CAddrInfo* Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId = nullptr)\n     {\n-        LOCK(cs);\n+        LOCK(m_addrman_mutex);\n         return CAddrMan::Create(addr, addrSource, pnId);\n     }\n \n     void Delete(int nId)\n     {\n-        LOCK(cs);\n+        LOCK(m_addrman_mutex);\n         CAddrMan::Delete(nId);\n     }\n \n     // Used to test deserialization\n     std::pair<int, int> GetBucketAndEntry(const CAddress& addr)\n     {\n-        LOCK(cs);\n+        LOCK(m_addrman_mutex);\n         int nId = mapAddr[addr];\n         for (int bucket = 0; bucket < ADDRMAN_NEW_BUCKET_COUNT; ++bucket) {\n             for (int entry = 0; entry < ADDRMAN_BUCKET_SIZE; ++entry) {\n@@ -73,7 +73,7 @@ class CAddrManTest : public CAddrMan\n     // Simulates connection failure so that we can test eviction of offline nodes\n     void SimConnFail(CService& addr)\n     {\n-         LOCK(cs);\n+         LOCK(m_addrman_mutex);\n          int64_t nLastSuccess = 1;\n          Good_(addr, true, nLastSuccess); // Set last good connection in the deep past.\n "
      }
    ]
  },
  {
    "sha": "7e076c90cbf3ad49d09ef07dd18221b52440dbef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTA3NmM5MGNiZjNhZDQ5ZDA5ZWYwN2RkMTgyMjFiNTI0NDBkYmVm",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-11T15:40:34Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-11T15:40:34Z"
      },
      "message": "Partially revert of 556b285ccb990f2a032efbcb81d9ce90ed81ce1f",
      "tree": {
        "sha": "007c87d3896a2ecbb89e43a0e5e18de682163fcb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/007c87d3896a2ecbb89e43a0e5e18de682163fcb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e076c90cbf3ad49d09ef07dd18221b52440dbef",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl7iUHIACgkQQQEIES5+\nqB8YVg/+Kk2zFfWPOK6xV4HHfQ1gTLhWwg9wZ8duD6SJ6sUc7u0dkk9YwGdZ/DV2\nevsOanctcecP7Wlu2K8QyfL3tMwtqwXjsC4EQBEmjpJAYDYbrjtw0ti9QFw0ZRBN\nS6aa0Mg7QdZ+P8bxbOD2S82ra6JGFDbyjA5z4b1Pi9jQKUImgdmsByZa+5cB3M+2\n+U3gcTdFAggLXy5v5cTKlXcF1diaVEDIvqRfjlI2B+I3yByWaS5KvEBcOr2pA3+p\nQTxoR7nMqV0IhB/drJR0pUM6L/yLA3kls3Px4MOofUq1urE5jqsW9QTCmMvi2a+n\nbuiJ+VuX3LEFt/LHXWSM32RJYd+gMXuFIaw48OLlcnHh07WoEyD+7yV+H8l//vXM\n4fub7/GHHbsnTrHcW0Oq5G3HPXnL0iC6kZ85sHixpphfZKdywbQCEjtgz6ZI7zPF\nqWSpK9KBS37d8hE36yGBlotPAj4O4YQqt03SLI5fctSpnM3UqLnEdekXzO5Jr6uP\nWoblt+Fz9ZDUhxjFyixoo6axY9TPp2OxIoeIW32KdERpBxAEzYbcdyhU/MeYTDpv\nXu5Evn7a8t30n/qWJLKm1jcF4R73pnUW9SvxK1YvP2HTyeuiDdLQa75WIYLfVnT0\nw7pQoIAwjPYTOv0PNi9C2xspYlSKH40j9CdvFZKabY4MwPF3Ark=\n=ItIj\n-----END PGP SIGNATURE-----",
        "payload": "tree 007c87d3896a2ecbb89e43a0e5e18de682163fcb\nparent b6712ece8ada3b1c9230f1264da81cbf11fe4595\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1591890034 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1591890034 +0300\n\nPartially revert of 556b285ccb990f2a032efbcb81d9ce90ed81ce1f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e076c90cbf3ad49d09ef07dd18221b52440dbef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e076c90cbf3ad49d09ef07dd18221b52440dbef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e076c90cbf3ad49d09ef07dd18221b52440dbef/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6712ece8ada3b1c9230f1264da81cbf11fe4595",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6712ece8ada3b1c9230f1264da81cbf11fe4595",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6712ece8ada3b1c9230f1264da81cbf11fe4595"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e91b96638459f83ad71a2aa2888639151abd9904",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e076c90cbf3ad49d09ef07dd18221b52440dbef/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e076c90cbf3ad49d09ef07dd18221b52440dbef/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=7e076c90cbf3ad49d09ef07dd18221b52440dbef",
        "patch": "@@ -79,7 +79,7 @@ class CAddrManTest : public CAddrMan\n \n          bool count_failure = false;\n          int64_t nLastTry = GetAdjustedTime()-61;\n-         Attempt_(addr, count_failure, nLastTry);\n+         Attempt(addr, count_failure, nLastTry);\n      }\n \n     void Clear()"
      }
    ]
  }
]