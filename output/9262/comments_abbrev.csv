sipa,2016-12-02T04:58:40Z,"There should probably be a function in the place where mempool acceptance is decided (main.cpp now, validation.cpp after The Main Split) to do preliminary checking like thid.",https://github.com/bitcoin/bitcoin/pull/9262#issuecomment-264373661,264373661,
gmaxwell,2016-12-02T14:52:54Z,"Probably not for now but when I read this code I wondered if we need an ""available balance""-- e.g. the sum of the coins that selectcoins would consider using... so that transaction failures due to this (and spendunconfirmed set off) are more explicable.",https://github.com/bitcoin/bitcoin/pull/9262#issuecomment-264471388,264471388,
gmaxwell,2016-12-02T14:53:27Z,"FWIW, I think this should be backported. ",https://github.com/bitcoin/bitcoin/pull/9262#issuecomment-264471546,264471546,
instagibbs,2016-12-02T16:45:04Z,While writing tests I found that this logic somehow is falling through on non-default ancestorcount limit. Debugging.,https://github.com/bitcoin/bitcoin/pull/9262#issuecomment-264500746,264500746,
instagibbs,2016-12-02T21:02:11Z,Updated the pull request to new design discussed on IRC.,https://github.com/bitcoin/bitcoin/pull/9262#issuecomment-264561768,264561768,
instagibbs,2016-12-02T22:18:15Z,I also think this is good for backport.,https://github.com/bitcoin/bitcoin/pull/9262#issuecomment-264577692,264577692,
gmaxwell,2016-12-04T19:11:21Z,"Looks good! -- so, I think the additional test in ""Don't return success""  should be controlled by an option, since the failure is only temporary (at least once we fix the rebroadcast bug) and many callers handle failure to create a transaction poorly. I might even go as far as to suggest that this option be set in 0.13.2 to continue to create the transaction because that would be less of an API ch",https://github.com/bitcoin/bitcoin/pull/9262#issuecomment-264723778,264723778,
instagibbs,2016-12-04T19:45:53Z,"Couple of fixes/changes:\n\n>if (pcoin->InMempool() && pcoin->GetMempoolAncestorCount() > nMaxAncestors)\n\nis now\n\n>if (pcoin->InMempool() && pcoin->GetMempoolAncestorCount() >= nMaxAncestors)\n\nso it actually filters correctly on the very last call of SelectCoinsMinConf.\n\nI also revamped the tests to catch the various cases.\n\n@gmaxwell we'll have to catch that logic in two pla",https://github.com/bitcoin/bitcoin/pull/9262#issuecomment-264725932,264725932,
gmaxwell,2016-12-05T02:42:49Z,Current behavior is horrendous indeed. Thank you for working on this.,https://github.com/bitcoin/bitcoin/pull/9262#issuecomment-264755836,264755836,
sdaftuar,2016-12-05T19:59:22Z,"@gmaxwell No strong opinion on the issue of default behavior for 0.13.2, but given that you currently have to restart your node in order to rebroadcast, I'd lean towards making the default behavior be to enforce this new restriction, rather than create a tx that doesn't make it to the mempool.",https://github.com/bitcoin/bitcoin/pull/9262#issuecomment-264960077,264960077,
instagibbs,2016-12-05T21:59:20Z,"@sdaftuar made sense to me, done",https://github.com/bitcoin/bitcoin/pull/9262#issuecomment-264991330,264991330,
laanwj,2016-12-06T06:09:05Z,">  but given that you currently have to restart your node in order to rebroadcast\n\nWhy is that so? You can't take the tx hex and send it through `sendrawtransaction` in this case?",https://github.com/bitcoin/bitcoin/pull/9262#issuecomment-265069249,265069249,
gmaxwell,2016-12-06T06:57:34Z,"> but given that you currently have to restart your node in order to rebroadcast\n\nHow about we fix that? (#9290)",https://github.com/bitcoin/bitcoin/pull/9262#issuecomment-265075841,265075841,
sdaftuar,2016-12-06T14:47:06Z,"@laanwj Regarding rebroadcast, I meant without doing something herculean -- I think with current behavior you'd have to first find the txid that was committed but then not broadcast (since the RPC call will just return failure), and then rebroadcast it using something like sendrawtransaction.  But anyway it should be moot after #9290, which I think makes sense.",https://github.com/bitcoin/bitcoin/pull/9262#issuecomment-265167748,265167748,
sdaftuar,2016-12-06T15:55:22Z,"Moderately-tested ACK 2da773454c02990665ecd1b03f60a6ab09bdf22d\n\nI tried to test this a couple different ways.  One simple demonstration of this PR's benefit was in a situation where you have 2 (confirmed) UTXO's in your wallet, and you're sending lots of small valued transactions to addresses outside your wallet.  Before this PR, the test would consistently fail at the 26th spend (with the ens",https://github.com/bitcoin/bitcoin/pull/9262#issuecomment-265187196,265187196,
instagibbs,2016-12-06T18:09:57Z,"Added init flag `-rejectlongwalletchains` which is by default `True`. When set to false only the preferential SelectCoinsMinConf behavior remains, with the last iteration accepting any length.",https://github.com/bitcoin/bitcoin/pull/9262#issuecomment-265225927,265225927,
gmaxwell,2016-12-07T03:03:40Z,This is the prettiest blue bike-shed ever.  ACK.,https://github.com/bitcoin/bitcoin/pull/9262#issuecomment-265342460,265342460,
sdaftuar,2016-12-08T21:02:24Z,"Note that if someone uses `-rejectlongwalletchains=0`, then in my simple use-case above (2 confirmed UTXOs that you're repeatedly making small spends from) this current code will unnecessarily produce a too-long-chain, because we don't try calling SCMC with nlimitancestors.\n\nAfter #9290 and #9302 I think this won't be a big deal, so given that we're defaulting this to true I don't think it mat",https://github.com/bitcoin/bitcoin/pull/9262#issuecomment-265854485,265854485,
instagibbs,2016-12-09T13:43:51Z,"Anticipating other changes to wallet https://github.com/bitcoin/bitcoin/pull/9302 https://github.com/bitcoin/bitcoin/pull/9290 , I changed the default for rejecting wallet transactions to false, and took the opportunity to put on a couple more layers of paint with renaming suggestions by @luke-jr , made a much simpler test that just checks for wallet coin preferential treatment, always have the wa",https://github.com/bitcoin/bitcoin/pull/9262#issuecomment-266016712,266016712,
gmaxwell,2016-12-10T21:23:37Z,@instagibbs Test fails-- otherwise looking fine to me.,https://github.com/bitcoin/bitcoin/pull/9262#issuecomment-266241108,266241108,
instagibbs,2016-12-10T21:43:01Z,"forgot to rename the param in description, fixed",https://github.com/bitcoin/bitcoin/pull/9262#issuecomment-266242095,266242095,
MarcoFalke,2016-12-11T14:30:49Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/9262#issuecomment-266285447,266285447,
morcos,2016-12-12T17:29:45Z,"Tested ACK 63c17b8\n\nHowever I still don't really love the test.  For instance the test doesn't work if you haven't set the ancestor limit lower than the default.  It's in general tricky to test behavior which depends on the vagaries of coin selection, but one simple improvement to this test would be to send the coins to a different nodes address so then we only have the change to consider for ",https://github.com/bitcoin/bitcoin/pull/9262#issuecomment-266495064,266495064,
gmaxwell,2016-12-13T01:01:54Z,ACK.,https://github.com/bitcoin/bitcoin/pull/9262#issuecomment-266603543,266603543,
instagibbs,2016-12-13T14:28:01Z,"@sipa Replaced SCMC mempool check with more generalized check in CTxMempool.\n\nre: default I disagree, I think that the default behavior here makes more sense unless the user has a way of probing for something like `GetBalanceWithinChainLimits()`.",https://github.com/bitcoin/bitcoin/pull/9262#issuecomment-266752017,266752017,
sipa,2016-12-19T08:02:15Z,"utACK 5882c099d9af6e8566d0bf46fb1da424a4373bf8, with one nit.",https://github.com/bitcoin/bitcoin/pull/9262#issuecomment-267903812,267903812,
instagibbs,2016-12-19T14:51:36Z,fixed @sipa nit,https://github.com/bitcoin/bitcoin/pull/9262#issuecomment-267982624,267982624,
laanwj,2016-12-19T15:47:30Z,"Travis doesn't agree with your change, it seems.",https://github.com/bitcoin/bitcoin/pull/9262#issuecomment-267997903,267997903,
instagibbs,2016-12-19T15:55:23Z,"@laanwj yes the logic made no sense, it will reject anything not in mempool rather than anything in mempool with too long a chain. Fixed.",https://github.com/bitcoin/bitcoin/pull/9262#issuecomment-268000141,268000141,
laanwj,2016-12-20T12:41:31Z,"Backported in #9382, removing label",https://github.com/bitcoin/bitcoin/pull/9262#issuecomment-268233947,268233947,
sdaftuar,2016-12-02T17:00:47Z,"Since we've already checked that pcoin is in the mempool, we don't need to do any of this -- we can just use the cached values.  (I think the only way the calculation you do below can fail is if the limits are violated during a reorg.) ",https://github.com/bitcoin/bitcoin/pull/9262#discussion_r90679559,90679559,src/wallet/wallet.cpp
sdaftuar,2016-12-02T21:28:52Z,nit: add documentation to this function that the tx must be in the mempool in order to call?,https://github.com/bitcoin/bitcoin/pull/9262#discussion_r90723028,90723028,src/wallet/wallet.h
sdaftuar,2016-12-02T21:33:15Z,Perhaps worth a comment here that we're assuming `AvailableCoins()` has already filtered out any unconfirmed and not-in-mempool coins?,https://github.com/bitcoin/bitcoin/pull/9262#discussion_r90723761,90723761,src/wallet/wallet.cpp
sdaftuar,2016-12-02T21:36:51Z,"nit: perhaps this comment should be ""Lastly, ensure this tx will pass the mempool's chain limits""",https://github.com/bitcoin/bitcoin/pull/9262#discussion_r90724255,90724255,src/wallet/wallet.cpp
sdaftuar,2016-12-02T21:38:55Z,"The errString filled in by CMPA might be useful for debugging issues (eg a LogPrintf() so that someone debugging could inspect), though i see we don't log any info about the transaction we tried to generate, so maybe not worth it...",https://github.com/bitcoin/bitcoin/pull/9262#discussion_r90724556,90724556,src/wallet/wallet.cpp
sdaftuar,2016-12-02T22:24:32Z,"I think you need the pcoin->InMempool() check you had before, in case you're looking at in-chain coins?",https://github.com/bitcoin/bitcoin/pull/9262#discussion_r90730979,90730979,src/wallet/wallet.cpp
instagibbs,2016-12-02T22:50:39Z,"Inequality here is wrong, should be `>=` I believe. This will never fire as-is. I should be able to easily test this fix.",https://github.com/bitcoin/bitcoin/pull/9262#discussion_r90734154,90734154,src/wallet/wallet.cpp
sdaftuar,2016-12-05T20:35:05Z,"@morcos and I were discussing, I think this would make more sense to limit based on both ancestor and descendant count, something like:\n\n```\nif (pcoin->InMempool() && max(pcoin->GetMempoolAncestorCount(), pcoin->GetMempoolDescendantCount()) >= nMaxChain)\n    continue;\n````\n\nOtherwise, if you have an unspent output with 1 ancestor but 25 descendants, you (needlessly) could fail on one",https://github.com/bitcoin/bitcoin/pull/9262#discussion_r90949725,90949725,src/wallet/wallet.cpp
sdaftuar,2016-12-05T20:39:53Z,"Instead of N/4, N/2, and N for the ancestor/chain limit passed in to SCMC, how about: 2, 4, N/2, N?  (And set N = min(limitancestorcount, limitdescendantcount), assuming we go with ancestor and descendant limiting as I mentioned in another comment.)  This way we first try utxo's from transactions that have no ancestors or descendants, which should provide a strong preference for not creating long ",https://github.com/bitcoin/bitcoin/pull/9262#discussion_r90950540,90950540,src/wallet/wallet.cpp
sipa,2016-12-06T06:47:15Z,Specifying const for a pass-by-value argument has no effect in the declaration. You can add const in the function definition if you want to protect yourself from accidentally modifying the variable even when the definition doesn't have const.,https://github.com/bitcoin/bitcoin/pull/9262#discussion_r91020541,91020541,src/wallet/wallet.h
sipa,2016-12-06T06:47:32Z,What if nLimitAncestors is less than 4?,https://github.com/bitcoin/bitcoin/pull/9262#discussion_r91020564,91020564,src/wallet/wallet.cpp
sipa,2016-12-06T06:49:47Z,"Can you abstract this fragment out, and turn it into a CTxMempool method?",https://github.com/bitcoin/bitcoin/pull/9262#discussion_r91020709,91020709,src/wallet/wallet.cpp
gmaxwell,2016-12-06T06:58:06Z,It calls Selectmincoins redundantly a bit... this doesn't seem like a big deal to me.,https://github.com/bitcoin/bitcoin/pull/9262#discussion_r91021322,91021322,src/wallet/wallet.cpp
instagibbs,2016-12-06T16:40:30Z,"I don't think is likely to save us many lines seeing as CMPA is called with these parameters exactly once elsewhere(and we'd still have to pass entry), and further this block may get removed if https://github.com/bitcoin/bitcoin/pull/9290 or something like it happens is merged.",https://github.com/bitcoin/bitcoin/pull/9262#discussion_r91117882,91117882,src/wallet/wallet.cpp
morcos,2016-12-06T17:12:04Z,"Overall I find this test a bit hard to follow.  I wonder if you could make it a bit clearer.\n\nIt does a good job of testing that the send failures don't leave funds unavailable (b/c the transaction isn't committed), but I'm not sure that's even what @gmaxwell wants, although I do think it is a good idea.   But it doesn't test the hopefully more optimal behavior of being less likely to create t",https://github.com/bitcoin/bitcoin/pull/9262#discussion_r91125212,91125212,qa/rpc-tests/wallet.py
instagibbs,2016-12-06T18:00:03Z,"Particularly I was interested in checking it errors out when, and how. So I build two long chains, start checking that sending will fail due to final checks when combining the chains, not ""lack of coins"", then once it gets long enough, both coins are already too long to include.\n\nThis test might be too obscure/specific, but it helped convince me that the code is doing what I wanted it to do. I",https://github.com/bitcoin/bitcoin/pull/9262#discussion_r91134993,91134993,qa/rpc-tests/wallet.py
gmaxwell,2016-12-06T18:26:30Z,So now when nLimitAncestors is set to 3 it will violate it here?,https://github.com/bitcoin/bitcoin/pull/9262#discussion_r91139948,91139948,src/wallet/wallet.cpp
instagibbs,2016-12-06T18:29:16Z,"Perhaps just pick larger denominators? n/10, n/5, n/2, n(or inf).",https://github.com/bitcoin/bitcoin/pull/9262#discussion_r91140477,91140477,src/wallet/wallet.cpp
sdaftuar,2016-12-06T18:49:43Z,"@gmaxwell We're already not guaranteed to find an optimal spend, this is just best-efforts anyway, so in my opinion it's not worth trying to optimize further for users using unusual values of these policy limits, which we already discourage changes to by hiding away in help-debug.\n\nAt any rate I think having explicit small values here is overall a win, in case someone were using non-default ar",https://github.com/bitcoin/bitcoin/pull/9262#discussion_r91144763,91144763,src/wallet/wallet.cpp
gmaxwell,2016-12-06T19:33:16Z,"0, (N+1)/4, (N+1)/2, N (or inf)   gives all unique results for everything except 1 and 2... so the user would waste some computation for 1,2.",https://github.com/bitcoin/bitcoin/pull/9262#discussion_r91154197,91154197,src/wallet/wallet.cpp
gmaxwell,2016-12-06T21:16:46Z,"Restating my suggestion:  It's better to have more small number attempts because the large attempts will intermix chains and trash your short chains.  So  min(2,limit/4), min(4, limit/3), limit/2, limit would be a better pick... for example",https://github.com/bitcoin/bitcoin/pull/9262#discussion_r91172856,91172856,src/wallet/wallet.cpp
morcos,2016-12-06T21:19:01Z,ok sounds good to me,https://github.com/bitcoin/bitcoin/pull/9262#discussion_r91173373,91173373,src/wallet/wallet.cpp
instagibbs,2016-12-06T21:38:07Z,done,https://github.com/bitcoin/bitcoin/pull/9262#discussion_r91177265,91177265,src/wallet/wallet.cpp
luke-jr,2016-12-09T00:48:55Z,These seem like they would be more appropriate on CTxMemPool?,https://github.com/bitcoin/bitcoin/pull/9262#discussion_r91640237,91640237,src/wallet/wallet.cpp
luke-jr,2016-12-09T02:20:53Z,Why would we compare the descendant count to the max *ancestors*? Shouldn't it be compared to max descendants?,https://github.com/bitcoin/bitcoin/pull/9262#discussion_r91649003,91649003,src/wallet/wallet.cpp
luke-jr,2016-12-09T02:22:30Z,Probably should capitalise the 'R' in the var name.,https://github.com/bitcoin/bitcoin/pull/9262#discussion_r91649184,91649184,src/wallet/wallet.cpp
luke-jr,2016-12-09T02:23:23Z,"Shouldn't `nLimitAncestors` here be `(nLimitAncestors - 1)`, because otherwise the new transaction would be 1 beyond the limit?",https://github.com/bitcoin/bitcoin/pull/9262#discussion_r91649251,91649251,src/wallet/wallet.cpp
luke-jr,2016-12-09T02:23:56Z,"Even if `frejectLongChains` is set, shouldn't we prefer coins <nLimitAncestors when possible?",https://github.com/bitcoin/bitcoin/pull/9262#discussion_r91649323,91649323,src/wallet/wallet.cpp
luke-jr,2016-12-09T02:26:11Z,"Might be best to have the default const, variable, and argument be more closely matched.\n\nSuggest `DEFAULT_WALLET_REJECT_LONG_CHAINS`, `fRejectLongChains`, and `-walletrejectlongchains`",https://github.com/bitcoin/bitcoin/pull/9262#discussion_r91649505,91649505,src/wallet/wallet.cpp
luke-jr,2016-12-09T02:29:56Z,"Might make sense to make a `bool CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, std::string &errString, bool fSearchForParents = true) const;` for this common code.\n\nOTOH, we should probably split the policy logic out of ATMP, so this refactoring may not make sense long-term.",https://github.com/bitcoin/bitcoin/pull/9262#discussion_r91649802,91649802,src/wallet/wallet.cpp
instagibbs,2016-12-09T12:42:28Z,"misnomer, nMaxAncestors is the minimum of the two parameters. Will fix.",https://github.com/bitcoin/bitcoin/pull/9262#discussion_r91709459,91709459,src/wallet/wallet.cpp
instagibbs,2016-12-09T12:58:43Z,"the count counts the coin itself in the chain length, so I think it's right as-is. `>=` is the check to reject.",https://github.com/bitcoin/bitcoin/pull/9262#discussion_r91711390,91711390,src/wallet/wallet.cpp
MarcoFalke,2016-12-11T14:25:17Z,I don't think it makes sense to expose such a detail to every user. (Note that all the `-limit<whatever>` options are only displayed to advanced users.),https://github.com/bitcoin/bitcoin/pull/9262#discussion_r91856842,91856842,src/wallet/wallet.cpp
MarcoFalke,2016-12-11T14:30:14Z,"In light of search for a general solution to the problem, you might want to consider introducing an option that makes the wallet ignore whatever mempool policies are in place right now.\n\nWhen this option is enabled, we get the current behavior, i.e. transactions might not be accepted to the mempool and might not be relayed. However, when the option is disabled and the mempool policy is conside",https://github.com/bitcoin/bitcoin/pull/9262#discussion_r91856947,91856947,src/wallet/wallet.cpp
instagibbs,2016-12-11T17:50:25Z,"I believe the consensus is to have all temporary failures return a txid, and rebroadcast the transaction when it can, entering it into the mempool.\n\nre:detailing to every user, fair enough. I've moved it under `showDebug`, which I believe is what you meant.",https://github.com/bitcoin/bitcoin/pull/9262#discussion_r91860881,91860881,src/wallet/wallet.cpp
sipa,2016-12-13T01:13:44Z,"Given that we don't hold `mempool.cs` here, the transaction could be removed from the mempool in between the `pcoin->InMempool()` and `pcoin->GetMempoolAncestorCount()` calls, causing a segfault in the latter. Please abstract this whole conditional out into a method on `CTxMempool`, which takes the limit value and the txid, and returns whether the transaction is in the pool and satisfies the limit",https://github.com/bitcoin/bitcoin/pull/9262#discussion_r92078687,92078687,src/wallet/wallet.cpp
sipa,2016-12-13T01:15:42Z,"Agree with @luke-jr, but I think we need something higher-level anyway (see further).",https://github.com/bitcoin/bitcoin/pull/9262#discussion_r92078915,92078915,src/wallet/wallet.cpp
sipa,2016-12-13T01:20:53Z,"I don't care that it's called only once - this just doesn't seem like code that belongs in the wallet (which shouldn't need to know about the mempool's policy limits as much as possible). Having it abstracted probably makes it usable for other purposes too.\n\nAlso, #9290 does not mean we can't do belt and suspender checks to avoid producing long chains. Not adding such a transaction to the wall",https://github.com/bitcoin/bitcoin/pull/9262#discussion_r92079514,92079514,src/wallet/wallet.cpp
sipa,2016-12-13T01:21:27Z,Why false?,https://github.com/bitcoin/bitcoin/pull/9262#discussion_r92079574,92079574,src/wallet/wallet.h
morcos,2016-12-13T14:33:19Z,Should we call this something other than **Coin**WithinLimit?  Seems like coins are not something that the mempool is aware of.,https://github.com/bitcoin/bitcoin/pull/9262#discussion_r92179493,92179493,src/txmempool.h
instagibbs,2016-12-13T14:36:48Z,`TransactionWithinChainLimit`?,https://github.com/bitcoin/bitcoin/pull/9262#discussion_r92180310,92180310,src/txmempool.h
MarcoFalke,2016-12-14T13:21:38Z,"It is the least change in behavior, so makes sense in case this is still considered for backport.",https://github.com/bitcoin/bitcoin/pull/9262#discussion_r92390777,92390777,src/wallet/wallet.h
sipa,2016-12-19T07:56:53Z,"You're doing 3 map lookups here. What about\n```c++\nauto it = mapTx.find(txid);\nreturn it != mapTx.end() && it->GetCountWithAncestors() < chainLimit &&\n    it->GetCountWithDescendants() < chainLimit;\n```\n",https://github.com/bitcoin/bitcoin/pull/9262#discussion_r92982566,92982566,src/txmempool.cpp
TheBlueMatt,2016-12-19T21:28:19Z,nit: you forgot to const-ify the first two ints which you did in the .cpp,https://github.com/bitcoin/bitcoin/pull/9262#discussion_r93123140,93123140,src/wallet/wallet.h
TheBlueMatt,2016-12-19T21:46:07Z,"Agreed, though in the interest of backporting and getting 0.13.2 out cleaing up the interface here probably isnt the priority. Lets do it in another pr.",https://github.com/bitcoin/bitcoin/pull/9262#discussion_r93126373,93126373,src/wallet/wallet.cpp
TheBlueMatt,2016-12-19T22:07:31Z,"Note that by not filling in the sigOpsCost here we dont have that information for the virtual transaction size, so you could still run over the limit here. I don't think its a big deal, but we should fix when we clean things up in 0.14 as suggested two lines up.",https://github.com/bitcoin/bitcoin/pull/9262#discussion_r93130302,93130302,src/wallet/wallet.cpp
gmaxwell,2016-12-20T01:42:38Z,This really should be indented.,https://github.com/bitcoin/bitcoin/pull/9262#discussion_r93157542,93157542,src/txmempool.cpp
