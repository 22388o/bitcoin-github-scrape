[
  {
    "sha": "1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTc5YzA1NWNkMzBkMjFiYTVmOGM3ZjgxZWY5MTFkNWQ0ZTI5NWE4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-06-12T19:23:02Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-02-17T16:42:00Z"
      },
      "message": "Split signrawtransaction into wallet and non-wallet\n\nSplits signrwatransaction into a wallet version (signrawtransactionwithwallet) and\nnon-wallet version (signrawtransactionwithkey). signrawtransaction is marked as DEPRECATED\nand will call the right signrawtransaction* command as per the parameters in order to\nmaintain compatibility.\n\nUpdated signrawtransactions test to use new RPCs",
      "tree": {
        "sha": "22c28017f71d4f9b0dddb77cc41e733095ec84a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22c28017f71d4f9b0dddb77cc41e733095ec84a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800"
      }
    ],
    "stats": {
      "total": 594,
      "additions": 380,
      "deletions": 214
    },
    "files": [
      {
        "sha": "ac822d6c5e0b29102db645049a8cf99607960d76",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -132,6 +132,7 @@ BITCOIN_CORE_H = \\\n   rpc/protocol.h \\\n   rpc/safemode.h \\\n   rpc/server.h \\\n+  rpc/rawtransaction.h \\\n   rpc/register.h \\\n   rpc/util.h \\\n   scheduler.h \\"
      },
      {
        "sha": "1aa4de03ca2dd0bf144267632ed9ee33520affcc",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -70,6 +70,7 @@ const QStringList historyFilter = QStringList()\n     << \"importmulti\"\n     << \"signmessagewithprivkey\"\n     << \"signrawtransaction\"\n+    << \"signrawtransactionwithkey\"\n     << \"walletpassphrase\"\n     << \"walletpassphrasechange\"\n     << \"encryptwallet\";\n@@ -624,7 +625,7 @@ void RPCConsole::setClientModel(ClientModel *model)\n         connect(model->getPeerTableModel(), SIGNAL(layoutChanged()), this, SLOT(peerLayoutChanged()));\n         // peer table signal handling - cache selected node ids\n         connect(model->getPeerTableModel(), SIGNAL(layoutAboutToBeChanged()), this, SLOT(peerLayoutAboutToChange()));\n-        \n+\n         // set up ban table\n         ui->banlistWidget->setModel(model->getBanTableModel());\n         ui->banlistWidget->verticalHeader()->hide();\n@@ -772,7 +773,7 @@ void RPCConsole::clear(bool clearHistory)\n #else\n     QString clsKey = \"Ctrl-L\";\n #endif\n-\t \n+\n     message(CMD_REPLY, (tr(\"Welcome to the %1 RPC console.\").arg(tr(PACKAGE_NAME)) + \"<br>\" +\n                         tr(\"Use up and down arrows to navigate history, and %1 to clear screen.\").arg(\"<b>\"+clsKey+\"</b>\") + \"<br>\" +\n                         tr(\"Type %1 for an overview of available commands.\").arg(\"<b>help</b>\") + \"<br>\" +\n@@ -1144,7 +1145,7 @@ void RPCConsole::disconnectSelectedNode()\n {\n     if(!g_connman)\n         return;\n-    \n+\n     // Get selected peer addresses\n     QList<QModelIndex> nodes = GUIUtil::getEntryData(ui->peerWidget, PeerTableModel::NetNodeId);\n     for(int i = 0; i < nodes.count(); i++)\n@@ -1161,7 +1162,7 @@ void RPCConsole::banSelectedNode(int bantime)\n {\n     if (!clientModel || !g_connman)\n         return;\n-    \n+\n     // Get selected peer addresses\n     QList<QModelIndex> nodes = GUIUtil::getEntryData(ui->peerWidget, PeerTableModel::NetNodeId);\n     for(int i = 0; i < nodes.count(); i++)"
      },
      {
        "sha": "9d0e0b97d16c2decf2bb06c9554ed5eb636d91c6",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -82,8 +82,8 @@ void RPCNestedTests::rpcNestedTests()\n     QVERIFY(filtered == \"signmessagewithprivkey(\u2026)\");\n     RPCConsole::RPCParseCommandLine(result, \"signmessagewithprivkey abc,def\", false, &filtered);\n     QVERIFY(filtered == \"signmessagewithprivkey(\u2026)\");\n-    RPCConsole::RPCParseCommandLine(result, \"signrawtransaction(abc)\", false, &filtered);\n-    QVERIFY(filtered == \"signrawtransaction(\u2026)\");\n+    RPCConsole::RPCParseCommandLine(result, \"signrawtransactionwithkey(abc)\", false, &filtered);\n+    QVERIFY(filtered == \"signrawtransactionwithkey(\u2026)\");\n     RPCConsole::RPCParseCommandLine(result, \"walletpassphrase(help())\", false, &filtered);\n     QVERIFY(filtered == \"walletpassphrase(\u2026)\");\n     RPCConsole::RPCParseCommandLine(result, \"walletpassphrasechange(help(walletpassphrasechange(abc)))\", false, &filtered);"
      },
      {
        "sha": "a95ea0cf92ecad52adb72f863f11980172228e94",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -94,6 +94,9 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"decoderawtransaction\", 1, \"iswitness\" },\n     { \"signrawtransaction\", 1, \"prevtxs\" },\n     { \"signrawtransaction\", 2, \"privkeys\" },\n+    { \"signrawtransactionwithkey\", 1, \"privkeys\" },\n+    { \"signrawtransactionwithkey\", 2, \"prevtxs\" },\n+    { \"signrawtransactionwithwallet\", 1, \"prevtxs\" },\n     { \"sendrawtransaction\", 1, \"allowhighfees\" },\n     { \"combinerawtransaction\", 0, \"txs\" },\n     { \"fundrawtransaction\", 1, \"options\" },"
      },
      {
        "sha": "813afde4db4ee9116528486724e0aaeb64b59e72",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 217,
        "deletions": 134,
        "changes": 351,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -17,6 +17,7 @@\n #include <policy/policy.h>\n #include <policy/rbf.h>\n #include <primitives/transaction.h>\n+#include <rpc/rawtransaction.h>\n #include <rpc/safemode.h>\n #include <rpc/server.h>\n #include <script/script.h>\n@@ -28,7 +29,6 @@\n #include <utilstrencodings.h>\n #ifdef ENABLE_WALLET\n #include <wallet/rpcwallet.h>\n-#include <wallet/wallet.h>\n #endif\n \n #include <future>\n@@ -672,88 +672,13 @@ UniValue combinerawtransaction(const JSONRPCRequest& request)\n     return EncodeHexTx(mergedTx);\n }\n \n-UniValue signrawtransaction(const JSONRPCRequest& request)\n+UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival, CBasicKeyStore *keystore, bool is_temp_keystore, const UniValue& hashType)\n {\n-#ifdef ENABLE_WALLET\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-#endif\n-\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n-        throw std::runtime_error(\n-            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n-            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n-            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n-            \"this transaction depends on but may not yet be in the block chain.\\n\"\n-            \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n-            \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n-#ifdef ENABLE_WALLET\n-            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n-#endif\n-\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n-            \"2. \\\"prevtxs\\\"       (string, optional) A json array of previous dependent transaction outputs\\n\"\n-            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n-            \"       {\\n\"\n-            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n-            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n-            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n-            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n-            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n-            \"       }\\n\"\n-            \"       ,...\\n\"\n-            \"    ]\\n\"\n-            \"3. \\\"privkeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n-            \"    [                  (json array of strings, or 'null' if none provided)\\n\"\n-            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n-            \"       \\\"ALL\\\"\\n\"\n-            \"       \\\"NONE\\\"\\n\"\n-            \"       \\\"SINGLE\\\"\\n\"\n-            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n-\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n-            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n-            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n-            \"    {\\n\"\n-            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n-            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n-            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n-            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n-            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n-            \"    }\\n\"\n-            \"    ,...\\n\"\n-            \"  ]\\n\"\n-            \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\")\n-            + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n-        );\n-\n-    ObserveSafeMode();\n-#ifdef ENABLE_WALLET\n-    LOCK2(cs_main, pwallet ? &pwallet->cs_wallet : nullptr);\n-#else\n-    LOCK(cs_main);\n-#endif\n-    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_str(), true))\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n-\n     // Fetch previous transactions (inputs):\n     CCoinsView viewDummy;\n     CCoinsViewCache view(&viewDummy);\n     {\n-        LOCK(mempool.cs);\n+        LOCK2(cs_main, mempool.cs);\n         CCoinsViewCache &viewChain = *pcoinsTip;\n         CCoinsViewMemPool viewMempool(&viewChain, mempool);\n         view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n@@ -765,36 +690,14 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n         view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n     }\n \n-    bool fGivenKeys = false;\n-    CBasicKeyStore tempKeystore;\n-    if (!request.params[2].isNull()) {\n-        fGivenKeys = true;\n-        UniValue keys = request.params[2].get_array();\n-        for (unsigned int idx = 0; idx < keys.size(); idx++) {\n-            UniValue k = keys[idx];\n-            CBitcoinSecret vchSecret;\n-            bool fGood = vchSecret.SetString(k.get_str());\n-            if (!fGood)\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n-            CKey key = vchSecret.GetKey();\n-            if (!key.IsValid())\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n-            tempKeystore.AddKey(key);\n-        }\n-    }\n-#ifdef ENABLE_WALLET\n-    else if (pwallet) {\n-        EnsureWalletIsUnlocked(pwallet);\n-    }\n-#endif\n-\n     // Add previous txouts given in the RPC call:\n-    if (!request.params[1].isNull()) {\n-        UniValue prevTxs = request.params[1].get_array();\n-        for (unsigned int idx = 0; idx < prevTxs.size(); idx++) {\n+    if (!prevTxsUnival.isNull()) {\n+        UniValue prevTxs = prevTxsUnival.get_array();\n+        for (unsigned int idx = 0; idx < prevTxs.size(); ++idx) {\n             const UniValue& p = prevTxs[idx];\n-            if (!p.isObject())\n+            if (!p.isObject()) {\n                 throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"expected object with {\\\"txid'\\\",\\\"vout\\\",\\\"scriptPubKey\\\"}\");\n+            }\n \n             UniValue prevOut = p.get_obj();\n \n@@ -808,8 +711,9 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n             uint256 txid = ParseHashO(prevOut, \"txid\");\n \n             int nOut = find_value(prevOut, \"vout\").get_int();\n-            if (nOut < 0)\n+            if (nOut < 0) {\n                 throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"vout must be positive\");\n+            }\n \n             COutPoint out(txid, nOut);\n             std::vector<unsigned char> pkData(ParseHexO(prevOut, \"scriptPubKey\"));\n@@ -834,8 +738,8 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n             }\n \n             // if redeemScript given and not using the local wallet (private keys\n-            // given), add redeemScript to the tempKeystore so it can be signed:\n-            if (fGivenKeys && (scriptPubKey.IsPayToScriptHash() || scriptPubKey.IsPayToWitnessScriptHash())) {\n+            // given), add redeemScript to the keystore so it can be signed:\n+            if (is_temp_keystore && (scriptPubKey.IsPayToScriptHash() || scriptPubKey.IsPayToWitnessScriptHash())) {\n                 RPCTypeCheckObj(prevOut,\n                     {\n                         {\"txid\", UniValueType(UniValue::VSTR)},\n@@ -847,22 +751,16 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n                 if (!v.isNull()) {\n                     std::vector<unsigned char> rsData(ParseHexV(v, \"redeemScript\"));\n                     CScript redeemScript(rsData.begin(), rsData.end());\n-                    tempKeystore.AddCScript(redeemScript);\n+                    keystore->AddCScript(redeemScript);\n                     // Automatically also add the P2WSH wrapped version of the script (to deal with P2SH-P2WSH).\n-                    tempKeystore.AddCScript(GetScriptForWitness(redeemScript));\n+                    keystore->AddCScript(GetScriptForWitness(redeemScript));\n                 }\n             }\n         }\n     }\n \n-#ifdef ENABLE_WALLET\n-    const CKeyStore& keystore = ((fGivenKeys || !pwallet) ? tempKeystore : *pwallet);\n-#else\n-    const CKeyStore& keystore = tempKeystore;\n-#endif\n-\n     int nHashType = SIGHASH_ALL;\n-    if (!request.params[3].isNull()) {\n+    if (!hashType.isNull()) {\n         static std::map<std::string, int> mapSigHashValues = {\n             {std::string(\"ALL\"), int(SIGHASH_ALL)},\n             {std::string(\"ALL|ANYONECANPAY\"), int(SIGHASH_ALL|SIGHASH_ANYONECANPAY)},\n@@ -871,11 +769,12 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n             {std::string(\"SINGLE\"), int(SIGHASH_SINGLE)},\n             {std::string(\"SINGLE|ANYONECANPAY\"), int(SIGHASH_SINGLE|SIGHASH_ANYONECANPAY)},\n         };\n-        std::string strHashType = request.params[3].get_str();\n-        if (mapSigHashValues.count(strHashType))\n+        std::string strHashType = hashType.get_str();\n+        if (mapSigHashValues.count(strHashType)) {\n             nHashType = mapSigHashValues[strHashType];\n-        else\n+        } else {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid sighash param\");\n+        }\n     }\n \n     bool fHashSingle = ((nHashType & ~SIGHASH_ANYONECANPAY) == SIGHASH_SINGLE);\n@@ -899,8 +798,9 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n \n         SignatureData sigdata;\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n-        if (!fHashSingle || (i < mtx.vout.size()))\n-            ProduceSignature(MutableTransactionSignatureCreator(&keystore, &mtx, i, amount, nHashType), prevPubKey, sigdata);\n+        if (!fHashSingle || (i < mtx.vout.size())) {\n+            ProduceSignature(MutableTransactionSignatureCreator(keystore, &mtx, i, amount, nHashType), prevPubKey, sigdata);\n+        }\n         sigdata = CombineSignatures(prevPubKey, TransactionSignatureChecker(&txConst, i, amount), sigdata, DataFromTransaction(mtx, i));\n \n         UpdateTransaction(mtx, i, sigdata);\n@@ -927,6 +827,188 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"signrawtransactionwithkey \\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second argument is an array of base58-encoded private\\n\"\n+            \"keys that will be the only keys used to sign the transaction.\\n\"\n+            \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"                      (string, required) The transaction hex string\\n\"\n+            \"2. \\\"privkeys\\\"                       (string, required) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                               (json array of strings)\\n\"\n+            \"      \\\"privatekey\\\"                  (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"prevtxs\\\"                        (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [                              (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",               (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",     (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",     (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"                    (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",                  (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,          (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                      (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",              (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                   (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",          (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,               (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"              (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+    }\n+\n+    CBasicKeyStore keystore;\n+    const UniValue& keys = request.params[1].get_array();\n+    for (unsigned int idx = 0; idx < keys.size(); ++idx) {\n+        UniValue k = keys[idx];\n+        CBitcoinSecret vchSecret;\n+        if (!vchSecret.SetString(k.get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n+        }\n+        CKey key = vchSecret.GetKey();\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        }\n+        keystore.AddKey(key);\n+    }\n+\n+    return SignTransaction(mtx, request.params[2], &keystore, true, request.params[3]);\n+}\n+\n+UniValue signrawtransaction(const JSONRPCRequest& request)\n+{\n+#ifdef ENABLE_WALLET\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+#endif\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n+            \"\\nDEPRECATED. Sign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+            \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n+            \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n+#ifdef ENABLE_WALLET\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+#endif\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"privkeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings, or 'null' if none provided)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+        );\n+\n+    if (!IsDeprecatedRPCEnabled(\"signrawtransaction\")) {\n+        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"signrawtransaction is deprecated and will be fully removed in v0.18. \"\n+            \"To use signrawtransaction in v0.17, restart bitcoind with -deprecatedrpc=signrawtransaction.\\n\"\n+            \"Projects should transition to using signrawtransactionwithkey and signrawtransactionwithwallet before upgrading to v0.18\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    // Make a JSONRPCRequest to pass on to the right signrawtransaction* command\n+    JSONRPCRequest new_request;\n+    new_request.id = request.id;\n+    new_request.params.setArray();\n+\n+    // For signing with private keys\n+    if (!request.params[2].isNull()) {\n+        new_request.params.push_back(request.params[0]);\n+        // Note: the prevtxs and privkeys are reversed for signrawtransactionwithkey\n+        new_request.params.push_back(request.params[2]);\n+        new_request.params.push_back(request.params[1]);\n+        new_request.params.push_back(request.params[3]);\n+        return signrawtransactionwithkey(new_request);\n+    }\n+    // Otherwise sign with the wallet which does not take a privkeys parameter\n+#ifdef ENABLE_WALLET\n+    else {\n+        new_request.params.push_back(request.params[0]);\n+        new_request.params.push_back(request.params[1]);\n+        new_request.params.push_back(request.params[3]);\n+        return signrawtransactionwithwallet(new_request);\n+    }\n+#endif\n+    // If we have made it this far, then wallet is disabled and no private keys were given, so fail here.\n+    throw JSONRPCError(RPC_INVALID_PARAMETER, \"No private keys available.\");\n+}\n+\n UniValue sendrawtransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n@@ -1025,18 +1107,19 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n }\n \n static const CRPCCommand commands[] =\n-{ //  category              name                      actor (function)         argNames\n-  //  --------------------- ------------------------  -----------------------  ----------\n-    { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      {\"txid\",\"verbose\",\"blockhash\"} },\n-    { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   {\"inputs\",\"outputs\",\"locktime\",\"replaceable\"} },\n-    { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   {\"hexstring\",\"iswitness\"} },\n-    { \"rawtransactions\",    \"decodescript\",           &decodescript,           {\"hexstring\"} },\n-    { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     {\"hexstring\",\"allowhighfees\"} },\n-    { \"rawtransactions\",    \"combinerawtransaction\",  &combinerawtransaction,  {\"txs\"} },\n-    { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     {\"hexstring\",\"prevtxs\",\"privkeys\",\"sighashtype\"} }, /* uses wallet if enabled */\n-\n-    { \"blockchain\",         \"gettxoutproof\",          &gettxoutproof,          {\"txids\", \"blockhash\"} },\n-    { \"blockchain\",         \"verifytxoutproof\",       &verifytxoutproof,       {\"proof\"} },\n+{ //  category              name                            actor (function)            argNames\n+  //  --------------------- ------------------------        -----------------------     ----------\n+    { \"rawtransactions\",    \"getrawtransaction\",            &getrawtransaction,         {\"txid\",\"verbose\",\"blockhash\"} },\n+    { \"rawtransactions\",    \"createrawtransaction\",         &createrawtransaction,      {\"inputs\",\"outputs\",\"locktime\",\"replaceable\"} },\n+    { \"rawtransactions\",    \"decoderawtransaction\",         &decoderawtransaction,      {\"hexstring\",\"iswitness\"} },\n+    { \"rawtransactions\",    \"decodescript\",                 &decodescript,              {\"hexstring\"} },\n+    { \"rawtransactions\",    \"sendrawtransaction\",           &sendrawtransaction,        {\"hexstring\",\"allowhighfees\"} },\n+    { \"rawtransactions\",    \"combinerawtransaction\",        &combinerawtransaction,     {\"txs\"} },\n+    { \"rawtransactions\",    \"signrawtransaction\",           &signrawtransaction,        {\"hexstring\",\"prevtxs\",\"privkeys\",\"sighashtype\"} }, /* uses wallet if enabled */\n+    { \"rawtransactions\",    \"signrawtransactionwithkey\",    &signrawtransactionwithkey, {\"hexstring\",\"privkeys\",\"prevtxs\",\"sighashtype\"} },\n+\n+    { \"blockchain\",         \"gettxoutproof\",                &gettxoutproof,             {\"txids\", \"blockhash\"} },\n+    { \"blockchain\",         \"verifytxoutproof\",             &verifytxoutproof,          {\"proof\"} },\n };\n \n void RegisterRawTransactionRPCCommands(CRPCTable &t)"
      },
      {
        "sha": "2186c1d5e715dc1b5fd574e47784db82620b1ee1",
        "filename": "src/rpc/rawtransaction.h",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/rpc/rawtransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/rpc/rawtransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.h?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -0,0 +1,15 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_RAWTRANSACTION_H\n+#define BITCOIN_RPC_RAWTRANSACTION_H\n+\n+class CBasicKeyStore;\n+class CMutableTransaction;\n+class UniValue;\n+\n+/** Sign a transaction with the given keystore and previous transactions */\n+UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxs, CBasicKeyStore *keystore, bool tempKeystore, const UniValue& hashType);\n+\n+#endif // BITCOIN_RPC_RAWTRANSACTION_H"
      },
      {
        "sha": "108c1a063e01fcbd956d1655d867da9e00261ffc",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 10,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -69,14 +69,6 @@ BOOST_AUTO_TEST_CASE(rpc_rawparams)\n     BOOST_CHECK_NO_THROW(r = CallRPC(std::string(\"decoderawtransaction \")+rawtx+\" false\"));\n     BOOST_CHECK_THROW(r = CallRPC(std::string(\"decoderawtransaction \")+rawtx+\" false extra\"), std::runtime_error);\n \n-    BOOST_CHECK_THROW(CallRPC(\"signrawtransaction\"), std::runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"signrawtransaction null\"), std::runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"signrawtransaction ff00\"), std::runtime_error);\n-    BOOST_CHECK_NO_THROW(CallRPC(std::string(\"signrawtransaction \")+rawtx));\n-    BOOST_CHECK_NO_THROW(CallRPC(std::string(\"signrawtransaction \")+rawtx+\" null null NONE|ANYONECANPAY\"));\n-    BOOST_CHECK_NO_THROW(CallRPC(std::string(\"signrawtransaction \")+rawtx+\" [] [] NONE|ANYONECANPAY\"));\n-    BOOST_CHECK_THROW(CallRPC(std::string(\"signrawtransaction \")+rawtx+\" null null badenum\"), std::runtime_error);\n-\n     // Only check failure cases for sendrawtransaction, there's no network to send to...\n     BOOST_CHECK_THROW(CallRPC(\"sendrawtransaction\"), std::runtime_error);\n     BOOST_CHECK_THROW(CallRPC(\"sendrawtransaction null\"), std::runtime_error);\n@@ -119,9 +111,9 @@ BOOST_AUTO_TEST_CASE(rpc_rawsign)\n     std::string notsigned = r.get_str();\n     std::string privkey1 = \"\\\"KzsXybp9jX64P5ekX1KUxRQ79Jht9uzW7LorgwE65i5rWACL6LQe\\\"\";\n     std::string privkey2 = \"\\\"Kyhdf5LuKTRx4ge69ybABsiUAWjVRK4XGxAKk2FQLp2HjGMy87Z4\\\"\";\n-    r = CallRPC(std::string(\"signrawtransaction \")+notsigned+\" \"+prevout+\" \"+\"[]\");\n+    r = CallRPC(std::string(\"signrawtransactionwithkey \")+notsigned+\" [] \"+prevout);\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == false);\n-    r = CallRPC(std::string(\"signrawtransaction \")+notsigned+\" \"+prevout+\" \"+\"[\"+privkey1+\",\"+privkey2+\"]\");\n+    r = CallRPC(std::string(\"signrawtransactionwithkey \")+notsigned+\" [\"+privkey1+\",\"+privkey2+\"] \"+prevout);\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == true);\n }\n "
      },
      {
        "sha": "8b95c56a5fc84cd270ab107d362bfda3d8b5623a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 127,
        "deletions": 56,
        "changes": 183,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -16,6 +16,7 @@\n #include <policy/policy.h>\n #include <policy/rbf.h>\n #include <rpc/mining.h>\n+#include <rpc/rawtransaction.h>\n #include <rpc/safemode.h>\n #include <rpc/server.h>\n #include <rpc/util.h>\n@@ -3236,6 +3237,75 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"signrawtransactionwithwallet \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"                      (string, required) The transaction hex string\\n\"\n+            \"2. \\\"prevtxs\\\"                        (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [                              (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",               (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",     (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",     (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"sighashtype\\\"                    (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",                  (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,          (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                      (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",              (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                   (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",          (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,               (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"              (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+    }\n+\n+    // Sign the transaction\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    return SignTransaction(mtx, request.params[1], pwallet, false, request.params[2]);\n+}\n+\n UniValue bumpfee(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n@@ -3731,62 +3801,63 @@ extern UniValue importmulti(const JSONRPCRequest& request);\n extern UniValue rescanblockchain(const JSONRPCRequest& request);\n \n static const CRPCCommand commands[] =\n-{ //  category              name                        actor (function)           argNames\n-    //  --------------------- ------------------------    -----------------------  ----------\n-    { \"rawtransactions\",    \"fundrawtransaction\",       &fundrawtransaction,       {\"hexstring\",\"options\",\"iswitness\"} },\n-    { \"hidden\",             \"resendwallettransactions\", &resendwallettransactions, {} },\n-    { \"wallet\",             \"abandontransaction\",       &abandontransaction,       {\"txid\"} },\n-    { \"wallet\",             \"abortrescan\",              &abortrescan,              {} },\n-    { \"wallet\",             \"addmultisigaddress\",       &addmultisigaddress,       {\"nrequired\",\"keys\",\"account\",\"address_type\"} },\n-    { \"hidden\",             \"addwitnessaddress\",        &addwitnessaddress,        {\"address\",\"p2sh\"} },\n-    { \"wallet\",             \"backupwallet\",             &backupwallet,             {\"destination\"} },\n-    { \"wallet\",             \"bumpfee\",                  &bumpfee,                  {\"txid\", \"options\"} },\n-    { \"wallet\",             \"dumpprivkey\",              &dumpprivkey,              {\"address\"}  },\n-    { \"wallet\",             \"dumpwallet\",               &dumpwallet,               {\"filename\"} },\n-    { \"wallet\",             \"encryptwallet\",            &encryptwallet,            {\"passphrase\"} },\n-    { \"wallet\",             \"getaccountaddress\",        &getaccountaddress,        {\"account\"} },\n-    { \"wallet\",             \"getaccount\",               &getaccount,               {\"address\"} },\n-    { \"wallet\",             \"getaddressesbyaccount\",    &getaddressesbyaccount,    {\"account\"} },\n-    { \"wallet\",             \"getaddressinfo\",           &getaddressinfo,           {\"address\"} },\n-    { \"wallet\",             \"getbalance\",               &getbalance,               {\"account\",\"minconf\",\"include_watchonly\"} },\n-    { \"wallet\",             \"getnewaddress\",            &getnewaddress,            {\"account\",\"address_type\"} },\n-    { \"wallet\",             \"getrawchangeaddress\",      &getrawchangeaddress,      {\"address_type\"} },\n-    { \"wallet\",             \"getreceivedbyaccount\",     &getreceivedbyaccount,     {\"account\",\"minconf\"} },\n-    { \"wallet\",             \"getreceivedbyaddress\",     &getreceivedbyaddress,     {\"address\",\"minconf\"} },\n-    { \"wallet\",             \"gettransaction\",           &gettransaction,           {\"txid\",\"include_watchonly\"} },\n-    { \"wallet\",             \"getunconfirmedbalance\",    &getunconfirmedbalance,    {} },\n-    { \"wallet\",             \"getwalletinfo\",            &getwalletinfo,            {} },\n-    { \"wallet\",             \"importmulti\",              &importmulti,              {\"requests\",\"options\"} },\n-    { \"wallet\",             \"importprivkey\",            &importprivkey,            {\"privkey\",\"label\",\"rescan\"} },\n-    { \"wallet\",             \"importwallet\",             &importwallet,             {\"filename\"} },\n-    { \"wallet\",             \"importaddress\",            &importaddress,            {\"address\",\"label\",\"rescan\",\"p2sh\"} },\n-    { \"wallet\",             \"importprunedfunds\",        &importprunedfunds,        {\"rawtransaction\",\"txoutproof\"} },\n-    { \"wallet\",             \"importpubkey\",             &importpubkey,             {\"pubkey\",\"label\",\"rescan\"} },\n-    { \"wallet\",             \"keypoolrefill\",            &keypoolrefill,            {\"newsize\"} },\n-    { \"wallet\",             \"listaccounts\",             &listaccounts,             {\"minconf\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listaddressgroupings\",     &listaddressgroupings,     {} },\n-    { \"wallet\",             \"listlockunspent\",          &listlockunspent,          {} },\n-    { \"wallet\",             \"listreceivedbyaccount\",    &listreceivedbyaccount,    {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listreceivedbyaddress\",    &listreceivedbyaddress,    {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listsinceblock\",           &listsinceblock,           {\"blockhash\",\"target_confirmations\",\"include_watchonly\",\"include_removed\"} },\n-    { \"wallet\",             \"listtransactions\",         &listtransactions,         {\"account\",\"count\",\"skip\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listunspent\",              &listunspent,              {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\",\"query_options\"} },\n-    { \"wallet\",             \"listwallets\",              &listwallets,              {} },\n-    { \"wallet\",             \"lockunspent\",              &lockunspent,              {\"unlock\",\"transactions\"} },\n-    { \"wallet\",             \"move\",                     &movecmd,                  {\"fromaccount\",\"toaccount\",\"amount\",\"minconf\",\"comment\"} },\n-    { \"wallet\",             \"sendfrom\",                 &sendfrom,                 {\"fromaccount\",\"toaddress\",\"amount\",\"minconf\",\"comment\",\"comment_to\"} },\n-    { \"wallet\",             \"sendmany\",                 &sendmany,                 {\"fromaccount\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n-    { \"wallet\",             \"sendtoaddress\",            &sendtoaddress,            {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n-    { \"wallet\",             \"setaccount\",               &setaccount,               {\"address\",\"account\"} },\n-    { \"wallet\",             \"settxfee\",                 &settxfee,                 {\"amount\"} },\n-    { \"wallet\",             \"signmessage\",              &signmessage,              {\"address\",\"message\"} },\n-    { \"wallet\",             \"walletlock\",               &walletlock,               {} },\n-    { \"wallet\",             \"walletpassphrasechange\",   &walletpassphrasechange,   {\"oldpassphrase\",\"newpassphrase\"} },\n-    { \"wallet\",             \"walletpassphrase\",         &walletpassphrase,         {\"passphrase\",\"timeout\"} },\n-    { \"wallet\",             \"removeprunedfunds\",        &removeprunedfunds,        {\"txid\"} },\n-    { \"wallet\",             \"rescanblockchain\",         &rescanblockchain,         {\"start_height\", \"stop_height\"} },\n-\n-    { \"generating\",         \"generate\",                 &generate,                 {\"nblocks\",\"maxtries\"} },\n+{ //  category              name                                actor (function)                argNames\n+    //  --------------------- ------------------------          -----------------------         ----------\n+    { \"rawtransactions\",    \"fundrawtransaction\",               &fundrawtransaction,            {\"hexstring\",\"options\",\"iswitness\"} },\n+    { \"hidden\",             \"resendwallettransactions\",         &resendwallettransactions,      {} },\n+    { \"wallet\",             \"abandontransaction\",               &abandontransaction,            {\"txid\"} },\n+    { \"wallet\",             \"abortrescan\",                      &abortrescan,                   {} },\n+    { \"wallet\",             \"addmultisigaddress\",               &addmultisigaddress,            {\"nrequired\",\"keys\",\"account\",\"address_type\"} },\n+    { \"hidden\",             \"addwitnessaddress\",                &addwitnessaddress,             {\"address\",\"p2sh\"} },\n+    { \"wallet\",             \"backupwallet\",                     &backupwallet,                  {\"destination\"} },\n+    { \"wallet\",             \"bumpfee\",                          &bumpfee,                       {\"txid\", \"options\"} },\n+    { \"wallet\",             \"dumpprivkey\",                      &dumpprivkey,                   {\"address\"}  },\n+    { \"wallet\",             \"dumpwallet\",                       &dumpwallet,                    {\"filename\"} },\n+    { \"wallet\",             \"encryptwallet\",                    &encryptwallet,                 {\"passphrase\"} },\n+    { \"wallet\",             \"getaccountaddress\",                &getaccountaddress,             {\"account\"} },\n+    { \"wallet\",             \"getaccount\",                       &getaccount,                    {\"address\"} },\n+    { \"wallet\",             \"getaddressesbyaccount\",            &getaddressesbyaccount,         {\"account\"} },\n+    { \"wallet\",             \"getaddressinfo\",                   &getaddressinfo,                {\"address\"} },\n+    { \"wallet\",             \"getbalance\",                       &getbalance,                    {\"account\",\"minconf\",\"include_watchonly\"} },\n+    { \"wallet\",             \"getnewaddress\",                    &getnewaddress,                 {\"account\",\"address_type\"} },\n+    { \"wallet\",             \"getrawchangeaddress\",              &getrawchangeaddress,           {\"address_type\"} },\n+    { \"wallet\",             \"getreceivedbyaccount\",             &getreceivedbyaccount,          {\"account\",\"minconf\"} },\n+    { \"wallet\",             \"getreceivedbyaddress\",             &getreceivedbyaddress,          {\"address\",\"minconf\"} },\n+    { \"wallet\",             \"gettransaction\",                   &gettransaction,                {\"txid\",\"include_watchonly\"} },\n+    { \"wallet\",             \"getunconfirmedbalance\",            &getunconfirmedbalance,         {} },\n+    { \"wallet\",             \"getwalletinfo\",                    &getwalletinfo,                 {} },\n+    { \"wallet\",             \"importmulti\",                      &importmulti,                   {\"requests\",\"options\"} },\n+    { \"wallet\",             \"importprivkey\",                    &importprivkey,                 {\"privkey\",\"label\",\"rescan\"} },\n+    { \"wallet\",             \"importwallet\",                     &importwallet,                  {\"filename\"} },\n+    { \"wallet\",             \"importaddress\",                    &importaddress,                 {\"address\",\"label\",\"rescan\",\"p2sh\"} },\n+    { \"wallet\",             \"importprunedfunds\",                &importprunedfunds,             {\"rawtransaction\",\"txoutproof\"} },\n+    { \"wallet\",             \"importpubkey\",                     &importpubkey,                  {\"pubkey\",\"label\",\"rescan\"} },\n+    { \"wallet\",             \"keypoolrefill\",                    &keypoolrefill,                 {\"newsize\"} },\n+    { \"wallet\",             \"listaccounts\",                     &listaccounts,                  {\"minconf\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listaddressgroupings\",             &listaddressgroupings,          {} },\n+    { \"wallet\",             \"listlockunspent\",                  &listlockunspent,               {} },\n+    { \"wallet\",             \"listreceivedbyaccount\",            &listreceivedbyaccount,         {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listreceivedbyaddress\",            &listreceivedbyaddress,         {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listsinceblock\",                   &listsinceblock,                {\"blockhash\",\"target_confirmations\",\"include_watchonly\",\"include_removed\"} },\n+    { \"wallet\",             \"listtransactions\",                 &listtransactions,              {\"account\",\"count\",\"skip\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listunspent\",                      &listunspent,                   {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\",\"query_options\"} },\n+    { \"wallet\",             \"listwallets\",                      &listwallets,                   {} },\n+    { \"wallet\",             \"lockunspent\",                      &lockunspent,                   {\"unlock\",\"transactions\"} },\n+    { \"wallet\",             \"move\",                             &movecmd,                       {\"fromaccount\",\"toaccount\",\"amount\",\"minconf\",\"comment\"} },\n+    { \"wallet\",             \"sendfrom\",                         &sendfrom,                      {\"fromaccount\",\"toaddress\",\"amount\",\"minconf\",\"comment\",\"comment_to\"} },\n+    { \"wallet\",             \"sendmany\",                         &sendmany,                      {\"fromaccount\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n+    { \"wallet\",             \"sendtoaddress\",                    &sendtoaddress,                 {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n+    { \"wallet\",             \"setaccount\",                       &setaccount,                    {\"address\",\"account\"} },\n+    { \"wallet\",             \"settxfee\",                         &settxfee,                      {\"amount\"} },\n+    { \"wallet\",             \"signmessage\",                      &signmessage,                   {\"address\",\"message\"} },\n+    { \"wallet\",             \"signrawtransactionwithwallet\",     &signrawtransactionwithwallet,  {\"hexstring\",\"prevtxs\",\"sighashtype\"} },\n+    { \"wallet\",             \"walletlock\",                       &walletlock,                    {} },\n+    { \"wallet\",             \"walletpassphrasechange\",           &walletpassphrasechange,        {\"oldpassphrase\",\"newpassphrase\"} },\n+    { \"wallet\",             \"walletpassphrase\",                 &walletpassphrase,              {\"passphrase\",\"timeout\"} },\n+    { \"wallet\",             \"removeprunedfunds\",                &removeprunedfunds,             {\"txid\"} },\n+    { \"wallet\",             \"rescanblockchain\",                 &rescanblockchain,              {\"start_height\", \"stop_height\"} },\n+\n+    { \"generating\",         \"generate\",                         &generate,                      {\"nblocks\",\"maxtries\"} },\n };\n \n void RegisterWalletRPCCommands(CRPCTable &t)"
      },
      {
        "sha": "84f161abb56374b41c55d1e1a55c827d58a96190",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -27,5 +27,5 @@ void EnsureWalletIsUnlocked(CWallet *);\n bool EnsureWalletIsAvailable(CWallet *, bool avoidException);\n \n UniValue getaddressinfo(const JSONRPCRequest& request);\n-\n+UniValue signrawtransactionwithwallet(const JSONRPCRequest& request);\n #endif //BITCOIN_WALLET_RPCWALLET_H"
      },
      {
        "sha": "ea560d160e5f578bc94e82a4c2730d2da2bf8c8b",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -2,7 +2,7 @@\n # Copyright (c) 2015-2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test transaction signing using the signrawtransaction RPC.\"\"\"\n+\"\"\"Test transaction signing using the signrawtransactionwithwallet RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n@@ -33,7 +33,7 @@ def successful_signing_test(self):\n         outputs = {'mpLQjfK79b7CCV4VMJWEWAj5Mpx8Up5zxB': 0.1}\n \n         rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        rawTxSigned = self.nodes[0].signrawtransaction(rawTx, inputs, privKeys)\n+        rawTxSigned = self.nodes[0].signrawtransactionwithkey(rawTx, privKeys, inputs)\n \n         # 1) The transaction has a complete set of signatures\n         assert 'complete' in rawTxSigned\n@@ -84,7 +84,7 @@ def script_verification_error_test(self):\n         # Make sure decoderawtransaction throws if there is extra data\n         assert_raises_rpc_error(-22, \"TX decode failed\", self.nodes[0].decoderawtransaction, rawTx + \"00\")\n \n-        rawTxSigned = self.nodes[0].signrawtransaction(rawTx, scripts, privKeys)\n+        rawTxSigned = self.nodes[0].signrawtransactionwithkey(rawTx, privKeys, scripts)\n \n         # 3) The transaction has no complete set of signatures\n         assert 'complete' in rawTxSigned\n@@ -112,7 +112,7 @@ def script_verification_error_test(self):\n         # Now test signing failure for transaction with input witnesses\n         p2wpkh_raw_tx = \"01000000000102fff7f7881a8099afa6940d42d1e7f6362bec38171ea3edf433541db4e4ad969f00000000494830450221008b9d1dc26ba6a9cb62127b02742fa9d754cd3bebf337f7a55d114c8e5cdd30be022040529b194ba3f9281a99f2b1c0a19c0489bc22ede944ccf4ecbab4cc618ef3ed01eeffffffef51e1b804cc89d182d279655c3aa89e815b1b309fe287d9b2b55d57b90ec68a0100000000ffffffff02202cb206000000001976a9148280b37df378db99f66f85c95a783a76ac7a6d5988ac9093510d000000001976a9143bde42dbee7e4dbe6a21b2d50ce2f0167faa815988ac000247304402203609e17b84f6a7d30c80bfa610b5b4542f32a8a0d5447a12fb1366d7f01cc44a0220573a954c4518331561406f90300e8f3358f51928d43c212a8caed02de67eebee0121025476c2e83188368da1ff3e292e7acafcdb3566bb0ad253f62fc70f07aeee635711000000\"\n \n-        rawTxSigned = self.nodes[0].signrawtransaction(p2wpkh_raw_tx)\n+        rawTxSigned = self.nodes[0].signrawtransactionwithwallet(p2wpkh_raw_tx)\n \n         # 7) The transaction has no complete set of signatures\n         assert 'complete' in rawTxSigned"
      },
      {
        "sha": "63169360b45e768ccf36165ab5f03c2abf0e2b64",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -472,7 +472,7 @@ def random_transaction(nodes, amount, min_fee, fee_increment, fee_variants):\n     outputs[to_node.getnewaddress()] = float(amount)\n \n     rawtx = from_node.createrawtransaction(inputs, outputs)\n-    signresult = from_node.signrawtransaction(rawtx)\n+    signresult = from_node.signrawtransactionwithwallet(rawtx)\n     txid = from_node.sendrawtransaction(signresult[\"hex\"], True)\n \n     return (txid, signresult[\"hex\"], fee)\n@@ -552,7 +552,7 @@ def create_lots_of_big_transactions(node, txouts, utxos, num, fee):\n         newtx = rawtx[0:92]\n         newtx = newtx + txouts\n         newtx = newtx + rawtx[94:]\n-        signresult = node.signrawtransaction(newtx, None, None, \"NONE\")\n+        signresult = node.signrawtransactionwithwallet(newtx, None, \"NONE\")\n         txid = node.sendrawtransaction(signresult[\"hex\"], True)\n         txids.append(txid)\n     return txids"
      },
      {
        "sha": "d742ec461831830d7a357ac6dd2a668ecfe9dcb0",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -78,7 +78,7 @@ def run_test(self):\n \n         # Use a different signature hash type to sign.  This creates an equivalent but malleated clone.\n         # Don't send the clone anywhere yet\n-        tx1_clone = self.nodes[0].signrawtransaction(clone_raw, None, None, \"ALL|ANYONECANPAY\")\n+        tx1_clone = self.nodes[0].signrawtransactionwithwallet(clone_raw, None, \"ALL|ANYONECANPAY\")\n         assert_equal(tx1_clone[\"complete\"], True)\n \n         # Have node0 mine a block, if requested:"
      }
    ]
  },
  {
    "sha": "eefff65a4b0852587e0b06d93c33e2ad439d34e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWZmZjY1YTRiMDg1MjU4N2UwYjA2ZDkzYzMzZTJhZDQzOWQzNGU3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-09-05T23:49:18Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-02-17T16:42:01Z"
      },
      "message": "scripted-diff: change signrawtransaction to signrawtransactionwithwallet in tests\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/\\<signrawtransaction\\>/signrawtransactionwithwallet/g' test/functional/*.py\nsed -i 's/\\<signrawtransaction\\>/signrawtransactionwithwallet/g' test/functional/test_framework/*.py\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "0f959cdd9ba5d0c1e1185efcc16e008f91f0558f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f959cdd9ba5d0c1e1185efcc16e008f91f0558f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eefff65a4b0852587e0b06d93c33e2ad439d34e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eefff65a4b0852587e0b06d93c33e2ad439d34e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eefff65a4b0852587e0b06d93c33e2ad439d34e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eefff65a4b0852587e0b06d93c33e2ad439d34e7/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8"
      }
    ],
    "stats": {
      "total": 124,
      "additions": 62,
      "deletions": 62
    },
    "files": [
      {
        "sha": "e5db9e18c72c68aa4e747cef85b6d1d37cf34099",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -70,7 +70,7 @@ def test_disable_flag(self):\n         tx1.vin = [CTxIn(COutPoint(int(utxo[\"txid\"], 16), utxo[\"vout\"]), nSequence=sequence_value)] \n         tx1.vout = [CTxOut(value, CScript([b'a']))]\n \n-        tx1_signed = self.nodes[0].signrawtransaction(ToHex(tx1))[\"hex\"]\n+        tx1_signed = self.nodes[0].signrawtransactionwithwallet(ToHex(tx1))[\"hex\"]\n         tx1_id = self.nodes[0].sendrawtransaction(tx1_signed)\n         tx1_id = int(tx1_id, 16)\n \n@@ -176,7 +176,7 @@ def test_sequence_lock_confirmed_inputs(self):\n             # Overestimate the size of the tx - signatures should be less than 120 bytes, and leave 50 for the output\n             tx_size = len(ToHex(tx))//2 + 120*num_inputs + 50\n             tx.vout.append(CTxOut(int(value-self.relayfee*tx_size*COIN/1000), CScript([b'a'])))\n-            rawtx = self.nodes[0].signrawtransaction(ToHex(tx))[\"hex\"]\n+            rawtx = self.nodes[0].signrawtransactionwithwallet(ToHex(tx))[\"hex\"]\n \n             if (using_sequence_locks and not should_pass):\n                 # This transaction should be rejected\n@@ -205,7 +205,7 @@ def test_sequence_lock_unconfirmed_inputs(self):\n         tx2.nVersion = 2\n         tx2.vin = [CTxIn(COutPoint(tx1.sha256, 0), nSequence=0)]\n         tx2.vout = [CTxOut(int(tx1.vout[0].nValue - self.relayfee*COIN), CScript([b'a']))]\n-        tx2_raw = self.nodes[0].signrawtransaction(ToHex(tx2))[\"hex\"]\n+        tx2_raw = self.nodes[0].signrawtransactionwithwallet(ToHex(tx2))[\"hex\"]\n         tx2 = FromHex(tx2, tx2_raw)\n         tx2.rehash()\n \n@@ -278,7 +278,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         utxos = self.nodes[0].listunspent()\n         tx5.vin.append(CTxIn(COutPoint(int(utxos[0][\"txid\"], 16), utxos[0][\"vout\"]), nSequence=1))\n         tx5.vout[0].nValue += int(utxos[0][\"amount\"]*COIN)\n-        raw_tx5 = self.nodes[0].signrawtransaction(ToHex(tx5))[\"hex\"]\n+        raw_tx5 = self.nodes[0].signrawtransactionwithwallet(ToHex(tx5))[\"hex\"]\n \n         assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, raw_tx5)\n \n@@ -338,7 +338,7 @@ def test_bip68_not_consensus(self):\n         tx2.vout = [CTxOut(int(tx1.vout[0].nValue - self.relayfee*COIN), CScript([b'a']))]\n \n         # sign tx2\n-        tx2_raw = self.nodes[0].signrawtransaction(ToHex(tx2))[\"hex\"]\n+        tx2_raw = self.nodes[0].signrawtransactionwithwallet(ToHex(tx2))[\"hex\"]\n         tx2 = FromHex(tx2, tx2_raw)\n         tx2.rehash()\n \n@@ -388,7 +388,7 @@ def test_version2_relay(self):\n         rawtxfund = self.nodes[1].fundrawtransaction(rawtx)['hex']\n         tx = FromHex(CTransaction(), rawtxfund)\n         tx.nVersion = 2\n-        tx_signed = self.nodes[1].signrawtransaction(ToHex(tx))[\"hex\"]\n+        tx_signed = self.nodes[1].signrawtransactionwithwallet(ToHex(tx))[\"hex\"]\n         self.nodes[1].sendrawtransaction(tx_signed)\n \n if __name__ == '__main__':"
      },
      {
        "sha": "71d3d040022c07c981cee5af85d40acf025b4286",
        "filename": "test/functional/feature_bip9_softforks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_bip9_softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_bip9_softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip9_softforks.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -51,7 +51,7 @@ def create_transaction(self, node, coinbase, to_address, amount):\n         return tx\n \n     def sign_transaction(self, node, tx):\n-        signresult = node.signrawtransaction(bytes_to_hex_str(tx.serialize()))\n+        signresult = node.signrawtransactionwithwallet(bytes_to_hex_str(tx.serialize()))\n         tx = CTransaction()\n         f = BytesIO(hex_str_to_bytes(signresult['hex']))\n         tx.deserialize(f)"
      },
      {
        "sha": "e9a8945e76c01281eecd098a31f9f3dced9b867a",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -41,7 +41,7 @@ def cltv_validate(node, tx, height):\n     tx.nLockTime = height\n \n     # Need to re-sign, since nSequence and nLockTime changed\n-    signed_result = node.signrawtransaction(ToHex(tx))\n+    signed_result = node.signrawtransactionwithwallet(ToHex(tx))\n     new_tx = CTransaction()\n     new_tx.deserialize(BytesIO(hex_str_to_bytes(signed_result['hex'])))\n \n@@ -54,7 +54,7 @@ def create_transaction(node, coinbase, to_address, amount):\n     inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n     outputs = { to_address : amount }\n     rawtx = node.createrawtransaction(inputs, outputs)\n-    signresult = node.signrawtransaction(rawtx)\n+    signresult = node.signrawtransactionwithwallet(rawtx)\n     tx = CTransaction()\n     tx.deserialize(BytesIO(hex_str_to_bytes(signresult['hex'])))\n     return tx"
      },
      {
        "sha": "8b5e5681e459d8d5c62d07e60a631092147db975",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -118,7 +118,7 @@ def create_transaction(self, node, txid, to_address, amount):\n \n     def sign_transaction(self, node, unsignedtx):\n         rawtx = ToHex(unsignedtx)\n-        signresult = node.signrawtransaction(rawtx)\n+        signresult = node.signrawtransactionwithwallet(rawtx)\n         tx = CTransaction()\n         f = BytesIO(hex_str_to_bytes(signresult['hex']))\n         tx.deserialize(f)"
      },
      {
        "sha": "cef257cf9b8286aefd9aa9b37170a3967d7e2dbf",
        "filename": "test/functional/feature_dbcrash.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dbcrash.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -206,7 +206,7 @@ def generate_small_transactions(self, node, count, utxo_list):\n                 tx.vout.append(CTxOut(output_amount, hex_str_to_bytes(utxo['scriptPubKey'])))\n \n             # Sign and send the transaction to get into the mempool\n-            tx_signed_hex = node.signrawtransaction(ToHex(tx))['hex']\n+            tx_signed_hex = node.signrawtransactionwithwallet(ToHex(tx))['hex']\n             node.sendrawtransaction(tx_signed_hex)\n             num_transactions += 1\n "
      },
      {
        "sha": "02dcc3e55dcb37b68e25e776fea57e4ba839e7e6",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -42,7 +42,7 @@ def create_transaction(node, coinbase, to_address, amount):\n     inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n     outputs = { to_address : amount }\n     rawtx = node.createrawtransaction(inputs, outputs)\n-    signresult = node.signrawtransaction(rawtx)\n+    signresult = node.signrawtransactionwithwallet(rawtx)\n     tx = CTransaction()\n     tx.deserialize(BytesIO(hex_str_to_bytes(signresult['hex'])))\n     return tx"
      },
      {
        "sha": "8a56d3eefa4852ec0a4101ba786ef6e5d03cefbd",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -91,7 +91,7 @@ def split_inputs(from_node, txins, txouts, initial_split=False):\n     # If this is the initial split we actually need to sign the transaction\n     # Otherwise we just need to insert the proper ScriptSig\n     if (initial_split):\n-        completetx = from_node.signrawtransaction(ToHex(tx))[\"hex\"]\n+        completetx = from_node.signrawtransactionwithwallet(ToHex(tx))[\"hex\"]\n     else:\n         tx.vin[0].scriptSig = SCRIPT_SIG[prevtxout[\"vout\"]]\n         completetx = ToHex(tx)"
      },
      {
        "sha": "7db6a03b452084455ea1cd772c19935ed1d1f105",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -102,7 +102,7 @@ def create_transaction(self, node, txid, to_address, amount):\n         inputs = [{ \"txid\" : txid, \"vout\" : 0}]\n         outputs = { to_address : amount }\n         rawtx = node.createrawtransaction(inputs, outputs)\n-        signresult = node.signrawtransaction(rawtx)\n+        signresult = node.signrawtransactionwithwallet(rawtx)\n         tx = CTransaction()\n         f = BytesIO(hex_str_to_bytes(signresult['hex']))\n         tx.deserialize(f)"
      },
      {
        "sha": "d6ab5ecc37603ab09308763aea53bb255eac0261",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -42,7 +42,7 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n     tx2.vout = [CTxOut(amount, scriptPubKey)]\n     tx2.rehash()\n \n-    signed_tx = node.signrawtransaction(txToHex(tx2))\n+    signed_tx = node.signrawtransactionwithwallet(txToHex(tx2))\n \n     txid = node.sendrawtransaction(signed_tx['hex'], True)\n "
      },
      {
        "sha": "fa1732c4c5512d9d73fe62b281a17d021873a2ec",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -221,7 +221,7 @@ def run_test(self):\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(int(txid1, 16), 0), b''))\n         tx.vout.append(CTxOut(int(49.99*COIN), CScript([OP_TRUE])))\n-        tx2_hex = self.nodes[0].signrawtransaction(ToHex(tx))['hex']\n+        tx2_hex = self.nodes[0].signrawtransactionwithwallet(ToHex(tx))['hex']\n         txid2 = self.nodes[0].sendrawtransaction(tx2_hex)\n         tx = FromHex(CTransaction(), tx2_hex)\n         assert(not tx.wit.is_null())\n@@ -559,7 +559,7 @@ def run_test(self):\n \n             self.nodes[1].importaddress(scriptPubKey, \"\", False)\n             rawtxfund = self.nodes[1].fundrawtransaction(transaction)['hex']\n-            rawtxfund = self.nodes[1].signrawtransaction(rawtxfund)[\"hex\"]\n+            rawtxfund = self.nodes[1].signrawtransactionwithwallet(rawtxfund)[\"hex\"]\n             txid = self.nodes[1].sendrawtransaction(rawtxfund)\n \n             assert_equal(self.nodes[1].gettransaction(txid, True)[\"txid\"], txid)\n@@ -578,7 +578,7 @@ def mine_and_test_listunspent(self, script_list, ismine):\n         for i in script_list:\n             tx.vout.append(CTxOut(10000000, i))\n         tx.rehash()\n-        signresults = self.nodes[0].signrawtransaction(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n+        signresults = self.nodes[0].signrawtransactionwithwallet(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n         txid = self.nodes[0].sendrawtransaction(signresults, True)\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n@@ -630,7 +630,7 @@ def create_and_mine_tx_from_txids(self, txids, success = True):\n                 tx.vin.append(CTxIn(COutPoint(int('0x'+i,0), j)))\n         tx.vout.append(CTxOut(0, CScript()))\n         tx.rehash()\n-        signresults = self.nodes[0].signrawtransaction(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n+        signresults = self.nodes[0].signrawtransactionwithwallet(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n         self.nodes[0].sendrawtransaction(signresults, True)\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)"
      },
      {
        "sha": "47f7efd3e78b2bc1376dfe7b4f65a232d3efa339",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -32,7 +32,7 @@ def run_test(self):\n         self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n         txF = self.nodes[0].fundrawtransaction(tx)\n         self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransaction(txF['hex'])\n+        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n         txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n \n         relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n@@ -57,7 +57,7 @@ def run_test(self):\n         tx = self.nodes[0].createrawtransaction(inputs, outputs)\n         # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n         txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransaction(txF['hex'])\n+        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n         assert_raises_rpc_error(-26, \"mempool min fee not met, 166 < 411 (code 66)\", self.nodes[0].sendrawtransaction, txFS['hex'])\n \n if __name__ == '__main__':"
      },
      {
        "sha": "23797d83db3dbad0443be87e74dc05fe8635a917",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -25,7 +25,7 @@ def chain_transaction(self, node, parent_txid, vout, value, fee, num_outputs):\n         for i in range(num_outputs):\n             outputs[node.getnewaddress()] = send_value\n         rawtx = node.createrawtransaction(inputs, outputs)\n-        signedtx = node.signrawtransaction(rawtx)\n+        signedtx = node.signrawtransactionwithwallet(rawtx)\n         txid = node.sendrawtransaction(signedtx['hex'])\n         fulltx = node.getrawtransaction(txid, 1)\n         assert(len(fulltx['vout']) == num_outputs) # make sure we didn't generate a change output\n@@ -205,7 +205,7 @@ def run_test(self):\n         for i in range(2):\n             outputs[self.nodes[0].getnewaddress()] = send_value\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        signedtx = self.nodes[0].signrawtransaction(rawtx)\n+        signedtx = self.nodes[0].signrawtransactionwithwallet(rawtx)\n         txid = self.nodes[0].sendrawtransaction(signedtx['hex'])\n         tx0_id = txid\n         value = send_value\n@@ -229,7 +229,7 @@ def run_test(self):\n         inputs = [ {'txid' : tx1_id, 'vout': 0}, {'txid' : txid, 'vout': 0} ]\n         outputs = { self.nodes[0].getnewaddress() : send_value + value - 4*fee }\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        signedtx = self.nodes[0].signrawtransaction(rawtx)\n+        signedtx = self.nodes[0].signrawtransactionwithwallet(rawtx)\n         txid = self.nodes[0].sendrawtransaction(signedtx['hex'])\n         sync_mempools(self.nodes)\n         "
      },
      {
        "sha": "eabed5d63379a9baca93e9139d45dc01579ac2c5",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -48,7 +48,7 @@ def run_test(self):\n         # Set the time lock\n         timelock_tx = timelock_tx.replace(\"ffffffff\", \"11111191\", 1)\n         timelock_tx = timelock_tx[:-8] + hex(self.nodes[0].getblockcount() + 2)[2:] + \"000000\"\n-        timelock_tx = self.nodes[0].signrawtransaction(timelock_tx)[\"hex\"]\n+        timelock_tx = self.nodes[0].signrawtransactionwithwallet(timelock_tx)[\"hex\"]\n         # This will raise an exception because the timelock transaction is too immature to spend\n         assert_raises_rpc_error(-26, \"non-final\", self.nodes[0].sendrawtransaction, timelock_tx)\n "
      },
      {
        "sha": "32e2b47fc9d737eae508dee45829f0f9a132463d",
        "filename": "test/functional/mining_prioritisetransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/mining_prioritisetransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/mining_prioritisetransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_prioritisetransaction.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -116,7 +116,7 @@ def run_test(self):\n         inputs.append({\"txid\" : utxo[\"txid\"], \"vout\" : utxo[\"vout\"]})\n         outputs[self.nodes[0].getnewaddress()] = utxo[\"amount\"]\n         raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        tx_hex = self.nodes[0].signrawtransaction(raw_tx)[\"hex\"]\n+        tx_hex = self.nodes[0].signrawtransactionwithwallet(raw_tx)[\"hex\"]\n         tx_id = self.nodes[0].decoderawtransaction(tx_hex)[\"txid\"]\n \n         # This will raise an exception due to min relay fee not being met"
      },
      {
        "sha": "5fb9a361d9f9b4604863645339fad579115660a5",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -449,7 +449,7 @@ def run_test(self):\n         rawtx = self.nodes[2].createrawtransaction(inputs, outputs)\n         fundedTx = self.nodes[2].fundrawtransaction(rawtx)\n \n-        signedTx = self.nodes[2].signrawtransaction(fundedTx['hex'])\n+        signedTx = self.nodes[2].signrawtransactionwithwallet(fundedTx['hex'])\n         txId = self.nodes[2].sendrawtransaction(signedTx['hex'])\n         self.sync_all()\n         self.nodes[1].generate(1)\n@@ -503,7 +503,7 @@ def run_test(self):\n \n         #now we need to unlock\n         self.nodes[1].walletpassphrase(\"test\", 600)\n-        signedTx = self.nodes[1].signrawtransaction(fundedTx['hex'])\n+        signedTx = self.nodes[1].signrawtransactionwithwallet(fundedTx['hex'])\n         txId = self.nodes[1].sendrawtransaction(signedTx['hex'])\n         self.nodes[1].generate(1)\n         self.sync_all()\n@@ -564,7 +564,7 @@ def run_test(self):\n         outputs = {self.nodes[0].getnewaddress():0.15,self.nodes[0].getnewaddress():0.04}\n         rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n         fundedTx = self.nodes[1].fundrawtransaction(rawtx)\n-        fundedAndSignedTx = self.nodes[1].signrawtransaction(fundedTx['hex'])\n+        fundedAndSignedTx = self.nodes[1].signrawtransactionwithwallet(fundedTx['hex'])\n         txId = self.nodes[1].sendrawtransaction(fundedAndSignedTx['hex'])\n         self.sync_all()\n         self.nodes[0].generate(1)\n@@ -622,9 +622,9 @@ def run_test(self):\n         assert_greater_than(result[\"changepos\"], -1)\n         assert_equal(result[\"fee\"] + res_dec[\"vout\"][result[\"changepos\"]][\"value\"], watchonly_amount / 10)\n \n-        signedtx = self.nodes[3].signrawtransaction(result[\"hex\"])\n+        signedtx = self.nodes[3].signrawtransactionwithwallet(result[\"hex\"])\n         assert(not signedtx[\"complete\"])\n-        signedtx = self.nodes[0].signrawtransaction(signedtx[\"hex\"])\n+        signedtx = self.nodes[0].signrawtransactionwithwallet(signedtx[\"hex\"])\n         assert(signedtx[\"complete\"])\n         self.nodes[0].sendrawtransaction(signedtx[\"hex\"])\n         self.nodes[0].generate(1)"
      },
      {
        "sha": "0dd7372e6bfb776d0cc5f5753d54dd74ae287d41",
        "filename": "test/functional/rpc_listtransactions.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/rpc_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/rpc_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_listtransactions.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -131,7 +131,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         inputs = [{\"txid\":utxo_to_use[\"txid\"], \"vout\":utxo_to_use[\"vout\"]}]\n         outputs = {self.nodes[0].getnewaddress(): 0.999}\n         tx2 = self.nodes[1].createrawtransaction(inputs, outputs)\n-        tx2_signed = self.nodes[1].signrawtransaction(tx2)[\"hex\"]\n+        tx2_signed = self.nodes[1].signrawtransactionwithwallet(tx2)[\"hex\"]\n         txid_2 = self.nodes[1].sendrawtransaction(tx2_signed)\n \n         # ...and check the result\n@@ -148,7 +148,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         tx3_modified = txFromHex(tx3)\n         tx3_modified.vin[0].nSequence = 0\n         tx3 = bytes_to_hex_str(tx3_modified.serialize())\n-        tx3_signed = self.nodes[0].signrawtransaction(tx3)['hex']\n+        tx3_signed = self.nodes[0].signrawtransactionwithwallet(tx3)['hex']\n         txid_3 = self.nodes[0].sendrawtransaction(tx3_signed)\n \n         assert(is_opt_in(self.nodes[0], txid_3))\n@@ -162,7 +162,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         inputs = [{\"txid\": txid_3, \"vout\":utxo_to_use[\"vout\"]}]\n         outputs = {self.nodes[0].getnewaddress(): 0.997}\n         tx4 = self.nodes[1].createrawtransaction(inputs, outputs)\n-        tx4_signed = self.nodes[1].signrawtransaction(tx4)[\"hex\"]\n+        tx4_signed = self.nodes[1].signrawtransactionwithwallet(tx4)[\"hex\"]\n         txid_4 = self.nodes[1].sendrawtransaction(tx4_signed)\n \n         assert(not is_opt_in(self.nodes[1], txid_4))\n@@ -174,7 +174,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         tx3_b = tx3_modified\n         tx3_b.vout[0].nValue -= int(Decimal(\"0.004\") * COIN) # bump the fee\n         tx3_b = bytes_to_hex_str(tx3_b.serialize())\n-        tx3_b_signed = self.nodes[0].signrawtransaction(tx3_b)['hex']\n+        tx3_b_signed = self.nodes[0].signrawtransactionwithwallet(tx3_b)['hex']\n         txid_3b = self.nodes[0].sendrawtransaction(tx3_b_signed, True)\n         assert(is_opt_in(self.nodes[0], txid_3b))\n "
      },
      {
        "sha": "e074f5bd7436868ed2dc9f69419c7bcf72975401",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -6,7 +6,7 @@\n \n Test the following RPCs:\n    - createrawtransaction\n-   - signrawtransaction\n+   - signrawtransactionwithwallet\n    - sendrawtransaction\n    - decoderawtransaction\n    - getrawtransaction\n@@ -104,7 +104,7 @@ def run_test(self):\n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1}] #won't exists\n         outputs = { self.nodes[0].getnewaddress() : 4.998 }\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n-        rawtx   = self.nodes[2].signrawtransaction(rawtx)\n+        rawtx   = self.nodes[2].signrawtransactionwithwallet(rawtx)\n \n         # This will raise an exception since there are missing inputs\n         assert_raises_rpc_error(-25, \"Missing inputs\", self.nodes[2].sendrawtransaction, rawtx['hex'])\n@@ -202,10 +202,10 @@ def run_test(self):\n         inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"amount\" : vout['value']}]\n         outputs = { self.nodes[0].getnewaddress() : 2.19 }\n         rawTx = self.nodes[2].createrawtransaction(inputs, outputs)\n-        rawTxPartialSigned = self.nodes[1].signrawtransaction(rawTx, inputs)\n+        rawTxPartialSigned = self.nodes[1].signrawtransactionwithwallet(rawTx, inputs)\n         assert_equal(rawTxPartialSigned['complete'], False) #node1 only has one key, can't comp. sign the tx\n \n-        rawTxSigned = self.nodes[2].signrawtransaction(rawTx, inputs)\n+        rawTxSigned = self.nodes[2].signrawtransactionwithwallet(rawTx, inputs)\n         assert_equal(rawTxSigned['complete'], True) #node2 can sign the tx compl., own two of three keys\n         self.nodes[2].sendrawtransaction(rawTxSigned['hex'])\n         rawTx = self.nodes[0].decoderawtransaction(rawTxSigned['hex'])\n@@ -247,11 +247,11 @@ def run_test(self):\n         inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"redeemScript\" : mSigObjValid['hex'], \"amount\" : vout['value']}]\n         outputs = { self.nodes[0].getnewaddress() : 2.19 }\n         rawTx2 = self.nodes[2].createrawtransaction(inputs, outputs)\n-        rawTxPartialSigned1 = self.nodes[1].signrawtransaction(rawTx2, inputs)\n+        rawTxPartialSigned1 = self.nodes[1].signrawtransactionwithwallet(rawTx2, inputs)\n         self.log.info(rawTxPartialSigned1)\n         assert_equal(rawTxPartialSigned['complete'], False) #node1 only has one key, can't comp. sign the tx\n \n-        rawTxPartialSigned2 = self.nodes[2].signrawtransaction(rawTx2, inputs)\n+        rawTxPartialSigned2 = self.nodes[2].signrawtransactionwithwallet(rawTx2, inputs)\n         self.log.info(rawTxPartialSigned2)\n         assert_equal(rawTxPartialSigned2['complete'], False) #node2 only has one key, can't comp. sign the tx\n         rawTxComb = self.nodes[2].combinerawtransaction([rawTxPartialSigned1['hex'], rawTxPartialSigned2['hex']])"
      },
      {
        "sha": "c52a7397dc85ecc20fcf8c39d7a5b5d33db0e29e",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -34,9 +34,9 @@ def run_test(self):\n \n         node0utxos = self.nodes[0].listunspent(1)\n         tx1 = self.nodes[0].createrawtransaction([node0utxos.pop()], {self.nodes[1].getnewaddress(): 49.99})\n-        txid1 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransaction(tx1)[\"hex\"])\n+        txid1 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransactionwithwallet(tx1)[\"hex\"])\n         tx2 = self.nodes[0].createrawtransaction([node0utxos.pop()], {self.nodes[1].getnewaddress(): 49.99})\n-        txid2 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransaction(tx2)[\"hex\"])\n+        txid2 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransactionwithwallet(tx2)[\"hex\"])\n         # This will raise an exception because the transaction is not yet in a block\n         assert_raises_rpc_error(-5, \"Transaction not yet in block\", self.nodes[0].gettxoutproof, [txid1])\n \n@@ -55,7 +55,7 @@ def run_test(self):\n \n         txin_spent = self.nodes[1].listunspent(1).pop()\n         tx3 = self.nodes[1].createrawtransaction([txin_spent], {self.nodes[0].getnewaddress(): 49.98})\n-        txid3 = self.nodes[0].sendrawtransaction(self.nodes[1].signrawtransaction(tx3)[\"hex\"])\n+        txid3 = self.nodes[0].sendrawtransaction(self.nodes[1].signrawtransactionwithwallet(tx3)[\"hex\"])\n         self.nodes[0].generate(1)\n         self.sync_all()\n "
      },
      {
        "sha": "43982cd09ada0c589ce5981fe18e84d87d493cc8",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -160,7 +160,7 @@ def create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount):\n def send_to_witness(use_p2wsh, node, utxo, pubkey, encode_p2sh, amount, sign=True, insert_redeem_script=\"\"):\n     tx_to_witness = create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount)\n     if (sign):\n-        signed = node.signrawtransaction(tx_to_witness)\n+        signed = node.signrawtransactionwithwallet(tx_to_witness)\n         assert(\"errors\" not in signed or len([\"errors\"]) == 0)\n         return node.sendrawtransaction(signed[\"hex\"])\n     else:"
      },
      {
        "sha": "34a21ff8fe136c0b063b69ead137aa26fdd06776",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -499,7 +499,7 @@ def create_confirmed_utxos(fee, node, count):\n         outputs[addr1] = satoshi_round(send_value / 2)\n         outputs[addr2] = satoshi_round(send_value / 2)\n         raw_tx = node.createrawtransaction(inputs, outputs)\n-        signed_tx = node.signrawtransaction(raw_tx)[\"hex\"]\n+        signed_tx = node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n         node.sendrawtransaction(signed_tx)\n \n     while (node.getmempoolinfo()['size'] > 0):\n@@ -533,7 +533,7 @@ def create_tx(node, coinbase, to_address, amount):\n     inputs = [{\"txid\": coinbase, \"vout\": 0}]\n     outputs = {to_address: amount}\n     rawtx = node.createrawtransaction(inputs, outputs)\n-    signresult = node.signrawtransaction(rawtx)\n+    signresult = node.signrawtransactionwithwallet(rawtx)\n     assert_equal(signresult[\"complete\"], True)\n     return signresult[\"hex\"]\n "
      },
      {
        "sha": "7e0635d80f7ec5af5019bc763f7aae46342ba040",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -55,7 +55,7 @@ def run_test(self):\n \n         outputs[self.nodes[0].getnewaddress()] = Decimal(\"14.99998\")\n         outputs[self.nodes[1].getnewaddress()] = Decimal(\"5\")\n-        signed = self.nodes[0].signrawtransaction(self.nodes[0].createrawtransaction(inputs, outputs))\n+        signed = self.nodes[0].signrawtransactionwithwallet(self.nodes[0].createrawtransaction(inputs, outputs))\n         txAB1 = self.nodes[0].sendrawtransaction(signed[\"hex\"])\n \n         # Identify the 14.99998btc output\n@@ -67,7 +67,7 @@ def run_test(self):\n         inputs.append({\"txid\":txC, \"vout\":nC})\n         outputs = {}\n         outputs[self.nodes[0].getnewaddress()] = Decimal(\"24.9996\")\n-        signed2 = self.nodes[0].signrawtransaction(self.nodes[0].createrawtransaction(inputs, outputs))\n+        signed2 = self.nodes[0].signrawtransactionwithwallet(self.nodes[0].createrawtransaction(inputs, outputs))\n         txABC2 = self.nodes[0].sendrawtransaction(signed2[\"hex\"])\n \n         # In mempool txs from self should increase balance from change\n@@ -138,7 +138,7 @@ def run_test(self):\n         outputs = {}\n         outputs[self.nodes[1].getnewaddress()] = Decimal(\"9.9999\")\n         tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        signed = self.nodes[0].signrawtransaction(tx)\n+        signed = self.nodes[0].signrawtransactionwithwallet(tx)\n         self.nodes[1].sendrawtransaction(signed[\"hex\"])\n         self.nodes[1].generate(1)\n "
      },
      {
        "sha": "f686cb6ea57e32de87f931a7f36b48ab1307a5f4",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -140,7 +140,7 @@ def run_test(self):\n             inputs.append({ \"txid\" : utxo[\"txid\"], \"vout\" : utxo[\"vout\"]})\n             outputs[self.nodes[2].getnewaddress(\"from1\")] = utxo[\"amount\"] - 3\n             raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            txns_to_send.append(self.nodes[0].signrawtransaction(raw_tx))\n+            txns_to_send.append(self.nodes[0].signrawtransactionwithwallet(raw_tx))\n \n         # Have node 1 (miner) send the transactions\n         self.nodes[1].sendrawtransaction(txns_to_send[0][\"hex\"], True)\n@@ -225,7 +225,7 @@ def run_test(self):\n \n         rawTx = self.nodes[1].createrawtransaction(inputs, outputs).replace(\"c0833842\", \"00000000\") #replace 11.11 with 0.0 (int32)\n         decRawTx = self.nodes[1].decoderawtransaction(rawTx)\n-        signedRawTx = self.nodes[1].signrawtransaction(rawTx)\n+        signedRawTx = self.nodes[1].signrawtransactionwithwallet(rawTx)\n         decRawTx = self.nodes[1].decoderawtransaction(signedRawTx['hex'])\n         zeroValueTxid= decRawTx['txid']\n         self.nodes[1].sendrawtransaction(signedRawTx['hex'])\n@@ -400,7 +400,7 @@ def run_test(self):\n         node0_balance = self.nodes[0].getbalance()\n         # Split into two chains\n         rawtx = self.nodes[0].createrawtransaction([{\"txid\":singletxid, \"vout\":0}], {chain_addrs[0]:node0_balance/2-Decimal('0.01'), chain_addrs[1]:node0_balance/2-Decimal('0.01')})\n-        signedtx = self.nodes[0].signrawtransaction(rawtx)\n+        signedtx = self.nodes[0].signrawtransactionwithwallet(rawtx)\n         singletxid = self.nodes[0].sendrawtransaction(signedtx[\"hex\"])\n         self.nodes[0].generate(1)\n "
      },
      {
        "sha": "3e496248fd82a51dd32c00aade00049c3a1a5d09",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -121,7 +121,7 @@ def test_segwit_bumpfee_succeeds(rbf_node, dest_address):\n         \"sequence\": BIP125_SEQUENCE_NUMBER\n     }], {dest_address: Decimal(\"0.0005\"),\n          rbf_node.getrawchangeaddress(): Decimal(\"0.0003\")})\n-    rbfsigned = rbf_node.signrawtransaction(rbfraw)\n+    rbfsigned = rbf_node.signrawtransactionwithwallet(rbfraw)\n     rbfid = rbf_node.sendrawtransaction(rbfsigned[\"hex\"])\n     assert rbfid in rbf_node.getrawmempool()\n \n@@ -150,8 +150,8 @@ def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):\n     } for utxo in utxos]\n     output_val = sum(utxo[\"amount\"] for utxo in utxos) - Decimal(\"0.001\")\n     rawtx = rbf_node.createrawtransaction(inputs, {dest_address: output_val})\n-    signedtx = rbf_node.signrawtransaction(rawtx)\n-    signedtx = peer_node.signrawtransaction(signedtx[\"hex\"])\n+    signedtx = rbf_node.signrawtransactionwithwallet(rawtx)\n+    signedtx = peer_node.signrawtransactionwithwallet(signedtx[\"hex\"])\n     rbfid = rbf_node.sendrawtransaction(signedtx[\"hex\"])\n     assert_raises_rpc_error(-4, \"Transaction contains inputs that don't belong to this wallet\",\n                           rbf_node.bumpfee, rbfid)\n@@ -162,7 +162,7 @@ def test_bumpfee_with_descendant_fails(rbf_node, rbf_node_address, dest_address)\n     # parent is send-to-self, so we don't have to check which output is change when creating the child tx\n     parent_id = spend_one_input(rbf_node, rbf_node_address)\n     tx = rbf_node.createrawtransaction([{\"txid\": parent_id, \"vout\": 0}], {dest_address: 0.00020000})\n-    tx = rbf_node.signrawtransaction(tx)\n+    tx = rbf_node.signrawtransactionwithwallet(tx)\n     rbf_node.sendrawtransaction(tx[\"hex\"])\n     assert_raises_rpc_error(-8, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n \n@@ -277,7 +277,7 @@ def spend_one_input(node, dest_address):\n     rawtx = node.createrawtransaction(\n         [tx_input], {dest_address: Decimal(\"0.00050000\"),\n                      node.getrawchangeaddress(): Decimal(\"0.00049000\")})\n-    signedtx = node.signrawtransaction(rawtx)\n+    signedtx = node.signrawtransactionwithwallet(rawtx)\n     txid = node.sendrawtransaction(signedtx[\"hex\"])\n     return txid\n "
      },
      {
        "sha": "25e27166611dd2d326d891faa08737b4be19de87",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -158,7 +158,7 @@ def test_double_spend(self):\n             'vout': utxo['vout'],\n         }]\n         txid1 = self.nodes[1].sendrawtransaction(\n-            self.nodes[1].signrawtransaction(\n+            self.nodes[1].signrawtransactionwithwallet(\n                 self.nodes[1].createrawtransaction(utxoDicts, recipientDict))['hex'])\n \n         # send from nodes[2] using utxo to nodes[3]\n@@ -167,7 +167,7 @@ def test_double_spend(self):\n             self.nodes[2].getnewaddress(): change,\n         }\n         self.nodes[2].sendrawtransaction(\n-            self.nodes[2].signrawtransaction(\n+            self.nodes[2].signrawtransactionwithwallet(\n                 self.nodes[2].createrawtransaction(utxoDicts, recipientDict2))['hex'])\n \n         # generate on both sides\n@@ -232,7 +232,7 @@ def test_double_send(self):\n             'txid': utxo['txid'],\n             'vout': utxo['vout'],\n         }]\n-        signedtxres = self.nodes[2].signrawtransaction(\n+        signedtxres = self.nodes[2].signrawtransactionwithwallet(\n                 self.nodes[2].createrawtransaction(utxoDicts, recipientDict))\n         assert signedtxres['complete']\n "
      },
      {
        "sha": "f16756eeaaa32b6cbb58dd98c92134c8d2632bb7",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -58,7 +58,7 @@ def run_test(self):\n         outputs[node1_address] = 1240\n         outputs[change_address] = 1248 - 1240 + doublespend_fee\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        doublespend = self.nodes[0].signrawtransaction(rawtx)\n+        doublespend = self.nodes[0].signrawtransactionwithwallet(rawtx)\n         assert_equal(doublespend[\"complete\"], True)\n \n         # Create two spends using 1 50 BTC coin each"
      }
    ]
  },
  {
    "sha": "d60234885bcc07b1a7f85ded7731549ec2fcfefa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjAyMzQ4ODViY2MwN2IxYTdmODVkZWQ3NzMxNTQ5ZWMyZmNmZWZh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-06-12T22:02:49Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-02-17T16:42:01Z"
      },
      "message": "Add test for signrawtransaction\n\nAdd a brief test for signrawtransaction to ensure that compatibility is maintained.",
      "tree": {
        "sha": "a483234aad7e42b19523050aacceecf1d6a7cae3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a483234aad7e42b19523050aacceecf1d6a7cae3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d60234885bcc07b1a7f85ded7731549ec2fcfefa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d60234885bcc07b1a7f85ded7731549ec2fcfefa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d60234885bcc07b1a7f85ded7731549ec2fcfefa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d60234885bcc07b1a7f85ded7731549ec2fcfefa/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eefff65a4b0852587e0b06d93c33e2ad439d34e7"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 17,
      "deletions": 7
    },
    "files": [
      {
        "sha": "18829ef4b8a14c65239cb8522a2513e171190584",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 17,
        "deletions": 7,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d60234885bcc07b1a7f85ded7731549ec2fcfefa/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d60234885bcc07b1a7f85ded7731549ec2fcfefa/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=d60234885bcc07b1a7f85ded7731549ec2fcfefa",
        "patch": "@@ -2,7 +2,7 @@\n # Copyright (c) 2015-2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test transaction signing using the signrawtransactionwithwallet RPC.\"\"\"\n+\"\"\"Test transaction signing using the signrawtransaction* RPCs.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n@@ -12,6 +12,7 @@ class SignRawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n+        self.extra_args = [[\"-deprecatedrpc=signrawtransaction\"]]\n \n     def successful_signing_test(self):\n         \"\"\"Create and sign a valid raw transaction with one input.\n@@ -36,12 +37,15 @@ def successful_signing_test(self):\n         rawTxSigned = self.nodes[0].signrawtransactionwithkey(rawTx, privKeys, inputs)\n \n         # 1) The transaction has a complete set of signatures\n-        assert 'complete' in rawTxSigned\n-        assert_equal(rawTxSigned['complete'], True)\n+        assert rawTxSigned['complete']\n \n         # 2) No script verification error occurred\n         assert 'errors' not in rawTxSigned\n \n+        # Perform the same test on signrawtransaction\n+        rawTxSigned2 = self.nodes[0].signrawtransaction(rawTx, inputs, privKeys)\n+        assert_equal(rawTxSigned, rawTxSigned2)\n+\n     def script_verification_error_test(self):\n         \"\"\"Create and sign a raw transaction with valid (vin 0), invalid (vin 1) and one missing (vin 2) input script.\n \n@@ -87,8 +91,7 @@ def script_verification_error_test(self):\n         rawTxSigned = self.nodes[0].signrawtransactionwithkey(rawTx, privKeys, scripts)\n \n         # 3) The transaction has no complete set of signatures\n-        assert 'complete' in rawTxSigned\n-        assert_equal(rawTxSigned['complete'], False)\n+        assert not rawTxSigned['complete']\n \n         # 4) Two script verification errors occurred\n         assert 'errors' in rawTxSigned\n@@ -109,14 +112,17 @@ def script_verification_error_test(self):\n         assert_equal(rawTxSigned['errors'][1]['vout'], inputs[2]['vout'])\n         assert not rawTxSigned['errors'][0]['witness']\n \n+        # Perform same test with signrawtransaction\n+        rawTxSigned2 = self.nodes[0].signrawtransaction(rawTx, scripts, privKeys)\n+        assert_equal(rawTxSigned, rawTxSigned2)\n+\n         # Now test signing failure for transaction with input witnesses\n         p2wpkh_raw_tx = \"01000000000102fff7f7881a8099afa6940d42d1e7f6362bec38171ea3edf433541db4e4ad969f00000000494830450221008b9d1dc26ba6a9cb62127b02742fa9d754cd3bebf337f7a55d114c8e5cdd30be022040529b194ba3f9281a99f2b1c0a19c0489bc22ede944ccf4ecbab4cc618ef3ed01eeffffffef51e1b804cc89d182d279655c3aa89e815b1b309fe287d9b2b55d57b90ec68a0100000000ffffffff02202cb206000000001976a9148280b37df378db99f66f85c95a783a76ac7a6d5988ac9093510d000000001976a9143bde42dbee7e4dbe6a21b2d50ce2f0167faa815988ac000247304402203609e17b84f6a7d30c80bfa610b5b4542f32a8a0d5447a12fb1366d7f01cc44a0220573a954c4518331561406f90300e8f3358f51928d43c212a8caed02de67eebee0121025476c2e83188368da1ff3e292e7acafcdb3566bb0ad253f62fc70f07aeee635711000000\"\n \n         rawTxSigned = self.nodes[0].signrawtransactionwithwallet(p2wpkh_raw_tx)\n \n         # 7) The transaction has no complete set of signatures\n-        assert 'complete' in rawTxSigned\n-        assert_equal(rawTxSigned['complete'], False)\n+        assert not rawTxSigned['complete']\n \n         # 8) Two script verification errors occurred\n         assert 'errors' in rawTxSigned\n@@ -134,6 +140,10 @@ def script_verification_error_test(self):\n         assert_equal(rawTxSigned['errors'][1]['witness'], [\"304402203609e17b84f6a7d30c80bfa610b5b4542f32a8a0d5447a12fb1366d7f01cc44a0220573a954c4518331561406f90300e8f3358f51928d43c212a8caed02de67eebee01\", \"025476c2e83188368da1ff3e292e7acafcdb3566bb0ad253f62fc70f07aeee6357\"])\n         assert not rawTxSigned['errors'][0]['witness']\n \n+        # Perform same test with signrawtransaction\n+        rawTxSigned2 = self.nodes[0].signrawtransaction(p2wpkh_raw_tx)\n+        assert_equal(rawTxSigned, rawTxSigned2)\n+\n     def run_test(self):\n         self.successful_signing_test()\n         self.script_verification_error_test()"
      }
    ]
  }
]