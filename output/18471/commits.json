[
  {
    "sha": "c182fd517db2337f61b0038ca929fcfd01f18f07",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTgyZmQ1MTdkYjIzMzdmNjFiMDAzOGNhOTI5ZmNmZDAxZjE4ZjA3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-04-07T02:06:29Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-04-07T02:06:35Z"
      },
      "message": "Do not clear validationinterface entries being executed\n\nThe previous code for MainSignalsInstance::Clear would decrement the reference\ncount of every interface, including ones that were already Unregister()ed but\nstill being executed.",
      "tree": {
        "sha": "4d8617a6260bde3b948f97f7f7e926c2ef8605d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d8617a6260bde3b948f97f7f7e926c2ef8605d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c182fd517db2337f61b0038ca929fcfd01f18f07",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c182fd517db2337f61b0038ca929fcfd01f18f07",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c182fd517db2337f61b0038ca929fcfd01f18f07",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c182fd517db2337f61b0038ca929fcfd01f18f07/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "abc145c9a4aef8ec269b7e0a3e9403cff9970fe4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abc145c9a4aef8ec269b7e0a3e9403cff9970fe4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/abc145c9a4aef8ec269b7e0a3e9403cff9970fe4"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "11000774c09da26012a56a9ff599a0874361e919",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c182fd517db2337f61b0038ca929fcfd01f18f07/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c182fd517db2337f61b0038ca929fcfd01f18f07/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=c182fd517db2337f61b0038ca929fcfd01f18f07",
        "patch": "@@ -67,8 +67,8 @@ struct MainSignalsInstance {\n     void Clear()\n     {\n         LOCK(m_mutex);\n-        for (auto it = m_list.begin(); it != m_list.end();) {\n-            it = --it->count ? std::next(it) : m_list.erase(it);\n+        for (const auto& entry : m_map) {\n+            if (!--entry.second->count) m_list.erase(entry.second);\n         }\n         m_map.clear();\n     }"
      }
    ]
  },
  {
    "sha": "c976165cdf2e63974d161b79b33691057115d817",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTc2MTY1Y2RmMmU2Mzk3NGQxNjFiNzliMzM2OTEwNTcxMTVkODE3",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-04-07T09:38:57Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-04-07T09:38:57Z"
      },
      "message": "Add RegisterSharedValidationInterface test",
      "tree": {
        "sha": "1f8b958b9bf0914108f24a5cc1517ea7934640f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f8b958b9bf0914108f24a5cc1517ea7934640f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c976165cdf2e63974d161b79b33691057115d817",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c976165cdf2e63974d161b79b33691057115d817",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c976165cdf2e63974d161b79b33691057115d817",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c976165cdf2e63974d161b79b33691057115d817/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c182fd517db2337f61b0038ca929fcfd01f18f07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c182fd517db2337f61b0038ca929fcfd01f18f07",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c182fd517db2337f61b0038ca929fcfd01f18f07"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 63,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4dc7d81893f9b01d550aaafeeb47e0cb7355bd54",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 0,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c976165cdf2e63974d161b79b33691057115d817/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c976165cdf2e63974d161b79b33691057115d817/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=c976165cdf2e63974d161b79b33691057115d817",
        "patch": "@@ -16,6 +16,7 @@\n #include <validation.h>\n #include <validationinterface.h>\n \n+#include <future>\n #include <thread>\n \n static const std::vector<unsigned char> V_OP_TRUE{OP_TRUE};\n@@ -340,4 +341,66 @@ BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n         rpc_thread.join();\n     }\n }\n+\n+// Test UnregisterSharedValidationInterface ensuring that if interface is\n+// unregistered during the middle of a callback, interface is destroyed as soon\n+// as callback returns.\n+BOOST_AUTO_TEST_CASE(release_shared)\n+{\n+    enum State { CREATING, CREATED, CALLING, CALLED, UNREGISTERED, RETURNED, DESTROYED };\n+    std::promise<bool> called;       // Wait for callback to be called before unregistering\n+    std::promise<bool> unregistered; // Wait for interface to be unregistered before returning\n+    std::promise<bool> destroyed;    // Wait for interface to be destroyed before ending test\n+\n+    class TestInterface : public CValidationInterface\n+    {\n+    public:\n+        TestInterface(State& state,\n+            std::promise<bool>& called,\n+            std::promise<bool>& unregistered,\n+            std::promise<bool>& destroyed)\n+            : m_state(state), m_called(called), m_unregistered(unregistered), m_destroyed(destroyed)\n+        {\n+            BOOST_CHECK_EQUAL(m_state, CREATING);\n+            m_state = CREATED;\n+        }\n+        void UpdatedBlockTip(const CBlockIndex*, const CBlockIndex*, bool) override\n+        {\n+            BOOST_CHECK_EQUAL(m_state, CALLING);\n+            m_state = CALLED;\n+            m_called.set_value(true);\n+            BOOST_CHECK(m_unregistered.get_future().get());\n+            BOOST_CHECK_EQUAL(m_state, UNREGISTERED);\n+            m_state = RETURNED;\n+        }\n+        virtual ~TestInterface()\n+        {\n+            BOOST_CHECK_EQUAL(m_state, RETURNED);\n+            m_state = DESTROYED;\n+            m_destroyed.set_value(true);\n+        }\n+        State& m_state;\n+        std::promise<bool>& m_called;\n+        std::promise<bool>& m_unregistered;\n+        std::promise<bool>& m_destroyed;\n+    };\n+\n+    State state = CREATING;\n+    auto test_interface = std::make_shared<TestInterface>(state, called, unregistered, destroyed);\n+    BOOST_CHECK_EQUAL(state, CREATED);\n+    state = CALLING;\n+    RegisterSharedValidationInterface(test_interface);\n+    GetMainSignals().UpdatedBlockTip(nullptr, nullptr, false);\n+    BOOST_CHECK(called.get_future().get());\n+    BOOST_CHECK_EQUAL(state, CALLED);\n+    UnregisterSharedValidationInterface(std::move(test_interface));\n+    BOOST_CHECK(!test_interface);\n+    BOOST_CHECK_EQUAL(state, CALLED);\n+    state = UNREGISTERED;\n+    UnregisterAllValidationInterfaces();\n+    unregistered.set_value(true);\n+    BOOST_CHECK(destroyed.get_future().get());\n+    BOOST_CHECK_EQUAL(state, DESTROYED);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]