[
  {
    "sha": "e8c956dd1f9ee9f15c53c96dc6d939261ddbe3d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOGM5NTZkZDFmOWVlOWYxNWM1M2M5NmRjNmQ5MzkyNjFkZGJlM2Q3",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-07-05T17:19:22Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-10-03T21:08:43Z"
      },
      "message": "don't automatically include fees via JSON-RPC, and allow forcing them to send with under the 'minimum'",
      "tree": {
        "sha": "301cbdbc1c2e60edebb54450f9b9a1874cb3dd6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/301cbdbc1c2e60edebb54450f9b9a1874cb3dd6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8c956dd1f9ee9f15c53c96dc6d939261ddbe3d7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8c956dd1f9ee9f15c53c96dc6d939261ddbe3d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8c956dd1f9ee9f15c53c96dc6d939261ddbe3d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8c956dd1f9ee9f15c53c96dc6d939261ddbe3d7/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7eb151ad0ed441d6fd598551059a9bbfb09e99e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7eb151ad0ed441d6fd598551059a9bbfb09e99e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7eb151ad0ed441d6fd598551059a9bbfb09e99e"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 55,
      "deletions": 25
    },
    "files": [
      {
        "sha": "78e7881c1efd70da0c8b616f7687e89061c71888",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8c956dd1f9ee9f15c53c96dc6d939261ddbe3d7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8c956dd1f9ee9f15c53c96dc6d939261ddbe3d7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e8c956dd1f9ee9f15c53c96dc6d939261ddbe3d7",
        "patch": "@@ -53,6 +53,7 @@ int64 nHPSTimerStart;\n // Settings\n int fGenerateBitcoins = false;\n int64 nTransactionFee = 0;\n+bool fForceFee = false;\n int fLimitProcessors = false;\n int nLimitProcessors = 1;\n int fMinimizeToTray = true;\n@@ -474,8 +475,11 @@ bool CTransaction::AcceptToMemoryPool(bool fCheckInputs, bool* pfMissingInputs)\n     return AcceptToMemoryPool(txdb, fCheckInputs, pfMissingInputs);\n }\n \n+uint64 nPooledTx = 0;\n+\n bool CTransaction::AddToMemoryPoolUnchecked()\n {\n+    printf(\"AcceptToMemoryPoolUnchecked(): size %lu\\n\",  mapTransactions.size());\n     // Add to memory pool without checking anything.  Don't call this directly,\n     // call AcceptToMemoryPool to properly check the transaction first.\n     CRITICAL_BLOCK(cs_mapTransactions)\n@@ -485,6 +489,7 @@ bool CTransaction::AddToMemoryPoolUnchecked()\n         for (int i = 0; i < vin.size(); i++)\n             mapNextTx[vin[i].prevout] = CInPoint(&mapTransactions[hash], i);\n         nTransactionsUpdated++;\n+        ++nPooledTx;\n     }\n     return true;\n }\n@@ -499,6 +504,7 @@ bool CTransaction::RemoveFromMemoryPool()\n             mapNextTx.erase(txin.prevout);\n         mapTransactions.erase(GetHash());\n         nTransactionsUpdated++;\n+        --nPooledTx;\n     }\n     return true;\n }\n@@ -2652,6 +2658,9 @@ class COrphan\n };\n \n \n+uint64 nLastBlockTx = 0;\n+uint64 nLastBlockSize = 0;\n+\n CBlock* CreateNewBlock(CReserveKey& reservekey)\n {\n     CBlockIndex* pindexPrev = pindexBest;\n@@ -2739,6 +2748,7 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n         // Collect transactions into block\n         map<uint256, CTxIndex> mapTestPool;\n         uint64 nBlockSize = 1000;\n+        uint64 nBlockTx = 0;\n         int nBlockSigOps = 100;\n         while (!mapPriority.empty())\n         {\n@@ -2770,6 +2780,7 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n             pblock->vtx.push_back(tx);\n             nBlockSize += nTxSize;\n             nBlockSigOps += nTxSigOps;\n+            ++nBlockTx;\n \n             // Add transactions that depend on this one to the priority queue\n             uint256 hash = tx.GetHash();\n@@ -2786,6 +2797,11 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n                 }\n             }\n         }\n+\n+        nLastBlockTx = nBlockTx;\n+        nLastBlockSize = nBlockSize;\n+        printf(\"CreateNewBlock(): total size %lu\\n\", nBlockSize);\n+\n     }\n     pblock->vtx[0].vout[0].nValue = GetBlockValue(pindexPrev->nHeight+1, nFees);\n "
      },
      {
        "sha": "a325376888eed553a62faac755de28f5f8c04b17",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8c956dd1f9ee9f15c53c96dc6d939261ddbe3d7/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8c956dd1f9ee9f15c53c96dc6d939261ddbe3d7/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=e8c956dd1f9ee9f15c53c96dc6d939261ddbe3d7",
        "patch": "@@ -59,7 +59,10 @@ extern CBigNum bnBestChainWork;\n extern CBigNum bnBestInvalidWork;\n extern uint256 hashBestChain;\n extern CBlockIndex* pindexBest;\n+extern uint64 nPooledTx;\n extern unsigned int nTransactionsUpdated;\n+extern uint64 nLastBlockTx;\n+extern uint64 nLastBlockSize;\n extern double dHashesPerSec;\n extern int64 nHPSTimerStart;\n extern int64 nTimeBestReceived;\n@@ -69,6 +72,7 @@ extern std::set<CWallet*> setpwalletRegistered;\n // Settings\n extern int fGenerateBitcoins;\n extern int64 nTransactionFee;\n+extern bool fForceFee;\n extern int fLimitProcessors;\n extern int nLimitProcessors;\n extern int fMinimizeToTray;"
      },
      {
        "sha": "1304727d256fc1485afaf5dc402cf27161cb1305",
        "filename": "src/noui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8c956dd1f9ee9f15c53c96dc6d939261ddbe3d7/src/noui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8c956dd1f9ee9f15c53c96dc6d939261ddbe3d7/src/noui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.h?ref=e8c956dd1f9ee9f15c53c96dc6d939261ddbe3d7",
        "patch": "@@ -52,7 +52,7 @@ inline int ThreadSafeMessageBox(const std::string& message, const std::string& c\n \n inline bool ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption, wxWindow* parent)\n {\n-    return true;\n+    return false;\n }\n \n inline void CalledSetStatusBar(const std::string& strText, int nField)"
      },
      {
        "sha": "e453e69ce423ae9d75944f241c628c0ec3156642",
        "filename": "src/rpc.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8c956dd1f9ee9f15c53c96dc6d939261ddbe3d7/src/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8c956dd1f9ee9f15c53c96dc6d939261ddbe3d7/src/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc.cpp?ref=e8c956dd1f9ee9f15c53c96dc6d939261ddbe3d7",
        "patch": "@@ -315,9 +315,13 @@ Value getinfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"keypoololdest\", (boost::int64_t)pwalletMain->GetOldestKeyPoolTime()));\n     obj.push_back(Pair(\"keypoolsize\",   pwalletMain->GetKeyPoolSize()));\n     obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(nTransactionFee)));\n+    obj.push_back(Pair(\"forcetxfee\",    fForceFee));\n     if (pwalletMain->IsCrypted())\n         obj.push_back(Pair(\"unlocked_until\", (boost::int64_t)nWalletUnlockTime));\n     obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));\n+    obj.push_back(Pair(\"pooledtx\",      (uint64_t)nPooledTx));\n+    obj.push_back(Pair(\"currentblocktx\",(uint64_t)nLastBlockTx));\n+    obj.push_back(Pair(\"currentblocksize\",(uint64_t)nLastBlockSize));\n     return obj;\n }\n \n@@ -482,7 +486,7 @@ Value settxfee(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 1)\n         throw runtime_error(\n-            \"settxfee <amount>\\n\"\n+            \"settxfee <amount> [force]\\n\"\n             \"<amount> is a real and is rounded to the nearest 0.00000001\");\n \n     // Amount\n@@ -491,6 +495,8 @@ Value settxfee(const Array& params, bool fHelp)\n         nAmount = AmountFromValue(params[0]);        // rejects 0.0 amounts\n \n     nTransactionFee = nAmount;\n+    if (params.size() > 1)\n+        fForceFee = params[1].get_bool();\n     return true;\n }\n \n@@ -523,7 +529,7 @@ Value sendtoaddress(const Array& params, bool fHelp)\n     if (pwalletMain->IsLocked())\n         throw JSONRPCError(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n \n-    string strError = pwalletMain->SendMoneyToBitcoinAddress(address, nAmount, wtx);\n+    string strError = pwalletMain->SendMoneyToBitcoinAddress(address, nAmount, wtx, fForceFee);\n     if (strError != \"\")\n         throw JSONRPCError(-4, strError);\n \n@@ -786,7 +792,7 @@ Value sendfrom(const Array& params, bool fHelp)\n         throw JSONRPCError(-6, \"Account has insufficient funds\");\n \n     // Send\n-    string strError = pwalletMain->SendMoneyToBitcoinAddress(address, nAmount, wtx);\n+    string strError = pwalletMain->SendMoneyToBitcoinAddress(address, nAmount, wtx, fForceFee);\n     if (strError != \"\")\n         throw JSONRPCError(-4, strError);\n \n@@ -850,7 +856,7 @@ Value sendmany(const Array& params, bool fHelp)\n     // Send\n     CReserveKey keyChange(pwalletMain);\n     int64 nFeeRequired = 0;\n-    bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired);\n+    bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, fForceFee);\n     if (!fCreated)\n     {\n         if (totalAmount + nFeeRequired > pwalletMain->GetBalance())\n@@ -2289,6 +2295,7 @@ int CommandLineRPC(int argc, char *argv[])\n         if (strMethod == \"setgenerate\"            && n > 1) ConvertTo<boost::int64_t>(params[1]);\n         if (strMethod == \"sendtoaddress\"          && n > 1) ConvertTo<double>(params[1]);\n         if (strMethod == \"settxfee\"               && n > 0) ConvertTo<double>(params[0]);\n+        if (strMethod == \"settxfee\"               && n > 1) ConvertTo<bool>(params[1]);\n         if (strMethod == \"getamountreceived\"      && n > 1) ConvertTo<boost::int64_t>(params[1]); // deprecated\n         if (strMethod == \"getreceivedbyaddress\"   && n > 1) ConvertTo<boost::int64_t>(params[1]);\n         if (strMethod == \"getreceivedbyaccount\"   && n > 1) ConvertTo<boost::int64_t>(params[1]);"
      },
      {
        "sha": "5dd95c7c10b67e13b5645bb2c7c119a947653591",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 16,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8c956dd1f9ee9f15c53c96dc6d939261ddbe3d7/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8c956dd1f9ee9f15c53c96dc6d939261ddbe3d7/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=e8c956dd1f9ee9f15c53c96dc6d939261ddbe3d7",
        "patch": "@@ -884,7 +884,7 @@ bool CWallet::SelectCoins(int64 nTargetValue, set<pair<const CWalletTx*,unsigned\n \n \n \n-bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet)\n+bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet, bool fForceFee)\n {\n     int64 nValue = 0;\n     BOOST_FOREACH (const PAIRTYPE(CScript, int64)& s, vecSend)\n@@ -931,7 +931,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n                 int64 nChange = nValueIn - nValue - nFeeRet;\n                 // if sub-cent change is required, the fee must be raised to at least MIN_TX_FEE\n                 // or until nChange becomes zero\n-                if (nFeeRet < MIN_TX_FEE && nChange > 0 && nChange < CENT)\n+                if (!fForceFee && nFeeRet < MIN_TX_FEE && nChange > 0 && nChange < CENT)\n                 {\n                     int64 nMoveToFee = min(nChange, MIN_TX_FEE - nFeeRet);\n                     nChange -= nMoveToFee;\n@@ -981,14 +981,17 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n                     return false;\n                 dPriority /= nBytes;\n \n-                // Check that enough fee is included\n-                int64 nPayFee = nTransactionFee * (1 + (int64)nBytes / 1000);\n-                bool fAllowFree = CTransaction::AllowFree(dPriority);\n-                int64 nMinFee = wtxNew.GetMinFee(1, fAllowFree);\n-                if (nFeeRet < max(nPayFee, nMinFee))\n+                if (!fForceFee)\n                 {\n-                    nFeeRet = max(nPayFee, nMinFee);\n-                    continue;\n+                    // Check that enough fee is included\n+                    int64 nPayFee = nTransactionFee * (1 + (int64)nBytes / 1000);\n+                    bool fAllowFree = CTransaction::AllowFree(dPriority);\n+                    int64 nMinFee = wtxNew.GetMinFee(1, fAllowFree);\n+                    if (nFeeRet < max(nPayFee, nMinFee))\n+                    {\n+                        nFeeRet = max(nPayFee, nMinFee);\n+                        continue;\n+                    }\n                 }\n \n                 // Fill vtxPrev by copying from previous transactions vtxPrev\n@@ -1002,11 +1005,11 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n     return true;\n }\n \n-bool CWallet::CreateTransaction(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet)\n+bool CWallet::CreateTransaction(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet, bool fForceFee)\n {\n     vector< pair<CScript, int64> > vecSend;\n     vecSend.push_back(make_pair(scriptPubKey, nValue));\n-    return CreateTransaction(vecSend, wtxNew, reservekey, nFeeRet);\n+    return CreateTransaction(vecSend, wtxNew, reservekey, nFeeRet, fForceFee);\n }\n \n // Call after CreateTransaction unless you want to abort\n@@ -1063,7 +1066,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n \n \n \n-string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee)\n+string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee, fForceFee)\n {\n     CReserveKey reservekey(this);\n     int64 nFeeRequired;\n@@ -1074,7 +1077,7 @@ string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew,\n         printf(\"SendMoney() : %s\", strError.c_str());\n         return strError;\n     }\n-    if (!CreateTransaction(scriptPubKey, nValue, wtxNew, reservekey, nFeeRequired))\n+    if (!CreateTransaction(scriptPubKey, nValue, wtxNew, reservekey, nFeeRequired, fForceFee))\n     {\n         string strError;\n         if (nValue + nFeeRequired > GetBalance())\n@@ -1086,7 +1089,7 @@ string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew,\n     }\n \n     if (fAskFee && !ThreadSafeAskFee(nFeeRequired, _(\"Sending...\"), NULL))\n-        return \"ABORTED\";\n+        return strprintf(_(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds  \"), FormatMoney(nFeeRequired).c_str());\n \n     if (!CommitTransaction(wtxNew, reservekey))\n         return _(\"Error: The transaction was rejected.  This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n@@ -1097,7 +1100,7 @@ string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew,\n \n \n \n-string CWallet::SendMoneyToBitcoinAddress(const CBitcoinAddress& address, int64 nValue, CWalletTx& wtxNew, bool fAskFee)\n+string CWallet::SendMoneyToBitcoinAddress(const CBitcoinAddress& address, int64 nValue, CWalletTx& wtxNew, bool fAskFee, bool fForceFee)\n {\n     // Check amount\n     if (nValue <= 0)\n@@ -1109,7 +1112,7 @@ string CWallet::SendMoneyToBitcoinAddress(const CBitcoinAddress& address, int64\n     CScript scriptPubKey;\n     scriptPubKey.SetBitcoinAddress(address);\n \n-    return SendMoney(scriptPubKey, nValue, wtxNew, fAskFee);\n+    return SendMoney(scriptPubKey, nValue, wtxNew, fAskFee, fForceFee);\n }\n \n "
      },
      {
        "sha": "d8d1dc4644663ec2b5cffc6d9334340b36053bd0",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8c956dd1f9ee9f15c53c96dc6d939261ddbe3d7/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8c956dd1f9ee9f15c53c96dc6d939261ddbe3d7/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=e8c956dd1f9ee9f15c53c96dc6d939261ddbe3d7",
        "patch": "@@ -74,12 +74,12 @@ class CWallet : public CCryptoKeyStore\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions();\n     int64 GetBalance() const;\n-    bool CreateTransaction(const std::vector<std::pair<CScript, int64> >& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet);\n-    bool CreateTransaction(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet);\n+    bool CreateTransaction(const std::vector<std::pair<CScript, int64> >& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet, bool fForceFee=false);\n+    bool CreateTransaction(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet, bool fForceFee=false);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n     bool BroadcastTransaction(CWalletTx& wtxNew);\n-    std::string SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false);\n-    std::string SendMoneyToBitcoinAddress(const CBitcoinAddress& address, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false);\n+    std::string SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false, bool fForceFee=false);\n+    std::string SendMoneyToBitcoinAddress(const CBitcoinAddress& address, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false, bool fForceFee=false);\n \n     bool TopUpKeyPool();\n     void ReserveKeyFromKeyPool(int64& nIndex, CKeyPool& keypool);"
      }
    ]
  }
]